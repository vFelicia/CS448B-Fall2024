you're probably wondering why we need another python course on this channel well Anil has an interesting approach to teaching python this beginner's course will help you learn python by thinking and types this course teaches basic programming Concepts instead of just focusing on language syntax it's always helpful to learn from different perspectives and this may be just what you need to Learn Python hi guys my name is Anil kulkani and welcome to this course modern python where no one thinking and types now if you wanted to Learn Python if you are complete beginner or if you have been struggling to Learn Python for a time then this course is for you let me share my journey of learning python it took me a pretty long time to understand python rather many months or rather a couple of years to understand Python and finally when I started to learn more about python I could understand that I I was struggling to Learn Python because I was not able to think in types you know python is a dynamic type language so sometimes you are at lost to understand what goes well and where we have to use a particular variable or a data type or a data structure so this course is obviously designed for the people who are totally new to python or if you have or if you are struggling to Learn Python for a while now throughout this course I'll be taking you through a smaller Journey we will start by thinking at types and we will end in thinking in layers so thinking is in layers is like an architectural pattern I will I'll help you to understand what goes behind creating a production level application before we can go ahead and write python we need to do a couple of things the first thing is obviously we need to install Python and we also need to set up our development environment but before that I would like you to meet my friend Lewis now Lewis is going to help us throughout this course for learning python before you can do anything else I want you to go ahead and download all of the source code for this entire tutorial what I want you to do is just go to this link github.com octilium slash modern python101 and this is where you can find the entire source code for this entire tutorial you can just click on code and just click on download zip to download all of the files in a zip format or if you are using GitHub you can simply use this link to to clone the repo after you have downloaded all of the files this is how it's going to look so let me open up my readme and just let me open up in my preview mode okay so this is how all of the files and the folders would look like now please keep in mind that on my machine I could have a couple of more additional folders just for the sake of helping me throughout the tutorial but overall this is how it's going to look in your machine as well at any point in the future if you want to compare your code with mine you can simply click on this folders for example if we just click on this folder type system you can see there are a couple of files which I have already written for example just click on this file variables and you can see all of the code is right over here if you want to see the sequence in which we are going to learn all of these files then you can simply click on readme and here you can find the sequence for example in this one the first file would be your variables the second one would be variable rules which is right over here and so on well that's it for this video in the next video we are going to download and install python on your machine before installing python I thought it would be a very nice idea to give you a small tour of python for this I want you to open up your favorite web browser and I want you to search for python online compiler and I want you to click on this link this is for repair id.com and as you can see we have a working python environment ready for us so right on this line I want to print out modern python 101 so just replace hello world with modern python 101 and just click on the Run so as you can see we have the output of modern python 101 let's try one more simple example and this time I want to print out my name and my name is octallium on this line instead of printing modern python I want to print out my name that's it just hit the Run button one more time and you can see we have the output of octallium as you can see right in Python is as simple as writing your plain English and from the next video we will see how to install Python and how to set up our development environment you can just go to the website python.org from here let me just zoom in first okay from here just go to downloads and as you can see since I'm using Mac OS so that's why it's showing as Mac if you're working on Windows most probably it will show you on Windows and at the time of recording the latest version is 3.10.5 so I just want you to click on this and it will start the download you just have to install python just as you would install any other program just click on this it will open up a installer dialog so just click on continue continue okay agreement I agree and install now since I already have python installed I won't be installing but in your case if you don't have python installed just go ahead and click install after the installation is done I want you to open up your terminal if you are working on Windows just make sure you open up your Powershell and let me just try to zoom inside this as well so once you have your terminal open I want you to type python hyphen and capital V so as you can see it's showing the python installed version in my case it is 3.10.5 just make sure you have a version which is more than 3.10 3.9 will not work because I will be showing you a couple of new features which I have been introduced in the version 3.10 and if you are watching this video in the future you don't have to worry because all of the functionality that I'm going to show in this tutorial all of those things are going to work in the future as well the next thing that I want you to do is install Visual Studio code so I want you to go to this website code dot Visual studio.com and I want you to download video Studio code and install it so just click on this since I'm using a Mac it's showing Mac if you are using Windows make sure you click on the right button so just click on this it will again download the installer and you just have to install Visual Studio code as you would install any other program after installing Visual Studio code I want you to open it up so this is my visual studio code on the left you can see there is a small bar and I want you to click on extensions let me take it up right over here and I want you to search for python the first thing that pops out right over here this is the python extension by Microsoft I want you to click on install now I do have a couple of more extra dependencies these are optional but I would highly recommend you to install all of those so just open up a terminal if you're working on windows open up your Powershell and there is a command which is called this pip now pip actually ships with python I want you to type pip install IPython my pi and black and just hit enter so this are a couple of extra dependencies that I would like you to install now since I have already installed it's showing me as already satisfied but in your case it will go ahead and install all of the dependencies and that's it now we can start writing python code on our machine if we have some doubts then you can open up this readme file so this is the code that we downloaded from GitHub so inside my folder number one introduction just click on readme and you can see I have provided the links for everything there are a couple of more optional dependencies for example this one code Runner this one we would see in some of the future videos and if you want to have the exact same theme like mine so you can use this theme I'm using a theme which is called as Pitch Black theme and now if you are working on a Mac and if you have issues while typing this command so suppose you are you are typing python slash V and if you are not getting this output then just make sure to watch the next video where we would see how to rectify it sometimes on a Mac you may not get the desired output suppose you are typing python slash NV if you are not getting this output then maybe you can try typing Python 3 hyphen and V now this is because Mac already comes with a preinstalled python but most of the times it is not going to be the latest version you can use this syntax python 33 all the time and if you want to use pip then also you need to type pip 3 and then you can say pip3 I want to install my IPython mypai and black this is also going to work but typing Python 3 and pip3 all the while becomes slightly boring so what I'm going to do is I am going to set up an alias for setting up an alias first thing that I want you to do is I want you to go to your home directory you can go to your home directory by typing CD and that's it let me clear up my terminal by typing control and L now if you type LS Dash A L that means I want to list all of my files and folders inside my current directory and I also want to see some of my hidden files as well so as you can see it's a pretty long list but the file that I am interested is this one it's called as dot zshrc that's the file where we will set up an alias I want you to go ahead and open up that file inside your code editor you can open up the same file inside virtual Studio code by typing code followed by the name of the file don't forget to put the dot before and now just press enter if you are not able to open up this file from your terminal then inside your Visual Studio code I want you to type shift command and P and it will open up a new window and I simply want you to type code and you can see the popup shell command install code command in the path I want to click that and after clicking that you can simply close and open up your terminal once again and let me just Zoom inside and now we can see I want to open up my DOT zshrc file inside my code editor just hit enter for now just ignore all of the stuff which I have inside my zshrc that's because I'm using a lot of fancy setup the thing that I want you to add inside your zshrc are just these two lines so what we are doing is we are just setting up an alias that means whenever we are typing python inside our terminal at that time we actually need to type Python 3 and the same thing goes with Pip whenever we are typing pip I want my system to invoke pip 3 instead so this is what our Alias is going to do just save your zsh RC filing again go back to a terminal I again want you to close and open up your terminal one more time again let me Zoom inside it and now this time if you're typing python hyphen and V it should give you the right output now that we have python installed on our system it's time to write our very first hello world program but before we can write our hello world program I would like you to create our very own directory structure so that we can organize all of the code in a much better way so for that I would like you to open up your your finder or if you're on a Windows just open up any window and navigate to to the place where you want to create the folder so I am just going inside my home directory and here I'm going to create a folder by the name of modern python 101 you can create this folder wherever you want after this I am just going to open up my visual studio code and I'm going to drag this folder inside my visual studio code okay so here we are here I am going to create one more folder and I'm going to name it as 0 1 introduction let me spell it right and inside this folder let's create our very first Python program so let's create a file inside of this and I want you to name the file as hello world dot py always make sure that we have the extension as dot p y so dot py stands for a python file and right now what we are going to do is we are simply going to print hello world to our terminal a couple of lectures ago we have seen how to do it online by using a python online compiler but in this video let's try to do it on our local machine let me just collapse my sidebar the first thing that I want you to write here is an inbuilt function by the name of print so basically what we are trying to do is we want to tell python hey python I want you to print hello world and that's it now I want you to open up your terminal and inside this terminal let us see how we can execute this file I'm inside my directory of modern python 101 from here I want to go to my newly created folder 0 1 introduction and once inside this folder I can simply run my file by typing python followed by the name of the file and just press enter and here you can see we have the right output of hello world if you want to change this from Hello World to hello octallium let's do it let us save the file again go back to the terminal let me clear up my terminal let us try running the file by typing python followed by the file name one more time and we have the desired output of hello octallium now typing Python and hello world.py all the time becomes a little boring in order to automate this task we are going to install one more extension and this time the name of the extension is called as code Runner so I want you to go to your extensions Tab and I wanted to search for code Runner this is the plugin make sure you install this plugin once we have this plugin in place we can simply run the file I'll just show you how to do it let me close my terminal let me close all of this so once we have the plugin installed you can simply click on this play icon right over here and that's going to execute your file so as you can see the code on extension actually exuded my file and I have the output of hello world on the screen so this video was just to give you a small feel of writing python on our local machine from the next videos python is going to get much more interesting and we will start to learn all of the basic fundamentals of python now let's actually start learning Python and the first concept that we are going to learn in Python is all about Understanding Variables but before we can understand variables we need to go on a picnic with Lewis yes let's go on a picnic and then let's see what variables is all about so Lewis is planning for a picnic and he is going to pack a slice of pizza in his Tupperware you don't want to go hungry on a picnic do you Lewis also wants to pack some of his clothes inside a bag and also a bottle of water now let's try to visualize this concept A Little More technically so you can imagine your Tupperware bag and bottles to be your containers and what this containers are going to hold is this slice of pizza clothes and water so you can imagine all of these things to be values so the containers are going to hold all of the values now let's try to see all of these things in the world of python so here we have three containers Tupperware bag and bottle and we have three values slice of pizza cloves and water so essentially what's happening is your containers are just like your variables because your variables are going to hold some data you can translate this concept in Python by typing like this on the left you can see Tupperware is a variable and the variable of Tupperware is holding a value of slice of pizzas this equal to is also called as the assignment operator that means we are assigning the value on the right to the variable on the left and the same thing goes with bag and bottle as well now it's time for us to create some more variables so I'm inside my folder number two type system so this is the code that we downloaded from GitHub and this is the folder that we created remember we've created a folder called as modern python 101 so this is where I am here I am going to create one more folder and I'm going to name it as 0 to type system and inside of this I want you to create one more file by the name of variables dot pi and this is where we are going to create some of our variables here is the scenario Lewis wants to go for a party and he has three items with him he has balloons he has some crackers and he has some hats but he has only a single box so let's see what he is going to do let's create a variable called as box here we are going to create our variable called as box and let us assign the value of balloons to the variable of box please remember to put this inverted commas because this is the value that has been assigned to our variable of box on the next line we simply want to print out our variable so as you already know we can simply say hey python I want you to print out my variable and the name of my variable is box that's it just save a file and let's try to run the file now there are two ways of running the file if we have code Runner installed you can simply click on this and this is going to run your file and here you can see we have the output of balloons or you can also run the file from a terminal in order to run the file from the terminal first we need to go inside in the right folder as you can see right now I am inside the folder modern python 101 and I need to navigate inside my folder which is 0 2 type system once inside this folder you can run the file by typing python followed by the name of the file in my case the name of the file is simply variables dot pi and hit enter so as you can see we have the output of balloons let me put up a small Command right here all of these lines that you can see over here which starts with a hash sign this actually means a comment and these lines are actually going to be ignored by python while executing your file now the suppose Lewis wants to take crackers instead of balloons so let's see how we can reassign the value to our variable let me put up a command and here we can simply reassign by saying that for the variable of box I want to reassign the value to a new one and the new value is going to be called as crackers let me get the spelling right and we can again try to print it out so let's try to print out the box one more time let me run the file and here we have the output so you can see the first output is balloon and this output is coming from from right over here from line number seven and on the next line I have the output of crackers this output is coming from this line line number 11. at line number 11 the variable of box no longer holds the value of balloons because we have reassigned the value on our line number 10. the new value that the variable of box holds right now is just crackers now for the last time if Lewis wants to change his mind and this time he wants to take hats so let's see how we can reassign the value for the last time let me put up some comments before we can do that so for the last time we are going to reassign the value of box and this time the new value is going to be hats and as usual we simply want to print out the value inside our variable so we can say hey python I want you to print my variable of box that's it just save your file and try to run it for the last time so as you can see we have the output of hats and sorry we can see the output of hats now this output is coming from our line number 15. the current value that our variable of box is holding is hats the previous values of crackers and balloons all of these values are now replaced and the only existing value Inside the Box variable is hats till now we have seen how to work and create variables now let's have a look at what's happening behind the scenes so this were the variables that we created last time we created just one variable called as box but we assign the value of balloons crackers and hats to the same variable now let's see what's happening behind the scene and how python is treating all of these variables just imagine this is the memory of your PC and let's see now how python is going to handle your variables in Practical terms how python handles the memory would be very different in a practical scenario but right now just have a look at this I have simplified things so that it's much more easy for us to understand so just imagine all of the green area is the memory of your PC now let's see what's happening python would read all of your source code and as soon as it comes across this line box is equal to balloons what python is going to do is python is going to create a variable called as box inside the memory and python would look at the right hand side and it's going to find balloons so it's going to assign the value of balloons to the box and all of these things are happening inside the memory so on the next line when you are trying to print out box you get the output as balloons but what happens when python goes to the next line that is this one where you are reassigning the value of box to crackers at that time the value of balloons is actually taken out and a new value of crackers is been assigned to the Box so after your line number six this is how your box is actually going to look like so box is going to hold just the value of crackers that's why online number seven when we are trying to print out the value of box we get the value of crackers now the same thing is going to continue on the next line as well when python comes across this line box is equal to hats it's going to remove the value of crackers inside the memory and it's going to assign a new value of hats and box would be equal to hats inside the memory and that's the output that we are getting from line number 10. till now we have a much better understanding of variables and this time we are going to see what you don't have to do while creating a variable you can't just arbitrarily name your variable there are certain rules for declaring your variables and that is what I am going to talk in this video this is the code from GitHub and I wanted to click on this file variable tools I don't want you to waste your time just watching my type so I'm just going to copy this file from my GitHub folder to my modern python 101 folder and let me just paste it right inside my zero two type system so here is the file and now let me try to explain what's happening the first thing that we are going to talk is something about declaration Styles there are different styles in which you can declare a variable the first style that you can see over here this is called as camel case the first alphabet would be in small case and the next words would start with the alphabet so this is called as camel case the next is your Pascal case in Pascal case as you can see all of the words they would start with the capital alphabet the next one as you can see right over here on line number 11 this is called as snake case online number 12 this is also a variable but this is used to declare a constant I'll be talking about constants in the future this is also a valid variable and normally you would use the syntax with an underscore whenever you want to declare a private variable I will be explaining what is a private variable as well in the future this is also a valid variable where you can have a number at the back and you can mix your numbers with your snake case or your camel case or Pascal case or any other case that you want so till now what I've done is I have declared a couple of variables and let's try to print them out and see how they look on our terminal let me just run the file and oh let me first try and clear my terminal now let me go back to the file and let me run it once again so here we can see we can use different variable styles to get our output now let's have a look at the different rules for not declaring a variable as you can see online number 29 you cannot declare a variable which starts with the number if I just uncomment this file it's going to show me an error similarly on line number 30 let me just comment this back so similarly on 30 if we have a hyphen it's not going to work if we have some special characters like a comma it's not going to work if you use a dollar sign at the front it's also not going to work and if your variables has a space in between so that 2 is not going to work so whenever you are creating or declaring variables always keep these things in mind when it comes to your style you just have to be consistent in whatever style that you are choosing as a normal convention whenever we want to declare any variables or the name of the functions we would use snake case but that's just the convention it's not required and whenever you want to declare the name of a class at that time we would be using the Pascal case and whenever we want to declare a constant at that time we would use everything in uppercase now we have been making very good progress with our variables we have seen how to assign values to our variables but we have seen how to assign only a single type of value to our variables you can see over here balloons crackers and hats all of this data types are called as strings so whenever you are working with your Python Programming you always have to work with some sort of a data and this data can be classified into different categories the first category that we are going to see is something called as a primitive data type so what do I mean by a primitive data type it simply means that these data types are already present inside python the first data type we have already worked with it's called as a string and you can see it's always inside a code for declaring a string you can use double quotes or you can use a single code both of them are valid syntax the next one is called as an integer so you can see we have whole numbers so 45 is a kind of integer the next one would be a float whenever you have some decimal places it's called as a float inside python and the last one is called as a Boolean Boolean can have only two types either it can be true or it can be a false now let's go back to our code editor and create some of this basic primitive data types so let's create a new file inside my folder 0 to type system I am going to create a new file and I'm going to name it as primitive data types Dot p y let me add some comments as well now let's start creating our variables first let us create a variable for holding our string and I'm going to call it as my string that's it so my string is my variable and it's going to hold the value of Lewis let me spell it right the next variable would be my integer my end for short it's going to be 45 next one would be my float it would be 3.14 the next one would be my bull it stands for my Boolean data and this time I am going to assign it the value of true make sure you always use the T with the capital T and that's it we have declared our variables and we have assigned the variables with the primitive data types now let's try to print one by one so I want to say first I want to print my my string let me just copy and paste it now the next thing that I want to print would be my integer next let me print out my float and the last I want to print out my Boolean value just save the file and let me run the file inside my terminal and here we have the output Lewis 45 3.14 and true the last thing that I want to discuss in this video is about your styling for example you can see right here single quotes is also a valid string and if you use double quotes it's also a valid string so which style should you use basically you can use any style but you have to make sure that you are consistent throughout your code base in order to avoid such situations when you're working in a large team the python Community has come up with some of the style formatters and one of the style format is called as black so if you remember at the beginning we have installed a couple of optional dependencies and one of the dependency was called as black if you have not installed then you can simply open up a terminal let me clear all of this and you can install the dependency by simply typing pip install and black and this will install the optional dependency black is a code formatter and we are going to use black to format our code so that it is consistent throughout the first thing that I want you to do is I want you to open up the settings for visual studio code on a Mac you can do that by typing command and a comma I think on our Windows it should be controlled and a comma so this is my settings file and I want you to type save and the first option that I can see over here is called as format on Save I want you to select this now again go back search for black so here you can see the first option python formatting black path make sure you have black right over here and that's it just close your settings file and let me save this file it's saying that format autopape is not installed install no I don't want to use that one I want to use black so I'm just going to click on this one use black and that's it now if I come back to this and if I put a single quotes now just watch what happens when I save my file it automatically formats from a single code to a double quote black is a really useful utility and we would be using black so that all of our styling is similar since we know a little bit more about strings let's try and see how we can output the string in our desired format this is also called as string formatting let me create a new file inside my folder and I'm going to name the file as string formatting dot pi let me put up a comment at the top what I want to show in this video is how we can have a desired string output don't worry if the concept sounds a little strange it will get cleared in just a couple of seconds suppose I want to print a statement saying that hello and followed by a variable and that variable can hold a name for example you can say hello Lewis or you can say hello Chico or some of the name so let me first create a variable called as name and let me assign it a value of Lewis now let's see how to format this string and get an output as hello Lewis let me collapse my sidebar and here I can say print and I can put my codes but before my quotes I need to add one more alphabet called as F that means I want to have a formatted string and here I can say hello and I want to print the name over here so I am going to use curly brackets and inside the curly brackets I can place my variable so I can say name let's save the file and try to run it and here we have we have the output as hello Lewis there is one more format of doing this we can simply say print and then we can say hello you can put a comma followed by the variable that you want to print so I can say name just save a file and let me run it one more time so as you can see we have the same output but normally you will see me using a formatted string so let me just take out the second example I'm not going to use this kind of syntax now let's see how we can output a string saying that Lewis is Dash and dash years old and dash and dash has to be filled by an variable so I can create a variable called as age and I can say age is 13 and here I want to print Lewis is 13 years old so I can use a print statement again I am going to use a formatted string so F and quotes then inside my curly brackets the first variable that I want to print is the name so name goes over here so Lewis is then I want to place the age right over here is 13 years old that's it just save your file and try to run it one more time and we have the output Lewis is 13 years old let's do a couple of more practice over here suppose Lewis has a dog and then let me spell it right and the name of the dog is Chico and this time we want to print out Lewis has a dog named Chico so you can say print again your formatted string your curly brackets your placeholder for your name so Lewis has a dog named and the dog variable goes right over here and that's it let us try to run the file and we have the output Lewis has a dog named Chico let's do it for the last time suppose Lewis also has a cat and the name of the cat is Coco so let me copy and paste this line and I can say Lewis has a cat name and the variable of cat would go right over here let me save the file and let me run it for the last time and here we have the output Lewis has a cat named Coco we are making really good progress but this time I want to make a program that would have a bug inside it so let me create a file inside my folder and I'm going to name the file as my first bug Dot py bug actually means that we have some sort of an undesired behavior in our program so let me put up some comments okay now let's get started with this one let's create a variable called as box and let's assign the value of balloons to it and let me print out a formatted statement saying that box contains and the variable of box goes right here let me just run this file and we have the output that the box contains balloons now just watch closely what happens I can also say box is equal to 10. now this really doesn't make any sense why would I want to store 10 inside balloons balloons is a string 10 is an integer but if you try to print this we are going to get an output let me copy and paste this line from here just blow this let me save it and let me try to run the program and we have the output box contains 10. and this is because python isn't dynamically typed language and this was the point where I really struggled when I was learning python but you don't have to worry about this you can easily solve this problem by thinking in types in this video I am going to introduce to you a concept which is called as type hinting let me put up a command so what type ending really means is we always want to associate a type with our variables and this will really help us to create robust programs and to take care of all of the bugs before we can actually run the program now let's start thinking in types let's create a variable called as food and let us assign it a value of milk now I want to tell python that food should always contain the value of a string it cannot contain any other value and the way to do it is by using a type hint you can write a type in right over here let me take it a little you can add a type and try to here so after the name of the variable just put a colon then we can see this variable has to be of the type of a string and this you can write Str so Str means food variable is of the type of a string and that's it and let us print out a statement saying that let us do a formatted string we can say Lewis is going to drink inside the curly brackets we can see food and I'll just save it and run your file and we have the output Lewis is going to drink milk we can reassign the variable food from milk to and then we can say Lewis is going to eat let me save the file and let me try to run it and we have the output Lewis is going to eat eggs now this time if I say food is equal to false let me just copy and paste this line so let me just paste it right over here save the file and let me run it for the last time but watch this we still have the output it's saying that Lewis is going to eat false false and doesn't make any sense over here so this is what we call as a bug this is an undesired Behavior we don't want to assign faults to our food the way to take care of this is by using one more plugin which is called as my pi first thing we need to install my Pi I hope you installed my Pi in the beginning where I was discussing about the optional dependencies if not you can just open up your terminal let me clear all of this and you can install my Pi by saying pip install follow followed by my pack and that's it after installing my Pi I want you to open up the settings again you can open up the settings by by pressing command and comma on a Mac it should be Ctrl and comma on Windows and here I want you to type WiFi and I want you to click on this python linking my Pi enabled just click on this one and that's it now you can see the code editor is highlighting false and it's saying that we have some sort of issue over here if you just hover over false it's going to say incompatible types in assignment expression has Type Bool variable has Type string what it means is variable has a type of Str so if you refer the line number 20 we have assigned the type of string to our variable that's what this error is trying to tell us we have declared the variable as string but in the expression we are trying to assign it a value of Boolean that's why it's not going to work or rather it's going to work because python isn't dynamically typed language but at least in your code editor is going to show you that something is wrong so you can see on the top as well it's showing an error right over here as well but if you see the file and if you try to run the file one more time it's going to execute you can see we are executing our Python program so this is the thing with python python is in dynamically typed language and it's not going to enforce the data types on the runtime that is why to prevent such kind of bugs we are going to use my pie and we are going to use type hinting everywhere let's try to do some more practice with our primitive data types so let's create one more program right over here and let me create a file and the name of the file is just practice.py let me put up some comments as usual and let me collapse my sidebar now this as you can see Triple codes these are also a valid comment and normally you would use triple quotes whenever you want to write some kind of a documentation inside the string but the thing about this triple chords is you can also create strings and you can also do a string formatting by using triple quotes we are going to see an example of this right in this video here is the situation Lewis wants to open up a pizza shop and he needs to write a program for accepting orders now this is a very important tip before you always start coding first you always and always need to visualize now let's just try to visualize our pizza shop and let us try to think what all variables we would require the first and the most obvious is we would require a variable for customer that's the place where we would save the customer data the second variable could be a pizza base maybe you would like to have a thin base or a base filled with cheese or whatever you prefer the next variable could be for storing the pizza size maybe it's like a 12 inch pizza or maybe it's like a 14 or 16 inch pizza so we would require a variable for storing the size as well if it is a pizza it also needs to have some kind of a topping so we would need one more variable for topping one more for cheese and one more for the price so this is how we would first visualize the entire program and only after visualizing your program you would start coding I will come to this concept A little later in detail but right now let's get going and let's create some of the variables let us create the first variable called as customer the type of customer is going to be a string so let us try write Str and the name of the customer would be CC let me put CS Capital the next variable would be for my pizza base so I can say my pizza base again the type is going to be string this time I want to have a thin base the next one would be for my Pizza size now I bought my pizza size to be an integer suppose I want to eat a 12 inch pizza so that's what this is going to indicate the next one would be for my topping topping has to be a string and I want to have some toppings of olives the next one let us create a Boolean saying that extra cheese and let us create the typing in so the extra cheese variable is going to be of the type of Bool so the customer can say yes they want false if they don't want in case they want extra cheese then we can say true otherwise it's going to be false the last one is going to be price now since price is going to contain decimal values so we can say price is going to be a float and we can say this is for 8.99 dollars just save it and now let's try to print all of these values in our terminal let me put up one more comment over here now since this program is for accepting pizza orders let's try to write print statements that would make some sense so the first one I can say received order from followed by the name of the customer let me save it the next line we can print some of the pizza details so we can say print again for the formatted string and then we can see the pizza base would be the pizza base then we can say size is going to be Pizza size in inches followed by toppings and I can write toppings over here save this now let us try to print if the customer wants extra cheese or not so we can again say is extra cheese required and let us put the value right over here extra cheese and the last thing we want to print is going to be the price so we can say bill amount is going to be the price so I can put the price right over here let me run the program and here we have the output received order from CC let me take this a little down and and now we can start comparing so you can see we have declared the name of the customer as CC that's what we have right over here the base of the pizza is thin so thin is what we want the size is 12 and the topping is volumes do we require extra cheese yes we require and the total amount is 8.99 dollars let us have a look at one more alternative syntax of using formatted string let me put up a command right here now this time I am going to construct an entire string which will hold all of these values in order to save all of this data let me create a new variable by the name of order details is going to be of the type of string and now this is the interesting part we can create a formatted string outside the print statement as well so I can say F and I can put my comma right over here but I'm going to use triple quotes because I want to create my string which is going to be in multiple lines so if you just compare your output you can see we have multiple lines on the first line we have the statement for received order the next line has the pizza details and so on so I want my string to be multiline that's the reason why I'm using triple quotes right over here now between these triple codes let's start adding our values now this is pretty simple I just have to copy from above let me just paste this inside the same thing for this as well please note that I am not copying the inverted commas because I already have them outside let me put this line this one as well and this as well so what we have essentially done from line number 34 to line number 39 is we have created an attached string and we have saved that string to a variable and the name of the variable is called as order details on the next line we can simply print out the order details so we can say simply print my order details and that's it let's try to run this file and we have the output let me just comment all of this for a moment so that the output is much more clear Let Me Clear My terminal again go back and let me try to run the file so now you can see our formatted string is also working let us have a look at one more very simple alternative we just saw that we can create a multiline string by using triple codes and assign that string to a variable but let us ask the question do we really require a variable maybe not we can simply print out the entire statement so what I'm going to do is I'm just copying all of this formatted string let me copy all of this let me go down let me write print and inside my print function I'm just going to paste everything as it is that's it let me just save the file and let me run it and as you can see we have the desired output you can use any of the string formatting style there is no right and wrong method in this one welcome to a new section this section is all about decisions decisions and more decisions and we are going to learn how to take Decisions by the use of flow control mechanisms that means there are multiple flow control statements such as if and else while while and do and some other statements so we will have a look at all of this control flow statements first thing that I want you to do is go back to your code editor and let's create a new folder right over here let me name it as 0 3 flow control and the first file that I am going to create over here is called as driving license Dot py let me put up a comment as usual now let's see what's happening Lewis wants to drive a car and he wants to know if he can apply for a driving license or not so first let me declare a variable called as age is going to be of the type of integer and let me assign a value of 13 to it the first flow control statement that I am going to introduce in this video is the if and else statement suppose the legal driving age in your country is 16. so right now we can create a very simple if and else blocks we can say if the age is less than 16 . in that scenario I want to print out you are not eligible for a license but what happens if you are more than 16 in that case you are eligible for license so on the next line we can simply say else so that means you are actually more than 16 years old and let me copy and paste it right over here here I can say you are eligible for a license let's have a look at what's exactly happening python is going to read your file from top to the bottom on line number six it is going to create a new variable called as age and it is going to assign the value of third into it when python comes to line number 12 it's going to try to evaluate this statement right over here what's happening in this statement my age is 13 13 is less than 16 so this condition on line number 12 is true and since this condition is true python is going to print whatever which is inside the if block you can see the line number 13 is indented towards the right so this is a tab space so that means this line belongs to the if log so python is simply going to print out you are not eligible for a license and after printing this block python is actually going to skip the else part because it's not the case with us and python will go to line number 16 where it will exit from the program let me just save the file and let me try to run it so as you can see we have the output you are not eligible for a license now let's try to imagine what happens after a couple of years so after a couple of years the age would be 19. now let me copy and paste the exact same flow control statement and let me put it right over here let me save it and let me try to run the file so the second time we get the output you are eligible for a license and this is the case because on line number 21 you can see now Lewis is 19 years old let's go back to our code one thing that I want you to understand is it's not necessary to have an else block we can simply write an if block so let me put up a comment and let me just copy and paste this block right over here let me comment this let me comment all of this so the only thing we have in our file right now is this variable age which we declared as 13 online number six and we reassign the value on line number 21 and we have this if an else block now I am going to take out the else block and I'm going to left indent this line so that means we do not have an else Block in this condition this is just the if block and this is the next line let's see what's happening let me scale the file and try to run the file one more time ah so in this case I am getting the output you are eligible for a license now let's see what's exactly happening when python comes to this line land number 32 it's again going to evaluate this statement in our case the age is 19 so 19 is not less than 16 and since this condition will evaluate to false python is going to skip the if Law And since we are going to skip the if block python is not going to print this line it will simply move to the next line on the next line that is on line number 35 we are simply going to print out you are eligible for a license and that's what we get on our terminal you can check the terminal one more time let me let me clear up all of these things let me run the file one more time and that's it you have the output of you are eligible for a license you can also chain multiple if and as blocks let me show you an example for that now suppose after too many years Lewis is 100 years old let me just go and copy the code from above so let me just copy this one and right over here and let me uncomment all of this here we can start chaining our if and else blocks so on the next line I can say else and if in Python we write it as e l i f that means else and if so the next condition that I want to check is my age greater than 100 in that case I want to print out you are too old to get a license let me comment this one now let me try to run the file oh but what is this we are getting an output saying that you are eligible for a license but that's not we want we want to print out you are too old to get a license and we have a small bug and that bug is exactly on line number 45. we are saying that if the age is greater than 100 but right now our age is 100 so in order to make this statement true we have to say if the age is more than or equal to 100 now let's save it and let us try to run the file one more time and this time we have a proper output saying that you are too old to get a license till now we have seen very simple if and else blocks let's try to expand our knowledge and this time let me create a new file by the name of alien license dot pi here is the situation Lewis desperately wants to drive a car and he hears that in a planet called as zorton there is no age limit for getting a license so let's see how we can address this situation let us create a couple of variables the first one would be for age of the type of integer age is 13 the next one for a planet Planet the type would be string and let me assign it to Earth initially let me introduce to you a little more complex statements by using and and or statements so let's start writing our compound if and else blocks along with and and or the first case would be if the age is less than 16 and the planet is Earth in that case I simply want to print out that you are not eligible for a license on Earth here you can see I have double equal to that simply means that this is a comparison operator we assist and compare if the value inside the variable planet is equal to Earth or not now let's move on to the next blog for the else statement here we can say else if the age is greater than 16 and if the planet is again Earth in that case I want to print out that you are eligible for a license on Earth but what happens if both of these values are false what happens if the planet is zorton or what happens if the age is less than 16 but you are trying to apply for license consultant let's try to create one more condition over here let us write an if and less block right over here so we can say else if if the age is less than 16 and if the planet is zorton in that case I want to print out you can apply for resort in your license because it's valid in the planet's Orton let me save the file and let me try running it and let us see what output we are getting so I am getting the output that you are not eligible for license on Earth so let's get back to the code and let us evaluate what's exactly happening let us begin with evaluating all of the if and LC block let's start with this one on line number 13 let me put up a comment over here so this is how the evaluation is taking place python is going to compare is the age less than 16 yes my age is 13 13 is less than 16 so the first statement is going to evaluate to true so that comes right here the next operator that we have is and so and comes right over here now python will go to the last statement it's going to compare is planet equal to Earth so as you can see on land number seven we have assigned the value of Earth to planet hence this statement also evaluates to True Earth is equal to Earth so that's why we have a true over here and since we have two truths this entire statement on line number 13 evaluates to true so we can print out you are not eligible for a license on Earth and right after this let me put up one more comment just to explain what's happening and since this if statement on line number 13 evaluates to true the execution is going to stop right at this point python is not going to go to the next alternative block python will directly jump to line number 22 and it will exit from our program so that's what is exactly happening so let me put up some more comments right here execution does not reach over here the same thing for this one as well let's do a small exercise on line number 14 we have tried to evaluate the statement let us try to evaluate the statements on line number 18 and line number 21 as well let me put up a comment right here now let's try to evaluate this statement my current age is 13. as you can see on line number six we have assigned the age as 13 so the first statement age is 13 13 is greater than 16 no it's not so we have false right over here the next operator is and so and comes right over here the next statement is planet equal to a yes my planet is equal to what so we have a true but in this case we have one false and one true so this statement is going to evaluate to forms let's see what's happening on line number 22 let me put up a comment right over here as well so as you can see the age is 13 13 is less than 16 so we have a true condition over here now the planet the planet currently is Earth and Earth is not equal to zorton so we have faults over here one true and one Falls is always going to give you an false statement we can actually try to improve our logic at this time by introducing an or statement remember insult and even if you are less than 16 you are still eligible for a license so we don't have to check this condition at all we can simply say if you are age 16 or if the planet is rotten in that case you can apply for resort in your license in this case the evaluation will be different my age is less than 16 it's true and right here instead of n we have an or condition the next is planet is resultant so that's again going to be false true or false now this time whenever we have an or condition and we have one true and one false it's always going to evaluate to True since we have an or statement the true wins over the false but since the first block is executing we are not going to execute this block and just for your reference let me put all of the and and all tables right over here so these are all of the and and or scenarios but you can do much better if you are in confusion just open up your terminal and I want you to open up the IPython shell remember we have installed IPython at the beginning of the series if you have not installed you can simply install by typing pip installed I python what happens is python actually comes with a shell you can simply type python this takes you inside a python shell and here you can start writing python commands for example I can say OnePlus 2 and I get the output of 3. you can exit this Shell by typing Ctrl and D now I python is a slightly better version of this and it's slightly more interactive so I prefer to use IPython shell just type IPython and go inside the shell let me clear up the terminal and whenever you are confused what statement evaluates to what you can simply type right over here here you can type what happens if I have one condition which is true and the next condition which is also a true we get a true but what happens if I have one true and one false condition we have a false what happens if I have one true or false then also we get a true what happens if I have a false and also false we get a false let us try to evaluate one last condition what happens if I have a false and false in that case it also evaluates to false so you can always come back to this iPad and shell and see how the statements are being evaluated now suppose Lewis migrates to zorton then let's see what's happening let me put up a comment now Lewis is no longer staying on Earth he's staying in Jordan let me copy and paste all of this and put it right over here I am not going to change any of the logic let me just run the file as usual and let us see what output we are getting oh first I need to exit this you can exit this by pressing Ctrl and D yes I want to exit let me clear up my terminal go back to the file let me save it one more time and let me try running it it looks like we have a small bug and I exactly know what we did wrong at this point we did not reassign the value of planet to zorton that's what we need to do so we can say map planet now is certain that's it just save your file and let us try to run the file one more time now we have the desired output you can apply for resulting in license now let's try to see how the statements are being evaluated so let's see what's happening on line number 48 this statement Planet equal to Earth this time it's going to evaluate as false true and false is going to evaluate true or false and so we are not going to execute this block let's go to the new block age is greater than 16 no it's false Planet equal to Earth no it's false because we are staying in zorton false and false we have a false so python will go to the last condition age is less than 16 true Planet equal result and yeah it's also true true or true equals to true and that's the reason why we have this output as you can apply for result Indian license let's try to see the next Concept in the flow control mechanism and this time I am going to introduce you A New Concept which is called as looping we can iterate over things that is called as looping and we can iterate by using a for Loop let me create a new file as usual and let me show what I'm talking about here I am going to create a new file and I am going to name it as printmyname.pi and let me put up a command so this is the situation this time now since Lewis is staying in Jordan he has to do things in a shortening way in zorton they don't print your name on a single line they want to print each and every character of your team on a different line so let's see how we can do that first let me create a variable for name and let me assign the type as string the name is Lewis and this time let me introduce you One More Concept which is called as the for Loop and we are going to use the for Loop to iterate over all of the characters in Lewis it simply means that we want to go from one alphabet to another throughout this string creating a for Loop is very simple we can simply say for character inside my name I simply want to print out the character let me put up a comment right here so on each iteration we are just going to print a character let me save the file and let me try running it here we have the output we have each and every character on a new line and we are doing this by using a very simple for Loop now let's see what's happening inside each of the iteration here we are saying for character in name first time the character is L you can see right over here we get the output of L you can write over here as well the next character is o u i n s so on each iteration we are printing a single character on new line let's try to move on and learn One More Concept for flow control mechanisms this time I am going to show you the while loop for this as usual let me create a new file and let me name it as guess Planet dot pi and this time this is the situation now since Lewis has migrated to zodan his friend from Earth they are a little curious to know where he is so Lewis decides to write a program that will make his friends guess the name of the planet for this simple program I am going to create three variables first variable would be as a Boolean so I can say correct guess this would be an Boolean initially let me assign it the value of faults the next Boolean for guess so this is the place where we would be storing all of the gases that his friends are going to make initially it's simply going to be a blank string and that's it the next one for the planet so I can say planet of the type of string this is going to be zorton let us have a look at the first alternative the first thing that we want to do right over here is we want to create a loop and we want his friends to keep on guessing till the time they get the planet right first let us see how we can get the input from his friends the way to get an input is by using another inbuilt function by the name of input so we can say input and I can write a prompt over here Lewis says that can we guess my planet and I want to save the input inside my variable of guess so I'm just going to the left the input has to be saved inside my variable of guess so my guess comes towards the left let me save this and let us try to run this and see what's happening let me also print out the guess on the next line now let's try to run this file and see what's happening so as you can see I am getting the prompt Lewis says can you guess my planet let me write as Mars and we have the output now this output of mass is coming from this line from line number 15. if you are having some issues while running this file from the code Runner then what we can do is I want you to open up your settings let me collapse my terminal here I want you to write code Runner and let us scroll a little down I want you to go a little more down and I wanted to check this option run in terminal so make sure that this option is checked or what you can do is you can simply use the python command let's try to navigate inside the folder now this time the folder was 0 3 so you can go inside this folder and you can say hey python I want you to run my program which is called as guest planet and we have the prompt and this time it can be Pluto and we have the output of Pluto let's get back to our program here we can create our event and else blocks so we can say if the guess is equal to my current planet then I want to print out all right guess Lewis is a Jordan else we can say that I want to print out Lewis says it's a wrong choice I want you to try again let me see this and let us try to run this one more time suppose my planet is Mercury and we get the output Lewis says wrong choice try again let me clear up my terminal and let me try this program one more time this time I am going to write as zorton what's this we still have the output saying that it's a wrong choice but that's not the case we have written certain the issue is this that we have written zorton with a z which is in the small case but we have saved planet with a z which is in the upper case the point that I want to convey is all of the strings are going to be case sensitive inside python your upper case z is not equal to your lowercase z let us see how we can handle this situation we can go back to our if block right here and we can actually convert from capital Z to a lower Z in fact we are going to convert the entire string to a lowercase string and you can do that by using an inbuilt function now this function Works only with strings and since we have two strings guess and planet we can use that function right over here so we can simply say guess I simply want to lower it and after this I want you to put brackets so this means I want to invoke the function of lower I will come to functions a little future in the series but right now just go with the flow so what this statement is doing is is going to take the guess and it is going to convert it from whatever case it may be to an lower case we want to do the same thing for Planet as well so here we can say lower along with the brackets just save it and now let's try running this file let me write zorton with a smaller case z and this time we have the output right guess Lewis is at Jordan now let's try to improve the logic even more we don't want to exit this program we want to ask his friends to keep on guessing till the time they get the guess right and we can do this by wrapping all of our logic inside a while block so let's see how to do that on line number 16 let me make some space and uh here I can say while my correct guess is not true so that means till the time we don't get a correct guess I simply want to keep on looping so let me put a colon over here and after this I want to indent all of this if and S blocks one tab space inside so now if an else blocks belong to the while loop let me save it and let me try to run the file but we have a small bug let me run the file first and then you will understand what's wrong with it so here it goes it's asking me for the name of the planet I am writing marks so what's this it's keep on looping something's wrong with our program let me stop it by pressing Ctrl and C the issue is we are just keeping on looping the first thing python will go online by 18 it's going to see is my Mars equal to my Jordan it's not so it will go to the next line it says that Lewis says wrong choice try again so this is what we are getting and since our wild condition is not true as you can see on land number six do we have a correct guess false and that's the reason why python will again go back to line number 18 it's going to see Mars is equal to Zordon no so it's again going to go on a line number 21 and print out Lewis says wrong choice try again the way to come out of this while loop is we need to have a circuit breaking mechanism that's why I have created this variable called as correct guess so right over here after line number 19 since we have a correct guess this time let us reassign the value of correct guess to true now let's try running this file oh let me clear up my terminal now let's try the file one more time so it's saying that can you guess my Planet let me see as Mars oh no we again have a issue let's see what's wrong this time now the issue is we are not asking for a new input after we get a wrong guess that's why we never have a correct guess in order to correct this let me take this line let me cut it out and I want to paste it right over here let me indent so we have a proper variable we don't require this pin statement now let me take it out and let us see if we can have a running program let me put the input as Pluto is saying wrong choice now this time it is again asking me for an input and is actually waiting for my input let me write Mars no it's not going to work Earth no it's not going to work let me write zorton and that's it we have the right guess let me add some comments so that it's much more easy for us to understand what's happening the first comment goes right over here so on line number 16 we are just asking the users for their input the next thing that we are doing which is right over here we are just lower casing all of the strings so that we have a much more correct comparison then as a circuit breaking mechanism we are setting the current guess variable to true so this is what is happening right here inside the else block if the condition is false then we are going to print the statement and just to give it a small cosmetic touch I am going to put a line just below this just save a file and let me try running this file for one more time so my first planet would be Mercury we have a very nice output saying that wrong choice and then we have a line below it now this time it's going to be zorton with a lowercase z and we have the right output there is one more alternative way we don't need to declare this variable all the time we can simply work directly with the while loop let me put up a comment and then let me show how it works let me copy and paste everything from above so let me just copy this let me go right over here let me paste it I also want to comment all of this once inside the while loop we have one more alternative which can act like our circuit breaker here online number 33 I can simply say while true this means that I always want you to start the value because true is always true and on line number 40 instead of saying correct guess is equal to true I can say break so that means as soon as we have a condition which is right I simply want to break out of the value let me save it and let me run it and see if it is working or not okay so my first planet would be Earth a wrong choice the next planet is zorton and that's the right choice let's try to learn the next flow control statement and this time we are going to learn the match statement so let me open up my sidebar and let me create a new file by the name of match color dot py and let me put up a comment so this is what we want to do volt Island Resort and Lewis he has packed a lot of stuff and we want to check if he has anything that matches our favorite color and we are going to do this by using a match operator now please keep in mind that match is a brand new operator which was introduced in the version 3.10 so in case if we have any version below 3.10 it's not going to work so please make sure you have any version 3.10 or higher here what we can do is we can create a variable called as my favorite color and we can ask the user for an input so we can say input and here we can see enter your favorite color what's wrong with this spelling okay so enter your favorite color now let's try to print the favorite color let's try to run this file and let's see if it's working or not so it's asking me for my favorite color I say it's black and I have the right output now let's see how the match operator is going to work we can write that I want to match on my favorite color and the first case would be in case if I get the input as black in that case I want to print out a statement saying something like Lewis has a black tshirt now suppose the user input is red then maybe in that case I want to print something like Lewis has a red car suppose my favorite color is yellow the code the colons has to be outside the codes and I want to print out Lewis has a yellow shoes now in case the favorite color is green in that case I want to print out blue is has a green hat but what happens if we don't get a match so in that case we can write like this case followed by an underscore so that means the default case would be this one in case we don't get the favorite color right here we can simply print out that Lewis has nothing in and let me put my color right over here followed by the word of color just save it let me save the file and let me try to run it one more time let me give the input of green it's working let me try to run the program one more time This Time Again green but you can see we are getting the output as Lewis has nothing in the green color now this is again because I have entered green where G is capital while inside the match operator you can see I am using a lowercase G and you already know that strings are case sensitive inside python let us tackle this issue and it's going to be a very simple thing we can either write over here I want to match my favorite color and I want to lowercase it first and then I want to match or we can say on this line I want to say that my favorite color should be equal to my favorite color but in the lower case or even better what we can do is we can write it right over here Dot lower and let me take out this line and that's it if you're wondering why I don't have a type annotation right over here and the reason is just hover over input and if you read the documentation it's saying that the output is of the type of a string we will look at the syntax when we learn a little bit more about functions your my Pi plugin is smart enough to infer that the variable favorite color is of the type of a string and since your favorite color is a string we can apply the lower method on our string you can always write the type over here and it's not going to hurt so this is also a valid syntax let me run the file for the last time and let us check what's happening now this time I am going to say red with the capital r now it's a match Lewis has the red car till now we have learned a lot and I think it's time for us to start writing our game so what I've done in the background I've created a file by the name of game save sort and underscore one you can see on the tab right over here as well and I've added a couple of comments let us see now what we are supposed to do inside this game now as we remember Lewis is staying at Jordan but this time zotan is under attack Thanos has arrived and he is going to attack zorton now fortunately Lewis can call his Avenger French from Earth and so he has made a call Avengers has received his call and they I want to send four of the Avengers to save zorton the four Avengers who are going to save zorton are Iron Man Black Widow SpiderMan and Hulk each of the Avengers have their own attack and power and they have to fight with Thanos in order to save zorton but we have a couple of conditions Avengers can only attack in pairs so that means at each given point of time a single Avenger cannot attack Thanos because Thanos is much more powerful so Avengers have to team up in pairs of two and they have to attack Thanos and while doing all of this Avengers only have three chances to kill Thanos otherwise Thanos will kill the Avengers and we will lose the game sounds interesting isn't it but the first thing that I want you to do is not write the code Yes you heard right I don't want you to write the code first I want you to understand what we have to do and then you can start writing code in order to understand better I want to introduce to you a very simple concept which is called as VOC dtp it's a very simple concept that I've come up with and the entire concept is divided into two parts so as you can see the first part is VOC the second part is dtp so the first part simply means to visualize outline and code the next part would be debug test and polish for now we would be concentrating on the first part visualize outline and code so as a programmer always remember first you always always need to visualize before you can code you don't have to write code immediately so let's start visualize what's going to happen inside of a game since it's a game we already have some characters so let's try to visualize the different characters that we have we have two main categories one category is for the super heroes and the next category is for the super villains we have a specific list for the superheroes and those are Iron Man Black Widow Spiderman and Hulk and for the super villains right now we have only a single super villain and his name is Thanos so this is where we just simply try to visualize how the game would look like and now we know the characters in The Next Step let's try to outline how this characters would look like and how they would work so coming to the next point of outline since we have characters all of the characters should have some properties they should also have some constraints and we should also have some sort of a logic I have already specified that our Avengers have a fire or an attack power but if we have an attack power then we would also require life and having a property of life would make our job much more simple and we can Implement a very simple Logic for the game now this game also comes with a couple of constraints that we can't forget the constants are the first one that we saw Avengers can only attack in parents so at a given time only two Avengers can attack a single Avenger cannot attack and more than two Avengers also cannot attack and Avengers only have 3 chances of defeating Thanos so this is where we are just trying to outline how our characters are going to look like the last and the most important part is can we come up with some kind of logic where we can simulate the attack now let's go back to our code editor and let us see how we can translate all of these things in our step number three so as you can see the step number three is to actually code in Step number three what we are going to do is we either is going to translate all of these things to a logic and that logic would be coded with python now let's start with declaring our variables if you refer our outline we have a property and the properties are for your fire or attack power and one for the life so let's go right over here and let us start creating some of our variables so we can see the attack power of Iron Man so I can see Iron Man attack power and just suppose it to be 250 now let's start thinking in types now since it's a power I have to do some sort of calculations so it must be either an integer or in fluid for the sake of Simplicity I am keeping it as integer the next thing that I want you to remember is since this is an attack power we are not going to change the attack power in the future so no matter even if we are losing or we are winning the game the attack power of Iron Man is always going to be 250 so just as a stylistic preference I want to name my variable everything in uppercase so this would denote that I want to have a constant instead of a variable now what do I mean by constant a constant simply means there is some value which we don't want to change and that is what we are indicating by writing everything in the upper case Now features hover over our variable you can see on the left we have constant so that means our code editor knows that this is a constant but we can go further and we can improve our typing for this I am going to import and use something from an additional package now what is a package package is basically some code that the developers of python have written and have put all of this code inside a library which is called as the standard Library so what I'm going to do is I want to say I want to go to my typing package so this package lives inside the python standard Library please remember that standard library is already built into python so from the package of typing I want to import finally and we can wrap this integer inside finally now it's very clear that Iron Man attack power it's not just a variable it's a constant and we don't want to change the value of the constant throughout our program let us repeat the same thing for Black Widow Spiderman and Hulk as well the next superhero would be our Black Widow and she has a power of 180 the next one would be SpiderMan SpiderMan has an attack power of 190. the last superhero would be Hulk and Hulk since he is the biggest guy he has an attack power of 300. let me put up some commands right here so this is where we are declaring our constants and on the top let me put up one more comment so this is the stuff that we are importing now let's go back to our outline just to figure it out what we are supposed to do next we have defined the attack power now we also need the life so let me go to the next line and here I am going to define the life of Thanos and the life of Thanos is 1500. as you can see I don't want the life of Thanos to be a constant I want it to be a variable that's why I am declaring everything in small case and my my pie is smart enough to infer that Thanos is of the type of integer or if you want to be explicit you can always type int right over here the reason why I don't want it to be constant would get much more clear when we implement the logic for the game now let's go back to our outline and here you can see we have a couple of constraints the first constant is Avengers can only attack in pairs so let us go back to our game and I want the game users the ability to choose our pairs in order to give this ability I am going to create one more variable called as choices and let me assign it the value of 0. again I don't need to annotate as integer because my Pi would be smart enough to infer that my choice is variable would always be an integer after this let us create a couple of if and else blocks and let us start creating our pairs for our Avengers for the sake of Simplicity I am just going to create pairs in line so what I mean the first pair would be Iron Man and Black Widow the second pair would be Black Widow and SpiderMan the third pair would be SpiderMan and Hulk and the fourth pair would be Iron Man and Hulk but you're free to make the pairs in whatever choice you want so here we can say if my choice is one in that case I simply want to print out that Iron Man and Black Widow are attacking Thanos the next choice would be Choice number two and this time I want to print out Black Widow and SpiderMan are attacking Thanos next choice would be three and this time SpiderMan and Hulk are attacking Thanos and the last one if the choice is number four then Hulk and Iron Man are attacking Thanos while doing all of this let us not forget that we want to ask the user for the choice of The Avengers so let us Implement that logic and I want to implement that logic before our if and else blocks so here I can since we want to ask the user for the input we need an input block and let us display a prompt message saying that enter your pair number we want to assign the input back to our variable of choice so Choice goes on the left and let me save my program but as you can see we have a small bug so if we just try to hover you can see that we have an error saying that incompatible types in assignment expression has type of string variable has type of integer so this was what I was telling you about variable has the type of integer our variable of choice as you can see on line number 29 we have declared a variable called as choice and the type of this variable is an integer but if you hover on input and if you read the documentation it is actually giving us a string so this is where when you start thinking in types it's going to help you to avoid a lot of bugs to address this bug it's a very simple solution we simply want to convert the string to an integer and the way to do that is by using a cast let me just show you how it is done so I am going to wrap all of this inside my brackets and I want to cast all of this into an integer so what this means is my input is going to give me a string and I want to convert that string into an integer right over here now our types are going to match on the left is also an integer and on the right is also an integer now let me see my program and let me try to run it suppose I want my pair number two you can see Black Widow and SpiderMan are attacking Thanos let me try to run the file one more time let me go by pair number four Hulk and and man are attacking Thanos so we have some basic logic in place this time let us display a nice message to the user informing them of all of the pairs which are there inside the game so before I ask the input I want to display a nice message for this I am going to create a new variable called as message and I am going to assign some string value to it so let me create a variable called as message and I'm going to assign some value to it and this is the value so please note that I am creating a multiline string by using triple quotes and just before we can show the choices I want to print out the message let us do that right over here so we can say print and my message let me save the file and let's try to run it and this time we have a very nice message and we can see all of the pairs who can attack Thanos this time let us go with the pair number three and we get the output that SpiderMan and Hulk are attacking Thanos let me clear up my terminal and let us go back to our code now since this message is never going to change I can actually make it as a constant so let me change from the lowercase to the upper case and here as well so we have a message in the form of a constant let me put up a comment right over here saying that this is going to be one of my helper message and I can utilize this message multiple times whenever I want throughout my program now the next part would be since we have multiple chances of attacking Thanos we need some kind of a loop and inside the loop we can keep on attacking Thanos for at least three times in order to simulate this Loop situation I am going to use a while loop so I can just come down over here and just before my print message I can see while true and let me indent it's why it has to be while not white and let me indent all of this thing one tab space inside so all of this belongs to the while loop now now let's see since we have a while loop we also need some kind of a circuit breaking mechanism in order to exit now let's go back to our outline and see how we can do that one of the constraint is that we only have three chances of attacking Thanos another constraint is if we have already lost or we have already one then we can simply break out and we don't have to play a game so we are going to combine this logic together and come up with a very simple circuit breaking mechanism so let me go back to my code now inside my while loop we need to have some sort of circuit breaking mechanism so let me put up a command either we can break out whenever we win or we can break out whenever we lose so let's write our logic right we are but before adding the logic we need to create one more variable and that variable is going to hold our number of attacks as you can see the constants we have three chances for an attack so let's save that data inside one variable let me go to the top and declare a variable right over here so this is called as attack numbers and I am going to assign it a value of 0 initially let us go back to the while loop and let us Write Our Winning or our losing conditions first let us see the winning condition so we can say if the life of Thanos is less than or equal to 0 that means we have 1 but we need to add one more condition right over here the second constraint and that constraint would be if my number of attacks is also less than or equal to 3. only in this case I am going to win otherwise I am going to lose and I am going to print some kind of a message over here so right now let me just put up a comment that this is for the for the win for the else block that means if we have lost so we can say if my attack numbers are greater than or equal to 3 oh this has to be else and if now in case my attack numbers are more than or equal to 3 in that case I am actually going to lose now before I forget we need to add the break statements to actually break out of the while loop so let me add them right away the next thing that we need to do is we want to display a nice winning or a nice losing message so what I have done is I have already written a nice message which I am going to paste it right over here just above the message so the first one would be my winning message and it's going to be you successfully saved zorton along with a couple of emojis and since this is a constant all of this is capital and this is final Str if you want it you can write this if you don't want you can take it out and my pie is smart enough to infer that it's a constant of the type of string the next message would be our losing message so I'm just saying that Thanos killed Avengers and captured zorton the reason why I have all of this separately in a constant or in a variable is because in future if you don't like this emojis you can simply take them out and you don't have to change all of the logic that you write below you have to just change one constant or one variable and it's going to reflect throughout your code it makes our code much more manageable let me put back my Emojis I just love them and go back to our if and else block let me remove this and I can say here I want to print my win message and here I want to print my lose message sorry it's going to be a lost message let me save my file now let us go back to our outline and let us see what we need to do next now we have to do the most important part that is how to actually simulate the attack unfortunately for us this is the most simplest part let's see how we can do that suppose you are using the first pair right over here in this case what's happening is Iron Man and Black Widow they are going to attack Thanos and if we just scroll up Iron Man Has a power of 250 Black Widow has a power of 180 and Thanos has a life of 1500 so when Iron Man and Black Widow are attacking Thanos we simply want to minus the attack power from the life of Thanos and since we have two Avengers who are attacking Thanos we have to reduce the value by 250 and 180 from 1500 and that is how we simulate an attack so let's go down over here and let us Implement that logic so we can say that my new Thanos life would be my current Thanos life minus my Iron Man attack power and also minus the Black Widow attack power and that's it and after doing this we also want to increment the number of attacks since we already have done one attack so we can say my current attack number would be my attack number plus one so initially if you see the attack number is zero and whenever we have an actual attack we are going to increment it by one and remember we have a constraint right on line number 49 that we cannot have more than three attacks if we have more than three tags then we are going to lose the game let us do the same thing for our choice number 2 3 and 4 as well let me just copy this let me paste over here and before the attack I have to say that my Thanos life would be my Thomas life minus Black Widow attack power minus the SpiderMan attack power let me go to the new line right here again the same thing let me copy here as well and then here my Thanos life would be my Thanos life minus SpiderMan attack power minus Hulk attack power let us go to the last choice and here we can say again the same thing Thanos like would be Thanos life minus Hulk attack power minus Iron Man attack power here is my Iron Man save it and that's it I think we are good to go and we can try out our game so let's give it a try let me take this up a little bit so the first thing is we have a nice message saying that we have the following pairs for the first pair I want to go with the first one Iron Man and Black Widow so I just press one and enter so I get the message that Iron Man and Black Widow are attacking Thanos now it's asking me for the second pair now I can say I want to go with Black Widow and SpiderMan so I enter my choice number two again we get a message saying that black Widow and SpiderMan are attacking Thanos and it is asking me for my third pair let me go with Hulk and Iron Man so I can type 4 and that's it and unfortunately we have lost the game Thanos has killed Avengers and he has captured zotan let us play the game one more time this time I am going to choose my pair number four Hulk and Iron Man and my pair number one and again my pair number four and that's amazing finally we have been able to save zorton you can see the message right over here and this brings us to the end of section number three just take a break have some nice snacks or coffee and I will see you in the next section welcome to a brand new section this section is all about data structures data structures is just a common name for how we can group our data together and the first data structure that we are going to see is called as a list now since Lewis has a migrated to zorton he has been making a lot of progress and in Jordan people greet each other by saying Zola so Lewis wants to write a simple program where he can beat all of his friends by saying Zola followed by the name of the friend you can do this by using multiple print statements but that is not a very effective approach what if you have hundreds or thousands of friends then you can imagine that using a print statement for each and every friend would get too tedious instead python offers a much better solution and that is called as a list so what we are going to do is we are going to create a list and after that we are simply going to look through the list and print a grading message to each one of his friend let's see how to do this behind the scenes I have created a new folder called as zero four data structures and I'm working in this file called as friends dot pi so let's get started with this one let us create a variable called as friends oh let me get the spelling right now this friends is going to be a list for creating a list you have to use open and closing square brackets and inside this you have to insert all of your elements suppose the first friend is CC and then we have a bunch of other friends Rocco Chico and Nico so this is what a list in Python looks like now let's see how we can add the type hints to this one now obviously this is a list so what we can do is here we can simply say that friends is a list and after that let us try and specify what kind of data that our list would be holding and if you see all of our data types are strings so what we can do is we can simply tell that this list is going to be a list of strings the next point that I want to tell you is all the lists in Python they always start with the index number of zero so let me put a command and then let me try to explain what's happening so this is how your list will look inside the memory on index number 0 it will have CC on index number one it will have Roku on index number 2 Chico and so on always remember that list will always start with the index number of 0 and this is common across all of the programming languages not only in Python the next point that I want to share is if you see the length our length is 4 that means we have four elements inside the list so this is the first element second third and fourth so the length of our list would be four but the index number would be up till 3. let's print out the friends and see how they look like so let me print the prints right over here and let me run this file so these are the friends we have friends right over here now let's create a very simple for Loop and greet all of his friends so let me start by putting some comments let me take this a little up and we can use a very simple for Loop so we can say for friend in my list of friends for every friend I simply want to print out a greeting message saying that Zola followed by the name of my friend let us run this file so here we have the output Zola CC Zola Rocco and so on let's see what Lewis wants to do next so Lewis simply wants to count his number of friends so remember I just told you that the length of this list would be 4 and we can find that out by using an inbuilt function which is also called as length let me show you right over here let's print out friends length and inside the curly brackets I can find the length by using the inbuilt function called as length Len and let us pass our list to it just save and run your file and your we have friends length is 4 and that is what we were expecting let's see what Lewis is doing next oh he had a fight with Nico and he wants to unfriend him now let's see how we can take Nico out of our list so we can see Nico Nico is the last element inside our list and we can remove him by using an inbuilt function which is called as Pop let me show you how it is to be done so I can say I want to unfriend and I can say from my list of friends I simply want to pop the last value now since Nico is the last element we can use this method to remove an element from the list let us print out the friend that we have just unfriended so we can just say unfriend and let me put my curlies and let me put unfriend over here let me also copy and paste our friends and let's see how our list is looking right now so let me just paste it right over here just save it and try to run your file and here we have it we have unfriended Nico and this is how our current list of friends looks like Let Us Go Back let us see what Lewis is up to this time so Lewis has made a new friend by the name of zico so let us see how we can add Z code to our list we can add zico by using another input function by the name of append let's see how to do that so here I can say in my list of friends I want to append one more element and that element is called as zico let us copy this line and paste the new list let me save it let me try to run my file and here you can see we have zico at the back one more thing you must have noticed that I am not assigning a variable for this operation so for example I am not doing something like this the reason is if you just hover over append you can read the documentation this function returns none that's why I'm not assigning it back to my list of friends but at the same time if you hover over Pop now this method of Pop is actually returning back a string that's why I'm using a new variable on the left to collect that data but for this we can't do the same now let's see what Lewis is up to so let me go down right over here and let me paste a new comments this time Lewis wants to know who is his third friend inside the list let us check it out let me open up my terminal so this is how our latest list looks like so cc is a first print Rocco is the second one and Chico is a third friend so let's see how we can get this value from our list and we can do that by using our indexes so just remember let me scroll a little up our list it has a set of indexes and always remember that the index is going to start from 0. now let's see how we can get the third value from our list so here I can simply print out from my list of friends I simply want the friend who is on the index number 2. now remember we are using 2 because our index starts at zero let me put a command so let me save this file and let us try to run this file and here we have the output Chico is the third friend inside the list let us go back this time Lewis again had a fight but this time he had a fight with Roku and we need to remove Roku from our list as well let me scroll to our list if you see Roku is inside our list at index number one so let me show you how we can do this so let us go down here I can say from my list of friends I simply want to remove Roku that's it let me copy this line and paste it over here and let us try running this file so this is our new list we have CC Chico and zico we have successfully removed Roku from our list let's see what Lewis is up to next and it seems like Lewis and Rocco have become friends again so let's see how we can add Roku back to our list remember that Roku was at index number one so we want to insert Rocco back to its original index so let me show you how it is to be done so here I can say in my list of friends I want to insert at index number one the element of groco and let me try to print out the list one more time that's it just see run your file and this is the new list we have Roku back at index number one inside the friends list let's go back and let's see what Luis wants to do next so this time Lewis wants to confirm if Roku is in the friends list or not and we can do this by using our if and in syntax so what we can say right over here is if Roku in my list of friends then I simply want to print out yay Roku is in the front list or else I can print out some other message so let me save the file and let us try to run this one now since Roku is inside the list we get the output that yay the Roku is in the friends list let us go back let's see what's happening next so this time Lewis patches up with Nico as well and this time Niko has become his number one friend so we want to add Nico back to our list of friends but since Nico is his number one friend right now we want to add Nico at the beginning of the list so we can do this by using the same syntax right over here we can use the same syntax and let's see how to do this so we can say in my list of friends I want to insert at index number 0 the element of Nico and let us print our list of friends as well so let me go down let me paste and let us run this file and here you can see we have Nico as the first element inside of a list let us go back so this time Lewis wants to sort his friends in alphabetical order and luckily it's very simple we simply have to say friends I simply want to sort it let me copy and paste the list of friends and let us run this file and here we have the output you can see all of the names are sorted alphabetically so CC Chico comes first Nico Rocco and finally we have zico let us go back so this time Lewis doesn't really like this ordering and he wants to reverse the order luckily this too is very simple let me just copy this and let me paste it right over here and instead of sort I simply have to say I want to not remove I want to reverse that's it and let us run this file and this time we have the new list and you can see the first element is zico and the last element is CC let's see what's happening next and this time Lewis again had a fight with Nico and we again need to remove Nico from our list but before removing Nico let us have a look at our list so this is how our list is currently looking like and Nico is the third element or you can see the index number of Nico is two so keeping this in mind let us go back and see how we can remove the go from the list earlier I have shown you two different methods of removing elements one was this one of remove and the first one was with the pop method let me show you one more method Again by using pop let me copy all of this and let us go down now since Nico is at index number two what I can do is I can tell python that I want to pop an element from an index number two let us save and let us run this file for the last time and here we have it we have unfriended Nicole and this is our updated list the next data structure that we are going to learn is called as a tuple behind the scenes I have created a new file which is called as subjects.pi and let's see what's going to happen let me collapse my sidebar now it's time for Lewis to go to school and he has to choose his subjects but his school wants to make sure that once a student chooses their subjects they won't be able to change it so let's see how we can do this and the way to do this is by using a tuple so you can imagine Tuple to be like a stricter brother off list once you create a tuple you can't change or modify it so let's see how to create a tuple so let's say that we want to create a tuple by the name of subjects and the way to create a tuple is by using the round brackets and instead of these round brackets we have to add our elements suppose the first subject would be maths the next could be science then we can see history now remember that's similar to our list our tuples will also start with index number zero that means the index number for Max is 0 for science it would be 1 and for history it would be two let us see how to add typing for this one so here I can say that subjects is obviously a tuple and the way to define its type is we have to put our square brackets and since tuples are strict we have to define the data type for each and every element so for example in this Tuple we have three elements and the types are string and string so here we can see that the first element is a string the second is the string as well and the third is the string as well suppose we had one more element so if I say that we have one more element as 13 now the data type of 13 is an integer so what we would have to do is after this we would have to say that my fourth element is of the type of integer so make sure whenever you are creating a tuple you write the data type of all the elements inside the Tuple let me take it out this is not required for our example right now let me also put up a comment so saying that the index number for match is 0 for Sans is 1 and history is two let's see what we can do next so let me take it a little up so this time Lewis wants to count his number of subjects and you can do that by using the inbuilt function called as length so we can use a simple print statement and we can say that number of subjects then inside our curly brackets we can use the inbuilt function called as length and let us just pass our Tuple inside so we can say subjects let us run and see the output and here we can see that the number of subjects is three let us go back the next thing that Lewis has to do is Lewis has to sign up for all of the subjects so let us create a very simple Loop and by using the loop we can sign up for all of the different subjects you can use your regular for Loops to iterate over the Tuple so here it goes we can see for my subject in my couple of subjects for each iteration I can simply print out a statement saying that Lewis is signing up for let me get my spelling right Mr be signing up for and inside the curly brackets we simply have to say for my subject let us run and let us see the output so here it is Lewis is signing up for maths and then for Science and the last one is history let us go back so this time Lewis wants to see which is his second subject and we can do that by using our index so as I just mentioned tuples also have indexes so the second subject would have an index of one so let us try and print it out here I can simply say that I want to print out from my top love subjects the subject at my index number one also let me put up a comment saying that since the double starts from index 0 we are using one let us see the output so you can see the second subject is science let us go back and this time let us see what's happening so this time the school wants Lewis to take another three subjects to get his full credits now what happens is once you create a tuple you can't add different elements to a tuple for example when we saw list we could append elements to the list but you can't do for the Tuple then what can you do well you can add two different tuples and create a new Tuple let me show you how it is to be done so suppose the additional subjects which he has to take would be a new Tuple and we can say that the new subjects are English Python and physics on the next line we can create a new Tuple called as my total subjects and we can simply add our top subjects plus our additional subjects so now we have a new Tuple which has all of the subjects together we can also try and print it out so here let me just say that my all subjects would be my couple of total subjects let us run it and here we have the output you can see we have English Python and physics at the back and also we have maths Science and History so this is our newly created Tuple let us go back and let's see what's happening this time now it's obvious that out of all of the subjects Lewis loves Python and he wants to make sure that python is inside his list of subjects so we can check for an element inside a tuple by using our if and else blocks so let us see how to do that so here we can simply say that if python is in my Tuple of total subjects if this is true then I simply want to print out yay Lewis is going to Learn Python if not so we can say else we can print out oh no no python for Lewis so let us save this file and let us try to run this file for the last time and here we have the output now since python is inside our Tuple we get the output of a Lewis is going to Learn Python now let's try to learn about dictionaries dictionaries are of mapping type that means the dictionary are going to map a key to a value so let us see what's going to happen right now behind the scenes I've created a file called as marks.pi and I'm working in this one so let me collapse my sidebar and let us see what's happening now this time Lewis has given his exam and he has received his marks so let us see how it looks like so we can create a dictionary and call it as marks the way to declare a dictionary is by using your curly brackets and inside of this curly brackets let us give the key and the value pairs suppose the first subject is maths so we can say Max and he scored maybe 80 marks in his match so this is how your key and value pairs look like on the left of the colon we have a key and on the right we have a value let us give a couple of more key and value pairs suppose the next subject was science and suppose he fed 82 marks in science and let me add a couple of more subjects as well so this is his score and the next line let us print out all of this subjects we can say in my formatted string my marks and let us see marks let me save the file and let us try running this one and here is output so this is the dictionary that we just created now let us go back and see what's happening next let me put some comments right over here so this time Lewis wants to check all of the subjects now remember inside our dictionary the keys are our subjects so let us see how we can just get the keys out of our dictionary the way to do that is very simple let's also use a for Loop to print out the keys so we can say for my subject in my dictionary of marks I want to get all of the keys and for each iteration we simply want to print out the subject let us run this file and see the output so here is our output we have all of the keys inside our dictionary now let us go back and let's see what's going to happen next so this time Lewis wants to check all of his marks now again remember that the marks are the values so anything on the right is the value and this time we want to get only the marks out of our dictionary so let us do that and the way to do that is similar to something like this so let me show you how it is to be done so we can say for my score in my dictionary of marks I want to get only the values and for each iteration I just want to print out my score let me save the file and let me try to run this file and here we have the output here you can see we have all of our score let us go back let us see what Lewis wants to do next so let me take a little up this time Lewis wants to check out all of the subjects and marks together that means we simply have to print out our key and value pairs so let us see how we can do that again let us use our for Loop to print out the key and values so we can say for now since the keys is for the subjects let us call subject and on the right we have score so we can say score in my dictionary of marks I want to get all of the items now this method is going to return our key and values which we are capturing right over here and for each iteration let us print out our KN value pairs so here I can say that my subject and here we can say the score and we can say the score is out of just let me save it and let us try running this file and here we have the output match Lewis code 80 out of 100 science was 82 history was 78 and so on now let us go back and see what we have to do next and this time Luis wants to check if he has passed in all of the subjects or not and the passing marks are 50. so let us see how we can do this we can do this by using our for Loop and our if and edge blocks so let me show you how it is to be done so here we can say for my subject and my score in my marks dot items for each iteration I want to check if my score is greater than or equal to 50 only in that case I can print out that subject and I can say pass else if the score is less than 15 that means he has failed and so we can print out the name of the subject so we can say the subject and we can see field let me save it and let me try to run this file so let's see how he has done in his exam match is a pass science is a pass oh but what's this English is a field so let's see what's going to happen next let us go back to our file so let me take it a little up and let me put some comments so those things that there was some kind of a totally mistake for his English paper and he's asking for a revaluation and after the revaluation the new marks are 70 so let us see how we can update the values in our dictionary so this time what we want to do is let me show the dictionary so this time we want to update the marks of English from 35 270 so let us see how we can do that so let me go down and here I can say that from my dictionary of marks I want to go to my key of English and I want to assign the new value of 17. so this is how you can update the values inside your dictionary on the next line we can print out the value we can say something like this Lewis score inside the curly brackets we can see the marks of English in English so let me just save this and let me try to run this file so here we have the output saying that Lewis scored 70 in English now here what we are doing is this syntax we are just retrieving the value from our dictionary so the syntax means that from my dictionary of marks I want to get the value for the key of English let us see what is happening next now this time low is also took an exam for geography and his code 78 marks so this time what we have to do is we have to create a new key and a new value this time remember we don't have geography inside our dictionary of marks and we have to create one right now so what we can say is for my dictionary of marks I want to create a new key for my geography and I want to assign the value of 78 to it and Lewis also wants to check if he has passed in all of his subjects or not so let me go up and I just have to copy all of this and let me paste it right over here so here is the output and it looks like Lewis has passed in all of his subjects and you can also see we have the output for geography as well now let us go back so let's see what's happening this time so this time his friends on zorton they want to know how much Lewis scored in Python so let us see how we can retrieve the values from our dictionary so let me show you the first alternative let us create a new variable called as our python score and we can retrieve a value by using the syntax so we want to say that go to my dictionary of marks and I want you to get the value for the key of python and that's how you retrieve the value but this syntax has a couple of limitations which I'll explain it shortly but first let us print out these values let us print out the marks in Python so we can say Lewis core the python score in Python let us run this file and here we have the output saying that Lewis scored 98 in Python now let me show you one more alternative method let us go down and let me put one more comment and here again we can say that the python score and this time we can use one more alternate syntax so what we can say that from a dictionary of marks I want to get the values for my key of python and on the next line let us print out the same statement so let me copy from here and let me paste it right over here and let us run our file so this time we can see we again have the output now let us go back and let's see what's happening next so let us see what's happening this time and this time his friends from Earth they want to know how much Lewis code in Java so what we can do we can create a variable called as JavaScript and we can save from a dictionary of marks I want to get the value for my key of java and the next line let me try and print it out so what I can say that I want to print out Lewis code Java score in Java let me see and let me run this file and this time you can see that we have an error and the error is called as key error now this is because our dictionary does not have a keyword as Java so this is one of the limitations of using this syntax right over here let me put up a command saying that this syntax will throw an error now let's see a better way of getting the values from our dictionary and that is by using the get method that we just saw on the next line let me paste some comments and I want to comment this out because this is always going to fail so let us go down right over here let me take everything up so here let me create one more variable called as our Java score and let us use the get syntax so what we can say is from my dictionary of marks I want you to get the value for the key called as Java let me save this and this time let us try to print out this same sentence so I can just copy and let me paste it right over here let us run this file and see the output so this time we get the output of Lewis scored none in Java so let us go back and let us see what's happening now this method of get returns a none if it can't find the value and that's what is happening right over here one thing that I forgot to show is how to use the typing for this one so let us go up and let me show you how to write the type hints for our dictionary so this variable of marks this is a dictionary so we can say this is our dictionary and inside the brackets we also have to mention the types for our keys and values so here we can say that since all of the keys are string so the key is going to be of the type of string and the values are integers so we can just say int and that's it now let us go down and let us see what's happening so here on the line 108 this get method is going to return none or if it finds a value it is going to return our score which is of the type of integer now let us use our if and else blocks to print something meaningful so here we can say that if my Java score is none that means if we can't find the value then we can simply print out saying that Lewis did not study Java and else we want to print out this statement so let me take it inside my else blog and let us try to run this file and here it is we have the output of Lewis did not study in Java now let us go back the last thing that I wanted to show you is how to delete some elements or how to delete the key and value pairs from our dictionary now suppose we want to delete the key and value pair for English then we can say that I want to delete from my dish media of marks English so this is how the syntax goes let me remove the extra codes now let us print our marks one more time so I can see marks and let us print out the marks right over here let me run this file so this is how our dictionary is looking and you can see we have deleted English from our dictionary as well the last thing that I wanted to mention for this one is the lookups and dictionary are extremely fast what do I mean by lookup so on line number 108 we are getting the value from our dictionary so this is a lookup when we were working with our list or tuples we were using indexing but for a dictionary we always use the key to get the data and this is the reason why lookups in dictionary are extremely fast and we would be using dictionaries and lists in our final project as well so make sure you go through them a couple of times and understand what's exactly happening there is one last thing that I wanted to show you so if you open up the code from the GitHub so this is the code from GitHub inside my 4.04 data structures this is the file which I am referring to it is called as dictionary now let me collapse my sidebar so here I have one more sample dictionary called as pizza and you can see the structure is very interesting the first key value pairs we have integer as the key and string as the value for the next one we have a float as our key the next one is even more interesting we have a tuple as the key and the last one we have a Boolean value as a key now the interesting part is this is a valid syntax so let me copy all of this and let me paste all of these things inside my IPython shell so here it is let me paste it right over here and let us try to print out our pizza so you can see we have a valid output so what happens is you can use any data type for a key as long as it is immutable so our strings are immutable integers are immutable floats booleans are also immutable and we also saw that our tuples are immutable as well so you can use all of these data types as your keys the way to retrieve the data is similar so let me give you some small examples so here we can say from my dictionary of pizza I want to get the value for the key of 10. and here we have the output the same thing can go for our float as well so we can say 8.99 and here we have the value you can do the same thing for our Tuple as well let me copy this Tuple and here I can say from my dictionary of Pisa I want to get the value from the key and this time the key is a tuple so let me paste it right over here and you can see we have the right output but before we make such additionally I want you to wait and think do you think that this is going to be a developer friendly dictionary I would rather think not I just wanted to show you that you can create such dictionaries and all of this is a valid syntax now let us have a look at the next data structure and this data structure is all about being unique the name of this data structure is called as a set for this video I have created a new file called as teach dot pi and let's get working with this one so let's see what's happening this time Lewis wants to show some of his English magic to zortans but Jordan's they can't understand what's happening and they want to see each alphabet separately that means they want to understand each unique alphabets so let's see what's going to happen next so suppose we have a magic word called as Abracadabra now let's see how we can get the unique alphabets from our string so on the next line let us create one more variable called as unique alphabets and in order to get unique alphabets from the string we have to create a set and the way to create a set is by using the cost which is called as set and let us pass our variable magic words to this one now if you hover over the variable unique alphabets you can see the type is set and the set is of the type of a string so let's write that over here so this is a set and the data type is for the string let us print out our unique alphabets so here we can say I simply want to print out my unit alphabets let me save it and let us try to run this file and here we have all of the unique alphabets so let me take this a little up so inside our word of abracadabra the alphabets of c d a b and R all of this alphabets are unique let us go back let's try one more time and this time let us use a sentence so we can create a sentence like this the big blue sky and the big blue ocean and let us see the unique alphabets so I can reuse my variable of unique alphabets and this time let us create a set from our sentence and let me copy and paste this line right over here let us run the file and this time we have an output so all of this alphabets are unique inside our sentence but what happens if you want to check the unique words instead of the characters let us see how to do that the first thing that we would need to do is we would want to convert our sentence into a list of words so let us see how to do that first let me create a variable called as my word list and we can simply split our sentence by using an inbuilt function by the name of split so we can say that I want to split my sentence now if you see the type of sentence is a string right so on a string you have a method called as split so this is going to return a list of all of the words inside the sentence let us try to print it out on the next line so let me say my word list is my variable of word list let us try to run this file so here you can see we have the list of all of the words inside the sentence so the next step is to actually create a set out of our words list and once we create a set then we can know all of the unique words inside our sentence so let's do that let me put up comments in that we need to extract the unique words let us create a variable called as unique words and we simply need to create a set out of our word list let us try to print it out so here I can say my unique words and the variable of unique words let us try to run this file so here you can see the unique words are big Ocean Blue Sky the and and also one more thing that I want you to note that at the beginning and at the end we have the curly brackets so you can see right over here for the beginning we have a curly bracket and at the last we have a curly bracket so this symbolizes a set in the dictionary we had key and value pairs inside curly brackets but for a set we only have values so let us go back so this time zortans they are really impressed and they want to see if we can add a couple of more words to our set so let's see how we can try and update our set so what we can do is let us take the existing set for our unique words and we can say that we want to update with the new values and here we need to pass an iterable that means you can pass a list or a tuple or any other data structure which is iterable so let me paste some values right over here so let us see if we can update with the new values of big blue and Sky let me copy this line and let me paste it right over here and let me try to run this file now if you see nothing is happening this line and the line before that they are exactly the same now what's happening no sense set is all about being unique we can't add the existing values to the set if you go back to our code big blue and Sky these words are already existing inside our set so nothing is happening let me put up a comment if you try to update your set with existing values nothing is going to happen now let us try to update with some other words which are not there inside the set so I can say my unique words I want to update with the new values and this time I want to pass the value of green and grass let me copy this paste it right over here now let us try to run our file and this time you can see we have the words of green and grass inside our set let us go back and let us see what's happening next let me put some comment right over here saying that something does happen now what happens is zortens they don't like the word of grass now let's see how we can remove the word of grass from our set so we can simply say that from my list of unique words I want to remove and I want to remove the element of grass and again let me copy and paste all of this and let us save and let us run our file and you can see that this time we have removed the word of grass from our set let us go back now I just wanted to let you know that you can do a lot of other operations on sets such as your union and intersections and so on but I would not be covering all of those inside this tutorials now let us see how we can use data structures for our game so behind the scenes I've created a new file called as game saves button 2 and this is the file and I have also pasted a couple of comments right over here so this time what is happening is the war is just getting more intensified this time the army of Thanos is also arriving and since it's going to be a very intense fight our program will automatically choose superhero and the super villain and our Avengers have exactly three chances to defeat Thanos now this time since we have already seen data structures we are going to create a nice data structure for our characters but first let me go to my old file inside my folder number zero three and let's copy a couple of things from here so let me copy from here till my last message let me go back let me collapse my sidebar and let me paste it right over here so this is our current file now let's get started this time we are going to define a nice structure for our characters you have seen that our character has an attack power and Thanos had life but this time our super villains are also going to attack our superheroes so all of the characters will have a property of life as well so let us see how we can do all of these things let me create a constant and let me call it as Iron Man and the most ideal data structure would be additionally now since with dictionary we can have the key and value pairs it makes much more sense to use a dictionary right over here the first key would be for the name of the character so in this case the name is Iron Man the next key would be for the attack power so I can say my attack power the value is of the type of an integer and the attack power of Iron Man IS 250 the last key and value pair would be for the life so you can say I want to have a key for my life let's give him a life of say 1000 now let us see how we can Define the types for this one now obviously Iron Man is a dictionary now if you see the structure of our dictionary all of the keys are strings but for the values sometimes we have a string and sometimes we have an integer so let us see how we can Define the types over here since all of the types the keys are going to be string so we can see the key is of the type of a string and the value we can see it's either going to be a string or it is going to be an integer so this is how you define the types for our Iron Man now since this is going to be a constant we can wrap all of these things inside final so let me do that let me put my brackets and let me say final but what happens is typing all of these things again and again becomes so boring so what we can do is we can use a small trick and that trick is called as in typing Alias so what I can do is let me just cut out all of these things and here let me create a new variable called as character and I can Define the type right over here so what I am doing on line number 20 is I'm defining a new variable called as character and I am assigning the type to it so what I can do on line number 22 is I can simply say that Iron Man is a constant of the type of character so this is going to save us a lot of typing let me put up some comments over here now let us go down and let's create some more superheroes so let me just paste it right over here so what I've done is I have created three more superheroes one is Black Widow Spiderman and Hulk and I have also assigned values to each of our superhero let me put a comment right over here so this is for our superheroes similarly let us also do for our super villains so let me put a comment right over here so I can say that let us Define a super villain called as Thanos the type would be final and we can say character right over here and let's create our dictionary so we can say the name is Thanos the attack power is 1500 and life is 1500 similarly let me create some other supervillains as well so I've created a couple of more super villains One is Red Skull and the last one is Proxima now since we have a structure for our character we don't need all of these things so let me take it out the next thing is let us create a list of all of our superheroes and all of our super villains so let me put up a comment and let us create a list for our superheroes and we can say this is going to be a list so I can put my square brackets the first is our Iron Man next is Black Widow next is SpiderMan and last is the Hulk now let us see how we can Define the typing for this one so superheroes is a list and the type is of the character let us go down and let us create one more for our supervillains as well so I can say that my villains is again going to be a list of my character and let us create a list right over here the first is our Thanos then is for the Red Skull and losses for Proxima let us go down and let me put up a comment right here that choices and attack numbers all of this are our helper variables it takes out and let me take this out as well that's not required now let's go down and let us see how we can implement the actual attack the last time we had used a while loop this time I want to show you a for Loop and I also wanted to show you a new keyword that keyword is called as range so first let me type and then I will try and explain what's happening so I can create a for Loop saying that for attack in my range of 3 now let me try to explain what's happening if you remember we have a constraint that Avengers can attack only three times and that's what I'm doing right over here let me open up my IPython shell and let me try to explain over there so range is an inbuilt keyword inside python so we are typing as for my number in my range of 3 I simply want to print out my number let's see what kind of output we are getting so we get the output of 0 1 and 2 and after we get to our for Loop is going to stop so that means our Loop ran for three times this was the first this was the second and this was the third time so this is where I am trying to implement our constraint of Maximum three attacks so here our for Loop will run for exactly three times and then it will exit let's see what we can do next now since this is a very intense fight our program has to choose a superhero and a super villain randomly so let's see how we can do that first let me put our Command and here again I want to show you one more function which is built into Python and that is called as random integers so what's going to happen is for each iteration of our for Loop we want to choose a superhero and a super villain and remember our superheroes and supervillains are listed and lists have indexes right so for Iron Man the index number would be zero for Black Widow the index number would be one SpiderMan would be index number two and Hulk would be index number three so what we are going to do is we are just going to generate a random index number and we are going to take that Superhero out of our list of superheroes and similarly for our villains as well but before we can generate an random integer first we need to import that functionality so here I can say from my package of Random I want to import something which is called as random int let us go down and let us see how to use this let me go to my iPath and shell and let me give you a small demo right over here here I can say from random I want to import my random integer and let us try and see the output of random end and let us pass the values of 0 to 10. so this time we get an 8 let us try to make it one more time this time we have a three this time we have a seven so you see that we can randomly generate different numbers so let's see how to use this inside our program so here I can say that for each iteration of the for loop I want to generate a random integer and my starting index would be 3 and my last index would be 3 now let's see why I'm writing 3 over here the first time we want to generate a random integer for our hero so let me create a variable called as hero index and assign the value right over here now let's see what's happening if you see our list of superheroes we have four elements that means the length is 4 but the index number is 3 that is why I am writing 3 right over here let us generate a random integer for our billion as well so let me create a variable called as villain index and I can use the same function random integer I want to start at 0 and at the max I want to have 2 that's because the length of valence is 3. now let's see what we can do next so what we are doing on line number 54 and 55 is we are just generating a random integer number the next thing is we can use that integer number to get a superhero from our list so let's see how to do that so let me put up a comment saying that we have a couple of more helper variables and I can say that I want to get my current superhero from my list of superheroes and the index number is the randomly generated number which we have stored in the variable of hero index so that means on line number 54 we are just generating an index number and online number 57 we are using that index number to get a superhero from our list of superheroes let us do the same thing for our villain as well so here I can say that my current villain would be from my list of villains from the index of my villain index let us try to print out the values and see what's happening so here I can say I want to print out my current superhero and I want to print out my current supervillain let us run this file so here is the output for the first iteration we have Iron Man and Proxima for the second iteration we have black widow and red skull for the third iteration we have Iron Man and Thanos so you see for each time we have a different pair who is going to attack each other and that's what we want so let us go back to our program let us display a nice message right over here so let us see I want to print using my formatted string the first thing I want to display is my attack numbers I can save my attack and let us also display the names of our superhero and our super villain who are going to fight so I can say inside my curly brackets that my superhero and let us also get the name now remember that current superhero is a dictionary and we can get the values by using our key and values and tags so I can say that I want to get the value of my key of name and then we can say that is going to fight with here we can display the name of our super villain so I can say my current villain and I want to retrieve the value from my key of name let me save it let us take out this line it's not required now and let me try and run this file so this time we have an output for the first attack we have black widow who is going to fight with Red Skull the next time we have black widow again and she is going to fight with Thanos the last time SpiderMan is good fight with Thanos what we can do right over here is instead of displaying 0 we can start from one so let me go back and here I can say attack plus of one let me save it and let me try to run the file so this time we have a much better output let us go back so here before we can attack we also need to calculate the total life so what's happening is for each iteration of our for Loop we have a superhero and you also have a villain so we need to calculate the life of our superheroes as well as our super villains for that we would need two more variables so let me go right over here and create two new variables right over here so the first one would be for our hero life and initially give it a value of 0 the next one is for our villain life again let us set it to a value of zero now we don't require this variables because remember we are using the function of range so we can simply take them out it's not required let me take it up let me save my file and let us go down right over here let me put up a comment saying that first we need to add the life for each iteration so I can say for my life and for each iteration what I want to do is this is my life of hero and I want to add the life of my current hero to my hero life for each iteration so I can say my hero life plus my current hero and from my current hero I want to get the value of his life let us do the same thing for the life of villains as well so I can say my villain life is equal to my villain life plus my current villain and I want to get the value for life now what we can do is we can also use our shorthand syntax that means we can take this out and here we can say plus equal to so this means the exact same thing let me do it for the villain life as well so let me take it out plus equal to now you see that we have an error right over here but for now just ignore this error all of this errors will go away when we Implement these characters by using classes now let's see how to implement the actual attack so let me put up a command now what is going to happen is our villain is going to attack the hero so what we need to do is we need to minus the attacking power of the villain from the life of the hero so let us do that right over here so I can say that my hero life would be my hero life and minus I want to have the attacking power of my villain so I can say my current villain I want to get the attack power we can use our shorthand syntax right over here as well so here I can take this out and I can say minus equal to let us do the same thing for the villain life as well so here I can say my villain life minus equal to the current superhero and I want to get the attacking power of my superhero now let's see what to do next so this attack is going to happen for three times and after the attack is done we need to see if we are willing or we are losing so once we are out of the for Loop let us print a nice separating line so let me put up a command and let us print a nice separating line so I can say equal to multiplied by 70. so what this is going to do is it is simply going to repeat the string of equal to 70 times next let me take it a little up and let me put up a command so this time we want to check if we are winning or if we are losing and the logic for this is very simple if the life of the heroes is greater than or equal to the life of the villains that means the Avengers have won so let us do that right over here so we can say if the hero life is greater than or equal to the villain life then we simply want to print our win message else that means we have lost so let us print out the Lost message that's it let me save my file and let me try running this amazing we have a nice output so here you can see that we attacked three times the first time SpiderMan attacked Proxima the second time again SpiderMan attacked Red Skull and the third time Black Widow attacked Red Skull but unfortunately Thanos killed Avengers and he has captured zorton let us try playing one more time so let me play one more time okay so this time we have saved it's so amazing welcome to the last video in this section now this is an extra video and I want you to come back to this video after you learn about classes I am putting this video right over here just for the sake of completeness in this video we are going to learn about enums so behind the scenes I have created a file called as choices and let us see what's going to happen now elams are the perfect data structures whenever you want to create multiple choices or varieties so let's see how to do that the first thing is we need to import enum so we can say from my package of enum I want to import enum and let us Import Auto also so I'll explain what is it all about suppose you wanted to create choices for different pizza sizes so let us see how to do that so I can say my class of my pizza size now this inherits from my class of enum let me put up some documentation and here we can say that my first choice would be for a small size and we can assign it a value of 8 the next choice could be medium it could be at 10 inches then we have one more for large it could be 12. so what this simply means is we have created an enem of pizza size and we have three choices small medium and large now let us see how to work with this enum so let me go down let us create a variable of choice and suppose the choice of the pizza size could be medium so we can say from my enum of pizza size I simply want the medium value let us print out the value on the next line so I can say print and I can say one order four now in order to get the value we can say from my enum of choice I want to get the value and then I can write inch pizza so let me save this and let me run this file and we have the output one order for a 10 inch pizza so let us go back let us create one more enum for colors of a tshirt so I can make a class and the class is for color this also inherits from my enum let me write some documentation this is for my tshirt varieties and here I can say that my first choice is red and I can give it a value of red the next could be blue and green let us also try to print out the values so let me go right over here and let me copy this line let me go down let me paste it right over here and here we can see one order for my colors suppose we want to have Green Dot we can get the value right over here and this becomes my tshirt that's it just save and run your file and here we have the output one order for a green tshirt let us go back let us create one more enum there may be times we don't require a value let me show you one example let me create a class called as role we can inherit from enum now suppose you want to create different rules for your stuff it could be a associate it could be a supervisor and so on and you don't want to assign values to them but what we can do is we can automatically give them values let us see how to do that suppose the first rule is for an associate we can assign it a value by using our imported function called as Auto now remember on on line number eight we are importing Auto and that's what we are going to use right away so what this Auto is going to do is the first time it is going to assign the value as 1 the next time it is going to assign the value of 2 so suppose we have one more role for a supervisor and we assign it to Auto so this time the value of supervisor would be set to 2. suppose we have one more rule for the manager now this time the value of manager would be 3 let us try and print it out so I can say print from my in above role I want you to go to my manager and I want you to print the value let us run this file and here you can see that the value of manager is automatically set to 3. welcome to a brand new section this section is all about functions till now we have used inbuilt functions such as print and in this section we are going to learn how to create our own functions but before we can create our own functions I wanted to talk a little bit about functions the main goal of a function is for your data processing you have some sort of an input this input goes inside your function your function processes the data and finally we would like to have some sort of an output so this is your ideal function you take an input you process it and you give back an output but in real life it's not so simple so let's try learning more about functions so let us go back to our code editor behind the scenes I've created a folder called as zero five functions and this is the file called as greater dot Pi let us see what's going to happen right now so this is a very simple program for greeting and the people in shortened they greet each other by saying Zola and Lewis wants to write a program where he can greet his friends in Zola so let's define a function and the way to define a function is by using the keyword called as def followed by the name of the function so we can say the name of my function is greda and this function accepts one argument and we can call that argument as anything in this case I am going to call that argument as name and then you put your colons and inside of this you have to write the body or the logic of the function you can also write some sort of a documentation and you can do that by using your triple quotes so you can say that this function greets Zoltan let us go to the next line and let us print out a greeting message so what we can do is we can simply print out a message we can use our formatted string and then we can say Zola followed by the name now let us see how we can Define the types for this function we can say that this function of Grita accepts one argument and we can Define the type right over here so we can say my argument has to be the type of a string and since this function returns nothing so we can say that this function is going to return none let's create one more function called as main so we can say this is my main function this function does not accept any arguments and this function returns nothing here we can create a list of all of the friends so I can create a variable called as friends and let me assign some values to it so these are all of the lists of the friends and we want to greet all of these friends we can create a very simple for Loop and using the for Loop we can call this function let me show how it is to be done but before that let me add the types for this as well so friends is a list and the data type is a string or the next line we can say that for my friend in my list of friends for each iteration I simply want to invoke the function of greeter and pass a name so what we can say right over here is for each iteration I want to call the function of Greater and I simply want to pass the friend each time now the reason why we have created a main function is just by sake of convention we always like our programs to start with the function which is named as Main now let us see how to use this function you need to invoke or you need to call this function in order for our program to run so on the next line we can invoke our main function and the way to invoke is by just writing main along with the brackets so whenever you write the brackets that means that you want to invoke the function if you just write like this it means an assignment but if you want to run that means you want to put the brackets so let me save this and let me try to run this file and here we have the output so we have Zola CC Zola Rocco and so on we just saw how to write a function and in this video I'll show you how we can write a slightly better version of our greater function first let us go back to our diagram now in an Ideal World We would like to take one input and we would also like to give back an output but let us have a look at this function called as greeter we are taking an input but we are not returning an output so let us see how we can create a better version of this so behind the scenes I've created a file called as beta greater dot pi and let us get started with this one let us go back to this file and let me copy all of these things so let me copy right from here let me go back to this file and let me paste everything right over here let me collapse my sidebar and this time let us try and return something so instead of just printing Zola followed by the name we can actually return this value so let me take out the print statement the bracket as well and here I can say that I want to return my new string so what this function is going to do is it is accepting one argument and it is transforming that string into a greeting message and we are returning that string as well now since this function is returning a value we also need to change the type over here and the type is string so what happens is when we were using the print function we were causing something which is called as a side effect but this function is a more pure function it takes one input and it gives back one output now it is the responsibility of the color function of how to handle the written data let me tell you let me show you what I mean by it but first let me write some comments so let me go right over here and put me some comments saying that the call function is responsible for the written data and here I can say that this function transform the original string to something useful and let us change the documentation as well so this function is going to return a greeting message now let us go down and let us see what's happening on line number 25 we are invoking the function of Grita and our main function is responsible for calling this function nut means conceptually you can call the main function as your caller function that means main is calling greater and now it is the responsibility of your caller function that means it is the responsibility of your main function of how to handle the return values now this pattern is very useful what if you wanted to check for the written values you can check for the written values and you can do something with it let us have a small example right over here let me put up some comments over here now suppose Lewis finds Chico to be queued so what we can do is we can say for each iteration if Chico is in the output of my function of grida so greater and friend now remember our function of Grita is returning back a string and if that string contains Chico then we can't print out something like this so here we can say that print is cute or else we can simply print out the message as it is so here we can simply print our glitter and friend so what's happening is for each iteration our function of Grider is returning back some values and that value is Zola followed by the name of the friend so for the first iteration the return value is Zola CC the second time is zolaroko and the third time is Chico and so on but since the function of gritter is returning as data we can handle that data in multiple ways so first let me run this file and then let me try and explain you again one more time so here we have the output that Chico is cute so what's happening online number 27 is let me open up my IPython shell so here I can see if Chico in Sola Chico then we have the answer as true if we say something like this Lewis in zorachico the answer is false and that is what we are doing on this line suppose the output of this function is zorachico that time we simply want to print out a message saying that Chico is cute so basically what we are trying to do is our caller function is handling the response of glitter in multiple ways let's have some more practice with our functions for this video Behind the Scenes I've created a file called as weight dot pi and let us see what's happening now since Lewis is staying in zorton gravity Works differently over there and this time we want to calculate how much you wait in zorton and this is the formula to convert the Earth's weight to salt and sweet let me go down over here and let us Define a function which is called as calculate weight this will accept one argument which you can call as weight we can Define the type as a float because your weight can have decimal values so let me write the type the float and this function will also return the float value inside the body of the function we can have one single return statement and we can say that I want to return and here we can calculate the weight by using the formula so we can see the weight plus of 32 divided by 8. now let us try and print out the weight so let me write a very simple print statement we can use our formatted strings so you can see U way and inside the curly brackets let us invoke the function so I can say calculate weight and for example let's pass 60 kgs and then you can see kgs on zorton let us say this and let us try running this program so here we have the output saying that you weigh 11.5 kgs on certain let us go back I wanted to show you one small trick what happens if we want to display exactly two decimal places or three decimal places and so on the way to do that is right over here so here we can say that I want to display my two decimal places for the float receive a file and drive Renegade for the last time and here we have the output so you can see we have two decimal places let us have a look at the next example this time I am working on this file called as fly dot pi and let's see what's happening this time now we just saw that gravity insulting is much less as compared to Earth so what happens is if you weigh 15 kgs or less then you can actually fly on certain so what Lewis wants to do is Lewis wants to see which of his friends can fly so let's see how to work with this one and there is one very important concept which is called as single responsibility principle and let us see what do I mean by this principle in this video so as a convention let us create our main function first and from there we will create functions as we require them so let me Define my main function so I can say my Define and Main this function does not take anything and it returns none so I can write none over here now inside of this function let us create the friends of Lewis so let me create my dictionary of friends and let me assign some values to it so here we can see that we have a couple of values cc is being 54 Rocco is being 88 and so on let us also write the types for this one so friends is medicinally the keys are strings and the values are integers what we can do over here is instead of just declaring integers we can also write a float so in case if you have a decimal value in the future we can easily handle it if we declare it as a float next let us create a function called as flying friends and see which of the friends can fly so I can say my function of flying friends and we just have to pass the dictionary of friends now let us go up and let us start creating our functions so as you can see there is one small constraint and that constant is you have to weigh 15 kgs in order to fly so what we can do is we can create a constant so let me call the constant as maximum flying bit and we can assign it a value of 15 let us also Define the type for this one so since this is a constant it has to be declared as final but before we can write final we need to import it so here I can say that from typing I want to import final and here we can use the keyword of final so our maximum flying weight is a final and the pipe we can Define it to be a float as well now let us go down and let us create the function for flying friends so here we can say that Define flying friends this takes one argument let us call that argument as friends and and as you can see on line number 28 we are passing the argument of friends and the type of friends is this one is dictionary string and Float so let me copy this right from here and let me go back to my line number 18 so we can Define the type right over here so this friends is going to be a dictionary and this function is not going to return anything so I can just write none let me also write some documentation for this function so what this function is going to do is this function is going to display all of the flying and nonflying friends now remember that this function is creating a side effect this function is not going to return anything that's why we can say that this function creates a side effect now let us go down and let us Define the body of this function so here what we can do is we can use a for Loop to iterate over the friends and see which of the friends can fly or not so I can see for the name and Earth weight in the dictionary of friends we want to get all of the items now remember that the keys are the names so if you see right over here the key is the name that's why I'm naming this parameter as name and the values are the weight so that's what I'm calling as Earth weight right over here so for each iteration the first thing that we want to do is we want to calculate the weight in certain so let me create a variable called as zort and weed and here we need to calculate but for calculation let us create another function called as calculate weight so let me write the function first and then we will create it so calculate weight would be my function and I need to pass my Earth weight to it now let us go up and Define this function we have defined this function in our last video so let me open up that file right over here so the file was called as weight dot pi and I just have to copy this go back to my current file let me collapse my sidebar and let me go to the top and we can paste it right over here let me also add some documentation so what this function is doing is this function is calculating your weight in zorton so this is an example of data transformation it is taking a weight in kgs and it is returning the same weight but in short and in weight you can also say that this function is a pure function since it takes one input and gives back one output now let us go back to our function of prime friends so on line number 36 we are able to calculate the weight in zorton now the next thing to do is we just need to check if we can fly or not so here we can say that if and here we need one more function to check if we can fly or not so first let me write it and then we will create the function we can call that function as can fly and we need to pass the weight in shorten so let me pass my zorton weight now let us go up and create this function as can fly so just let me go right over here and I can Define my function as can fly this function accepts weight and the type would be a float and this function is going to return a Boolean value let me write some documentation for this as well so the only responsibility of this function is it is going to see if you can fly or not that's why we have the written value as the Boolean so this function is also a very nice example of data transformation so you can see that we are accepting a data which is of the type of fluid then we are transforming the data and we are transforming from a float value to a Boolean value let us see how we can write the body of this function now the body of this function is very simple we just have to say that we have to return if my weight is less than or equal to our constant of Maximum flying weight so what we are doing is we are basically composing functions where each function has only a single responsibility for example this function of can fly the only responsibility of this function is to say you if you can fly or not now the only responsibility of this function calculate weight is just to transform the weight from the Earth to the Sorting in weight now let us go back on line number 47 we have created this function can fly now this function is retaining a bull value so we can use it with our if and else blocks let me take it a little up so here we can see that if the friend can fly then we can simply print out a nice statement saying that here we can put the name and then you can display the weight in zorton and then we can say kgs can fly on Jordan else that means the friend can't fly in that case let us print out another statement saying that the name followed by the certain weight can only walk on zorton let us save it and let us try running this file but before we can run this file we have to invoke our main function so let me go at the bottom and here I can say that I want to invoke my main function so I can say mean followed by our brackets let me save it and now let's run this file so here we have the output CC the weight is 10.75 in shortened so she can fly but for Nico Nico weighs 16.75 so he can only walk on zorton and similar with zico as well so getting back to our program what we have done is we have seen how to create functions which can have a single responsibility principle now let us understand one more very important part of functions and that is how we can work with variable arguments and variable keyword arguments let me create a file over here and let me name it as arguments and keyword arguments that means args and kwarts for short let me put up some comments the first thing that I want to show you inside this program is all about unpacking first we will see how we can unpack a couple of data structures in Python and once we understand unpacking then we can move to the variable and the keyword variable arguments so the first thing that I want to show you is all about unpacking suppose you have a tuple like this Lewis and Zappa you can unpack the values of this Tuple in a single line so on the left I can say that my Lewis would be my first name so I can write fname and Zappa would be my last name so I can say l name and that's it this is called as Tuple unpacking Lewis would be assigned to this variable and Zappa would be assigned to this variable just to confirm let us print out the values and see what we are getting and you can see we are getting the right values now let's see how we can unpack a list suppose you have a list like this and I want to unpack this list but while unpacking I only want the first value inside a variable and I want all of the rest into a separate list we can do this by using a special syntax so I can say first then I can say star rest of the values is equal to my list so let's see what's happening the first value that means cc is assigned to this variable and Roku Chico and Nico inside a list is being assigned to this variable we can name the variables whatever you want let's try to print out the value and check if we are getting the right output or not let me run the file and here you can check the output let me take it up the first value is CC and that's what we are getting right over here rest is a list of all of the remaining values Rocco Chico and Nico that's what we have right over here next let us see how we can unpack a dictionary suppose we have an existing dictionary like this so this is for specifications type is dynamic optional static typing and it is found everywhere let us create a new dictionary and let us try to unpack the existing dictionary into it so let me call the new variable as Lang and I can see name is python now I can unpack the entire dictionary right over here by using a very special syntax so I can say star star followed by the name of the dictionary that we want to unpack so the name of the dictionary is specs that's it let us print it out and see what we are getting and as you can see we have the right dictionary so the name is Python and here you can see we have unpacked the entire other dictionary as well now let's go back to our program now let's try to think of a situation where we would use this functionality suppose we have a function and this function has to accept unknown number of arguments at that time we can use this functionality now suppose we have a function called as unknown friends and we don't know the number of friends that we are going to get in the arguments so here I can see that we are going to receive variable argument and that variable argument I can declare by writing so star and the name of the variable as a convention whenever we are getting variable arguments we name that variable as args now let's go to the body and see what we can do with this one let's try to Simply print out the values so I can say for my friend in my arguments I simply want to print out my friend oh it has to be friend not friends so this looks good now let's see how we can add types to this function by default python is going to pack all of the variable arguments inside a tuple so essentially what's happening is this argument is going to be of the type of Tuple and since this function is not returning anything this is going to return none let us invoke this function on the next line so I can say my unknown friends and here let me pass a couple of friends so I am passing an unknown number of friends now adding type in to this variable it's a little tricky because by default RX is a tuple but we can say this Tuple is of the type of string and that's it this is how we would add type hints to our variable arguments this simply means that our variable of args is a tuple and the data type inside the Tuple is of the type of string let us try to save this file and let me try to run it and we have the right output we can see all of the friends right over here so all of these friends are coming from this line right over here line number 33 now similarly we can also accept keyword arguments now what do you mean by keyword argument first let me write the program and then I will explain what exactly I mean by a keyword argument so let me put up a comment so suppose we have a function called as unknown product and this function accepts a variable keyword arguments so that can be denoted by two stars and by convention we always name the variable as kwarjs that means keyword arguments now let's see what we can do inside the body of this function now what python is going to do is it is going to pack all of the keyword arguments in the form of a dictionary so we can simply print out the key and the value from our keyword arcs dot items and let us print it out I can also write this in a short form V for value and K for for the key and here I can simply say I want to print out my key and my value now let me try to invoke this function by passing keyword arguments so this is the place where all the things are going to get cleared so I can say my unknown product and the keyword arguments would look something like this name is equal to Pizza price is equal to 3.99 topping is equal to olives and so on so you can see all of the arguments are in the form of the key and the value the key and the value so that's why we call this variable as a variable keyword argument by default it's always going to be in a form of a dictionary now let's see how we can add types to this one now adding types for this one is really very tricky if you see our keyword arguments the first one is a string the next one is a float the last one is a Boolean so we don't know what kind of argument we can get inside the dictionary so this time what we can say that the values can be anything so I can write the type as any and let me import any from our typing Library so on the top I can say from typing I want to import any so what this really means is since we don't know the value of the type of the dictionary we are going to accept any kind of a value and since this function is not going to return anything we can say that the return type is none let's try to run our program and here is output let me just take it up so for the variable keyword arguments we have name price toppings and extra cheese and that is what we have right over here now let's see how we can combine both of these Concepts together that means let us combine the variable arguments and the variable keyword arguments in a single function so let me put up a comment over here suppose I have a function called as invoice wherein I am supposed to generate an invoice for a product but I don't know what is the product I don't know the characteristics of the product then how do I handle this situation so let's see how we can Define the function the first argument can be the name of the product so I can simply write as product the type is going to be a string after that since we don't know what the product is all about or the different varieties of the product we can simply write that we can also accept a variable argument right over here now suppose the user gives an argument in the form of keywords we can handle that situation as well by using our keyword argument so we can say double star keyword and args and this time let us simply print out our product arguments and our keyword arguments so I can say I want to print out my product let me copy and paste then I want to print out my arguments then I want to print out my keyword arguments now since this function is not good written anything so I can say that it's going to return none now let's try to invoke this function so let me go down over here I can say invoice my product would be sneakers now suppose the sneakers are available in black and white color so I can give a variable number of arguments so I can say black and white we can also Define a couple of keyword arguments over here suppose we know the name of the brand so we can say my brand is equal to me bits Nike the category would be my Air Jordans price could be 899.99 dollars in stock would be a Boolean value and let me assign it a value of false these stickers are not in stock let me save my file so as you can see my formatter which is black it automatically formats my file now let me save the file and let me run it for the last time and here we have the output so let me just take this down the product is our stickers so that's what we are getting over here now this arguments by default this is going to be a tuple so that's why we have a tuple over here and the keyword arguments this is always going to be packed as a dictionary so that's why we have the last line as a dictionary there is one more important concept that I want to cover and after that we can move on to our game this concept is called as your local and Global variables for this I want you to create a new folder right over here and I want you to call that folder as scratch pad you can utilize this folder for adding small programs and for doing small experiments I always create and use a scratch folder let's create one file inside of this folder and let me name it as variable Scopes let me put up a heading right over here so we are going to talk about global and local scopes for that let us try to understand One More Concept all of these files that we are creating these files are technically called as modules so in the world of python all of these files are modules now let's go back to our file inside our module if we declare a variable like this num is equal to 10 that means this variable has a global scope that means anyone inside our module can use this variable any function or any functionality or any variable inside the module can use this variable so let's create a function called as print Global num and this is simply going to print out our number let me save it and let me invoke it right over here so I can say print Global number we can do a slight improvement over here we can use a formatted string and we can say Global number is and this is my number now let us try to execute this file and we have a output saying that the global number is 10. now let us see what happens if we declare one more function and if you declare the same variable inside that function so let me create a new function by the name of print num this does not accept anything and inside this function let me assign a value of 20 to the variable of num and let us try to print out and see what values we are getting over here so I can use my formatted string my local number is the now let us invoke this function and let us see what we are getting let me run this file and here is output now watch closely what's happening on line number eight we have declared that the num is 10. and on line number 16 we are saying that num is equal to 20. now what happens is whenever python sees we have the same variable python is going to create a new variable called as num and this variable is available only inside our variable of print num and that's it so this is also called as variable shadowing now please keep in mind that this variable shadowing can introduce a lot of bugs and this bugs can be really difficult to debug just to demonstrate let me go right over here and let me say I want to print my num let me save it and let me try to run it so here you can see the global num is 10 but on the second line the local number is 20. and this 20 is coming from our line number line number 17 so this variable is accessible only inside this function and it is not valid outside outside only this number that we have declared on line number eight is visible that's why we are getting the output of 10 right over here now let us see how we can access This Global variable and how we can do some operations on it let us create a new function by the name of increment number here we simply want to increment our number by 2 so we can say my num plus equal to 2. but what's happening right over here is python is seeing that we are doing some sort of an operation on num so python is going to create a new variable we want to increment the global num so we have to explicitly tell python that hey python I want you to use the global num and that's it let me put up some comments so I have a comment for this one and this one is my function or my local scope and this one for my Global declaration let me save it now let me increment the number and then we can print it out so let me say that I want to increment the number let me save it and let me try to run it so this time you can see the global number is 12. now let's see one more behavior of the global number so here let me create a new function by the name of increment my local num and here I am saying that my new number is is equal to my existing number plus of 10. and let me print out my new number right over here now can you tell me what is going to be the output of line number 13. well we don't have to guess we can simply run the program and let's see what output we are getting so let me invoke the function right over here so I can say my new function I want to invoke it let me save the file and let me run it so as you can see I am getting the output as 22. let us see what's happening right over here so as you can see on land number 29 the value inside num is 12 you can see that's what it is and since we are creating a new variable and we are trying to assign value to the new variable python is taking this num from the global scope in the global scope the value is 12 and we are trying to add 10 that's why the new number is 22. in the next video we will go back to our game and let us see how we can divide all of the logic into small functions now let's see how we can use functions inside our game so I want to do just copy this file from folder number four to our folder number five and I want to just rename this file from number 2 to number three and that's it and let me also change the documentation for this module in this video we are going to concentrate on two main things the first concept is called as dry that means don't repeat yourself what this means is whenever we have some kind of a logic that is repeating at that time we want to take the logic out and put that logic inside a function and we can keep on using that function wherever we require it the next one is what I've already shown you this is called as single responsibility principle that means we want to Define our functions in a way that one function will ideally do one job at a time let's see how we can do all of these things let me go down over here so here you can see that we have a list of all the superheroes and all of our super villains so what I can do is I can create a function that will return the list of all of this superheroes and supervillains as well now why do we need to do this the answer is we want to isolate parts of our program suppose you are working in a team and you don't want any other developer to add or subtract from your list of characters so that's why we need to have some sort of an isolation so let us create a function for superheroes and supervillains as well let me put a comment right over here so this block is going to be for my superheroes let me Define a function called as get all superheroes this is not going to take anything and let me take all of these things inside my function and since I am going to return a list of superheroes I will also cut my line from 51 and I'll put it inside my function which is right over here I also need to return my list so I'm going to use the keyword of return and I want to return my list of superheroes now since my function is returning a list of characters so the return type of my function would be like this so this function is going to return a list of characters till now I have been using this keyword of final because I just wanted to show you that whenever we type everything in capital that symbolizes a constant and we don't want to change the value in the future but these days your code editor and my pack is smart enough to infer that if we write everything in capital we can actually skip writing final so I am just going to take it out what I can do is I can just leave Final on this line number 40 just as a reference for you and let me take it out right over here and this one and this one let me see my file if you just hover over any of the variable you can see that we have the word of constant that means my pi and your code editor they are able to correctly in for that this is a constant let us create one more function to get a particular superhero in this function we can get all of the superheroes but what happens if we want to get a particular superhero and remember this is a list of superheroes so we can get a particular superhero if we know the index suppose the index number is 1 so we can return Black Widow if the index number is 3 then we can return Hulk and so on so let's create a function to return a single superhero let's create a function right over here so I can say Define a function called as get superhero this function is going to accept one parameter called as index of the type of integer and let us see what this function is going to return this function is going to return a character but what happens if we can't find a character in that case we also have to return none so this function is either going to return a character or it is going to return none let's see how we can implement the logic let me add some documentation right over here but before we can get a superhero we need the list of our superheroes but that's pretty easy we just created an entire function for this so I can just say that my superheroes is equal to the function get all superheroes and that's it we have the list of all our superheroes now let's see the logic of getting a single superhero from the list of superheroes we already know how to work with indexes but this time we have to be a little more careful what happens if we get index number which does not exist in that time our program will panic and it will exit but we don't want this kind of a behavior let me go to my IPython shell and let me show you what I'm talking about suppose I have a list called as my characters would be a b c and d here you can see the length is 4 so I have four characters so the length is four but my index number stops at 3. so this is my index number 0 index number one index number two and index number three we don't have a index number four now what happens if I say I want to get characters on my index number 4. this is going to cause an error let's see what's happening so as we can see we have an error and the error is the index is out of range and we want to avoid this situation inside our program because we don't want our program to panic and exit so let's go back and here we can say if my index so if my index is less than the length of my list of superheroes only then I can have the right index number so here I can say I simply want to return from the list of superheroes the superhero at the given index else we have some issue and here I can return none because we can't find a superhero let me just save my file let's do the same logic for our super villains as well let me put up a comment these blogs are for my villains let us Define a function get all villains this is going to return a list of my characters and let me take all of these things inside and then I also want to return my list so return villains then we want one more function to get our single villain so let me copy and paste this block so this goes right over here this becomes from superheroes to villain and that's it so now we have a way of getting a particular character and and how to get a list of our characters now let's see where we can use this logic the place where we want to use this is right over here on line number 98 and 99 here you can see we first generate a random index and after that we want to get a superhero given that index let me use the function right over here but before we can use this function as we can see we have a block for the attack we can create a function for the attack and we can isolate this functionality as well so let's start doing that so let me add a comment saying that this is the main Logic for the game and I can define a function called as attack this is going to return nothing so I can say none and let me take all of these things inside my function so all of this things goes inside my function let us change this logic so this becomes I want to get super hero from the given hero index and this becomes and get my villain from the given index just save a file and you can see we have a bunch of Errors let's start addressing this errors one by one first thing that I want to change is this variable what I mean to say attack is the attack number so we can improve the name of the variable from Attack to attack number let me change right over here as well so as you can see inside my print statement I'm using this variable so this also needs to be changed from Attack to attack number there is one more final point that I want you to think if you see at the definition of our get superhero we are returning a character or none so what happens if we don't have a superhero or if you don't have a villain in that case we can't have a fight let's create some logic to handle this as well so here after this line I can say if I have a superhero and if I have villain so my current villain only in that case I can do something let me write a comment over here so if you have a superhero and we have a super villain in that case we are going to have the attack else that means we don't have a superhero we don't have a super villain that means we have an error so let me print out a message saying that error no superhero or villains to fight now let us go to this line land number one or four what happens if we have a valid hero and a valid villain then we need to have an actual attack so all of this logic from line number 108 to 117 should go right over here but we are going to create one more function to simulate the attack if you're wondering why do we require so many functions the answer is for flexibility if in the future you have some more characters if you are fighting seeing changes then you can change only a single function and the changes would be reflected throughout your program so we want to have our program as modular as possible that's the reason why we are creating so many different functions first let me invoke the function and then I will Define the function so the function would be called as simulate attack similar attack now let's see what we need to pass to this function the first thing that I want to pass is my attack number we can have only three attacks so that's why we have the range of three over here so I can say the first parameter I want to pass is my attack number then obviously we need the superhero and we also need the super villain now let's go down to line number 107 and let's create this function so let me just copy all of this let me go down let me create a function let me say that Define function put my codes let me add a command I also need to adjust the spacing because this is out of format now let's work on this function so here I don't need the word of current this has to go this also has to go it has to go from everywhere so let me do a multi select so this looks good let me save my file everything is looking really good let me put a comment right where so this is a place where we are setting the life this is where we print some nice message and this is the place where the actual attack is taking place but I'm not really happy with this logic here we are manually adding and we are manually decrementing let us create functions for this as well you must be thinking that I have gone crazy why do we require so many functions let me ask you a question suppose tomorrow the logic of the game evolves and you have some bonus attacking power or you have some bonus life then what do you do so at that time you simply have to change the logic in a single function and that's it so let's develop this habit of making the logic inside different functions as possible and let us try to stick to the principle of single responsibility function that means I want my function to do only one job and also in the future when we learn testing at that time testing functions becomes a much more simpler job so let's see what functions we are going to require we are going to require one function to increment the life of the superhero want to increment the life of the villain and then one more to decrement the life of the villain and one more to decrement the life of the superhero so we require four different functions to do all of these things so let me go to the top and uh here just below the characters let me put up a comment so this block is for the live let me go below and I want to take this variables to the top as well so let me paste it right here and here we can start creating our functions the first one was to increment the hero life so this function accepts life which is all the type of integer and it returns nothing so it has to return none let me put a comment now let's see how to use the logic inside of this here I have to operate on this variable and if you remember the last video this variable is defined on a global scope that means I have to use the keyword of global to reference this one so let me go down over here and let me say that I want to use the global variable of hero life and let us increment the life so I can say hero like is equal to plus my life and that's it we can also use the shorthand syntax so I can simply say plus equal to so let us copy and paste this one and this time let us decrement so I can say decrement this becomes decreases this becomes minus equal to and let us do the same thing for our villain as well so let me copy all of this and let me put it over here and my hero becomes villain so let me do a multi select and this becomes my villain let me copy and paste this one for the last time so this one to decrement so this becomes decrement decreases minus equal to let me save my file everything is looking really good let us go down and see what we are supposed to do next now once inside our function of simulate attack let's see how we can use this functionality but first let us set the types for our function definition so the attack number is my integer my superhero is my character villain is also of the type of my character and this function is going to return nothing so I can say none now let's use the newly created functions so we can use the function right over here so I want to increment the life of superheroes let me grab this let me take it out and write the name of the function this was to increment the hero life same thing will happen here also let me take it out put inside my brackets I want to increment my life of the villain let us do the same thing so here first I want to decrement the life of the hero so let me put this inside my brackets and I can see I want to decrement the hero life and let us do it here as well and here I can say I can decrement the villain life just save your file and we can see we have a couple of Errors so let's see what's happening so what's happening is my Pi is complaining because of incompatible types for now you can ignore the error but let me try and explain what's happening all of these errors will go away when we convert all of the characters into classes in the future videos but right now what's happening is if we go to the definition of our character here you can see the values can either be a string or an integer this is the thing that my Pi is trying to complain is saying that we can't add or we can't subtract strings right over here so that's why it is showing this error so let's move on and let's go to the next block so this is the place where we are seeing if we have lost or if we have won the game we can create a function for this as well so I can put up a command saying that this is for my final game status and let us Define a function called as win or lose it's not going to accept anything and it is going to return nothing let me take all of these things inside we can slightly improve the code as well on line number 164 and 166 we are printing a statement so let us get those variables inside our function so here they are let me take them out and and let me paste it right over here they have to have the right formatting let me put up some documentation right here and a little space let me save and see if everything is all right or not everything looks good and we have a very nicely typed program the last thing to do is just to Define our main function and we simply have to invoke it writing the main function is the most simplest thing so we can just say let me Define my main function this is also going to return nothing so this is the place where we would start the game first thing is we want to have an attack the next thing is we want to check if we have lost or won and that's it the last thing to do is we simply have to invoke this function so I can just say main just save a file and let me just browse if we have some errors or not we can ignore this error as I have just explained but let me check if we have some errors no no everything is looking beautiful all right so let's go down and let us try and play this game beautiful it looks like I have defeated Thanos in the first try itself it's amazing hi we are officially at the end of this section but I have decided to add one more bonus video now this bonus video is all about teaching you higher order functions now learning higher order functions can be a little bit challenging for beginners so I want you to just sit back and relax and just watch as if you are watching a movie if you can understand the concept then it's really amazing if you can't there is nothing to lose and normally it will take you multiple attempts maybe twice or Thrice before you can understand the concept and which is perfectly fine I don't blame you for that the concept itself can be a little more challenging so just enjoy and see if you can get it welcome to the world of functions let's start by understanding what are functions and how they are managed inside our memory so suppose we have a couple of functions so here I have defined two functions one is hello and the next one is good morning so these are pretty simple functions now let's see what's happening inside our memory so this green area would be our memory now please keep in mind that this is a very simplified version in actual life things are much more complicated let's see what's going to happen now when python comes across this line number three and four it is going to create a function called as hello inside our memory so this is what is happening we have a function called as hello inside our memory now the next question is how does python know how many functions it has created inside the memory the answer is python gives each and every object a unique ID now what do I mean by an object object is a generic term just like all of us are human beings but we are also animals same thing anything inside the world of python is an object a variable is an object a class is object a function is object anything is an object inside the world of python so let me say python is going to create an object which is also type type of function inside the memory and the way python is going to keep a drag of all of the objects inside the memory is by giving each one of them a unique ID it's just like us every one of us has a unique passport number so you can say each one of us has a unique ID as well the next question would be how does python know where does the object live it knows because it allocates some address to the object it's just like us every one of us has an address similarly inside the world of python every object which is created inside the memory also has an address and this is how it looks like now this format is a very special format it is called as hexadecimal format you can see this address always starts with a 0 followed by an X so whenever you see this format it means it's an hexadecimal format it is just a way of representating the memory inside our computer now what happens when python goes to next line line number seven it sees that we have another function so it goes back to the memory and it creates another function by the name of good morning now good morning also has a unique ID and it also has a unique address so for example we can say good morning has this address right over here we can see this in action inside our IPython shell so let me open up my IPython shell so here it is so here I can see my definition of hello it's simply printing out hello world so here I'm just creating a very simple function let us see the ID of this function so I can simply type I want to see the ID of my function called as hello so this is the unique ID of our function you can also ask python to reveal the type of this object so you can say I want to see the type of hello and the type is a function if you want to see the address then we can say I want to see the hexadecimal of the object which has an ID of hello and here it is so this is the address of hello inside our memory let us create one more function so let me Define a function called as good morning and on the next line I can say I simply want to print good morning so we have another function let's see the idea of good morning now you can see we have a different ID this ID ends in 144 the idea of hello was 0 3 2. let us also check the address of this one so I can say hex ID of good morning so you can see we have a different address so this is F7 F0 and here it was b370 so that means hello and good morning are two different objects with two different ID and with two different address inside our memory Let Me Clear My terminal and now watch closely what happens if I create a variable called discrete and if I assign it the value of hello and if I try to invoke greed we have an output called as hello world so what's this what's happening behind the scenes now let us go back to our diagram to understand what's happening what's happening is python is actually playing a trick with us so this is the variable which we just created but if you check its address it has the same address as hello so in short what python is doing is it is just creating a reference to hello so the grid variable is just referencing the function of hello it's just like sharing your house and when we invoke this function by using brackets so when we use the bracket that means we are invoking here you can see I don't have the bracket on line number 33 I am just assigning the function of hello to grid and on the next line I am using brackets to invoke the function and when we invoke the function we get the output of hello world so what happens is when we invoke grid it goes back it says that grid is actually referencing hello and behind the scenes it's this function which is being executed but on the scene it looks like it's the function called as grid which is being executed now let's get back to our code editor and start writing some code what I've done is behind the scenes I have created a new file called as Hof this stands for higher order functions Dot py and I have created a couple of comments for us the type of function is also called as callable because this object can be called we can give some arguments to it and we can get some values from it that's why in the world of python functions are also called as callables if you're thinking why do we need this kind of a functionality the answer is till now we have been passing data to the functions but sometimes it can be very expensive so what's the solution the solution is passing the function to the data you have to just start thinking in Reverse so what we are going to do is we have some data and we would be passing functions to it imagine you have terabytes and terabytes of data it would be so expensive to transport all of this data from one server to the another server just for the sake of computation instead we can simply pass a function to the data and we can get our job done much more easily so let's start by creating the same function called as hello right over here so this is the function that we created the next point I again want to reiterate that function is just a regular object of the type of function there is nothing special about it now let us print let us also try to print the ID of hello and let us also try to print the type of let me run the file so here it is let me take it up a little bit okay so when I'm saying I just want to print hello so hello is a function which is present at this address the ID is this one and the type is actually a class of the type of function let's get back and see what else we can do now let's try to create a variable and assign the value of hello to that variable so let me put a command and let us create the variable called as grid and let me assign the value of hello to it again remember I'm not putting my brackets over here because I am not invoking the function I am just assigning the function hello to the variable of grid now let us try to invoke the function of grid so let me write grid with the brackets let me save the file and let me try to run the file so here we have the output of hello world let us go back and see how we can add types to all of this variables I just explained that hello is also called as a callable inside the world of python so the type of grid is actually a callable type let me go up and let me see that from typing I want to import callable now let us go down let us start adding our types right over here so grid is of the type of callable now if you see the function of hello it is not taking any arguments and it is returning none so what we can do is callable let us put some brackets this means that grid is of the type of volleyball and inside this brackets we have to specify the input arguments and the output of the function and here inside the square brackets the first argument is always a kind of list and the second argument is the return type of this function now let's see how we can add the types hello it is not accepting any arguments so the first argument to callable would be empty next our function of hello is returning none so here after the comma I can say it's a callable which returns none and that's it we have a nicely typed function as well let me add some comments just for the sake of reference so here we are just assigning the values and here we are invoking the function let us see what else we can do with our functions let me put a separator and let me put some comments so this time we are going to create a universal gritter remember I just explained the concept that we can also pass the functions to the data that's what we are going to do right now I am going to create a universal greeter that takes two arguments the first argument would be for the name and the second argument will actually take a function now suppose you want to grid Zola then our universe are greater function will grid as Zola if you want to create as good morning then our function will great as good morning if you want to create as goodbye then our function will great as goodbye sounds awesome isn't it so first let me type all of the functions and then I will try to explain all of them let me create the first function called as Zola so what this function is doing is it is simply taking one argument and it is returning a Grita in the form of Zola followed by the name let's create one more function for good morning the next would be for goodbye now let's create our Universal Creator function so let me put up a comment over here and I can see my Universal greeter so this function is going to accept two parameters the first parameter is the name and let me get the spelling right string the name is of the type of a string now what should be the next argument the next argument is of the type of a function let me name it as greet up the type of this is callable now let's see how we can Define the types inside callable look at all of the functions which I have created Zola good morning goodbye the function signature is common all of these functions accept only one parameter that two of the type of string and all of this function returns a single argument which is also of the type of string so that's what I am going to pass right over here let's see how we can Define the types so the first argument is a list and the second argument is the return type all of the functions are returning strings so I can just write string over here and all of the functions are also accepting a string so inside my inner brackets I can say string so this is called as a function signature all of this function except one string and return one string same thing we are saying over here our callable accepts one string and returns one string now let's see how we can Define the body of this function let me add some documentation now here you will be amazed it is just two lines function the first thing that we want to do is let us take the function of Grita and pass it the argument of name that's it that's the entire Logic Let Me assign the output to a variable called as message on the next line let me simply print it out just save a file let me try to run the file and after that I will again try to explain what's happening but before that I want to comment all of these things let me comment out all of this I don't need all of these things the grid function as well let us invoke our Universal greater function and then we can have a nice output so let me go right over here and here let's see how we can invoke the function so let me say Universal greeter my name is thallium now let's see what we can pass as the second argument if you see right here my IDE is telling me that Glitter is also a type of function these brackets it denotes a function it takes a string and it returns a string so basically we can pass any functions that satisfies this signature and luckily all of our functions Zola good morning and goodbye satisfy these conditions so we are going to pass one by one inside the universal reader for the first one let me pass simply as Zola now remember I don't have to put brackets because I am not invoking I simply have to pass my function and that's it let me copy and paste let me take a little up the second one would be good morning the last one would be goodbye that's it just save a file and let's try to run it and hopefully this time we should have a nice output wow it's so amazing single function can produce multiple outputs now let's see behind the scenes what's exactly happening for example let us take just this line line number 65 so Zola is actually a function and this is how it looks now let's go back to our definition right over here this Zola comes as a function called as greater inside our function now this greater is just a reference to the function of Zola let me open up my diagram one more time so imagine this to be our greater function and this to be Zola so greater is just a reference to Zola and whenever we invoke this function behind the scenes the original function is being evoked so let me go back to my code so you can see on line number 61 we have a new variable called as Grita so this grid is actually a reference to Zola we pass one argument of name to the function this name goes right over here and if you see the function definition we are returning a string called as Zola followed by the name we are saving this string inside a variable called as message and we simply want to print it out this is happening with each of the functions the second time what happens is we are passing good morning now the second time this greater over here this references good morning and what good morning is doing is it is simply returning a string good morning followed by the name if we capture this output inside this variable right over here and we are printing it out and the same thing goes with goodbye as well that's the reason why every time we have a unique output first time grida was referencing Zola so we have Zola octallium second time it was good morning so we have good morning octallium and the last time we had goodbye so we have goodbye octallium sounds pretty neat isn't it now let's get back and let's try to learn a little bit more about functions let me put a separator a function as we saw can accept a function but a function can also return a function now this part really took me a couple of attempts to understand so if you can't get it don't worry you will eventually get it so let's go down and let's see how we can create a function that accepts as well as returns a function let me put up a comment let us see how we can create a function that will return us a function let me Define a function called as add WiFi this takes one argument number which is of the type of integer now since this function actually returns a function so we can say this is going to return a callable and we will Define the types A little later on right now just go ahead and let us type the body of the function let me add some documentation now what I'm going to do is I am going to create one more function inside this function so let's create one more function let me create a function called as by 5 and this actually does not accept anything and this function returns an integer inside this let me say I want to return the number that we get right over here so I want to return that number plus of 5 so this is the function inside this one and since our outer function it has to also return a callable so we need to have a return statement and this time I am simply going to return my function which is going to be this one called as WiFi first let us see the type hinting and then we will try to understand what's happening so let me go back to this line so we know that this function is supposed to return a callable type now this callable type is actually this function so now we can start adding types to it so here goes my brackets first one is for the inputs after the comma is for the output this function is returning an integer so let me write int over here and this function is not accepting anything so this argument remains blank just save a file so this is also called as your higher order function let's see how we can work with these functions let me say that a new variable called as sum is equal to my function of add by Phi is let me pass a argument of 5 if it is hover over right over here so your IDE is also telling you that the return type is a function which accepts nothing but returns an integer so what's happening is a variable of sum now this is referencing to this variable which is inside we can also invoke some and let's see if we are getting the right output or not so I can say print and sum and that's it the reason why we are not giving any input right over here is because sum is referencing this function right over here and this function does not accept any argument that's why it is blank let me just save it and let me try to run this file and here we have the output of 10. so this Phi plus this Phi is equal to 10. well we can also written a function that accepts an argument that means we can create a function which can actually accept something and do with the data so this time let us create a new function called as universal adder but this Adder is going to be a little unique this Adder is going to add to numbers and subtract by one it's our own addup so let me go down over here let me take it up let me add a comment and let us Define a function called as our unique adder now this accepts one number so this is going to be our first number so let me call it as num1 the type is integer this also returns a callable we will add types shortly let me add some documentation now let us create one function right over here but this function is going to accept another number and we are going to return this number plus another number minus of 1. so I can say Define our adder this function also accepts one argument let me call it as num2 type of integer and this one returns an integer and let us place our logic right over here so since this is a unique Adder what we want to do is we want to add the first number the second number and minus of 1. let us go below and complete the function by adding our return statement so we can say this function right over here this is going to return a callable and this time this callable is going to be Adder so we can say return Adder let us Define the typing for this one so our brackets one more brackets inside for the input argument and the next one for the written argument let us see this function this function is returning an integer so we can say integer right over here and this function is also accepting one integer so inside this brackets I can say integer and that's it we have a beautifully typed function as well let's try to invoke this function and let us see if it is doing its job or not so my order would be my unique Adder let me pass one argument of five and as you can see this is returning one more function and the function signature is integer returning an integer let us print out the value let me use my print statement adder and here I want to give my next number so I want to add Phi and Phi let us see what output we should get so I want to add my 5 with my 5 but minus of 1 so the output should be 9 so let me save my file and let us try running it and here we have the output of 9. let us go back and let us try to study what's happening so what's happening is our function of unique Adder is returning another function so this Adder is referencing the return callable from this function and the return callable is this function right over here so in short add a is referencing this Adder over here let us try with one more example so let me add four and three the output should be four plus three seven minus one six let me save it and let me try to run it and here we have the output of six let me put it back to five and five now let us move to the last part which is called as a Lambda let me put a separator line over here and let me put some comments so we are going to learn about Lambda now lambdas are pretty simple but they are often neglected trust me they are not really complicated it is just a different way of declaring your functions let me first type and then I will show you what's exactly happening let me go to the top right over here now this is a function called as hello let us see how we can Define this hello using a Lambda so I can say my new function called as hello number two would be a Lambda Lambda simply means a function now this function is not accepting any arguments so we can just write colon but this returns a string so we can say this is going to return hello world and that's it it's so simple the entire function can be condensed into a single line let me copy this and let me go back to my IPython shell and let's play over there so let me paste it right over here and I can invoke my Hello to just a circular function and we have the output of hello world so lambdas are just your regular functions but they are declared in a different way suppose this function accepts one argument then that argument will come before this columns let me take it out and let me show you one more example let us go right over here for Zola so I can say my Zola number two would be my Lambda now this function of Zola accepts one argument as name so I can write name and this returns a formatted string so you can just copy and paste it right over here and that's it we have a Lambda function ready let me copy this and paste it in my IPython shell let me paste it and that's it let us invoke this one Zola to octallium I forgot to close the string let me close it and we have the output of Zola octalium it's pretty simple isn't it let me again take it out so just for the sake of practice let us create one function which will act like a calculator now just imagine your calculator it's a single calculator but it can do multiple functions it can do addition subtraction Division and so on so we are going to try and mimic the same functionality by using lambdas so here let me create my first Lambda by the name of ADD so I can say this is going to be a Lambda this accepts two number so my number one and my number two and this is just going to return the sum so I can say number one Plus number two if you notice we don't use the keyword of written inside the Lambda because whatever value that comes after the colon it's automatically returned let me save this one now as a convention the arguments for Lambda functions are written as X and Y but you can write num1 and num2 but right now just for the sake of Simplicity let me convert this to X and Y so let me Define multi select this argument becomes my X and the next argument becomes my y let us see how we can add types to our function so as we know Lambda is nothing is just a function and we know the function is also called as a callable we can say it is of the type of callable now inside the first brackets are for the inputs the next one is for the output now let us see what's happening our function of Lambda is accepting two inputs this is the first one and this is the second one and we want to say that both of the inputs should be of the type of integer so let's go back right over here and we can say the first argument is an integer the second argument is an integer as well and we are returning a single value so we can say this function is going to return a single value of a type of integer and that's it let us create one for subtract and one for multiply so let me just copy and paste this would be for subtract I just have to make a very small change this has to be x minus and this one would be for multiply again this is X into so you can see it's so simple let's define a calculator on the next line so I can say Define calc now let's see the inputs so obviously we required two numbers so I can say my first one is an integer the second one is also an integer and the third one is going to be a function let me call that function as operation so we are going to operate on both of this number that's why I'm going to call this function as operation we can call anything that you want the type of this one is exactly the type of this one so I just have to copy and paste from here to here now let's go to the return type and this is going to return an integer so what's happening is we have a Lambda it is taking two integers and it is also giving an integer in return so this is what we want to return so this integer comes from here to here and inside let me put some documentation here the written statement is extremely simple we simply want to execute the operation on both our numbers so number one and number two that's it and we simply have to return the output so I can say return save your file and we have a nicely defined calculator as well let's try to invoke our function and let's see if we are getting the right output or not let us try adding 4 and 5 so I can say I want to print the output of my calculator I want to add 4 and 5 and the operation here is going to be this add operation so I can just pass that function right over here I can say add next let us do subtract and multiply as well so this will be subtract and this would be multiply save your file and let us try it running for the last time and here is output 4 plus 5 is 9 4 minus 5 is 1 4 multiplied by 5 is 20 well that's it for this video I hope you really enjoyed working with functions more you start practicing with functions more you will start loving them and once you are hooked to functions you will never want to go back again and if you want to learn the functional approach of programming then perhaps python may not be the right programming language because python is an object oriented language if you want to learn more about the functional aspect then you can learn languages such as Elixir Haskell and Scala those languages are built around the functional approach welcome to a brand new section this section is all about object oriented programming even though the name sounds pretty big but the concept is not so difficult some of the main aspects of object oriented programming are classes instances inheritance and polymorphism so I will be covering all of those inside this series let's go to our code editor and let's start creating some classes behind the scenes I have created one more folder called as zero six oops and inside of this folder I have created a file called as basic dot pi and I have posted some documentation right inside this file first let us create a class and then we will see what is it all about and after that I will come to all of this documentation so let me collapse my sidebar so let me go below and let us create our very first class so we can use the keyword of class followed by the name of the class let me just call it as some class I don't care the name right now the next line is for the documentation of the class so let me add some documentation saying that defines an empty class and inside of this I don't want to pass any logic for now I want to keep the body as empty so I can simply say pass and that's it we have created our very first class let's try to print it out and see what output we are getting so I can say I want to print out some class let us save it and let us try to run it and here we have the output underscore underscore main underscore underscore dot some class now this output looks a little bit cryptic and we will take care of these things in the future but what this is trying to say is in the main file there is a class called as some class so this sum class means this class and this underscore underscore main underscore underscore simply means the main file now this is just a naming convention whenever we execute some python module python behind the scenes names the main module as underscore underscore main underscore underscore so this double underscores are also called as Dundas python makes a lot of use of this tenders and we would be seeing them shortly let us go back and create some more classes let me put a separator let us create a class which represents a person so I can say class followed by the name of the class now remember the name of the classes are in Pascal case that means the first alphabet of each word has to be Capital if you check this class my S was capital and C was Capital just make sure you always follow this convention whenever you want to define a class now let's go right over here and create a class of person let me add some documentation that this class defines a person now let's see let's try to imagine a structure of a person every person has a first name and a last name so let us give this properties to our class of person and we can do that by using a Dunder method which is called as init now don't fuss over what is this method what is a class and whatever I'm going to show you right now this video is just to show you what is the class and in the next video I will explain you all of the things which are happening behind the scenes right now just go with the flow the first function inside your class always has to be a special function by the name of Dunder in it so this is how you define it Define Dunder in it Dunder this is just a naming convention by python we have a Dunder in the front and under at the back there is nothing special about this function this is just like your regular function just that we have a different naming style for this one now since this init function belongs to a class the first argument should always be self self actually acts like a reference it means the instance of this class again don't worry I will explain all of these things in the next video this function of init is going to accept two more parameters the first one would be for the first name of the person the type is going to be a string next one would be the last name again a string and always remember that this init method returns nothing so the return type is going to be none and inside let us see how we can construct a person here we have to say that cell Dot first name is equal to first name so what I am trying to do is I am just taking the first name and I am creating an instance variable called as first name now this can be anything I can also name it as if name and I can write this as F name it doesn't really matter the same goes for this one you can call this ABC it doesn't matter but if you are writing ABC over here then this also has to be ABC but as a convention it is normally cell and let me change this to my first name let us create one more instance variable for the last name so I want to say for my instance of a person so that means for self Dot last name is equal to last name so the same thing I am taking the last name from my init method and I'm creating something which is called as an instance variable right over here now let's see how we can work with this class so I want to say my first person is a type of person the first name is Lewis the last name is Zappa let me save this and let us try to print first person that's it let me comment this out I don't want this one and let me run this file and here we have one more cryptic output saying that it is main dot person object at so and so address if you have seen my last lecture about higher order functions you can make it out that this is a hexadecimal address for this object let us go back and see if we can improve this one let us create one more Dunder method and this time the name of the random method is called as underscore underscore r e p r so this stands for representation underscore underscore and self always remember the first argument by default inside a class should always be self now this is going to return a string so I'm going to put a string over here and let me just say return and I am going to return a string so I can just say inside my codes that this is a class of the type of person that's it just save a file and try to run it so this time we have a much better output so this underscore underscore init and underscore underscore repr these are also called as magic methods python is always going to look for this magic methods whenever it has to create an instance of the person class let me add some documentation over here so this magic method of repr is also known as the official representation of your class now let's see one more magic method let us open up the terminal one more time and to be frank this output doesn't make much sense except that this is saying it is just a class of the person it is not giving any details of which is a person what the first name what is the last name and so on but we can improve this by using one more magic method and this time the name of this magic method is underscore underscore Str so I can say Define my Str so this Str simply means for the string representation of the class and as a convention it has to accept self as the first argument this method also returns string let me add the documentation saying that this magic methods provides string representation of an instance I will explain all of these things in the next video instance and classes right now just go with the flow and complete this video so here I can say I want to return a string let me construct one string by using our string formatting so I can say person the way to get the first name and the last name is using this syntax self DOT first name inside this curly brackets I simply have to say I want to get the first name of this instance so self is acting as a reference it is telling python I want to fetch the first name of this particular person only so let us have the last name as well so we can say self Dot last name let us save the file and let us try to run it so this time we have a much better output and this output also makes some sense that this is a person and the name of the person is Louis Zappa let us create one more person let me put up a comment first over here so what we are doing is we are creating an instance of the class of person let us create one more person so I can say the second person would be person the first name could be CC let me get the C capital and her surname could be Neutron let us printed out let me print out my second person save your file and just run it and here we have the output the second person is CC the first person is Lewis so I think we have learned enough for this first video in the next video I will explain all of these things and hopefully you would have a better understanding of classes now let us try to demystify our classes so this is the class of person that we have created in the last video for this slide I had to slightly compress the syntax so we can see some of the namings are different from the names that we gave the last time so just go with the flow so this was the class that we created last time the name of the class is called as a person and we have a couple of magic methods inside of this one now let's see what's happening inside our memory so as usual this is our memory and let's see what's going to happen next python will see that we have a class called as person and it is going to create a class inside its memory now this class doesn't hold any data this class that you can see over here this is just like a design or rather it is just like a blueprint for a building but we don't have the building yet and how do we know what is the design of this class we can see the design of this class with the special method called as init this method is also called as the Constructor or the initialization of our class so let me repeat this is just a class it does not hold any data it is just like a design or blueprint now let us see what's going to happen on our line number 15. whenever we are creating an object of the type of person that time we say that we are creating an instance of the class of person so let's see what's going to happen python is going to take the design of person from our underscore underscore init method so it's going to take the design so we have the design and it's going to create an instance by the name of person one so as you can see we have an instance by the name of person one so that is being constructed inside our memory the same thing happens with person 2 as well python is going to take the design of person and it is going to create an instance of person two so here it is so this is the basic difference between a class and an instance class is like the basic blueprint or the design and an instance is an object of the type of class so person one and person 2 are called as instances the design is called as a class now if you have seen my earlier video about higher order functions you must be knowing that different objects have different memory address so person number one and person number two are completely different objects and they have a completely different memory address just imagine that this is the memory address for person one and this is the memory address for person number two now let's see what's happening behind our Constructor or our Dunder init method so this method is just acting like fill in the blanks so you can see our Constructor this is for the first name and this is for the last name and you can see right over here first name and the last name this init method just acts like a fill in the blanks so it's going to take Lewis from here and it is going to put it right over here is going to take Zappa and it is going to put it right over here so that's what is happening so if you see inside the memory when the first instance is created init method is going to assign the first name to Lewis and the last name to Zappa same thing is going to happen with person number two as well whenever we are creating this instance the init method is going to assign the last name sorry this has to be first name not last name the first name to CC and the last name to Neutron the last thing that I wanted to explain is all about this keyword of self now self only acts as a reference that means it tells python on which instance do I populate in the data or if you want to get the data it simply tells python from which instance do I have the data let me show this in action let us go back to the previous class which is right over here and on the next line let us print out the first name for both the persons so I can say I want to print out my first person's first name and let us do the same thing for the second person as well the save a file and let us try to run it and you can see we have a different output let me take it up the first person's first name is Lewis the second person's first name is CC the way python can keep a track of this is because of the keyword of self so this first name belongs to the instance of this one so let me show in the diagram whenever we are printing the first name of the first person the self references to the instance on this memory address so python can correctly retrieve the date of Lewis and that's what we are seeing on our terminal so let me open up the terminal and this is what we get and similarly when we say we want to print out the first name of the second person let us go back to the diagram the self is telling python that this time the person is actually this one and this person can be found at this address so the first name this time would be CC and not Lewis I hope now we have a much better understanding of classes instances objects Constructor and so on now let us move on in the next video we just saw that instances have different memory address let me go back to diagram so here I explained that this instance has a different memory address and this instance has a different memory address now let's see that in action let us go back to our code and here let me put up a comment and I don't want this one so I can take it out this one as well and let's print out the memory address of our P1 and P2 as well so I can say print my formatted string and I can say P1 is located at memory address and if you have seen my video on higher order functions we know that we can get the memory address from hex and then inside we require the ID of the object and we require the ID of P1 let me copy and paste it this time it has to be P2 this also has to be P2 just save it and let us try to run it so here we can see P1 is located at this address so here you can see this is four seven six three f and P2 is 479 e d so you can see we have two different instances at two different memory locations and both of them have taken the design from the class of person and the Constructor was our init method let's create one more function inside our class so let us create a simple function for grid so I can say Define grid and as you know the first argument should always be the self always acts like a reference and this one actually does not return anything so I can say none and here I can say print formatted string let me put the first name self DOT first name and then I can print a message saying that first name says hello that's it just save your file now just one small technical detail all of the functions that we create inside the class they are called as methods so let me put up a comment over here so this is a method that prints a greeting message so methods and functions is the same thing the only difference is that methods are always tied to some class that's why they are called as methods now let's see how we can call this methods so let me go right over here let us get the first instance so we can say P1 and we can call the method by Dot and the name of the method so we can say I simply want to invoke the method of grid on the first person we can do the same thing on the second person as well so I can say second person and let me put up a command that's it let me save and let me run it and here we have the output Lewis says hello CC says hello if we go back to the definition of class you can see we have four different methods in it representation the string representation and grid What differentiates between this random methods and the regular method is that python by default is going to search for this render methods so that it can Implement its own magic if you change the name from init to something else then the class Constructor is not going to work so always make sure you get the naming convention right in it is for the construction repr is for the official representation and this is just for your reference this is called as a string representation even though the name starts with an underscore you can use them just as your regular function let's see how to do that let us go right over here let me make some space and let me print out P1 dot underscore underscore SDR and that's it so what we are doing is we are simply calling the method called as SDR on the instance of P1 that's it let me save and let me try to run the file and here it is we have the output of person Lewis Zappa so this is absolutely possible but this is not the recommended way of doing it so let me put up a comment possible but not recommended well that's it for this one in the next video we will convert the character from our game to a class now let's see how we can convert the character from our game to a class What I've Done behind the scenes I have created a new file called as character dot Pi inside my zero six folder let us go back to the folder number five and inside the game so this is how our character looks like our character has a name attack power and life we can use this parameters to create our own class so let us go back to our character.py file let me collapse my sidebar and let's start creating a class for our character so the first is the keyword of class followed by the name character let us go inside the first method is always going to be the Constructor that means our underscore underscore edit method so we can write like this Define my init remember the first argument should always be self for reference here we can accept three different arguments let us go back to the game so we need one argument for the name one argument for the attack power and one argument for life so let us go back to our init method and here I can see I want to accept a name pipe string next is attack power pipe is an integer life the type is an integer and this method always returns none let us create some variables inside again you have to follow the conventions you have to write self dot name and let us take the data from this variable and put it right over here so I can say name remember that you can name this anything so I can just call this as n but you have to change over here also but as a convention normally we would like to keep it the same names so let me go back the next is for the attack power so I can say self Dot attack power would be my attack power the text would be self dot life would be my life let me add some documentation right over here saying that this method creates an instance of character let me add some documentation for the class as well so this is for documentation of the class that this class defines a character now let us create an instance of this class so let me create a villain first so I can say a villain villain the first one would be a character the name would be Thanos his attack power is 400 and his life is 1500 let me print out the villain number one let us save the file and let me try to execute this file and here we have the output but as you know this is a little cryptic output so what python is telling that this is a character object add this and this memory address but you already know how we can improve this so let's start adding some of the dender or the magic methods the first one I can save is my repr the first argument is self and this returns a string I can say return so this is my class of the type of character let me save the file and let me run one more time so this time we have a little better output my VLAN is actually a class of character let us improve further by using our Str method so we can Define it right over here SDR first argument is always the self this this returns a string and let us construct a string right over here so I can see the name it would be self dot name next would be the attack power and this would be self dot attack power next would be life so this would be self dot life that's it let me save it and let me try to run it so this time we have a much better output the name is Thanos attack power is 400 and the life is 1500 let us go back and let us create some more characters let me put up one comment over here so while constructing a class you can actually use key and value pairs so let us create one more villain and let's see how we can do this so this is my villain number two it is a character and here we can use the key value pairs so I can say the name maybe this time it is Red Skull the attack power is 300. and the life is 800 and that's it let me try to print out the second villain as well so I can say villain number two just save it and try to run it and here we have the output Red Skull attack power 300 life 800. now the beauty of this key value pairs is you don't have to specify the arguments in a given sequence you can mix up the sequence but still we can have a proper instance so let me show you maybe I can just take this out and put it here and let me save this let me try to run it one more time and still we have the right output let us go back and let us try to create some more Heroes let me create one hero so this is Iron Man attack power is 250 life is thousand let me create one more so this time it is Black Widow the attack power is 180 and the life is 800 and let us also print them out let me run the file for the last time and here we have the output Thanos Red Skull Iron Man and Black Widow before we can move ahead let us take a small pause and let us think do we really require classes let us go back to the earlier program that we wrote so let me go back to my file called as basic and let me collapse my sidebar so let us ask a very fundamental question do we require a class the answer is it depends whenever you want to have a structure and a behavior together at that time using a class makes much more sense if you require just the data then you can use any of the data structures you can use a list you can use a dictionary or some other custom data structures as well but whenever the structure and behavior is tied together that's the best place to create a class for example in this file we have a class of person now let's see what's happening person has a structure and that structure is defined by the first name and the last name now this person can also have a behavior a person can greet another person so we have a method called as greed so greed Can Be Imagined like a behavior of a person a person can have different kinds of behaviors a person can walk a person can talk a person can eat so all of this Can Be Imagined as behaviors but all of this behaviors is tied to a structure and that structure is the First theme last name and maybe you can have multiple other parameters such as your age your location and so on so just keep this in mind classes are not the solution for everything make sure you use the right data structure or the right classes only when it is required let us learn more about classes and this time let us learn about class membership till now we have been creating variables inside our Constructor so for example in our class of character so we can say surf.name is a member of the instance of this class same thing attack power can also be called as an instance variable let us create a new class and let us try to study what is this all about so behind the scenes I have created a file called as members.pi added a couple of comments so let's try to see what's happening inside let us try to create a class called as box and let us Define an init method this box has two sides this is my side number one I can say the type is integer my next side also the type of integer it returns none let us create the variables inside so I can say my side a is equal to my side a and my side B is equal to my side B now what we have done is we have created variables inside our Constructor class now remember what this method does it actually creates an instance and fills in the value so if we refer this diagram our Constructor is simply filling the values of the instances so the variables that create inside they are called as instance variables let me put up a comment right over here now if you go back to the diagram the data is different for every instance so for example the first name for person number one was Lewis and for person number two it was CC now let us see how to create class members let me put up a command so this class members are defined on the class scope so this class members are defined outside our Constructors so let us Define a couple of class members as well let us create a variable and we can see box type and this is going to be a packaging Carton and the color for this one would be brown so this variables that we have created box type and color this variables would be accessible to all of the classes please note that we don't have self over here because we don't need reference to an instance this data is available to all of the classes and all of the instances let us create a Str method here I can say Define my Str ugan cell this always returns a string and I can say return my side a would be my self dot side a and my side B would be sorry it has to be self Dot side B for this example I am going to skip the repr but you can write it on your own let us create an instance called as the first box and I can say the box side a maybe it's three and the next is 4. let us try to print out my box so I can say I want to print my box let me save it and let me try to run it so here we have a box side a is3 and the side B is 4 now let us try to print the class variables from an instance remember this class instances are available for all of the instances so I can simply say I want to print my box first Dot box type and let us print the color as well so I can say the color let me save it and let me run it so we have the output it's a packaging Carton and the color is brown let us go back and let us try to solidify this concept of class members now this class members are available on classes itself you don't have to create an instance that means if you go back to the design we can get back the data from the design itself we don't have to create an instance to get back the data now let's see this in action what we did till now is we created an instance of the box and then we printed this variables right over here but we can simply say I want to print the box type from the class of box let me copy and paste we can also say I want to see the color that's it just save it and let me try to run it and we have the output packaging Carton and brown so this time what we did is we simply accessed this variables from the class we did not create an instance so this is what I mean to say when all of the class members are available to the class itself and also to the instances let us create one more box and print it out so let me print my box number two and just for the sake of confirming we can say my B2 dot box type and my B2 dot color and we should get the same output let me save it and let me run this file for the last time and here it is we get the exact same output let us try to study the next Concept in our object oriented programming and this concept is called as inheritance and polymorphism what I've done is I have created a file right over here called as inheritance and polymorphism and let us try to see what's going on just to give you a very simple example we are all human beings but we are also animals that means we inherit a lot of properties from animals for example all of us have eyes ears hands and legs but all of us human beings we don't speak the same language now that's polymorphism in action inheritance means we inherit all of the features of an animal and polymorphism means even though we have the same properties but we exhibit different Behavior now let's create some classes and see this in action let us create the first class called as animal so let us create a class of animal let us Define our methods over here first is the cell and let me accept one argument for name one for the age and one for the number of legs this returns nothing so I can say none let me put up a comment that we are going to create and initialize the instance variables let's start creating some of our instance variables so I can say my self Dot name is equal to my name then myself dot is is equal to age then self dot of legs is equal to Magnum of legs let us also create the Str method so I can say Define my SDR it takes a self it returns a string and here I can return let's say we can just return the name for now so I can say name and this would be self Dot name let us try to give animals some kind of behavior so let us create a method called as talk on animal so I can say Define a method called as talk the first parameter would be self and this is going to return nothing so none for now let me put up some documentation saying that this method makes the animal talk but let's see what we can do right now since we don't know what kind of animal it is that's why we can't talk yet so let us print the same thing right over here so I can say print my formatted string self dot name can't talk yet so let us go down and let us create one animal so this is my first animal so I can say I want a instance of the class of animal the name is Robin Age maybe he's 10 years old number of legs is 4 then let us print out the animal and let's also try to make the animal talk so a1.com just save a file and let me run it so here we have the output we have Robin and Robin can't talk yet now let's go back and let's see how we can create some sort of inheritance let us create a dog now remember dog is a kind of animal so you can say that dog inherits from animal let me create a class and then I will try to explain what's happening so let me create a class called as dog now here inside the brackets we have to specify from which class we are inheriting so dog is inheriting from the class of annual so this is how it goes let us create our Constructor right over here as well so Define init self now let's see what happens since the dog inherits from animal dog also needs to accept all of these parameters name age number of legs so let me just copy and paste and here we can accept some more arguments as well so let me create one more argument for breed so we can accept one for breed let me get the spelling right let us go down and let us start creating our instance variables here at this point python can do a small bit of magic for us since dog is inheriting from animal we don't have to create all of the instance variables manually instead what we can do is we can pass the common data to the class we are inheriting from so we are going to take all of this data and we are going to pass this data to animal so technically animal can be also called as your parent class or it can also be called as your super class let me put up a comment so we want to take all of the common features and pass it to the parent or the super class python provides a keyword called as super so this super means the class of animal and now we want to pass all of this data to one method and that method is called as init now remember in it is just like any other function except it has underscores at the beginning and at the end so we can call that method as we can call any other method so we can say super and underscore underscore init underscore underscore and let us pass the common features which is the name age and the number of legs now it is the responsibility of the superclass that means the class of animal to create instance variables for the name age and number of legs the only argument that is remaining is for the breed so inside dog we can create one more instance variable called as self dot breed and we can assign the value we can also create extra instance variable even though we are not accepting parameters right over here so let me give you a small example so I can say self DOT type is equal to dog so you can see we can create instance variables wherever we want them so let me save this so this is what I mean by inheritance dog is a class which inherits from animals and they share a lot of common functionality that's why we are passing the common functionality to the superclass and we can create some additional instance variables as well now let's see how we can introduce polymorphism in this class remember remember the superclass of animal has a method of Str so let's override this method and let us create a different Str method for dog so let's see how we can do that the syntax is going to be exactly the same so we have to say Define Str takes in a cell gives back a string and let me print out a message over here let us use the formatted string so we can say self DOT type followed by the self dot name and let us also print out the breed so I can say the breed of the dog is self Dot bead oh sorry we can't print because remember the Str method always has to return a string so thanks to our typing my code editor is catching an error so this has to be written not string let me take out the brackets now everything looks good now let's create it all so I can go right over here so I can say my first dog is an instance of the class of dog the name is whiskey the age I can use my keyword arguments as well so my age is five years old number of legs is obviously four and the breed maybe the breed could be Doberman let's try to print out our dog so I can say print my dog let me save it and let me try to run this file so here you can see we have a doberman by the name of whiskey and the breed is double man now let us try and explore some more benefits of inheritance so you can see we have created a class of dog which inherits from animals since dog inherits from animals it also inherits all of the behavior of animal the class of dog does not have a method for talk but the class of animal has it so we can actually make the dog talk as well so we can say D1 dot talk let me save it and let me try to run this file and we get the output that whiskey can't talk it but we can use our polymorphism and we can make whiskey talk so let's see how to do that so inside my class of dog we are going to create a new method called a stock and the new method is going to override the method inside the class of animal so it's just like creating an another method so we can say Define talk it always takes self this is going to return nothing and here let's print out so I can say self Dot name says woof and let me save the file and let us try running this and now we have the output whiskey is saying woof let us go back and let us see what else we can do let me take out this space this class of dog it can have its own Behavior now since this is a dog our dog can also sniff different items so let's create a method called a sniff on dog so let us go down over here so I can say Define a method called a sniff the first argument is always the self now these methods are just like your regular functions they can also accept arguments so let me take an argument for the item that the dog is supposed to sniff it is going to be a string this method is also going to return nothing so I can just say none and let us print out a message self dot name is sniffing out the item so please note that here we don't have to use self dot because item is not an instance variable item is just an regular argument on a regular function let us go down and let us try to sniff so let me say D1 I want you to sniff for ball save a file and let us run it so here we can see we have the output whiskey is sniffing out ball let us create one more class for cat and since cat is also an animal cat is going to inherit animal as well so you can see we can have multiple classes that can inherit from other classes as well let me put a comment saying that this method of talk this is the place we are altering the method and we are adding some polymorphic Behavior so let me go down and let me put a separator and let us create a class of CAD and creating that class is pretty simple I just have to copy all of these things so let me copy let me go down and paste it right over here let's change the name from Dog to cat the type also is a cat this time we don't want the comment now and the cat says meow and we don't want this method because cats are not so good at sniffing so let me take it out let us create one instance of our cat so I can say my cat number one is my cat the name is Jess suppose she's two years old number of legs is four and the breed could be a Persian cat let us print out the cat so I can say print and let us also make the cat talk so I can say C1 dot top that's it let us run the file and we have the output so we have a cat named Jess the British is a Persian cat and chess is saying meow so now you get the idea just for the sake of practice let us create one more class for a dinosaur now this dinosaur is also going to inherit from animal let me copy and paste this separator let me copy all of this as well and let me go down and let me paste it right over here so since this is a dinosaur I can just say Dino and this has to be Dyno as well and since we don't know what dinosaurs can talk put some random text now the dinosaur can also hunt so let us create one method for hunt so let's create one method called as hunt it accepts itself and returns a none here I can say print self dot name is out for hunting let's create one dinosaur so I can say my Dino one is equal to my Dino suppose the name is Adam age could be eight years old suppose the number of legs are two and the breed would be TRex let's print out the dyno let us also make the dino talk and also let us make the Dino Hunt that's it let me save and let me run the file and we have the output so this is a dinosaur Adam is saying something Adam is out for hunting so now you get the idea we can have multiple classes inheriting from a single class or you can also inherit from multiple classes as well but we are not covering that in this tutorials let me put a separator and let me show you one nice trick we can also ask python if a certain class inherits from other class or not so let's see if the dog and the cat inherits from animal or not so I can say print and we can use an inbuilt method called as is instance the first argument is the object that we want to compare so let me pass my dog and the next argument is the parent class that we want to compare with so suppose I want to see if the dog is of the type of animal so let me save it and let me try to run it and here we have the answer it's true and that's because the glass of dog is inheriting from animal now here I want you to understand one point all of the dogs are animals but all of the animals are not dogs so please keep this in your mind let us check if demon is a kind of dog so I can say is instance Devon and dog let me print it out and yes it is let us do one last time for our cat so let me copy and paste so this becomes C1 and this becomes cat and let us see the output so here it is C1 is an instance of cat as well now let's try to learn about decorators so this decorators are like the higher order functions but this higher order functions are already built into python this decorators can give some additional behaviors to our classes so we are going to have a look at couple of these decorators some of the decorators that we are going to see are property static methods class methods Getters and finally setters so I have created a new file called as decorators and I'm going to work inside this file for this example let us imagine that we are working for a store and we have to write a software that will manage our stuff now since all of the staff members are also persons so first I am going to create a class of person and then I will create a class of staff that inherits from person so let us start with the person first so I can see the class of person our Constructor in it self and suppose we want to accept the first name this is a string the last name this is also a string and this returns nothing inside let us create some instance variables so we can say self Dot first name is equal to my first name as self Dot last name is equal to my last name let us also create the string method so I can say Str uck and this always returns a string so I can say return this is a person and then I can say my self DOT first name and self dot last name let us create one person and print it out so I can say this is going to be sorry not permission I want a person the first name would be Lewis the last name would be Zappa and let us try to print him out now let me try to run and see the output so we have the output of Lewis Zappa till now you are familiar with everything now let's go to the example now suppose you want to retrieve the full name every time now instead of creating one more instance variable over here saying that self Dot full name is equal to something something instead of this we can create a property and that property will create a full name for us and we can retrieve it just as we would retrieve any other instance variables so let me take out this line and let me show you how to use our first decorator so let me go down over here the way you use a decorator is by this symbol at the rate and then you name the decorate so this time The Decorator that I want to show you this is called as property so this is our decorator and after that let us create the function so I can say Define full name this takes self as the first parameter and returns a string next line we can simply create the full name and it has written the full name so we can just say self DOT first name and self dot last name so what we have essentially done is this full name right over here this would act just like your instance variable so just imagine that here we had one more instance variable called as self dot full name so this property will function exactly like this let me show you this in action so let me take it out let us go down and let us try to print the full name of the first person so I can say print first persons full name that's it now since this is a property we don't have to use brackets after this one because remember full name is just like your instance variable let me try to execute the program and here we have the output Lewis Zappa now let us go back and let's start working on some other classes but before that let me put some separators so this is one separator and this is another separator now let's create the class of stuff and this staff will inherit from person but let us try to expand our knowledge over here Suppose there are different categories in the staff there could be an associate there could be a manager and so on so we can have multiple roles and each of these roles can have different salaries so suppose if you are a associate then your salary could be 15 for an hour if you are a supervisor it would be twenty dollars if you are a manager it could be 25 dollars so what we want to do is whenever we create a new class we also want to dynamically give that person a different salary based on his role sounds a little complicated but don't worry let me show you how to do this now since we have to Define different roles at this time using an enum is the best option so if you have not seen my video on enum I would highly recommend you to go back and see that video so that was in my section number four and I think that file was this choices dot pi so we are going to use this enums in this file I want to use enums because I want to Define different rules let's see how to do that let me go to the top and first let me try to import a couple of things so from my package of enum I want to import enum and I also want to import my auto so now we can define an enum let me create one called as class role so this inherits from my enum and inside this let me put some documentation that this rule is for our staff members now let's create a couple of rules suppose the first role is for an associate so I can say associate and let me write Auto over here the next one could be a supervisor again is equal to auto the last one could be a manager so I can say manager is equal to Auto let me just save it and let us go down and let's start creating our class of stuff let me put some separators here as well okay now let us go down and here let us start creating the class and the class is of stuff and this class inherits from person so here let us first Define our Constructor so I can say Define my init the first argument is always self now let us see now since stuff inherits from person person requires two arguments first for the first name and for the last name so let me just copy and paste right from here so I can take this and put it right over here now the next argument that we want is for the rule remember we want to take the rule and we would be dynamically creating the salary depending on the role so I can say I also want to accept a rule and the type would be rule this method always returns nothing so I can say none so inside this we want to pass the data to our superclass so let me put a comment and then I can say I want my super to initialize with my first name and my last name now let us create some more instance variables maybe we can accept one more parameter for the staff ID so let me write it right over here so I can say the staff ID would be an integer now let us go down and let us start creating the instance variables so the first variable would be for the staff ID and this is is equal to the staff ID let us create one more instance variable called as is stuff and let us put it to true so remember we can always create instance variables even though we are not accepting them inside our Constructor method next it could be for the role so I can say self dot rule is equal to rule now for the next one I also want to record the date of joining for the staff member so let's see how we can do that so I can say self Dot date joined and this time the value has to be in the format of date date and time fortunately python has an inbuilt library for doing exactly this and the name of the library as you can guess it is called as date time so let me go above and let me import it so here I can say from my library of date time I want to import date time now let us go down and let's see how we can assign the value of date time so here we can simply say date time for now so what's happening is the moment that we are creating this instance we can have the date time automatically assigned to our variable before we proceed I want you to wait and I want you to think once we have a staff member I don't want anyone to accidentally change the date joint so what's the solution let us try and make this variable a private variable now there is no real concept of private and public but we have a convention so whenever we put an underscore this means that we want to keep this variable as private you can also write double underscore or a single underscore it's up to you normally whenever we want to enforce that it's a strictly private then we can use double underscore but a single underscore also means that we want to keep this variable as private so let me write a comment right over here so this is going to be our private member and all of this are public variables the next thing to do is we want to assign the salary but the salary has to be dynamically assigned depending on the role if the role is often Associated then the salary has to be 15 if it is the supervisor then the salary has to be 20 dollars if it is a manager then the salary has to be 25 dollars let's see how we can dynamically assign a new instance variable called a salary and assign values to it so let me put up a comment that we want to dynamically create and assign values so let's see we can use an if an else statement so we can check if the rule is for supervisor or for manager and so on but we can also use our match statement so in this example let us use the match so I can say let us match for the role the first case that I want to match is for my role dot associate so in case this rule is for an associate then at that time I want to dynamically create an instance variable called as salary and I want to assign the value of 15 let us also add some type hinting so instead of 15 it can also be 15.5 15.75 and so on so let us declare this instance variable as a float now you must be wondering why do I need to have a type hint right over here but here we don't have the answer is it's because we have declared the types right over here so this first name is a string so by default this first name is also going to be a string staff ID is an integer so here the staff ID is also going to be an integer and my Pi is smart enough to infer all of these things but here since we don't have this instance variable declared anywhere we have to be explicit and let us declare the type is going to be a float here again let us think about the visibility I don't want anyone to change the salary salary has to be privately managed so we can see I can put an underscore or I can put a double underscore let us go to the next case suppose the rule is for an supervisor then I can say self dot underscore underscore salary would be twenty dollars then I can say if the rule is for a manager then I want to assign the salary of 25 let us also Define the string method for this one so I can say Define my Str self this return a string so let me return so I can say this is a staff member the name is self now here I can use the property that we have defined for full name if you scroll little up we don't have an instance variable for full name but we have declared a property and that's what I'm going to use right over here I want to display the full name so I'm using self dot full name next we can also display the ID so I can say ID is my self dot staff ID let us go down and let us try to create a staff member this time so I can say my staff member is my stuff the first name is Chico the last name is Jonas staff ID can be three two four five let's give her a role of manager so I can use my enum I can say the role is role dot manager and let us try to print it out so let me print my stuff that's it let me run the file so we have a new staff member so you can see right over here the name is Chico Jonas and the ID is three two four five let us go back and let us see what more we can do with our classes the next decorator is called as the class method just imagine the scenario that we already have a person in our database and this person is joining our shop as a staff member so what we can do is we can simply take that person as an argument if you see right over here we are taking first name and last name as an argument instead of this we can take a person and from that person we can create another class for the staff so let us go down right over here and this is called as class method and now always remember this method is you should create an another class till now we have been working with instances but what this class will do it will return another class which is all the type of stuff itself so let's see how to do that suppose we want to create a new staff member from an existing person so I can say Define new so new is just the name of the function you can write anything that you want and since this is a class method the first argument is called as a class till now we have been taking the first argument as self so we can see it was selled but since the class method works on the class that's the reason why the first argument is a class if you are still confused then let me go back to my diagram so this is a class and this is an instance the class method is going to work on the class itself that means we can create a new person from a design of the person that's what it really means let us write the different arguments so obviously we want to create a new staff member from an existing person so we need to accept a person next we also need a staff ID so this is going to be an integer then we also need a rule the type is for the rule now here this method is going to return an another instance of the class and that instance is of the type of stuff itself so this function returns a staff let me add some documentation saying that this is going to create a new instance of the staff itself and let's see how we can create a staff in this case this class actually means staff so here we can see I want to return a new staff member and the first name is going to be the first name of the person that we are accepting so I can say person DOT first name the next argument is the person dot last name then we have to give the staff ID and then we also have to give role now unfortunately we can't write this syntax but what we can do is since this class means staff we simply have to replace staff with class and it's the same thing now the written value is of the type of staff but what's happening is we are trying to return the staff member before we have defined the class of stuff so in order for this code to work we have to do something so we have to go a little up and we have to say from future I want to import annotations so what do I exactly mean to say is since this method right oh yeah the method of new is retaining a staff but at this time python does not know what the stock because python has not yet created this class but by importing this functionality from futures we can tell python what's exactly happening so let us go down and let us add one person to our staff member so since we already have a person called as Lewis Zappa maybe he joins our store so let us create a staff member from Lewis Zappa so let me say my staff number one so here let us create a new staff member by using this class method the first argument as you can see it's for a person so let me pass my first person the staff ID could be one two three four and the rule could be the role of a supervisor now let us try to print it out let me say I want to print my first staff member and this I can say this is my second staff member disable file and try to run it so we have the output the first staff member is Louis Zappa with id1234 and we have one another if you are a little confused then just keep in mind that class method is a method that returns an instance of the same class now let's try to move on and let's learn a little bit more about classes now since we have defined this instance variable as private date join but what happens if anyone wants to see what is the joining date so we can create another property that will display the joining date so we can go down and let me create a property so here I can use my decorator called as property let me Define the property called as joined on this text the self and this is going to return a string let me put up some documentation saying that this is for the joining date of the staff member and since this has to return the joining date we can simply say I want to return and here I can say myself dot underscore date joined now if you're wondering why do we have to do all of these things and the answer is since this is a property we cannot assign values to an property at least not yet in technical terms this is also called as in getter in short we can simply get the value from here but we can't set the value over here later on when I teach you about Getters and Setters at that time we can actually use properties to get as well as set different properties but for now let us go with the flow and let me try to save the file and let me try to run it let us try to see the joining date of Lewis so I can say print Dot joint on and that's it let me try to run the file and we have a joining date now this joining date looks pretty complicated it's in a different format but fortunately we can also have the output which we can understand so let's see how we can do that suppose I want to see the date in a format of month day and the year so let's see how we can format this fortunately there is one inbuilt method for our date time and that is called as string format and we have to use a couple of keywords right over here so let me paste it over here so this capital b stands for the month the lowercase d stands for the day and obviously y stands for the year so let me save this and let me try to run this file and here we have a much better output so the date of joining Fort Lewis Zappa is July the 6th and the year is 2022. let us see the last concept that I want to teach you in decorators and this concept is called as Getters and setters I have already partially explained that this property right here this property acts as a getter that means I can always get a date but I can't set a date but let's see what happens if we want to set and value suppose we promote an employee suppose an associate becomes a supervisor or a supervisor becomes a manager that time we also need to increase the salary so let us see how we can do that by using our Getters and Setters now if you remember we have declared the salary as a private member but what happens if our HR department wants to see the salary so first let us create a property or a getter to see the salary and then we will see how to use a setup to set the new salary so let us go down and let us create one property for the salary so I can say property and let me call it as salary tax the self as an argument and this returns a string I think I have declared it as a float yeah it's a float so this has to return a float let me put a comment so this acts like a getter of the salary and we simply have to return our self dot underscore underscore salary let us see the salary of Lewis so let me say I want to print stuff one dot salary and that's it let me run the file and here you can see the salary is twenty dollars for an hour now let's see what happens if I try to set the salary so if I say my S1 dot salary is equal to 17 let me save it we have an error so if you just try to hover it says that property salary is defined in staff is a rate only so what this is trying to say is we can only get the value we can't set and we can't set because this is just a read only property so this is the beauty of Getters and Setters we can't accidentally change the values but what happens if we do want to change the value at that time we need to create another method which is called as a setup let's see how to do that normally you would use a Setter when you need to do some kind of validation before you want to set the values now in this case let us see what kind of validation do we require if you remember if the rule is foreign associate the minimum salary is 15 dollars for a supervisor the minimum salary is twenty dollars now if the role is for supervisor but if we try to set the salary which is lower than 20 dollars then we don't want that to happen so this is a part of our validation logic and we can use that inside our setup method the way to declare the setup method is kind of weird in Python but let me show you how it is so the syntax is I want to say for my salary this is the setup so this is a Syntax for the setup this simply means that we are declaring a Setter method for the property of salary let us create the function for salary obviously the first argument is for the self and the next argument is for the amount that is the amount of salary that you want to give the employee so I can take one more parameter called let's amount the type would be of a float and since this is a setup we are not going to return anything so I can say none let me put up a comment saying that this is our setup method and inside of this let us see how we can use our validation logic and how we can set the new values let's start with the associate the associate cannot have a salary Which is less than 15 dollars so we can say if my self dot rule is role dot associate and if the amount is less than 15 dollars that means it is going to fail our validation because we can't give an associate a salary Which is less than 15 dollars so let me print out a message saying that error associate cannot have a salary less than 15 dollars now what happens inside any of the methods you have access to all of the instance variables so if you see I'm using this instance variable called as self dot Rule and we have defined this self dot role right over here so this is where it is online number 60 but since we are inside the same class we can have access to all of the instance variables the same thing is happening everywhere so for example in this property of salary I can access the salary a natural the salary is being declared right over here either online 66 68 or 70 but we can still access all of the instance variables let us go down and let us create the next validation logic so this was for an associate next let us create one for the supervisor and the last one for the manager so we can say else if the rule is for the role of supervisor and if the given amount is is less than 20 then we need to print an error message so we can say supervisor cannot have a salary Which is less than 20 dollars let's go to the next one we can again check if the role this time is for the role of a manager and if the amount is less than 25 then let us print one more error saying that manager cannot have a salary less than so this should be 25 dollars for an hour now let us go down now what happens if we pass all of this validation that means we have the right Rule and we also have the right amount in that case we can assign that amount as a salary so here I can say else if everything is fine then my salary is equal to the given amount and let me print a nice message saying that self dot full name now has a salary of dollars and self dot salary and I can write per hour so remember that this salary is a property so as you can see the visual studio code is telling you that this is a property and this is a get a method now let me save the file now let me try to run it if you see online number 120 I am assigning a value of 17 but the role is for a supervisor and if you see inside our validation logic supervisor cannot have a salary of 20 that means we should get an error let me save the file and let us try to run it and see if we can get an error and that's it we have the right output so it's saying that error supervisor cannot have a salary less than 20 dollars for an hour what happens if you try to set the salary which is valid so I can say s1. salary is equal to 20 or maybe I can say 22 so let me save it and let me try to run it and we have the right output so on the next line you can see Louis Zappa now has a salary of 22 dollars for an hour let us go back to the file and this time I want to show you the final decorator in this section now we have been inheriting classes for example here the class of staff is inheriting from person in some of the earlier examples we were inheriting classes such as animals dogs and so on but what happens if I want to say that you can't inherit this class whatever class I have created this is the last and final class and no one can inherit it we can do that by using a different decorator but first let me import that and that comes from our typing Library so I can see right over here from my library of typing I want to import final and just before the class stack we want to declare as final we have to use it so suppose I want to say my class of staff is a final and no one can inherit it so I can just say at the rate and this is going to be my final class let me save it and let us give it a try so suppose let me put a separator over here suppose someone creates a class called as HR and let us try inheriting from staff and we can keep the body as empty so let me just write pass let me try to save it now you can see the code editor is highlighting that we have some issue and it is saying that the class of stuff is marked as final and it cannot be subclassed so let me just comment it out and I think we have done for this video let us start converting our game into classes so the first thing that I want to do is let me just copy and paste it inside this folder let me rename from 3 to 4 and let me change the documentation so this is where we are trying to improve our design by using classes so let's see how we can start using classes inside our game till now we have been using an alias but now what we can do is instead of using an alias for the character we can actually create a class for character so let us go right over here and let us create our class for character so we can see class character now let's see what instance variables do we require now each of the character has three main things you can see right over here name attack power and life so we can Define these as our instance variables so let us do that Define init cell the first is the name is going to be a string attack power integer life is also an integer this returns nothing let me write some documentation saying that this creates an instance of character so here I can say self dot name is equal to the name self Dot attack power is equal to the attack power self taught life is equal to the life let's also create a nice Str method so we can say Define a string method for this one self and this always returns a string and inside let us make a nice string representation for the character so I can say the name of the character is self dot name the attack power is going to be self dot attack power and the life is going to be self dot live let me save it next let us see how we can create superheroes and our villains now superheroes can inherit from our character and our vlans can also inherit from our characters so let's see how to do that so let's create a class called as superhero so you can say my class of superhero this inherits from the character let me put some documentation and let us write the init method now since this is inheriting from character I can simply copy and paste all of this copy and paste and this returns nothing now inside since we are inheriting we can use the super keyword and we can say super dot init and we can simply pass the name attack power and the life so the superclass of character would be responsible for creating all of this instance variables next we can also create one more instance variable called as a rule so this instance variable can say that this is a superhero or this is a super villain in order to define a role again let us go back and create a nice enum so let me go to the top and first thing that I want to do is I want to import so from enum I want to import my enum and also I want Auto I can say my class of character type this inherits from enum let me add some documentation then I can say superhero and assign it to Auto then I can say villain and assign it to Auto as well so let me save this and let us go on below here I can create one more instance variable I can say cell dot rule and this would be equal to my character type Dot superhero let us also create the Str method so I can say Str yourself this returns a string let me copy and paste all of this let me put it here not just before the name I can say that this is a superhero so I can say this is a superhero and put a nice Arrow now since this line is really long so we can do one small trick let me take it down and I want to have brackets around this so this is my opening bracket and right over here I can put my closing bracket and what I can do is let me cut this portion out for the life and on the next line I can simply again say F and paste it over there and that's it so this is also a valid syntax next let us create the same thing for our villain so I can simply copy all of this paste it down so from Superhero it becomes my villain and this has to be my villain this has to be again my villain let us go down and we don't need all of these things because we already have a class for character so I can take all of this out I don't want any of this now let's see what we can do with life with life I'm going to do a very small trick I am going to create a class for life but all of the methods would be static that's because I don't want to create an instance of life it makes no sense I just want access to Hero life and we're in life so let me create it first and then I will try and explain so here I can say this is going to be a class of life and what I want to do is I want to take all of these things inside so till yeah all of these things goes inside my class now let's start changing them one by one now what happens is you can see my these two variables these are outside my init method or rather I don't have a init method over here and that's also perfectly fine these two variables belongs to the class so they can also be called as my class variables and that's what I want there is one other alternative approach let me paste it right over here that approach is called as data classes but I am not going to cover them inside this course you can use this link to study more about data classes now let us continue with our journey I'm going to use a new decorator which is called as static method so let me copy and first let me paste everywhere and then I will try and explain what's happening since this hero life and we're in life belongs to the class I no longer have to use the keyword of global and hero life so I can take it out and now what happens is this hero life is actually a class member of the class of life so I can simply say life dot hero live plus equal to life so this means that this hero life variable references exactly this one let me save it and then I will try and explain what this new decorator is doing now if you see I am not taking the argument as self for static method that's because this decorator works on the class directly it does not have to create an instance let us go back to our decorators file and there I will try and demonstrate what's happening so this is our decorators file now let me go back to the diagram itself so here is our diagram again whenever I am saying that this is a static method means that we can call that starting method from the class itself we don't need to create instances for example here in our decorators file you can see that we have this one date time dot now no matter whatever the class you don't need an extra instance we can have a common functionality that's what I mean to say by a starting method so basically static method is just like any other method but it does not take a self argument because it works directly on the class and not on the instance suppose we can create a static method called as describe and that static method will just describe what this class is going to do so let's create it and see it in action so let me go down and just after this property joint on I can create my static method so I can use my decorator of static method the name would be describe so again this is not going to take itself neither this is going to take a class because this is independent of everything this is going to return none let me write some documentation what's happening so this method is just going to describe what this class is all about so I can just print out that this is a class to create a path member now let me go down and here I can simply call this method on my class so let me call it at the top I can say staff Dot describe and since it's a method I need to use my brackets that's it let me run this file and here we have the output class to create a staff member Now using this same concept let us go back to our game now here what happens is we have two class members hero life and we're in life I want to get access to this variables and that's what I'm doing right over here by using a static method you can get a little bit more clarity when we use this method later in this video for now let us change all of the syntax so this one also becomes my static method and I don't want Global and this becomes my live dot hero live same thing for this one this also becomes my static method I don't need the global I can say my life got villain life and same thing for this one as well so this also becomes my static method I don't need the global and this is my life Dot that's it just save a file let us go down so here what we can say is this is a list of superheroes so instead of just character I can say This Is My Superhero next what I can do is I can create instances of My Superhero by using the newly created class so I can say my Iron Man is a superhero the name is obviously Iron Man next the attack power is 250 and the life is 1000 so similarly let us create instances for all of the other superheroes as well so here we have we have a black widow Spiderman and Hulk now since we have everything in classes I don't require this constant so I can just take them out they are not required this becomes a list of superheroes and I have to change this as well so Iron Man Black Widow Spiderman and Maya Hulk let us go down so this instead of character we can say this is going to return a superhero rest everything Remains the Same so let us go down to villains this is going to be a list of our villains again let us do the same thing let us create instances so I can say my Thanos is equal to my villain the name is Thanos my attack power is 400 life is 1500 let us create the rest as well so we have all of them let us take out all of this it's not required this becomes my villain and we need to change all of this as well fastest tunnels then it's The Red Skull and then is Proxima let us go down so this becomes my villain and everything is looking good let us go down and let us see where we need to do some more changes this becomes a superhero and this becomes a villain now let's see where we are going to use the class of life and the static methods that we have created we are going to use exactly right over here for the set life and for the actual attack so here I can say from my life I want to access the static method called as increment hero life and I simply want to pass the life of the superhero so I can say my superhero dot live and we can use the syntax because life is just an instance variable on superhero so this is the beauty of working with classes let us go down again we can do the same thing we can say from my class of life I want to access the static method of increment villain life and I want to pass the life of my villain we don't need all of these lines we can take them out we can do the same thing right over here as well so I can say live dot I want to decrement my hero life let's pass the attack power of the villain and same thing below live broad decrement villain life and let's pass the superhero attack power we don't need all of this we can take it out let's save our file now let us go to this line it seems that we have some error so let's see what's happening value of superhero is not indexable oh yeah that's right now since this is a class we have to say superhero dot in the name and here also villain dot name and now the error is gone let us go down and here what we can do since hero life and villain life are now the class variables of life so we can simply say live dot hero live and yet it becomes life dot villain life and now we have a beautifully typed object oriented game design so let me save my file and let me try to run this now that's really amazing everything is working perfect and it seems that I have also won the game welcome to the last video in this section this video is all about the different magic methods that we can use inside our classes till now we have seen only three magic methods one was in it second one was repr and the third one was Str but python provides many more of this magic methods so let me try and cover some of the most commonly used magic methods what I've done is behind the scenes I've created a file called as box and let us start working with this as you can see it's completely empty so let's create a class call it as box and the edit method this box is going to have two sides so I can say my side a the type is an integer similarly we have side B type is an integer this is going to return nothing and my instance variable so my side a is equal to my side a and my side B is equal to my side of B so let's create the wrapper method so you are already familiar with it I am just returning a new string called as class of box now let me create the Str method so till now there is nothing new to you inside my Str method I'm just returning a nicely formatted string saying that this is a box and side a and the value of side B let us create two boxes so this is my first box and this is my second box let us also print them out so I can say print my box first and print my box number two as well so let me save the file and let me run so till now there is nothing new to you let us go back now suppose what happens if you do something like this I want to say I want to add both of them together so if I say B1 plus B2 is equal to my B3 and then I want to print my B3 let us save and let us try to run this file and see what's happening it's saying that this is an unsupported operand and that's because python does not know how to add one box with another box but we can implement this functionality by using different magic methods so if you go back and if you say minus again if you try to run again we have some sort of an error because python does not know how to minus these boxes and the same thing will happen for all of the different operations such as multiplication division less than greater than less than equal to greater than equal to and so on but what we can do is by using different magic methods we can implement this functionality on our class so let's see how we can do this step by step the first thing that I want to show you is how we can use the in operator so let me give you a small example this is my IPython shell if I say o in octolium so we get a true so let us see how we can implement this syntax of in for our box we can implement this by using another matching method and the name of this matching method has to be specific and the name is underscore underscore contains underscore underscore this tricks self as the first argument the next argument is what we want to check so let me name that argument as number for now let us skip the type and I will come back to it a little later let us see what this type has to return let us go back to my iPad and shell and here you can see the return type is of the type of Boolean so that's what is going to be the return type so this function is going to return a Boolean that is it has to return true or false the logic for this is pretty simple let me again go back to my iPad and shell and let me show it first over here suppose we have a list so let me call it as L and this is 1 comma 2. now if I say 1 in my list of L we get the answer of true if I say 3 in my list of L we get the answer of false so what we can do is we can simply create a list of both the sides so side 1 and side 2 and we can simply compare that the other argument is inside that list or not so let's see how to do that here we can simply say return if the given number is inside my list and I can say the first List member is my self dot side of a and my side of B now this method works but this is not foolproof what happens if this second argument is not a number if someone provides a Boolean value or some other value then how we can say the user that we have an error so for this let me show you some new syntax so let me go down let me put a comment now if you remember when I was teaching you about classes and instances we use one method which is called as is instance and then we could check if the dog is an instance of animal if the cat is an instance of animal or not so we are going to do the same thing right here we are going to check if this number is of the type of integer or not if this number is not of the type of integer then we can simply throw a number so here what we can say number it can be any object we don't know beforehand what the user is going to provide so object is a generic term and if you remember everything inside python is an object so we can say number could be any object and now let's try to see if the number is an integer or not so we can say if then we can use the inbuilt function called as is instance then we can say is my number and instance of my integer and if not so let me go up and I can use the word if not here I want to throw an error so I can say raise not implemented error now since this number is not the type of an integer we don't know how to do the comparison so we simply raise an error in the next section I'll be teaching you more about errors right now just try and understand if in a situation we don't know what to do we can simply raise an error so that's what we are doing right over here let me save it and let me show you it in action so we don't want this one here I can say is 4 inside my box of 1 and I can also say is 6 inside my box of one let me save it and let us run this file so here we have the output let me take it up 4 in box number one yes and that's true six in box number one false let us see what's happening so this is our box number one we don't have a six over here now watch closely what happens if I write something like this I can write a over let me save it and let me try to run it and this time we get an error and this error is of the type of not implemented error and that is what we have coded if you go back to our line number line number 15 since a is a string but we want an integer so what's happening is in this line we are raising an error if we try to evaluate is instance number is a type of instance it's going to fail because here the number is actually the string of a so if not an instance of integer then we want to raise an error and that's what we are doing so if we just open up the terminal we are throwing and not implemented error so this error which is called as not implemented error so this is a standard way of throwing an error inside this method let's see some other operators so if I want to say is my box one is equal to my box 2. let us see how we can do this syntax right now let me take it out and since this line is always going to fail let me take it down and let me comment it out so let me go right over here and I want to copy and paste till this one let me go down and let me paste since we want to see both the boxes are equal or not the magic method is called as equal short form EQ let me write the proper documentation so this so this checks if both boxes are equal or not and this line is the standard check that we want to have now let's see what to do right over here this time we expect a box so let me change the name of the variable from number to a box let me go down so this also has to be box here we want to check if the given object which we call as box is an instance of the class of box or not so instead of integer this has to be my class of box so if the another object is also a box only then we can have a comparison but there is a small limitation of python we can't use the syntax directly but we can use a small hack and let me show how we can do this again let me go to the top and I can say from my future I want to import my annotations and now we can use the syntax which is right over here now let us see how we can compare both of the boxes now what happens is the box has a side side a and a side B if both of the boxes has to be equal that means both of the sides should match so that's what we are going to see right over here I can see that return self dot side of a is equal to is equal to the Box dot side of a maybe we can rename this variable we can call this as the other or we can say the other box right now I'll just write this as other so right now we are comparing the self plot side a with others side a similarly we also need to compare the side b as well so here I can say I want my side a to be equal and I also want my side B to be equal so I can say self plot side B has to be equal to the other Dot side of B and this also needs to be changed from box to other so let us go down and here we can say I want to print if my box one is equal to my box 2 let me save this and let me run this file and here we have the output false box number one is not equal to box number two let us go back and let us try to implement some other methods let us try how we can check for less than and less than equal to so what I mean is how we can implement this Behavior B1 less than and B2 or less than or equal to B2 so let us go up right where and let us start creating our method let me copy till this line and let me paste it over here so whenever we say that we want to compare if it is less than the magic method is called as LT which stands for less than let me also write the proper documentation so instead of this we want this one now let's check if the other box is smaller or not one simple way of doing this is by calculating area or you can also use this syntax but I think using the area is a much more cleaner method now since we already have the side A and B we can define a property for area and we can use that property right over here so let me go over here and let me create a decorator for my property I can say this is for my area self and this returns an integer so I want to return my site a multiplied by my side of B now this makes things much more simple so here's simply what I can do is I can go right over here and I can say return self dot area is it less than the others area and that's it let me save my file but what happens is this magic method is only for less than we also want to compare for less than and equal to so if you go to this line number 44 we have an equal operator as well so let's see how we can Implement that and that's pretty simple let me just copy all of this and paste it now this magic method is called as less than or equal to that means L and E and on this line we simply have to add equal to and that's it so let us start printing all of these things so let me go down over here here I can say I want to print if my B1 is less than B2 one more beauty of this magic method is we have simply defined a magic method for less than and less than equal to but python can infer how to implement greater than or greater than and equal as well it simply has to reverse the logic and python does it behind the scenes we don't have to create another methods since we already have these two methods in place so here I also want to check if my box of one is greater than my box of 2 we can also use the less than an equal so we can we can see if this is my less than or equal and we can also use the greater than an equal so this one let me take out this line let me comment all of this let me comment all of this and let us try to run this one so here we have the output let us check if the output is true or not the first one is is my box number one less than my box number two let's see what's happening 3 multiplied by 4 is 12 2 multiplied by 5 is then so that means my box number one is larger than my box number two let's see the statement so this is exactly opposite my box number one is larger so this becomes false and that's what we have over here in the second line yes my box number one is larger so we have the output of true and so on for the line number 53 and 54 as well let us go back and let us see some other methods as well now let us see how we can Implement some basic operations such as addition multiplication division and so on luckily writing all of those methods is just a matter of copy and paste so let me show you first let us create a method for addition so where we can add two boxes let me copy and paste since this is for addition the magic method is called as ADD let me change the documentation and let me also get my spacing right and here we simply have to add the areas that's it let's check what's the error oh yes now it's saying that it got an integer as the return type but it is expecting and Boolean so let's see what's happening oh yes here we have written Boolean as the written value but that's not what is happening area is an integer so let us update this from Boolean to an integer so you see there are so many benefits of having a very well typed code let us Implement other methods for subtraction multiplication and division as well let us create one for subtraction and since it is a subtract we can say that this is subtract let me change the documentation and this becomes minus let us do for multiplication and since this is multiplication this becomes mul for multiplication let me change the documentation and this becomes multiplied the next one for division now this becomes a little tricky if you think for division it would be just div you are partially right but that's not what is happening let us go back to our IPython shell and let me try and explain what's going to happen so suppose if I say 1 divided by 2 we have the answer of 0.5 this is called as true division now if I say 2 divided by 3 we get the answer of 0.6 as well again you can see this is a true division but if you watch closely we have two integers and the output is a float what happens if you want to have the output as an integer as well in that case we have to use double slash and then three so this syntax is called as flow Division and this syntax is called as a true division the written value of an true division is always a float and the return value of floor division is an integer so let us go back to our code and see how we can do this the first one can be our true division so I can just say this is my true Division and this becomes my true division now remember that the return type is going to be a float this time since this is going to be a true division let me copy and paste this for our floor division so here I can say I want to have my floor Division and here I want to have one more slash and that's it let us go and let us print out all of these things so let me go right over here and let me put all of my print statements let me comment all of these things out and let me try to run this file and here we have the output so B1 minus B2 is 2 let us check if that is the case or not so the area of first box is 12 the area of the second box is 10 and that's what is happening so 12 minus 10 we get the answer of 2. and if you check the answer of all of the other methods obviously all of them are going to be right when I was going through the code I realized that we have a small mistake it's not really a mistake it is just about following the best practices of python so let me try and explain everywhere we are trying and throwing this error called as not implemented error which is absolutely fine but the guidelines in Python suggest that whenever we have a binary operation that time we simply have to raise an error which is called as not Implement so this and this are two different things please keep that in mind so let me Rectify all of these things so let me just copy and paste it everywhere so all of this let me do my multi select this becomes my not implemented this one and this one as well so let me save the file what I mean by an binary operation so all of this operations minus plus multiplication division Etc all of these are called as binary operations but this one when we are checking 4 inside B1 this is not a binary operation so in this case we are using not implemented error and whenever we have a binary operation at that time we are using just not implemented well that's it for this video and now we are officially at the end of the section and I will see you in the next section where I will try and expand your knowledge of error handling in Python welcome to a new section this section is all about error handling in Python now errors in Python can be divided into a couple of categories the first category can be thought as your syntax errors that means whenever you make some errors in typing those errors are called as your syntax errors now fortunately these errors are very easy to catch and these days we have much better tooling inside Visual Studio code and our plugin my Pi or if you are using an IDE such as pycharm all of these tools will help you to catch syntax errors the second category can be thought as your runtime errors that means this errors are not reflected inside your code but whenever you try to run it this errors will pop up this error is a little bit difficult to debug so as we saw in our last video whenever we can't handle a situation we were raising some kind of Errors so when we raise those kind of Errors at least we can have some idea what's going wrong during our run time and this errors in Python are called as exceptions so let's see one by one all of this the first thing that we are going to see is the most common one and that is called as your syntax errors so let me go back to my code editor and what I've done is behind the scenes I've created a new folder called as 0 7 error handling and this is a file called as maths dot pi now let's see what's happening there is some red line right here print X and Y this is an example of my syntax errors so at least I need to have a comma right over here or I need to have like my formatted string so something like this and this has to be inside my curlies and this as well and now if you try and save your error will go away so this is one of the most common errors called as a syntax error now let me try and show you what do I mean by a runtime error so what I've done is I've created another file called as divider and let's see what's going to happen this time let's create a function that divides two numbers so I can say Define divide the first number could be an X the next is in y and this does not return anything and we can simply print out my x divided by y so till now everything looks perfect and we don't have any errors now let me go down and let me say I want to divide my four by zero now what's going to happen we can't divide any number by zero it's just not possible so what is going to happen is our program is going to panic and it is going to exit so let me save and let me run this file and let me show you this in action so here it is our program pan it and we have an error which is called as zero division error division by zero so this is an example of runtime errors there are no visible errors inside the code but whenever we are trying to execute this code we have some errors so let me put a comment over here so this throws or raises an error and the type of the error is zero division error if you open up a terminal that's what we have so this is a type of error or rather this is a type of exception in the world of python let us try to expand our knowledge of errors so in this program we saw that when we Panic we get an error this error is a very specific one and the name of this error is called as 0 division error now python gives us an error handling mechanism in the form of try and accept blocks so let us see how we can use that syntax to catch this zero division error so let me go back and let me create a new file and I can name the file as smart divider dot pi so let us create our function called as smart divider again it's going to accept X which is integer Y is also an integer this is returning nothing now let's see how we can do a very smart division last time we saw that when we divided by 0 we got an error and that error was 0 division error we can catch that by using our try and accept blocks so this is how the try and accept blocks goes so inside the trial this is the code that you want to try so trying the code and in case this code fails then we can say accept and this is the place we are going to catch the specific error and we have that error then do something with the error let us see how we can fill these blocks so inside try let us see if we can divide or not so I can just say my number is equal to x divided by y and I want to print out my number now what happens if we get the same zero division error so we can tell python that whenever we are going to have that error I want my accept block to catch it so I can say accept my zero division error so that means whenever I get this error I want to catch that error and after catching that error I can do something with it so let me just print out some message can't divide by 0 use some other number now let us go back and let us try dividing by 4 with 0 and let us try to run this so this time we have a much better output our program is not panicking instead we get a very helpful message saying that can't divide by 0 use some other number so as you can see we can handle our errors now imagine one more scenario instead of 4 I write as a then what happens let us run and see what's happening this time again we have some other error and this time the error is called as type error and unfortunately our program is panicking and it is terminating Midway let's see how we can handle this situation as well so let me go back and let me create another file this time I will name it as really smart divider and let us start writing the code for this one let me copy and paste the code from my smart divider so let me take all of this and paste inside my really smart divider so since this is a really smart divider I can say this is my really smart divider let us have a look at the error one more time so what's happening is let me take it down so what's happening is we were trying to divide by a now a is of the type of a string and fourth is all the type of integer both of them are essentially of different types so that's what this error is saying so we have a type error let us see how we can catch this error as well we can chain our accept blocks so we can say if we have a zero division error then I want to catch it right over here but if there is a type error so I can say accept my type error let me catch it right over here and this time I can print out both X and Y needs to be a number but what happens if we don't know what kind of error we are going to get that time we can use some other syntax and this is called as accept exception so now this exception class is the base class for all of the different exceptions so just as we saw in our classes dog was a subclass of animal so same thing all of these errors zero division error type error and all of these things all of these errors inherit from exception now the same logic goes over here dog is an animal cat is an animal same thing any errors that we get is also an exception and that's what we are trying to catch over here here we can also add an alias so we can say I want to catch my exception as a variable called as e then we can simply print out what happened wrong so here I can say oops something went wrong and let me print out my exception which we are calling just as e and that's it this time we have a really smart divider let's try to invoke it so I can say my really smart divider cannot divide 3 with 0 can you divide three with four can divide 3 with a now let me try to save and run this file and this time we have the output so the first time we have a 0 so we have the output can't divide by zero second time everything looks good so we have the answer third time we have a string so we have the output both X and Y needs to be a number we are making really good progress with errors and let us learn the last missing pieces for our error handling so let me create a new file let me call it as try else and finally dot pi and let me copy all of the code from my really smart divider and let me paste into this file let let us call the function just as divider so let me take this out there are two more pieces for this puzzle so till now we have seen the try block and the accept block now let's see the else block now what happens is if this condition succeeds then the code inside the else block can be executed so inside my try block I am just trying to see if I can divide x with Y if this succeeds then I can say that I want to print right over here the naming is a little weird but we can't really help it so whenever a try block succeeds we can use an else block to execute some other code as well let me add a couple of print statements just for the sake of clarity so else is executed only when try succeeds so we are trying to see if x can be divided by y or not and if that succeeds only then we want to print out the number now the last piece is called as finally now no matter what happens if the try succeeds or it fails this finary block is always going to execute so let me write a print statement right over here you may not appreciate the beauty of this block finally but just imagine a scenario that you're writing a web application and you want to write something to the database or suppose you are interacting with some other apis and you want to do some kind of a cleanup operation maybe you want to delete some files maybe you want to insert some files so no matter the outcome if the operation succeeds or fails we can have that logic inside the finally block now let me save this file and let me run this file so as you can see we always have this output of finally so no matter the outcome we always have this block let me comment one of this so that we have much more clarity we try and run the file so we have a zero division error and since we have some error the code inside the else block did not execute but the code inside our final block executed and we have this output right over here now let me go back and let us drive the second one let me comment this out and let me try to run this so now see what's happening since this operation is succeeding we go to the else block and inside the else block we first print these two lines so that's what is happening we have those two lines right over here and after that we are printing out the number so which is 0.75 and this block finally this is always going to execute so that's what is happening so if you try with this one you can have the same output so let me uncomment this so since we have an error our else block will not execute let me run this file for the last time so here it is we have a statement saying that X and Y needs to be number the code inside the edge block is totally omitted but the code inside final block is executed and we have the output right over here let us have a look at the next kind of error and this kind of error is called as assertion error now this assert statement that I am going to show you this statements are very useful in testing now we are not going to learn testing in the series but I just wanted to show you the assert statement so what I have done is behind the scenes I've created a file called as find Sohan so what's going to happen right now is Lewis has a list of friends and let us try to see if we can find a particular friend in that list or not so let me name the function as find Zohan and this accepts a name of the friend that we want to find so this returns nothing so we can say none so this is the list of friends so I can just copy and paste it right over here now let us create our try and else blocks so normally you'd write as name in my list of friends and this would give you a Boolean value of true or not but what we can do is we can also use the keyword of assert so what I mean to say that I want python to assert if the name is inside the list of friends or not if the name is not present that means we can have a kind of error and this time the error would be assertion error so let us use the accept block to catch our assertion error so you can say or not arithmetic I want assertion and then we can see let us print out the name not found now in case we get a match and this statement succeeds then we can also write the else block and we can print out saying that found followed by the name we can also include the final block remember that this is always going to execute let us print Maybe goodbye that's it let us try searching for a couple of friends so I can say find Zohan and let us try to find for Zohan himself let me copy and paste and let me try to search for Sarah and let us run this file so we can see in the first case we found Zohan so we are printing out fine Zohan the final block always executes we have so we have goodbye as well the second time we could not find Sarah and it threw an assertion error which was caught inside this except block so we have the output of Sarah is not found and the finery block again executed so we have the output of goodbye till now we have been seeing how to catch an error but now let us see how we can actually throw an error so let me create a new file right over here this is going to be my fine Zohan part 2 dot pi and let me copy and paste all of this code from here now let's get working on this file now since I am not catching any errors I don't require this try and else blocks so let me take it out now if you can't find the name inside the list of friends at that time we want to raise an error so we can say that we can't find the given value that means we can raise a value error here we can say if the name is not inside my list of friends then I can raise an error and I can raise a value error and I can also give a custom message saying that the name is not found and we can also say else in case we find the match we can simply print it out we can say found and followed by the name so let me save it and let me try and run this file so the first time we have a match so our program will not panic but the second time we don't have a match and our program will Panic with an value error so let's see that in action and here we have it the first time we could find a match so we have an output but for the second time our program panicked and it threw the value error which you can see right over here so we have a value error followed by our message saying that Sarah is not found well this brings us to the end of this section as well if you want to learn more about errors you can go to this link so this is all of the files from GitHub go inside this folder error handling and go to this file readme I have put up a reference right over here you can visit this link to learn more about errors and that's it for this one and I will catch you in the next section welcome to a brand new section this section is all about learning packages packages are used to organize our code so let's see how to create some packages but before that let us see a couple of examples where we have used them for example inside our game we have been importing a random end from random I also enum and auto from enum what this means is we are importing something that is useful from us from a package or a module and you can see this gives a very nice organization so it's very clear from a random module I am importing something random from my enum I'm importing something as enum so you get a lot more clarity inside your code so let me go inside my zero eight packages folder and inside of this let me create a new folder the name of this one is 0 1 local modules for the sake of clarity I am going to open this newly created module inside a new code editor window so I can just go inside this I can say 0 8 packages and I want my code Editor to open zero one local modules in a new window so here we are if we just hover you can see I am inside my folder01 local modules suppose you are taking a maths class and you have to do a lot of calculations and this calculations involve squares rectangles circles and so on so let's see how we can divide all of this functionality by using our modules let's say we have to do some operations on a circle so let's create the first file let me call this as Circle Dot py and let me create a class of circle and let us create the init method so I can say Define my init this takes itself and this also takes a radius suppose the radius can be a float value this returns nothing and inside we can say self Dot radius is equal to my radius let us also create the Str method so I can say my Str would be myself and this returns a string here I can return saying that my radius is my self dot radius now in the same class you also have to deal with rectangles so in order to organize our code we can create another file for this rectangle we don't have to Club all of the functionality inside a single file so let's do that so right over here let me create a new file called as rectangle.pi and let us create the class for rectangle let us create one more file for dealing with squares so I can create another file called as my Square dot pi and let me just copy and paste from rectangle so let me paste it this becomes my Square this becomes just my side I don't need this and my side is equal to my side this becomes minus square and I can just say that this is My Side Y my side and that's it oh I forgot to put a colon so so what we did is we segregated all of the functionality into different files now technically all of these files are called as modules inside python we may call them as files but they are identified as modules so what we can do is we can import functionality from this modules so let's say we have a file called as geometry and from that model of geometry we can import all of these functionalities and we can work with them so let me show you all of these things in action so let me create a file called as geometry dot pi and here I can see from my module of circle I want to import the class of circle same thing we can do for rectangle and square so I can say from the module of my rectangle I want to import my rectangle and the last one from my model of square I want to I want to import Square so what we are doing is we are simply importing the things that we want to work with now this file Circle rectangle and square they can have multiple functions or they can have multiple classes but we just need to import the things that we want to work with so let us create a circle maybe the radius is 5 let us create a rectangle so I can say my rectangle let me give some random values then let us create a square let me give some random value as well and then we can simply print them out so this is my C and this is my rectangle and this is my Square let me save it and let me try to run this file so as you can see we have the right output first one is a circle with a radius of 5 then we have a rectangle and then we have a square so in this example what we did is we created different modules but if you look closely Square rectangle and circle all of these things belong together and we can create a package which I will show you in the next video we just saw how to create different modules and in this video I will teach you how to take all of the common models together and how to create a package out of it you must have noticed that we have a couple of additional files let me take it right over here so this was the folder that we created in the last video and you can see we have multiple different folders one of the first folder that you can see is for this one this is called as py cache you don't have to touch this folder this is just a mechanism by python to speed up your code just let it be there now for this video let me just copy and paste this folder and let me rename this to 0 to package and also let me open up the folder inside a new window so I can say code 02 package so here we are so this is the exact same code that we created in our last video now what happens is circle rectangle and square all of this are similar all of this are shapes and we can organize our code in a much better way so let's create a package which is called as shapes so packages are nothing they are just a special kind of directory so let me create my directory and let me name it as shapes after this I am just going to copy my circle inside my shapes yes I want to move same thing for my rectangle and my Square as well so let me just drag all of these files inside my folder of shapes yes I want to move now we need just one more file to declare that this folder is and package and not just an ordinary directory the way to do that is by creating a file and the name of the file is very important the name of the file is underscore underscore init underscore underscore Dot py when python sees this file it considers your directory to be an package now let's see how we can import all of this circle rectangle and square in our file of geometry so here you can see we have a couple of errors and that's because we have moved all of this code inside a new package and the name of the package is called as shapes so here we have to say that from my package of shapes I want you to go to the model of circle and you can say that by putting a DOT so this means from my package of shapes I want you to go to the model of circle and inside the model of circle I want you to import my class of circle same thing will go with the rectangle so here I can say shape slot rectangle and this also goes to my shapes dot Square just save a file and that's it if you try to run the file here you can see we have a proper output there is one more concept that I wanted to explain in this video so what's happening in this video is shapes is an isolated directory or you can say it's an isolated package which has certain functionality and we have created a file called as geometry and this file is interacting with our package of shapes so conceptually you can call this file as your client and the package of shapes as your API so what we are doing is we have created a client file which is interacting with our API it's a very simple concept now let us see how we can import functionality from within a package itself so let me copy and paste this folder and let me call this as 0 3 and local package and let me open this folder in a new window so I can say code 0 3 now suppose you are inside your package of shapes and inside this package if you have to work with any of the modules how would you do it let me show you with a small example suppose we have a file called as shape dot pi and inside this file if you want to import Circle rectangle and square you must be thinking that we can simply say from rectangle I want to import rectangle well you are partially right but not entirely right the way to do it is by putting a DOT right over here so this means that from my current package so this dot means my current package from my current package I want you to go to my model of rectangle and from that module I want you to import rectangle let's do the same thing for Circle so I can say dot Circle I want to import my circle and also I can say from dot of square I want to import my Square now let us go to our client file and let's see how we can interact with this file so let me go back to my geometry dot Pi now this syntax is perfectly fine it's going to work but let us use our newly created file so what we have done is we have created a file called as shapes dot pi and we have imported all of the other models inside this file so here what we can do is we can simply say from map package of shapes I want to import the model of shapes so this shape means this module right over here and here we can see I want the circle which is inside my model of shapes and that's it let me copy and paste it everywhere let me paste it here paste it here and that's it let me save it and let me try to run this file and we have the right output let's see if we can further improve our code so I'm going to copy this folder and paste it one more time and let me rename this to 0 4 package underscore init and let me open up that folder in a new window so my code04 okay so here we are so what we were doing in the last video is we created a new model called as shapes and this module was importing the functionality from all of the other modules but we can do better instead of creating a new module we can simply take all of this Imports let us copy them and let us put all of these things inside my init file that's it just save it and I can't get rid of this file so let me just delete this it's not required now let us go back to our clan file so this is our geometry here we can simply say that I just want to import shapes and that's it just save a file and everything should work just as before so let me try to run this file and still we have the right output so what's happening is we are just importing the entire package and since we have all of the modules which are imported inside our init method we can have access to all of them right over here so this init method just acts like a Constructor for your entire package so it's similar to our classes we were using the same naming convention to have a Constructor for our class the same thing goes over here but here we are constructing a package instead of a class and that's about it I am so excited to see you in the last section in this last section we have two projects the first one is for a cash register and the second one is obviously is going to be our game but this section marks a fundamental shift till now we have been thinking and writing with our types but this time we would be seeing how we can organize the code in different layers just in the last section we saw how we can create packages packages was one way of organizing our code but now let's try to think beyond our packages let's try to think more about in the architecture point of view now this concept may sound a little alien but by the time we are finished with our projects this concept would be much clear to you for now let us concentrate on the first project so this project is all about a cash register but before we can jump in and just start writing our code I want us to take some time and let us think how we can design this application so I want you to take back to the concept of voc dtp so this is a very simple concept which I propose for your learning so this concept stands for your visualize outline code so this is your face number one once you're done with the first phase the second phase would be debug test and polish let us try to see one concept at a time so this is going to be our problem statement we simply want to make a simple cache register suppose you have a shop and you want to create a software for your cash register so basically we just want to implement at what's happening at our checkout counter just try to imagine what's happening over there normally you would hand your items to the cashier the cashier would scan the item he will generate an invoice the cashier would accept the payments and he will hand over the products to you so out of all of these things let us just try to concentrate on the cash register so let us go to our first phase which is this one visualize outline and code inside this phase the first step would be to visualize let us try to visualize how our application would look like let's try to imagine what's happening inside the cache register as soon as the cash shares scans an item an item is added to the invoice now what happens if the customer wants to change the quantity the cashier can simply update the quantity and what happens if the customer changes his mind and he wants to drop an item then simply cashier can delete the item from the invoice the next thing that I want you to think is an item can also have different components such as a discount of our tax which can be added to the invoice now just to help you visualize how our code will look after implementing our cash register I have created a nice dictionary so let me show you this is how our final outcome should look like let me zoom out a bit okay so this is our final outcome if you watch closely it's not complicated it's just a dictionary structure we have a couple of keys and we have a couple of values let's see what keys do we have the first key is for the customer the next key is for the invoice total the next one is for the items and the last one is for the purchase date now let's see at the values the value for the customer is a dictionary itself the value for the total is a float now here for the items it gets a little more interesting this bracket to this bracket this is the value and inside this value we again have dictionaries so these are the different items so we have one atom for an apple the next one is for an egg next one for milk and inside this items we can add different components such as your discount your quantity and your subtotal and for the purchase date we simply have to display the date of purchase that's very easy now the thing is I could visualize this data structure just because I have some practice but the same thing can happen with you when you practice a little bit more you can visualize this design even before you can start coding let us go to the next step let me zoom in again let us go to the next step which is outline here what we are trying to do is we simply want to outline our structure so if you see right over here in this step we have a couple of different objects first one was for the customer for the invoice total items and so on so let us try to outline what component or what classes or what objects we would require inside our application so here I am inside the next step for outline obviously we require a customer the next thing we require is the item that the customer is buying and the next thing which I have already explained we require an invoice entry why do we require a separate invoice entry is because different items can have different discounts or offers or they could have some kind of Taxation so for the sake of Simplicity let us call this item as invoice item so this means once you have the item Insider invoice it will have a slightly different structure and finally we have a place called as cash register so this object keeps in record of everything that is happening on the counter so let's try to summarize the objects that we are going to require so we need a customer we need an item we need one more for the invoice item and the last one obviously we require a cash register so till now we have much more clarity about our application and the different objects that would be going inside our application and you would be tempted to just open up your code editor and start writing your code but I want you to hold your guns let's try to do little bit more planning so before we can write the code let us try to describe how our objects so that means let us try to visualize how all of these objects would look like in the world of python so let's see I have created a couple of diagrams for you this is how our customer would look like our customer would require a couple of instance variable it could also have some methods and the type of them and obviously our customer needs a first name and last name the type of this one is obviously is good with string and for the sake of customer we don't require any methods now let us go to the next object or the next class so this class is for the actual item itself we need some kind of an identifier so that every product needs a unique ID so we can have an ID as our instance variable then we also need a name for an item then we also require a price in this case let us keep the type as a float because we may have some decimal places as well the next one is a little more interesting we also need one instance variable for the measurement unit here the question is how do you measure the product it can be in kgs grams liters Etc so we need some kind of a unit that will describe how to measure this item now let's go to the next object or the next class this is our invoice item this class is pretty simple it has to accept one item so I have created one instance variable for the item and since there can be some kind of a discount we need one more instance variable for a discount and the customer can purchase in multiple quantities so we have one more instance variable for quantity now for this class we require one more method and that is to have our subtotal we need some small Maps over here we need to figure out how much is a discount and how much is the quantity so each item can have a different subtotal and that's what we are trying to calculate inside this method let us go to the next and the last class that we require and this one is for our cash register so this class is going to record everything that is happening inside our shop so let's have a look at the different instance variables first obviously it needs to know who is the customer that is making the purchase it also needs to know the different items that are being purchased it also needs to record the purchase date and here you must be thinking that we require one more instance variable to display the invoice total well you are right but instead of just creating an instance variable we are going to create a method called as get invoice total the reason is we have different items and different items have different subtotals so let us use this method to calculate the total of all of the subtotals this is more of a convenience feature now let's see what are the methods this class is going to have obviously at the cache register you can add an item you can update an item you can remove an item and at the last we can also display our invoice so till this time we have much more clarity on our application we have a nice outline in place we know which classes or which objects needs to go inside our application we know what instance variables are required the type of them the methods that are required for all of these things so we have a much better design and a much better Clarity with us and now we can think of writing all of these things inside our code editor but before we can do that I just wanted to show you one more thing so the document that I have put together this is technically also known as a unified modeling language diagram well to be precise this diagram is a little bit different from the document that I have put you can go to Google and check it out I have left the links in the redmi file and in fact free code cam has a full course on unified modeling language you can click over here to have the link for this one the next thing is just to translate all of this document inside the code and I have just shown you once we are done with our code the cache register would look something like this so this is what we are trying and going to code and this structure that we are going to code can also be imagined to be a data structure so now we get it there is nothing big about data structures it is just a way to represent our data here you can see that we have a custom data structure of the type of cache register in the next video we will actually start writing the code and I will see you then now let's get going what I've done is I've created a folder called as 0 9 projects and inside this folder I've created one more folder called as project one cache register and I also have this file inside my project so let me open up this project in a new window so I can say code and here it is so now let's start writing our code let us see our outline here you can see that we have four different objects that are required so let's start with one of them at a time let us create the first file for our customer so it's going to be customer dot Pi this is going to be class of customer and let me Define my init method is going to be a self and let us go back to the document and here we can see we already know the instance variables and the type the two variables would be first name and the last name let me just collapse my sidebar so let's create the init method for the first name and the last name so let me go over here so my first name is a string my last name is also a string and this returns nothing here I can say that my self DOT first name is equal to my first name and then my self dot last name is equal to my last name let us create an wrapper method for this as well so let me say self this always returns a string and this can return a very simple string saying that this is a class for customer let me add some documentation class as well okay so this is the class for the customer details now I'll just create the Str method so this takes in a cell and returns a string so we can say I simply want to return self DOT first name and I also require myself dot last name let us go back and see which is the next item so the next object that we want to create is for an item so let me open up my sidebar let me create a new file called as item dot pi and let's see what are the different parameters required so item requires four different instance variables ID of the type of integer name String price float and measurement unit which is going to be a string so let me go back to my file of items.pi and I can say my class of item let me add some documentation then let's create our init method so I can say my init cell the first one was the ID that type is integer the next one was name the type is a string next one was price the type is a float the last one was measurement unit this is going to be our string this returns nothing let us create the instance variable so self dot ID is equal to my ID then self dot name is equal to the name self dot price is equal to my price and self dot measurement unit is equal to my measurement unit let me add a small comment over here so our measurement unit could be a kg or ml or so on next let us create the repr method so I can say wrapper self returns per string and I can say return that this is a class of item next let us create the Str method so Str self this returns a string and you can say return then we can put the name of the item and let's display the price so let's say it's going to be dollars and it's self dot price per unit so we can say self dot measurement unit let's go to the document and see which is the next thing that we want to create so the next thing is invoice item things get a little more interesting from here if you see the instance variable the first one is an item but the type is an item so please keep that in mind and for this class you also have a method called as get subtotal and this method Returns the subtotal after adjusting for the discount and for the quantity so let's create one more file right here let me call it as invoice item dot py let me collapse my sidebar and let's say this is going to be class of my invoice item let me add some documentation let's create the init file init cell the first argument is for an item and the type is item but this is not going to work because we don't have item in this file let us import it from the module so we can just go right over here and we can see from the module of my item I want to import the class of item now this will work the next argument was for quantity and the type was integer the last one is for Discount the type is a float here we can do one more trick we can assign the values right over here so that means if the user does not provide an argument for Discount that means by default the discount would be assigned a value of 0 so this is a very convenient feature of python now this is going to return none self dot item is equal to my item self dot quantity is equal to my quantity self dot my discount is equal to my discount now let's see what else we require so we also require a method called as get subtotal so let's create that method but before that let us create our wrapper and Str method so let me write my wrapper takes itself returns a string and it can written saying that this is a class of invoice item the next is for my string takes the self and returns an Str and let us create a nice string for this so we can say the item and let us display the self now here I want to display the name of the item and we can get the name of the item through our type of item so we can say self Dot item Dot name so if you go to the definition of item you can see we have an instance variable of name so this is what we are trying to refer right over here next we can say the quantity and let us display self dot quantity then let us display the discount so we can see this is dollars and it is self dot discount we can also display the subtotal we have not yet created this but we will create it shortly so let me write it first and then we will create it so I can say subtotal would be self Dot get subtotal remember we have not yet created this method but we will create it shortly and let's do one more small trick over here let us display only two decimal places we can do that by using the syntax so we can say colon and we just want two decimal places for our float uh now this line looks a little longer so let us try to divide it so let me take this line and let us put a bracket opening one and the closing one let me take it inside and let me cut all of these things clear and let me go to the next line and let me paste it over here okay so this looks much better now this is complaining because we don't have this method till now let us go and create this method so we can say Define get sub total this just takes the cell and this Returns the float now let us see how we can get the subtotal what I'm going to do is I am going to use a very simple Trick In fact I am going to define a private member right over here so let me put up a comment saying that this is a private member let me call it as self dot underscore subtotal now remember since I want this very able to be kept as private that's why I'm using underscore right over here now python does not have a concept of private and public but this symbolizes to other developers that we want to keep this variable as private now let's just calculate the subtotal which is pretty easy so we require the price from the item multiplied by the quantity and minus the discount now let us go back to this method get subtotal and we simply have to return it so I can say self dot subtotal the reason why we are doing all of these things is I don't want any other developer or any other user to accidentally change my subtotal I want it to be kept as private that's why I'm using this method you can also create a property called as subtotal which is also a valid solution you can definitely do that but right now for the sake of Simplicity I'm just creating a private member let us go back to the document and see what is next so the next one that we want to create is for the cache register itself so this is the cash register note the types that we have over here customer is all the type of customer then we have the next instance variable items the type is in dictionary then we have the purchase date the type is date time and we have a couple of methods on this as well let us create a new file right over here and call it as cash register dot Pi let me collapse my sidebar and we can say my class of cash register let me add some documentation that this is the cash register for each customer then we can Define the init method so self so as we just saw the first argument is for the customer that type is customer we also need to import customer which we will do shortly we also need to have one more for the items and that is a dictionary and we need one more for the date but before we can finish all of this definition let me first go and import customer so I can say from the module of customer I want to import my customer now let me go down over here this Returns the none here I want you to wait and think how to create the instance variable in this case what I'm going to do is I'm not going to accept items over here instead let us create an instance variable directly first let us say self Dot customer is equal to my customer here we can say self dot items is equal to an empty dictionary just imagine before purchasing anything the basket is always empty so that's what we are saying this has to be items that's what we are saying since we don't have any items inside our checkout that's why let us assign an empty dictionary to it but here how do we Define what are going to be the keys and what are going to be the values of this dictionary let us write the type in right where items is my dictionary but what are the types which is the key and which is the value let us go back to our design document and try and see what we exactly want this is a small trick right over here if you see the design of items items is actually a dictionary and inside this dictionary we have the key is of the type of a string so let us go back to our definition right over here and we can see the key is going to be of the type of string now let's see what is going to be the type of value so let us go back the value is of the type of invoice type so if we remember inside the invoice item we have fields for the discount name quantity and we are also calculating the subtotal so what we can do is inside the cache registry we can have the value which is of the type of invoice item so I can say invoice item let us go up and let us also import so that we can use it so I can say from my module of invoice item I want to import the class of invoice item so remember whenever we are creating these items the key is always going to be the string so if you just go back to the design document here it is inside the items the key is always going to be the name of the item and the value is always going to be of the type of invoice type let us go back to the class the next one that we want is for the purchase date now we have already seen it earlier we can automatically create the purchase date by using our date time library and that's what we are going to do in this document as well first let us go and import so I can say I can say from date time I want to import my date time and let us create an instance variable we can call it as self dot purchase did and we can generate this automatically by using date time and we want today's date time so we can just say now let us go down and let us create the wrapper and the scr method so I can say this is my repr self returns or spring and I can say return that this is a class of cash register let us also Define an SDR method we can say cell it returns a string here we can just return and here we can say first I want to display my customer so let us display my customer now what's going to happen right over here is we are simply calling self Dot customer and if you go to the customer so let me open up my customer file the scr of customer file returns a string in this format first name and the last name so whenever we are printing this customer by default we will get the first and the last name together we don't have to say customer DOT first name and last name it's not required next let us also display the total number of items so we can say total items and we can get that from the length of our items so let us go back to the document here it is so items is a dictionary we have three keys apple egg and milk so that means we have a length of three till now we have been using Len with lists but we can also use length with dictionaries as well and when you use length with dictionary it's always going to count the number of items so that's what we want right over here so total items is the length of my self dot items let us now implement the different methods for this one let us see which methods we require so let me scroll a little up so we require methods to add update remove and so on first let us see how we can add items to our cache register so let us go back let us create a new method called as add item by default the first argument itself now let's see which are the arguments we need to accept if we have to add an item we need to know what's the item so the first argument is going to be an item the type is going to be an item let us go and import item as well so I can say from my model of item let me import my class of item let us go back to this method now since we know which is the item we also need to know how much is the quantity so this is going to be an integer and we also need to know how much is a discount so discount is going to be a float we can do one more trick over here if quantity and discount are not given we can set some default values so by default the discount would be zero and by default the quantity will always be 1 so this returns and none so let me write none over here let me add some documentation and let us see how we can write the body of this function now the first thing is we would like to add an item to a card only if it is not existing if we already have this item inside our cash register we can simply update it we don't have to add it so the first check would be for this one so I can say so I can say if my item dot name not in my cell of items first let us type it out and then I will explain what's happening so let us go to the next line here I want to create a new item but if you scroll up the key is a string the value is an invoice item so that's what I am going to create right over here if you find it a little confusing just go with the flow and after we are done typing this function I will explain what's happening so here I want to create a new item is equal to the type is an invoice item so create an instance of my invoice item and let's see what it takes it takes an item quantity and discount that we already have right over here we just need to pass all of those inside so the first is for the item second is my quantity third is my discount the next thing that I want to do is I want to set the key and value pairs again let us first type it out and then I will try and explain so I can say my self dot items now here the key is going to be a string so this is the part that we are working on the key is the string and the value is the invoice item so if you refer the document I want the key to be the name of the item so that's what we are going to do right over here let us go down and we can say that the key has to be the name of the item and the value is the new item which we just created now let us go to the next line what happens if this item is already existing inside our registry so we can say else we simply want to print out we can see item dot name already in card you want to update instead let me take out one more extra comma we don't require this one now let me try and explain what's happening right over here let us go back to this document now let's see how the logic goes so suppose this is my iPad and shell let me create my cache register for now it can be an empty dictionary so this is all good now let us go to this line our cash register has one key which is called as item and the value is of a type of dictionary itself so let us do that over here so we can say for my register I want to create one key which is called as items sorry it has to be items and this is an empty dictionary let us try to print it out so this is how our register is looking right now we can also use the if and in syntax when working with our dictionaries suppose we want to check if our dictionary has one key which is called as items or not so we can say items in register and that is true let us check for customer in the resistor so that's false because we don't have a key called as customer inside the resistor we can use the same syntax when referring to items as well remember items is also a type of dictionary let us assign some values to these items and then we can check for the if and in conditions let me copy all of this I just want this one and we can say for my directory of register I want you to go to my directory of items now what we can do is since this is a directory we can also create new keys and new values over here so here I can say I want to create a new key for my Apple and the value is this one we just copied right over here so let me just paste it over here so this is the value and that's it let me just clear all of this let us try to see how the resistor is looking right now so this is how it is looking inside the register we have a key called as items and inside the items we have apple as of now let us copy and paste one more product this one so let me copy this and we can use the same syntax so I want to say register is a directory I want you to go and find the key of items here let us create another key by the name of eggs and let us assign a value of this thing to it and that's it let me clear it and let us see how our register is looking now so here we have it first we have an apple which is right over here and then we have an egg now let us check if an particular product is inside our items or not so we can say apple in my register I want to access my dictionary of items and in this dictionary so from year to year we want to see if we have any Keys called as Apple we do have so the answer of this one should be true and that's it we have the answer of true let us try to search if we have milk inside our items or not so let me just go and change this from Apple will false we don't have milk inside our items now if I just flip the statement so if I say milk not in now let's see what we get as a response so the response is true milk is not in miter is free now since my milk is not there inside my register only then I would like to add it if it is existing then I would simply like to update it now let us go back to our code and try to relate what's happening so let us have a look at this line at line number 24. I am just trying to check if an item is existing in our items or not on line number 26 so items is our dictionary the key is going to be the name of the item so that's what I've taken right over here and we are assigning this item to the key that we just created and we have a beautiful structure in place but this function is not at complete the moment we add one item we also need to upgrade our total otherwise our logic would be wrong so let's see how to do that in order to show the totally inverse value we would also require one more additional instance variable so let us create one private this time so we can say this is a private member and I can say self plot invoice total initially let us set it to zero I want the type to be a float instead of an integer now what happens right over here whenever we are adding an item we also need to increase the invoice total that's pretty simple so we can simply say self Dot underscore invoice total plus equal to and we can say my new item dot get subtotal remember when we created this invoice item we implemented this method to calculate the subtotal and why do we need this method because we have to adjust for the quantity and discount and that's what we are using right over here so this method gives us the subtotal for the new item which we simply want to add to our invoice total but the issue is this method is not reliable what happens if you have a typo instead of plus we have minus or we need to do some other validation logic before we can increase the total the answer is let us create one function that will increase the subtotal so let's create one method right over here so we can say increase the invoice total the first argument would be obviously the self now let's see what argument should we take if you go down we can get the subtotal if we have the access to our new item the type of this new item is an invoice item so that's what we need to get right over here so this function accepts an item which is or the type of invoice item and this returns nothing let us add a documentation saying that this increments the total inverse value each time an item is added let us go down and let us take this line this is what we are exactly doing right over here let me paste it and let us change the name of the variable because the variable we are calling it as just the item over here so this is the item let us go below and use this newly created function here we can say I want to sell Dot I want to increment my invoice total and I simply need to pass the new item inside of this so new item the last modification that I want to do over here is I want to keep this method as private I don't want any other developer to accidentally change my logic let us go down and let me update this syntax as well now we have a beautifully typed and a much more stable code and while we are here let us create one more method to decrease or decrement the invoice total whenever we are deleting an item from the register we would also need one method to decrease the subtotal so let's do it right now let me copy and paste all of this the name changes from increment to decrement this also changes to decrement and this becomes removed and this becomes minus equal to and that's it let us create the next method to update our card the logic is somewhat similar to this one so let me copy and paste all of this this has to be update let me change the documentation so this becomes too update an existing item and this one becomes not in the card and do you want to purchase instead now let's see the logic for this one we can update an item only if it is existing so let's do that right over here so let us change from not in to just in so if we have that item only then let us try and update it but before we can update that item we need to get the old atom back and we also need to decrease from the invoice total so here we can say that my old item is equal to my self dot items and I want to retrieve a specific item and this item would be my item dot name so let us go back to our IPython and let's see what's happening over here we are just trying to retrieve a data so this is our existing register and suppose we want to get all of the details for X suppose we want to update the discount or the quantity and so on before we can update we need to retrieve it first so I can say my egg details first I want to go to my register now since this is a dictionary I want to access my key and the name of my key is items and inside items I want to access another key this time the name of the key is X we can see right here we have a key called as X so this will retrieve the value for this one let us see what's happening oh there is a syntax error so this has to be a square bracket let us try to print the egg details now and we have the details in place and that's what we are doing right here we are simply trying to retrieve an item from its key now remember the keys are always string values so if you go right over here we can see item is a dictionary and the key is a string this string is the name of the item so that's what we want after we have the old item we also need to decrement its value so we can say self I want to decrement the value and I simply need to pass an item so let us pass just the old item on the next line we are going to create a new item with updated quantity and discount and we are going to add that item back to our register so all of this logic Remains the Same let us go to the next part and let us see how we can delete an item but first let me go back to my iPad and shell and let me show you how to delete an item from a dictionary let me clear all of this and let us print our register one more time so you can see resistor has a key of items and inside these items we have two another items one is for apple and one is for our eggs suppose we want to delete Apple let's see how to do that the way to do that is by using a keyword called as delete and after this we simply need to specify which key we want to delete so I want to say I want you to go to my register from register I want you to access my items and once inside my items I want you to delete my key of Apple and that's it now we should try to print a resistor and you can see we have deleted Apple let's use this syntax right over here to delete an item from our register right over here let me copy and paste all of this let me take a little up the name is remove we don't need the quantity and the discount we just need to know the item that we are supposed to delete let me update the documentation so this is going to be removed item from our cache resistor we don't require this as well now let's see the logic we can delete an item only if it is existing and that's what we are checking over here so we need this logic in place since we are not creating any item we can delete all of these things here we are retrieving an item the next line we are decrementing the invoice total now we simply have to delete it from our dictionary and we have already seen the syntax so we can say I want to delete from my items and the key would be my item dot name and let us see what else is remaining it will go back to my document and we have to implement this methods get invoice total and display which are pretty simple let's create the first one we can say get invoice total this takes a self and this returns a float let me add some documentation and here we simply have to return cell dot underscore invoice total the last one is to display our invoice so let us create some pretty looking output so I can say display my invoice takes the self and it returns nothing let us try to visualize how our invoice would look like now this is the code from my GitHub repository I am inside my projects and project number one if I run this file I have a output and this is how our invoice would look like so on the first line we would like to have a nice separator followed by the customer details and followed by the date of the purchase so let us go back and let us do all of these things here we can create a nice separator line by using a print statement and I would just like to say that this is my separator multiplied by 70 times so what this is going to do it is going to repeat this symbol for 70 times before this let us insert a blank line so we have a nice spacing in place next let us see what we want we want the customer details and the date so we can just go back and here on the next line I can simply say I want to print self and if you see our Str method that's what we are doing right over here so this is our string method customer and followed by the total items and that's what we want right over here the next line is for the date so let us go down and on the next line we can say I want to print my date and we already have it so I can say self dot purchase read now remember in some of the earlier videos we formatted this date and time according to the month day and the year that's what we are going to do right now as well so I can use the method called as string format time and let us give us a format so this format stands for the month the day and the year let's see what we need next we require one separator and after the separator we require all of the items so let's get back and let me copy this line from here let me change the separator from plus to our Dash and in the next line we want to print all of the items that's pretty easy so I can just say for my item in my self dot items dot values let us print out the item and this has to be brackets because we want to get the values out of our dictionary next let us see what we want so we require one more separator total price and one last separator so let's do that let me copy and paste this right over here on the next line we can see that my total price would be in dollars serve Dot get invoice total and let us display only two to seven points so I can say colon and I want two decimal points for my float and that's it let us go back and check oh no we require one more separator so let me copy this and paste it right over here now we have a way to display our invoice as well we are using multiple print statements but if you want you can use a template or you can also use a multiline string as well but this is much more simple for now now let's get back to our document so we have everything in place let us check what's remaining so code we have cache register in place now we just need to find out a way to interact with our cache register so that means we just need to create a client that can interact with our resistor so let me create a new file let me name it as the Vista Dot py so this would be our clad file and here obviously first we need to import our cache register so let me collapse my sidebar and I can save from the model of cache register I simply want to import my cache register and then we also need a customer so I can say from my model of customer I need customer the last thing I want is the item so I can save from item let's import item let's create the first item so let us create milk so we can say milk is an item let's give it an idea of 100 name would be just milk price could be 4.5 dollars and the measurement unit can be a liter let us create our customer as well so I can save my customer one is my customer the first name is Lewis the last name is Zappa now this customer is going to the store and making an purchase so let us create a cash register for Lewis so we can say this is my cash register number one we simply have to give the customer and that is our customer number one let us try to print out our cash register right now so I can say print my cash register one let me save it and let me try to run this file so right now the customer is Louis Zappa and the total number of items is 0 and that's true because we have not yet added any items so let's get back and let's make Lewis purchase something so here we can see that my cash register one I simply want to add an item and the item I want to add is my milk now you can give some additional arguments as well the quantity and the discount right now let us go with the default values and let us try and save and run this file now we can see we have one item on our invoice let us go back let us create some more items let us create one as egg so I can say item the ID could be 101 the name is egg the price could be 99 Cents for one egg the measurement unit is for a piece then we can make one for Rice we can say item id could be one or two name is arise price could be four dollars for a kg let's create one last one maybe for an apple we can say item ID could be 103 the name is Apple maybe it is for 5.67 dollars for a kg now let us make Lewis purchase some other items as well suppose Lewis also wants to purchase eggs so we can say cr1 dot add items so Lewis wants to buy some eggs suppose this time he is purchasing 12x and for quantity of 12x there is a discount of 50 cents that's it let us save the file and let us try to run this so this time you can see we have two items in our invoice a little better way to display the invoice could be by using our inbuilt function so let me take it out and let me say cr1 dot I want to display my invoice now let us try to run this file so this time we have a much better output so we can see the customer is Louis Zappa there are two items this is the date of his purchase and these are the items remember for the egg we specified the quantity was 12 and there was a discount of 50 cents that's what we have over here here you can see we have only one item so the subtotal is 450 for this one we have 12 items minus the discount and so the subtotal is right over here and right over here we have the total price as well let's try to play a little bit more with this one let's try to upgrade one item so suppose Lewis thinks that 12x are like a lot and he wants to buy only 10x so we can say I want to update my eggs and this time the quantity is 10 but fortunately the store is in a good mood and the store is offering a discount of say one dollar so let us save it and give it a try so you see we have an updated quantity of 10 discount of one dollar and we also have an updated subtotal as well and automatically the total price also gets updated let us go back and let us try to add one more item suppose this time Lewis wants to buy some rice maybe he wants to buy three kgs of rice and there is a 75 cent discount on this one so let me save this and let us run the file so this time we have three items and we also have rice in our items as well let us go back now let us see if we try to add an item which is already existing then what happens so let me copy and paste this one save and let us try to run the file so here you can see we get the prompt say that rice is already in card do you want to update instead so you can see all of our code is working beautifully and if you see right over here nothing is changed everything is just as before let us go back now what happens if we try to update an item which does not exist so suppose we say that we are trying to update an item maybe we are trying to update for apple and the quantity could be 10 the discount could be zero so let me save it and let me try to run this one so again we get a nice message saying that Apple not in card purchase instead and if you see the invoice it's just as before there are no changes to our items so let us go back so right over here we can say that we want to remove eggs and let us try to display our invoice after repoing as well so let me copy this and let me paste right over here let me run this file so here you can see this is the earlier invoice in this invoice we have eggs and and this is the next one when we remove we don't have eggs in our invoice so you can see we can also remove an item from our invoice I also wanted to show one more trick right over here we can also create an alias for customers Suppose there is a big application and there are two files and inside both of the two files we have a class of customer then we can create an alias so we can just say that I want to import customer as my customer and we simply have to update one line over here so this instead of a customer this will be called as my customer just save your file and if you try to run it everything works smoothly let us go back and let us create one more customer just for the last time so we can say my customer 2 is my customer and first name is Chico her surname is Neutron let us create a cache register for this one as well so this is going to be my cash register for my customer number two suppose she is purchasing some milk and the quantity could be four liters here I can also use my keyword syntax so I can say my quantity would be 4 4 and suppose we have a discount of 10 dollars let us try to add one more item so this time she wants to buy some eggs and the quantity is 25 next she decides to update the quantity of x so next time the quantity is 48 now fortunately the store is offering a discount of 12 on the quantity of 48. Chico also wants to buy some apples so let us buy some apples as well and let us display the invoice that's it let me save the file and let me try to run this file so here we have the invoice for Chico so Chico has three items milk egg and apples for the milk the quantity was four liters the updated quantity for X was 48 and for apples it was 8 and this is the total price now we have a beautiful program in place let us go back I wanted to mention one point over here if you see the code inside my GitHub so this is the code downloaded from GitHub my GitHub file has a couple of more methods for example if you go to cash register I have a couple of extra methods so all of this is extra and I had to create this methods because I wanted to see the output in a dictionary format so if you go to this document I wanted to have the output in this format so that is why I had to do a couple of more work and that's the reason why you can see all of these methods but I am not going to explain all of these methods inside this tutorial if you want you can give it an attempt and try and study what's happening but to just give you a short idea I am converting everything to a form of a dictionary and finally I am exporting that dictionary to a Json format that's why I can have a nicely formatted output now if I go to this file register so this is on my GitHub code so here I am using this method to Json to have a nicely formatted output now if you run this file I can get the output in the way I desired I hope you learned something new in this video now this video had a lot of Concepts and it was very densely packed so if you don't understand any concept you are not to be blamed it's quite natural that it will take you some time to understand maybe you have to go through this video a couple of times you would also need to have some better understanding of how to work with your dictionaries before you can understand what's exactly happening in this code so this project is going to test all of your basic understanding of python up till now now the next game would be much more easy to implement and I'll see you in the next video I am so happy to see you in the last part of this entire tutorial the last part is all about our game saving zotan and in this final project we would be actually implementing how to think in layers first we will write all of the code and then I will try and explain why we did what we did so for starters I have created a folder called as project 2 savings Orton as you can see it's all empty so let me go and let me copy my file it's right inside my section number six let me copy this and let me paste inside my project number two let me open up the project in a new window so I can say I want to open my project number two and that's it we have a nice and clean slate to work with and this is our existing code now let's begin till now we have seen how to organize our code in different modules but for this game we are going to create a package of game and that package will contain all of the logic and everything that goes for creating a nice game so here I am going to create a package called as game and as you know making a package is very simple it's just like creating a directory so let me create a directory let me call it as game and let us create our init file so that python knows that this is a package now let me drag and drop this file inside my package yes I am want to move now let's begin with our code so let us get started let me open up this file and let's see the first one we have for the character type so what we want to do is we want to make our game as modular as possible so what we are going to do is we are going to take out everything and everything goes inside its own module so inside my package of game let me create a module by the name of character type dot Pi I simply have to copy and paste everything so right from here I need the Imports let me take all of this let me cut it out go to my character type and paste it let us see what's next the next one is our character so let's create one more module inside our package of game and let us call it as character dot Pi again I simply have to cut all of this so let me take everything from here let me cut it out and go and paste right over here let us go back the next is for the superhero so again let us create a new file superhero dot pi and let me take everything from here let us cut it out go to our superhero file let me paste this and we can see we have a couple of errors and that's because we need to import character and character type so let me go to the top now here since we are working inside a package we need to say that from the current package the module of character I want to import the class of character the same thing for character type as well so from the current package I want you to go to a model called as character type I want you to import my character type now if you save all of the errors will go away let us go back the next one is for villain so again go back right over here let us create a new file called as villain dot pi and let us take all of these things let us cut it out and paste it right over here also let us do our Imports so from director import character from character type import my character type let us go back so the next one is for the life let us create a new file called as live dot pi and let me take all of these things till till the last till yeah let me cut it out and paste it right over here let me save it let's go back to this file and if you see this file is pretty much empty now so let me delete all of the blank lines from here I don't require all of these things let me take out the documentation as well because we already know what it's all about don't require this as well so let me go on the top so we have a much smaller file this time and let's see how we can improve even further but before we can go a little further I wanted to add a couple of more classes the first class that I wanted to add is for a player it would be so nice to have a player so let's create a very simple class for player so let me say my player dot Pi this is going to be my class of player I can Define my init the first is obviously the self next could be for the first name this is string next for the last name this is also a string and this returns nothing I can say self DOT first name is equal to my first name and self dot last name is equal to my last name let us create the wrapper method so I can say retr and sell this returns a string and it can return saying that this is a class of player let us create the string method as well so our self this returns a string so let me just return the first name and the last name so I can say self dot my first name and self dot my last name that's it and this time we are going to have one more class and that class is for the game State just imagine when we are just starting the game we can have a different state maybe initializing when we are playing the state changes from initializing to in progress and at the last the state can change to either win or lose so we can keep a track of the state by creating a new class so let us create a new module right over here so this is going to be called as my gamestate dot Pi for this I am going to use the enum so I can say from my enum I want to import enum and auto then I can say my class of game state which inherits from enum let me add some documentation first one we can call as initializing so set it to Auto next one for in progress again set it to Auto the last two would be for the win and the Lost let's take a moment to review what we have done up till now we have created a module for each of the objects inside the game but if we have a look at all our modules they are basically structures for something for example character this is a structure for something character type again a structure for the types of characters game State the types of game state that we can have for player again we just have a structure the same thing for superheroes so this is just a structure for superheroes and so on so technically we can call all of these structures as schemas so schema simply represents a structure and that's it so let's create another package inside the game of package called as schemas and let us put all of this functionality inside that package so inside my game let us create one more folder by the name of schema and to make this folder a package let me create file inside of this it has to be again init underscore underscore dot Pi so let me collapse all of these things on the top level we don't have anything we just have a package of game inside the package of game we have another package called as schema now let us move all of the schemas into the right package so my character type my character game State live player superhero and villain all of these things will go inside my package of schema yes I want to move everything so let me collapse my schema right over here so inside my package of game we have three things first one is an another package of schema then our init file and last one is our game file now let us go back to our game file let's see what's next here we can see that we are retrieving all of the superheroes or we are retrieving a single superhero normally in an application you would have a database where you will store all of the superheroes and all of the super villains and that database could be controlled by something which is called as a models so just to get a field of models let us create one more package inside game so inside game let me create a folder called as models and inside this folder let us create a init file to make it unpackage let us go back to my games file now what happens in an application whenever you want to interact with a database so you can imagine all of these things to be a part of the database because this is the place where we are storing all of our data so normally a model would do all of these things for us so let's go into models and let us create one model for our superheroes so this becomes my superheroes dot pi and let us create one more model for our villains so this would be my file for villains dot pi and let us start writing up a code inside of this so first let me go to my superheroes so let us declare a class called as super hero model and let us create the init method now this init method does not take any argument because we don't need anything and this returns nothing now for the instance variable we can simply return all of the superheroes or a single superhero so let's see how we can do that we can declare an instance variable called as self.all and we can return all of the superheroes but let's see how to do that for now let me assign it a blank list let me go back to my file of my game here I just want to cut out all of this functionality for get all superheroes and get superhero let me cut it out go back to my models file and let me paste everything right here now since this belongs to the class I want to take it inside so let me take it inside the class and since now these are members of the class the first argument has to be self and here as well the first argument has to be self now let's see what to do next now this method called as get all superheroes it returns a list of superheroes so this means that this is the schema of the superhero so let's import it let me go to the top now what happens is we are inside the package of models and the schema of superheroes resides in some other package called as schema which is right over here so here we can say from my package of game I want to go to the package of schema and from here I want to go to the model of superhero and once over there I simply want to import my superhero now you can see all of the errors are gone let me save this the next thing is this is complaining because we have not given the tides for this one so self dot all is going to be a list of all my superheroes right now it is blank but we can easily get it from this method so I can say this is just myself dot get all superheroes and that's it so what this method is doing is it already has the data for all of the superheroes on this line it is creating a list and on this line it is returning that list so we have access to all of the superheroes now what happens here is since we have an instance variable called as self.all we don't have to expose this method to everyone and so we can make this method as a private method and you know the way to make it private is by putting an underscore so this syntax has to be updated right over here so this also becomes my underscore now let us go to this one so this has to be my self dot underscore get all superheroes and in fact we don't require this line at all because this time we already have a class and we already have access to all of the superheroes inside our instance variable called as self dot all so what we can do is we can take out this line and here we can simply check for the length of self dot all and this also gets updated to self dot all and everything is looking beautiful let us also create the string method right over here so we can say Define my Str ICT self and it returns a string as well now let's see what we would like to display now since this model represents our data we can simply print out a list of our superheroes so let's do that over here so what we can do is we can simply print out the names of our superheroes inside a list let's see how to do that first let us create a list for all of the names so this can be a list of string and let me assign it to a empty value then let us just populate this list with all of the names of the superhero so I can say for my superhero in my self dot all I simply want to append to my list of names so I can say name dot append and each time I want to append the name of my superhero so I can say my super hero and his name and let's see we have an error missing written statement oh yes we are not returning the list so we can say return my list of name now we have one more error and this error is because the return type is a string but we are returning a list so let's do one thing let's use our formatted string so I can use my formatted string and let me put this inside my curly brackets now everything is looking good let us repeat the same thing for our villains as well so let me copy all of these things from this file go inside my models then to my villains and let me paste over here so this becomes my villain this becomes my villain this also becomes my villain Everything Changes this also becomes my villain again here we have a villain let's change this one as well and this also needs to change so this will be villains we don't have this method as of now but let us go to the games file and let us copy everything right from here so let us cut all of these things and go inside our villains model let me paste everything over here and let me take everything inside my class now since this belongs to a class let us add self then this becomes a private method then we need to add self over here this line needs to go this line becomes my self dot all same thing over here this also becomes my self.all and this is just for our super villains everything is looking really good so till now what we have done is we have segregated our code as per it functionality wherever we had only the structure all of those files wet inside my schemas and where I have to interact with my database or my data those files went inside my models now let us go back to our games file so this is my game file right over here let us start deleting all of these things which are not required so let me take it up if you see we would have a bunch of Errors now let's try to work on this file now this file is all about the game and the actual logic so this is the place where we are actually implementing the game so the first thing that I want to do is I want to rename this file now since this file is all about implementation I like to call this file as just impl so which stands for implementation you are free to name this file whatever you want you can call this file as your logic your brain or anything that you want but for me implementation makes much more sense now let's see what we can do inside this file first let me close this folder and this one as well and let me only open this file so this is where we are working right now our implementation is all about a game so the first thing that we require right via is we require a class of game this class will keep a track of everything it will keep a track of which player is playing the game what is the game state is the game in progress or someone has won or someone has lost what is the state who are the superheroes and who are the super villains and this class is also going to control all of the methods that we have defined over here so it's going to control our attack and our win or lose as well so let's create a class so this class is like the implementation of the entire game let us create a class called as game let us Define the init method it takes a self now this init method only requires a player we will just take one player and we will initialize a blank game in return so let's accept one player the type is a player now remember inside our schemas we already have a player which is right over here so let's go and import the player from our schema and we need to do one more change so this is not a single schema this is key Mars so let us add an s yes we want to make some changes now since we have changed the name of the package let us go to our models so by default Visual Studio code is going to do this for you but if it is not happening inside your IDE then make sure this is schemas and for villains this also needs to be schemas so let me go back to my implementation of file so here on the top I can say that from my current package so remember right now we are directly inside our package of game so let me collapse my models and schemas so you can see our file of implementation is at the same levels as our models and schemas and game itself is a package so we can see from the current package I want you to go to the package of schemas then go to the model of player and import our player let us go to this line right over here so our init method returns nothing now let's see what kind of instance variables do we require first let me write all of the instance variables and after that we can populate them the first one would be for the player and we already have the data that's right over here cell dot player next I want to keep a track of the game state so I can say self dot state would be my game State we will import that shortly let us create the next variable first we also need to keep a track of all of the superheroes and all of the super villains so let us create an instance variable for all of the superheroes let me get my Spring right this has to be my superheroes and we need one more variable for our villains now let's see how we can populate all of these things for the state we already have a game State defined inside our schemas so we can say from the current package go to schemas go to my game State and import my game State now let's see the first time we don't have any data so we can assign the state to initializing so we can just say my state would be game state DOT initializing now let's see for the next one we can get all of the superheroes from our models so let's go and import our models as well so I can say from my current package go to my models go to my superheroes and import my superhero model let's do the same thing for our villains as well so dot models dot villains import the villain model and here we simply want to initialize it so this becomes my superhero model this becomes my villain model now just remember when we created the model so if you go over here and if you see the superheroes you can see the Constructor does not accept any argument so that's what we are doing over here we are not giving any arguments because it is not required and with this we can easily have access to all of the superheroes and all of the super villains as well let us create the wrapper and the stream methods for this as well so we can say my wrapper method takes a self this returns a string and let it return that this is a class of game next let us create and string method as well this returns a string now let's see what we would like to return maybe we would like to return all of this details on separate lines so let's see how to do that so I can say I want to return a formatted string let me collapse my sidebar for a while now and let me take it up so the first thing that we want to display is obviously in the player and you can say self dot player now we want to display lay the state on a next line we can use a small trick over here we can say backslash and N so this is going to create a new line for us automatically and on the next line I would like to display my state so I can say the state would be my self Dot let me put a comma here as well so on the next line I would like to display my superheroes oh I need a code right over here so I can say my superheroes would be my self dot superheroes let me get my spelling right let me put my comma and we require one more line now since this is getting a little long let me split this so let me put a brackets and let me take it down and let me add one more formatted string right over here and this would be for our villains so we can just say that self dot above valence let us go below and let us take all of these things inside our class of games let me copy all of these things the method of attack the method of similar attack and we also need this method of win or lose till this point I want everything inside my class let me take it inside let me save the file and now we don't need all of these things because right now we are just creating a package and we will see how to use this package in the future so let me take it out and you can see we have a bunch of Errors so let's try and work with our file so let's work with this one so this is the place where the attack is taking place so I can just say in this block is for the attack now since this belongs to the class of game we can write self same thing will happen with our simulate attack as well so I can just write self right over here so let me save this again this one this also has to take myself looks good now let us go back now let's see how the attack is going to take place now let's fine tune our attack Logic Let me put some documentation so whenever we start an attack we can change our state from initializing to in progress inside this we can say self dot state so when we start an attack it changes to my game State DOT in progress then let's print out a nice line saying that start in attack and if you want to check the state we can simply print out the state as well so you can just say my self dot state so let us go down now let us have a look at this line at this line we are trying to get a single superhero but now we have this method inside our model so let me open up the file inside models if you go to our superhero now we have created a class called as superhero model and inside this class we have a method called as get super hero so let us try to reference this method right inside our implementation file so what we can write here is we can simply say that we want to go to the self dot our superheroes so remember this superhero is actually the superhero model let me show you one more time so you can see this superheroes is actually the superhero models so we can access this method right over here get superhero and that's the way we can get our superhero let's do the same thing for the villain so I can say my self dot villains dot get villain let me collapse my sidebar now let's go to this line land number 43. so since this method belongs to the class it has to be self dot now what this method is doing it is actually doing the attack so we can have a little better naming convention so we can just change the name from simulate to do the attack let me change right over here also and we can do one more thing we can mark this method as private because this is all about our internal logic no one has to know how we are doing the attack it's up to us how do we implement the logic this also needs to be my double underscore you can write a single underscore it's up to you so this simply means that this method is just private to this class now we have a bunch of other errors for superhero villain and life as well so let's import all of this and all of the errors will go away let us go to the top and here we can say from my schemas from my superhero let us import my superhero schema the same thing we can do for the villain as well so from dot schemas dot our villain let us import the villain schema and we can do the same thing from dot schemas dot my life let me import my life and let's see what's happening next so you can see lot of the errors have gone now this is a pretty easy error to fix we just have to import final and that's it but let's not do it right over here let us create a new file called as constants now let me explain why do we require a new file called less constants there may be times where we can have multiple constraints for our game for example let us go right over here in this method of attack you can see that we have hardwired the value right over here three so we have three over here because we have four superheroes and we have two over here because we have three super villains so we can think that all of these are simply constraints for our game but we can make our game much more modular what happens if you want to attack four times five times or what happens if we have multiple superheroes or multiple super villains we need to have a very easy method of doing all of these things so for this convenience let us create a new file inside our game inside my package of game I want to create a new file called as constants let me add some documentation you can imagine this file to be just a helper module and that's what this is doing the first one was for the number of attacks so we can just say the number of attacks and we can assign a value of 3 over here now let us go back to our implementation file and instead of hard wiring 3 over here let us import that and let us use that constant over there so we can say from current package go to the model of constants and import my number of attacks so let us go down and let us use that right over here now we can increase and decrease the number of attacks as desired let's go little down over here let us do the same thing for this one let us take it out so these values are never going to change they are going to be constants no matter what so let me cut it out let me go to my constants let me paste over here let me fix the indent now if you already know that we don't require a final keyword because when we name all of this in uppercase by default my Pi or our IDE is going to treat them as constants so we can take this one out and this one as well and in fact we don't require string as well because our IDE would be able to infer all of those things let us go back to our implementation and let us imported so let me go to the top so from constants I also need to get my winning message and also my loss message let us go down now since we already have access to winning and the losing message we don't have to do anything let me take out this line This is not required now let's see what's happening right over here here we also need to update the state of the game suppose we are winning then we can say self dot the state would be my game state DOT win and in case we have lost then we can say game state DOT lost so now we can keep a track of the state of the game at any given point of time there is one last thing to do in this file and that is right over here so here if you see we are using 3 and 2 because we have four superheroes and we have three super villains but what happens if we decide to add a couple of more superheroes or a couple of more super villains so let's try to make this code a little bit more modular as possible so what we want to do right over here is we can simply say I want to have the length of my self dot superheroes dot all minus of one now remember your index is always one less than the length and that's what we are doing right over here let us do the same thing here as well so I can say the length of my self dot my villains dot all and I want to minus of one the last thing to do inside this package is to create a file and let us create a file let us name it as game dot py now this file will have a single line of code so first let me write it and then let me explain what I'm trying to do so I can say from the current package I want you to go into my implementation and I want you to import my game as well as my player and that's it so what we have done is we have created an API which means your application programming interface so whenever some other developers have to interact with their code or if they want to play your game they simply needs access to just this one file game.py they don't have to import any of these things models schemas constants implementation nothing of those things are required all of those things are our internal implementation the clients don't need to know all of the logic they simply have to consume our logic that means this simply have to consume our API so now we are getting logic we have been creating our application in different layers so this was a layer just for our schemas models was just a layer for our database or rather data in our case and this game this file acts as our API now let us create a client file and let us play our game so outside the game let us create our client so let me call it as main dot file so by convention main is always going to be the most important file or the place where our program starts and as a convention we require a function which is called as main so this is the place where python will start all of our execution so this file can also be thought as your client let me put up a documentation so this file or rather this model is just as a client it is going to consume our API game and that's it let us import our API so we can say from my package of game I want you to go to the model of game and from here I simply want you to import my class of game and player now this looks a little odd game dot game but what we can do we can improve our design with a small trick so let us go back to our package of game and let us go back to the model of game let me copy this single line and let me put it inside the init file so this init file is for the game so I can just put my edit file right over here now I don't require this module let me take it out yes move to trash let me add some documentation over here so since we have this inside our init file we can simply write from game import game and player it becomes so simple now let us go back to our API file which is this one now the beauty of creating apis is with time your game is going to evolve and sometimes you may have some breaking changes so this was our first version maybe you can have a version 2 or maybe you can have a version 3 but at that time the client does not need to update his code we can refactor all of the code inside but the skip is API file the same so you see we have a lot of advantages of breaking our application into multiple layers now let's get going to the last part and let us create the main method where we can actually play our game unfortunately this is the most easiest part let me collapse my sidebar so this is returning nothing so I can say none let me put some documentation this is the place where our game begins Let Us create the first player so we can say my first player is my player and Lewis the last name is Zappa now let's create a game for Lewis so we can see we want a game for our player number one here let us just check the state of the game and since we are just starting the game our state would be initializing so let us just check if that's the case or not I want to see the state of my game one so game one dot State and the last thing to do is we need to invoke our main method so let me save the file and let me try running it beautiful so as you can see we have the state of initializing and that's what we expected right now let's start with the attack so here we can say I just want to have my game one dot attack but before that let us try to print the game itself so let me say print I want to print my game one let me comment this for a moment run the file and this is how your game looks like the player is Louis Zappa state is initializing this is the list of all our superheroes and these are all our super villains beautiful isn't it let us go back and let us have the attack first so we can say I want to have my attack and after the attack I want to see if I have winning or if I am losing let me save it and let me try to run the file amazing so we have a very beautiful output unfortunately we lost and Thanos killed our Avengers but it is such a beautiful experience let us go back and I want to make one last Small Change what we can do is we we can create something which is called as method chaining that means what if we have a syntax like this game one dot attack and here we can just say dot win or lose so this will look so neat and nice let's see how we can do that and it's very easy to do it let me open up my sidebar now remember all of the implementation happens in a single file so it becomes very easy to find out where do we need to make our changes and all of the changes happens in this file for implementation now since we want to have method chaining we simply have to return the game so that means on our method of attack we simply want to return the game itself so I can say this method is going to return my game let me collapse my sidebar and I also need to return so at the bottom right over here let me go on the next line I simply have to say that I want to return self now in order for this syntax to work we need to import one more thing so let me go to the top the first thing that we want to do is from future I want to import my annotations now we can use this syntax let us do the same thing for our method of win or lose so this returns a game and at the bottom let me just say let me return self beautiful let me close this file and let me go to my main file we can assign the game back to our variable so I can say game one is equal to my game one now let us print the state one more time right over here so what's happening is we are starting with an attack and then we are checking if you are winning or losing initially the state would be initializing and after the game it could either be win or it could either be lost let me take this little up so the first thing that we want to do is we want to print the game then the status then we play the actual game and let us have the state back again so let me save this and let me play this game so here it is so this is our game right here the player is Lewis state is initializing superheroes super villains beautiful then we are starting the attack after we start the attack the state changes to in progress this is how the attack is taking place but unfortunately Thanos has killed Avengers so our final status is game State lost so let us play one more time let us see if you are winning or not no lost no lost again lost lost oh this time we are winning it's so amazing so here you can see that when we won the game our state is game State win it's so damn amazing let us create one more player and let us play the game for the last time so let me go right over here and let me create one more player this player would be Chico Neutron and let us go down over here now just for the sake of nice print route let us print a blank line before the next game so here we can see my game number two would be my game and this time we can say my player is going to be my player number two and we can start playing the game here itself so we can say dot attack and after the attack I simply want to check if I am winning or if I'm losing this method chaining makes our game so easy to use so let me save the file and let me play the game for the last time oh I think both of us lost Kiko also lost the game and uh Lewis also lost the game let us play the game one more time no oh yes at least this time Lewis has won the game before we say we are done let us have a look at last time now there is no more coding left I just want to show this file and this file is called as thinking in layers so let me collapse my terminal my sidebar and let me put this in my preview mode so this is the last thing that I wanted to show you let us try to conceptualize what we have learned so far in this video by making this game so what we did was we divided our application into multiple layers now let's see what we exactly did you can imagine the first layer was our data layer and the packages were responsible for our data layer live inside the folder or rather the packages of models and schemas the visibility is private and the role is internal so what happens is whenever we want to interact with the database whenever we want to create a structure all of that code will go only in this packages the advantage is when we have multiple people working on the same project all of us can know where to find the data the next layer can be thought as our business logic layer and this layer is represented by our implementation and we have all of our implementation inside this file I ampl.pi again the visibility is private and the role is internal that means we as the developer of this game or of this Library only we can handle this file the next layer can be called as an API the package of game can be thought as our API remember we added a couple of files to our init method and our client can simply import all of those things from our package so essentially what is happening is our API is acting like an interface between our internal logic and our consumer so the visibility of our API becomes public and our main dot Pi file can be thought as a client because the client simply consumes our API and I hope this gives you a much better understanding of why we divided our code so much and why we created so many packages now that was such an amazing amazing effort and I would like you to congratulate yourself this was a pretty tough and a very intense course for beginner and you definitely deserve much needed appreciation you have done an amazing job wow that was one really awesome journey and I am so happy to see you at the end of this course now remember that the course is just ending but your journey is just starting and you have to do a lot before you can really understand python the first thing that you need to do is you need to solve a lot of problems and I also have a couple of topics that you can see if you want to progress in Python so and here they are so this is what you should be learning next have a look at how to handle files and folders iterators and generators form a very important part of python especially when you are working with classes and you want to create it labels so make sure you have a look at them then list comprehensions are also very useful the next point about data serialization and deserialization now this is very important when you are working with web applications where you have to convert your Json data or if you're working with some other data types such as if you want to convert your CSV file or Excel files to pandas data frame and so on the next is decorators we already had a small look about decorators but decorators is a pretty big topic the next is about your object oriented programming in which I would like you to have a look at abstract base classes and also oops in this tutorial we saw how we can inherit from a single class but in practice you can inherit from multiple classes you can also create classes that act as an interface so there is a lot more to learn about oops as well the next point is about multithreading and multiprocessing and the next one would be your concurrency and async IO now python has been a little notorious when it comes to concurrency but lately there have been a lot of development especially with the async iOS and tax so if you want to make concurrent applications in Python I would suggest you to learn a little bit more about concurrency the next one is testing now without testing none of your applications are going to be complete python ships with a testing framework which is called as unit testing and there are a couple of other testing Frameworks such as Pi test the next would be web Frameworks if you want to create web applications or if you want to create apis then I would suggest you to have a look at Django flask and fast API and last if you are interested you can always try learning machine learning and deep learning so this itself is a very huge Topic in Python and again I can't stress enough that you have to solve more problems and finally before I say goodbye I would really love to hear from you you can visit my website or you can tag me on Twitter or obviously you can check me out on YouTube as well see you and let the power of python be with you