learn how to create a sticky notes app using aite from Dennis Ivy aight is an open source selfhosted backend as a service platform that makes building backends quick and easy aight provided a grant to make this course possible hey what's up everybody I'm Dennis Ivy developer Advocate at aight and in this video I want to show you how to make one of the coolest notes applications that you've ever seen so before we get started I want to walk you through a demo of the final product I'll show you some of the features that we're about to build into this and then I want to show you some helpful resources that are really going to make following this video a lot easier so I've prepped written guides we have the final source code I just want to show you how all this works and then we'll just go ahead and jump right into it so let's get started okay so this is going to be the final product at the end of the video and I want to show you every single feature here so first of all we have a Sticky Notes application and I can move these notes anywhere I want and the cool thing is this is all saved in a real database if I refresh I don't have to explicitly save these notes it's automatically saved for me now at any point I can move these notes go ahead and change the colors to whatever I want we just use that color palette if I want to add a new note I can go ahead and generate one set that color and I get the note now something that's pretty cool and I was really excited to add this feature here is an autosave feature so as I add a note let's just say hello world you notice how we have this load spinner now when that spinner stops it's going to wait 2 seconds it's going to automatically save that note for me now this saves every two seconds but if I keep typing it doesn't start saving until the last key up event so that way we're able to keep typing we can work on it we don't have to worry about explicitly saving anything it just does it all for us now when it comes to note sizing this is all also automatic for us as we type we're constantly reading the input Fields here and we're just growing that note and shrinking it as the user adds or removes data something that's also really cool now if we want to Del a note we can always just hit that delete button and this is all being updated now when it comes to the text Tac we are going to be using react on the front end and for our backend we are using aight which is an open Source alternative to Firebase and this is where we have our database so if we go in here we can actually see our data we connect to all of this with the aight web SDK that's how we make requests to it so if you don't have an account on aight go to aight. make sure you have an account there's a very generous free tier so this is what we're going to be using throughout our project so there's two more things to talk about before we get started so first we have the source code make sure you download this this is linked up in the video description this is the final code for this project it's great to reference it anytime you get stuck go ahead and use this and see what that final code is supposed to look like now with that I also have a little bit of surprise here so I have a written guide that I myself I'm going to follow throughout this tutorial and this is literally every single step in this project here so if we go through these eight steps here we are going to go ahead and follow all of this so if I want to go ahead and see what we're doing in section 2.2 I can go ahead and click on it I have the written description of what I'm going to talk about all the source codes so if I ever want to copy anything at any point I can just go ahead and hit copy to clipboard and that code is mine so this is going to be very helpful you can always jump to any point here and use it as a reference this is also going to be linked up in the video description make sure to use it because I'm following every single step in this process using this guide all right so now it's time to get things started and we're going to kick things off by using the written guide for this tutorial and I want to show you how to use this and how to follow along to really make this process a lot easier so you know where to reference all the source code all the code examples and written instructions so let's start by opening this up and make sure you're in part one and I'm going to follow this along directly with you at least to kick things off so in this first part here you can see all the commands you need to run you see the written explanations here all the prompts you need to select here and in the Second Step the files we need to delete the files we need to clean up the components that we need to create so for example we're going to create a notes page if you want to actually just copy this code directly you can just go ahead and add that to clipboard and copy and paste that in I recommend you actually type this out but if you ever need it it's right here so then we go into our app. jsx file here or our component I show you how to import that where to add that so all the examples are directly in here so let's actually follow this so I'm going to open up my terminal here and I'm going to use vs code for my text editor so I'm going to use a terminal directly in here and we're going to follow the first step here by creating our react application with vit and you need to make sure you have no JS installed before you do that so make sure you have it and let's just go ahead and run npm create vit and this is going to go ahead and ask me a series of questions like my project name I'm going to call this my app and then I'm going to make sure we select react and I'm going to use JavaScript if you want to use typescript go ahead and do that for this tutorial this is the one we're going to select so this is going to create my boilerplate code that's all on my desktop I'm going to find that file open this up and then we're going to run some basic installs here so we'll close this out we'll open up my terminal run npm install now while that's downloading the default packages here let's go ahead and check the next step here so I need to delete my app.css file and then remove everything from index.css and then clean up my app.jsx file so we'll just do that once that's done so let's run our server just to make sure it looks good and I want to open this up here on Port 5173 and this is my app right here so let's go ahead and change this so inside of my source folder we're going to delete app.css we'll move that to trash then index.css I'm going to go ahead and copy all of that delete it so we want to completely clean slate because we're going to add our own code here and from here we can go into app.jsx and let's just go ahead and remove all of this besides the empty fragments here and I'm just going to write my app just so we can see some kind of output here so we'll remove this state we'll fix that indentation right there clean up some space and we should have just a very empty component and at this point I can just go ahead and see what I have here so inside of my application it should just look like this no styling just some text that says my app so inside of my source folder what I want to do is create a page for my notes page and even though this application is only going to have one page I still want to separate my code into different pages and components just to keep that code clean and separate so inside of source let's go ahead and create a folder called pages and then a page called notes page.js and what I'm going to do here is use a shortcut so react Arrow function component export so if I type in r f a i can hit enter and it's going to generate this component for me and this is a an extension that you can use in vs code so go ahead and add in es7 react Redux code Snippets I have one of these installed and essentially there's certain shortcuts that you can type makes it a lot easier just to generate these components without having to type them all out from scratch here so now that I have this component let's go into app.jsx let's import this so we'll just bring this in right here so import notes page page and we're going to bring this in right here and I want this to be a div actually and then the actual notes page component I can bring in right here so with that we should see notes page right there and let's go to the guide again so we have our component we cleaned up what we were supposed to if we go to step 1.2 in basic styling here is where we want to just go ahead and add in some CSS so I want to take care of some basic styling before we move on to specific app like styling so we want to set the background we want to set the default fonts text size and so on so what I'm going to do is go ahead and just copy this right here and let's bring that in so this is all going to be within index.css and in here we're just adding that basic styling and then in our app we have that dark background color and then we create some grid lines right here with that background image set the default height make sure we have a background size and our position is going to be relative because we want to make sure those notes that we drag around have an absolute position so we need to make sure the parent has a relative position now if I go to my app this is what it looks like right here so so far so good okay so going into step 1.3 what I'm going to do here before we actually set up a backend is I want to make sure we have some data that we can work with before we get to the more complex stuff so this is going to get a lot easier to actually reference before we actually start working with a real database so here's what we're going to have here we're going to have in array of different notes Here there going to be an object here and each note is going to have an ID some kind of body text right there some colors and a position now with these values if we actually look at these and I'm actually just going to copy this and then we're going to see what it actually looks like we're going to put this into assets and then call this file fake data.js and I'll actually go by piece by piece and explain it so let's create a new file called fake data and make sure it's ajs file and not a Json file and the reason for that is we're going to have some rich text here so for example our body we're going to have some data here where we may want to have some kind of line breaks if we want to add more maybe styling to that font we want to make sure that it's all stringified and we're not going to be able to stringify that if that's just Json data and the same for colors so inside of our colors we have this object right here and in our actual database that's going to be stored as a string so we need to stringify it and then when we render it out we're going to parse this data so again that's why it needs to be JavaScript data now the last part here is the position these are just going to be X and Y coordinates for this specific card so I have some filler data that I already added in here so that's that rich text we have some colors so this one will be purple this one's going to be blue and then the actual yellow color and we're going to reference these values to style the actual note here so back to our guide we set up our Json data so I explain how everything's going to look right here then for our card component we need to create a separate component so we're going to create this component and then we're going to reference the actual body and then render that out so let's go ahead and create this note card component so back to our code we're going to create a folder called components so we're going to also separate this components and this is going to be note card. jsx and let's use that shortcut so react Arrow function component exported and when we render out an actual note we're going to pass down the note itself now for the body because we want to parse this right away so we're going to create this variable called body and we're going to call Json parse and then we'll pass in note. body like that now for the actual data let's go ahead and just render out the body like that and that should be it for the note card now let's clear up a little bit of this let's go into our notes page and inside of our notes page in here I want to import my Note data so we're going to import fake data and that's going to be from assets and we have that in fake data.js like that and what I want to do here is create an alias because I want to reference these by note so import fake data as notes here and in fake data.js that's going to be this array of objects right here so we have Note One Note 2 and three and all those have a different position and then let's go ahead and just map through these we want to render these out so we'll go ahead and call notes map and we want to go through each note and as we render these out what I'm going to do here is import the note component so we'll import note card and then we want to render that out and close that off here and first of all we need a key so we're going to use the note ID for the key we want to make sure that that's unique and then we want to pass in the actual note object and that's going to be just the note itself so let's save that and let's go into our steps here so we rendered that out that looks correct here and before we add some styling let's just see what we have so we see each note it's a little bit difficult to see because they're all Blended in together and they all have the same text but we can see note one two and three so next I want to make sure these notes are actually styled here so if we go down in our instructions here we can see the CSS that we can actually use for this note so we'll go ahead and copy that to clipboard and then what we're going to do is go ahead and add in the card class to an actual note and we're going to use use the actual note background and body color to go ahead and style that in line so we're going to have a default style for every note and then the actual note itself will have its own colors for that and the positioning style so we'll go into our index.css file and let's go ahead and just bring that in right here we'll paste that in so we have a width for every note we set a radius set the cursor pointer for that specific note and then we just add in some kind of box Shadow just to make sure it looks a little bit more 3D and to to actually implement this we need to make sure that this class is added to the note body so we're going to add in card right here so that wraps the entire note and because of that inline styling I need to make sure to go ahead and parse the position of the actual note so that's going to be the X and Y values here later on that we're going to use so json. parse we need to parse that data and that's going to be note. position and then we're going to do the same for body so const body or Not body but colors and that's going to be json.parse and we'll call note docolors right here so we want to set the unique colors for every note and for the colors we're going to reference this now and that's going to be styled in line so we're going to use a note body color and we're going to set background color and that's going to be referencing colors do color body like that and that should style the note and when I save it you're going to notice that indenting fix so I have a prettier installed on nvs code here so that's how it just autof formats that for me so let's see if this is working so if we go to each note here we go so it looks a little bit off because the text is all white we're going to style that in a second but we at least can see the note width and then the actual text changing based on each note while taking on all the stylings for the note class so moving on to the next step now we're going into part one 1.5 so finalizing note card style so what we need to do here is we we want our note to be like a text field where we can actually make edits directly within the note card but we don't want it to look like a standard text field we want it to look like a note that you can actually write on so what I'm going to do is create a body around the note itself we're going to create a text area here and we're going to style that text area so you can't actually see that and that's also going to have its own colors here so let's go ahead and do that so we're going to create a body and then a text area so we're going to wrap this here and and this is going to be the class of note body and then the body itself I'm going to copy this and we're going to import this above or paste this above and this will be text area and we'll bring this as the default value actually of the text area so I'm going to bring this in and that's going to be an attribute here so default value and that's where the body is going to go so I need to make sure it's only one curly bracket around that and if we look at the note itself s it looks a little bit bad right now so we want to make sure to style that and we want to go ahead and add in this style right here so for the actual text area we're going to style the text so color text here so for this we're going to do style and the color of the actual text will be colors Das color text and that should give it its unique styling which I think most of these colors will be black so that looks good right there and we need to actually style the text area now so let's go into our guide here and we're going to copy the card body card body text area and then the actual focus of that that text area so let's copy that and then review everything line by line so inside of index.css we're pasting that so card body we add some padding we set a border radius on that body and then the text area itself we want to make sure to inherent the background color from the card itself then we want to make sure that we have no border because you don't want it to look like a text area the height and width we want to make sure that covers everything resize is going to be none we set the font right there and then the focus Styles so let's take a look let's see card body looks like I added that let's go ahead and just check the note card itself card body that's what it was supposed to be and there we go so we're going to fix this right here but that's looking a lot better it actually looks like a note so let's continue here in finalizing the card style so we want to add in a header now so we're going to create a div with the class name of card header and then the the actual style the color to that is going to be colors. color header so the header is going to be like a variation of that builtin color so let's go ahead and do that we'll create that just above our card body so we'll create the div and this is going to have the class of card header and then the inline style is going to be background color and that's going to be colors. color header like that okay and then we don't have any text in there and let's just take a look let's see so before we actually see that output we want to make sure to copy the card header CSS so in the next step we're also going to copy that we'll bring this into index.css and I'm going to put this above the card body so we have the card and I want to bring this in so the higher R key is a little bit more accurate we'll save that so we have a default background color I just realized I don't think I need that so I'll update the actual guide here to make sure we don't have that we displayed that as Flex because we're going to have multiple items in there we're going to have a trash icon and then later on when you're saving a note it's going to have that load spinner so we want to make sure that that's in line we set that styling with a padding and let's take a look so I should see the difference here I'm not sure why I don't see it so card header and then in the actual note card it's card header like that color header that's why it's not working so color header and there we go so we don't have anything in there just yet but that styling already gives us a header and then the actual body so moving down to the next step let's go into absolute positioning so we want to actually let's finish up the card header let's go ahead and make this trash icon so what I'm going to do here is I'm going to copy this entire component I recommend you do the same and we're going to go ahead and just re render out this SVG file here so let's copy all of that and that's going to be inside of a folder called icons and the instructions I said to do that inside of icons so let's create a new folder for that so that's going to be icons and that'll be trash. jsx we'll create that we'll paste all of that in and we just want to export default and want to make sure we actually export the trash icon and here again it's just an SVG that we wrap around that we can adjust the size if want by passing that down as a parameter here but all the colors and all of that is all already prepped here so inside of our note card we'll go ahead and import trash and inside of the card header let's create some space and that'll be trash like that and let's take a look so here we go we see the trash icon and then I believe from here we can go to the next steps here and that's where I show you how to import that so absolute positioning so right now every single card has an X and Y value we're going to go ahead and add in position absolute to the card class we'll do that inside of index.css and I'm just going to paste that under my cursor here so we're going to call that position absolute and what this is going to do is it's going to stack all the cards on top of each other because they have an absolute position but we haven't specified what that is so they're all just going to the top and left right here so we only see the last card that's actually on top but they're all right there so to actually place them what we need to do is go into our note card here and we're going to add that directly in the styling because we have these positions right here so remember inside of our fake data.js file we have a X and Y position right here so we're going to grab that and then set that here so in styling let's make sure that that's indented let's add a comma right there and then we're going to set left right now and the value of this we're going to need back tis for this because we need to set the actual position so we're going to do position position. X for left and then we're going to set the pixel value so once that's set we're going to do the same for top here so let's just copy this paste it and that's going to be the top position and that's going to be position y so now we should see the cards placed everywhere so that's perfect now the next thing I want to fix is this scroll right here so what I want to do is make sure that this scroll bar is never seen because by default the max scroll is set to the height of the actual content so let's go ahead and create a function that automatically updates the size of this when a card gets rendered and then as we type it also adjusts to that so in order to actually update this text area we need to create a reference so we can make updates to it so we're going to call or import use ref here and use ref allows us to reference Dom elements and actually update them without rendering the entire components we're able to reference the elements and that's how we can actually set the value for text area and we also need to import use effect and this is called on every single life cycle update so when we first render our component we want to call use effect and we want to call this Auto grow function that we're about to create to make sure that that card is actually updated so let's go ahead and import that we have use ref and use effect and we need to go ahead and create that text area ref so text area ref will be the name of it and use ref the way we call that is we just call use ref directly and the default value will be null and then we assign what this ref is actually going to be by passing this into that text area so we can pass in ref right here and now at any point we can reference this text area by calling something like text area. current because that's going to give us the current value it's a little bit weird but we have to call current in order to actually reference that so let's go ahead and create the function now so we're going to create a function called Auto grow and with autog grow we're going to take the actual reference here so we're going to create the function itself and I completely forgot to pass in that right there so text area ref because we need to pass this in directly into the function and from here let's look at our code here so in this section we first want to destructure text area ref so I want to make sure it's easier to actually get the value so we're going to call const and get the current value and this will be text area ref like that and from here we just want to set the height to Auto and then adjust the actual height in pixels so let's paste that in and as we call the function we're getting the current value of the text area so current is just that text area itself and we're first saying the style of the height is going to be Auto so auto adjust that and then set that in pixel value and we're taking the current scroll height to adjust that so that's all this function does now to actually call this because right now we have the function but we're not doing anything with it we want to call this on first load so we're going to use effect here and we're going to pass in an empty dependency array because we only want this to be called on the first iteration of this or the first render and we're going to call autog grow and let's pass in the text area ref so at this point the cards should grow like that but the only issue is as I add stuff to it now we see the scroll bar because we have a fixed height to that we have a set height but we're not adjusting it so once we exceed a certain value the Cards start growing so in order to fix that what I'm going to do is go ahead and go into the text area and I'm going to call this on input so we're going to reference the on input uh event listener so as we're typing we're going to go ahead and call the autog grow function and we need to put that in a function because we need to pass in a value to this so autog grow here we pass in the text area ref like that and as we make those changes we're just going to go ahead and grow it so right now as I grow that and as I decrease that it shrinks and grows with me and that's perfect so in the next step what we're going to do is go ahead and move on to making our cards dragable so what we're going to do is go ahead and update the position value so right now it's hardcoded we have our position set like this we can't update it so what we'll need to do here is change our position to use the UST State hook instead of hardcoding this value because with the UST State hook we have this set position method that we can call now now what will happen here is every time we drag the card around on the screen we're going to go ahead and call the set position method and this will update the X and Y position of our note card now anytime we call set position this renders that component therefore rendering the component out on the new part of the screen so the top and left Position will change as we drag it around because it just keeps getting rendered therefore creating that draggable effect here so we're going to go ahead and update that let's do that right now so we'll change this to use State we want to import that so use State here and we'll call use State go ahead and just wrap what we currently have and remove that right there and we're going to put that into an array because that's how we set our state so we have the value itself and then set position for the updater method or Setter method and from here what we need to do is we're first going to start with our Mouse position so we want to know where the mouse is when we first click on the the card itself now we don't know what that's going to be right away so we're going to set our Mouse start position X and Y at zero right here so we'll just go ahead and bring this down here and we're also going to need a reference to our card itself so we have some setup to do before we start creating those Mouse move and mouse down events here our card ref is going to reference the card itself so let's bring that in here just above our card class and we'll set the ref here and from here we can create create our functions to respond to certain Mouse events so the first one we're going to listen for is going to be the mouse down event and we're going to pass in the event itself here and on Mouse down what we're going to do is go ahead and set this start position right here and the position is going to be the current Mouse position so we'll set the x position to e. clientx and we'll do the same for the Y position so Mouse start POS is going to be or Mouse start p Y is going to be e. client y so we set that initial position and we're going to use these values to calculate the distance from the current position to the next one so we have to set it on Mouse down and from here we're going to call document. addevent listener and we're going to listen for the mouse move event now on Mouse move we're going to trigger the mouse move function which we don't have yet so we're going to create that so we kick things off here we add that to the Dom let's create the mouse move move function and this is really where all the magic happens here and I'm going to have to do a little bit of explaining here just to make sure you understand how it works so on Mouse move first thing we're going to do is create a object here called Mouse move dur for Mouse move Direction and this is going to be an object that holds the X and Y position so X is going to be calculated by taking the current Mouse Exposition and subtracting it from the new position so e. client X like that so from the time we clicked on it to where when we moved it that position had changed and we want to know this is going to be a couple of pixels to the top bottom right left wherever that goes we're going to figure out how far that moved and we're going to take that value and we're going to be able to calculate the new position based on that so we'll take the X position and we'll do the same for y and we'll do e do client Y and I'll show you the output here in a second so we're going to take these values then once we figure out the mouse move Direction we're going to reset the mouse starting positions for the next move because we can call this mouse move function maybe a 100 times in a second or a couple seconds because we're going to drag it across the screen and it's going to recalculate every single second that it moves or every single time so we want to set the mouse start position so on the next move we can run that calculation again and I just realized we need to set y right there okay so let's go ahead and actually start this off here and it's not going to work too well because we're not actually going to update the card but let's go ahead and console out the mouse Direction here so console.log we'll take this mouse move Direction and I just want to show you what this looks like so let's throw that out here and we want to trigger Mouse down anytime we click on the card header so let's go ahead and add that here so on Mouse down we'll call the mouse down function and let's just take a look here so we have our console open and as I click on it now I'm just moving this around and you notice how the X and Y position keep changing let's zoom in a little bit and see this here so as I'm moving the card's not moving but it's tracking my mouse here so if I move to the right we see a bunch of minus ones there and then if I move up we keep seeing those pixel values change so that's what we're doing here now once we've done that we can actually move the card here so let's go back into our not card and we want to actually set the position itself so once we've recalculated everything we calibrated it all let's go ahead and clear that up we can call set position and this will update the actual card because we're going to update the state here now within the set position function we're going to set the x position and we're going to calculate this by calling card ref. current and we're going to use the offset top and left position so current. offset top or offset left to start and that's going to be minus Mouse move dur Direction dox and we're going to do the same for y so offset left tells us the diff distance from our current card to the left side of our screen and then y does the distance from the top to the current card here so Mouse move Y and then this is going to be top right here so let's take that update it I'm just making sure it's all right so card ref. current offset left for x and then offset top for y okay so that should do it let's see if we have any errors so now when I drag it look at that I can move it around the only issue is I let go and I can still move it it doesn't let go of the actual card itself I can click on the next card or maybe it won't I guess the only way for me to do that is by refreshing the screen now what we want to do is we want to go ahead and remove the event listener on Mouse up so when we let go we want to make sure we can actually release this card remove those event listeners and then click on another card so let's go into our notes here and we'll move down here so we added Mouse down now on Mouse up all we're going to do is go ahead and remove the mouse move and mouse up event listener so really what I need to do is I need to actually add the mouse up event here so let's start by creating this entire function we'll bring this in here so after Mouse move we'll bring this right here but Mouse up is not technically added to the Dom yet so we'll just go ahead and bring this right here so on Mouse down we're going to add the mouse up event function and this is going to be Mouse Mouse up and we'll call Mouse up like that so once I save that we should go ahead and remove those and if I test this out let's go ahead and refresh it and now I should be able to grab any card and move it around let go grab another one and we successfully have added and removed those events as we're clicking on those cards and that gives us that perfect effect of being able to grab and drag and drop any card now there is something that's happening here that I want to fix there's actually a few things but one of those is the fact that I can take this card and I can move it way off of screen and then now from here I can't grab it now if it goes to the bottom left and right technically I can set some bounds here too but that's fine because I can scroll so anytime it goes this way I can scroll but I shouldn't be able to go all the way to the top now in order to get this I have to refresh but if that's saved I can't get that item anymore so I want to create those borders so let's go ahead and go into our guide here and let's go into section 2.2 inside of setting bounds and what we'll do here is we're going to create a new function here and we're going to put this into its own file and this function is going to allow us to calculate the actual distance from the top and left and if that value goes below 1 then we go ahead and set that to zero so it's going to go ahead and reset it and it doesn't let us drag it any further and we've just done this right now so we're basically abstracting this code and we're putting it into that function then we're going to take this new offset function or set new offset and we're going to use this function function right here to create that new position and then we'll call that with the set position method so let's go ahead and create the function and this is going to be inside of utils.py be set new offset and with this function we want to pass in the card ref itself and then the mouse move Direction so the direction we actually moved and card ref will be passed in as card as a parameter here so we'll bring that in and then Mouse move dur and if we don't have any values we're going to set X to Zero and then y to zero so we just want to make sure we at least have some default values so that's only if we don't pass anything in now within the function itself let's go ahead and set the variable of offset left and this will be equal to card. offset left minus the mouse move Direction so we first want to figure out where we're going to reposition it and if these values are less than zero then we update so Mouse move Direction X we want to update that and then const offset top and that's going to be card. offset top like that minus Mouse move Direction doy okay so let's go ahead and return the following so we'll return an object here and X will be equal to offset left and if we're less than zero then we want to go ahead and update this so we're going to throw in a question mark here if it's less than zero we set it to zero so if it's minus one then we update that we don't let it go any further and if it's not then we just pass in the original offset left value let's grab this for x and we'll do the same for Top This will be top right here and we'll fix this change that to top and that should be done once I update this just making sure offset top y okay perfect so we can take this function and bring this into no card so we'll import set offset from utils and we're just going to make the update by setting new position on Mouse move so we'll create a variable called new position and this will be using set new offset and we're going to pass in card rep do current so that's how we get that offset top and left position and then Mouse move Direction which we get from here so we set those values and then we can update set position to new position because new position is returning this object so let's go ahead and give this a test so if we try this out let's refresh it now when I move it I can't move any further to the left and I can't move any further to the top because once we go negative it stops us but we can move right so perfect that's exactly what we needed so next step here let's go ahead and actually clean up our code a little bit so this autog grow function let's just bring this into our utils.py hopefully we don't have any errors let's see it looks like we have a bug here what's the issue so text area ref is not defined text area ref okay that's what happened so I need to update this because we need to pass down that parameter and I didn't pass it down correctly so now when I refresh It autog Grow should work perfect our code is a little bit cleaner and now we can move to active card Z index so what's happening here is right now anytime I click on a card it looks fine but what happens if I click on the card behind it well right now this card just happens to be on top but if I click on the card behind it I want the currently active card to be brought to front so I don't want this to be random I want to make sure that we always have an active State and we can see the card that should happen on Mouse down anytime I start typing so we need to update this right here to make sure that we actually have an active state so going back into our notes what we're going to do is create a zindex function here and we're going to take the currently active card and we're going to set the zindex to 99 so a very high number that way it's at the very top but the problem is we could have other cards that have a z index of 99 if we clicked on them before so we're going to take all the cards we're going to get the cards by the card class and we're going to Loop through them so on click of a card we're going to take all the other cards and set the Z index to minus one based on the current card and we're only going to do this if those are not the ACT active card so let's go ahead and just copy this I want to get this one done pretty quick here and I just want to make sure to explain it too so let's see inside of utils we'll paste this in so first we're exporting this so we can use it this is in uil.com by class name we get the card value we Loop through them and and we need to make sure that we're using array from because this is an HTML collection if we want to iterate through this we need to make sure that we're creating an array out of this and then we're checking if the card so on each iteration if the current card on the iteration is not the selected card go ahead and update the card style. zindex value to the selected card. style zindex value minus one so that means every other card will have a z index of 998 and then this one the active card will be 9 99 so let's import that here we'll bring that into set Z Index right here from utils in note card jsx and this is going to be on Mouse down here so as we click on it let's call set zindex and we'll pass in card ref. current and I just want to make sure that's right based on the notes here so we pass in card ref current on Mouse down and then I also want to do this on Focus so anytime we actually click to focus on that so I'll show you what I mean by that so if I click on this that brings it to the top and that brings it to the top too but this right here is focus State on that pink card right there so I want to make sure that that also brings it to the top so we're going to go ahead and call that and pass in the current card so on the text area let's set this to on focus and we're going to go ahead and put this inside of a function and we'll do set Z index and we can pass in card ref. current and that should do it on Focus as well so if I click on that there we go start typing and the latest or the active card is always set to the top so that completes most of our functionality for the cards now it's time to officially build out a backend all right now it's time to really make this project a full stack application and for our backend we are going to be using aight as I mentioned in the intro so if you haven't created an account with aight do that at aight. and it's free to do so so go ahead and register and we're going to start walking through those steps and setting up our database so you're just going to need to go ahead and register create an organization and once you have that organization you are going to be prompted to see this screen right here where you can create your first project so let's go ahead and do that once you're here click on create project and I'm going to call this sticky notes you can name this whatever you want and by default we're going to be given a project ID so it's going to be autogenerated for us go ahead and create that okay so here's our project dashboard and for now all we're going to do is focus on the database adding some data and then connecting to that from the web SDK so let's go ahead and create our database and I'm going to create a database called Dev as in development you can name this whatever you want and for the database ID I'm just going to leave that blank and let aight generate that for me now inside of a database we have our tables you can call them collections uh we're changing this name up a little bit but aight technically has a relational database so you can call this a table I prefer to do that but I'm sure I'll reference it in different ways so we're going to create this collection or table and I'm going to call this notes here and same thing we're going to create the collection ID aight is going to generate one for me and once we have our collection we need to set some attributes for this collection so what's a note going to look like we need to Define that database schema so for a note what I'm going to do is make sure that we have a note body and that's going to be a string here so even though we're going to have some rich text in here we're going to make that a string and then we're going to stringify data and hold it in there I'm sure you saw that in the Json object where we had that Dynamic data we stringified it it's still technically text and I'm going to set the max value to let's say I don't know thousand maybe whatever whatever works there go ahead and create that for yourself and with that we also want some colors and that's also going to be a string because we're going to store this as an object but for our colors we're just going to stringify that data let's go ahead and just add in 200 I think that's enough space for us and we'll hit create hopefully we don't run into limits there and we're going to go ahead and set our position and this will also be a string because all of that stringified so the size for this let's just go 200 so we're going to have an object inside of position and inside of colors and we're going to reference that soon so once we have that what we need to do is go ahead and add some documents and what I did here is inside of our guide here inside of part three in the app right backend section I'm going to update this by the time the video is released but I did add in some dummy data that you can use here so what I'm going to do here is create our first note we have note number one and I'll just zoom in a little bit and inside of note number one we're going to set this for our colors so let's just copy this and hit create document for our Colors Let's just throw that in right there so we'll save it create and we're going to grab the position right here let's take that and I just realized I probably should add that in multiple areas before I save it so we're going to add that and we'll just say uh first note some kind of body text let's go ahead and add it and then we'll just quickly do the same for the other two notes so in my case I'm just going to do two but I have three examples here so we'll bring that in we'll add in another note create document and we'll say hello and that's going to be our colors and our position here we're going to set X and Y bring that in and save that and there we go so we have some notes now before we can actually connect to our app right back end here what we need to do is we need to make sure that we set our permissions So within our collection if we try to make a request by default that request is going to be blocked and why that's going to happen is because aight is going to be secure by default it's not just going to allow anybody to make that request so what we're going to say is we can set a position for certain users different types of users we're going to select it select any here and we're going to say anybody can create read update and delete so make these types of requests to this database now in theory that's not very secure but because of this tutorial I want you to be able to work with this right now let's go ahead and just set it this way now once permissions are set let's go ahead and actually connect to our web SDK and there's one other thing that we need to do so we need to go into the overview Tab and we need to set allowed host to our application so this is basically course configuration now whenever someone tries to make a request aight if it doesn't recognize what URL that's coming from so in our case it's going to be Local Host it's going to block that request because we don't want just random people spamming R SDK and trying to make requests to it so we're going to hit add a platform and this is going to be web and we'll just say my app that's where we're making these requests from and we're going to say Local Host and we don't need to specify a port number so we'll hit next and from here it's showing us how to install the aight web SDK so let's just copy that and let's actually bring that in and let's run npm install app right so we can turn off our server hit paste npm install app right so we're doing this simultaneously so we just install the aight web SDK and we're just going to click next I'm going to skip this part and this is going to get set up in a second so we'll just go through this and now we've officially allowed a host here so we've allowed a host we've set our permissions we've created a database a table added data and we can start connecting to this so we'll go back into our guide and let's just see what the next step is here so inside of basic config here first thing I'm going to do is go ahead and just copy all of this we'll just grab this and we need to set some of our app right core settings here so we need to know our project ID our database ID our collection ID and and make sure that we can use these to connect to it so I'm going to create a EnV file in the root directory so EnV and we'll paste this in so for the endpoint that's just going to be cloud. aight. iv1 for the project ID we're going to get this from our overview Tab and that's this project ID make sure you're getting your own I'm going to delete Mine by the time this video comes out so don't try to make request to mine for the database ID we're just going to grab this one right here let's bring this in and for the collection ID we're just going to grab this one from notes so we have our IDs let's just run our server so npm run Dev and before we continue there let's go to the next step here and this is where we want to connect to our SDK so what I'm going to do is create a folder named aight and all aight configuration is going to go into this folder so to create that configuration let's go into our source folder and we're going to create a new file and folder so this will be aight and then SLC config.js and this is where the core aight configuration will sit so we're going to first import the client instance this is how we can initialize an app right client then to make any request to the databases we're going to import databases and we're just going to call const client initialize the actual client instance and this will be new and we're going to call the client class now here in order to actually set that up we want want to set up the endpoint so where are we going to make requests to and that's going to be this right here so the V endpoint that's going to cloud. aight. iv1 and we can import that by going to import. meta Dov and then pasting in the environment variable so with the endpoint we also need to specify the project ID so what's the project that we're going to connect to and that'll be the same thing we'll grab that bring that in and then we're going to copy V project ID and that should set that up okay so with that we also need to create an instance of our database so we'll do const databases and remember we can have multiple databases so that's why we're going to set the variable up this way so data bases and we're going to call new call the databases class and pass in the client instance okay so once we have that we'll export it and we want to export the clients so we want to access this anywhere and then the databases class right there the instance so now we're officially connected to our app right web SDK and it's time to make some requests to our backend and get that data that we set up here in the previous step so what I'm going to do here is go into my notes page and we want to stop working with this fake data so we're going to comment that out and because we're about to make this request we need to set some state so we're going to import use State and use effect here and inside of my my notes page we're now going to work with some real States so we're going to set notes here and then the setter method which is going to be set notes and this is going to use use state which will be an empty array when we first start this so if we go to my page here we see that we have no notes so we need to populate this we're going to make the request from this init function which is going to be an Asing function and within this function we need to import the databases class from our aight config file because this is how we make first request so we're going to do this just underneath our fake data our fake notes here that import we're going to do this just below it and we're going to import databases and that's going to be from aight config so we import that instance and we want to make that request which will bring back a response and we'll use await and to make a request to the app right backend to get a list of data from a collection or a table we're going to call databases. list documents and there's a few parameters here that we need to set so first of all we need to set the database that we're making a request to so we're going to import and we're just going to actually copy this right here we need the database ID so that's the first parameter and we're going to do V database uncore ID and after that we need our collection ID so which collection are we going to make this request to and that's going to be V and let's just actually copy this from our EnV file so V Collection notes ID and that's going to make that request and let's just console this out so we'll console do log and let's see what that looks like so response is going to give us the total along with an array of objects if everything works successfully but before we do that we need to call a use effect here we need to actually call the function throw in an empty dependency array so we don't call this more than once and let's trigger init and let's see what we get so we're log out the response let's go ahead and inspect element go to console here refresh it and here we go so we see a total so two documents those are the two items that we added to our database here and then we see these two objects right here where we have our first note and we say hello so what we need to do with this is go ahead and just take this response right now so we're going to call set notes and set notes is going to be response do documents so that should populate it so let's go ahead and see what we get in the front end and at this point we should actually run into an air and I want to explain what's going on here so at this point this is telling us that we can't parse the data inside of our note body here so essentially what's happening is we have a string inside of our body text here so if we go to the note component we're taking this body right here and we're parsing it expecting that to be Json data because if this is going to be rich text we stringify it and enter it into our database and then when we parse it out then it goes back to standard text here well in our database we added just standard text it's not technically Json data if I wanted to make this Json data what I could do is go ahead and change this and add some quotes to that and that'll make it standard Json data because it's stringifying it but we don't always know if this is going to be the case here because if someone adds data manually here then it changes up our entire back end so what we're going to do here is we're going to create a function here that doesn't just parse the data we're going to create a function called body parser and we're simply going to check if this is Json data if it is we parse it if it's not then we just return back that standard text and that should return back this array of data without any errors here so let's go ahead and do that and we're going to do that in utils do JS here so let's go ahead and create that function and we'll export that call it body parser and this function is going to take in a value and that's going to be the actual body from the note here we'll make that an arrow function and we're going to create a try catch here so we'll do try and then catch and in this case right here let's go ahead and finish up the catch in the try method right here what we'll need here is just to try to parse that data so we'll do json. parse and we're going to take in the value which is going to be that body if this works we're just going to go ahead and return this we'll do return like that and the function will return the par data if not then we're just going to go ahead and return the value itself so we'll just do return if I can spell that and that'll be the value now we can take this function bring this into our note card let's import that from utils and we're going to change this right here so let's copy body parser let's take this import it and change json.parse to body parser so we're either returning back the string or the parsed Json string here so once we have that there we go now we can see the data so even though this is a string it renders it out just fine so that's exactly what we needed and this is data from our backend so right now if we just go ahead and add in something like hello world so we'll change this and let's make this Json data right here so we'll add quotes around it so that way it can actually be parsed and let's make sure that the other alternative works here too so if I refresh this now we see Hello World now there's a few things here that I want to fix up here so I mentioned this inside of the documentation and one of the things I want to take a look at is going to be the notes page here app right has a web and they're standard methods that we get to work with so if we want to render data out we have list documents if we want to get data like a single object we have a get document function create update and delete and one of the things with these is they have builtin or default parameters that we need to use like passing in the database ID and the note ID well I want to simplify this a little bit and I want to make this a little bit more human readable because ideally I would do something like this I'll would do response await and then just call DB do notes and just call list because I don't want to I want to change that to DB I don't want to have to remember the databased collection ID every single time or both IDs I don't want to have to import this every time it's a little bit messy so I would prefer creating some kind of wrappers around this and making this process a lot easier so what I'm going to do is go ahead and just comment this out right now and we're going to replicate this call right here and I already added this inside of my documentation so inside of basic config here what I'm doing here is I'm going to go ahead and create this array of collections so let's copy this right here in database config and inside of my config file I just want to add this right here which presets my collection information so I want a human readable name so I want this to be notes and if you have more collections you would add that name here and then I want to pass in the ID for the collection itself and then the database ID so I don't have to specify this every single time now we have this array of Collections and I'm going to go ahead and Export this and with this step I'm going to summarize it briefly but I highly recommend you just copy this and we move on from here I have a full video that explains this so I'll link that up but in this case what we need to do is we need to create a databases. JS file and we're going to go ahead and just copy all of this into that file and I'll summarize it quickly so inside of the app right folder we'll create a databases. JS file and we'll paste this in and in this file what we do is we import the databases instance right here then we also import the collections right here that we set up so that information for the collections itself and then we create a DB object here so with that object we Loop through all the collections in our array which we only have one and we just go ahead and wrap each app right method so create document update document we're still calling these methods under the hood but we're going to change the name and how this is pass along so if I minimize this we now are going to have these methods for or from the DB instance so we pass in the collection name so we can now call db. notes because that's going to be the collection name here and then we're going to call create and pass along the same information which in this case create is simply going to pass in the collection ID the database ID or other way around and then we get to proceed on with the original method so if we do things this way create the databases .js file go ahead and copy and paste this in save it make sure you have this array right here with this information save that make sure you export Collections and inside of your notes page you can now call db. do list so let's actually go ahead and just save this and make sure that this works and we also need to import DB from aight SL databases so it's just a wrapper around our methods and I want to use this way of doing things from now on so it's going to really simplify things so if I want to make sure that that's working let's refresh it I shouldn't have any errors in the console and that really should simplify our process and it looks like it works exactly as it's supposed to all right so now it's time for the fun stuff we're going to make some updates to our database anytime we move a note around by Saving its X and Y positions and also we're going to work on saving the actual notes content here so when I refresh it none of this information saved so that's what we're going to work on so the first thing we're going to do is we're going to work on saving the position so when we drag an item here on Mouse up that's when we're going to trigger an update to the database it's going to take those X and Y values and save them so inside of section or part number four in Saving changes this is where we have this in our documentation or in our written guide we're going to start with this part right here and then we'll move back to the save data function so this is going to be just to abstract everything away so that way we can reuse this function but right now in the mouse up event we want to go ahead and get those positions and send the update so inside of my note card component let's import our actually I need to make sure it's not capitalized we're going to import DB and that's going to be from aight SL databases and we want to make that call right here so on Mouse up the first thing I need to do is go ahead and get the new position which we're going to use the set new offset function for and pass in the card itself so card ref. current and if we look at this function right here we pass in the card then we get the offset left and offset top position we check if it's out of bounds if it's not then we just save the actual X and Y position if not it's not an issue and we don't need to put in the mouse Direction because this is on Mouse up we're no longer moving the mouse so it has no New Direction so it returns back this right here basically so X and Y with those positions and once we have that we can call db. notes. update and in this update function first of all we need to know what note we're going to update so we're going to pass in the note ID and then we're going to pass in a payload and in that payload we want to know what attribute we're going to update so this will be our position and this position right here is going to be the new position but we need to stringify that so json. stringify and we're going to pass in new position like that so on Mouse up we're going to get the those new positions from the card itself so top and left pass in position let's make that a string just uh I guess it doesn't matter and that should make the update with a new value so let's try that out so we'll go into our front end let's move these two to the left here if I refresh that awesome it saves it then if I move those here refresh that and the new position is updated so that's exactly what we wanted now from here we want to go ahead and move everything into the SA save data function because we also want to call save data anytime we make an update to the text itself so let's go ahead and create this function so we're going to add this just below our Mouse up function so we're going to call this save data and in here we're going to pass in the key so the attribute we want to update and the value which is going to be the payload so the request we're actually going to make so we'll get this payload we want to make sure that this is stringified here so this is going to be an object and we want the key and then the value is going to be json. stringify and we're passing in value here now with this because of the way we're setting it we need to add in square brackets around that because if we don't this key right here is going to be the string of keys so we want to explicitly make sure that it's going to be the dynamic value so if this is position or if this is body we want to make sure that's added so make sure you don't forget the square brackets so that's payload and once we have the payload we want to create a tri TR catch statement here so we'll do try catch take that error and we'll just do console. error for the error and we want to send that message back now in the try statement we're going to call await we'll make this an Asing function and we're going to call db. notes. update and this is where we just pass in the note ID so we can actually just grab well I'll just write it out so note. ID and then then here we can pass in the payload like that so the payload is now going to be this object so we know what key to update and once we have this we can take save data we'll go ahead and bring this in right here and the key is going to be position so we can take that add this as a string value and then we'll pass in new position as the value of payload or the value that's going to be the payload and we can just get rid of this so that just makes it a little bit cleaner that way we're going to call this and we can actually call this in the next step and it's going to be easier so let's just make sure that this is working we'll go back here we'll refresh everything let's see if I move it we shouldn't have any errors I'm going to check the console and if I refresh it these should stay here and that looks good awesome so we have successfully added some update functionality so in the next section what we're going to do is work on updates any time we make changes to the actual text now the way this is going to work as I showed this in the preview is when a user starts typing we don't want to save on every single key up because if I'm making update request right here that's going to be a lot of requests being sent to the back end so what we're going to do is we're going to add in a load spinner that pops up here and we're going to set a timer so only once the user has stopped typing for 2 seconds then we make that request so if I keep typing we're essentially just going to keep extending another two seconds on every single key up what once we're done then we have that load indicator and then once that goes away that means the request finished up so this is what we're going to do in this next section so let's just copy this saving state right here and let's bring this into the top of our note card component here and I also want to get this key up timer right here which uses a ref and I'll explain what this does in a second but long story short this right here is going to hold the timer ID for the set timeout function so when we call set timeout it returns a timer ID and we're going to need to to clear that anytime we want to create a new timeout so whenever we want to extend those two seconds we need to clear the old one and set a new key up timer so we have that right there and down here just under save data let's create a function called const handle key up and let's go ahead and just finish up the function and we want to attach this to the text area so we'll just add this right here and we'll just do on key up or not key down but on key up so when we're actually inputting the value we're going to call handle key up so with this function I'm going to reference my notes here so the first thing I want to do is call set saving so as we call it saving is now going to be true because we're in that saving State and then we want to go ahead and get our keyup timer. current and we want to set the value to set timeout like this so let's go back to our notes here so in set timeout we're going to add a function in here and we're going to time it out after 2,000 milliseconds so two 2 seconds and we're going to call save data we're going to pass in body as the attribute that we want to update and we want to pass in the text area value here so the body data we want to pass that in so let's bring this into the set timeout function so it's a function within it and then the time we're calling save data and then passing this in so before we actually call this if we keep triggering key up it's going to keep setting our timeout and we're going to call this a bunch of times and we don't want to do that so we need to add a condition here and I'm just going to take this directly from here paste it in and then I'll explain it so on set saving we first want to check do we currently have a timer ID in there if we do we clear that because we want to ignore it so this doesn't get called multiple times so if we have it we clear it then we reupdate it so that check happens in the beginning now what we want to do is go ahead and take set saving once we actually call save data at the end of this we're going to set this back to false and that's going to go ahead and remove our indicator once we actually add that in so we have that here we already added our event listener and we want to render a saving indicator so let's just copy this directly here and we're going to bring this into our header so inside of not card we have our main div then we have our card header so just after our trash icon here we're going to paste this in and we're going to check this condition so we're first going to check if we're currently saving let's go ahead and just wrap this so if we're currently in Saving State let's go ahead and render out this div with the class name of card saving and then we're just going to go ahead and render out the saving text here so now I want to test this so we'll go to our front end and as I type here check this out so I'm typing saving keeps being rendered out here if I go ahead and remove this it's still rendering out so the timer is working cuz it keeps adding it 2 seconds after it's updated so if I hit G updates one two then it's out I can do the same here and this can render out for both right here and now if I refresh this look at that it's saved in my database so if I go back to my database we'll go to this one right here we're going to go into data and now we have all that text stringified and that's successfully updating my backend so I want to make this look a little bit better so I want to create like a loading indicator so it looks active so we'll go back into our notes here and we're going to copy this entire load spinner component so we're going to copy spinner let's go ahead and bring that into icons here we're going to create a new component called spinner and I need to make sure it's not capitalized so spinner. jsx and we'll paste all of this in and make sure it's exported so this right here is just going to be an SVG we're rendering this out here inside of our note card so I want to import that first so import spinner from our icons here so icons and that's going to be the spinner component let's just copy this right here bring this into our header so just after card saving the opening tag let's throw that in and we want to set the color and the color here is going to be colors. color text we'll throw that in close it off here and let's just see what we get for now so if I refresh that so as I type we see the spinner but it's not actually spinning and the alignment's a little bit off here so we're going to add some CSS to actually fix this so for this the CSS is all provided right here so after our spinner section so in input changes let's go ahead and first of all add this to root inside of index.css so we'll bring this in here so that's going to be the spinning speed here the animation then we're going to take this right here from Key frames all the way down to spinner and then card saving here so that's going to be brought in just after our app or app ID we'll save that and that should make it look good here so now when I type there we go that's the effect that I wanted so that looks good and now we actually update our text we have our load spinner and let's just see what the next section is here we can go into deleting notes here so now we're going to take care of uh our trash icon so we're going to create a button for that icon here we're going to wrap it and then the delete functionality is all going to be handled in the delete button component so let's just Dive Right In and start building this out so we'll go into our components here and we're going to create a new component called the leite button here do jsx and we'll create the component so react Arrow function component export that's my shortcut here and we need to pass in a few values and we're also going to import the trash icon here because we're just going to wrap this here so we'll just go ahead and bring this around we'll just do trash like that close it off and then for the props that we want to pass down we want to get the note ID so we want to know what note are we deleting and then we actually want to update the state here to filter out the note from our front end so we're going to do note ID and then set notes that's going to be passed down as a prop and as far as the function itself goes we're going to create a handle delete function and before we actually add in the delete functionality I want to filter this out from the front end so we can see how this works before we actually start removing that from the database so let's create the function here handle delete and we'll make this an async function and with this let's just go ahead and pass in on click so we're going to do this on the div here so on click we're going to trigger this and that's going to be handle delete and then in the function itself what I'm going to do is just copy set notes here and we're going to bring this in to the function and essentially we're just calling set notes and we're going to filter out the note by ID so we're going to check the note ID and we're going to say on iteration if the current note is the note not ID go ahead and remove it and then return back the new array so we want to call this let's bring this into our note card and we can actually remove the trash icon here so we'll just do delete button and this can now replace the trash icon so down here inside of our header we have trash so we want to pass down set notes and we want to pass down the note ID and then set notes right here we haven't used this yet I believe in this component so we need to actually pass this down through the note card so we'll do set notes like that and then this also needs to be passed down from the parent so let's throw this in because we update this all the way from the parent component so we're going to do a little prop drilling don't worry we're going to clean this up later using the context API but that's in a later section so let's go ahead and throw down set notes so we pass it down to the component then within the note card itself we take it from here then we pass it down to the delete button right here and we want to make sure it's actually passed through and now when I click the delete button again it's not updating the database but we should experience how this removes the actual card so just checking this okay that looks good so far let's go ahead and refresh it let's click delete delete and that removes it and we still see our notes once we refresh so that's good so I want to talk about a little issue that occurs here though so right now we have a mouse down event that gets triggered that eventually triggers a mouse up event that actually updates our component well what's Happening Here is whenever we click on this delete icon here it's not only triggering the click event it's also bubbling out and it's triggering the mouse down event which is trying to update a note that doesn't actually exists so right now we don't have an error because we're not deleting the icon yet but I want to explain what this actually looks like and I write about it here so ultimately anytime I did a full explanation anytime we want to trigger it we trigger the wrong events here so I want to ignore those events so let's just start with this let's just say console.log and we'll just say delete clicked and we're also going to bring this into our note card and we're going to say on Mouse down first we actually want to do this on Mouse up so we're going to say console Mouse up and then we'll just say saving and we also want say mouse up was triggered or Mouse down here so we'll just do console.log and it's kind of a funny issue but it's a really important one because it's going to give us a lot of Errors so we'll say mouse down was triggered so let me explain this so right now if I refresh this and if I click on Mouse down once I release Mouse up is triggering so it's Saving right well if I click on the trash icon we first see Mouse down Mouse up and then delete was click so we don't want to update a note before we delete it so it's basically propagating those events or bubbling those out and it's triggering the wrong events so what I want to do here is I just want to go ahead and add this condition that basically says hey if the current Target so we can figure out what caused that event to fire off so if we click on the icon it's going to basically give us a different class name or a different Target so we want to say if the card header itself was clicked then we just want to go ahead and ignore the rest of the mouse down events therefore not adding the mouse up function and not calling update so let's go ahead and just change this so if I bring this in right here to Mouse down and we're going to say if e. target. class name is the card header go ahead and continue then if not we're just going to ignore it so I wanted to focus on this before we actually start updating the database so right now if I click on it we see Mouse down was triggered that's perfect that's what we wanted but if we click on the trash icon delete was clicked and we're now successfully ignoring that event where we're not ignoring the event itself but we're ignoring the action that occurs after the event so that's what we wanted let's go ahead and just clear out these console logs right here we don't need that anymore we also don't need that inside of our Mouse up event and we don't need that in our delete button so let's remove that and the last step in this process is to actually update the database so now all we're going to do is call db. notes. delete and we're going to pass in the note ID so that's in the delete button here we're going to import DB then inside of handle delete we're going to call db. notes and in order to delete a note all we need to do is call delete and just pass in the note ID so let's try this so if I go back here into my front end let's hit delete and now if I refresh it that note is gone it's no longer in my database so now we only see one note and that takes care of the delete function okay so in this next section we're going to use the context API to lift up our state and have some sort of global state so we're not having to deal with prop Drilling and as our application gets more complex this is going to make things easier so if you're not familiar with a context API you may have heard of something like Redux or react recoil which are basically State manager tools that allow you to lift up State and access that Global State well the context API is like a builtin react way of doing things and essentially lets us set that state wrap our application and having access to information is a lot easier this way so what we want to do is we want to get rid of prop drilling here so if you're not familiar with prop drilling this is the process of drilling down a prop through multiple components so we have our note page and we need to be able to update our notes through our delete component so in order to get that there we have to pass down set notes into our note card then in our note card we have to get that set notes method then we pass pass it down into the delete button right here and that gets really messy and this can really get ugly when you start doing this over and over again so we want to fix this so to create our context right here we're just going to go ahead and create a new file and folder and this is going to be in the source folder and we're going to create a folder called context and this context is specifically going to be for our note context so not context. jsx that's what we're going to call it and this is where we're going to keep all that state so first we want to import create context and this is how we create it we want to import use effect and we're also going to have state so use State and now we can create our context which we're going to export right away and we're going to call this note context and we can create it with the create context method so once we have our context we want to create a provider which is going to provide the data and all the information down to the child component so we're going to go ahead and create that that's going to be note provider and with this provider let's go ahead and just pass in the children I'm going to need to do a little bit of prep work and then I'll just explain what's going on as we finish this up because there is a little bit of preparation here so first of all we want to go ahead and return our provider so that's going to come from our note context. provider and the provider is what's actually passing down that information now with that the provider itself is going to have a value and this is going to be the data that we sent send down so let's go ahead and create this data we'll add information into it later this is just going to be an object called context data you can name it whatever you want and that's going to be an empty object and we're going to take this object and pass it down as a value so anything that goes in here is now going to be accessible through the children now with our context provider or note Provider by default we want this to be loaded up before anything else happens in our application because if we don't have any data we might get errors in the future so we want to go ahead and first of all set loading to use State and this is going to be true so as our application first gets loaded the state is loading then we'll update this but before we actually update loading we're going to go ahead and add a condition in here if we're currently in loading State let's go ahead and render out our load spinner so first we'll bring that in so we're just going to render this out right away and once we're done loading we're just going to do children like that and let's just see how this looks right now so if we're loading we're just rendering out the spinner and once we're done loading we allow all the child components to be rendered so let's export this before we actually use it so we're going to export default and this is going to be our note provider and in order to actually use this we're going into app.jsx we're going to import our note provider so everything that's wrapped inside of this provider is now going to have access to the context data so we'll take our note provider and we should be able to access all of this inside of the notes page now and all the child components of that so let's just try this inside of our front end here we go we see our application we see that load spinner so I'll make sure that it's a little bit bigger let's add some styling but we're still in that loading State nothing else is being rendered out so I'll actually fix that up here and I'm just going to copy this div right here that wraps that spinner and we'll set the size so we're going to cheat a little bit and just copy and paste that's all in here so the load spinner itself let's paste it I'll save it so the formatting gets fixed and now we should see this so let's look at our example here so next what we want to do is go ahead and actually create the note state so that's coming down from here and we're going to take this same init function and bring that into our context so it's no longer going to be inside of our notes page so we'll go into our Pages we'll go into notes page let's take this init function we'll bring this into the notes provider and we're also going to take use effect so we already imported that right here we'll bring this in here and we'll take our notes and we'll also paste those into our notes provider so we have notes and loading and at this point let's just go ahead and get rid of all of this right here so we don't need that we don't need our databases anymore let's get rid of fake data data right now and we don't have access to any data in the notes page but we're going to pass this down in a second so once we have all of this we're going to take our notes and we're passing them through the context data we're going to take set notes we're going to pass those down also so we can actually update that in the future and inside of AIT we're going to set loading to false here so once that's set to false we also need to get our DB instance so let's import that from app right for SL databases and that should complete our provider here so we have our loading State we get our notes we initialize it we load them in loading set to false then we pass down notes and set notes so let's see how this works and how we can actually access this information so from our notes page so right now we don't have anything here we don't have any notes we need to get that state and the way we can do that is by calling the use context hook right here and use context allows us to get that object or basically destructure the object of data here which is going to be a note here or we're going to take our notes from that and we're going to call use context and we need to specify what context we're using which is going to be the note context and that should just import that for me if it doesn't just go ahead and type that out and now I have access to the notes inside of the note page so I have a few issues here so right now set notes I'm no longer going to prop trol that so if I remove it and I save it in my front end I should see some issues here so at this point we're going to maybe call the delete method right here we get an issue because set notes is not a function so how do we get that method down to the delete button here so we're going to do some updating so in our note page here or note component note card we're going to take set notes and we want to remove this so we no longer need that we no longer need to pass this down into the delete button here so we're going to get rid of that right here and in order to actually get this in the delete button we're just going to go ahead and import use context and let's just go ahead and actually pull that in set notes and we're going to use context we're going to use note context and I can get rid of this right here because that's going to cause an error if I don't actually pass that down and let's just see what we have so at this point in my console I shouldn't have any errors and we should be ble to call that delete function right now so we don't have any notes because we actually deleted it but that's perfect because in the next step we're actually going to take care of adding notes but now we have our context provider passing down data and we're able to take functions from that provider without prop trolling so that's going to be a big Advantage for us okay so now it's time to add in some add note functionality into our application and this is going to be in section 7.1 under add button here so let's quickly review it and then we're going to start building so first of all we have this add component and this is going to need a new icon called plus so we're going to add in this icon and then we're going to create a controls component which will actually hold not just our ad button but it'll also hold our other colors that we're going to add on in the next section so that way we have a whole controls panel that we can work with and this is where our add component is going to sit within so let's actually start with this plus icon so what I want to do here is go ahead and just copy that we're going to add this into the icon section and we'll call this plus. jsx and we'll paste this in and I want to make sure this is exported so let's just export default and once we have that we want to create the add component so that's going into components we'll call this add button and we'll just do react Arrow function component exported we'll go ahead and generate that let's just add in our plus icon in here and we're going to render that out right away so just do plus and we'll finish that off right there save that let the indentation get fixed here and we'll just remove the extra bracket there so from here once we have the plus icon in here we're just going to add the ID of add button we want to make sure that we can get some styling here we'll throw that in and let's just continue scrolling down here and see what's next so we have our control panel now so we're going to create that and within our control panel we're going to add in our add button so we're we're just testing a few buttons here or a few components so we'll call this component controls we'll generate that real quick and in here let's just import our add button we'll bring this in here just a little bit of redundant stuff here and then we want an ID and the name of the ID is going to be controls so we'll throw that in and we'll just finish this up with some styling I believe that's the next step here so once we have that we're just going to add controls into our notes page so we can't see anything just yet and we'll just render this out so this technically is going to have a fixed position so it really doesn't matter where this component goes this controls component because we're going to place it on the left side of our screen right in the middle when it comes to how we Center that uh vertically I believe I always get that mixed up so let's import the controls component and I'll just put this at the bottom just so it doesn't get in the way of anything and now if I go to my application here we see that plus icon so we we just want to style that now so if we scroll down we have some CSS to add so we have our controls ID and our add button styling here and then our hover effects so let's just copy all of this and we'll bring this into index.css I'm going to add this to the bottom of the page and let's just review it so we have our controls we have our own styling for the controls here we make sure that the position is fixed this allows us to put this anywhere and then the top and bottom position here we just make sure that's 50% we have some background colors some shading we also set Z index to 10,000 just to make sure it's brought to the front so if we have any notes that go behind it they're going to actually be behind the component and won't cover our controls now for the add button itself we have a background color and we just make sure everything's centered we make sure we have a border radius of 50% a height and width to this and then just a hover effect so it's going to look a little bit weird right now with just this button here so let's see what that looks like so here's that effect right here and that's our add button so now we want to actually add in some functionality so what we need to do here is first we need to have a default color for the button that we create so we have this array of colors that we're going to work with and we have four different options so we have a yellow green blue and purple button and we're going to create this array and then we're going to reference the first index of this array to set our default color which will be yellow if you want to change the default component or default note card when you create one you can just go ahead and change the index here that's up to you but we're going to work with this one so let's copy this we'll bring this into assets and this is going to be colors. Json and we can just paste this in right here that looks good and now we just want to import that into our add button here so let's just remove a few things here and we'll go into add button and we're going to import colors from and then we're going into assets SLC colors so we bring that in and we need a handle ad function now so if we go into our add component we're going to create this function that basically handles adding a note we're going to call that add note and we're going to send a payload and we're going to call create or send a create request to our datab base so let's start by first creating the ad note function so let's create some space here and for this add note function we want to make sure this is an Asing function and the first thing we're going to do here is create an initial state for this note so we want to pass along the payload here with that initial data and that's going to be an object like this and we first want to make sure that we have the note position and we're going to set some default values here but before we do that we want to make sure it's stringified because even though we're going to pass on an object like this we want to make sure that that's string in that database and for this starting position we're going to set this to 10 but we need something specific to happen here because when we add a note if you happen to add notes let's say two notes at once we want to make sure that those notes don't stack on top of each other that the next note will have a different position so we can actually see those get indented and moved along the screen as we add those so we want to make sure that they don't overlap each other so for this we're going to import use ref here and we're going to create a starting point so starting POS and this is going to be use ref and then we're going to set this to 10 and then we're going to set X to starting pos. current which is going to be 10 on the first instance of this so we're going to set that for X then we'll do the same for y and that's going to be the notes first position now after we do that we want to make sure that we have our colors so colors is going to be json. stringify and we're going to stringify the colors and that's going to be the first index from the colors array so we'll do yellow you can go to any index that you want I just want that to be my default once we create the payload we want to go ahead and update the starting position so if we happen to add another note we want to make sure to increment this so we'll do starting position. current and that'll be plus equals 10 so we're just going to indent it 10 from the top 10 from the left and that'll move it to the side here so we just want to make sure that we have a new one each time here so from here we can actually go ahead and just add this to our database so we're going to import DB from and then we're going into aite SL databases and we're just going to call db. update so this is all within the adote function db. notes. create and with this we can just go ahead and pass along the payload our ID will be automatically generated for us and we just want to console out the payload and let's just see what we get here so last thing to do here is just go ahead and take this this function and we'll just do on click we'll call add note let's give this a test so hope hoping everything went correctly here no errors let's refresh it and the note is not going to appear right away we still haven't added this to our state yet but let's just try this so we're going to hit add note and here we go we get this response let me zoom out a little bit this is our object with a new note now if I refresh this we're going to go ahead and see that note and now I can actually update it and this is in my database if I hit this twice we should in in theory see the notes stack up on top of each other like that so that's the effect that we're trying to create now it looks fine here but when we do this all at once with the state being updated that's where we really need that to happen so let's go into the next step here and we're going to scroll down into updating our context state so we're going to go ahead and get the set notes method here from our context let me zoom in a little bit and we just want to make sure that we can update the state so once we get that response we're going to update this and fill it in so let's do that from the top of add button we'll import use context then at the top here we're just going to go ahead and do const destructure set notes from Context and we're we're going to call use context and now we can get note context should automatically import for us so use context and then note context let's just quickly import that and see what's going on so we'll do import and that's going to be note context from we're going into context and then note context okay let's just manually do that usually it just autofills that for me but let's give this a test so once we have that we're going to change this right here we'll do set notes and let's just copy this directly here so we're just going to take that previous state take that response and then use the spread operator to add the new note I believe at the end of the array yeah we're just going to we're actually adding it to the beginning of the state here so that's going to update our set note state so let's refresh our page let's give this a test I'm going to delete these two and now when we add them we should see that note being added and indented so the this is most of what we want there's still an issue here so you notice as I add new notes the note is being added and incremented so it's being added slowly to the bottom right but as we add it the new note gets placed behind all the other notes now if I select a note and make that the active State it'll be brought to front but we want to make sure that that's the default Behavior so this is an easy fix all we need to do is go into our note card and we're just going to use this set zindex function and we're going to call this on user effect so not just on key up or when we click that card header we're going to call card ref. current and this is going to be right away when the note is rendered out and that should fix it so now when we add it this is going to bring the first note and then the next one should be above it like that and that's fixing our active State and that's more so of what we wanted so I really like that I think it's looking good all right so we're in the final stretch here and now it's time to allow users to actually update the colors of specific notes so we're in section 8.1 with our guide and what we're going to do here is create a color component and we're going to render out these colors inside of our controls component and the colors are going to be generated from this colors array right here inside of assets so we're going to Loop through this array and we're going to specify a specific color for each instance of that component so let's go ahead and just kick this off and we're going to create the component first so let's close this out we're going into components let's create the new component called color and let's generate the component itself and within this we're going to pass in the color which will be passed in from the array so on each iteration we'll throw in the color as an object and let's give this a class name of color and within this we're going to add in a function that can handle the click so on click whenever we click on this we're going to go ahead and change the color so we're going to call this change color we'll create this in a second and let's go ahead and gener generate that so change color and the first thing we want to do is just console out the color and make sure we actually clicked on the right one and just to ensure that we're passing this information down correctly so we do console.log and let's console out the color so onclick we console it out we also want to make sure that each color has its own styling so let's indent this right here make sure that we can add in inline styling and we'll just do style and we're going to set the background color we're going into color. color header if we go into our array this is the color that we're trying to get so we're going into color header so as we pass it down we get the color of the header and that's what it's going to look like once it actually gets rendered so from here we also need to make sure we just add in some CSS because if there's no height or width you're not going to see anything here so let's go into this section right here let's copy that so the color class and then the hover effect and we'll bring this into index. J or index.css so we'll bring that down add this just below the add button and now it's time to actually render out the colors so this is going to be in the controls component so we need to import the actual color data so we'll import colors then the actual color component and then at this point we just want to map through all the colors inside of our colors array here and then we're going to render out each component so we'll just do colors. map and each color is going to give get a key which is going to be the color ID and then we want to pass in the actual object here so the data so we pass in the color component we render these out so at this point we should just see all those components inside of our controls so let's take a look at this so here we go we have our colors that looks good and now whenever we click on this let's make sure that the actual correct color is rendered out so if we zoom out a little bit let's click on Green we see color green and all the data if we click on purple blue yellow that's exactly what we want to see so that looks good right there okay so now we actually want to implement this change right here so first what we're going to do is now that we've lifted up our state anytime we select some kind of note so let's say we start the process and focus on the note or we click the header we want to make sure that that is the currently active note if that's the note then when we click it we want to make sure that that color is applied to that note if we haven't selected a note we just want to maybe create some kind of alert that says you need to select a note before you can change a color so back inside of our guide we're going to go ahead and go into our notes provider we're going to create the selected note state by default it's going to be null then we're going to pass this information down and in the note card we're going to add this to certain events like on focus and on Mouse down on that header so let's just do that so going into our context so note context let's bring this in We'll add this right here after loading so we have selected note then we need to pass this down here inside of our context data so we'll do selected note and set selected note so the first step is to set the selected noes so we'll go into our note card here so let's close all that out go into components let's go into not card and we'll bring this in from our context data which we have used maybe we haven't I thought we did I thought we used that here so let's just import use context so import use context and we're going to use the set colors so or set selected note from use context and then we'll bring in note context that's going to import note context and now let's see on Mouse down this is where we want to set it so we're just going to go ahead add this in right here and let's see do we want to pass in the full note so we're just going to go ahead and pass in the Note data so the Note data that's passed in as a prop right here we're going to take this so that's just going to be the No Object which holds the note information like the ID and all the other data that's stored in our database and we're passing that into selected note so if we bring this down here we also want to do this on Focus so let's see we have on Focus where we set the zindex we'll also make sure that the selected note is Select selected there and then once we set that here inside of our color component let's go ahead and actually console out the selected note let's make sure that this is actually working properly so we'll import use context and let's just get the selected note so selected note and we're getting that from note context it's so weird because in this component for some reason it doesn't Auto Import but it is correct so we just need to manually bring that in and we're importing that from context and we're getting note context okay so now instead of the color let's get the selected note so let's give this a test now so what we're going to do is let's just say note one and then we'll just say hello world for these let's make sure they're saved and we're going to refresh this because the note State won't update for the color change we only need the ID of the note so when I change this it's not going to change the actual data for the selected note and we don't need that so it's totally fine so we have note one and if I click on a color here we go we see the body data of note one and if I click on hello world so let's click on the header hit change now we see Hello World now if I just click on Focus for Note One any color that I click on is going to give me the active note here the object so really we only need the ID but we're going to get that actual note so that's exactly what we wanted now the final step is to actually change the color then we need to send that data to the database so let's go ahead and go into the next step so handle color change in section 8.1 what we need to do is we're going to create this TR catch so first of all I'm going to take this alert message right here and we're going to go into change color and I'm going to create a TR catch we just want to make sure that anytime we don't have a selected note we could also write a if statement here but this is fine we're just going to say you must select a note before changing colors now if we do have a selected note then what we're going to do is go ahead and go into the notes State here so we need to import that and we're going to search for where this note is inside of this stage so we want to find the index then we we want to be able to actually update the Note based on where it's at and resubmit it and then send the update to the database so first step is to find that so we're going to go ahead and create a new variable called current note index and for this we're going to use the find index method and inside of this function first thing we're going to do is go ahead and take the note on each iteration then we're going to create a function here and we're going to say if the note. ID is equal to the selected note. ID so that means we found that specific note if we have it go ahead and return the index so this is going to be 1 2 3 4 5 however long our array is and where that note was that's going to be the value of current Noe index so we find that that's the first step here now the next step is to go ahead and create an updated version of this note so we're going to call this updated note and this is going to be an object so we're creating an entirely new object for this note we're going to take that note that we found we're going into the notes array and we're going to use the current index of the note so we're basically using the spread operator to create a new object get the original Note data pass it through this object and then specifically we want to go ahead and update the colors here so we're going to do colors and that's going to be json.stringify and we're going to stringify the new color data so we're passing in the new colors into that note within that index and from here we can create a new array for our note State and actually have that updated so I'm going to create this new array called new notes and we're going to make a copy of the original notes here where we're using the spread operator that's going to create an entirely new array now with this new array we can actually update that so we're going into new notes we're going to take the current note index so we're taking that note and we're going to update this note with the updated notes passing in a new object to that note within the index and then the last step here is to go ahead and call set notes and actually update it so let's bring that in from our context we'll do set notes here and let's try testing this before we actually update our database so we'll pass in new notes right here and that should go ahead and completely recreate the state here so let's go ahead and try this let's select a note we'll hit blue we'll move that one we'll do purple we'll focus on that one we'll do green and that looks like it's working properly now if I refresh it the colors are going to go back so we just need to make sure that we update it so we'll go here after we set the new notes let's go ahead and call db. notes and let's make sure I updated or imported DB let's bring that in there we go we have the import db. notes. update and what we're going to do here is go ahead and take the selected note ID we want to know what note to update and we're just going to pass along the payload which is going to be colors and we're passing in the colors here let me just change this indentation and we're just going to stringify color instance right here so we have that and we pass along the new data so let's go ahead and test this and we'll select this note we'll change that to Green we'll focus on this one change it to Blue we'll even move this one go to purple and let's refresh it and and that's all working so we can now update notes we can reposition them change their colors and that does it for our application all right that's it for this video thank you for watching I hope you enjoyed it and you learned a bunch in this process and if you happen to build on top of this project and you want to share your links with me go ahead and tweet at me my information is linked up in the video description I would love to see what you come up with and the end results to your projects and to the free code Camp team thank you so much for having me here I really enjoyed being on the channel it's really really an honor and I hope to be back someday so with that being said see you all next time