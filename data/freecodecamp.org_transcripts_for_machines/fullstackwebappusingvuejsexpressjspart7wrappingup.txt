hey everyone i'm cody and welcome to part seven of building a full stack web application using vue.js and express.js so if you remember on the other one or part six we finished doing the bookmark logic so we can unset and set a bookmark now what we want to do is when we go to the browse page if the user is logged in we want to show a list of all the bookmarks that the user has inside some type of like table or whatnot so the first thing we're going to try to do is if you go to the view beautify docs so whenever this thing loads if i go down to components and i go down to i think there's one called data tables this is what i kind of want to display the bookmarks in so if you see here we could just do a nice simple table and they give us some example code of how to do that so basically just do v data table passes some headers some items and then you pass it something to the slot to kind of tell it how to display the rows so let's go ahead and try to do that so going back to our ui we need to go to our songs view component so i'm gonna go go ahead and just open up the songs index and then on the song index section it makes sense if we just go ahead and add another flex area so i'll just have the bookmarks be to the left so let's say be flex and close that out and then here let's just assume that we have something called song book marks maybe keep it consistent with songs so songs hyphen bookmarks so of course that would assume that we actually have a view called song's bookmark so i'll say songs book marks and make that go ahead and scaffold that out so we have a blank thing to start with and of course here we need to say songs book marks and include that and include that down as a component so this song's bookmark component is basically going to do a request to the backend and get all the bookmarks that the user has and then it also needs like the songs that are kind of associated with that bookmark so before we get started with that let's just go ahead and kind of work out what the view is going to be so again i could probably do this in a panel so i'll do a panel and i'll say title is book marks go ahead and save this and make sure that this is loading up so let's see what i miss so going back to our i don't know i have that one loaded up going back to our songs index with a v flex i forgot to give it an actual like amount so now it should show up on the left over here unless i have some type of console log oh i forgot to put the k i i did boo mars instead of bookmarks so a little typo there but okay so now the panel's showing up it's not necessarily necessarily aligned to the left so let's kind of figure out why that's the case and that's because i'm using a column here so instead let's just do a v flex row cool so that's working and then here i think we should be able to do a class of margin left two all right so again the plan is to have all the bookmarks on the left and we have that left panel called bookmarks and inside that song's bookmarks component what we want to do is first following the beautify docs we can say v data table and define a v data table and then inside the data table you can pass a couple of attributes so i can say headers is equal to headers um pagination dot sync is equal to pagination and then items is equal to bookmarks so then of course assuming that you have those defined so i'll say data is a function which returns headers and returns pagination and then also returns uh bookmarks which is just gonna be an array of let's just say two objects at this point let's go ahead gonna go ahead and just hard code those and headers again is an array of what you want the text to be for your row or for your column and then the name of the key that you want to reference from your bookmarks data so in this case i'm saying value is title so that would assume that we have a title down here and then we'll make another one here and just say text will be artist and value is going to also be artist so which means we could just go ahead and make one called artist here input testing and then i'm going to go ahead and just copy this to have two example data rows that we can use and then for pagination pagination is just an object which a couple of options you can have so i'll say sort by and then date and then i'm going to say sort by descending true so that means it's going to sort all the bookmarks by the last time i've bookmarked them in a descending order so assuming i did not forget anything in fact i think i did the next step is you need to first define a slot or pass in the slot of what you want the table rows to look like so if i say template slot is equal to items so remember somewhere inside this b data table they defined a slot called items and we're kind of just passing in this template to them and then we need to define scope is equal to props so what we want to do here is go ahead and just define a td and i want to say the text is going to be on the right and that class text xs right is built into beautify in case you weren't aware of the docs and i'll make two columns for now so i'll do first column is going to have props.item.title and then the second column is going to have props.item.artist so i should be able to save this and let's see if there's any issues okay so i refresh the page and look here we have a data table with the title of our song and the artist so at this point if you notice that we kind of hard coded those um not the headers but the bookmarks here so what we want to do now is actually request from the back end the bookmarks for this user so i'm going to say async mounted and i'm going to go ahead and just say if the user is logged in so i think here i can actually say like let me go ahead and kind of modify or steal some code that we used in the other one so remember we use computed map state so here i'm going to do the same thing make sure we bring in the view x map state so we can access it awesome and then here we should just be able to say this dot is user logged in so if the user is logged in we need to go ahead and make a request to the backend for all the bookmarks that the user has so here i'll say user id and i'm going to pass it very similar to what we did here just like that so this should hit the back end and just go ahead and return everything that's for this user id and down the road we're going to be using jwt so we don't even need the pass user id because this is going to be an authorized endpoint but for right now let's see we can also probably map the user to our state and instead just say this dot user.id and of course don't forget to bring in the service that we're trying to use so up here i'm going to import it go ahead and save let's see so it is actually making the response but unfortunately it's returning null so we need to make a little bit of changes to the back end and i think that was kind of an issue that we had with this index method an index method should probably return an array and right now i'm doing fine one so let's go ahead and try to change that index method to instead of doing fine one we're going to do find all and then so if song id is passed in i think this will be set otherwise it won't even try to search for it so by making that change change at the bookmarks and bookmarks remember that this is going to break our bookmarks functionality earlier because i'm changing the back end but we'll make a mental note to go back and fix that but for right now we should be able to hit that back in and get an empty array back so here we get an empty array and then notice that we don't have i don't think we have all those errors in the console at this point and i guess we do let's see so let's see why that could potentially be throwing an error for us it might be because let's see first of all this could be an empty right now because we're fetching it from the back end and this seems to be working fine with the map state user because we're making the request two users equal one our user id is equal to one all right so this error says expected array got an object leads me to believe that we're passing something incorrect to items and again you know always make sure you read the errors don't just see an error and kind of ignore it sometimes i do that but i should just actually read what the error is um but of course this one's because i'm not grabbing the data i think soon i'm just going to refactor this so that i don't have to do data every time and just have the service do that for me because that's gotten that's kind of like bit me in the butt multiple times now um but yeah i think let's see go ahead and just refresh that page and hopefully the air is gone now and yep that was the issue and we're hitting the end point we're getting back no bookmarks for that user so i guess the first question is should we be getting back bookmarks and i'm pretty sure that we have been setting bookmarks but i'm not too sure so let me just go into one of these songs and verify okay so this one is bookmarked it has user id of one and song id of one so let me go back to the back end and let's verify what rec.query is because this one should be working just fine unless this is actually trying to search where this is equal to null or something let me refresh the page here so it's just user id is equal to one so instead of doing song id let's just see what happens if i were to comment this out and see if it does return information for us to make sure that this is the issue or not okay so that was the issue it did return the bookmark back to us and it's not running or anything because we haven't actually added some extra functionality so one thing i'll do now is we'll fix this in a second i guess it's trying to search undefined here so instead we should probably say like where is equal to user id user id and then just say if song id where dot song id is equal to song id then we're going to say where there so that it works for both instances but the important part is we want to get back the song that's associated with the bookmark so in sqlize something you can do is if you pass in another option called include you can pass an array of objects or models that you want to include that are associated to the bookmark so i can say include model song and up here i have song included so it should work and basically whenever this returns it's going to be an array of all the bookmarks and then nesting inside it will be the song information so here i'm just going to say map everything to bookmark.2 json and then i'm going to map it again and this time i'm basically just going to make a new object with the bookmark id so bookmark id bookmark.id so extend that with the bookmark dot song which is returned and again i probably have to include low dash so that i can actually use that extend method okay so let's test this one out and if we were to go i might want to indent this so we know this kind of attached to that i made more sense like that so if i were to go here and just refresh the page i should be getting back an array of okay so this is all this is the bookmark with all the song information related to that bookmark and now it's actually displaying here so that's kind of one way to do it i didn't necessarily have to do this whole mapping logic so instead if i wanted to just leave it as is so i'll go ahead and save that just to kind of show you what gets returned so in this instance if i were to make that request if you see here in the json returned we have a nested song object so we have the bookmark information and then we have a song object or attribute which has all the song information and i kind of just want the bookmark id in the song which is kind of why i added that whole like mapping stuff i mean maybe we could just change the front end to use this data as needed but instead i think it makes more sense to have the api just return the song that was associated with it as a flat object so again that's why i kind of added this extra mapping logic to kind of convert it all right so again that little side note that we added where our bookmarks are probably broken now we need to go back to the front end and go to that song metadata stuff where we have all that bookmarking logic so now instead when we do that request to set as bookmark i think this is actually going to be working just fine but and now instead is going to return an array here so if we were to let's see this should be an array it could be blank so i'm just going to say const bookmarks is equal to that and then if book marks that length i'm going to say this that bookmark is equal to bookmarks of index zero and that's just so that we can grab the actual bookmark because now this should be returning kind of a different object and then when we do the post request instead of this.bookmark.id i think we need to do bookmark id because that's what's being returned in the backend now and a little bit of code cleanup that i should probably do is also in map state here since we're trying to grab all that information we could just do this.user cool so let's double check that we did not break that functionality so again the bookmarks are working fine we go in here we click unset as bookmark and set his bookmark okay so we're having an issue again oh okay i know why so actually now when we post that's returning a bookmark back so maybe it would make more sense to not or to just overwrite let's see id with bookmark id because we already have song id so so here id is one bookmark id is 11 and i think that's our issue instead we need to have id is equal to 11. so where are my in my bookmarks controller let's see i think we just need to swap this um this order let's make a new object extend it with bookmark.song and then also extend it with the bookmark okay so let's try bookmarking just a couple of different songs so i'll go here to this abc one set as bookmark go back to browse it shows up here go back to the modest mouse one we can go ahead and bookmark that one go back to browse that shows up and then to test that we can unbookmark it of course we should go back to abc unset as bookmark go back to browse and that's also disappearing all right so i think at this point the bookmark logic or the book mark logic is completely done i'm not sure if this is the best way to do it but it works for now i think we can kind of move on to implementing a recent view so the last piece of functionality i'm going to do for this tutorial is adding another panel that shows all the recent songs that you viewed so that's something nice i think could be an app is as you're like viewing different songs you kind of want to have a history list of what you viewed so let's go ahead and just make a new panel here in the front end called recently viewed songs viewed songs.view and then let me just make this a little bit larger inside this we're going to do very similar logic that we did to the bookmarks table so again maybe it makes more sense to just copy this and paste it in here instead of bookmarks we could say recently viewed songs change bookmarks to songs and then i'm going to say instead of a bookmark service i'm going to say recent or song history service same thing display an artist in the title display or sort by the date let's see bookmarks we call that songs and yes this stuff should probably stay as it was before but instead of when we mount we need to instead of hitting that bookmark service we hit the song history service and grab all this history for a user id save this go to my services and the ui and just go ahead and copy bookmark services and rename it to song history service so when i inside inside here we don't really need to delete i don't think we have to delete history but in here we can make a index which is just going to give us back all the history for a user id or something so i'm just going to params params and for here we can do a post request to history and point and pass it some history data so let's go ahead and finish working on adding that to the front end so i go here i can say recently viewed songs is another component that we need to bring in and of course we need to use that so we'll say recently viewed songs here save that that should work fine it's okay we have a table now called recently viewed songs and of course no data is being displayed because we're making a request to i think history and that doesn't exist on the back end and before i go and implement that let's just go ahead and add some matching margin top to that so say class is equal to mt ii okay so again back end endpoint does not exist so we should probably go and create one and not only that the model doesn't exist so we need to kind of keep track of the history right so we're going to need another table so we can insert another row every time a user were to go to a page so to kind of make that make more sense maybe in the front end um if i were to go to the view song page so if i go to the index here when the user were to go into view we want to make a request to the back end to keep track of that song that they viewed so whenever they load a page such as song slash one we can just go ahead and make a request to that history service so i'll say import recently actually i forgot what it was called song history service so grab it grab the song history service and then here we can just go ahead and say song history service dot post and then we want to post the song id and of course the user id that viewed it so if you notice here we're doing some very similar logic with the state so i need to go here and just bring that stuff in so make sure we bring in map state so that we can get the user and then we can say this.user.id and then we can also say only do this i guess we did need that one right only make this request if the user is logged in the user isn't logged in we're not even going to show that panel and we're not going to have it send back that information and then for song id again we just do a song id here and actually maybe it makes more sense to have route come from there as well now someone left a comment saying it's bad practice to access the the state directly i don't know if that means map state is bad practice but i mean if they have a method called that map state if it's bad practice why even use it but hey this seems to make the code a little bit cleaner so recap again the moment the user were to hit this page so if i refresh this page it's going to make a request to that history service a post request to be specific so that we can keep track of the song that the user tried to view so now we can actually really go to the back end this time and the first thing we want to do is copy and paste bookmarks because history is going to be very similar so i'm just going to say history and then rename all this to history and then of course history belongs to a user and it also belongs to a song so if we save this we should be okay we can go to our seed um oops go to our seed project and we can copy bookmarks.json and instead of bookmarks we can name it let's see rename history and of course we'll just say that yes the user has seen this one and it has also seen song id of two and then go in here go ahead and just rename that the history rename this to history and of course you'd have to run this only after both the user and songs have been ran so it's going to go ahead and just say history copy and paste that i don't know if histories is even like can be plural but i'm just gonna do history with an s at the end even though it's probably improper english or grammar or whatever but and this is also turning green i'm not sure if history is a key word in javascript i hope it's not but let's just go with it and see what happens so we have that model created we have the seed created at this point we should be able to run the scene to have the history stuff injected oops let me spell that wrong histories that naming convention is this annoying but okay so now that data should be there that table should be created and we should be able to access it sorry this is just bothering me i'm just going to do histories with an s so if we were to make a another controller actually first i'll make a route so inside here i'll say make a histories controller and do an app.get on histories go ahead and call the index method on that and then of course we want to have a post method so we can kind of create that history record go ahead and save that and then we don't actually have a histories controller so i'm going to rename this copied bookmarks controller to history's controller instead of bookmark just do history all right so again we need an index method and we need a post method we don't really need a delete method so we'll just go ahead and blow that away let's start kind of refactoring this logic a little bit so we probably don't need low dash so let's go ahead and get rid of that to start off the index method the user is going to send in a song id and a user id again we need to request where user id is defined and i don't think actually we need song id so i'm just going to say user id which means that we don't really need to do all this extra logic here and we don't need to do an include actually no sorry we do need to do include because we're trying to display the song information so i'll take that back we do need low dash if you want to do this whole like mapping goodness but but for now see histories basically we grab all the histories we map them and we extend them with the song that we got so very similar to the other logic and then we send that back and then for post we need to again yes take song id and take the user id we need to not worry about finding if one already exists because we're not this isn't like bookmark logic so i can kind of remove that code and here we can just say history equals await history.create and of course pass it the song id and the user id and send it back that object after it's created and errors error trying to create the history object cool so probably have a bug somewhere in here this could probably be cleaned up maybe but let's test this out just make sure that we did everything right we have those endpoints we have the model we have the controller and we have that seed data that can be used to run it so if we were to go back to the front end so let's go ahead and close out of all this and go back to the index let's see go back to recently view songs if we were to refresh the page so go here and refresh the page saying that the get request on history is not found and that's because this whole naming convention i probably should have named it something other than the history but like recent reasons i don't know but anyway let's just add an s to these just because they keep it consistent in fact i'm wondering how sqlize creates this table insert into histories okay okay so they add sqlize is adding ies at the end for us automatically and that's probably you know the correct way we should be doing it because that's proper english so i apologize for that i'm just going to do a really quick code cleanup here make sure that's all good go here make sure that's set correctly okay go back to routes okay so now it's named correctly and it's not bothering me more so let's see how this works out so when the app first loads it makes a request to the history's endpoint which you see here get requests on that user idea one the response is an array of two objects back so that's working as intended and then it's not being displayed correctly here so let's double check that we're setting that correctly so if i go back to the front end and go to the recently viewed songs song history service index it's probably because we're naming these bookmarks and it is expected to be called songs so again i'll just call that history is to keep it consistent save that see what happens in this page now hmm oops forgot to update that too cool so you see here now we have recently viewed songs down here which if i were to click something new such as like zzz you see it made a request to histories with the song id and user id and if i go back to browse that also shows up down here and then one thing to notice is that i think it's not sorting in the correct order and i think i just need to sort on created at date so let's go back to the ui and sort by created at and see if that fixes the order boom it does cool so same thing with bookmarks song bookmarks go back to the sort order sort by created at and then i'm going to go ahead and just bookmark zzz go back to browse and again z shows up at the top and then one thing to notice is that it's doing this twice so it might make sense to like run a unique call on the history list or something i'm not sure again we can probably go back to the histories controller and just do like invoke unique on it so basically lodash has a unique method which will just make sure that whatever set you pass in or whatever array or collection comes out is just going to be a unique set so no duplicate values so let's see if that does what we're trying to do and it doesn't i wonder why oh i know why because there's two different histories so i think we could actually do like unique buy and make sure we're unique in it by something else anyway i don't get too caught up on just fixing that little bug or feature i guess so i think that's good for history list and i'm gonna try to wrap up this tutorial really quick here so i'm going to implement the last part that i've been kind of holding off on and that is going to be the final part of the security using gwt um but okay so before we do that let's just go ahead and just do that whole unique thing just kind of again something else that's kind of bothering me so if i do unique buy which again is another method i can pass it in a collection and then lastly pass it in some type of function to tell it what needs to be unique so i'll say history and history.song id so basically return us a unique collection where the key is going to be the song id so if i were to save this and refresh this okay so we're only getting back three even though we have like viewed zzz a couple of times now cool so moving on to the very last part of this whole series we want to bring in a framework or library called passport which is very useful for using like facebook authentication or twitter authentication github whatever and it also has a lot of like of the default authentications so first of all let's just go ahead and go to the server and do an npm install save on passport and then we're also going to want to bring in something called passport jwt so with those two libraries we can actually start going in here and we want to set up the passport logic when the app loads so i'm just going to say require passport which means that remember i'm doing dot slash which means that there's probably a file at that location so we're going to assume that there's a file called passport in the main app and it's this isn't like necessarily how to how you have to build up your app but this is just how i wanted to do it because there's actually a module called passport we're going to include so it might be kind of confusing but bear with me so inside this passport.js app what we're going to do is include that passport library which is done installing and we're also going to we're going to need to include the user model from the models and there's a couple of things that you need with passports so the first thing is the strategy that you're going to be using so i'm going to include a jwt strategy which is basically going to be that other library that we brought in like this and then there's another strategy called extract jwt equals c passport jwt extract jwt so this isn't actually a strategy this is just kind of like a helper function okay so we've included those two things and now what we want to do is we can say passport dot use it's going to say module dot exports null just to be kind of explicit that this isn't really doing anything other than setting up this passport um object so on seven we say passport.use we need to pass it the strategy that we want passport to use and that strategy takes in a couple of options so the first option is jwt from request and we're telling it to use the extract jwt from auth header as bearer token and what this means is basically if someone makes a request that has the bearer token and the authorization it's going to go ahead and use that and then secondly we need to pass it some type of secret key so i'm going to say config authentication.jwg secret and i think i forgot to include config so i'll just say config is able to require config config and make sure we have that secret defined which we already do because we used it for creating the jwg token so basically this strategy is going to decode and verify that the token that comes in on this header is valid and during that whole logic we can just go ahead and pass the strategy yet another callback where we can do some custom logic to verify and return messages based on if the payload is valid or not so in here i'm just going to say try and then catch error if there's any type of error we can just go ahead and say return done new error false and i'll explain what exactly is going on here up here we can say the first thing we need to do is when we get a request we need to first check that the user exists in the database so i'll say user equals await user.find1 where id is equal to jwd payload.id and jwp or jwt payload is going to be whatever we decide to encrypt or to sign so if you remember in the authentication controller we sign the user and user has a dot id attribute so when it comes in and if it's validated or verified we can just go ahead and grab that id and say if the user does not exist for whatever reason we can just return a new error and false and then otherwise we could just return that user object uh see why is this throwing i think i'm just missing a close parenthesis yep so this may not make 100 sense right now i'm going to come back and kind of walk you through this one more time but basically if you pass back in the strategy and the second parameter the user it's going to set it for you on rec.user for you so basically this is the only instance where rec.user will be sent the other ones are going to result in errors but since we're going to do some custom logic we're going to add a folder called policies in fact where we have a controller called policies but i'm going to make a file called is authenticated.js and inside here i'm going to go ahead and just include passport and this is going to export a function which calls the passport.authenticate jwd strategy keep pronouncing that wrong jwt okay so again walking you through this basically we're going to be using this policy is authenticated and putting it in front of our routes and this is going to call passport authenticate with the jwt strategy which will make sure that it will call whatever the strategies we created and put here so again this logic is going to it's going to try to find a user if it exists in the database if it doesn't return an error if it does return that user and notice that we're doing error here in false and then null end user we can say error and user which are just being passed to this function here and of course we can say if there was an error we need to go ahead and just say res dot status of 403 authentication error dot send error message would be you do not have access to this resource or something like that and then otherwise the user is probably logged in not probably they are logged in and their user exists in the database and the token that they used is validated correctly against our secret that was defined in our config file here so that means that everything should be good and at that point if i can go back to whatever file is in we just call next so taking back what i said about passport we are going to pass in user here and our custom callback authentication logic is going to set direct.user for us because i didn't really like the way passport's default error was being sent back they weren't sending back a json object they were sending back like html code and if i want to purely rest like json api i kind of had to write this custom logic but anyway going forward how do we actually use this authentication endpoint and hopefully this doesn't have any issues with it but first step is we can go to routes and then some of the things that we want to authenticate include let's say the bookmarks right so if someone's trying to access their bookmarks so i could say is authenticated and of course i need to bring that in up here so i'll say const is authenticated is equal to require policies is authenticated so we want to authenticate this get request on the bookmarks to say hey the user has to be logged in they have they have to have a jwt token that's sent in it needs to be valid and it needs to be connected to a proper user id so if you remember before in that bookmark controller if i go to that controller here and go to index method we were assuming that user id was passed into the query string so at this point it makes more sense to instead set user id direct.user.id because that's coming from the jwt token which has been proven to be valid so we don't want to accept it from the query string anymore instead we just accept it from the user id and i think that should completely change and make this endpoint authenticated so if i were to save this and if i were to go back to let's say this let's see what happens if we try to refresh this to bookmarks let's see unknown authentication strategy.jwt um all right so it's kind of like debugging this a little bit and i actually forgot to do not user so basically this could be set to false which if you remember i think we we're setting it to false in a couple of these instances so again if there's an error or if this is not true or not defined we need to send back an error otherwise set rec.users you go to user and then call next so now if i were to refresh this page we get back an error 403 forbidden because we're not passing in an authorization header so at this point we need to add an authorization header to the request headers which if we were to go back to the client and then go back to that api function that i created we can go over here and i think we can just do uh headers let's see the tool ticks out of the way we can say headers and then we can say the type or name of the header so authorization and then of course we can just say bearer and then the token right so but the token remember is stored on the store in the state so i'm going to import the store up here so slash store store at least i think that's if i remember correctly yep so i'm going to import the store and instead of store or instead of token i'm going to do store.state.token so now whenever that token is set it's just going to add it to the header here and i think if i were to go back here um we see that now it's passing bearer and the toll token there which means that now we get a response back with all of the let's say um bookmarks related to that user and just to show that we don't need the user id in this parameter let's just go back to the ui so i think the back end is at least done for adding the extra authentication for jwt but in the front end if we go to that song metadata which is here instead of sending user id we no longer need to send that because that's going to be extracted from the jwt token on the back end so i'll go ahead and save this and i think this is well all right so for set as bookmark and unset as bookmark we no longer need to pass in user id either so let me just go ahead and go to the routes for that and say is authenticated for post and also is authenticated for i think delete so then if i go to bookmarks controller for post instead of user id here we can say const user id is equal to direct.user.id and then for delete const.userid is equal to rec.user.id and then instead of doing find by id um we only want to find like this is a way to add some type of security into our controller we have the user id so instead we could say find one and then where we could do id is equal to bookmark id and then also we can check where user id is equal to user id if that makes sense so basically this will only return a bookmark if the user is trying to access one that they already have access to so i could say if not bookmark again return res.status.403 send an error saying you do not have access to this bookmark and otherwise you could just do an await and then destroy let me go back here make sure that seems like it's all okay so unsaid is bookmark works as intended set as bookmark it's also working as intended so those are working if i go back to browse let's see go that here set his bookmark make sure that still shows up cool so bookmarks are still working and now they're authenticated against the jwt token instead of the user passing in that user id inside of the query string in fact i think i still am doing that here so let me just go ahead and do some further cleanup try to find out where that's being passed in oh that's being passed in on the the index page so if i were to go to here songs bookmark we do not need to pass in user id here anymore let's go ahead and save that and go back and let's just refresh this we have fresh state so notice here we're not passing a query string in in anymore but we are passing in the authorization bearer jwt token and we're getting a response back um and then we should do the same thing for the recently viewed songs we should probably add some type of authentication over that so i'm going to go over to the back end to the routes same idea i'm just going to say add is authenticated to this endpoint and to this endpoint and then go into the histories controller and again we could just grab user id from rec.user.id because we know it should be defined only if this user was valid i think we're okay there and then same thing with this instead of grabbing it from the body let's just grab it from that rec.user id and return the same stuff so make sure the server restarted refresh the page let's see looks like histories is not returning anything now so let's see why so histories we are passing the token still and we're also passing user id in the query string so let's just go ahead and get rid of that because it's just extra stuff that we don't need to pass so user id get rid of that let's see and then the same thing with view when we go to view a song we don't need to be posting the user id anymore just the song ideas should be sufficient enough but okay so histories is returning a blank array which is not expected so let's go back to history's controller and go to the index method and let's just go ahead and print out what user id is set to so it's set to undefined for some reason um i wonder if rec.user is just not even defined either let me make sure i'm actually missing is authenticated wow that's kind of weird so i'm printing out the user and it's actually having like data values uh this is so strange let me print out two string to jason i mean all right so rec dot user dot id is equal to one but when i print out user id is undefined which is very strange because i'm not oh duh let me get rid of that all right that should fix it um let me make sure i didn't do anything stupid with the other one user id user id yeah so the main issue is i had this in curly braces so that was my bad all right so refresh this page now and we get back the recently viewed song so the histories is now returning something and if i were to try to view a new song it's doing a post request and that seems like it's saving correctly too and if i were to log out we wanted bookmarks and recently view songs to disappear but they did not so again we can go back to our ui go to the songs page let's go ahead and get rid of some of this stuff and basically here in this left panel we want to say v if and then is user logged in and then we could just go ahead and grab that view x map state logic so pull that in pull that computed thing in so now if the user isn't logged in those two should disappear and i want this thing to become a full 12 what's it called like 12 columns i guess so if i were to let's see all right so something else we can do here is if for whatever reason the user is logged in or isn't logged in we can go ahead and just bind a dynamic class to this so instead of saying xs6 what do we actually want to do let me indent this one is say put xs6 if the user is not logged in actually put a 12 they're not logged in and put a 6 if they are logged in so that should make sense that should expand to a 12 if the user isn't logged in which we see here and then the moment we log in over here testing gmail.com one two three six seven eight save that we now get two columns on the left or we get a column on the left of with six and then a column on the right of with six make sure this is all still working as expected all righty everyone i think that kind of wraps up the remainder of everything i wanted to work on i know i could probably continuously add on new features and functionality to this app but the the purpose of this series was just to give you a really good overview or not a good overview but a basic overview of how to use vue how you may want to use express an example way of how to build up your project how to organize it a couple of overviews about like you know npm sqlize passport authentication jwt view beautify view x for storing your state persisting your state to local storage so i kind of just hit all the different things that you might have in a real world full stack application but i didn't necessarily go super in depth onto all the different things you could have so a couple of ending remarks i kind of started out this video like kind of typing verbatim from a preexisting like app that i worked on but then as i went further on with the parts i kind of just started doing adlib so that's why we kind of ran into more bugs and you got to watch me do more debugging so i guess one question i had was was watching me struggle with debugging useful for you like was it helpful to see me go in here and like try to figure out okay why is this returning the status you know figuring out the console logs or would it just be better to just see the app created with very little bugs or debugging so let me know about that also let me know if you have any feedback or any suggestions of how i could have made my code better there's different things in view that i probably after this series i'm actually going to read the whole entire view documentation i'm going to read all the ux documentation probably read all the beautify examples and documentation because i didn't really do that before making this so it's kind of my bad but i didn't really have the time to do that but yeah feel definitely feel free to send me a tweet and give me feedback on how i can make this video how i could have made this video better let's see i don't think there's anything else i wanted to mention yeah i guess the last thing i mentioned is again this project is hosted on my github repo which is in the description below and feel free if you wanted to keep adding features onto this i will review the code and i'll you know give you feedback on like cool feature that you added or whatnot and i'll merge it into the actual branch so if you want to get practice doing a fork off of the repo and then submit a pr i'm not going to be like a really strict like i'll just read through it if it seems okay i'll just merge it in why not and maybe i'll grab it and just play around with it so again totally feel free to like try to add features onto this i have no problem with you doing that and also feel free to just grab this project and do whatever you want with it it's mit so um again i really hope this tutorial was really useful for you all i know there's a lot of places that i messed up on and i probably could have done better but again this was totally free tutorial and i didn't really have all the spare time in the world to make sure it was perfect so i hope it was a good overview i hope you learned a lot and i hope you will continue to learn how to program and build fullstack applications by yourself and make your own progress and feel free to uh ask me questions if you have any questions or suggestions again my name is cody seibert and feel free to follow me on twitter which is in the description below and be sure to look out for more videos on free code camp in the future and good luck and have fun on your latest programming endeavors all right have a good one you