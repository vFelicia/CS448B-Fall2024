hello everyone and welcome to a brand new python tutorial series so in this series i'm going to be teaching you the basics and fundamentals of the python programming language and we're going to immediately be applying those into our own project slash game so the idea behind this series is that not only do i want to teach you these concepts but i want us to actually apply them into a project so we can see where they're used and how we use them so at the end of this series you will have a complete finished game that you will be able to show off and the way that we're going to be making this game makes it really extendable and flexible so you can add your own stuff and really customize it as we go through so before i say anything else let me just note that this tutorial series is really for complete beginners this is for people looking to get up and running in python as fast as possible and in these next three videos we're going to be learning a bunch of different skills and syntax and then by the end we're going to have that complete project so let me show you an example of what this project could look like keep in mind this is just like kind of a smaller version of what it might be this is very flexible and we might make it a little bit different as we go through so let me run this and the type of project that we're really making here is a choose your own adventure game now in my opinion this is one of the best projects you can work on as a beginner because of how flexible it really is so let me just show you what it is and then you guys should get an idea pretty quickly of why this is a great project to work on so you can see it says welcome to my first game what is your name i'm going to put tim what is your age let's put 19 and says you are old enough to play do you want to play let's type yes it says you are starting with 10 health all right let's play first choice left or right let's decide to go left you can see that what's kind of happening here is these first steps we're just setting up in the game but now it's going to give me a bunch of decisions to make and based on what i choose at previous steps it will give me different decisions so i decide to go left here it says nice you follow the path and reach a lake you swim across or go around what do we think do we go across or go around let's go across so i go across it says you managed to get across but you were bit by a fish and lost five health you notice a house in a river which do you go to the river or the house so let's decide to go to the river and let's see you fell in the river and you lost so hopefully that gives you an idea of how this works let me run it one more time and i'll show you that there's different options that will pop up based on where you decide to go so tim 19 yes you're starting with 10 health let's play if i decide to go right notice that immediately i just lose right so there's all these different paths and kind of decision trees and branches that we can go down and it makes this game really cool because it's pretty simple to create obviously for beginners that's what we're going to be doing but it's also really cool and really flexible and you can kind of make whatever you want out of it so with that being said we need to get our coding environment set up here fortunately for us we're actually going to be using a platform called replit so it's repple.it so repl.it this is an online browserbased coding environment and i'm just going to walk us through how we can actually set this environment up and get started right away without having to download or install any software so as i mentioned we're going to be using an online coding platform called replit so it's spelt repl it that is the website url i will link that in the description as well but this is a free browserbased coding environment so what that means is that the only prerequisite for this series is that you have a browser and you have internet connection so to get started you need to go to this link and obviously sign up if you don't have an account or log in so i'm going to log in but when you sign up it's going to ask you to input your favorite programming language i would recommend you just select python it doesn't matter but that's just something that you will have to go through to get this set up so i'm going to go here to new rapple and i'm going to select python and give this a name now the name that i'm going to give mine is first game feel free to name yours whatever you'd like and then just notice that this will be a public rebel which means it'll show up on your profile and everyone can see it if you want to go for private rebels that is kind of a premium feature but i wouldn't worry about that we're not making anything that we care if someone steals so let's go create repple and let's boot up into our first environment all right so the first important thing that we need to understand is how we can actually print things and get things to show up in the console so before remember how when i ran the code we would see some kind of output right it said like do you want to play the game or it would tell us some kind of message so how do we actually go ahead and do that well the first command we're going to learn in python is known as print so all of the things i'm about to show you are pretty much called syntax syntax is really like the grammar of a programming language it's like where does the period go where do we have parentheses it's just the structure the way that we write the code and if you hear me use the word syntax that's what that means but the syntax to print something out in python is really simple we just put print we put an open parenthesis and a close parenthesis and then inside of the print statement we put a set of single or double quotation marks and inside of these quotation marks whatever we want to print to the screen so you can think of it as like we're printing a quote right if you wanted to say that although this is going to be referred to as something else that i'll talk about in a second and whatever is inside of these quotation marks that text will just show up in the console so if i say hello world the classic first program then let's run and we get hello world popping up in the console so this is the easiest way to print something out there's a bunch of other ways we can use this statement but again it's just print open parentheses and then you need these um these double quotation marks or single quotation marks it doesn't matter which one but make sure the set is obviously the same so you don't go like single quotation mark double quotation mark that won't work and then whatever inside of here that you want to print out so let's apply this now immediately into our project like i said the first thing we want to do in our choose your own adventure game is probably introduce the user or whoever is playing to the game right so what i'm gonna say is uh welcome oops if i could type welcome to my first game now you guys can obviously put whatever you want inside of here i'm just going to say welcome to my first game maybe you want to be more creative and put the name of your game although we might not even know what that is yet but don't worry we can always go back and change that all right so print welcome to my first game great so that is the print now what i need to talk about is variables and data types now this is a really important concept this is going to be a little bit more theoretical it's hard to apply this but we definitely need to understand this so inside of python we kind of have four main types of information or data so in our programming languages we have data right that's information that we're maybe gonna store that we're gonna pass around that we're gonna manipulate if you think of an application where we're just counting say we're just counting up well we're going to have to have some notion of like what the counts at right that would be an example of data that we're going to store in our program there's lots of examples of this but these data this data that we have has different data types and there's kind of four main ones that we need to cover so the first one is string the second one is int then we have float and then we have bull now a string which is represented by str i'll actually just type out string here so you can see it fully is anything wrapped inside of double quotation marks or single quotation marks so like hello is an example of a string hi is an example of a string 9 89 is an example of a string anything that's inside of double or single quotation marks is a string and strings are just a collection of characters they're just text right and usually we're going to use strings just to print stuff out to the console um there's a bunch of other use cases of them of course but for now that's what we can kind of think of as strings next we have ins now ins are any whole number so just the number they're not wrapped in quotation marks or anything like that just any whole number it could be negative as well that's totally fine it could be a really big number any whole number that does not have any decimal points is an int otherwise known as an integer so that kind of follows our understanding for math so hopefully that one makes sense next we have float now a float is any number that has a floating decimal point so if i have something like 6.0 that's a float because we have a decimal point and then something after we have a number like 7.5 that's a float negative 9.8 that's a float and negative 100.0 again if float so even if it's a dot o which technically is still a whole number right because 100.00 is a whole number if it has the decimal point anywhere it's considered a float and lastly we have a boolean a boolean is one of two values true or false so these two exact things that i typed nothing different about them so the capital t and the capital f is very important if you see one of these two things and you can see they're kind of highlighting in blue telling us their fancy fancy thing in the language and those are booleans so i'll leave this and what i'm going to call a comment which is actually interesting to show you guys so if i do three quotation marks and then i do another three quotation marks like this this is actually what represents a comment or a multiline comment inside of python this isn't super important to understand but what this means is that whatever i wrap inside of these triple quotation marks and i can put these anywhere i want this will just be ignored by my program so right now we're going to print this right and that's going to work fine but if i were to wrap this inside of triple quotation marks we can see it kind of gets commented out and now that means our program is just going to ignore whatever's inside of these sets of triple quotation marks so if i run my program i no longer am printing that out and there's actually another way to make a comment as well and that's to use a pound sign and what this does is simply comment at one line so it just comments out whatever comes after it on the line this sometimes is useful if you just want to comment at one line not a whole block of code like i've done here so i'll leave this down a little bit at the bottom of the screen and now we'll actually start writing a bit more code so there we go we understand data types now we need to talk about variables so variables are essentially a way of storing data now you can think of a variable like in math right where we had like x equals 5 x equals 7. that's a really similar way that they work here in programming and to make a variable just show you a few examples it's quite easy you simply pick a name for your variable in this case let's say x you put an equal sign and on the right hand side you put some data type or you assign it equal to another variable or some other things that we'll talk about later but essentially you put something on the right hand side that you want to be stored in the variable so in this case maybe i want my variable x to store an int which is uh the value 5. awesome there we go that's all i need to do to make a variable x that stores the value 5. now if i actually go ahead and write another print statement here which is totally valid we can write as many print statements as we want what's going to happen now is we're going to print welcome to my first game we're going to read the next line because we do read code top to bottom most times other than certain circumstances but you can think that when we execute the program we read from the top so left to right top to bottom that's just the way it works so then we we do this we set x equal to 5 and now what i'm going to do is actually print x now notice that i didn't surround x in quotation marks the reason i didn't surround it in quotation marks is because it's a variable so a variable is actually something that i can print totally fine right inside of the print statement because i'm not trying to print out the letter x i'm trying to print out whatever the value is that's stored in the variable x so in this case i'm going to print out 5 because x equals 5. so if i run this let's have a look welcome to my first game five awesome there we go we now kind of understand variables so of course i can store other things in variables too i could store the value true right this would be considered a boolean or a bool let's have a look at this now so now we print out true and that's kind of the basics on variables they can store things so you set a variable name equal to something now there's a few rules with our variables the first has to do with their naming so when we create a variable all we kind of have to do is just type something out and set it equal to something else but the thing that we type out or the variable name has to follow these rules it can only contain lowercase and uppercase letters underscores and numbers so it cannot contain any special characters other than an underscore and it cannot start with a number so something like hello one is totally valid hello one equals nine awesome hello one underscore totally balanced but as soon as i go one hello note you can see we're getting this red squiggly line not allowed we can not start a variable with a number but i can go ahead and do something like that that's fine i can put a number in between just follow those rules and typically you don't really use numbers in your variable names you're just going to use some text maybe uppercase and lowercase letters and in python if you want to do a space because there's no spaces allowed in variable names just use an underscore so something like hello underscore world this is the convention for making variables you separate anything that's kind of two words using an underscore so let's say hello equals nine right and then we can print out hello and we'd get the value nine now of course we can make a lot of other variables two we can say the variable yes equals and maybe it's equal to the string hello i can actually do something crazy and say hello equals yes now what that's saying is that hello this variable hello is equal to whatever is stored in the variable yes so in this case hello will be equal to hello funny right but that's how that will work so we can assign variables to other variables we can do something like hello equals hello plus nine totally fine and in fact what i'm going to do now excuse me is uh i'm gonna try to actually show you how we can ask the user for some input and store what they type in in a variable so now we're on to the next part which is getting user input so to get user input what that means is that in the console here we're gonna let the user type something in because right now if i run this you see that it says welcome to my first game and then the program kind of just ends after that ideally i would like to ask the user what their name is and store that in a variable so let's go ahead and do that i'll just print it out and then i'll talk about how this actually works so i'm going to make a variable called name the reason i've called it name is because it's going to store my user's name and usually we want to name our variables something that are meaningful and i've set that equal to input and inside of this here i'm going to put a string that is the question i want to ask the user so what is your name question mark now notice i did a little space at the end try to think of why i would have done this space in just a second but just keep in mind i did do this space just remember that so now what i'm going to show you is what happens when i run this program so let me move this over here let's zoom in welcome to my first game what is your name let me type tim alright so i typed him and notice that here the cursor is going and i can type stuff right into the console that's because i used this input key so what this says if i have input and then i put what's known as a prompt inside of here that whenever we read this line of codes when our program actually reads this it will say okay print this out and then wait for the user to hit enter so let them type something whenever after we print this out so on the same line as what is your name and then as soon as they hit enter we're actually going to take whatever they typed and we're going to store it in the variable name so if i type tim like that what actually ends up happening and i'll have to zoom back out here is that the variable name is going to be equal to tim because i typed tim and then if i type joe the variable name is going to be equal to joe because i typed joe so to prove that to you let me print out name because we can print out variables right so this variable should equal the name we typed in and then let's just print it out so let's have a look what is your name tim and there we go it prints out tim now notice i'm not just lying to you here if i type joe it prints out joe so we are grabbing and storing the user's name by using this input tag now the next thing i actually want to grab from the user is their age we're going to do a cool thing here that make sure they're a certain age before we let them play the game so let's say age equals input and then what do you guys think we should put inside of here well have a think about it for a second because i am about to start typing pause if you need to but i'm going to put what is your age and now what's going to happen is we're going to ask the user for their name then we're going to ask the user for their age and they're going to type both of those values in so let's run this and let's say what is your name tim what is your age 19. boom stops there we go now age will store 19 and name will store tim so if i want to show you those two things what i can do is actually print them out and i'm going to show you the last thing kind of for this video is how we print out multiple things on the same line so let's say i wanted to say something like hello tim you are 19 right so i want to print their name and then i want to print their age and i want to combine that with a few other words just to kind of welcome the user well how do i do that there's a few different ways to do it but the way that i'm going to show you is kind of the most common and it's something like this essentially you can separate anything that you want to print on the same line with a bunch of commas so i can do something like hello comma name and what this will do is print out the string hello that we've already talked about we understand we can print out this and it'll show the text then we'll print out whatever the variable name is so whatever's stored inside of there and this comma will automatically put a space in between them so hello space name where name will be equal to whatever we typed in then i can say hello tim you are and then i'll put age comma years old like that and there we go that's all we need to do to print out hello whatever their name is you are whatever their age is years old so we've just separated them by commas and now it'll print all those things out so let's have a look here let's go tim 19 hello tim you are 19 years old and let's say um actually let's just leave it like that for now i got rid of some of the comments i had below and we've just left this now and what this program does at this point is just welcomes us to the game asks us for our name and age and then prints out the name and age of the user so whoever typed that in now what i want to do here and there's a few things we're going to have to learn to be able to do this is check if the user is old enough to play our game so i want to check if they are you know older than 18 or if maybe this game is pg13 or something right that's what i want to make sure that they're the correct age before we actually prompt them you know do you want to play so before we let them start playing we want to check that they're older than a certain age so how do we actually do that well that leads me to an important thing called conditions so first we need to talk a little bit about arithmetic so arithmetic is just math there's four main operators in uh are not four sorry there's actually more than four there are some main operators inside of python that allow us to do arithmetic arithmetic is just math right so we have the asterisk the star the plus the minus and the modulus now there's also a double slash 2 which we'll talk about very briefly and these are important these are the operators for math operations so the asterisk is multiplication the slash the forward slash is division the plus is addition obviously the minus is subtraction the percent sign is actually modulus which gets us the remainder of a division i'll show you and the double slash stands for integer division so these are the main operators that we can use and i just want to show you how we can do some basic math uh just so you have that skill if you need to use it we may not use it in this kind of project but it is something important so i figured i'd show it so let's say we have the variable x equals 9 and y equals 8. what do i do if i want to add x and y well i could do x plus y right that technically would add them but i want to store that addition somewhere else so just something important to understand is that when you do something like x plus y this does not assign x to 17. it might make sense right if you say oh x plus y you might be saying like oh add y to x i could understand why that may seem logical to some people but this doesn't really work in programming when i do this all that happens is this gives me a value 17 but it doesn't get stored anywhere so what i need to do if i wanted to say add the value y to the variable x is do something like x equals x plus y now i'm going to say the variable x is equal to whatever the previous value of x was plus y that will actually do that addition for me now same thing if i do this so plus equals is a shortcut for what i just showed you the people that made python know that a common operation is to add one variable to another so rather than having to rewrite you know x equals x plus y you can just do x plus equals y which stands for x is equal to the addition of x plus y right that's pretty much what that's doing so that will assign the value of 17 to x if you did something like that now when you're doing arithmetic the order of operations apply so let's say i have a variable z and i said z is equal to 9 times or not 9 times 8. x asterisk y plus y well the order of operations that we know uh will follow which means this multiplication will happen before this addition now let's say we didn't want that and we wanted to you know change the order of operations well we could use parentheses like we would in any other map or any other programming language or math or whatever and then this will follow so we will do the parentheses first now these are the common operations right so this is multiplication that's division uh now i'll just show you the kind of two or three ones that you might not know so the exponential operator which i actually haven't shown it is the two asterisks so when you do two asterisks that stands for raised to the power so x raised to the power of y plus y so whatever that would be so 16 i guess and then the other two operators i wanted to show you were the mod operator and the integer division operator so the mod operator what this does is get the remainder after division so if i say x mod y this is actually equal to 1. now the reason this is equal to one is because the way you do this is you say okay how many times does eight go into uh nine how many times it goes in one time fully right it goes in one full time what is the remainder what after you take that eight out of the nine well it's one right so if you do nine divided by eight you get one point something but really it's one remainder one that's the way you can think of it so like if i had say five and two then the mod again would be one because you say how many times does two go into five well it goes in two times okay so what is that that's four let's take four out of five okay what's the remainder now well there's one left so that's remainder one it's pretty straightforward that's how that works whenever you do something mod 1 obviously the remainder is going to be 0 because 5 can be divided by 1 perfectly fine and if i did something like 0 mod 1 then that would be equal to 0 because 0 does not go into 1 at all so what's the remainder 0. i hope that makes sense that's the mod operator for you it's not super important so i won't spend too much time on it and then we have the integer division so integer division is two slashes and this is kind of the opposite of mod it doesn't give you the remainder after division it gives you the whole number um division or the whole number quotient i think is what it's called so if i do 5 divided by 2 how many times does 2 evenly go into 5 well it goes in twice so the integer division of x by y is going to be 2 right and then if i change this to 7 same thing so how many times does 2 go into 7 well it goes in 3 times so the integer division would be 3. that is the basics of those mathematical operators just in case you need to use them i felt they are important to show now with those operators there's also a bunch of other operators too we have a less than we have a greater than we have a less than or equal to a greater than or equal to and is equal to and then not equal to now these are what are known as our comparison operators and this is how we actually check equality between different things you know you might imagine that it's actually pretty important for us to for example check if someone is older than a certain age so if we wanted to check if the person's age was older than 14 we would have to use one of these operators to do that now this is where we start talking about booleans i'm trying not to go too fast here but again i really do want to get to the project but some of these things are pretty fundamental to go through so actually can i type in here let me just see if this works ah perfect so i'll actually do some stuff in the console for us and don't worry i'll zoom in quite a bit so you guys can see this all right so zoom zoom zoom okay and now i'm just going to do a few examples of what we call conditions or boolean expressions so remember i showed you that type before that was bool right that doesn't matter that you see that but it was a bool and those were the values true or false right so when we use these conditional operators so that greater than that less than the less than or equal to the greater than or equal to the is equal to the not equal to when we use those whatever we put on the lefthand side and the righthand side will be compared using that operator and we'll either get a true or false value so if i said something and this is like a really common example 3 is less than 4. well what do you think right if i tell you this is going to be either true or false so it's going to be one of those boolean types what do you think this would be well of course that's true because 3 is indeed less than four right and then if i swatch uh switch this around i say three greater than four well we get false because three is not greater than four so this is the basics on how these conditional operators work and i can do something like you know 45 less than or equal to 45. now is this true or false well that's true because the way that this works is it checks if the value on the lefthand side is less than or equal to this value right and that's kind of the basics on how some of these things work now let me see can i clear there we go awesome let's hit enter here and see if we can start typing now the important ones that we want to go through though are comparing for equality that's something we want to do a lot of time so comparing numbers using the less than and greater than signs that's pretty easy i think that makes sense to most of you you know it's either true or false you can read it and pretty well figure it out but sometimes uh when we have checking for equality it can be a little bit different so if i have something like 5 equals equals five what this is what this says is is five equal to five so what i did before right when we made a variable we could do something like x equals five and that is an assignment that means we're assigning five to the value x but if i go x equals equals five what i'm asking is is like is x equal to five the two equal sign is like a question mark almost like is this true give me the result whereas the one equal sign is an assignment you're telling x that yes it is equal to 5. so if i say x equals equals 5 we get the value true right and in fact what i can do is make a variable called y let's say y equals 5 and i could say x equals equals y and we'll get true all that happens when i use the variables here is it will just check what their value is so we've assigned their values here and it will compare their values and tell me if that's true or false so that is the very basics of how we can use that equality so equals equals and then there's one more which is the not equals two and what this does is tell us if two values are not the same so whatever the result of the two equal sign would be it's just reverse so in this case x is equal to y so since they're not equal to each other or since they are equal to each other then not equal to will give us false right so if we look at false it says no these actually are equal to each other so we're getting false for the not equal to operator i hope that makes sense now lastly we can compare strings right so i can do something like hello equals equals hello and boom that works fine that's totally true but what happens if i try to do this hello equals five no we cannot assign oh sorry not hello equals five hello equals equals five what am i saying we get the value false right so we c when we compare different types like an int and a string together obviously those aren't going to be the same and what if i actually go ahead and do something like this 5 equals equals 5. well that's false 2. so even though these values are technically the same since this is a string and this is an int we're going to get false so that's very important that when we're checking things they are the same type because if they're not then we're going to get errors like this where they might actually be the same value but it's not showing up as the same value so i'm hoping this is making sense of course we're going to go through more examples but last thing i'll show you is that when i do like hello equals equals hello do we think this is going to be equal or not if you have a look at it yes no what do you think let's run this we get false so whenever there's any capital letters that really matters so just make sure you understand that the types really matter and the capitalization matters as well and i'm going to show you ways that we can deal with that because you could imagine like if we're checking to see if the user types something in we want them if they type it in with a capital letter or not with a capital letter we still want that to work right we still want to check and see that that value is uh is what we want it to be equal to so anyways that was kind of the theory that we needed to go through now let's get it into the project and start working on it apologize if that was longer than uh than anticipated all right so what did i want to do i wanted to check if the user's age was over a certain value so what i need to do is i need to write an expression that pretty much checks if age is greater than you know some some value right so let's first of all check this let's print and we're actually going to go and we're going to say is underscore older so i'm going to get a variable called is older i'm going to set that equal to age and we'll say age greater or equal to 18. so what this is going to do is it's going to assign whatever the value of this expression is so this will either be true or false to the variable is older and then i'll print is underscore older just like that so this will just tell us true or false and let's actually have a look at what we get here because it might surprise you a bit so let's run this and let's have a look at what we get so let's go name tim age 19 and we get a bunch of red text this is our first red text that we've seen so this is an error message i did this purposely and i want us to read what actually happened here and see what line it happened at so that we understand what happens when we get an error message so if you see this red text don't worry it just means you've done something wrong uh you know could be well it definitely is your fault because you typed it but you can definitely figure out what's wrong just by reading through this error message quite easily so you can see it says traceback most recent call last you know don't worry about this gibberish if it doesn't make sense that's fine what you're really looking for here is the line number the actual line where the thing went wrong and then what the error was so in this case it says file main dot pi so that's the file we're working in line seven okay so line seven this is the expression so is older equals age greater than or equal to eighteen and then type error greater than or equal to is not supported between instance of string and int so what that actually means is that this age variable here is a string and this here on the right hand side is an int so i cannot compare if the string like because imagine if i had a string like you know hello i can't say hello greater than or equal to 18. that doesn't make any sense i can't do that and since age is a string we can't do that but what why is age a string didn't i type in 19 that's weird well by default whenever you type something in using input it automatically comes in as a string so even though i typed in 19 like this and i didn't put the two quotation marks around it it automatically looks like this inside of my program that's just the way it works because this input doesn't know what we're going to type right so it has to just assume it's going to be a string because a string can hold anything inside of it so long as it's wrapped in the quotation marks so that's why we have to do that so anyways that's what we do and yeah so we now need to actually find a way that we can convert this age to an integer so we need to take that string value and we need to convert it to an int so that we can actually compare these two things so the way that i do that is i write int and then i wrap the variable age with this in so i say int open bracket close bracket around h now that says whatever this age is is so whatever number this age is because in this case it's a string that's 19. let's just strip out the number from that so get rid of the quotation marks and make this an int value so now if i say is older equals the int value of whatever the age is so take those quotation marks away just make it an integer and check if that's greater than or equal to 18. so that's this will work now so let's actually have a look at this so what is your name tim what's your age 19 hello tim you are 19 years old and then it says true so that totally worked and that was fine we were able to convert the string that we typed in into a number so just keep that in mind if you're asking a user to type in a number then you want to make sure you convert whatever they typed into an integer so that when you want to compare it or you want to use it it's actually an integer value and there's another way to do this i can type int around the input statement up here and the reason this works is because this is pretty much doing the exact same thing we're doing down here except now we're going to actually assign an integer value to the age variable rather than just convert the age variable later on to an end so it takes the input whatever the user types in and then immediately just converts it right into an integer and now i can remove this and this will still work because this is being converted to an integer immediately so let's run this let's say what is your name tim what is your age 19 and now we get hello to him you're 19 years old true all right so we've covered a lot of stuff there's one more thing to go through and this will be kind of the most exciting thing we do so far so i'm excited to do it and this is called the if statement so right now we just printed true but ideally you know i want to give the user some different messages based on if they're old enough or not right i don't want to just print out true so how do i do that well this is where we use the if statement so you've seen that we make these little conditions right by using these conditional operators and these are either true or false now the reason we use these is because we can use them inside of an if statement so actually what i can do is i don't need brackets but i'm going to remove this variable is older and i'm going to take this age greater than 18. i'm just going to kind of code something out and then i'll talk about how this works if we could get this typing right you are old enough okay so what this is saying is this is an if statement what the if statement does it says if the condition here is true do this that's as simple as it is you literally read it like plain english you write the keyword if so if you write some condition here whatever you want to check but this needs to compare or it needs to be true or false so this needs to evaluate to true or false and then you put a colon it's important you add the colon then down here you do a tab right so you tab in so one indent level and whatever is inside of this indented block underneath the if statement will happen if this condition is true if it's not true it will simply skip whatever's indented and just keep moving on in the program so i'll just show you because i'm going to print this twice just so that this makes sense so i'll print this two times so now if the age is greater than equal to 18 we'll print you're old enough twice so let's run this and let's go ahead what's your name tim was your age 19 hello tim you're 19 years old you are old enough you are old enough so that is exactly how that works now there's one more component to show to this and i think that was easy enough hopefully that makes sense it's just if you write some condition here and then if that condition is true you go ahead and you do whatever's in this block now what about if they're not older than 18 right so if i run this again and i say what is your name tim 19 hello tim you're an uh well i should i should have selected an age that was younger let's do tim 17 hello tim you are 17 years old what if i want to tell them that they're not old enough to play well i could do another if statement right i could do if age is less than 18 and then i could print that out there's actually an easier way to do this and this is using an else so this else statement kind of combines with the if and whenever you write an if you have the option you don't have to but it's up to you if you want to put an else statement afterwards that tells you what to do if this condition is not true so essentially this is saying if this is true do this otherwise do this and now we're going to put another indented statement and we're going to say you are not old enough to play dot dot so let's try this now and just see how this works so let's go tim let's go 17 and now it says hello tim you're 17 years old you are not old enough to play whereas before it told us we were old enough to play so that is the basics of the if statements we have the if and the else now i'll show you one more thing with the if statement and then we'll kind of start the very beginning of our game and then continue the rest of it in the next one but we've almost learned pretty much everything we need to know so now we're going to go else if so ellis if is another statement that we can use and the way that this works is essentially we're checking for one more thing so let's say we had three options right maybe if they were younger than 14 um they just couldn't play if they were older than 14 but they had a parent with them they're allowed to play and if they're older than 19 they could play along maybe those are the three options we have so what i could actually do is i could change this around a bit and i can say if age is greater than or equal to 18 you're old enough to play then i could say else if so if this isn't true but this is true so what i put here age is greater than or equal to 14 then what i can do is print you can play with supervision or something supervision okay so now what i'm saying is uh what is this sorry not elsif this should be el if i'm coding another language here sorry not elsif l if e l i f apologize about that but l if then you put the condition and then whatever you put in the indented block below that will happen if this is not true but this is true so i hope that makes sense but it goes like you know check this if it's true do this and skip the rest of it and then if this is not true check this if this is true do this skip the rest of it if this is not true go into the else and do this that is kind of the way that this works and you can actually put multiple l if statements uh underneath each other so you can do if l if l if l if l if else and these again are all optional but just remember that the else always comes at the end the lfs go in between and that you can have as many of them as you want but you don't need to so that's an important thing but let's just have a look at what happens now and say what is your name tim what is your age let's do 15 and now it says hello tim you're 15 years old you can play with supervision so that is the basics of the if elif else now let me scrap this actually i won't scrap this but i'll get rid of the else if and let's leave it at this for now because it's going to say okay actually we'll add one more thing to finish it up if age is greater than or equal to 18 print you are old enough to play and now what i want to do to wrap this up is ask them a question do you want to play so if they're old enough to play let's ask them if they want to play and let's do that inside of here so only if they're older than 18 and they're old enough to play then i will ask them if they want to play otherwise i'm not going to so inside this if statement i'm actually going to say you know wants underscore to underscore play you can name this variable anything you want i just like to make mine descriptive i'll say input do you want oops do you want to play now i'm doing a space here just so that when they start typing and i forgot to mention this in the last video when they start typing it doesn't get squished right beside the text so i just add a space afterwards and it makes it a little bit nicer but wants to play equals input do you want to play and now i'm going to check if they want to play so i'm going to say if and i will actually say wants to play equals equals yes so if what they type in is equal to yes then print let's play exclamation point so i know that was a lot let me zoom out a bit here just so we can read this a little bit easier and now let's run this program for the last time before we wrap up this video so what is your name tim what is your age 18 hello tim you're 18 years old you're old enough to play do you want to play let's type yes and it says let's play awesome let's run this one more time what is your name tim what is your age let's go younger than this time so let's go 17. hello tim you're 17 years old you're not old enough to play so i hope this is starting to make sense but i'll just give you a really quick summary so we welcome the user we ask them for their name and their age we convert their age right away to a number so that we can actually compare it later on we then say hello whatever their name is you are whatever their age is years old we then check how old they are if they're older than 18 we tell them they're old enough to play and then we ask them if they want to play if they say yes so if they type in the string yes we print let's play otherwise we tell them they're not old enough to play and that is the very beginning of our game and i hope you can see what's going to happen here in the future right so when they want to play now what i'm going to do is inside of here i'm going to ask them their first question so i'm going to say okay you know your first decision is do you want to go left or right or we'll make something up and we're going to keep kind of chaining inwards and nesting if statements together just to make all these blocks with all these different decisions and you're going to see it's going to get pretty intricate pretty quickly but i think this is pretty cool and right now you've learned almost everything you need to know to make this full game so the first thing i'm going to do is just kind of recap and just kind of run this program and see what we actually have so far so we know where we're going from here so welcome to my first game what is your name my name is tim what is your age 19 hello tim you're 19 years old you're old enough to play do you want to play let's type yes like that and boom it says let's play awesome now i just want to show you a case that we may not have considered yet so if i do tim 19 and do you want to play now what happens if i do something like this so y capital e s well i'll give you guys an opportunity to take a look at it if we have our condition here right so we say wants to play equals input do you want to play and we say if wants to play equals yes let's play so do we think when i type y with a capital e and then s that this is going to work well no it's not so if i do this it actually doesn't this if statement is not true this condition is not true and therefore this doesn't run so how can i actually go about and fix that well this is the first thing that i wanted to show you and that i guarantee you guys will find very useful for the rest of this kind of game and anything in the future there is this method and it's called a method that's it's not that important you don't have to understand what that means uh called dot lower so it actually looks like this dot lower and i'm typing it in the correct place here but what this does is it takes any string and immediately converts it into lower cases so all lower cases it takes any letters it has and just put it puts it to lower case so this is really useful because what we can do is we can take the input that we typed in immediately convert it all into lower cases and now when we want to check for equality it doesn't matter what capitalization we used in the string it will still be true because it'll just automatically go to lower case so we could type capital e and that will still this condition will be true and we'll still do let's play so in fact let me show you so notice i just put dot lower here and guess what there's actually another method called dot upper that we could use as well and dot upper will make it all uppercase so if we wanted to do this and make this all uppercase and then make this dot upper same thing right so i'm hoping this is making sense but essentially whatever you're going to compare here is going to have to be in all lowercase or all uppercase and that's going to correspond to whether you use lower or dot upper all right so let's run this now and let's see what we get so what is your name tim what is your age 19 do you want to play y e s okay so we have a capital y and a capital s and let's play that still works fine so that's cool i think that's an important method to know that's pretty quick so i just wanted to show that to you guys and now let's actually start building a game let's start making something cool and then we'll implement like maybe a health or some other interesting things into our game that i didn't have in the demo game so the first thing we want to do is actually i'm going to add an else statement here and i'm just going to print sia dot dot so if they don't want to play we'll simply tell them you know goodbye like see you later and then inside of here if they want to play so notice i'm nesting all these things right like there's an if and else inside of another if statement and that's totally fine because all the if statement says as well if this is true do whatever is indented and here we are and then inside here this if statement says if this is true do whatever's indented right so we go ahead and do that so what i'm going to do in here now is i'm going to ask another question and this will be the first decision that we want to make so i don't know what i want to make it i think i'm going to go with the classic do you want to go left or right just as our first kind of path but you guys can make this whatever you want and feel free at this point to kind of change around some of the stuff that i'm doing and make it your own so long as you understand what's happening so i'm going to say left underscore or underscore right equals input first choice dot dot dot left or right now it might be a good idea in your game to put brackets at the end of your answer and just put inside of the brackets what the user should type so left or right because technically right they might not know like they might type i want to go left or i want to go right so it might be a good idea to just put brackets inside of the prompt just so they kind of know what options they have like what they can actually type right and then what i'm going to do after this is i'm going to check if left underscore or underscore right is equal to left this will be my correct decision if i go left then what we'll do is we'll print something or we'll do something otherwise we'll we'll just print out to the screen u fell down and lost dot dot you can see i'm not super creative when it comes to making these games but the idea is i'm just trying to show you how the paths work um so this is like if they lose so if they decide to go right or they type anything other than left then we'll print out you fell down and lost otherwise if they go left then what i'll ask them is another question so say okay if they go left they're going the right direction so let's ask them another question awesome and in fact inside of else i don't even have to make them lose i could ask them another question in here too right we can make it as confusing as complicated as we want and make it really hard for the user to figure out what way they're kind of going so they have to play the game a bunch of times so anyways let's go here inside of left and let's say i'm just going to put ans that's short form for answer that's what i usually end up doing as we get longer and longer rather than making these variable names but i'm going to say ans equals input nice you follow the path and reach a lake do you swim across or go around question mark and then inside of here i'm going to put a cross as the answer right is that a cross i don't think you need two c's so across or around just telling them what they can type in right and now i'm gonna have to zoom out a little bit just so we can read oh that's better okay and now inside of here what i'm gonna do is i'm gonna check what their answer was right so i'm going to say if ans is equal to and maybe we'll say that going across was the correct answer actually let's say going around was the correct answer so if a and s equals a round then we'll do something and then we'll say l if so i'm actually going to switch it up here just to show you something else l if um lf ns equals equals across and then else so the reason i've done this is because what i actually want to do right now is i want to make it so that if they type across or they type around both options are correct they can go both way but both ways will lead them to different types of decisions right so we'll get asked now different questions inside of here but if they don't type around or across right then i want them to lose so i'm just going to go down here and say print you lost again i don't have really good like you know lose messages but that's totally fine and then inside of here in round what i'm actually going to say is that one of these options is better than the other so here is where i'm going to implement something that i hope is you guys will appreciate because it is a little bit more complicated but i want to show you how we can do something like this if they decide to go across the lake i'm going to kind of make up a story and say they got bit by something and they lose health and maybe we'll put something inside of here that checks you know what their health is so if their health goes lower than zero then they lose right then they lose the game completely i think that'll be interesting to do so let's do something like that so if i want to keep track of health right and maybe we set them off with like default health of one or default health of 10 or something and they lose health we'll need a variable to store their health and then we'll need to subtract from that variable so what i'm going to do is on line 7 i'm going to make a variable called health i'm going to set that equal to 10. so they could technically have 10 health and we'll tell them how much health they start with and how much health they lose so maybe to start we'll print out you are starting with and then in this case comma the number and then comma health so you are starting with 10 health that'll print out 10. the reason i put health here instead of 10 is because if i change this number maybe i change it later to 15 20 something like that i want this to automatically update i don't want to have to rewrite the number two times it's better just to have it stored in one place so that's why i've done that so we've definitely have a health and we'll say if ans equals around um then you know whatever if a and s equals a cross then we'll print something else in fact actually what we can do is something cool here and i'm going to get rid of the else and just just change this a bit so i'm going to say print and inside of here i'm going to put you went around and reached the other side of the lake and then here i'll print you managed to get across but were bit by a fish i don't know let's just say that you were bit by a fish and lost five health so i'm gonna tell them that they lost five health here and then what i'm gonna do is because they lost health and i'll put some periods here is i will say health minus equals five so we'll just you know remove five health from their health so now they only have five health and now what we can do down here is we can ask them another question right and we can keep going and in fact what i'll do now is i'll pause and we'll run this just to see where we're at right now and then i'll just kind of keep going and just coding out my version of the game just showing you guys some different cool things that we can do and hopefully you guys take this upon yourself to make your own cool game right and change the paths and decisions and this will be like really good template for you to figure out what to do so let's run this and let's go what is your name so my name is tim i'm 19. hello tim you're 19 years old you're starting with 10 health you're old enough to play do you want to play so actually maybe i should put the hell somewhere else this is great so i tested i realized something was wrong so now i only want to tell them how much help they have right if they're older than 18. so in fact let's get rid of this you know telling them what they are i don't need that anymore and then after we ask them do you want to play we'll print out you're starting with 10 health let's play and we can leave the health defined up here it doesn't matter where we have it but we'll just put it here so that we can access it throughout all of the stuff down here great so let's run this now and let's zoom in a bit it says what is your name tim what is your age 19 uh you're old enough to play do you want to play yes you're starting with 10 health let's play first choice left or right so where should we go let's go left nice you follow the path and reach a lake do you want to swim across or go around let's go across and it says you managed to get across but you were bit by fish and lost five health so you can see that the game is actually working right and we'll run it one more time just to test out another path so tim 19 you're old enough to play do you want to play yes first choice left or right let's go right you fell down and lost boom so the game is functioning okay so let's keep going and let's add some more stuff into this so health minus equals five so now we're at five health now what i'm gonna do here is we'll have to do something to check if they are lower than zero health right so they'll be at some point where they could potentially lose all their health and if they're at lower than zero health or they're at zero health then we'll have to tell them that they lost so that's going to be interesting to do actually but first let's just ask another question so let's say announce equals input and inside here what do we want them to do next maybe i'll tell them that i'm going to take an example from my previous game i'll say you see a river and you see a house do you go towards the river or do you follow the house right or other way around you go towards the house or do you follow the river okay you notice a house and a river which do you go to and then again i'll give them what they need to type in here just to make it easy so we'll say river slash house and make sure we add a space here in between the question mark and the end of the quote just so there's a a space when they're actually typing it in and now let's check if ans equals equals in this case house then we'll do something else we'll do something else so what i'm actually going to say here this will be kind of an interesting little twist to this game i wasn't even thinking about adding is if they decide to go the river we'll just tell them that they like fell in the river and they lost okay and then if they go towards the house we'll tell them that they went towards the house but they lost five health because like the guy at the house hit them or something i don't know i'm trying not to be too uh too violent in these answers but the idea being that i wanted to make i want to make it so that they can get past this but if they decide to go across it will actually end up being the wrong decision because they lose five health right and then down here they'll lose another five so they'll lose the game i hope that makes sense but you'll see as i start coding it so if ans equals house then what we'll say is we'll say parent you end you go to the house go to the house and are greeted by the owner dot dot dot he doesn't like you and you lose five help why not all right we'll just go with that we don't need any more deeper explanations then we'll say health minus equals five so we're removing five health again that's equivalent to health equals health minus five so whatever the value of health is we'll subtract five from it the reason i wouldn't just set health to fiber i wouldn't just set it to zero is because we don't know if they lost five health above here so we need to make sure we just subtract that value and then else we'll print down here you fell in the river and lost dot dot okay so now what we'll do after this right so you can kind of see the way that i'm actually let's see here managed to get across so now actually inside of this if statement sorry i'm just trying to think of what we're actually going to do here on line 30 i'm going to check if their health is lower than zero so if they have lower than zero health because this will be the first point in the game where they could potentially be at zero health if they lost it twice then we'll tell them that they lost otherwise we'll keep going right and then maybe we'll wrap up the game with one more path or something so we'll say if health is less than or equal to zero then what we'll do is we'll print you now have zero health and we don't need a comma and you lose the game dot dot dot all right so there we go you lost the game actually we'll just do and you lost the game all right so if their health is lower than zero they lose otherwise then inside of here we'll say print you um have survived you win i don't know we'll just say that they win at that point and i'll show you how we can add some more cool things too all right so that pretty much wraps it up let's test this game a few times and make sure that everything's working fine uh and then we'll add anything we need to so what is your name tim let's actually test one if i go like 14 uh you're not allowed to play okay so let's go again tim 19 yes first choice left or right let's go left nice you follow the path and reach a lake do you swim across you go around let's go across you managed to get across but you were bit by a fish and lost five health you notice a house and a river which do you go to the river the house let's go to the river and you fell in the river and lost okay let's try a few more paths just want to make sure this works but i hope you guys understand the point of this right is to go down like all these different branching paths and you know if you make a bad decision at the beginning you're gonna have to keep going down all the roots until you realize that oh no i should have gone right instead of left right so you can make these really intricate and a lot of people that i've taught to do this before have made really cool games they're like hundreds of lines of code that take you a really long time to actually figure out so i think it's pretty interesting okay but first choice left or right let's go left nice you follow the path and reach a lake do you swim across or go around let's actually go across and let's test out this health stuff so we go across and then it says you know it's a house and a river so let's go to the house it says you go to the house and you are greeted oops i should probably spell that right by the owner he doesn't like you and you lose five health you know you now have zero health and you lost the game right so you didn't technically lose because you went to the um what is it because you went to the house it just you lost because you lost five health right now i'll show you the example where if we don't lose five health at the first step we can actually survive by going to the house so what is your name tim what is your age 19 do you want to play yes let's play first choice left or right so let's go left let's say nice you follow let's go around this time you went around and reached the other side of the lake you know it's a house and river which you go to let's go to the house and you go to health and you're greeted by the owner he doesn't like you and you lose five health you have survived you win so even though we lost five health we still won because in the previous step we didn't lose five health so i hope that me showing you the health thing gave you some ideas for some stuff that you can do what you also can do is you can ask you can do something like let the user pick a weapon or something right so a cool example and i'll just talk about some kind of addons now because we're kind of wrapping up the video anyways you could do something like you can start by asking them what weapon you want so you could say you know weapon equals input pick a weapon question mark or pick a weapon colon and then your options could be something like sword um i don't know maybe like a baton i'm trying not to be too violent and i don't know let's go something like taser right so you can tell them to pick one of these weapons and then based on the weapon they pick you can say oh well if they have this weapon then they're able to get past this obstacle if they don't have this weapon then they can't so what you would do if you want to check something like that is you'd say if weapon equals equals whatever it equals and if it equals that then boom they're good to go right and they can continue on now the last thing i'll show you because we have one minute left kind of before i'm planning on wrapping this up is how you can actually check multiple things on the same line now i'm just going to kind of introduce this to you guys because then you can kind of look at it yourself it's pretty easy there's these things called and and or now and and or are ways that we can chain conditions together i'm not going to explain them in depth but if you do something like true or false the result of this is true the reason this is true is because when you have an or this pretty much says look at the left side look at the right side if one of them are true the whole thing is true so if you go ahead and do something like you know x let's i would say like 5 equals 5 7 equals equals 8 then this would be true right because this condition is true this condition is false so since one of them is true the whole thing is true now contrasting that with and so when you do and what this does is it checks if both of the things on the left and right hand side are true if they are the whole thing is true if they're not it's false so in this case this would be false because one of them is false but if i change this to be like 7 equals equals 7 then this is true so you can use this and and or to actually chain conditions together so you could check like inside of here if left or right and you know weapon equals equals whatever you can do something like that oops so i put this in the wrong if left left or right equals equals left oops and weapon equals equals whatever it equals right inside of here then this whole thing will work so you can check if this whole condition is true or false and then execute an if statement based on that so with that being said i think that's pretty much it i'm going to zoom out here so you guys can have a look at all of the code at once i understand this maybe isn't mobile friendly but at least now you can kind of see what we've actually created and i really hope that throughout this series you guys have learned something about python you've learned kind of the basics of the language and if and else and i've given you enough knowledge that you now feel a little bit confident to go out there and make some kind of cool game i will say there's a ton more stuff you can do with this there's a lot more things to learn but again the focus of this series was around building a project and i really hope that this helped you do that so with that being said that has been it i hope you guys enjoyed if you did make sure you leave a like subscribe and i will see you in another youtube video