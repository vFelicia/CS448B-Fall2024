in this course you will learn how to build an event driven system with react and fast API an eventdriven system is a common way to set up software Antonio from scalable scripts developed this course we've published quite a few courses from him and they're always great so this is up let me explain you first how it will work we will create a delivery that will pick a product from one place and deliver it to a customer we need to set a budget and we need to write some delivery notes like Peak to pizzas and deliver to customer and that should be it let's submit and this is the new page that we redirect so this is the delivery and this is the idea of the delivery we can see it here also so this Json is the object that we create on our first submit so this object here will change once we submit these events so while we deliver a product it may happen a lot of events so starting the delivery increasing the budget pickup products deliver products and many more but I will keep this events very small because they can be a lot and once I submit this events this Json will change and this progress bar here will change like this for example when I start the delivery we can see that we have the first half is in progress because now the status is active so now we are delivering this product so we haven't picked up yet the products because we need to submit this form so when we pick the products we have the purchase price so I'll put 20 here and the quantity so we need two pizzas let's submit and now the Json changed and also the the First Progress bar has been completed the status now it is collected and we have purchase price 20 and quantity 2 2 so we have two pizzas and we want to deliver it to the customer now when we deliver to the customer we want to sell it with a higher price and uh the same two pizzas that we want once we submit this everything is completed here and the Json has changed so the quantity is zero but we have also a sale price and the budget has increased so this is a simplified app of course can here can be many more events many more States but let's see how uh do we build the state in the backend for this scenario so the main part of this tutorial is to explain that we will have events in our backend which we will store them in the database and all these events will construct in a redis cache the state of the current delivery so the state we show it here this is the current state and this is built by all these events in the back end so this is the main concept that we will learn in this tutorial and this will function even if Radice fails what do I mean by that so in case redis fails and we don't have the current state in our cache we still have all our events in the database and once redis fails we will reconstruct this object from the beginning doing the same logic that we did in every event so we will see how we will do this in this tutorial now let's start building wrap let's start by building the backend with fast API and let's connect also to the radius database so the first step is to log in in the redis cloud and here I will create a new subscription I'll select Europe here and this is free and the subscription name I'll call it just DB database and I'll create this subscription and I will create a new database here so this is just a subscription that I call it database and the database name I'll call it a fast API DB so we will use the ready stack here I don't think we need anything else make sure to get the password here because we need to connect with the database and I will create this database right now so let's wait a little so the database is ready we have the end point here and we are ready now to build the backend with fast API but first we need to download also another software which is redis inside this tool will be used to monitor the database because we need to check the data that are inside for the moment my editor pycharm cannot see the data inside the radius Cloud but this software is buy radius and we can connect it connect here directly so we need the host which is uh this one so let me copy it paste it here and automatically it will set also the port the other alias the username should be default so username is default enter the password I will copy it here and I will paste it here and do we have test connection so let's add release database and I think it is ready so if I go here we can see that we don't have any tables inside this database but we will create it with a fast API so let's create the uh empty folder here fast API and I will create a file called Main dot Pi the first step here is to install fast API so pip install fast API I already have installed it in my machine and we will import it here so from Fast API we need to import fast API and then we will create the app which is equal to fast API like this and that should be it for creating a basic app that does nothing but we need to add some endpoints later uh one other thing which is important because we will use also react frontend we need to import fast API middleware course and we will import the course middleware why do we need this old paste also this code so we will add the middleware course middleware and we will allow this origin which will be our react app so we need this because our backend will random Port 8000 and our front end will run on Port 3000 and we will have problems if we don't add this line so they won't communicate with each other if we add this middleware our react up will successfully connect with our backend and that should be it now let's connect with redis so for that we need to install a package uh pip install radius om so this package is useful for connecting to the radius database so from redis om we need to import get ready connection and the radius connection here will be equal to get redis connection and we need to add some values which the first one is host and let's go to our Cloud here and uh I'll copy again the public endpoint and I will paste it here I will cut the port here because we need another value here which is a port and will be equal to that port then we need the password which I will copy it here and we don't need to add the the username because it is a default username and we need also another value which is decode responses to true and that should be it so with this we may connect successfully to radius but we have to test it to test it open the terminal and write UV corn make sure also to install a UV corn in your machine main up reload so we don't have any errors which means this redis connection here it is successful and now let's add the models that we will work in this app so from ready so M we need to import also the hash model and let's create a glass here I'll call it delivery and this will extend from the hash model and this object I will add only two properties the budget which is an integer and by default I will initialize it with 0 and the notes which is a string by default empty and to connect this model with the radius database we need to add here a class meta in the database will be equal to Radice and that should be it for this model I will save it not sure if radius inside will create something here let me refresh so we need to create objects in order to see it so we don't have any objects and let's create the second one that we need which is the event so I'll copy this paste it here and I will create the event so uh this will be the main object we need the delivery object just for the ID so we will create it in the beginning just to get the idea of this uh delivery and we will work only with events and this event will have the delivery ID which will be a string and by default it will be none window type so this is the event type we will see it later how we will use it which is a string and the data which is a string so the data will be the Json or the body that we will send in the request and that's it so we created two objects and now we need to add the endpoints that we will work so let's create the first one which is the creating a delivery so I will create here I will add a decorator up this will be a post request to the endpoint will be deliveries create and let's add the synchronous function here def create this will have a request as a request so let's import a in the first API here also the request and I want to get the body of that request so body is equal to a weight request Json and with that Json we will create the delivery so the delivery will be equal to a new delivery with a budget which be which will be equal to body data budget so why will uh why we will we have this data in front of the body I'll explain it later because all the requests will have the same format and because they have the same format all the parameters will be inside the data key and that's why I will create it like this and the same will happen for the notes so notes will be equal to body data and notes and in the end I will save it for the moment let's return this delivery and let's see if it works and to test it let's see if UV corn is running it is running let's open Postman and let's make here a request a post request to http localhost Port 8000 slash deliveries create and in the body we will have this Json so we need to type which for the moment we don't use it but this will be the request and the type will be create delivery it will make sense later why we need that type and we need the data which is an object that will contain the budget uh 50 for the moment and the notes which is uh pick two pizzas and that should be it so this is a format that we want in every event if I send this request I get this response so I get the budget I get the notes and I get also a primary key so this uh is the idea that is stored in the radius database if I open Reddit is inside now I will refresh and we have now a value here if I click here we will see also the fields so we have a primary key a budget and the notes so as we can see we can monitor the database with this software so we created a delivery but this is not the main part of our app we want to create the event which is a the focus of this tutorial so uh with the delivery I will also create an event here which is equal to event and this level delivery ID which is equal to this delivery primary key like this uh it will have a type so the type will be stored in the the event object so type here and we need the data as they are so data will be equal to I can use here body.data but since the data here is a string I need to convert it from a dictionary to a string so I need to use here Json uh dump string like this and don't forget to import Json on top and with this we will store also the event in the database and let me return the event here and let me send this request again send it and as you can see we created the event which has its own primary key the delivery ID of that delivery that we just created the type and the data as a string but it is a Json inside and also in the radius inside we can see that we created the delivery but we didn't create the event because I forgot to add save here so my bet there let me send it again and if I check it again we will have the event object here which has its own ID delivery ID the type and the budget so this event table will contain all the logs that all the events that happen for this delivery so it is really important now we stored these objects in the database but this is not enough so the response that we return here is the object that we store in the database but we have to return something else so we have to return the state of the delivery so this is a delivery object in the database and this is the event but we have to combine both of those to represent the actual state so it may be confusing for you for the moment but you will understand it uh more once I add more code so I will create here uh python file I'll call it uh I want to call it events but this will be confusing with the actual event here so I'll call it consumers it is the same but I just want to avoid confusion and here I'll create a function which is create delivery and this function will have two parameters state and an event so you may be already confused here this is a function that we will use let me use it right now here to construct the state that we want to return so the state will be equal to Consumers create delivery so this function we will pass the actual state but the actual State for the first event so the first delivers create is an empty object because we didn't create anything yet so the first parameter here is an empty string and the second one is the actual event that we just created here and this function will return the a state that we want in the front end to handle and I will return it here and what will be that state for the moment it will be very simple I will return the budget which is a uh actually I will get the data here which is equal to Json load string event dot data uh we need to pass the data that we store here which is this data here and the budget will be equal to data budget I will cast it as an integer because we may have problems later on with uh these types we need the nodes which is equal not equal it is data notes and we need also the another value which we don't have it for the moment which is the status so the first time that we created delivery the status will be ready so this is an extra value which I will front end won't provide but we need this value in order to track the delivery and this will change once a different event happens and it is a the best way to do it like this instead of just updating it from the front end or any or any other way also I forgot also one other value which is the ID of the delivery so this will be event that delivery ID like this and that should be it so this is the state that we want to build and it it is almost similar with the value that we returned here but it will change a lot and we want to be able to maintain this structure so let's test it we pass the state parameter here but we don't use it but it's okay because this is our first event in the other events we will use it every time and if I send now the request we will get this response so it is almost similar but we have a status now and this object will change a lot and now we need another endpoint to get the status of this delivery so this is a post request we update the status here but we need another get the request to get the current status and for that I'll create another function actually I will create it here on top this will be an asynchronous function get state and this will have a primary key as a string as a parameter and this will be a get request to deliveries with the primary key here and status but how do we get the status so this state that we just created here here we won't rebuild it again and the best way is to get it from redis so we should add also another line here that we need to store the actual state in the reddish cache when we save the objects here we save it in the radius Json database so it is a database just like a mongodb but if you if we use the radius object directly like this we will store it in the radius cache so uh that's why I chose it like this it is a benefit of using also the radius cache and also the radius database just like mongodb now when we set the value in the cache we need a key and a value so the key will be deliver it and we need to pass the delivery ID here and to pass it I will add an F here not here here and I will pass the delivery primary key here and the value will be the state but this state it is an object so I have to use Json dump string the state and that should be it so be when we create the state we will store it in the cache and return it and when we get the state here we will do the opposite so we will get it from the cache so state is equal to radius get I'll put an F here delivery with the primary key and I will return Json string the state because the value that we stored is a string and we will get also a string here and we want to return an object or a dictionary and that should be it this endpoint won't work because we haven't stored anything uh in radius so I will add another get request this will be the get request to localhost 8000 deliveries we need this idea that we just created I'll pass it here and status send it and we get an error because I think this value here is none when we don't have anything and let me do it like this if state is not known we return this value otherwise I will return just an empty object but this will change later so for the moment I will just put it as an empty object and if I get the value here so I need to restart your record I get an empty object because I need to create another object again in order to be saved already so I'll create another object I'll copy the ID here I will paste it here send it and we get the value so it's not looking good because instead of dumping the string I need to load the string so my bad here and now it looks better so this endpoint will get the current state of this delivery every time now we want to add another event that just changes the status from ready to active so let's do it now I will add another endpoint which will be similar to this one so this will be think a death I'll call it a dispatch and this will have a request as a request just like this one and this will be a post request to just event and what do we want to add here so this delivers create is similar to this one the only problem that we need another endpoint for the delivers create is that we don't have a delivery ID and we create it here but here we have the delivery ID in the event itself actually let me create the event so I'll duplicate the tab and this will be event here and in the body will be the type will change now instead of create create delivery it will be start delivery and in the data we don't need to send anything so it will be like this so this is the event that we will send and all the other events will be sent through this endpoint so the only the type will distinguish the behavior and the data and now let's go here so how do we change the status based on this information the first step is to get the body to parse it and we need to create the event in the database just like we did here so we are missing the delivery ID so the delivery ID will be equal to a body delivery ID so this is something that uh I should add because I forgot so we need the type we need also the delivery ID here which will be uh this one so my better these are all the informations that we need start delivery delivery ID and the data and now we created the event and now we need to manipulate the state how it will work so the first step is to get the current state and we will get it like this so state will be equal we have this function get State here it will be equal to 08 get underscore State and we need to pass the delivery ID there we need a width because this is an asynchronous function otherwise it won't return what we want and this state for the moment will be this value so this is what do we want to get and based on that state we need to just change the status from ready to active and we can simply do it here state let's say it is a status it is active but uh it won't work like that so this is not the right way to do it we need to create another function in the consumers here start delivery which will accept the state and the event and the this time we will just update the state uh we can do it like this state status is equal to active but I prefer this way so I will return here the state always a pipe here and I want to change the status to active like this so this operator will update this value to the this new value and that should be it so if I go to the main.pi file the new state now will be equal to consumers start delivery we will pass the current state and the event which momentarily we won't use there but it doesn't matter we need to save it to reduce so delivery primary key here is delivery ID and we need to save the new state and we need to return the new state so that's it for this event we need we still need to make some changes but let's test if it works so if I send this event I will get the same object but now the status is active and now if I send also the same request again here the status is active as you can see the status of that delivery has been updated now it is uh driving let's say so this is how it will work but there are some problems here which is this start delivery we added the endpoint to the event here so we don't know if it is star delivery or another event so we need to create a general way to call the function based on the type so the type is a start delivery in our case how do we do that so I'll create now here a constant I'll call it consumers and this will be equal to an object that will be mapped like this create underscore delivery which will be the type will be mapped to the create delivery function like this and start delivery will be mapped to the start delivery function so why do we need this constant we need this constant now because we can change now the start delivery to consumers consumers constant here we will pass the type which is this body type or event that type so I'll pass event that type there and we will do the same thing so the same will happen for the create deliver here so I will do it like this and this is a dynamic way of calling different function based on just the type so right now we don't know if we are calling uh start delivery or another event that we will create later so let us try this event so I'll create another delivery sent Ando indeed it works so I will copy this new ID paste it here and it works the status is ready now if I go to this other event I will paste the new delivery ID here send it and now the status is active if I send the request here the status is active so this is the dynamic way of calling different consumers now the structure is ready and we can add the easily multiple events so let's add another one so here we made the status active I will duplicate the tab and now we will send another event and this time will be pick up products and the delivery will be the same and in the data property we will send the purchase price which will be 20 and the quantity which will be 2 in our case so we want to send this event and we don't want to do anything here so this is ready this can handle multiple events types and the only thing left that we need to add is to add the consumer here so we need to add I will create the function uh pick up products this will accept a state and an event and that's it so it has become really easy to add multiple events this is a pickup products and this is a pickup products so we easily added one event let's handle the case in our function now what will happen when we when we get this event so first I will copy this part I'll get the data from the vendite data and I will return in the end the state the pipe here and these are the things that will change it will change the budget it will decrease so I'll put an empty value for the moment we will add the purchase price which will be data purchase price I will cast it as an integer because we may have problems we need also the quantity and this is a quantity here and also the status will change it will become collected so let's also calculate the budget so the new budget I'll add it here new budget is equal to state budget minus the purchase price times here the quantity and that should be it we will assign the new budget here and it is ready so this is almost completed so we will add later validation but for the moment this will work let's try to send the request and it worked as we can see our budget decreased we the status changed and we added two new properties and if we send the request we will get the new updated State here so it is working fine and now we can add also the last event which we can complete this uh delivery I'll duplicate this and this will be delivered products and uh here instead of purchase price we will add sell price and that should be it so let's add it here also this will be almost similar let's add the function deliver products with the state and the event and let's add it here deliver products and inside here actually I will copy the code here because it is almost similar so we will get the data from the event and now our new budget it will be our budget Plus the not purchase price but sell price here this is also sell price the quantity also will change so I will add a new field here new quantity is the old quantity which is state quantity minus this value and here I will add the new quantity and in the end the status will be completed so we will complete the delivery here so it is the same as this one but we will increase the budget we will decrease the quantity and we will change the status and that should be it so deliver products sell price quantity everything is correct let's send this event and it is working fine as we can see the status has changed the purchase price and the sale price are the same and the quantity has been decreased to zero so everything is correct we added all the events and this is the best case scenario so what do I mean by that every event that we send has been successfully executed and we didn't have any edge cases uh when we create an eventdriven architecture sometimes we may send events that should not when it should not be the time or we can send errors so we should have a lot of validation using these events for example when we start a delivery what happens when we send it again the delivery is already active we should throw an error like the delivery has already started or what happens when we purchase products and we don't have the budget for it so let's handle these edge cases the first step is to create another event and this time I will change the notes Here we will pick three pizzas but we won't have the budget for it because one pizza is 20 and the budget is 50. let's send this request and it worked fine now I will copy this ID I will add it here and I will start this delivery but before I send the event I'll add a validation here and the validation will be for the status of this uh delivery so here I will add a new condition if state that status is not ready then we will raise an exception because we cannot make the delivery active once it's already gone or it has another state so only when the state is ready we can change the status to active and here I will raise an http exception so let me import this so the HTTP should be uppercase and we need to import from a fast API HTTP exception and here the status code I'll make it 400. and the detail is delivery already started and that's it for a simple validation so if we have this validation when we post it the first time to start the delivery we will make it active so this is correct but when is when we send it the second time we will get an error delivery has already started we cannot start it again so that is the simplest validation and we can add more complex validations like this budget here so we decrease the budget but what happens if the budget so the new budget is less than zero so we don't have the budget to purchase the products so I will raise another exception here and the status code will be the same and here I will say not enough budget and that should be it so the delivery has already been started I'll copy the delivery ID I'll paste it here the purchase price is 20 and the quantity will be three so this is this will be more than the current budget which is 50. let's send this request and we get the error not enough budget and now uh it will become like a tree so in this case we may have multiple choices to solve this problem we may increase the budget so uh we should buy those three products or we may buy two products and deliver less products to the customer so as you can see with this approach we can handle many cases many decisions handling all these cases using the traditional way of rest apis it is very difficult but in this way we can handle every case so what will we do now so we will handle both cases and I will add now another event which is increased budget so increase budget this will have a state and an event and I will add it here also increase budget and what will we add here so it will be very simple we will get the data from the event and now the state budget we will increase it with the data budget like this and we will return the state so it is super simple and let's add it also here so let's duplicate this let's add another event I'll duplicate tab let's copy the delivery ID and this will have only the new budget so we will increase the budget with uh by 20 here so let me send again the event so if I send this event I will get not enough budget maybe I have an error here so yes not enough budget but if I increase the budget we can see the budget now is 70 and if I send this event again the transaction will be completed and the status will be collected so we got the three pizzas we can deliver these items now to the customer so I'll paste it here and the sale price will be 25 end of the quantity will be three let's say the quantity is four so we make another mistake here so here we can add another validation just like we added the validation with the budget here but this time is the quantity so if the quantity is less than zero we can say not enough quantity or not enough quantity I will I will make the message so if we had this validation this won't work as well because we will we are selling more products that we currently have so it should be three and now everything is completed so that should be it this is the case when we decide to increase the budget but what will happen if we decided to deliver less products so let's do it right now I'll create another delivery I'll copy the delivery ID and I will start this event and now I will uh pickup products here and I'll get this error which says not enough budget and this time I will decide that I will deliver less I will buy less products and it's it it is working but as you can see in the notes we have big three pizzas and the quantity is two and we can go now to the customer and we can deliver the the products which in our case we cannot deliver three anymore but we will deliver two of them which works but is the customer satisfied or not so we may go to another decision tree here so the customer may accept less products or the customer may want the other product next time or the customer may refund the order so either three products or none of them so there are many decisions that should be made here and I will not handle all of them you can understand now how this architecture can help us handle all possible validation and all possible scenarios when we have an eventdriven architecture so we are finished with all the events and all the apis but still there is one case which we didn't handle so what happens when a radius fails so in this case here as we can see uh we are getting the products from redis and I will copy again here the deliver ID paste it here and the status is completed but this status is the aggregation of all the other events that happened here in case redis fails our system should should be the same so so it should return the same value here but how do we do that the way that we can do that is by rebuilding all the events from the beginning so we have a log of all events that happened in this app so I will refresh here and we have a lot of events so here in a radius inside I can filter with main dot event column star here and here we will get all the events we should filter all by this delivery ID but it doesn't matter we should get all the events from the database and we should recreate this uh State here so let's do that now I will comment this part and the state for the moment is known let's say that already returns none here and if that is the case if I send this event I will get an empty object which is this one so here now I want to do an algorithm that will return the actual state so that the function I'll create it here I'll call it build state and this will have a primary key as a string and I'll call it here so the new state will be equal to build state with the primary key and we will return it here so this is correct here the only thing left is to build the state here so let's complete this function the first step is to get all the records so radius Json has this function event all primary keys unfortunately there is no other function that returns all the objects so this is all we have but we can manage to do what we want with this function so we got all the primary Keys now all the events will be equal to uh something for primary key in primary keys so uh this something here will be event get primary key so this will return all the events as objects actually let us do it like this so first let's return all the primary keys so we can see how it works step by step if we do that let me start this if we do that we will return all the primary Keys like this and if we do the Second Step I will save it we will return all the events of all the product all the deliveries so it is working fine but we want only this delivery ID so we need to make another filter here events will be equal to something here for event in all events with the condition if events that delivery ID is equal to this primary key that we pass here and this will be just the event like this so this is a filtering that we want to get all events for this delivery if I return it here I'll save it we can see that this delivery ID is different from the first and the second event if I send the request now all the delivery ideas will be the same so these are all the events for this delivery and that should be it so we got all of these events and now what do we want to do how do we rebuild the state as it was in redis uh now the way to rebuild the state is to redo everything from the beginning I will make a for Loop now for event in events and for each event we will build the state so the state will start as an empty dictionary just like we did when we create a delivery here and for each event in the events the state will change and the new state will be consumers consumers again so it will be this function here I'll not pass here an empty object but this will be the actual state and that should be it we will start with an empty state we will pass the first event which will be create the delivery and we will update the state and then we will go in the next event and this will change the state again and again till the end where we will return the updated State and this state will be the state that we want so this is how we rebuild the state uh I will save it let's see if we have any errors we don't and let's send again this request so we have an internal server error care budget so I think I know the problem when we return the events I will save it and when I return the events I see a problem here is that the order is different that the order that we want so what the what should we do right now uh to be honest I'm not sure why is it that it returns in this order I think they are ordered by the primary key which should not be the case they should be ordered by the creation time so uh it is the order is totally random so the only solution that I can find for the moment is this one so the first one is create delivery and I will get this primary key so I will make it manually but it should work in every other database it should work normally so we should get all the events in the normal order then it is a start delivery this is the second one the third one is pickup products and the last one so not pick up products here so my bad it should be this primary key and the last one should be the first primary key and if we do it like this we will get other events in the correct order and now let's uncomment this part let's get to the state I will save it send a request and this is what we get so this is the result that we wanted so everything works fine except this get all primary keys for some reason it orders the primary Keys alphabetically but they should we should get all those values based on the creation time so this is a small bug but I guess um it's not a problem you get the idea how it works now I'll get the state from redis just like we did before and if the state is known uh is not known we return the state directly if it is known we will rebuild the state and we will save it again to radius here so we want to rebuild it again and this is just the primary key and this is the function so if I send a request now I'll get the exact same result and that's it uh this is how we handle the state in the backend now it's time to build the front end now let's create the front end so I will open a terminal here and run MPX create react app I'll call it react events and let's wait till is completed so it is completed and now I'll open it with my IDE here I'll run npm start so we can start our react up on Port 3000 so it should work fine so now it is running now let's install bootstrap for this project I will install it directly through the terminal so npm installed bootstrap so it is installed and I will go now to our app.js I will remove these Imports we don't need the app CSS or delete it even index CSS actually I will just remove the code here I will remove a test.js file and in our app.js I will simply import bootstrap here this CSS bootstrap.css so we will get the bootstrap here let's also remove what we don't need here and it will look like this so this is just a blank page I will go now to index.html and here in the body I will add this class so I want to make the background dark so I will add this class here and now it will look like this uh then in our app.js I will remove this code and I will replace with this code so this won't change anything but if we want to add now a card which I will add so I'll add div here with a class name of card then inside I will add another div with a class name of a card header I'll add here create delivery here I will add the form with the class name of card body and inside now we can have inputs so I will add the another div here with a class name of input uh just margin bottom three and another input here this will be a type of number name will be budget class name will be form control and the placeholder will be budget so I'll copy this paste it here and we need another input but this time it won't be a type number this will be a text area and uh this will have the name of notes form control here and this will be notes and that should be it let's add also a button here with a class name of BTN vtn primary submit here so this will look like this so we have a card here to create a delivery when we submit we want to redirect to the delivery page so we need to create a another component here which is a delivery .js here I will use the shortcut so this is the delivery component that we want and what will we show inside so for the moment I'll just display delivery here and let's add the logic in our app.js so here I will create a variable ID set ID is equal to use state empty string inside so we need the ID of the delivery that we will create we will create that delivery from this form here and if the ID is set we will display the delivery component and the way that we will do it is like this so I will add here if I deep is equal to empty string question mark I will show this form otherwise I will show the delivery component and that should be it so in the beginning the ID is empty so we will see the card here but if this is something else we'll show the delivery here so the text that we just wrote there and when we submit this form I'll create a submit function this will be asynchronous and this will have an event here that we will call prevent default and when we submit this form so on submit we will call that submit function so here now we will get the inputs from the form so I will use a shorter wave so I'll create a variable form which is equal to new form data inside I will pass event.target the data so the values the budget and the notes will be equal to object from entries form so my bad form entries like this so this form data that and entries will return all these number and notes so all the inputs and if we do use it like this it will convert it to a Json as we want so just like this uh like a budget 10 etc etc so this is the format that this will return and now we got everything that we want the only thing left is to get the response which is equal to a weight fetch the request to create the delivery is http localhost Port 8000 slash deliveries slash create we'll pass some values here like the method is a post request and the headers are like this content type is application Json then we need the body which is Json stringify and the way that we will return we will send the data is exactly as we did in our Postman here so it is like this we need the type which is create delivery type is create delivery and the data is this data as it is here that's why I call it data this will convert those values like this Json here and that should be it we will get a response and we will convert that response to Json so we will await response Json like this and that Json will contain the ID that we want so we will set the ID to content or I will deconstruct it directly so we need the ID here and I'll set the ID directly like this and that should be it so I will remove this one now and if we go to our browser now I'll put the budget to 50 and in the notes Peak two burgers submit and we redirected to the delivery page so that's it so this is uh completed I should have gotten the ID of that delivery but let's create it again so 50 pick two burgers submit and this will get this object actually I will copy it all oh this is the object the ID here will be this one and I'll cut this I'll create another object here I'll call it state and it will be equal to use state so this state does not is not connected with this react State here there are different things but this is the first state of our delivery and I will put it directly here because I don't want to recreate it multiple times but later on I will revert it back because the default state for this will be just an empty object so I'll put it like this and if I do it like this we will go directly to the delivery page and now let's build this page let's go to the HTML and I will I will replace this HTML with a div here over the class name of row and width 100. then the second element will be a div with a class name of call 12. margin border form inside I will just display an H4 with a class name of uh bold and text White and this will be the delivery and I will show here restate.id so this will be just the delivery ID as I show it here so which this is a title and the next value will be the progress bar so this is a little bit more complicated but this is a div with a class name of call 12. and margin bottom to five and I'll add another div here with a class name of progress and now we need to add the bootstrap progress bar so how do we add it you can check the documentation so if we go to get bootstrap.com in the docs we have the progress bar so progress bar like this so this is what I want to build and I want to add an animation just like this one so inside the class name will be progress bar background success progress bar progress stripped actually not like this it will be progress bar stripped and progress bar animated I will close this part so we can see more code and then I will add a role which is progress bar then we need some Style which we need to add only the width 250 percent like this and we need to close the div so this will look like this so as you can see the 50 of this bar is is looking like it is a uh in progress so we need a second one and uh now it looks like a one progress bar but we need to show different uh animation Styles based on different statuses so if the status is ready then we don't want to show any progress bar so in this case I will do it like this all that here if state that status is not ready question mark also this progress bar then I will uh not show anything so I'll make it like this here I will not show anything then so same will happen for this other one but uh I can add the same condition but it's not the same condition so if we do it like this the status ready is a white bar which is correct now the next status is I will manually change it here it is active so if the status is active we need to show the half of the progress bar here uh in progress so how do we do that first for the status here I will change it so this status here it should be either collected or I'll copy it again or completed so this is the second half we need the status either collected or completed and now we'll show it like this which is correct nope the next part is the status is collected if we do it like this we can see that the old bar is kind of animated but it should not be like this because the first part should not be animated because only the second part should be animated so for that the class name here I'll change it like this so here I will uh check if the status it is active question mark if it is active then I will show this class that we had otherwise I'll paste it again but I will I'll remove this progress bar script and animated so if the status is active we will show the strips and the animation style if it's not active then it is just the background success and this will make it look like this so it seems like the first part is completed only the second part is not completed and now the status is collected and this is the correct animation and the last status is completed completed which in this case this should be all green and the logic will be similar to this one that we just copied I will paste it here except the difference is the status that we will compare it is a completed and that should be it so did I make mistakers or something collected actually now it is correct so that's it for the statuses so we have a lot of conditions here but the main thing that I wanted to show is if the status is ready then we show a white bar if the status is active we show the first part is in progress if the status is collected the first part is the green and the second part is in progress and the last one is completed which is all green so these are all animations that I wanted now let's add the events so we need some kind of events to trigger these animations so for that I will add here another div with a class name of called 3 here inside I will add the card so I'll copy the card from this form here it will be almost similar and I'll paste it here so the difference is that this is start delivery and it won't have any inputs and I will add later the on submit button so if I add this uh it seems I have a problem here now it should be correct we can see the start delivery event here so let's add the more events the second one is increased budget and this time we need an input I'll paste it directly so we need a number input uh that uh says the budget so this is a second event I'll copy this paste it again and the other event will be pick up products and for the inputs here I'll paste them again we will have two inputs one is the purchase price and the second one is the quantity and I'll copy this again to add the last event which is the deliver products and the only difference here this is a sell price and this is cell price and that's it so these are the four events that we will work with and they will all submit to the same function so let's create that submit function here is equal to in a synchronous function this will have an event and the event will have a prevent default now here I can copy the code from app.js so this part here it is almost the same let's go back and I'll paste it here so we will get the form here we will get the data so these are the inputs if we have any of them if we don't have that's not a problem the event will be on the event here so that it was the wrong endpoint a method post the headers are correct and the type will be different so the problem here is the type because each event has a different type there but we can pass the type in the function here directly and I can remove it here so when I send the request uh the type will be dynamic and it will work like this so let's go to the first one start delivery we will have on submit here we'll have an event but we will call a submit function with the event and the type will be start delivery so this is the difference when we submit we will call all the same function only the type will change I'll copy this I'll paste it here and this is increased budget so increase budget same for the other one this is pickup products and the last one is delivered products and that's it so all of these functions will send almost the same events but with different types and we need also to handle the response how do we handle the response first I will add the condition here if the response is not okay so we get an error validation error then we will get the detail from the response which is equal await a response Json here and we will simply alert that detail and we will return otherwise we will refresh the state so about the state we didn't add here use the effect so for the moment I want to do anything here in this user effect but I will go back to our app.js because we are getting a manual delivery here uh we need to pass that ID to this delivery object so like this so ID is equal to that ID and if we pass it like that in our delivery.js here I'll add the an asynchronous function that calls the status endpoint so like this here I'll get a response which is equal to 08 fetch and the end point that we want to call here is HTTP localhost Port 8000 slash deliveries and I'll change the quotes here to this backtics I need to pass here the ID that we sent from our app.js so we need the props here and this value will be props.id and this is the status so this is how we get the current status the data so let me close this data is equal to weight response.json and we will set the state to this data like this and we don't need this values that we set before so with this user effect we can directly get the state that we want and in our app.js we can remove this one also because once we create a new delivery we will pass it directly here so that should be it let's see how our app will work now let's add the budget as well with 50 and pick two burgers and deliver to customer submit as we can see once we submit we get the ID we deliver we move to the delivery page and we have a lot of statuses so here I forgot to add also another thing which is to show the Json I'll go to the delivery.js and here I will show the Json like this so div all that here a class name of call 12. and margin top four and I will show uh so this is not a div here this is a code and inside I will show Json stringify the state like this so if I add this line in the end we can see the actual State at the bottom so this is the object that we just created and now we want to start the delivery and when we submit we want also to update this uh progress bar how can we do that so uh we can do that by calling the state again once this request has finished and the only way to do that is to add another variable here refresh set refresh is equal to use State false it doesn't matter if it is false or true but I will add here refresh and once this value changes we will get the new state so if the response is not okay we will display an alert if it is okay I will set refresh to the opposite of refresh so basically I want to uh get the status again and that should be it so let's click now start delivery it should work actually why it didn't work so now that I check the Json that we sent we forgot to send something so the thing that we forgot to send in this submit function is the delivery ID that we are so that is my mistake so we are we forgot to add here the delivery ID which is the state dot ID like this and now we can test it again and as you can see the first part is animated the status has become active and now let's pick up products so uh two products with the price of 20. submit and as you can see this part is completed this is in progress the purchase price is 20 and the quantity is 2. we can deliver the products we can sell with a higher price quantity submit and it is successful so the first case worked just fine so that's it now all the refresh again and let's create another delivery so the budget now is again 50. and now we speak three ice creams and let's submit so as you can see everything is working correctly let's start the delivery and let's start it again so now we are alerting error so the delivery has already started and we cannot start it again so this is working fine what happens now when we pick three products but we don't have enough budget let's submit not enough budget so what do we do we may increase the budget so I will increase the budget with 20. submit and now the new budget has been increased and now if we pick up the products with these values it should be not a problem and now let's deliver these products so a higher price and the quantity will be four we have another problem now not enough quantity so it should be three and now it is successful so this is the simplest way of an eventdriven architecture I hope you learned a lot of things from this tutorial thank you for watching and don't forget to like share and subscribe thank you