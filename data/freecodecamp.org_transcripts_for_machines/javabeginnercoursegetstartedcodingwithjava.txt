hi there welcome to this course on getting started with the java platform my name is matt speak i'm your instructor for the course and in this course we're going to go through all of the um kind of introductory things that you need to know about the java platform to be able to get started in other words to start your um kind of like develop a career if you like with java platform so a few things to say about this course um first off this is a course for complete and absolute total beginners so it doesn't matter if you've maybe had a little look at java before or if you know nothing about java whatsoever don't worry about that i take things completely from first principles so you're not going to get stuck you're not going to get into any kind of like um issues where you're not sure how things work just of course it's going too quickly everything in this course is designed to be completely and totally absolute beginners i promise you it's absolute beginners so you should be fine for this so that's all well and good but what's actually included in the course what are you actually going to learn so in general you're going to learn three things three things you're going to get out of this course and that's basically that we're going to get you set up with the tools that you need to be able to program in java so there's a certain set of tools that we need to get installed onto your system so we're going to get you up and running with that so you'll be able to get started and take it further you'll have all the tools installed in your system by the end of the course the second thing is that we're going to look into core concepts of java obviously core concepts we mean basically the the absolute fundamentals that you need to know to be able to get started with the platform so if you've heard terms like for example jvm jdk jre ig things like that class files by code don't worry about all of that now we're going to explain it all over the next few lessons so you're familiar with those core concepts and finally the other thing the third thing you're going to get out of this course is you're going to get a feel for java so by the end of the course you're going to know whether you want to take it further you know how it kind of feels to you it's a programming language as a development environment um i think you'll take it further because it's a really fun um and exciting programming environment to to program in um but at the end of the course you'll know yourself and you'll be able to make your own decision so those are the three things you're going to get out of this course okay you set up with the tools okay you set up with the core concepts and you'll have a field to know whether you want to take it further okay so if all that sounds good to you let's get started we're going to have a look at the java platform as a whole and we're going to basically see the core features of java and we're going to see why and java has become so popular in the marketplace uh have a look at who uses it and what kind of features and benefits it gives us and really yeah you're going to get a kind of like a flavor of of the bigger picture if you like so actually what java is so let's jump in so the first thing to know about java is that java is the world's number one programming platform right now today in 2021 and this is really quite exciting because it actually means that you're on the cusp of learning something extremely valuable obviously with that marketable as well but all of that as a package together and i want you to realize this takes you to the place right now where you're on the cusp of learning something really exciting and even potentially lifechanging for you as well now i don't see this lightly but to be honest if you want to have a career as a developer as a software engineer then pretty much java is the best option for you at this particular time because it's been popular now for well over a decade um it doesn't look like it's going to change anytime soon with all of the um different features that have been evolved the marketplace share that it has the kind of foothold that it has in the market in other words like all the different companies that are using it and that kind of thing so this genuinely is a really really really exciting opportunity for you if you feel like you'd maybe want to go down that route of being becoming a professional software engineer now don't just take my word for it we can look at a website there's a website called i'm not sure i pronounce it it's taiyobi.com or tirbe.com it stands for the importance of being earnest and what it does is it tracks the popularity of programming languages by looking at the amount of web searches that people have done for that particular programming language i'm kind of plotting them in a graph as we'll see so if we just jump in now i've got chrome up here popular web browser if i just jump into tayabi.com here we can see we've got the website for it and right over here on the right hand side you'll see this tab index so if we click that and we just scroll down you'll see that there's a graph at the bottom of the page so here we are so this graph is basically charting the popularity of the most popular programming languages that there are today and you can see it's here it's giving you've got a c java python c plus plus c sharp these are different programming languages that you can choose to go up software in the main thing that i want to point out here is if we click on one of these specifically click on the java one then from this you can clearly see by looking at the line graph that's highlighted which is the one in black just the one for java you can clearly see that java pretty much in general is ranked over and above any of the other languages so while there might be some contenders for that kind of number one spot namely with javascript and python which you may have heard about in spite of this java is still pretty much number one and it looks like it's going to continue that way for quite some time so just know that what you're actually learning in this course when you're establishing the beginning of that journey as a java software engineer you're learning something that is very marketable and ultimately going to be very profitable for you as well for the foreseeable future so i just wanted to point that out first of all so we've seen that java's the number one programming language today the next question you probably have is well okay who's using it then well pretty much all of the big players today use java as a development platform and so if we go through some of these now google use it so you're obviously familiar with google the popular search engine the most popular search engine in the world that uses java on the back end to power its products amazon huge ecommerce store the biggest ecommerce store in the world they use java 2. and why would companies like google and amazon choose to use java the reason for that is because of java's socalled scalability what that means i won't go into it too much but what it means basically is if you think about it with amazon or with google you have pretty much millions of people at any one time who are making requests on the website so for example in amazon they're looking up orders looking things up in the product catalog making orders changing things getting recommendations all that kind of stuff millions of people at the same time are using that website and this is possible because of the power of java because of its scalability for java you can pretty much um kind of like chain different java processes together kind of like grouping a whole load of computers together if you like so that the total combined power of all of those computers together can be used at the same time to be able to deal with all those millions of requests so that's pretty much the power of java so it's an incredibly powerful language and it's something in fact the main thing that's the reason for its popularity places like google and amazon but it's not just search engines and ecommerce sites we also have streaming services as well so for example spotify the popular music streaming service that uses java in addition netflix they also use java as well the reason they use it is because again it's about java scalability this aspect that it can be very powerful i can service multiple clients that means multiple people on their different devices millions of those people at the same time but it's not just limited to those companies either if you look at social media for example we'll see that facebook use it twitter uses it linkedin uses it pinterest and instagram user as well so by now you should be getting a real picture of the scope of java you know google amazon spotify netflix all the social media companies facebook twitter linkedin pinterest instagram i mean this is huge it really is huge if you ever want to get into something or rather some form of technology that has a future java is the thing to be getting into so it's good that you're on this course to be uh to make those first steps into that java development career so all these big companies use it where is it use them well various different places it's used in mobile phones and tablets the android platform for example is based entirely in java and so therefore java is the backbone all android devices but not just handheld devices either we also see java in huge cloudbased applications powered by hundreds of different servers at the same time surf is just a fancy name for a computer that allows a website to run by the way we see java used there as well and that's because of its power that we've just seen in fact java powers three billion devices all around the world which is pretty phenomenal if you think about it three billion that's a massive number so on three billion different devices all around the world java's running providing this powerful backbone for all these devices across the world globally pretty exciting stuff i think you'll agree so if everybody's using it and java's so popular why is it so popular well there are a few reasons for java's popularity and let's just dip into a few of them now if you don't understand all of these don't worry i don't expect you to understand them but we'll just give a few bullet points what makes java just so popular so first up is platform independence and what this means is that java has this idea called write once run anywhere which we'll see shortly and that means that you can write a program once or one machine for example on windows and then you can run it on all of the different machines so you can run it on a linux machine or a mac or a unix server or wherever else and so we have this notion of platform independence which is a hugely powerful concept it means that effectively you don't have to rewrite the same software in other words reprogram it reprogram your application that is you don't have to redo that for each different machine type so for example supposing i'll write an application on windows and then i want to release it i have the ability then to release it on mac and on linux without having to reprogram the whole application in mac or reprogram the whole application in linux so that's the first thing platform independence now the second thing pretty much is the thousands of libraries that we have so in java there's this whole kind of software movement called open source and in a nutshell what that means is that people have already written components those are kind of like mini applications if you like which you can assemble together to make your own application people have already created all of these libraries all these different components there are literally thousands of them and they're available completely for free now what this means to you is that you don't have to write that code it's code that you get for free you can just incorporate that code into your applications and use the features which that component gives you so very powerful very beneficial having this idea of socalled reusable components that's another key benefit of java as well additionally as we've seen we've got the versatility of the platform the fact that you can write applications which run on a mobile device small scale so just for an individual user or you can write applications which are designed to be used for millions of users using java in the cloud the cloud by the way is just a fancy term pretty much of um saying that you have hundreds or thousands of computers all working together to do one particular thing or execute one particular program which in the case of amazon for example will be its website don't get hung up on the idea of a cloud but that's just basically what the cloud means here java has this versatility to be able to run on one device or on hundreds or thousands of devices at the same time very powerful very beneficial for companies as well since they can build huge ecommerce stores like amazon we've seen another aspect to java's popularity is the market share that it has kind of like the foothold in the marketplace so because so many different people use java so many different companies rather use java plus as well because it's been going for 25 years now i think it's about 25 years i think it was 1996 when it came out and because of that it means that there are a lot of skills on the marketplace people who know java it also means because we have so many different companies using it and different developers using it there's a very lively kind of community and a huge source of documentation java technology itself which is also really really useful which also brings us to this idea of the developer ecosystem that's basically all of the tools and technologies that surround java itself that have been developed to make your life as a java developer much easier so all of this together as a package for you personally means that java's got a bright future it's got tremendous job opportunities a market opportunity for you personally it's pretty easy to use and versatile to get pretty complex stuff programmed quickly and easily because of all of the different libraries that you have as well and there's a ton of documentation out there and useful tools which can help you get started so that's an overview of the java platform itself now let's have a look at the java language which has also been central to java's success so the reason the java language is so popular which is pretty much the heart of the platform itself comes down to a few key reasons as well so first up we have the fact that it's pretty simple to use it's simple to use it's easy to understand it's got less of a path or rather less of a learning curve for you when you get started so it's a pretty accessible language to be able to just pick up and start to get started with so that's one of the key benefits also related to that notion of versatility that we've seen earlier is the idea that it's object oriented so object oriented is a kind of a style of programming you have different styles there's functional programming procedural programming objectoriented programming we don't have to go into detail about those right now but in objectoriented programming you basically program objects and these different objects interact with each other and it's basically a very powerful way of being able to quickly write systems which are easy to understand easy to develop and easy to maintain and extend okay so moving on another aspect of java is the fact that it's fully rounded and what i mean by that is it gives you access to be able to do everything you'd want to do pretty much with a computer so that means for example being able to test a computer network access disks files folders that kind of thing as well as interact with desktop so that means for example drawing windows and buttons and having dropdown menus all that kind of stuff java's pretty much got apis for all of that stuff completely out of the box which means that you don't have to write that kind of stuff you can just reuse the existing code that the java platform already gives you you'll be able to access networks read files writer files construct windows with xboxes and buttons on all that kind of stuff so that's been a good high level overview of the java platform as you can see it's a really exciting platform to program in and you're probably really excited to get started now which we'll do in the next videos we're going to look at the java platform itself specifically we're going to look at the key components of the java platform and see how they all slot together let's dive in now before we start i just have to give you a quick word of warning about java in java just like any form of technology or any form of programming it's not specific to java this is any form of programming or anything to do with it there are always going to be lots of acronyms but those are abbreviations for things you're going to hear things like jdk jvm jre things like that don't worry about that we're going to define those shortly it's just a word of warning about that and also not only acronyms we're going to have a lot of terminology as well so we're going to hear terms like byte code source code class file compilation those kinds of things again when you first hear a word that sounds technical or you come across these abbreviations it can seem kind of daunting because because you don't know what the acronyms and terminology means but don't worry about that don't be dissuaded don't be put off you'll explain all of these in this course i just want to give you that quick word of warning so yeah above all don't panic that's the key thing do not panic all will be explained now let's start off with the key point about java which is this notion of platform independence java has this idea of something called wara wora which stands for write once run anywhere and this means that you can take a java program and you can run it on multiple machines let's have a dive in now and see exactly what this means together so let's start with my mac so i have a mac a and let's suppose i develop a program on my mac and then i go to work and i think you know what i could actually use this piece of software i could use this code that i've written this program i could use it on my work laptop as well but at work i've got a windows machine and these are two completely separate types of machine one's a mac one's windows now to you they might just be computers and that's fair enough they're just laptops or desktop machines one's a mac one's windows but fundamentally these are completely different machines a key part of that is that for example if i use an application on a mac for example adobe photoshop then i can't use that exact same application on windows it's true that both mac and windows have a version of photoshop which they can both run but that version is completely different one has code for mac the mac program code if you like and one has code for windows the windows program code and the actual code that each installation file will contain is completely and totally different and the reason for that is that these are completely and totally different machines we don't just have macs and windowsbased machines you can also have linuxbased machines so for example when we spoke about cloud computing earlier on or if you look at largescale websites like amazon the ecommerce site for example you'll find that what powers those websites are hundreds if not thousands of these socalled server machines that just means a computer without a screen pretty much just super fast hardware or electronics inside to be able to power these huge ecommerce applications you also have those as well and again linux is a completely different type of machine than a mac or than a windows machine so given that we've said that if you have an application or a program on one machine like a mac and it's not possible to run it on another machine like windows how does java do this then let's take a look inside and see what happens so let's take a look at actually what's inside the windows machine so inside that machine first off we have an operating system and the operating system is foundational computer program if you like which tells a computer how to run and what i mean by that is that if you didn't have an operating system on for example a laptop or a desktop machine then you wouldn't be able to load any programs onto it you want to be able to access the internet you wouldn't even be able to switch it on have it do anything meaningful you just switch it on nothing would happen that's because all computers need an operating system installed on them which is kind of like the super program of the computer if you like which tells the computer how to run so for example it tells the computer how to access files how to access the network how to display stuff to the user how to print to printers that kind of thing that's what operating system does we have three different types of operating systems we have operating systems for windows mac and linux which is why we started off with those three machines initially so once you have an operating system installed on your machine that means you can actually start to run other programs on it so for example on my windows machine at work i can run microsoft word edit some outlines for a course for example i can also have google chrome running as well do some web browsing maybe i have outlook as well to be able to access email i can do all of those three things execute those three programs at the same time thanks to this operating system that we have and also underneath the operating system by the way is the microprocessor this is the actual chip inside the computer itself i've kind of grade that box out because we don't really need to know anything about the microprocessor apart from the fact that having an operating system means that the three programs at the top microsoft word google chrome and outlook they don't need to concern themselves with the different types of microprocessors so in this way the operating system kind of shields those programs away from the much deeper complexity of the actual chip inside the computer itself but in addition to these programs if we're looking at java we can also install another program and that's known as the java virtual machine now the java virtual machine is really where all the magic happens because it's this jvm java virtual machine it's the first acronym there that allows us to run different java applications so looking at the jvm once you have a jvm installed on a given machine that means that you can run bus java application on it you can run your other java application on it and again another java application on it so the jvm gives us a facility then to be able to run java programs that's the key point here now going back to these three computers we saw before you can have different operating systems on them so if you have a windows machine you might have windows 10 on there windows 8 windows vista windows xp those are different versions of the windows operating system if you're on a mac like i am you'll have mac os 10 and on linux servers you're going to have something like ubuntu suse linux redhaw or fedora the key point here though is that these three machines each have installed on them different operating systems however because each of these machines or specifically each operating system has a jvm available for it that's the java virtual machine special application we've just seen so there's a jvm for windows a jvm for mac and jvm for linux because of this that means that the java program that you write can then run on each one of these machines so this means you can write your java application on a mac then run it on windows or you can write the java application in linux and run it on the other two machines windows and mac it really doesn't matter and that's really the power of this socalled wara or this bright ones run anywhere the fact that java gives you the ability to be able to do that so you write the application once in java and then it can run anywhere you choose to put it there are a few other accounts as well which we'll just quickly go over we'll get to see these a bit later on too the first one is the jre this is the java runtime environment and this is basically effectively the package that contains that jvm so when we saw the jvm just now which was sitting on windows linux and mac that jvm actually comes as part of the jre the java runtime environment and that's the key there as well is the java run time environment because you're running programs but because it's the java runtime environment that's where you'd expect to find this jvm because the jvm's responsibility is to run those java programs we also have the jvm which we've seen the java virtual machine yeah that's the thing that runs those programs we've seen and we also have bytecode as well so bytecode pretty much is what the jvm runs itself it's kind of like the language that the java program is turned into which the jbm can then understand we'll see this in a little bit later when we look at compilation but what i mean here is that jvm as a program which runs java programs needs to take an input it takes an input file that input file contains the programming commands to tell the program what to do for the actual program code itself and that program code that is bytecode packaged in the socalled class files which we'll see a little bit later on too so who creates the buy code but what creates the bytecode is a thing called the compiler so just to recap we've got the jvm which runs the java application the java application is a file called a class file that class file contains bytecode and the thing that produces the bytecode is a thing called a compiler so the compiler's job is to basically take your java program and convert it effectively into instructions that the jbm can understand it does this by taking the program you write in the java programming language and that's known as source code so you write source code the compiler takes that source code written in the java programming language converts it into bytecode in a circle class file and then the class file is placed as input to the java virtual machine and the java virtual machine executes each instruction inside that class file the bytecode to actually do what you've programmed to do now this might seem like a whole lot of stuff to take in and indeed it is so let's jump in now and look at a tangible example let's bring it down from up in the air and actually look at this process firsthand and see how we actually compile a java source file into bytecode itself okay so let's jump in now and see actually how we can compile a java program our java source code using the java compiler or java c as it's also known i'm on a mac there's a program called terminal so let's just see how this process looks now first off don't be phased by the fact that i'm typing some commands into this big black window when you actually do java programming you don't have to do this so what i'm about to show you is really the nuts and bolts of what happens with java when you're compiling a java program to its bytecode but i'm just doing it for demo purposes so you won't actually have to do this yourself so don't worry you won't have to type these types of commands and it may look complex but it really isn't i'm just showing you actually the lowest possible level pretty much the the bare metal kind of like level what this java compilation is all about now we can actually do this in a text editor that's a small program that allows you to type in text and save it to a file without any formatting so we have any kind of bold or underlying or italic instructions in that file this is just a nice simple way to be able to quickly create a file using a command and for the purposes of this demo it's fine you won't have to do this in general so don't worry about it so that said if i make a new folder demo and i'll go into that directory and i'll quickly create a file with this special command and i'll just call it app.java and what this means is that i can just basically type in code here and it will create a file which is going to be the java file which will then compile and then see what actually the java compiler spits out so if i just type some java code here a public class app and then we're going to define a main method underneath this method public static void main which takes socalled array of string parameters this is the standard method that you'll find in any java program which is where a program starts off so called entry point but again don't worry if this looks complex for now because we'll cover this a little later down the line and then here i'm just going to type in this instruction which basically prints out hello world to the screen it's that system.out.printline you can see that and just finish that off with some closing curly braces and press ctrl z to end that you don't have to know what this code means but just know if i clear the screen i print out app.java just know that this code is the simplest possible java program you can write and it's a java source file because it has a java so called file extension in other words this is the file name here app but it's extension which is this thing that starts with a dot this is dot java it's a dot java extension so this means it's a java source file so how we compile that is we use java c java c stands for java compiler and we pass that java file into this program so when we just write out a command like this obviously it means it's going to run that program so now it's running the java compiler program we'll do in a second rather and it will take us input anything that we put after it so here we're saying app.java is the input into java c which is the java compiler if i then hit enter see it pause briefly then for a second and that's because the java compiler was actually taking this app.java file and producing the output file if we now look you can do with this command the contents of that folder that directory we'll see that we have our original app.java which we created which is this file here but we also have now another file which is app.class this is the class file that we spoke about earlier on that contains the actual byte code that's then runnable by the jvm so now that we have that bytecode class file let's see how we run it on the jvm so again let's have a look at what we've got in the directory here we've got java which was the program that we started with that was our java source file we've got app.class which is the class file the java c compiler produced is what it output so it took in the app.java source file that's the program code that we wrote and it converted that into app.class which contains the byte code that's going to run on the jvm so all we need to do to run this is we have another command and the command to launch the jvm the jvm itself is java so whenever you see java this is the jvm and if you see java c it's a java compiler so this command here means run the jbm again we pass the input we want that program to take and you might think we put app.class we don't we just put app and what this does when we run it is it's going to launch the jvm so the java virtual machine is going to be running and it's going to look for class which is the main kind of unit of code in java it's going to look for a class called app inside this current directory so because we have this app.class file here it's going to find that execute the bytecode which is inside it so if we run this now here we can see it's running hello world so that might seem a little bit technical and like i say it's something that you won't actually have to do you won't have to go into a big black box and type in those commands in the terminal like i did but i just want to do that so it gives you a good idea of actually what's happening behind the scenes and it turns out there's a tool that can do that for us really nicely which looks good it's got you know a proper window we've dropped down menus and it's a proper application in fact and that's called an id but we'll see that a little bit later down the line when we write a program in java that's the source code that we're writing to summarize it and we can do that as i say in a thing called an ide which we'll see shortly and so the source code is what we write it's the source of our program that's why it's called source code and that's in java programming language and that's converted into bytecode as in this class file that contains the instructions which are interpretable by the jvm which is the java virtual machine and as we've just seen how we get from source code in java to the bytecode in the class file is by using the java compiler which is this java c tool we saw so that should give you a nice overview of how the main components of the java platform slot together and just a sneak peek into how we can compile and run a java program using the java compiler as part of the jdk and the java virtual machine which is part of the jre but also bundled with jdk as well we're going to move a bit further and we're going to see how we can actually install the jdk itself onto our own machines so the jdk remember is the thing that has java c which is the java compiler which is the thing that takes our java source code and converts it to white code and then that byte code is then run on the jvm which is the java virtual machine and there's also a jvm which is bundled inside the java development kit which is the java command we saw as well so let's jump in so in order to install the jdk we need to do four different things really first off we need to work out which version of the jdk we need to install so that means basically we need to download the right jdk so if it's jdk for windows download the windows one the jdk for mac download the mac one but even amongst the individual operating system there might still be some choices which we'll see next we need to download and run the installer this is a really quick process to do it's literally just kind of double clicking so that'd be nice simple and straightforward next we need to set a thing called an environment variable which is going to be called java underscore home now environment variables it might seem it's getting very technical now it's really not it's basically just a way of letting other tools which work with java itself it's a way of letting them know where you've installed jdk2 and we do that through creating this thing called an environment variable which is very simple to do and straightforward as we'll see but it just basically makes a piece of knowledge knowing where the jdk is installed just exposes it so that anybody or any other applications rather which are running on that machine and take a look at the environment variable access the path or location of where we installed the jdk2 and finally of course we need to test that it actually works so first off let's look at how we can work out which jdk version to install so i'm going to do this on a windows machine this particular demo because that's probably the most popular operating system with people who are watching this course so the first thing you need to do is to find out if you're using a 32bit version of windows or a 64bit version of windows really easy to find out just go down here to the start menu and go to the little cog which says settings and then go up to system and then if you scroll down to the bottom you'll see about so if you just click about it'll tell you about the system and here you can see at the bottom it says 64b operating system x64 based processor so this tells us that this particular system is running windows 64bit and also if you notice you'll see this x64 here just remember that for a second because we'll actually see this in the version of the jdk that we want to download anyway so we can close this now with the x so just go down here into search box and we're just going to type in internet explorer just the first few letters we'll do as you can see so here we've got internet explorer so we'll just click this and if we just type in here java jdk download and you can see that it's showing us here the first link the primary link is the one that goes to the oracle website and this is basically for all of the downloads so all the different versions that you have with java this is the page you can get them from but we want to have a specific version we want to go for java 8 and that's because it's a lot easier for beginners to work with java 8 than it is to work with the latest and greatest version which is java 15. if we click on java 8 jdk accept cookies and so here we are on the java 8 jdk download page so if we just scroll down you'll see here that the version we're going to download is this 8u281 which is basically the latest version of the java 8 version of the jdk which is the one we're after and then if we go a bit further down we can see we've got linux here we've got macos solaris and right at the bottom we've got these two options here for windows at this point we need to know whether we have 32bit version of windows or a 64bit version of windows so there are two different versions of windows that you can have 32bit and 64bit and these are denoted by x86 means 32bit and x64 means 64bit you wouldn't necessarily expect that and this is actually a reference to the underlying microprocessor but just know that the 64bit version one has 64 in it and the 32bit one doesn't so we've checked already on this particular version of windows and we know that it's a 64bit version that we need because if you remember that's the x64 that we saw before so let's download the 64bit version now okay so if you just click on this exit file and we'll just accept the license agreement click on that checkbox and then just click this download button here and so unfortunately when you download the jdk you have to have an account with oracle it's free to sign up so if you don't have an account you can create this use this create account button down there but i already have an account so i'll just put my details in and then just hit sign in then you can see here now it says do we want to save or run so i like to save it to the downloads folder then i can run it from there afterwards i'm not worried about saving the password either so i'll just click not for this site so now you can see it's downloading it doesn't take very long to download it's not that big to be honest also i've got a pretty fast internet connection as well almost there runs a security scan and it says it's completed which is good so then if we hit this few downloads you can see here that it's actually in this downloads folder you also hit this button here it'll open up the downloads folder itself in explorer so i prefer to run it from there so if we just kill this browser and just this one too don't want to run it from here so you want to right click and you want to do run as administrator that's important because it needs to make some entries into the windows registry which needs administrator permissions so if we just so just click yes to this so you can make changes to the system now we're just going to click next here then we go to the next screen and on the screen we can see the items that it's going to install so it's going to install the development tools also the source code of the actual jdk itself which is interesting to look at as well although it's outside the scope of this tutorial but it's definitely useful to have a dig into that at some point if you're curious as well we've got the jre which we'll also install just so just accept the defaults here you could customize the folders if you wanted to but that's fine we're just going to accept the defaults for now that's okay just click next and then we can see it's just installing it's pretty quick to be honest copying the new files across over at this point here is offering to install jre first as well so you just click next to that also and it's just gonna run through that part of the installation procedure as well again it's pretty quick you can see here the job has been going for 25 years as well so it's a really it's really stable and rich platform to work on which is why it's so popular at this point it's been installed so just click close there so now at this point if we go into the c directory which is under this pc we look inside this program files directory under java then we can see here now we've got two folders jdk and jre version 1.8 so this is basically the jdk the java development kit and this is the jre the java runtime environment that we've spoken about before just quickly while we're on the topic let's just have a quick look inside inside the jdk you'll find a bin subdirectory subdirectory means a directory inside a directory and these are all of the the tools if you like which you have access to as a java developer to help you write java programs but the main ones you're interested in are java c which is the java compiler we've seen and java itself which is the java virtual machine now the next step we need to do is we need to just go back out to that folder above we need to basically put this folder here which is the folder where we've installed the jdk to we need to put this in this socalled environment variable so let's see how we can do this now so first of all if i just double click this then i click into the address bar here just go over here and just right click and then click copy so what i've done actually here is i've just basically put the the contents of this so the director that's highlighted into the clipboard because i'm going to use it later i can just cancel this out now and then i go into this one here this pc into properties which is actually an easier way being able to set this environment variable and then if we go into advanced system settings you can see here you click on that and then click into environment variables now what we're seeing here this is basically the set of environment variables which are configured for this particular system so the concept of an environment variable isn't just specific to java or even specific to windows it's a concept which is available in all operating systems and it just basically provides little place in memory the programs can look in to get a piece of data they need to share in the case of the java tools that's the jdk installation path and that's what we're going to set now but there are other ones too the most important one being path itself which is the one you can see here which we'll come to in a second but first of all let's create our java underscore home so if i click new here then go java underscore home if i press tab that gets me into the text box below now if i just do control v paste it and you can see it's here now now also if we just put that in quotation marks the reason being is that windows is a bit funny if you have spaces in a path that's meaning the actual descriptor of where where the folder is which is this thing we're looking at here it's a path you can see here we've got this space between program and files so just to protect that we basically put a quotation mark here and a quotation mark there then that kind of like packages it all up if you will so if we just click ok now so now we've got java home set the final thing to do is to double click on the path variable to change that we're going to add a new entry here which is java under score home with these percentage signs at either side and that basically means resolve this to the actual value so java underscore harm is the variable that's the name of the piece of memory which holds that data but to get what's actually in that piece of memory we can put percentage signs around it it's known as dereferencing that variable to get the actual value out and then put backslash bin and enter and the reason for that is because remember we've just had a look in the jdk directory itself and we then had a look in the bin subdirectory and we could see all those tools or by putting this in here adding it to the path this is going to allow windows to locate those java tools for us so basically whenever you enter a command in a dos prompt which is something we'll see in a second one of those scary black windows which isn't that scary in fact but it might appear so at first but it is really not whenever you enter a commanding day what actually happens is windows goes through each one of these folders in turn look inside that folder to see if that command exists in that folder and when it finds whatever the command exists then it will execute it so we're just going to move this up in this a few times that means that the first thing first place that we're telling windows to look is definitely going to be in like this java home directory java home pin directory rather and the reason for that is because unfortunately windows actually comes with jre to be able to execute java in the browser and that's actually stored in this path here and by putting this java on the score home bin before that it means that we're going to get our version of java which is part of the jdk which we've just downloaded so if we click ok to this and ok to this and let's close some of these windows we're going to go into the command prompt this dos prompt if you type cmd you'll see here we have this command prompt tab click on that now we're in a thing called the dos prompt or it's now known the command prompt and it's called that because it's prompting you prompting meaning to ask it's asking by virtue of that this thing's flashing this curse is flashing here it's asking you for a command it's a command prompt makes sense yeah so if we type set j which is a command and hit enter this is going to show us the environment variables which have been set which start with the letter j and you can see here we've got our java underscore home environment variable that we set if we were to do set p then we'd see all of the variables which start with a p and the first one we can see is path and now we can see here that we've got the java home environment variable we saw before it was being dereferenced by those percentage signs remember with a slash bin after it that means the subdirectory inside there if we now type in java c for the java compiler and do version and we should get a message back which says it's the 1.8 java compiler and the reason we're doing version is just it's a nice quick and simple way just to verify that a given command has been installed properly which in this case is java c and we can do the same thing for java as well which is the jvm that means that we've got the jdk set up correctly and just to double check that as well we just check the java version and similarly we also have the same version here so this these two versions match now one eight zero zero eight one one eight zero two eight one which is fantastic so here we've got the java compiler and we've got the java virtual machine don't forget if we hadn't have put that entry to be first in the list then we wouldn't have seen um that version here because it would have been picking up the java version from this one here instead anyway at this stage we're all set up and we can actually start to develop java applications on this windows machine we're going to take a look at the ide that's an integrated development environment that's basically a tool that you can use to write compile and run your java programs which no programmer will ever be without so let's jump in now there are two different ides on the market currently when i say on the market you don't have to buy them or anything but i just mean those that are available to you in general to download now both of these are free or at least have versions that are free and we'll just have a look at both of them now and compare them so the first one is eclipse the eclipse has been around a really long time it's from the eclipse foundation and it's a really good idea to start off with the other one we've got as well is intelligent idea now intelligent idea actually has two different versions that you can get it's got a community edition which is the free version and it's also got another edition called the ultimate edition and that's a paid product which typically you'll find in corporate organizations so in other words in corporates where you have a professional java development team if they're willing to spend the money on the id and the developers typically will find they're using intellij idea now the difference between these two are that eclipse is really easy to use it's great for beginners it's got various features which make it more suitable for beginners in my opinion like for example when you're programming it will actually highlight errors as you go along by underlining them in red which we'll see in a second and it gives you very clear error messages which kind of imply or kind of tell you pretty much how you should fix your code so it's great for beginners and it's very easy to use as well professional developers it can feel a little clunky at times and so a lot of professional developers tend to prefer intellij idea and again that's for more advanced users it's got much more power behind it because it can also be a commercial product with their ultimate edition you know they've really made this product into something which you'd expect a proper java developer power user to be able to get their money's worth with however that said intelligent idea it kind of does things behind the scenes which you've got to be careful about if you're not a professional developer and if you don't know what you're doing um so it can kind of trip you up so it's definitely for advanced users but eclipse eclipse is definitely the thing to start off with and we'll see how to install that shortly so that's the one we'll start off with here and we'll see how to do that in just a moment so let's have a look now and explore actually what features an ide gives us so the first thing an ide does is it provides you the ability to actually type in your programs so just like for example you might use a word processor like microsoft word type up documents or reports for work or you might use a spreadsheet like excel to do your accounts or manage your home expenses just like that as a programmer as programmers we use an id to type in our java programs now this makes things much easier as you'll see because of some key features which an ide provides the main ones of these are syntax highlighting showing you the errors you've made suggesting improvements to your code as you go along let's take a look so let's look at the first of these items then so what is syntax highlighting this is one of the things that the idea does for you so what is syntax highlighting okay so here's a chunk of code it's a very simple piece of code in java it might look complicated it's really not and it basically defines class my app which has one method in it which is the main method one and only method which is going to do something and what it does is it prints out the message hello world now if you see this program in an id it would actually have syntax highlighting and that looks like this so basically here you can see that it's coloured in some words it's given some colour to the words and those words which appear to be in a it's kind of like a maroon or a dark red maybe purple depending on how your eyes are but anyway these um these words like public class public static void those are basically filled that way to signify that they're keywords they're reserved words by the java language so the use of this for example is if you maybe for example misspell public and miss out the eye then you wouldn't color code that into a maroon color and you'd also have kind of a squiggly red underline as well which will tell you that it's wrong but coloring words in this way coloring the text in this way it just gives you that extra kind of quick visual guide the meaning or the cement or socalled semantics of that word or that keyword now you can see we've got other stuff which is still in black so typically these are going to either be class names methods or types so here we can see my app is the class name main is the method name and the string array there string with the two square brackets that's a type we'll see again the actual variable name which the thing we're passing in these args value a bit difficult to see but that's actually in a different color again that's how you can tell or differentiate inside that method between those two curly braces you can see immediately whether you'd be working on a variable which is passed into the method against a variable which is outside the method for example you'll also see as well on the third lining where we've got the system.out.printline we can see we've got the out is italicized it's in italics and it's also in blue that denotes so that's a static it's a member which is a bit advanced now but it's just another way they can visually give you a bit of help and inside you can see we've got the string which we're passing into system.out.printline which is a command that prints something to the screen we can see we've got we're passing in that string in quotes and we can see it's colorcoded that a nice bright blue for us so we can immediately tell where the strings are in the method as well that might not seem that useful but the more complex your programs become you really get to be able to kind of see the code better with these kind of features but you won't tend to notice it too much when you start out though so how does it show errors then i mean that's probably the most important thing you care about if you're a beginner so here's an example so this is eclipse and here we can see we've got the main method we've got this application we saw before and here we've got a class so it says public class my app and you can see it's got a red underline underneath my app and there's a red kind of circle to the left of that the line numbers and if you look beneath there you'll also see the same red circle with an x in it and it says java problems one item it says syntax error untoken my app it says a left curly brace expected after this token so you can see here it's actually telling you what to do it's telling you that after my app which is the word it's underlined in red it's expecting that you're going to put this opening curly brace and in fact the minute you put that opening curly brace the red x would go the red underline would go and the problems would you see there in this java problems section that list that would also go as well and be clear so there's one way it can show you that things are not quite right and you'll see red x's everywhere contextually where that is so if you see on the left hand side for example this is basically the project structure you can see at the deepest level you've got this myapp.java and then above there you've got app which is the package that's in the package is just a folder for a class inside java and then above there you've got a source main job which is the folder which contains the actual java code itself and above there you've got app which is the name of the actual project again as soon as you fix it those will go so the next thing we've said that it gives you suggestions which are going to help you out along your way and this is really useful for beginners so let's take a look at this now as well so now we've got a different id this is intelligent idea now which we're looking at and just incidentally as well you can still see we've got this red underline here so you can see in the main tab here it says app.java we've got a red underline and we also have it in the left hand project pin as well and that's because at the point the exact instant when we're programming in this particular program the syntax is incomplete because we've got system dot then we don't have anything after that and that's not valid syntax it's not a socalled valid statement a statement is basically the smallest unit of code that describes what you want to have happen and that can either be assigning a value to a variable or it can be invoking a method calling a method on either a class or an object or one of those things so where this help comes in then is actually where you're typing when you're actually typing out the code at certain points the id will offer you suggestions as to what you might want to type so for example when i type system with a capital s that's referring to the class system which is inbuilt into java it's a class that we get for free with the jdk the jdk comes with hundreds of different classes you can use to do various different things the system class is one of the most basic or foundational classes that you can use and when we do system dot that dot signifies that we're going to do something on that system class or connected with that system class specifically we're going to access something on a system class and we can either choose to access a data member so if that class has a variable inside of it which holds some data which holds some value or maybe an object or whatever we can access that we've seen that before with system.out out is actually a variable inside the system class which stores a reference to a thing called the print stream which is basically the way that we can print characters out or print data out to the to the display if you like but in addition to being able to access data with the dot we can also invoke methods with the dot so here we can see when we're doing system dot we have several different methods which we can choose to call so the first method for example in this box which appears below in this drop down it automatically appears by the way you don't have to do anything you just as soon as you type dot this will appear and you can see we've got a method set property which takes a key and a value we've got another method array copy which takes some other things got a method current time millies method console clear property that kind of thing what these methods do now are interesting to us but the main point is that as soon as you hit that dot then the id offers you options for what it's sensible to call at that particular point that's a key point it's not just offering you any old stuff it's actually offering you things that would only make sense to call actually there but when the id offers you either suggestions like this or code fix suggestions it can also fix code for you as well which is pretty handy or if it offers you the ability to generate code to actually program certain aspects of the code for you which is also something else it can do and by the way all of these things together make a developer's life so much easier you actually think programming is pretty difficult but when you look at the power of an id and what it gives you and the amount of stuff it does for you automatically it's actually not that difficult to do programming to be honest but anyway the main point is that it also takes into account the context of where you're actually coding at that moment in time to be able to offer sensible suggestions as to things you might want to do and furthermore as you actually type out the method if i started to type for example supposing i was going to go for the word console for the method console i would type the c and what would happen then is it would automatically filter that dropdown box to just have the methods which start with c so it would be clear property console and current time millis which appear then i type oh so now i've got system.co then it would just say console and at that point then when it just says console i can hit enter in intellij idea or its tab in eclipse and it would type out the rest so type out the remaining letters for me as well we'll also immediately put the parentheses there for me so those brackets and if i typed a method which actually wanted to take anything she was designed to pass in the input parameters it would also tell me what it's expecting so for example if i was invoking the array copy method as soon as the left parenthesis is put in so the opening bracket it would come up and say okay what's your object source for example we don't need to know what the actual array copy method does as it happens it just copies the rays as you might expect those are those groups of things of the same type we saw before like when we saw a string array actually like we can see the string array above these square brackets the point is an id gives you all of these really useful and helpful functions along the way so it actually makes developing programs much easier you don't have to type you know every single character painfully piece by piece that kind of stuff it does it all for you and even if you for example put in a left curly brace so an opening curly brace and hit enter it will also put in the closing curly brace as well so you don't have to worry about that little things like that it'll also indent the cards so you can see here that on line three we've got the declaration line for the method and you can see it's indented in other words it's put space to push it in from the left there that's so we can see that visually that's a method and similarly inside the method on line 4 when we're starting to write a collection of statements which would comprise this method we can see that again it's indented it and that means that visually we can see now that any statements or any lines we have from line 4 which are inside of these curly braces they're going to be very kind of visually clumped together or grouped together so that we know that's the implementation of that method yeah that's another thing that idea will do for you the other thing an idea allows you to do is to actually compile your code so just like before when we did the quick demo and we were compiling the java code using java c in the terminal window on the mac and you remember java c then took that java source code compiled it and turned it into java byte code which could then be run on the jvm but when you use an ide this is done automatically for you and not just for one file for multiple files that might comprise the project and typically what you'll find is that an ide will actually compile for you continually as you're actually developing the program highlighting any errors along the way as well and suggesting current improvements you might want to do now typing your program in and compiling it is all well and good but of course you need to actually run the program as well and that's another feature that an id allows you to do to actually run your program which is sometimes known as executing your program and usually in doing this it'll also show you inside the ide itself any output that the program returns which is also very useful to have everything in one place and finally one of the best features of an id in my opinion is the ability to actually debug a program so as programmers we write program code and obviously we're writing primary card because we're assuming what we're writing is actually going to work but more often than not it doesn't work or at least if it doesn't work completely there might be a few issues with it which we've got to try and fix and the best way of fixing does is actually to run the program in slow motion it's the best way i can think about describing it this is what you do pretty much when you're debugging a program it allows you to go through what's known as step over each line of program code as it's been executed then along the side of it you can actually see what's happening to the other areas of your program so how do you use an id what does it actually look like when you're programming properly for real putting together a real program well it looks like this first of all you're editing the card so you're inside the id and you're typing in the program code which you think is a programmer is going to do what you want it to do that's the first thing you're going to do you're gonna edit the code and then afterwards at some point you're gonna compile the code or build it now with eclipse it does this automatically for you as you go along so it's always compiling code for you automatically but if you use intellij idea for example you actually have to trigger this because you're in control of when you want it to do the compile or to do the build itself but nevertheless you're typing away and in the case of using eclipse it's compiling the code as you go along this means that at some point you're going to see some errors so unless you're doing everything completely perfect from scratch you're going to see some errors like those squiggly underlines we saw the red underlines and the red crosses that kind of stuff and when you see those errors of course you're going to have to correct them so that means you're going to go back you're going to edit your code again when i say go back you don't physically go anywhere or return anywhere you're still just inside the ide so you're just typing things out in eclipse but you're just happening to notice red or red crosses red underlines or whatever which is showing you socalled compilation errors in other words problems with your program that you have to address because it's not compiling and that's happening because the compiler the java c compiler is doing that for you behind the scenes so then you reedit the code to fix those errors and then at some point of course you get to the point where you have no more errors you actually have the complete code which comprises your program and at that point you're done because then you can finally run the program itself that's pretty much what we go through as programmers and we're doing this process of programming coding so now we know what an ide is we know what features it's got and we know how to use it let's jump in now and install eclipse which is the best idea you can use if your job a beginner let's jump in so if we go to internet explorer again this time if we type in eclipse here we can see we're at the website for eclipse.org the first thing that pops up and we're just going to download eclipse id i just hit the download button here and again you've got a choice of which operating system you're going to use we're on 64bit windows so here we can see this x8664 which means it's compatible by the way for both 32bit and 64bit versions of windows that's fine click that and then we'll just hit download again same kind of thing we're going to save it doesn't take too long to download as well now we can see it's completed so if we just go to open folder we can close this now we can see here we've got the eclipse installation now if we double click this because we set that java underscore home environment variable before eclipse now knows where to pick java up from and how to run so you've got different options here we're going to choose this one and we just install accept the agreements and now it's actually downloading that particular version of the eclipse ide onto your local machine and it might take a while to download but it's fine you can see now it's downloaded so if we just do launch notice as well it's also created a shortcut there on the desktop as well the first time it launches it might take a little bit longer that's fine we'll just accept this as a default for now click launch again now here we are we're inside eclipse just close that so this is the eclipse welcome screen and you can just hide this and close this panel here and then at this point we're all set up we've installed eclipse the ide for java and we're all ready to start creating a new java project now you know all about ides and as you can imagine programming isn't actually as bad or as complex as people would imagine when you've got a tool as powerful as that at your disposal and we'll be seeing how to use an id in the next video we're going to look at java code in detail for the first time so we're going to start with an overview of the key constructs those are the key kind of things you have to write to be able to develop your java programs then we're going to pull it all together by having a live coding session in eclipse to program a very simple program in the ide let's jump in so let's just take a look at actually what's inside a java application then in other words what are the components we'd expect to find inside a java program itself so first up we have a class definition and this basically is the main unit of code that you create in java so when you write a java program pretty much you're writing these classes which can then be assembled into objects and then how the actual program works is that these objects can have methods invoked on them a method is like a chunk of behavior which you want the object to do that method typically will cause an interaction with another object or it'll cause the object itself somehow change its state in other words to change the data that's actually inside the object so this might seem a little bit abstract for now don't worry about it too much don't forget that we're just actually looking at what the high level pieces are for now and we'll go into actually how they work a little bit later on so first up here we have a class and how you declare a class in java is that you have to use this kind of syntax here so when we say syntax we mean basically the sequence of words you've got to use and whether you have to use any special symbols like for example you can see here we've got this kind of like curly bracket thing this is known as a curly brace so you've got a left brace there at the top after the word my app and you've got a right curly brace at the bottom you can see that's basically the syntax so the combination of words and symbols used to define the class the java compiler just don't forget as well as the java compiler that java c program we saw it's going to be responsible for taking the source code you write taking the java code that you write and then producing a bytecode file out of it and because of this it needs to follow a very welldefined format of how you present things in other words you need to speak its language you need to speak the language of the compiler that's basically what you're doing when you're programming in java you're speaking the language that the compiler understands writing your program in java which they can then be compiled and into bytecode and run another jvm so yeah so here we can see we're creating a class the class is name all classes have a name and the name of this class is my app so you can call a class whatever you like to call it it's entirely up to you and typically you'll call a class give it a name that is based on the actual thing that you're modeling and in this case a name like my app for example would expect maybe this is like a class which would be the kind of starter class if you like which starts off your java program so in other words it's kind of like think of it as like the the main class or the top level class if you like after all java programs need to start somewhere and they start with a method which contains the behavior to start the application and that method needs to be defined ultimately inside a class so we can imagine that this class here myapp is a class which effectively contains your application okay now how we actually define a class my app is we use the classes name which is my app as you can see there and we can see it's got a capital m and a capital a that's because in general with java when you're defining class names you capitalize the words that make up the name of the class that's why it's capital m and capital a and immediately before this we've got a word which is class and that's because in java when you're defining something you have to tell the compiler what it is you're defining so you're defining a method or a class or a variable whatever else it might be we'll come across these things a little bit later on but for now just know that to create this class you must at least have word class then followed by the name of the class then of course inside the class itself you need to actually give the code which you want to go inside the class so in other words you need to give the methods which define the behavior of the class you defined those inside the class and you also need to define as well the data that it's going to hold so a class in general in java it holds methods which will tell objects what you want them to do and it holds data which will tell objects data all the states if you like which you want them to hold and you need to wrap all of those inside these curly braces which you can see here so a classical relation in java at least needs to have plus in the class name and an opening curly brace then the code you actually want to put in the class and a closing curly brace now you'll also see this word at the front which is public and that's because in general most things that you declare in java can have what's known as a visibility modifier that's just a fancy way of saying how visible that thing in this case the class is going to be to other items or other things inside your program and with this word here public it means that basically everything inside the scope of the program will be able to see the class myapp we'll see this a bit further down the line when we called a quick class up in an ide but yeah that's basically how you declare classes inside java next up we have these method declarations so as we've said in java classes contain methods and a method basically is a program code or rather it contains the program code of something you want to have happen so here for example we've got a method called greet again methods have names just like classes do and again we can see we've got the opening curly brace and the closing curly brace so as you might imagine inside these two things you have the actual code that you want to execute whenever this grease method is called in other words the thing you want to actually do which is also known as the implementation of the method and you'll see also again that at the front there we've got this keyword again called public so by the way as well we have these things called keywords so keywords are basically special words that you use in java which signify something special to the java compiler as we've said before we've got public as a keyword and public means that any other items in the program can access this particular thing which in this case is a method that means that if i have 10 20 different classes inside my java program all of those classes will be able to see this greet method that's one keyword void is another keyword which we'll get to in a second and we have class as well which we've just seen before which is the keyword used to declare a class so i come into this void and the brackets which you can see here so after greet after the name of the method which is greet we've got these opening and closing brackets called parentheses and what you normally find inside these parentheses you find the input parameters so in other words the inputs that this method can take so a method in general you want it to do something and in order for it to do something sometimes it might need to take actually more often than not it might need to take some specific input some specific parameters we call them so you'd place them inside these parentheses now if you just see parentheses on the run with nothing in them then that actually means quite logically there are no inputs to this particular method so here this method called greet it doesn't take any inputs in other words it doesn't need to have any values has to it to be able to do its job the reason is because for example you can imagine it would just display hello world on the screen and if it just displays hello world on the screen it doesn't need to have an input conversely if you wanted it to take an input you could for example has seen a socalled string which is a piece of character information in other words a word pretty much and that string might be called name then you could say hello and then the person's name so you could use that socalled variable to be able to access the value that's passed to this method we'll get to how we call methods also notice how we invoke methods a little bit later on when we get into the demo of how we can code some java and but for now just know that the parentheses enable you to pass the method the inputs of that method so the parameters that it takes now if you pass things in obviously there's a chance that you might want to pass things back out and you can pass something back out by the word which goes before the name of the method and that's that special void word we see here so a void in this case is a special word special keyword which actually means don't return anything so again in the case of the greet method which is just going to display hello on the screen it doesn't need to return anything it doesn't need to pass anything back to another method that might have called it because methods can call other methods that's how java programs work to get the job of the program done and in this particular case because it's just printing single thing which we'll just define inside the method itself which is this hello world couple of words it doesn't need to return anything to anybody else so then you'd use this keyword void now if you wanted to return something else for example you wanted to return the greeting itself then you could replace void with the actual socalled return type that's basically the type of the thing that you're returning you could say public string greet that would mean that this method returns a string character data we saw before that's a string of alphabetical characters basically or maybe you want it to return something else you could return an int for example which stands for integer that could be just a number you're returning you might return a date if you're doing some kind of logic to manipulate the date on the calendar that kind of thing i could return an object as well so you can return choose to return whatever you want basically and also similarly with inputs you can also choose to pass in whatever you want so again objects hints those are numbers strings that kind of thing whatever you want to pass in that's fine you just separate them with commas that's how method declarations work then we've got variable declarations so here's a variable declaration here now variable is a place inside the program which is kind of like a storage area you can think of it as being a box and inside that box it's going to hold some piece of data some value that you want to assign to this variable in other words put inside the box so here for example we've got string recipient name and you can imagine that might have a value assigned to it which is your blogs for example maybe this might occur if you were writing some logic to process an order for example on a website like amazon you imagine amazon might have some kind of order processing java code there you could also store number and this is an integer it's a whole number so number of items for example you might call num items and here by the way as well you can see that the convention that means the pattern or the rules you have to stick to the convention we're using to use as the name for the variable is slightly different from that with a class so here it doesn't start with a capital it starts with a lowercase that's nice because it means that we can just by looking at two items last name or a variable name we can quite easily tell if we're working on a variable or if we're working with a class that's the reason for that and finally you might have shipping address for example and that could hold a reference to that means the actual type of the thing that's inside the box that's the thing which comes first so in all of these cases you'll see the first word the keyword which you have is basically the type of the thing you're storing in the variable so string recipient name so we're going to store characters in their character data our words are for numeric characters in num items here we're storing in a number an integer okay so that means that we can't for example assign a person's name to num items because that will fit inside that box that box is just designed for numbers it's not designed for strings similarly recipient name we can assign the number 2042 to recipient name because it's expecting characters character data and then the real power of object oriented programming which java is based on is that you can then start to work at higher levels you can start to compose things together in other words build them together with building blocks so here we can see we've got shipping address now shipping address its type of the thing that it holds is an address right and an address can be a class which is defined elsewhere in the program and that address might also have other items in it it might have a string which is address line one another string which is address line two maybe it might have a zip code which is of type zip code and zip code itself could be a class and maybe inside the class zip code it also has in addition to the actual numbers and letters that it's holding the data that it's holding just like we're defining data here in addition to that it might also have a method which can validate a zip code passed in so when you try and create a zip code for example out of a string so you pass it a zip code in my on creation of that string also invoker method to make sure that that string is valid so in other words it's a valid zip code and you can put that kind of logic in these objects in these classes which we'll see now where do you define variables you can define them either inside a method or alternatively as we can see here you can define them inside a class and when you define them inside a class you typically find them grouped together like this and you'll also see another modifier visibility modifier or access modifier which we haven't come across yet and this is private so just like we've seen public before which basically means that anything in the application can see that other thing we also have this other keyword called private and that means that only the thing that holds these variables can see those variables for example if these were in a class which is called order so imagine we've got some kind of order class which we've created to hold the information when somebody makes an order on amazon for example if we were doing some kind of website like amazon then maybe we want to have the recipient name in other words who's going to receive the order the number of items how many things they're actually ordering and the actual shipping address so where we need to send it we'd have other things as well of course like for example the thing that needs to be sent that's obviously not on here but this gives you an idea now when we have these items of data which are inside the order class we're going to keep them private so that it's only the order class who can operate on these values and the reason for that is just keep things nice and tidy because if these were public it basically means that any other class in the application could start meddling with and interfering with these data values and then you can risk the socalled integrity of the program so a nice thing about objectoriented design objectoriented programming is that you can socalled encapsulate as the word here encapsulation encapsulate the data that's inside an object inside the object itself you can think of this pretty much being like order is like a box and it has three other boxes inside string ins and address recipient name number of items and shipping address it's only the order class itself which can see and operate on these values we have two items to objects or classes that is we have data members which we can see here that's actually holding the state of a given object but we also in addition we have methods as we've seen as well so you could imagine basically an order class might have some behavior attached to it which we've programmed which we call dispatch and so you can imagine that at some point in the program another object perhaps when we've actually received the cash or entered our credit card details or rather receive the credit card details from the user we then invoke the dispatch method and inside the dispatch method we'd have the code to actually send the order and maybe that might return back something as well so for example it could return an order reference which might be just one big long number so here we can see another socalled data type which is long which basically means like a number which is much bigger than you can hold inside an integer don't worry about that too much for now the different types you have in java but just know that classes have two things they have data members and they have methods and they're defined like this so going back to the idea before we have a first class or a primary class or the main class if you like which actually starts an application how does that work then well that works with something called a main method so here we can see a main method and it looks a little bit more complex than the format of the other methods that we've seen but it actually follows the same syntax so here we can see the name of the method is just before these parentheses it's called main that's the name of the method inside the parentheses we can see the input parameters to that method which is always the same it's basically a group of strings this group is called an array it basically means they can pass in multiple strings or multiple character data to that method that's what those two square brackets mean after the string word now inside the code of the method if we wanted to access those we'd access them by using the word args which is basically the name of that array that we can use inside the method code to be able to access the inputs that have been passed in now to the left of main we've got void which we've seen that means it doesn't return anything and indeed there's nothing that it could return there's nowhere it could return any data to because it's just going to be invoked from when we run the jvm like we've seen before when we do java and then the class name what the jvm does is it basically looks for that class looks for a main method inside that class which is this one and then runs it but because nobody's calling it besides the operating system or beside the jvm or rather the jvm it doesn't need to return anything so it returns void right at the very front we can see it's public that means that anybody can call it which is useful if you want other classes to be able to kick off the program but in general you don't really care about that but nevertheless it's public it makes sense for it to be public because it's the main method and finally in between public and void we've got this other method called static and what that means is a special keyword again that basically means that this method can be invoked it can be run but it doesn't have to be invoked or run against an object it can just be invoked as is against the actual class which contains that method we'll see that later on but don't worry about that for now and you can see as well of course we've got the implementation of the method we have between the opening and closing curly brace there as well so let's see how we can put it all together into a java program now by jumping over to the id and putting it all together yeah let's jump in now and give you a quick demo of how we can actually use the ide so we're going to use eclipse for this and it's basically just to give you a kind of a kind of an idea kind of a walkthrough basically of what typing some java code into an id looks like so we'll see how we can type in code features of the id how the builds occurred how it compiles it how we can run the card too afterwards we'll have a look at how we can actually debug code let's jump in oh by the way i'm on a mac for this and but don't worry though because actually as it happens eclipse and intelligent idea they're both applications which are programmed in java and so because of this it means that they're pretty much the same to use on both platforms you shouldn't have any difficulty in understanding me showing you this and it clips on a mac if i jump in now and i just click this eclipse so we'll just accept this as the default that's fine just to launch so if we just double click this maximize it and get rid of this screen and here we can see we're in eclipse and here we can see we're actually in the socalled eclipse workbench so you'll see here that in the main pin we don't have any program code yet that's because we don't have a program specifically we don't have a project in fact which is where we actually put our program code in order to write a program you need to have a project so that's the first thing we're going to do so let's jump in and create a project together so there are different types of projects you can see over here i'm just going to go into this one and create the simplest possible type of project java project if i go down to next project name we'll just call it myapp we can accept the defaults on here so just go down to finish and it's going to ask us if we want to open up an associated perspective this is basically a layout of the windows which defines pretty much what tools you want to see when you want to have them positioned so i'll just do remember my decision and then do open perspective and now we're in this socalled java perspective which means we can actually start doing our programming so if we go over to here into package explorer and double click this this actually shows you the project itself so the project so far just has two things associated with it it has source folder which is where we're going to put our program code and it has this jre system library this is basically saying which version of java you're going to use so i want to create a class which is going to be the main program so i right click here and i go into new and i could just go straight for new class i could do that but instead what i'm going to do is i'm going to create a package first and a package is basically kind of like a wellnamed folder in which you can group different source files that's not too important to understand now but in general with java it is something that you need to do where you basically place classes into packages just keeps everything nice and organized so i'm going to give a package name of com.java easily got demos i'll do for now and then i'm just going to hit enter i don't have to use the mouse to click this finish button if it's already highlighted blue like this i can just hit enter and it saves me from having to move the mouse over there so enter just picks out the default person that's currently highlighted effectively clicks it for you and by the way as well packages in general they follow what's known as the reverse domain convention that basically means that you take the domain name of the company that you work for in my case it's java easily.com and then you reverse that that'll give com.java easily then after that you can put whatever you like which makes sense to your organization just to be able to group the different classes that you write so here this explains com.java easily.demos so now if i just right click in here now i can create the class i go to new class and we can see here it's going to create it in the source folder it's going to create it in this package here that we've just created now i just have to give the name of the class so i'll call it my app and also there's some extra options here which we don't really care about apart from this one over here we tick this it's also going to create that standard main method which we said before kicks off the java program so we'll just do that and click finish now we can see we've got our first class my app where we can put our program code and we put it inside the main method and at this point this is a fully working program doesn't do anything because we haven't actually got an implementation we haven't got anything rather we haven't given any instructions inside here so let's just plug in a line now just to print out our message so to do this we use the system class which is part of jdk you'll see here that it's in the java.lang package so that's one thing to know about java any classes which are in the java.lang package they get what's known as imported automatically for you which means that you don't have to explicitly declare that you want to bring some class in to use it now we haven't looked at imports basically if you want to use glass from another library typically what you'll do is between the package statement at the top on line one and the class declaration on line three you'll use an import statement and the import statement will be something like for example import java.util.list for example if you wanted to reference a list from the java.util package the java comes with a whole heap of different classes which are inside various packages as part of the jdk you can have all of those at your disposal as well but for now just know that we've got the java.long package which has effectively been auto imported for us anyway so then i do system dot you can see here this is the compiler giving us helpful suggestions so if i look in here if i scroll up you can see it's not just one method or field it's given us it's given us a whole heap of them a whole different array of them these are all the different methods or fields these variables inside the class that i could actually access now so for example we're going to do this one here which is out so i could either type out like that and as you can see as i type to each character maybe just back up a little bit i type each character so i type the o first you can see there that it's actually matching and filtering the list based on that specific letter i do you next now you can see it's got two options it can suggest for me i want this one also as well another really nice thing in eclipse you'll see on the right hand side there of the method and field suggestions they've got this kind of like documentation panel and this is actually showing you the socalled javadoc that's the java documentation for this particular field on the system class so it's really nice that you get this kind of help specifically when you're starting out as well so you can go over for example you just have a read of it you can scroll up and see what it's telling you you can see they're saying there's some other methods that you could also choose to look at as well if you wanted to we're not going to look at this in detail now but just know that it's there to help you and it's again it's another one of these nice aspects of eclipse that you have which again makes eclipse in my opinion the best id for beginners to start out with that said if i hit enter now i've got this system.out reference which is a reference to the print stream which enables us to be able to write a message to the display now if i press another dot here you can see we've got the same kind of thing again only this time instead of it showing us like you did before methods or fields which were available on the system class now of course we're not accessing the system class anymore now we're accessing the print stream because out which is a field inside the system class the actual type of that the print stream so that's how it works in java pretty much whenever you have a dot it's the thing immediately to the left which is being referenced and again when you press the dot you can either access fields on the class or object or methods on the class or object another method i want is called print line so if i start typing p r i n t l n you can see here we have a whole heap of methods which all appear to have the same name and that's because they're the same method but in java you can specify method multiple times with each method declaration accepting different types of input and that makes the method very flexible so for example here you can see we can choose to pass in i use my arrow keys an integer that's the type for those whole numbers we saw so numbers like 3 17 4072 that kind of thing oh we could pass in a string so that's why we have a message which is in quotation marks so it's a very flexible feature of java and it's known as method overloading if i now press enter and you can see it's automatically selected that particular method for me it's also put the parentheses around as well and now it's also saying okay we'll give me a string which you can see there above if i just put quotation mark hello world the quotation mark at this point you can see that we've no longer got any red underlined squiggles squiggly underlines nor do we have any of those red crosses in the circles that's because now this particular class is valid java code in other words it can be compiled down to bytecode and then executed on a jvm if i move this cursor away you can see as soon as i moved it to the right by the way i'm using the arrow keys do this so your left arrow moves you one way right arrow moves you the other way so as soon as i moved it to the right because we were outside of those parentheses then eclipse notice that there's no point in giving us that little helpful tip which told us what it was expecting which was a string so at this point we've got a valid program now if i just save it because we've got this star here which means we haven't saved it so i'd do command s on a mac ctrl s on windows just save that and then if i right click on here the class itself and do run as java application and then we'll see here we've got this new tab which has popped up called console it says that the program's finished that's what terminated means and you'll see underneath we've got a message a string that we passed the system.out.printline which said hello world so you can see here a few things number one it's allowing us to type in the program code and with that it's giving a syntax highlighting showing us when we make errors and it's providing helpful suggestions number two because it ran the program that means it must have compiled the program down to bytecode so it must have invoked the java c compiler somewhere along the line which we'll see in a second finally number three is actually running the program for us as well which means it's passing that compiled by code the jvm we can see here in fact this is the actual command that it used to do that when it launched a jvm now just to show you as well we actually do have this file which was generated that's the bytecode don't forget if we go up to window and go to a new view we go down to navigator and you can see here this is actually showing us all of the files which are in the project so this panel here this pane here is just showing us basically the items that are relevant to our source code it's just purely focused on showing us the relevant things it's actually shielding things from us that we don't necessarily need to see on a daytoday basis which is kind of good because you can just focus on exactly what you need to focus on which is the actual code and making that work but you'll see we don't have for example the myapp.class file which we'd expect it is there it's just in a separate subdirectory so if we go down to the navigator view here you'll see that this is the actual real object structure with all of the files and you'll notice that inside our source folder we've got source com java easily demos myop.java by the way that's one thing to bear in mind as well that the package that you place a class into actually gets turned into a directory structure like this so you can see this is like comm dot java easily dot demos which corresponds to com java easily the demos up there anyway that's where the source file was and similarly if we go into the bin sub directory we'll see the same structure so we'll see com java easily demos corresponding to com.java ease little demos because java classes in a specific package compile down to class files which are in the same package so therefore it has the same folder structure and inside there you can see we've got myapp.class which corresponds to my app.java here so class my upload chart so if i close these off and this one too and you'll see there are also some other files and folders there as well we've got the project the class path and our settings these are folders and files for eclipse's internal use we don't need to know about those for now so if we just come out of this and so we'll just see now how a method works for example so i can actually take this piece of card here i can do this i can actually do a special advanced procedure which i'll give you a sneak peek into or refactoring so if i just right click here and i go down to this menu here refactor and use this one here called extract method if i click this now what this is actually going to do is it's going to take this statement out or printing hello world and it's going to push it into its own method and replace it then with a call to that method this is a great way how we can first of all reinforce our understanding of how methods are declared but also we can actually see how they're invoked as well how the method is actually called in other words this asking me to give it a name so i'm going to call method say greeting for example and here you can see we've got these access modifiers we were talking about before you'll recognize private and public earlier on in the course we'll just leave it for private for now that's fine because we're only calling this method from within this class it's okay that it's private it'll still be visible to the method from which is called as we'll see then here we can see we've got a preview of the signature itself and the method signature is just a fancy way of saying what the method declaration looks like with all its combination of modifiers return types method name and input parameters so now if we click on ok you'll see that just like that we've got a new method so this is how you actually call a method you just basically use the method name then the two parentheses there which matches the method name here and the two parentheses here and here we can see the method declaration itself so if we rerun this now it shouldn't change anything just right click again go down to run as java application yeah it hasn't changed anything so you're probably saying well what's the point in rerunning it the point of rerunning it is just to make sure that after we did that socalled refactoring we're just rerunning it to make sure we didn't break anything because in spite of the fact that we didn't actually have any red error marks do we did that it's still possible that we might have some kind of errors or whatever depending of course on how complex the curve refactoring you were doing actually was so let's quickly demonstrate now how we can actually pass parameters so if i just go up here let's supposing i want to pass a parameter here such that instead of saying hello world it will say hello and then the person's name in order to do that let's put in a parameter here so we use the type of the parameter which is going to be a string because it's going to hold textual data so character data so alphabetical characters that kind of stuff and we give the variable a name which coincidentally we'll also call them because that makes sense we're passing in the name of the person we want to greet and once we've done that we can delete this and replace world with the variable that we passed him if we pass in matt it would say hello i'm at with us in john it would say hello john and you'll notice over here we're getting this red squiggly underline again and the reason is of course because we're not actually passing a name now because we haven't adjusted this method call to take into account that we're now passing a name here and if we didn't know that give you another demo of how helpful ids can be if we just click on this x over here we can see that it's offering us some ways to fix this situation it's saying we can either add an argument that means a pass a parameter to match the fact that the method takes a string parameter that's what we're going to do by the way our alternative is saying do you know what you can actually change the method itself to remove parameter both of those if you think about it would fix the situation just press escape quickly just to explain this if we pass in a parameter here which is a string it will match this which means it would then work and remove that red x square the underline and similarly as well if we removed this parameter here then we'd have a method which doesn't take any parameters so that would also work which would again remove this squiggly underline and the red x so both of those options are perfectly viable if we go back on again by clicking it we see there's another option as well which is to create a completely different method which doesn't take a parameter at all and at this point you'd actually have two methods with the same name one takes a string one doesn't that's the concept of overloading i mentioned a few moments ago so yeah all viable options which the id is offering you all easy to understand and simple to digest as long as you read actually what it's saying and you'll notice as well that on the right hand side where we saw the documentation panel before which gave us help documentation this time we've actually got a potential preview of code that he could write for us now he doesn't know who we actually want to say the greeting to whether it's matt or john so the best it can work out and say whatever that is infer the best it can infer which we usually say the best it can infer is just to say well okay don't really pass anything past null we won't go into null and what that is it's outside the scope of this lesson but it's one solution and similarly as well if you click this one it's again giving you a preview of what that would look like of course it hasn't fixed the entire code because even if it did that it removed that name parameter you'd still then get an issue here where you'd be referencing something that hasn't been passed in but it's enough to give you an idea what you might want to do and the where the id would adapt to the card for you so anyway we're going to double click here now and as it promised it's putting that null placeholder for us which meant that at least now the code compiles now instead we're just going to replace that null value with my name for example and if you just press escape afterwards it loses that box highlight so you can see the code a little bit better so now if we run the program and to run as java application we'll see that he's doing something else helpful because we didn't save that before it was a star there still now it's saying oh do you want us to save the resources for you as well you want to save the source file yes i do i even say always save the resources before launching so always overwrite and do okay and now we can see it's saying hello matt so that's an overview of how you can pass parameters into methods now to show you the idea about debugging that we were talking about before we could right click and do run as that will just run the program but i can also do debug as i can debug the program now before you do a debug now before you launch the debugger or rather the id when it's in debug mode you need to set a thing called a breakpoint and that's basically where you want the program to stop that is to stop running at that specific point so you can effectively take a look around so if i go up to here for example if i double click the margin just to the left of the line numbers let's say you set a breakpoint this means that now if i right click and do debug as java application will first of all ask me if i want to switch to perspective i'll say remember my decision yes i do go to the debug perspective now this is going to change the windows slightly and the panels that we've got so then now this particular perspective in other words this arrangement of windows and panels is geared towards debugging so in other words like looking through the card and actually it's called stepping through the code see everything that's going on just notice the fact that what we've actually got here now is the program is suspended just before it executes this line so this put this highlight in here it's highlighted this line what that means is i've stopped here just before i execute this line before i run this particular line or do this method call in this case and it's effectively saying what you want me to do it's not going to do anything unless we do something at this point what we can do is we can what's known as step into the method so this is the segreting method and it's calling this a greeting method so if i go up here to the run menu we'll see that the first few menu items here are effectively commands that you can do at this point so i can choose to do step into which is f5 which will go into that method or i could do step over which is f6 which goes over the method i'll just show you what those mean now so if i click back here press f5 you'll see that now it's gone inside of this method call so now it's inside this method here which we have you'll also see a few other things now as well you'll see that in the right hand pin we can actually see the variables that are available now so this method has a name variable which is passed in if i hover over it here it actually tells me what that value is is matte which is really helpful and you'd only get this in the debug view by the way because this is now running code it's not us programming it it's the jvm running it now you can see over here we've got variable name it says matte and then over on the left hand side you can actually see what's known as the call stack that's basically showing us the sequence of calls that have been called it's kind of funny but it goes from the bottom up so it's saying basically the first thing that it ran was the main method in the my app class which happened to take an array of strings that's corresponds to this one here the main method in the my app class which took an array of strings they got to line six you can see here line six which is this line here and now it's at a break point on line ten in the say green ting method which takes a string so here where i got the segregating method which takes a string and this is line 10 which is stopped at and you can see line 10 here line 10 here it's showing you very accurately what's going on so like before when we stepped into the method if we had a method we wanted to step into the code of f5 instead we can press f6 now which is step over so when you step over something it just goes to the next line so if we do f6 now you can see it goes to the next line now if we do step over again you can see it jumped out of that method because it finished that method there's nothing else it needs to do there because it got to the end closing brace that right hand curly brace you can see there but also notice what happened as well the name variable which we had here before that's now gone that's because that's no longer what's known as in scope in other words it's not available to us anymore because in this method here there isn't a variable called nim that was only in that method here and only specifically for that method at that specific point in time but now that method's gone and we can tell that method's gone as well because if we look back over here to the call stack we no longer have this say greeting method here we no longer have it on the call stack and in fact now we've progressed from line six which it was before to line seven which is this one so finally if we press f6 to step over this point there's no more code to run the application's finished terminated we've finished what's known as our debug session you can also do various fun things as well when you're in a debugger for example you can change the values of things you can choose to return from methods early you can choose to throw exceptions we haven't seen an exception that's a way of being able to say there's an error in the code you do things like that it really enables you as a programmer to be able to really go in deep to your code and understand at a very deep level how it works now obviously this program is trivial it's like the easiest program we could have written to be honest in java programs they get of course increasingly more complex although don't worry because it's always manageable complexity because of the simplicity of the syntax of the language that's the combination of keywords and symbols and that kind of thing it's quite easy to get the hang of once you have a play around in practice a bit but the point is though once you take your programming to the next level you start developing more complex java programs that's when you really start to see the power of a debugger so yeah debuggers and ide is essential tool to have in any programmer's toolkit so that should have given you a nice overview of the main moving parts we have in java programs and also a sneak peek into what it's like to actually use an id to do some java programming as you can see once you know what you're doing it's actually not that complex after all