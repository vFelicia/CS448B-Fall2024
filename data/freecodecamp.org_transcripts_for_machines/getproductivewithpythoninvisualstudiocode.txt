hello everyone thank you for having me in this beautiful city of edinburgh um so whether you're no matter what you're building with python whether it's web applications simple scripts or even machine learning models your choice of editor is one of the most important decisions you can make for your personal productivity and today developers are choosing visual studio code as the number one choice on the most recent stack overflow developer survey and for a variety of reasons because it's fast it's lightweight it's free it's crossplatform and has great support for multiple languages so i'm the program manager for our python developer tools at microsoft and i'm here to talk to you about how you can make the most out of using visual studio code for python no matter if you've used it already for python used it for other languages or never even heard of it before i guarantee you'll learn something useful in today's session so first of all for those of you who are new to vs code what is vs code so it is a free crossplatform and open source code editor from microsoft it's fast and it's lightweight you can just open any folder and start working with various files it has a very rich extension ecosystem provided by the community i'm partially because it's actually one of the largest open source projects on github there's a very active community it's got very it's got very good builtin support for javascript and typescript including rich features like intellisense debugging and source control among other things and i mentioned the rich extension ecosystem uh the part that my team builds is the python extension and with the python extension you get those same rich capabilities for python so with the python extension you get intellisense debugging linting testing and refactoring and because of the work that we're doing python is actually the fastest growing language in visual studio code and it's the most popular extension for visual studio code on the vs code marketplace this extension is fully open source and was actually originally created by a member of our community uh don j amani from australia who's sitting here in the front row give a wave to everyone don thank you so we love the work that don was doing and we hired him on and put a full team on the python extension we first publish it as microsoft in november and we've been putting out a new release with updated features and better capabilities every single month since then and so i want to call out a few other key extensions that i want to make you aware of before i dive in if you're coming from other code editors i hear a lot of people struggle to change their keyboard shortcuts so there are great keyboard binding shortcuts for vim sublime text emacs and the intellij suite of products so if you're using other editors you can install those extensions to make the transition easier and specifically for python developers there's extensions that add django template syntax and django snippets as well as jinja template syntax and flask snippets i'm not going to show these today but i just wanted to call them out before we dive in so for the rest of the talk i'm going to do a whirlwind tour of the python extension and python development and vs code we're going to start with the essentials setting it up selecting your python interpreter adding and running code and configuring things like linting and refactoring then we'll go into some more powerful features like debugging unit testing tasks and using docker extensions and then some preview capabilities that you can try out today including intellicode which we just launched here at the euro python conference visual studio liveshare and the new python language server that that we released last week so without further ado let's go ahead and dive in and start looking with the essentials of visual studio code so if you want to get started with visual studio code simply go to code.visualstudio.com and click on the bright green download square you can hit that and one thing while it downloads it's a very quick download you get taken right to the getting started documentation this is great documentation i definitely recommend reading it and for python developers you want to move your mouse over to that little python link over there and click on the python tutorial which this python tutorial takes you through all the basics of getting set up so if you're very new to it i definitely recommend going through that tutorial you'll learn all the basic features that you need to get going so after you download visual studio code you'll be taken to a welcome screen that looks something like this and as i mentioned before you need to install the python extension luckily we've made that easy we've got the python link which is right there and you can just simply click on that to install the python extension and it will download and reload after you click ok if you don't like bright blue links you can also go to the extensions tab in visual studio code where you can search for python and you can go to the python extension right there and install it another quick thing to call out about this page here is that we've got a really good quick start set of steps for getting started and then at the bottom that is a link to our python tutorial if you're not sure where to find it it's right there built in okay so one of the first things i like to do after installing visual studio code is to put vs code on the path so that i can load it from the command line this happens automatically if you install it on windows but if you're on mac or linux you need to run a command now to run a command with visual studio code you press command shift p or control shift p to bring up the command palette where you have all the commands available to you in vs code in our case we want to type shell and run the install code command in path that will allow us to open vs code from the command line which i'll show now so let's create a basic application here with vs code to do this i usually start by from the command line creating a new folder i will call it make door new app and then we'll go into that folder and then because i put it on the command line i can just type code dot and that will open up vs code in this folder now you don't need to do that you can also just click the open folder button here or do file open folder but i find it very convenient to launch it from the command line so building our first app here i like to just click the new file button and we'll call this hello.py press enter it immediately gets recognized as a python file you can tell that when you see the python interpreter listed in the bottom lefthand corner quick tip you can click on that interpreter to change to python 3 or anaconda or any other interpreter that you have installed so we can select that interpreter there and we can say print hello euro python and command s to save and then to run this we can simply right click and say run the python file in the terminal and then the builtin terminal will pop up and run that file so that was a quick tour of getting started just to recap we downloaded from code.visualstudio.com we added code to the path installed the python extension created the file and ran it in the terminal now let's do a little bit more scripting with python and i mentioned the stack overflow developer survey earlier so one of the things that i like to do as a demo is actually download the stack overflow survey data and play with it to poke around in some of the results so i'm going to create a new file called stack overflow.py and to use the stack overflow survey i'm going to use the requests library to download the stack overflow survey and so i need to install that but instead of installing that in my global python interpreter i'm going to create a virtual environment this is some people get scared by virtual environments it's a it's a simple and useful concept it basically creates a local copy of the python interpreter that's local to your application so i can install packages without affecting the other applications that i have installed on my machine so i'll use the builtin terminal here and i'll run python3 dash m m and that will invoke the vn module to create a virtual environment and i'll pass it the argument end which will put that into a folder name env so python 3 just guarantees that i run python 3 if there's multiple python inversions installed which there are and you can see that virtual environment was created here in the vs code file explorer i can see that this is simply just sim links to the python interpreter and a local copy of the site packages folder that i have here so i can activate this environment by typing source and bin activate that will activate that virtual environment for me now if i say which python 3 you'll see that when i run python it runs out of this this local copy in this folder here you don't need to activate the virtual environment with vs code you can actually have vs code activate it for you but first i need to reload vs code with command shift p i'll select reload window just so it picks up that new environment that i've put in this folder and so now when i click on this interpreter in the bottom lefthand corner that virtual environment will be available from this virtual environment list so i select that vm there this time i'm going to pay attention to this pylint installation warning here so i'll install linting tools there so after i've activated that virtual environment now vs code uses this interpreter for all the commands it runs so it installed pylint into this virtual environment if you want to create a terminal that has this environment activated you run command shift p and say python create terminal and so that will activate that interpreter automatically so again if i say which python is running out of that folder so now i can pip install the requests library from this command line there and so now i can start using it in code so to do that we'll type import requests now i mentioned i want to download the survey so i'll create a new request and say requests.get and i need the survey url so i'll go to the website where they've published all these results these are fascinating data sets to look at by the way they have all sorts of interesting insights into what developers are doing and so we paste that url and then we say with uh open we'll save that into a zip file called survey2017.zip we'll open this as a writable file as file and we'll say file.right you notice i get this intellisense as i'm typing here in code request dot content and we'll go ahead and right click and run this piece of code in the terminal again this time it runs with the virtual environment that we have selected in the bottom lefthand corner and it will download this as a zip file into my local folder great now i want to unpack this zip file and and i'm going to write a bunch of code that takes the csv file out of this zip file so i can start using it but instead of making you watch me type everything here they've advised us against doing too much live coding here at the conference i'm going to use a feature called snippets in vs code so i've predefined a bunch of snippets that i have and i have one called so extract and when i and it's available in my snippets list and when i press enter that inserts that code snippet for me and it preselects this survey 2017 field here which i've defined as a parameter to the snippet so i can say my survey and i can make that i can make that a customizable snippet that i can type and if there's multiple of those you can tab between all of them so now i want to run just this piece of code here that i've typed into vs code i don't want to run the first part so i don't run the whole file so i can run this just the selected piece by right clicking and saying run selection or line in python terminal or i can just press shift enter which will activate that python interpreter paste it into the command and you see that zip file was replaced with the csv file containing the survey results another cool thing you can do with snippets is you can put variables in there so i have a to do snippet that when i type to do it puts the current date and i can leave a message for myself that says refactor this code and just a quick look at how you actually edit snippets to go edit snippets you go file or on windows it's file but here it's code preferences user snippets uh we select the python snippets and uh here's where we've defined that extract file snippets it was very easy to put a variable in you put just this dollar sign zero and this provides the default value so one final thing to wrap this up i left a to do here to refactor this code so let's go ahead and do that so i will select this whole block of code right click and say extract method it's going to prompt me to install the rope library and i'll select yes so that we use the rope package for refactoring so i'll right click again after that's installed and say extract method define the method name as download underscore survey and there we go it's done that refactoring so just a quick recap we selected our interpreter we ran the file in a terminal oh i missed linting here so i i have pilot turned on by default but you notice there's not very many warnings inside of this piece of code that's because we have a default set of linter rules it's very nonaggressive the default pilot warnings can contain a lot of style information so if you want to customize your code style for your team one cool thing you can do is just check in a pilot rc file so simply by having the presence of a pilintrc file we throw away our default pilot rules um here so if i go back and un untap this you'll see it'll give me some warnings here doesn't like the names of my variables and all sorts of stuff like that if i want to customize those warnings i can just put a block in the pilot rc file that says messages control and just a quick tip on how to do this it's very difficult to find the syntax for this online but you put disable equals all and then say enable equals just the categories so you can say warnings convention or errors in this case i just want errors and you can put individual pilot codes which you can look up online there so if i go back to the file and now it just gives me the error and it's telling me that this download survey method is undefined great so there's some information on using virtual environments very useful another thing you can do with virtual environments is uh you can a lot of people check in a requirements.txt file into their repo so this is a lot enables you to easily package up the dependencies that your python code has so you can pip install dashr a requirements.txt file and you can generate one of those files using the pip freeze command and that puts the currently installed packages into that file and when you're done you can type deactivate from the terminal we also have support for pi end pip and conda environments in vs code codes if you're using those we support those as well and they'll just show up in that interpreter list that i brought up earlier all right so let's jump into a few more powerful features of vs code and for this i'm going to go through debugging unit testing and some tasks and a few keyboard shortcuts so i've got this csv file i actually want to analyze some of the data in the csv file i'm going to jump to some code where i've actually pulled out and some of the information and done some analysis so i've got this in a folder called hello stack overflow and just like i did before i'll change to that folder and type code dot to open it up you'll see that the folder comes right up and i've got all my python files here so just some quick keyboard shortcut tips i press command p that allows me to quickly switch between all the files in my current workspace i can switch to the stackoverflow.py file by the way if you press alt and press enter it'll actually open one of those files in the righthand vertical tab window so that's a neat tip if you want to quickly peek into another file you can also do that just by clicking this button here another tip here if you want to split your editor vertically is you press the alt key and it changes that little icon from a horizontal split to a vertical split so i can split the editor vertically there and we can go on so on and so forth in a recursive manner another quick tip if you want to open the terminal it's control back tick that will open that terminal up and you can also split the terminals so you can split the terminal right so if you want to do something like have the zen of python up on your screen down in the terminal you can have a dedicated terminal window for that although in the lightning talk on wednesday they advised against reading the python zen of python too seriously you can also put your terminal on the right hand side of your windows if you want which works better if you're not projecting at a conference but it's i find that very useful on larger monitors okay so let's get back to um our previous configuration i seem to have got myself into a bind here with these terminal windows there we let's just close everything put that back on the bottom okay so some other shortcuts here command shift o lets me open various symbols that i have in the workspace so you can see as i'm going through this list i can look at the different methods that i have so i've basically refactored my previous code example to download all years of the stack overflow developer surveys back to 2011. there's a method here which does some analysis of those stack overflow surveys called download survey um so i can press enter to look at that you can also command click on a method if you want to go to definition on a method so for example if i want to look at the requests.get implementation i can command click and that will that will open that file directly there and another quick tip is you can right click and say peak definition if you want to quickly look at the definition of that method in line okay so aside from just reading the code let's actually debug this and step through and see how it works so to use the debugger it's actually very simple you just click in the gutter and select put a break point there that will have vs code stop on this line when we start the debugger and go to the debug tab and press the bright green play button another keyboard shortcut for play is just f5 so i can press f5 here and it will actually let me pick my choice of debuggers this is because we have the next version over debugger available as an experimental version it's much faster it's based on an open source debug engine called pi dev d and so this is going to become the default soon so let's go ahead and use that python experimental version and we'll run and we'll stop at that break point right so this just debugs the current file whatever python file i'm at if i want to debug it just press f5 so now that i'm stopped at this break point i can see the variables in the lefthand side of the window here i can see the year and various things like that and this analyzes uh one year one year of survey for every iteration of this for loop so if i want to run one iteration of this for loop i can click the play button here the continue button or f5 that will run and that will stop after it's downloaded one year of the stack overflow developer surveys so if we want to actually look at how this code works we can use the step into button or f11 so we can step into that code uh here and we can press step over to run over at one line at a time so that line downloaded the survey and then we actually here on this line we crack open the survey csv file we load it into a pandas data frame using a pandas library which if you're not familiar is a very popular library for data analysis and data frames so we step over that line we load the survey and if we actually look at some of the columns that are in this csv file we can type an expression into the watch window for example like data.columns if you look at this it contains a lot of internal information from panda's data frames so if we want we can customize this expression here and say list data dot columns so we can just cast it into a list to get rid of all the other items and then we just get a list of columns that are inside of this data frame this is a little bit this is not the best window to view this information so i'm going to switch over to the debug console here by clicking this dot dot go to the debug console i can also type expressions in here so if i type list data.columns i can view that here in the output window and i can see all of the questions that were present on the stack overflow survey for this year you can see the one we're interested in is the which languages are you proficient in which are people telling us which programming languages that they use and so as we step through our code we want to extract just this question plus the related columns that come after it so we can step over this one line at a time um and we're just iterating through all the columns in the list until we find the right question i don't want to sit here and step through all the items in the for loop so i'm going to skip past all of this by using a run to cursor uh function so i could set a breakpoint down here and run to that break point but i can also right click and say run to cursor which is kind of like a one time break point as soon as you hit it the breakpoint disappears if you actually looked closely you'd see a break point briefly appeared there in the editor so that skips all of that looping and now we can again look at the languages.columns basically what we did was we extracted the languages into a languages data frame and we can see that if we look at languages.columns in the debug console and we can see that this data frame just has this information in it we can also see that there's a total of 2300 people who answered the survey in this year so that's pretty neat all right let's pop out using the step out function we'll pop back up the stack to that outer for loop and we'll let it run to completion now i don't want to download all of the surveys with you guys watching me on the poor wifi here in the uh in this hall so i'm going to use a task that i have defined that precopies cached versions of these files into my workspace to do that i'll go to the tasks window and i'll say run task we'll select these custom shell commands that i've defined one of them is copy cache surveys and when i run that the csv files magically appear so i can kind of automate some of the things that i do in my daytoday environment with those custom tasks and then we'll just let this run to completion and let it generate the results of these surveys it'll put that out in a json file so if you want to define your tasks simply go to the tasks configure tasks window and you can see that it's as simple as putting shell commands this also has integration with npm so if you have npm tasks here they will they'll show up in this list okay so that data is now available in a json file where i can see for every year how many people indicated using each language we can see that python was used by 575 people on the 2011 stack overflow survey that's pretty neat we'll take a look at this in a second but how do we know that this data here is correct well we run unit tests hopefully so i've got some unit tests defined in this oh something someone would shout out the answer but we've got unit tests defined here in this test folder so visual studio code has integration with unit tests if we want to configure those we we're using the unit test framework but we support support multiple testing frameworks so to configure those again we run a command command shift p discover unit tests um that will prompt us to enable and configure a unit test framework so we just click that bright blue button there and so we can configure unit test pi test or nose unit tests we'll go with the unit test framework it will ask us a series of questions like where is our tests folder so we're in our tests are defined in this tests folder here and the file convention that we use is test underscore star.py so we'll select that and a really neat feature that we have with vs code is we have these unit testing code lenses so this lets us run one test at a time i can run just the test for the 2017 survey or i can click the run test on the entire class so i can run an entire class of tests and of course you can run all the tests in your workspace but after you run the test what's really neat is that these indicators actually show you little check marks and x's when the tests pass or fail we're not going to worry about fixing this unit test right now i will come back to that later but it looks like our 2017 day is correct but our 2015 data is a little bit off okay so just a quick recap we just went through debugging start debugging stepping inspecting variables using the debug console typing expressions in using run to cursor to run to a particular line of code keyboard shortcuts for jumping to files various symbols and going definition configuring unit testing and tasks within your workspace now we're going to do a little bit of web development and we'll show you how you set up more advanced debug configurations for flask and django as well as using the docker extension so this data is currently in a csv file i'd like to render this in a nice web page to do that i'm going to start writing a web application i'm going to put my web application in a folder called app so here's a neat productivity tip if you create a new file and you just type a folder name that you want to put that file into in this case i want to put a file in app called main.py if you press enter it'll go ahead and create that folder and put the file within the folder so i've got another snippet here that will create a basic flask web application it's called flask app so that's something i've defined so this gives me just the general boilerplate for creating a flask application and what it does is simply import the flask object from the flask module creates an app object and then defines a home page route which returns some index.html so i need to create this index.html file let me do that again i'll put that in a templates folder index.html and a really cool builtin feature vs code we have integration with emit so if you can type the exclamation mark here and press enter that will generate an html boilerplate template for you including all the tags that you need for it to render correctly on mobile devices i don't know why this isn't default for html but it takes me a long time to find this so it's built right here into vs code and then we can just start editing our html file okay so i have a i'm going to switch over to a version of this ooh an update to docker is available let's skip it for now i'm going to switch over to a version of this code that has a little bit more html written for me it's called stack overflow flask i'll run code dot here and we'll just take a quick look at what's in this code in that main.py i have an api that returns the data file that we just generated from that that stack overflow survey analysis and the index.html has a renders that data with some pretty charts so if we want to run this file here just a quick tip you can right click on that file and say run python file in terminal that will again activate the virtual environment and run that on localhost but i'm going to actually run this inside of debugger so no matter where i am in my workspace when i'm working on a web application i always wanted to start the main.py file so to configure that i can go to the debug tab and i can add a debug configuration by clicking on this little settings gear link or this ad configuration button here so let's add a configuration again we'll use the experimental debugger because that's going to be the default one soon and it adds a default set of configurations here we have debug configurations for flask and django and one of the reasons that you want to do this is it lets you set your entry point in our case our entry point is in the app slash main.py file but it also turns on jinja template debugging or django template debugging for these types of apps so that's a feature that we do support in vs code for web developers so once i've got these different configurations defined i can pick which one i want so i can i can continue debugging the current file if i use the current file configuration or i can use the flask configuration if i want it to launch my flask application so we'll click play there and that will start our flask application and this time let's browse to the url a little quick tip here if you have a url or any file link in your terminal you can press command click to open that link and it just it opened the browser and then i hit the breakpoint right away so we'll just switch back here and we'll let it run and there's my simple chart of the survey data for the past few years python is actually growing super fast more than 20 percent year over year now used by more than 38.8 percent of developers worldwide so you guys are all doing great work in this room okay so um it's very common to use docker containers um i was told that docker was actually launched at pycon so docker is a very popular technology used by python developers so let's go ahead and throw this into a docker container so to do that i'm going to install the docker extension into vs code so we go to the extensions tab go to the marketplace search for docker and we install that i have it disabled in my install so i don't have to download this live on stage but i'll just click enable there and after we install that extension you have to click reload so now that this extension is installed into my workspace it adds a few useful commands so we'll go command shift p to open the command palette and the the first command we'll use is the add docker files to workspace commands so if you're new to docker this is very helpful it puts some predefined docker files in there for you for different languages we've got python go java node.js and ruby and.net core so we'll use a python template here for our docker file and then it also asks which app we want which port we want our app to listen on we'll go with the default port 3000 and that just puts in uh some of the useful docker files that we need um and in particular let's go ahead and take a look at the docker file and customize this a little bit so some of the features that you get after these docker files have been created is that the docker extension adds completions for the docker base images so i want to actually use a different base image that loads a flask web server and so i'm going to change this here there's one great image out there created by docker hub user tangolo and you can see i get auto completion so these are loading the images that are available on docker hub for me so i'm going to select this nginx flask one because i want to host flask and an nginx web server so that it's nice and fast and production ready and i can pick um i get auto completion for the various tags that are available so i can easily pick the python version that i want to run here so i pick python 3.6 running an alpine alpine is a very small version of debian it's really good for production smaller images make everything faster in the entire build tool chain and running at runtime as well and i'm just going to configure this image a little bit i'm going to set the listen port this is a configuration variable for that's specific to this image that tells flask to listen on port 3000 so that it matches the exposed port there i'll copy the app folder into the app folder within the docker container and then i'm going to comment out these lines here because the docker container already has this base image already has these commands that install python packages we also have commands built in if you're using pipbem verconda you can uncomment these versions that'll help you get your condo environments installed or pip band environments or packages installed there easily so now that i've set up my file i can run another command called docker compose up which will it'll build this image here and it will actually start it locally running on port 3000 because that's what's been defined in these docker compose file here and after i do that i can go to the docker tab and i here in the docker tab i can see all the images that are available on my machine i can delete manage them and i can see the docker container here is running a really neat thing i can stop restart remove this container attach a shell and i can also show logs so just to prove that we're running locally here i'm going to use that same control command click and there is the app running inside of a docker container that i've just created using vs code all right so now we're on to some exciting new preview features that we've just announced now these are things that you can try today but they're in beta so we're still learning and experimenting and fixing bugs in some of these the first of which i mentioned visual studio and telecode which we've launched here at euro python and launching at 7 00 a.m uk time really was interesting from a perspective of having your entire team up at 11 p.m on the u.s west coast so that was fun but uh we're very proud to announce this this is machine learningbased autocompletions for python code and this is based on training on more than 2 000 public and high quality open source repos that infers that sorts the completion list based on your current code context and let me go ahead and show you exactly what i mean by that so if i switch over to a different repo that i have here called telesense samples we'll open this up in vs code so intellicode is a separate extension that you can install if we go to the extensions tab type intellicode you got this wifi we'll install that intellicode extension and that's going to after i reload vs code we'll take a look at some various code samples here so the first thing it does is that actually prompts you to install the microsoft python language server this is a new intellisense engine that we've just released last week so it's a preview so it's something you do have to opt into but when we turn that intellisense engine on intellicode is able to use that new intellisense engine to power some of its results so let's take a look at a few examples of what this means so normally when you're getting completions on things like the file operator there's you know a few there's about 100 items in this list but the intellicode machine learning model has learned and said that these are the most likely options here that are asterisked so it suggests using file.write so i can do that and say file.close is another suggestion that comes up and this works great for you know the system modules if you import os and type os dot it suggests common things like os dot path get current working directory if you import sys and type sys dot you get uh rv and path and standard out and some various things like that and this works on a broad variety of applications that we've trained the the model on so if we go back to our flask application and we use the app variable it pulls up app.route as the top of the list here and we'll go ahead and fill in this code here and then within the actual method if i use app.again it actually gives me different results because it knows i'm inside of that route method there so here it's now suggesting config and send static file send static file is the one that we want and let's quickly switch over to another code example where we do a little bit of machine learning code here this is the tensorflow getting started code from the tensorflow website so i'm just going to follow along with the code samples here if i do tf dot it brings a variable to the top of the list and i'll just finish typing this code here so float32 that's also in the suggestion list and if i come down here and use tf.again now it's giving me tf.placeholder as the top item in the list and tf.now it's suggesting float32 so as i'm working through different sections of this code it's giving me better and better suggestions and my favorite example here is if i do tf dot at the bottom it suggests the global variables initializer which is at the top of the list and then right after that if i use create a tensorflow session it suggests the session variable so one of the benefits also if you've noticed with the microsoft python language server is as i type i actually get syntax errors live in code so if i put things like semicolons in it flags those right away as different issues and in general i get much richer intellisense here provided by the open source type shed definition files so that's another benefit of the language server okay so that's intellicode i encourage you to try it out today personally i really miss it when i have the extension turned off um so it definitely improves my personal productivity and the other thing i mentioned was the microsoft python language server intellicode turns this on by default but if you want to use just the language server you can turn that on by going to your preferences and settings and setting the python.jedi enabled to false and one final demo that i'll share with you another preview feature is visual studio live share this is an extension for visual studio code that allows you to do realtime collaborative editing and debugging with vs code and for this part of the demo i'm going to go back to that unit test that i had that was failing and i'm going to get a more proficient developer to help me solve that unit test and in fact i'm going to ask don to help me code that live with me sitting from the front row and right in front of us okay so let's go back to that uh repo that we had earlier i'm gonna get back to the code example where i had the that failing unit test okay so this was that failing unit test here give it a quick run and so while that's running i'm going to install the vs live share extension so if you install this extension you just have to sign in you can sign in with a microsoft account or a github account and then you can easily generate a sharing link from your workspace so this share button has now appeared on the bottom of my window and if i click it it's going to copy a sharing link to the clipboard and then i can go and chat and say dawn please help and so don can just go click that link and that will actually stream all the files from my workspace over to him and just for a quick idea of what this looks like on his side i have a video recorded where this link pops up and he can click on that link that opens the collaboration session on his machine and just by clicking that link it will open up vs code on his side and it actually streams all the files into a visual studio liveshare workspace so he doesn't need to have a copy of the code and he can actually go and look at the code and he gets all the intellisense and features like that working so now that i see dawn's joined my collaborative session i can actually see where don's cursor is this is dawn right here in this little yellow link um don why don't you go ahead and take a look around on code so he's gone and looked at some other file here and i can follow him by clicking this little button here and say follow don giamani and so he's scrolling around looking at the code he can highlight text and look at interesting things and you know no hands over here so um he's he's seeing some interesting stuff he's getting familiar i can actually go off and look at different code than he's looking at so we can um get a good sense of the code base we can also do some collaborative debugging so i'm going to start debugging this unit test that i have that's failing and we're going to land right at that break point that i've just set there so let's give us a second all right so don can actually now control the debugger right so he can step through code he can step down into that method and he can go down to the bottom here and he can actually see if he can fix this unit test for us so he's set a breakpoint there he says this looks interesting and if you put a blank line here right so he's a put a piece of code in there which i can then take and if we rerun our unit test quickly here we'll see that he's now fixed our unit test for us there we go thanks don for fixing my bug so that was vs live share get the vs live share extension and start doing pair programming and code reviews with your coworkers and that concludes all the tips and tricks and features in this talk you can get productive with vs code today just go to code.visualstudio.com and for more information about what we're doing with the vs code extension or anything for python and microsoft including python and visual studio and python and azure check out our python blog codes and slides are available up here at this repo and follow us on twitter thank you so much for having me here this is just a wonderful conference and i really love this city thank you