well hey everybody this is sam with python basics and uh glad to have everybody back today um it is tuesday and we are just going to pick back up where we left off so if you're new here thanks for joining us i'm sam from python basics and i'm doing a series uh with free code camp and we are starting from the beginning as we know nothing about python well hey there hey everybody um so a little bit of a recap and an adjustment to some things that we looked at last tuesday so we had our first stream last tuesday it was a two hour stream and until further notice we will do two hour streams every tuesday starting from the beginning and going forward so i have a youtube channel and i started doing uh some recap beginner streams um two months ago and we are just revisiting excuse me we are just revisiting the first hundred videos so what we did last week was we learned about uh conditions we learned about functions we learned about builtin functions we learned out how to build our own functions so what we're going to look at first is we're going to revisit our positive negative clean that up a little bit make that even more pythonic and then we're going to learn how to wrap that in a function so let's just go ahead and jump into it and then we're going to look at some string formatting how to really clean up our print and to delve into it so let's get at it so we were right here last time and so we were testing for a number if it was positive or negative well there's a there's a there's a trick to that it's actually three conditions it's either zero or then it's either positive or negative and the way that we handled that is we took an if an elif and an else i want to show you another way and the way that i like to do things is i build i build on it then maybe show the best practice so we take a step back and then we go forward and forward and forward to really get the best way to do it but i like to then really have it really cleaned up so it's either positive or negative one side or zero so let's clean this up else so it's either right in the middle zero or then it's one of the other two so we can go if number greater than zero print let's make a capital positive all right then we have an else then we just have if neg negative all right now you might say what's the difference well we're going to build upon this but this is this is best practice because you then clean this up and if you have any condition especially when we start doing maybe bisectional search or um binary binary like binary tree it just helps you understand that you come down and you split and you split and you split and you split so unless you have three true options fine you have your if your lf and your else but it's r it's really not you have two choices then you split off and then you have two more so now we have this this is great but what happens if we have we need this in a function so i'm going to show you this because we want to use yes right now it's it's usable it's repeatable but it is in a script let's just make this a function so let's look in this so you can indent an entire region so you come up here boom so then i'm going to take this and i'm going to wrap this in a function i don't know why i keep hitting e again i apologize everybody um let's see what was i thinking so then pause neg and then i take x so we need to clean this up just a touch and i can't remember what numbers did we use we add them we add them up here let's cut this and bring this down here so i was thinking about this as i was setting up this morning i did not even put this code on my github but at the end of today i i have other code on there uh all the code that i have in all my videos but i'm gonna have another section that just has the code and the examples from free code camp so i just want to let you guys know that uh today going forward after we get done today this will be back up uh all this will be on and we'll just add to it as the weeks go by so okay so here we are so now we can call this oops what cardinal sin did i forget i forgot my colon so there we are so now i have my function in memory and i pass it a number and then i get oops so i already have this going through my function up here but let's say let's say that i wanted to do this and let's bring this back one the indent so now now i have this nice clean function so now i want to go through my list got a little bit ahead of myself sorry guys so for number in numbers then i'm going to now i have this already printing so i don't need a print statement i'm just going to call my function pause neg then i'm going to pass it let's go half measures print number so to remind you i have here's my list my iterable we're going to do a lot with lists today we're going to do we're going to look at how to increment a variable increment decrement while loop and some things with lists and a little bit more and we're really going to look at list comprehension what that is so if you're just jumping in those are some of the things that we're going to be uh attacking and if you are just getting here i saw quite a few more people jump in i'm sam with python basics thanks for joining us today we are building uh upon the basics of python from the beginning so i get all these numbers printed out so now let's just comment that i know how to go through my list now i want to call the function on each iter in my iterable so this is my container this is my iterable i'm iterating through it here's my temporary intermediary variable so numbers is this list i'm going to iterate through it until this is exhausted until each item is exhausted and then we're going to look at a different type of loop so then i just call my function and i put number boom and then i get positive negative positive negative 0 positive negative positive boom that is one of the cleanest ways to do this so we don't have to go down here and call a call our function and pass it a variable this is nice best clean practices so here we go all right so next so now i want to look back at let's do this comment this out now i want to look back at our loop that we have right here that we used let's copy this bring this down here so what we did here is we we went through and we made this we got five row we got five columns five rows and the way that python goes is it goes row by row by row by row you see whatever so you see where i'm going with this but one of the best practices that i really like to show people and really get them to think about is i like to build a number triangle so let's see if i have this ready to run shoot because i want to show you i don't want to show you the code yet uh triangle where is it okay there we go i hoped it would it would open over here so let me show you this it's gonna run aha so this is what i want to show you and i want you to think about this how because this is a great exercise for beginners of how to go through and get 10 1 two ten rows and have it increase as we go so same principle over here but we have to have a lot more control over how things flow says have anybody have any guesses of how we might do this all right let me click over to the comments all right so same nested loop setup let's get rid of this right here all right so the way that we're going to do this so we're going to get our base going so we need we need 10 we need 10 rows so for row in range so i need 10 and why did that fail all right print row okay i got 10 but it's wrong so i need 1 through 10 not 0 through nine so first problem we have to solve is we need to go one through eleven because to remind everybody inclusive exclusive all right so first problem solved we have when we go row by row so now what i need to do is i need to figure out how in the world am i going to get my columns all right so this is where these variables become very very very important so what is so awesome and i love teaching new people and especially young people how in the world to handle um repeatability and think about the set of instructions of how can i draw it how can i think about it because i love the example it was actually something that i learned giving the example i think it was monsters and flowers uh i was working with um some kids so you step in you go straight you turn you go down four turn all the way around go back up four and then you're literally back in the same position so then you repeat that so you figured you want to figure out the set of instructions that then you can do an error that said i was disconnected all right am i back everybody am i back okay because i just got a disconnection okay sorry about that i don't know how long i was down i apologize my internet has been acting up of course i did the famous okay we are back okay thanks bo sorry about that all right okay so we need to get going on our all right that looks a lot better okay so we're gonna we got our column and then we're gonna look so we know have have the numbers so now we need to move across so column in range now how can we make this repeatable so we know that the first time through row is one so the first time through i just need one number then the second time through i need two numbers the third time through i need three numbers so what do we have that is already counting for us by a certain set of numbers first time through one number second time through two numbers third time through three numbers so this way is the one of the easiest ways so we're just going to just going to steal range excuse me row we already have row doing all this incrementation for us we don't have to we don't have to reinvent the wheel we're going to borrow row all right now this isn't quite right so print now what did we learn last time we're going to print column then we're going to suppress the and then what we'll find out here is that this is a little wrong okay now uh oh let's see where am i let's see okay so we're getting we're getting close and actually i forgot this is a little different there we go so that's going to the end but what do i need right here so i'm starting at zero but i don't my my original example is i didn't want i didn't want zero i wanted to start at one but where's row starting it goes here so i need to change this just a touch my start stop now i want to show you let's get rid of this all right all right so i just gave a return and i emptied this right here and i got my last number disappeared so let me show you what this is so the last time row and this was one of the cool things that i remember so these variables are sitting there so i run dur and i have my column and my row variables so my row variable i can always see what the last call through a for loop is i remember the first time i saw that it like freaked me out and i was like well it started to really wrap my head around what was going on so the last variable call for column last variable assignment for column is 9 and the last variable assignment for row is 10. so let's be the most correct and assign one to row because row is 0 1 2 3 4 5 6 7 8 9 10 and i want 10 to come out so i need to add 1 to beco make 10 be increme inclusive and included now this is where it gets very challenging that what happens if i go up to let's say 14. oh yuck we can see that this begins to taper off and that's that's not pretty that's not pretty at all so we are going to learn about a new tool called how to uh string formatting so we're going to actually use a placeholder and we'll look at it in just a second and then as we're going to assign how much space do i want for that i want to allocate for that placeholder so bingo row plus one all right sorry i was clicking over between okay all right so we need to change this right here we're gonna go boom curly brackets dot format just like that and then i close it now this doesn't do anything oops oop my bad let's see where i am and there sorry okay so i have my placeholder but i'm not really doing anything quite yet so right now this is how this is how you use a placeholder and we're going to look at this with an example of uh in a in a sentence here in a little bit we're going to then look at our hello function and build on that so what i'm doing right here is i'm telling python that i have a placeholder and i want this to be the size of three and then this is the variable that i want to go into this placeholder so let's save and run this boom just like this and of course then you can change it to two of course it'll be a little little crowded here at the end so three is best for right now so you have a buffer so you can read this so this is one perfect example of how you use a very clean placeholder using string format so you put this string that you want inside inside your quotations and i'll show you we'll do the hello function again and we'll and we'll neaten this up dot format passing in this so there we go awesome let's see any uh good question okay so now now let's look at how in the world could we utilize this who am i doing are we doing uh no we'll do input in a second yep that's what we're going to do alrighty so comment that out so we had our function right up here about taking in hello we're saying and hello this out there we go boom all right good we're still green so this got it done but boy that's ugly because then you know sam hello sam but then what happens if i say i wanted this to be a little bit more complex hello sam i gotta give it a space nice to meet you i remember when i learned this i thought this was so cool but man that's ugly so let's copy this put it down here comment that out please now let's use i got too many spaces if you're just joining us i'm sam with python basics and we are doing live streams we can throw in name and then i got my print and i do this just to check boom and then i do sam we are doing live streams for basic beginners the beginning of python because i know it is summer time and everybody is getting ready for school especially being at home these times and fall is coming up and school will be starting up school year and we are going to be doing a intro and introduction to python going from the beginning and going two hours every tuesday so thanks for joining us today so this is the very nice clean string format of how you get your placeholder and then later we can even get fancy when you have multiple placeholders you can actually assign the order of variables you want so instead of having to reorganize your list you can go oh well that one's supposed to be there so you just go and you change the the location so there we go all right you can do that with an f string i was going to build on that and build to it sometimes the f string can be a little overwhelming so i like to show this first and i'll make sure i have some f string notes uh next week but yes you prefer f string awesome some people get it what i've found some people get f string some people need to see this first so i um i like to show this first and then show f string but yes par f string is the preferred because then you don't even have to do anything but i want people to kind of know where this came from and for it's i guess i also like to uh it's like learn it's like learning your multiplication tables learn those first then you learn how to use a calculator but awesome f string is cleaner and even shorter absolutely that's true so you have options or so if you're going along uh and you see and you see this you're like what it what is this because you're gonna run across code and you're gonna get to the point where you're just reading reading documentation and especially if it's older code um and it's it has this and you're like what is this i just think it is a that's cool well i appreciate that guys um i want you to know where it comes from but no in the in the iteration and there's actually even an older placeholder where you would have you would do the modulo sign and an s and f so for string um uh float or digit and that was that was annoying but i i like to show this now because it's clean and i've found that for newer people excuse me it's easier to wrap our head around and then we can go from there well i appreciate that that you are guys there is a a lot there it's over almost three and a half years worth of uh videos out there um and over 740 i think so all right we need to get going sorry sorry for distracting and getting off topic but i i could talk about this for hours as i'm sure you guys have already have already noticed okay let me see where we are with our notes all right we're to the point now that now we need to look at how to handle assignment reassignment increment increment and decrement all right we're to that point because we're going to start learning more with um with the input so like i said before python does everything on the right side right side and then links or assigns it to the variable this took me forever to get i was like this can't work it's your you have itself you have itself you have itself shoot i'm getting ahead of myself all right so we assigned 0 to i we did it by using the equal sign linking that information in memory python goes ooh i know this i'm going to go to memory i'm going to see and i'm going to spit out 0. now i go here and you see this and i call i and it's one how in the world is this one it was just zero and now you have this thing on here and you're telling me that this does not throw up nope doesn't throw up because again python goes into memory it says aha i know what you're talking about this you assign 0 to this so now python doesn't see i it sees zero and you want to add one to zero then you assigned it so now okay you seem to know what you're talking about you called a variable that i've heard of and now it is one is currently assigned to that variable the i'm gonna put it out on the screen and so now then what happened is oops i apologize guys so then python the the core core developers go let's let's uh let's juice this up a little bit because they were probably i like it because i'm lazy so i don't want to type all those characters i did not want to type i over and over and over again so now i'm going to increment by 1. so now when i so last time i was 1 and now i is two i'm incrementing by one and this works for every math operator in python all right jan quick what is i now if i press i what will come out on the screen i don't know what the lag is i don't know i don't want to bore you guys too much but it is now back to one bingo because it it decremented now decrement and then this also works for multiplication and division it works for all all math operators awesome so yep you guys are correct i really do love this interaction because it makes it a lot easier maybe at some point we could figure out how to all be uh or a few of us be on a uh voice call because that would be very cool for the interaction all right so now now what we're going to do is we're going to do some math we're going to work with our input we're going to use our input do some math but there's going to be a problem and we're gonna have to learn how to handle this so we have let's see increment ah we need to touch on well we can we can do this one of two ways let's let's look at because we're going to look at counting down so we're going to use a while loop and then we need to take in input so we're talking about numbers right now let's go ahead and take this in so i have my number and we know how to take an input from the user enter a number and we give it a little space so it looks nice and pretty enter a number i'm going to give it five now let me click back over to our chat window if you press i twice would it if i press i twice okay let's go over that for a second so if i if i then call i again no now what we're gonna look at well hey there hey guys um i see a couple more folks have joined us we are we are working with incrementing and decrementing right now but if i'm just calling the variable now if i called this okay if i called this over and over and over again which we're going to look at in a while loop so let's okay let's see how many times we do this so i just it was one and i just ran it two more times what would it be jan i know you were typing uh so if i just ran if i decremented i twice by one what would i be right now negative one negative 1 and we're going to look at this in in a while loop so let's deal with this and then we'll kind of wrap our head around this a little bit more so now bingo negative 1. all right so we just called we just took this in and number five okay that is a five but i want you to look right here what do we know about that any thoughts but if we're not sure we have this handy dandy function built in for us that handles everything it's a string what is a string it's not an integer or a float so can i do any math operation can i do any math operation on a string cleanly technically we can get around it but i don't want to talk about that function can i do can i do this bingo i cannot do that you have to convert it bingo jan how how can i do that so i'm going to come back over here so i have number so input enter number all right fantastic all right so for anybody who is super new we can do this the long way we're going to show long way then i can now it didn't print type because when you wrap a string in a print it prints out pretty five and um there we go string and uh there we go let's see so we have we have this in the background hey um i want to ask you guys because i do not want to drive you guys nuts can you hear an alarm in the background just somebody tell me real fast if you can hear it's not going to bother me but i do not want it to drive you guys nuts can you hear a beeping in the background anybody if you can't great i can ignore it okay good awesome okay i do not i just don't want you guys to be on this stream wanting to kill yourself ah okay great okay let's keep going one of my kids forgot to turn their alarm off and they've already left for the day so i get to hear this for an hour and a half hopefully somebody will come home soon all right so we have a problem we cannot do so you cannot so python goes okay you have a string you can't concatenate see that that's my first so then if i go one so check this out so i put a string first so python goes okay now i'm gonna trust that you know what you're talking about so you're gonna try to concatenate one because i have a string and i'm using my addition operator and i'm trying to add one that says you can't connect concatenate but then when i give it an integer first and then give it my variable it says you cannot unsupported operand so i can't it has to be it has to be an int so i can take this the long way so i can go number int hint number that's that's long that's longhand enter number int or i remember the very cool first time i saw this i was like this is so cool so we did this with our range in our list i can literally just wrap perfect i can wrap an int function around my input function and this works this is completely legal and it's pythonic this is best practice and then i kick this out so now now what we're going to look at is we're going to take in a number and we're going to count down we're going to count down from that number whatever number we pass in and we're going to count down like a countdown sequence and then we're going to print blast off this was uh one of the very first early exercises and i love i love doing it because you have to be paying attention to the order of operation and anything that you want to have happen in your certain order so let's look at the while loop so what is the while loop key how do we get to our interactive help help keywords boom and let's give us some more space so we can clean this while so let's look at weil all right while statement is used for repeated execution as long as an expression is true super important we'll only operate if it's true just like our if and our elif the statement after has to be true in the header for the body to be executed so let's look at this so we are on line 378 everybody look right there everybody sees that line three seven eight so while true print hi all right we're on 378 right now we're on 380 ready okay come up here stop shell restart shell i'm on 740. so this just ran through a ton of stuff bam there it is and you're like okay so what does so influence can be achieved by yes an infinite loop with while true and what i want you to think about is i remember when i was really getting started and i got i got asked by a young man in in class that i was teaching and he said why not a for why why a while loop instead of a for loop so you can just know how many times to to do it well then i was sitting there thinking and again i was still at the beginning and i said okay well minutes before i learned anything about windows or running up high window or a tkinter window i said i want you to think about it your um your window your chrome is sitting there open it is running and the first thing it's doing is it's running a while true loop until you hit that x and then it closes everything down that is a perfect example of while so i'd like to do this countdown method with blast off and then we go from there so we have let's comment this out and we will go while while count we'll change this to count so be really on point count while count is greater than zero we're going to then print count now wait a minute let's think about this so if i pass a five right now it's just going to print count over and over and over again but i want i want to do something right so we're going to then take count then we're going to decrement it every time through by one now what we need to decide is we're gonna we're gonna make some mistakes here and then we're gonna fix this up so i'm going to go through here enter a number we're just gonna go 5. so four three two one zero hmm i didn't print out five but i've entered five so what should i do um where where should i put where should i put my decremented uh statement it's not working i didn't get five to print out on the front end so we're gonna move it down here so now i'm gonna get perfect after my print statement now what happens if we say ready then we start the count so i'm taking in my input i want to print out ready i don't know where i got oh i got ahead of myself ready then i start my then i start counting at five four three two one but now i don't have zero hmm but i want zero so how can i do that so now we got a set of i guess it depends on the use of what you want to get out of the number um all right so we need to think about this so if i want to include in zero so we need to think about so all right we got i got my ready and i solved my problem of aha i like that zero greater than or equal to zero fantastic five so now i have ready five four three two one zero okay then it exterminates what happens if i wanted something like blast off to happen where would i where would i put that so if i put it here it would happen every single time right so i go print blast off and i get a bunch of it's super cool and super exciting so i i want exclamation points so i get five and i get oh outside the while loop exactly so i come here and i hit my backspace one time so python takes care of that for you i move it out of my body so i have my header i have my body and then i move it outside the body so it will only happen one time perfect so then i get my five five ready five four three two one zero blast off boom i'm without the yup yup yup exactly you guys you guys are on it today very very good now now i want to look at lists so do i still have a list in memory and i comment everything out okay let's do while i'm doing this everybody in comments comment uh where you're from uh because i am very curious actually getting some stuff around because most of and if you're just joining us today i'm sam uh with python basics uh partnering with bo and free free code camp and um we are doing two hour streams every tuesday um with a granted it's the world's fastest countdown that is true that is very true um uh we are doing two hour streams and uh this is this is basic beginner stuff so if you are china also very cool because what i what blows me away is uh the audience on my youtube page is uh from all around the world uh i it is extremely humbling so we got china uh india that is very cool yes actually a majority the largest the largest percentage of my audience is uh is from india uh slovakia very cool that is so cool all right so let's we have let's put this in memory so we have a list a list is the very basic uh is a very basic container in python so we got and i call it numbers okay and if you forget you call your call your dir with no with no information and you get numbers so there we go oh awesome um okay now what do how can we find out things about a variable what are we the things associated and what are those things called so any anybody anybody got any thoughts all right so we got numbers and we run dur on numbers let's see so we're not gonna oh i apologize i was looking for the methods how do we so the the functionality of what we can do with a list and i was looking for methods um and i just want you guys to start thinking about that so we're gonna look at append and then we're gonna look at list uh list comprehension so right now what we're gonna look at is i want to take a um i want to take a list and we want to put it if it is in a positive list ooh that was a no no or a negative list so we're going to have an empty list and a we're going to have an empty positive list and an empty negative list let's see oops all right and sorry and so now what in the world so we know how to iterate through number in numbers and we go through and we're just gonna print out number boom okay but now we have i was talking about append so let's look at what a pen does and how do we do that we do help on numbers dot append what in the world does this do append object to the end of the list so if i have my pause over here which is an empty list and then i go pause dot append let's see pause dot append and i give it four now pause it has four and and negative 3 then negative has negative 3. so what could i do here take everything that we know and then i can go and go if number greater than zero if if num and numbers if num greater than zero boom that is perfect so then i go pause dot append and then i give it number so then if that's that what should else be what should else be if i can actually spell else today all right so then negative dot append number right so i run this i call pause if i can spell pause then i call neg so bam so now i have a way to do this okay when you're first learning this is fine this is perfect and in a week or two when we start getting into uh some upper level modules we're actually i'm going to actually then show you how list comprehension is faster so let's go ahead and jump into list comprehension so what is list comprehension list comprehension is a way all the instructions are actually inside the list let me just show you so we're just going to do a real clean and easy one um we'll trump numbers here and we'll go so the way that i like to explain this is we got 4 i in range 10 10. so start start with your header your your loop your for loop header now when you get more comfortable with this you'll get it let me click over here see if anybody anybody ever seen list comprehension before you probably have because you guys seem uh pretty knowledgeable already okay all right let's let's jump at it and then we just put i so that's the way it works the variable goes to the front so it's basically how do i want to do this and what are my okay and that's fine that's absolutely fine that's what we're all here for uh you're here to ask questions and learn and make me better and my job is to uh do this that i absolutely love so all right but you do this wrapped inside your your list brackets so now i run this and i call numbers i call it number or numbers numbers boom so i already have so this is that this is everything built built on one and you might say well why didn't we just wrap list around our range well because we are that that's the basic list that i awesome well then good i'm so excited that i get to be the one to show you guys this now now the way that this works is now we add our conditions so we're going to change this to positive pause equals now we go if we have no colons if i uh yeah we'll do this we'll keep it this way if i greater than zero all right sorry guys sometimes it hangs up and now i need to change that's what i was looking at my notes going that doesn't make any sense well it doesn't if you don't read the notes right sorry guys so all right so to revisit list comprehension and lambda functions are my awesome because we're actually going to be doing a lot with list comprehension and lambda i don't know if we'll get all the way through the lambda because what we're about to do very soon and we're going to start on is one of the questions that i ran across a couple of years ago uh let's say it's an inter it's probably not an interview question anymore because it is so widely known but here's the premise i'm going to give you you have 25 horses and you have to find the fastest horse oh and you don't have a stopwatch oh and you can only race five horses at a time how many races what is the shortest number of races that you can do to win to get the answer that's that's the question that we're going to be solving well actually proving so what the premise is is you have your 25 horses let's just jump into it and and we're going to build upon this so what the premise of this is is let me find the the list sorry i did not think we'd get there already so i'm super excited because you guys are really really smart and uh it is so super easy so all right it is super super cool so here we go so you have a list and so i was thinking about this and i go this is a perfect tutoring problem a perfect video so if you want to get ahead and we don't get to it you can go and watch it uh of course these are everything that we're doing here is on my uh youtube channel but it does not have these subtle nuances and especially during live chats we always get into more i will just tell you that right now uh i have the main topics but then we always wiggle off into uh something else that's why i absolutely love these live streams is because you get into deeper deeper it's kind of like audio books where you are talking about something and then you remember something else and then you go off onto a tangent so great if you read the book awesome you get the red the red the audio you always get a little bit more so that's why i love these live streams so okay all right so the premise of this is that the long the long term that we're going to be working on and we're going to we're going to use all our skills to do this and we especially need a uh we're going to we're going to look at lambda we're gonna do this two ways we're gonna use this with a sorted and a key function and then we can also use lambda but yes lambda you're exactly right lambda and list comprehension extremely similar they look they look extremely the same and i get it when i was first looking at this it just doesn't make any sense but we'll go through it enough times and you'll get it excuse me all right but the premise of the 25 uh horses and you can do it in is it is it six races six or seven we'll prove it and we'll go through so you break the horses up into into groups of five so you run five races you have those horses be in there and they're uh in the order that they won the race super simple you don't have to you don't have to do anything else then you have the horses that won those races race awesome it's seven it's seven so you have then those horses run their race so then now you have these in order of the of the of the speed that they have that they've won then you have the the first horse of each race race so then now you have anybody got any guesses a list of lists in order in which they go now i think i misspoke you will always know which horse is the fastest because it will always end up here and i designed this puzzle and to use numbers because it's 1 through 25 so they're going to order themselves in 1 through 25 right so but the kicker is is this will not necessarily always be the second fastest source what happens if you had the second fastest horse just randomly happen to be here so the way that you then have to slice this and then run one more race is we have to come here and get that horde it's this diagonal right here it's this horse this horse these two horses and these three horses always that you will get the top three horses and i even i think i expanded it to the top five that's i think it's actually these three are the top three always but the top five will always reside here i believe or you get the top three i can't remember exactly but we're going to slice this through we're going to create a list of lists then we're going to have these get ordered then have the lists be ordered by the last place and then we need to slice this right here to get the next one so let's just go into it we have one hour left i think we can get through all of this so we have a lot of work to do here so how in the world do we need to start any guesses so first we need to get a list full of lists and have have it chopped up so we're gonna need to learn about a couple of a couple of things here so we need to bring in we need to look at well i appreciate that uh so we looked at der uh on our on our numbers because then we need to bring in a function so we need to i think i'll go from because you're you're lost all right we're gonna go step by step by step so first step was we need to build a list of lists so this is what's so powerful about lists is it can contain anything it can even contain an item that's itself so let's just go ahead and look at this and we're gonna do this with list comprehension at first so um num num nums that's silly i'm sorry list numbers okay all right so here we go we're going to do this with this comprehension first actually to make this real clean let's do this with with a loop all right list numbers we're going to make a bracket empty list then for i in range three then list numbers dot append then i'm gonna insert a list of range one through six close this out so what am i doing i have a range one through six so it doesn't go to six it goes to five so then i have a list of one through five inserted inside a list three times okay and what'd i do and do to do to do one two okay why'd that fail everybody look at that let's do that again i ran this whenever you get this indention and the syntax thing it's the last little bit of code that you wrote so i did that ah it gray to everybody see that gray out gray out gray out boom so now it runs and then i go list numbers ooh okay this looks different i have bingo missing parentheses so now i have a list because i see my brackets but then i have here so if i clean this up for i in list numbers print print i aha so i have a list of lists i have three lists inside of a list okay so now so i want now random i want randomly generated numbers inside my five lists so i could do this a couple of ways and since list comprehension can be a little challenging we're gonna do this both ways all right let's let's just jump into it so we need to learn about a uh have we imported have we imported anything yet i can't remember did we we imported mac we did import math did we import anything else did we look at random jan are you still here did we look at random last week i can't remember awesome okay random we haven't okay awesome so when you're wanting especially when we're doing this i do not and you should not want to type when when after we do this so when i've been sitting here typing this you're not going to do that anymore and we are not going to do don't remember import okay import import is a way to bring in another uh file and namely uh and i like to differentiate a module is a module that is already built in that is already in python it's a python file that is already brought in and when you download python a library i like to say library because that means that is a third party that you need to go out download it bring it put it on your computer and then you still import it the same way so here we go i didn't do anything actually let's look at i skipped this i don't like when i skip stuff anymore keywords let's look at import it's a lot important statement basic import statement find module loading initialize if necessary it's already brought in so what is let's get out of here do i have yep how do i know random still there because i ran an empty empty dirt command so now what what does random do random so here whoa very cool stuff randent we're not going to run help on all of random we're now going to run help on random dot brand int okay return we know what return means let me see am i still in feel myself getting lazy and not sitting up straight all right return we know what return means means it creates stuff creates random rand int creates random integer in range now here's something that is counter to everything we have talked about so far so this is why reading the documentation is so very important all right rand int works including both end points so this is inclusive so if i go for i in range 10 close out print now it's going to go through 10 times so we're not going to do anything with i we're just going to print random dot rand int uh one through five and then close that out boom run this so ten times random was looked at rand ant was looked at and one through five was randomly choice chosen now we'll deal with this very soon how python randomly chooses things because uh there is no random functionality in computer science or pseudorandom now we can get more into depth but that's your little nugget for there is humans are the only people able to choose random and then there's actually proof that we don't actually pick random numbers either but for all intensive purposes these are randomly chosen numbers they're mathematically chosen pseudorandom so now that is how you pick numbers of a certain choice so but what we're going to do is we're going to take a list and we need to randomly mix it up shuffle what does shuffle do help random dot shuffle okay let's see make sure i haven't looked at this stream in a while all right we're still good okay all righty everybody good so far we still we still good with this all right cool so what this does is it takes a list x now this is super important in place this is this is really good documentation return so it it states both both both conditions it is in place and to be even more clear it says return none all right so it returns none it is in place that means if you are not creating a new variable you're going to lose the original data let's look at it so now i have let's see so if i come over here and i'm going to let's look numbers and you always don't forget we need to import import random okay let's see all right sorry i thought my phone was about to ring all right we let's put this in less comprehension we'll do it one more time for i nope for i in range 10. so we just did this over here now we're going to slap this inside a list comprehension and it's literally just this random.randint one through five and i close this out give me a little space run this numbers so now that number so now i have excuse me so now i have a list of how many was it i have a list of 10 so it doesn't assign like shuffled list no if if if i did that that works so very good question if uh no no i'm sorry no it returns none so that that that will not work so you would need to um you would then need to uh oh i can't see it in my head right now uh you would then need to make a uh copy because it return it returns none it just it just uh changes it all right and then we can talk about copy deep copy because copy has some odd uh functionality uh so all right and then you have deep copy because it's just uh and then i actually that's very good because then because then when you start to have your like and is uh and equal to so things will be equal to but it is not the same variable that's that's uh that's actually a really good thing for next week for us to talk about because that gets pretty nerdy pretty quick and that is so up so up my alley okay um so okay i digress so now we need to get a list of 1 through 25 right and it just needs to be and then we need to shuffle that and because there there's multiple steps to this so we need to get a list of 25 then we need to shuffle it then we need to chop that up and spread that out sprinkle that over our 25 other lists so let's just go ahead and do it so we don't need no i'll leave that there so you guys can see it yes don't ever don't ever delete any side note don't ever delete any of your code save it i hate that i had one or two computers crash before i really got halfway decent so it was but i would love to be able to go back and see what that looked like but save all of your code for a variety of reasons because then if you created something you didn't quite remember what you did just comment it out or save it or move it put it off especially if you have something working definitely save that because when you'll see when you the more the more you make complex things and you start going and tinking around with it especially only change one thing at a time that's we'll we'll delve into that uh very soon all right we need to get a list of 25 numbers uh doom boom close bracket i for i in range so i want 1 through 25 right so i go 1 through 26 close that out so now i have um the numbers that i made with numbers yeah okay so step one i have my i have my numbers but now i need to shuffle it excuse me um i got my random so numbers dot shuffle and how do we use it just like this random shuffle now this is also very important and i just used it wrong random this is why you pull up the documentation because shuffle if i'd had done that i would have needed to have numbers for that to have worked shuffle needed to have been a method numbers and shuffle does not is not a method reverse is there sword is there but shuffle is not and the way that it works is random shuffle then you pass it it's iterable bingo random.shuffle iterable numbers so you're dropping it in to the blender and then calling it that's why that's why it returns none all right it goes in place and now we call this boom boom boom so now numbers it's all it's all in the blender so here we go so now i have a very shuffled list now now we're going to go through and grab one of these out and place it in our list one at a time so we're gonna go really slow since uh list comprehension can be very challenging we're going to come here and so what we're going to do is so we can run this over and over and over again and go step by step uh shuffled we're gonna use this list because if we were to run that code over and over and over again it seems and did i do that right bam okay so if i were to rerun this code every time our numbers would be changing and uh that always messed me up took me a little bit when i was learning why is that why is this happening so now we have our shuffled list so that is the way you get a shuffled list created not even having to think about it at at all anymore we got our completely random but now we want a list of lists all right so how can we do that we're going to do this uh really really slow and i think we can get started on the actual problem what's the exact time for the next week's class uh it'd be 10 a.m eastern so uh the 21st 10 a.m i've been meaning to get the wrap my head around what time utc time um so and you're my goodness so it'd be it'd be midafternoon but i will i will start getting get in the habit of uh okay oh well thank thank you my my local time 10 10 a.m eastern all right okay so let's go awesome okay um where are we okay so we need to create a list of five empty lists and we need to look at this right here we need to look at what pop does pop is a very cool and interesting method so it actually goes to one of the items in the list removes it oh let's just read okay so help how do we find out how do we find out what um how some of these methods work numbers dot pop and this is important so okay remove and return item at index the default so we need to we need to go we need to look at this what does this mean all right anybody got any clue default last so when we are looking at indexing indexing works the same on strings and on lists that's why i really like teaching those uh almost last item bing bingo negative one is the last item so numbers yeah we call this shuffled okay so here's an awesome okay i'm gonna be mean i'll bring this over so we're gonna do this twice and i'm gonna see how much i'm getting across so we just called numbers right here this is numbers so if i call negative one on numbers why isn't this typing i was halfway through the first uh drink and now i've taken two sips out of the second so i've since the stream started i've only had technically about a half a drink so about eight ounces but i did keep opening them a lot but no i've only had about a half a drink but i do drink a lot i do um like my kids make fun of me okay so if i go negative one oh my goodness okay numbers so numbers is right here so if i go negative 1 what comes out for numbers here's here's numbers right here what comes out for numbers oh trust me i i i eat lots of uh carbohydrates and uh fruits and vegetables all right no i i love milk 18. bingo now all right everybody look over oh shoot i haven't made the list of lists yet i forgot all right so we need to make a list of five empty lists we'll just call this horses then boom and we'll move this down then boom boom boom boom how could we do and then we'll look at this in a minute or two how could we do this with list comprehension one two three four all right is that everything so now i have why is my keyboard acting up sorry guys okay one two three and then i check because my eyes are playing tricks on me horses okay i got five empty lists so hmm i need to go through now you could make this even more even more random but then you could actually undo some randomness but i will show you this i will show you one more uh instead of doing that let's just run dur on random this is very cool abcde choices choice and choices help random dot choice okay choose a random element from a nonempty sequence so i could literally not only i could go in order and have pop just grab this last item until the list is exhausted and just go here and as we come through but what will happen is this will go here this will go here this will go here here so we could technically accidentally know and we'll know the order so basically it would go so our list and i guess we could check it we could leave this this way where that so this column will be in this first list this column will be in the second list this column will be in the third and so on because as we go through we're gonna go for every five we're gonna fill up row one two so it's like counting off people one two three four five one two three four five as you're going through the room and you put all the ones over here all the twos over there so if you're paying attention you could actually know who's in which one and the and the and the people in groups could accidentally figure out who's in what group so you could actually then use choice to then go through and randomly choose so i'll leave that up to you for you guys to practice on your own and if that's a challenge we can look at that next week so all right so first we need to go through our shuffled list pop it out and look each time through so we need to we need to figure this out we need to look at it all right so first we got to wrap our head around how can we get to each list for i in horses print i okay so we're going to use a for loop to get to each of the lists that's what we're gonna do for race here here we go for race in horses print race all right because each of these each of these uh each of these brackets each of these lists is a race that's how i want you to think about it now they're not they haven't raced yet but we're gonna put them in their group for their race that's how i want you to think about this okay so there that that's the race right now so we don't need that but we know how we're gonna touch each each one and we know that we're gonna use pop help help list pop pop all right remove and return so it's going to go and grab and return it so it's creating something so i can then use this uh so then i'm going to go let's see where i am so each time through so but actually oh i'm gay i'm getting ahead of myself i was explaining that but we need to go through this list 25 times so this is actually let's see we need to go through here 25 times and grab out and then place it in there so i guess i haven't done this in a while there we go all right so for horse and shuffled there we go let's comment that out for a second print course here we are all right so for each time through here's here's our horse here's our horse number and actually we already know the speed that they that they are so we're already going to know we already know how fast they are we we want to test we are testing this scenario of how fast are these horses so we've i've seen this we've seen it jump up a little bit so if you're if you're just joining us today what we're doing is we're actually looking at a puzzle a interview question of how to find 25 horses um and how to find the the fastest three horses with and you don't have any timing material you don't have a stop watch you don't have any way to time them so what we're doing is we're gonna we the answer is the answer is uh and and also how fast can you do it and the answer is would i say seven we do five races sort the r uh then you race the last the fastest of those horses and you take the diagonal and you slice that out and then you have your and you sort that and you have your fastest so we have to take a list of 21 through 25 we're going to shuffle those randomly then place each of those numbers in a list so let's just have at it so we got our we have our races we have this right here shoot so then what we have to do is then we have to go through and place each each horse in each one right here so as we go through so there we go all right let me check my notes because i already made one mistake with that there's our 25 and we pop that out okay all right for j there we go for i in and horses because that's five so we're going to go through then for j in range five because we're going to do this five more times so actually let's look at this like this because i i was looking at my notes closer so if we think about it we got columns and rows i think i changed back to this because it got too complicated for everybody and then horses there we go because then we have to have the index of each one zero one two three four all right that was it that's why i dropped the other way i knew sorry guys oh god got ahead of myself i did not think we'd get to this but you guys were asking about lambda and this is a perfect landa and especially list comprehension so we can then then i'm going to show you how to do this all on one line and it will blow your mind so all right for j or this is the index then we're going to append to that list so i want you to think about this we're going to go through this five times then we're going to go through each of these five times that's what we're doing so we got 25 so 5 by 5 then we're going to pop out this now you could you could then you could rent but you don't want to use random choice because then it's going through but you you could but then you'd still have to delete it and then we'd have another issue we'll deal with that next time but all right uh we have our shuffled so i want to remind you what shuffle does shuffled what uh pop does shuffle dot pop all right so let's come over here before we run this so what does what does pop do shuffle dot pop help shuffled dot pop this is what i thought was so so very super cool so you actually get this it returns removes the last item bingo or nested loop much easier okay inside the horse loop if shuffled bingo so is it still till four equals shuffled pop uh yes but then you have to append so that's why we're using this right here so we're going to append this in this list so we randomly go here put that in there then the next time through here we're going to go because when we get down here we're going to go five times so this way five times and then this way five times so we go boom first time through here and then we're gonna come down this way boom boom boom boom and i didn't do horses there we go so first time through here is zero so zero one two three four and then because here did we put that in we need to look at this zero because they're empty lists right now two three four sometimes this can be i got so excited that we were getting to this already all right so horses horses not howarses all right so if i do if i do uh horses index uh three i should change this here that was silly zero they're in order so that's gonna uh one and then three all right so let's put this back in memory delete that put this back in memory all right horses okay so each of this horses index zero is two horses index three is zero one two three is one so each time through here i go through i could i should have said uh yeah i should have just said horses because that'd be five um but i think the last time i did this it really confused uh a lot so that's why i think i changed the notes so let's just run this and go through so then i call horses so boom then let's do for i in for race in horses print race okay there we go let's go through this one more time 25 five times five twentyfive so we wanna go through this sorry one of my dogs wants to come inside they have to stay outside because they are loud so all right let's see if we can how far we can get in the next uh 20 24 minutes all right so we got now now we need to figure out so we have we have our rate we have our races set we have not raced yet does anybody have any guesses how we are going to race these horses to get them in order any thoughts all right and i'm not even halfway yet so technically i've not even drank a whole drink today so i think i drank two last last stream all right so we have got to learn about how to sort sort a list so there is i think i saw somebody write some i see duplicate numbers do we really you sure okay oh inside the horse list uh ooh yes we do oh i did not remove these thank you great catch because there are six there so now let's run this again for race in horses print race there we go awesome catch very very good there we go so yes i left my uh that example sitting up there very good catch that's why i love having um interaction and uh these live streams so now is anybody got any guesses uh how to then run this race and get these in order okay very cool i will see you next week so let's look at uh horses we're gonna run dir on horses okay all right oh sort let's run help on horses uh apparently i need to pick another not help on horses help on horses dot sort so how does this work let's move this over just a little bit more all right so sort sort a list in ascending order return none super important so now this documentation left out in place but same same rule same everything ascending order or in place returns none so now i have a list of lists so horses a list of lists so lend on horses five okay so if i want to go through and race each race i then have to well first let's come over here and call this so this doesn't keep changing horses so now i'm going to comment this out and then i guess i can leave that horses equals grab these so now this sets in memory and let's see get this one here this one here this one here this one here so i have my lists of lists so now i want to go through and i need to see and sort each list so for race in horses race okay so how does this work so i take my list and i just run sort okay and it goes in ascending order and i could use a key but we're not going to deal with that right now oh did i still not get this scooted over enough okay okay it does say it down here i thought this one did sort the sort is in place all right so returns none is in place super important because we're just going to then run race dot sort that's it all right so i do this and then and then i got my horses then i go for race in horses print race should have done this over here okay so now now we're getting serious here so now we got these are in ascending order because we learned that sort goes in ascending order and if we wanted if we wanted to do it the other way if we wanted if we wanted it to be first the first place on the left and go go this way let's copy paste now let's look at this optional argument this is important reverse equals false so it is you have two ways to think about this default argument optional argument all right this is how i want you to think about this this is optional because it's already assigned and we actually have a cool puzzle we'll do uh later with a randomly generating a password handles all this very very cool multiple options all right so the way that this i don't i don't have to assign reverse because it already is assigned so it's defaulted uh two i could have sworn it said default in here so you have the reverse flag that's another way so it's sitting here but so if i want this and i want the first place at the beginning of the list and work through i do this equals so this is what it calls reverse is true it calls reverse from top back let's run this because actually you know what see that is that right yes so here we go so now what we need to do is we need to let's see if we can get this done in 16 minutes so now we need to have the last place excuse me the the first the first place horses race so then we can sort these in order right so let's get after that so now what we need to do is we're going to we're going to build a function and then then maybe we'll look at lambda oh uh who wanted to look at who was having a hard time with lambda are they still here are they gone i can't remember i know a couple people just left oh sorry i thought somebody pulled up okay all right everybody you're ready let's see am i still sitting all right so now what we need to do is we're going to create a function called last i think somebody just wrote something okay we're going to do it with a with a defined function and then what we'll do is then we'll do it with lambda because i think if i do it this way it might cement lambda for you all right but if you are just joining us today right now i'm sam with python basics and we are working on the beginning the basics of python and what we're doing right now is we're working on a puzzle of how to find the fastest three horses in a 25 group of horses without a stopwatch or any timing material so return x negative one negative one so this took me a minute to wrap my head around but what we're doing is we're gonna we're gonna use another function that is perfect for this because um you also have sorry you can do this with sort but i want to introduce you to sorted help it's another awesome we got sorted okay so it is a builtin function that takes an iterable return a new list of in ascending order so the same thing right here and it takes a key so reverse is defaulted to false and key is defaulted to none so we're going to get rid of this because right now this sort that's why i remember we don't do this sorry because if you sort these lists it will look at the first item that's why i had it in the other order now i remember so that's why we have to use list so let's bring this in and so we have this because the default is is python will look at the first like if you sort a list of if you give it a list of letters if you give sorted a list of letters it will sort by the first letter and if you give it a list of lists it'll sort by the first number but we want to make this challenging and we want to learn and you typically read left to right and but some in our audience go right to left i believe there are uh um trying to think of some of the languages that go uh left to right but it is eluding me right now but we're going to utilize this because it is a awesome practice for our python skills so now we need to sort our list so we need to figure out a way to get 25 it is arabic okay i thought so but i did not want to embarrass myself um we want to get 25 up here that that list and japanese i did not know that okay japanese is in reverse well that's very cool um okay not japanese okay well that's still very cool okay all right so we need this list at the top we need this list second and we need this list third excuse me this list third fourth and fifth all right so does everybody see what we need to do we need to sort these lists by this last item and we're going to utilize our function right here that we just created and we want to say we are returning we are saying i want you to our key i want you to sort this by this by the list that i'm going to pass you by the last item and the way that python goes it goes all right so cool you have you're going to give me a list and then you're going to you're going to you're going to tell me the rules you're going to i'm going to use this key and then i'm gonna sort these so let's jump into it but if you're just joining us today um thank you for doing that we're running through the basics right now and we're solving a very very cool puzzle if i can find the right notes on this all right so let's go back to horses so we can reassign this horses then i'm going to pass sorted then i'm going to pass it horses because this is it i guess technically i could give another variable um okay let's do that new new horses sorted sordid horses key horses horses key then last and you do not use parentheses because the way all right we have not talked about this yet all right so you use last you pass it in information but when you just use this you're telling python goes oh i know what that is it is it is a function it's called last and it lives here in memory that is actually the memory address right there and we'll we'll delve into that stuff later but this is that's memory so when you're using this you're not passing in information you're telling python what to use there's one thing else we're leaving out and but uh so prince for race yeah i want to we're going to copy this i know i told you i don't like copying but we're not changing anything so we're going to print it unsorted then we're going to print it sorted and we're going to change one thing let's do a print so we can see the split all right so oop let's see what i did wrong what did i leave out sorted aha uh sorted i think i forgot something that's super important anybody got any guesses so what i did uh okay last is this reverse true all right oh my word well this is very frustrating and very anticlimactic because i am missing what i am missing so i'm going to have to only 10 minutes left i don't think will make it yeah uh that's probably ah shoot because i i guess i have not looked at this in a while but um so the way that lambda would work is it would go in here and i would not have a function oh i hate this and i don't want to start anything new oh bo i'm very sorry uh i i am at a loss right now because oh well that's embarrassing here we go okay so what did this is why knowing your variables is so very important so we we are we are good so let's get rid of this i rushed to that because for some reason i thought that was it so what happened here was because i mean you really want to put the first place race down here at the bottom no so sorted has a key and a reverse false so we turn this on because reverse it goes in ascending and we're going by the last place so first second third but then we flipped it we turn reverse on true so that was why so now it is going descending higher number because our fastest horse 25 is right here so the fastest horse will always be here but as you can see we got we lucked up i think in my example yes so we had we had uh i think i've had several where we could have i don't think i've ever run this sequence and that's what's so cool you could run this and run this a ton of times because one of the actual very cool exercises that i love showing is the monty hall experiment of the game the game show monty hall and you have three doors and you have one of them removed and you then have to guess excuse me you didn't have the choice of you're going to keep your door or change and it's a very interesting math problem but the reason why this works is the randomness you have this one this one and this one and always your fastest horse will end up here but you could get them all the way out to here 23 24 and 25 and then have these different sorted so maybe starting off at the end of well actually we could then slice this so how could we do this we got we got four minutes let's do it we got we still got we still got quite a few people here we got four minutes let's get after it so my new what we call it new horses new horses uh boom so then i need i need uh i need these three these two and this one so how in the world can we do this so i need new horses so what would that be zero one two two to the end oops horses ooh what i do so it's new horses the first one zero then two to the end helps if you get your variables right aha so my last three there we go then i need then the last two of the second one all right you got me so the last two of the second one so index one list two the last two so that's three going forward so 20 and 24 and then i need the last item the last item of our third list so the last item of our third list it's the third list index two and then the last item just negative one boom and okay so beginning next week we will pick up here but you we we we can we can add these together and put these together and it's very very simple but we've done a tremendous amount of all this heavy lifting so i just want to say thank you guys so much for for participating and uh watching our second stream and for those of you if you're just joining us i'm sam with python basics and we are doing two hour streams on tuesday uh for the foreseeable future and uh all of the videos that we are doing uh have been covered well thank you so much um well i really appreciate that um we are covering things that i've already gone over so if you uh want to get ahead and kind of be familiar with what we're going to talk about but we're going to keep going with lists i try to i try to also uh tie these in to puzzles and exercises because you really begin to get to see uh i show a lot and we work on a lot of a lot of different things so there we go had a really great stream today uh hope you guys enjoyed it i always get a lot out of it so as always guys thanks for watching and we'll pick up next week bye guys