in this ios development course you will learn how to create a netflix clone app using swift 5. omer who teaches this course is an ios developer and excellent instructor what is going on guys this is hamr and today we're going to be starting a new series here on youtube where we are going to be building netflix clone from scratch using swift 5. as you can see here the clone that we're going to be building is the exact same replica of the netflix application as you can see here there's a list a bunch of lists of trending movies trending tvs popular movies and upcoming movies and one of my favorites of all time that's operated where you can see here the shoshank redemption and godfather i really like these movies and in today's video we're going to be building this as a final product um as you can see here you can either play or download you can even long press any title where it gives you this cool animation and option to download basically when you click download it's going to be added to this list um also we have here a tab bar where we can actually navigate through a list for um tabs where we have here for example a coming soon tap where it gives you a list for the upcoming um movies and tv series and all that kind of stuff and one of my favorite features that we're going to be building is the top search where we are going to be able to search for our favorite movies like harry potter and whatever movies that you like we have a downloads list um also when you press when you press or tap on any title of those it's going to be taking you directly to the official trailer for the movie you're gonna be having um a controller view where it displays the trailer itself the title of the um the movie and also you're gonna have um you know like a brief about what is this is really about like you can read this after finding a host barry you know the rest um you can just go back in here and yes this is what we are going to be building as you can see here also the navigation bar scrolls with the table view and scrolls back but it sticks to the top when it reaches certain point so let's just start by creating a new xcode project we can select app let's call that netflix and make sure to take storyboard and swift because these are the things that we're going to be using building this application hit next and choose your download your installation folder so uh first of all i'm not going to be working with storyboards so let's just first go ahead and get rid of those you can click on main move to trash then click on the info plus file scene configuration and we can delete the storyboard name um one more thing here let's just hit the netflix clone app we'll just go ahead and hit shift command f let's type main uh let's just select the first one over here and one more time just search for main this is the fastest way you can do it actually so over here you can see ui kit main storyboard we can delete that as well and right now 100 we got rid of the storyboards so right now let's just go ahead to our scene delegate file let's just configure that so that we can work without these storyboards uh we're going to be name renaming this to a windows scene okay and then using this variable over here the window we're going to be assigning new window for our application to be running on so let's just go ahead and type window um is equals to ui window initialize that with the frame um we can see here we can say um window scene dot coordinate space no bounds um next thing you need to write is window dot window scenes window scene um third and um the third thing is window dot root view controller is going to be our view controller over here so let's just make a new instance of that and last but not least window don't make key invisible so what this basically means is that we're going to be assigning this view controller to um to be the root view controller for our application window so um okay so let's just go ahead and see what we're going to be building over here let's just go ahead and open that netflix app um i don't know why this is all about all right yeah okay okay so as you can see here uh we have our home um we have a tab bar here that we can use to you know navigate between the tabs and let's just start by building this at first so um let's go ahead and change that name to you know main tab bar view controller because i like each view controller name to be descriptive about what it does in you know so let's just maintain bar view controller let's just change that as well to ui tab bar controller and here we are going to be making this as a starting point for our application so let's just start um change that one more time let's just go ahead to our main tab bar let's just make a sure everything is working just fine um system yellow i just choose our simulator to be the latest iphone 13 pro max and hit command r for building run this um you know as for the first time it's going to be taking a little time until it's installed oh it actually worked it didn't take much time at all so as you can see here um we've changed the view background color of the main tab bar to system yellow and over here you can see it's a little bit dimmed because this is actually our tab bar that we're going to be using okay so um we have all this let's just create here a folder let's call that controllers oh no something's not right i'm okay controllers and let's um create a new file over here we're going to select the coco touch class um uiviewcontroller let's just call that home press create delete all of that we're not going to be needing that and let's just background color red let's create another one here goku touch the same thing search or i believe it's going to be upcoming up coming view controller okay hit create delete all of that um let's just select another color for it view background color is going to be green um i'll just create the the third one which we have here i believe it's search new controller okay let's do the same thing basically development is all about making um the same pattern over and over again so view the background color uh let's just give it um pink system pink okay and last but not least um one more coco touch glass which is going to be downloads um let's give it a new color as well so that we can identify it once we press on it so let's get that um i don't know what we blew okay so we have here our main tab bar that is going to be having four tabs to press on so let's just initialize that so let vc1 is equal to ui navigation controller root view controller is going to be home and okay pc2 ui navigation controller road upcoming one more time p3 equals to ui navigation controller okay search select vc4 is equal to ui navigation controller you okay and if you ask me why the hell we uh added those controllers to a ui navigation controller okay basically um as you can see here let's just go ahead to the application that we're going to be building here's a navigation controller and once we click on any of those it's going to take you to another controller that's going to be pushed on the current one so basically this is why we are adding each one of those to its own navigation controller let's go back to here okay um we want first to change the image or let's just go ahead and set view controllers over here let's just create an array of our vcs so vc1 vc2 pc3 and pc4 and maybe let's just set that to true okay let's just go ahead and build and run this and let's see what we've got all right i can see here that we've already uh showing our first vc um let's just press over here and as you can see immediately we can change between the uh tab bars over there so why don't we add um an image for each one of those so that we can easily identify those we're going to be using sf symbols um it's a tool available on the apple website as you can see here we can search for example for house um we're going to be using this as our home uh tab bar image so let's just go ahead and type the eco vc1 the tab bar item.image is equals to ui image system name house we're going to be making the same thing over here templar item image ui image and i believe this one name was um what was this i really have no idea but let's just um play um yeah play circle i believe this is the one so we can copy the name over here we can paste the name over there and boom vc3 tab or image okay ui image system name i believe this is called magnum um fine glass um yeah that stands for the search yes and vc4 tab or item dot image is equals to image system name i want to have something that um okay something for the downloads i believe it was called um arrow online something like this we can use that to search oh yeah arrow arrow down to line so let's just copy that name let's add that name over here and boom that's it let's just build and run this and it's easy as this like yes it's really really simple as you can see here um also we can um right pc one tab all right and content color i believe um i don't believe it's number one vc1 dot title home if you see two dot title um coming vc3 though title search um i believe it's stop search um let's just make sure that we're naming that correctly okay um home coming soon top searches and downloads okay home coming soon just write that correctly boom building one and yes we have all of this over here um i believe one last thing that we need to do is just um let's just set that to system background and i want to actually set the system background to all of the controllers over here because you know those colors are going to make me blind somewhere um okay let's just go ahead and build and run that one more time what do we have here okay we have our tab bars um successfully made i believe that we just need to change the thin color for each and every one of those let's just go ahead in the main okay tab bar dot then color dot label i believe that's that's the one i'm very sorry yes and let's just go ahead and try that um with the dark mode and the light mode and as you can see here it's all working so um that's it for today's video um in the next video we're going to be starting working in the home view controller we're going to be um setting our table view so that it can look something like this um as you can see here just let me give you a brief because this video is getting too long um here's a table view that's the header for the table view and each cell for the table view is going to be a collection view itself where we can use to horizon horizontally scroll through our movies and as you can see here uh it's really really efficient because it doesn't load um the whole list at once it or it only does that when you reach the end like this so yes and not all the table view cells load at once so yeah it's pretty much efficient so so let's just start the hem bite i'm a private let home feed table this is going to be a table view and i'm going to use the anonymous closure pattern let's initialize our table to be ui table view let's register um a normal cell for now of course we're going to customize ourselves so let's just type ui table view cell make sure to type dot cell because we want the type itself and let's register that with our reusable identifier as cell and we can return our table right now so that's done right there let's just add this table view to our view and also we just need to give that um a frame so that we can view that on our screen and also make sure to type super the view to lay out some views okay we just need to give that a frame and that frame is going to be equal to view bounce so it's just going to cover the whole bounds of our screen um and also we can um let's just make sure everything is done correctly and hit command r to build and run this and view that on our simulator right there so as you can see there there's nothing actually on the screen and this is what this that's because actually the table view is still empty it needs to have some data in order to be able to dequeue some cells and those cells should have all the data that you want um let's just go ahead and do this by typing home video table and set the data source and the delegate protocols for the table view home page table the data source and those are the two protocols that we need to confirm to in order for our table view to work properly okay so um let's just do that in an extension so that we can keep our file clean ui table view delegate and also i need the ui table view data source we just need to um implement those two methods which is the number of rows inside each section let's just say for example that we need 20 rows um and also the other method is going to be cell 4 row and this is a delegate method that tells that table view um actually which which um which cell that we're going to dequeue for each row so um let's just type let's cell is equals to table view dot dq with reusable identifier i really like how switch um sorry how swift language is actually architectured as you can see there like it it feels like you're reading just english hey table view dq reusable cell with the identifier cell for index path this is pure english guys and now let's return that cell and just for testing purposes let's just type um text label dot text and make be sure guys that this is going to be deprecated in the future um hello world okay this is going to uh work i believe let's just uh test that and type hit command r and let's hope yeah it works as you can see there we have our table view setup and we are going we're getting a little bit closer to what we want to do at the end time prompts here okay so um as you can see here let's just go ahead and view the real deal um that part is the uh the header for our table view and starting from there this is going to be a cell and that that's going to be a cell as well okay so what's this this is going to be a header for each section oh wait a minute so basically we have two kinds of headers yes that's correct basically we have a header for each section and also we have a header and that's um separated from the others and that's for the whole table that's the really cool part about table view that you can assign um a header for each section or the header for the table if you want and this is exactly what we're going to do and we're going to leverage the um the delegate methods for disable view to do exactly that so let's say here for example that i want my cell to be a height of 200 and also um height for section yes and let's just return 40 and let's hit command r and build and run and see what we get okay so as you can see here um there is the section header and also each cell is um is 200 uh points in height uh let's just make that a little bit easier to see let's type cell dot background color let's just give that an arbitrary color for now let's say red and as you can see here this is our cell this is a cell this is a cell and there's a slightly change in the color here which is basically the separator between each cell okay so what do we need to do right now um basically we are going to create um a custom a custom cell that we're going to be using here in our table view cell and uh since this project is going to be based on the design pattern of the mvvm which is the model view view model um we have our controllers already so let's just go ahead and create a new folder um new group in here let's call that reviews um any other group is new models one more time here um what else do we have models okay and because i have an lcd maybe so yeah model view view models controllers this is the exact um way i'd like actually to you know organize my project um let's just go ahead and yeah let's leave that right there for a moment let's just go ahead and make resources folder and also one for our managers and i'll get to that later okay so for now let's just create a new view right here let's just go ahead and create new file um coco touch class and right there you can just type ui table review cell and in here i'm going to write um give that a name of collection view table view cell and i'll tell you exactly why i'm naming this um like that because i want each cell to have a collection view itself and by reading this only i can see that i have a collection view inside the table view cell and the table view cell actually is going to be the type of the um of this file so just hit next i'm going to create this in the view i'll just delete all of that because i'm not going to need that and i just type static light identifier and it's that is going to be collection view table view cell and basically the identifier is the same as the one that we used for registering the normal set that we registered at the beginning of this part uh it was we named that cell however this one is going to be called collection view table view cell and also let's just initialize that super dot in it style and reusable identifier and make sure to also um implement that angelizer as well fail error and leave that as it is okay so right now let's just um get that for its content view a background color so system pink for example yes i like that color a lot and let's just go here and type collection view table usl and also copy that one more time as well in here and dot identifier this is how we register our custom view cell let's go right there in the cell for row method and okay let's just delete that i'm going to teach you how to write that properly without going into errors but just type guard let cell is equals to table view dot dq with reusable identifier which in our case here is collection view table view cell dot identifier for index path as um collection view it will use cell else we just need to return a normal view a normal table view cell actually and right now let's just return that cell and let's just hit command r to building one and let's see what we have right there okay so basically this is our um this is our table and as you can see here each cell is a system pink and right now um you might ask okay so we have this each cell and it's 200 points in height why do we not see why don't we see the height for the um for the header as a matter of fact when we initialized that table view we did not specify that we're going to be having headers and we can easily do that using this so let's just give that a zero frame right now because we have already initialized the frame inside the view the layout some views method and the important part here is just to specify the slide of this ui table view to be grouped basically groups is going to give your table view the style the same as uh apple uses inside settings app so let's build around that one more time and let's see the difference in here okay a height of um 40 pixels and yeah you can also argue with me about okay i thought that you're going to have header for each section well as you can see here we're only having one section and inside each section there is 20 rows so we want to um to fix that so let's implement another method in here um that means this method is called um number of sections and instead we're going to return the 20 right here and inside each section i just need one row let's hit command and r to build and run and let's see that so as you can see here we started to get a little bit closer to the final product that we want to design using ui kit which is our netflix um design okay one more thing that we need to do here is um giving each one of those a collection view cell so that we can actually have a placeholder where we can use to put our labels and movie titles and movie posters in it so let's just go ahead to our collection views cell table view cell hidden here and let's define a new connection view cell using the same anonymous closure pattern right there so private let collection view this is going to be a ui collection view and let's just go ahead and make that so the first thing that we need to do is um using the analysis closure pattern so that collection view is equal to ui collection view and for the frame right now it's going to be zero and let's just initialize that with a layout which is layout which is going to yellow us because layout hasn't been uh initialized yet or it has no idea what is layout but don't worry just return our collection view right there and over here let's just go ahead and define this layout and that is going to be ui collection view flow layout we can type layout dot um scroll directions going to be horizontal because as you can see in the main networks app it's um it's the direction that we use to you know navigate through each category so we have layout scroll directions going to be horizontal and this is going to be layout in here one more thing like the table view because table views and ui collection views is pretty much like we just need to register in a cell in here okay and for this i'm going to um type ui collection view cell dot cell because i see you know we would just need the type and we are going to um give that an arbitrary cell name right now which is going to be so okay we just need to add this to our content view collection view and let's also conform to those two protocols that allows us to display pictures and our data inside the collection view so just um type collection view don't delegate it's going to be self collection view the data source is going to be self as well and before xcode us because we haven't conformed to those protocols let's um let's do that right there ui collection view uh delegate ui collection view data source and the best part is that it's pretty much the same as the um the table the table view um i just um add the methods that we're going to use so basically sell for item and also number of um items inside the section let's just return that to b10 and for that let's just let's sell it's gonna be a collection view on dq with a reusable identifier cell for index path return cell okay cell the background color um we should say green i don't know why but i like green so let's build and run this and see what we get okay nothing in here why okay um let's i oh my god this isn't gonna be green okay let's see what happened okay so we have our cells and inside each cell yeah we forgot to give that a frame okay so as you see guys i don't uh cut inside videos and pretend everything is going to be working as fine um i'm just coding this live so that you can see how we can debug our app so that we can identify the problem and fix it and you know the rest yeah so lay out some views super lay out some views and i want my collection view to be the entire body of the cell so i'll just give that a collection view about frame examples to content view the balance and let's build around that and test if that works okay as you can see here each cell is actually working um it's colored in yeah this is the system background color um we're gonna fix that later but as you can see here this is not the layout i want for each column i want the each item of this to take the entire height of the cell and okay you asked me how we can do that actually it's very easy we can specify that over here layout item size easy size and let's um give that um a width and a height so let's say for example i just need to give um 144 of the widths and um 200 for the height let's just run and see what we get and as you can see here we are getting closer and closer to the final product that we want and as you can see here also that each one of those uh cells um are independent of the each other and it has the horizontal scrolling functionality enabled by default why because we said that right there okay one more thing uh we just want to um you know add the header for our table view um okay so let's just go ahead in our um home view controller and yes let's go here in the view that load and let me just go ahead and type home feed table dot table header view and inside here we're going to define our ui view frame cgrect x00 and let's just give that the um the width of the um of the view and for height let's say for example i just need 450 okay and let's just uh build and run this i'm just testing that it's going to work and yes as you can see here we're going to be using this for our hero view controller it's not going to be a view controller actually it's just going to be a ui view but i'm not going to create this with this method right here um we're going to make a separate view right there so we can separate the functionality for each view so that each view and it's gonna be working on its own okay what else do we need to do okay um i guess that's it for this video because i believe this video is getting too long in the next video i'm going to modify the header for each section basically we're going to have four sections one for the top recent movies top rated movies and all that kind of stuff and also um i think if if if we can make that happen uh in proper time we can you know start working on the hero as well so first things first we're going to go to our view folder and let's create a new file here just tap a new file goku touch class then we're going to create a new ui view and now let's call that um hero header ui view okay so let's tap create and now let's just delete all of that kind of stuff because we're not going to need that so um we want to um give that a frame and inside that frame we're going to assign um three things the first thing is the ui image view um and the other things is the two buttons where um one of them is going to be the download button and the other one is going to be the play button so let's just start by initializing this with a frame of course and just for you know the frame is going to be assigned when initializing this view so let's just go ahead and type super dot net frame and the most important thing just to um avoid any error just import the required initializer just type fail error and then we're ready to go here okay so as i told you the first thing that we need to implement here is going to be um an image view that's going to contain our header so just type hero image view this is going to be a ui image view let's use the anonymous closure let um image view is able to the ui image view and let's return that image view and before we return that um let's see here what we need to do um yeah so let's just type imageview.content mode it's going to be fill and scale aspect fill to be exact let's type also imageview.clipse 2 pounds and that's going to be true so we avoid um overflow and yeah that's it so basically um and also you know what okay so we don't need to be using uh constraints here because it's going to be very simple actually so um let's just add this sub view here and we can use the layout function layout view just to give that a frame um i just type hero image view the frame is gonna be equal to bounce and um one more things that we need to do is that i've downloaded this poster for this movie uh we're just going to use it as uh for testing purposes so let's just go ahead um and you know what you can just go and download any picture or any photo that you want from the internet you can use the unsplash website for downloading free pictures or even you can just go ahead and grab any movie poster you can add the to add this to the assets folder just right click here new image assets and just give it a name as you can see here i gave it the name hero image and i just place it right there um i'm not going to go exactly in details what are the difference between the 1x 2x and the 3x right now because this is not our focus right now let's just go back in here let me just type imageview.image and we're going to use that image as you can see here i'm typing ui image named and let me guess uh what did we call it yeah hero image we can actually copy that name so that we um we're not going to be prone to any errors and just paste that name and right here okay so basically this is our um header view and it's completed right now let's just go ahead to our home view controller and as you can see here we're assigning the table header view to um an arbitrary ui view let's just delete that and type header view let's initialize that right here um let header view it's gonna be equals to um hero header view and we're going to initialize that with a frame and our frame is going to be a c direct let's place that at 0 0 and as you might uh guess the width of the header is going to take the entire width of the application so let's just go ahead and type view the bounds dot width and the other one i might give that a height of maybe 450 points for now and let me just go ahead and build and run this using command r and let's see what we got so far okay so basically we are set um we have our poster here and second thing i wanted to do is that um i wanted to give that um this effect of the um you know fading out so we're going to utilize the gradient and it's going to be um very tricky if you give it a thought for at first but trust me um i'm going to try to do my best here to um to explain it and to be honest it's really that simple it's not that hard to be honest so let's just go ahead here in our um initializer and say um add a gradient and we are going to create this function right now so let's just go here um i might go there private thunk add gradient and okay so here it goes so we just need uh to add um a cg uh or see i'm not from i don't remember exactly let me just go ahead and type let gradient layer it's to be c a gradient layer i guess that's the one um let me choose the gradient layer colors we're going to assign two colors in here okay so what what's the effect that we're seeking for so basically we wanna utilize two colors what are those colors okay whenever you see a fading out effect so basically the gradient effect or the gradient colors uh we'll be we're going to be using to apply this effect is the clear and whatever the system background is so let's say for example let me just grab the simulator over here so basically over here i want the color to be clear which is absence of colors or whatever color that you might choose however it's going to be alpha 0 so basically a transparent color here so that we can see the poster and as we go down i wanted this color to um become more black until it blends with this black as you can see here so um let me just go ahead and um and type that and i hope that's going to make sense so let me just go ahead and type ui color dot clear this is the color that we want and we just need the cg color value of it the other one is going to be ui color dot system background um cg color okay um the next thing that we need to do is just we need to add this sub layer um to our ui view which is going to be um by using um layer dot add sub layer and it's going to be gradient layer okay so let's build and run this and see what we get all right so basically it's not working yet and that's because we forgot to give the gradient layer a frame so basically we're going to give it a frame for the entire bounds over here um it's really simple to be honest gradient layer dot frame is going to be equal to bounce let me just um build and run this and yes as you can see here um we have our clear color here which is basically a color with an alpha which is going to be equal to zero so basically it's a transparent color that gives you ability to see through and the other thing here um the black color which is because our system right now is using the dark mode so it's gonna be a whole black color over here um i'm not sure if i just try to toggle the dark mode with the light mode it's gonna work um it's not working yet um okay so basically it's not working because um the system background color right now is not responsive so basically when we initialize this header view it just uh it just so that the color which has been used right now for the system background color is going to be black so it assigned the color black and when we change it back again to the light mode so basically it has no idea that the color of the system has been changed so we're going to look at that later on this is not our main focus right now so let's just go back to our um to our dark mode over here and let's just go ahead and add our two buttons that we're going to be using for either play or download this title okay so let me just go head over here let me just type private let um play button and that's going to be equal to a type of ui button let me just use the same uh pattern which is going to be the anonymous closure that button is going to be ui button dot text or set text i believe set title yeah um which is going to be play for normal return button and let me also um button dot border color is going to be system background i believe okay new eye color system background um not cg color okay um what else do we need to do yeah button dot um border width is going to be one for now and um yeah we are going to use constraints to lay out this button perfectly so just type button dot translate auto resizing masks into constraints this is going to need to be equal to false so that we can use the constraints in here so let me just go ahead and um let's just add this sub view play button right here and i just want to create another function here which is going to be named apply constraints and we can define this function over here private func apply constraints and let me just give that name let's play button constrains gonna be equal to an array and let's just start by giving that a constraint so that we can place that button on our screen so let's just type play button dot leading anchor i'm not going to use the left anchor because um some of you guys may be from an arabic speaking country um you know for arabic speaking countries and devices that have the arabic um language set by default um these languages um basically they are read from right to left it's not as english like you read english from english from left to right i'm sorry so basically we are saying that for english based um devices we're going to assign the play button on the leading anchor which is in our case gonna be on the left okay uh but for devices that have an arabic based language um the leading anchor is going to be on the right um it's really good practice if you want to make your app as much global as you wanna um as you want so it you know it uh behaves differently with each language so uh we're going to constrain that um to the leading anchor and i just wanted to give that like a margin of um 25 points from the left um and then i'm going to say another constraint which is going to be um bottom anchor and it's going to be constrained to the bottom anchor and i wanted to give that also a margin however um when we uh i want this margin to be uh by negative so that uh it doesn't count from the uh the point of the bottom constraints and move downward i wanted this play button to move upwards so i'm going to give that maybe negative 20. and let's just activate this constraint so nslayoutconstrain.activate playbutton constraints i guess um we're done over here let's just type command on ours let's build around this and see what we get yes as you can see here we have our play button as you can see here it's um it has if you look slightly you can see here the the border but let's just go here and let's change that color maybe to white so it's easier to see wait a minute ui colored y dot cg color i believe that would work okay so basically here's our play button uh it's 25 points from the left 25 points from the uh bottom we're going to fix that but not now we just need to get things working um maybe we we can give that another constraint here play button dot width anchor constraint is going to be equal to constant and let me just give that maybe 100 points um so it gets wider yes um we're starting to getting something here um let me just go ahead and maybe increase this to be 125 maybe um too much let's just give that 90 and as you can see here we don't have like an exact file that we can get our margins and padding and all that kind of stuff with so basically we're just uh trying uh using the trial and error method so basically this is how we get things done working um in no time so let me just go ahead and give that maybe negative 50. um yes so um i want to um yes it's working fine for me to be honest like i couldn't ask for more um let me just go ahead right now and add the um the download button so private let's download um buttons gonna be a type of ui button basically we're just doing the same things here um i hope i can write correctly let's button it's gonna be ui button essentialize that have an instance button basically we're going to have the same things over here so let's just copy and paste that um and to be honest there's no room for error um yeah basically we're going to use the same stuff over here and let's just add this to our view add some view download button and then let's just um set new constraints for that button as well so let's download one constraint we're gonna be equal array um download button um leading anchor that constrains so basically we can just reverse that into the other direction so um maybe we can use the um trailing anchor and negative 90. okay download button the bottom anchor the constraints gonna be equals to the bottom anchor negative 50. um and also the same width is going to be used so download button over here with anchor that constrains um 100 points and let me just go ahead and activate this constraints as well download button constraints and let me just build and run this and see what we have um okay so clearly it's not right something is wrong over here um let me see what we have so um i believe there's something wrong over here um okay oh yeah let me just go ahead and trailing anchor over here i believe this will solve the issue and yes so i believe it's slightly um you know shifted towards the left but okay we just need to get things uh done really quickly um we can just give that something like um will look a little bit better upon the layer dot border um radius maybe corner radius it's gonna be five let's just see what we have here oh yeah it's going to be better if we used um a corner radius or something okay and maybe just give that a little bit more of points here to use as width okay so yeah that seems nice that looks nice okay so basically we have here our um button so um maybe we can also make that 70 and this is also 70. we just need to give them a little bit of margin between themselves um yeah i believe that looks okay and let me define a function over here okay so let's just call this function configure navbar okay we can copy that just declare a private function over here with the same name of course and okay so basically what we want we just need to add the netflix logo so we can just go ahead open google let's just type netflix logo png so basically we need that with a transparent uh background um yeah that's the one that's the one i downloaded so you can just go ahead into your assets over here right click new image set and then drag and drop it as as i did over here so basically i call this netflix logo and that's the name i'm going to use to initialize my image over here so let me just go back to my home view controller um let me just get the grab the image first so basically var image is going to be ui image named netflix logo and some of you might ask why did i initialize that in a variable not in a constant uh well bear with me for just a second i'll tell you exactly why we need to do that so basically um let's just go ahead and type navigation item dot left bar button item and this is going to be equal to a ui bar plan item and let me choose this one so basically i'm going to add my image over here the slide is going to be done target self and the action is nil for now okay so let's build and run this and see what we have okay so as you can see here i have the netflix logo over here but something seems to be incorrect over here um well basically we just need to modify or configure this image itself before adding it to the nav bar and that that's why actually i have initialized the image with a variable because we are going to further modify the image so let me just go ahead and type image it's going to be the image dot with render mode dot always original so this is how we force our um ios system just to use the image as it is so let's just build and run this one more time and let's see what we have okay easy busy so we have the netflix logo over here every single everything seems to be working just as fine um and as you can see here whenever you tap on it you know uh it dims a little bit darker so yeah that looks cool okay so the next thing is that um there's also as you can see here navigation item there is left bar button item and with some logic you can did use that um we have also right but right bar button item okay but this is not what we want actually we want items and fortunately enough uh basically apple just gave us it in a really simple way so basically we can type navigation item dot right button and as you can see here we have right bar button item if you want to add just a single button or a single image whatever you want and the other one here is a one with an s so basically it takes an array and let's add our um let's add our buttons inside this array so basically what we're going to do is just we're going to type ui part button item let's initialize that with an image okay so for this image i'm going to initialize that with a system image let me just go ahead and type that as a person and if you ask me from where i knew that there is an icon uh inside the system which is called person so basically there is a tool offered by apple you can just go ahead into apple website or just google uh sf symbol it's a dual provided by apple which gives you all of this predefined icons you can just search for the icon that you want and copy the name from here let's say for example i just need the person and as you can see here i have person person that failed personal circle you get the idea okay so let me just go back and type person my style is going to be done target self and the action is nil for now and let me add another button over here ui bar button item okay image i'm going to initialize that with um play dot all rectangle style it's gonna be done target self and the action is also nil for now and we can build and run and let's see what we get so basically um everything seems to be working fine i want to have this maybe whenever we tap on this button we should be um represented by the coming soon uh tab uh i haven't decided yet so um and yes that's the one we're going to be using for our profile i'm not sure actually i'm going to be working on the profile controller right now i guess i don't want to you know make this tutorial or this series too long but i'll just see what i decide okay so um one thing i also wanted to change um let's type navigation controller navigation bar the tin color and i want to set this to white and if i build and run this one more time and i can see here i get the buttons color to be changed to white actually okay so everything seems to be working fine except for one thing basically as you can see here the navigation bar um it always sticks to the top and it hides the content behind it well for some of you that might be a good design but i just wanted to stick with the design from the real netflix app so um here's the thing i'm going to implement an algorithm which allows me to push the navigation controller um as soon as i reach the very top of the screen here the the navigation controller is going to be pushed upwards until it gets disappeared and whenever i pull down uh i want to uh basically uh leave the navigation button or i'm sorry the navigation bar over here sticks to the top so let's just go ahead down here and let me implement this algorithm so basically a table view basically it's a scroll view so it inherits the all the methods that the scroll view have so basically let's type scroll view that's crawl and let me type over here this um maybe i'm not going to go into the details of how this algorithm work but i'm going to type it and as i'm typing i'm going to explain what we have over here so basically um let's just declare a new variable here let's call that default offset and let me get this from um view dot safe area insets dot top so basically this is going to be um the offset of the top uh safe inserts um of the screen okay so basically uh it's not going to uh to count as the notch is not there it's going to count for the notch um okay so the other thing i wanted to get is that um the offset that i wanted to uh assign for the navigation bar so let me just go ahead and um declare a new very constant over here basically it's on the it's not a variable um we can call it offset and this is going to be scroll view dot content offset dot y plus default offset okay the next thing that we need to do and it's very very easy if you don't want to get into the details or how this actually works behind the scenes you can just copy it so basically let's just type navigation controller navigation bar dot transform and net i want to use um this so basically we don't need to um translate the navigation uh bar uh in the x axis so basically this is going to be one and the behavior i just uh mentioned whenever i pull down i just wanted uh to have the navigation bar sticks uh to the top so basically we're going to implement this by typing minimum and it's either going to be zero or if the offset is negative so that means we are um pushing the navigation to top so basically let's type negative offset let's build and run this and let's see the result that we have okay so first of all let me just pull down and as you can see here the navigation bar sticks to the top but what happens if i uh pull to the top okay and as you can see here exactly that's the behavior i want to implement so basically let's pull down one more time let's pull in the other direction perfect everything seems to be working fine that's it okay so uh since we completed our work over here with the navigation bar let's just go ahead and set our um set our header titles over here so basically um let's say for example let me just go ahead and open the the one that we should have uh basically we have trending movies trending tvs popular upcoming movies top rated uh i don't think i'm going to um memorize all of that let me just give me just a minute here so basically um let's just go over here and let's declare an array that's going to hold our text or basically the string for our header sections titles maybe so let's just type let header or sorry section titles that's going to be um array of strings and let me just start by typing um trending movies trending tv all right let's just give me a moment over here i'm going to look at my second screen um yeah we have popular upcoming movies and top rated okay just a minute okay let's type top um rated and let's add one more um item over here um upcoming movies okay so let's go down there let's change the number of sections to be um titles section titles dot count and over here let me just go ahead and grab the um the simulator one more time just a second okay so um we have the popular oh yeah we forgot the popular i believe okay just a second popular okay so trending movies popular trending tvs upcoming movies and top rated and as you can see here we're going to initialize um account number so basically this is going to get the number of titles i've added over here and yeah it's going to be dynamically assigned all right so let's add the titles for each section and just go over here type title um title four header in section and let's just return um section titles index um i believe it's going to be yeah it's going to be section and this we're going to get this section from here so basically let's build and run this and see what we have okay we have the everything set up right now we have um yes the number of sections are correct is correct and as you can see here trending movies popular trending tv and the upcoming movies one thing that is bothering me actually is the font it's all uppercase over here and i don't believe the color is really subtle like you can just see it easily so let's just go ahead and fix that okay so basically what we need to do is um to implement another method so basically um it's just going to be um will display let me just go ahead and type that correctly table view will display header view um we're going to get the header itself for each section so let me just go ahead and type guard let header okay it's going to be view as ui table header view for review just a second else return and now we have an instance for our header so let me just go ahead and modify the things that i needed to change so basically let me type header dot text label and that means you know this warning means that is going to be deprecated in the future however we just need to get things um working right now so um since this is an optional let me just type a question mark over here dot font let me just go ahead and type system font of size 18 and let me just go ahead and type semibolt we want to give that header uh or that text actually a frame so um header dot text label dot frame is going to be c direct okay so we want the header bounds dot origin dot x and let me just give that like a margin of 20 points from the left we wanted to have the same um y position so basically header pounds um origin dot y and for width let's say 100 points and the header is going to fill the entire section um so let's type header dot bounds dot height let's build and run and see what we get so far okay so much better um basically we have here um 20 points from the left 18 points for the font and the semibold so that we can see it much better and now we get i guess we need to change the color as well so um let me just go ahead and type header dot text label dot um text color yeah that's the one and assign that to white much better much better to be honest okay um one more thing over here let me just um yeah everything seems to be working fine um i believe i just need to um what do i need to do actually um okay so i'm going to go ahead and type text label dot um text and i just need to change that to a header the text label dot text dot lowercase and let me see what we have here okay um i think it looks good um i just wanted to um to capitalize the first letter uh maybe in another video like i'm going to talk a little bit more about extensions and how we can take advantage of the extensions to um to shorten our code make it easier uh to read and actually um yeah i wanted to change the first letter over here to be a capital letter instead of old small okay so um i believe that's it for this tutorial because it's getting too long so just to recap we worked on our navigation bar over here we implemented the scroll effect uh actually we worked as well here to assign a dynamic number of sections it matches the sections that we have over here we have set also the title for each section um yeah i guess that's it for this tutorial in the next one i believe we're going to uh to start working with networks so that we can fetch um some data over the internet and um you know have actually uh posters of movies over here let me just type in here in the search bar dmdb so basically that stands for the movie database and that's the website that we're going to be using for getting all of our um movies and all that kind of stuff that you can see here over the screen so if you haven't signed up already for this website it's really simple you can just create your account and once you're complete with that you can just press over here and go to the settings and over here you can just tap on api and as you can see here you get one of the api keys that we're going to be actually using for introducing ourselves to the website so it's just like hey website hey tmdb we're us so please give us all the information that we need so we just need to copy that and let's go back to xcode over here and in the managers folder we created earlier i'm going to create a new file here it's going to be normal swift files and i'm going to call that api color and over here let's just create a class let's just call that class api caller inside that class i'm going to create a shared instance i'm going to call this shirt and yes we're complete over here so basically we're going to use that shared instance so that we can call all of the methods that we're going to fill in here later but for the sake of simplicity in the future i'm going to create a new struct over here i'm going to call that constants inside that i'm going to um create a new console over here so let's just type static let api key and let me just paste that key that we got earlier from the tmddb website so um let's just go back over here and let's open the documentation for the website itself up to be honest it's well written and you can just go through it and see what you can get with this database so let me just go ahead and type trending movies i'm sorry trending and as you can see here we have a method it's also a get method and it helps us to get the all the trending movies tv and also persons if you want to have like a tab for showing the actors and the actresses and all that kind of stuff you can just tap on try out and as you can see here basically there's an example of how you might be using the website so let me just copy that let me just open a new tab and paste that over here and basically this is just a placeholder that we can delete and instead we're just going to provide the api key that we got earlier so let me just do that and as you can see here our request went successfully and you can see here page one results um maybe there are you're familiar with the spanish uh title which is la casa de papel it's one of my favorite shows if you want to watch it go ahead it's airing right now on netflix so um yes we have all the information that we have over here um for example we have the vote average 7.6 and all the information for the um for the titles that we're looking for so so far so good so let's just go back to xcode and start working here in our api caller i'm going to create a new function that we're going to be using for fetching all of this information so let me just go ahead and type get trending movies so basically this is going to be a function normal function actually and it's also going to have a completion callback function let me just go ahead and type that name completion and it's going to be an escaping function we're just going to return a string for now and that closure should be giving me nothing okay so um for the ease of usage in the future i'm also going to copy the base url from here so let me just go ahead and copy that let's go back to xcode and create a new constant over here static let base url going to paste in here what we've copied before and let's just go back to our method first of all i'm going to create the url itself so um let's just type let sorry guard let url is going to be a url with a string first thing that we need to paste in here um basically it's going to be our base url okay and i believe there's a forward slash over here let's just go back to the um to the developers dot the movie database or website over here and let me just copy all what we can see over here so um yeah i'm going to copy all of that and let me just paste that in here and after the api key which is going to be our first query for the database website i'm going to paste in my api key else return so basically we have our url setup over here so let's just do that and in this course i'm not going to be using any third uh parties for uh network layering as alarm of fire and all that kind of stuff we're going to be making all of the calls ourselves so um let me just create a new task over here so let me just type url session extras shared dot data task i'm going to choose the one with the url request over here let me just create a new url request with my url and for the completion handler i'm going to be using the data i don't need the response right now and of course i need the error in case we have any error calling the functions so over here let me just go ahead and type record let data is equals to data and also i'm going to make sure that the error is equals to nil i also should return of course we're going to refactor this and add more functionality but we just need to um to get everything set up i missed an else over here okay so right now we have our data okay so right now we just have our data so let's just convert our data into adjacent objects so that we can serialize it and actually be able to use it more easily so let me just go ahead and type let results equals to json serialization dot json object with data so i'm going to pass the data that we had in here and also i'm going to allow fragments okay so let's just see what error that we have basically this function throws an error so we must execute that function inside the do catch block so let me just go here print error the localized description and let me just cut that and paste it over here and since it throws an error let me just add here the word keyword try actually and over here i can print the results and before we end that we have created the task and that task is by default is created in the pause status so we just need to type task dot resume okay so our get trending movies function is complete now we are we just need to call that function from our home controller so that we can see the results over here so over here let me just create a new function private find get trending movies and basically this is where we're going to uh call the functions so let me just go ahead and type api color share get trendy movies and as you can see here i don't need the uh return value right now we just need to test if everything is working fine so uh yeah basically that's what we're going to need for now and let me just go ahead to our view the load method and let me just call that function build and run and let's see the results that we have okay so as you can see here our connection to the database has been established successfully and we get our results over here um as you can see here uh we get lots of json objects and we need to make uh start by making our models so that we can serialize all of these so right now we have all of our information over here in the console so let's just go ahead and look at what all of this information really are so as you can see here basically we have an array and that array holds a bunch of objects over here and each of one each one of these objects basically is just a title that we're looking for so as you can see here each title has an attribute for the id itself the media type as you can see here it's a tv show um the name is money heist and as you can see here the original name is la casa de papel we just need to uh to have an model so that we can have the um the movies like we have over here as you can see here we have a movie that has the attribute name of the id media type movie original language english and all that kind of stuff over here it happens to be venom so let me just go ahead to our models folder that we created earlier and let's just create a new file over here i'm going to create a normal swift file and let me type movie so in this file i'm going to create our model that we're going to be using over here so that we can um extract all of the information over here that we need so um basically we're going to create a struct and let me just call that um trending movies response so in this structure we're going to create here an array let's just call that results and be aware that these um it's a good practice actually to match the names of the attributes over here so the first thing that we need to do is just we're going to create this array so let's results is going to be an array of a single movie to be exact so that array is multiple of this single item and you might see here that xcode is complaining because it cannot find the type movie in this scope and basically this is what we're going to be doing right now let's just create a new struct let's call that movie and in here we're going to copy basically um all of the attributes that defines a movie so let's just go here as you can see here that's the start of our object basically that's the end so basically we just need to copy that to our um to our file over here so that we can create the model easily let me just facing here okay so basically what we need basically we need an id maybe we're going to need a media type original language original title so let's just go ahead and get the attributes that we need so um right here we need the id of course and that's going to be a type of hint okay let's media type it's going to be a string and i'm going to make that optional so that if the um if the movie database did not provide us with the media type we know for sure that our app is not going to crash let original name also going to be an optional string let original title string also going to be optional but poster path and as you can see here i'm getting all of these information from here i'm just extracting what i'm really um interested in so i can see here poster path poster path and that's going to be an optional string as well left over view an optional string let vote count and that is going to be an integer let release date also going to be an optional string um maybe i'm interested in the vote average as well so let vote underscore average and i believe that's going to be a double okay so basically we have created the um the model for the response that we're getting over here so um yeah so let's back go back to our api caller over here and we're going to delete this actually all right so we just need to type json decoder we just need an instance of that decode and we're going to be um providing the model that we've just made over here which is basically trending movies response so just pass in that with the data and um okay so basically as you can see here um there is an error we get over here and that's because we forgot basically to conform to the codable protocol and we just need to confirm in here as well so basically the codable protocol is just a type alias for the encoder protocol and the decoder protocol as well so um yeah we can just remove the codable and just since we're only using at the code method but it's just easier for us uh to um not going to be prone to every errors in the future so we just need to conform to the codable protocol let me just go back in here and for now i'm going to um print the results let's build and run this and let's see what do we have okay so yeah we forgot actually to add the try keyword over here let's build and run this one more time and as you can see here we've managed to successfully get the um the array of objects that we have over here okay so as you can see here we have the trending movies response over there and it's also a res uh it has the attribute of results and inside that results array we have all of our um basically um data that we have so um let's just access those there's also dot results and since the results is actually an array i'm going to actually also access the first one and as you can see here we have the id media type original name um yeah basically we have all the information that we need over here so let me just for example um print the um original name for the first element that we get in this and as you can see here yeah it's like casa or papel okay so so let's just go ahead and modify our function a little bit so basically we're just returning a string so let me just go ahead over here first and create an enum i'm going to call that api error and that's going to conform to error i'm going to create my own error which is going to be failed to get data and over here i'm just going to modify that so basically we need to return the results so basically like result and as you can see here uh we're going to be returning um an array of movies so let me just go ahead and type array movie and if not we're just going to return an error and over here i'm going to um add the com call the completion as you can see here um i'm just going to provide here a result so a success which is going to take an array of movies so results dot results let's just go back in here to our home view controller and as you can see here right now i'm going to call that one more time api caller.share.gettrendingmovies as you can see here actually i'm getting results so results i'm going to switch on that results so basically results okay so in case of success i'm going to get an array of movies different movies and in the case of failure i'm going to get an error over here and let me just print the error let's go back to our api caller as you can see here if there's something wrong that happened in the do block i can just before brand the localized description i can just delete that completion not failure and i can pass in my error and i believe um there's something wrong that needs to be done over here and um okay yeah that's the one we just need to wrap that inside the parentheses over here and let's build and run that one more time so that we make sure everything is working and yes we have everything is working right now so that's it for this tutorial just to recap really quick in this tutorial we just managed to establish our connection with the database we fetched all the information that we needed and also we serialized those information back to a json object and now we have the models uh the movie model right here and now we're ready to pass all of these information back to our view controller let me just go to our resources folder let me create a new file it's going to be a normal switch file i'm going to call that extensions and over here let me extend the um the string data type let me create a new function over here it's going to be called capitalize first letter and that function is going to return a string and inside that function i just need to type in for here return self dot prefix i'm going to choose the first letter and i'm going to change that to an upper case and then i'm going to um add the self dot lowercase dot drop first so as you can see here i'm only choosing the first letter converting that to an uppercase and the rest is going to be a lowercase and i'm going to drop the first letter so that we don't have multiple um multiple letter as you can see here so let me just go back to our home view controller and before i use that function i just need to rearrange my array over here um i noticed that in the real app um the trending tv comes after the trending movies so let's just do that and let me fix that by adding that comma okay so let me just go down over here uh where we set the text for each section header uh instead of typing the lower case i'm going to capitalize the first letter and over here let me just build and run this and let me see what we got so far okay so everything seems to be working as i expected as you can see here the first letter of each section is capitalized so we utilize the concept of extensions so that we avoid duplicating code over here and just adding code that is not relevant to the controller itself we just need to handle that in its own extensions we don't need to capitalize the first ladder over here in our home view controller we don't want to handle this over here in our home controller it's not relevant you know okay so in the last part we just need to fix something regarding the api that we've called to fetch the uh the movies over here basically these movies are going to be uh feed inside this controller view and as you can see here this i'm sorry this collection view and this collection of you guys you might guess it's all it should only um carry the movies but let me just go ahead uh for the api as you can see here we're calling or fetching the trendings for all kinds of data so instead of all i'm going to change that to movie let me just build and run that one more time as you can see here we get the same results plus it is filtered we're only retrieving the movies instead of having both movies and tv at the same call okay so we got the trending movies so right now let me just go ahead and get the trending tvs and basically it's going to be very similar to this so instead of using all or movie we're just going to limit that to use the tv itself okay so let me just go ahead and open the api caller yes we've already opened that and let me just go ahead let me just get more room over here let me create a new function get trending tvs okay we're going to have a completion handler and it's going to be escaping as well we can just you know we can copy that from over here okay let me paste that over here where instead of returning um an array of tvs i'm sorry movies i'm going to return an array of a tv okay and let me see the only error we get so far is that because we don't have tv model yet but just to get things started really quickly i'm going to return the string for now and as you can see here xcode is no longer complaining about this so let me just go ahead and initialize the url that we were going to be working with so guard left url is going to be url string i'm going to pass over here um the base url okay slash three slash trending slash tv slash day okay we're going to be passing the api key over here so basically it's the same thing um and you know what we can just copy that from here just not to be prone to area any errors um let me pass that and instead of moving over here i'm going to pass on tv and they'll return so i'll just create a new task url session dot shared data task i'm going to do that with a request url request okay that takes a url which is basically the url that we've just initialized up here and for the um the completion handler we're gonna need the data i don't need the url response i just need the error and basically it's the same thing over over here so guard let data is equals to data and also i'm going to check or make sure actually that the error is equal to nil and after that i'm gonna do do let results equals try um let me just go ahead and see jason serialization dot um let me just see here json object yes data allow f fragments allowed let me just go ahead and print the results over here and after that i'm gonna catch if there's any errors so let me just go ahead print error dot localize description what else do we need to do is just we're gonna resume our task so that we can see the result of that so let me just go ahead and copy that get trending tvs let me just go ahead to our home view controller and instead of calling the get trending movies function going to um let me see what we can do change that name for for a second get or fetch data because this is just gonna be a test function let me just go over here fetch data and we can um comment that away because it's already working we just need to test the other one so api caller dot share dot get trending tvs and for the results i'm not going to do anything right now actually because we're already printing that in the other api caller file so let me just go ahead um and build and run this and let me see if that is working so um we have an error let me see what do we have okay um can i call a nonfunction type oh okay just um an extra parentheses so let me just build and run that and let me see and as you can see here we have the response from the server and as you can see here each and every one of them has a media type of tv so that is done so we just need to create a new model over here to handle the tv response so um let me just do that so it's going to be a new file over here let me create a new swift file i'm gonna call that tv and let's have a look so um as you can see here we have a tv results which is basically an array that holds um basically each and every um object over here so let's just do that structure i'm going to make that with the same basically with the same format over here so instead of trending movie response i'm going to call that trending tv response and let's conform to the codable protocol as well and as you can see here that has a results um let me just yeah and make sure to get the um the spelling correctly that is going to be an array of tv and over here let me just create a new structure i'm gonna call that tv also i'm going to confirm the to the codable protocol and let me see what do i have for here okay so um i believe basically it's the same um yeah i believe it's the same as movie right here um i'm gonna copy that for now and to be honest it's not the best practice over here because there is a duplication of code but uh i'm not sure that the um the database or the server itself is going to have the same um the same thing for the tvs and the movies in the upcoming future so i'm just you know because i'm not i don't have any control over the server over here so i'm just going to um basically get that copied and i believe um that's okay let me just go ahead back to my api caller uh instead of that let me just type here tv and instead of using the normal json serialization let me just go ahead and convert that actually to um the model itself that we've returned so json decoder let me have an instance of that um what was it um i believe it's the same one over here so yeah it's the code and we're going to provide the um the response that we're going to get so tv or trending tv response dot self okay and the other one is going to be um using the data that we have returned here let me just print the results and crossing fingers i'm going to wish that's going to work on the first try and yes it's working actually so yeah basically this is going to be the trending tv uh we have the trending movies over here let me just open um here the simulator so let me just go ahead and see okay so we need the popular the upcoming movies and the top rated as well and this is where we're going to open tmdb one more time so let me just go ahead and we're going to go through the api or the documentation of the website itself so let me just go ahead settings api developers.moviedatabase.org and yeah we can search over here so let's say for example upcoming and yeah there's an already method over here so let's see um i'm going to say try out and basically this is the um the url that we're going to use so let me just go ahead and copy that go back to xcode api caller let me just paste that as a comment over here and let me make a new function get up coming and i'm going to call that upcoming or let me see here basically yeah it's going to be an upcoming movie so upcoming movies we're here we're going to use the same um signature of the function okay so let me just paste that over here we're going to return an array of movie okay so let me just go ahead and create the url for this as well so guard that url is gonna be equals to url and it's going to be from string and let me just um paste that over here so let's just cut that i'm not going to need that anymore okay so instead of having this okay i'm going to remove that let me just add the base url from the constants so base url movie upcoming api key we're just going to um substitute for that as well so constants api key and i believe that says so else return i'm sorry let me just put that in the curly braces return so we have our url and now let's have the data task as well so let task is going to be a url session dot shared data task url request is going to take a url which is basically done over here and for the compilation handler as well same stuff and as you can see here just a type of pattern it's not that hard to get um comfortable with that so um let's just guard let data is equals to data and over here we just want to make sure that the error as well is equals to nil okay let me just do i do catch block print error dot localize description and over here let me just select results it's going to be equal to try json um let's just go ahead for here and type json decoder decode and i'm going to return the um trending movies i believe so um let me just try if that works because i believe it's going to be the same model we're going to use that from data and over here let me just print results and let me just go ahead to my home view controller um this works as well so let me just comment that for now okay and over here let me just type api caller.share. get upcoming movies for the result right now i just don't need it and let me just build and run let me see here if there is any response for the upcoming movies okay i'm not seeing anything right now so yeah and that's because we've created the task and we forgot to change that to resume so task.resume let me just build and run c okay so yeah we actually can use the same model because it's not changed it's the same across all the um the movies that's being retrieved from the database as you can see here so we have the trending movies let me just open that one more time so we have the trending movies trending tvs upcoming movies top rated and popular so let me just go ahead and do the same thing over here so popular get popular um okay so it's going to be basically the same so we're just going to do that really quick and let's just go ahead one more time over here get upcoming movies is working fine let me just test the other one api caller share dot get popular and we don't need to return anything right now okay so let's build and run and let me see and before i do that i already again forgot to resume the task and let me just build and run and let me see okay so um yeah i'm sorry guard let's guard let yeah that's going to work and we forgot to add the try keyword over here and yeah everything is working fine right now so basically we just need to set up one last um one last api call which is basically the top rated so let me just go ahead and do that really quick and yeah as you can see everything is set up right now so basically that's it for this tutorial we've completed our api calls and in the next tutorial we're going to extract the um the information that we just need over here and start adding uh pictures and posters and have something really working on our app okay so before we move ahead and use the information that we got from the database um i just gave it a thought and i thought this is just the exact same model for both the tv and the movie so we don't need to um to have this duplicated over here so we can just go ahead and delete the tv model move to trash and that i'm going to rename that to maybe um trending title response and that's going to hold an array of titles and over here i just need to change that to title as well okay and we can rename the file if you want to um let me just go ahead and rename that so title all right and just to fix the error that xcode is going to throw at us in the api caller we're going to change all of this from movie to title and over here trending title response okay and the tv as well it's going to be a title basically um it's just removing the old name passing the new one it's really simple okay just a second please i believe that's the last one for the top rated and we can just build and run to see that if everything is working and indeed yes everything is working and um yeah one last thing that we need to do um we have uh made the um the enumerator or basically our enum for the api error over here and we haven't used that already so instead of passing a normal error i'm just going to pass my api error and fail to get data i'm going to copy that actually and instead of just printing the error i'm going to pass in a failure so that we can handle that from our home view controller so instead of each um print statement inside the catch block we can um just remove that and instead add the completion with failure api fill it to get the data okay so what we need to do now is just go ahead to the views folder and create a new file this is going to be a coco touch class we're going to um create a new collection view cell let me just call that title collection view cell and that is going to be the cell that is responsible for um handling everything inside the collection view instead of the default uh collection view set that we get with the collection view so let me just go ahead and press next create um yeah it's just an old um an old file you're not going to see that so right in here i'm just going to type static select identifier and let me just copy the name of the class over here and we're just going to need to initialize that with the normal um frame and over here let me pass also the required initializer so that we avoid um adding and errors and yes everything is set up regarding the cell right now the only thing that we need is that we just need an image view so that we can pass the poster in it so right over here let me just try private let's poster image view and that is going to be a type ui image view let me just use the anonymous closure pattern select image view is going to be ui image queue return image review and over here we just need to say image view dot content mode um scale aspect fill okay so regardless the size or the aspect ratio of the poster that we get we make sure that we fill the entire cell that we have here in the collection view and over here i just need to um add this so content view don't add some view poster image view and i'm not going to use actually the old layout for this it's just simple as laying the frame of the view as the whole or the entirety of the content view so let me just go ahead and say layout sub views super dot layout sub views make sure to include make sure to include that line and also add um poster image view the frames gonna be equal content you don't bounce okay and that's it regarding the um the collection view cell um yeah one more thing that we need to add actually a thirdparty library that is going to help us cache the retrieved poster or the image that we get from the internet so let me just go ahead and open safari and let me introduce you to another thirdparty um package that we're going to use in our project which is basically swift sd web image and you can go over here into the github page uh we're going to use the swift package manager so as you can see here the package.swift file is included so that means that we can use that without coco touch so let me just go ahead and copy the uh the link for this github repository let me just go ahead to xcode file add packages and as you can see here since i've added this package already it it is cached inside the swift package manager but for your case you're just going to need to paste that over here and as you can see here um it got you the sd web image already so you can tap add package and xcode is just going to fetch the required code from the github repository is just not going to take much time as you can see here all right so um xcode finished getting the uh the code from the github repositories so just one thing that we need to do before adding the package we just need to make sure that we check both the sd web image and the sd web image map kit and then add that package and as you can see here inside the targets you see the uh netflix clone um sd web image so that means that those packages are targeted for our uh project over here so let me just go back to my title collection view cell let me import the sd loop image and inside here um each time we dq a cell in our collection view so we just need to have an update function so that we can update the poster for each cell with the models that we have in the home view controller so let me just go ahead and define a public function this time so public function configure web model and for now we're just gonna pass a string for now all right so basically this model string this model of data type string for now is just going to hold the url for the poster that we're looking for so basically we're just gonna have to type poster dot sd set image and we're going to set that image with a url so let me just go ahead and find my url it's going to be equal to url from string let me for now pass the model okay i believe this is going to be a guard url else return because it's just going to give us an optional url and over here i'm going to pass the url and for the completion i just need to pass nil okay so we are set up over here so let me just go back to my home view controller and in this part of uh tutorial we're going to be viewing the view models right now because we don't actually need to pass the entirety of the um the title model we just need maybe the uh the poster path over here we don't need the id the media type or anything from here right now let me just go ahead back to my home view controller and let me see here the apis that we have so as you can see here we have five api calls the last one is the get upgraded in the upcoming movies and basically those are the api calls that we're going to be using to fetch the data from the database to feed the table view cells that we have okay so basically this is not how we're going to be fetching actually the data from the api we want every single section to handle its own calls so let me just go ahead and delete the fetch api data from here and also let me delete the call for the method and one last time i just want to go to the api caller and i want to make sure that i'm passing the results back uh instead of just printing them so let me just copy the completion handler over here and let me pass this in every single api call so we're done with the api caller right now so let me just go back to my home view controller let me just go on the top of the um the home view controller class and let me define a new in them i'm going to call that sections and that is going to have a real value type of int i'm going to define my cases over here so basically trending movies and that's going to be equal to 0 case trending tv that's going to be equal to one basically um i believe it was the uh popular and that's going to be equal to case upcoming three and the last one is going to be top rated and that is going to be equal to four so basically those are the four cases or the four sections that we're going to have over here okay so um okay so since we've um created um a title collection over here that is our um cell let me just go back to the um to the collection view actually that is going to be handling each cell over here and instead of just registering a ui collectionview.self over here i just need to delete that and instead i'm going to pass in the title collection view cell that i i have created actually instead of the identifier i can just access this by the name of the class the identifier so right now i have the title collection view cell over here all right and instead of just dequeuing um a normal cell let me just delete that and make that from the beginning so guard let cell's going to be equal to collection view cell dot dq with reusable identifier which is basically title collection view cell dot identifier and over here i'm just going to pass the index pass as title collection view cell else we're just gonna return a normal collection view cell over here and basically i'm going to return the cell and as you can see here basically we have access to the configure method that we made earlier okay so um basically um something else that we need to do here we're just gonna have to um initialize a private var titles that is going to be an array that is going to hold our titles and i'm going to initialize that array actually to be an empty array for now all right okay so and then i'm going to make a new configure with function over here just to uh feed the titles that we get for each section in this array so let me just go here type configure web titles and that is going to be an array of title right and inside that we're just going to reference the titles array that we have and basically pass in the titles that we get for each section all right so let me just go back to my home view controller over here let me just scroll down um yes this is the one so basically right now we have an access to a new function which is basically the titles and we are going to pass in the um the titles that we get over here but we're just going to switch first on this section so let me just type switch index path dot section and right here we're going to handle the cases for each section so let me just type the cases that we have case sections dot trending movies case sections dot trending tv case sections popular case sections dot upcoming and the last one sec case sections dot top rated so basically those are the four cases that we're going to handle so in each case over here i just need to um oh basically it's not just trending movies so basically we need the role value which of which we have assigned when we uh actually um initialize our enumerator over there so row value dot row value value over here and here as well so basically let's just handle the first case that we have so for the first case that we have we just need to make the api call so api color shared get trending movies and i just need the result over here and on the result as well i'm going to switch one more time so switch result case success i'm just going to receive the titles and over here i just wanna pass the results that we have to myself so i configure cells and that configure method expects to receive an array of titles so basically array over here and over here i'm just going to handle the other case which is basically going to be the failure so let error and over here for now i'm just going to print the error localized description all right so basically we have uh handled the first one so let me handle the second one over here okay api caller.share.com result okay just a second i'm going to switch one more time on the result case success let titles i'm just going to pass it with the confederate method all right any other case is going to be failure same thing ever and for now i'm going to print the error right and the other one is going to be the same api color share dot popular and the result i'm going to switch on the result for the get popular case success i'm going to receive the titles i'm going to pass the titles over here any other case i believe you know right now what we're going to be doing let error okay print the error localized description we have two more to go so let's just api caller shared in the upcoming i'm going to get the result i'm going to switch on the result as you can see here okay so case success like titles i'm going to pass that to with the configure method as well case failure that error all right so just print the error and one last time we're going to do that for the top rated so let me just go ahead and okay api caller.share.operated i'm going to receive a result let me switch on the result one last time okay success select titles i'm going to pass the titles for the cell all right one more to go case failure that error and let me just print the error over here all right and we just need to um to see what we have here basically we have an error that xcode is throwing at us because the switch uh block must be an exhaustive so let me just go ahead and fix that real quick all right and let me see over here so basically it adds a default uh case um so let me just go ahead and just return what um i believe is going to be a table view cell so yeah so return ui table view cell and right now we can just build and let me see if we get any error build succeeded so as you can see here it's really really clean way look at that um each section is handling its own calls all right so um let me just go ahead and open the configure method over here which is basically for the collection table view uh cell and as you can see here uh we are going to um set the titles for the um for the collection view cell array over here let me just go back or scroll down to the collection view cell that's going to handle each poster for each movie and i'm going to return actually the titles.count all right so um instead of just passing the empty string over here i'm going to pass the titles i'm going to say index path the row as you can see here basically i have access to each and every single title over here so before now let me just add the poster path over here and let me just open the configure method over here one more time and instead of um passing the url over here i just need to see the url first so let me just print the model that we have over here so um let me just build and run this and let me see what we get okay we have an error and that is going to be um yeah that is an optional string for now so um let me just guard let right poster or let me just say um model is going to be equal to titles index path dot row the poster path which is basically the um the reason i'm having an error over here because the poster path if you remember is just an optional string all right so let me just type else and over here i'm going just to return ui collection view cell for now just to remove the error and over here instead of passing this i'm just going to pass in the model so before i build and run this i just need first to type this so dispatch q dot main dot async and i'm going to explain what i'm doing right now in just a second so let me just my first week self in and inside this function i'm going to reference my collection view self.collectionview.reloaddata so basically um we have retrieved the titles um in earlier uh within the uh the home view controller and then we updated the title array that we have over here but since that array has been updated in an async function we need to reload the data for the collection view inside the main thread and this is why i'm typing here dispatchqueue.main.async so let me just build and run this and let me see what we have all right so basically as you can see here since the trending movies is the only row on the screen right now so basically i have um i have gotten like one two maybe those are seven uh images from the data and as i scroll here as you can see i'm actually retrieving more images and when i'm scrolling over here for each section as well as you can see here basically we are getting the images for each section and each title inside each section as you can see over here so let me just go really quick to the movie database api let me just open the uh developers web page over here it's really easy so let me just type image let me say over here images and as you can see here there's a pattern so basically this is the result that we have retrieved from the uh data api so basically we just need to copy the entire thing over here and basically we are just going to feed the data that we've got instead of the um the hard coded value over here so i just go back to my title view controller and here let me just create a new url so guard let urls come to via url with a string and that url is basically going to be this and i'm going to pass in the model that i have over here and else i'm just going to return so basically once we have the api ready we can use that to set the um the image url that we have over here and for the completion let me just type nil and let me build and run this so as you can see here basically we have all the image for each title and i believe this is the moment that you guys have been waiting for since the beginning of this series as you can see here for each section i have the trending movies as you can see here it's actually updated and as you can see here spiderman uh basically this is the movie that has been trending for like a week over now um trending tvs as you can see here money highs the witcher and all that kind of stuff so let's go to the upcoming view controller over here and first thing that we need to do is just to set the title so let me just type title i'm going to send that to upcoming and over here i'm just going to um type navigation controller navigation bar prefers large titles and i'm going to send that to true navigation controller dot navigation item dot large title display mode and i'm going to set that to always as well so right now let me just create a new table i'm going to call that upcoming table so privately upcoming table let me just type that correctly that's going to be a ui table view i'm going to set that with the anonymous closure we use that so many times at this point in this year so let me just type table i'm going to say ui table view i'm going to register a normal cell for now so register ui table view cell itself i'm going to set the identifier to be um cell and don't forget to return that table i'm going to add that table to my view so you add some view upcoming table i'm going to set the delegate for the uh for the table view up here as well so upcoming table delegate is going to be equal to self upcoming data source is going to be called itself as well i'm going to extend the controller so extension upcoming view controller i'm going to set that ui table view delegate and the upcoming for the data source as well so ui table view data source i'm going to implement the two functions over here so basically return 10 for now and for this i'm going to return the delegate function which is the cell for row so let's just create a new cell so let's sell it's going to be able to table view i'm not that one so table view dot dq with identifier and four so let me just type here cell index for now i'm just going to say text label the text i'm going to send that for test um right now and let me just go ahead and return myself so that should be working so right now um i'm going to hit run and let me see what i guess so far okay so as you can see here we have the home view controller nothing have has changed let me just go to the coming soon and as you can see here i have my upcoming title and when i scroll um there's nothing to be scrolled at right now because we haven't played the table yet so let me just go ahead and implement the function so did lay some view i'm going to say super the view that layout some view upcoming table let me just say that upcoming table.frame that is going to be equals to view.bounce let me hit one one more time all right so as you can see here uh we have the title we have our tail cells ready so right now let me just reuse the function that we've used earlier in the upcoming or i'm sorry in the home view controller so let me just create a new function over here so private func fetch up coming and i'm going to implement that function so um i'm going to call the api caller the shared get upcoming movies and i'm going to switch on the results so switch result and i'm going to type in here case success let me just retrieve those titles okay and in here i'm going to assign that to a local variable that i'm going to call titles as well so let me just go up in here private var titles that is going to be an array of title i'm going to initialize that array so that is going to be empty for now all right and over here just to avoid any memory leaks so i'm just going to type weak self and over here i'm just going to reference that back so basically self dot titles that is going to be titles and over here as well i'm just going to reload the data so self dot upcoming table dot reload data and i'm just going to put that inside an async function so that we make sure that it's going to be executed on the main thread so let me just type this patchqueue.main.async and i'm going to add that line of code in here so that we don't get any errors let me just go back in here at the number of rows i'm going just to return titles.count and over here i'm just going to set that one more time over here let me just type titles um let me just see here yeah titles okay i'm going to access the index path of row and as you can see here um what do we have okay something's wrong oh i'm sorry this is um we just misspelled the word so we have it right now so titles let me just fix that that's well so titles and let me just go ahead one more time and as you can see here we have the original name and since this is an optional we can say default value which is basically going to be also titles index path row and i'm going just going to as access the original title and if neither of those available i'm just going so i'm going to assign that to unknown and let's hope that we don't actually reach to that point let me fix the error up here because i have a misspelled word so return titles dot count and i believe everything is done right here oh we have to uh basically um handle the other case which is going to be the failure let me just retrieve the error over here it's really easy tutorial to be honest i'm going to just print the error not localized description all right build and run and let me see what do i get so far and as you can see here i get nothing y because actually we have created the function but we forgot to call the function itself so let me just paste in that here let me call the function and let me hit build and run and let me see what do i get so far all right so basically i have a list over here um it has all the names for each title and basically the thing that we need to do right now is just we need to create a custom cell so that we preview the title we want to preview the play button and also we wanted to preview the poster for the cell so um let me just go back to my views let me just create a new file that is going to be a coco touch class um i'm going to create actually a ui table view cell um let me call that maybe title table view cell all right and for the language i'm just going to make sure that it's going to be created with swift all right so let me create this so right now i have an empty cell so let me just um type the static static let identifier and that is going to be the name of the class that we have so title table view cell let me just paste in that in here let me initialize that um with the normal instructor um constructor i'm sorry so i'm going to pass the style and the reusable identifier as well and over here i'm just going to um add the other required initializer i'm going to say fail error and over here i'm just going to implement the views that i going to create so the first thing i'm going to do is just going to have a ui image so that it holds the poster for the title that we retrieved from the server so let me just type private let title poster ui image view ui image view which is going to be the type i'm going to use the same anonymous closure so let image view there's going to be an image view all right so imageview.content mode i'm going to set that to um maybe um yeah scale aspect fit image view um yeah i'm going to return the image view for now okay um basically we need to add this for the cells so let me type content um view dot add some view i'm going to add the title poster ui image view all right next thing that we need is just a label that it's going to hold the title name so let me just type private let title label um not titles it's only title label and that is going to be a type of ui label all right so let label it's going to be equal to ui label i'm going to um return the label for now and if we need to do anything we're going to add that later so let me just um yeah i'm going to basically use the content auto layout so i'm going to activate that so label dot um translates auto resizing masking into constraints i'm going to set that to false i'm going to use that as well with the image view so instead of a label i'm going to type image view i'm going to add the label to my content view as well so content view dot add some view um type the label um what do i need um next um i believe is it's going to be a button so let me just type in here private let play title button this is going to be a ui button i'm going to initialize that so that button is going to be ui to ui button i'm going to return that button as well but i'm going to activate the auto layout attribute so basically button dot translate auto resizing mask it's false um i'm going to run that or call that to be exact and also i'm going to add that to my content view add some view i'm going to add my button over here um all right so basically make a new function over here i'm going to call that apply constraints all right so let me just go ahead and create the function so private fund create constraints and the first constraint that i'm going to have is basically um the poster uh and the title label and also the button so let me just type in here let's i'm going to copy the name of this variable over here i'm going to add constraints as well so constraints that's going to be an array let me copy that one paste that one more time so basically i'm going to constrain the leading anchor um to be constrained with the content view dot leading anchor as well i'm going to set the top anchor to be constrained with the um i believe it's going to be with the content view as well which is going to be the top anchor i'm just going to add some margin at top maybe it's going to be 15 points all right um titles um poster image view dot bottom anchor the constrain also to the content view dot bottom anchor i'm just going to reverse that to be negative 15. and for the width so let me just choose maybe 100 point and over here i'm just going to activate this constraints okay and also i'm going to create a create i'm sorry i forgot the separator over here i'm just going to create a public function i'm going to call that configure with model i'm just going to pass the view model over here that was going there's going actually to hold the poster the label and that's it i guess so basically let's type title i'm sorry title view model we don't have this yet um so basically um let's just choose the imageview that we have in sd set image with the url and over here i'm just going to add this url so let url i'm sorry guardlet or that url is going to be a url i'm going to call that with a string over here so basically i'm going to pass model dot poster url all right so else return okay and i'm going to pass the url over here for the completion i'm going to pass nil and what else do we need to do basically we just need to set the title as well so basically title label dot text that is going to be our from our model um dot um tile name okay um i'm just going to change the pascal this okay so title name let me just go to my view model over here let me create a new file this is going to be a swift file and let me just type title view model all right that is going to be a structure title view model let me just type let title name that's going to be a string and let poster url that's going to be a string as well all right so um i guess that's it for now so let me just make sure that we have everything set up over here the poster path is a string as well so we can go back to my title table view this that this error is going to go away right now so basically we have our um sales setup let's just complete adding the constraints so let um i'm going to copy that because it's um it's title label it's a good practice actually to name to have a consistent naming convention so title label um constrains all right that's going to be an equal to an array of constraints so basically title label dot leading anchor the constraints i'm going to add that next to the poster so basically poster title poster image view the trailing anchor um and that is going to be next to the poster by maybe 20 points all right so title label dot um center y i'm going to constrain that with the cell itself so basically content view dot center y anchor i believe that's it for the um for the constraints for the labels so let me just activate this constraints as well so ns layout activate title label constraints and okay so let me just go back to my upcoming view controller instead of just registering a normal cell let me just type title table view cell i'm going to access the identifier so title table view cell.identifier and over here i'm just going to dequeue this cell so let me just type guard let's cell is going to be able to table view the tq for the identifier title table view cell.identifier for the index path as title table view cell else i'm going just to return a normal cell for now ui table view cell all right and over here i'm just going to access that so cell as you can see here we have the um the configure the configure expects to have a title view model so let me just give that to the um to the function so it expects the title name and the title poster and we can easily access that using the titles array that we have index path the row and over here you can see um basically we can actually define that over here so title is going to be um titles dot index path dot row and over here i'm just going to add the title dot um original title maybe if it's not there so title dot original name and for the poster url i'm just going to access the title as well and i believe it's here under the path dot i'm sorry the poster path and actually i'm going to return that cell and before i hit run i just discovered that we are only adding the um the path after the the url so i'm going to copy that from the view that we made earlier at the home view controller but that yeah that needs to be unwrapped first um but for now we can just um add or fix that with the normal over here so basically we just need to add the default value as well so unknown title name so let me just go back to my collection table view cell i believe um basically let me just yeah basically i'm going to copy that um line over here right and let me just go back to my title table let me just go to the um to the line that i'm going to set the url so um let me just paste that in here um copy this model the poster url instead i'm going to add this model.poster url let me just delete that i believe we have every everything set up over here let me just hit run and let me see what do i get i believe that there is an error let me just see what is the error over here uh yeah basically we just need to add a default value which is going to be an empty string let me type build and run coming soon and yeah there's something wrong with the with the cell but clearly we see here the um the title the poster and basically we just need to fix the height of the row um so let me just type in here um row height or height for row let's just return maybe um 90. let me just build and run one more time let me see what do i get coming soon all right so we're going we're getting somewhere so i believe i'm just going to modify or just play around with the numbers over here so um yeah i believe that is okay um all right so we can actually increase that maybe to 140. let me see what do i get at the end so let me just go back in here um yeah it's getting better and better you can just play around with this let me just add the button over here um i've made the button i believe so let me just make sure that i have the cell over here so title table view cell i have the button um let me just go and set the image and this is going to be a system image i believe it's going to be play the circle play the circle and this is going to be for normal right now adding this so let me just add the constraints for that as well so let me just copy the name let me just over here create new constraints for that button okay and i'm going to set the um the trailing anchor to be exact so the trailing anchor is going to be set from the constraint actually with the training anchor of the sale itself so i'm just content view dot railing anchor and i'm going to add a constant which is going to be minus 20. i'm going to add the constraints to fix it at the middle of the cell as well so center y anchor is going to be constrained with the content view the center y anchor as well i'm just going to activate this so activate play title button um constraints so let me just hit build and run and let me see um all right we are go we're getting much closer to the um to the finished product um let me just go back in here let me just button the tint color that is going to be white and actually i'm going to change the size of the image so let me just get the image over here so let me just copy that all right so i have the image and over here i'm just going to say um with configuration ui image okay dot symbol configuration i believe um yeah and over here i can just change the point size maybe um 40 and let me pass the image over here let me build and run and let me see what do i get okay um yeah basically that's it so i'm just going to play around with the um with the size of the button as well over here so um yeah basically that's it just go to the poster and type image view dot clips to the bounds and set that to true and that will prevent each poster from overflowing the container and also we can just decrease the padding just a little bit maybe to 10 instead of 15 and then let me test that to see if that is working and yes everything is fixed right now you can see here that each poster has like 10 points up and bottom so basically everything is fixed regarding the upcoming tab and now let's just go ahead and move to the top search so basically the top search is going to have the same functionality that the upcoming tab has so first of all let me just copy those three lines over here all right and let me paste that over here and we can just change that to search let me hit build and run to see if it's working and as you can see here all right so the next thing that we need to do right now is just we want to have a table view so that we can display maybe a discover tab for the user before um before the user enters a query to search for so maybe he want to discover what is trending right now uh or what he might be interested at so let me just go ahead and define my table um basically we can copy the same table over here i just wanted to make this really quick so let's just copy that go back in here and let's just paste that maybe i'm gonna call that this cover table all right and that is going to have the same title uh table view cell which is basically why i've made it like a generic one so that we can reuse it in so many places as you can see here once in the upcoming tab and the the other in the search review all right so over here um let me just clear that space um and let me add that as a sub view so discover table and over here i'm going to set the layout so lay out so view that layouts of views super view the layouts of views and i'm going to give that a frame with the bounce of the view itself so view the bounce right and also over here just make sure to you know set the delegate and the data source for the table view to be that controller so that we can implement all the functions that we're gonna use to pass the data and also pass the number of rows so discovertable.delegate is going to be equal to self discover table the data source also going to be equal to self all right let's just go down there extension search view controller and let me type ui table view um data source ui table view delegate all right just a second ui table right so first thing that we need to implement is the number of rows for now let me just return 10 and sell for row also maybe i'm gonna be returning a cell right now so we have the sale so let's just do guard let's sell going to be equal to table view dq cell with identifier um i believe it's title table view cell dot identifier for index path as title table view cell and else we're going to return a normal ui to table view cell all right and over here let me just return the cell for now because actually we don't have data yet okay so let me just go really quick to um the movie database um maybe we can find the method that we're looking for i'm gonna maybe we can find the method that we're looking for i believe it's called discover um so let me just go to the website and type in here maybe discover yeah movie discover over here and we can just scroll down until we see um try it out you can just add the uh the attributes that you want to search the or to query the database with let's say for example that you're looking for specific region uh specific language and also you can just put your api key over here and test that out and it's gonna give you the results so basically let me just copy that out all right and let me go back to my api caller we're going to add a new function over here all right so let me just type func get this movies all right and let me just copy that signature over here just i'm gonna make that really quick and also basically we're gonna implement the same functionality over here so let me just do that let's just copy that um basically we just need to write so let me just go ahead and paste the url over here all right so um basically we're gonna have the same constant base url and we want to pass our api key instead of the top rated i'm just going to add the same stuff over here so let me just go ahead and delete that and make sure that i have the same constant base url all right so i'm going to copy all that and paste that in here just a second all right so let me just delete that i don't need it anymore and instead of the api key over here i can just pass the one i have so let me just do that constants dot api key and as you can see here everything's set up we can use the uh discover movies function all right it looks clean all right so let me just go back to my upcoming i'm sorry it's the the search view controller and let me just define a new variable over here so private var titles and we just cop we can just copy that from here all right and then we can um use the same function so fetch discover movies let's just define that function over here so private func i'm going to basically um call the api caller the shared dot get discover movies and for the result i'm going to switch on that switch result all right switch result case success let me get those titles and let me assign those titles over here to the titles array that we have so um titles um okay it's okay we're gonna do this we self so self the titles is gonna be able to titles and over here we just need to set that on the main thread as well so let me just do dispatch queue.main.async and over here i'm just going to reference my table so discover table dot reload data and over here i'm just going to handle the other case really quick so failure select error is going to be just simple print statement all right so now we have everything set up over here and let me just go ahead and use that um variable that we made and get the count for it so that we have the number of rows that we're going to be using we can also set the cell the configure i believe we have that the title um the title view model we're going to define that over here so let model is going to be equal to title view model and the title name is going to be um alright so we can pass that in here and here let me just get the title that title it's going to be equal to titles right index path the row and now we have the title so basically title dot maybe the title name if that is not available let me just pass in here the title dot the original name again no no um the title original title yes and if it's not available let me just pass unknown name and over here let me just pass in the poster path all right so everything's set up over here and yeah let me just add um and default empty string over here because that is going to be an optional and before we hit build and run um let me just fix something really quick before we get the same error that we had before with the um with this with the upcoming view controller basically which is the height for row and let's just return the same number that we returned at the upcoming view controller which is 140 so let me just return 140 let me just hit build and run and let me see the results that we get so far all right so the home controller working fine the upcoming tab is also working fine and the search tab is also working fine and first of all i'm just going to create a new file this is going to be a new view controller of type coco touch class and let me call that search results and basically that is going to be the controller responsible for viewing the data that we're going to retrieve from the database server once we completed our query so let me just um delete all of that we're not going to need that and also i'm just going to give that a new background color so that we can provide that is working so let me just choose maybe system green and as you can see here basically uh we are having multiple files so i just wanted to rearrange my file hierarchy so let me just go ahead and create a new group i'm going to call that core and i'm just going to add the home view controller upcoming view controller the search view and the main tab bar as well as the downloads view controller inside that core all right i'm going to create also a new group so let me just call that maybe general and inside that i'm just going to add the new file that i've just created over here basically the search results view controller all right so um let me just go back to core search view controller and over here i'm just going to start working on my search bar so let me just type private let search controller that is going to be of a type ui search controller with the same method which is basically the anonymous closure i'm just going to create a new um controller over here so basically ui search controller and as you can see here we can specify the search result controller basically let's just type in here search results view controller and i'm just going to get that and give that actually a new instance let me just go ahead and type controller basically search bar dot placeholder and here we can specify any message that we want to prompt the user so let me just type something like search for a movie or a tv show all right um maybe we can change that to be a capital all right and also i'm just going to add this um line over here so controller the search bar search bar style and i'm just going to choose minimal and as you can see here basically you can just read what is the minimal so basically the search bar has no background whatsoever and the search field is translucent so i'm just going to choose that and i'm going to return the controller over here let me just go back to my view did load and i'm just going to add that to my view so basically let me just type navigation item dot search controller and i'm just going to pass that search controller that we've just made all right build and run and let me see what we get so far so um as you can see here we can go to the top search and basically you can see here the search bar is ready um search for a movie or a tv show basically this is the placeholder that we specified earlier and as you can see here once i begin my scrolling it basically fades out or as you can see here this effect is giving you by default by apple thanks apple uh basically apple is taking so much work out of our shoulders so basically once i start typing in here as you can see here the search controller is actually responsible for showing me the search results view controller that we have made in here and basically this is going to be uh where we add our table view and our collections view for basically viewing the results that were fetching from the database and once i hit backspace or delete and as you can see here it by default disappears so um basically we're going to start working with the search view or the search results you can show over here but first i just need to change that color so let me just go back in here and type navigation controller dot nav bar dot thing color and i'm just going to set that by default to white let me build and run this and let me see if that is working so um yes as you can see here the cancel button is just white right now so we have consistency around our application so let's go back to the search results view controller and over here i'm just going to initialize basically a new collection view so let me just type private let search results collection view that is going to be a ui collection view let me initialize that so basically let collection view is going to be equal to ui collection view and i'm just going to initialize that with the zero frame for now and regarding the layout let's just pass in here layout so let me just go up in here let me create that layout so private light or basically just let layout is going to be ui collection view flow layout all right so layout the item size maybe we can give that a size of cg size of um maybe like something like a hundred or um 200 maybe and now let me just register a new cell over here so basically let's just try to reuse the title collection view cell that we have in here so basically let me type the title um collection view cell dot cell all right for the identifier so basically let's just access that one more time and basically i can find my identifier here and over here let me just return back my collection view and over here i'm just going to pass basically uh that collection view one more time but first let me just type in here system background and over here let me just type view dot add sub view collection view or basically search results collection view over here i'm just going to lay out my functions so basically um collection view of the search results basically the frame that is going to be equals to um the view the bounce all right so basically one more thing that we need to do actually i'm just going to create over here so private var titles that is going to be an array of title and let me initialize that array to be empty for now all right and over here we just don't need to miss that one more time so basically search results collection view dot delegate and that is going to be self search results via controller um i'm sorry search results collection view the data source and that is going to be self as well over here let me just type in here extensions search results view controller let me just pass the delegates for here so collection view delegate as well as the collection view data source so basically number of um section items in section basically for now let me just type in here um basically like something like 10 and here i'm just going to implement the other data source function which is basically sell for item and let me just go ahead and type guard let cell let me dequeue a new cell over here so dq with the reusable identifier let me just choose um collection view cell or basically what we have called so um yeah title collection view cell identifier for index path that is going to be as um title collection view and else we're just going to return the normal ui collection view so over here i can just specify something like a background color for it and let me just return that cell one more time and um i kept thinking about it basically we are just designing for one screen size so basically we can just make it just a little bit dynamic so that basically you can just try it on multiple screens and i found that this basically so basically ui screen.main.bounds the width let's divide that by three and maybe um we can subtract something around um five or ten okay and also i'm just going to um type in here um the minimum intermittent item spacing i just need to set that so um zero i guess that will work and let me just build and run and let me see what do i get so far okay um top search let me just start by typing anything over here so basically you can see here um these are the cells that are going to be responsible for getting back um the titles that we're going to be searching for all right um and over here um i believe we can test on another screen size so maybe um the iphone 13 or um 13 pro i believe yeah i tested on that once let's just go to the search let me just try to type anything over here and yes we have basically the same uh dimensions across uh the normal and the pro max or basically the max device okay all right so let's go really quick to our api caller and over here we're just going to create a new function so basically we're going to type search with query and that is going to be a type of string and basically we're just going to return the same um signature over here so um let me just copy the whole thing over here so let me just paste in here so basically we have a search function that takes a query of type string and basically we are just going to change that url just right now just a second let me just delete the url because we are going to fetch a new url but basically the same things goes over here basically we are just going to pass the url make the request serialize the request using json object that we have over here and then pass in here on the completion and array of titles to the caller so let me just go in here and i have the developers website for the movie database dot org and i just clicked on search and query for details and basically this is going to be um an example for the the url that we're going to uh basically send our get a response or get request to so let me just copy that let me just go back in here and create a new url so guard let url is going to be url that's going to be made of a string and basically i'm just going to paste that in here um also we can um substitute that with the with the constant here that we have so basically let me just type constants dot base url and i believe yeah we need the forward slash over here and instead of api key we're just going to assign the constant that we have for that so constants.api key and in here basically we are just going to pass in the query that we have all right so basically our query is going to be here but before passing the query we just need to do something extra but before before this let me just go back in here all right so before we send our query to the url we just need to format that query so first of all we are going to type guard let query that is going to be query dot adding percent encoding and basically i'm just going to pass over here so basically um url host allowed all right else return and that basically takes care of formatting the url so that we can use it without any error all right so basically we have everything set up over here so um all right so let's just go back to my um search controller over here search review controller and then we just need to configure the updater to be this controller so basically let me just type search controller dot um i believe it's going to be yeah search results of data and that is going to be sell so basically xcode is just going to throw some errors over here so basically we just need to um import or conform to that protocol um so let me just copy that over here and basically let me just go down in here extension search view controller and i'm just going to conform to that and now i'm just going to implement one function over here which is basically update um search results all right so basically we just need to um get the query from the search bar so let me just type in here let search bar that's going to be equal to search controller dot search bar and over here i'm just going to write guard let query that is going to be search bar dot text and i just need to make sure that this text um is okay to be sent first so let me just type in here um query dot trimming characters in white space so basically each white space is going to be trimmed and i'm just going to make sure that it is not empty so i have to invert that all right any other thing i'm just going to type in here the same thing so basically query dot trimming in white space and i'm just going to get the count and i'm also going to make sure that the account is greater than or um or basically equals to three so basically we're just doing that to try to minimize the calls that we're going to make to the server as much as possible so i don't just need to call the server or basically send anything to server if the search bar has maybe like two characters or so all right so um also i just want to um set the result controller so basically let results controller that's going to be equal to search controller search results controller as search results view controller else i'm just going to return so basically i'm just setting the results controller to to be of type search results view controller and over here let me just go and write results controller dot delegate okay just a second and over here i'm just going to call the function so let me just type api caller.share.search and that is going to take the query that we have over here and for this i'm just going to pass in result and over here dispatch queue dot main dot async and over here we can switch on the results so result okay okay success we have the um reference two titles over here so basically i'm just going to get the results or basically let me just call that titles so results controller dot um i believe we have to um change that maybe to public because we want to access that from the search view controller so results controller dot titles that is going to be equals to titles okay and the results controller dot um also we need to have access to the um to collection view as well so let me just go back in here all right so change that to public as well so now we can access that so let me just go back to our search view controller and over here i'm just going to get the search results collection view i'm just going to reload the data over here and as you can see here um basically we didn't need to have like a weak self because actually we're not using self over here and now i just need to handle the failure and okay i'm just going to you know the usual which is basically printing a localized description for the um description uh which is basically forgotten before the error all right so let me just go back in here search results controller instead of having 10 elements by default i'm just going to return return the titles.count and over here i'm just going to delete that i have made sure that the cell is working right now i can just configure it to be working with the array that we have so um let me just get that over here so let title is going to be of um titles okay index path dot row and over here i have the information accessible for each title okay so basically cell dot configure and it just take a string over here really this is going to be um the the poster path so i can pass in here title dot poster path let me hit build and run and let me see what do we get so far okay and i believe that same error that we have basically it's just an optional so i'm just going to give a default of an empty string okay let me try to search for maybe harry potter so harry potter okay and as you can see here we have um the search functionality is working okay so as you can see here i'd search for google developer console and we're going to click on the first link and basically i've created a new account on google over here so that i walk you through how to enable this service on your app so basically we're going to click on credentials all right and then google is going to ask you first to create a project so that's exactly what we're going to do so basically let's just create project and let me call that for example netflix clone and let me just press create all right so once it's finished we're going to see this page so basically we're going to just press on create credentials and we'll just need to choose the api key and basically this is going to be the key that we're going to use actually to access the youtube api servers okay so just close that right now and as you can see here your api key is stored under the api key sections and basically you can just copy that from here all right so the next thing that we need to do is actually enable the youtube api service so let me just open the dashboard one more time over here and over here you're just gonna see the enable apis and service we're gonna click on that and over here we're just going to scroll down until we see the youtube data api basically we're just going to click on that and press enable and that's it once it's finished we're going to be able to use that to search the youtube right so as you can see here the youtube api services is already enabled and as you can see here we have the option to disable but we won't do that actually so let me just go back to my credentials and let me just get that api key and let me copy that api key let me fire up xcode and i'm gonna make sure that you're in the api caller and over here i'm just going to add this api key so basically static let youtube api key i'm just going to paste that in so right now we're going to be able to use that to search the youtube so let me just go back to safari and let me go over here and type youtube api and let me open the first link over here and we're going to click on search for content as you can see here we have the documentation on how to use the um the api for youtube to make a search and as you can see here we are searching with the google um apis slash youtube and the search so basically um i know a way which is basically very easy which is you can just scroll down on here on the right side of the screen and then click on show code and then click on the http and as you can see here basically this is the going to be the http link or the url that we're going to use to fetch data from the youtube so basically uh we can scroll down here um and you see this q basically this is going to be our string that we're going to pass or basically this is going to be the string that we're going to search for so let me just type in here for example harry potter and as you can see here uh it gets updated over here and the space between harry and potter is just um now percent 20 uh which we can do easily in xcode and we have done that in the last video as well so basically uh we're just going to pass our api key in here so let me just um you know make that easier to read so let me just copy that all right and let me just go back in here to api color i'm just going to create a new function over here so let me just go in this section over here so let me just type a new function which is going to be func get movie with query that is going to be a type of string and we're going to take care of the completion function but later i'm just going to right now create a url so let me just dive in here let url and that is going to be a url of a string and over here i'm just going to pass in the string that we have all right um basically i can see here this is going to be basically the same across the urls that we're going to make so let me just go in here and let me copy that or cut that actually and i'm just going to go over here i'm going to type static let youtube base url and that is going to be equals to this and instead i'm just going to pass that one more time in here so let me just type constants dot youtube base url and now we have our query over here i'm just going to take that from there from the search function because it's going to basically uh be the same all right so let me just type in here guard let query dot adding per set encoding with allow characters url allowed so basically that is going to take responsibility for replacing the white space with the percent 20 that you saw earlier okay and right now i'm just going to pass that in here all right so now i have my query and over here i'm just going to replace that with my api key that we got earlier so youtube api key and basically that is going to be the url so let me just guard that out so guard let and that is going to be um else return and now we have our api url ready to be used so right now i'm just going to make um a task so let task or you know what we can just copy that one more time over here so i'm just going to take that all and i'm just going to paste that one more time in here and as you can see here basically we're just doing the same things over and over again so i believe it's pretty easy so um we haven't yet decided the completion function uh what will it do so let me just instead of trying to decode that one more time in here let's just for now view the response that we're going to get back from the youtube api so for now i'm just going to print the error over here and here i'm just going to type json serialization dot json object and that is going to come from data and i'm going to say fragments allowed and over here i can just print that results and we just need to fire up this um function basically from outside so let me just go to my home view controller for now and we're going to change that basically however i just want to open the view load method over here and over here i'm just going to say api caller.shared.getmovie and over here since we don't have a completion function yet so i'm just going to pass in a normal string so basically harry potter and let me build and run this and let me see what do i get so far all right so basically as we can see here permission denied i believe something wrong with the api so let's just go back to the api caller and let me see here um and basically yes we forgot actually um i removed the key parameter as well so let's just make sure that you type that exactly like i do over here i just forgot to add the key keywords so let me just hit build and run one more time and let me see what do i get and as you can see here we managed to get the response successfully from the youtube server so let's have a quick look on the response that we get from the youtube server as you can see here basically there is an array of some sort of object and that object has as you can see here an attribute which is called id and inside that id we have the video id that we can use to search for the actual video on youtube so let me just copy that right here and let me just go up in the models over here and i'm just going to create a new file and i'm going to name that youtube search response all right and over here let me just create a new struct let me give that name of youtube search results and that is going to be conforming to the protocol which is codable over here i'm just going to create an item and we can just know what we're gonna have by this so basically we have an array of items so items and that is going to be an array of maybe um video element so i'm just going to create that over here so video element or yeah video element and that sounds good all right now xcode is going to complain because it doesn't know what is video element is and we just can give that a definition over here so structure of video element that is going to be a codable as well and over here it's going to have um maybe something like an id so um let id that is going to be an object as well maybe we can call that um maybe video element i'm sorry video element or we can just call it id video element all right so right now we just need to create that structure so struct id video or can just copy that name over here so struct id video element that is going to be conforming to the codable protocol as well and that should be having like two fields the kind field and that is going to be a string and basically the id or video id and make sure to have the same name over here world as well so string but for the sake of simplicity i'm not going to be using the kind but i'll just leave it here so right now we have the structure for or basically the model for the youtube response ready and also i can change that from results to response so it matches the um the name of the file over here all right and now let's just jump in in the api caller and let's just complete our function over here which is basically get movie so i can just copy the same um completion handler over here so let me just paste that over here so let me just have the completion function but instead of returning an array of title i'm just going to return a video element from here and you can just go back to the um youtube search response and basically the video element is going to have the id so let me just go back in here so i'm just going to return a video element not an array of video element make sure that you have this right and now instead of just realizing the data over here i'm just going to decode that so let me just have an instance of the json decoder and now press decode and over here i'm just going to use the youtube search response that i have from the data and over here i can just print the results and now let me hit build and run and let me see what do i get all right so we have an error over here so let me just go and fix that really quick and basically the api shared um get movie response that misses and uh like um completion over here so let me just api color shared dot get movie all right so let me just pass in here harry potter and over here i'm just going to get the results i'm not going to do anything with the results right now let me just hit build and run and let me see what do i get all right so basically i have here an array and that array as you can see here has the best matches for the searches that we have but more importantly um the decoding went successfully and as you can see here we can just access the first um the first object over here and it does have like an id which is going to be this that this is what we're going to be using for searching the youtube and now let me just go back to the api color one more time and instead of just um printing the results over here so just actually return the results so the completion that is going to take success and for the video element i'm just going to access the results items and basically that is going to be an array as you can see over here but basically i just need the best search option so i'm just going to access the first element over here and if it's all went wrong so let me just go and pass the failure over here so i can pass the error and that's it for the get movie function alright so let me just go back to my home view controller right now and basically i want to delete this basically i don't want the app to search for harry potter each time i open the app all right so let me just scroll down over here and as you can see here basically we are rendering each section which its own titles so basically we can just go back in here title table view controller and um i believe that's the one um okay so yeah basically that's it that's the one that we're looking for basically as you can see here we are rendering each cell which with the model so basically we can just implement that one more for over here so basically this select and make sure that you're in the collection table view cell and i'm just going to implement that function over here so basically whenever i tap on any title first of all i just need first to have a collection view dot deselect item and i'm just going to deselect that one in the index path and i'm just going to set the animated to true i'm just going to grab the title name so let me just guard let title name and that is going to be all right so let me just grab the title first so let title that is going to be titles all right index bath dot row and basically we have the title over here so guard that title name that is going to be title dot original title name or the title dot original title right and i can just return if it's not going if it's empty or basically if it's not so basic i have the title name and over here i can just say api caller.shared.getmovie and over here i can just pass in the title name and as a little hack i can just append the word trailer into it so basically i can search youtube with that exact same name plus adding the trailer word next to it and i can just get the result over here all right so i'm just going to switch on the result and in case of success let me get that video element all right and over here i can just print the video element dot id and if it all goes wrong maybe we can just have another um case for the error or basically it's not optional to be exact it's mandatory to do so for example let me just print the error over here and for now let me just test that so let me hit build and run and over here maybe i can have something like maybe we can choose something like um no time to die or do i'm just going to choose that and over here you can see that we have made the request for the youtube server and we have basically a returned object which we can actually copy that video id and over here let me just open youtube let me just open a new um video for example let me just open that one over here and as you can see here we can add this video id over there so let me just paste that over here and let me hit build and run and as you can see basically we have the official main trailer of the movie that we have clicked on and basically i'm just going to create a new file and that is going to be a new controller so let me just make sure that i'm choosing swift and for the name i'm just going to say like something like title preview view controller and let me just hit next all right so basically this is going to be the controller in which we are going to pass in the video and be able to view the video actually so basically i'm just going to import something over here so let me just type import webkit and over here i'm just going to initialize one more view so basically private let web view and that is going to be wk webview all right and let me just initialize that all right so basically this is going to be the view in which we are going to view the video for the trailer and right here let me just define a new label title so private let title label and that is going to be ui label let me initialize that with the anonymous closure pattern so let label that is going to be ui label i'm just going to return the label over here and i just need to enable the auto layout so basically translate autoresizing mask into constraints that is going to be equals to false all right and for the font i'm just going to say let label dot font and that it's going to be system font of size maybe 22 and for the weight i'm just going to choose bold all right let me just initialize one more view okay so private let overview label and that is going to be labeled as well same pattern over here so let label that is going to be ui label and i'm just going to return the label one more time basically we're just doing the same stuff over here so let label font and that is going to be um maybe something like 18 so system wait wait just a second so system font that is going to be 18 and for the overview i'm just going to say regular and i'm going to enable the auto layout as well just a second over here and maybe since the label could take multiple lines i'm just going to say let label dot number of lines that is going to be equal to zero and basically when you set the number of lines in swift um to zero that means that it can actually take multiple lines that's not going to be constrained for just one or two lines all right so um maybe i can have like something like um a download button so private let download button and that is going to be ui button let me initialize that so that button that is going to be ui button button dot translate auto resizing constraints false let me just return that button and over here i can set the background for the um 3d button maybe for something like a red color all right and um button not set title that's going to say download for normal all right in button.title color and that is going to be white also for normal all right so basically we just need to add those views into our so you don't add some view i just need to add the web view view dot add some view maybe the title you don't add some view overview label and you'd add some view that is going to be the download button and over here i just need to um configure constraints all right and let me create that function down here and this is going to be a function all right so first of all i just need to set the um the web view so let me say something like um let web view constraints and that is going to be an array and that array is going to take um some constraints actually so webview dot top anchor and that is going to be constrained with the view top anchor all right so um webview dot leading anchor the constraints to the view not leading anchor as well web view right dot trailing anchor that is going to be also constrained with the view training anchor and for the height all right so high anchor that is going to be somewhere around maybe 250 or maybe we can just set assume that the whip kit is just going to um calculate its height for now all right so let me just type ns layout constraints to activate and let me pass the webview constraint all right so over here let me just constrain the title as well so let title constraints or title label constraints and that is going to be an array as well so title label dot top anchor i'm just going to constrain that maybe to the web view the bottom anchor and that is going to be spaced by maybe 20 points all right so title label dot leading anchor constrains and that is going to be constrained with the view leading anchor and maybe 20 points from the left as well so uh i believe that is enough for displaying the title label so in this layout constraints activate title label constraints all right and also we need some title or subtitle constraints for the overview as well so um let over view label constraints and that's going to be an array so overview label dot top anchor and that is going to be constrained with the title label in the bottom anchor 20 points or maybe 15 overview label dot leading anchor constraints and that is going to be equals to the view dot leading anchor and maybe add some margin on the left so constant that is going to be 20 as well so that we have them aligned and i believe that's it for the overview so same stuff over here same stuff over and over and i believe that's it so um let me just go and add some dummy text over here so for the label i'm just going to give that a text maybe harry potter and now so for the overview label maybe uh something like um label text and this is the best movie ever to watch as a kid and trust me that is true all right so basically we have a webview constraints we have title label we have overview and you can just play around with this maybe you can add the rating or the votes number of votes basically you can just utilize the information that we got earlier from the movie database over here but for the sake of simplicity i'm just going to create a new view model over here all right so let me just create a new swift file all right let me call that um title preview view model and inside that i'm just going to create a new construct let me just call that title right so title preview view model and inside of here i just need the title and that is going to be a string i need the youtube video so let youtube video and that is going to be maybe video element all right and for the title overview all right so that is going to be a string so what do i need to do right now so um let me just let me just see if everything is working for the title preview controller so over here inside the home view controller i can just navigate to this controller so um navigation controller the and inside that i'm just going to pass in the title preview controller and for the animation i'm just going to say true and let me build and run this and let me see what do i get so far all right and as you can see here harry potter is at the top maybe we forgot to add some constraints over here so let me just go back to the title preview controller and believe something is wrong over here which is basically the web view the web view doesn't have actually the auto layout enabled so um i believe i can do something about that so let me just define that with the enormous closure pattern over here and over here i'm just going to say let web view and that is going to be wk webview and inside of here i can just say webview.translate all the resizing masks and that is going to be equals to false and let me just return the webview over here one more time let me build and run and let me see if that is working and it's not working yet so i believe we have to add some sort of height so um let me just say webview.com anchor and that is going to be equals to maybe somewhere like 250. let me build on one as you can see here we have the um the webview and the title the um and everything is working over here maybe we can just add an um a constant over here for the top margin i can set that maybe somewhere around 50. let me build and run one more time and over here this is going to be the um the web view that we're going to pass in the video url we just need to set the download button we forgot that as well so let download button constraints and there's going to be an array over here so download button and that is going to be at the center of the controller so um center x and that is going to constrain with the view dot center x and for that i'm just going to add maybe a top margin between the button and the overview maybe around 15 points so let's just top anchor constraints and that is going to be constrained with the um overview label the bottom anchor and let me just add maybe somewhere like 20 points let me see if that is working correctly um yeah we forgot to activate the constraints as well so any layout or constraints um all right so activate download button constraints and let me hit build and run and let me see what do i get and as you can see here basically the download button it's over here it's working fine all right so um what do we need to do right now basically i just need to set the background color of the view so background color and that is going to be system background let me hit build and run all right so we have everything is working over here i can just modify the download button to look at it a little bit nicer so um button right so i can do that over here basically so download button with an anchor and that is going to be equal somewhere around 120 all right so um yeah basically we just need a separator over here so um yeah that is that looks so much better maybe um 140 that will look much nicer and for the height as well we can just send that all right so height anchor that is going to be somewhere around um 80 all right let me see if that is looking good so too much we can just play around with the um with the values of the height over here until you're satisfied with some something okay um i actually realized something maybe the um the overview is just going to take multiple lines so that doesn't have to be um yeah that's working fine okay basically because we are just constraining the top anchor of the bottom to be below the overview level with 25 whatsoever and that is going to be only um centered horizontally so um over here maybe we can add some something to the download button so button dot layer dot um corner radius and that is going to be equal to 15 one dot layer dot clips to bounce or mask to bounce yeah that is going to be true as well so let me just hit build in one right maybe we can change that to eight but you get the idea um we're gonna move into something else right now um basically uh i just need to pass in the information over here but basically we just need to configure the controller before we initialized it so let me just go back down in here and i can create a new function that is going to be called configure with model and that is going to take a title preview view model and over here i'm just going to set the title label dot text and that is going to be model title all right so the overview label dot text is going to be model dot title overview and over here i'm just going to create a new url so guard let url is going to be url with string and inside of here let me just type https colon forward slash www.youtube.com slash embed right and over here i'm just going to pass in um the url that we get so model dot youtube video all right so id dot video id and then else i'm just going to return so right now i have the url so i'm just going to use that to load inside the web view so webview.low and that is going to take a url request with the url that we have over here all right so basically that's it so let's just go to the collection table view cell and over here i'm just going to create a new protocol so protocol is going to name that collection view table view cell delegate that's going to be a type of any object inside that i'm just going to create a new function and basically that function is going to be called collection view table view cell did tab cell all right and that is going to take an um an object type basically of um all right so cell and that is going to be over time this and also a model or view model to be exact and that is going to be the title preview view model all right and over here i'm just going to create a private or sorry that is going to be a weak var of delegate and that is going to be of this type and also it's going to be optional all right so over here i'm just going to get down to this function over here did select item and once i have basically the video element over here basically i'm just going to say delegate dot or write self and inside here i'm just going to create that view model all right so let me just copy that over here let me just take that out maybe to be easier to see all right so let me just do that over here so let view model all right so that is going to be of types um here i'm just going to pass in the uh the string for the title so um that is going to be titles all right index path row and over here i'm just going to pass in the original title or basically the original row and for the simplicity i'm just going to get the title over here so titles index.path row and over here i'm just going to change that basically to title so title.original title or the title oh basically i have the title name actually so that is gonna be much easier all right and also over here i have i have to provide the video element all right so um let me just pass in the video element over here and also here i'm just going to get the title all right so title dot overview and i believe that is okay and just we need to reference that using self and since we're just going to use that inside and uh or basically a synchronous function i'm just going to say weak self and over here let me say self dot and don't forget the question mark over here so um let me just maybe guard that or force wrap that all right over here let me just pass in the overview but that needs to be unwrapped first so let's over view and that is going to be title all right so let me just guard that out so guard let title overview dot title dot overview else return all right so let me pass the title overview over here all right i believe that is correct so basically yeah that is correct from now and over here i'm just going to pass in the view model that we have created over here and here i'm just going to pass in self but i need to guard that first out so guard let strong self that is going to be equals to self else return and basically self is over here as an optional so let me just pass in the strong self over here and let me build and run and let me see what do i get so um all right so basically we just need to add an optional self over here and let me build and run this and let me see yeah basically we don't have any errors right now so let me just go to the home view controller i'm just going to create a new extension for that controller and that is going to confirm to our protocol that we've just created earlier which is collection view table view cell delegate and over here i'm just going to implement that function so uh basically we're going to have the title preview view model over here so let me just say let vc that is going to be a title preview view controller and over here i'm just going to configure that with the view model that we have from here so view model and now i'm just gonna say navigationcontroller.push and that is going to be equals to vc and i'm just going to set the animation for true let me just go up in here and let me just take that out which is basically um this line over here we don't need this anymore we have everything set up over it now so let me just build and run this and let me see what do i get so far so um i'm pretty sure that is going to work i'm i doubt it but let's just try so let's just click on the ghostbuster over here and let me see what do i get basically nothing and that is because we forgot to set our delegate to the be this controller so um basically i'm just going to get um down over here and before i do this so let me just say vc.delegate and that is going to be self and over here let me just go and make the um all right so the delegate is going to be in the collection view cell over here so i'm just going to need to access this all right so um let me just go to um yeah let's just go to the uh do the table view cell i believe so home view controller and let me just scroll up button here all right so table view cell all right so let me have this so sell for row okay so let me just sell delegate and that is going to be equals to self alright so let me just hit build and run one more time and i hope that is going to be working so uh yeah basically just delete this that doesn't make any sense so let me build a run and i believe that is going to work so ghostbusters and we have an error over here all right so basically this is the error that we have over here and it we can fix that really quick so let me just say um this patch q main dot async and over here i'm just going to have those lines cut and paste it over here i believe that's it and that is going to work so let's just cross our fingers and basically i just need to have um reference for this week's self and i'm just going to add this over here so self optional and yeah basically i just need to say in all right so let me just build and run let me see if that is working so ghostbusters and you can see here basically the uh the name of the movie uh the overview and we can just type press on that let me just see if that is working and indeed that is actually working so basically we just need to fix the overview title um constraints over here and actually it's pretty easy to fix so we just need to go to the title preview controller over here and basically there is one constraint that we forgot to add which is basically the trailing anchor for the uh overview text so overview label dot trailing anchor and that is going to be constrained with the view dot trailing anchor over here let me just hit build and run one more time and let me see if i have the title overview is constrained in its place so let me just hit ghostbusters and as you can see here basically everything seems to be working fine maybe you can just add a little bit extra height for this i believe it would look so much better so maybe 300 let me hit builder on one more time and let me see what do i get as a final results and yes indeed i am so satisfied with the results for now all right so let me just pump the phone just a little bit so that we can see more clearly and let me just close that and basically before actually starting implementing that event handler or basically tapping handler i just need to change something regarding the how the app works as you can see here basically we don't actually fetch any new movie or any new title and pass that to our header view over here basically we're just viewing the static image that we have passed earlier inside the assets folder so let me change that basically i'm just going to define a new variable here now it's going to a private variable and let me just call that random selected movie or basically a random trending movie and that is going to be type title all right and basically i just need to make that an optional for now so it can actually be nil for now and we're just going to change that later all right and the second thing that we need to do actually uh we're going to change the scope of this header view as you can see here basically it's only visible inside the view that load because it's just local variable so we're gonna make that change so let me just type in here private header view and that is going to be of type hero header view and that is going to be optional as well so it can actually be nil and right now uh i just need to say var yeah i forgot var actually and it's not constant because that is going to change just just over here so let me just delete this and now we have a reference to header view and outside the view load method and now i'm just going to create a new function and that function is going to be called configure hero header view and inside that function i just need to make a new get request from the server so that i can pull some trending movies and assign one randomly to that random trending movie variable so let me just do that so api caller though share don't get trending movies and over here i'm just going to get the result and as usual we're just going to switch on the result and basically we're just going to implement the success case and also the failure case so let me just do that so case success i'm just going to get an array of titles and basically i'm just going to set that to my random right so random trending movie and that is going to be to one of those titles and that is going to be get randomly and over here i just need to have a weak reference of self so that i can do that easily all right so basically let me just implement the failure case as well so let error and basically i'm just going to print the error all right so error the localized description yeah that is a dot not a comma so a localized description so basically i just made my api call for the server and i retrieved back some titles over here and i got one randomly and i set that to my random trending movie title of type title so right now i just need a function so that i can configure the header that is being displayed in the hero view so let me just do that so let me just open the hero header view over here and basically i just need to implement one more function so basically it's going to be public because i'm just going to access that from outside so configure with model and basically that is going to be uh i believe something like um the view model over here so yeah title view model all right and over here i just need to access this hero image view so um let me just copy that again i forgot the word font and let me just copy that from maybe the title um table view cell i'm just going to copy that url because i'm actually going to pass in the poster url as well and that is going to be a constant that's not going to change whatsoever so let me just go back to hero header view again i got my url from the title table view cell so hero header view and just going to you know add this url over here and now i'm just going to access this so hero image view dot sd set image and that is going to be set with a url and for this is that is going to be nil for the completion and basically that's it i believe that is going to work so let me just help billion run and let me see what do i get so far all right and nothing changed over here i guess i forgot actually to call this method so what do i have here so yeah we have just set that to a random um trending movie element and over here i'm just going to say optional self header view dot configure and that is going to be configured with the title view model over here basically we're just going to pass in the same um random element that we have chosen so let me just do that over here so let's select the title and that is going to be titles all right so titles dot random element and basically i'm just going to reuse that over here so i don't generate a new random element all right so basically let me grab this title so basically this selected title i'm just going to pass that in here so select the title dot um original title or just empty string for now and basically i'm just going to do the same here so selected title dot um poster path or an empty string for now so i believe that should be working yes we have no errors and actually i forgot to call this method from here so configure header view or hero header view and let me just tell build and run and let me see what do i get so far all right so basically uh we are now generating random element each time we open the app let me just confirm that let me close the app let me reopen it one more time and basically yes each time we open the app we have new random element generated so right now let's just start working on actually making each title can be tapped anywhere because as you know it's only tapped within the home view controller over here so now let's just get this thing to work so let me just go to the upcoming view controller and let me implement a new function over here so basically i'm just going to implement table deselect row at and basically i'm just going to reference that table one more time over here and say deselect row and index path and set the animation to true for now it doesn't really matter but basically i just need to have a reference to the title that i have just pressed on so titled that is going to be titles index path dot row and now i have the title already so let me just say guard let title name and that is going to be title dot original title or the title dot original name else i'm just going to return so basically i have the title name that i have just pressed on so what do i need to do right now basically i'm just going to say api color dot shared dot get movie and i'm just going to pass in the title name over here and for the result i'm just going to switch on the result as well so case success basically i have a video element so let's video element and the other one is going to be case failure and i'm just going to get an error which i'm going to be printing just normal so error dot localize description and over here i just need to make a new um a new instance basically for the preview controller which i'm going to actually be pushing um inside the navigation controller so i'm just going to say let vc and that is going to be um title preview view controller and over here i'm just going to configure that with the title view model that i have over here so basically for the title i can just pass in the title name and for the youtube video i'm just going to get the video element and for the title overview i have the title over here and i can say just here um overview and i believe that's it all right so basically i just need to push the view controller over here uh basically that is that needs to be unwrapped or you know i can just add like an empty string over here and that should take the error away all right so um let me just say here weak self all right and over here i'm just going to say self which is going to be an optional so i'm going to say navigation controller the push view controller and that is going to be my vc over here and i'm going to say true let me just hit build and run and let me see and just need to go to the coming soon and press on any movie over here let's just say sun and that is going to take me directly to one of those but i have an error over here which is basically yeah i know how to fix that so let me just go really quick over here and basically we just need to add that to a dispatchq dot main dot async i always forget that so basically let me just take that cut and paste that over here build and run one more time and i believe that is going to work definitely is going to work and yeah basically that is working fine so the upcoming is already done so let's just go to the top search really quick and i believe it's going to be really the same so i can actually copy that function over here so table view cell i believe that is going to be exactly the same so let me just go down in here and inside the delegate methods of the table let me just paste that one more time and i believe that is going to work yeah there's no error whatsoever so let me just hit build and run one more time and go to top search spiderman and yeah that is basically working fine all right so now we have the search results view controller remaining and that is going to be just a little bit tricky because we're not just accessing the title within the navigation controller tabs over here we're just navigating we're just accessing the title from another um place so we're just going to use protocols and delegates so let me just go to the search results view controller over here and over here i'm just going to create a new protocol so protocol and let me just call that uh maybe search results view controller delegate and that is going to be of type any object and inside of here i'm just going to create a new function so funk and that is going to be called search results view controller all right so let me just do this so search results view controller did tab item and that is going to take basically the view model all right so and that is going to be titled preview view model all right so basically over here i just need to create the public weak var and that is going to be delegate and that is going to be of the same type of the protocol over here and that's going to be optional because i will not be initializing that right away and basically i just need to go down here inside my collection view and i'm just going to say collection view that select item i just need to have the collection view instance over here and i'm going to say deselect item at index path and that is going to be true and inside of that i'm just going to reference my delegate and i'm going to say search results did tab item and basically i'm just going to pass in this item so basically i just need to have the title over here so um let title and that is going to be titles or write index path row basically i have my title over here um i can pass in the name as well so um alright or you know you can just say title dot original title and i can pretty much say that is going to be working without actually the need of um accessing the original name as well and for the youtube video i just need to have this video element so basically before actually saying the delegate search result tab item i just need to grab the video element first and basically i can just go to the upcoming and basically i can just copy this from here i believe yeah basically it's going to be the api color function so let me just grab that function over here because basically we're just going to be doing the same thing so um all right so api callershare.getmovie and basically i'm just going to get the name and that name is going to be from the title all right so original title or empty string for now and i'm pretty sure that is going to be working all right so let's see over here um dispatch q vc from the title preview view controller basically i just need to have the same thing over and over here so let's just say let title name and that is going to be equals to this all right and instead that you can just pass in the title name over here title name that is going to be working um i believe yeah same thing over and over and i can say well i can just copy this function over here all right so what do i have um basically in case of the success i have the video elements so basically i can just remove the dispatch queue over here because that is going to be done from the search view controller so instead i'm just going to say delegate all right so i just need the weak self as well so self all right so basically self dot delegate search results view controller that is going to say did tab item and i'm going to say the item that was just tapped is just going to be the title with that name and the video element i just got that video element over here and for the title overview same thing over and over so basically title dot overview and i can just pass an empty string from there basically this is completely done from the search results view controller now we just need to go to the search view controller over here and just swipe up until we see this um initialization for the search results view controller basically we're not making a global variable so that we can access that search results view controller anywhere else but there's another cool way that we can actually do this which is basically the search controller over here basically we have the results controller which is basically the same thing so um basically i just need to say results controller.delegate and that is going to be self and once i'm done with that i can actually um say that i'm going to conform to the search results view controller delegate over here and down in there i can just say search results did tab item and basically i have my view model over here so the thing i'm just going to be need to do is actually say navigationcontroller.push and i'm just going to access this which is going to be from here so let vc and that is going to be title preview view controller i'm just going to configure that with the view model that i have and then i'm just going to pass in the view controller and say true for the animation let me just hit build and run and let me confirm that this is working so let me just hit spiderman and i have spiderman over here let me say that it's going to be working yeah basically we just fell with the same error over and over again so let me just say dispatch q dot main dot async and inside of here i'm just going to add that right in here i believe that is going to be working so yeah we just need to mention that is going to be self so weak self in and inside of here i'm just going to say self optional dot build and run and pretty much that is going to be working i promise you so spiderman and yes that is working as well so as you can see here i'm in my home view controller and let me just build and run this project one more time so let me demonstrate something basically we can click on any title over here and it will take us directly to the detail preview controller where we can view some information about the title like the overview the title itself and we can also watch the trailer but actually we don't have any way of downloading the title so that it can get into this tab so basically this is what we're going to be doing so let me just go to the collection view table view cell and scroll down at the bottom over here so basically i'm just going to implement one more function and basically this function is going to be called collection view context menu configuration for item at yeah this is a very long name for a function but this is basically what we're going to be using for downloading the title so let me start by defining this so let config and that is going to be ui context menu configuration and we're going to be using the default constructor over here so let me just have those um parameters on just one line so that it can be easier to read so for the identifier i'm going to be passing nil for the preview provider might be passing nail as well and i'm gonna hit return or enter on this so basically let me just pass nothing in this function and over here i'm just going to um initialize my actions so basically let me have a download action and that is going to be ui action and that is going to be defined with this so basically for the title i'm just going to be passing download all right so for the subtitle now image nil identifier nil discover ability title and that also gonna be nil and here's the best part about it so the attributes we can just delete it we can just forget about it we don't need that and for the state i'm going to say off and for the handler let me just pass in here for now so basically download tapped all right so basically we just need to exit about this so let me just return a ui menu and i'm just going to be passing this so um for the title i'm going to be passing an empty string for the image nil identifier nil and for the options that is going to be a display in line and for the children i'm going to have an array in which we are going to be passing the download actions or basically if we have more than actions over here all right so let me just before i exit this um method i just need to return the configuration i believe uh i messed up in here so return config and basically that's it so let me just hit build and run i believe i don't have any errors yeah that is correct and now let me just try that so let me just long tap on spiderman over here and as you can see here this cool animation uh which blurs the background behind the title and if i clicked on or tapped actually on download you can see here it's on the console download tapped so basically right now we have a way so that we can actually tell the app that we want to download something all right so now let's just dive in inside um the basics of core data um before i do so actually i just need to um make this like a little bit better to read and okay so let me just follow me over here so basically i'm going to be defining a new function so basically that is going to be private func and i'm going to call that function down load title at and i'm going to say here index path and that is going to be of type index path all right and basically over here i'm just going to call that function from down there so let me just type in here um basically uh weak self so weak self and here i'm just gonna be typing self optional download title ad i'm gonna be passing the index path path over here so um right here i can just go to the download title at and i can say print downloading and i'm gonna be uh accessing the titles over here with the index path dot row and over here i can just say like the original title let me just hit build and run one more time so that i can make sure that everything seems to be working fine uh right so long press on the spiderman download and i can as you can see here downloading uh that is gonna be an optional string which is basically spiderman so basically we have now a clean way for downloading things so now let me just talk about a lot more about core data so um let me just hit uh file new um project and yeah don't worry about it we're not gonna be creating a whole new project from the start so let me just choose that swift as you can see here basically we have an option which is basically use core data some of you all might be thinking well when we started this project we haven't actually uh checked this uh use core data so basically we need this inside our project so how do we add core data to an existing project that was initialized without core data basically uh we're going to be making this as a test project all right and we're going to be clicking on that we're not going to be talking a bit uh in this video about cloud kit um maybe in the future tutorials but let's for now check use core data and i'm going to be tossing this project maybe on the desktop for now all right so yeah replace that because i already had one with the same name and as you can see here basically we have test project file which is basically a model for our database and also if you looked inside the app delegates basically you're going to see here code data is imported and if you scroll down basically you're going to be seeing two variables or two functions over here basically the persistent container and also the save context i'm going to be talk a little bit more about this but for now let me just copy the entire thing from here for so basically from the mark that says core data stack i'm going to be copying everything down to the bottom i'm going to be closing this project we're not going to be using that project ever again so let's just go back to our project which is going to be the app uh that we're being that we're going to be build here which is basically netflix loan um let me just go to appdelegate and move down here and let me just paste that so right now we just need to create a new um all right so what do i have here so uh yeah that was uh basically outside the class so yeah make sure that you know you don't get outside this class um all right so maybe i forgot one uh all right let me just hit build and run yeah everything seems to be working all right so i believe something is wrong in here yeah i actually got this error because i forgot to import core data and i'm not going to be cutting or editing this video because i want you guys to see the problems that i face um basically when i implement or add core data to a project that hasn't been initialized uh previously with core data so as you can see here basically we have imported core data and also we uh pasted the safe context method and also the persistent container and we're going to be talking a lot more about those but let me just continue you know configuring core data inside the app so let me just hit file new or basically i just need to make sure that i'm in my root directory let me just right click on here new file and scroll down until you see the core data section and i'm gonna be choosing data model all right so this data model i'm gonna be calling that maybe netflix clone model and very basic name and as you can see here let me just go back to the app delegate and i'm going to make sure that this name over here matches this one so netflix chloe model so i'm going to be calling this netflix clone and you know it's case sensitive all right so let me just talk a little bit more about the persistent container and the safe context um basically some of um some of people some some of the people actually in the community uh called this as a context manager and basically this is gonna be an variable which is going to be holding the persistent container or maybe you can say the database itself so basically this is the place where we store our data and basically this is the context manager or basically the manager um who's responsible for taking the data from us and committing those changes or actually inserting this data inside the database so here how it goes let me just go on to netflix clone model over here and basically i'm going to be creating a new entity right so um you can just press on add entity at the bottom right here and as you can see here basically we have an entity i'm going to be changing that name maybe to title item all right and basically we have attributes and data types and if that looks familiar basically it's something like the models that we have for the cycle over here so basically for the title we have some attributes and we have the data types um basically i'm gonna be copying these uh into this uh model that i have over here so let me just make like a new tab i believe i can open both of those like um side by side so let me just um yeah i did that by hitting command t so um yeah that's not possible i guess so all right so for now let me just hit um on the plus um symbol right here or the plus sign over here so let me just start by typing original underscore name and that is going to be string all right so also i have original title and that is going to be a string as well so basically i'm just copying the model over here so i'm going to be fast forwarding this part inside the video so i don't waste your time all right so as you can see here basically i have the id which was um integer inside my struct over here so basically i chose the type uh to be integer 64 and yeah please choose integer 64 because i believe if you chose something uh below this that might give you an error so this is basically that is going to be having like enough space to hold the uh the id which is been stored inside the structure over here media type that is going to be a string original name string original title overview poster path um release date vote average that is going to be a double because i believe that is going to be having like a decimal point and for the vote count i believe it's also an integer so basically we have that and also i just want to make sure that we have this um file or this model um available to access across xcode so let me just hit command b to build the um the application and i'm going to be um searching for the title that we have over here basically title item and i'm gonna see here if that is accessible from uh from the project itself so let me just go to maybe the collection table view cell and over here let me just make sure that that this is accessible so title item and as you can see here it's not so um sometimes xcode does this so it's normal so we can just close xcode over here yes stop tasks and just open xcode once again and i believe that is going to work um so let me just go back to the collection table view cell and let me just type in here title item and as you can see here basically now xcode sees the um the type that we have made inside the netflix clone model that we have over here all right so what we want to do right now basically before we start making anything to core data i'm going to be going to the managers over here because i just wanted you to learn the the clean way actually of implementing core data so let me just create a new swift file and i'm going to be calling that maybe um data persistence manager all right so basically that class is going to be responsible for downloading the data and also to uh to work and talk to core data api because we don't want actually to talk to core data api from within the class that we're using for viewing the collection view cell itself this is not solid principle so i'm going to be using this data persistent manager so let me just say class i'm going to be copying this name basically yeah i like that name actually so data persistence manager and here right here let me just type static let shared i'm going to be creating like a shared instance across the app so um yes that we have here and right now let me just define a new function i'm going to be called that function maybe download title with model and that model i believe is going to be a title all right so let me just type that right so basically this is what we're going to be doing so basically we're going to be downloading a title with model that is going to be passed from inside the collection table view cell and also i want to have like a completion handler over here so completion that is going to be escaping and basically we want to return a result and that result should have like a void all right um and also um error if an error happens and that closure should return like a void at the end so basically that's what this is what we're going to be implementing right here so right now we just need to have our context manager be able to insert the data that we want or basically the data that we get from the model here inside the database so basically it's just a twostep process first of all we tell the um the model or basically the context manager that we want to save something and we tell it exactly what we're going to be saving inside our database and then tell the context api or the context manager hey all right this is the data that we have been telling you please store that data inside our database so first of all we just need to have a reference to the api um persistent container over here and also the uh the save context manager so let me just go back to the data persistence all right so let me just type guard let because this is going to be an optional so let me just type app delegate and that is going to be ui application as app delegate else we're going to be returning all right so i forgot else so um yeah let me just type also over here and over here i'm going to be returning so right now i have like an instance or basically a reference to the app delegate and over here i just need to uh have the context as well so um let context and that is going to be um app delegate dot resistant container dot view context basically those are the two lines that we need to be able to talk to the context manager all right so basically we just need to import core data over here so that we're going to be able to use core data and over here i'm just going to create a new item so basically let's item and this item is what we're going to be storing inside our database so let's item and that is going to be a title item and we're just going to choose this one with the context and we're gonna pass the context over here so basically uh we are going to um to create a title item with the uh supervision of the context manager over here so if this is the most simple way that you can think about it so hey context manager we are creating a title item under your supervision so please note that so okay so we right now have an item and over here uh we can just say original title and that is going to be model dot original title and basically uh we're going to populate all of the um all of the attributes over here so item id that is going to be model dot id item dot uh what is uh also original name model dot original name item dot overview model dot overview i hope that is making sense to you guys because uh yeah core data is not that simple to wrap your head around um and basically yeah we can see here like an error because we're converting from an integer to integer 64. but that could be fixed easily so basically we're just going to make um n64 and pass the model id over here um let's just go and implement the other things so um what else so media type and now it's going to be model.media type item dot poster path all right so model the poster path um two three four five six i believe we have three left so item dot release date model dot release date item dot vote count here and average or the vote average here model dot uh vote count item dot um all right so average yeah both average that is going to be model vote average as well so basically as you can see here we have uh everything when it comes to the um saving the data so yeah let me just replace that as well so basically we uh we created like a title item that should be um saved inside the database and we created this with the supervision of the context manager now the context manager needs our basically he is just waiting for us to order uh that we want actually to save the title item inside the database so let me just do that so context and we're gonna say save and basically that is going to throw an error so basically we're just going to wrap this inside the do catch block so um yeah let me just say try right context dot save and for the catch block i'm going to say print error dot localized description i believe that is it um all right so let me just hit build and run yeah that is succeeded and basically if we managed to save the data over here let me just um say okay completion all right so basically we just need to pass something over here all right so basically we're just gonna pass the results so the result is success and as you can see here basically we are expecting void to be passed but how we're gonna be uh passing void this is gonna be tricky because we can't just type void this is a type name not not like a data itself well the best part about swift it's just really really simple we just need to pass an empty something so basically we're going to be passing like an empty parenthesis over here so as you can see here basically once we are done saving the data we are just going to pass the completion to the um or basically the success case to the completion and over here uh once we print the function i can just you know instead of printing the error over here i can just say completion well the failure and for the error actually i can just you know be smart about it so let me just go up here and make an enum and that is going to be like um a download or basically a database error and that is going to be getting from error as well and we have here a case let me just call that failed to save data and let me pass that word over here so um database error dot failed to save data and now uh everything looks clean and now we have one thing to do with which is basically uh fetching the data back from the server uh but we're going to be doing this later so let me just make sure that this is working so let me just go to collection table view cell and over here so since we are downloading a title so let me just say data persistent manager shared download title uh with model so basically the model itself is going to be titles all right at index path the row and for the completion and look how clean is that actually so basically we have result we're going to be switching on result all right so switch result and in case of success all right so we don't have anything over here so let me just say print downloaded to database and in case of the failure we can just print the error so case failure and we have an error over here passed from the data persistence manager so error and please write here like print failed or basically yeah we have an error information would be just like localized description for the error and that's it so basically let me build the um the project right here and let me say well we wanna like download spiderman uh long tap on spiderman press download and as you can see here download to database so that means actually that we have successfully um implemented everything correctly and now um our title is inside our database now it's just a matter of fetching those or fetching that title again so basically uh what do i want to do basically when i tap on the download i just need this to be reflected on in my downloads manager over here or the download step so before we do anything inside of here let me just go to the upcoming view controller i'm going to be scrolling up in here um yeah maybe i'm going to be copying this so um title and the yeah the title basically the configuration for the title so um let me just go in here say downloads all right let me hit build and run and let me go to the download tab and yes basically that is basically what we're going to be getting and also we need to implement like a simple table view and that is going to be really really simple because we're going to be copying everything from the upcoming through view controller so basically let me just um have that in here and yeah private yeah basically private let's instead of upcoming table maybe we can say download the table and over here i'm going to say download the table dot delegate it's going to be equal to self download table data source that is going to be equal to self as well and before um like waiting for xcode to throw any error inside of here so download view controller that is going to conform to ui table view delegate and also ui table view data source all right so number of table uh rows i believe we're gonna be actually copying everything from the upcoming view controller i'm not i'm not sure why i did that at the first place so we're gonna have this and that and that and also yeah basically those three functions so let me just um paste that in here and basically we're gonna have this uh yellow usb because we don't actually have titles and basically we're gonna be creating that over here so private let titles and that is going to be an array but instead of an array of title i'm just gonna be having like array of title item because that is going to be fetched directly from the database all right so um yeah let's just do this to be a var instead of title or instead of constant to be act to be exact and title item and i'm going to be initializing that away over here so we don't have any error inside the function or inside that class so what do we need to do right now basically we need to fetch the data from the database and basically we're going to be implementing that function inside of the data persistence as well so basically let me just go in here all right and i'm going to be calling a new function which is going to be fetching titles from database all right and that should like give me a completion so completion all right and that is going to be escaping as well and i'm just going to return like an array or basically a result and that result should have like something like an array of title item and also an error and that closure itself is going to be giving me like a void so basically when we call that function we are expecting to get an array of title item so what do we need to talk to the context manager again basically the same thing over and over here basically we just need to have this copied um some of y'all might be asking well you are just copying and pasting well maybe this is just two lines code uh it's not that big a deal actually so right now we just need to talk again with the context manager because this manager is the only one responsible or the only one authorized to access the database inside our app so we need to address the context manager politely and hence we're going to be making a request for that context manager so let me just type let request and that is going to be an nsfetch request and that is going to take the type of the data that we're going to be querying from the database so basically let me just type title item all right so basically this is going to be the type of the request that we're gonna be using and now let me just sign request dot title item dot fetch request so basically we now have our request ready to be executed or basically ready to be dispatched for the context manager so now we just need to dispatch the request for the database context manager so basically we're just gonna be doing that inside of a do catch block because accessing the database inside the app and you might be um not be able to actually find your request there that might throw an error so for now at least let me just print error.localized description but let me just go in here basically we are asking the context manager would you please ask the database with our request and what is my request basically i'm just going to fetch some title item so basically let's do let's do that so let me just try to convince the manager so that he can like access the database so we're going to be saying try like context dot fetch and please fetch the database with the request that we have over here and i believe that you're going to be getting us back like some titles and those titles are basically i'm just going to pass those back to you know um the result that i have over here so basically let me say let and if in case of success i'm just expecting to have like a title item which is basically what we have over here and for the catch that might be an error so basically we're just going to say completion dot failure and over here i'm just going to pass the same um operation or i'm sorry the same error that we initialized earlier so maybe um database error dot fail to save data or basically we can just have like another case so case failed all right so fail to fetch data and i can actually pass that over here so fail to fetch data so right now we have our um fetching request done so let me just go back to the download controller over here and basically i just need to like make a new function so yeah basically we are creating multiple functions in this tutorial so private func fetch local storage for downloads and that is a mouthful um name for a method but you know it's pretty much describing what it does so let me just say data persistence the shared download no no download actually i'm just going to fetch or basically fetching titles from database and when you get the result i'm going to be switching on the result one more time so basically in case of success i'm gonna be having like titles that is going to be um basically uh assigned to my you know titles over here so let me just have like a week reference so that we don't uh be prone to any memory leak so weak self and over here i'm going to be saying self dot titles that is going to be equal to titles and also i just need to reload my um table views so let me just say like um self dot table view or download yeah download the table and that is going to be reloaded i believe that's it for the success let me just go in here for the failure i'm going to have the error and i'm going to be printing the error just like normal in like what we've been doing since the beginning of the program um basically i'm just going to call that function over here so basically fetch local storage for download and before i run this app i might be uh like i don't want you guys to like run the app and don't see anything on screen because we haven't actually laid down the uh title uh or basically the download table so let me just say lay down yeah if you did layouts of views super view the layouts of views download the table frame that is going to be viewed about and i believe that is going to be working and remember in the last time that we've run our apps so basically we have downloaded spiderman so i believe when i click on downloads yeah basically there's nothing in here so um yeah let me see what did i miss so okay um yeah let's just do that again so replace so um let me just download spiderman download and since it's downloaded to the database so i can go to the downloads i don't see anything so let me just close the app open the app one more time and go to downloads i still don't see anything over here and let me see actually why do i have something like this so let me just debug this really really quick so let me just make sure that i'm here so all right so okay we are here we have everything over there so i believe that we need to dispatch you know uh this inside like a synchronous or on the main thread to be exact so dispatch q dot main dot async and we are just going to get that over here all right so let me just hit build around let me see if i do have it um i still don't have it i don't see any reasons why we shouldn't actually have it so let me just debug this really really quick oh how silly i am so basically we forgot actually to add the table view inside of here so view dot add sub view download table and i believe that is going to work so let me just go to downloads and as you can see here basically we have spiderman downloaded twice so um yeah so basically we just need actually to implement one more function inside the data persistence which is going to be a delete function let me just implement that function really quick so let me just type func delete title with model and that is going to be a title item this time and over here i'm just going to say i just need a completion as well that is going to be escaping and that is just going to give me like um the same result that i had all right so the result is going to be um void and error all right so basically this is going to be the function that i'm going to get a title item over here so i just need to have like the same reference for the app delegate and the um database manager so let me just have that so um i'm gonna be asking the data manager or basically the database manager hey context please delete object and that is going to be the model and over here i'm just going to do a catch block so that i can commit those uh changes inside my database so right here i'm just asking the database manager to delete certain object and over here i'm just saying okay confirm deletion so basically let me just type try context.save and over here the completion is just going to be success which is basically going to be avoid again and for the catch i'm just going to say completion dot failure and let me just pass a new error over here so case failed to delete data and let me pass that over here so basically database error dot failed to delete data basically that's it all right let me just delete that comment i don't need that you understand that so um let me just go to my collection table view cell over here and let me implement one more function and that function is going to allow us actually to delete something from a table and that function should be called like commit i believe so let me just say yeah that's not right so um yeah i believe it's in the download controller i'm really sorry about that so um that is going to be commit editing style so i'm just going to switch on the editing style and case delete so basically if the user is attempting to delete an item basically i just need first to remove that from the table so table view all right so remove or delete i believe so delete rows at uh index paths so this is going to be an array of index path and for the animation i'm just going to say like fade i believe that's the one and over here i just need to delete that from the um from the database itself so let me just say data persistence manager share dot delete title with the model of titles all right so that is going to be index path dot row and for the completion i'm just going to say switch on the result case success basically i don't get anything so print deleted from the database and over here for the failure so failure let me get the error and again print error dot localize description i believe that is going to be working so um all right so yeah we just need to have like another case uh after the delete over here so basically that is going to be default and for the default i just need to break i don't need to do anything else so um basically let me just replace and hit build and run let me see that myself so basically i have two instances of spiderman over here so let me just you know use that and i can see here that i'm getting an error all right so invalid number of rows so yeah i might be you know like um making something before something so let me just go back to the download controller and i'm just going to delete that row after actually i like um remove that from the database so let me just hit build and run one more time and i believe that is going to work so all right so right so right now i know the error basically we forgot actually to remove that as well from the titles array over here so let me just say um titles dot remove at and i'm just going to pass in the index path the row i believe that is going to work uh yeah we just need to have like a week reference for the title so we excel and over here i'm just going to say self which is going to be an optional self let me hit build and run one more time and i believe that is going to work uh basically yeah we just need to yeah basically this is just ridiculous so let me just go back to download view controller let me just try to do this first so um okay i'm just going to remove that from the array and then delete that from the table i don't have anything over here so let me just download that one more time it's not there yet i'm just going to fix that really quick and then let me just open the app one more time we have spiderman let me just delete that and yes this is working so basically this is the way that we are going to be deleting things so basically we're just deleting it from the database once and for all and first we're just going to remove the title from the array itself then from the table view itself so now we have a problem basically whenever we download something in here basically we just need to have something that notifies the download um controller to actually fetch or basically reload itself so that it you know when you tap download inside the home view controller it's already there in the download tab so basically this is what we're going to be doing right now using something called the notification center and that has nothing to do with the notification center on your device basically that is pure swift thing so basically um we're just you know or i'm just going to show you how that works so um let me just go back to my um all right so collection table view cell and over here once i'm done with downloading to database so let me just go in here in case of the success and over here i'm just going to say notification center dot i believe default and here i'm just going to post a notification so let me just do that so post all right so basically let me just put post a notification i'm really sorry so post a notification with a name so um ns notification name so i'm just going to pass in here something like down loaded so basically i'm just going to post uh a downloaded notification across the app and over here i'm just going to pass nil i don't need to pass anything else so whenever the title is downloaded i'm just going to notify everyone who is listening to that notification so i have completed my download or basically download it all right so over here inside the download view controller i just need um to do this so basically i just need to listen for the changes that happens so let me just say notification center dot default dot add observer and for the observer i'm just going to listen for the same name or of the notification that i posted which is basically downloaded all right and for the object i'm going to be passing nil cue nil and for the method that i'm going or basically the method that i'm going to trigger so basically that is going to be self dot all right and that is going to be um fetch local storage and basically that's it i believe we need to make a weak reference or yeah that is okay i believe so um yeah i believe that is okay so let me just hit build and run and let me see if i do actually have it so right now i don't have anything inside my downloads so let me just try to download spiderman one more time download over here and when i i and here we go boom whenever i go to downloads i have spiderman is waiting for me we can just try anything else so maybe the matrix so let me just download that and let me just go in here boom we have the matrix as well so basically i have everything set up i just need to have like a handler for that as well so let me just go back to my upcoming and for the did select at row i'm gonna be copying everything from here i'm gonna go to the download controller let me just paste that over here hit building right and i believe that is going to work so downloads we have spiderman let me just click on it and i believe that is going to take me directly to the um to the preview controller that we have over here so i guess this is going to be the last video of this series it's been too long and if you've been following the series up till now i can't thank you enough because you've been like a huge supporter for me so once again thank you so much guys i believe this is going to be the end of this series so again thank you so much for sticking around if you liked what you just saw please hit that like button and consider subscribing to my channel because that is going to be helping me big time and hit that like button you know that is going to help me as well with the youtube algorithm and let me just catch you in the next tutorials or maybe in the next series to be exact so once again that was armed please have a good day and stay safe