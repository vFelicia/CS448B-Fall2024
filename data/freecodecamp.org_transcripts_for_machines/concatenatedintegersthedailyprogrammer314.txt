Hey, free code camp. Welcome to another "The Daily Programmer" web series and in this video We're going to be talking about the problem three one four Concatenated integers posted on the daily program or subreddit, so let's go break it down on the whiteboard okay? so this concatenated Andrews problem is defined like so Find a way to concatenate the numbers inside of this array in such a way that you're given the min and the Max concatenation and what we mean by that we can just go ahead and write out all the different permutations of which we can concatenate these numbers together and Then find the number which is the greatest and find the number which is the least greatest So in this case We're left with six permutations where we start with the one we can start with the 9 or we can start with the ten Followed by the one and the nine or the ten and the one, ETC, and it turns out If you were to loop through all of these numbers and try to find the max our max number would actually become this number and Our min would actually just be the opposite of that So if you notice nine one 10 is our max and the opposite is actually just to reverse so 10 1 9 which is 10 1 9 down here So we've kind of made an interesting observation about this problem Is that the max is just a reverse of the min so since that is the case? It would make sense that if there's a way to sort this array from min to Max, so I'll just go like this If we find that array and sort in such a way We can just simply print out the man in the max by either traversing from left to right or right to left So in that case, how would we actually sort this array and does sorting the array actually work? So let's try to convince yourself that there is a way to sort this array in such a way that gives us our min to Max So it turns out if you wanted to have this array set up in such a way from N to max it would make sense that you need to start with the lowest number and That when that numbers can count any with another number it gives us the lowest possible number Versus contending with another number if that makes sense so again let's just go ahead and work this out Let's say we have an a here This is a and this is B those make more sense to have this B19 or does it make more sense to have a D9 one so if a plus b is less than B plus a we know that we found a good order, and we need to keep it there so just to say keep a as is otherwise if we have a plus b is greater than B plus a We need to swap the elements, and if they're equal, so if equal Keep the same and so what we mean by this if we were to check is 1/9 Less than 91 it is so we can just go ahead and keep these numbers as is and then move on to the next check in this case we actually have else here, and then we have else here, but it doesn't really matter because These won't equate the true unless the other one is false so in this case We know that one in one should come before the 9 let's move on and move the b over here So we're going to check the same thing is a plus b. Which is 110 less than B plus a which is 101 and It is not less than it's actually this one right here So we need to swap these elements because again it makes sense that we need it to become the minimal when concatenated together, so 110 Kind of should be swaps to be 10 1 So that should make sense again if you just follow this algorithm here we can just swap them or keep them the same as we iterate through our array and Then now that we've reached the inner day array here with the b. We can increment a And do the same check is 9 plus 1 or concatenate together less than 1 a 9 it's not It's this case. We're going to hit which is 91 is Greater than 19 so again. We need to swap these numbers because it makes more sense to have the one Concatenated with the nine versus the nine cat name with the one so we switch this to a one switch this to a nine and At this point. We have finished sorting the array so we can get rid of these little annotations that I added and Again if we were just to print out left to right so men So ten one and nine We got our men So if we were to print this out right two men are from right to left We are going to get our maximum which is going to be nine one tenth all right so one more time the recap is the problem can be solved by Sorting the array and the hard part is figuring out the function to Sort the array by and it turns out our function what we need to do is just take catenate a would be and then check if it's less than Concatenate would be with a so let's go ahead and implement this in Javascript, all right So in Javascript let's first declare a function, and I'll call it get min, max which takes an input as a parameter, which is just going to be that array of numbers and Then here we're going to go ahead and just call it So get nan max and it was going to go ahead and pass those numbers in and Just to make it simple. Let's just convert these all to strings I Know the example has as integers in the subreddit, but let's make it string so it's egypt for us and Then we can just go ahead and see Get the results And then we just print out the results here and just to verify that will just say results that man is equal to this string and Then results that max should be equal to This string right here. So now that we have a kind of a basic setup where we pass in an input And then we expect Amanda max for our min max function I was going to go ahead and return an object to the properties In and the property's max and we can just go ahead and just set those in null for now and then we can kind of work through one by one of how to get this working so the first thing for getting the men we First need to take the input strings and Then we need to sort them And let's go ahead and pass in some anonymous Callback function so Takes a and b as a parameter and what we need to do here Is actually really really straightforward and really easy to do instead of having that long drawn out if statement we could just return a Plus B. So akin technique would be minus b. You can cut in with a so this will give us a negative number if the a should come to the left of the B, and just give us a positive number if The a should come to the right of the beef So again if negative, we should keep it the same if positive We need to swap them that's kind of what's going on behind the scenes, but we're using Javascript Sort and not the manual Sort that I'd end the whiteboard So that we've taken the input, and we sort of them At this point. We can just call a reduce function Which again is going to take an anonymous call back function so a string value? and Then what we can do is just return the string and keep concatenated with the value So I can do something like that that oh yeah, Simon and then That should give us the min that we're looking for and if you saw at the moment. I put this comment here We go down here line 20. It's printing out true, and that is because Results if I were to print this out our Min is actually equal to what we expected So therefore this function is working as expected And it's the exact same algorithm that we worked on the whiteboard we have the input array And then we sort it based on that whole logic that we worked up and then We can connect them all together using a reduced function, and then that's printed out and verify against this expected output down here So the max we need to do is just reverse the array so if they reverse here and Then we can do another reduced function to just print it out So now down here. We can see on line 24 results it is printing out the expected results for Max and Min, these are both true So that way there we pretty much implemented the entire algorithm that we did in the white board Using Javascript, Sort method reverse method and reduce method and just a kind of bat take a step back because I did like the condensed Simplified version, this is very concise Instead what we could say is if a our pars end of a plus b is less than pars int a B plus a We could return a negative number and Then otherwise we return a positive number and then after the same return zero This is the exact same logic basically as this line 12 was The only differences, we're kind of actually writing out How it works and then down here? We see that. We're still getting true and the value still matched so obviously there's factoring is still working But this is kind of to explain. You know the whole algorithm that we did in the white board This is how you write it with the if statements, but a more concise condensed version would just be return a plus b Concatenated minus B. Plus a concatenated and that would give us the same result Alright, so that wraps up the concatenated Integers problem again if you have a different solution feel free to post it in the comments And it also liked this tutorial if you thought it was good, and be sure to subscribe to free code camp below alright Thanks for watching you