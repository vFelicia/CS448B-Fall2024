hello everyone and welcome to another episode of connecting the dots today on the show we're bringing in one of my favorite people uh kirk kemple kurt thank you so much for joining us today yeah it is an honor and a pleasure anytime i get a chance to talk to you is a good day so thanks for having me yeah i'm super excited so um you know you and i have a little bit of background we used to work together oh jeez oops did that thing where i forgot to mute in the other channel um story of my life geez so yeah so here we are we got uh we we you and i used to work together um you've you've worked at uh major league soccer you're currently working at apollo um i am i'm just super excited because you have one of the more interesting stories that i've heard uh in in terms of breaking into tech and and all of that but maybe we can start with just a little bit of background um so if you want to tell everybody kind of what you're doing now what where you are in your career right now yeah so right now yeah and i just i like to say yeah it's what the folks in the biz call it nontraditional background but uh yeah yeah uh yeah absolutely but right now currently i am a developer relations manager at apollo graphql uh so for folks who aren't familiar apollo graphql has a lot of like open source tooling and a platform uh that helps folks be successful with graphql surprise prize um yeah so that's kind of where i'm at now it's a very dev advocacy developer relations type focus role which i've slowly transitioned to over the last couple years um before that just uh you know doing a lot of uh development work and things of that nature but yeah that's where i'm at right now yeah for sure and so you know and you've you've grown from a position to you know you you broke into tech a while back how long have you been in the industry now oh so i got my first like professional you know job um uh 2013. so about coming up on like eight years in january it'll be about eight years yeah yeah so um so you know over the course of that eight years you've been able to go from your your first job your entrylevel job to where you're now a manager at a company that people have know the name of um you're you're in a position to kind of hire you're growing a team that's that's pretty exciting stuff um and i think maybe a little unexpected given uh your background right so so maybe i think what would be really fun to talk about to start is where did you come from like what happened before you broke into tech uh a whole laundry list of things happened before i broke into tech uh you know it's always tough to like figure out where to start um but i'll say this i i learned how to code i started learning how to code uh when i was incarcerated i was actually serving time doing hard time uh it actually was really hard but uh yeah so um before that i worked a lot of odd and end jobs i dropped out of high school when i was probably about 16 years old i think my memory is honestly very fuzzy of anything before uh like my time in incarceration and the reason for that is drug addiction so i suffered from drug addiction i was real deep in the throes of it from about the time of 14 years old until about 22 years old when i was incarcerated and yeah so i worked odd in jobs like line cook i worked for a general contractor for a long time did a lot of construction uh stuff like that uh and then yeah yeah that's pretty much the gist of it before that yeah then i did about seven years uh locked up and that's where i was actually introduced to programming yeah so um i'd actually love to hear about that like how did you get introduced to programming while you were locked up uh so one of the things that happened is like you know i spent about a year in jail um and i had a lot of time for the fog in my brain to kind of clear uh and so when i when i was before the judge and i got sentenced in there like five to seven years uh you know time in prison that was like a like getting hit with a hammer right in your chest and uh you know i i don't really remember what the trip like was getting back to the jail and all that i just remember that night just making a promise to myself i wasn't going to waste a minute of time i was going to take any programs that they made available to me i was going to do whatever i could to make sure that uh when i got out i would only be as far back um you know as set back as possible like yes i'm out of here but maybe i can learn some useful skills and some things to apply when i get out um so i just took a blanket uh uh offering of courses you know i got certified in hvac carpentry electrical work plumbing landscape design uh dog training um what else like all kinds of things literally anything that was offered a cooking program yeah and then uh so what happened was i had like no skill with computer so i actually started out taking like a course on how to use like microsoft office and i took a typing course and and these other type of things and then they offered something on networking so i started to like get into i.t and how computers actually work and how to build them and stuff so it was very cool and then uh just there was this uh one course intro to like either web design or web development i can't remember it was like in all caps on the certificate like just some like weird course and it was yeah it was html css and just a splash of javascript and uh that was i was hooked as soon as i i got my first hello world h1 and i hit refresh in the browser and i saw that update like neurons just started firing i'm like i know how the internet works like uh like i said in the matrix like i know kung fu you know it's like it was pretty cool nah that's great um well so that actually is really fascinating because i um i knew you had learned to code when you were inside but i didn't realize that you had also picked up all those other skills so when you so when you got out did you immediately go into web dev or kind of what was the path between between then and your first job yeah it was a very very hard path it was probably the hardest three years of my life honestly even counting prison time counting uh my time in the throes of drug addiction uh and the reason why is because i had accumulated a lot of valuable skills but uh when you are a felon nobody really wants to hire you you have a lot of other people who have skills as well so whenever i have to check that little you know are you a felon box or have you been convicted of a felony within the last seven years never get the call back never so yeah i'm certified hvac you know i i you know i'm trying to get jobs in welding shops and trying to get jobs i t anything like blanketing across i can't even work at target or mcdonald's like you know and and i think people uh just kind of don't realize like recidivism is so high because folks don't have stability when they get out they get out they want to do better nobody wants to go back to prison it's not like i was in there with a bunch of folks who are like [ __ ] oh sorry shoot as soon as i get out of here yeah oh you know i'm gonna go commit a crime and come right back because this place is fantastic you know that's just like not it you know uh and it got close i almost ended up uh uh going back to dealing drugs because i had no money i had no things but instead i said you know what like screw these companies um they're not gonna give me a chance so i stopped checking the box and what i would do uh is i would work at a job for about three or four weeks until they would do a background check and they'd be like you're one of our best workers but like we have to let you go because you you know you didn't check the box and i'm like well when i check it you don't call me back don't worry i've already applied to like seven other places so i'll go work there for a few weeks and that whole time i was just self uh selfguided learning right i was you know building things uh in in my spare time when i could uh watching things on youtube uh you know just doing a whole bunch of stuff so yeah uh it was pretty rough uh but eventually i landed a job at a company called golden mobile and uh yeah yeah and that was like my first breakthrough yeah was them giving me a chance it was cool but it was a really weird situation too because what happened was they hired me and i worked there for a couple weeks i was doing a fantastic job and like oh we totally forgot to have you fill out the background check here it comes right like here it is again every time it's always like the background check and uh yeah so you know i i i was like okay so i'm left with this choice like you know what do i do here right so uh i was working on this product i just like finished it like i was just like i did i just worked on it like all night i finished it and i brought it to my manager in the morning and i was like hey i completed the project this is the type of work that you can expect from me should you choose to let me stay on my background check you it's going to see that you're going to see i have a record uh i was like but because of that like i have a lot to prove you know and i'm really willing to work extra and it sucks that you you get kind of put into that situation and uh yeah so you know it's just like i had no choice but to overwork myself uh and do that and then it was just weird like they let me stay on but for six months i just felt like everybody was just like looking at me differently um it felt like i had gotten over on them i don't know and i think a lot of that was internal i was internalizing a lot of things stigma about people with records um but it was hard but it was my break it was the thing that got me in there it got me six months of experience uh and had a little something on my resume for you know to to move forward with but yeah it was took about three years from release to first job so so one of the things that i love to talk about on the show and that that i think is um is just so important to focus on is this idea that you know getting into tech is hard right and we're going to talk a little bit more about like how everybody watching can can break into tech a little bit later in the show but for now i kind of want to focus on this idea that like you you had to break and detect not with your technical skills but with a whole range of other skills you know that you had to there was so much perseverance and there was a little bit of kind of ingenuity or craftiness in in getting just through the interview process because you had to check that box um where do you feel like you picked up those skills like what what skills did you use that aren't tech skills that helped you land this first job yeah you you pick up skills from everywhere and i'm so glad that you bring that up because you know a lot of folks feel like if like we focus so much on technical ability that we forget that that's actually a very small part of the daytoday job like yes you might write a decent amount of code but there's a whole lot of other responsibilities and things that you need to be pretty good at in order to succeed right and so a lot of the things that really helped me was like working construction and as a line cook understanding how to prioritize and organize the workload and make sure that you're doing things in the correct order those are invaluable skills taking a large uh job and breaking that down into smaller pieces that happens every day in the construction world every day you know it goes from like yeah every day if you're framing a house you don't say i'm gonna frame a house it's like first we gotta lay the yeah yeah first we gotta lay down the foundation right we got to set everything up to get the flooring on then we're going to stand up some walls right and then we're going to we're going to uh you know we're going to start working on the second floor and it's like you work up and then it's like eventually before you know you got a roof but you don't start like we build the house right you break it down into its tiny ittybitty pieces and also i learned a lot of valuable skills about working with other teams other people so as a framer we have to work with the plumbers we have to work with the electricians understand their needs making sure that our part of the job is done in time so that they can come behind and do their part of the job so invaluable skills you learn the same things in the kitchen uh if if you want to see orchestration like at its finest watch line cooks because when you have like an order of you know like a 10 people order come in and everything needs to finish at about the same time and they have different you know different needs as far as like where it's being cooked for how long it needs to be cooked three items on the menu might be the same thing but needed to be done at like different uh temperatures you know we look at like steaks or burgers right and it's like you you have to orchestrate all this not just within your station but with the rest of the team and if you're not communicating you're never going to get that done uh it's never going to be right if you're going in there and you're like well i'm just going to worry about just my little piece and forget the rest like everything's going to fall apart you know you're not going to you're not going gonna succeed in that role uh so i think things like that are extremely transferable yeah and then that kind of br yeah yeah it brings me to my next point which is empathy and understanding uh and this was something that i really started to uh uh internalize and and realize in my time incarcerated uh just understanding like that your perspective of the world is not the center of everything it's not the default that lots of other people have lived experiences uh that are very different from yours and thinking about others whenever you're doing something so that was a huge thing to learn and then lastly uh understanding uh folks like investments in things and then just kind of like being able to to kind of understand how people are feeling like in a in a given situation like in prison you have to know whatever what everyone around you is thinking 24 7. you never get to turn that off right like i need to know if the person next to me has malicious intent i need to know if the person on the other side of me might like be suicidal like there's a lot of like interesting uh dynamics there that in order to just walk through you have to literally know how everyone around you is feeling you have to start learning body language how to pick up on micro cues and micro aggressions understand uh when is a appropriate time to approach folks and when not to and i think like of all the skills that i've learned that has been the most valuable it helped me the most in my career and like what i mean by that like a like actual situation that i can compare in the tech world is let's say uh it's coming up for review time and i think somebody on my team should be getting a raise right like i'm ready to make this case but i kind of want to like start talking to my manager about this now if i walk up to my manager and i can see that their heads down working on something or maybe even slightly frustrated or something like that like it's probably not the best time to be asking these type of questions i one i need to be able to get their full attention and two uh i want to catch them uh when they're probably in a much happier state right like i don't want to to you know you want to be able to like have have as good an opportunity as possible and so sometimes that's reading body language understanding what people's you know uh responsibilities are what their investments are like what you know what are they trying to get out of this and and how can you help show them that by doing this they're going to achieve their goals as well so just understanding people is like paramount you know the more that you can work on that the the better you'll be yeah and and you know when you when you said that i just it kind of connected a couple dots in my head where i was thinking about like you know that that's actually one of the most valuable skills i've seen when you get to any team of a bigger group than you can have a single meeting with right so you know once you cross about 12 suddenly you're not having conversations where everyone is on the same page now you're having to have conversations where everybody's got their own sliver of the larger picture and what i think is really interesting about that is that where empathy plays into that and where being able to read a situation or understand someone's motivations like if i want you know if i if i'm a engineer and i want to convince the product team that we should build something a certain way i shouldn't go make a case for why it's a great technical solution that's not their interest that's not their motivation instead i should be as you said think about what they want think about what their concerns are what's stressing them out and if i can frame my technical solution in a way that solves their problems i'm so much more likely to get that decision adopted um 100 100 know the stakeholders and know what their investments are if you're armed with that information it makes it so much easier to to bring up points and to uh raise uh the right questions or the right statements or solutions because you know what everybody is involved in this for and why they care about it empathy right it always comes back to like communication empathy you know those are the to me the most valuable skills that you can possess across any job honestly absolutely especially in tech as well yeah if you're going to work with people being able to read people is going to be like number one no matter what the the underlying job is um yeah and it's yeah but we have to be careful because like there are a lot of folks who that doesn't come as naturally to uh so um you know luckily that is something that i've been able to develop i also did read a lot of books on on these exact topics and stuff as well uh yeah same yeah so it is a a learnable skill you know it's not just either you have it or you don't um uh but yeah there's a lot of folks who um you know might not be as like emotionally attuned and so you know we have to you know uh preface that yeah it could definitely be a lot harder for folks to achieve this but it's definitely a valuable skill if you can get yourself there so you just said something that i'd love to dig into a little bit and i i know that we've got questions coming from the chat uh quincy's doing a great job of cueing those up and we will get to those but uh i want to talk a little bit about this um you said it's a learnable skill and yeah one of the things that i find most fascinating is the way that individual people go about learning so when you're up against learning something that doesn't come naturally to you so for me learning how to have those conversations with people how to be empathetic that was not natural to me it was something i had to put a lot of work into um when you come up against something like that what is your preferred way to learn a new skill well that's really good and it's uh actually kind of situational but i would say most things uh i am more of what's called like a kinetic learner i learn best by doing um and so i'll take input from multiple different avenues whether that be like reading listening to things watching other things but until i start to do it myself it's very hard to put into place um so depending on like what the skill is it can be hard to get yourself into these uh situations so for me when it was uh uh you know i was kind of like forced into learning this because i was incarcerated so i was actually thrown into these situations uh every single day uh which made it basically impossible to not be practicing it but you still have to be very careful so what i would just start doing is applying this to my everyday life and what i mean by that is like having empathy is something that isn't just necessary in in like business communication it's very um uh also very important inside your personal relationships right so i would start applying these practices like okay am i listening more than i am speaking right like i start taking the parts out of these books like the things they want me to try uh and i would essentially just like break that down and just focus on little bits of it and try to apply that until it becomes muscle memory and move on to the next step so in the first case do i listen more than i talk when i'm interacting with folks that's something that i'd like to focus on once that started to become natural the second thing would be okay am i understanding their investment in something like if they're upset about something like do i really know why like yes my friend is upset but why are they upset right and it's like trying to understand that then i would start moving on to things like body language here's a really fun fact um when you enter into a room and you see somebody that you know um and this doesn't mean like whether they like you or dislike you but you can generally tell whether or not they're like excited by your presence because in some form or fashion they will fight gravity that could be raising their eyebrows the shoulders coming up exactly a smile where they actually doesn't go back but it goes out a little they wave literally anything where they fight gravity because gravity is always working against us so if i'm willing to work against gravity that means i'm actually interested enough invested enough to show you that it's subconscious but like 99 of the time it's on point yeah it doesn't mean whether someone is happy to see you or not but if you're my manager and i walk into the room and i see those eyebrows go up it's probably a great time to ask you a question about something that i've been wanting to run by you sure right yeah whereas if i get the straight face and i can tell you're somewhere else and you're not focused it's probably not the best time uh and so that's just like yeah yeah there's like one you know a little bit of it but yeah it's like kind of like understanding that stuff breaking things again breaking things into smaller pieces attacking them one at a time until you build it up is what you would consider to be a base skill that you now possess and moving on to the next thing absolutely um so i so i guess maybe like a good a good thing to move into here is a lot of the folks watching right now have been asking a lot of questions about how to get their first job and so um i've got a few questions here the first one is from mila and mila's asking about um what certificates should should she get to get into the world of software programming and coding um do you do you think that certificates i mean you so you mentioned that you got certified in a handful of things when you were inside um what role have you seen certain certificates play uh in i mean you're hiring now right so like what are you what are you looking for in that yeah yeah i'm hiring now i've been a hiring manager before so there's one thing that i want to uh state here real quick too which is like i have a privileged path into tech and so uh my path and what i've done you know uh will work um but for a lot of folks you know it's just it's a true statement it will be a lot harder for other people than uh myself to break into tech even with a background uh you know we have a big problem with that in the tech industry and uh so i just want to preface that but yes there are still a lot of things that you can do that really do stand to help you stand a better chance of like breaking into tech and uh i think certificates can play a role i think it might be less about certificates and more about until you have work experience you need something to put on a resume people need something to take a first glance at right and now this could be certificates it could be a portfolio that you've built you could take on some freelance projects if you can do that but ideally you want something that you can put right at the top of your resume that's really going to help people get an idea of your current level of skill right and again well this is very hard i i what i would say on top of that is that it's it's your current level of skill and it's also the job that you want like i what i've noticed is that um people tend to get hired for the skills that they put out there so um a lot of times when someone has a broad variety of skills there's a then art of like elevating the ones that you want to get hired for and potentially not emphasizing so if you're currently working in it or like systems networking and you don't want to do that anymore you want to do software you should highlight the certificates around like software engineering and and maybe bury the it stuff because you don't want to get hired as another in another id role absolutely so something yeah i'm so glad that you brought that up so i just want i'll finish this thought real quick and then i want to jump directly into that uh there's studies that show when folks look at your resume they go top left just below that to the left and then over to the right and then everything else below that kind of falls off right and uh i've tested this against myself i do the exact same thing those are the spots that my eyes get drawn to first and that's where people are going to look so i always recommend a two column layout with your most important information your most important experience whether that is a certificate a particular project that you're proud of the one thing that you really want to showcase and then to the right like the next important thing that you think is ancillary to that that will help you get that done i have found this to be an invaluable uh tool to help and then actually yeah to speak to your point not only will i bury things that are irrelevant to the role that i'm currently working at or working towards but i will also put together multiple versions of my resume this is something that i do very often uh maybe i'm willing to take a a role in dev advocacy and a engineering role or particularly a management role you cannot create one resume that you'll be able to submit for all those jobs that are going to highlight the right things because right another piece of advice is keep your resume to one page people rarely go to page two and anything that's on there might as well as not be on there uh and because you only have that one page like you said it's so important to highlight those things for the job that you want so i'll have different cover letters and resumes for each type of role that i'm going to know that i'll apply for it's a little bit of extra work but i find that it really lets me focus in on the things that are going to show off what makes me good for that job yeah where this starts to differ is because if you're just breaking in uh to tech you're not going to have a huge background of work to pull from but you have an entire life of experience to pull from yeah and just how we were talking about the transferable skills you know working at mcdonald's you learn a lot of very valuable skills and it's if you you know when you're putting that on your resume listing out the things like coordinating uh you know between uh multiple uh teammates to to deliver uh you know uh meals you know uh on time right and properly organizing and prioritizing you know uh balancing workloads between you know what i'm doing here or doing there maybe you took on some management responsibilities in these roles like that's all very valuable so don't discount your your life experience it's it's absolutely i look at that yeah my my first job uh i got because i had you know graphic design work and and print printing press preproduction work and all of that helped me build enough like adjacent experience to be able to convince someone to give me a shot on the on the real job right um yeah i think that that's uh that's a really really good point like and the other thing too is you know a certificate you can choose which certificates to get you don't have to um you don't have to do that with an employer's permission you don't have to get hired you can take that certificate similarly with projects so there's a question from humza about how good is the approach of learning a skill by doing projects right away um and so i'm gonna i'm gonna pass this to you but what i'll say up front is if you are trying to get a job doing animation or if you were trying to get a job as a full stack engineer build projects that do that work because i know for me like if if i see that all the work you do is in the service of the job you're applying for i know that you're interested even if it's your first career right um and so yeah so what what uh what would you recommend for someone like certificates projects something else should they freelance where where should people go that's that's a fantastic question i think it is going to boil down a little bit to preference so um i do i do love projects because that allows you to generally create something that like you can mix in your passion so learning is hard and in order to stay motivated it's really nice to be able to mix in like a little bit of things that you like and enjoy uh and so when you learn by doing when you build projects like uh for me there's like a couple things you know that i really like i like longboarding um you know i dabble in video games and stuff like that you know i have like some other interested interests like around collectibles and fun things and like i can take any of those and turn those into a project right or build something around my interests and by doing that uh it's going to help me when i get frustrated you know hopefully that passion can be enough to kind of carry you through uh and see you through to the end it also shows through a bit of your personality which i think goes a long way and and people um i guess undervalue um it's okay to shine a little bit and and and have some individuality uh i like when i see resumes they don't have to be like you know this like big graphic design project but when it's a little bit different than you know just a standard like word doc with bullets listed out i love it because i get to like you know just get a peek at um uh you know someone like putting in a little bit of themselves into things and i think whenever you put a little bit of yourself into something you're gonna invest a little bit more in it and it's nice but i would also say it's like deciding on how you learn it you know some people like structure right like if you like school and you you learn well in a structured environment certificates are probably a fantastic way to continue growing and to build up something to put on the resume if you kind of like to do your own thing and just kind of build stuff and discover things as you go go with projects because you're going to be able to do that um freelancing can be quite a bit of burden because you also have to then understand the freelancing market nothing uh infuriates me more than folks who are branching out they get into freelancing and end up just with these like red flag clients like terrible clients you know and they you know i have friends going through this right now you know the scope creep the project grows it turns from a learning experience into like a doom project you know right yeah i hate to see that so i'm always a bit weary of freelancing but taking on small projects could be a good way and if you need money it's also not a bad option as well you get to add things to your portfolio while you build a little bit of of uh revenue so well and something that will happen whether you wanted to or not when you take on freelance work is you're going to learn things about management about planning about you know being communicative how to like tell people about setbacks in a way that doesn't blow up the relationship all those things those are very valuable skills um very valuable not a super fun way to learn them if you're doing it for the first time with a with a freelance client but uh you will build a whole different set of skills along with that absolutely absolutely but if i'm being honest uh you know to me i think that still one of the best ways this day and age to break into tech is to focus on building a community building a network a lot of folks called i like to say community network rings hollow to me community rings as something that is uh twoway right like you're helping others as they're helping you and learning in public learning in public is another very valuable way to do a lot of those skills that you just mentioned you're learning how to communicate clearly you're showcasing that you are able to break problems down distill them and share them what you've learned with others invaluable skills uh to have in in programming or in general uh and so you know honestly uh while you're looking for jobs you should always be thinking about you know what does my community look like how can i grow that in a in a healthy way right and you know yeah and you know because most of the times the jobs that you really are going to love uh and the the opportunities shine rarely come from uh not it's not always the case there's always exceptions but rarely does it come from you dropping your your application through a contact us form you know um a lot of times it comes fro from a network right like people they understand who you are in the community they've seen the stuff you're doing it lines up with what they're trying to do and then boom you know next thing you know you're interviewing at this this company so it's always something i i recommend too so uh there's a couple questions that are really closely related to this especially given right now where everyone's on lockdown due to coronavirus building a community getting a first job a lot of the advice that that we've seen in previous years is that people getting into their first role should not do it remotely um and i think that there are some arguments there you know there's good reasoning for that like when you are new to something it's really nice to be able to sit next to somebody to have that support network to be surrounded by people doing the same work but that's not an option right now so for uh let's see both uh daniel and hamza are asking what how should that be approach for people who are you know we have to build a community remotely we have to get our first jobs remotely what strategies would you recommend for folks to um to succeed there yeah that's wow what an amazing question yeah so i think the first thing that you want to check and it's it stinks because you know when it's your first time you're not really in like a position of power if you're already in a job and you're comfortable you can be a lot more nitpicky with the companies that you're going to interview with or jobs that you'll take as the first time it can be hard but i want to say you want to look out for like uh what folks will call like red flags around like remote work and condition or is this a company with a track record of already working with juniors or will you be the first junior developer to come on that's one question alone that if you get the answer to that can be a strong indicator now if you are the first junior but they're a company who's already been working remotely for a lot of time and they've built up those practices you're probably safe but if it's a company who's just got gone remote because of covid and they don't have a track record of onboarding juniors already it's probably going to be pretty difficult doesn't mean it won't work it just means that's something that you might want to consider and i think uh this circles back to if you get in a habit of learning in public uh one thing that's gonna come along with that is asking a lot of questions you know as you learn in public you're not just gonna share what you learned but you're gonna start to ask your community questions to to learn better and if you find yourself in a position a remote first company because it's your first junior development job over communicate and i you really can't over communicate but a lot of folks want to hold back for lack of feeling you know like they should know something or they should uh uh not you know save questions and ask them all at one time i say don't make find find the people in the company who always seem awesome about answering your questions there's going to be people in any company no matter how good or bad it is that like to help folks find them and ask them just constantly ask them questions you're not bothering them they love it that's what they're there for they want to help you uh you know so i would say definitely communicate early and communicate often and this goes like even further don't write up this whole pull request right and make a bunch of changes push it and then ask for a change right as soon as you create the branch push it up and open a pull request each commit push that up and ask for feedback early and often that is like my number one piece of advice for folks and and remember you can set a pull request on github in draft mode which means this isn't ready yet i'm just i'm working on it and that lets people see what you're doing uh which i i i love that advice personally like one of the things that i really enjoy about people who i'm i'm working with in a like a lead capacity where i'm kind of helping level them up is when there's that constant seeking of feedback if if somebody sends me 1500 lines of code and they're like can you give me some feedback on this i'm like i mean i can but it's not going to be nearly as good as if you'd sent me 100 lines of code um and so it's you know it's definitely one of those things that you can optimize your environment right if you if you think about how it would feel to be on the other end of this like would you rather somebody has a problem doesn't tell you about it gets the company in trouble and then like comes to you later and says hey i know that our team's on the hook for this thing but i didn't do it because i wasn't sure how here's my problem i know it's due today or would you rather somebody said hey i need to work on this and i'm not quite sure can you help me unstick this so that i can get started right there's there's that like i would much rather get asked early so that the team gets all their work done on time right absolutely yeah without a doubt it's just the cognitive overhead uh it's a twoway street like if you build things up it becomes a large investment and that yes and it's very hard for people to have the resources or energy to respond to that large investment whereas if it's coming through bite size and like a constant flow it's a lot easier right like the feedback loop is much smaller much tighter it's i can answer one or two questions 15 times throughout a day much easier than i can take an hour to two hours to like review like a very large pr if that makes sense that absolutely makes sense yeah i mean and that's like that's how i think a lot of us function is as you know senior devs managers we we get ourselves in a position where we try to be quickly doing little bits of work to move the whole team forward if we have to drop everything to focus on one effort the rest of the team bottlenecks up um and so that's you know it's it's also like these are the skills like these are the things when i see somebody learning the skill when i see somebody getting really good at sending pull requests at you know sending like small scopes of work instead of sending me everything all at once that's when i start to think like this person's get they're getting it they're going to go somewhere like let's get them on the fast track right so it's also a great way to advance in your career absolutely uh yeah because yeah it just showcases that uh you're starting to understand you know feedback loops what it means to think about other people's time in relation to the things that you have to do um and it also just shows yeah your willingness to communicate and it's just it's just such a valuable skill you know absolutely i can't state it enough but yeah and so that that willingness to communicate i also think builds confidence it give it when you ask a question and you get an answer that's a that's a small confirmation that says i'm this is okay and when you do that a lot exactly it builds that confidence it gets that ball rolling and actually i'm going to ask a question to you uh from elliot uh because i think it's related elliott says i'm hitting a lot of walls where i get to the final round of an interview then i keep getting told that i'm too junior or need more experience what would you advise for someone to do in this position yeah uh that's really tough so honestly elliott i feel that that is more on the company that it is on you uh i feel a lot of times companies position roles as junior and then you look at the requirements for the role and what they want out of it and it's not quite there um but yeah it is it's difficult but if you want to improve that there are a couple things that you can do and so to me this comes back to like projects right um this is why i like projects actually that's how i got the job at major league soccer um i had started to understand uh uh that like i was pushing you know outside of front end rolls a lot of stuff i had done previously had been front end i got very curious about like the uh api gateway layer and like back end work and kind of what that looked like so i set up like a microservices architecture i took some time i tried to invest in docker and understand like how you would architect having multiple different apis all talking to one and then turns out that was like exactly what major league soccer was looking for right they wanted a full stack developer who knew really how to work from the api gateway down but understood at least what was happening a little step further so i think it's uh it's also a matter of being able to talk about things and so um i always like to think about things as like drip learning like you hear about different learning styles like shallow learning which is like you know know a little bit about everything or t learning know a little bit about everything dive deep in one thing i'm a big fan of drip learning like only learn what you need to know to do like the very next step and sometimes you'll learn a little bit and sometimes you'll get down further but you have this shallow pool and some things just to kind of drip all over the place yeah and a way to achieve that a really good way to achieve that is to focus on hows or sorry on whys over house and what i mean by that is like when you hear about a new framework instead of stopping everything you do spin up a new project and start building something with it like savelle or something like that step back and say well what is the problems felt is trying to solve why was it created you know what is the difference between it and react and why would i pick it one over the other that information is way more valuable because anybody's going to be able to pick up spell and eventually learn how to use it right not everybody understands why you pick spell or why you would want this or why you pick a microservices architecture over a monolith and what are the benefits of those two things right right and so i think i you know i spent a lot of time there's something like thoughtworks has something called a technology radar uh which is a really good like quarterly newsletter where they cover all of the technologies that are like emerging uh and what they were built for and the problems that they solve and stuff like that and sometimes your lack of experience is really just like they want to hear like more uh you be able to speak more capably about given topics it doesn't necessarily mean that you don't know something enough right it's just that you know you don't know the things you need to know to know what you would need to learn god that's a lot but that that's essentially what it is well and and you know i'll i'll add to that by saying one of the things that stands out to me when i'm interviewing somebody early career is whether or not they give a strong impression that like i don't expect juniors to know much like we're we're hiring them in their first role like you're you're supposed to have like bare minimum we're going to teach you everything else so i'm not looking for them to know everything i'm looking for them to give me that distinct impression that they know they don't know but they're very sure they can find out and and if i get that sense that that someone is really like the selfstarter they are they're confident in their ability to learn they believe that any knowledge is accessible to them if they get the time and energy to work on it right those are the types of people that really stand out to me and i think that goes back to that confidence right like if if you come off as not confident in your skills you're early in your career you don't have to be confident in your skills but be confident in yourself be confident in your capability to expand and grow that i can smell that a mile away and i'm always looking for people who do that absolutely i'm looking for that all the time as well because honestly when you're junior we don't have a lot to go off you know there's not a lot of work history for us to examine uh so we're really left with behavioral questions right like do you understand uh how you would do things differently given a reset on certain situations and they don't have to be related to code right but it's like all we're left with is like do they understand uh ways to learn quickly right not necessarily understand and master something quickly but how to get the information quickly that's the difference um and yeah and and you know behaviorally like are they comfortable with critiquing themselves retroing the things that they've done and able to understand how they would change things to do better next time and those are invaluable if you if you present me with those two things in an interview it's like yeah i absolutely want you on my team this is somebody who's going to come in with a fresh set of eyes they're going to look at the things that we've got going on you know they're going to be offering us already insightful information from the start i can trust that as they learn and grow they're going to be reflective of that and figure out what they can always be doing to improve and they're going to go out and seek that information now i'm going to dump it on to you like just keep anything onto you that you want but it's still very cool to see uh people have the skill and ability to do it to themselves because you know what there are some times when maybe you know you can't get to that question fast enough and they're eager to pick something up and boom off they go with it yeah and that's growth right like when what i love to see is when you get somebody who comes in and they start out they're junior they're fresh they don't know anything but as you dump that information on them you never have to dump that same information twice you start to see them answer questions and the things that you've taught them they're they're quick to step up and and pick up those issues and that to me is those are the signs that really show me that somebody's gonna grow well um and i you know i'd love to i'd love to see that uh so i absolutely i have another question for you that uh we're gonna loop it back a little bit because you made a mention about you know people who are looking for their first careers they don't have the luxury and the privilege of being as choosy as someone who's later in that program and and they might just have to take the job that's available not the job they want so uh so turth is asking if you interned at a company that doesn't pay well but you're getting exposure to to frameworks and tools and and practices um should you should you be looking to quit should you be looking to do so like how do you how do you take that situation and turn it to your advantage instead of getting stuck yeah and again this is really tough because it depends on where you land right but absolutely one thing that i really appreciate with different companies is when uh you have a little bit of time to learn actually so here's something that i do um i have like a 70 30 rule i dedicate 70 of my time at a job towards the actual job and the goal at hand and i dedicate about 30 sometimes a little less in in crunch time towards growing and learning as a developer so even if the time isn't technically allotted to you but kudos to all you companies out there that are giving folks the ability and time to learn uh we appreciate you uh but yeah if you're not giving it you have to kind of give it to yourself uh so when you join a company and you're starting in that role never come in there at 110 because what happens is that becomes your baseline and as soon as you set a baseline of 110 that becomes expected of you and then when it becomes crunch time now they need 130 but you've got nothing left to give right you're already at everything so i really come in at about 70 80 productivity and i'm always dedicating the rest of that time to learning and to growing and then leaves me a 20 bandwidth to push in crunch times when we really need to get things done it's going to help you prevent burning out spectacularly uh and it's going to allow you that time that you need to always be growing and doing your career now you might find yourself in a situation where it's kind of too late you've already been given 110 uh and you don't really feel like you're growing and then this comes really down to like a worklife balance time uh management situation where it's like you have to figure out a way to advance your skill set without you know again burning yourself out hurting yourself some things that you could do or trying to switch teams maybe the team that you're on you feel like you've really learned it you're kind of stagnating there are there other teams in the company that you could join who are doing some of the things that you're interested in maybe that's like moving from a front end to a back end role or like you know trying to branch out there uh getting involved in open source like or uh could be a good way if you have the bandwidth to start experimenting with things on a small scale uh meetups like now everything is virtual so meetups and and talks are a good way to get exposure to different topics that thoughtworks technology radar will kind of keep you abreast of everything that's going on and then just dabble but just be careful be very very careful of burnout the first like two years of my development career and it really did took its toll on me physically and mentally i was burnt out suffered deeply from depression i was going like 18 hours you know a day super unhealthy super super unhealthy i was just in a place i was in a digital agency after gold mobile i went to my first uh digital agency role in new york city i thought you know i'd made it i'm in the city ma and uh so yeah yeah uh i thought i'd made it but anyway it turned out to just be like a developer mill um you know they they impossible deadlines the technology stack never changed so just after you know six months it just felt very like repetitive i felt stagnated uh and it was hard it was hard to do that so i just like you know i would spend a little bit of time i had on my commute just trying to understand uh the housing wise and yeah so it's just like you know it's about optimizing and again focus on house or wise over house because your next role you'll probably learn those things like i i might not expect you to know docker but i would expect you to understand what docker is and why we would use docker right and like i won't expect you to you know know the particular frameworks that we're using for an api but i would expect you to just be able to talk about apis in general and like you know some some basic questions and and uh problems that you might face when building an api so it's like really just like knowing um why someone picks a technology or would choose it is in my opinion way better than being uh very deep and specific into one thing it also kind of funnels you into like uh you know a particular silo right like that's all you're known for right like you know you become d3 person or something like that maybe you want to learn something else but that door kind of gets closed off for you like you were saying if you have it on there all anyone wants to send you is it jobs right um yeah when you establish expertise that's that's the thing like if you if you become the expert on a thing then people are gonna naturally send you that work because you know what we're all looking for is someone who's going to make our problems disappear so if i have an i.t problem and you show me that you're an i.t expert that's what i'm going to give you that's what you're going to do so if you don't want that work you kind of have to keep that off the resume you got to keep that off the off the radar you know yeah i would say if you have the ability to my biggest takeaway would be let you know if you have a good relationship with the person who is your manager in turn or otherwise let them know like let them know the problem that you're facing hey i feel stagnated right now if they are not receptive to that then yeah you definitely want to be somewhere else anyway right but now there's no guilt there there's no nothing you you've done that right but if you're underpaid let your manager know right like you know if they try to help you out and work with you awesome if they don't then yeah it's time time to look elsewhere so then circle back to the beginning of setting up a resume for the job you want figure out the the whys of those technologies and now you're armed to go into interviews and talk about them absolutely all right i'm going to ask you one last one because i think this is this is going to be a good point to end on um so blahya asks how do you learn to code and program if you don't know enough about computers uh it looks like while you didn't grow up with computers and i know that you also didn't grow up with computers i spotted that question in the chat i was going to ask you if we could get to that in the end yeah so i never had a computer in my home uh growing up uh and i would say like i'm not normally one to say like learn the fundamentals uh you know before you go but having a basic understanding of how computers work being able to like use like a keyboard like i forget what they call it like the the proper you know typing like i used to two fingers like this and like if you're in a situation where that's all you can do then yes of course that's all you can do but if you're capable absolutely like learn how to type uh so that you don't have to be looking at the keyboard every two seconds like once you understand the basics of computers and you've internalized that it opens up the ability to focus on programming right because you're right now you're trying to learn two things at once right and that's always going to be a problem so let's break it down into smaller pieces let's attack the things let's put them in order and let's attack them one by one get comfortable on a keyboard then get comfortable with how computers in the internet works and you don't have to go deep again again just why how does this work like the basics of the internet how does that work and start from there and then get your way into programming it doesn't mean you can't be reading blog posts about programming and doing stuff like that and messing around but invest the time up front to really get comfortable with computers because you're trying to make it your fulltime job right and again you don't have to know you don't have to know how to drive a car to be a mechanic at all you really don't like you could be an amazing mechanic and not know how to drive a car um but you can't be a mechanic and not know how to use your tools right and i think that that is a difference right like in this case a keyboard is a tool and you got to be proficient with it if you want to be a good developer one way that i've that i've heard this described that i really like is um you know when you are writing code you you're not just thinking about you know you're thinking about the problem that you're trying to solve you're thinking about the the code that you're writing you're thinking about what you're typing into the keyboard like you said so when you see somebody who is really proficient at this they've moved to what is called unconscious competence right where they're no longer thinking about that and and we're all unconsciously competent at something maybe we can you know sing a song without thinking about the melody maybe we are you know we can uh like juggle a soccer ball maybe we can you know anything like you any sports that you can play without really thinking about where you're where your body is moving um any anything like if you can type without having to think about your fingers and you can just say you know you're you're typing like you speak each one of those things removes a cognitive load from the work that you're doing and it lets you just play and that's where excellence can really be born if you have to think about every step in the way you're just you're gonna have so many blockers it doesn't mean you can't but it's gonna it's gonna slow you down it's gonna slow you down greatly it's gonna frustrate you uh you know it's it's gonna force you to split your the the like the cognitive load you have in your head amongst multiple things yeah it's like it's you know i'm not going to go too deep into it but the thing i love about types types allow me to take so much state and throw it out of my head and rely on something else to provide that information for me so i can focus only on the problem at hand not remembering what if this is a freaking string or number or whatever right like i don't have to worry about that i can just move forward focus solely on the goal yeah so as many things as you can turn into what did you call that sub unconscious unconscious competence i love that unconscious competence all the things folks yeah and this is a it's a it's a theory that you can read on if i can't remember who came up with it but it's uh like an educational theory when you first start learning something you go from unconscious incompetence which is where you don't know that you don't know something then you go to conscious incompetence which is when you realize that there's a thing you don't know and if for somebody who's just starting programming that's probably where you feel you know that you could program but you're not sure how to make it happen then you study you train you get to conscious competence where if you think about it if you focus you can do the job and then where mastery comes in is unconscious competence where you're able to do the thing without thinking this is where somebody who can play a piano by ear or somebody who you know you like anything that you can just do if you can walk and chew gum and you don't have to think about either of those things you are unconsciously competent at walking and chewing gum right absolutely um well kurt so we are we are at the end of our time so thank you again so much for sharing your story i know that uh your time is super valuable and and i know that like what a hell of a ride you've been on so thank you again for for taking the time to share with us today yeah thank you for having me uh time might be valuable but i can't think of anything more valuable than giving this information to the community i'm available on uh twitter uh at kurt kemple just my whole name together if you have more questions follow up hit me up i'll try to get to them as soon as i can i hope you all do amazing things i can't wait to see what you do and yeah thanks again for having me yeah thanks again to free code camp for hosting this uh if you want to see more live programming i run a show twice a week called learn with jason we've got an episode coming up on tuesday you can find that at learnwithjason.dev you can find me on twitter at j langsdorf jay and my last name langsdorff uh kurt thank you again chat thank you for hanging out quincy thanks for hanging out in the chat and moderating we will see you next friday with another wonderful guest we'll see ya later everyone