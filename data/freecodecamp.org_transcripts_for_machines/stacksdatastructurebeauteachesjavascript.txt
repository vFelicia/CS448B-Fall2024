a stack of books is a great example of the stack data structure if you make a stack of books the topmost book in the stack was the one that you put there last if you remove that book from your Stacks top you would expose the book that was put there before the last book Stacks are a first in first out type of service the last book you put on top of a stack would be the first book you take off the stack another example of a stack is your browser's back button if you look up here we just opened up facebook.com so we add it to the top of the stack of sites that we've already visited previously which is stack. push push is one of the stack methods you push Facebook on top of the stack this middle is what it looks like when we are visiting Facebook and then this bottom image is where we press the back button to navigate back to Twitter so we pop off the most recent URL and we just leave Twitter at the top of it the functions traditionally provided in the stack are push for placing data onto a stack pop for removing the top element of a stack Peak for displaying the top element of a stack and length or size for determining how many elements are on a stack a nice feature of JavaScript is that the array object already has all the functions we need in order to use it as a stack so you could just use an array as a stack I will show you how to do this us using an array but then I will actually create a stack class and show you how that works too I'm going to use an array stack to find words that are palindromes a palindrome is a word that is spelled the same forwards and backwards such as Bob b o b or race car r a c e c a r okay so we have VAR letters equals an empty array and that's the stack because remember I said arrays are have all the functions of a stack so look at how this program works first we're going to set a word to be anywhere we want and we're going to choose race car which is a palindrome and then we are going to have a variable which is just a a empty string for RW or reverse word we're going to use the stack to fill up the RW variable with the reverse of the word variable the first thing we're going to do is put the letters of the word into the stack so we have a for Loop here and we're going to start at index zero and go to the last IND index of the word length so an index in a string is just which character we're looking at so we're going to do letters which remember is our stack. push the stack function where you push something on top of the stack and we're going to push word index I so that's just going to take this for Loop is just going to take each letter of our word because we have index zero index one index two each letter is a new index and push it onto the letter stack now we are going to pop off the stack in reverse order so we can create the RW variable which is the the reverse of the word variable another for Loop and now we are going to have the RW and we're going to add one letter at a time from the stack by popping off the top letter and because they were put in order they're going to be popped off in reversed order now we have a string that should be the reverse of the the the first word so word and r word should be reverse of each other now to check if it's a paland Drome we just say if RW equal equals equals worked it is a pal Drome or else it's not a pal Drome so let's run that and see what happens and race car is a palr but if we change that to free code camp and run that nope it's not a paland Drome okay that was just a basic use usage of a stack using an array now I will show you how to implement a stack in JavaScript so you can understand Stacks a little more you probably would never do that because you can use an array as a stack but this should possibly help you understand how Stacks work a little better so here's where we're going to create the stack which is going to be this function here we're going to have two variables this St count and this. storage now this. storage is an empty object and count is going to keep track of how many items are in the stack so here are all the different methods we have push this. push is going to add a value to the end of the stack you're going to pass in the value this. storage remember storage is the empty object at the index this. count we are going to add the value so we're going to put the value on the top of the stack or the end of the stack and then we're just going to increment count up one so now it's showing that we have another item in the stack the next function we're going to remove and return the value at the end of the stack or at the top of the stack which is this. pop this is going to pop an item off so if this. count equals equals zero that means there's nothing in the stack and we're going to return undefined because there is nothing in the stack once we return undefined we're not going to do anything the rest of this code here because we've already returned from this function if we're popping off something we're going to have to decrement the count so it's a count minus one so one less we're going to set the result to this. storage which is the object for our stack and at index this. count which is the last item in the stack and then we're going to delete that item and we're going to return result so you get the last item back but it will be deleted off of the stack and there's just a few more methods this. size is going to return this. count which is the number of items in the stack and then the last function is this. Peak which is going to return the value at the end of the stack but it will not remove it like pop so Peak and pop are kind of similar but pop removes the item and Peak does not remove the item so return this. storage and then this. count minus one um this. count would actually be the index one after the final item because what that's where you would add a new item but you would have to do minus one to get the last item and if you're peaking you do not want to pass in a value so let me take that that off there so you only pass in the value when you're pushing in something let's see how this would work down here okay we are going to create a variable called my stack which is a new stack which is what we just defined updator we're going to push one onto it to the top then we're push two on the top so it's just a stack with one and then two we're going to Peak and we're going to have to console.log this because it's going to just return the top number of the stack which should be two now we're going to pop off two so it's going to return two again but it's going to remove it and then if we Peak we should be back to one and before we run that I forgot these extra parentheses here because these are functions and you need the parentheses at the end of all functions so let's try that okay see we peaked at two we popped off two and then when we peaked again it was one because two was was removed now you can also add other things to the stack now we're going to push a string onto the stack and we're going to check the size then we're going to peek and we're going to pop it off and we're going to peek again so let's let's see what that does so we pushed one we pushed two we peaked which showed two we popped which popped off two we peaked again which showed one so there's only one thing in the stack then we pushed free code Camp the string and we console.log the size and now the size is two the stack is just one on the bottom and then free code camp on the top we're going to Peak which is going to show free code camp now we're going to pop which is going to pop off and show free camp and we're going to peek again and we'll see that it's just one on the bottom well those are the basics of Stack thanks for watching my name is Bo KS don't forget to subscribe and remember use your code for good