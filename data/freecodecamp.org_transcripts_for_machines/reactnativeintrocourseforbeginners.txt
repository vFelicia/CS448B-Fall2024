so what's going on YouTube my name is Meho alright we're gonna learn about react native what it is and what is used basically we'll just take a look at that in this tutorial only and just go over through some basic building blocks like doing basic stuffs like navigation and all transitions then some API fetching HTTP requests timers and all that stuff which basically you would need to actually create a working of functional react native application and so let's start from the first question what the heck this react native is many of you might know but some of you do not have any idea who I just stumbled upon here somehow on this channel and now are watching this tutorial randomly so for you guys what react native is is that it's a way to write crossplatform applications on JavaScript so if you know JavaScript then probably you can get started at react native immediately because what react native does is that it provides you a way to write JavaScript and then react native would turn that JavaScript into your native code it does not really turn that into a native code if you take a look at under the hood but let's just keep that abstracted and let's just as you that react native somehow does some magic and turn your JavaScript code into native code and basically once you're done with that your application actually wants native so it's not running into a browser or something which some hybrid application frameworks like ionic to react native actually runs native code on your device plus it's super fast to do it's super easy to learn you just have to learn JavaScript if you have already launched our script or you have been working with JavaScript for some time then you're good to go basically for Android and iOS now the downsides of react native is that basically you cannot read almost every app with it I usually prefer to go with react native for smaller and quicker apps and sometimes some big apps as well but react native I guess is not suitable for developing high end performance things like games or something like that because in that case native is still the best the react native still compiles to native but I guess with native you have a lot of gears in hand to tweak the controls we're gonna discuss how to set up react native environment and basically get started working with react native to get started with react native we need to obviously set up its environment and all that stuff first so first things first how do we actually set up reactivate it so if you go to the official website you can see that we have got a nice get started link here alright the confusion starts here now there are two sanctions sections you can see Quick Start and building projects with native code now most of the people who dive into react native for the first time get started with these this Quick Start pen which is basically just a couple of lines and you're good to go now as good seems at least for me I think this create react native app is not the best choice because it runs on xbox Island which I personally do not really like because Expo kind of limits you and a lot of things because react native on its own is like you're writing JavaScript plus you can do a lot of tweaking and on that stuff with the native code as well but when you use something like Expo you get bundled right so you are not allowed to move out of a specific room so if you want to go with this Expo one you can but I would go with native code by building projects with native code and once you do this what you have to do is obviously go ahead and I've node installed on your computer now if you do not know what node is then let me just show you what do you actually mean by let's say yeah just gotta go to a directory let me just zoom in here a little let's say I go to home directory and let's just let's what we have in here so say YouTube it is and then we go with let's just remove this react native directory for now and let's just create react native again alright so now all you need to do basically is have node installed and again you can do that by following instructions here now make sure you select your target as target OSS Android for now because obviously iOS can only be developed on a Mac which is kind of which kind of sucks but it's okay we are good with Android only right now so if your Mac OS user then you can install node with Bri you or basically there's a video of mine which shows you exactly how to set up latest version of node and NPM on your system I'll just leave that link in the description so if you want to set up node or NPM you can watch that alright you can skip this watchman tool if you want it's not really required so once you're done with this you need to install the react native CLI so to do that again you have to just do NPM install react native CLI and make sure you install it globally by writing the G flag and since I already have that installed I guess it should not take me a lot of time a lot of time so you can see that it's just fetched local copy of that thing right and yeah one more thing what you want to do is make sure you run your NPM around four point something version this is the problem you're gonna face later on when you use your react native applications that you cannot really run npm on version safe right so this is why i'm running version 4.6.1 because i'm using react native to create code amps bilap so that's why npm basically npm version 5 is not really compatible with react native the last time i checked so if you face any problems and you find out that your npm version is version 5 point something or above then what you want to do is npm install g npm and a do it version here right in my case it's 4.6.1 alright with that being said now once you have done that you should have your react native CLI onboard and after this what you want to do is obviously have installed android studio now you need android studio jdk and all that stuff because remember reactant 8 is actually developing native apps for you so just go ahead and download the JDK and how you do that is basically see you accept the License Agreement first and then select your operating system or means Mac OSX 64 bit and just download this and run it you should be good to go once you do that just go ahead and download the Android studio as well once you do download Android studio I already have that up and running as well you would be provided with android sdk sdk platforms and all that stuff you would also have a Android virtual device do I do not really recommend you can just directly you know work with your real Android device if you have one if you don't have one that's another thing so you can't create an Android virtual device which we will see later on as we proceed alright so under studio is pretty straightforward if you have if you guys have ever worked with it I just haven't downloaded and it will just start downloading right on once you just you just have to install it you do not really need to use Abbot's to do to work with react native just because I know it studio brings all that STK stuff together all right once you have downloaded just install Android studio and you can see that building a react native app with native code however requires Android 6 marshmallow SDK in particular so react native right now may be uses Android 6 SDK I'm not sure because they're saying it I believe they use that but sure enough you can use another targeted SDK later on in your application because hey you remember react native is running native code so if you're coming from an Android development background you must know there's a file called Android manifest and will not create al and all that stuff you're gonna find exact same files in your react native project as well so if you do not have any idea what the heck these terms are don't worry about that we'll gradually learn them later on but for now I'll just remember that your react native right now is targeting this Android 6 platform and by targeting that means that your app would be most optimized developed for this thing and for backward compatibility you have to add some sort of code or something forward compatibility for forward compatibility as as well so yeah so here we are and you do not need to really do all of this stuff just make sure you install this Android 6 our let me just give me a second here alright so you see something like this when you launch Android studio right and what we actually have to do here is basically you have to go to like your Android studio and you would probably see something like a bunch of hello world kind of stuff here don't worry about that it's not really useful what you just have to do is just go right here to this SDK manager little boy this Android with an arrow on his head just go to Android SDK manager Android SDK SDK platforms and make sure you install this Android marshmallow and at 600 you see I have installed that already to stick on it and click ok it will download that and install it for you that's basically it what you have to do or the SDK one and you can see that we need something some else something else as well like Google APs and what is to give which we had already done Intel x86 atom 64 system image and all this stuff and basically you would find all of that stuff right here inside here SDK platforms is here is to get tools you can find that stuff here right you have to install these SDK tools as well then once you're done with this sdk tools thing you see that you have installed this 23 point 0.1 and stick your tools and just go ahead select these 23 point whatever what it will latest version is it doesn't matter and click on ok right once you do all of that stuff all you have to do next is configure these variables by adding them to your bash profile and for the Windows guys what you have to do is if you go right here you have to add it to your path right so how do you add it to your path well for the Windows people you have to rightclick on your this PC icon then you have to go to somewhere like advanced settings of your computer then you would see environment variables and then basically add those stuff for Linux and Mac OS users just copy the stuff and mine tomorrow just copy the stuff and go ahead inside your terminal right here just opened your bash profile or no well bash bash profile hit is right so just open your bashful file provided file and just copy and paste this stuff right here which we see inside so you will have set up your all those variables for Windows guys again as a tool you just have to go to system settings and basically add environment variables just google how to add environment variables and you should be good to go right once you're done with all of that stuff right what you have to do is go to your project in which you want to actually write good of your Android application and iOS application in my cases go down YouTube react native and right here you have to say react native in it and then your project name let's just name it hello world and hit enter now you can see that it creates a kind of a walkthrough kind of thing so you see that it's installing all the required packages it's it's using yarn right now but you can make use of NPM as well they they mostly work in a similar way or the package store JSON file so anyway yeah so let me just grab the Sun pick it right here you can see that we just did react native in it our project name then you can actually do all of the stuff later on it's not really required right now I'll tell you how to do this this is all cool right so what you have to do right now first of all is this make sure this thing right here goes well and if it does not go well then go ahead and repeat the steps make sure you have added the environment variables correctly when those guys you have to add it to your path variables inside your this PC settings Advanced Settings environment variables and then selecting path variables you can easily see how to do that by selecting this way those here see just like that open system pain system security gene settings advanced tab environment variables click on new and just like that right Mac and Linux guys I hope you can do it yourself because you have been working on with bash and all that stuff at least I believe Linux people at least work with that stuff all the time so you just have to copy and paste this inside your bash profile and this is bash RC basically on a Linux system bash profile on a Mac system and once you have done that and still the error is there then there might be some problem with installation of your Android studio SDK and all that stuff make sure to check all of that as well and if the still if still the error persists then you can ask that and commence and I'll be just happy to help you so let me just really quickly wait here for it to complete it might take a little bit time for you for the first time because in my case it might be fetching a lot of stuff from the cache itself but for you it would be downloading all that stuff so you see that I am looks like I am already done alright you can see that it's set up on my end and hopefully should be set up on yours as well and basically that's it for this video and in the next video and we're just gonna show you a very basic hello world with react native which is basically just already prepared for us we just need to run an emulator and fire it up / through basic file system and how react actually organizes its files so that it's easier to work for you later on with the application for the structure and all that stuff so let's get into it alright so coming to the file structure off we have right here for react native is that if we see something like this if we start from the top you would see that we have two folders which is Android and iOS now these are basically the only folders you would spend most of your time in right because Android consists of two files which are used to build the application for Android platform and similarly on the similar basis iOS is used you can see these all these X Cassatt files if you are coming from an Xcode background so these files would be similar to you so these are basically the files for the iOS stuff right and for Android you can see that we inside the app we have builder crater file as I told you earlier on then inside SRC we also have the manifest file which is basically the same thing as if you're working with Android studio right so these are the two folders which would be looking all along this series so I'm just gonna skip over them right now and coming to normal duels obviously because it's running on JavaScript we can have our additional modules with us and which would be installed inside the node modules folder and once the app is compiled then all of that stuff would be basically just managed by react you do not need to worry about that then come to the babel RC file which is just the file consisting of one line for now just sets the preset to react native nothing fancier here then this is buck config file this is not really required because this is there's a system called buck build something used by Facebook but we're not gonna make use of this so we do not need really need to know what's going on with this file right so same on a similar basis this is flow config file then we have the gate files so that you can actually just check out your project to a github repository as well so these are files which would help you then again watch one configuration file nothing plans you're here then comes the apt or cheers file right so after JS file if you see here you would see something familiar right now be when we would run the application you would see that basically the things you see here are the ones which you see on the app so you see that it kind of looks like HTML but not really view text looks like they are this is HTML but it looks like we are making use of some native elements right like the view container the text container or all that stuff so we'd come to that later on then we have the advert JSON file which just consists of the name and you know stuff like that related to your application pretty handful stuff so the next thing is indexed or chairs and basically this is the file which is boost which bootstraps your application right so this is the first file which react native enters so yeah you can see that we are importing the app from here the same file here and putting it into index dot J's and we are just registering the component with the app right then our package dot JSON is obviously the file which consists of all the dependencies and all that's fancier stuff so that's all for this video I guess and file structure is quite simple for react native not much of things going on so that's all for this video and in the next video I'm gonna show you how we can run this dummy project on a real Android device for now in this tutorial I'm just gonna show you how to set up your Android device correctly so that your bills are happening and basically you're just ready to go and code so let's get started alright so this would be a helloworld tutorial so let's just go ahead and create one so now if we take a look inside the code what I want you to do first of all before actually starting off with the hello world just go to your android folder and just go to this local the properties file if this does not exist then create this file right once you create this file I want Union I want you to determine what operating system you're running and hopefully you know that I believe and if you do know then just go ahead and choose one of the lines which is according to your operating system so right now I'm running OS X so that's what I'm just gonna keep this line and move the other two right and just save this basically this virus is telling the react native where the SDK is located for Android right and once you do that basically we are good to go so now you can just go to lab degeus and change this to hello world with just some text and this is again not an error because vs code is just complaining that this should be in a tight code file not a J's file not a problem really but it's okay so there we are and once you're done with that just go ahead to your terminal and write react native run Android and hit enter now I have my personal Android device connected right here if you can see this one right so we can just wait for this bill to complete and then I would actually be able to run this application on a real Android device which is the same right here you can see I can move this around with my finger without actually touching the screen right so here we are and let react native build the application and meanwhile what I can do is inside and tab right here I can see react native run iOS and simulator would be iPhone 8 plus now you cannot do this if you are running anything other than Mac OS X because I OS development unfortunately can only be done on Apple devices so once you do that you can see that I already have my terminal my hip simulator running with me so there we are let's just wait for both of these to complete now this this might take quite some time for first time building but subsequent builds would be faster right this is because this just needs to set up all that stuff first of all and then later on it could be faster and if you see right here this gets opened right now what the heck is this well this is a metro builder bundler and this opens for Android right and what this means is that whenever you change some files some JavaScript files where your application needs to inform let's just say your phone or maybe your phone needs to inform that yeah something is building right so this is done by this thing so you just need to keep this open in the background and you can see the progress of building bundling P device right now on my Android device as well if you can see that you can see that we get a message of loading from localhost put 881 so yeah that's basically what's happening right now and if we see iOS bills well some sort of stuff is going on here let's just not disturb this thing and let's just get back to our Android build stuff all right you can see that our Android Android bundler is 100% done so let's just see what's up on my screen hey it's hello world from react native so you can see this is a truly native application running on your device on your android phone right now coded in JavaScript right and this is a real Android device actually real because I'm just mirroring my phone on the Mac OS the iPhone build seems to take some time but it's okay let's just wait right to build okay so it looks like we got it so we'd say this build succeeded and it also install and launch so let's just see how it's looking like so you can see that it's now our bundler is again bundling the iOS app let's just wait for it to complete loading all right you can see that we get a nice little hello world in the center of the screen on our iOS device as well so if you take a look and if I just bring this down you can see that we are running the same piece of code on two different operating systems using react native that's the power of react native we're gonna discuss about how the hello world program actually works and in general how react native overall works so let's get started so in this video let's just see how the hello world which we had coded earlier is actually working alright so if we come to our Android project right now as I said AB Dutchess is the only point of entry right now basically the point of entries indexed or chase but you know it's indexed OCS actually includes the app file here so we can just say like that and we can actually just get rid of this probes right here and replace it something like this I'm just gonna explain in a minute what these props are not in a minute but maybe in the next tutorial but we'll just go through over what's happening here so before starting this web series I believe that you have at least the basic knowledge of how es6 and stuff like that actually is working because if you do not know about that then it would be kind of difficult for you to follow along the series because react native would mostly be using es6 all along so yeah I guess you need to actually just make sure you are up to date with the es6 stuff all right with that being done first of all what we are doing is we are importing the main react framework and the component from the react stuff right and then we are importing this platform which is basically just used to differentiate between different kind of platforms right so for example you can see that instructions would be for example for iOS would be shown this one and for Android will be shown this one so platformspecific work would be done with the help of this library or a module which we are importing from the reactive module itself right next is style sheet now style sheet is something which would be used to actually create and basically apply CSS to your react native component and said CSS like CSS because it's not really CSS right obviously because your code boils don't native code but it's it looks like CSS but you would see that it's mostly flexbox and not mostly its react native who works on a flexbox layout system right so you would be able to use of make use of stuff like flex one you know like flex crew and stuff like that in your style sheets and apply them later on to your views right now text is you can say it's a kind of component which would render your text right so it's just used to display some text on your application and view is the container component you can think it off like a box in which all of your other components like text and you know basically other components would go could go in right so what the heck are you actually seeing here if you ask me well what this is is this part is known as j6 now j6 and what it does is that it allows you to write HTML inside of a JavaScript if you have never seen this it might look a bit episode to you that how the heck are we actually writing HTML net but if you're coming from a react.js background or basically you just know GS x then you should be able to catch up real quick but for those of you who do not have any idea basically what DP or what we are doing here essentially is that this app is a component and basically everything is a component in react.js as well as in react native so app is a component whose view looks like this and by view what I mean is the template of that particular component so component could have a template it's logic which would be the functions which would go here so you can just go ahead and create my function here and this would be kind of the logic of some sort of function you would do and then this render function is called which basically just you know gets the view template of the particular component and displays it on the screen so this is our very basic add component which just renders simple hello world on the screen and that bottom of the screen we have is just the Styles where we have a style sheet that creators used to actually create a kind of a style sheet which is kind of stuffed object again whose key consists of the name of the you know you can say a selector or basically you can say the class name or something like that because well how you apply is like style as a prop name now this is a prop which I was talking about earlier equal to your whatever object you want to style with right so we're gonna come back to all of this later on as you proceed but this is just a highlevel general overview of how this hello world app works and if you are following along if you have understood this then it's great because we have done quite some stuff and this and if you understand everything it's awesome if not then don't worry we're gonna cover all of this bits and pieces later on as well as we proceed with the individual tutorials we're gonna take a look at what props are in react native and basically why the heck would you need that and all that stuff because you're gonna make use of props all the time in your react native application so it's just easy to you know just understand it later earlier and then you would be able to relate a lot of stuff later on so if we take a look inside our code right here which is from the last tutorial you can see that we are actually making use of props right here so what props are basically is that the they give extra information to your components as I said this text component or this view component right here would have very specific functions associated with it right now we are making use of the inbuilt components later on we can create our own custom components as well but for now let's just say I want to display text with some southernstyle right so what I'm gonna do is make use of the style property which is associated with this component right prop stands for property obviously if you are not able to relate it to LA so let's just say I would give you another example let's just say you want to display an image in your application so what you're gonna do is right here image and if I hit tab does it import it for me no not really going to import import the image component here as well so once you do that what happens now is that now you have an image right here you go okay sounds good but what the heck does this image it can do well you need to give it additional information like the source of the image you want to load right so the source of this image would be and I'm just I'm just gonna explain what the syntax here is would be let's just say URI would be something like my awesome side coms my awesome image dot PNG something like that so now you're telling this component right here to have this property which gives it some formation right and what the heck the syntax is is basically this comes from the JSX so if you want to have a variable kind of a variable think inside your attribute value in GSX what you have to do is just include that inside the curly braces if you do something like this this would be static value right right now since you're making use of an object so I'm inserting an object here which contains all this stuff so I need to make use of this at this curly braces here you can also do something like this like constant image info and then do it like this and then pass in your image info here it's one on the same thing but because I'm just writing this object right here directly you can do it separately as well so again this style style stored welcome I can basically just get this stuff here just put it right here and there we go it's one on the same thing right so you do not need to really you know just wonder around what this curly brace mean it's the style you have a variable placeholder right here for the value or basically dynamic something dynamic is coming inside JSX right so that's basically it for the prop section and basically if you are creating your own components then you would be able to define what kind of props you want to receive and what happens with your component and all that stuff later on would come to us when you when we would discuss our own custom components but for now you would have to query the documentation to see what components you have for what props you have for a given component right so if you see we could actually can we get the list of components from here I'm not sure so okay it does not let me go more backwards in the code so I guess not so yeah you could just refer the documentation otherwise you can just follow along and just see what kind of props I'm making use of and you should be good started with state in react native alright so if we take a look inside the code you would see that actually I have the app already running on my real device and you could use an emulator as well I'm just using my real device here so it does not really matter okay so what's we learned about props in the last video was that properties are basically these things which are associated with your components and which could be passed down into something known as your child components which would come to later on right but what state means every component has a particular state right so what that means is that if you change the state of your component and my state I mean a particular object in that component react would smartly check what stuff was changed in that particular state and which stuff your component needs to be updated off okay so let's just break this into code example right so first of all let me just get rid of all of this stuff which is not really required and clean it up a little bit so that it's easier for you to see right so we can just keep style sheet I guess get rid of this then text we can just get rid of the image as well here for now there we are alright so now what I need to do is just create a constructor here constructor and I believe you know what this constructor is it's just es6 right now what I'm going to do is save this but state is a black object right so this state is actually a really special kind of object it's not just a regular check right now it's monitored by react in the background and whenever I call let's just say this dot said state right if there's something appreciable to be changed then this render method would be called again right so if I use my state variable somewhere in the inside the render method and the said state is called which changes by state variable then what happens is that this component is rearended after detecting what particular things are changed right so let's just see a quick example of that so what I'm gonna do here is let's just say okay what I'm gonna do is basically let's just say I'm gonna get rid of this star welcome or basically what we can do is just include this as an array and I can say that this is like custom styles something like this dot custom styles right so what happens now or instead of legs this state custom styles right so what's that what's what I'm doing here is that applying style start welcome which is this block of styles to my text component right now and this thing as well which I'm gonna develop which I'm gonna write here really soon so don't worry about what style does is it's just an example to show what state does right now so I'm gonna say this dot state dot custom styles let's just say this is a custom style and if you follow along you could see that we can set an opacity of let's just say 0 right and what I can do is let's just say I can create a set interval here and I can say something like every 1 second what I want to do is do something like this at set state I'm gonna say my custom styles is actually consisting of opacity of 1 right so what that means is that every second I'm changing something in my main state of the component right so the react react application should technically rerender my component with the updated Styles right ok so let's just go to device and if I just shake my device here I'm hit on reload here you would see that the development server don't okay let's just try to run the bundle again let's see what's happening here so it saves me this is not allowed before super ok cool so we can just call super here and we should be good to go I believe let's just go back to the terminal and see if it's building or not alright so you can see that we have 100% of the build and now if I just take one more time shake my device here hit reload you would see that it does not blink because because opacity is not really the style which you can apply on a text field right so let's just change this from color from varsity to color and let's just say I just want to make this color of let's just be queen and let's just say I just give it a default color of blue here so it will start with blue and it will just toggle between red green red green red green and so on and so forth let's try one more time here I go shake it reload it starts with Red Queen then it's always green okay because yeah obviously you is not turning it back to red right so looking to say here that if this dot state dot custom style start color is red then turn it to green otherwise don't it do good just like that one more time let's just shake our device and you can see how fast these bills are because you're not really from building the whole application itself that's what react native does behind the scene for you so now you can see that we have red green red cream toggling colors with us and basically that is possible because of the state so you see that we do not have any sort of logic which updates which rear Enders this component when the state changes right so react does it automatically on its end that's basically how state works and mostly in bigger application what we that is something known as Redux but it's way too early for things like Redux to be discussed but right now states would be good for us to go and basically would help us to manage the state the actual state of the component how the component remembers stuff we're gonna take a look at what the style sheets are react native and basically this create a little application as well surrounding around that concept so let's it start ok so now you can see that on the Left I have my device open again and on the right we can see the code which is which was responsible in the last tutorial for this toggling of this color so let's just get rid of all of this stuff and let's just see what these style sheets are ok so what's the deal with them is and I mean let me just actually just change it to tabs yep all right so what's happening here is that basically you create some sort of styles in react just like you do on the web and react native converts them into native properties associated with those particular elements right so for example you can position of you somewhere you can basically change the properties like color of texts its opacity and background and stuff like that so what we have right now is which react native what's the thing is that all the layouts would be actually flexbox based right so what that means is that every view container here every element is basically would follow the flexbox system which comes from the web on with CSS right so by that what I mean is that all these elements have by default a display flex property associated with them and you cannot actually change it reactors works on flex box system so what we can do is basically right here we can try to create a very simple kind of like an interface so what that would be is let us say half the screen would be let's say red half to be green right so this is our container let me just go ahead and create another view here let me just say that I have Styles dot half with this right and that in this view and what I'm gonna do is just lift leave this container with Flex of 1 which means this space if I get all the space if it's the only child just if I content link let me just get rid of these first and let me just get rid of this as well all right so what I'm gonna do now is say let's say half as flicks off fund and then background color or let's say red how this was named is half one rate let's just get a name this half I'm gonna do a similar thing to this we're gonna do here see half right so what's the thing here and again by default on the web flex box follows a flex direction of row right but on react native it follows by for the flex direction of Gollum so now if I just go back to my device shake it a little here just reloaded you should see that we get a red and a blue column here just reposition this right here so you see that our half one is red and our half Dube is blue and as you can see that by default it follows a flex direction of column instead of row so if you want the row then you can specify the here flex direction and then grow and it's safe and actually I can just enable something known as hot freeloading here so you should be able to see changes without me shaking that device so if I just remove the statement again it's safe you can see that hot reloading at its best I can just do it automatically right so that's the thing okay now let this is go ahead and create some complex layouts right so what we can do now and basically if you just know how to play around with flex box it's kind of easy to do so we can say like style start half to one and we can just say a similar thing on half to two and four here I can say half to one it has the same flex up one again and background color of less you see Queen it's also flex of one and background color is yellow right let me just get a comma here and now if you go ahead and see you can see that okay it kind of is not looking like it should and the reason for that is because what we want basically is that yeah it's actually working fine because as I said flex box works in the Flex direction of column all we can do is change this half do right here do flex direction of row right you can see that actually would we can just dismiss that you can see that now we have got a bigger element and then two smaller elements in their way now again it really depends on how much you know about flexbox layouts right so you can just practice them on the web and that would be kind of similar thing on the on here as well so here's a way to actually displayed in do is to one ratio so Green takes sixty six point six six percent of the width and this yellow takes thirty three point three three and there we are so basically now you can just go ahead and include some sort of text with them as well so this is two one right and you can do a similar thing here with saying this was under cells one right so now if we take a look you see that it's kind of ugly so what we can do is just apply a style of let's say style stop text here to every text element and we can customize them thereafter just like that so we can say color is white then this is a font size versus a turkey like that and one more thing what I want to do here is say that these half ones and half tools right here have a justified content of center and again if you can observe that these JavaScript values follows camel casing right so what happens here is that if the CSS property was like this then you remove the and you make the next letters first word capital first letter next words first largely so here we are justify content centeraligned items Center as well so this would the center the text inside the block similarly we can do this to do one and do two and again this would when you make them equal width here and there looks exchanges from yellow to let's just say um black so that the text is visible because here I can see it on my device straight away that it was invisible so I knew so here we are and now if I take a look you can see that we got a Tech Center and all that great stuff right so okay one more thing let's see we can see that half to one and half to do are sharing a lot of common stuff by it apart from the background color they are actually same so what we can do is this we can make something like half DX as a class actually I can just apply all that common stuff right here because it's a good practice as well as well as it will just make the code much cleaner and easier to read I can just get rid of this from that color right so now what I want to do is basically apply have 2x to pull up these elements so how would I do that well to do that what I'm gonna do is instead of supplying this just an object I'll supply this an array of objects and they would be applied in the order in which you supply them so I'm gonna supply it half to X right here I'm gonna say styles got half to X and similarly to our here style start have 2x and right now it does not really matter because the property is to do not you know overlap each other so the precedence does not really matter here now you can see that our code looks much more cleaner and less than the previous one and we can just apply multiple style sheets to our elements so yeah that's basically it and you can basically supply any object you want here you can just associate it Sociedad up check with your state as well and then you would update that variable your render function would be called and your CSS applied styles would be updated as well to that element I'm just gonna show you how to work with text input and react native and basically just allows you to get input from the user and you're gonna make use of text but all the way because you know forms are almost everywhere in every application so for example if you want to create a form to asks about users information or maybe like you're creating some sort of game or something that you want users name and you know the cases are endless so let's just take a look at how to actually write a very basic text input code so right now you can see that I have with me the previous code the codes from the previous tutorial so let's just get rid of all of this right and there's a scare of get rid of this one as well except for this container one right so now what I want to do is inside this view why the heck there we are okay so now what I want to do is basically inside this view I'm going to write text input right here and I can just import it from text input just like that I'm gonna say something like that right so you can see that I immediately get a text input so when I click on that you can see that I can actually type stuff around right so since this is an actual device so I can just create it from my end as well all right so what we want however is you can actually customize it with the various properties and methods associated with it so if we take a look add those you can see right here in the documentation if you just open this and go a little down you can see all the properties on the props associated with it so you can see that we have got a bunch of stuff like editable and maximum length number of lines on blur on change so if we can do is basically target something like unchanged X so you can see that it's definition is called back is called when text inputs change and the difference between on change call back that is calm and takes two inputs text changes and this is that this on change when it would be called then it would not pass the updated text to your function right so that's the basic only difference so if you just want to listen to if the text has changed then use this one and if you want to get that text as well along with that so you see you can use this one so let's just go ahead and implement this on change text and how we do that is simply doing like unchanged text and again as I told you in JSX you have to use this curly braces so that you are actually including dynamic content here right so I'm gonna say this dot handle change text right and again a couple of things here what I'm gonna do is basically find this another reason for this is because we bind a function whenever you know if you want to use some sort of things which are actually associated with this class in this function for example let's just say you want to access state in this function handle change takes so you can access this state only when this of this particular this in this particular function points to this class and basically this is how JavaScript works so I assume that you know a little bit about it it's it's kind of on the advanced side of JavaScript but it's okay I guess you should know this so this if points to this class then only you can access the state obviously that makes sense because state is a property of this class right here but what happens is that methods like these when called from props do not necessarily have the value of this associated with this particular class because the context of this is actually set in to set to whatever function that is being called whatever the calling function wherever the calling function belongs right so let me just give you a quick recap of this so for example if you have let's say an object let's just say this is an object let me just comment this whole thing or let's just leave it like that only so if I have like functioned by function and basically not like that function and then you do like console dot log this right so when you do like X dot function then this points to this particular object right but when you do like something like if you have this function outside like that when you do like function to then this actually points to the window global inside if you're working with with obviously right so what I wanted to say here is that the context of this right here this right here could change whenever depending upon how this on change text is called right so to avoid that what we do is we just bind this function we just force this function to actually follow the dis of this class only all the time right so let's just get rid of or just get rid of this thing and you only need to bind this if you want to actually access something from this class if there's no use then you can just remove this line so what I'm gonna do here is just say this dot set state and again I need this I need to use the spine because I'm using set state which would only be available if I am pointing to this particular class so I'm gonna first of all let me just say this this is value is empty I can say here and I believe it's not really value but because if you set the value of text default value I believe it was yep so yeah if you set up a value of additive of a text input then you would not be able to change it so you need to set default values so this dot state dot value now we're going to say and it me something like that and basically right here we can say value is and actually we can just get the new text here now we're going to say new text right similar on a similar note we can say you are writing this top state dot value something like that where you have to actually reflect the change as you are writing it so let me just reload it right here and okay so the application has stopped let's just see why let's just go to our module bundler let me just try to run it one more time Oh obviously because you cannot have Dexter's floating like that right so now I feel reloaded one more time you can see that you are writing edit me is what I get here and now if I try to did it like remove it you can see that it updates with me right so whatever I'm writing here it's good it gets reflected into the state and what the heck okay so react native run on red might have just reinstall the app so again if you can see it's basically the same thing right so now what you can do basically as a task is that create a basic layout of login right so how would you do that I can just give you a little bit of you know a starter so what you can do is basically say something like username right and you can actually enter this whole thing in a view as well password right and I'll just leave that button bar to you so I'm gonna say this is container flex one a handful X Direction is obviously column so we can just see justify contents enter and you can see it gets us right there and I can just say padding of 20 as well so that we get a little bit of distance right so now you can see that we have got a little nicelooking layout I believe and there's a problem again because you cannot have like username and password reflecting the same thing so use the name and basically you can just keep it in a state or you can just you know get it when you tap on that button as well it's kind of useful for example if you're creating an application where you want the user to enter pin and as the user types 1 2 3 4 digits are with you and you can just basically verify it so there you have to just constantly keep your UI and your model in sync but here I guess you can just omit that but anyways so how do you change stakes and yeah basically I can guess we can just get rid of the state here right and basically this one as well new text we can just console here and not really let's just say how do user name changes so for example here you you're gonna take a look at something known as uncontrolled hand control components and what's basically the difference between them so let's get into it alright so here we are with our little dirty applications in the last video and let's us first of all get rid of these methods right here and this one as well there we are there we go and it's safe alright so so far so good now the thing is if you take a look at the last video what we did is that we have to retrieve value of this text input somehow right so what we did first of all is just assigned a state variable to its value and unchanged text we just updated that state variable so that we get the value all the time so the UI and the reactions code react native code is always in sync right so that's a way and the way is you just get this input value whenever you want to for example like on click of a button or you know some action or whatever so it's a specific event right so for example if we if I create a button right here so say this button has a title of hello to save this just include this button here as well so you can see that we get a nice little hello here and what I want to do basically is that when it's pressed this dot button pressed let's just assign this dot button press this button first don't find this right and we can just say button pressed it's a method here so what I want to do is basically get username and password values right so one way is to just like we did earlier but I'll just first of all have explore the other way which is like constant username they're getting that username value and password getting the password before that what I want to do show you is something known as shake it here debug Jace remotely so what it does when you click on it it will open Chrome inside your Chrome browser of actually a react native debugger inside your Chrome browser and you would be pretty much able to access your JavaScript right here so what we can do is basically say something like reference we want to riff for this input field right so what I want to do is say something like a riff and then these curly braces input and I'm gonna say this dot user name is input all right what the heck happened here well this is basically kind of like doing like ID is username in HTML right pretty much you have done this thing so now you can access this input through this dot username right so I'm just gonna get rid of this and say a similar thing to this password I'm just putting an underscore here because I don't want to just randomly by mistake use another variable name user name and they said it's property overwrite its property so it's it's just like it's kind of private but it's not but anyways so what I want to do now is just basically say console dot log they start username this dot password let's just see what this has gotten for us and basically before that what I want to do is just nothing okay so let's just save this and type something type something and hit hello here right and you can see right here if i zoom in a little we get username and password here so if I could like this property last native text you see that we get the actual text f G we see which is in username right and on similar basis we can get last native text on this right so this is like kind of loading your value on demand so I can see username as this that user name dot last natives Tex if I spell it right yep I've got some password is this dot password dot last native text I can just see username password just like that just get rid of this as well it's safe and it's a you again because react native is stolen and here we are so now if I enter SFU and ffff hello because I'm not sure why I did that so f fu is username and F F F is password right now this is a oneway now this thing the width I have done it right now is called uncontrolled uncontrolled component and basically it's not really uncontrolled component in react native this control that uncontrolled analogy is I've just stolen it from react.js because in react cheese and this is the concept right so uncontrolled components are like this so Android is managing its value and it's giving you to whenever you want to access it all right you do not have access to it all the time for to make it a controlled component what you need to do is first of all we no longer need this reference and what we can do is just say default value of this dot state dot username and I can say like on change text is text and I can say this dot set State username is text how similar basis we can do this thing have this one as well password password as text there we are I can just initialize the state with a blank object if you wish or yeah that should be good I guess right so now what I want to do is get rid of these two ones as well so now I always have access to this username and this store password irrespective if I press the button or not so we always have access to username and password because react is now managing those values instead of letting the host platform in this case Android to manage it right if I had same now and if I just entered something like this and hit hello you can see that we get undefined because this dot stayed on username not username like that and they stopped state dot password let's just try one more time hello and I can see that we get just like before but this time react is managing so this is a controlled component now the thing is that you react actually recommends you d always but really always use control but in most of the cases use control components that's okay to use controlled components but the thing is that if you do not really need to interact with these components a lot what I believe is that you are kind of like you know updating state at every keystroke so it might not really hurt performance that much but I guess you could just go ahead with an uncontrolled approach if you're not really interacting with the component at all so you can do that otherwise it's equally good if you're just going a controlled way as well basically just having this controlled as a control component gives you a lot more power than uncontrolled one we're gonna take to look at how to create our own calculator yes you heard that right and react native from the very scratch so let's start off by creating some applications in react because it's kind of monotone us to just go through over everything in react like thousands of components and how everything works and then at the end of the series you would be like what the hell am I supposed to do with all that stuff so I've decided to break this down into little applications built with react native let's start with one calculator and we're gonna see how we go along with that so let's get into it so you can see that right now I have my calculator open now obviously we are not going to make such a UI and functionalitywise application like not gonna do this animation kind of stuff and like all that stuff right now in react native because it's kind of like that wants to do but we're gonna come to that as we go along in the series so you can see right here what we need is first of all a place to actually show the stuff user wants to do then here would be a result and then right here we have our buttons plus the operational buttons right so let's just assign a little bit of UI for this in this video so what we're gonna do is first of all define let's say style start resolve here which should contain our result just like that then what we want is view style as Styles dot I'm not really result but our or you can say that it's result it's just what the result of what user is typing and then we can say calculation here right and then what we want is view style Styles down buttons and like that I'm gonna say that this is view style style start let's say numbers and on the right what we have is style start operations right so that basically is the whole complete layout which we're going to need the parent layout at least so let's just now use styles and yeah we can use actually you would be thinking that what the heck is the difference between actually style sheets start create and just using a regular JavaScript object well the thing is that you should always use style sheet not create because when you don't use it and react cannot actually validate your keys and all that stuff and basically this kind of like some sort of optimization as well which reactors under the hood so in short it does not hurt to actually use style sheet or create all the time when you're creating styles so just stick with that so with tapping down let's just create some Styles now now for the container part what we need it's just a flex one so that it gives us full screen right now then for the result moving in right now it's less to see I give it a flex of one right I give it a so say background color of red for now so that it's visible to us then for calculation pad I'm gonna give it a flex off or let me just give it a flex of two here flicks off one here right and I'm just gonna make it background color of green right then for this part for buttons what I want first of all is basically like I want to display these buttons in a column right so what I'm gonna do here is say flex direction as column or actually in row I want to display this in group right because by default react.js displays everything in columns so I want to display in in a row has two elements so there we are then for the next part what we have is numbers numbers go right here I'm just gonna say this has a background color of let's say yellow for now again so that it's just visible nothing to do with original application which we would be developing an operations would be bagging color off let's just say how many colors are there versus a black for now right and let's just give them a flex property as well and for the buttons what we can say is this flex grow one so that it just occupies all the remaining space so numbers could be flicks of let's say d3 I'm not really sure we have to play around numbers here and I can give it a flex of one here so there we are and now if we take a look at what we have actually done so to do that let's just go back to terminal and do a react native run Android here so react would fire the application real quick and by the time we are waiting for that to happen let's just see how we're gonna create these numbers so to create them again we will need to have one two three four separate views inside our numbers which would contain rows of elements right because we cannot have grid layouts and all that fancy stuff and react yet because it just supports a single display and holy crap we use not imported that is so cool let's just import that and here we are well it kind of looks bad because the result is stupid right so what we can do instead is instead of using flex flow here let's just say I have a flex off we have 2 plus 1 3 and 7 so it takes 70% width of the screen right it takes 20% and it takes 10% height not the weight sorry so there we are with a very basically out for our calculator we're gonna take a look at how we can actually go along and build the internals of our parent layouts and let's get into it really quick so um we can just create some buttons here by as I said in the last video by creating rows of buttons so I'm gonna say style start row here right so this would be our rows and we're gonna need one two three four four rows right here so we're gonna say you one two three four just like that and for each row we're gonna need a button it's so button title and I'm just gonna give it a title off let's just say zero for now to every rule just like that so we're gonna have one two three we're gonna have one two three and we're gonna have one two three and you're gonna have one two three there we are right and button is not defined very well let's just import this guy and there we are okay so what the heck is this so what we want to do actually is display these elements inside a row right so I'm gonna say right here as flex direction of row as simple as that so you can see we get these elements now but what's the deal with them is that we want these rows to be equal in height all of them and occupy all the space so there we are that's a start and what we can say is if I'm not wrong just if I content we'll have to take a look at this Center aligned items stretch stre TCH or it could be other way around as well I'm not really sure yes it is I believe um okay so we have just a Content value of let's just okay give it a central the I believe there used to be a stretch so anyways let's say this is spaced around instead so that we get nice little buns buttons like that okay so now we have buttons so what we want to do is basically add these operational buttons as well so to do that again we're gonna make use of and actually we can just kind of make use of the buttons here directly because these buttons actually are one single row one two one what the heck one two give me a second here all right one two three four there we are and if we save this take a look just like that again but style start operation right so what we're gonna do here is say that it's flex Direction is obviously column but I want justify content as based around here as well so that we get something like that right so actually I guess we should just take a look at the docs to see what justify content here accepts and you can see that it accepts flex start flex and center space between space around and space evenly alright so how about if I want to stretch it line items stretch stre TCH I'm not sure I guess it used to be somewhere but it's okay stretch okay so alright anyways so here we are but that kind of looks funny Louis's reverted back to Center at least for now so here we are with the basic layout we want in here is for the result part text style styles dot result text right we can say just basically like one to one just like that and for calculation always the same eleven times eleven here and for calculation part what we're gonna do is say a similar thing style styles dot calculation text and again we are doing all of this in a single file but don't worry about that we're gonna take a look we're gonna learn how to split reaction react native code into multiple modules because that's essentially what you're gonna do all the time because that's a best practice actually just modularizing your code so calculation takes what I want to do with this is font size as 20 color that's white and similarly to not really calculation text I believe to resolve text that's what I wanted so result text here we are for calculation takes what I want to do is font size that's 14 and color as white too and there we are so let's just increase this a little bit more 30 Alice's bracket 24 all right so now we just want you to central and that stuff so I'm just gonna say it was sold right here if you see just if I content on flex and just if I contended I guess when you're working with the Flex direction of column it's kind of like it always confuses me it's kind of like justifies along the yaxis let's see Center aligned items flex and yeah so it was complete guess rates and just worked out just fine so we're gonna need a similar one on our calculation pad as well so there we are here we go so this is the basic layout of our calculator right now I know we need to expand these buttons we're gonna take a look at that in the next videos and we need to change this content as well all along all these buttons and all these numbers should be right and let's just make a little bit more usable and customizable okay so right now you can see that we have these tiny little ugly buttons right here with us so let's just make them full width and height and do that actually what we have to do is not use this button but use something else let's just say touchable opacity and what this is is basically just like a button but it just responds to your touch nicely so I can just say that this is something like that and if I just change it for one row right now there we are let's save it okay we just need button for now so yeah touchable opacity needs you to add a text node so we'll need to change it here as well so now we can see right here is that if I touch on this kind of response if you can see so let's say this is dialog button right here with us so here we are right and right here if I just go ahead and say button pals flex one align items stretch line self as stretch as well and this should be obviously stains right so we can see now that the statue below Vasa T thing responds even if I tap right here right instead of on that zero so that means our button is kind of working for now so what we can say is just instead is just make it like just if I content center and a line items Center because we would be any real listening to the touchable opacity right here instead so let's just see you can see that it would get messy really quickly right here if we continue to develop code like this so what I'm gonna do is actually develop this whole button section separately so let's just say I do something like for let I equal zero high as less than three I plus plus which is the number of one two three four let's just make it for number of rows for let I equal four let J equals zero J is less than three J plus plus right for now if we can do let's just say that to let two elements is something like that or we can just say something like view or actually let's just keep in an empty array so what we can do right here let's just say lit row is also an empty array and right here what I'm gonna say is add row dot push touchable opacity and basically this block of code right here I'm just gonna copy this and let's just change it to I or a rather I plus one right and here I'm gonna say elements dot push and what I want to push is a view style of style start row with the our row in it and here we go so I hope it makes sense I can just name it rows so that it makes more sense right so we have our all that stuff now so right now what I can just basically do is go ahead and delete all of this and just say and actually till here and just say rows right if I hit save you can see that we get it right but it kind of is not really what we want so it would be kind of like this so you can see the that we get one two three two three four three four five or the hell okay let's see so you might want to just debug this stuff later on so I'm just gonna assume that I got numbers in the right place I'll just take a look at why they are not in the right place it's it's somewhere in this logic so you can just figure it out yourself so what I want instead right now is to just basically show you can see that all of these buttons now respond to the touch so we can say that I can give it a property of like style start button text right and I can just go ahead and create this as well and say that it's as a four size of let's say 25 maybe or let us say 30 right so here we are with our buttons right here for the calculator and similarly what we can do for our operations is a similar thing right here so actually let's just fix it right here quickly actually to fix this what we can do is just say let nums is let's see 1 2 3 4 5 6 7 8 9 and actually for the last row we had to actually walk out of the loop because last row is not really you know numbers all numbers so it's kind of like I'm not sure there's 0 in middle and there's an equal to a belief at the end but again I'm not really sure so let's just keep it 0 0 and equal to 1 now I'll just see in the calculator later on so now I can just say here as nums of I and J right and we get our correct output now so that is one way and similarly what we can do is for the operations we can name them like plus minus multiply divide 1 2 3 4 right so what I'm gonna do is now let's just say I copy this well actually we do not need to copy it at all we can just say let k equal to 0 and actually we can just make use of I again because this is scoped inside the function so I'm just gonna say I plus plus again just like that so again let's just see let ops something like this so I'm gonna say ops dot push and then this whole stuff right here which we had earlier with the exception that again this is a button in fact but this would be operations and this could be the bet index only that's not a problem so here we are and let's just name this ops here and operations of I should be sufficient here and there we go so what we can do here is instead of just applying the button takes class what I can do is apply another class style start white well let's just say which is we'll just mix it white right so there we are with our basic calculator interface with the buttons working kind of right at least responding to the touch but the result and the calculation power is still the same so we're gonna take a look at that in the next tutorial so right now you can see that our calculator interface kind of looks complete I believe the buttons are in place the buttons buttons kind of respond a little well as well and they are full read/write so you can just click here and we'll just respond right you can click here and the four would respond so if we just if you can just draw the boundaries then you would be able to see that these are actually enclosed inside a boundary right okay so anyways first of all let me just fix this that this should be a dot right here right and what we have for now is that too we have to actually get the function get some sort of function called whenever I click on this button so let's just go ahead and create this so I'm gonna say that this is something like button pressed right so I'm just gonna say that I would just get the you know text of that particular button let's just see so right here what we can say is something like when I click on this on on press I believe so once you do that what I want to do is just call this function right here this dot button press with the argument of Nam's I and J rights effects go ahead and save this and for this console dot log this as well it's safe and if you just go ahead and shake my device here a little and enable and actually it's already enabled so we should be able to see it somewhere right here so you can see that our app right here is enabled so it's just bugging about that we should add a key property so that kind of fits well with react so I can just do that on these warnings would go away so it's not a problem right here so what we can do now is tap a button so one two three four five six seven eight nine zero dot and equal to okay everything is responding correctly right so what we want to do is basically once we tap on these particular buttons I want to update this thing right so what I want to do here is say for example first of all let me just get the view right here which is responsible for this and this is our this one this view right so we want to do is basically set this text to something like this dot state dot let's just say result text because again as I told you earlier if I change my state variable somewhere then the rendered render call would automatically be called by react under the hood and it will just update that particular thing that particular component right so what I can do right here is just say well actually right here we can just keep the result text blank it does not really matter if it's smell it just does not print that so what I'm gonna do is say this that said State and I'm gonna say result text is whatever the text was so this dot State that result text plus our update text right here which comes from the button right so if I save this and see like one two if I type close so you can see that it reflects right here so if I can just remove this and say 12.54 like that or five four nine something like that now the problem with this is obviously like if I type equal to then it this writes that as well because it's not really distinguishing right now between the different kind of numbers the only thing which is not a number really right now here is this equal to sign because a decimal can be you know you can regard it as a number because it is used with numbers so what you want to do is add a little bit of validation here so let's just add an equal to validation so I'm just gonna say if text is equal to an equal to well in that case what we want is we want the actual result so far which we have right here so I'm just gonna say calculate result here with this dot state dot result text like that and actually we can just return from here as well so I'm just gonna say actually this should be this right so I'm just gonna say calculate result I'm just gonna say text here we could have just access it here also but yeah actually we can just do it right here as well because we have access to state and all the methods right so what I'm gonna do is this a constant text is my result text so we actually need to now parse this text basically like you have to broke break this text into tokens and then perform all the operations accordingly right so we're gonna learn a little bit of tricks here how computers actually do calculation so that's basically how we are gonna going to proceed so when you actually enter a huge kind of like 3 plus 3 times 6 let's just say raise to the power of 5 divided by 2 plus 7 all that stuff so how a computer would read that we'll just take a look at that later on right when we come to parsing this text right so that could be an example for us so for now we have fixed the equal to problem so you can see that if I tap on equal to we do not really get that equal to type and again what we can do is just basically not allow a lot of zeroes in the front it's okay to have zeroes like that but it's not really okay to have zeros a lot of zeroes in the front right and actually what we need to do is add a back button to the app as well and if you just take a look inside the calculator will be happy the delete button right here right so what we have is 1 2 3 4 5 but how's it working division multiplication minus and plus plus minus multiplication division 3 1 2 3 4 1 2 3 4 5 ok yes so the rules are uneven the number of rules are uneven in this case so now we can just do that that should be easy for us now we just have to add a let's say let's just keep it D for now to delete the text right and what we can do is basically let it wait and what I want to do now is if I type something and if I press this D button right here I want this text last element to be deleted now this is a little bit of tricky part here because right here we are just generalizing it over the loop so what we want to do instead is what we can do is let me just think I guess we could add each of them separately or what we can do is just on press we can pass in this function let's just say this is operate actually we have to do this startup right here and say operations of I right so once we have that what we can do is call this operate function with the operation right I'm just going to switch over this operation because why the hell not so I'm gonna see case D which is the delete in our case what I want is that I want to update the state again remember this text right here is set with the set state so what we have is let's say we gonna text back again this dot state dot result text which gives us this text right here back to us right okay so what I want to do now is actually just split it so what you can do is this slice it or just you know convert it into an array and just do it in one line so I'm just gonna do it in one line I split it by every character then what I want to do is just you know I'm actually we can just do like text dot pop I guess it's pop for back and unshifted for front so we should be good so once we have done that and actually we can say let text here right here and takes job joint I'll actually you could just run a slice call here as well I don't really remember its syntax otherwise I would have done that but here we are simply with the split call as well so now what we have is that we want to update the state again so I'm just gonna call and said state method right here and say result text is again equal to our text right here so if I hit save now and if I just type something like five by five head D you can see that it gets erased and obviously that's a bad example because all that just was same so if I write one two three and okay how it did it add a comma itself if I delete it okay so here we are with our first bug I'm not really sure how it did that let's just reload it so if I add like five five five five five five one two three how the hell did that come up here there so if I do delete now so it saves me this top state dot result text dot split is not a function okay well why is it not I believe we can just console dot log R they start state dot result text here every time so that we can just see in the console what exactly is going on so if I just reload it here so if I write five five five numbers like that and delete a lot of times so we see that if I hit delete a lot of times we get this thing so let's just see it in the debugger so we have it correctly wait a second what exactly is happening here oh this is oh obviously because this should go like here because we cannot just split over an array again right so if I do like this now and hit delete yeah it makes sense now because what I was doing here is that I was just joining it but I'm I was not storing this result anywhere right so it just it was just a waste call so now you can type basically anything like if I just remove this dot and all that stuff I had delete to delete that and here you are it's just a basic implementation of the typing feature for now so here we are with our tutorial from the last video I don't know what that means but anyways so let's just proceed where we have been doing so far so in this video I just want to add support for these plus minus and multiplication buttons as well here and actually we can see that we do not see the division button and the reason for that is that because we are omitting that and actually we can just make it a little bit more dynamic by just replacing this for with or actually not this one this for with the length of this but it does not really matter because in calculators we have very fixed operations available with us especially in the one which we are coding right now right so here we are with our little division sign back with us so now what we want to do is just say that to when it's not D when it's something like say plus so again I just want to add it for now to the screen because we're gonna tokenize all our text later on so it should be kind of easy for us so four plus four minus four plus four minus and for multiplication and for division what I want is just at a basic validation that our text is not really black there's something at least to the left of it right because that's what we really want I don't want a person to start with a plus sign because that does not make sense so what we can do is just say that if state this dot state dot text is equal to blank that means the user is directly pressing these buttons which we do not really want so I just want to say return just like that and actually this should be the case in our case D as well because I want the user to go beyond anything it does not really make sense because movie are doing essentially here if you take a look inside the console you can see that we get a blank element splitting on a blank element right here you can see it does not really make any sense because it returns us a array of zero length so when we split on that we pop it we get nothing so we get we joined it with nothing to get a string back an empty string so yeah it kind of works out itself but we can actually just add this validation right here so if it's not the case then what we want to do actually just make it shorten in a single line so that we can just space save two lines whenever necessary there we go so now if that's not the case then what we want to have is just this not set state as a result text is this dot state dot result text plus our operation right there operation there we are so now if you just see something like this plus this minus this all right looks good now another thing which I want to do is on the button pressed if this thing is a Cali is an equal to button so obviously what I want to do is verify a little bit of results a little bit of you know things right here that first of all what we can see is let me just say let me just think about it what we can do is just see if text dot or actually should we just open eyes everything first let me just think here so we can actually ultimately we have two tokenize the text anyway right so yeah I guess we should dokkan eyes all the text first and then proceed onwards and back organizing what I mean is that if our text is something like this so I can just convert it into like three then plus then three then star and then six and then power and all that so they're not really like that and it's just like splitting character by character but obviously like in the order of how it should be organized so yeah I guess then that's it for this video I believe because in the next video I will be just showing you how to organize all of this stuff once you press calculator once you actually press an equal to and obviously we can fix this little bug right here which just allows us to type for single sign multiple times so what we can do right here for now is just say if this dot state of text is blank or this dot state dot text dot let me see split dot two let's see op equals two or let's just say this is our character right so what I want now is actually test whether this is okay let's just take it this way let me just clear stuff so I'm just gonna get the last character last character I'm just doing it so that it's easier for you to see and follow along so this gives us our last character inside this field for example a minus for now and what I want to do if last character dot are actually not like that if operations dot index of the last character is not equal to negative one that means that means that last character is in fact an operation so what I want to do is just return because I do not want to have two simultaneous operations right so again what we can do is just and actually not like that because the operation could consist of delete character as well which we want to allow so we can say is greater than zero right so it omits our delete character and actually let me just move it actually let's just change this to a class property instead so this start operations there we go and I'm just gonna say this start operations just like that and move it into our constructor just like that all right so here we are now what I want to do is actually I have already done that so let us hit save and see if we can see anything okay we get a split off off undefined because it's not text it's actually result text it's safe reload plus operations was not different because this is test dot operations that's well that's embarrassing anyway so let's just save it reload Wow plus minus does not work very well divide yep does not work and if I hit delete it works perfectly fine so there we are with a little bit of more validation so if we see right here inside the code we had last time is that basically we can just tap on some numbers and add some operations as well and there's kind of a little validation as we were going along as we type all the stuff right so we can actually delete them as well and so on and so forth so what we want to do now is as I said when we want to calculate the result we want to parse some text like this so if you just consul not log this text first it's save and let's just reload the app what the heck does react sometimes this you know does not reload on savings let me just manually reload here right here by hitting reload there we are so now if you just take a look like if it's a say 21 + 54 and what I'm gonna do is this press this equal to right here let's see what we have inside our console we have 21 + 250 volt right so what we want to do now is basically calculate this right so this is easy but with operations like doing like times 8 minus this divided by this stuff like this what we want to do is just follow a kind of a standard or something now there are I guess two standards I'm not really sure what I know which off is both mass which is like you have to follow brackets first then off which is not really a mathematical operator right here inside our calculator then division then multiplication then addition then subtraction right so if there are brackets you have to follow brackets first and then sleeve this then division and multiplication then addition and subtraction right so we can do that so to do that what we have is the first way is basically there are two ways to calculate this text right so what we want to do is like let's see you might want to have like split the character with each character or maybe like I trade over yeah splitting and I trading over each of the character like that so now you're gonna say if character is your special character something like this or you can just use an array and test if their character is actually included in that particular array then you want to do something right so this is a basic logical implementation of a calculator but what we can do since we are making use of react native and again if you remember we are running JavaScript right so we can cheat a little here so what I'm gonna do instead of this all this brainstorming and finding out what stuff goes where and aligning brackets and all that stuff what we can do instead is make use of our old good but in famous friend you all so you all is actually used to evaluate a value which is in a string right so if I try to do you Val this value right here eval 21 plus 55 let's just say you see that we get this if I do eval off like alert you see I get an alert so eval is basically used to evaluate a string as a JavaScript code you should never use this on user input but we're gonna use this on user input I know right because of two reasons first of all this is not a web application so doing an email of alert is not going to work really because we have not made our app sophisticated enough to have JavaScript functions executed inside our Java running runtime environment right so this could possess a problem if we are kind of allowing anything to be typed on the keyboard and then evaluating it but since we are restricting the user input only numbers basically and these signs we can pretty much hope that they're not able to type characters and you know kind of self XSS them so yeah so it's I guess safe to do so if I do like eval of text so if I just console.log this as well so yeah let me just comment this out for first let's just freaking reload this application enable library loading there we go basically actually I just flashed my phone's Rob so that's why I guess I lost some options here so it's Android 8.1 quite impressive it's it's actually a resurrect remix ROM so if you have use that it's kind of smooth til now works awesome I'm really liking it so yeah and if I do like 22 times 11 and then if I just dismiss this equals 2 and then if a good like console you see you see that we get 22 times 11 is equal to 242 which is in fact what JavaScript would tell you anyway because that's the result javascript calculated right so we want to do is now basically update this value and set our results right so what I'm gonna do is say this dot set state and I'm gonna say actually what do we call this so we are kind of like saying that this is calculation text so let's just name it that calculation text and there we go so what I'm gonna do right here is again just initialize it for the stake of sanity here and what I'm gonna do is just say that I just want to set the state with the heck are we this dot set state calculation text is eval which is evaluating the input supplied by the user so if I just dismiss this on 66 plus 55 equals 121 there we are I'll actually disused dummy placeholder with 121 only I believe so that's kind of like and it's completely random right you see that kind of works properly now there could be a couple of problems here for example if I just write plus and hit equal to you see that we get unexpected end of input that's because we are trying to evaluate something like evaluate to plus right so this is the problem so obviously we do not we cannot just leave everything on eval so we need to do some sort of validation at our end as well before actually executing this function so lets us get into the validation of this text before we actually hit it and if we see what we have right here is that how we are calculating this is if we press equal to we see that we call this function but actually before calling this function what I want to do is just validate the text as well so to alidade the text what I want to do is just basically say something like this dot do Ally date and this not calculate result so what it will do basically is that if this function returns false then obviously the second condition for the ant would not run so this returns true then our this function would actually run so we can safely just implement our logic right here so again we're gonna just get the text first with this dot state dot result text right here all right so now as of now what I can just imagine as a case is that we just leave an operator right there so if we do like something like if text at sli's negative one is equal to like plus or actually like we can just switch over it as well if you want we can actually just create an array as well of these operators there are so many ways to do it single thing in JavaScript sometimes so take stuff slice negative 1 is equal to or actually what are you go to right here KS plus K is minus K is multiplication case division and we just return rate turn false right and I just return true otherwise all right there we go so now what I want to do is just basically try out it again and dismiss and I say let me just try it from here one day so if I just say equal to I get when you do very well at a plus and then right equal to okay the app does not crash that seems right fifty five equal to that's great so now if I try to do like something like fifty five point and then do equal to then also it does not crash and mainly it does not because you can see whenever eval would crash then your so with your application you see that actually in JavaScript numbers are not really you know it does not really about if you leave a decimal right here so you see that X is still 55 right here even if you like fifty five dot right so it's not a big deal so yeah that's basically that's how you would a little bit of validation to your input feed right here so right now I have the regular calculator opened up and right here is the calculator which we have right so we have a couple of things to do first of all in the UI we need to update the colors so let's just do that really quickly so right here if we take a look where we are setting these colors and all is actually inside our stylesheet right or basically the react styles so what we want to do is just locate this yellow green columns and update them accordingly so to update it the colors let's just do a quick Google search right here say calculator Android let's just leave this we do not need here images and let's just pick this one because we would be able to just extract the colors just like that and actually this is a little trick I use if you did not know about it well there you go then so here it is our hex value for the yellow pad there we go and our hex value for the buttons on the right could be just mmm let's see instead of doing it a black versat there we go so instead of doing it a color white are we doing it correct numbers is a view we need to actually style the text right so actually not even the text these numbers right so yeah let's just do one thing let's just remove this color from here and instead what we want to do is actually style dot button text which is what you want to modify and give it a color of white and just like that and once we do that you can see that basically our calculator already and instead of this red and cream let's just make it right and right hit save and data let's just add a key property here as well so that react doesn't complain about it so for the key we can just give it a key of nums of IJ only because that's unique you have to keep your key unique and kind of you know relatable as well you can just throw in math dot random sure you can but just it's just preferable so if you have got some sort of unique identifier in your data then just go ahead and use that as the key reactors needs it so that it has a track of all the elements right and here we do not have that so just operations of I know this dot operations what the heck am I even doing this doll operations of I and there we are so this looks much more like a calculator and oh why the heck do we have another one in here each child in an array or a traitor should be a unique key we are doing that aren't we or does react expect us to do it here also so let's just see there we are and I believe we should be fine now yep okay it's it looks like kind of looks like a calculator not bad I believe but the obvious problem right here is that we start from here from here the buttons 1 2 3 4 5 6 7 8 9 and the actual calculator starts from the bottom so it's kind of like okay and again we can just keep it del instead of D and that's actually just easy you have to you can just make these as constants as well at the top so that you don't have to modify it everywhere if you change it once right so I just prefer to do that so you can do that as well but here since it's a small program we can just do a little bit of manual shifting right so now if we just it's safe so it looks much more like this right and we can do some sort of operations as well and holy crap so we have a white colored text here so we need to update that as well so very hard let's see let's see let's see here we are calculation text should be black and same for the result text should be black hit save there we are 22 plus 55 what it is hey it's 77 not bad can your calculator do it 22 plus 55 well obviously this calculator does not really require us to press equal to write and actually pressing equal to mix it and large so that's a task I want to keep do you guys now detect how you would create a functionality like this so obviously you have to make use of state variable here instead of like doing calculations when you click on equal to right so that you can update and you know change the state on a regular basis how the text changes right also make trying to make this font size a little bit bigger this one actually and remove the bold it looks like it's bolded so try to use a different font or thinner font and make it enlarge as well and you would basically good to go so that's all for our react native calculator applications if you liked it and don't forget to subscribe and thank you for watching