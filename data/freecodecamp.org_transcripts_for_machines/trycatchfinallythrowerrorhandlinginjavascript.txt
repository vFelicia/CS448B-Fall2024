errors can be coding errors made by the programmer errors due to wrong input or other unforeseeable things i will be discussing how to handle errors in javascript error handling is used most when working with data from other sources or user input since those can be unreliable it is common to see error handling associated with ajax calls and asynchronous code error handling uses the keywords try catch finally and throw the try statement lets you test a block of code for errors the catch statement lets you handle the error the throw statement lets you create custom errors and the final statement lets you execute code after try and catch regardless of the result so let's see some code okay here's the first part we're going to try some code to see if there's going to be any error and we're going to console.log start of try runs and then this part right here is the error because there is nothing in the program called unicycle and then it's going to try to run some more code here and then it's going to catch the error and then we're going to have the final statement i'm going to run this and then we'll talk about what's in the logs here so start of try runs that's right here and then it reached the error so since the error was reached here it never goes to this next statement once the error is reached it goes straight to the catch statement right down here it says error has occurred reference error unicycle is not defined at pin.js143 so we pass in an error object to the catch statement and then i'm going to console.log error has occurred and then we console.logged error dot stack now dot stack is is when it's going to show this part right here we can also do it without the dot stack where we just log the error and if i run that you're going to see this bar and this is what's going to be used usually not all browsers can handle the dot stack so when the error occurs javascript generates an object containing the details about it so so that's what this error object is and it's going to have two main properties name and message so the name is the reference error right here and then the message is unicycle is not defined and then i also already showed you about getting the call stack then it's going to go down to the finally statement whether or not an error happens we're going to always run the code in the final statement this is always run and then at the end you can see the execution continues so that's just after the the try catch statement is over it continues now for the try catch to work the code must be runnable in other words it should be valid javascript it won't work if the syntax is wrong like if i have a an opening brace here and then i don't have the ending brace and then if i if i try to run that well that's not going to work this is called a parse time error well try catch only handles runtime errors so the code has to be able to run so i'm just going to delete that here and then run that and then we can actually see it run this time there are many builtin errors that already exist but you can also create your own custom errors with the throw statement i'm going to talk about throw errors in the context of a more realistic use case for trycatch statements okay let's say you're going to get data from a server often from a server you're going to get json data sometimes through an ajax call but we're just going to pretend like we got this data from a server and then we're going to try this let user equal json.parse we're going to parse the data that we got from the server and then if there is no user.name we're going to throw a new syntax error and complete data no name so let's say we're expecting the data from the server to have a name but this doesn't have a name so we're going to throw a new syntax error input incomplete data no name now you can actually throw a number or a string or or a boolean but also you can create a new error like a new syntax error or a new error and you can pass in the message so syntax error is gonna be the name of the error and then this is gonna be the message of the error so if i run that you'll see what i mean so you can see down here we're gonna console.log jsonair and then we're just going to log the message e dot message so the message is incomplete data no name the name of the error will be syntax error so if we log the e dot name down here i run that you'll see json air syntax error or we can just log the entire thing and just do e and it's going to say json air syntax air incomplete data no name so it got the json error then it says the syntax error that's the name of the error right here and then it's going to have the message incomplete data no name so in this code if there was a name it would console.log the name but there's not a name as soon as it throws this error here it's going to go to the catch statement and that's when it logs the error statement right here so that's the basics of error handling in javascript check the description for a link to more information and also to the code used thanks for watching my name is beau carnes don't forget to subscribe and remember use your code for good