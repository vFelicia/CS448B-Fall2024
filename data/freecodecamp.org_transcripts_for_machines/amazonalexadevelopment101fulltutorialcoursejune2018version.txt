hey this is steve with davilab welcome to the course i'll be your instructor and the guy responding to any comments or questions that you might have as you work your way through the lessons the goal of this course is to give you a solid introduction to building skills for amazon alexa and to do that in a way that makes sense even if you've never written a line of code before in your life so there is absolutely no prior programming experience necessary however to make the best use of our time i will assume that you're familiar with what alexa is from a user's perspective and that you have just some basic computer skills the course is broken down into a collection of short videos most of them are under 10 minutes but a few are a bit longer also for some topics i'll be referencing related videos and resources that complement this course and for those i've included links in the course notes finally all of my demos are going to be done on a mac but if you're using windows or linux you should be able to follow along just fine okay i'm sure you're ready to get started so that's it for my introduction in the next video we'll take a look at how alexa works from a technical perspective and discuss what you'll need to get started as an alexa developer the jumping off point for getting started with alexa development is the alexa developer portal and it's located at developer.amazon.com alexa to get started you want to spend some time browsing through the public content there and what you'll quickly learn is that alexa is way more than just the brand and the brains behind the amazon echo alexa is also a service from amazon that makes it possible for anybody to extend alexa's capabilities or incorporate alexa into smart devices for developers the alexa service provides the alexa skills kit and the alexa voice service the skills kit lets you add new capabilities to make alexa smarter and these are called skills so if alexa doesn't do something now that you'd like her to do you can teach her how by creating a new skill the alexa voice service on the other hand is used for adding alexa to new devices or software so for example if you wanted to create an alexa enabled toaster you'd use the alexa voice service to do that our topic is building skills so we're going to talk more about the alexa skills kit the skills kit is a collection of resources to make it easy for developers to create skills for alexa skills kit includes documentation software development kits application programming interfaces and example code we'll be taking a look at all of these in more detail using the skills kit is free in fact in most cases you won't need to pay to publish build or host your skills and nothing that we're going to be doing in this course should cost you anything at a high level there are two things that you need to do to create skills you need to create a voice user interface for users to interact with your skill and you need to build a skill service that provides your skills functionality the first part is done through the alexa developer portal and doesn't require any coding but it does require an understanding of how alexa works from a technical perspective and we'll be covering that building a skill service is a bit more technical and does require some coding however even if you've never coded anything before in your life you can build a basic skill service using amazon web services fairly easily we'll talk more about building skills services in a minute but first let's take a closer look at the skill set up skill configuration settings and what's referred to as an interaction model tell the amazon alexa service about your skill and this lets the alexa service know how to recognize when users are requesting your skill and the functionality that it provides new skills are set up through the alexa developer portal at developer.amazon.com and when you set up a new skill you define how users enable and interact with it and how the alexa service will communicate with your skill service to provide your skills functionality the developer portal is also where you would submit your skill to be published in the skill store we'll talk more about the publishing process later on your skill service provides your skills functionality and this is code that you'll write to take action on and to respond to user requests amazon doesn't care how you create your skill service you can use any programming language and technology stack as long as it can properly communicate with the alexa service that said the easiest way and the recommended way to build a skill service is by using amazon web services or aws and that's what we'll be doing so to wrap up let me summarize how alexa works with a custom skill so first a user speaks to an echo or an alexa enabled device and the audio is streamed from the device to the amazon alexa service next the alexa service converts the voice stream to text and determines if the request is for a skill by looking at skill configuration information that the developer sets up in the alexa developer console if the request is for a skill the alexa service sends the request to a skill service that the developer created to provide the skills functionality the skill service takes action on the request and generates a response that is sent back to the alexa skill service through the alexa skills kit api from there the alexa service responds back to the user okay so that's it for our high level technical overview in the next video we're going to jump right in and create our first skill okay now we're going to jump in and we're going to start building a skill and we're going to take this process and break it into the the next couple of lessons to provide a high level overview of the process you can step through this as i'm going through it if you want to do that or you can just kind of watch the process to get a sense of what's going on we'll be building a custom skill later on but for this lesson in the next couple of lessons we'll be just walking through one of the skill examples or the example skills that amazon provides to just get familiar again with the setup process and kind of how everything is working like we talked about in the last lesson there are really two main parts that a developer needs to worry about when they're setting up a skill the first part is configuring the voice user interface and the other part is providing the the code or the functionality that is going to process and respond to requests that come in through that interface by users and the the first part of that creating the voice user interface is what we're going to take a look at in this lesson and then we'll um talk about the back end which is the skill service in the next lesson so the the starting point for setting up a skill is to go to developer.amazon.com and set up a an amazon developer account if you don't have one already in amazon developer account is free so you don't have to pay for anything you just sign up i'm not going to walk through the sign up process just because it's pretty straightforward the the only point i'll make on the developer account is that you probably if you have an amazon echo set up and you're you don't need to have an echo to do alexa development but if you have one you want to use the same email address with your amazon developer account that you used for the account that you set your echo up with and the reason that you want to do that is because if you're using the same email address or same amazon account for both your developer account and your echo then you'll be able to test your skills with your echo which is kind of cool even while they're in development you don't need to have an echo to do alexa development so if you don't have one no worries well there's a really nice test setup in here so you don't have to have a an amazon echo to do that but if you do then you want to use the same email address once you have signed up at developer.amazon.com go ahead and log in i'm already logged in and then you would go to your alexa consoles and then skills and this is going to bring you to your list of skills if you don't have any then you'll see something like this mine is empty right now and you're going to start by creating a skill and you're going to provide a skill name and we're going to call this one space facts and again this is uh this is an example skill that amazon provides and we're going to start with that to talk through what's going on so i'm going to enter the name and then select the the default language that the skills can use and in my case it's u.s english you also have support for different dialects of english australian canadian uh indian and uk english and then uh german japanese and french as well right now and then you choose next and you choose the model to add to your skill and this is like the the skill type and we're going to be working with a custom skill type right here which is the the most flexible of these skill types is where you're going to get the the most in terms of uh capabilities that you can uh provide as a developer these these other types uh provide sort of more specific functionality that's outside the scope of this course we're gonna be working with the custom skills so you want to select that and then choose create and this will bring you into the skill configuration area here and there's there's a lot going on in here we're going to talk through we're going to talk through all this it looks intimidating when you first get in here but it's really not that bad once you go through it at the at the high level what you're doing here is you're providing information that is going to be used to train the alexa service to recognize requests for your skill and for the functionality that your skill provides and that's all done through instructions that are provided in what's referred to as an interaction model and we'll we'll go through that in more detail a bit later but uh that's what's happening in this section here the other big part of what we're going to do when we're setting up the skill is tell the skill how it's going to communicate with the skill service which is the back end code that's actually going to provide the functionality we're not going to talk about that in this lesson we'll do that in the next lesson but that's done in this interface and then also from within here you are able to test your skill and we'll take a look at that after we get our skill fully set up and you can provide information to get your skills certified and launched in the alexa skills store here and then once your skill is live you can get metrics on its usage over here in the measure section so um we are going to set this up using a template like i said or some example code and we're going to get that code from github.com so if you go to github.com alexa you'll want to find the sample node fact skill here and in here if you go to models and then you're gonna pick the language that is the right language for your skill in my case it's this english us and then i'm gonna just copy this so just copy and then we're going to go back over here and we're going to just paste it in here so i'm at the json editor and i'm just pasting that in so um this is going to create the interaction model we'll talk about this in a lot more detail later in the course but for right now we're just going over the high level steps but the interaction model is what's used to train the alexa service the machine learning for the alexa service on how to recognize when your skill is uh being requested which is done through this here the invocation name space facts which we could also set through the graphical user interface here so anything that's done in the graphical interface is really just editing or changing this this json here that you can also see in the json editor and the the the intents and which are what the functionality your skill provides and then how that functionality is um is is gonna be asked for by the user so utterances or samples here and again we'll go over this in in more detail but at this point once we've got our uh our model in there and saved we can build the model and building the model is uh what trains the machine learning that's part of alexa and so depending on how complex the model is this can take a little while so at this point we've got our basic skill set up and the model building and the next thing that we're going to need to do is tell the skill how it's going to communicate with our skill service and we're going to do that in the next lesson now that we have our skill set up the next thing that we need to do is we need to configure the endpoint and the endpoint is going to tell the skill how to or the amazon service uh how to contact and communicate with the code or the service that we're going to be creating to handle the requests that come in from users and so at a high level again what's happening the flow if you recall from the uh the technical overview a user speaks to an alexa enabled device the device forwards the audio stream to the alexa service the alexa service takes that audio stream and converts it to text and then determines based on the interaction model what the user is requesting or the machine learning uh determines what the user is requesting and then if the request is for a skill the request is sent from the alexa service to a skill service and the skill service is code that we're going to create as developers to process the requests that come from the alexa service and in turn respond back to the alexa service with instructions or responses for how the alexa service should respond back to the user the important point here is just to to know that everything is going through the alexa service so uh the requests coming in from the user are going first through the alexa service from the alexa service to our skill service and then from our skill service back to the alexa service and back to the user the skill service can be hosted by really any any web server that can uh consume or or understand the requests that are coming in and they're they're just json requests if you're not familiar with json uh it is the it's an acronym that stands for javascript object notation uh this is json actually so it's um it's a text format and it is structured in a way that makes it easy for computers to work with and because it's text humans can see what's going on also but basically a message in this format goes back and forth between the alexa service and the the skill service and so the end point here is configuring where the alexa service is going to send those messages and where the alexa service is going to get responses back from those messages and in our example we're going to use a service that's provided by amazon web services called lambda aws lambda and so we're going to select lambda here and then the um aws amazon web services this is actually different from the developer the amazon developer console so you're going to need two different accounts you'll need one for the amazon developer council which we set up already the amazon developer account and then another for our web services account uh amazon web services account and this one is when you sign up you will be prompted for a credit card but there is a free tier so even though you've got a provided credit card nothing that we're doing in this course is going to cost you anything again we're using this lambda service here which provides a million free requests per month which is way more than you're going to need for this course so no no worries about that but you will need to provide a credit card so i thought i'd mention that i'm not going to walk through the sign up process here either because it's pretty straightforward but once you have an account you would just go ahead and sign in and you would go to the uh lambda service so if you just search for it here it'll remember down there and the lambda service allows you to run code without setting up servers and managing servers and all of that stuff so it's really great and uh simple to use for the most part let you just focus on your code and not all of the infrastructure stuff that is not not the main thing when it comes to uh writing code and creating services the um let's just jump in here and go through it so the uh the the service when you go in to create uh a lambda function you're going to create the code you've got a couple of different options here you can author a function from scratch and we'll take a look at doing that later in the the course but you can also use blueprints or this serverless application repository and these are uh like templates for setting up backend services that are hosted in amazon web services and that's what we're going to use for our example here so if you select the serverless application repository and then just filter by alexa and the um let's see skills how to we are looking for the facts skills this one right here so the alexa skills kit node.js fax skill and this is the one that provides a a a random fact which is uh the the back end to what we grabbed from github in the last lesson so we're going to go ahead and select that and you can leave the defaults here and then just choose deploy and once it's deployed i'll show you what we what we get here it is still deploying loading our resources and there we go all right so now we can go over to the skill that was created uh the lambda function rather that was created and if we click on the lambda function we can see the code that was provided as a part of that template here so this is javascript the programming language here node.js and when you create lambda functions you actually have the option of using a variety of different programming languages c sharp go java python and node.js which is a runtime environment for javascript which is what we're using here and so we'll uh we'll talk more about the the code a little bit later on but you can just browse this and see um kind of what what what's happening this one again is a an example that's going to give a a random space fact so one of the facts is a year on mercury is just 88 days long to make this work this is this is important here this trigger so the alexa skills kit the alexa service is not available in all regions so if for whatever reason you run into issues here or you don't see the trigger added you want to go up here and you want to make sure that you're in the well it doesn't need to be the u.s east region the u.s east region does support the alexa skills kit for sure not all of them do a lot of them do but if you have any question and you just want to get to a region that supports skills kit for going through these steps you can just select us east because i know that one does and then the alexa skills kit is going to um enable the alexa service to call this function and so we are going to now just need to configure our alexa skill so that it can access this backend skill service and we're going to do that by copying this up here which is a unique identifier for this function that's called an arn or an amazon resource name so i'm just copying that and then i'm going back to my developer console so at developer.amazon.com and to the service endpoint and i am just going to paste that in that endpoint to that lambda function and if it's all in there i can just save here and it's saved so at this point i have a complete skill set up i've got the skill set up in the developer console i've got the interaction model in here that i copied and pasted from the example on github and then i saved the interaction model and i built it and the build process is what trains the alexa service to recognize a request for this skill which is named space facts and it will be invoked using that name also space facts and then we configured the skilled point to the skill service and so now we can go ahead and test and this is where we're going to leave off for this lesson and then the next lesson we'll look at testing and talk a little bit about the testing process once you've got your skill completely set up the next thing you want to do is start testing it and like i mentioned earlier if you have an amazon echo and you set up your developer account using the same email address that you set up with your echo you can start testing your skill using your echo by simply enabling the test right here so when you do this you're also enabling the skill under your account again if you're using the same account that you used when you set up your echo or the same email address and if you don't have an echo like i mentioned earlier you don't need one because this test simulator here provides everything that you need to test the skills so we can use this just like we would use in echo so we can say alexa open space facts here's your fact earth is the only planet not named after a god all right and that pulled the fact from the skill service that we set up and i can also test in here using i could submit my input using text also so like open space facts like this here's your fact the milky way galaxy will collide with the andromeda galaxy in about five billion years okay so my skills working right now i want to just point out a couple of things here um so this json input and json output here the input is the input that's going from the alexa service to your skill service in our case that lambda function that we just set up so the alexa service is generating this and sending this to the endpoint and then our skill service our lambda function is reading this taking this in and responding with this here the the json output and this is what's going back and forth between the alexa service and the skill service all the time there's a json message like i mentioned earlier and the skill service is reading that message and acting on whatever the message is saying that the user wants and sending a response back the um the the one point here i want to make is really about um when things don't go right when you're testing so uh let me um let me let me show you uh kind of a case where things aren't working so right now everything worked and we got a a response back that the alexa service could understand but if you're having problems you you might not get enough information over here to know what's going on so let's let's uh create a problem like that so i'm gonna go over to my um i'm gonna go over here to my lambda function and i'm gonna just modify this so that it generates an error that um that the alexa service will not know what to do with so let me change this to just making this change again just to to generate an error to illustrate a point so now when i go back over here and i uh test i'll say open space facts there was a problem with the requested skills response and so this time because my skill service didn't respond with something that the alexa service knew what to do with uh the alexa service is just telling me that there was a problem with the skill service but the alexa service doesn't know what the problem is all the alexa service knows is that it didn't get a message back that it knew what to do with and so i just get a generic error message which if you're getting that and you don't know how to go about figuring out what's going on can be pretty frustrating and so what we're going to want to do if something like that comes up and we're we're not getting into in this lesson deep into the code and debugging and all of that stuff but i want to touch on this because it's important we're going to need this as we start building our own custom skill but what we're going to want to do is we're going to want to simulate the request that's coming from the alexa service to the lambda function and use the debugging in lambda to try to figure out what's going on and to do that it's pretty simple you would just copy an example of the request that's coming from the alexa service which you can do by just copying the json input here and then you want to take that over to your lambda function and there's actually a test a way to test right in here so you can do this test here configure test event and i already configured this so i'm going to do it again just to show you you would just paste in give your test uh a name and i called the the this one launch request you can call it whatever you want and then uh you would just save it in there if um i didn't already have this button would allow me to save and then once you've saved your test you can submit the test and then when you submit the test you will see the error message here with a lot more details and actually you see it down here as well so you can use this information to debug what's going on and again this lesson is not about debugging as much as it is just generally how you would approach testing alexa skills so we'll come back to this as we start modifying code a little bit later on but we would go about debugging our skill service in the lambda manager in the aws council and we could from here figure out well we know what's wrong with this because we created the error but we could figure out more easily because we have information to uh to figure out what's going on and we can debug it there and then when we go back of course it would uh it would be fixed or we could retest it in here so that is a just a quick introduction to how you would go about testing we're gonna need this as we're developing our skill especially when things go wrong which um they they will from time to time as you're as you're building stuff so you want to know how to go about debugging it in the uh next lesson we will dive into the code a little bit and look at modifying the code and with this debugging lesson we can do that hopefully confidently because if something goes wrong we'll know how to fix it so we will jump in that next okay now that our skill is set up and we know how to go about testing we can take a look at the code and the make some changes to our skill service code so the code that we we have here again is just an example that's provided by amazon and the example is written in javascript because we're using node.js and we're not going to dive deep into this right now but i do want to point out a couple of things so when you're in the uh the lambda editor here there is a pretty nice code editor that you can use to edit this code and you can expand it and if you're working on more complex skills you you'll probably want to use a local code editor for but for what we're doing this is um this this is great and you can see all the code here make changes to the code here and the the files that are associated with the code in this um case here we've got because this is node.js uh we've got some node modules that are included and node modules are reusable code and the notable one here is the the ask sdk and the ask is the alexa skills kit sdk and it is a a module that makes working with the requests from the alexa service really simple so rather than having to write code to decipher what is in that json message that's coming over and to generate a json message going back the alexa skills kit sdk provides methods that make that really easy for us to do without writing a whole lot of code and um we'll we'll talk about that more in a later lesson but for right now um let's just look at making a uh a couple of simple changes in here and then i want to talk about the the relationship between the code and the uh the interaction model because that's uh that's pretty important so um for starters making a change that goes back to uh your user through the alexa service is just a matter of making a change to your skill service so in this case here um you know here's your fact if i just change this to here's your cool fact and save it um save up here now if i go over and test here and just say open space facts here's your cool fact despite being farther from the sun venus experiences higher temperatures than mercury so the change that i made is immediately available for the user so any changes that you make in your skill service the alexa service is going to use whatever the skill service sends back and provided that the the response is a format that it can use it will be good to go the the the part that is a little bit more involved is figuring out what the alexa service is sending over and mapping what the user wants to a a a code function that can handle it and that is done through the interaction model and so i'm gonna talk through what's going on in a little bit more detail in the interaction model and how that relates to the the code and then we'll um we'll in the next lesson we'll go through some examples of using that but first i just want to talk through it so the uh the interaction model like i explained earlier is um is it's basically instructions for training the machine learning that is behind alexa so that it can understand requests from a user that are requests for your skill and functionality that your skill provides so in the interaction model and i'm just looking at the the json editor here which you can create the entire interaction model just in uh code like through the json editor like this the um the the key pieces that you want to understand are the um first the invocation name and we set up the invocation name through the visual editor or actually well we copied and pasted this in but the invocation name is the name that the user is going to use to invoke or start the skill and then um in addition to starting the skill the skill will provide functionality and and functionality is referred to as as intense or requested functionality is identified and uh referenced as intense it's a better way to say it i think so um so an intent is what your skill can do and it maps to what the user wants and what the user wants or is requesting is derived from utterances the things that a user says and so we provide along with intents we provide samples of things that a user might say to uh tell alexa uh how to recognize when the user wants something specifically that our skill provides and there are two kinds of intents there are custom intents and that is what this get new fact intent is and then there's also builtin intents and builtin intents we can we can add some of them are required like these ones are required but builtin intents are our default functionality that is part of the the alexa service and so for example the ones that we're looking at here like the cancel intent uh recognizes when a user is um wanting to cancel a uh a session with a skill and help is pretty selfexplanatory but um is going to recognize when a user is asking for help within a skill and so these builtin intents here are kind of ready to go you don't have to provide utterances for them in some cases you can extend their their capabilities uh with additional utterances but it depends on the the intent there's lots there's lots of different builtin intents in fact take a look at that real quick so um there is a library of lots of different intents from uh you know types of musics and artists and you know all kinds of things so alexa can recognize lots of different things that a user would say even without you having to train it how to do that and so the the next part of this though is is how the intent maps to functionality that's provided by the skill service so it at the the high level flow we've got a case where a user is going to open up a skill without providing any other information other than the fact that they want to open the skill and we did that in the test here when we said um open space facts and in that case there the message that was sent over was let's do that here's your cool fact jupiter has the shortest day of all the planets okay so in in this case here all we did was ask the alexa service to invoke the space facts skill in this next example i'm going to ask for a fact and this is here's your cool fact a year on mercury is just 88 days long so in the example of this skill it's it's it's pretty tough to see the difference because the response that we get back is the same we get a random fact no matter what we do but if you look at the request here so in the first case uh the request that came in to the skill service if you look at it is a launch request and this is how our skill service knows that this was a case where the user was just opening the the skill up and not doing anything else in this example here the request came in uh but i asked space facts for a fact and the alexa service recognized that in this case the request was for a specific intent and that intent was the intent called get new fact intent and the way that the alexa service was able to determine that this utterance was for this intent is because of the samples that were provided and so if we go back over here and look at our get fact intent you can see the the samples in here and so the uh the utterance the things that users say uh are going to provide the information that the alexa service needs to uh determine what it is that the user wants in a really simple case the utterance is just going to map to an intent and it will be enough information to tell the alexa service and our skill service to execute whatever code is going to handle that intent in some cases however intents need additional information from the user before they can be fulfilled so this get new fact intent isn't an example of one but let's say we had a skill where a user could order a pizza in that case um we would need to know the size of the pizza the toppings um the delivery information and the parameters uh size topping those things are referred to as slots so slots are parameter values that we need to fulfill intents that are extracted from uh an utterance and we'll get into this in uh in more detail later on so this is just kind of high level talking through the these pieces and so minimally you will have a a launch request where all the service knows is that the user is invoking your skill you can have a launch request that includes an utterance that would not just tell the alexa service that you're trying to launch a skill but it would also provide information to map the request to an intent and then in some cases you'll have intents that require additional information to be fulfilled and that is information that is held in parameters called slots and then the the other point on slots is you can provide slot information as part of an utterance and a launch so if i had an intent that was um to order a pizza i might say and let's pretend my invocation name is um you know pizza skill i could say alexa tell pizza skill i want to order a pizza and that might map to my order intent but my order intent might need to know what toppings i need so if i didn't provide any slot that would be filled for toppings the intent would respond with okay what kind of toppings would you like but the user might also say alexa asks pizza skill to order a pizza with pepperoni on it and in that case i'm getting an utterance that is not just mapping to the intent but also providing information to fill the slot and again we're going to come back to this because we're going to use it as an example so right now i just wanted to uh to to talk through it and that information slot being the the intent being uh uh requested and the slot information is all going to get passed as a part of the request and we're going to need to handle that as it comes into our skill service and the um the alexa sdk is going to help us do that we're going to go into that and walk through an example of creating an intent that has a slot and passing that slot information over to our skill service and responding in the next lesson so in the last lesson we talked about intents slots and utterances now let's take a look at actually using them in our skill service code and we're going to start with the interaction model so we're going to create a new intent in here and then we're going to wire it up so that we can respond to the intent in our skill service so i'm going to create a simple custom intent called the hello intent and i'm going to add some sample utterances i'm going to start with just high and hello so when a user says hi or hello i want this intent to be the intent that um responds so i'm gonna save that for right now and i'm gonna start this model building we're gonna come back and we're gonna test and just a minute here but while this is building let's take a look at our skill service code so i'm going to use this space facts skill that we've been working with and hack it up a little bit here but i can use this as a starting point because it has the alexa skills kit sdk and some sample code that we can work with so um what i'm going to do is i'm going to just copy and paste for starters i'm going to copy this handler that was set up to get a random fact and i'm going to change this change the name of it to the hello handler and the first part of this code what it's doing is it's taking in the json that is being sent over by the alexa service that's this handler input value here and then that is down in this next line here that is being used or a piece of that object is being used or an object from within that object the request object is being used here is this constant named request and we're going to keep that but this next piece here is saying to use this handler when the request type is a a launch request which we don't want to do we're already doing that down here for the get new fact and we'll leave that the way that it is for right now um but what we will change here uh is what happens when this intent is uh is requested by the user and so we're going to get rid of this stuff here because we don't need that anymore and we're going to change this for now we're just going to say hello like that and we're going to get rid of this also this is writing back a card in the alexa companion app and we don't need that for this example okay so now we've got a handler that is going to look at the input that's coming in from the alexa service and if the input request is an intent request and the intent name is oh not not get new fact we want to change this to something different we'll say we'll call it the hello intent because that's what we named it okay so this all looks right all we need to do now is come down to the bottom here where uh this section that says exports handler and then add request handlers and we need to add this new request handler that we created in here just like that and then we can save it and so now if um now if we look at the code and just step through it again what's going to happen when the request comes over is the this handler is going to look to see if the intent request is named hello intent and if it is then this is going to respond with just hello really simple right now so let's go back over here to our uh developer console and oops got logged out log back in and let's test this out so um tell space oops tell space facts hello hello so it worked so let's look at the input here so the json that was sent over to the skill service from the alexa service you can see here in the request section here the type of the request was an intent request and the intent name is hello intent and the interaction model is what was used to generate this we created the interaction model so that the alexa service could understand that when a user says hello that we want the hello intent to handle that and so when this gets sent over to our skill service over here our skill service code now is able to recognize that and respond back with hello so that is the um those are the steps for setting up the interaction model and then handling the request in the skill service now let's take a look at what we would do to pass a slot value over to our skill service and the um the steps pretty similar so we want to go back to our interaction model again and we want to go to the slot that we just set up our hello intent slot and now we want to also include not a slot but an intent our hello intent intent and we want to add a slot to it so um i'm going to say my name is and then in curly braces add the name of a slot that i want to use as a placeholder for a value so i'm adding that right into my utterance so my utterances my name is and then curly braces name and when you do that you'll see down here the the slot with the name name gets added and then you just need to set a type for the slot and there is a slot type for names specifically first names and um i think there's also surnames or last names but i'm gonna use for this example amazon.usfirst name here so now this builtin slot can recognize first names and pull those out of the uh the utterance so i am good to go here so i'm gonna save that and i'm gonna build the model here okay and while that's building actually i'm not going to change the code until this is done building because i want to i want to show you something in the intent request first that we're going to use to um to know what to code in our skill service and this is kind of a pretty common way at least that i do it so i'll once i make changes to the interaction model i'll generally test first to see what the intent request is going to look like and then you just make sure that the inner that the alexa service is doing what it's supposed to be doing with the uh with the user utterance so i'm gonna go over here and just test this out so tell space facts my name is steve hello and let's make sure that it works so what i'm doing to make sure that it works is i'm looking at the json input and this again is what the alexa service generates to send over to the skill service and if i come down here into the request i can see that the hello intent is the intent that i'm uh i'm wanting and that my utterance here with my slot in it is also being uh recognized here so i can see now in the there's a new slot section down here and then the name name is the name of the slot and the value is steve and that's what i'm looking for when i'm testing now what i want to do is i want to respond back and use that value so i'll say like hello steve or whatever the value of the slot is when it comes over and to do that i'm going to go back over to my skill code here and i'm just going to say respond back with so the input handler here is the object that's going to um the object that's going to include everything that's in the json request so i can sort of navigate this object by looking at the json that's coming over so right now i can see in the request object i've got intent and slots and then name or value name here and then value here so i want intent slots name and value to get this so back over here i can go request intent name dot value slots right slots.name.value and then if i save this let me just double check so request intent slots name value and just confirm over here intent requests intent request intent slots name value okay so now if i test this again my name is steve hello steve okay so this time the response and is using the value that was um sent over for the slot and so just to recap what what we did here so we set up the interaction model with the intent and we added a slot to the intent and we included the slot parameter as part of the utterance so that when the user makes a request to the alexa service the alexa service can identify what intent the user wants and also extract the the value of the slot in this case name so that it can be passed over to the skill service and then once we pass it over to the skill service or the alexa service passes it to the skill service we can use it in our skill as part of the response and this was a really simple example in a more complete example we would do things like check for slots that aren't filled and if they aren't filled and we need the value then we might respond back by prompting the user with a prompt to the user for the the slot value things like that but for for right now we just wanted to step through the uh the process of using slots and uh setting up intents and using them in our code in the the next lesson we're going to step it up a bit and we're going to look at coding using a local editor and the alexa skills kit command line interface and so up to this point we've been doing everything in the browser which is fine for what we've been doing and fine for for simple skills but as you uh as you get uh to building more involved skills it becomes harder and harder to to work in the uh the web editor so we're going to take a look at a local editor and talk about the alexa skills kit command line interface next doing we've done through the browser we set up our skills at developer.amazon.com through the browser and we set up our skills service through aws and lambda also using a browser and being able to do everything in the browser is really nice however as you get more serious about building skills you're also going to want to know how to build skills from your local computer and that is what we're going to talk about in this lesson and to do this there's some software that you're going to want to have and i'm going to talk about the software that that i use and sort of your minimal requirements and then we'll look at it a little bit and move on from there so first you're going to want to have a code editor and there are lots of options here and there's not necessarily a right or wrong choice as long as you can edit text and code it will work the one that i use and i'm going to be using for the rest of the course in the demos is one called visual studio code and it's free it's open source and it's available for mac windows and linux it is uh supported and provided by microsoft so the documentation and support is really really good which is one of the things that i like and there's a great community around it so there's all kinds of plugins and uh themes and and all kinds of good stuff so i like this one a lot like i said before i mean there's lots and lots of editors out there so this is certainly not the only one uh but the one that i'll be using for the rest of the course and and my my my preference this is visual studio code here and uh one of the things that i like about visual studio code is that it has an integrated terminal so the the uh the command line if you're a mac person then you might be used to this and this is the same thing so i can the commands that i can run here i can run down here and that is integrated into visual studio code and the the terminal also works if you're a windows user and you use the windows command line you would have access to the command line here and this is important because a lot of what we'll be doing and what you'll be doing as you're building skills will involve using the command line because the other tool that you're going to want to have is the alexa skills kit command line interface or the ask cli in the ask cli is a a tool utility that allows you to create manage and deploy alexa skills and that means everything that we've done through the web browser can be done from the command line as long as you have the ask cli and so let me let me show you uh what i mean so um here um i've got the alexa skills kit cli installed and i'm not going to walk through installing and configuring the software in this course but i'll leave a link out if you go to devlab.com learn i'll leave a link there to a tutorial that i did that walks through setting up and configuring your your local environment so the alexa skills kit command line interface mainly and uh again i'm not gonna walk through that here so as i'm going in and doing this stuff i've already gone through and set it up and configured it with uh permissions that allow the cli to uh push my skills out to my alexa console and also to aws but with the alexa skills cli installed i can go ask new and this will prompt me for the name of a skill if i want to create one and let's say i want to create one called hello world it's going to create a skill project which is this folder over here and in the skill project i have everything that i need to deploy and create a skill uh both the the skill configuration information for the developer alexa developer council and and also the lambda function and so here's the lambda code there when i did this ask new it provides some boilerplate code when you do that it's sort of like a hello world skill and i'm not going to go through the code yet i'm going to do that in the next lesson but let me show you just by doing this how easy it is to deploy the code from your local computer out to the alexa skills console and lambda so you would just from the directory that you're working in you would go ask deploy like that and now what the ask cli is doing is packaging up the skill uh deploying it out to developer.amazon.com first building the interaction model next and then last it is pushing the um the lambda function out to aws and so this takes a minute for this to happen but what you'll note here is that everything is done from the command line i don't have to go and log in through the web browser at all to do this once it's set up and configured and that is a huge benefit just in your workflow as you're making changes to skills and republishing them and testing them and you can actually also test from the command line here as well but let me go out and just show you what happened we'll start in the developer console just by doing that now if i refresh now there's my hello world skill that was just created using the ask cli and if i go out to aws.lambda or aws.amazon.com to my lambda and you can see that there is also a lambda function that was created for my skill service and i could edit these here because all the code is here and i could edit the skill over here just like we did in the earlier lessons but i don't need to do that anymore because i can make all of the changes that i want to make locally i can edit the code here and i can edit the information as well again in the next lesson i'll go through and kind of walk through what what's going on in here and then i can just do deploy again and all of my changes will be deployed so it's a much uh much better workflow as you start working on especially more complex skills and making changes and uh so that again is what i'm going to be using going forward in the next lesson i'm going to spend a little bit of time going through this uh this code here to give get you familiar with what's going on and then i'm also going to show you how to get some sample code that you can work with to to to start understanding and building your own skills from so that we will talk about in the next lesson okay we're going to pick up where we left off and we're going to take a look at the code that the ask cli creates and how we can modify that code to make changes that we push out to lambda and to the alexa developer council so ask new when we ran that command we got our hello world skill and the if you look in the skill project this folder here you've got a few things here you've got a folder called lambda and this is where all of the lambda code is in this actually this custom folder here and so if we looked at the lambda function in aws actually let's do that we go over here and let's go to our functions here and this is the new one that was deployed if we look in here you can see the files and the node modules and all of the things that are here get deployed out to here and so that is what's in this custom lambda custom folder here and then the interaction model which is in the developer console let's refresh this so in here so the interaction model here is this here so we can change the we can add intents and slots and all of the things that we've looked at uh previously changed the invocation name the default invocation name for this is greeter um so we can change all of that here and then last is the skill manifester the configuration information which is this skill.json file and this file contains settings for all of the additional information that you would have about a skill so things like the public name and the description keywords all of that can be added to that skill.json file and you can use that to make all of your changes so you don't need to log into the developer console through the browser to make changes or logging you don't need to log into aws to make changes to your lambda function so it makes sure again your your workflow just a whole lot better let's let's make a couple of changes just so we can um take a look i'll just make a really simple change here so the default name is hello dash world which is the name that i gave it when we set it up and i'm going to just get rid of the hyphen and i'll just say and capitalize these so hello world like this so small change of course i could go through and edit the description testing instructions example phrases all that but just to illustrate the point i'm not going to do that and then the interaction model change it to my greeter and i'll save that and the lambda function will just make a change to this it says when we opened it up it was welcome to the alexa skills kit you can say hello and i'm going to just change this to welcome to the course you can say hello so i'll save that and so we just made a few simple changes and now i'm going to go down here and do ask deploy again and it's going to go through the same steps it's going to deploy the skill information first and then it's going to build the interaction model next and this takes a little while building the interaction model just like when we do that through the developer console through the web browser that takes takes a minute and that's what's going on right now and then once that's done the last thing is it's going to deploy the lambda code out to aws and um once that's done we can go test it you can actually test right from the command line too we're going to go into the the the web browser just so we can see the see the changes that's almost done here i think okay so now let's take a look so now if we go out here and refresh this we can see the change that i made to the name just remove the hyphen not a big change and then also if i go over here to build and look at the invocation name you can see that it's changed now from greeter to my greeter and then the last piece we'll see if this is finished deploying it is so we'll go over here and we'll test it and see if we get our new greeting so we'll just say open my greeter welcome to the course you can say hello so there's our change so you can see the workflow uh for making changes and updates when you're working with the ask cli and doing everything locally is just really really simple and that's what we're going to be using going forward i want to show you one a couple of other things about the ask cli specifically how you can use templates so the the default when you do the ask new command the default template is that hello world template and or the greeter template which is like a hello world template but if you do ask new and then dash dash template there are some other templates that are available from amazon that you can use as a starting point too so this buttons color changer template city guide decision tree fact which is the space facts template that we looked at previously a rss feed news feed template and then hilo game how to pet match quiz so there's a there's a bunch of them here that you can use as as starting points and we're going to take a look at a couple of those in the next lesson and we're going to look at modifying a couple of templates so that they work as a really good starting point let's for right now just take a look at the fact one because we looked at that before so we'll see what happens uh oh you know what i did i didn't move out of my when i created this i was still in the hello world folder do that again and we'll do this fact okay let's delete this and this is our space fax so the code in and this one is actually a little bit different than the default code that you get when you use the um the blueprint or we didn't use the blueprint but the uh the repository version but uh you can make the changes here again and deploy deploy this if you want to uh if you want to do that the the other thing that i want to show you is um you can also get templates from other locations so the if you do ask new dash dash template uh the default templates are going to come from amazon but you can also get templates from other locations and one of those is skilltemplates.com so https skill templates dot com slash templates dot json like that and these are templates that uh that i created actually and so uh it's a list of just basic starter templates that you can use to um uh to to to get going so like the basic starter one is really similar to the default one that amazon provides with the main difference being the configuration information so in the skill.json it's got all of the configuration information so that when you deploy this it by just changing this json here you're ready to submit the skill for certification you would just want to use your own images of course and keywords and change all this where the the default hello world one doesn't have all of the settings in here and so you end up having to go dig through the documentation to get the settings but those are all provided by this one there's some other templates what we're going to do in the next lesson is we're going to look at diving into one of the templates modifying the template and then deploying the template so that is coming up next so at this point we've covered everything that you need to know for the most part to get your first skill up and running based on a template and what we're going to do in this lesson is recap and walk through all of the steps and i'm also going to talk about how you would go about beta testing skills and also discuss the process of getting the skill certified if you want to develop a skill that's going to be public so we're going to start with the alexa skills kit cli and i'm going to use the ask new and we're going to use a template and there is a template that amazon provides called team lookup and this is like a company directory skill and so we're going to use that one for our example here and so what after you select the template that you want to work with uh and most of the templates provide if you look there's like a readme file and you can go preview like this to read about the template and there's instructions for setting the template up and all that good stuff the things that you're going to want to do um you're going to want to modify the lambda code and the the goal of this course was to um to not get into the the coding part uh so much so we are in the code of course here but we're not really writing code uh so much as just um finding the the pieces that need to be edited if you're working with a template and with this template in most of the templates they're very well documented so you can read the comments and uh sort of navigate your way through what needs to be done in between the comments and the code and the readme file you should be able to uh to navigate easily through this but in this template the team lookup template there is most of what you're going to need to do is just change the references to the people so they've got the development team and the alexa team in here and you can copy and paste and change this to add your own team members in here and then further down there's like the skill name you can change that and you can change the welcome messages and um pretty much anything that you see that's in quotes is something you can change and then i think they say yeah so this comment here so caution editing and editing anything below this line might break your skills so if you're not comfortable coding yet you can just avoid changing any of this stuff down here if if if you are comfortable coding or you want to start learning that templates are great because all the code is provided in all the templates and so you can come and look through the code here to get familiar with what's going on and if you want to build your own skill you can either build it directly based on a template or use some of the code in the template to build your own custom skills so a lot of times they for me will act as a reference you know so you can see how one skill does something and then use that in the skill that you're creating so once you've modified the lambda code the next thing that you would do is modify the model here so assuming that you're not making any major code uh changes all you would need to modify in the model is just the invocation name so the name that you're gonna use or the user is gonna use to start the skill up and then the last thing is the skill.json here so this is all of the setting information that's going to be used in the alexa developer console so this is going to provide the name of the skill here and you can change that and the description um the example phrases so you're going to want to go through and edit all this you're probably going to want to provide your own icons and so you would use 108 by 108 is the small icon 108 pixels by 108 and then the large icon is 512 by 512 so you would want to provide a url to the icons that you're going to use for your skill and then at this point once you've modified everything then you would just deploy it so you would move into the team lookup folder and just do ask deploy like that and the cli is pushing the skill out to the developer console and then building the interaction model which takes a minute and then it's also going to deploy the lambda function and while that's happening let me show you one other resource that you you might want to use if you go to alexa.amazon.com and log in this is going to provide you with the equivalent of what you get in the alexa or in the echo alexa companion app for the amazon echo so if you've got an amazon echo and you've installed the app for ios or for android this is going to provide the same kind of functionality so this is where you would go and search for and enable skills and also on the home screen where you would see any card so if in a skill you can write back information to the companion app using cards and you can see this is a card that was written back earlier when we were working with the hello world skill and so if you want to test that you can use the alexa.amazon.com to to do that the other thing worth pointing out in here so if you're wondering if the name a name that you want to use for a skill has already been used you can search here for skills and find similar skills if you're trying to get inspiration or if you're trying to make something that's a little bit different and wondering if somebody's already built it and then over here your skills this is going to be a list of skills that you have enabled and then you'll see under dev skills any skills that are in development so like here's our team look up skill here and i would bet by now this is all deployed and it is okay so the next thing that we would do once the once the skill is deployed then we're ready to invite some beta testers and then once we get the beta testing process done and we've got the feedback that we need then we're ready to deploy it to the public skill store or maybe you just want to deploy it as a company skill and i'll show you how to do that so you're going to do that from in the developer council here so once you once you've deployed this skill you can go back into the developer console and here you would edit go to edit for our team look up and then you're going to go to so we we test ourselves while we're in development but then we also want to beta test and to do that we would go to launch here and provide all of the uh the details for the skill and this is the stuff that we provided inside the alexa.json file so here's like the reference to the image that are provided we would change those of course the only thing that is not provided at least in this one is the the privacy policy urls because these are going to be the urls that would point to your privacy policy of course so i'm going to do mine and also to your terms and conditions so you you these are required you need these if you're going to publish the skills so you'll need something out there and then save and continue and then there's some questions about um that you need to answer for the certification process does the skill allow users to make purchases or spend money you want to go through and answer all these and provide any testing instructions that if there are any any special instructions that you would want the testers to know and then save and continue and then the last step here is to choose how you want to publish the skill and so you can publish it publicly in the skill store and this would make it available for anybody to enable you can publish it for just your organization you would need to have alexa for business set up to to do that or you can use the beta test option here and so to beta test you provide your email and you're going to be the administrator so whatever your email is and then down here you would provide a list of email addresses for each one of the beta testers and you can upload a list in a csv format or you can enter individual email addresses separated by a semicolon and you can have up to 500 of those the email address needs to be an email address that corresponds with an amazon account that is associated with either you know in a an amazon developer account or one that's used for an amazon echo and then the user or the beta tester is going to get an email and in the email there's a link that they can use to enable the skill and when they enable the skill it will show up in their skill list as a skill that's in development also so these are some skills i was invited to test which is why they're showing up and so if you got an invitation uh or your once your users get an invitation then they would be able to test the skill using their amazon echo even while it's in development before it's publicly available just like you can test it as the developer so that is the process for configuring the skill start to finish or using the template and then configuring it for beta testing and once you're done with the beta testing at this point you just save and continue to submit the skill for if you wanted to go public to submit the skill for certification and the certification is um pretty quick it's like a couple of days at the most usually and if the the skill if there's a problem with certification the response back that you get is um very detailed in my experience so they'll tell you exactly why if it fails certification why it failed and what you need to do to resolve that and um yeah so that is it at this point again you have everything that you need to get your first skill up and running based on a template and that is where we're going to to wrap up in the next video i'm just going to do a high level recap and talk about some resources and some things it's kind of next steps that you might want to to take a look at or that you might be interested in congratulations you've completed the course you should now have a solid introductory level understanding of how to build custom alexa skills and hopefully you're pretty close to having your first skill completed from here you'll want to practice what you've learned so far and then move on to some more advanced topics and here are some suggestions for possible next steps first head over to dabilab.com learn there you'll find links to all of the resources that i mentioned in this course and you can also subscribe to get notified when this course is updated or when i publish a new course i am planning on publishing more advanced courses so hopefully if you liked this one and you want to dive deeper you'll want to check those out too also alexa is constantly evolving and as a result this course will have revisions so by subscribing i'll let you know when those updates happen next you'll want to check out the dabble lab youtube channel at youtube.com there you'll find over 50 alexa development tutorials that complement this course you'll also want to go to github.com alexa to learn more about the alexa sdk for node and while you're there start digging through some of the code for the sample skills that amazon provides and we've also created some sample code starter templates that you can use and you'll find those at skill skilltemplates.com well that's it i really hope that you enjoyed the course but i also hope that you'll let me know if there is anything that you think i can do to make it better finally if you have any questions about anything that i've covered don't hesitate to leave a comment and i'll respond just as quickly as possible hey thanks again for taking the course i hope to see you in a future course