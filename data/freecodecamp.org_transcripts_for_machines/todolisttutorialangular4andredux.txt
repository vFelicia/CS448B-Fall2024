hey guys and welcome back to lesson I'm Cody my name is Ryan lesson so I have to come clean and apologize that I had not been getting my videos up as frequently as I wanted to since my last video I've actually moved from Dallas to Seattle so if you're in the Seattle area be sure to hit me up alright so the inspiration for my next video comes from one of my subscribers he countered on one of my videos asking me to show him how to build a todo list with the angler 4 framework so you know I could have showed him how to do that with England for framework but you know what I thought I'd make it even more interesting so not only am I going to build with the England for framework but I'm gonna be using Redux as well to manage the state of the application so I thought any further ado let's hop into the boilerplate code and the setup for this application so first up if you haven't already seen my last video I built an angler web pack starter kind of like a skeleton for your project setup if you like to follow along this whole project was built off it so be sure to clone it down and I include the link to the repo in the description below okay so once you have that clone down there's a couple things you need to MPM install so things are this Anglin redux store redux the reves observable and T aside so I'll go into it all these are doing a little bit later and once you have all that we need to also install JSON server which I'll be using for my restful api and to do that you will need to come to the command line and run NPM install JSON server g4 global ok I'm not gonna run this because again I already ABS installed but if you do not have JSON server installed please be sure to install it globally alright and one last thing is JSON server runs on by default on port 3000 so we real quickly need to go into a web pack dev config and change it from port 4500 to port 3000 awesome so that's all we need for this setup let's hop right into building the application okay guys so first thing let's blew up the application so let's come into our command line and run npm run start alright so while we wait for this to compile and take a quick drink here Oh God look compiling gives you time to think and boom there we go okay so our applications all booted up so as you can see I gave you guys a quick UI representation of how this to business will be built the two's list will consist of what to do with a name property a description completed it created I left some space here to add a delete button alright so for each to do we will be setting up grunt for it and if you haven't heard of crud crud stands for create read update delete so for each to do we will be making you know giving a crud you know functionality so let's get started and with the first letter is c4 create before we hop ahead let's step on the brakes to talk about the JSON server so the JSON server I'm pretty sure you to pass in any JSON object you specified and you basically passed it in like this and it'll basically set up a restful api which is let's create read update delete functionality for each object property here so you can see for this to do is we will have a restful api built for that so it's very cool and very lightweight to use a perfect for this demonstration so after you guys see this we're gonna go and delete this because again we will be creating our to dues from our actual UI over here okay so first things first ice we're going to need to create a form for us to actually create the to do so let's go into our abdominal and let's import the reactive forms module because that's we're gonna be using to create our forms and it's going to imports and it's important awesome alright so next thing we're gonna go into the app component TS i'm gonna quickly scaffold out the form here so I imported a couple things that we're gonna need to set up the reactive forms on model and once you have all of that it's going hero it screw the final on was called to do form and it's going to be form group okay and then let's inject in the form builder the form builder is FB alright and then right here let's do okay just complain that I didn't create it yet let's create right now and I don't like that name and it to do for that's a lot better okay so there we go have our function so within this function within this function we're going to return to do form okay so now let's scaffold out what its gonna look like okay so I'm not gonna bore you with all this typing I'm just gonna quickly go ahead and copy and paste it over okay so here we go oh man spelled it wrong already spell yours okay so there we go we have the mild setups and nos go ahead and create the HTML for it and again I'm not gonna bore you guys with me writing HTML I already have it made so it's gonna quickly uncommon it let's talk about it be sure to set it up on the forum then give each individual input you want to use form control name and would be sure to give the form anything with a foreign control name a name property or it's gonna yell at you and videos at you you're gonna have a bad time alright unless when I least had the disabled to see until it's valid it's not going to be on disabled and if you remember who set required here so as you could see the hot module replacement already beat me to it and here's our for all right so we see if we come in we basically type in there we go once it's valid the add button will be there but as you could might as you might as well could guess the a button does not do anything yet so now let's set up some functionality for it to basically add a you know what to do to this to news list above and for that we'll be using redux so let's dive in okay guys we start setting up read up this talk about a quick history of it Redux was built back in 2014 by the Facebook team they're having problems managing complex state of their applications so when I say complex I mean Redux is actually only supposed to be used for medium to large scale applications of not for todo list but I will be billing in a very scalable way so if you wanna you know add to this it'll be very easy to scale up front here um a couple things about read up something I got my notes right here I'm not a movie star just yet Cameron brought my lights so read up redox maintaining zap stay in a predictable way and was built by Facebook by blah blah it follows a flux architecture but consists of couple things it consists of a store which contains the state of the app actions that represent something that happened and a reducer and the reducer is just a function that specifies how a state will change after an action happens so basically we will be using a bunch of actions and these actions will change the state for us for our application so Redux also uses pure functions for its pure functions are functions that will return the same thing that has the same input in the same output so you will be sure to have that and there's a couple of reasons why I read US uses pure function is because they're easily testable easy to undo and redo because of course we keep the previous state if you know we're not mutating the previous object and we could use timetravel debugging which I will go into a lot more in depth through this and you will absolutely love it I guarantee it I love it personally okay so let's go ahead and start building out the architecture for that so we're gonna come in here and we're going to be creating our Redux folder so let's go in here do new folder and do Redux okay so within our Redux folder we're gonna have a couple things so we're gonna have that actions folder I just talked about we're also gonna have middleware which I'll get into later but this is gonna be hard to be making HTTP requests and reducers okay and we're gonna put a new file in which is an it state so for each redux file we're gonna have to give it an its initial state for the whole application and while it might be hard to grasp from talking about once I get the dev tools up and running and show you exactly what it is it will all make sense or hopefully it all makes sense so I'm not going to bore you too much with what I'm gonna be doing here first I'm going to well bore you by me having to type all this I'm gonna make this fast I kind of copy and pasting so we're gonna import combined reducers and reducers again we're gonna build this for scalability and we're gonna go ahead and we're going to well that's all we're gonna do there for now we're gonna go in to reducers I'm gonna create a new file and this file is gonna be called to do reducer TS ah to do okay so we go in there alright so there's a couple of interfaces that I built that which I'm not going to retype so here they are so we're gonna have an an interface for it to do which again will just be the name description completed create and we never I've used a which is gonna be the array of the whole thing and it's gonna have a couple more states of loading and an error all right so I'll get to those in more in depth in a second so let's set up what the thing is gonna look like so this is what our Redux objects gonna look like this gonna manage all of our state it's gonna have loading error and it's gonna have an array of two dudes on it okay so once we have that we're also going to set up our route reducer or in this case it's gonna be a todo reducer so this to do reducer well take in a state of I to do state and that's going to equal our initial state which we say was to do state and it's gonna has a passionate penny to do state okay all right this is cannot find to do reducer Oh cuz I didn't put function it's silly me okay so we're gonna go in there and so basically we're gonna put a switch statement in here so basically anything that runs through this reduced function is gonna look in this switch statement for an action saying what's the fines I shouldn't search for a turn state okay okay so actions let's go talk about actions so actions basically are gonna be where they're gonna be called so we're gonna be basically passing these actions on this switch statement is going to see the action so for instance if the action was let's say update we're gonna then return an update function that we'll be creating and we're just gonna basically come in here we're going to define an update function so you can see that top is gonna work it's gonna basically you know run a switch statement on the action that we pass up and it's gonna run through this function here and again there's going to be pure functions so we're gonna be returning a new object there okay not mutating the original object alright so as you can see from this example it's also you know kind of hard to understand well it's not hard to understand what I mean to say is this update is very easily changed you know this could be anything and we're gonna run in problems at all that actions on the switch you know we don't want that we don't want users to error that so we're gonna come into actions they're going to create a few actions so we're gonna come here we'll call it to do actions TS okay so to do actions that TS I'm just going to copy and paste these we will be okay and copy and paste this one over as well okay so we will be having so right here two things that we're going to need is again we have to create read update delete here's our read get to dues and here's our create create to dues you know just add delete and update while we're at it okay and where's cut words update that's what Carl update complete why not okay so there it is there's our create read update actions and we're going to keep these so the user can easily change them in a constant that we're going to import them into our reducer so let's go back to our reducer let's go up here and let's import them all in okay so there we go got them all in oh it's to do website dues yeah oops okay so there we go we have it in there okay so next thing up is let's actually register this with our app module so things need to do is you need a register um your reducer whether you have that module so let's go ahead and do that okay so I'm just gonna copy and paste over these imports right here ah there we go so that tools in section which is that time traveling to bugger off talking about earlier redux we dosed module let's go ahead right in here I was actually important to ng redox module okay and then let's come here and then let's import our initial state from that file we just created there we go oh I think I've read that with export on those sorry about that guys yeah I'd even Creedy I'm getting ahead of myself okay so let's go are in it state and let's go ahead and let's add a couple of interfaces again I was going to copy and paste these I'll just go over them real quickly for you so first things first that's import what we just created and our to do reducer man that's so good there we go alright and after we do that it's gonna copy and paste some interfaces and we'll go over all them alright so we're going to import the active state that we created to do reducer R to do initial state here and the to do reducer itself here's the initial State interface is going to be what this is the root of our Redux application this is going to be an object that's gonna have it duze property on it the United State will be to do is is to do state and to do state if you remember it's just this right here and then here we go we're gonna use the combine to make it scalable um this is actually very easy to add multiple reducers to this okay so now that we have all that let's go back to the app that module and now let's register them so I'm going to come into our app that module and then we're gonna come down here to our constructor and we're going to inject a couple things into our instructor excuse me constructor ng redux so we're gonna initialize ng read up with the initial state object which we previously defined we're going to inject the dev tools an extension and we're going and that's it for now actually okay awesome then after that we're going to quickly set it up alright so this is how you do it first of all let's talk if it's set up that time traveling to bugger I'm talking about earlier so here's just a global variable that I defined the webpack define that just tells us if it's production or not in the production environment so I was in the production environment we don't want any enhancers but if it's not in the production environment we wanted to have dev tools dots enhancers okay so this sense of the time traveled to bugger this is actually very important because if you have the Redux dev tools debugger within your application in production and this is running like say Internet Explorer's where I've seen this bug before the whole application will crash so yeah make sure that this is only turned on in development mode okay so once you have that there oh and the reason why that happens is Internet Explorer I'm pretty sure doesn't have the extension for the Redux dev tools other than support it so a good browser for this will be Google Chrome and Firefox which I'll get to in a second all right so once we have all that and that's the not leases let's configure the store all right so it's going to take those reducers that we combined it's going to take the initial State it's gonna then take in middleware here which we don't have any yet but we will be adding and then the enhancers okay and there we go now if I click here you can see that we have read ups installed and last but not least let's talk about that I'm time traveling to bugger um it's called probably Redux dev tools extension I'm pretty sure I'll leave a comment in the description and what exactly this is I want to pick it up this is in Google Chrome and so you could come in here and it's very cool we can look me up an initial State that's the initialize let's click on it and see the state and you could see that we have that to do the object we created earlier and here it is this is where Redux looks like basically just a global object which is separated from our application awesome now that's it for scaffolding it so now let's create that action for creating the to do okay guys so we're gonna be starting with the first two letters of crud um create and read so let's back up and go back to our form alright so on reform our bunny we have a button here that's just not doing anything let's add a click event to it so when we click we're gonna run ad to do all right and yep and then we're going back to F da component that T is when I come in here it's due and this ad to do will be dispatching okay so basically our Redux works is you dispatch an object and it will go through the reducer and it will look for that actions name and then run that action again off that switch name and we have in the reducer so you'll be able to see it a lot better through the Redux tools the readout step tool time so I'm just going to set it up okay so to call it you need that we need a first install import redux so it's going to quickly import a couple things are going to pour redox and the select which I'll be using in a little bit to get certain pieces of the state from the redox object alright and we're also going to import one where they might as well do it now we're gonna put observable for mark oh you already have it silly me okay oh let's import i to do in here because we're probably gonna have to use it that sort to do state we set off alright so in our add to do we're going to basic so that dispatch okay and this match takes an object and the object has a type and the type will be they get to do so that's good to do is well shoot over there just Pennsy inject it let's do it now oh we need to pass the initial state as well sorry so the readings I have that needs to be initialized with the initial state so we're just gonna pass in in this show high initial state so the interface for initial state okay and there we go awesome okay so now let's go back into our add to Do's so we're going to dispatch the get to do but we didn't import the actions yet yeah we're getting ahead of ourselves sorry about that folks we're gonna copy this over yeah copy this over all right and again we don't have this to do action that was to do alright so there we go now we have our get to Do's but again we're not getting to Do's here I apologize folks are actually creating so create to do awesome and we're gonna pass in a payload and the payload base is gonna be the object that we're gonna be passing in and we're just going to basic go tour to do form and if we're to do form gets submitted and because we had that disabled on it and I'll quickly show that disabled to you guys one more time that's disabled until it's valid so again they're not the user is not gonna be submitting the form till it's valid so we're gonna come in here we're gonna do form that value so it's gonna pass in um this form object right here on a model into our form okay there are dispatches create the dues all right so let's go ahead and let's create that function in our reducer for that create two dues so we're gonna go back into our reducer alright then we're gonna do we import if we did okay so we're gonna so case t dot create two dues create two dudes states okay and it's complaining that I don't have the method so are the functions quickly function so state states gonna follow I to do state and I'll show you why we want do that in a second okay so right here we're gonna need to add the T assign operator so it's gonna quickly copy and paste the import over alright you just do this actually okay so there we go we import T aside so T assign basically gives us um typing on the object dot assign method okay so as you can see for a curried duze methods here we want to return what I was talking about earlier is a pure function an object that doesn't mutate the original state so you do that by object out of sign but the thing is there's no like type structure on it so basically you could do kind of whatever you want in there and you could add properties that don't exist in the to do state so basically what T and sign will be doing is making sure that we can only assign these properties within our I to do state to it alright so after we got that we're going to set it up actually that payload okay so the action I paddled again is that payload I passed in in the dispatch loading which is false which we're not loading anything just yet loading will be true because we will be loading something and then error as no all right and I'll get to all that in a second all wrap everything together okay so there we go so basically right here is this is just an object data sigh returning a new object a cool thing is we don't need to include the whole objects properties again because again we could just get rid of loading and then we just use this like this and I'll work just fine because again you know we're not mutating the original object we're creating brand new okay so now let's talk about middleware and how we'll be using it within our application so basically we'll be using middleware to make those HTTP requests come to our database which is the JSON server to get data from it and so let's go ahead and let's set up that epic middleware okay so yeah I kind of just alluded to it it's actually this pattern is called epic middleware and this is how you do it's in the angular framework it took me forever to figure out how to do this oh man now a lot of documentation out there so hope this could definitely help people struggle less than how much I struggle trying to figure out how to do this okay so we're going to do HTTP epics all right so within this we're going to import a couple of things I'm just gonna copy and paste the moment first let's get a lot of service oh man come on where's my key Bonnie it's there it is okay perfect let's add load of the service let's import a couple other things again it's to do and let's import some of our a xjx operators okay awesome and let's also import no I think it's all for now oh wait now one more thing that's important I to do state okay perfect there we go okay so now that we have all that set up let's change this name to choose HTTP HTTP epochs all right on to the constructor oh the te HTTP service in alright so now it's not the method so the first method we'll be creating is create to do to do okay so the action is um the is the property admitted by the observable from redux let's play function all right so let's return that filter so we're going to filter that for a type and then we're going to do tight equals T dot create to do so we're going to be looking at all our Redux actions and we're going to be checking the type property and we're going to see if it is equal to create two dews and if it's equal to create two dues we will then be we're gonna flatten an exam this is an admitted object by an observable so we're gonna check those and turn those emitted properties into observables themselves flatmap okay and then we're gonna actually perform my HDTV or bus right here on all those things being admitted up so process the MV API URL this was set up by the way back back to vague if you were wondering plus duze which is that part we have the DB JSON file and we're gonna piss in our dated a payload okay awesome did I over shoot the yeah I did I overshot the parenthesis there sorry about that guys all right so after we do that we're gonna run through a map result okay type equals T dot so once so after this is the result of the function I'm gonna leave this blank just for now and I'll set up the error to run a catch so this is the this is the HTTP request coming back to us okay okay so right here we basically are making requests to our API for the to use to create them we're posting to them and now that we get the data back Oh what's this complaining about okay so once we get the response back we're gonna run that through another redux action so we're going to quickly create the action so we're to create two more actions and our actions on folder so we're going to be creating a create todo success and we're also going to be creating an error handler for when our HTTP requests error out and that's gonna be called to do error let me just copy and paste that over okay so now that we have both of those let's go back into our HTTP epic middleware and then let's set those functions up so we're gonna be running tight T dot create todo success so after we get a bag and successful we're gonna be passing this action through them through read out so that I'm gonna send the payload as so to JSON all right awesome and then in here we're gonna be running TWP duze error there it is perfect all right I'm gonna set the payload as air three yards come on there we go okay perfect okay so there's our first um epic middleware a function set up let's go ahead back into our to do reducer alright so we're gonna have that a couple more cases here let me quickly add them so as you can see there's a lot we need to just to get this one API request set up so again as I talked about in the beginning of the video this is for more medium to large scale applications but again you know I kind of want sure you gotta do this and I'll show you how to make it easily scalable for your near the largescale applications so I'm going to copy over the case the two cases that we need which would be get to do success and we're gonna also need excuse me it's create to do success I apologize guys I'm going to copy that with over okay and we're also going to do duze error alright so there's the two actions and then we have to create those two functions so let's come up here and create those two functions so we're gonna do create to do success there it is alright so basically what we're doing here is once we get all to do stay back from the middleware that will intercept the action coming through the pipeline of redux and then run through each of your requests and past the action up a little bit we're gonna then became captain eating onto our existing state of two dudes again don't get us confused that were actually manipulate excuse me don't get this confused that we're actually of manipulating the original state we're creating a new state we're just adding it on to all the original states in another object sorry about that getting confusing so there is your creature to success function and then we'll come down here and also add a duze error function alright so this one's pretty simple if there's an error we're just gonna attach the pail of the arrow to the error right there perfect awesome so one last thing we need to do is we need to register these on the App component on the App module so remember I talked about this array here at being middleware well this is where you would set it up so it's a real quickly alright so we come in here we do create middleware create epic middleware this starts to dues ooh item dependency inject it I'm sorry guys let me go ahead and do that right now I apologize so let's come up here happy just do down here so to dues HTTP epochs there we go to do is a TV epic service perfect and now we can do it so this have to do is to dooms HTTP epic service would I oh come on lower case there we go dot create to do perfect alright we got the we got it registered so now I'm going to open up our network tab so we can see the requests I'm also going to open up our dev tools the cool timetraveling alright so yeah it's just a onetime wonder let's see let's see if I got it so we're coming here with Ed and Tom we're in Tom click Add and boom ok so you can see it looks like we didn't get an actual hf xhr request but if we look over here we could see oh our created news thing worked ok so it looks like it worked let's check the state as you can see the tom steak I added on perfect so now let's go ahead and just real quickly figure out what we did wrong how to fix it twins hours later ok guys sorry about that now let's fix what was going on so first time to come in here I'm going to add the provider so to do epic service there we go add the service as a provider and then we're going down here in a dependency inject it to do epics to do epic service awesome and then we're gonna come in here they're gonna register it right here to do epics create to do perfect there we go alright so now we have the epic middleware I'm creating we're gonna fix something I had wrong with the reducer earlier that you don't need to touch this stay right here so I want to get rid of it and then let's put mega into our HTML because I found something else kind of embarrassing as you can see I accidentally added an edgy submit property to run add to new and this click event trying to add to do so this would actually relied twice i'm smears with a quick click about right there on the button alright so let's close it down and if men you're gonna want to run is JSON server watch DB JSON and go ahead and run that command and you will see that on locals three thousand or two dudes will be available with restful api all right so it's clear on console and let's make our first request so i'm gonna open up the read up step tools as well as we could see we have our next state up duze which is again just the initial state up that we defined earlier so let's do Tom Jones click Add and as you can see we have made a network request a post request to the duze API they came back and we have this error here create duze the difference is that loading is now true and then we go to create a new success we can see loading is now false and there is our todo right there awesome perfect alright so there we go we have our create tom enabled so now let's go ahead and get those two do's and display on the page alright guys so actually let's get put that up to do that we just created on the screen so to do that I'm gonna come in here I'm going to add an observable varna create an observable we're gonna be calling it public to do States it's gonna be an observable oh type I to do an array about to do okay awesome to them once we have that we're gonna come down here do this to do state equals okay so we can subscribe to the store the Redux store and we can get the state after the action as you know manipulated it so we give that action a minute to us for that strength through subscribing to the store okay but again if we look at our initial state of the object which is right here problem we don't really need loading or error well Justin just for this demo we're only gonna really focus on two dues that we only want to pass the two dudes down so what we're gonna do is we're gonna basically use this coopera called select and then we're just gonna only get the to do is we're going to dudes dot two dues because remember to dues is that array within the two dues object okay so now that we got that rid go back over to our HTML okay so we comment this out I don't want to waste all this time creating all this so I'm gonna quickly go over it for everyone so basically what I'm doing is I'm using the ifelse intent which is new to angular 4 and I'm most using the async pipe so basically the async pipe will set up subscribe and it'll also set up on subscribe to that observable and whenever the observable admit something out up it will then put it as to dues so anytime that to do state amid something up on the async pipe will pipe it to the Tuesday so this will be sure that none of this content will load until something is admitted of through that observable and if nothing is emitted up we go through the Alice which is loading and it's gonna unload up show a loading with the spinner okay awesome so now that we have that let's get it on the page gonna come in here and click and and boom there we go there is our first to do on the page now I didn't fully complete all the functionality for yet so it's going in let's fix the folks analogy for the checkbox real quick because I'm pretty sure yep if we see it's not gonna do anything on it so as you see our checkbox right here we're just gonna add just some properties to it so I'll check for us okay so maybe the name of Fleet and then we're gonna do a true ID is equal to I so I here so we're iterating over all the two dues data because remember that's what's emitted up from the observable that we pipe the basing pipe and we're gonna set the index of I so we're gonna set the attribute ID to the index and then I'm going to come into the label and if you want a label in the future this is how you would do it I'm not gonna add one but I might as well just put it in there in case so I'm in the future wants to do it I hear they use a table right here so that'll match them up perfect alright okay then there's one more thing that we need to do is we need a second check check property so to set the check property we're just going to do extra check we're gonna bind to it and then we're gonna run to do complete so we're gonna put this in a ternary PLDT but this in a ternary operator so if two technically is true where it's gonna pass an empty string and then if not do null and if it's no then this check actually won't even be there so now that we click here we need to create our to do one more time because again we're not getting the two dues surely the only time to do is actually going up there is when we create it so that's why I only see one even though our database probably as multiple to do so there we go we have it created and our check box is working so now let's go to our DVD JSON I'll show you what I mean we have a whole bunch of news on our todo list in our database for only one showing and that's because we're not getting all the to dues we're just you know posting the new one on there and showing that one only so now let's create the functionality to go and get the to do so we're gonna go back into our app that component that h that TS and we're gonna ng it we're gonna create a dispatch to get all our two news for us I'm just gonna quickly in G readouts dispatch pass and type and the types gonna be TD I get to dues okay so I've got that in there so now let's go into our that big middleware so you see this is definitely tedious I'm just gonna kind of copy and paste this so doesn't take too long to do and we're going to go copy and paste over they get to do right here alright so it gets to do success again yes we have to go and create a get to do success coming here export cons get to dues success dues okay now let's go into our middleware or excuse me our middleware our reducer I already go into our reducer then we're gonna set it up there so let me just quickly copy and paste this over oh we actually need everything so here's the success and we actually don't even have to get so let me the cavea paste that one over as well okay there we go so we have both those they're awesome and now let's create the two functions for them again I'm going to copy and paste it just say a little bit of time so here is our get function right here alright and we don't need action I feel it right there and next up we're gonna do get to do success all right awesome so there we go so now last but not least let's go to our app module and let's add it to middleware create epic middleware this to do epic stats get to do is there we go alright so now let's open up Redux and as you can see it already work well just look to see what happened they get the dues ran and then they get to your success ran and then we have all our two dues in here awesome so there's our two dues perfect okay so next up we're going to be going into updating okay so now we want to update the completed so remember we check the boxes completed and we click refresh the state will be persisted so let's go ahead and do that so first up we're going to have to navigate to the apt I've liked more about HTML then we're going to go into our check box then on the input we're gonna add a click event and so I was gonna run complete to do to do okay there we go and let's go out after I want that TS and then let's create that function complete to do and then wrong we have the to do right here you read of stuff dispatch we're gonna do tight is tea oh you know what I got ahead of myself scrap the Eddie action so let's go into our actions let's add all of them you know what I'm just gonna add all them I'm gonna add the update and I'm going to add the delete ones right now so we could say some 10 so we're going to these to act we actually had these four actions all right we already have delete to do that's good so let's hear it complete to lead sorry I just need an assist that's actually so yeah that was earlier okay awesome got all our actions in perfect now let's go back to our app dr. Vaughn OTS and let's do tight T dot complete to do okay then we need to pass in the payload of the to do sure let's see um yeah we're passing to do so we're passing the pram we had okay so now yes let's do that whole process again it's they're going to come here and I'm gonna quickly copy and paste it okay so there's complete to do is go to our reducer and then let's add those two functions complete to do a complete two to success and you know what I'm gonna add the delete as well because you know what I'm not going to just go back to the whole price let's do it all right now so there's the complete to do complete to do success then now let's add delete to do delete to do success so then I'll add the associated functions for all them so there's four functions I need to add let's go up here let's add the four functions which are your the first two which are complete to do I then complete the new success and then delete to do delete to success all right awesome so we have those there so then let's go back into our epic middleware and then let's just add the function a little bit ahead of time because we don't want to navigate through the whole process again and let's add the delete to do epic middleware okay there we go so one thing the note on this one we're doing something a little bit different the process on TV we have the ID in the query string right here for both the put and the delete request and also we're not running a delete an action of delete to do success some people might want to return the object and use it but again we don't need to use it we just want to once we delete it we want to get the two dudes again so once there to do is talita we're gonna get it ourselves so we're on they get to dues action okay awesome so now let's go into our middleware or excuse me our app that module now let's register both those and I'm just gonna copy and paste those bad boys over alright here we go so there they both are oh you see I called it differently so do that fix okay got both of them over awesome so now let's go back into rehab da component TS and then actually let's just add on the delete functionality while we're at it so on the trashcan I'm just going to quickly set up a click event solely to do to do all right then what's going to our epic 20s and then since we already have it set up this will be very easy to choose this going to be delete to do to do hi to do stop ng redux dot dispatch basically it's gonna be the same as as above but we're just gonna have to change the type to delete okay there we go and awesome alright so we got that all there let's put this over there and let's check the functionality of the whole thing I'm gonna open up so we can see if our network requests are going through correctly alright so let's just create a whole bunch of them there's a pair of a bunch of time times okay so first thing you want to check is if we check the first one you'll see okay so complete to do right here ran and it looks like everything worked out so let's refresh the page and make sure it work oh but first let's check our HTTP request you have to put 200 refresh the page looks how you didn't work that's a bummer let's see why oh you know what I forgot to change it oh uh I was passing the same object into it I have to actually you know change it before I pass into it so let's do that real quick so we need to do equals to do dot complete to do not complete equals bang to do not complete equals bang to do that complete there we go okay so now we're actually changing it you don't any see the network tags we know the request is going through check the first one and then let's refresh the page and is it gonna be still check yes it is awesome so our pull request worked and just to show you will check a couple others not print to refresh there we go this state is being persistent we took out a DV dot JSON we will see that the state has definitely been changed to true for a complete for the first three awesome all right so then last but not least let's check out our delete functionality so it should delete it and then it should run the gif command to get the new observable then new to run the delete that it should run the get to do is to get the new two dudes that are still there on the JSON object and let's just see if our todo list matches up with our JSON object and yes it does we have to duze in our DB JSON the two dudes on the page alright so there it is building it to use lists with angular before and redux I hope you guys like that hope you guys learn something oh I really enjoyed making this video and there's a lot more to come you know now that I'm sin of them is gonna be creamy these these uh excuse me now that I'm said I'm just gonna be cranking these videos out so be ready and yes thanks for watching