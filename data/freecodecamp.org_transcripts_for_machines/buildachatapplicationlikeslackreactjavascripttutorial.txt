hey how's it going my name's booker and in this video i'm going to show you how to build a group chat similar to slack using react.js and chat kits which is a developer tool that my team and i are building here at pusher in the end we'll have an app where users can send and receive messages see who's typing with nifty typing indicators and to top it all off a real time who's online list the app we're going to build is going to resemble slack and it could well be used for team communication but i realized having built the project and recorded the video yesterday but the concepts and techniques we're going to look at could be used for most types of chat applications be that a customer messaging app maybe for a crm maybe a group chat for your community or even ingame chat if you're a game developer i wanted to quickly mention that all the code is on github the link is in the description and i even took the liberty of writing up a stepbystep tutorial based on the exact same code you're going to see in this video so if you want to follow along you can maybe watch the video and reference the code on github it's up to you if at any point you find yourself enjoying the video please drop a like on the youtube video you can also follow me on twitter i'm at booker currents but yeah i'm excited let's dive in instead of starting from complete scratch we're going to download a starter template i created earlier we'll have a poke around the code in just a second to see exactly what's happening but first off download this repository which you can do by coming here and clicking on download zip or by copying the link and heading to the terminal but we can run git clone followed by the link to the repository followed by the name of the local folder you want to download that code into if we navigate into that folder we can run npm install to bring in those local dependencies pretty standard stuff if we open the project up we can see that there aren't really that many files in this public folder we have an index.html file this mainly exists just to give us something to mount our react application onto we won't be touching this html file going forward instead of source we have some basic react application files including an empty components directory where we'll be creating some of our components as we go forward the real meat here is this app.js file which we'll add more code to as we go forward but right now just renders a simple component with the text slack if we look at package.json you can see that we're using react scripts to run the react application and we also have a start script where we can run both the server which i'll show you in a second as well as the clients all with one command the server is actually the main reason this template exists i didn't want to spend too much time explaining how to set up a simple express js server because if you already know express this here is going to look super familiar to you it does need explaining if you don't know express very well which is totally okay then it doesn't really matter too much we're not going to spend very much time on the server now the first thing we're going to want to do when the user loads our application is ask them what is your username we'll use this username to create a chat kit user to capture that username we're going to create a username form component and we're going to create that component inside of the components directory i just showed you first we'll import react then we'll create our username form components inside the username form we'll create a constructor but take some props and we'll immediately pass those props to the super function we'll also set some initial state for our application next we'll create a render function we'll return a simple form whenever this input here is updated or changed we're going to call vista on change and then whenever the form is submitted we're going to call vista on submit we'll also need to go back up to the constructor and bind both of those functions to this nice so this is a pretty standard react form what we're doing is we're creating a controlled component but whenever the user enters some inputs we update our component state whenever the form is submitted we take that component state up here and we pass it to the on submit prop which we expect whoever's referencing this form to pass in fact let's reference this form now just to make sure everything is in order so we'll go to app.js and import username form from components slash username form and then instead of returning just the text slack let's return the username form specify that on submit prop and we'll just say when we get the username let's alert it just to make sure things are in order so that now if i create a new split and run the application using npm run start or actually we can just do npm start for short that should spin up a server so that we can go to localhost 3000 enter a username like booker and when we hit submit we can capture that username and show it in an alert but actually we don't want to just show it in a in an alert whenever this user enters their username we want to send that to our server application and create a chat kit user but before we can do that we must first create a chat kit application or a chat kit instance so head to pusher.com chat kit and click sign up you'll have to create a new account i already have one so i'll log into an existing account real quick once you're at the dashboard and the chat kit click create new and create a new chat kit instance i'm going to call mine slack clone the way chat kit works essentially is that you install a chat kit client sdk there are sdks for javascript swift and android we'll be using javascript and then you can subscribe to a room where you'll receive an event every time a new message is sent on the same client you can also send messages you can send plain text or you can send files so you can send video messages audio messages whatever you like once you have this kind of fundamental chat in place it becomes quite easy to add things like typing indicators and online user presence which i'll show you how to do later in this video right now i just want you to take notes of the keys tab in the dashboard where you can see your instance locator and secret key we'll need these in just a second now most interactions in chat kit they happen on the clients like i just showed you there are client sdks for javascript swift and android and you can even use these libraries together so you could build a web application as well as an android application and they can both communicate using chat kit which is kind of cool but if you head to the docs you can see that there are both client sdks and server sdks most interactions with chat kit happen on the clients that's the same most code will write will use the client sdks but we'll also need to use the node.js server sdk to create and manage users so what i'll do is i'll copy this installation command head to the terminal and install pusher chat kit server now we have that sdk installed we can open up server.js and import chat kit from pusher dash chat kit dash server and then we can create our own local chat kit instance by calling new chat kit.default and we pass to this constructor function firstly our instance locator and secondly our secret key both of which we can access from the dashboard so let's copy that instance locator and paste it in and then let's copy that secret key and paste it in like so now the main purpose behind this server is to accept a post request from the client with the user's username when we receive that username we want to create a chat kit user with that username we have to do this on the client because it needs to happen securely you can only create a user if you have this secret key and in order for it to be secret it has to remain on the server so what we'll do is we'll come down here and create a new route handler called users that takes a post request and as soon as that endpoint gets hit we're going to bring out the username from the request body once we have that username we're going to call chat kits dot create user specify the user's name to the username and we're also going to specify their id to be equal to the username when that function is finished executing we're going to send a status of 201 to the client to indicate that the user has been created successfully it's possible that an error will occur and in this particular case it's particularly possible that the user enters a username that already exists a username which is already in use by another chat kit user for this particular chat kit instance in that case we're going to get a specific error um and for our application that's actually okay we don't mind if somebody enters a username but already exists because we're going to assume they're kind of revisiting the application so what we're going to do is we're going to check the error type and check if it's equal to services slash chat kit slash user user underscore already underscore exists and if the user already exists we're going to send a status of 200 to indicate that the request was still successful otherwise we're going to send a status equal to the error status code we're going to relay that from chat kit to our client and we're also going to pass down the error json uh just in case we need to use to do some debugging later down the line let's test this out real quick let's create a new split and run the server and then in another split i'm going to run curl specified that we want to send a json request a post request and we'll specify here the username to be equal to foo and we want to send this post request to http localhost 3001 slash users and we should see when we run this that the user is created and indeed the user is created now imagine that the user just entered that username on the form and they created their account then maybe they closed the tab and they came back later they're going to enter the same username we don't need to create the user because it already exists but we don't expect an error so if we rerun this command now we shouldn't be seeing an error but we are let's debug this real quick we can see that the error type is equal to services slash chat kit slash user already exists now what i tried to do earlier is make sure that if the error was equal to that that we didn't actually um relay the error and i think what i've done is actually mistyped the error type so let's save that real quick restart the server and then we'll try this again this time with a different username just to make sure in fact actually we can use the username foo again if we run this we should see that we get an okay response you'll notice that when we created the user for the first time it said created when we kind of relog in we just see okay as successful but we have some indication that the user wasn't created the request was successful next we can go back to app.js and instead of just alerting the username like we do here we can send it to the server via post request first let's create a function to handle the submission and then update the on submit prop we'll also need to create a constructor make sure to bind this.on username submitted to this when the form is submitted we're going to use the fetch function to send a post request to localhost for 3001 slash users fetch takes a second argument which lets us specify the request method we'll be sending a post request as well as any headers and of course the body of the request which is going to be the username when this function's finished executing we're going to get the response for now we'll just write to the console success if an error happens we'll console.error the error we'll also need to call super in the constructor and then if we run the server and we should see if we return to the application reload the page and open the developer tools but under the network tab when we submit a username like bar a post request is sent to the server and we get like a status code of 201 created imagine the user closes the tab and comes back and tries to answer their username again we should see this time that we get 200 okay so this is the exact same result we saw in the terminal earlier but now we're seeing in the browser which is one step closer to completing our application you know right now when the user submits their username nothing visibly happens really when they send their username after we send that post request successfully we want to transition them to a different screen we want to show them the chat application so let's create another container component for that chat screen right now we're going to create it in the source directory and it's going to be called chatscreen.js this is going to be a component like the ones we've defined before so let's import react and then create a simple component within app.js we'll want to import the chat screen and then in the constructor we're going to set some initial states we're going to set a current screen property and by default that's going to be equal to what is your username screen while we're here we're also going to create another property for the current username basically when the request has been successfully sent we're going to want to come here and set the current username equal to the username submitted by the user we need to store it in our application state so we can pass it to the chat screen component in just a second we're also going to want to say that once the form has been successfully submitted we're going to update the current screen to be the chat screen that way if we come down here to the render method we can say if this dot state dot current screen is equal to what is your username screen then we're going to return the username form otherwise if this dot state dot current screen is equal to the chat screen we're going to return the chat screen and we're going to pass down the current username which will be equal to this.state.com username if i run the application oh and excuse me i've made a typo here we can enter a username like bob and when we hit submit we'll see that after the request has been sent we get rendered the chat screen in fact what we can do which is kind of cool is go to the chat screen component and we can access this.props.current username and we could say something like uh hello current username so that now if i sign in as like booker and hit submit you can see it says hello booker moving on we're going to need to install the chat kit client sdk and then import it inside of our chat screen component within component did mounts we're going to create a new chat manager just like when we instantiate a chat kit on the server we have to specify our instance locator which again we can access from the chat kit dashboard we also need to specify the user id which is going to be equal to this.props.current username just like we referenced down here we'll also need to provide a chat kit token provider and we're going to specify the url to be http localhost 3001 slash authenticate now as you can probably discern this is pointing to the server we've been working on earlier but we haven't created this authenticate routes i'm going to do this really quick but i'm actually going to paste it from my clipboard as i'm not going to explain it in too much detail if you're following along copy this code exactly authentication is basically the act of proving a user is who he or she says she is in a real application on your server you would typically have some logic to kind of verify that the user is who he or she says she is in our case we're just going to assume everybody is who they say they are and return a chat kit token no matter what the jacket token is returned by this authenticate function but that's all we really need to understand right now let's save that and go back to our chat screen here now we have our chat manager we can call chat manager dot connect so you connect to chat kit once we've connected we should get back the current chat kit user which right now i'm just going to print to the console if something goes wrong which isn't likely in this case i'll write the error to the console just so we can do some debugging let's run this now to see what happens what we should see is that when we reload the application and open the developer tools if i connect as booker hit submit we actually do get an error we get a status code of 401 user id mismatch what if something goes wrong which isn't likely in this case which isn't likely in this case isn't likely in this case hmm i think what's likely here is that we have a problem with the authenticate endpoint which is ironic because i copy and pasted it i think what we need to do actually is specify a user id property here and not pass an additional argument if i save that and quickly restart the server hopefully now we'll see when we reload the page and try and create an account and connect to chat kit that we get the current user awesome you can poke around here and kind of get a look at the stuff available to you when you're using chat kit um but the basic idea now is that when we have this current user we can start to perform actions in our chat what we'll do firstly actually is head to the dashboard and to the inspector tab the inspector is a simple tool to help you kind of do basic development and basic testing with chat care what we're going to do is we're going to create a room to create a room we firstly have to create a user it doesn't really matter we're not going to actually use that user and then we're going to create a room called general when we create the room we're going to see the room id which we should copy or at least keep open in this tab so we can reference it afterwards i'm using the inspector to create a room for this tutorial just to keep things simple but realistically you are likely to create your rooms programmatically if you look at the docs for the node sdk or even the um clientside javascript sdk there are functions you can call to create rooms i just want to keep things simple so i'm using the dashboard right here now in a second we're going to make it so that we can subscribe to messages that are sent in that room but first i'm going to create a new component in the components directory called messagelist.js and this is going to be the component responsible for rendering a list of messages for a particular conversation or room the basic idea here is that in the render function i'm going to return a container and then we're going to take a messages prop that we expect whoever's referencing this component to pass down and we're going to map each message to a list item elements actually let's make this a ul instead of a div all right now i'm going to go back to chat screen and i'm going to create a constructor for this component where i'll set some initial states in particular we want to create a messages property then once we've successfully connected to chat care rather than just print out the um current user we're actually going to write current user dot subscribe to room we'll specify the room id to be the room id that we copied just a second ago from the dashboard we'll specify the message limits to the 100 and i'll explain this property a bit more in a second and then we're going to create a hooks property excuse me hooks not books where when a new message is received we're going to call this dot set state and we're going to take that new message and we're going to essentially add it to the existing messages array i'm going to quickly make sure that i the promise returned by subscribe to room so that down here i can call um then and access the current room we'll need this in just a little bit most likely next what i'm going to do is go down to the render function and i'm going to render the message list in fact let's import it real quick from components message list and then down here i can reference the message list and say the messages are equal to this.messages now what we should see if we save this file and run the application is that after i reference super which i always forget for some reason we should be able to go to the app reload the page create a new user or sign in with an existing user and then from even the chat kit dashboard we can actually send some test messages so if i send the text hello right here and go back to this tab you can see that the user called chat kit dashboard has written the text hello in fact if i open up these windows side by side you can see that as i type messages and hit save this interface is updated in real time the next step is to enable the user to enter the message rather than using the dashboard this inspector is handy just as a kind of sanity check we want to make sure that we are subscribing to messages successfully so we can send a test message and make sure it registers the formatting is a bit weird but we'll fix that in just a little bit let's give our user a way to send a message before they can send a message we need to kind of capture the text which we'll do using a form so let's create a new component in the components folder called sand message form dot js and actually this is going to be incredibly similar to the username form we defined earlier so to save some time i'm actually going to open up that username form copy the contents paste this into the send message form and then just do a bit of refactoring if i then go to app or sorry chatscreen.js i can import vsan message form and then at the bottom here in the render function i can render that send message form and we'll say on submit let's take the text and let's alert it just to make sure things are working fine so if i sign in as booker you'll notice quickly that as i reconnect i get to see all the previous chat kit messages you might recall that earlier inside of the chat screen file we specified a message limit of 100. i just want to use this opportunity to mention that whenever you connect to a chat kit room you have the option to see retroactive messages or sorry to see old historical messages for which the on new message function is called retroactively that's kind of cool but yeah you can see here that we have this what is your text form if we type some text and hit submit we get to see our text but yeah let's actually send this text to chat kit now before we do that let me quickly make a few tweaks to our application states i'm going to create two new state properties current room and current user once we successfully connect i want to say this dot set state and set the current user on our state down here you might recall that earlier i deliberately created this event function so then now i can come here and say set state current room this will give us wider access to the current room and current user properties so that in this case i can replace the arrow function here with a call to this dot send message i can then create a send message function that takes some text and say this dot state dot current user dot send message we can access current user now you can see we can also say that the room id should be equal to this or state dot current room which we now have access to the id and then we'll specify the text to be equal to the tags submitted by the form before this will run we need to come up here and save this it'll send message equals this or send message dot buying best we're pretty used to doing this by now let's save that run the application and see what happens if i type the text hello and hit submit you can see that the message shows up right here what's kind of cool is if i open up two windows and create another user called ham we can see the text i wrote previously and we can start to talk with each other it's like hi i'm ham oh hey um nice to meet you you get the idea the next thing we'll want to add to our chat application is typing indicators now adding typing indicators with chat kit is actually pretty straightforward it really boils down to two distinct steps firstly whenever the user starts typing so if i'm typing in this field we need to broadcast an event that tells chat kit that a user is typing the second distinct step is to essentially subscribe to that event so that if for example i'm typing in this lefthand window the other clients application will receive an event to say hey booker's typing based on that we can update our ui to show the user who else is typing in a particular room or conversation we'll integrate with chat kit in just a second and things will come together quite swiftly but first we need to make a small tweak to our send message form we need a way to be notified whenever the user types a character in other words whenever the input value is changed we can't do that right now this unchanged prop doesn't exist so we'll quickly add it by going to the components folder and the send message form components and then inside of this unchange function we're going to call this.prop store and change every time the input is updated such for now if i go back to the chat screen and back to the uh render function right here just the test things are working i can pass an arrow function which just writes to the console updated you'll notice that we're not actually capturing the value of the um text input simply because we don't really need it for this and we can always access it via the uh on submit property function anyway but yeah let me just quickly test this before we go any further we've seen a few errors today it's always good to do a little sanity check if i just pop open the developer tools here and quickly enter my username we should see that whenever i type this updated uh messages written to the console that's a great first step but actually we're not too interested in just writing some text to the console what we actually want to do is every time the value is updated we're going to want to send a typing advance which we'll do by this function from here we can access the current user and we call a function called is typing n and we specify the room id the user is typing in which of course we can access viabis.state.currentroom.id and really that's all we have to do fundamentally once we have the events this really boils down to one significant line of code which is pretty cool in fact we'll also just catch an error just in case we need to do some debugging oh and of course as ever we need to come up to the constructor and bind the function we just defined namely sense hyping events to this so yeah that's the first significant step and as you can see it's not even that significant the next thing we need to do is to be notified when another user is typing so we can update our user interface now it's very possible that there will be multiple users typing at the same time and to keep track of this i'm going to create a new state property called users who are typing and that's going to be an array we will update this state in just a second but first we need a way to be notified whenever a user starts or stops typing and the way we do that with chat kit is by specifying a hook earlier we specified an on new message event handler essentially that's called whenever a new messages sends we can also specify an event handler for when a user started typing this event handler receives the user that's currently started typing we can also specify an on user stop typing event handler where again this is the user that stopped typing basically to kind of test this out real quick we can just write to the console and let's just write user started typing and in this case users stopped typing if we save this and quickly run the application in fact let me quickly change this from user to user.name what we can see is that if i reload the app and then in one window sign in as booker and then this other window is signed in as um let's just call it test user to avoid any kind of confusion as i start to type as test user you can see in the left hand window there in the console the test user started typing i've not stopped typing yet as soon as i move my hand from the keyboard we get an event that says test users stop typing conversely if i open up the console as test user and i start typing as myself as booker you can see the exact same event for the other user however we do not see that event for the current user because there's no benefit really in notifying the current user that they are currently typing of course they know they're typing they're the ones typing with their keyboard the other kind of interesting thing which you might have noticed is that there was and is no need to kind of broadcast an event that says hey the user has stopped typing uh chat kit can figure it out based on how long it's been since it received an event to say that a user is typing which is kind of neat but yeah these events are clearly hooked up correctly that's awesome it's now up to us to update our application state so we can update the user interface for example in this case when the user starts typing what we essentially want to do is add their username to the users who are typing array which we can do using the same technique we saw earlier with the message list when the user stops typing we're going to want to remove their username from that array what we should be able to do now is go to the render function and then just above the send message form we can say this.state.users who are typing and if we serialize it using json.stringify we should be able to just preview this really quickly in our user interface and before we move on to creating an actual typing indicator component where we can render it in a more proper way um so yeah let's test this real quick just log in as booker and then as test yeah we can see the bottom here these kind of empty parentheses that's being rendered by react because right now there are no users typing as soon as i start typing his tasks you can see the left window there the test is typing i can start typing you can see the right window what book is typing same kind of thing we saw before but now it's in our ui and what we really want to do is create a new component called typing indicator.js we can pass that um users who are typing object down to and render it properly what we'll do is we'll say if this.props.users who are typing dot length is equal to zero then we know that there is no one typing and we can just return an empty dev otherwise if this.props.users who are typing dot length is equal to one we know that there's currently one user typing and we can return a paragraph tag which is like this.props but users who are typing will bring out that first username and then just concatenate is typing dot dots if there are more than one users more than one user's typing what we'll want to do is a little bit more tricky but still very simple we'll say this.props like users who are typing don't join and what we'll do is we'll just join them what this join function does basically is it takes the array and it returns back a string with each element in the array joined with this particular text so if two users are typing say if bob and jim are typing it will say bob and jim are typing you won't really get to experience this in this screencast it'll be quite hard to demonstrate um i'm pretty sure it'll work fine now if we go back to chatscreen.js and import typing indicator instead of just rendering the text we can render the typing indicator component specify users who are typing is equal to this.state.users who are typing and what we should see when we run this application uh is a much more proper formatting for the list of type a list of users who are typing instead of just an array basically oh i forgot to run the survey all right so if i start typing we can see ham is typing if i start typing his booker we can see the book is typing um it's really hard to demonstrate but if because i can't really type at the same time with one keyboard but if there were multiple users typing we should see that you know bob and jim are typing you know looking at the application in front of us from a visual standpoint there's clearly a bit of work left to do but from a feature point of view there's only really one more feature we need to add and that's a who's online list where we can see a list of users who've ever joined this chat as well as their online status let's add that next you know i'm not going to spend too much time on nitty gritty styling but i think it might be useful to create a basic layout for our application after all what we really want to see is a sidebar on the left here where we can show a list of online users and on the right hand side we can show the uh chat messages as well as the chat send message form so before integrating with chat care let's set up a basic ui layout what i'm going to do is create a style property on this container dev i'm going to set the display property to flag so i'll be using flexbox to set up the layout of our application within that container i'm going to create a new kind of sub container for all of the elements that i want to be on the right hand side of the page above that i'll create another container this time for the who's online list which i'm going to style very simply by specifying but i want the width to be 30 of the width of the viewports and just to kind of uh give us some visual indication of what's happening i'm gonna set background curly hair and see what happens so if i log in now we can see that we have this who's online list on the left and then our chat messages on the right the first thing that comes to mind is that obviously this isn't filling the full height of the page we can fix that really easily by setting the height property to 100 vh that looks good to me one more small ui layout thing i'll fix is obviously this text input should probably be anchored to the bottom and the way we can do that is by coming down here wrapping the message list in its own container with a style property and we're just gonna set the uh flex property to one well clearly that didn't work that's because i actually need to make sure that um on the container here i set the display to flex and i set the flex direction it's a column there we go you can see that it's pushed down to the bottom obviously you need some padding and some additional styles we'll tackle that afterwards what that flex one property i just added does basically is it tells the browser to make the message list occupy all the space it can while still leaving room for any other elements and because it has that flex one property kind of dominates as you might have guessed by this point we're going to create a new component called who's online list.js the idea here is that we're going to pass down a list of users we're going to check if that user's property exists if it does we'll return the list but otherwise we're going to return the text loading we could return nothing and just render an empty screen but it might be nice to show the loading status and then what we're going to do if there are some users is we're going to return a list inside that list we're going to take each user and map that user to a list item i expect we'll want to make some tweaks to this component but for now let's head back to chat screen and import the who's online list component then down here in the render function instead of just rendering the text who's on my list let's actually render the who's online list and we're going to pass down the user's property which is going to be equal to this.state.currentroom.users and this is actually quite a magical property the reason i say that is that normally in our react application for example when it comes to a list of users who are currently typing we have to manage that state ourselves we're always adding or removing items from an array or an object when it comes to managing users there's no need to manage that state ourselves because the chat kit client sdk does that for us this user's property is always up to date it always reflects the uptodate state of your chat application so whenever someone get joins they get added to this property if their online status changes whether they go offline or come back online um it's completely reflected by this property which means that when it comes to updating our user interface all we really have to do you know because obviously when someone uh comes online or goes offline we want to update our user interface um we can use hooks like we did for the typing events so we can say when a user comes online rather than updating any kind of state all we really have to do is call this.force update and what that's going to do in turn the same for when a user um went offline or whenever a user joined for that matter whenever any of these events happen we're going to call force updates and what that really translates to in react speakers call this render function again and when this render function gets called again the user's property gets evaluated again and that should reflect the state of our application in fact one thing and like i said we probably were going to end up tweaking that um who's online list one thing we can do is we can come back down here where we return the list item of the username and in parentheses we can render the user.presence.state which is either going to be online or offline we just made a lot of changes at once so we'll see what happens when we run the application yeah i kind of expected after writing that much code i probably made a typo uh which is a quite easy quite an easy fix if i go to chat screen and i think i just need to add commas at the end of each of these uh statements but once that's up and running successfully oops and again i need to call super always always always forget to do that actually this component doesn't even have a constructor it's because i mistyped components here i think cool let's see what happens if i log in and we see that loading text once we're connected now this is cool um we see a list of all the users who've ever joined this room like throughout this tutorial i connected as then his test then as test user if i open another window real quick now watch this take a look at um test user right here currently test users offline but as soon as i join that offline tags changes to online which is super cool the other cool thing is that if i hit back here basically closing the chat app pay attention to test users online status boom test user goes offline and one more thing i want to test is that if i create a new user and i join the room we should see that new user yes gets added to the list of online users and that pretty much integrates with the same kind of system you know if we close the tab that user appears offline wicked and that looks awesome to me i'm going to pause the screencast and i'm going to take a bit of time off camera making this chat application look a bit better but all the basic functionality is there which i'm really excited about all right i made some updates if i run the application and log back in you can see it looks a lot better now trust me you might think it would have been nice to see me add the style step by step but it was fiddly a bit boring and really a bit outside the scope of this tutorial besides the complete code is on github where you can browse it download it adapt it maybe even use it as the foundation for your next app chat kit is a tool i'm helping to build a pusher i'm really excited about it if you think it can save you time and help you build a better product faster the team and i would love to help you are very very welcome to join our slack channel where you can reach the team and i directly with your questions there'll be a link in the description as well on all of our documentation pages we have a chat if you want to pop up there of course i would love to hear your thoughts about this video or indeed check it in the comments section as well thank you so much for watching i really hope you found it interesting i've been like booker goodbye