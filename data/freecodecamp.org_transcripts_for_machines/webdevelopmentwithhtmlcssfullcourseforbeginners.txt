this comprehensive course on web development with HTML and CSS is created with beginners in mind it's taught by Akash the CEO and cofounder of Jovian the course starts with the basics of HTML and CSS and gradually progresses into advanced concepts covering git GitHub and Cloud deployment using versell as well as mobile first responsive design the bootstrap CSS framework and the express web application framework so let's start learning hello and welcome to this course on web development with HTML and CSS HTML and CSS are the foundation of modern web design allowing you to create visually appealing and functionally uh visually appealing and functional web pages HTML specifically stands for the hyper text markup language and it is a standard language used to create web pages and this is what HTML code looks like this is some of the code that we'll be writing today it can be used to create create headings paragraphs images links and many more things so if I head over for example to jan.com this is a web page now on this web page everything has been crafted using HTML and then styled using CSS so HTML is used to structure the content and add elements and then cascading style seats uh cascading style sheets or css is used to describe the presentation of HTML documents it allows you to control the layout and the appearance by defining styles for elements and you can configure things like fonts colors margins borders Etc so today we are going to look at the very basics of HTML and CSS we are going to start by creating an HTML file adding code into it using the Ws code editor viewing it in a browser we're going to then use some basic HTML tags to create a web page then we're also going to use some more HTML tags to structure content on a page things like headings lists paragraphs Etc then we're going to add styles using CSS and understand the CSS Box model for layout that is the core foundational Concept in CSS and then we're going to style these uh HTML tags using CSS to replicate the structure of a desired web page so we'll look at a problem statement and we'll try to replicate the web page that we have in mind using HTML and CSS and finally if time permits we are also going to try and deploy that website to the cloud using an online hosting service so in just about 2 and 1 half hours from now you will be in a position where you will have deployed your first website to the cloud so isn't that exciting the first very first lesson you will be deploying your own website and there are no prerequisites for this tutorial the best way for you to learn these skills is to follow along as you're watching the lesson pause it at various places follow along type out all the code yourself don't even copy paste just type everything out and then experiment with it using the exercises that are present in the lesson now you can find the completed code for this tutorial here in this GitHub repository specifically you can open up this folder my first web page and you will find all the code that we are covering today in this folder so we will explore the basics of HTML and CSS by attempting to solve this problem statement we will create a web page that show cases job listings for Jovian at Jovian we have a growing team we have a growing user base we're adding new programs so we have certain jobs for which we want to hire but we don't have a jobs page yet so we're going to try and create a jobs page for Jovian and on this jobs page we're going to show show a few things we're going to require our job space to have a few things one is a nav bar at the top showing the Jovian logo so something like this this is called a navigation bar or a nav bar then we may want a header section displaying a picture and some relevant information about Jovan so anybody who comes to our jobs page should learn a little bit about the company itself so we'll have that then maybe a list of job openings that include the job designation location and maybe salary details we'll see what we can put in there and maybe also a link to apply for the job and then a footer at the bottom of the web page with some important links so generally at the bottom of any web page and a website you might include you might have a bunch of links to other web pages on the same website or elsewhere so we are going to try and build all of this today in the next couple of hours and we will also attempt to make the page visually appealing and informative so let's see how far we can get this is a fairly ambitious problem statement while we are also learning the basics of HTML and CSS now creating your first web page is actually quite easy all you need to do is simply create a file put some text into it and then open that file within a web browser and while you can use any any text editor to create the file and put some text into it web developers often use editors that are better suited for programming because they have certain features that will help you write code in various programming languages easily and these are called code editors or sometimes also called integrated development environments okay so in this tutorial for today we are going to use a code editor called Visual Studio code now you can download it for free it is a free and open Source tool so you can download it by going to code dovisual studio.com all the links are present in the lesson resources and the lesson notebook now based on which operating system you're working on you'll have to download it for that operating system you can see that it is available for all major operating systems and it is developed by Microsoft so it also has great Windows support and you should download it and once it is downloaded just double click the installer and follow the instructions to install install it on your computer and once it's installed we can then start creating our very first web page okay so let's get into it now the first thing we need to do is create a project folder typically whenever you're working on a project it's a good idea to create a folder where you're going to put all the files so that you don't pollute your desktop or your downloads folder so let me go in here and let me create a new folder so I'm going to call this folder let's see I'm going to call this folder my first web page okay uh I've just used hyphens here my first web page um if you can't see let me just zoom in here a little bit yeah so you should be able to see it now my first web page all right uh so I've just used hyphens here my first web page that is the name of the folder and now we want to open up this folder in vs code so let us first open Visual Studio code or VSS code let me just type Visual Studio code here and open up visual studio code okay so now now I've opened up visual studio code this is what its user interface looks like you might also see something like this you might see a sidebar here as well so that depends you can hide or show the sidebar you have options to show this over here now what we want to do in Visual Studio code is open up this folder okay so you want to say file open folder so going to the file menu select open folder and I'm going to come into my desktop and select this folder my first web page don't double click on it just select it and then click open okay so now you will immediately see that you you will see the folder name here in the sidebar my first web page I hope you can see it and then you will see this welcome screen I'm going to close this welcome screen but now this folder is open in vs code so VSS code is showing us this folder and what I can do is I can now create a file within this folder directly from vs code so if I just go here I should see a new button and in this new button um I can using this new button I can create a new file and I'm going to create a file called Web page. HTML so any web page has the HTML extension just like images have a JPG extension or Excel files have XLS extension so web pages have the HTML extension okay so now I've created this file called webpage. HTML and I can verify that this file is actually present here web page. HTML you can see that when I open that window when I open that folder I you can see that the file webpage. HTML has been created okay now let me just get this on to the right now once I've created this file webpage. HTML and let me close the sidebar I'm going to put some text into it so let me just say hello HTML all right so I've just written the words hello HTML into webpage. HTML all right now here's what I'm going to do I am going to now open this file webpage. HTML in the browser so I'm going to say open with and I'm going to select the browser that I'm using or sometimes you can also just double click and it will automatically open in Google Chrome but just to be safe I'm opening it with brave browser that's the browser that I'm using and you can see as soon as I opened it the same text that I entered into the web page. HTML file the exact same text showed up here you can see I'm just zooming into about 200% so that you can see it more clearly okay let's keep it at 200 all right so hello HTML is what I typed here and hello HTML is what showed up when I opened when I opened web page. HTML in the web browser so that's it that's how you create a web page you just create a text file call it something. HTML and then open it in a web browser and you have a web page however you want to put some kind of a structure into the web page because we don't just want to write text we can p paste a lot of text but it will all just be text on the screen so that is where you you use something called Tags so first let me just put in some code here so I'm going to create this tag called HTML and you can see that this tag starts with a less than symbol or an arrow bracket and ends with an arrow bracket and every tag has a tag name in this case this tag has the name HTML let me zoom in further so it has the name HTML and every tag generally has a closing tag okay so this is the opening HTML tag and HTML is always the outermost tag in any web page and then there is this closing HTML tag and the difference between the opening and the closing tag is this slash character before the tag name okay so any HTML page or any web page is built up using tags these tags are used to create structure within the page okay now within an HTML tag I'm going to put in a head tag okay we'll talk about what these tags do in just a second and again vs code does this nice thing that as soon as you create an opening tag it automatically adds a closing tag for you and that is why uh develop Vel opers use these code editors okay and then uh another tag that I'm going to put in here is called the body tag okay so now we have a HTML tag which is the outermost tag inside it we have the head tag and the body tag and let me just save that for a second and reload and you can see now all the content has gone away so now nothing is showing up on the browser because we've not put any content into the page the first thing I'm going to do is inside the head tag I'm going to put in a title tag okay um so I've just typed title I've created an opening tag and vs code added a closing tag for me and let me just say my first web page here inside the title let me save that let me come back here into the browser reload and now you will notice that nothing has happened here on the page but if you notice carefully the browser tab the the browser heading the tab the browser tab here it has the title my first web page okay so it has the title my first web page and you can zoom in here and I can zoom in here and I can show you that has it has a title my first web page all right now uh let us add something here in the body so I'm going to just add something called a div here in the body so div is again another tag that is used to put some content into the body and let me just put here hello HTML and CSS okay so this is what a typical web page or typical HTML document looks like it contains a bunch of tags and then it contains tags within tags and each tag has a specific purpose okay so now let me put that in and let me reload and now you can see that here we have hello HTML and CSS and then you can go back and change this let's say let me make it hello html/css and let me reload now it says hello html/css okay so this is how you construct a web page you put in some tags and then you open the web page in a web browser all right so so that's the basics of how you create an HTML page you launch vs code open up the project folder within vs code and then put some code into it this is HTML code so we put in an HTML tag head tag title and body and then save the file once you've added the code and then open it with a browser and this is what it looks like okay now let's understand HTML tags a little better so tags are the building blocks of HTML and they are used to describe the structure and the content of a web page now normally every tag will have an opening tag like the HTML tag had an opening tag like this over here and it will also have a corresponding closing tag and sometimes tags can have attributes and these attributes are used to provide more information to the browser or modify the behavior of a particular tag for example the HTML tag has this attribute called Lang which is simply written in within the opening tag itself and then the attribute Lang is given a value en n which means English so here what we doing is we are indicating to the browser that this particular HTML page is written in the English language so now that browser can use it for let's say uh setting up a translation automatic translation tool or something like that right so an attribute is used to provide some additional information about that tag or modify the behavior of that tag and we look at a lot of attributes with time so I can say here for example HTML Lang equal to en and that doesn't do anything visible but that does inform the browser that this is an English web page all right now uh so that's about tags and a tag can contain one or more children so like the head and the body are called the children of the HTML tag and a tag along with its children together is called an element okay so the tag is simply this piece this is the opening tag and this is the closing tag everything inside a tag is called its children which is again other tags and then a tag together with the children is called an element so this this whole thing is an element and then this is an element and then this is an element so every tag along with its children is an element and then what whatever is inside a tag is called children okay these are just some terminology that you'll see when you're reading about HTML and CSS all right now tags contain attributes we talked about that that and there are various different tags to create headings paragraphs lists images Etc and we look at those in just a bit now one thing I want to mention is that HTML is the outermost tag however in many web pages you will find a dock type declaration just above the HTML tag so you will find something like this you will find a doc type let me zoom in here so you will find Doc type HTML at the top of most web pages and that is just a good convention that is followed that at the top of every HTML web page it's a good idea to just put this dock type HTML okay and this this is just something that you cop copy paste at the top of every HTML web page and you can literally just go on Google and search doc type declaration okay and you can find this link HTML doc type declaration and you can just copy this and put it at the top of each HTML page and if you want to understand what this does you can I encourage you to go through this H W3 schools link uh it's not important it's just a convention that you want to put in because there have been multiple versions of HTML and this is a way for you to indicate that you want to use the latest version of HTML to the browser okay now we have the doc type then we have a bunch of these tags now the HTML tag is the outmost tag we already talked about that and the HTML tag is typically only contains two other tags the head tag and the body tag and it has a lang attribute and it has some other attributes also that can be set and you'll see a dock type declaration just above HTML so that's the HTML tag okay then we have the head and title tags which are the tags that we are seeing here so the head tag is a container tag in HTML that often doesn't contain any content that is going to be visible on the page exactly but it generally contains some information that is passed on to the browser and that is useful for the browser and that is also useful when you're sharing this link with somebody else so for example it contains the title tag we put in the title tag over here in the head and the title tag is used to set the title of the browser tab similarly there are some meta tags so and then some meta image tags Etc and these are used to set the preview image and the description that shows up when you share this link on a social platform or when this is seen by a search engine or something like that okay so the head tag is very useful it is also used to sometimes include maybe stylesheets CSS um files and sometimes used to include scripts we'll cover all of these don't worry if these terms don't make sense just yet for now we just using the title tag within head so within head we just have the title tag and then we have the body tag now within any HTML page you have a body tag and the body tag defines the main content of the HTML document it is usually placed after the head tag and it contains all the visible elements of a web page okay and the body tag can also include other HTML tags like headings paragraphs links Etc and here is the key thing here is the key difference between just putting some text into a file versus putting it in the body tag and putting it in in HTML tags you can add styling you can add colors fonts you can change the layout and you can even add interactivity using JavaScript and CSS right so all of these things are applied within the elements in the body tag to change the appearance and functionality of the web page which is what we're going to do today so here is an example of a web page with some content within the body tag so here there is an H1 uh which is a heading tag we'll talk about it there is a paragraph tag there is an image tag and there is a a tag so I will not paste these right now but I'll actually leave these as an exercise so maybe maybe just try and paste this into an HTML Page open it in the web browser and see what you can come up with okay so that is the body tag it is what contains all the content of the web page that we are going to be building today then we have the div tag okay now you notice that inside the body I did not directly put in hello HTML CSS I created a div so I didn't have to do this I could have just put it into the body itself but the div tag is typically an HTML element that is used to group and organize other HTML elements together for example you can create one one piece of content here in this first div div this is some content and then you can have a second piece of content under in this second div and then you can have maybe a third piece of content which is itself divided into multiple pieces of content in this third div okay so div stands for division and it literally creates a division on the page vertically speaking it kind of divides the page vertically essentially you can think about it and it is used to divide or group content into logical sections and it is a block level element which means that it takes up the full width when you add a div tag it takes up the full width and then the next div tag is going to appear below it and the next div tag is going to appear below it and so on and it does not have any its own style or semantic meaning or anything but it is used with CSS for styling okay so the div tag is something that we will attach a lot of CSS properties into to style the web page so let us create a let us look at an example of a web page create containing some div tags okay so here is the content that we're going to put in or type in one by one so first let us create a div tag and let us say this is some content okay so now we have put in some content into div tag and it says this is some content as we might expect then let me create another d tag and let me say this is a second line of content okay now if I reload the page you will notice that this content showed up below this content so that is what the div tag is creating it is basically creating a division within the page so this content is shows up in this area and then this content shows up below it in this area now notice that I can go into the next line I I can type this is isn't a third line now I'm not creating a new div tag I'm still using the second div tag but this time you can see that even though I've typed this content on a new line it is still showing up on the same line as the second line okay so here is the important of importance of div if you want to split content vertically on a on a web page then you want to create Dives and each div is going to create a new vertical section or New Vertical division within the web page okay and if if you simply create multiple lines of content like this all of that is going to show up in a straight line that is not necessarily going to show up one below the other now here is another example now this time I have a div div tag but inside the div I'm then creating more div so sum more lines okay so now I have this third div tag and now in this third div tag I have again another div tag three more div tags one around each word so now even though all these three div tags are on the same line within the HTML source code you can see that each div each inner div tag takes up its own vertical space okay so that's what I want to convey here that as you want to keep building as you want to keep adding content below the existing content on a web page you should be creating new div tags okay so that is the div tag and those are the most basic basic HTML tags now we've just looked at what the head the HTML tag we've looked at the head and title tags we've looked at the body tag we have looked at the div tag and I'll encourage you to experiment with this what we really want to do though is maybe first figure out what our web what we want our web page to look like okay so when when you're building a web page it's a good idea to First plan ahead and create what is called a wireframe and this is what a wireframe for a web page look like it just it is just a rough drawing of what the web page should look like okay that's what we typically called a wireframe like you don't put in colors you don't put in exact fonts and sizes of fonts Etc you just put a rough diagram of the structure of the page and you can use that as a visual guide while you're writing the HTML and CSS okay now if you don't already have a design to work with then sometimes it can be confusing if you're trying to design your web page as you're trying to code it so the having a wireframe is going to help a lot and you can use you can create a wireframe using pen and paper or you can use digital whiteboards like excal draw.com so excal draw.com is a digital whiteboard so this is what it looks like and here on this digital whiteboard you can create boxes you can create circles you can create lines you can add text and you can do a bunch of things to create U your wireframe okay so you can use a digital whiteboard any any one of your choice but I like using excal ra.com um and the idea here is to separate the design and the implementation process to help you focus on one aspect of the development at a time okay now I will note however that professional web developers work with the detailed design mockup of the page and not generally wireframes because these design mockups or these design specifications are often created by uiux designers uh with a standardized design system so normally at a company you will receive a fullfledged design and that design will have all the colors all the fonts and everything specified there and you'll be working from that but for your own personal project it's okay to maybe just do a quick wireframe and then figure out the design over time okay so let's recall the problem statement and then create a wireframe for the problem statement we want to create a web page that showcases job listings for Jovian and it includes a nav bar at the top of the page showing the Jovin logo it includes a header section displaying a picture and some relevant information then it includes a list of job openings that includes the job designation location and then it includes a footer at the bottom of the web page with some important links okay so keeping these requirements in mind let us try to First design very broad very rough in a very rough fashion let's try to design what this web page should look like okay so I'm just going to zoom to an area of excal draw where I can actually design now you might see a bunch of these controls here so when you're actually dra drawing you might have these controls and you can always hide them so there's an option called Zen mode here uh but here let's say this is what our web page is going to look like okay now at the top of this web page we want a jovian logo so I'm just going to put a box here indicating the Jovian logo and I'm just going to put the word Jovian here all right and so now that's the Jovian logo that is going to show up at the top of the page and this is going to be the navigation bar so maybe let me just put a separator between this and the rest of the page then let us uh we want maybe a banner image a header section with a banner image and some information about Jovin so let's say this is going to be an image so I'm just going to draw maybe like some hills here uh we'll figure out something better than a hills and a sun but uh here we're going to put here we're going to put an image and then below the image maybe we could have a section called about Jovan because when somebody visits a job base job page we also want to tell them a little bit about Jovian so let me come in here and let me just put in about Jovian and then uh maybe on the left here we want a picture of the team so here we're going to have a a team picture maybe a bunch of people here all right very very rough drawing and here on on the right here and on the left maybe we have some information about Jan okay so some info about J now I'll show you a quick trick sometimes you need to generate or you need to get a bunch of text to fill the page now that you can do using this tool called lurm ipsum so loremipsum doio okay lurm .io and the link is in the notebook is a quick tool to generate as much text as you need as many paragraphs of text as you need so I'm just going to copy a bunch of this random text this doesn't mean anything I'm just going to put that in here and let me just split it into multiple lines okay so yeah just about that and maybe also let me reduce its size a little bit so now we have this let me change its color yeah now we have this about Jan section this nice about Jan section over here and let's move all this here as well so one nice thing about digital whiteboards say you can move some of this stuff around and then let us put a section called job opportunities okay and in this section job opportunities I'm going to just make that black in color once again in the section called job opportunities let's make that a little bigger like that let us put in a few job roles so we have a job Ro for a front end developer and then we have a job rooll uh and this is in bangaluru India and maybe we want like an apply button here okay or an apply link or apply button or something let's put that here a small apply button let's make this a little smaller like that so that is what our uh that is what a single job roll looks like and now once again the good thing about these digital whiteboards is I can just take this and I can create a copy and create a second job rooll and copy and create a third job rooll all right so let's call this backend developer and let's call this data scientist and maybe let's also put something like remote here and let me put Mumbai India here right and uh apart from the jobs we maybe also want to have a footer at the bottom of the page so I'm going to just add a separation here and maybe I'm just going to add a few links so one link to coures one link to programs and one link to YouTube okay and just put that in here coures programs YouTube Let's Line these up so these are going to be our footer links and finally right at the bottom I'm just going to add a copyright notice copyright 2023 Jian and let's make that a little smaller and put that in here as well okay so yeah just in about four or five minutes we have just created a wireframe for what our web page should look like all right and then you can C you can take this whole thing and you can copy it as PNG and save it somewhere maybe you can send it to uh send it to a coworker for review you can just like copy that as a PNG or I think you also have the option to export it you can go in here and you can actually export the image as well um so this is a good thing to do anytime you're building a web page first it's a good idea to just go ahead and create a wireframe using a digital whiteboard and something that you can modify easily as well okay so now that we have this wireframe you can see here this is what the wireframe looks like we have the nav bar we have an image we have an about Jian section we have the job opportunities we have an apply button or apply link and then we have a footer at the bottom okay so I encourage you to again try and replicate this wireframe on your own using excal maybe try adding a additional section here and there just to see if you can do this on your own okay so you should be following along with this lesson pausing the video following along pausing the video following along and trying to make changes here and there just to experiment with things okay so now that we have created this wireframe we can now use this wireframe as a reference to add content in our HTML page okay so right now we don't have any useful content in our HTML page so we can start adding the content one by one and the first thing that we're going to add is headings so let's figure out what headings we have within our web page so here we have a couple of headings we have this heading called about Jovian we have this heading called job opportunities and then I could even consider these as headings of each of the jobs okay so heading is generally just some big text on the page it is maybe the start of a section it is maybe a start of a subsection or it is maybe the most important piece of text in a particular element on the page so I'm going to consider about Jovian job opportunities and front end developer backend developer data scientist as headings now there are various kinds of headings in HTML uh in fact specifically there are six heading tags uh these tags are H1 to H6 and H1 is the highest or the biggest heading tag and H6 is the lowest now heading should always be used in a logical order and should accurately describe the content on the page so if you're using H1 then for subsections you should be using H2 and then for Sub sub section you should be using H3 and so on don't use an H2 as the heading of the entire page and an H1 in the middle of the page because that is going to confuse people even though you can change their font sizes from the default but still it's logically it makes sense for you to use um use the headings that are uh use headings appropriately within the page so H1 should be used for the most important heading H2 for the subheading and so on okay so let's go ahead and let's add some headings into our page so the first thing I'm going to do is clear all of this let me also just let's see let me get rid of this piece over here yeah so the first thing I've done is I've cleared out all the existing content on the page and let me save that and that that has all gone away so let's add the headings one by one the biggest heading on my page is about Jovian so let me add that and once I do that you can see that okay now now I have a nice big about Jan section the next heading on the page is job opportunities great and then we have three of these jobs so you can see here we have front end developer backend developer data scientist so let's go H3 frontend developer H3 backend developer and H3 data scientist okay I can go up to H6 but I'm just going to use these three headings here now we have this nice logical separation between headings so we have about Jovian then we have job opportunities and then we have these three job roles and all these three job roles should use the same header ideally because they're indicating the same level of hierarchy okay so that is how you create headings really straightforward just put H1 H2 H3 and keep going all right so now we've added headings and this is what that looks like great and our page is start slowly starting to take shape not exactly what we're looking for just yet but it's getting there next is there are specific text there there are specific tags for adding text specifically we have a couple of tags one is a P tag or a paragraph tag and the second is a span tag and both are used to define text in HTML so this is some text you can see that we we going to add below about Jin and this is added using the P tag so the P tag defines a paragraph of text and it is typically used for longer sections of text that form a distinct block so if you have an entire paragraph that is what you should put into a P tag and and then the span tag defines a small section of text typically if you have maybe just a few words or maybe a single line somewhere within a div you can use it and it is typically used for inline styling let's say you have a longer piece of text and within it you want to make uh some specific piece of text bigger or of a different color then you will wrap that around a span and we look at examples as we go along but p and span are the two tags that are used to create text on a web page okay of course you don't need to use a span or a p you can directly put a text within the div tag as you saw already but p and span give some one they semantically inform the browser that now inside this tag there is going to be text and second the div is going to automatically create a vertical separation the span doesn't do that so sometimes if you want text to maybe join together and show show up in a single line you can use a span and the P tag has some spacing before and after so it automatically adds some separation between the text and the rest of the content Okay so so let's use the P tag to add some description below about Jovian so here is the description that we're going to add at Jovian we're on a mission to build the world's highly most highly reputed Technical University and we're building it complete building it completely online let me change that to it and we're building it completely online we offer several beginner friendly courses that are taken by 300,000 plus registered users okay so right below the H1 right below the section here I can put in all of this content and I can just click save and then I reload this and you can see that this P tag has been added and in this P tag we have this basic text now somebody had a question why not use a div tag here well if I just use a div tag you can see that the amount of well it it works just just fine but as you noticed as we put in multiple paragraphs of text you will notice that the P tag automatically adds some gap between paragraphs so that is going to be the difference between using a P tag versus using a Dev tag okay all right so now we've added a P tag then uh the other place where we can possibly use a span is within the job opportunity section notice that under each job opportunity we have also put in the location of the job so let's put that location of a job using the using a span okay so here's what I'm going to do I am going to first wrap I'm going to create a span and I'm going to take the span and the H3 and put that in a div tag because each job is logically separated so each job we want it to show up in a logically separated area that is why we're putting a div around the uh job okay and don't worry if this doesn't make sense if you're wondering when should I put a div around something when should I not put a div around something well uh you just experiment with ITT HTML is all about experimentation all right so here we have an H3 tag and then I'm going to put a span and I'm going to put in bangaluru India then I'm going to put in another div here and I'm going to move this backend developer role here and I'm going to put in a span I'm going to put in let's put remote here and I'm going to put in another div here and I'm going to put in the third H3 here and I'm going to put in a span let's put Mumbai India here okay so now we have added these job opportunities uh locations and we' put each of the job opportunities plus location in a div tag now one quick thing I want to show you is let's say you're typing and maybe things go a little bit Haywire uh and you don't have this nice indentation or this nice logical structure visible anymore just right click and select format document and that is going to automatically arrange all the tags in this nice fashion that tags that are children of an outer tag are automatically going to get some indent a or some space before them and then it's also going to split up the lines nicely so anytime you want you can right click and select format document and there's also a keyboard shortcut to do it and then you can save it and let's reload now and all right so now it's starting to look a little better now we have the front end developer role and under it we have bangaluru India then we have backend developer under it we have remote and data scientist under it we have Mumbai right so our notebook our our web page is starting to take sh ape pretty nicely okay so now we have this information now apart from this there are also several smaller modifier tags so there's a tag called B in case you want to make something bold in with within a paragraph there's a tag called I in case you want to make something a talic there is a tag called u in case you want to underline something now you can use these tags in between I'll show you an example let's say we want to highlight 300,000 plus I'm just going to put it in a b tag so there's a opening B tag and and then there is a closing B tag and you can see that 300,000 is now bold however these specific tags are slowly falling out of fashion what is being done instead is you just put a span around a specific piece of text and then use it use CSS to style it and we look at CSS soon so uh just know that although you have all these tags the use of these modified tags is now considered a bit outdated and it is recommended to use CSS Styles instead okay so but still as an exercise I will encourage you to just play around with these tags and check them out okay perfect so now we have looked at text we have looked at headings we have looked at spans as well um next let us look at lists in HTML so almost every web page that you might have seen contains some form of lists and there are two types of lists in HTML specifically there are more but these are the two that are commonly used one is an unordered HTML list and an unordered HT list is simply a bullet list it does not have any ordering it is ordered but it doesn't have numbers for the elements or the items within the list and then you have an ordered HTML list and ordered HTML list simply has numbers associated with each of the items and special HTML tags are used to create lists which allow for presentation of information in an organized and structured manner so there are two types of lists as I said unordered and the unordered lists are created using the UL tag and then list items within an unordered list are created using the LI tag and bullet points are used to denote the list items and you can change the appearance of bullet points using CSS or using some attributes as well similarly you have ordered lists and ordered lists are created using the o tag so o is ordered list UL is unordered list and list items are added using the LI tag and numbers or characters are used to denote list items okay and the appearance of the numbers can be customized using CSS or using attributes within the HTML element itself you can also Nest lists within each other so you can have maybe a list and then each list item can have a sub list inside it and so on so you can do a bunch of interesting things but it's important to close all your tags properly to ensure that the page is rendered properly otherwise the browser is going to run into issues and things are going to look a little weird Okay so remember we had a footer on our page uh let's try and maybe this looks like a list of links so let's try and maybe create an unordered list for the footer elements so I'm going to come in here and again I'm going to just create a logical Separation by creating a div and I'm going to create a UL or unordered list and then in the unordered list I'm going to have three list item so I have a list item called courses and I have a list item called programs and I have a list item called YouTube okay and then below this I also have this cop copyright thing you can see we have this thing copyright 2023 Jovian so I need the copyright character so I'm just going to go on Google and I'm just going to search Copyright symbol okay this is the copyright symbol and I can just go ahead and copy it from here and paste it so this is how you get special characters in your HTML you just search the special character online and then you can copy it from there and put it in so copyright 2023 Jian okay now let's reload the page and just like that you can see here at the bottom of the page we have courses programs YouTube and we have copyright 2023 Chan great so our page is taking shape and apart from this let's also add a an ordered list somewhere so maybe in the about Jovian section in this region let's maybe also list the programs that we offer so let's add another paragraph here let's see what do we want to do well we we we add another paragraph and we're going to say we also offer two industry focused boot camps so let's create another paragraph p and let us put in this text we also offer to Industry Focus boot camps and in this paragraph let us create an ordered list because we are we have two programs and we can list them one by one so let's create an Li here one or actually I don't need to put the number one the number one is going to come automatically full stack developer boot camp and then the second one is data science boot camp okay I think we want Jian first developer boot camp and Jovian data science boot camp all right so now you can see that we have we offer two industry Focus boot camps the Jovian fullstack developer boot camp and the Jan data science boot camp and the numbers one and two have been added automatically just as it was done in the the case of the fter items where here it just added a bunch of bullet points great so so far so good we have added some lists as well and that has added some more content on the page next up we can add some links now since we have added some footer uh we had added some footer items we also added maybe couple of programs so we can now link these to other Pages you know that any web page on the internet typically contains links to other pages and that is how you navigate a website now links can be to the same website links can be to other web pages on the internet um it it is completely up to you but links in HTML are created using the a tag the a tag is used to create hyperlinks and the a tag must have an hre attribute to specify the URL of the destination page and the text that is displayed as the link is placed between the opening and closing a tags and let's say you want the link to open in a new tab then you can use a Target attribute to specify where the link page should open Okay so let's see that step by step let's first do this for the Jovian fullstack developer boot camp so what we what we want to do is we don't just want to show this text Jovian fullstack developer boot camp we actually want it to point to the program application page because let's say somebody's applying for a job but they also want to see what kind of programs we offer it would be a good idea to maybe just link that from here so let me go to www.job.com and I'm going to scroll down here and I'm going to find the section full stack developer boot camp I'm I'm going to grab the link of that and let's come back here and let's create an a tag inside the LI item so inside the list item we creating an a tag so a and then you provide an href href href is the attribute and then the attribute value is always put within double codes so Within These double quotes I'm going to paste the link okay and then I'm going to close the a tag and I'm going to take the closing tag and put it outside the text okay so now you have a HF and then you have the HF of the or the you have the URL of the Jin fullstack developer boot camp and then you have closing the a tag inside the LI tag so remember your tags have to be matched up properly when you you cannot put the a tag closing a tag outside the LI tag because that is going to cause some problems so just be careful as you're doing this and now if I reload the page you can see that clicking on this is going to take me to the full stack developer Boot Camp Page great let me grab the data science boot camp page as well so data science boot camp copy that link and once again let's put that on a new line let's create an a tag here AHF equals oops yep data science boot camp and let's take the closing a tag and let's put it here and let's save that and now we have the Jovin data science boot camp linked from here here as well and that is how easy it is to add links within a web page let's go ahead and maybe let's also link a bunch of these footer links so I'm going to come in here and I'm going to say let's see a href equals let me just point it to jan.com learn for now yeah all right and let me also point the second one to jan.com learn okay so both the courses and the programs footer links for now are just going to go to the same page join.com learn and then the third footer link let me point that to our YouTube channel so a href equals PPS youtube.com at Jovian HQ okay let me just format that so let's say format document and that's going to just indent things a little better all right so now we have this courses link that opens the courses and we have the programs link that opens the programs um but of course both are going to the same place uh but what we have here is is this particular section within the page it actually has an ID so this section has an ID called courses so if we actually type something like this ash courses at the end of the URL okay that doesn't seem to work never mind yep so uh yeah we have linked the courses we've linked the programs and we've linked the YouTube channel now one thing that I want to do here is I also want to add a new I want these links to open in a new tab I don't want want to change the current tab because if somebody's looking for jobs I don't want to get distracted and lose track of the jobs page so I'm just going to add Target equals underscore blank okay so anytime what does this mean what does underscore blank mean why do you need that underscore don't worry about all that this is a very standard syntax anytime you need to open a link in a new tab just put Target equals uncore blank as an additional attribute in your a tag okay that's all it is used for um there are other targets that are possible as well but underscore blank is typically what you should be using in most cases okay so now if I click on courses that is going to open it in a new tab Okay then if I click on programs that is going to open it in a new tab if I click on YouTube that's going to open it in a new tab all right so now we've added links and our page is shaping up quite well now we have links on the page as well what next what else is missing from our page so we've added headings we we've added some text we've added some um jobs as well uh We've added footer links I think the images are missing so let's add the images as well how do you add images in HTML well so the way to add images in HTML is using the IMG tag so there's a tag called IMG and you can use that to add images now the just like links are added using the a tag a a is short for anchor so links are added using the anchor tag or a tag and you have to specify an href attribute similarly images are added using the IMG tag and you can specify the SRC attribute with the location of the image the image could be on your computer the image could be next to the web page basically or the image could be somewhere on the internet both of these work um you can just specify the location of the image using the SRC attribute apart from that because images also typically have you should also indicate what that image is about this is for screen readers and for search engines Etc so you can also add an ALT attribute or an ALT attribute which is used to provide an alternative text for the image which is displayed if the image is not loaded and it is also read by screen readers for people who are unable to see the image and it is also read automatically by search engines uh to improve the visibility of your page on search now the width and height attributes of the image can also be set using the width attribut and the height attribute and you can specify the width or height of the image as pixels on the screen so if you know the resolution of your screen the resolution of your screen is typically given in pixels for example 1 1280 pixels horizontally and 720 pixels vertically something like that so you can specify the height and width of the image in pixels as well okay now the last thing is that the image tag or the IMG tag is a self closing tag which means that it does not require a closing tag you just put the IMG tag you put its SRC you put its alt alt attribute you put its width you put its height and if you want and that's it you don't have to put a closing tag you don't have to put anything within the image tag as children okay so let's check out some images that we can possibly use we need a couple of images One image here as the banner that's going to show up on the entire page left to right and one one one image here which is going to show up here on the right okay so how can we add how can you find these images well one good place to find great photos that you can use for free is unsplash so unsplash.com is a great place so I'm going to search for career here and let me scroll down to find an image that might be good as a banner I think this image looks good so this image is a nice image that I could use as a banner on the page maybe not the entire height of the image but maybe like just this section would be good so I'm just going to go here and I'm going to say download free and from here I'm selecting the medium size okay so that is going to download a JPG file and I'm going to come into my desktop go into the folder where I actually have the webpage. HTML file and put in the image file here so let me just call it banner.jpg okay so now we've created a banner.jpg file so that is going to be the banner that we use on the page let me grab another image which is going to show up here maybe here I want to show a team picture so let me close this and let me search for team let's see if we can find a good team image or let's search for maybe people working okay that looks good not the Jovian team but uh never mind we can still put it on the careers page so let's download this also in medium quality so let's go and call this team.jpg all right so now if I open up the sidebar once again by the way you can open the sidebar using this button here or you can also just use command b or I believe it's controlb on Windows you can see that along with webpage. HTML we now have these files team.jpg and banner.jpg and now we can add these images into our HTML page so the first image the banner. jpg image is going to show up above the heading about about Jovian so I'm just going to add IMG SRC equals and paste okay I'm just going to put in the file name here banner. jpg remember this could also be a URL of an image on the cloud or somewhere on the internet but for now the image is right here next to the file that I have so I can just put that and let me just put the alt text here and the alt text I'm going to put here is uh Banner this is just the banner and I'm going to close this tag let me now reload the page and you can see that the image has been added here but it's too big let me just shorten the image so what I'm going to do is I'm going to just say height equals and I'm going to set the height of the image to let's say 360 pixels so when I say height equals 360 and reload now you can see that the height of the image has been reduced to 360 pixels okay I can reduce it further maybe just for now and we can make it bigger later yeah now the height of the image has been reduced so now we have this image of course it's not laid out how we want but it's there in the right place and then the second team image is going to show up on the right side so in some sense right is next or after so I'm just going to put that second image after this speed tag before job opportunities so I'm going to say IMG SRC equals team. jpg and ALT equals team and let me give it a height of uh 200 okay let's reload that okay so now we have the image here as well great so again you should what you should be doing is pausing this video watching maybe 5 minutes and then following along typing out everything on your own and build this step by step the best way to become a better programmer is to just code write a lot of code and even if you're writing the code that you're seeing on the screen you should be asking yourself what that code means and you should be experimenting with it a little bit and if something breaks you should be searching online and maybe asking us a question okay that is how you're supposed to do this it's not enough to just watch this but at this point I feel like we have all the content that we require on the page it's just not laid out properly all right so we have all the content let's see yeah we have all the content we needed we have this about Jovian we have this image okay maybe we don't have this Navar logo right now how about we fix that sometime later we we'll figure it out U but we have job opportunities we have uh this image here we have this footer and we have this copyright section now one thing I want to mention about HTML tags and CSS HTML and CSS in general is that there is so much here so many different tags and everything that you shouldn't go about trying to learn every single tag and every single attribute of every tag before you start building web pages because then you'll just be doing that for years it's uh you should take the opposite approach where you start trying to build something and whenever you feel that okay you're not able to build it with the tags you already know then go and search online to see if there is a certain tag or maybe a certain other CSS property that is going to help you do it and over time the things that are going to be used most frequently are going to become second nature to you and you won't need to look them up that is what I do I still look up some fairly basic stuff on CSS even after 15 plus years of web development and I do this every every week so uh one exercise for you is to check out this tutorial on HTML dog.com on the various beginner and intermediate level tags so you can check out the HTML beginner tutorial in the HTML intermediate tutorial so up once you're done with this lesson itself check this out at the very least go through all these different types of tags and if you have the time you can also go through Advan but that is something that we're going to cover in a future lesson anyway okay but this is a good place for you to practice another good place for you to practice is the w3schools.com website this contains a great HTML tutorial so if you want to learn about a specific type of HTML tag just go find it in the sidebar here and go ahead and do it we are not going to look at every single HTML tag here because that's that is defeating the point the the reason we are here is because we want to build good web pages okay so let's move forward we are halfway there let's go ahead and style the web page P now cascading stylesheets or css is used to describe the presentation of HTML documents it allows you to control layout and it allows you to control the appearance by defining styles for elements such as fonts colors margins borders and more so let's look at some different ways to apply CSS Styles there are a few ways to do this by and we'll do this by attempting to just Center this about Jovian heading we just want to bring it into the center of the page um horizontally speaking we want to bring it in the horizontal Center like that and let's see how we can achieve that using CSS okay so the first way to do it is using something called inline Styles now in inline Styles you can achieve this simply using the style attribute and you can put that directly within whatever HTML tag you're trying to style so let's say we have H1 and we want to style it so we want to set the style and then within the style attribute we want to set this as the value value so this is what a CSS declaration looks like so what you do is you declare certain properties about that tag using CSS you have a CSS property so here the property that you are fixing is called text align and there are hundreds of such properties but text align is the property that is used to decide the alignment of the text should the text be aligned on the left Center or right and then you have a colon the colon separates the property from the value and then you have a value okay so all of that goes inside the double quotes that are used to enclose the value of the attribute so yeah so you have the CSS property and then you have a colon and then you have the value and then you have a semicolon to end the Declaration and then you can have multiple declarations here let's say apart from Center lining it you also want to change the color to Indigo that is something that you can do here as well okay so that is the simplest way to apply H uh apply CSS to some HTML tags you simply go in into the HTML and then you add a style attribute now within the style attribute you add a property so let's say we want to do text align and for now let me put Center here and then you put so you have the property colon you have the value generally CSS values do not require qu quotations some of them do most of them don't and then you put a semicolon and let me save that and let let's just reload that here and just like that this is centered now you can experiment you can go and change this to right and you can see that that should bring you to bring it to the right of the page and again you can go back and change it to Center and that should bring it to the center of the page okay let me also add a color so color is added using the color attribute and let me set the color to Indigo you can create any color you want using something called an RGB or a hex formula but there are some named colors within CSS and you can always look these up so you can search CSS named colors so these colors are recognized by every uh these colors are already recognized by every browser so these are all the colors that are already available in CSS and you can use all of these color names whenever you want directly okay for example I could use dark blue instead of indigo and that would work as well and let me just reload the page here and you can see that now the content is centered on the page um just the about Jovian heading is centered on the page and it has the color dark blue okay if you want want to create colors that are not named already in CSS then we'll talk about that in the next lesson all right um so that is one way to add Styles this is called the inline style and you simply add a bunch of CSS declarations in the style attribute the other thing because you might want to add a bunch of different styles or you might want to add the same set of styles to multiple tags is to use a style tag so you can create a style tag with within the head or the body and then you can put some CSS code within the style tag let me put the uh let me create a style tag within the head here so I'm just going going to create style and now inside the style tag the first thing you need to put in is a selector because now you no longer know where you want to apply the style to unlike this attribute which was associated with a tag already so you need to put in a selector okay so there are many ways to select a particular or a bunch of HTML tags on the page the easiest way to select a bunch of tags is by the tag name so when you say H1 and then you open these braces or curly brackets what you're seeing that whatever I put Within These curly brackets or these braces should be applied to all the H1 tags on the page now of course here we have just one H1 tag but if you had multiple of those then it would apply to multiple H1 tags but let me get rid of the inline style here so now that the inline style is gone you can see it's back to this position and now in the style tag I'm just going to write text align Center and now one of the benefits of using a style tag is you can use multiple lines you can make your code easier to read instead of stuffing a bunch of styles within the same attribute and color what was that deep blue or dark blue yeah okay so now we have about Jovian which is at the center of the page horizontally and it has the dark blue color okay now notice that this style did not get applied to any other element on the page but suppose this second element on the page job opportunities was also an H1 tag you will notice now that job opportunities is also receiving the same style that the first H1 received okay so that is the benefit of using the style tag you don't have to retype the same style over and over for each tag but let's revert that back for now we are going to make this in H2 okay so that is the second way to do it which is let's just revert that yeah this is fine so that is the second way to do it which is using the style tag so in the style tag you have a selector and then you have this bracket and then you have a property and then you have a property value okay and then you close the bracket and of course you can have multiple properties that you can apply using a to the tags that have been selected using this selector and the simplest selector is just a tag we look at other selectors as well now yet another way to create to apply CSS to an HTML file is to create a separate file containing CSS this is very popular because that way you can put all your Styles in a single file and all your HTML in a single file and then link the file link the CSS file within the HTML page using the link tag okay so you use a link tag to specify within the HTML page that the the Styles should be picked up from this particular CSS file so let's do this let's create a file styles.css let's first get rid of this H1 all of that and let's get rid of the style tag okay and you can see that the style is gone now let us open up the sidebar once again and let us create a new file styles. CSS and now in this styles. CSS file let us add H1 and let us put text align Center and let us put color dark blue okay and let's save that and let's reload the page nothing happened because we've not connected the CSS file with the HTML file so let's come back here and now I don't need the sidebar anymore let's add a link here so link is a tag special tag this typically used for adding stylesheets and it has a structure like this so you say Rel equals stylesheet you basic you basically specify what is the relevance of this link to this page so Styles sheet or what is the relation of this link to this page stylesheet and then you say hrf equal to styles.css okay and that's it and again you don't need a closing tag this is a self closing tag so there are a lot of self closing tags in HTML now this hre can be a c file that is sitting right next to your web page or it could be in a sub folder let's say it was in a folder called CSS then you could put it under CSS styles.css or you could also specify something on the Internet so that is what is done typically with Frameworks like bootstrap somebody has put up a bunch of styles on the internet and we simply include it link it to our page using the link tag and notice that the link tag is different from the a tag which is the anchor tag which is used to add links on the web page the link tag is used to to Simply link stylesheets it's a bit confusing the terminology because of how HTML evolved but uh that's what it is okay so now we have link Rel equal stylesheet styles.css let's reload the page and once again this is now back to the center and it has the deep blue color okay so those are the three ways in which you add CSS you have the style attribute you have the style tag and then you have CSS files now one thing I want to mention is CSS stands for cascading Styles sheets and inline styles take precedence over style tags and style tags I believe take precedence over the um external external files and there are also other ways in which precedence is decided so for example I if I went in here and I added a style tag I did a style attribute and I changed the color to Black again you will notice that even though the styles. CSS file says color dark blue because I've specified the style explicitly on the H1 tag that takes precedence and and that is going to apply the black color to it okay so keep that in mind this can be sometimes confusing and generally speaking keep things as simple as possible so that you don't run into all these issues okay so now that we have done we've added CSS let's maybe look at what are some other ways in which we can select specific elements and then apply styles to them so when using the style tag or a separate CSS file CSS properties can be applied to multiple desired elements on the page using three types of selector one is the tag selector this is something that we've already seen for example we've done this text line Center and color deep blue or dark blue for the H1 tag the second is the ID attribute so typically what you can do is you can set the ID attribute for a particular tag and then use the hash prefix within CSS to select it okay so I can do this I can add an ID for this banner.jpg image so I can just say ID equals Banner and generally as a rule there should be only one element with a specific ID on a page you can have multiple and the browser won't complain but just as a rule semantically speaking you should have one element with a particular ID on a page okay so ID should be an unique identifier so now we have banner and now we can select the Banner element so now if I said IMG that would apply to all the images on the page right if I said IMG that would apply to all images on the page but now I only want to apply to the tag which which has the ID banner and that is why I have this hash or pound character and now I can set something like width 100% okay and now you can see that this image has a width of 100% 100 width 100% simply means occupy the entire space available horizontally okay even if you resize the page you can see that this image automatically resizes of course there is an issue here that it this image is getting stretched we'll fix the stretch in just a bit but but at the very least we are able to apply the width of 100% to just this specific image and not to this image so that is the second way to select an HTML tag and apply some CSS styles to it then the third way to select an HTML tag is using a class now sometimes what you might have is a several tags which you want to style at once and all these tags have to be styled using the same set of styles so here is an example let's say I add location let's say I add here no I have location somewhere here let's say I look at the location here yeah so I have locations here I have location for the front end developer role I have location for the remote developer role I have Lo or the backend developer role and the data scientist role let's say I want to make the color of the location gray so I can do this I can say span and I can say class equals location okay and let me go in and let me add that here as as well span class equals location span class equals location so there may be many spans on the page you can see that there is a span right here at the very bottom as well but these three particular spans have the class location and now I can apply some styles to specifically these three spans by using dot location so I can say dot location dot is used to indicate a class you can either select a tag where you don't need any prefix or you can select an ID which is Hash or you can select using a DOT which is a class and now I can say color gray okay and let me reload the page and now you can see here we have bangaluru India remote and Mumbai India so this is applied this color is applied specifically to these specific sections okay now you might ask okay how do I know when I should use color when I should use text align when I should use what the simplest way is to just go on google.com and search okay how to center text in CSS and you can say it uses the text align property but now we also have tools like chat GPT where you don't actually have to go and search this on Google and browse various web pages so this is something that I've been using a lot these days you can see that I have a bunch of conversations here already with chat GPD regarding HTML but you can just go into chat GPD or chat. open.com and you can search how to center text in CSS okay and it is going to tell you that it's going to come up with an answer for that it's maybe also going to come up with an example and you can ask it some followup questions as well okay let's give it a second maybe it will come up with yeah to Center text in CSS you can use the text align property and set its value to Center okay and it's showing you an example as well right and that's it so you this is great it works really well it doesn't always give you the right answer but you could ask it a couple of things and you can try it out it's a good starting point whenever you face an issue to go ahead and ask in chat GT in fact I'll encourage you some of the questions you've been posting on Zoom try posting them to chat GPT and uh you might be surprised uh at how well it can answer these questions okay so that is about the different ways in which you can select things now I encourage you to learn more and experiment with various types of CSS selectors what you can also do is you can combine selectors of various types to select a specific set of elements that match all the conditions for example let's say you have certain divs with the class location and you have certain spans with the class location and you only want to apply these uh settings to the span with the class location then you can say span. location and I believe that is going to or span. location and I believe that is going to just select the spans which have the class. location okay now the next thing I want to tell you before we go ahead and actually style the rest of the pce is the CSS Box model the CSS Box model describes how HTML elements are rendered as rectangular boxes in a web page okay and the box of for any HTML element is composed of several layers that determine the layout and the sizing of the element so let us create um uh there are a few components to the Box model there is the content there is a padding there is the border and there is margin we're going to understand all of these terms and we'll do that by creating another web page just so that we can experiment with the Box model so I'm going to open up the sidebar here and open up another page called box model.jpg okay there it is box model. jpg oh sorry box model. HTML let me rename that let me create another page called box model. HTML okay and I can open up box model. HTML here in my web page in my web browser like that just double click on it now that opens up box model. HTML for me and now inside this let me start putting in some content so HTML let me put in the doc type declaration as well you can see that vs code Auto completes a do declaration it's nice so let me add head let me add a title here so CSS Box model and let me add the body here and let me add a couple of divs so let me add a div called first let me add another div called second and let me give both of these divs a class each so let me call this box one by the way for class names you can put hyphens in between so in CSS whenever you're using class names or IDs you can put hyphens let me call this box two okay and let's reload that let me zoom in a little bit 200 is good enough yeah so you can see that we have content as we expect first and second okay let me add a style tag here and for box one I'm going to set some Styles and then for box two I'm going to set some Styles okay no change here so far um now the first thing I want to point out is what does the content of a div look like well uh let me a background color so the way you add background color is you just start typing and vs code shows you so let me add a background color let me add the background color aqua for box one and let's add a background color let's see beige for box two let's reload that and now you can see that each of these boxes or each of these uh divs and a div is essentially a box which occupies the full width of the page mostly each of these boxes have a background color one has the back backr col aqua and one has a background col bee okay just first notice that the content of the of the Box occupies the entire width by default when you create a div okay you can see that there is some empty white space around that is because the body the body tag which is the outermost tag on the page contains some margin and padding which I'm going to or some internal spacing which I'm going to just set to zero for now um we'll understand these terms margin and padding in just a second okay yeah so now you can see we have first and second we have box one which is first and box two which is second so you have the actual content which is the innermost component of the box and right now our boxes just have content they don't have anything else no no border margin padding nothing now the content itself can be controlled using the height and the width properties of course if you put in a lot of content the height will automatically expand but I can also set the height specifically I can say this should have the height 240 PX and this is how you specify length in CSS you specify a number and then you specify PX now you can also specify in inches you can also specify in percentages and all but in in the current case I'm just going to use PX okay 240 seems too big let me just set it to 40 PX right now yeah now we've set the height to maybe 80px okay so now we've set the height of the first container or the first box to 80px and let's set the height of the second box as well height 60 PX so the height of the second box is set as well so so far we just our boxes just have a Content nothing special now the next thing that we can add is something called a padding now the padding is the space around the content so you have the content and then you have padding which is the space around the content okay so let me add padding 20px and reload the page and now you can see that we have this box first and the content itself is of height 80 but then around it there is this additional space of 20 PX okay you can you can by the way you can uh just comment out something or you can disable some CSS property simply by putting it under these uh slash star commands um and you can do this using the command slash okay command plus slash is going to comment something out you can see without the padding it this is the size and then with the padding this is the size and clearly it is added more uh it we we have added some space before the on the left and also you'll notice on the right as well if you try to actually do something with it okay so let's say we set a width I can also set a width here width 100 PX again you can see that this is the structure or this is the content of the box without padding this is what it looks like and with padding it is added around the content so padding is space around the content but the key thing about padding is that the background color or the background image or whatever also applies to the padding okay now next thing that you can do is you can set a border you can you can set a border and you can set a border of let's say one pixel and let's just reload nothing happens because when you're setting a border you need to specify not just the Border width you also need to specify what kind of Border you need and the typically the border that you need is like a line border which is solid and you also need to specify what is the color of the Border okay so one PX solid blue that is what I'm setting as the border of the of the of the Box okay so now you can see that outside of the padding a border has been added which is blue in color let's make that 10 pixels so now we have a 10 pixel border and you can see once again the size of the entire box has grown so first we have the content and then around the content we have the padding which is indistinguishable because uh it has the same background but it is space you can click clearly see and then around the pading we have the Border by the way you can also add a border radius radius here let's say you can add a border radius of 20 pixels and a pixel is simply one point on the screen okay and you can just you can just play around with the pixel values when you're experimenting and over time you'll get a sense of which what pixel values make sense for the web page you're working on okay but I'll remove the Border radius for now so now we've added a height we've added a width we add we've added a border so we have the content and then we have the padding and these two are indistinguishable because the they have the same background then we have the border and the Border has its own color it can match the background it can be different but it's going to show up separately then you can add some space outside the Border as well okay and that is called the margin so margin and padding are the two most confusing things for when people they're getting started with CSS so I hope this is going to clarify so let's say margin 20px and when we add a margin of 20 PX you can see that outside the Border 20 pixel have been added left and right around the entire box okay so the CSS Box model basically tells you that you can get some content then put some padding around it and that'll have the same background then add a border around it and then add a margin around it which is going to space it away from the other elements on the page okay now U with border and Marg padding and margin you can actually use a different Border Side uh you can use a different border width or padding width on each side so for example you could say something like this padding left is 10px padding right is 100 PX padding top is 20 PX and padding bottom is 30px okay let's for a second let's just disable that I'm just commenting it out or basically this is done using command plus slash okay and you can see now we have some some padding here and then we have some padding here which is which seems to be higher and then we are going to have some padding at the bottom as well you can you'll be able to see it more accurately if I hide so there's higher padding at the bottom lowest ping at the left and then there is some medium padding here and then there is of course a lot of padding here without the right padding it's going to be different right so that is one thing you can do you can actually specify padding properties for each side separately or you can also just specify for all sides directly here so you can say 10 PX left padding 100 PX right padding 20 PX sorry you have left no I'm not sure well um I think you start from the tab you start from the top so padding property order yeah so the first first padding applies to the top the second to the right the third to the left and the third to the bottom and then uh the last one to the left okay so instead of padding left left right bottom top bottom you can have padding and then you can specify what padding you want for the top what padding you want for the right what padding you want for the bottom and what padding you want for the left so 20 PX okay and that is going to set the padding top right left top right bottom left okay clockwise order starting from 1200 so that is padding top right bottom left and similarly you can specify margin separately as well so you can say 20 PX at the top 30 PX on the right 50 PX at the bottom and 100 PX on the left and that is our margin applied properly okay now one thing you can also do is let's say your top and bottom margins are equal or top and bottom paddings are equal then you can keep them the same so you can um you can do this you can say margin or padding 10 PX and 100 PX so the 10 is going to get applied to top and bottom and then the 100 PX is going to get applied to left and right okay again top bottom left right if you put just two values it is going to repeat uh those two values okay top bot top top right left bottom clockwise orderorder top right left bottom always get confused all right so that is margin and padding now here's one interesting thing I want to point out though I hope this is all clear and you can also of course go say border bottom width is 30 PX and that is going to just change the B bottom width now here's one interesting thing I want to point out let's say we give this a padding as well padding 20px okay so now it has some padding and let's say we give it a border border 10 PX solid red now it has uh now it has the second box as a border as well now let us give it some margin specifically let me give it some margin top okay so notice keep your eyes here keep your eyes here and I'm just going to add a margin top of 20px and let me just save that and reload you can see nothing happened so what happens is that margins between consecutive elements can collapse into each other okay so what happens is this has a margin bottom of uh this has a margin bottom of 50 PX you can see here it's coming from here it's it has a margin bottom of 50 pixels and this has a margin top of 10 pixel so when you have two elements side by side or one above the other and both of them have margins then both those margins collapse into each other and only the bigger of the margins is maintained okay so even if I had let's say margin 20px all around and reload this page you can see that a margin got added here a margin got added here a margin got added here but a margin did not get added here because this margin is shared with the margin of the above element okay so that's something that you should keep in mind that margins of successive elements collapse don't worry if you forget this you're going to figure it out when you build your web pages anyway here's another thing that I want to tell you you can use another margin setting called Auto so let's say I said margin top to be 20 pixels margin uh right to be Auto margin bottom to be 30 pixels and margin left to be Auto what happens is and I also set a width for this let me set the width to 80px you can see what happened that the width constrained how much space the div can take up because you've set a width properly and then the margin on the top and bottom apply as usual but because we've set the margin left and right to Auto both of those are automatically adjusted to be equal and this is a very powerful thing this doesn't work with top and bottom this works with left and right only if you set the left and right margin to Auto what that does is that centers the div horizontally on the page you can see as I change the size of the browser the second div stays in the center so that's a good neat trick to center a div or horizontally on a page just set the margin to Auto for left and right all right so that's about the CSS Box model and generally speaking if you want to if you have a doubt about where a particular space or margin or padding is coming from here's what you can do let me just zoom let me just make this full screen for for once and you can right click on an element and this works in Chrome or Brave browser doesn't work in Safari I believe but right click on an element and click inspect and when you click inspect the browser is going to show you the actual HTML structure of the page so you can go into any web page on the internet you can right click and you can inspect and you can study the HTML source code of the page you can see here it has all the entire style it has the entire body div all of that and when you hover over a particular div it shows you what that div looks like and specifically the green area the the green area that you're seeing that is the content of the div including the padding and then the Orange area that you're seeing that is the generally the margin of the div okay you can see the orange area is the margin and the green area is the content you can also come in here on the right and you can study all the styles that are applying to this particular component and you can actually look at the Box model for that particular so if you select box one you can see its box model here you can see that it has the size 100 by 80 and it is highlighted and it has a padding of 10 at the top 100 at the right and then 10 at the bottom and 100 on the left and you can see it has a border of 10 on each side and finally it has these margins 20 30 50 and 100 on each side okay so that is one great way for you to explore the CSS properties if you scroll up you can also see what are all the CSS properties that are applied here you can actually turn off these CSS Properties or you can add additional CSS properties for example you can say text align Center and that is going to apply that additional CSS property so this is a great way to just experiment with your web page in the browser itself before you go back and make some change in your code okay and if you reload the page all of these changes will go away but uh the Box model is useful to explore then the CSS properties are useful to explore and you can also add additional Properties or you can change the values of specific properties let's say instead of Aqua I want to change this to Gold I can do that here as well and again all of this is just changing in the browser it's not going to go and save anything all right so that's an interesting way for you to explore uh web pages by the way if you're not able to see the Box model let me just turn this off here yeah so this is the Box model uh you can see that if you scroll up you can see here that you have the Box model you can see the margin you can see the Border you can see the padding and you can see the size of the Box itself okay that is the CSS Box model okay so let's go back into the page webpage. HTML and let's also open up styles.css so let's go back to styles.css by the way you can use command P within vs code to open styles.css vs code is really nice for coding it makes your job really really easy you can also close or collapse some of these HTML tags in case you don't want to see them and that way you can reduce the structure of of your page so I'm just opening everything for now but you can do that if you want okay and let's go back here to my first web page and let us now try and achieve this layout step by step okay so the first thing I'm going to do is go into styles.css right at the very top I'm going to go into body and I'm going to set a few things right because every browser has its own setup of the body uh the its own margin and padding you can see here that there is some white space around this image even though I've set it WID to 100% So within the body I'm just going to set margin as zero and I'm going to set padding as zero as well great so now this is completely out there touching the edges okay one other thing that I want to do in the body is I don't like this font which has these things sticking out of the J you can see right at the top it has this old look uh this is called a serif font this small piece sticking out of the J this thing over here is called a serif and similarly this is called a serif so this is what is called a serif font um generally speaking Mo most modern websites are built using Sans serif fonts so I'm just going to go in and change the font now the way you set the font is by setting the font family and there are many font families that are available on the internet uh by default browsers support several font families and then your operating system may have certain font families and then you can include new font families from the internet from a resource like Google fonts and we'll do all of those things but for now I'm just going to say Sans siif okay what that does is if I reload the p page you can see that now it looks a lot more modern now it looks that now it doesn't have those things sticking out of the J and out of the B and all so that's one other thing that we've done let me just zoom out a little bit okay so now we've done that uh let's start fixing things or let's start implementing the wireframe by applying the styles step by step okay so the first thing that I'm going to do is I'm going to add a header so I'm going to go in into webpage. HTML and here right at the top I'm going to create a div and I'm going to give it the ID navbar okay this is going to be the nav bar right at the top so over here and inside this I'm going to need an image I'm going to put that image in in just a second but let us give me let us give some styles to the Navar so let's go in here let's add I've given it the ID nav bar so I can select it using hash and let me then set the height or let me just give some padding to the nav bar let me give it a padding of 8 pixels let's just set it to 8 pixels for now okay nothing happened oh there it is yeah there is so that is a nav bar right there it has eight pixels of padding that is why it's just showing up like that let's now put an image under it so image SRC what is going to be the uh location of the image well I have picked out a jovian image logo here so I have this image hosted online okay so whenever you're using an image from the internet make sure that you're actually getting the link to the image itself and not the link to a page containing the image for example this page over here contains the image but I shouldn't put this in the SRC because then the browser is going to try to fetch this entire page as an image no so you can do two things right click if you want to include an image from the internet on your web page right click and say copy image address and then just put that here in SRC or you can right click and say open image in new tab and then grab the URL of just that image okay always open the image in a new tab and then grab the URL that is the safest way to do it all right so IMG SRC equals uh that and I'm just going to give it an ALT because that's a good practice so I'm just going to say Jovian logo and I'm going to give it um ID logo all right and now this image should show up here but it's obviously too big let's go in here and let us set the so we have the logo which is an image let us set its height to 32 PX okay that looks nice maybe even 30 PX and remember this is zoomed in I've actually zoomed it to about 150% in your on your side it may actually look a little smaller all right so that is starting to look good is there a margin for the snap bar let's set the margin to zero let's make sure that there is no margin here okay there's no margin and this is looking good so now we have this nice it's looking a bit unequal you can see on the top and at the bottom we have unequal um space so we can verify why there is this unequal Space by checking the nav bar and looks like well looks fine to me okay I have no idea why this is unequal that is something in CSS sometimes you have to figure out ways to fix but in any case I I think one one way we could do this is maybe just chug this into a div no that doesn't do it oh that's a wrong thing maybe I can just set the height directly here so height equals what is the height we need for the image 30 PX so let me just set the height to 30 here directly sometimes that tends to do the trick and let me remove the height from here so I've just set the height directly okay still doesn't do it so you're going to run into these issues in CSS where something is slightly off and I normally just keep these towards the end so that I don't worry about them immediately but in any case now we have the Navar in order and and then let us fix this image so this image looks fine but the only trouble here is that the image is stretching okay now what I want you to do what I want this image to do instead is just to cover the entire area that is available to this image instead of stretching and the way you can do that is by adding something called an object fit into the image okay again something that you can look up so this image has the ID Banner so I'm going to come in here and I'm going to add for Banner I'm going to set object fit cover okay and now you can see that whether I zoom it in or Z whether I increase or decrease the size of the web page the aspect ratio of the image isn't changing so this is the way you you fix your stretchy images you simply set object fit cover whenever you see that an image is stretching okay so that takes care of our nav bar that takes care of our Banner fine let's fix the about Joan I think we don't need the dark blue color I'm actually okay with the black color and now here we have these two things so we have the left and we have the right so we want to show two divs side by side each taking half the screen and again this is something that I I would search online I would say how to show two divs side by side with same width and you can see I've searched this already I think this one was one that I found useful so yeah you can explore this a little bit but I'm just going to go ahead and show you the solution here um whenever you need to show show two Dives side by side what you need to do is first make sure that this content and this content both are within a div so let's take uh let's see let's go to about Jovan and under about Jin first let's create a div called description let's give it the ID uh now let's give it the ID about okay this div is going to capture everything under the about section and then let's create two divs inside it let's give this the ID description and this is going to be the description and then let's create another div let's give this div the ID team and this is going to be the team image okay so we have created two divs one is called description and one is called team now by default divs are going to show up one below the other in HTML if you want to change that here is a quick trick you can apply if you want the divs inside a particular outer div to flow not horizontally but vertically then what you can do is go in and this outer div is called about so I'm going to just go into about so I'm selecting the outer div with the ID about and I'm going to just set display Flex okay we're going to learn about Flex the flex display in a lot of detail later on but the quickest or the easiest reason to use flex is to change the orientation of the divs inside and outer div from horizontal from vertical to horizontal okay and I reload that and you can see now we have description and team image coming side by side now here's what I can do I can set the width for description and team okay so I can do something like this we have description and I can set width 50% what I wanted to do is occupy 50% of the area of the parent div and similarly we have this team image uh or this team div and I want that to occupy 50% as well okay and now you can see that description takes up 50% if I added a background to it you'll be able to see so let me add a background just to show you yeah so you can see around description there is this background so description takes a 50% and the team image takes a 50% and of course now I can go in and I can put these two pieces of content inside those divs okay so I have the speed tag with a with this o and all of that so let me just grab that P tag and cut that and put this in the place of description okay and let me just right click here and indent I think it should be formatted already and now you can see that this P tag contains the data or shows this P tag shows the information on the left half similarly we can take the image now this contains this is the team image and and we can put that here in the team section okay now we have the team image on the right all right so that's one thing that I want to point out to you that you should what you should do is you should first try to create a layout using a couple of empty divs maybe even add background colors and borders to them just so that things are super clear and once you've created the layout with those empty divs especially horizontal layouts then put the content inside because otherwise you might just lose track and become confused but now once you you put the content inside later you have actually already fixed all of this so you have fixed what the description and team should be laid out as and then the content inside can be laid out independently okay so build your web page step by step in these steps okay let's maybe clean this up a little bit further let's see so maybe this team image Um this can have a border radius so this it's looking too sharp let me just call give this an ID team image and let me come in here team image and let me give it a border radius let's give it a border radius of 5 pixels again experiment with it trial and error but yeah five pixels looks good I think I would like to have maybe some space here so maybe I can go in and I can add some padding into team so let me come into team and add or let me come into description and add some padding let me add a padding of 8 pixels okay so now I've added a padding and maybe let me add this padding only on the left and right so let me keep the padding top and bottom as zero and let me add that padding but you can see here that there seems to be some space above this as well and I believe that is because of this paragraph tag because this paragraph tag generally has some space above and I can verify this by creating in by clicking inspect and verifying that in description this paragraph tag has a margin above so I can just set for this particular paragraph tag style equals margin Z or margin top so when you're specifying a zero margin you don't need to say PX you can just say margin okay right so the page is starting to look pretty good I would say um one issue here is that if I extend the this forward ah looks like I have a for the steam image looks like I have a width set let me get rid of that width here or a height for the team image where is the team image over here yeah this is a team image I think I have a height set for it let me get rid of the height that I've set and now it ends up taking up the entire space so maybe what I can do is I can just come back in here under team and or under team image and I can set the height to I can simply set the width to 100% of the parent which is half the div okay so that's nice now it is taking up the entire space inside the inner div and it is expanding um in size based on that but as the page gets bigger and bigger this content becomes too wide so maybe I want to limit the overall width of this description right so overall width of the about section itself right so the about section I don't want it to become too too big the about section should maybe I I just want to restrict it to this region generally speaking so what I can do is I can set a Max width I can set a Max width now the max width is the maximum width that this particular section can take so max width let me set it to 800 PX and let me reload the page so now you can see that even as as we make the page smaller both of these are going to take half the space and as we make the page bigger it's going to stop at 800 pixels but of course it would be nice for this to be centered on the screen so that's where I can also use that margin trick I can say margin zero Auto so zero margin on the top and bottom and then uh right and left margin can be Auto and now you can see about Jin and here we have this and then we have here we have this image and it's all nicely centered okay it's all remains centered remains centered and then it goes out here and it becomes small okay and maybe we can also add some padding here let's see let's add a padding of maybe 8 pixels just so that it's it doesn't touch the edges okay and if we've added padding here then maybe we don't need this padding here over here maybe we just need a padding right 8 pixels okay so this is what web developers sit and do all day they fiddle around with small CSS settings just to get things to look exactly as they desire uh but this is looking fine to me I think the about section looks good largely yeah somewhere around that is looking good yes this is slightly falling over into the next uh outside but that's okay okay so now we're done with the about joing section let's go ahead and fix the job opportunities section so I'm going to go in and under job opportunities okay once again the H2 as well I'm going to add a center so H2 I'm going to say text align Center okay now this this has centered then I can go in and I can maybe again create another outer div called jobs so I created a div called jobs so let me give it the ID jobs all right and again for jobs I'm going to set a maximum width so max width for jobs is 800 PX and I'm going to set margin 0 Auto and I'm going to set padding 0 8px okay all I'm doing is I'm creating an outer div into which I can then put in all my jobs so let me grab all these jobs and this is all the footer yeah all this point till this point we have the jobs and I'm going to put it under the jobs div and let me reload again and you can see that it has this nice it remains centered on the screen that's nice pretty good remains centered on the screen and it is also not touching the edge of the screen so generally you want to have some space from the edge of the screen here so that's it okay then we have this H3 over here there's a lot of space between front end developer and then bangaluru India so how about we come in this is an H3 remember it's an H3 uh let's give it a class called uh job roll so that we don't affect other h3s on the page if we had any at the moment we don't but yeah okay and let me come in here H3 and let us just give it margin bottom zero I believe it's a margin let's see okay margin bottom zero this is looking good now it is much closer maybe Zero's too little maybe let's make it 8 PX Maybe 4 PX should do the job so normally with margins and paddings you want to use multiples of four that's a good idea and you want to go double double double half half half and that's a quick way to work around this stuff okay now what would be nice if we could also get that nice apply button or apply link here on the on the job page so I'm going to again show you a quick trick we're going to learn a lot more about things like flexbox Etc but a quick trick to just get one single element pulled to the right side is using something called float so I'm going to show you right now so let me say a href equals nothing for now and let me just put in apply and let me give this a class as well and this class is also called apply and let me put it above every H3 here okay so now we have this apply apply apply that is going to show up above every H3 and I think I can go in and I can fix the margin top as well for this H3 to be zero yeah so now we have apply apply apply and what we can do is take the apply class so do apply that is the that is the class given to this apply link and I'm just going to add one thing float right okay so that's just going to pull this apply all the way to the right that's nice it's going to just pull it all the way to the right and I think we need probably under the location we need some spacing so I'm going to go back and add some location add some spacing under location so we have class location and class location has already had we've added the color gray let me add margin bottom 16 PX okay that's a span so that's another learning margins don't work for spans I know it's confusing happens all the time margins don't work for spans so I'm just going to go in and I'm going to change these spans to divs okay margins and paddings don't apply to spans because they are inline elements I'm going to change these all to divs and now it's to apply okay great so this is looking nice now we have the front end developer we have Bangalore India and we've pulled this or we've floated this apply link to the right so that's nice one thing that I would want to do now is maybe get rid of these underlines under these links uh these underlines aren't looking that great so I'm just going to go in and then for all the anchor Tags I'm going to remove the underline how do you remove the underline all the anchor or the link tags well remove underline from a a tags CSS I just search that and it says that it can be removed using the text decoration property so you can say text decoration none and that should do it so if I go text decoration none that should hopefully get rid of all the underlines right we have gotten rid of all the underlines as well now we have these apply links as well last thing is the footer I think we're almost there we just need this footer at the end so let me come in and once again let me create this div called foter okay it's already there so I'm just going to give it the ID putter okay and then we have this list let me just call it let me give it the ID footer links okay so I'm going to do a couple of things first I'm going to give the footer so dot um it's it's an ID so hash footer I'm going to to give it the background color gray or something very light gray let's see gains borrow okay that looks like a nice grayish color oh what is the lightest gray we can find let's search for a very light gray ghost white okay that is interesting let me just get Ghost white yeah that's a very light grayish color you may not even be able to see it on the screen but it's there then for the footer links I want to get rid of these bullet points and let me just bring that up here so for the footer links I want to get rid of the bullet points and I just want to keep them all on the same line so I am going to say putter links and again this is something that I would look up normally but uh I happen to remember it what the way you can get rid of these bullet points is to say list style none I believe that should do it and now now you can see that the the bullet points are gone now of course for the footer itself it might be nice to maybe add some padding at the top and bottom and maybe all around so let me just add a padding of 8px and okay now the footer is looking nice too and maybe let me also add some margin top the footer is too close to the data scientist job role let me add a margin top I'm going really fast but I'm expecting you to follow along here pause follow along and maybe also look up what each of these prop properties mean because that's really how you do web development 16 PX so let's add a margin H let's see did not do anything maybe let's make that 32px yeah that increased it so remember our location also has a margin so the margins collapse into each other um all of that happens okay final thing we want to make these list items come up up in line so there whenever you have three divs showing one below the other and you just want to show them all in line now another quick way to do it is well we could just do I think display flex and that would do it yeah display flex and that should do it U for phot links um we can also add but I want to show another way to do it and this is something that you can set on individual list items so you can say footer links lii and that is going to select the LI items under the ID footer links and I'm going to say display in line okay and you can see now they're showing up inline so the difference between flex and inline is flex is something that you apply on the parent and that applies to all the items within it and then in line is something that you apply to the child element let's say you went into one of these list items and applied in line only that that would appear in line instead of block which is the entire horizontal width um but here we are applying to all the list items and I'll tell you why in just a second but apart from the in line we also want to add a margin so let's add we don't need a margin at the top let's add maybe 16 pixels of margin on the left and right so let's add the margin here let's reload okay so now we have a margin and the last thing that I'm going to do is I'm going to say text align Center and that is going to Center these links on the page okay and in fact text align Center can be done not just for footer links but for the entire footer itself we can do it like that and finally let's fix this as well so let's go in and let's call this copyright class equals copyright and let's come back in here and well we could also give it an ID but fine class is fine copyright and let's let's give it the color gray okay so that is our page I think that is looking pretty good so we have the nav bar at the top we have this banner and this Banner always occupies the entire length and it doesn't stretch the image too much um then we have this about Jovan section that is always at the center and then we have the job opportunities that are also in the center if you want we can experiment with the colors of these and finally we have these apply links uh they don't do anything right now but it wouldn't it be nice if they could at least maybe trigger some sort of an email and that's where I want to introduce you to another form of Link called mail to Links okay so just search for mail to Links what is a mail to Links well you can do this instead of having a link point to some website on the internet you can have a link say mail to colon and then some email address and when the user clicks on that link it is going to open their email application whether it's Gmail or whatever email application they're using it is going to open their email application and put in this address in the subject line okay so that's a very interesting hack so this is what we can use here for our apply so I can go in here into apply where is my apply yeah so I can go in here and in the HF I can say mail to I can just say mail to support at Jovian okay and let me come in here and let me say mail to support join.com and mailto support join.com and reload the page now if I click the apply button you can see that it opens my mail application which is Gmail and it is automatically filled in the address support jan.com okay and then here you can actually then fill out the subject and you can send an email so essentially what we're saying is when the user clicks on the apply button that is going to trigger their email client and they can just send us an email that they're interested in a particular um job one thing that we can also do is we can also put in a subject here so we can say mail to and you can just say subject you can say question mark subject after the email address equals front end and question mark subject equals backend and question mark subject equals data scientist or just say data all right and I'll also add a Target uncore blank so that it opens in a new page underscore blank and let's add Target equals uncore blank and let's add Target equals uncore blank okay so now each of these mail to Links is going to have a different subject and it's going to open a new tab you can see here that it has automatically added the subject front end and you can construct more more complex subjects and in fact you can also set up some kind of a body directly as well and similarly you can go in here and uh let's click on backend developer and it fills up the subject backend and you can go in uh click on the data scientist and it fills up the subject data okay great and then all these other links are working fine as well I think I'm very happy with this I'm very happy with this web page at this point so I'm just going to save it and let's see I'm just going to reset the zoom level okay so this looks good at the normal zoom level and it contains everything that I'm looking for I have the header I have the banner I have this section I have some text on the left I have something on the right yep I have a couple of links here as well I have the job opportunities and I have locations I have this apply button and then I have this footer and then I have this copyright at the end as well great so I'm feeling very happy with this web page now the final step now that we have completed this web page the final step is to go ahead and deploy it so this is what it looks like roughly now we can deploy this web page to the cloud now we're going to cover deployment extensively over the course of this program or the course of this next few lessons as well and there are many many ways to deploy a website to the cloud there are hundreds of platforms but the simplest thing is to just upload a zip file right wouldn't it be nice if we could just zip up our web page and just upload it on the cloud well that is what you can do using this platform called static. apppp and there are a bunch of these platforms but static. apppp allows you to Simply dragdrop an archive with your page or a website in it and it will take care of the rest okay you'll automatically set up a website for you now here is what we do first we have to make sure that we have an index.html page so there is this convention in HTML that a file called index.html is going to be the root page of a website okay or the root page so when you open jan.com that's actually opening jan.com index.html so let's go back here here and let us rename webpage. HTML to index.html so let's rename this to index.html and then let us go and zip up this folder so we have this folder over here which has a index.html file which is the sort of the root page or the root web page and it has a bunch of other files and images as well I'm going to zip it up so I'm going to say uh compress and depending on your operating system you may have a different way to zip things and then on static. apppp I'm just going to click upload for free I am then going to upload this ZIP file over here and that is going to then ask me to maybe pick a domain name so it's going to be a subdomain of static. apppp so let me just put it as Jovian j o v i a n can't spell my own company name okay and let me just put in an email here Sydney is the account I'm using Sydney jan.com and let me put in the name here Sydney Carton okay let me put in a password here I'm not going to say that and let me just accept the terms of privacy and let me just say continue okay looks like this email has been taken let me just provide a slightly different email yeah so now that is going to ask me to verify my email I've uploaded the zip file already so I'm just going to go ahead and verify the email I am going to let's see let's open up gmail.com and here is the account and here is the verification link okay now my email is verified and now you can see that Jovan careers. static. apppp this website is getting deployed okay so let's give that a couple of minutes looks like it is deployed so let's maybe go and check it out let me just click joen careers. static. apppp and yes looks like this website is already deployed and in fact you can open it up on your end as well and because we have set up because we have set up this page web page. HTML as index.html that is why it's opening up directly but I can also just type index.html and it will open the exact same page okay not only that remember we have this other page called box model. HTML well box model. HTML should open up just fine as well there you go box model. HTML and in fact if we had a link here from index.html to box model. HTML then that link would work properly as well and you can see that both these images got uploaded as well so that is how you deploy a site the the simplest way to deploy your site side is to just zip up your code and put it up online you don't need any G AWS deployment commands Etc it's all really simple to do okay and that's it so let's take a quick summary of the whole thing here's what we did we created an HTML file on we created a folder on our desktop we put in our HTML file into it we added some code into it using vs code and then we try to view it in a browser then we using some basic HTML tags like HTML head title body div Etc we created a web page then we use some more HTML tags H1 to H6 P list links Etc to structure content on a web page so remember this piece before we added any CSS we just put up a bunch of content on the web page and here is what it looked like then we learned how to apply styles using CSS so cascading stylesheets the way we saw we saw that we can apply Styles in line we can apply styles using the style tag we can apply styles using CSS files and the key idea is you have a selector and then you have a property and a value then uh we looked at the different kind of selectors we have tag selectors we have ID based selectors and we have class selectors then we learned the CSS Box model which is how you have content and around the content you can add padding and the padding is also shares the same background and then the padding is inside the border the border is something that you can set WD for and then outside you have margin and margins can overlap for side by side elements and then we of course we implemented a wireframe using excal draw.com and we then tried to replicate this wireframe within CSS You by adding a bunch of CSS properties starting from the top so we picked section by section we added a na bar we added a logo in it we fixed the banner we fixed the section about Jovian then we went into job opportunities and then we added a footer right so that's what we did and finally we just deployed our website to the cloud using static. apppp we just went to static. apppp created a zip file renamed our main page to index.html and uploaded that zip file verified our account and it is deployed as a um yeah so it is deployed where is it yeah it is deployed as a subdomain of static. apppp but within static. apppp itself you can also go into settings and actually configure a custom domain so you can actually put this on Jovian careers.com or something like that you can go and you'll have to upgrade your plan you'll have to pay you can set up a custom domain you can just set up a domain like janc careers.com and you can set up some DNS settings and make sure that that is where your web page shows up so that's not bad for a first lesson we probably spent about 2 hours 2 hours 15 minutes if I exclude the breaks and we were able to build a pretty good functional website and clicking on this website the actual functionality is also present because you can click apply and you can actually go ahead and send out an email to the Jan team to apply for a job so that's how simple HTML and CSS really is once you can become familiar with just the most basic parts now of course there's a lot more to it there are tables there are forms there are various CSS properties Flex Box Etc but what I want you to take away here is that you should try to First figure out what you want to build and try to build it using what you already know and then just try to learn as you go along the things that you don't already know okay and here are some references that you can check out you can find the completed code for this lesson it may be slightly different because we've done this live you can find the completed code for this lesson here you have this index.html over here so that's great and then you have maybe some beginner friendly HTML and CSS tutorials in case you want to look at other tutorials as well after practicing this you can go and check that out so HTML dog.com is something that I found very simple to follow along with but you want some if you want some interactive HTML tutorials you can go to w3schools.com and if you want more detailed and comprehensive tutorials check out mdn or Mozilla developer Network you can check that out as well they have fairly detailed tutorials um and a lot of text lot of explanation as well so take your pick depending on how new you are depending on how comfortable you feel after practicing this lesson after watching this lesson and prac iing it writing out all the code by hand you can pick whichever other tutorial you want to take and some of the other things you can look at is the LM .io this is the text generator that we normally use so that's something that you can use to generate text when you want to fill a page um if you want to learn about the CSS CSS Box model you can check out this YouTube tutorial there is this website called CSS trick.com this has a lot of great guides on various Topics in CSS um don't recommend doing all these guides but whenever you're working on a particular topic if you need to maybe get help with a particular Topic in CSS you can check it out and normally you can just search online and you'll find something good enough and then if you want to create more advanced mail to Links so you can use this mail to link. me and you can craft maybe a a very interesting mail to link which can have a two line a subject line a body and a bunch of other things as well you can add CC BCC all of that too so the last time we looked at the very basics of HTML and CSS and we did that by working on a problem statement where we built a simple jobs careers website for Jovian so today we are going to continue building on that in this tutorial we will dive deeper into the world of web development and we will learn some Advanced Techniques for Designing and styling websites using HTML and CSS we will learn how to create HTML tags of various types we will learn how to use some Advanced CSS properties and we'll also learn how to optimize your code a little bit for performance and accessibility so here is what we're going to cover today we're going to iteratively improve the existing web page we are going to create and style HTML tables we're going to understand various text related and color related CSS properties we're also going to create an HTML form to collect user inputs and we're then going to send those user inputs to a server and finally we're going to use metatags to improve how a deployed page is previewed when it is shared as a link so there's a lot to get through let's get into it and the best way to follow the best way to learn these skills is to follow along step by step you don't have to do that if you're watching live but as you're watching the video just pause at various places and try to write out all the code yourself that is how you learn this quickly and of course we are assuming some basic knowledge of HTML and CSS here from the previous lesson so we'll explore these Topics by attempting to solve this problem statement we will try and improve the Jovian careers website that was created in the previous tutorial so here is what the Jovan careers website looked like let me zoom in here so that you can see it easily so we have a nav bar here with the Jovian logo we have a banner image here it says do something great and we have an about Jovian section and then we have some information about Jovian we also have an image ideally this should be the Jovian team but this is just to indicate something about the team and we have information about job opportunities and you can click apply and an email will get triggered you'll be able to send out an email applying to these jobs and then there are some links in the footer as well for courses programs and YouTube so this is what we built the last time and we are going to improve upon this by making the following changes we are going to show the list of jobs in tabular format with separate columns for the job title location salary and the job posted date we we also going to show an application form below the jobs table where a user can fill out and submit an application then we are also going to improve the Esthetics of the page bring it closer to the Jovian brand using the appropriate fonts text sizes and colors then we are going to deploy the page to to the cloud and ensure that it previews properly when it is shared as a link so this is what we're going to work on today now the code for this tutorial can be found here so the starter code which is the finished website from the last tutorial is available at this link the completed code for today's tutorial will be available at this link and finally the finished site that we're going to create today will be available at this link so check these out in case you have in case you face issues at any point so let's just take the starter code and we're going to download and extract the starter code first and then we're going to open it up in Visual Studio code so let's open up this link this contains a starter code code and I'm just going to save it on my desktop it's going to be saved with the name my first webpage. zip you can see that I have a zip file here I'm just going to open up this ZIP file so extract it and now I no longer need this original zip file so I'm going to delete it then I am going to rename this so I'm going to rename this to my second web page since this is our second web page so you can see here I've renamed it to my second web page now I want to open this up in Visual Studio code so let me open vs code or Visual Studio code and I have Visual Studio code I've installed it already in case you don't know don't have it installed just go online search for visual studio code and install it and now I'm going to go into the file menu and I'm going to select open folder and now I'm going to just select the folder my second web page that I have just downloaded and let's open it up and here you go now we have this HTML file now we we have a CSS file and we have a bunch of other files as well from last time so this is all the starter code that we have and let me also open up the web page in the browser so I'm just going to open it up in the browser here as well so that we have it open both for editing and for previewing so now we have a file index.html here and that file contains all the content for this page let's quickly review what this file contains so that we when we start modifying it we'll know exactly what to do now of course we have this head tag here which sets the title of the page notice that we didn't actually set a proper title right now it just says my first web page it should say something like Jian careers so we'll fix that then it contains a link to a stylesheet or a CSS files so there are many ways to attach CSS styles to HTML web pages and one way to do it is by using the link tag and putting all the Styles in a separate CSS file which we have here then of course in the body itself self we have the nav bar over here and this is all the code for the nav bar so we have the nav bar which is a div and then an image inside it which is the logo over here then of course we have a banner which is an image tag right here then we have an header we have a header H1 which is right over here you can see that all of these are styled as well so we have the body the body we've set the margin and padding to zero and we've set the font family to Sans serif we've also set a text decoration for the nav bar we've set a padding we've also set a in for the banner we've also set an object fit over here so that it shows up properly no matter what the size of the page is and for the header we've set the text Line to Center so we've added various Styles as well then we have this about section and in this about section we have a left section and a right section so the way we did this is we have this about div and for this about div we have set the display to flex and we have set a maximum width for this about div so you can see here that the maximum width is ensuring that this about div doesn't become too big apart from that we've also set a margin uh that ensures that it is always at the center okay so I'm going through this quickly but review the previous lesson if not if some of this doesn't make sense we've also added a padding so remember the CSS Box model the padding is inside the border the margin is outside the Border um it's a good thing to practice and review from time to time then of course we have we have the description which takes up 50% of the width then we have have the uh Team image which again takes up 50% of the width and the team image also has a border radius over here and then we have these job opportunities so we've uh used an H2 here so you can see we have the description we have uh information about the two boot camps which we have used a list for a list tag and then we have job opportunities we've used an H2 here then we have a div called jobs and in this div we have the three jobs front end developer backend developer and data scientist and finally we have courses programs and the YouTube link in the footer okay uh of course there are some Styles related to the jobs div as well there are some Styles related to each of the jobs we have those are H3 and there are some Styles related to the footer as well okay so very basic HTML and CSS that we applied and we of course deployed it to the cloud using a simple hosting platform where we could upload a zip file all right so that's what we have from the last time so we've opened up the web page we've opened up the project in vs code and we have renamed it to my second web page now the first thing we'll do is try to improve the wireframe in the previous tutorial we first created a wireframe this is what it looked like so it contained this navbar banner and it contained the same sections that we have on the actual page and we use this as a visual reference while creating the page so now we are going to improve that wireframe we're going to make sure that we are covering all of these things a list of jobs in tabula format the application form below the jobs and also maybe the other things will follow not necessarily in the wireframe but when we Implement them and this is something that you'll see as a very common practice in the world of web development this process of improving the design of a web page and then going ahead and implementing it on an already live web page is called iterative development and a website goes through multiple iterations or even web applications so when you look at Jovian we add new features more or less every week and that is how we approach building things so the one approach that you could follow is something called the waterfall approach where you identify all the requirements then you come up with a final design then you do the development for the entire set of requirements at once then you test it and then you maintain it that takes a lot of work and you often end up building a lot of features that nobody might use and missing out on some very important features so another way to think think about web development is to take an iterative approach you should at the very least push something out deploy something that people can use every week or or if possible every single day so whenever you're building a website or a web application you should think okay what can I build in a day that people can start using however limited it is which is what we did the last time and then once people start using it depending on their feedback depending on what else you have in mind and how much time you have try to come up with the second version with a new set of features and repeat that process so iterative development is a very common practice in modern web applications so this is something that you should get used to so there are a couple of changes that we are making today the first thing is to replace the list of job openings with a table and some benefits of the table are they it leads to an improved readability because tables make it easier for people to scan things visually tables also offer better organiz oranization so because organizing them in a table you can also group them by Department location or other relevant criteria later on when we Implement more interesting tables and then tables can also have things like sorting searching filtering Etc which we look at once we look at web application development later in the program apart from the table we'll also add an application form below the table so the form will ask for the users's first name last name or maybe the name as a whole let's just change that to name so the form will ask for whoever is applying the form will ask for the applicant's name email the job that they're applying for their phone number their resume and a cover letter and here's what you can do you can actually start revising the wireframe here itself so you can take this and then create a copy of it and then paste it and then start moving things around for example you could get rid of you could get rid of these and then you could insert a table here so I I could for example go like this and create a table and then I could make some more changes let me change that to Black yeah so I for I could for example create a table here and then into that table I could add various columns like this so here's one column here's a second column here's a third column and then I could start adding rows within the table and then I could maybe start adding information like job title so these would be the column headers and after adding the column headers I can also add some data within those columns so this is how you enhance your wireframe you are visually trying to put together what you want your next version of the wireframe to look like and then you could also go ahead and maybe extend this a little bit so move all this forward let's see let's move all this down and you could then add a application section so you you could add a section called submit your application and then you could go ahead and maybe add uh various input fields for example you could get an input field called name here and put an input box below it and then just create multiple copies of that to create the other input fields and so on and you could add maybe a submit button somewhere at the end right so this is how you enhance a wireframe just create a copy of your existing wireframe and keep adding new things new sections before you go out and start coding now I have already done this so I'm not going to show this entire process to you but I encourage you to just do it all yourself get into the habit of creating quick wireframes before you uh start writing HTML code that will save you a lot of time while coding so here we have added a job opportunities table and you can see that we have a job title location salary and posted on so we have the job titles we have a bunch of locations we have salaries both in Indian rupees and in dollars and then we have a poster on date and below that we have a submit your application form and in this form we ask for the name email phone number and there's a drop down here asking for the position the user has applied to and then there is a cover letter uh there's a box here for submitting a cover letter okay and there's also this check box here that we're asking the user to agree to the terms and conditions which is to be contacted by us or for their resume to be shared within our company and so on and there's a submit button so now we have a clear idea of what we want to build today specifically these are the two sections that we want to work on today and of course we want to make them aesthetically pleasing and then we also want to make some other changes to the site in general so this is the revised wireframe we still have the Navar Banner about section but now we have a job opportunities table and we have a submit your application form and of course we have the footer as well again for personal projects a wireframe is usually enough to plan a website's design and layout but in a professional settings UI developers will often create detailed mockups providing more information on colors fonts and visual elements that you can work uh that you can use while actually coding the web page so as an exercise I encourage you to replicate this wireframe and maybe also add some new sections see if you can add a new section and Implement that while you're working through this lesson but let's come to tables and HTML now tables are a fundamental component of HTML used to display data in a structured Manner and tables are created using a combination of the table TR TD and th tags so there are a bunch of tags that have to come together for you to create a table and tables can be styled using CSS just like all other HTML tags to add borders backgrounds and other visual elements tables can also be manipulated to merge cells so if you see here it's not just a simple table with rows and columns you can see that these two are merged and then these two are this is vertically merged as well so you can do lots of interesting layouts with it using tables but I do want to mention that TBL should be used appropriately don't put everything within a table you might get this temptation to just use a table for the entire web page to lay things out but that's not a great idea you should be using CSS for layout and tables should be used only when you want to show a grid of data which fits in neatly into a table so A good rule of thumb is if something can be represented using a sprad sheeet then a table is a good way to represent it in HTML okay so a table is created using the table TR and TD tags the table tag is used to create a table in HTML and all other table related tags are nested inside this tag then the TR tag is used to create a table row and each row contains one or more table cells and the table cells are created using the th tag and the TD tag okay so let's see these an action and it'll start to to make a lot more sense so the first thing I'm going to do here is go down and find the section job opportunities and I'm going to remove this div containing job opportunities and if I just reload here you can see that now we no longer have job opportunities on this page let me just zoom in a little further okay now let's start adding a table here so let me add a table okay and let me save that and you can see nothing really happened some additional space got added but the first thing I'll do is I'll add a row within the table so a row is added using the TR tag and let me save that and still nothing happens now let me actually put some headings so let me create a heading called heading one so I'm going to create two column headings one called heading one and one called heading two and these are created using the pH tag okay so now you you can see over here in the corner we have heading one and heading two and normally you might want a table with a border so one quick way to add a border for a table is just by specifying the Border attribute okay now once I've added a border you can see that there is a border around the entire table and then there is a border around heading one and there is a border around heading two as well okay let's add more rows within the table so let's add a TR now let me add another element so now I'm no longer adding headings now I'm actually now I'm adding actual data elements okay so I'm just going to call it data one for now and TD data 2 okay and let me just replicate that for one more row TD data 3 and TD data 4 all right so now we've created a table successfully I hope you can see it you it's right here in the bottom left corner of the web page and now now that you've understood how tables work we have this table tag and in this table tag we have a row this is the header row and that contains these th tags so th is header then we have these uh more rows and in these rows we have the TD and TD creates normal data you can see the difference between the heading and the normal data is that the heading is bold and if the table was bigger you would also notice that the headings are centered but the normal data is left aligned so that is a difference but it's also semantically informing the browser what is the heading and what is just data within the table it is also used by screen readers and search engines to identify the structure of the table okay now encourage you to experiment with the table what happens if for example I put an additional column here let me just save that and you can see that a new column got added here but they you don't have that same column here available and that is why you have empty space here or what happens if let's say you have like a stray TD somewhere so let's say you have this data five somewhere what what does that do so that creates a new row even though you do not have a proper TR so even if you do not have a perfect structure of table and then TR and then TH or TD most browsers will still render your tables but it's a good idea to M maintain the proper structure while building a table okay so that's how you build a table in HTM fairly straightforward okay so let's maybe go ahead at this point and let us add this data into a table so we want to get the job title we want to get the location we want to get the salary and we want to get when the job was posted now here's a quick tip for you whenever you're building HTML tables it's always a good idea to First maybe create a spreadsheet like I have done here I've created the spreadsheet let me Zoom that in a bit and I am simply going to now use this spreadsheet as a reference for creating the table and I can also just copy paste the data very easily from the spreadsheet onto the table so let me just go in here and copy the table headers and now I am going to paste in these headers so my first row is going to be a row of headers and that is going to contain these th tags so now we have a th for for job title we have a th for location and we have a TH or table header for salary and finally we have a TH or table header for when the job was posted great now let's start adding the jobs one by one so once again I'm going to go in and copy this front end developer bangaluru I'm going to copy the salary and the posted on date as well and let me get rid of these and paste that in here let's bring that into new lines over here okay and let's put in a TD here so again wrap the data inside a TD and you don't just have to put simple text you can put entire lists you can put paragraphs you can put whatever you want you can put images into a table but for now we'll keep things simple we are just going to put some normal text into each table cell so each box that you see within the table is called a table cell so that is something that you will notice in the terminology especially if you're searching for questions online okay so that is the second job role let me just grab this and create a few copies of this and in fact what I'm going to do is also give it a couple of classes so I'm going to give it the class I'm going to give the entire table an ID jobs stable and I'm going to give this a class jobs table header and or jobs header row let's just call it jobs header row and let's give this a class jobs data row okay and let's create copies of this so we are adding the classes because we're going to use them later for styling now we have the jobs header row and then we have jobs data row let's add the second role full stack developer I believe the second role is in New Delhi India and the salary here is 15 let's see and the Feb 1 2023 is when it was posted let's create a couple more copies for the next couple of rows okay we have a data scientist this is is in San Francisco USA and this is I believe 175,000 yep and this was posted in December 22 December 22nd 2022 and finally let's get get that last role in here as well ml engineer and this one is a remote job and this one is is $80,000 and I believe this was posted on September 19th okay so that's our table we have a table inside the main div and then the table has a border and the table has the ID jobs table then we have these rows and the first row is the jobs header row because it is for the header we style headers separately and then the rest of the rows are data rows and we are using TDS inside instead of pH which is what is used for the header and let's save that and let's reload the page and you can see here now we have the job title location salary posted on and we have all the information here that we had in our spreadsheet so this is roughly what our table looks like we do have borders but the borders are not very pretty so as an exercise I would encourage you to try adding more columns to the jobs table for example requirements and responsibilities try including paragraphs or lists within table cells and as you do so you might need to VAR vary the widths of different columns you might need to say that the requirements column should be at least 30% of the table's width and so on and that is something that you can add by following this tutorial so sometimes depending on the kind of data you have you may need to vary the widths and that is all something you can control using CSS or just using normal table attributes but let's talk about styling HTML tables styling HTML tables with CSS can greatly improve the visual appeal and the readability of a website so here for example is the careers website at stripe which is a payment processor company and you can see that they're also using a table but their table clearly looks a lot better than our table so let's try and make our table look a little better not exactly like this but we'll try and come close so here's what we're going to do we can use Simple CSS properties that we already know to make some changes to our table one we'll add borders around the table T and table cells using CSS not using the Border property or the Border attribute because CSS allows us to control other things like color then we will also make the table full width on the page and then we'll align the headers we'll left align the headers headers are Central by default we left align them and we'll also show a different background color for headers and we'll add alternate colors to the rows so here for example you can see that rows have alternate colors so we'll add this kind of an alternate color pattern to our table as well okay so let's try doing this step by step so the first thing I'm going to do is grab the ID jobs table and I'm going to style it by putting some content into the styles.css file and remember that the styles.css file is linked here using a link tag from the head tag of the page that is how you connect a CSS file to apply the Styles into an HTML file okay so let me open up styles.css and I am going to come down down here to let's see this region over here so I think we don't need this dot location this was there in the previous page but we don't have location with this class anymore so we don't need that let's put in the table let's select the jobs table so I'm selecting it by ID so I'm using the hash or pound character to select the jobs table by its ID jobs hyphen table and let me set its width first to 100% so what I wanted to do is take up the entire width of the parent div okay not the entire width of the screen but the entire width of the parent div you can see that we have this jobs we have this jobs div over here and this jobs div is set to have a Max width of 800 pixels and it has a margin of zero Auto that is what centers it on the page so there's this outer jobs div and inside it we have this jobs table which is now taking up the entire width of the parent okay so that is one way to specify widths apart from pixels you can specify it in percentages okay that's great what next well let us now add a border so let us remove the border from here first and let us first look at that how it looks okay this is what it looks like let's add a border here so border one pixel solid border there are various border Styles solid means you do not want any dashes or anything in the Border it's a complete continuous straight line and let's make it gray let's not make it black so that's the Border let's see okay so now we have a border for the table but apart from the table we also need to add a border for each cell so I'm just going to say jobs table or actually I'm just going to select the cells let's see so we have we have jobs header row so let's get the header row using jobs header row and and this time I'm using the dot selector from CSS not the hash selector because the hash selector is used to select by ID but the dot selector is used to select by class and this T this TR or this row here has the class jobs header row that is why we using the dot selector okay and I am going to give it a border as well border 1 PX solid three and oops this is not doing it so if you notice here the TR over here contains the class jobs header row but what we want is a border around each cell not around the entire row so that is where we have to select that th cell inside the TR of the class jobs header row and you can do it very simply by simply writing the tag that you want to select so now what we've done is we are saying select using the class jobs header row so that is going to select the row that is going to select this row and then we seeing inside the jobs header row class inside an element with the class jobs header row look for a th look for a table header cell and apply this border to it and now if I reload you can see that now our table headers have these borders okay I hope you can see this our table headers now have these borders let's also add borders to the table cells so I'm just going to to grab the data row class so jobs data row is the class for the row containing the jobs data and now we have the TD or the table cells over here which contain the actual data and I'm going to set border 1px solid gray okay and let's set that as well so now once again we have borders now but now these borders have been added using CSS which is some what nicer we have more control now the next thing I want to show you is how to get rid of these double borders you can see that we have these double borders over here so we have the salary posted on and then we have this border around it and then another outer border around the table the way we can do this and this is something that you just have to look up is using the Border collapse property okay so border collapse collapse you will almost always have to put this on on a table if you're just styling from uh styling on your own so I'm just going to put border collapse collapse and this is something that you could looked up you could have looked up how do I get rid of the double Border in a table and this is what you'll see okay so this is nice now I have the border collaps now the border is looking nice next let us maybe space things out a little bit the data is very close to the edges it would be nice if there was some space around it so here's what we can do we can go in in and we can put in put in a padding here so let me put in a padding of 8 pixels so remember the CSS Box model the padding is inside the Border okay let me add a padding of 8 pixels in the data as well so both of these will add space inside the border so you can see here inside the border of a cell we have added additional space if we had margin on the other hand that space would get added outside the Border okay so keep the CSS Box model in mind you can always just search search online CSS Box model whenever you are unsure how this works okay so we have the content then we have the padding uh then we have the border and then we have the margin outside it all right so this is looking pretty good let us now maybe add a background color to yeah let's add a background color to the header so background color let's see I am thinking of the color let's maybe just add the color Alice blue for now one of the named colors okay nice we have a nice background color for the header I hope you can see it it's very light um we are not going to use very strong color see what happens is if you use a proper strong color like this your text becomes unreadable that is why you always want to use very muted very light colors and we'll talk a lot about color guidelines later down the line okay this is looking good let's also add a back background color now for each of these alternate rows so we don't want to add a background color for every single row we want to add it for alternate rows and this can be done using again using a special property now this is the thing about CSS that you have to look these look up these special properties from time to time there's no way to remember them I just looked it up a few hours ago that's why I can partially remember so you can say TD and in the TD um I'm actually just going to look it up over here in the TD or actually not in the TD I want to add this for the header row so I want to get the rows from the table which are the nth child where n is odd okay and I'll just show you what this does first and then you will see yeah and then you will see exactly uh then we'll discuss how it works okay let me make that job stable yeah so here's what we've done we have said job table so select the job stable by ID inside the jobs table select a TR a row okay so we have the jobs table here with the ID jobs table inside it we want to select a row so each TR represents a row but we only want to select the rows which are the nth child okay where n is odd so all the odd rows which selects a full stack developer row and which selects the ml engineer row so all the odd rows get selected by putting this colon nth child odd and then we are giving them the background color of ghost white okay again if you see carefully here we have of course a color background color for the header that we have specified IED then we have this background white color for this first row which is row number two technically and then we have for the third row New Delhi India we have another background color okay uh it is very light but I hope you can see it and we've selected alternate rows using the nth child and how do you know this well you just have to look it up I just look it up every time so I don't worry about it too much okay great one last thing we want to do is maybe this is looking a bit odd that the headers are centered so let's Maybe put the headers on the left so I'm just going to say text align left okay now the data is now the headers are also left align all right so I think we've with that we've implemented everything that we set out to implement we added borders around the table we made the table full width we left align the headers we are showing a different background color for the headers we are using Alice blue and we are using alternate colors for the the rows using the nth child e using the nth child odd property okay so that is the CSS that we need to style our table not a lot it's about 10 12 lines but it look it makes a table look rather nice I would think okay great so that is how you style tables with CSS and you can also verify if I resize this that the table remains in the centered and it occupies the full width of the parent component okay so that's tables now I would encourage you to maybe also learn a little more about styling of the rows and columns so there is this tutorial on HTML table styling you can have these zebra stripes which is what we've implemented or you can also stripe you can also have colors for the different columns if you want again using nth child and you can also combine vertical and horizontal stripes so you have a lot of different ways in which you can combine of course you can do tables you can have tables Without Borders so one change for example we might make is we may not want the borders between the inner rows so we can come in here and we can say that for the TD for these data cells we don't want a border bottom we just want a border right okay and what that's going to do is that's going to remove this border bottom because we already have alternating colors and that's just going to keep this border on the right all right um yeah so that is how you style tables in in CSS so moving right along we'll also talk a little bit about merging rows and Columns of data in tables now you can use you can create all sorts of interesting tables in HTML what you can do is you can merge a bunch of data cells to look like a single cell either vertically or horizontally so what would be nice for us is to maybe try that with one of the columns here so let's do this let's get the location column and let's have the location column split into two columns City and Country okay so here's how I'm going to do it I'm going to have sub columns under location called City and Country so let's come back here into the table definition and we have this first row we have this first row and this first row now contains a location so that's great let me add a second header row so let's add TR and here again I'm going to add let me keep that class here as well okay now here I'm going to add a couple of headers one is called City and the second is called country all right and what does that do well as you might expect that add the second row of headers but now in this case the second row of headers says City and Country below job title and location that's not what we want what we want is to show to make this show up under location itself so here I'm going to use two special attributes the first is called call span or row span okay so we want the job title to actually span two rows so row span equals two and now what this does is the job title the job title header is now taking up two rows of data okay we we've simply added the property row span equal to two the attribute and that ensures that job title take takes up two rows of data whereas location salary posted on are still taking up only one row of data now we want the location to take up two columns so that City and Country show up under location so we can add a call span and we can say call span equal to 2 for location and let's reload that and now you see that the location cell takes up two columns so that's why the city and Country headers show up under location because each of them take up only one column each and now let's go ahead and finish this Heading by actually giving row span of two to salary and posted on as well so let's set row span equal to two for salary and let us set row span equal to two for posted on okay so now we have the job title which spans two columns then we have the location which spans two rows uh sorry now we have the job title which spans two rows then we have the location which spans two columns but only one row then we have the salary which spans two rows and then we have posted on which spans two rows however we have now also added the second row in which we have the city and Country both of which only span one row and one column and because we have these other values spanning two rows they automatically get adjusted under location okay so this can be complicated at first you're not going to get it just by watching so practice it try watching the video rewatching the video and typing it out step by step and it'll start to make a lot of sense okay now finally let's also split up the data right now you can see that the data is a bit messed up so let us split up the country and city for the data so I'm going to come into the first row here First Data row and add another column so now we have bangaluru India as the country and city and Country let's do that for New Delhi India as well so let's let's come in and add India okay that's good let's do this for San Francisco USA as well again let's extract out USA and put it in a separate table cell all right so now we have bangaluru India New Delhi India San Francisco USA now remote creates a problem for us because it's neither a city nor a country so how about we expand remote to take up two cells so let us simply come in here and let us sell call span equal to two for remote and let's reload that and now suddenly you can see that we have the job title and then we have the location and under location we have City and Country and then we have the salary and posted on and of course City and country are split properly except in the case where it is remote where it is just a single cell okay so this is how you create a more complex table by merging rows and columns using the row span and call span attributes now that we have this slightly more complex table I think it might be better to maybe bring these headings back into the center so I'm just going to go in here and I'm going to remove this text align left or I'm just going to put in text align center for the headings so under the jobs header Row for the th which is the header cells I'm going to Center the headings so I've centered the headings right here perfect and I think I'm also going to bring back the separators because here this line ends abrupt ly so I'm just going to come in here and change the border right for the TD or the data cell to border so that the Border shows up on all sides not just on the right okay so now this is our job opportunities table now it contains the job title it contains the location split by City And Country it contains the salary and it contains the posted on information as well okay so now our table is looking very nice we have simply added some row span and call span properties and we've added some updated some CSS to make it look something like this exactly what we are looking for now you can again check out this resource to experiment with the rose span and call span property to become familiar with CSS and HTML you have to practice you have to experiment you have to break things and only then you understand how things work okay so here's one exercise for you create a layout on paper which contains different merged cells and columns and then put in some sample data into that layout and try to replicate it using HTML and CSS tables the next thing that we're going to talk about is text Styles in CSS now that we've set up our table uh one thing that we also want to do is we want to improve the Aesthetics of this page and there are two parts to Aesthetics there is the text and then there is the colors as well right so let's talk about text Styles in CSS now CSS provides a wide range of text styling properties and they allow you to change the appearance of text in your web pages and these properties can be used to modify the font the size the color spacing and other visual aspects of your text specifically you can use external fonts within your HTML Pages using C CSS okay now why do you want why might you want to use external fonts there are some inbuilt fonts that most browsers come with but that differs from browser to browser and the selection is very small when you're working for a company the company may have its own design principles may have its own design guidelines may have its own fonts that it is using and you may want to incorporate those fonts into the website and that is what you use external fonts for so external fonts make your website stand out and look more unique compared to other websites on the internet and you can add external fonts to your website using the Google fonts web uh using the Google fonts tool okay so let's visit Google fonts and let's check out some fonts okay so looks like we have a bunch of fairly interesting fonts here and of course there are fonts in all kinds of languages now uh you can click on any one font for example I'm clicking on Roboto and then once you've clicked on a font let me just reset the state over here once you've clicked on a font you can then select some styles of a font so each font can have many styles so you can see here we have the thin font we have the thin italic font we have a bunch of different styles from thin to thick let me just switch to light mode yeah so we have a bunch of styles here and you can then select a bunch of styles so you can select which Styles you want to use in your website for example let us use the regular style let us use the regular italic style let us use the Bold style let us use the black style and let us use the medium style okay so I've selected a bunch of styles for the Roboto font this font is something that I want to use on my page and then there's a button here called view selected families on the top right and now you can simply copy this code over here so there's a bunch of code here that you can copy and paste into the head of your HTML page to use these fonts within your site okay so that's what we'll do in just a second but the basic idea is if you want to use external fonts first you choose a font from Google fonts then you add the font to your CSS using the link tag and we're going to look at that in just a second then you use the font within your CSS so let's say you've Incorporated the Roboto font now to actually use it on the page for a particular tag you can select that tag and within your CSS file you can simply specify the font family Roboto or whatever font you have downloaded or included on your site and that is how you can set fonts for various elements on the page okay so that is how you use external fonts you find something from Google fonts add it to your page and then just add some CSS properties now it is common practice to use one font family for all the head headings and use a different font family for all the body text and at Jovian we use the inter font so this is the inter font right here uh which looks pretty similar to Roboto but has some small differences so we use the inter font for headings and we use the Roboto font which we already looked at that for text within our web page so let's grab a bunch of styles from the inter font and the Roboto font and then include them on our web page okay so here is the inter font and on the inter font I'm going to select let's see I'm going to select the regular I'm going to select the medium I'm going to select semi bold bold all of these so those are all the styles that I selected from the inter font and from the Roboto font I have regular medium bold all right so now we have styles from Roboto and we have styles from inter and now I can go in here and copy all this so if You observe this link tag over here it contains information about which fonts we want to include in our page and then I can come back into my HTML page index.html come up into the head and before my CSS file I'm going to paste all these link tags okay so just to show you what that looks like it it looks like we have added a link tag called preconnect and two of these preconnect tags one goes to Google apis one goes to gstatic not something we need to worry about we just have to paste it in but here is the interesting thing we have this link tag which contains the link to Google fonts and it contains these font families inter and Roboto so we have these font families and these font families are included as a stylesheet okay and in in each of these font familyes various weights are also included so you can actually go in and edit this URL slightly in case you want to include different weights but I'm just going to save this now and at this point the fonts have been included on our page okay so if I reload the page you can see that nothing has happened yet because I've simply included the font right now the next thing I need to do is actually use this font on the page and that is something that we're going to do in the CSS file okay how do we do it well we need to add the font family for the body and then we also need to add the font family for the headers let's do that first I'm going to add the font family for the body so let me change this to font family Roboto okay so what we often do is we specify a font family for the body but in case this font was not loaded properly in case the request failed or something we also specify a backup as one of the default font families from that are already present in CSS so in this case the backup is Sans serif okay then I am going to just reload the page after saving this and you can see that there was a small change in the font so if I disable this and reload you can see that the font looks different and if I enable this and reload you can see that the font looks different and if I remove Roboto you can see that font looks slightly different it's a very slight different all of these fonts are very similar often but Roboto is what our design team has told us to use so that's what we going to use for our body okay great next let us set a different font inter for the headers so let's select H1 H2 H3 so you can also select multiple tags like this using commas so H1 to H6 we're going to apply this style to all of them and let us set font family enter and let us set the backup as sanserif okay and let's reload and now you can see that again there was a slight change if I show you so this is without the inter font family and this is with the inter font family okay slight changes but it looks on brand it looks closer to what we have Elsewhere on Jan all right so that is how you use external fonts now there are thousands of fonts available on the internet and you should try to pick simple leg fonts for a good user experience otherwise you might run into issues where people are not able to actually read what's on your site even though it looks pretty so check out this link to explore some other font pairings so a header and a body font pairing is often called uh is often so there are many header and body font pairings that people have created by looking at Google fonts for example Calbert and acumine so this is a good combination yeah calart calart and Acumen is a good font combination monster art and corer is a good font combination but obviously it looks very different from what we have then we have a bunch of these These are serif fonts these are not Sans serif uh and we have these more interesting fonts we have some fairly nice cursive looking fonts so depending on what you want you can use various fonts on your web page and I encourage you to experiment but also be conservative stick to some of the more standard types so that people can actually understand what's on your page now apart from the font of course there are many other text styles that CSS also offers and we're just going to run through them very quickly we're not going to cover everything necessarily but uh I encourage you to explore these and experiment with these as you are working through the lesson so the first is font family this is something that we've already looked at it select it sets the font family of the selected text we set a font family for the body and then we overr that font family so we set a font family for the headers as well and the specific setting for headers will override the setting from the body which is applied by default then we have a font size so we can actually go in into the body and we can change the default font size so let's say I set the font size to 24 pixels and reload the page you can see that all the fonts have become slightly bigger um I'm going to keep it to what it was earlier the default now there are many ways to spe specify sizes and we'll look at those as well then we have the font weight so we have a bunch of properties that we can use to set the weight or the thickness of the font so I can show you here in terms of the body so if I set font weight to 400 that's basically the regular font weight but I can set it to 600 and then it'll be slightly thicker and I think we included a bunch of other font weights as well let's see we also included 500 700 and 900 so let me select 700 okay that's about the same then let's select 900 that's really thick uh we also have 500 which is like a medium weight so that's a less less thick so depending on what you want to convey how prominent you want the text to be you can set a font weight and 400 is the default but you can set set a bunch of other font weights as well okay and we look at a few examples of font weight then then we have the text align property so the text align of course is used to do a center alignment left alignment right alignment so you could say for example text align we've already done this here we've done H1 text align Center we could have changed this to text align right and then the text would be right aligned we could set it to Center again and that would be centered again so alignment is just left right center there's also an alignment called justify which is often used in text so we you say text align justify what that does is you see this empty space at the end of the line it makes sure that all line there are no empty spaces at the end of a line and all the SPAC is distributed between the words so you can see now I set text line justify for the body and all the space is now added between the words this is not very readable so it's generally avoided unless you have to ensure that there is no space at the end of the text so I wouldn't do it but it's it's an option for you so you have left Aline Center align right align Justified all of that okay then you have the font style so the font style is used to maybe make things italic so I can say font style italic and you can now see that everything is a little italic everything on the page you can of course also apply it to just a specific section so I could just go into the description here and I could just apply the font style italic so that everything else on the page is Norm but this is italic which is just slanted to the side and there are a bunch of other font Styles as well that you can apply okay so I'll encourage you to check it out there are a bunch of different font Styles you can use what else well we have uh text transform so text transform can be used to automatically make the make all the text uppercase for example let's say we wanted all our headings to be all caps so we could of course type it in caps in HTML or we could could just set text transform uppercase and now all our headings would automatically be uppercase of course this is just for H1 but I could go in here and apply it to all the headings and now everything is uper case all right so that is text transform and finally we have this text decoration so text decoration is used to add a line whether you can have a underline overline or strike through so I could go into the headings and let's say I want my headings to be underlined so now the headings are underlined or maybe I want to line over my headings not sure why I might want that but it's possible sometimes for certain designs that might be useful and you could also have a line through it this can be useful if you have specific things within the text that you want to strike out so you could put a span around some text and then just put text decoration line through let me show you a quick example let's come in here into the description deson and let's say we want to change this to we want to strike out most highly so I could just put a span here and I could say style equals text decoration line through and I could close the span all right so now we've put this span and now you can see that the word highly is struck out as we might expect so that's how you can use this text decoration line through okay so that's just one of or these are just some of the properties there are many many more one other that you might use from time to time is the line height so you can see this text over here um if we want to make sure that maybe there is more space between the lines we could set a line height so we could come in here and we could set a line height and the line height is normally expressed as a single number which is a fraction of the point size so let's say we want the fraction of the font size so let's say we want the line height to be 1.5 times the normal font size so if I just do that you can see that now everything is a little more spaced out if I set it to two so then there's going to be almost a double distance between each line or I can just set it to one and then everything is going to be very close together that's probably not what we want something around 1.2 is the actual line height that is set by default so that's what you might want to stick with okay again all of these things are properties that will be defined in the design system or in the design mockup that that will be shared with you by a designer at your company but it's good to know what each of these do and you can experiment just to visually see what what looks good U you might have the question given so many properties so many values how do I decide what to pick well keep it simple just use as few properties as possible and then introduce properties one by one if if they make things better you don't have to add all these properties necessarily and of course most of the time you're going to be using some kind of a framework which will have all of these properties configured by default okay so as an exercise create a new web page with some text on it then look up available values for each of the above properties and then apply them to the text on your web page and understand the effect okay so the more you practice the more comfortable you'll get you don't have to remember this stuff but you have to know how it works so that when you need to you can look it up and there's also this reference that you can check out on styling text it contains everything that you'll need to know about text styling now one last thing I want to cover before we head into a Break um I mentioned to you that one way you can add sizes or lengths in CSS is by using pixels or another way you can do it is by using percentages so for example in index in our styles. CSS we have set the max width of the about section to8 800 pixels and that set sets the max width of this section but along with that we can also SE select a width in percentage so here we have 50% which is the width and that ensures that it takes up 50% of its parents width okay so the there are two kinds of length one is the absolute length which is expressed in pixels and then we have the relative length which is expressed in percentages but there are also many other absolute measures that you can use so you can also use inches which corresponds to visual inches on the screen you can also use centimeters millimeters points or pasas all of these are not very common so most of the time you'll only see people using pixels but just know that these are all also present in case you want to specify so let's say we want to set the font size of the body 2.5 in we could do that and of course that's very big we may not actually want that but that scales the size of the body okay um the other thing is in relative font sizing as well most of the time you will use percentages but when it comes to text specifically people often use these font sizes called em and r m and REM what do M and REM mean well M and REM are both units of measurement that are used to size elements based on the font size of either the parent div or the font size of the root element which is the body body tag okay so first I'll tell you about REM so here's what happens let's say I sent a set a font size for the body font size of 16 PX okay so now I've set the font size of 16 pixels for the body and now let's say I set for H1 I set the font size as 3 RM okay when I set the font size of three remm for H1 what I'm saying is relative to the root tag which is the body tag I want the font size of the header H1 to be 3x and that is what is specified by three RM and you can actually verify this you can go you can right click you can say inspect and that is going to open up this yeah so that is going to open up this box model for you and you can inspect this H1 and you can go into computed here and you can verify that its font size is 48 pixels so 16 3s is 48 right so just by specifying three Ram we have specified that the font size of the heading is supposed to be three times the font size of the body why would why would we want that well why not directly just set it to 48 PX well let's say we had a design overhaul and we wanted to change the body font size from 16 pixels to 20 pixels we want to make our text bigger so that people can read it more easily so if you changed it to 20 pixels and reload the page you can see that the text became bigger but the heading did not become bigger so now we've lost that balance which we had earlier established on the other hand if we had three Ram here every time we change the basic or yeah every time we change the basic uh body size that is going to yeah that is going to automatically scale the font size of the H1 as well okay so if I remove this you will notice that the H1 well it should have become bigger okay there might be something else that is affecting the H1 so I'm just going to put in important here that doesn't do it either maybe we have to set it at the root level yeah so I believe the root the root font size has to be set using star or just using maybe HTML or something so you set the or you set the base font size over here using star and then everything else is expressed as REM of that so the body font size is going to be one RM and then the H1 font size is going to be 3 R so if I reload that you can see that the body is 20 pixels and the H1 is 60 pixels but if I change the body font size to 16 PX now you can see that this is set this is now scrolled down to about 48 pix pixels okay so that is how you use RS uh to specify the font size in relation to the root tag of the entire page but of course you can also set it to 3M in which case if the H1 is outside another div and that div has a particular font size then we are simply going to use the font size which is three times that let me show you an example here so let's say I have this H1 inside a div and in the div we have set the font size to five pixels so now this H1 has the size 3 * 5 15 pixels because it is set to 3 m e m okay so m is relative to the pair font size REM is relative to the default font size of the entire page okay so that's that let us revert that change so now you might wonder that since we have all these different kinds of font sizes how exactly do we decide what font sizes you should be using how do you decide the font sizes for the different headers how do you decide the font sizes for paragraphs so I just want to share a few guidelines for you and this is from this Library called bootstrap which we look at in the future so while designing your website it's important to consider appropriate text sizes for optimal readability and usability and here are a couple of guidelines for the body text 16 pixels is a commonly used font size and this is the default in most browsers so you can just use that so in the body you can just come in and you if you just say font size 16 PX that is going to be the default font size you see nothing changes then for the headings you can use these font sizes so for the H1 you can use 2.5 Ram which is 2.5 times the font size of the body or 40 pixels for H2 you can use two RAM for H3 1.75 H4 1.5 H5 1.25 and H6 one RM okay and of course all these will also be bold so you'll have different font weights and then if you have maybe slightly smaller text on the page somewhere which is smaller than the body text then you can use point 875 RM or 14 pixels and any larger text you can make it 25% bigger so you can set that to about 1.25 RM right so this is a good rule of thumb that you can have nobody tells you this when you're learning HTML but it's very difficult to determine what font sizes you should have so just use this keep the screenshot with you and most of the time you'll be using a library so this won't be a problem but if you're working at a company you'll probably have a design guide which will specify something similar for for you as well okay so let's apply these font sizes so for the body we have the font size of 16 pixels for H1 to HED 6 I'm going to use the inter font and I'm going to use the font weight of 500 as well so font weight 500 so I just want to make it a little thinner I don't want it to be so thick or maybe 600 let's see yeah I think I like 600 so I'll keep 600 and then I also want to set the font sizes for for H1 to H6 so let us set the font sizes for H1 to H6 again I am just selecting the H1 tag opening this bracket putting in the putting in the property font size and then using REM so that if we change the base font size of the page all of this scales automatically so 2.5 to 1 RAM for H1 to H6 and that's good and one other thing I want to do is this particular section over here I want to make it a little bigger so that it's bigger than the rest of the text on the page so I'm going to come in here into the description section and I'm going to say font size 1.25 G and now this is a little bigger a little nicer all right compared to this table for instance or compared to the footer and of course I could go in here and I could make this smaller so I could come in here into the copyright and I could say font size 0.875 RM okay now it is slightly smaller than the rest of the textt all right so our page is already starting to look aesthetically a little nicer we have these font sizes the next thing we should probably fix is the colors we have too many colors on the page but that is how you set sizes for text that is how you style text in various using various properties and as an exercise you can try changing the base text size I believe you can just go in here and you can select the HTML tag and say font size 20 PX and I think this should make everything bigger you can just put body as one REM as well so yeah and if you come back make this smaller everything becomes smaller so that's how you can scale for font sizes up and down for the entire Page by just setting it up on the HTML tag and then using Rems everywhere or even m in some cases now let's talk about colors in CSS because this is where a lot of people face a a difficulty what color should I put why is my web page not looking good the single reason the number one reason why web pages often look ugly is because of poor choices of colors and contrast that's why we have a dedicated section and again this is not something that we that people go into in an introductory HTML and CSS lesson but we want to make sure that you build good visually appealing web pages that's why we are talking about color and colors colors play a crucial role in web design and colors also convey brand colors also convey balance colors also convey emotion in a lot of cases and there are many ways to incorporate colors into your web pages using CSS and the simplest is of course using the inbuilt color names so CSS provides 140 predefined color names that you can use directly for example you can set the color of a paragraph of text to Red so I could come in here and I could say color red and that would make all the text on the page red which is obviously not very nice but when you're starting out out you tend to pick some of these basic colors don't use them they look your they make your page look bad instead if you have to use named colors if you're not sure what colors to use pick some slightly muted colors slightly pastel or softer colors so you could use black or you could use gray most of the text on your page should be some version of black or maybe some shade of gray sometimes you may have a slight tinge of blue or a slight Ting of some other color but definitely not a very strong color of any kind for example this one caded blue is an interesting color so I could probably use this this could be a nice color to use okay still two different probably not that great so I should probably just use one of these grayish colors like dim gray so let me just come in and use dim gray and dim gr definitely looks somewhat nicer but it's still not better than the default anytime your color choice is not better than default it's probably a poor choice but you do have 140 plus choices of colors that you can pick and these are all named colors within CSS okay next you have colors that you can Define using the RGB system so RGB stands for the red green blue which are the primary colors of light so all the colors that you see around you all the colors that you see on the screen specifically are built using combinations of red green and blue so what you can do is there is this RGB Color Picker here I'm just going to search RGB Color Picker it's a build inbuilt Color Picker in Google and into this Color Picker you can a Color Picker you can select a value for red green and blue let me put 0 0 0 and press enter so when you have all of them set to zero red green and blue all set to zero then you get the color black which means you have no red no green no blue everything is black on the other hand let's say I start increasing red I increase red to 10 it starts to get slightly redder I increase red to maybe 40 it's getting more red I increase red to 50 okay more red I increase red to 100 now it's like a dark red I increase red to 200 now it's a very bright red 150 red of 150 would be something in between now it's a medium red and maybe somewhere right at 255 is the brightest red now you cannot have value is higher than 255 so because of how colors are represented internally in the computer memory you have to choose values from 0 to 255 Z is the darkest and 255 is the highest or brightest and of course that is the color for red you could do a similar thing with green so let me set red to zero let me set green to 50 and now you're getting a dark green let me set green to 100 and now you're getting a darker green slightly brighter green let me set green to 150 it's starting to look like light let me set green to 255 and now this is the brightest possible green that your computer screen can display similarly we have blue so this is the 50 blue this is the 100 blue this is the 1 150 blue and this is the 255 Blue okay 255 is the brightest zero is the darkest now of course you can combine so you know that red and green when combined become yellow so you can say 100 and 100 and that gives you a yellow ish color but it's still not completely yellow you have to go all the way to 255 and 255 to get a proper yellow color right and if you combine all three colors in equal quantity you get Shades of Gray so 255 255 255 is white and 0 0 0 is black but of course somewhere in between let's say 100 100 100 is going to be gray and you can make this gray lighter by going 150 150 150 and you can get all different shades of colors by combining various amounts of red various amounts of red green and blue for example I believe green and blue together give you the seon color and then red and blue together give you I don't know what it is let's see red and blue together give you the magenta color right so you have all these other colors that come together as well um of course you don't have to type out all these colors directly sometimes you have you can work the other way you can go and select a color here that seems nice okay maybe this color seems nice I'm going to use it I want to use it for some of the text not a great color for text but let me just try using it anyway then I can just select that using a Color Picker and you can just search Color Picker on Google and get this widget and now I can copy these red green and blue values now I can come back into my web page and let me just change the font font color for now so color RGB so we use the RGB function and then p paste the red green and blue value and that will just apply the color to that particular element whatever is selected right now I've selected the entire page that's why it's applying to the entire page and now I can modify this uh vs code actually gives you a Color Picker directly over here you can actually go in and select a value directly from here and that's going to modify it and you can then use that color on your page oh sorry you'll have to yeah you'll have to copy it and I believe then you can use that color on the page so there are ways to do this within us vs code itself but whatever red green blue color combination you have you can use that and for now let's just set the default size to some or the default color to a gray not exactly black let's set it to maybe 210 210 and 210 maybe a slight tange of blue maybe set that to 230 okay that's actually very light so maybe let let's make it very light so maybe 30 30 and maybe 40 over here yeah and that is looking actually not bad right so zero is dark 255 is bright and combined red green and blue okay so that is the RGB system you can use the RGB function you can use it for background colors let's say I want to use it not for the color of the page but for the background color background color of 30 40 40 that's very dark maybe let's add it to 230 230 240 yeah that's a pair background but generally speaking even backgrounds it's okay to just keep them completely white or a very very light gay or very very light gray okay um so that is the color then there is another way to represent colors which is using the heximal color codes okay so the hexadecimal is a textual representation of RGB but instead of numbers you use numbers and characters now this is represented using the hexadecimal number system I will not get into it here but the idea here is an hexadecimal color is represented using three uh represented using six characters and each character could have a to F or 0 to9 so 0 to 9 or a to F and the first two characters represent red this is in fact the hexadecimal notation for the red value and then the next two characters represent green and the next two characters represent blue okay so often what you can do is you can if you have a RGB color in mind let's say the color I want to use in RGB is 230 230 240 I can put that into a Color Picker and I can get that hexad deiml code from the Color Picker and I can just copy that and instead of typing out the entire RGB I can just say color is Hash Hash includes ex decimal and then type out the color here okay and that will just change the color on the page it's a very bad color but you get the idea okay so RGB and hex are equivalent it's just that hexad decimal is more commonly used because it's easier to copy paste and use across different platforms so often you will find colors in HEX so when somebody says get the hex code or get the color code this is what they're referring to and you can always get hex codes online in fact a lot of color Pickers also give you hex codes instead of RGB let's say I go in here and I go select a very dark color and I click this yeah I just click that and that is going to get the RGB color for me oh sorry that's going to get get the hex code of the page for me okay so now I have applied the hex color to it as such now of course as you might expect 0 0 0000 0 is white oh sorry is black all zeros is zero uh very dark red very dark blue very dark green is black and because each value goes from 0 to 9 and then a to F so f f f f FF that is white okay now everything has gone white and of course if you if I put 0 0 0 0 here that would be red and so on so first two characters are red from 0 0 to FF and next two characters are green next two characters are blue okay let's get rid of that so that is the hexad diml color code and you can use that to set background colors you can use that to select text color all of that and you can use the Google Color Picker to convert RGB colors into hexad decimal or vice versa you can for example copy this hexadecimal color code and come into the Google Color Picker and paste it here and that will give you the RGB code in case you need it all right so that's the hex another color scheme is something called the rgba color scheme which is similar to RGB you have red green blue but then you also have transparency so you can for example make the background of a div or you can make the text um on on a particular page slightly transparent so that the color behind it shows through okay let me show you an example let us set the background color of the page to let's say red going to look very ugly but let's set it here no problem then let us set the color of the text to 0 0 0 or maybe just 20 20 20 which is a very dark gray okay it looks very similar it's still looking very black almost close to black but now let us come in and change this to RGB a and let us set the opacity or transparency to 0.5 so one is I Believe full opacity and zero is completely transparent in fact let's put 0. five first and you can see that you can see some of the red behind you can see some of the red behind the text If This Were green you would be able to see some of the green behind the text so if I set the transparency to zero or the opacity to zero now you can't see the text at all if I set the opacity to one you can't see any of the background color at all through the text but somewhere around. 4 for instance you will see that we are able to see some of the background coming through okay so you can also use this rgba and similar to rgba there is also the hex code where you have red green blue and then two more characters to represent the opacity level as well okay not very commonly used but this is also something that you can do so that is about colors in HTML and as you might have seen all the color choices that we making by default look pretty ugly so we'll talk about how to come up with good colors but now that you know how to create a color these are all the different ways in which you can use colors so you can use color to set the color of the text which is what we've been doing right now you can use background color to set the background color of an element we've done that as well you can set the Border color and then you can use box Shadow and text Shadow so box Shadow is used to create a shadow around a box or a div and text Shadow is used to add Shadow for text okay so you can look up the properties specifically and see how these are set but I'll just show you an example of Border color let's say we can come here and we can set for the team image we can set the Border width or we can just set the border to five pixels solid and let's pick a color deep blue or something like that dark blue yeah now you can see that there is this dark blue border and I can in fact just change the Border color separately so I can say border color RGB and let's say 20 20 20 and that gives it a blackish or a dark gray border and I can also set these border properties separately so I can set border width to 1 PX and get rid of this and I can say border style as solid this is a solid border let's make that 5px this is a solid border I can also have a dashed border you can see that we can have a dashed border like this not very common but you can do it if you if you want and you can also set maybe the width of different borders so you can say border left width is 5 pixels that you have this border only on the left and everywhere else you just have a one pixel border okay you have all these ways in which you can specify borders and you can specify the styles of borders and colors of borders as well so again experiment with colors a little bit and generally speaking picking good colors is really hard and if you're picking at random just looking at some colors and try to use it that is you're going to have a tough time so here are some guidelines for picking good colors the first is to use a color palette so use color palettes to ensure consistency throughout your design and a color palette is a set of colors that go well together so color palette will typically have a primary color and some shades of the primary color which are often used either for text or for maybe buttons or for um backgrounds then you will have a secondary color which is also used sometimes for buttons you may not have a secondary color at all and then finally you should have a maybe a few Shades of Gray that you're going to use as backgrounds or as text colors then one other thing to keep in mind is contrast you want to make sure that the text is legible which means that the text should have should have a high contrast compared to the background okay if generally speaking you're not able to read the text then that's a bad color choice so light text on dark background or dark text on light background works well then the other thing is simplicity avoid using Too Many Colors just because there are all these colors doesn't mean you have to use them just use as I said a color palette with a primary color a few Shades and a secondary color a few Shades even there stick to one or two shades all the text on your page should more or less have the same color and ideally should just be Shades of Gray maybe with a slight tting of blue or slight tting of green depending on the theme of your website and finally um know that sometimes there are issues like some people have color blindness some people do not have have a perfect vision so there might be color vision deficiencies that your users might have and there you can use tools like color contrast Checker so you can just search online for color contrast Checker and you can paste some HTML code here or you can like set the foreground color background color and you can check what the contrast ratio is and it'll tell you whether this is going to be readable for for somebody who has color vision issues or general reading issues all right so just keep those things in mind now generally most companies have a design system with predefined sets of colors for various parts of the application and for now you can just use this one color palette so what I would suggest is use this color palette tailent color.com it's linked in the notebook page and from this color palette for whatever website you're working on pick a primary color in my case I tend to almost always go with the blue and pick a secondary color the primary color is what is going to be used in most places and then the secondary color is going to be used in some other places where you need a second color and then maybe just use the different grays for showing text okay so that is what I would suggest pick a primary color pick a secondary color and pick a bunch of Grays don't use the predefined CSS colors they don't go well together don't use random choices of colors uh that you find come up with or try or you're trying to figure out using the RGB Color Picker that generally doesn't work use a color scheme okay so based on the color based on these I would also encourage you to go through some example sites here these are some examples of bad color choices I mean this one's not too bad but it's still too bright I would say uh these are all all completely fairly bad color choices this is you used to see a lot of that a lot of this earlier in the internet era and these are some choices of good color so one thing you can do for your website is just pick color combination so you can see that there's a prime primary color which seems to be orange and orange and yellow so some shades of orange and yellow and the secondary color here seems to be this blue and here again there is this primary color of yellow for Lego and there there's no second there's a bluish secondary color that is used in some places here the blue is the primary color and here there's the seems there's this I don't know what this color is called but this like light pink color probably again there's this primary color secondary and then maybe like a black secondary color uh sometimes you can use images and matching colors with images so you have the green color shades of green and then you have a secondary color which is the red that's great a primary color this color and then the secondary is just black here again here we have this gradient which is basically just shades of the primary color and then the secondary color also just seems to be a shade or maybe these are the two colors primary and secondary and again here we have gray and we have red so yeah look at examples look at at your favorite sites and just copy what they do and use a color palette of Tailwind color.com while you're designing your website okay specifically for text I want to share a few guidelines normally text should be almost always some shade of gray some shade of black uh you can have a slight tinge of blue or a slight tinge of green or red depending on your themes uh but here's a good guideline your headings can be 90% black or just 22 2222 would be the color hex color your body text can be 75% black or 4444 and any secondary text that is not important can be 60% black which is 6666 and disabled text should be 40% black so it's a bit confusing because black is zero so 90% black is going to be very close to zero and 40% black or 60% white is going to be very close to FFF right but I hope you get the idea hex colors can be a bit confusing to wrap your head around but as you practice more you'll get used to it okay closer to zero is dark uh away from zero is is light so 90% black is very close to zero let's do that let's come in and let's set these colors let us first come in into our body and let us set these let's set the font size and the color so the color we're going to set to 4444 or 75% black so let's come in here to the body we've already set the font size to one ram I think that should work we have just added the 4444 color and our body text is slightly gray but it still looks fine but I think the headings can be made slightly darker so let's come into the headings and for each of the headings let us set the font weight to 500 and font color to 222 so I think I'm going with 600 here I like 600 it's looking good for me so I'm just going to set the color to 22 and now our headings are slightly darker so that's fine then what else well we have this jobs table on this jobs table I want to make these titles slightly darker because they are more important more prominent so I'm just going to come in into the jobs table and into the row header I'm going to add the color of 22 22 22 which is the same color I'm using for the headers some now these are a little darker so that's great then okay now these backgrounds right so remember I said we don't want to use the named colors we want to pick from a theme so generally for uh for backgrounds of tables you can use maybe the primary color and a very light version of the primary color so let's see I'm going to go in here into Tailwind color palette and I'm going to pick the lightest version of indigo for my Row background so it is simply Indigo 50 or let me let me pick blue 50 just to be very safe and when I click on it it copies the hex code so I can come in here into the nth child and I can paste this color and now I have this very light blue that is behind the uh behind some of the rows as a background color and for this let me pick maybe blue 100 or I could also pick the secondary color but for now let me just stick with Brew 100 and I'm going to set this on the header row I'm going to select the background color not as Alice blue but as this darker slightly darker blue so you can see now that it looks slightly nicer because these two are shades of the same color essentially so this is a slightly darker blue this is a slightly lighter blue I could also maybe experiment with blue 200 if I'm not happy with the contrast but that's the most I would go I would just go up and down within the same um within the same shade and maybe let me come in here and let us also set the background for this so you have this footer here generally for backgrounds or for body backgrounds you just want to use gray and you just want to use the lightest of Grays so I have a blue gray here which is slightly bluish gray so let me just copy the blue gray and let me come into footer and set the background instead of ghost white let me set it to blue gray and now that looks slightly nicer or I could even just have used a simple gray as it is okay fa fa fa and that looks fine finally for the link on this page I might want to use the blue color so I can just go in and I can pick a um the 500 blue for links on the page so let me pick the a tag and let me say color 500 U sorry that color so links on the page will show up like this but now you can see that as I hover over a particular link the color doesn't change so this is where you can actually use a something called a pseudo class or a hover state if you want to change how a link looks on hovering you can say colon hover and now you can put in a different color let me make it 700 so let us check set the color to 700 over here for the h state so now when I hover over a link I get a different color okay and there are various hover States we'll talk about them in a future lesson or various pseudo classes that you can apply but basically whenever you're styling links you should specify a normal color and you should specify a hover color and sometimes this hover color um hover is used when you use the mouse but when you tap using the keyboard um you can use I think you can use Focus or active or something like that so when you are using the keyboard then the focus color gets applied so both hover and focus should generally be set together okay so that is about setting colors so now our page is looking rather nice because I'm using a consistent color scheme that's good what else well we have a gray here so the gray for the copyright I'm again going to just grab one of the Grays from yeah maybe gray 400 or yeah gray 400 should be good enough and let me just paste that or maybe gray 500 should be good so let me just paste gray 500 I think I was yeah that's gr 500 I think I'm happy with that okay so our page is looking nice we have picked a nice set of colors so let's continue now and let us talk about forms in HTML now HTML forms are an essential part of creating Dynamic web pages because they allow users to input and submit data to a web server which can then be processed and stored in fact most web applications that you see on the internet are built using forms and forms are going to become increasingly important as we go further into the course and in the program now the form is created a form in HTML is uh cre and no doubt you've used several forms so you know what forms are this is what they look like you can put in some information forms are created using the form tag so you start a form tag and then you put a form tag at the end and you put the entire inputs Etc inside it you can then use three types of tags you can use the input tag to create these text boxes or other various types of inputs you can use the select tag to create dropdowns you can use the text area tag to create big text boxes where people can enter full paragraphs of text and there are various types of input Fields like text you can have password input fields which is what you do when you log to a website you can have email input fields that automatically validate that what you're entering is an email you can have radio buttons you can have check boxes and then of course drop downs Etc as well with each input box often you also have a label so you have these labels that are associated with these form input tags and these these labels are important because they allow not just the person who is using it normally but people who are let's say who have a poor vision and are using a screen reader labels are used by the screen readers to tell people what to enter into specific form Fields labels are also used by search engines to determine what the structure of your form is so there are many ways in which labels are important so don't ignore labels when you're building a form and finally most forms have a button at the end sometimes multiple buttons to reset or clear the data uh but you almost certainly have a submit button or a save button or a send button that is going to actually trigger a form submission which is to grab all the data from the form and send it to some server some web server and we send the data using the action and the method attributes of a form so typically for a form tag you have an action and then you have a method now of course in today's lesson we don't actually have a web server we are just just building static HTML Pages a server is something that can take some request do some processing on it and return a response we don't have that today so we're going to be using a third party service to collect these form responses but over time we're going to learn how to use um our own inbuilt servers okay but this is what a form looks like you have a form here and then inside the form you can have labels and inputs I've put these labels and inputs inside divs because otherwise you will find that everything just lines up on a single line which may not look nice so let's create a form step by step and in fact we're going to create a form uh so one thing you can do is you can just copy this code and you can just paste it into the web page and see what that looks like so let me just show you first and then we are going to create the form step by step again let me create a div here first let me call that application okay and let me then put in an hed2 here and call it submit your application okay so now we have the submit your application section let me then put in this form here so I'll just paste this form and by the way if you just want to include a comment something that is not actually displayed on the page you can do that using this comment operator so started with the open tag and then start Ed with an exclamation followed by a hyphen hyphen and you can just put put some text here so some sample form remove later so this is a way for you to just add some note for yourself this is not going to be read by the browser this is not going to be displayed on the page but this is just a note that you can leave for yourself you can just say too sample form remove later okay but now I've put in this form so this form has an action this form has a pro a method these are not things that we're going to use right now then it has a div and in this div we have a label so we have the label name and then we have an input okay and this is what it looks like so we have name and we have this empty input then we have email and then we again have an input then we have message then we have an input so we' basically created a very simple form which contains a label and contains these input fields and a couple of things I want to point out with regards to the structure of the form let's make that a little bigger is that normally for every input you have to specify a type okay so here we have specified the type text so here you can enter any form of text instead if you had specified the type number for instance then you would not be able to enter normal text here you would have to enter numbers okay so that's one thing I'll just zoom in a little bit here so that you can see that I can't enter text I have to enter number numbers and you have very various other kind kinds of inputs as well you have the date input now in this case it's going to open up a date picker so that's nice but I'm just going to revert this to text for now because it is for name then another thing that you often have to do is to specify an ID for each input so what is a common practice is to specify an ID for an input and then specify the in the label which input it is an it is a label for okay because the label may not of may not necessarily always be next to the input itself sometimes the label might be in a different div the input might be in a different div because of the structure of the page so you specify an ID and then you specify that the label is for this ID using the for attribute your form is going to work perfectly fine without this you can see that the form still works but it's a good practice to specify an ID for the input and specify a for for attribute for the label okay so keep that in mind ID for the input and the ID of course should be unique and the for attribute um on the label which which points to the ID of the input for which this is a label finally I know I know it can get a bit confusing right now finally when you also need to have a name attribute for every input okay now this input itself is also called name that's a different thing but here is another input called email and it has the name email or I could just uh yeah or here there is a or I could just yeah I could just call this something else mail ID for example now what what is the value of the name attribute so the name attribute decides that when you hit the submit button and some data is getting picked up from the form what is going to be the name of each field okay so if let's say we wanted to send the data to the server in this format so let's say we want to send the data to the server with a full name property and an email address property so when we click submit the server is going to receive some form data and in that form data it's going to have a property called full name whose value is going to be whatever you have entered here similarly uh the server is going to receive some form data and in that form data there's going to be a property called email address and that email address is going to contain whatever email address has been put in here okay so the name property is useful on the server once the form is submitted we'll see that in action when we actually make a form submission and finally if a form is if a form field is required which means it has to be filled out without it submission cannot be made then you can put in the required attribute here and it doesn't have any value you just set required and if it is required then as long as you fill it you you'll see that you'll not be able to submit so it's it just says please fill in this field when you try to submit the form okay so that is where you have the required property so those are some of the properties that you can specify for a form okay so now we're going to build a form step by step for our application remember we had this application form here which has name email phone number position resume and cover letter so we're going to build that step by step and there are various form input types so I've just listed a few here that you can browse you have the text input obviously we can create checkboxes so if you just change the type here to checkbox that is going to become a checkbox then we have radio buttons so checkboxes are often used when you have like you want to show multiple checkboxes and multiple of those can be selected so that's when you show a checkbox and the radio input is often used when you want to only allow selecting a single option from a list of options so again you should experiment with this a little bit it's all about getting some practice then to create a do drop down we use the select tag we're going to look at an example if you you want to allow the user to enter a larger amount of text then you have to use a text area okay now one key thing I want to specify about text area in particular is that all inputs are generally selfclosing tags so the input that you see here this does not require a closing tag it is self closing but a text area is not selfclosing so whenever you have a text area you have to add the closing text area tag as well it's just how HTML has been defined so make sure that whenever you have an input it you you don't necessar need a closing tag you can put one if you want but you don't need one and for text area normally you do need a closing tag so that's something to keep in mind then you can use a date input again just change the type here to date and that's going to become a date you can use a password input in case you want to build a login form where you don't want to show what is being typed um I'll just quickly show you what that looks like let me reload this page you can see now that whatever I'm typing is not visible here so that's the password input and then of course you can have email input so this is going to validate that the data is being entered is an email before submission and then you can have a number input and that is going to make a numeric input field and you can also specify attributes like minimum and maximum and also the step like let's say you want it to be multiples of two or something you can specify that as well that is again achieved using the input type now there are several other input tags that you can use so you can check out various other input types here there are lots of these you can have an image input you can have a color input you can have a range input so you can have a slider um you can have a search input you can have a sub uh submit is of course the input that is used to create a submit button uh but yeah there are a bunch of different input types and now let us actually build out this application form okay so I'm going to take this all away for now and let's start building the application form so I'm going to just first create a form nothing and I'm going to give it an ID let's call it application form and now let us start by creating a div first again we're putting things in a div so that they just show up nicely and let us now create a single input of type text and let's give it the ID name and let us give it the name full name and let us make it required okay and let's reload the page now we have this input box that's fine let us put a label for this input and in the label let us put the value full name okay so now we have full name and then we have this box let us maybe also add this a small empty line so I'm using the BR tag here it is a self closing tag that is used to add a new line um it's not used a lot anymore but in forms if you just want to add a new line after a label you can quickly add a br tag or you can wrap the label in a div so now this now you can see that the input box comes below the label that's one thing and let us also set the for property that this is for the input with the ID name okay so that's looking good the form is looking good let us also style it a little bit so that it looks slightly nice sir so I'm just going to come in here and I am going to first select this application so right now this application div is always at the very left so I just want to make maybe Center it a little bit so I'm just going to come in here and Center it so let's see yeah let me just add it here so we have this application div with the ID application let me give it the same Max width of 800 PX and let me give it a margin of 0 Auto so remember Auto margin on left and right automatically centers the div and let me give it a padding of 0 and 8 pixels so that it's not sticking to the end so now you can see here that there's a nice padding and as I expand it you can see that it remains centered so that's good okay so far so good then maybe let's also improve the input a little bit so for the input uh actually for the label so first let me go in into application form application form and let me select the label and for the label let me use Font weight 600 so just make the label slightly bigger or slightly um slightly bigger in size and then let me come in here let me say application form input and let me add a padding here as I type here you can see that it's very small I don't have a lot of space around let me add a padding of 8px so now there is it's it's slightly bigger let me make that 4 PX I think 4 PX should be fine yeah so it's slightly bigger let me also increase the font size so that the text that I'm entering is of a bigger size 1.25 RM remember the base font size is 16 so 1.25 of that is 20 okay so now this is looking a little better and let me also add a margin top here so that it's not sticking to the label so margin top of 4 PX yeah so this is looking definitely looking a little nicer and then I can put in the words Akash and is here and it's starting to look nice okay so that was the input for the full name let's then add email and we'll add a couple more and then we'll start Maybe copy pasting some in the interest of time so again label for I'm going to call the email email and I'm going to call this email as well the text that I'm going to put inside the label input type equals email and ID is email as well and name equals let's see email address and this is also required okay so now we have email to and once again let's add this BR so that this comes on the next line and I can see that this email is very close to the previous form so I'm just going to come in here and I'm going to say label margin 8px or actually let me just set the margin top to 8px that isn't doing much well let's just set the margin on the div okay so what's happening is that the label is an inline element just like span so you cannot set a margin for it let's set the margin for the div itself so application form div let us set a margin of 8px okay so now our application form we could even make this 16 if you want to make it just slightly more spread out now our application form is spread out a little better I think one other thing that I can do here is in the input I can just add a border radius of 5px so it's just slightly more rounded and Border color of gray or I could use or I could just set border 1 PX solid gray and now it's looking slightly nicer okay so we're just slightly making these a little nicer um let's add maybe what next so we wanted to have the phone number so let's grab the phone number here this is the class for phone number and yeah I think we can add this form group class to select the divs more easily I'm just adding the class form group for the div so that I don't need to select it like this I can simply say dot form group yeah okay so now we have the phone number and you can see here in phone number we've actually added a placeholder so we've added this thing called a placeholder what it does is it fills out an empty value that goes away when you try to fill something inside it okay so I am going to come in here and add a placeholder for the name as well so placeholder equals let's say John do and I'm going to come in here and add a placeholder attribute for the email as well let's say John or J do atex example.com okay so these are all various attributes that you have to specify and now we can see that we have this placeholder so this is looking nice and let's see maybe make this padding a little bigger maybe eight pixels look even nicer yep okay what next next we have the date of birth which is a date let me add that in here as well so now we are adding the date of birth okay now date of birth automatically gives us this nice date selector that's nice we can also specify Max and Min property for date of births in case you need that what next so next we have this position applied for which is a dropdown so here's how we create a dropdown so we go in here and let's see yeah we go in here and let us create an input let us create a label and let's say position applied for and let us give it for equal to position and let's add a br here okay so now we've just added the label and let us also give it the class form group and maybe I don't need a margin all around maybe I can have a zero margin at the I can have margin just on the top and bottom and the left and right margin can just be zero okay so we have the label position form group then we create the select okay so we put select and inside select we put options or option so what are the options we have we have a frontend developer we have a full stack developer we have let's see uh data scientist and we have what else we have a ml engineer right so these are the options now we have this nice select which has these options of course we may need to style it as well so again one trick I want to show you here is I want to apply these not just for input but I also want to apply these for select so I'm just going to add comma select and that automatically gives me this okay now I want to I want to tell you a few things you need to have in select you need to of course have the ID so that the position this is not compulsory but it's good to have so that the label is specified properly then of course you need to give it a name so then in the name I'm just going to say position applied that is what is going to be sent to the server then what else is it required yeah I want it to be required what else do we have here yeah so for each option you need to specify a value so what ends up happening is what you show on the screen and what is sent to the server may be two different things so for each option you have to specify a value so I'm just going to specify the value front end Dev of front end here and I'm going to specify the value backend or full stack and I'm going to specify the value data scientist and I'm going to specify the value ml engineer okay so this is just to tell you that what you show to the user and what you actually send to the server can be two different different things okay when the form is submitted the server is going to receive this value but the user is going to see this value in the drop down one last thing that is often done is you have an option with an empty value and that just contains an instruction which is Select position right something like that so the idea here is that by default you don't want to select any position otherwise that default position can get picked automatically you want the user to pick a position specifically and that is why you have the select position uh this is like the placeholder option in some sense and that is often given the empty value okay so that's the value then we have file inputs so file input simply has input type equals file and we are using file input for resume and you can also specify what kinds of files it can accept like PDF Doc and docx so let me just come in here let me put in the file input here as well so we have this file input so that's great and then we have this form group for the cover letter so for the cover letter we are using this text area component so in instead of input we are using text area and again you specify the ID you specify a name you can specify the number of rows that you want in the text area by default that can be increased by the user you can specify whether it's required and you can specify a placeholder as well but just know that you have to have a closing tag for the text area Okay so let's add the text area here as well let us come in here add the text area for the cover letter and now here we are asking the user to enter a cover letter as well again I'm going to come in here and I'm going to apply these Styles not just to input but also to text area and that way my text area is going to have a better colelection I might want to make the text area full BD so I can say form group text area width 100% and this way my text area is going to take up the whole width or at least let me set it to like about 80% let's say Okay so the text area is slightly bigger and you may also have to specify your fonts or font family for the text area in this case clearly it is picking up some random font family so you also specify font family let me specify Roboto because it is just some normal body text and Sans serif okay and now we have specified our text area as well okay last couple of things one is a checkbox so we're going to add a checkbox called I agree to the terms and conditions and all we need to do here is just specified type checkbox for the input and it's going to show a checkbox okay so now often for a checkbox the checkbox is created slightly differently because a checkbox you may require to actually show the input uh you may require to show the label next to the checkbox so often in the checkbox what you do is you put the input inside the label okay and what that does is if you click on the text as well that also takes the checkbox so that's good now one thing we might want to do is for the input checkbox I might want to make it a little bigger so I can do that again I'm going to show you another CSS trick here not something you need to know right now but I can say form group input and I can say only for the type checkbox so now I'm selecting in the class form group I'm selecting an input tag and I can say only those input text which have the type attribute set to checkbox and for them I want to use the width to be 16 pixels and the height also to be 16 pixels and that is just going to make the checkbox slightly bigger as you can see here okay that makes the checkbox bigger and finally we have the submit button so we just have a div form group input type submit value equals submit the value is going to be whatever you want to show on the actual button so you could say submit application okay like that and that is how you create a form so I'm just going to zoom out a little bit I'm going to go full um I'm just going to go to the normal size so now you have a banner now you have this description now you have job opportunities and then you have submit your application full name email phone date of birth Etc and you can fill out all the and then click submit application of course these are all required Fields so they will have to be filled in and if you want we can make the cover letter optional so let's do that so that we can submit without the cover letter for the purpose of testing let's bring this back here okay and let us remove required from here so that this is no longer required okay and now we should be able to submit an application but uh let's also add some styles for the submit button I think a nice blue color would be good to have so again I'm going to come in into Styles I am going to select form group input type equals submit and I am going to set background color to Blue and I'm going to pick a blue from my color scheme so maybe I'm going to pick blue 500 and I'm going to set that as a background color so that looks nice I may have to make the text color white so color white I can make the font weight five let's say 600 so the font weight is bigger so maybe 500 might do the job and I can maybe increase the padding 8 PX maybe 16 PX make it a little bigger yeah yep okay so you can specify some things I think the padding is not getting specified here but you can uh specify it it's U just a matter of specificity I guess um but now my submit application button is actually looking nice and if I also want here's another property that you'll often use cursor pointer and what can what this does is this converts your cursor into a hand symbol when you have the submit uh when you hover over the button and you can also change the hover style you can change the color of the button when you hover over it so you can do all sorts of things and this is something that you should look up and then you should attempt to do but yeah at this page at this point you click submit application and that is going to uh submit the application so let's try that so we say Akash a b.com some number I'm going to pick a date of birth I'm going to select a position I'm going to select a file so I have a resume I'm going to add a cover letter I'm going to submit okay it doesn't do anything because we've not configured the form to do anything yet okay so what we need to do is we need to send this data somewhere normally this data is sent to a server but we don't have a server right now to process this data that is where we are going to use an online platform called form bold okay this is not something that you would do in the real world you can actually if you're building a personal website you can use form um what this does is this allows you to just provide an action for your forms that you are putting into your simple website static pages and it is then going to capture those responses and also send it to you over email so how about I just log in here into form bold and create a new form let's call it Jovian application form okay and any new responses that are filled into the form is going are going to be sent to this email and I'm going to create this form so you may have to verify your email to actually create the form but I'll let you figure that out okay and now let's open this form so let's go to the form settings and in the form settings you will see this integration option so let's click on integration and here it's going to give this Endo so just copy this Endo okay this is where we want to send our form data so copy that and come back here into the form and what we can do is we can say action equals this link I'm just going to put it all here so that you can see clearly action equals this link okay and we also have to specify a method and you can see how you can see an example of how how this form should be used so is this link and method is post so method equals post and let's just save that and since we want an HTML form with a file upload so I'm just going to select this option with a file upload so I think we also need to put in this ink type multiart form data okay now don't worry too much about what these mean whenever you're using a form you'll have to set these sometimes these will be set by your own server so we are going to look revisit forms in a lot of detail later but for now we just using a third party service that can capture these form responses for us when we hit the submit button okay let me save that and now I can come back here and I can reload the page and I can start filling something so Akash a b.com and put in a number put in a date here put in a full stack developer choose a file and put in some cover letter here agree to the terms and conditions and click submit now when we click submit it is going to send all the data and each data is going to be assoc each each piece of data picked up is going to be associated with the name property that we have specified the name attribute and it is going to be sent into the form okay so I click submit application and you can see that it has sent the data to this form and this form bold the service that we're using is asking us to maybe just verify traffic lights to prevent spam and once it checks that the form is submitted okay now I can come back here on the form bold page and I can go into the submissions you can see that one submission was obtained and these were the values that were filled in full name Akash cover letter empty and the file is not showing up because there's a way to view files maybe in some other way but they've accepted the terms so if a checkbox is ticked it is marked as on and then the form and then the date of birth all of it is present and the date at which this form response was created was also captured by Form T form bold but that is something that you can pick uh on your own server okay um so the idea is not to tell you that you have to use form bold for all your forms the idea is to tell you that every form requires an action to be specified and a method so method and action is something we'll talk about in a lot of detail later so don't get confused right now but the form data when is collected and sent to the server which processes it in whatever way it wants it can process it and send an email it can process it and maybe make a database entry or it can process it in just show you on the screen like that however it is okay but this is how you create HTML forms by creating these um by picking these tags and by using the input and the label tags and then styling them as required so to deploy this web page once again we can go to static. apppp and it is a simple application that a simple web application that can be used to Simply upload a zip file I'm going to come back here I am going to Simply zip up this folder my second web page let me just zip it compress this was a copy let me let me create a zip file compress okay a zip file has been created now I'm going to upload it I'm going to select this ZIP file and I am going to just pick whatever domain name it's giving me I'm going to put in my email so I'm just creating a new account here so that's where I'm putting in this plus 10 to create a new account um Sydney Jovian let me create a password let me accept the terms and let's continue and it should ask it should upload the Cs the file so of course this contains our index.html it also contains the team and the banner files and it contains maybe a couple of other the styles. CSS file and I need to verify my email so I'm just going to go in into email and verify my email let's verify my email address and now what we have done is we have taken the code that we have written which contained the HTML file the CSS file and a couple of images we've put that in a CSS put that in a zip file and we've uploaded that zip file to static. apppp and that zip file should now get deployed as a website at careful b. static. apppp we have the website deployed we have this header over here do something great we have some information about Jovian now it is using the colors and the fonts that we want on Jovian we have these nice links that are colored using our theme our primary color we have these job opportunities over here and then we have a place to create and submit an application and I can go in here and I can say Akash NS I can say Akash NS chan.com I can put in my phone number and I can select my date of birth go back select a date of birth from long ago and if I try to submit without filling everything I'll have to fill it I can select a position let's say first track developer I can upload a resume I can pick a cover letter so this is a cover letter I agree to the terms and conditions and I click submit application okay and that pushes the data form T form bold that is the third party online service we are using so our website is on static. apppp and it is sending data to form bold because static. apppp cannot run a server it can simply show your pages as they are okay and once that is submitted I should be able to check in on my formboard dashboard that there is a second application by me this is the cover letter this is the phone datee of birth terms accepted Etc okay so you can also see it in more detail over here and now we can go back and we can fill out the form again okay so yep you can try this out and there is one last topic which we have not gotten to today which is adding meta tags so there are a bunch of these tags that go in the head tag and what they do is they determine what shows up when you share that page online or let's say when you share that page on Facebook what is this preview image that should show up what is the page title that should show up what is the page uh description that should show up that is something that you can actually configure within HTML similarly when Google finds your page what is the information it sees and it displays on in a search result that is also something that you can configure using HTML meta tag but I think this is a good point to stop so quick recap we started by looking at this problem statement to improve the previous Jovan careers website where we had this list of jobs and this application we wanted to create a table of jobs jobs and we wanted to also create an application form then we used the starter code which is my first web page which basically contained the code for this and we also want to make aesthetic Improvement so first we changed the wireframe so we came up with this we had this initial wireframe here which looked a bit like let's see yeah we had this initial wireframe which looked like that we wanted to improve this wireframe and so we made it look like this so we have this table and we have this submit your application form so that gave us a visual reference for what we wanted to create and of course this is the iterative method of software development you build something deploy it let people use it then you come back and improve it and then we came in and we created a table so we created tables using the T table TR and TD tags and also the th tags so you first create a table tag you then create rows using using the TR tag then you create heading cells using th and data cells using TD and we just did that we looked at some data that we had put onto a spreadsheet and we just uh transferred that into HTML code and that allowed us to create a table that looked like this of course we this is not a very pretty looking table so the next step was to style the HL table to make it look a little nicer and the basic styling that we did with CSS was adding borders around the table and the table cells you can see here we've added borders for the jobs table um also we've said border collapse equal to collapse otherwise we get these double borders that we were looking at earlier so to avoid the double borders like this you have to set the Border collapse property just something to keep in mind you can always look it up then we also wanted to make the table full width so that it occupies the entire width of the parent element which itself is limited to about 800 pixels at the center of the screen um if the browser is large enough so then we also left aligned the headers initially and then we centered align them again over time then we also try to show different background color for the header rows and different background colors for the alternate rows of the table and that is all achieved using CSS and this is what our output looked like then we went ahead and we looked at some Advanced table row and column merging using the row span and call span specifically the job title salary and posted on were configured to span two rows and location was configured to span two columns and then we added two sub column City and Country under location and then we also split the the data itself into City and Country except for remote where we just set it to span two columns and we also modified the CSS Styles a little bit to better represent the data in this new structure so this is what our table looked like after styling then we learned a little bit of about text Styles in CSS we learned about how to use external fonts from Google fonts so you choose a font on Google fonts you add those fonts so you select a bunch of fonts and you add them to your CSS and then you use that font in your CSS using font family and we use the heading and body fonts specifically we use the inter font for our headings that is what we use at Jovian and the Roboto font for body you can use any other pair there are a bunch of pairs you can find online and to add them to our web page we simply need need these link tags and additionally we also need these CSS Styles um to use these fonts So within the body we've added some fonts and then for um I added the Roboto font family and within the H1 to H6 this so within the headers we've used the inter font family okay then we saw some common text Styles some common text CSS properties of course there's font family then there is font size and there are various ways to express size and CSS there is font weight which is how thick each character is so you can use 400 which is normal or 500 600 700 800 there is line height which is how much space there should be between lines about 1.2 is common but you can go 1.5 you can go smaller as well there is font style which you can use to italicize the text and you can check out other properties as well there is text transform you can make everything upper case you can use sentence case which is to capitalize the first letter of every word or you can use lowercase and there is text decoration which can be used to underline overline or strike through text okay again you have to experiment with these and only then you become familiar and you don't have to remember them you can always look them up I don't remember them after 15 years of web development then we looked at how to express sizes in CSS so we have these absolute sizes or pixels and we have a bunch of other absolute sizes which are not commonly used in relative sizes percentages are more common when we are specifying widths or Heights for divs but for fonts we often use M and R M expresses the current elements font size as a fraction or a proportion of the parent elements font size and REM expresses the current elements font size as a proportion of the default font size for the entire page which is set on the HTML tag I believe okay there's also these viewport Dimensions that is left as an exercise for you in terms of sizing uh we had some guidelines that for body text 16 pixels is the common size and smaller text can be 875 RM or 14 pixels and larger text can be 1.25 r or 20 pixels and then for headers you can use different sizes from 2.5 RM to 1 RM from H1 to H6 and we prefer using Rams for sizing because you can simply go and change the HTML tag text or the root text of the body of the page and everything will get updated automatically okay and then you can of course specify these Styles in CSS so again type out all the code yourself that is how you understand this you should spend four five 6 hours this week just typing out all this code on your own then we looked at some guidelines around colors uh the first thing we looked at was how to use colors in CSS of course we have a bunch of inbuilt color names but often you will find that they do not look very good when you actually use some of these inbuilt color names but you have a bunch of these you can use from and if you want use an inent color um start with a color that is very muted very light so maybe just a light the last set of colors here and of course you can use RGB red green blue and you can specify value of 0 to 255 for red green and blue respectively and that is going to create a color for you zero is dark uh 255 is light so you can go from black to white if you vary all of them equally with Grays in between or if you pick different values for red green and blue you can create millions of color combinations now another way to represent he uh red green blue colors is using hexad decimal codes and this is the hex or the base 16 representation of red green and blue combined together into a single string and this is what you often find on the internet because these are easy to copy and paste around instead of RGB and then we have rgba colors with transparency so you can use rgba where you can specify red green blue values you can specify the opacity value one is completely opaque and 0 is completely transparent and 0.5 is somewhere in between so that the background color is going to show through or the background image is going to show through then we have CSS color properties so you can use color background color border color box Shadow text Shadow all these properties that have color and there are some other properties as well that can use color Okay in terms of picking good colors ideally you should be using color palettes you shouldn't be picking random colors from the internet here and there a good color palette tool is Tailwind colors.com where you can just use maybe one of these as the primary color and then use a bunch of grays for text and maybe a secondary color if you need to use a second color okay and just use shades of the same color also have enough contrast keep it simple don't use too many colors and don't use colors just because you can sometimes black over white is as good as it needs to get now also make sure that the colors are accessible to people with color vision deficiencies okay there are some examples of good and bad color schemes that you can check out in general it's a good idea to maybe explore the color schemes of specific websites and for text specifically for headings you can use 90% black with a tinge of blue or green as per the website that you're on uh that you're designing for body text you can use 75% black or 4444 for secondary text you can use 60% black and for for disabled text you can use 40% black so these are good rules of thumb to make your pages look good and we've just applied this to the various headers and the various headers Footers Etc in our code okay then we looked at forms in HTML so you can create forms using the form tag and in the form tag you can then specify labels and inputs and inputs can have various types and normally we put these within div so that each shows up on a separate line and of course you can Al add a br tag after each label to show the input on the next line after the label and there are various types of form inputs text checkbox radio dropdown so most of them use the input tag some of them use a different tag for example there's a select tag that is used for creating drop downs along with the option tag and then there is the text area tag which is not a selfclosing tag that's one thing to remember and we have date input password input email input these are again all inputs okay and we have number inputs as well so then we created the this actual application form here which was which had a bunch of fields and we also styled it using CSS so we looked at some various interesting ways to select things so for example we selected the label change its font weight we selected the input select text area all together we selected input of type checkbox using this special kind of selector and input of type submit which is a submit button using the special kind of selector so you have all these interesting ways to select and style forms and over time we'll start using Frameworks so you won't have to do much of this styling on your own anyway and finally once we did all that we also then deployed this website to uh we also then used an online platform called form bold so we signed up on form.com and we created a new form inside form.com copied the action that we need to set up into our form and we have some example text here so we need to put the action method and apparently this ink type into our form and what that does is when the user H submit this data is going to be sent to this site called form bold okay and that's it so we just need to add these few lines and we can send our form data wherever we want it can be a completely separate site but over time we'll of course build our own server which is going to accept this form data and that's what we looked at you can check out the section on HTML metatags if you need and finally deployment was really straightforward all we did was create a zip file and that Z file contained our index.html styles.css team and banner JPG files and we took that zip file and uploaded it on static. apppp and when we uploaded it on static. apppp it created this free site for us and in this free site we simply deployed it and we tested it out hello and welcome to this live workshop on turning a figma mockup into a web page and this is completely unscripted I'm I'm going to pick up a design and I'm going to implement from scratch something that I've not practiced before so you will see me making a lot of mistakes you will see me uh you will see things go wrong but I hope to show to you what happens when you are going through the process of turning a design into a proper web page what are the challenges you encounter and how can you answer or overcome some of those challenges so with that let's get started today we are going to pick up a mockup from figma by the way figma is a design tool so at most companies you will find designers specifically UI or user interface designers use a tool like figma to create mockups of web pages and then as a web developer you will have to turn those mockups into proper HTML CSS or sometimes you might use a framework like react Etc and if not figma sometimes people use a tool called sketch sometimes they use some other tools but every design tool more or less looks similar and let us open up this mockup so typically as a developer you will receive a read only copy of the mockup and you are going to be able to then inspect specific areas within that mockup so looks like this is the web page that uh we've picked out by the way I've picked this out from the figma community which is where a lot of free such free web pages can also be found in case you want to practice and this is what we'll try and create today so we have this web page where uh this is created by feri feri sahen and looks like have their phone number email and we have a picture not sure if it's a stock picture or it's a picture of the person who created the design uh then there is this this is often called the hero section this is often called the section where um you have some big text and maybe a a call to action or a button in this case that button seems to be contact me then there is a section called what I do talking about his uh developer and designer experience so this looks to be a personal website and there is some information about front end development backend development interface development that he's talking about here then there is information about some of his projects now of course most designers will just put in some random text or lurm ipsum text as this is called most designers will put in a lorm Ipson more a placeholder text but of course in the real world when this when this website goes live some actual text can come in here okay so this will be information about the projects created by feri and then there is also this uh uh footer at the bottom all right um there's actually a more uh let me just sign up here so that we can actually see this and I'll be able to inspect specific parts of this web page I'll be able to look at the fonts colors and things like that and in fact I am going to pick a slightly harder version of this so this is what is given as an assignment in one of the courses that we are running this is in fact the first assignment on HTML and CSS but I'm going to pick a slightly harder version of this so let me just find that so I'm going to use this extended design mockup uh something that is is actually a little bit harder so here now we have not just the same hero section but we also have this in this uh skills and project section as before but we also have the section called pricing which seems to have like a pricing a bunch of pricing elements sharing information about various services and we also have this section about frequently asked questions so what we'll do is we'll try and cover some of these more advanced uh Design Elements as well and maybe we'll also try and add some of these background element so there seems to be this background element over here there seems to be this background element here and there seems to be this line over here that shows up just below WordPress developer so we'll see how much of this we can cover I have no clue if we'll be able to touch on all of this within the hour or so that we have but uh whenever you're given us a design mockup this is where you should start you should start by just studying the page and understanding what's on it identifying the various sections within the page and I've actually laid out a step bystep process that we will try and follow today very very roughly uh but the prerequisites that I'm assuming here are HTML so I'm assuming here that you have some knowledge of HTML I am assuming here you have some knowledge of CSS and I'm assuming here you know how to use a code editor like Visual Studio code if you don't then you should check out some beginner friendly tutorial or come join our uh full stack developer boot camp where we cover all of these in a lot of detail okay so the first thing is to inspect the design mockup now of course we've opened up the link and we have created cre an account on figma so we can actually inspect the mockup and once you've created an account you can go into this inspect tab on the right so if I just let me just zoom in here a little bit so that you can see things a little better so on figma you have this inspect Tab and this is this inspect tab gives you a lot of very powerful details that you can directly translate into things like CSS properties colors fonts Etc so let's let's say I want to check what exactly is the background color here or maybe the background color for the entire uh for the entire design you can see here that the background color for this entire design seems to be over here F ff8 F0 all right so that is how I can pick out the background color and seems like this particular design was created with a width of 1440 pixels and a height of 3596 pixels so 1440 piece is a common width setting that people use so we're going to use that same width setting and I can go into individual sections so I can go into this particular section here and here I can see okay this is the width height Etc this is the actual text in case I want to copy it the content um this is the typography so it seems like the font used is leagues pattern and then there is a certain font weight there is a certain font size so all of this information is going to be useful when we all when you start putting in some of the CSS for our page and there's a bunch of information about the Cs CSS as well that we'll try and use later okay so first thing you should do is just inspect a few things and figure things out understand the dimensions and styles of various components and identify the fonts used on the page so that we can find them on Google fonts so for example the F font used here on this page is called League Spartan you can see here so I can just come in into Google fonts and I can search League Spartan and here is that font right so most fonts that designers use will be picked from goog will be available on Google fonts so you will have to then include those fonts within your uh web page to actually start using them okay you might also want to export the images as PNG or JPEG files so here for example in this mockup we have this image and this image need may need to be exported so you can just go to the export Tab and you can just press plus and you can export this image so let me just export this image as let's see uh let me just call call it hero image so this is since this is part of the hero section the top section is often called the hero section I'm just going to put it on my desktop and call it hero image right and similarly if there were other images on the page you could also export those images we don't have to do it immediately we can do it slightly later as well all right so that would be step one inspecting things but let's now start coding so step two is to set up the basic page structure and styles and then step three is to actually go ahead and implement the web page section by section so first I'm just going to create a folder on my desktop and open it up in Visual Studio code I'm not going to use git or anything here I'm just simply going to let me see let me create a new folder and let me say let me call it uh let me give it a name figma to web page and in this folder I'm also going to move in my hero image that I just downloaded and I just want to open up this folder in Visual Studio code so let me just open up visual studio code this is the code editor that is often used by web developers and on Visual Studio code I'm just going to go to file open folder and I'm going to navigate to the folder on my desktop figma to web page so here I'm selecting the folder figma to web page and I'm going to click open all right so now we have this folder figma to web page over here and in this this folder has been opened up in Visual Studio code and now I can start developing so I can create a new file and I can call this file index.html and this is going to be my HTML file which is going to contain all of the HTML code and I'll add a CSS file later on as well and you can see that the same file got added here too and let us put some very basic content into this file H index.html let us just put the HTML tag again I'm assuming here you have some knowledge of HTML but in case you don't um take a a very basic tutorial should be sufficient to follow along with what we're doing here now within the HTML tag we generally have a head tag and a body tag the head tag is where we are going to put all the links like CSS JavaScript fonts Etc and we also put a title here so let's give this a title what is this is the personal website for feri sahin so f e r d i s a h i n so let's just put f e r d i s a i n for the sahin and let us uh in the body let just let us just create a div and let us just put hello world here in the div Okay so I've done nothing here nothing so far I've just created a folder in that folder I've created an index.html file and that index.html file now has some HTML content very basic stuff and now I can open up this index.html file in a browser so I can just double click and here you can see that the file has been opened up in a browser over here if I zoom in a little bit and now we are ready to get started so let me just put this on the side and I'm going to close this sidebar for now as well so so now we have done the first thing we've created a folder on our desktop opened it up in vs code we ready to go then we are going to create an index.html file and we are also going to create a styles. CSS file that is something that we will also need to add where we are going to add all our CSS and we have copied over the image that we were using here there's just one image so let me create another file called styles.css all right perfect I've created a file styles.css this is where my tech my CSS is going to go and now I need to incorporate the styles.css file I need to link this file from index.html into my uh so that I can use the styles from this page all right and I'm just going to search so how to link CSS file in HTML page I should be knowing this but I keep forgetting this so I just look it up so HTML Styles CSS how to add CSS all right and there are three ways to add CSS we want to add the external CSS file so the external CSS file is simply we simply do this link Rel equal to stylesheet and href equals my style.css so I'm just going to add that link Rel equal to stylesheet of course in this case it's not my style.css it is styles.css that is the CSS file that we using and this seems to be this doc type HTML that is there here so let me just put in this HTML here as well okay all right so now we have set up the ind. uh the HTML file we have set up the styles. CSS file and we can verify that things have been set up by let's say going into an going into the CSS file and adding some Styles let's say let's add a background color antique white and let's save it let's reload the page and you can see that the color of the page the background color has changed all right so I'll just reset that for now and get back to where we were perfect so now the next thing for us to do is to add the head title which we've done already the link tag for the style and the body and maybe add section wise divs so we have a bunch of sections here let me come back here into the design so I'll call this the hero section uh and you can see here even the designer has called it the hero section so this is the hero section then under the hero section we have this what I do section and under the what I do section we have this project section and under under the project section we have this pricing section and the question section all right so let's just create a bunch of divs so we have a top level div called hero then let's create another div called what I do and then let us create another div called projects then let us create another div called pricing let us create another div called questions and let us create another div called putter there's also that black footer at the end so I am going to have another thing for that as well so 1 2 3 4 5 and six so we have six sections and let's reload that and this is we are this is what we're hoping is going to eventually turn into the actual web design the page that we are looking at okay perfect so now we've created these sections what next set up the basic Styles header body font family text size Etc so let's start setting up some of the basic Styles here okay first thing first is the background of the entire page so I'm just going to go and select the entire uh this is called a frame in figma so I can just click on the frame name and get the frame and looks like this is the color that is being used here so I'm going to go in here and I am going to come into styles.css and for the body I am going to set background color to this color uh okay I think I didn't need to type yeah so background is this color and now we've added the background so we start starting to make progress we've added the background Step One is done what next well I might need to just study the fonts that are used on the page and include those fonts from Google fonts into my project so here is one font there is this font called leag Spartan that seems to be used here so leag sparton okay I want to use the leagues sparton font and I found it on Google fonts so let me just seems like I have some selections here already let me get rid of all these selections so that I can go ahead and do this from scratch so leagues SPN is the font I want to use and let's see let's get all the weights and we will get rid of some of the additional weights so Google fonts is a place where you can find all kinds of fonts and to incorporate a font into your website you can just add a bunch of styles of the font so you can see that there are various font weights there's a thin font there's a thick font regular font and all so I'm just grabbing all of these so that I might need to use any of them I'm not sure I'm grabbing all but later on I can go in and edit the uh the link tag or whatever I incorporate so that I don't uh um I don't have to worry about including additional fonts that I'm not using but just to give you an idea what you're going to get here is let's say I close this so once you add a bunch of fonts you can see this view selected families button on the top right and from there you can check you can review that okay for leaks pattern you have selected a bunch of these fonts and then to use that font on your website you can then use a link tag so to use the link tag you simply copy all of these and then you go and add that within the head tag of your HTML page but of course leaks PN is not the only font there are other fonts here as well so let me go and check what other fonts are being used so that I can just incorporate all of them into my website at once okay now this font over here seems to be popins so Poppins seems to be a font that is used here and there is this font inter that seems to be used here as well this seems to be popins this seems to be leaks pattern this seems to be popins this seems to be enter and popins okay so from what I'm gathering here there there seem to be three fonts here one is the font that is used for very big large headings then second is the font that is being used for these uh smaller headings or section headings or big text and then third is the body text the actual body text and that seems to be enter so let me grab popins and let me grab enter and then we'll then we'll add all these fonts into our web page so let me search for the font popins so let's go back to Google fonts let's go popins okay that is the popins font I am just going to select all the variations right now probably not the best idea I should probably check with the designer which all we need to use but it's okay we'll go and fix this later okay I am I have selected a bunch of these fonts all right looks like there's a lot of these so I've added the popins font let me go back in let me search for the inter font and I'm going to get a bunch of variations of the inter font as well again I'll just select all of them just so that we don't have to worry about missing any important fonts looks like we got the inter font as well okay great so now you can see that our link tag has been populated over here so we have this link Rel preconnect etc etc and over here this is the specific area where we have names of fonts I can zoom in a little bit you can see that we have names of fonts and then weights of those fonts as well so let's just copy that entire link tag and let's go in and put that link tag into our head so I'm just pasting the link tag here and I'll just right click select format document so that it it just shows up a little nicely and now we have Incorporated all the fonts into our page two of course we've not started using them we've just Incorporated them so no change happens on the page itself but let's come back here into the page and let's see so we have it looks like inter is the main body font so I'm just going to come in here into styles.css and into the body I'm going to add font family enter um actually I can just copy this from yeah I can just copy this from fig by itself I can just click the copy button and that's going to copy all of these things so font family enter the base font size I'm going to just set it on HTML just so that we can use Ems for relative font sizes font weight of font weight of 400 on enter okay then the font line height seems to be 24 pixels letter spacing we probably don't need that it's by default it's I believe it's just zero and then text align left we don't need that okay so just as I do that I've changed the body fonts and you can already start to see that now we are getting something that is closer to what we expect okay what about the color of the body text so the body text seems to have this slightly uh slightly different color and this is the color that they're using here so the color of the body text is 5520 6D so I'm going to come in here and set the body color body text color let's come back here let's see body text color yeah it's it's all added here so over here we have this color 55206 so this is a nice thing about figma it gives you the CSS properties that you can use directly of course sometimes the CSS properties may not have an exact mapping you may still have to modify things a little bit depending on how the designer has set things up but in most cases you should probably just be able to copy things over and now you can see that the color of the text is also changed great that's fine what next what next well uh let us set up maybe so this is like a heading this is an H1 and there's an H1 tag so for all the headings H1 to H6 I feel like or maybe at least this is an H1 and then this is an H2 and looks like H1 and H2 are the only headings used and then this is an H3 which also seems to have the font popins so for H1 and H2 seems like we using leagues part so I'm going to come in and I'm going to say H1 comma H2 I want to use the font family leaks Parton so let's see font family leaks PN so I can just copy that over here or I can just copy all the typography at once so let me copy the typography here for for the entire thing and let me come in here and let me paste it of course sometimes we may have to edit what we paste so H1 H2 let me just put font weight 700 I'll verify if this is correct actually let's just do H1 for now we'll do H2 later okay and let's format this document and all right so now for H1 which is the heading of the page we have set up the font family we don't need the letter spacing in text line I think that should be fine we've set up the font weight we've set up the line height so I can come back in here and then maybe I can actually just put in this text directly so again I can click on this text I can scroll down and or scroll up and copy that actual content so just click go go into the content Tab and click copy come back here and maybe in the hero section let us just put in an H1 here so let's do hero section and let us just put in H1 and let's paste this okay all right and I was just using a a very big font earlier that's why a zoomed in version that's why it was so big but now uh that we have this H1 in a big size I'm zooming zooming back to 100% uh visibility okay all right so now we have the H1 but the color seems to be off like you see here the color for this H1 seems to be different so let's grab the color the color is shown here so let's just grab this color 1 190 d37 and let us grab this color and let us just go in here and let us set color to 1 190 d37 and now we have the right color for the H1 as well okay great let's also fix the H2 let's fix this style as well so I'm just adding in the basic Styles the we added the body text background we ordered the body font size we added the body font family let's add the font family for H2 so with H2 seems like we are still using League Spartan and how did I decide this is an hed2 I'm just going by my my gut feeling here the biggest uh heading on the page should be in H1 the second level heading should be H2S and then maybe these can be h3s so we'll see but for H2 here I'm just going to grab the typography settings and I'm going to create another H2 style and I'm going to again give it the right Styles let's get rid of letter spacing text align we don't need that and let's just verify that an H2 is loading fine as well so with 10 years of experience Etc let me come in here and let me come in and let me just verify what I do section I'm just going to add an H2 okay and let's reload okay again the color seems to be off let's verify that we're getting the right color so in this case the color just seems to be black or 0 0 0 yeah so I'm just going to grab the color 00 0 ideally although this could have been a mistake on the part of the designer we do not mix too many colors on a web page so my guess is that the designer may have intended to use the same color 1 190 d37 or for this H2 as well but they probably just forgot to set it on figma because these both look very dark um but in this case I'm just going to go with the design whatever is on the design let's just replicate that and but that that is a that is a question that I might ask the designer and by the way you can leave comments on figma to ask questions but or you can just check in with the designer directly okay so now we have the H2 that is looking fine too what else well uh we have this body text over here that is already enter we have verified that so let's maybe add this body text in as well so but the color and the color also has been set for the body text no um but this is not body text exactly uh this is the body text and this we have made enter this is like headline text of some kind so this is big text so what I'm going to do is I am going to set up a class for this and I'm going to take a I'm going to apply those those color and font settings to a class over here okay so let me just grab this and let me grab this color and let me just call this class headline so whenever I need to use or let me just call it Big text maybe even headline may not be the right thing so for big text the background or the color that we want to use is this this and what is the font size let's study the font size here so the font is Poppins the weight is 400 the size is 18 and then the line height is 32 pixels so let me grab that and let me put that in here as well yeah and now we have the font size for big text and if I want to verify if this big text Big text is going to show up properly I can just copy this content over here and I I can come in into index.html under the H1 let me add a div and let me just give it the class big text and let me just paste the content here okay and I can verify that okay this looks more or less like what we have here lmm doors yeah it it looks to be it's definitely bigger than the normal body text okay I think we have set up most of the basic styles at this point there are maybe there is this one style and there is this one style here that we may need to deal with let's deal with them when we get to them but at this point I I feel I'm feeling pretty good in terms of the background of the page we've made a lot of progress we've brought in all the fonts we brought in the inter font of course which and we may want to give it like a um like a backup font in case the font is not picked up properly then similarly we may want to give a backup font to leaks SP as as well I'm just going to put Sans serif here so whenever you're putting in font families it's always a good idea to also provide backup fonts and let me also provide a backup font here and let me provide a backup font here for popins as well okay great so that is going to make sure that our fonts load up properly and we've provided the right backups fine next up let us actually start building the web page section by section because we've set up the basic Styles header body font family text size background Etc so let us add the content for each section one by one first using HTML and then let us check the CSS properties for that content and then finally let us add styles for each completed section one by one using CSS so we are going to go Section by section so I'm going to start with the hero section or the top section and I'm going to start by adding the content so what do we have here well there is this the way you should approach these is you should go in you should go outside in so this entire hero section here seems to be a box right and then in this box let me actually just copy this over to a whiteboard so that I can actually show you how I I would think about something like this okay so here is the design we have so here's the design we have and now we're going to start annotating or dra uh start drawing boxes around this design now in this design we have first of all of course this entire thing is in a box right so this is our entire outer div so to speak now up in this div there are two parts there is a left half and there is a right half so this is the left half clearly this is where a lot of the content lives and then there is this is the right half this is where where we just have an image okay so now you're already getting a sense that you need an outer div and inside that you need two divs you need the left div and you need the right div now in the left div we can start again breaking things up so what you want to do is you always want to see okay is are things arranged horizontally or are things arranged vertically so clearly first in the outer box things were arranged horizontally so that will inform our CSS settings then but in this left half things are definitely arranged vertically so there seems to be this one box that I can draw around this contact information then there is this one box that I can draw around this High section and then there is this one box that I can draw around this section which is just uh the headline um or the sort of the big text and then there is this um one box that I can draw around this big text which is the body text which is big in size and finally there's one box I can draw around the Conta me button okay so at this point we actually have a very clear structure of the page and we can now start turning that into HTML content all right and I'm going to start giving some of these boxes IDs just for easy identification but another thing that you can also do is you can just use HTML comments so let's do both maybe okay so first let's just create let's just add an HTML comment here and let's say this is the hero section all right now in the hero section we have I'm going to get rid of all of this for a second I'm going to add it back later with time in the hero section we have two boxes so you always want to do the design outside in so in the hero section we have one box and this box is going to be the by um hero text parts and then this box is going to be hero image okay all right and now inside the hero text let's go back here so inside the hero text we have a bunch of vertical div so 1 2 3 4 5 so let me just add those in as well just so that we have set up the structure before we are actually adding a lot of the content so this is going to be let's see so this is going to be email and phone and let's just put that in here as we'll write that in here as well then after email and phone we have high we have the name basically after the name we have this let me just call this like H1 so the H1 is going to be here I'm going to create a div right now but but maybe later I might just replace that with an with a direct H1 tag and then we have this explanation or this let's let's call this um subtitle or let me call it title and subtitle and then a button right so let's call this title and let's call this subtitle okay and then finally let's add a button so there's a there's going to be a button here all right so now we've set up the basic layout we've set up a couple of we've set up an outer div called hero in which we have the hero text div we have the hero image div and then in the hero text div we have a bunch of divs 1 2 3 4 five divs for each of the sections within that uh section okay so let's see um the first thing we need to do is if I just reload the page let me save this and reload the page so right now we have nothing here right right now we have nothing in the hero hero section so the first thing we need to do is maybe start putting in some content so that we can start getting a sense of where things are right so this is the um maybe the first thing I'll do is I will put in the email and phone so let me get the email let me get the phone information I'm going to just go in here I'm going to copy the phone information and let me put in the email and phone here so let me just put put that in right now okay so now we have the phone then below the phone we have this text hi I am F the sahen so let me just copy in the text for the sahin I'll put the email shortly as well or let me just I'll put in the email right now too let me just go in here we'll figure out how to add the icon first so the idea with any kind of web design is do the easy Parts first and figure out the hard Parts later so okay now we've added the phone we've added the email I hope you can see here uh I'll just zoom in for a second again and then I've added that hi I'm FY sah I've added that part as well then let's add in this content as well which is the freelance frontend web developer and word WordPress developer so this is an H1 so I'm just going to add this in as an H1 directly okay all right so now we got the H1 here in in here as well and then let us get this sub this subtitle so which is is going to be I believe it is of the class big text so let me just give it the class big text and paste the content okay and now we have the class big text so now now we have the content starting to shape up so we have the email and phone and we have hi I'm F sahen which is just body text normal body text we have freelance frontend developer we have this and we have this button here so let's let's add in this this button here as well and so we have this button and this button button is called contact me let's put that in a div okay so there's a contact me button Perfect all right now there is this image this hero image over here let's come and get this let's grab this hero image as well so we have already downloaded this image if I show you here we have this hero image that has been downloaded already so I can go in and I can just import or use this image using the IMG tag so IMG SRC equals um hero image.png and let me just for now let me just give it a height so that it's not too big but we'll adjust the size later so let me give it a height of 240 and we'll adjust specific exil Styles later so heroen image.png yeah there it is so now we have the image here as well okay perfect so now we are getting to a point where for the first section we have all the content now the next step is to maybe start aligning things a little bit right and of course you can go back and forth with this you can add a little bit of content do a little bit of alignment then add a little bit of content do a little bit of alignment uh but just to keep things simple for now I'm adding the entire section content and then I'm I'm going to style it um okay so we first of the first thing we want to do is we want to show these two diffs horizontally and we want to maybe make them both take up 50% of the screen area right so to make things horizontal and you can always look this up you can always say how to show two divs horizontally but let me just give this a class or let me give this div an ID called hero section and into the hero section I'm going I'm going to go into styles.css so for the hero section I am going to say display Flex so this is a quick trick that I want to tell you anytime you want to show the the children of a div horizontally just set display Flex okay and just as I do that nothing seems to happen because inside it we have these two divs and we want both of those inner divs to be taking up 50% of the space right so let me just give them some IDs as well so uh let me say Let me give this an ID hero text and let me give this in ID hero image wrapper because it's this is not exactly the image tag itself this is a wrapper around the image so hero text let's give that a width of 50% so it takes up 50% of the parents width and then we have the hero image wrapper let's give that a width of 50% as well okay and let's see what happens okay okay nothing seems to have happened which is strange so these are the issues you run into when you are doing things live at this point I the way I'll debug this is I will just right click here I will check inspect and let's Zoom this out a little bit and I am going to then yeah I'm going to then maybe just check whether the div actually was added properly or not so we have the hero section div and we the Styles don't seem to have been applied why was the style not applied hero section oh yeah so the styles were not applied because I'm I have to select by ID so let me just make that hash instead of dot okay and let's reload the page and now you can see on already that both of these seem to be taking up so this is the hero text section and this is the hero image section both of these seem to be taking up about 50% of the space now of course this image itself is not taking up the entire space so I might want to come into the image here and maybe let's just put the image let's get rid of this div and let's just put the let's just give the image an ID and let's just call it hero image and this is one question that you'll ask yourself a lot when should I be using a div when should I not be using a div the answer is whatever does the job but you can start start with something and then modify it as you need so let's just give the hero image a width of 50% okay so now the hero image has a width of 50% that's fine but that is not fully doing the job for us so I think I'll just revert to the old style and then I'll just apply some styles to the outer hero image image so let me go in here let me remove the oh that's because I had the height so let me add the ID hero image here so I keep my hero image wrapper at at width 50% and now I'll go into my hero image and I will give it width 100% so it's going to take up 100% of the parents width okay so now the her hero image should be taking up about 100% of the parents width which it seems to be doing however you can see that this parent itself this entire thing is kind of spreading across the page which we may not want we may want to just put a maximum width to this entire uh to this entire section and I think the maximum width that we are putting here is about 1440 pixels so let me just set the entire maximum width for the hero section to 1440 PX and let me set the margin to zero Auto so that things always remain centered on the page okay all right so now it's looking a little better so now we have now we have this page and on this page we have the on the right we have this hero image on the left we have this content and we can verify that both of them are taking up 50% of the space so here we have the hero section the hero section within the hero section the hero text seems to be taking about about 50% then Z image wrapper seems to be about 50% of the width yep great so now we are getting very close to completing our hero section Styles I can see that there's a small padding or the small spacing here at the top somewhere so I can probably that's probably spacing on the body so I may need to reset the margin to zero and the padding to zero on the body to get rid of that top spacing okay that top spacing is now gone perfect great now let's fix this side uh let's fix the left side of things the right side seems to be fine so let me just bring this back here into half size and let's start actually adding content into this particular section over here so I can see here that we seem to this seems to be about 33 pixels below the top so there seems to be like a padding of 32 pixels I'm just going to guess about 32 pixels so I'm going to come into the hero text uh I'm going to come into hero text I'm going to add a padding of 32 pixels on the top 0 pixels for on the right 32 pixels on the bottom and 0 pixels on the left okay and let's do that so now we've added some padding so things are looking a little bit better so that's great yeah so now we've added a pad now we've added padding that's good what next well let's start fixing things one by one maybe we need some left and right padding as well let's see what left and right padding we can add so here seems to be there seems to be about a 20 pixel space between uh the text here and the image here I would probably take a similar 20 pixel padding on the left as well so I'm just going to make this 20 PX so these are places where often you may not be able to get exact details from figma and you may either have to guess or you may simply have to uh ask the designer okay great so so now we have about now we have padding so now things are looking a little nicer then uh let's start fixing one by one things starting from the top now let's separate out so here we have the phone number on the left and the email on the right so let's separate those out one very simple way to do this when you have one thing on the left and one thing on the right is to just use a float so you could say div style equals float right and again this doesn't always work depending on the complexity of the situation but if you want to do a very simple thing where you want one thing on the left one thing on the right that's what you can do just use float so that's fine now we have added that information as well and let's check the font size here so the font size seems to be small and the font seems to be Roboto again a fourth font this seems like too many fonts on the page so I'm just going to use the font enter for now instead of Roboto because I don't want to import another font and I may need to check with the designer why they have so many fonts U because three two to three fonts on a page is generally sufficient but let us come in here let us give this and let us give this a class or let's give this an ID because there's only going to be one of these or let us just give it a class called small text and we'll use it elsewhere as well small text okay and now we will just pick dot small text and let us set the font family to enter I'm not going to use Roboto here and Sans serif font okay line height Etc all that is fine and I may need to check the color as well maybe there might be some change required in the color but now it is smaller so it's definitely what we are going for slightly smaller then what we have okay the color seems to be just black so 0 0 0 so I'm just going to set the color to it copies as background but it should actually be color okay so yeah so now the color is fixed and this is all good then we have this next section and there seems to be about a 52 pixels of Gap normally these gaps should be multiples of four and like four 16 um 32 48 but 52 seems to be what they're using here so I'll just use 52 as per the design so let me go in here and this is like let me give this the or let me give this a small um Let me give this an ID and let's give it the ID name or like high and name so always coming up with good names always hard but always try to give a descriptive name so that when you're just browsing through the CSS file you know exactly what you are referring to so highend name right highend name has a margin top of 52 PX so let me add that so now you should see here that there's a margin top of 52 PX all right so this is good um then let's also maybe check over here what's going on so there seems to be too much Gap here the Gap here is only 10 pixels we may need somehow this Gap seems to be higher than 10 pixels so I'm just going to check here okay looks like this is the default this is the default padding or the default margin for for H1 and right now the margin the default margin for H1 seems to be set to about 32 but the default margin that we want is 10 pixels so I'm just going to set this to margin top 10px and let me reload that by the way I'm using the inspect element browser tools this is something that you'll often have to do okay no sorry that's not for H1 that's for and that's not for HTML that's for H1 margin top 10 PX perfect great this is looking find to high am fahin freelance front end developer and WordPress developer what next LM IIM okay this again the Gap here seems to be 30 it's currently 32 let's change the margin bottom as well to 30 PX to match the design exactly okay looks fine I think we have probably fixed the margin here and we can always verify by going into inspect element so we go into inspect element check the computed settings you can check that okay margin bottom seems to be 32 still oh I've not saved it yeah so now it's a little closer it's a little better so this is what you do you look at the design then you come into your HTML file and add some CSS properties then you go and inspect to make sure that things are exactly as you want them to be all right so that's fine what next well we have this contact Buton Buton let's try and fix the color and the font etc for this button okay so the background color seems to be 2f 2 f2f so that's what I'm going to use for the background and then the width and height also seem to be provided here so width is 44 let's just copy them all and let me come back here and let's go into the button here and let's give this a let's give this button a ID let's call it contact button button let's come in here back into and let's paste in all the properties so we are adding a height we are adding a width we adding a left I don't think we need this left and top generally speaking because we are already arranging things in the right order so we won't need that so that's why be wary of copying things directly from figma sometimes you might got get weird results um but width and height is something that I can use and I can add a background so let me grab the background uh color as well so let's see background color 2f 2f 2f seems to be the color that we using and looks like the text color also needs to be changed so the text color in this case or the text size is 16 pixels the line height is 19 let me just grab that and put that in here font family enter font size is font weight is 500 line height is 19 font size is 16 pixels okay and there's a text color as well the text color just seems to be white FF FF FF so color is just going to be can all right and there is some space above this so this about there's about 20 pixels of space above it so I'm just going to say margin top 20 pixel all right okay so our hero section is looking good now I'm not going to get into responsive design in this particular tutorial because now you may ask okay what how does it look like on mobile Etc but at the very least if I compare it to what I have here I think this is looking fairly similar hi I'm fery saheen freelance frontend web developer WordPress web developer um a a subtitle and then a contact me button and clicking on the button may probably open an email or something like that so let's actually just make the button functional instead of the button I'm just going to use an a tag and I'm going to put in a mail to link so that clicking on it will open up a mail and mail to fahin mail.com so let me just grab that and let me put that in here and let's just say Target equals uncore blank okay so that's going to open up email thing and I think we don't need this div at this point so whenever you feel that a div is not necessary you can always just go ahead and delete that div let's come back and let us change that to slash a and let us just format the document and save it okay that's not doing it well I think a tags you might also need to set display block for a tags in case you want want to add margin and padding okay that's still not doing it I'm just going to I'm just going to keep it to a button for now let's forget that right so you have to sometimes make these decisions what should be which kind of a tag in in most likelihood you you will probably be just using a framework that will take care of these things for you but for now I think let's just keep this button which is not exactly functional so with that we are more or less done with the hero section uh you you might notice that in the hero section our content here our image actually goes all the way to the right but the text does not go all the way to the left so we may need to fix that so that is what I mean by saying do the easy Parts first what you might want to do is implement the entire page and then figure out exactly how you're are going to implement this Behavior because you also have to think about what happens when you resize the page and all uh in in this case for now I'm just going to keep things equal width for now and I'm going to come back come back and maybe fix it later when I have the time okay or I'm going to go back to the designer and say hey this design looks a little odd because over here it kind of goes all the way till the end over here it doesn't how about we keep it centered on the page right how about we make sure that all the content is centered on the page so that we don't run into these issues okay so that is the hero section there's also this thing here the in the background I'm yeah I'm not sure how exactly we can Implement something like this let's let see in the background we have this ellipse of some kind um okay we'll have to figure out how to add this glow and it may not even be that easily possible and we'll have to figure out how to add this image and again that is something that we can possibly look at towards the end or something okay cool well I I think we'll do one more section because we can of course as we keep doing this it's going to take a lot lot of time so how about we do one more section let's do the pricing section and I'll leave the other sections to you as an exercise so let me come back here and let me get rid of let me get rid of these other sections so I have this what I do section that is left as an exercise I'm getting rid of that by the way you can comment out an entire section like this so just start with exclamation mark hyen hyphen and close with hyphen hyen exclamation mark and then that you can comment out an entire section so let me do that and let me do that with projects as well let me just comment that out for now I'm going to implement the pricing section let me comment out the questions and the footer as well okay and let's go ahead and now let's start implementing the pricing section so this is the pricing section and in this pricing section we have like the small thing here this blue thing called pricing and we have a like a subtitle or a or a heading H2 then we have this subtitle and then we have a bunch of these boxes so let's see let's again go step by step let us first take this and create a box around it okay and let's come back here into our oops a drawing tool and let's draw some boxes so in this case there is obviously this big box right here that's where that's what everything is under in this big box I can see that the direction of elements is downwards coming down so there's definitely this one div here at the top which is the pricing and then there is this other thing here and then there is this other thing here so there are three things pricing you can take a look at the pricing table based on the work I do and then you that subtitle and then there is this box that I can draw so always try to draw full boxes in that direction all right so in the downward Direction in the outer div we have one 2 3 four boxes so let's try and achieve this for now and then we'll go inside this inner box later okay so I am going to come back now and let's start adding some of this content so in the pricing section I just think I I need this the direction is vertical so I don't need to do display Flex or anything like that let me just add a div here and let's just type it type out the word pricing let's add another div here actually this seems to be an H2 so we can just use an H2 here probably so H2 H2 and let's grab this content which is you can take a look at what I do Etc so let us just just copy and let us paste this content okay it things are starting to take shape we will come back and fix things a little further then we have this Laur mipim dollar cell okay this seems to be the description like a subtitle I think this seems to be the big text it's about let's see it's 18 pixels so this seems to be the big text the same kind of big text that we have here so I'm going to create a div I'm going to give it a class of big text and I am going to paste in this content here okay all right so now we have pricing we have this big we have this header we have this big text and finally we have this actual pricing boxes so for now I'm just going to create a div and I'm going to say pricing boxes all right so that's everything that we need to going to put in into the pricing section for now now let's start fixing the style one by one the first thing is that you can see that the pricing section is also centered it's a it's centered on the page and yeah so I'm just going to give it a maximum width as well so I'm just going to go into the pricing section I'm going to say ID equals pricing section and what is the idea of the pricing uh what happens in the pricing section so it seems like it is 190 pixels out from this side and it is about 190 pixels out from this side as well so 190 190 the total width is 1440 so out of 1440 pixels it is you we are subtracting 190 1440 minus 190 190 that is 1060 pixels so the width of this or the max width of the pricing section is 1060 Max width is 1060 PX and I'm also going to set margin to zero and auto margin Z Auto basically says top and bottom margin is zero and left and right margin is auto which means that you want to compress things into the center and let's come in here and let's just reload the page and you can now see that it is centered on the page so it's slightly better than what we had earlier okay then uh we have this thing here called pricing over here it's a very small thing it's in blue color and then we have the same thing later called questions so let me just call this over title because it's showing up over the title so let's just call this over title and let us grab its Styles so I'm going to create a class called over title and let me paste the Styles here so left and top are not required we don't need a water radius so height is 49 pixels width is uh no we don't need a height and width either I think we just need the text Styles so let's get the text the typography Styles so we are using popins and 12 pixels and line height of 18 pixels and we don't need these lettest Styles so you have to be careful about which CSS Styles you're bring in from figma you use it as a reference but don't use it as the ground truth essentially okay and then let's add that over title to this pricing section so div class equals over title okay and it seems like it's all uppercase so let me just make it pricing actually we can do it in I think it's called text decoration so let me see CSS uppercase you can use a text transform property so I'm going to use the text transform uppercase okay and I'm going to put in the right color as well which seems to be 2858 FF so color is 2858 FF okay so now we have the right price now we have the right color I think we need to add a text align Center as well so that this is centered on the page okay great so now this is centered on the page two perfect and finally I think this is it but finally one other thing we we have to note here is that there seems to be a significant amount of gap between sections so I'll have to estimate this I I don't see any direct way of yeah there it is well 98 pixels is seems to be the gap between the pricing section and the yeah 98 pixels seems to be the vertical Gap so maybe what we can do is within the pricing section itself we can add that let's say each section can have a 40 pixels and a 40 pixels up up and down uh Gap and we we can fix the exact things later so in the pricing section I am just going to say well it's 98 right so let me let me make it 48 pixels so let's see pricing section I'm going to say margin top and bottom to be 48 pixels right and I'm also going to add a margin bottom for the hero section um zero Auto 48 pixels Auto so that between two sections we have this 98 pixels of Gap all right so this is looking fine now we need to fix this H2 so we have this H2 seems like there is a maximum width so it's we are setting a Max width of 700 pixels for this so let's set a Max width for 700 pixels for this hed2 let us also set maybe um text line Center so in this in this specific case I am going to say I'm going to give it a hiding I'm going to give it give it a ID or give it a class called section heading and I'm going to come in because there may be other H2S which may not be section headings and or do section heading and I'm going to say text align Center I'm going to say Max width let's see 700 pixels so max width 700 PX I'm going to say margin zero Auto so that margin so that it becomes centered on the page so whenever you want to Center something within its parent horizontally speaking just give it margin zero Auto and sometimes the zero may be different because you may want a upper and lower margin to be different and I think the margin is not exactly zero but it's 8 pixels so for the over title let me add a margin bottom of 8 pixels okay so let's do that and now now you can see suddenly that we now have this pricing section you can say you can take a look at the pricing table based on the work I do so this is good now we have the uh section as well let's let's finally fix this too so this seems to be the pricing or the section subtitle essentially so let's add a class called section subtitle section subtitle and let us again give it text align Center let us give it margin Z Auto let us give it uh what is the max width here Max width seems to be 686 about 700 let's give it Max width of 700 PX and finally and there seems to be definitely a 8 pixel Gap so it's not exactly zero Auto it's 8 pixels above and for now let me give Zer pixels let's check the bottom distance as well so let's see 48 pixels below right so 8 pixels above 48 pixels below and then Auto all right so with that and textaline Center as well oh we need to add the section subtitle so we can add a second class here section subtitle so this is how you add multiple classes you can add not just one class but you can add multiple classes to a div so we have big text and we have section subtitle so big text is going to ensure that it gets this font size and it gets this color and section subtitle is going to ensure that it is centered on the page as we might expect right so now now you can see now we have this pricing section and in this pricing section we have the title in this pricing section we have this and we have this content as well okay great so things are looking good let's finally go ahead and maybe try to also add the pricing boxes I think if we can add one box we should be able to add all the boxes so let's come back here and let's We There are three pricing boxes so let's create three divs so let's call it pricing box one and div Box 2 and div box 3 okay and now into this div I let me give this a ID pricing boxes okay I have given it I've given it ID pricing boxes so I'm going to come back into my Styles file and for the pricing boxes div I'm going to say display flx okay we want to flex uh we want the the children of this div to be horizontal so display flex and let me give all of these a class pricing box so that I can set each of their widths to 33% let's see class equals pricing box and let's add that to all of them you can also use Advanced flexbox properties to do this but for now I'm just going to use something very simple and I'm going to set for width of 33% for a pricing box okay and yeah so now you can see that we have at the very bottom we have box one box two and box three okay I forgot to add the class here it added it in the wrong place yeah so now we have box one box two box three at the bottom of the page I'm just going to add a small div with a large height uh at the end just so that we can bring up some of these pricing boxes so I'm just going to give it style equals height 600 PX this is just to add a another div at the bottom so that I can scroll this up a little bit while developing okay so now we want to create these boxes so what we want to do in these boxes let's see one by one what we are going to do in these boxes by the way you can see here pricing boxes we may also need to add a little bit of a padding so so that it's not sticking to the corner but we'll figure it out okay so coming back here to the design what we've already done is we figured out that we need a vertical or we need a horizontal layout here that's why we use display flex and then we have these three boxes each box seems to have equal yeah each box seems to have equal width we've done that with 33% WID now in a particular box the layout seems to be vertical okay so we have a bunch of these and in a vertical layout if I start drawing boxes we have 1 2 3 four and five boxes okay so one is this PSD to HTML which is the service one is the price then one is the description one is the um uh these are let's say benefits and a contact button right so let's do that and let's add let's start adding all of these so in the pricing box one I'm just going to do one box and let's see if we can maybe just copy paste and use similar Styles wherever possible so I'm going to create a div and I'm going to give it the class service and what is the service here so the service here is PSD to HTML so let's just say PSD or PST to HTML so that is the service that is offered in the first pricing box then I'm going to have another div here I'm going to give it the class price so the price for the first service is $999.99 per page we'll fix the styling later then let's add the description so let's say class service description so it's good to be a little specific with class names because description is a very generic um very generic class name that may apply to a lot of things so let's copy that content let's put that in content in here service description then let's go in and let let's call these uh service benefits so this is a list so I'm just going to create a single div for this let's give the class service benefits okay and let's just put service benefits here and finally there is this service contact button right so let's put in a button here and let's just say service contact all right so now we have some content here and of course this is not looking exactly how we want but now for the first box we have some content in place now let's start actually laying out the box so this box by itself seems to be seems to have a white background so let's do that let's um let's and the different boxes have different backgrounds so maybe background is not something that we want to set or let's set it let's okay let's set on pricing box itself let's set the background and if required later we can change it so pricing box should have the background or background color white I've added the background color of white for pricing box so so now you can see that each pricing box has the background color white oh the third one is not given the right yeah so these pricing boxes have the background white but they seem to be touching we don't want them to touch we actually want a 20 pixel gap between them or maybe a 10 pixel Gap around the box so here's a quick trick that I'm going to use I'm going to create a new div called pricing card so div class equals pricing card and I'm going to put everything inside this card okay so I'm going to keep the outer div just to determine the widths of each widths of each of the boxes and I'm going to actually use a pricing card which is going to have the margin which is going to have the Shadow and all of that okay so instead of adding the background color on pricing box let me add it on pricing card and background color is okay FF and let me add a margin of 0 pixels at top and bottom we don't need that but left and right let's get a 10 PX margin okay so now the benefit that you get is that inside the pricing box which determines simply the width 30% 30% 33% or let's actually just do that 33.33% just to be very accurate and then we have this card this card is going to be inside the box it is going to have some margin around it it is also going to be have its rounded borders all so the radius okay the Border radius seems to be about 10 pixels so let's add a border radius border radius 10 PX okay now a border radius has been added then uh it seems to also have a shadow so there seems to be this drop shadow I think we can just copy this drop shadow setting and paste it in here oh so it seems to have a box Shadow so now you can see here that it has gotten its shadow as well so that's good now we have a shadow then inside it seems to have about 20 pixels of padding inside it you can see that all the content is padded by about 20 pixels so let's add a padding all around of 20 pixels yep so now we have a nice padding as well and what you can do just for now is uh I can just copy over the same content into the other boxes as well and we'll edit the content later but the benefit of that will be we'll be to see that how we as we modify one particular class that's going to apply to all of the different boxes at once okay yeah so now we have okay now we have these pricing boxes and these pricing boxes seem to be looking at least on the outside as we expect them and now we can start modifying the service the service the class for the service is let's see so this is of probably the same class no it's a slightly different class but seems like it has a let's see it has this font Poppins so price service is the class so for the class service I'm going to add the font color or the font settings font family popins okay font size 14 line height is 21 get rid of these two let's add maybe the color as well let's add the text transform uppercase and let's add the color I think it's the same color as the pricing uh section over title which is this so let's add the color here okay so now the services are looking good PSD to HTML sketch to HTML figma to HTML okay well I'm just going to edit those as well so I'm just going to say for box two I'm going to say sketch to HTML and here I'm going to say figma to HTML yeah so PSD to HTML sketch to HTML figma to HTML 99 per page let's get the styles of 99 so the style here is Poppins and line height is 54 size is 36 weight 700 so this is the price so let's add the styles for Price do price okay all of this looks good font size line height all of this looks fine and the color seems to be just black so I'm going to say color 00 0 okay the color is fine too then okay this slash per page so this information I think this is something that we can put under a span probably so I'm just going to put a span around this span and I'm just going to give the span uh a class of price per okay so let me just copy that and paste it in the other ones as well price oops let's copy this whole span or price per page let's give it a class of price per page and let's copy the entire span and let us put that Span in each one okay price per page in fact we should probably also we should probably also have uh yeah the pricing seems to be same okay so price for page and then we have the span so into this span price per page let's give the right colors price per page and let's give it the color popins font weight 14 okay all of this this looks fine and let's just add that let's reload the page okay price per page is the span oh it's price per page I think I made a mistake here in in typing yep and we need to change its color as well the color seems to be 8 a 8 a 8 a so let me just change the color here as well okay great so now now we have uh the price figured out so price per page is done as well then we have this subtitle or this description essentially so for this description again the font style seems to be popins 14 pixels and 23 pixels the same I think it's exactly the same thing that we have here so service description is exactly the same as the price per page so service description yep 8 a is the color no the color seems to be slightly different 8 B 8B normally again you don't use so many different colors you have a fixed set of colors but this particular design seems to have it so let's just keep it that way let's make sure that there is enough Gap so there's a gap of8 pixels above in this case there may not that Gap may not have existed so let's add margin top 8px and we've added a little bit of a gap as well as expected and there seems to be a gap between these two two so let us add that Gap to uh what is that Gap let's see 8 pixels between these two so between the price and so let's add a margin top for price of 8 pixels yeah so that looks a little nicer that's again a little more spaced out and then we have these benefits all right now let me fix the benefits as a service benefit so this is going to be a list so I'm just going to create a list here in the first box Li and in this Li I'm oh sorry I'm going to use UL to create an unordered list and let's see how many benefits there are and let's add those lapsim 1 2 3 4 5 6 so the benefit in each case the value seems to be the same and so let's just create six copies of this all right y now of course I I don't think we need this div specifically I think we can just do this on the UL itself so let's get rid of this outer div let's shift this back and first of all I think we don't need this margin here so it's automatically getting indented I think we don't need this indentation so let's see how we can get rid of this indentation where is it so it is so there seems to be this padding which we can get get rid of so service benefits service benefits so I'm just simply inspecting it I am then going into this I'm selecting that particular div and I'm just inspecting its Styles and it has a certain padding so let's set the padding to zero okay so now it is moved left definitely but let's also set the list style to unstyled or unset or okay UL how to remove bullet points list style type none okay so list style type none okay then we have this check mark here that we need to somehow figure out how to add I am going to deal with this later for now I'm just going to maybe use an emoji so let's just search check mark Emoji yeah and I'm just going to copy this Emoji of over here the check mark button and I'm going to deal with this icons and stuff these are things that can always be added later so I'm just going to go in for now as a quick trick and I'm just going to add this Emoji over here excuse me okay so it's looking close let's add the color let's add the actual settings which is yeah in the the color seems to be let's see let me select some text so the width it seems to be again popins but a bigger size and a slightly different color so I'm just going to copy that and I'm going to put that under the font settings so now font size is 16 font weight is 400 line height is 24 pixels and I'm going to copy the color which is 6666 so I'm going to say color 6666 okay yeah and what is I think this is looking exactly no this is not looking exactly the same seems like there is also an 8 pixel difference between each one so here's what I'm going to do I'm going to say service benefits Li margin bottom 8px yeah and now it is a slightly more spread out and yeah looks fine to me I think maybe all these all these settings can actually just be moved into the LI itself right okay so it's looking pretty close weight font weight 400 line height 24 pixels and margin bottom of 8 and then finally there is this contact me button so let's add that contact me button so this is service contact button let's give it a class service service contact button all right and it simply says contact me right I think it just says contact me so let's go in here let's say let's call this contact me and let's come back and let's start styling this contact button okay let's close this for now so for the service contact button first thing seems to be that there is a the width is just full width so I'm just going to set WI width 100% so that it takes up the entire width then there seems to be a height or actually we can just figure out maybe what is the spacing that is there within so there seems to be a 12 pixels padding at the top and bottom so let me just put padding 12px all around just to yeah that looks roughly similar does it yeah or we can just set a height that that could be the other thing we can just set the height for the entire thing let's see the height is 44 pixels so let's set a height so often you'll have multiple ways of implementing this I'm just going to set the height to 44 pixels yeah I think it is about the same then there is the Border radius so border radius is 4 PX okay great border radius has been set I guess the Border width can be set to zero or maybe one one pixel yeah let's see what is the Border width here 2 pixels and 2 f 2 F 2f so border is 2px solid # 2f2 f2f that is a color then there's a background color the background color in this case simply seems to be white so we can just say background color FFF FFF which is just white okay now we need to actually add some text colors so the text color seems to be 2f 2f 2f so let's add that text color okay then let us add the text size or the text seems to be enter weight 500 16 line height 19. 36 let's add all of that in here so even though there are two two different elements on figma on our when we creating the button it's just this one thing all right and that's it now of course we may want some sort of a hover State here so you may want to say something like this where when we hover over the service button some of the things reverse so when we hover over the service button maybe the background color could become 2f 2f 2f and the text color could become could become white so that is f f f f FF or text color is just color right and maybe you also want to turn let's see I think this should do it yeah maybe we also want to turn this cursor into a hand button so you can say cursor pointer this is again a common thing that you will often end up using it turns into a hand button over here right so now you see if I zoom in a little bit so you see now we have this contact me button and now we have these preferences and now of course we can copy that over to the other ones as well so let me just copy the service benefits and let me copy the contact me button let's copy it over to the second one let's copy it over to the third one okay so now we have a pricing section that is more or less what we expect so this is what the pricing section looks like here and this is what the pricing section looks like here now of course the second pricing section the sketch pricing section seems to have a yellow background and a few other things so that is something again we may have to figure out how to do and I'll show you the quick way to do this what you do is go into that second box in yeah so this is the yeah let's just add it let's add box two here box two pricing box box two and and into box two you can actually go in and add specific changes so you can say do pricing Box dobox 2 so when it has both of these both of these classes in that case we want the background to be yellow which is just this this color over here so I can change the background color to that okay that's probably not added to the right thing I think it's pricing card that we need to add to and let's let me just call it card to instead of box two so let's get rid of that and I should be adding it on the second one so this is the second pricing box and in the second pricing box let me add card hyphen 2 and now you can see that it has changed to yellow color let's quickly modify these Styles as well so here it is just sketch to HTML is just black so I'm going to say say that within I don't need this so I'm going to say that within card 2 if I have a service then the color should be black let's reload that so the color has become black then everything else looks fine to me maybe this may need some change the color here is also black or but 75% black so we can kind of copy that So within card 2 if I am looking at a list item or specifically if I have service benefits uh oh let's just do that within card 2 if I have a list item then I want it color to be that and I can just change the color for that list item and similarly I can change colors if required so it's 50% here 50% black here so I can just copy this color and I can apply that to what is this well I believe this is service description and price per page so within card 2 if I have a service description then the color is that so you just add this additional selector and within card 2 if I have this price per page its color should also be that right and now we have I believe we have the expected colors you can see here that I can check that card 2 service description is the selector for it what else well we have this contact me is black and white so it's the other way around so within card 2 we have the only change is that background color and normal color are from the hover State and within card and of course this is for the contact button so service contact button and let's flip the styles for the hover state so when we hover over it we want it to be the other way around so the color is going to be FFF and the other color here is going to be 2f2 f2f okay service contact button well that doesn't seem to have applied we can just give it we can just give that button a specific card or a specific yeah we can just give that button a specific uh class here so service contact button for card 2 let's see card to button card to button so let's just do that so we don't need this multiple selectors we can just do card to selector so depending on what you want to achieve sometimes you may have to come up with uh like specific classes but generally speaking it's with a bit of experiment experimentation you should be able to figure it out oh oh wait I think I understand what the mistake I made I did not put the word hover here yeah that should do it card 2 yep that that does it so now we don't need this card to button class so yeah you'll often make these kind of silly mistakes when you are working on CSS but this is looking good so now we have this fer saheen freelance web developer pricing and all of this is fine let's maybe add the footer as well um which should be very quick to add so the footer is just this black band which contains which is of height 58 pixels or which basically has some text and it has like a 20 pixel padding internally so let me just add the footer and I think that'll just complete the page for now so let's go here let's go here and let's give this the ID footer and this fotter has some text the text is simply for sahin copyright so let's go in let's put in the text here and let us just give it some Styles so let me come back into index.html oh sorry into styles.css and let me go into footer so the first thing with the footer is that it occupies the entire width of the page so so I'm just going to give it width 100% then I am also going to text line Center so I'm going to say text align Center I'm going to add a padding of 20 pixels 20 PX so yeah now we have that we of course have to add a black background to it so 00 0000 0 uh so let me add a background color 0 0 okay let us change the text color over here um I think I'm going to get rid of that additional div I had or maybe reduced its height to just 100 pixels so that it's a little closer and you can see things more easily now we can just get rid of it completely yeah um let's add maybe a margin top to it so that it's not too close to the content so I think the margin top of 48 pixels should be fine and let's change its color so the color seems to be white so let's add a color FF FF FF the color of the page is footer is white let's grab the properties the text properties so the text properties just seem to be the typography is just popins so Poppins 12 PX 18 PX so let me just put that in here as well yep and that's it so now the footer has been added and the pricing has been added and we have I believe we've achieved what we wanted to set what we set out to achieve at least in terms of the adding the two sections the only thing that I'm a little worried about is that this Edge seems to be lining up with this Edge over here right uh which is not happening in our design our design is a little more spread out and so maybe what we might want to do is we might want to restrict the width of this section also to match with this section let's see so this is about uh what is the width of the pricing section so we have this pricing section and the pricing section I believe has a maximum width somewhere set the pricing section has a maximum width of 700 pixels no no it has a width of 1060 pixels so maybe let's set the same maximum width for the hero section as well let's set the maximum width to 1060 pixels so now everything is centered on the page you have this pricing section which is centered and then above it you have this section which is also centered like that now this is something that you may want to discuss with with the designer in the design you see the image actually sticks out a little bit but there are two issues with this if the image sticks out like this what happens is that one the content is no longer centered on the page properly and second what happens when you have a wider screen is the screen is the image still supposed to stick to the side probably not right because if you have a really wide screen it's not that you're going to like let's say the screen was this white from this end to this end you wouldn't want the image to just be so big that it sticks out or be somewhere in the corner um so what we have now feels like a reasonable feels like a reasonable Middle Ground to me uh but of course it's only the designer who can give the final answer here in terms of how they want the image to look right so this is something that you may want to go back and discuss with the designer one thing that I will do for this image is I'll probably give it a radius like this on this side as well just to make it look a little nicer so it has a radius of what it has a radius of about 200 so let me just go in here and let me add that same radius for the image in my code as well so I'm going to go to the hero image and I'm going to say border bottom right or border bottom radius okay like that so that's what I'm going with and or the other option is that I when I export the image I don't export it with the radius at all I just keep it blank um but I think this looks largely looks fine of course the content is sticking out a little bit a little more than I would have hoped so I may even reduce the width of the image slightly so instead of going 50/50 I may go let's say 60/40 with content and image okay so this is where you may like when you come to the implementation often things don't work out exactly as a designer expects so some things may be need may need to be changed might be that we maybe we can reduce like a little bit of the description so that we have one less line in the description let's see so this is the subtitle and in the subtitle let me get rid of this entire section like that let me reduce a little bit of the top margin over here so before the high I'm for sahin let me yeah let me just change that to about 16 pixels let's say or 20 pixels okay and that looks good I think this is this page is looking fairly good we have this phone we have this email here both of this both of these pieces of information we have this High freelance front end developer and WordPress developer a subtitle and a contact me button then we have this a little bit of a gap we have pricing you can take a look at what the pricing table at the pricing table based on the work I do then we have again some description then we have these three pricing sections then we have these contact buttons and then finally at the bottom we have this for the saying copyright 2022 All Rights Reserved so that's fine too and maybe the only last thing that we may need to do is add these icons over here this icon over here and maybe also add these icons these check mark icons that we have over here so let's do that and I think then with that we'll close for the day of course let's see if we can also incorporate this but I'm just going to add this icon for now so I am going to export this so I can go into export and let me export this as a PNG file or I can also export it as an SVG file SVG is good when you have to resize things so let me export export this as an SVG and let me export this as phone. SVG or phone then let me export this and again I'm going to export this as an SVG and Export as email.svg and finally I'm also going to export this check mark over here so I'm just going to go and Export that again as SVG as check.svg okay now we just need to incorporate or bring in these svgs so let's see HTML include an SVG image how to use SVG images in CSS well looks like we can just do this we can say IMG SRC and we should be fine and we can give it a height and width so what is the height here 16 by 16 right so I'm just going to do that for I'm going to come in into my text here and I'm going to come in before telephone number so I'm just going to first create a span so that I have a span around the telephone number and then I am going to create this IMG SRC equals phone. SVG and let me just set width and height directly here width equals 16 height equals 16 and let's say alt equals phone we should always put an ALT tag for an image there you go it's almost there more or less I think it we probably don't need such a big thing maybe 10 by 10 might actually do it yeah maybe 12 x 12 so that takes care of that for us yeah I think that's what it looked like here as well roughly right let's get let's add the email so let's again get this IMG here and we'll just change it to mail. SVG or email.svg yeah that's roughly what it looks like as well you could say that okay maybe it has like shifted down a little bit so we could do something like this we could just give it like a small margin to adjust to adjust things a little bit so what we could do here's a quick trick anytime you want to Center an image next to a page you can there are more complex ways to do it but a very quick way to do it I need to move the image down just a little bit so you want to keep you want to maintain the rest of the things as they are but you just want to make move the image down a little bit you can say margin bottom minus 4 PX okay what that does is that does not actually add any additional space it simply shifts the image up or down okay so negative margin is a very interesting thing that it does not add additional space it simply shifts the image left or right or up or down as you say and similarly I'm also going to add a margin bottom minus 4 PX over here so play with negative margins but now you can see that things are all nicely lined up and let's go in and add all of this here as well so I'm just going to copy this IMG and I'm going to put it in the place of this tick mark over here so I'm simply going to replace well let's do this let's do a find replace so I want to replace the tick mark with this I IMG tag over here let's first replace one then we'll see if that is what we want to do for the rest as well right so let's put that in here let's get rid of this margin bottom I think we may not need it and let us just put check. SVG and let's reload the page okay I think we may need a slight bottom margin to adjust it so whenever you have icons next to text margin bottom is your friend so margin bottom a negative margin bottom in most cases minus 2px let's check that yeah that looks fine so now let's grab that and let's say that wherever we have this sck symbol or the sck Emoji I'm just going to replace them all with that okay and I've replaced everything and now you can see that my tick symbol is showing up as expected yep I could even just uh if I wanted to make sure that these width height and Etc and style margin if I don't want to repeat this everywhere uh maybe another thing that I can do is instead of just repeating it like that I can just create a class called do check mark and for DOT check mark I can say that I want margin I want width to be 16 PX is that 16 yeah 16 I want height to be 16 PX and I want the margin bottom to be minus 2px and now I don't actually need to do this I can oh the alt tag is also wrong I don't probably don't need alt tag here I can just give it a class class equals check mark okay and I can replace this so I can now go back into the find and replace and what I want to replace is this and what I want to replace it with is this IMG SRC and class equals check mark and let's replace them all and we get exactly the same result right with of course this time we using class we not repeating a bunch of styles so in case we need to change the height of the check mark or something let's say we want to change this to 20 we can do that very easily not that we have to I think it looks fine okay so I think this is a good place for us to stop we have replicated the hero section closely enough I personally did not agree with the design decision to extend the image outside of the center because that creates problems in centering in uh the content visually and that also creates problems with larger screens so instead what I went with is I simply centered the image I simply centered the image or the entire content of the page here and I have gone ahead and I have added this heading and of course reduce the sizes a little bit so that things probably fit in vertically then we added the pricing section you can take a look at the pricing table and in the pricing table we added all the specific sections so I'm sure when you when you looked at it the design may have seemed fairly complex but as we just start approaching it step by step as we break things down identify okay what are the boxes looking like and are the boxes arranged in a vertical direction or a horizontal Direction Things become a lot easier and then you just have to go element by element make sure it has the right Styles and you can achieve any any design um no matter how difficult it looks and of course there are are cases where you need like custom Shadows you may need to overlap things on one another like let's say we wanted to do this how exactly would we do that well let's grab it let's maybe export it let's see what we can do with it let me again export this as an SVG file and in an SVG file let me just export it to um line below or let me just call it yellow line right and let's see how exactly we can fit this so we want this to show up right below the H2 right so let me just show that right below the H1 so I'm going to I'm just going to come in here and I am going to say below the H1 I'm going to add this image IMG SRC equals yellow line.svg and I I am just going to give it the ID yellow line okay so here's what that looks like right now and again I can use my margin trick so um hash yellow line I can say margin top this time and I can add a negative top margin minus 30 PX let's see what that does yep that's getting us close minus 40 PX nope doesn't do it minus 50 PX okay maybe I can put this yellow line inside the H1 tag because the H1 tag has its own margin which I cannot get rid of so let's come back here let's take that yellow line and let me put that inside yeah that is better that is better but it's still not doing it I think maybe minus 80px still doesn't seem to be doing it well what if we put this in a div so this is where you'll have to experiment this is where it becomes like a fairly tricky CSS kind of thing to do and let's see if we can get IMG SRC ID yellow line margin top is minus 80 what if we said margin top to minus 200 pixels still doesn't seem to be doing it okay well I I think I'll I'll I'll just give up at this point um but maybe what we might need to do then is we might need to adjust some of these gaps because now we no longer need this margin below the H1 so I can go back into H1 and I am going to remove the bottom margin which is 30 pixels yep let's see now do we still have a bottom margin here no oh we do and I'm just going to set margin bottom to zero yeah so that is close enough there are other styling properties that can be used to achieve exactly what we are looking for you can use something called position absolute I believe um yeah position relative and absolute and then you can set exact where it is from the top um that might be able to do it let me give it a quick attempt position absolute uh or position relative here and here I'm going to give it position absolute okay that is doing it probably I probably don't need this this and yeah now I can say margin top minus 10 PX probably like that and if I want to if I want it to appear be behind the text I need to uh put the text as the next thing here and not the first thing well or we could use something called Zed index so so again Z index is minus 10 let's say something like that so it shows up behind the text okay this is good now we can probably add back that H1 padding that we had so let's see we had a margin bottom 30px yeah so now this is almost exactly okay it's a little higher the yellow line instead of it being Min 10 PX maybe we can go minus 15 PX yeah and now it's almost exactly what we're looking for we have WordPress developer and we have uh WordPress developer so what you can do is you can have a position relative on the parent position absolute on the child and then you can move it around anywhere within the parent okay so that's just something that you can do in case you need to achieve layouts like these but otherwise this is looking good I think I'm going to stop here there is a title section there is an email section and we can of course hyperlink this we can hyperlink this all of those things are possible uh this is looking good freelance front end web developer and WordPress developer and this is looking fine contact me looks good uh pricing the boxes with pricing and then the layout the last thing I'm going to do is I'm going to quickly show you how to deploy this in case you are going to share this with somebody so here's what you can do just zip it up go to compress figma to web page just zip that up and we're not going to use git or anything here I'm just going to use this free platform called static. apppp let me just sign out here so that I can show you yeah and here static. apppp allows you to just take a zip file and you can upload that and deploy it inexpensive rabbit okay let me just add Sydney plus 99 at jan.com okay and let's yeah so this is a site where you can upload a zip file and then you can just you you'll have to verify your email let me go ahead and do that right here doing it on another screen here okay I'm going to activate my email done and once my email is activated it has taken the zip file and it has simply uploaded it on the cloud and it has given us this URL it is it takes a minute or two to set up but at this point yeah it is still un packing the archive looks like yeah so at this point our website is deployed and you can also then connect static. apppp to your own personal domain so I'm just going to share this link with you so that you can actually verify that this is this website is actually deployed but this is all there is you have a layout like this which is given to you in figma the first thing that you do is inspect the design mockup you identify y okay what are the different dimensions what are different components and there's a guide here that you can check out which uh an overview of figma for developers and how developers can use figma but the idea is you just inspect the design you identify what are the various sections you identify the fonts used on the page you identify you find them on Google fonts you export any images or JPEG files that are being used within your web page then the next step step two is to set up the basic page structure and styles so you create a folder on your desktop and then you open it up in vs code or if you're using git or something fancy like that then you can do that too create an index.html file create a styles.css file that's what we have here we have a index.html we have a styles.css and copy over all the images that you need so the hero image was the only image and then we had a bunch of these then you add the basic style so you add basic HTML tags head title link body uh we added all of those uh first in our file then you add the various sectionwise div so you create a div for each section because each section ultimately is going to be a box on the page and you set up some basic styles for the body you set up basic styles for the header you set up backgrounds font families text sizes colors Etc then you go ahead and you implement the web page section by section and the key there is to First identify in the Box whether the box is in a hor whether things are arranged in a horizontal direction or a vertical Direction so you always want boxes and the box has to be has to have something in a vertical direction or something in a horizontal Direction and then you then create boxes within boxes right so you're always looking to create a layout like this where you have or a layout like this where you have a box and then within this box one possibility is that you have boxes that are laid out horizontally like that or the other possibility is that you have a box and within this box things are laid out vertically and so on and of course again within that horizontal box you can have like a bunch of vertical boxes like that right and then within each of those vertical boxes you can again have a bunch of horizontal boxes so if you start thinking of your web design as something like this as a bunch of boxes inside boxes inside boxes with each box having its children laid out in horizontal or vertical order then your web design becomes really simple and you'll never run into a lot of the CSS issues that often plague web developers so in this case for the pricing table we had a vertical layout first so the box box box and then a big box and then inside the big box at the bottom we had a horizontal layout box one box two box three equal width that's where for horizontal layouts you use display flex and then for each of these inner pricing cards we also used a trick where we added another inner div which will have its own on radius and border and all so that the outer Dives were just for creating the wids and the inner Dives were creating the cards and then in the pricing card we have a horizontal of a vertical layout okay so that's all you need to know that's all you really need to know in terms of taking a web design and then converting it or taking a web design mockup and converting it into a web page of course there are these special cases like this where you have to figure out how you're going to add that but the way you do it is by using some negative margins here and there maybe using a position relative for the parent absolute for the child and you can always just search position relative absolute examples and there are a bunch of tutorials on this like nobody knows exactly how to do these things you have to Lear you have to search for them and position is generally one thing when you have like one thing behind another that you can deal with so similarly you can maybe get this one one element this this nice glow that you have here you can get this element somehow you can try to get this element this glowing thing uh and you can export that ellipse as a PNG file or an SVG file and let's see yeah and then you can just incorporate that within your code as well okay all of that is doable so yeah so you add content for each section one by one using HTML by using that box structure then you use figma's inspect tab so remember here you select anything and you can see exactly what what properties it is using it's not that you'll be able to copy these over directly you may have to make some changes to it but you use figma inspect tab to check values of CSS properties add styles for each completed section one by one using CSS and then try to replicate the mockup as closely and as precisely as possible and that's where we get into these Minor Details like over here we have this at character which is vertically centered so maybe we can achieve the same thing over here like that and often there may be some tradeoffs we will have have to make when you actually go ahead and implement the design for example we reduced some spacing here we decided that we are going to Center the image on the page and add a border to it because uh otherwise it just looks a little odd that the image is not only sticking out but it's also then there is some space on the ride which is empty okay so that is everything that we're going to cover today so thank you for joining and there are a bunch of first of all I would love to know how did you find the session you can drop a line in the chat and we'll see but there are a bunch of comments or questions as well let's see how do we get the figma file we will share we will add a link in the description but let me also share that link with you right now so this is the figma file that you can use then you should use the button tag inside an a tag for mailia okay so that was a nice tip that I can actually put the button tag inside an a tag so that's great I will definitely do that or we can actually just fix that right now I believe it's okay it's okay we are out of time hover state is not added yeah so we've added the hover State not for this button yes we should add it for this button also but we've added the hover state for these buttons would you recommend to use live server so that you don't have to reload the website yeah so you can use a vs code extension like live server so there is this vs code extension called live server you can use it if you're using vs code on the cloud like GitHub code spaces or you can also use it locally and the benefit is that anytime you make a change to the file it automatically reloads the page so you can use that too I just wanted to keep things simple for today and yellow line rotated 45° well it's not rotated here but yeah okay perfect well I think we will close at this point so thanks a lot for joining I hope you enjoyed this tutorial and if you want more tutorials like this come join our WhatsApp Community we'll uh drop a link in the chat it's just jan.com WhatsApp so you can join our WhatsApp community and um you'll get to know about more future events we have events happening every week more or less you can also just go on join.com events and learn more about these events so yep I hope that is helpful now and I'll see you next time thank you and have a good day or good night byebye so let's get started understanding Version Control git and GitHub is crucial for any developer or any team working on a software project so far we have been building our websites just by setting up folders on our computer opening them up in vs code but to professionally build websites you will need to track the code in a version control system so these tools allow you to track changes they allow you to collaborate with others because you're typically not going to be the only one working on a web application or website and they also allow you to deploy your applications easily and efficiently to the cloud and by mastering these skills you can streamline your development workflow so today we are going to learn what professional web developers use when they're working on these projects so in particular we are looking at these topics we will talk about using GitHub repositories to store and share your project source code we will talk about using GitHub code spaces which is an online code execution and online development platform in conjunction with a browser based vs code for web development we will talk talk about developing and previewing changes to a website using GitHub Cod spaces we will talk about creating git commits and pushing changes back to a GitHub repository then we talk about deploying a website to the cloud directly from GitHub using the worell cloud platform and we'll try to understand the GitHub collaboration workflow which involves branches and pull requests and finally if we have the time we will also touch on installing and using git locally on your computer and connecting it with GitHub now the best way to learn these skills is to follow along step by step and type out all the code yourself git can often be confusing at first so I want to start with that disclaimer because there are so many different terms that you will hear get pull merge commit Etc but it starts to feel natural with a lot of practice and you will see us repeating the same flows over and over for the rest of this course and the rest of the program so by the end you will become proficient in git whether you like it or not now of course this tutorial assumes some prior knowledge of HTML and CSS so if you haven't completed the previous lessons so if you haven't completed the previous lessons please go ahead and complete them first so we will explore these Topics by attempting to work on a specific problem statement we want to improve the development workflow for the Jovian careers website so in our previous tutorials we've built this careers website which has a navigation bar which has this Banner which has some information about Jovian an image which has a table showing the job opportunities at Jovian and it has a form where anybody who is interested in applying for a job at Jovian can submit their application and finally it has a footer at the bottom as well and we built this by setting up a folder on our computer locally and then uploading a zip file to static. apppp and that is how we have this deployed version so what we want to do is set up a GitHub repository to host the source code and facilitate collaborative development we also want to deploy the website directly from GitHub to the cloud using the worel cloud platform and we also want to add some appropriate meta tags which we'll talk about today to sure that when you share this website with somebody let's say on a social platform or as a link on a messaging platform then the page previews properly so all of that is something that we'll try and cover today so here is where you can find the code for this tutorial we are going to start with the starter code which contains all the code for this website that you're already looking at which we have developed so far till in the previous tutorials so let me open up the starter code this is going to be a zip file I'm just going to save it here on my desktop and once it's downloaded I can then you can see here it's downloaded on my computer I can then just decompress it so now I have this folder so in this folder I have the index.html file I have a couple of other styles file I have a couple of images and this index.html file contains the actual application page the Jian careers page okay but of course we are not going to do this development locally we are going to do this development now using GitHub now I'm sure if you have if you are pursuing web development if you have done any programming you must have heard for heard about GitHub and you must have also heard the terms git and Version Control so first I just want to demystify these terms before we start using them now git is a popular version control system which enables developers to track changes to their code base and collaborate with others and GitHub is a web based platform that provides hosting for git repositories and tools for collaboration okay so let's break down each of these terms one by one what do we mean by Version Control Version Control is any system that tracks changes made to a file or a set of files or a project so it enables developers to keep track of different versions instead of you having to create multiple copies saying V1 V2 Etc you can just put put everything into a Version Control System systematically it also enables developers to collaborate with others so that you can have one common version and two people can build off it then you can bring those changes back and sometimes when required it also allows developers to revert to previous versions of their code if needed and it enables developers to work on different versions of their code simultaneously so as a developer sometimes you work on multiple features at a time and again you need a version control system for doing that so there are many Version Control Systems there's one called SN that was very popular early early on in the '90s there is of course git which we'll talk about today and there is something called Mercurial so version control system is any system that allows developers to track various versions track changes of files or projects now you can learn about the various Version Control Systems and the differences between them I linked to a site but we are going to focus on a specific kind of Version Control system called git now the key Concepts behind git are that you have typically a remote server so typically this remote server could be something that you have set up your company has set up or it could be an online platform like GitHub so you have a remote server where the ground where the master version or where the main version of your code is stored and this code is called a repository so your code is stored in something called a repository along with all its previous versions and then whenever you as a developer want to work on this code you first have to pull it onto some computer so it could be a local computer it could be another Cloud computer and then you make some changes on your computer and then you send the changes back to this remote server and you're not just the only developer on this there can be other developers who can be doing the same thing okay so git is this particular kind of Version Control System where you have often this Central server which stores the repository of code and then you take a copy of the code make some changes and push your changes back to the central server and that is how people collaborate okay so that is how git works and here are few Concepts in git that we will try and cover today so the first thing in git is that it it uses something called a branching system that allows developers to work on different versions of their code simultaneously without affecting the main code base okay the second thing is that developers can make changes to their local copy and then they can push those changes to a central repository next suppose two developers are making changes to the same file or the same set of files then git also allows developers to merge their changes the changes made by different team members and resolve any conflicts in case both team members are making changes to the same file finally git also has the ability to track changes made to individual lines of code so when you're trying to merge some of your changes back to the cloud repository you can check what individual lines of code have changed and you can also roll back to previous previous versions of the code okay so it is one of the more sophisticated and one of the most widely used Version Control Systems and don't worry if these Concepts don't make sense right now we are going to cover all of this in much more detail over the course of today's tutorial okay next what is GitHub so we talked about Version Control any system that can be used for tracking changes across files and folders git is a particular kind of Version Control System where there's a central repository and then you can take copies make changes and push them back using branches then we have something called GitHub now remember in git there is this Central repository that can be a repository that you have set up your company has set up or you can use one of existing Central repositories and GitHub is the world's largest Cent repository for git based projects okay so GitHub is a web based platform that provides hosting for git repositories and it provides a range of collaboration tools on top of that hosting for developers other similar platforms are gitlab and bitbucket so you can use any of these all of them have free plans but GitHub is the most popular one it had it has tens of millions of people using it so you should probably start with GitHub now on top of git GitHub offers several additional features the first thing it gives you is a web based interface for managing get repositories making it easy to view and manage code it also offers a wide range of collaboration tools on top of git uh things like pull requests code reviews and Team Management features again we'll touch on these and finally GitHub also provides hosting for open Source projects so most software that you use on the Internet is built using open Source projects and these open source projects are typically hosted on GitHub so GitHub is a great place for you to discover open source projects and even contribute to open source projects and it has a vast community of developers where you can interact with others and you can interact with developers of Open Source projects and make your own contributions finally GitHub also provides Integrations with other tools specifically around deployment project management Etc to make it a complete software development workflow okay so GitHub is a hosting is a hosting platform for git and it offers a lot of additional features on top of git okay so I hope that clarifies the difference between Git Version Control and GitHub they are like layers Version Control is a basic kind of a system git is a specific kind of version control system and GitHub is a hosting platform for git repositories with some additional features so let's start by first creating a repository for our project so projects on GitHub are known as repositories so we'll go ahead and create a repository so the first thing you might need to do is go to github.com and sign up if you're not signed up already in my case I have already signed up so I'm simply going to sign in so I'm just going to click sign in and that is going to sign me in to GitHub all right so once you sign in this is what your dashboard looks like and on your dashboard the first thing you want to do at least when you've created your account for the first time is to click the new button to create a new repository or a new project so let's create a new repository uh we are going to call it Jovian careers site live because I'm doing this live and let's add a description for this repository so a website to show job applications at Jovian or job openings at Jovian and accept applications next you can choose whether to make this Repository public which is open source for the rest of the world to see and build upon or you can make it private now you can make it public and people can see the code but they cannot make changes to your repository you still control who can make changes but if you make it private only you will be able to see it and if you add collaborators only they will be able to see it and you can also choose which of those collaborators can actually make changes to the repository so for now I'm just going to make it public so that you can actually see The Code by the end of this lesson yourself next you have a few initialization steps so if you are creating a repository on GitHub and you plan to develop from this repository then you should initialize it with the readme file and some of these other things on the other hand if you already have a repository on your computer you just want to upload it to GitHub then you can skip these initialization steps okay in my case I'm just going to select this initialization step add a readme file what that's going to do is just create a file called readme.md wherein I can put in some documentation about my uh project so I'm going to keep that and then there is something called a git ignore file that gets added so often when you are creating a git repository there are certain temporary files that can get created as you're executing your code and you may not want to put those temporary files or compiled files into your git repository so that's where a git ignore file comes in don't worry about this we'll touch on this later but for now because we are going to create a JavaScript and HTML and CSS project so the top the G ignore template that you can select is node so node simply stands for nodejs which is a tool used to run JavaScript and HTML and CSS based projects locally on people's computers so you can just select the git ignore template node and if it doesn't make sense don't worry it's not important right now and finally you can also select a license so when you put up any code on the internet specifically on GitHub you can inform people what you what they are allowed to do with the code are they allowed to build on top of the code are they allowed to use the code for academic purposes are they allowed to use the code for commercial purposes you can specify all of that and one of the most common licenses is the MIT license which basically allows the user of your code to do anything they want to do with the code whatsoever without any warranty okay so that is just a common template so what you'll often do when you create a new GitHub project is you will add a readme file you will select a get ignore template for JavaScript or HTML CSS projects the this is typically node but let's say if you were doing a python or a data science project you could select Python and so on and you will also select a license in many cases MIT license should suffice and you can learn more about all of these the readme file the G ignore and the license by checking out these links okay now finally as I said git has a concept of branches so the first thing you have to do is when a g GitHub repository gets created it has a default branch and the default branch is often called the main branch okay the main branch is where the main version of your code lives but you can then create multiple branches as you're working on specific features and then you can um bring those code from those branches back into the main branch now for now uh we will go ahead with main as the default Branch but know that sometimes in some older repositories the the default Branch name was called Master M but the new convention is to call the uh default Branch main so that's what we'll go ahead with Okay so let's hit create repository and now our GitHub repository is created perfect so you can see now you have this fairly complicated looking interface you have a nav bar here then you have a bunch of buttons then you have a bunch of tabs then you have again some options Etc so I know it looks complicated but we will touch on almost all of these tabs over the course of the next several lessons and over the course of the program but for now what I want you to pay attention to is this area so here is your username you will see your username here and next to your username you will see the name of the project so the name of the project is Jovian career site life typically these are are all lowercase and typically these are all separated by hyphens and then in the code tab you're going to see that in the main branch which is the only Branch we have right now we have three files so our repository has been initialized you can see that there's an initial commit we'll talk about comets as well one minute ago with three files one is a readme file one is a license file one is a get ignore file and you can open up this license file and you can see what it contains similarly you can open up this G ignore file and you can see see what it contains and you can open up this readme.md file and you can see what it contains so again this is all created using markdown which is a fancy way of writing text so there are three files in our repository and at the moment our GitHub project or repository has been created so we can already go ahead and share this with other people let's say we want to share our code with other people we can take this link and share it with them but of course we don't have any code here right now so the next thing we're going to do is actually import our code into this repository now there are two things we can do we can actually start writing a writing some code or we can start importing some existing code that we already have in both cases we need to open up this git repository in a code editor now you can download this git repository to your computer and then open it up in VSS code or any other code editor or you can also use some online platforms for developing on this GitHub repository specifically GitHub provides something called GitHub Cod spaces which you can think of as your own personal computer attached to this GitHub project or repository but living on the cloud all right so GitHub Cod spaces is a cloudbased development environment that allows you to write test and debug your code directly in the browser so it allows you to quickly set up a development environment without needing to install any software locally it provides a consistent development environment across different machines because you're writing all your code in the browser and the browser is connected to some machine on the cloud where all of the dependencies are already installed it also makes it very easy to collaborate on code with other developers because you can have real time shared code spaces so if you're writing code within a code space you can create a sharable link invite somebody else to come and collaborate with you live and it lets you work from anywhere so you don't have to work from a particular computer you can just open up your GitHub repository and launch a GitHub code space online and start typing code into it okay so you can think of it as a personal computer on the cloud that you can access from anywhere and you can check out github's documentation for setting up Cod spaces but starting a Cod Space is really simple what you do is you go to your repository folder and or you go to your repository on GitHub and you click this code button here and you have two options you have local and you have code spaces and here you can click create Cod space on Main so what this is going to do is this is going to set up a a computer for you on the cloud and it is going to associate that computer with this GitHub repository so you can see here if I zoom in a little bit it has set up this cloudbased computer for me and it has opened up visual studio code on that computer and it has given me a browser user based interface to connect with Visual Studio code on that computer so there's a lot going on here so instead of opening Visual Studio code on our own computer we have opened up visual studio code on a GitHub codes space which is a computer running somewhere on the cloud all right so this is what it looks like remember we on our GitHub repository we had these three files G ignore license and readme.md so if you come here now you can see that we have the same GitHub repository now open for editing in this code space accessible via these via this browser based Visual Studio code interface okay so within the browser we have Visual Studio code and I can open get ignore and I can make some changes here I can open this license file and I can make some changes here and similarly I can open this readme file and I can make some changes here okay but what we want is to actually put in the code that we already have from our previous tutorial which is the index.html styles.css and a couple of other files so here's what we'll do as you work on more complex projects it is going to it's it'll be a good idea for you to separate some of these configuration related files like G ignore license Etc with your actual source code so what I'm going to do is create a folder here so I'm going to right click and select new folder and I'm going to create a new folder called SRC so now I have created a new folder called SRC and into this folder now I can add an index.html file so I can say index do HTML and now I can maybe put in some HTML code here and maybe I can start writing things and so on but I already have a bunch of these files so I can just upload these files so let me delete this file once let me just delete this file index.html and let me upload these files from my computer onto this remote machine so I'm going to say upload I right clicked on SRC and I'm clicking upload and now I'm going to open up the folder my second web page and now I'm going to select the files that I want to upload so I want index.html I want styles.css I want team.jpg and banner.jpg and I'm going to click open all right so now all the files from my computer have been taken and uploaded into this Cloud code space this Cloud machine which I'm accessing using vs code from the browser okay now I can now we can actually go ahead and delete this folder entirely I don't need it but all of this code is still going to be here for me okay so remember we had this Jovian career side that we built the last time and this was built using this index.html file so let us yeah so let us look at this index.html file it obviously it has a head section where it has a title and it has a bunch of fonts that are included then it has a body section which contains a nav bar it which contains a banner and it contains this heading so we have a nav bar Banner heading then we have this about description section where we have some information about Jovian and we have uh links to the two programs and then we have this team image over here and then we have a list of job opportunities which is a table so that is the job opportunities table that you can see here and finally below this we have a form so form contains a bunch of form inputs and then there is a footer below the form which is what you see here as well so there is a form and then there is a footer below the form right at the bottom now of course these HTML elements are styled using CSS so we've set a base font size on the HTML and then we've set some body fonts and we've set some header fonts as well we've also set specific sizes for the headers we have set specific colors for headers and for body we've also set a bunch of other colors and then we've set a bunch of other CSS styles to make our page look as we want it to look and we have set some styles for the table we have set some styles for the form and we have set some styles for the footer and for the button okay so that is what our code looks like right now so for now I'm going to close this deployed website and now let's try and figure out how can we actually preview this okay so now we have some code already on this code space but this code is no longer on our computer this is on the remote machine so there's no place where I can double click and open it in a browser and preview it so there is an extension or a plugin that we can install into vs code for previewing these files all right so this is one of the nice things about vs code that depending on which language or which kind of project You're Building you can install some plugins to ease your development so I'm going to go click on extensions and then here I am going to search for live server okay so just search for live server l i s v r it is created by this person called rck day and you'll know because it has 32 million downloads so that is how many people actually use vs code and also use this extension and I'm going to click install in codespace and that is going to install this plugin into my codespace now once this plugin is installed into the codespace I can close this extension Tab and by the way the extension menu is here on the left so in the sidebar it is this uh fourth or fifth option yeah it's the fifth option in the sidebar so that's how you come to extensions and now now that I've installed this extension I can come back here onto my file explorer and now I can see here that on my index.html file if you see at the bottom here I have this go live button right at the bottom here so this is a new button that has been added by the live server or I can also just right click on index. HTML and I can say open with live server both of these are going to do the same thing so I'm just going to click the go live button what that does now is it is going to Now set up our code space to expose this file to the browser at a separate URL like this okay so now I can let me put this on the left and let me put this yeah on the left and right and let's close these let us also close the sidebar now you can see that here I have my codespace running on the cloud so my vs code running in the browser and I have a live preview of my code running here here open while using the live server in on the right okay now here is one nice thing about the live server let's say I want to go back and I want to change here I want to change about Jovan to welcome to Jovan and I just hit save that goes ahead and that automatically refreshes the page so the live server makes it slightly nicer to develop and I can also go and do this with the styles.css file I can say let's say change the default font size from 16 pixels to 18 pixels and I can save it and you can see that now the Styles file has been updated and now we have let's make it 20 pixels maybe and now you can see that the things are a lot bigger okay so this is one of the nice things about the live server all right so oops I think I pasted something yeah so this is one of the nice things about the live server you can go in you can make some changes here so you can say maybe I want to get rid of the word highly and I just save and that change changes this automatically okay so that is how you view the code that you are building that you're writing on especially when you're building a simple HTML and CSS page later on when we look at web Frameworks and uh things like react Etc then we'll touch on other ways to look at previews but on GitHub code spaces this is how you look at a preview of your code okay so just to quickly recap to start a code space you go to the GitHub repository you click on the code button and you select open with code spaces you can create a Cod space on your main branch if required and if you ever need to you get two free Cod spaces so if you ever need to delete previous Cod spaces just go to github.com SLC codespaces and over here you can go into your specific code spaces repository wise and you can go ahead and delete them in case you have a new repository that you want to develop using a codespace okay and then you can select a codespace configuration typically the basic configuration should be good enough then the Cod space gets created it takes 10 15 seconds and then you can just open up visual studio code in the browser or you can actually also connect your local Visual Studio code to the Cod space we're not going to go into that today but uh browser based development is good enough for most projects and then you can continue working on your code Spaces Project all right now in terms of how you do actual development well what you do is you can uh one thing that we recommend is that now anytime you're putting your actual web code uh you should create an SRC folder so to separate it out from the readme get ignore Etc just to keep things clean and now you can add files like index.html styles.css within the SRC folder and you can add code within them and you can also upload existing files or images by simply right clicking so you can open up the sidebar right click anywhere click upload file and upload a bunch of files and if you want to pre view HTML files within code spaces you just use the live server extension and this extension allows you to see your web pages as you develop them and for that you just go into the extension section here in the sidebar and you search for live server install it and then you go back and just click go live and you can also shut it down there's a button right at the bottom to shut things down as well and once you do that you'll be able to see a live preview and you can make changes for example if I change welcome to Jovian back to about Jovian that is going to quickly change over here as well now this is all well and good I'm making all these changes but if I go back to this repository you will see here that it still does not contain the code that I have actually added so I've added a bunch of files but they don't seem to be here in the GitHub repository well remember this remember this setup so we created our repository on GitHub and then we pushed that code or we pulled that code into a code space which is essentially a remote computer on the cloud and now we made some changes into our codp space machine using vs code now we need to push these changes back to GitHub to actually save them back to the remote repository so that's what we're going to look at next okay so how do we do that well it's a threestep process and we're going to first stage our changes next we are going to commit our changes and finally we are going to push our changes and this is where some of the GitHub terminology will start kicking in you might wonder why do we have threestep process why can't I just hit save well this is just how git was designed to handle a bunch of different use cases and that is uh what we are struck with unfortunately but uh once you do it enough you start to get used to it and I'll show you some easy ways of doing this without having to type or remember a lot of things okay so here is how works the first thing we need to do is we need to open up a terminal so git added score is a command line tool so you need to actually type out some commands on a terminal or a command line so we need to open up a terminal to run some of these commands of course we have our code space somewhere on the cloud here so we will need we can't open up a terminal on our computer we need to open up a terminal on this remote machine which is in the Cod space fortunately vs code provides an INB built terminal so you can just click on these options here and you can say View and you can select terminal so view terminal and now that is going to open up this terminal window okay and what is a terminal a terminal is simply a place where you can issue commands you can write commands and those commands will get EX executed on the computer so before we had graphical user interfaces uh operating systems were just terminal based text based platforms where you could issue commands and even today most Developers used these command line or these terminal commands to run a lot of their code and to interact with Git for example okay all right so now we've opened up this terminal so it has this you can see that this terminal it has a bunch of information already it tells you who is the current user so the current user is Sydney Jovian that is the name of our GitHub user it has the current directory or the current folder on the codes space where we are currently at and it also tells us the branch that we are currently at so so it's an informative prompt and now here we can start typing our terminal commands so the First Command that we need to do or we need to type is called git ad okay so the first thing we need to do is or actually even before we do git ad we can just type git status to see what status our repository in is in are there any new changes that we have made since we have checked out the repository from GitHub so if I type git status you can see here that it says that you are on the Bron Main and then there are a few untracked files and there are a few untracked files and they are the files in this folder called SRC so the entire untracked the entire SRC folder is untracked by untracked we we mean that git has no idea about these files it has never seen these files before so the first thing we need to do is we need to Stage these files so we take the files from our working directory and we stage them which means we tell get that okay these are some files that I'm interested in potentially putting to putting back on GitHub so I'm going to Stage them by saying first of all I'll just reset it U so anytime you want to reset the terminal just type reset and I'm going to just stage this by typing git add SRC and SRC SL what are all the files that I want to Stage I want to Stage index.html banner.jpg styles. uh CSS and team.jpg well I'm just going to type get add SRC and that is going to add all the files present within the Sr C folder into the staging area okay so now if I type get status again this time you're going to say that it's not saying that there are any untracked files so there are no more untracked files there are some files which are ready to be committed okay so now in my staging area which is nothing is yet put into the git repository yet we now have a four new files okay great so now that we have staged these files so from working directory we've staged these files the next step is to actually record a new version of this entire repository by performing a commit so here is what we do after adding a g dot a git add so I've reset things again now I type git commit and then I say minus M and then I provide a message so adding the HTML and CSS files now I have to provide this message within quotations so you can see here get commit if I have if I need to zoom in a little bit likely this is fine get commit minus M and then I provide a message and the message is within code so now I'm creating I'm recording a new version of my code by creating a commit and I'm giving it the message adding HTML and CSS files and I press enter okay and now it says that okay now it has actually inserted four files into my repository so now you can see that now we have the create mode uh now we have created a file called Sr c banner.jpg Index Styles and team.jpg where are these files created they were already present on our codespace well they have been now created and saved within our repository formally saved okay and now if I reset once again and I say git log now git log is used to view a history of all the commits and now you can see that there are two commits or two times that I've recorded a version a commit is simply a version of the code so there was this initial Comm that was done at such and such time by such and such author the initial commit was done and then I have done a second commit and in the second comment I have added this HTML and CSS files so that is also something you can see okay you can in fact do get log minus minus stat and that is going to tell you what is the change in each comit so here you can see that in the initial commit we added a GE ignore license and readme.md file so I'm just using the arrow key to go up and down and in the new commit adding the HTML and CSS files I have SRC Banner index Styles and these are the number of lines in each of these okay now often when you run some git commands you will have to do this scrolling using your cursor up and down cursor so here's a quick trick to exit this just type Q to exit this okay anytime you're stuck in some git command output just press q and you should be able to exit all right so let me reset that again and let us check G status so now it says we are okay we are on the branch Main and there is nothing to commit our working tree is clean which means we have no untracked files we have no tracked files with with changes to be committed so that's fine so we have taken our working directory changes we have first staged them and then after staging we have committed these files let's see if these have shown up on GitHub yet no these do not seem to have shown up on on GitHub yet we still have a g ignore we still have a license and a readme.md so once again coming back to this what we are doing here is so far we're still just recording new versions of our code on this code space machine we need to push these changes back to GitHub that is where the git push command comes into picture and you can see here there is actually a hint here saying that your branch so our main branch the main branch on our code space is one commit ahead of origin main origin typically refers to the remote server the whatever repository remote server from where you've actually pulled this code so we are ahead of our origin or we are ahead of the remote server by one commit so we need to push our commits so here's how we push it let me reset that again let's just type git push and then we provide origin so we want to push to origin which is sort of the remote server and we want to push the main branch so get push origin Main and I press enter and now you can see that we are packaging up all of these new com new changes that have been recorded in the new commit and we are pushing this to the Cloud Server okay so now what happens is we have made some commits here we've pushed them back to GitHub and now the next time we run a c Cod space or somebody else runs a Cod space on the same repository a collaborator maybe they are going to pull the latest changes all right so that is how you actually push your changes back to GitHub so once again I reload the page and now you can see now finally we have this SRC folder over here and in this SRC folder we have this index.html file so that's great that's exactly what we expect and we have the styles. CSS file and so on okay so that is one way in which you push your changes back to GitHub sorry about that so that is one way in which you push your changes back to GitHub so just to recap you open up the inbuilt command line terminal using the browser based vs code window then you review the changes that you've made using git status and git diff commands I'll talk about git diff in a second then you can stage the changes that you have made by typing git ad a specific file name or you can just type git add Dot and that is going to add all the files that have been modified or added then you can commit your changes the the changes that you staged by typing get commit minus M followed by a commit message inside quotations commit messages are very important because they give you a short description of the change you're making and finally you can verify that the change was made using git log and you can push your changes to GitHub by simply typing git push origin main or in the case of the main branch you can just type get push so this is typically the workflow you have you add some files you commit them and then you push them and if there are new changes that are made on GitHub you pull them back onto your computer okay so if I run git pull origin Master for example you will see that or sorry git pull origin main so if I run git pull origin main for example you will see that I'm already all up to date now what is origin origin simply refers to that remote server from where you have pulled the repository originally so it is the origin of your code it is the original place from where you've pulled your code okay and again this is a where G gets confusing of origin remote this and that but um that's what origin means okay now one other thing I want to tell you is let's say we make a change here so we say about instead of about Jovian let me change this back to welcome to Jovian so the live server should also reload to show Welcome to Jovian and now just to quickly recap the flow I can check G status and you can see here that now we have modified the for now we have modified the file SRC index.html okay now it is telling me that something has been modified now whenever a file is modified you can actually see what changes have been made by typing G div when you type G div GitHub is going to show you in red it is going to show you which files have been removed which lines have been removed and in green it is show going to show you which lines have been added and everything else in black is simply the U code around that line so it is telling us that in index.html we have removed one line and we have added one line okay and that is how GitHub tracks or git tracks changes it tracks deletions from a file and it tracks additions from a file okay and once again we can now do get add dot we can then commit we can then push but there's another way to do it directly within vs code so you can click on this third button here called Source control in the sidebar and what this tells you is this shows you under this changes section it shows you all the untracked or modified files so it seems like there is this index.html file that seems to have been modified and there's also this settings. Json file well maybe I don't need this file so I'll just delete this file for now let me just come back here and let me just delete this entire folder maybe it got added somehow I don't need it right now but anyway coming back here so now I have this index.html file and in this index to HTML file if I click on it from the git sidebar I will be able to see the changes that have been made so you can see that in index.html it is showing me a comparison between the original version which contains about Jovian to the new version which contains welcome to Jovian so we have removed about and we have added the welcome to or you could also think of it as we've removed this entire line and added this entire line okay if we made some more changes for example in index.html let's say let's also remove let's also add the word most highly reputed and let us come back here and let us check you can now see that apart from this one change we also have the second change over here so you don't actually need to run the git div command you can simply come in into the into the git sidebar and you can check the changes let's maybe go back and also make a change into styles. CSS let me change the body font color instead of 444 let me change it to 444 a slight change and once again I can go here into the G git sidebar and I can see that there is a change made in styles. CSS and there is a change made in index.html now I can go ahead and Stage these changes one by one so I can review the changes in each of the files by looking at the diff or the differences and then I can stage these I can click plus here and I can click plus here so remember the flow we first have to add the files to Stage them so I can click plus and Styles has been staged or I can unstage it like that but let me just stage this and let me stage this or I can also stage them both together by using this single plus button now you can see that we have a couple of stage changes and no other changes no unstaged changes so internally vs code is simply running these git commands for us so that we don't have to run them but you should be still familiar with Git commands in case you don't have the sidebar or you're able you're not using vs code okay so now that the changes are stayed we can type a message here so let's say updated index and styles and now we can click commit okay now the changes have been committed so we've added the files and now we've committed the files but now we still have to send these back to GitHub so now we can click sync changes and now it says this will pull and push commits from into origin Main and I'm just going to say okay and now my changes are going to be sent up completely okay so that is the other way to send updates to GitHub make some changes come here then stage those changes and then commit those changes with a message and finally press the sync button and that is going to push the changes up to GitHub all right so two ways to do it I generally prefer doing it from the terminal just so that I can keep getting some practice so I prefer doing it from here from the terminal but feel free to use the user interface as well both are equally good enough both do exactly the same thing okay so as an exercise I encourage you to look up the documentation or look up some tutorials to understand these git commands git status which tells you what untracked files you have or what are the files with some changes git diff which shows you what are the exact changes in each of the files git ad which can be used to Stage your files so go on go from the working directory to the staging area and you can add individual files or you can add all files or you can add a folder at once then git commit which is used to actually record a new version then git log which is to see the history of comits that you have and finally get push to push these changes to the remote server or origin server and you also have get pull in which which is used to pull the changes from the origin server in case somebody else has pushed some new changes okay now all of these commands also support some options so you can check out some what their options online and you can also use GI help but the thing with G is you have to practice you have to try these out a few times you have to get stuck a few times and only then you start to feel comfortable but we've already covered six G terms and there are a lot more that are going to come but at this point I want to switch gear and talk a little bit about Cloud deployment so now we have our Jovian career site live you can see here that we can see um we can see it's history that three commits have been made so far on GitHub we can see that there's an SRC folder and that was recently updated with the index and styles that we committed directly from vs code and there are some other files from the initial commit how do we take this and how do we easily deploy it to the cloud we're going to do that using this platform called worel verel is a cloud platform that makes it really easy to deploy websites and applications and it offers a seamless integration with GitHub and other Version Control Systems allowing developers to deploy their projects almost seem almost instantly without any additional coding or any additional work so here is what we are going to do we are going to sign up on wor.com so let me just sign up in case you're not signed up already you'll need to sign up I am already signed up and signed in so I'm good to go then uh you will be taken to the verel dashboard as soon as you sign up let me zoom in here and you can add a new project so I'm going to select new project and when I select new project it is going to ask me access for my GitHub repositories so once one when you're signing up try to sign up with GitHub so that you can give permission to sign up using GitHub directly but second when you actually try to create a project versal is going to need access to your GitHub repository so that it can it can pull out the code and it can then deploy them to the cloud not just public repositories but also private repositories so you can either give access to all repositories or you can give access only to select repositories and you can select which repositories you want to give access to in my case I'm going to give access to all repositories and it is going to have access to read and write because it is also going to write some things into your pull request which we'll talk about later but in general yeah you need to give versel full access to your code so that it can pick it up even private code and deploy to the cloud okay now let's click install so that is going to install the worel GitHub application essentially and now at this point you will see this new project box and in this new project box you can select which GitHub account to use in case you've connected multiple GitHub accounts and from that GitHub account you can select which site you want to actually deploy so I am so my repository is called Jovian career site live so I'm just going to click import Jovian career site live and now I have to configure the project because versel has configurations for all kinds of various different projects so you can see here that it has a bunch of different um preconfigured Frameworks and first you can set a project name I'm just going to keep the project name on worell the same as the project name on GitHub no change here so join career site live the framework preset I'm going to select other because I'm not actually using a framework I'm just using simple HTML and CSS files then I need to select the root directory which needs to be deployed so remember we created this SRC directory we don't want to deploy our GE ignore file and license and readme.md that's not something we want want to put on the website itself that's something that we want to just put on GitHub um so let's select the SRC folder or the SRC directory as a root directory so I'm going to click edit here and I'm going to just select the SRC directory as the root directory and click continue so we are telling verel that we have a simple website no framework and we are simply going to pick the code from the SRC directory and just directly deploy it to the cloud and there are other settings which we don't need right now so I'm just going to click deploy now as soon as we click deploy versel has pulled out all the code from our GitHub repository it has set up a machine on the cloud conceptually speaking and it has deployed the code and you can see here that this is what the deployed site looks like okay you can actually click continue to dashboard and here you can see that we have a preview of what the deployed site looks like and we also have links to a couple of deployments so by default your project name doval doapp is the location of the deployed website and let me just zoom in here so you can see now we have deployed our website so now we are developing on GitHub codes spaces and we are pushing our changes back to GitHub and then we are we have connected our GitHub repository to verel and verel is picking up the GitHub repository the main branch and it is deploying it automatically right you can see here that it is deployed automatically so that is how easy it is to deploy and the next thing you can do is anytime you make a change let me come back here in index.html and let me just change this to about chovan and I'm just going to make a quick commit here so I'm going to Stage the change I am going to commit and sometimes when I uh when I try to commit without a message It'll ask me to put in a commit message so let me just say change to about Jovian and let me close that so now it is committed now I'm going to push again and okay let's push it now the changes are going to get pushed now the changes are pushed here to Jovian career site life you can see that we just changed to avoid Jovian and once you push what happens is you can see that a new deployment is going to be made by versal automatically so you can actually see a history of deployments you can see just 3 seconds ago a new deployment was made and this new deployment was made on the commit change to about about Jovan so on verel welcome to Jan changes to about J so anytime you make any changes to your GitHub repository and push the main branch or you make changes on code spaces push the main branch to GitHub versal automatically picks up the new change from the main branch and automatically redeploys it isn't that nice that all you have to do is just go on coding here and keep checking your live preview whenever you're ready you can just go in and you can just add all your changes commit them and push them and once they are pushed versel will pick them up and deploy them and that is a deployment workflow that you are going to work with more or less right so you go to wor.com sign up for an account once you sign up you create a new project and you choose the repository that you want to deploy it supports GitHub gitlab and bit bucket and you you will have to connect and give access to verel then you choose the project root folder in this case it is the SRC folder and then you click deploy and then it creates a deployment so it builds your project deploys to the cloud and whenever you push new changes to your repository especially the main branch versal will automatically build and deploy your project so that creates a very nice workflow now one of the goals in the problem statement was to add some meta tags and improve the previews of this web page so now we have this Jovian careers site live dovala but one thing you'll see here is if I zoom in a little bit here you you see you see it says my first web page at the top here and it also doesn't have a icon so it'll be nice to maybe get a jovian icon in here as well another thing that you can check is if you try to share this on LinkedIn or Twitter or elsewhere it's not going to show a nice preview okay normally when normally we expect to see a nice preview of our yeah normally we expect to see a nice preview of any website that we share on the internet so but that is not showing up so normally what happens is when when a website is found by Google or when a website is shared on let's say LinkedIn or Twitter or Facebook they automatically pick up this preview image there's something that can be configured and they automatically pick up maybe a title and a description all of this so where does this come from well all of this is done using some special tags special HTML tags called meta tags HTML metatags provide information about a web page to search engines and browsers and they are placed in the head section of a HTML document and they're not displayed on the page itself so you can actually use a platform like hea.com you have these tools like hea.com to actually check what the preview for a particular web page is going to look like so let's say if I just copy this my first web page link and put it here and I check what the preview is going to look like so you can see here that there is no preview image and the title of the web page is simply my first web page which is not very informative and there is no description as well so there's no description there is no image none of that on the other hand most modern websites so let's say www. jan.com if you share this link with somebody on social platforms or maybe just check on hea.com you'll see this preview image build a successful career in TG this is not there anywhere on the actual page but this is just for the purpose of preview and you will see that it has a nice title and it has a nice description as well um so all of that is something that is going to show up automatically so all of this is achieved using meta tags so there are several types of metatags each with its own purpose so here are some of the more common metatags that will be used in most web pages there's something called a meta car set this is used to inform the browser what is the character set there are several character sets there's something called asy something called UTF Etc what is the character encoding that this page is using so this is often something that is set to utf8 then there is something called the viewport meta tag this is used to inform the browser how to scale up or down how to zoom in on or out the website on a mobile screen again there is a standard value that is preferred for more modern websites then there is this meta name description and this description is actually picked up by platforms when you share this link when you share the website as a link so the description is not actually shown on the page but it is just picked up as a preview by Google and whenever you share the platform elsewhere you can also set a meta author not particularly useful these days and you can also set meta keywords and meta robots uh meta robots provide some instructions whether search engin should Index this page or not and meta keywords is used to specify some keywords that are that were used in the past for search engine indexing but are not now very less important okay there are also platform specific meta tags so you can take your url your website URL and make it show a different way on Facebook and a different way on uh Twitter for example so there is this property called OG title so this is the title that is going to be picked up by Facebook LinkedIn and several other sites OG stands for open graph and there is this property called OG description which is uh picked up for description on Facebook you can also specify this image using OG image this is the image that shows up here and finally you can specify similar title description and a card setting for Twitter as well okay so those are all the meta tags that you can have on your we website on your web page and apart from this you can also have a title meta tag and a Fab icon link tag so the title this title is not a metatag exactly it is simply used to set the title of the page so this is also important because this is what shows up on the browser Tab and you have a link I a link tag which contains something uh a link to an image called a fave icon and that image is the image that shows up over here so right now you're just seeing a small web image here but instead let's say here you have the GitHub logo and elsewhere you'll see the the Jovian logo on Jovian let's say I open www. jan.com you see the Jovian logo so putting a logo here in the browser tab is done using the fave icon okay so what we'll do is we'll go ahead and add a bunch of these metat tags to our web page so we can take all of these meta tags we have caret utf8 name viewport description keywords author robots Etc and we are going to add them all to our project and specifically a couple of images also need to be added see we have this one meta tag called OG image and that we going to set as Jovian met. PNG and the file Jovan meta PNG is here so you can download it in case you want to add it yeah this is the this is the image that we're going to use as Jovan met. PNG so I can just save this image to my desktop and then upload it to Cod spaces and we also have a meta image for our fa icon so this is the fave icon that we going to use this is the icon that is going to show up on the browser over here okay so again these are not things that you learn in a introductory HTML course but to build good practical modern websites you need to have good metatags otherwise your websites are just going to look random on the browser or when people share them okay there's more information you can learn about metatags here but uh these are the tags that we're going to add into our web page all right well so now we want to add meta tags so we basically want to add all this code into the head tag of our index. HTML file and we know how to do this we just copy the code put it into index.html then stage the index.html file then commit it then push it but uh before we do that we're going to take this opportunity to maybe also learn the GitHub collaboration workflow because what is going to happen in the real world is that you you're not going to directly make changes to the main branch as you can imagine let's say Jovian the website is running and before we actually make push any new changes we may want to get them reviewed we may also have a situation where multiple people are working on multiple changes and if they're all cons constantly pushing to the main branch then they may all be just overwriting each other's code so that is why GitHub has this collaboration workflow powered by branches so what you do is you have your main branch or your master Branch from your master Branch you create create a feature branch and we'll talk about branches in just a second and then in that feature Branch you add a bunch of commits so one by one you keep adding comments into your feature Branch then what you do is you create a pull request so you using all the changes that you have put into your branch so far you create a pull request on GitHub and in the pull request you can basically list out the changes you've made the poll request will also have all the code changes between your branch and the main branch and and the team can then review your PLL request so somebody from the team can look at the changes you have made and they can make comments on your poll request so they may make some comments and then you can then make more changes make new comments based on those comments you can fix the things that are not working as expected and once all the comments are resolved somebody from your team can possibly approve your approve your changes and once your changes are approved you can then merge those changes into the main branch okay so you can take the new changes and you can merge them into the main branch and then of course we have versal set up already so as soon as the main branch gets changed after all this discussion and review then it is going to get deployed automatically so this is how we safely develop software we take out a branch which is basically we extract out a copy conceptually speaking we make changes to that copy we keep adding commits we then set up a pull request people comment on it we make changes to it we do whatever testing we need need we'll also see how to generate a copied version of our site which is which can be used for testing and then once we are ready we approve the pull request merge it back to master and that is going to trigger a deployment so that is how the GitHub collaboration workflow works and it's not just uh that you will be using a single Branch at a time but here's what might happen that you may have your main branch somewhere and then somebody you may start a new Branch you may start making some changes and then some changes may get added to the main Branch from other people and then somebody else may start another branch and then your branch may get merged and then their Branch may have to get merged so this is how the GitHub development workflow works you anytime you want to build a new feature you create a new branch make changes on the branch get that reviewed get that get that approved merge it back into the main branch and the main branch is the source of Truth for what is going to go live on verel or whichever deployment platform you're using okay so this is the this is the workflow that we're going to follow and the first step in this workflow is to create a branch so what is a branch well a branch branching is a very fundamental feature of git and GitHub that allows developers to work on multiple versions of the same codebase simultaneously so you can use it to work on five tasks at a time or five features at a time or five different people can use it to work on different features without disturbing each other's code okay and a branch is essentially a separate copy of the code base conceptually speaking that you can make Chang just to without affecting the main branch which is usually called main or master so here is how you create branches within git or using git or within GitHub code spaces first we open the terminal so once again I go in here I say view terminal now I have the terminal open here and let me close the sidebar so the first thing you do is you type git branch and then you type type the name of a branch okay so you say git branch and I just want to add my meta tags here so I'm just going to call this Branch add hyphen meta hyen tags so you always use lowercase letters like add hyphen meta hyen tags all lower case and you always generally separate by hyphens you can also separate by underscores if you want one other convention is to also maybe put your username before the branch so you could I could also create the branch as such Akash in is/ add meta tags but this is a good convention so that multiple people don't end up creating branches with the same name accidentally uh in my case I'm just I'm going to just use the shorthand AA for myself so aa/ add metatags that's what I use at Jovian okay so we creating a branch called aa/ add metatags okay the slash does not have any special meaning it is simply a separator that I'm using I could also have said AA hyphen ad meta tags and it would be the same thing but it's just a little nicer to look at okay AA hyphen ad metat tag so now I'm creating a branch so a branch has been created but we are still on the main branch here you can see here here I'm still on the main branch so now we need to switch to this new branch that has been created now the way to switch to a new branch is using the git checkout so you say git checkout and then you type the branch name so aa/ add meta tags now we have switched to the branch AA hyphen add aa/ add meta tags great and that is something that is displayed here as well now that we have switched to the branch we can now start making commits into this Branch so here is how I might go about making some comment so I might first let's see here I might first maybe just replace the title and the fave icon so let me just grab the title and the fave icon here and I'm just going to replace that over here okay and I will just test that so now when I reload the page you can see that now we have Jovian careers and okay this still doesn't have the fave icon maybe the fave icon will come in when we actually deploy but looks like at least the title has changed okay so I've made one significant change so I'm just going to Stage this change I'm going to say added title and fave icon and I'm going to commit okay I'm not going to push my Branch yet I want to make a few more comments before I push my Branch okay then maybe I might figure out okay I might talk to the marketing team I want I might want I might figure out what they want as the OG and the Twitter meta properties so I will add those and then I might talk to maybe the engineering team and figure out that okay what are the other meta properties are required let me grab all of the remaining meta tags and let me come in and let me just paste them here okay so I'm just simulating an example where you will be making small changes step by step and making multiple commits so I've gone ahead and made these and of course now for this OG image and for this Twitter image I need to actually upload this image file and I also need to upload this fave icon file okay that's why the fave icon is not showing so I'm going to let me first add the metat tex I'll create another comment where I upload the files so again I can go in here I can say add the changes I can commit so let's say added meta tags I can commit great perfect and now I can go ahead and I can actually upload the files so I can come back here I can say right click upload let me grab Jovian met. PNG Jovan fav icon.png upload them they are added as well and once again I can go in or I can also do this from the command line so I say view terminal and I say reset and let me just do git status okay looks like there are a couple of new files so let me do get add Dot and let me do get commit minus M add fave icon and meta image okay all right so I've not pushed my changes yet so I have a bunch of comments here on this particular Branch if I just check get log or I can actually just if I just want to see the list of changes I can say get log minus one line okay so I so my Branch AA hyen ad meta tags is at the commit add fav icon and meta image before that I have another comment before that I have another comment so I've made a bunch of comments now once I have made a bunch of commits once I have made a bunch of commits I can then open a pull request so to open a pull request here's what I need to do first I need to push my Branch or my changes to the remote repository and the way I can push them is by saying get push origin followed by Branch name AA hyphen add meta tags okay of course I can also achieve the same thing by just clicking publish Branch here but I'm just going to do it from here and once that is done you can now see that a new Branch will have been pushed to the GitHub repository how do we verify that well if I open the GitHub repository and I just reload the page you can see this there's this message here that this uh tag this had recent pushes of course there's this trigger but you can also see here that we have two branches now so earlier this was just saying one branch so I can actually go and select the other Branch so the commits that I've made together I can package them as a branch and I've pushed it to GitHub and now I have this on the main branch you can see here that SRC index.html doesn't have any of the meta tags my main branch is unaffected but if I change to the branch add meta tags on this Branch you can see that all the tags are present okay so this is how you push branches now what you can do is you can make more commits you can push the branch again so you decide what you want to do typically any small change I make I make a commit and then once I have a bunch of small changes that are significant enough I push the branch okay but coming right back so now we have pushed let me come back to the main branch here now that we have pushed the branch then now that we have pushed the branch the next step is to create a pull request so how do we create a pull request and what are pull requests so pull requ requests are a way to propose changes to the code base and get them reviewed by other developers and then get them merged back into the main branch all right so let's create a pull request so first we are going to come back here we are going to go into the pull requests Tab and into the pull request tab again you can see that there is notification here GitHub tries to be helpful where it tells you that if you recently pushed a branch it'll tell It'll ask you if you want to create a poll request but in case this notification is not showing up you can click new pull request okay and now you can select the base branch which is where you want your changes to eventually go and the branch where you are making your changes which is ADD meta tags okay so now I've selected that these are the two branches and I can actually verify what are the changes so it seems like from the main branch I want to remove this existing title and I want to add a bunch of these meta tags and seems like I also want to add a couple of images files okay so I can review the commits that have been made on this Branch I can review the changes between the main branch and this new branch that I'm I'm proposing and then I can click create pull request and here I can give the pull request a name and typically you want to give this a description of the change so added meta tags title and fave icon and it's Al also a good idea to maybe provide more detailed description of the changes so you can say changes one is added or updated the title tag then you can also mention okay added images for fave icon and meta poster or meta Banner then you can say added meta tags including OG and Twitter tags and finally you can also mention added the fave icon link tag okay now let's say you've tested these changes you might also want to say what you've tested so test cases checked so you can say something like verified the title showing up and maybe you might want to verify later and add later that you have verified the fav icon showing up and you verified the metatag showing up okay and then you click create pull request so that's great now now the pull request is created and now somebody else on your team who is a collaborator on this repository can go ahead and review this PLL request so let me first go ahead and add a collaborator here so I'm going to go into settings I'm going to go into collaborators and I'm going to add a collaborator here let me just add Akash and S and I'm going to invite this collaborator let me go back to the poll request okay so this this pull request now has a description and there is this files changed which contains information about the files that have been changed so people can review that as well it also contains information about the commits that have been made so now let me go in and log in from a different account so I have a different account logged in here and I'm just going to accept the invite first so I've been invited as a collaborator here so I'm going to accept the invite so anytime somebody you invite somebody as a collab cator they get sent an email and they can accept the invite okay now that I've accepted the invite I can go here into the pull requests Tab and I can go check the poll request you can I can see that okay Sydney Jovian has invited me or has created the SP request I can check okay these are the changes that have been made I can maybe go in and then I can go in and maybe leave a comment so let me say for example I don't like this title I want it to be a little longer so I can say make the title longer please maybe at least 24 characters okay and then I can just uh start a review and I can add a bunch of these comments so I can add a comment maybe about the meta tag meta title here as well somewhere let's see this can be improved a bit and so on and once I'm done with reviewing I can just say um I can request some changes or I can approve and I can click submit review and once I've clicked submit review then these changes have been pushed back and now Sydney Jovian can once again go through the changes go through the comments that have made and make those changes okay so so again we are just trying to implement this workflow here where you create a pull request and then somebody posts a a bunch of comments and then you create new comments to fix those comments and you keep repeating this process till they're happy with it okay one other thing I want to show in this process is that if you see there is a versel bot that has added a comment here what worel has done is whenever versel notices a pull request in your GitHub repository it takes the code within that pull request and it automatically creates a preview deployment so I can click this visit preview and I can actually preview the changes okay okay I can see here that now it says Jovian careers instead of my first web page and there seems to be a bunch of uh um this image seems to be showing here as well and there are no changes in the actual page but if I were to maybe take this and maybe go into metat tags.io a platform for checking metatags I can actually check that okay it is showing Jovian careers and it is showing a description here image is not showing up I can investigate why the image is not showing up but it looks like the meta tags are now showing up okay so this is one of the nice things about using verel what it takes it takes your branch your pull request Branch it deploys that and it adds a link to that without disturbing your original page so you can see Jovian career site this is like that Branch preview but your original site which is over here Jovian career site still says my first web page it is not updated so your main branch is safe but for your pull request you have a preview deployment that you can study okay all right so let's go in and fix these quickly so I'm just going to go in and fix these comments so there is a comment here that says make the title longer please maybe at least 24 characters so I'm just going to add maybe here build a successful career in Tech and I'm going to add the same title here back in the OG title like that okay I've made I fixed the title learn more about job openings and submit your application now well I don't think I'm going to update that I think I'm happy with the way things are here so I'm just going to click commit and let me see I'm just going to Stage my changes and let me say updated title and I'm going to click commit and I'm going to publish the branch so now once the pull request has been created created anytime you publish the branch again the pull request will automatically be updated okay so let's come back here and let's reload this page and you can see that this new commit has been added and veral is automatically going to take this new commit and it's going to deploy it so it's nice like that so if I go back and check the deployment this time it has not just Jovian careers but it has Jovian careers build a successful career in Tech it has the full thing that I've mentioned now I can go in and I can say Okay resolve this conversation so this is fine and then um here I can say I think this is fine as it is and I can resolve this comment and resolve this conversation as well okay so this is what you want to do you want to resolve all the comments and then uh the reviewer may go back and make some more comments and then you resolve those comments and so on and the reviewer and you both can use the prev deploy employment to test out your changes preview the changes live as well okay now the reviewer can eventually be uh can eventually come back later in the day or maybe the next day and see that okay all their changes have been resolved so then they can go ahead and they can approve the pull request so they can go back into this files tab and they can go in and they they can approve the pull request like that and once the pull request is approved then the changes can be merged back into the main branch Okay so so far yeah so so far we are still at this stage where we have deployed we have done a done a preview deployment and the P request has been approved but to merge it back we can come back into the pull review page the pull request page and at the bottom we can see that once all the approvals have been uh have been received and you can set conditions this at the repository level then you can click merge pull request and you can give it a a commit message and a commit details and then you can click merge and that is going to now merge this to our main branch okay so now this has merged and now if I come back into the code Tab and I see the main branch you can see here now it has this new commit called updated title so this is the work so this is the workflow that we have we created a feature Branch added some commits to it pushed the branch created a pull request then we invited a reviewer to comment the reviewer commented we made the changes we also looked at the preview deployment which verel automatically gave us a very kindly and we made sure that everything was working fine and finally the changes were then merged to the main branch and of course verel picks this up again and does another deployment so now if I go back and just reload the main versel page you can see that now the fav icon is updated the title is here is updated and I can also check so there's a place here that you can check meta tags I believe it's called hea.com yeah so I can also check all the meta tags now on Jan careers website live. w.app so now our careers Jin careers website has this nice title that is going to get picked up by Google Facebook Twitter Etc it has this nice image that will show up as a link preview when you share this link on LinkedIn or elsewhere and it has this nice description over here as well learn about job openings at Jin and sub submit your application now so great so we learned the we learned about metat tags but alongside we also learned about a GitHub collaboration workflow which is Branch full request get it reviewed iterate on it and then merge it once you have received the reviews okay so that's about branching with Git and that is about creating pull requests and I would encourage you to exercise this a little bit so create multiple pull requests with minor changes and then verify that each pull request gets its own preview deployment so if you have five pull requests there are going to be five preview deployments so verel gives you unlimited preview deoy deployments for free and then verify that the main site is not affected till a particular pull request is merged okay also one thing that you can try to do is try to see what happens if you have two pull requests and then you merge one and then you try to merge the next one so these are some exercises for you to try out git is a very applied skill so you have to try out all these things whatever questions you have just try it within 5 to 10 minutes you'll actually have your answer now let us talk about keeping your branch up to date so here is a scenario that might happen we already have two users now we have two collaborators one is Sydney Jovian and the other collaborator is and the other collaborator is Akash Andes so that's why I have these two windows in black and white so here I am signed in as aashis and here I am signed in as Sydney Jovian of course the repository still belongs to Sydney Jovian we are both collaborators on it now let us try to make changes in such a way that two people are working in parallel and once changes get merged into main while the second is still working okay so let's do this let us first go into this code so this is on the user aashan is and I am going to create a code space to start editing and it's going to take a second or two to set up the code space but once it's done I should be able to start editing some things here okay so inside SRC I have index.html and let me just just go in here and let me just change this to let me edit the title again let me change this to welcome to Jovian and let me change something in the description let me remove highly reputed let me just make it most reputed Technical University so I've made a couple of small changes here and let me also remove the word Jovian from the names of the programs let us just call it full stack developer boot camp and data science boot camp and let me just commit it so let me go into Source control let me add the changes and let me say made some changes to index.html and let me commit it and let me sync the changes okay I have synced it it looks like I made those changes on Main right so let me now create some more changes es and let me make those on a branch because normally this is not something we should be doing we should be creating a branch so let me add back let's say let me add back the word Jovian here let me add back the word Jovian here and let me add the word open job opportunities here and this time I'm going to first create a branch so let's see let me create a new Branch let me call this branch open job opportunity ities and now the branch has been created and now I'm on the branch now I can add my changes to the to my branch and let me commit them so added open job opportunities okay and now let me publish the branch so what I've done now is I have made some changes on Main and that will just go out to everyone for sure but then I've also created a branch out of main which I'm going to then create a pull request on so I can then come back here and looks like okay this new branch has been pushed let me click compare and pull request and let me just say added job open job opportunities in index.html and that's the same description for now let me create a pull request and the changes that have happened here are simply well the from the main branch I have simply remove added the word Jovian back and I have added open job opportunities here okay so just to show you what happened what we did was we had the main branch and then from the main branch we made another commit so we made some changes onto the main branch this was done by Akash so this was the main branch then we branched out of the main branch and made one commit and of course we could have made multiple commits on that Branch so this branch is the open job opportunities Branch right and this branch has been made by Akash Andes and we've set up a PLL request for this Branch as well right so let us call this pull request one now we've set up a pull request pull request one called added job opportunities in index. HTML now let us come back to Sydney Jovian okay and let us go back here to the main branch first so there is a selector here that I can use to go to the main branch so let's say here I've just checked out the main branch now the main branch on Sydney Jovan is a little bit behind my Old Branch the branch that has been created by Akash and S so let's say Sydney forgot to pull the latest changes before before working on a new change right let's say Sydney is uh working on some changes about related to to the dates of the front end developer backend developer Etc so what Sydney doeses is creates a new Branch to make his changes so I'm going to say Branch create a new branch and let me just say job date changes and create this Branch so a branch has been created by Sydney for his work and now Sydney is going to make the changes to the jobs let's say this is March instead of March 3rd this is March 13th instead of Fab 1 this is Fab 11 instead of December 22nd this is December 20 and here we change the salary to 85,000 okay and now let me commit these changes into the branch I have staged them so job changes and commit and let me publish this branch and now let me again come back here and let me create a pull request okay so once again these are job changes so job date changes and this is again something that I would want to merge okay and the only changes here are the changes within the dates so let's once again recap what's happening here so here aashis has first made a change to the main branch itself and pushed it and then created a new branch and created a pull request on top of it then Sydney forgot or did not have a chance to pull the latest changes on Main so Sydney created a few changes from the last version of Main and then made a couple of commits let's say and then set up a pull request let's call it PR2 okay so already things are a little out of hand Sydney is is Sydney's main branch on his own computer is a little bit behind and Akash is main branch is a little bit ahead and of course this is also the main branch on GitHub itself so that's why you have a origin has its own main branch but Sydney has its own main branch which is a little behind and now there is this pull request and now one of these pull requests is going to get merged let us say the pull request number one gets approved so let's say somebody on the team goes ahead reviews the pull requests that are all present so let's say they go into the pull request created by Akash and S and they go ahead and approve the pull request okay so they just approve it and they just merg that pull request so now what has happened is that Akash is changes have gone into master so now we are at the situation where this pull request has been merged back into master and however this pull request is still tracking the old main branch so now what we need to do is we need to update this second pull request to show changes based on the new new main branch okay so here's what we need to do we need to take the changes in the main branch and then incorporate them into the currently open pull request how do we do that well here is a stepbystep process first we check out the main branch then we pull changes from the main branch then we check out the feature branch and then we merge the main branch and then we push the changes okay so we'll do it step by step and it will make more sense okay so now I am here on Sydney's branch and on Sydney's I'm on Sydney's poll request Branch so I'm on the branch which Sydney has created for poll request number two and this is based off of a main branch which itself is very old okay so I'm going to show this on on the terminal but you can you can do the exact same thing from your uh from the user interface as well so first I am going to so I'm currently on the branch job date changes I'm going to switch to the main branch so get checkout main okay by typing get checkout main I have now switched on Sydney's codespace I've switched into the main branch on Sydney's codespace now of course Sydney's Cod space main branch is behind the main branch on the server we already know that because one direct commit was made and then one pull request was merged so I can do um the first thing I can do is I can do get fetch minus all what that does is that fetches the changes that are there on the remote but it does not apply them yet so it does not pull the changes it simply fetches information about the changes again more terminology I know know but we right now what we know is we we have now fetched information about what are all the branches that are present on the remote server and where are the where are they compared to the branches that are present on This Server okay let me now reset and let me type get status again and now I can see here that your branch is behind origin main by eight commits so looks like I'm fairly behind because a bunch of other pull requests were merged but here's what I can do I can say get full origin main so now what I'm saying is that I have my local main branch which is a little bit behind and then there is this origin main branch which is ahead if I type get full origin main then all my changes are going to get my my main branch is going to get up toate with the origin okay so what has happened now is that Sydney's local copy of the main branch has become up to date by with the main branch on GitHub okay that's fine now let us come back to our job openings Branch so I can just type get Branch to see the names of the different branches that are available and I can switch to the branch so I can say get checkout job date changes okay now I've checked out job date changes the trouble is my local Main is now up to date my local main branch is now up to date with what what is there on GitHub but my job main branch but my jobs feature branch is still pointing to that old main branch or that old main commit okay so what I need to do is I need to pull in these new changes into my job Branch okay so now we do get pull or not pull well actually we need to merge in these new local main branch changes this into the job Branch so we say get merge main so what we telling get now is that I'm on this job date changes Branch take the latest changes from the main branch on my computer which is already tracking the latest changes from on from GitHub and bring all those latest changes back into my feature Branch okay so I type get merge Main and this will ask me to then typee a message so I'm just going to say merge main into job date changes and once you type the message you can just close and now magically what it has done is is it has taken all the changes that have been made in the main branch on GitHub and we first pulled that into the main branch on our computer now all those new changes have been put into our feature branch which is job date changes okay and you can verify that here is how you can verify that you can see that we have Jovian data science boot camp mentioned here so that is there you can see that we have uh most reputed Technical University so all the changes that were made by Akash have now been Incorporated so what we have done essentially is we have taken the changes that have come newly and we have Incorporated them into the second poll request Branch okay one last thing to do here is that these changes are still local on our code space so I need to push these so I need to say get push it to the pull request so get push origin job hyphen date hyphen change changes and this should get pushed okay finally now we can come back here and we can see that job date changes has now been updated job date changes has now been updated with the merged changes into the main branch okay and now it is tracking against the latest main branch that is present and now somebody can come in and somebody can approve it and then this can be merged in now we can go in and now we can merge this change and put that back okay so I know that there was a lot going on there but I'll just first revise this so what we do is whenever new changes have come onto the main branch on GitHub and we want to incorporate them into our feature branches here's what we need to do first within our code space or wherever we are we are doing our development first go to the main branch our local main branch using git checkout main then we get the latest changes from the remote by by running git pull or git pull origin main so that our local main is tracking at the same place where our latest changes are on GitHub then we check out our feature Branch we say get checkout feature Branch name then we merge in the changes from the main branch that we have locally now into our feature branch and finally we push these changes to the remote repository so we take our feature branch and push it to remote so that the pull request gets updated okay so this is the workflow that you will do over and over as a developer you'll check out the main branch get pull check out the feature Branch merge the changes from the main branch and then push your feature Branch back to GitHub and these steps will ensure that your feature branch is updated with the latest changes from the main branch okay so as you have created a feature branch and you made some comits on it and made a pull request if new changes have come on to the main branch you can simply pull those changes in by following this workflow and then you can push your uh main branch back uh push your feature Branch back and your pull request will get updated and then the merging will happen seamlessly okay so that's how mer that's how merging works this is called uh yeah you're basically merging changes from the main branch into the feature branch and git is smart enough that if the changes were made within the same file but to different parts of the same file then things will work out just fine uh git will be able to combine all those changes from multiple users multiple commits together okay and again I encourage you to practice this create a branch make some changes create a pull request create another Branch uh and make some changes create a second pull request now approve approve and merge the first pull request and then update the second pull request to incorporate the new changes from the first pull request and repeat that process a few times using the command line and using vs code's user interface to see if you understand how this whole thing works okay now there are certain cases where two people in two separate PRS have updated this exact same line of code in which case there is going to be something called a merge conflict so let us try and simulate a merge conflict situation now by both users updating just the title of the page okay so let's do this let us first go back here into the code space that is being used by the user Akash NS and let me open up a terminal I'm just going to do everything on the terminal so that things are super clear so we are currently on the branch open job opportunities I'm going to first check out the branch get checkout main okay now I'm on the main branch on my Akash NS Cod space then I'm going to run G pull origin main so that I have the latest changes perfect I am going to get the latest changes on the Sydney account as well shortly but now I'm going to create a new Branch I'm going to create a branch get branch a ayen title change one okay I've created a new Branch title change one I'm going to check out that new Branch get checkout AA title change one so now I've checked out a new Branch so I have the latest Main Branch from the latest main branch I've checked out a new Branch now I'm going to come in here and I'm going to change the title of the page which is I'm just going to change it back to Jovian careers okay so I am changing the title of the page to Jovian careers that is one change I making and I will also change here welcome to Jovian to about Jovian so two changes I'm making I've changed the title to Jovian careers and I have changed well about Jovian to uh welcome to Jovian to about Jovian so those two changes and you can verify these changes by using G diff I can see that those are the only two changes I have made now I'm going to commit these changes so I'm going to say get add dot I'm going to get commit minus M change title and about Jovian okay now I have committed my changes onto my local branch and now I'm going to push my local branch to the to GitHub so I'm going to say git push origin a a hyen title change one so now my branch which is based on the latest Main and has a couple of changes one to the title and one to about Jovian has been pushed and now I can create a pull request using this Branch okay now I can go in here and I can say create a pull request I'm going to just call it change title so I've changed title to Jovian careers and and then change description heading to about Jian okay and I'm going to create a poll request perfect so we understand this flow so far we created a branch we made some changes we committed and we pushed it created a pull request and we can verify that it contains only these two changes it contains a change Jovian careers and it contains a change about Jovian perfect now let's say before this pull request was merged Sydney was also working on some changes where he's going to change the title so I'm going to say file view terminal or sorry view terminal I'm opening up the terminal again let me reset it let me also go back here to the master so let me say get checkout M or let me say get checkout main so now I'm on the main branch back let me also do GP origin main so I have the latest version of the origin main okay so in the latest main our title still has Jovian cers build a successful career in Tech and the title here for the description is still welcome to Jan because the changes were made in a pull request that is not yet merged to main okay so I hope this is clear to you that our main branch is still still has the old title and the old heading okay now I'm going to create a new feature Branch so I'm going to say get Branch Sy or for Sydney title change to okay fine and now I am going to come in here and I'm going to remove this part okay so I'm just going to remove the part build a successful career in Tech I'm going to keep the part build a successful career in Tech so maybe two people got different instructions Akash and has made the change to about Jovian he was asked to shorten the title and Sydney also got the instruction to shorten the title and he changed it to build a successful career in Tech and maybe I also go in here and change something about the job opportunities so I don't don't want it to say open job opportunities I wanted to say job openings okay and I have I will also check out this Branch get checkout sy/ tile change to and once I've checked out the branch I'm going to to add the changes so get add dot then I'm going to say get commit minus M change title and job opportunities okay now I've committed now I'm going to push this Branch so I'm going to say get push origin sy/ title change to now my branch has been pushed to the origin which is GitHub now I can come back here and create a pull request and here I'm changing the title so change title and job opportunity so here I'm changing the title to build a successful career in Tech all right yeah so the title is changed to build a successful career in Tech and then the change the job section header to job openings okay let me create a pull request here and let's see now so here now there are two changes on the title and on job openings here also there are two changes on the title but a different change to the title and on the job openings and both changes are made against the the latest version of Master now let us merge one of the pull requests so now let us go in here and let us merge this first pull request so what will happen is that when by merging this pull request which changes the title to Jovian careers in our main branch we are going to get back Jovian careers as the title okay so I'm going to go in here and I'm going to check mer click merge P request confirm merge and the pull request has been merged and I can verify if I go into code and check the main branch and check index.html it is going to have the change title Jovian careers okay so now the first PLL request has been merged the title of the page has changed to Jovian carers and the header of the first section has changed to about Jovian however obviously for Sydney the title of the change title of the page is whatever they have set in their feature branch and the heading of the first section is welcome to Jovian and not about Jovian and of course they've also made an additional change called job openings so now Sydney's feature branch is behind the main branch on GitHub so Sydney needs to update their feature Branch so let's update the feature Branch step byep step so I'm going to open the terminal again I'm going to reset things and remember the stepbystep process for updating the feature Branch first you go to get checkout main first you get to the main branch because our local main branch and code spaces is behind the main branch on Origin then we can check using get fetch minus minus all or just get fetch how far behind we are okay so we can say get status to check that we are behind origin main so we are behind the changes by two commits so let us run get pull origin main so now we are pulling the changes from the origin main branch on GitHub to our Cod space on the Sydney Cod space great so now our main branch is up to date but our feature branch is still tracking the old version of the main branch now we go back to our feature Branch so let's Che check the name of the branch okay the feature branch is Sy title change 2 so get checkout Sy title change to and by the way you can verify here that so far we are on the main branch and on the main branch it says Jovian careers which is the change that had been made by Akash Andes and the title of the first section is about Jovian which is also a change that was made by Akash as soon as we go into the feature Branch now we we have the title that was set by Sydney here and now of course we have welcome to Jovian because this is tracking the old main branch and we have this job openings here okay so now we need to merge in the latest the new main branch that we have just pulled in so we say get merge main let me just reset that and type that again get merge Main and here is what happens okay finally we've done all this setup to get to a point where when I try to update my feature Branch using the new changes that have come into the main branch I run into an issue because both of us are trying to update the same line aashis has updated so there are two things you have a current change which is the change in my feature Branch so in my feature Branch I have updated the title to build a successful career in t however when I try to merge in the main branch the main branch that has come from GitHub the latest main branch because of some other poll request has the title Jovian careers so both the main branch and my feature branch have been independently updated on this one particular line and you can see only this one particular line is an issue this this becomes about Joan as expected no issues here and this becomes job openings as expected no no issues here right so this came in from the main branch no problem no because we didn't change it in the feature Branch this change came in from the feature branch no problem because it was not previously change in the main branch but this change was made in the main branch as well which is called Jovian careers and this change was made uh made in the feature Branch as well which is called build a successful career in Tech so this is what git does it inserts this like random characters here which basically tell you that what do you have on your current branch and what do you have on the main branch and you can either edit it manually you can kind of erase all these characters or you can just use one of these buttons whether you want to accept the incoming change which means the incoming change is what is coming in from the branch you're trying to merge in which is what is coming in from main or you can accept the current change which is what you have in your feature Branch or you can keep both changes so here's what I'm going to do I'm going to click accept current change so I want my feature brand change to override what has come in from the updates in the main branch so I'm going to click accept current change and now in my feature Branch I have overridden I have resolved the merge conflict and I've have overridden the change that was made in the main branch and now I need to create another commit okay so now I can say get add dot get commit minus M resolved merge conflict okay now I've made this change I need to push my feature Branch to update my PLL request so now we can say get push origin syy title change two okay and now I can go back here and reload my pull request so if I did not make this fix this merge conflict and I tried to merge this pull request it would say that the PO request cannot be merged because it is conflicting with the latest version of main but now that I've fixed this merge conflict you can see that I have said that from the main branch I want to change Jovian careers which was the latest version of the title on the main branch to build a successful career in Tech and I want to change open job opportunities to job openings okay and then we can go ahead and merge this PLL request right and that's it so now we should on the main branch we should should have Incorporated changes from both the places right so if we look back at the pull requests we have closed a couple of pull requests one of them changed the title to Jovian careers and about Jovian which merged first the second one changed the title to build a successful career and change the job section header to job openings which merged second and while merging the second one we chose to override the changes from the first one we could also have chosen to keep it at the point of the merge conflict we can decide what to keep so the end outcome of all of this is going to be that if we just check the title here so the title becomes build a successful career in Tech we have about Jovian this came from pr1 from the pr by aashis we have job openings this came from PR2 the pr created by Sydney Jovin and this is how you reconcile changes okay so just to recap how you resolve merge conflicts occur when git is unable to auto automatically merge changes from two branches and this can happen when two or more people have made changes to the same file or the same line in of code in in a file and the changes made in one branch conflict with the changes made in another Branch okay so these are the steps to build a fil uh fix a merge conflict so when there is a merge conflict vs code will display a notification in the bottom right corner and will also show a way to merge changes there you can see the conflicting files so you can see it like this and you can have multiple files you can have multiple conflicts within a single file and then for each file you can choose which changes to keep and how to select and select the right version and once you have resolved all the merge conflicts you need to make a new commit and then those changes can be pushed safely to the remote repository okay and just to make it super clear I'm also going to draw this out here for you so here we have the origin main branch so this is the I'm calling it The Origin main okay and based on the origin main branch in each of our code spaces so let's say this is the code space for Akash and S and this is the code space for Sydney based on the origin main branch each of them has their own main branch what Akash has did was first make a change to the main branch directly and then push that back to origin so that's how origin got updated then Akash has created a feature branch and then created a pull requ reest from the feature branch called pr1 then Sydney based on the old version of the new of the main branch not using the new version of the main branch made some changes and created a pull request called PR2 then we merged the changes from pr1 into the main branch so this pr1 is tracking a side branch and we merged those changes back into the main branch so now the main branch is in conflict so these two cannot be merged there's a conflict because both of them have edited the title so then we trite to here's what we Tred to do into our main branch we try to pull in these changes so into our main branch here we try to pull in our changes and we try to get a new version of the main branch then we try to merge those new version of the main branch back into our feature branch and that is when we resolve the merge conflict and then we pushed our feature Branch back and now the feature Branch was compatible with the main branch and so these could be merged together okay I know it's confusing you have to work it out on paper by yourself you have to try to create a couple of pull requests you can also go through uh this explanation again um but only when you do it you realize it but all said and done what we've been able to achieve is we've been able to resolve a merge conflict all right so that is the final topic that we're looking at today resolving merge conflicts there is another optional topic on using git locally I will not get into it today because we've covered a lot of material already we have looked at a bunch of different things but there is a way for you to use git locally what you can do is you can um download git on Mac OS or on Windows or on Linux so you'll get this git command line tool on your computer it will look something like this G minus minus version it will show you g okay then you can actually you'll need to configure git so you'll need to configure a username and you'll need to configure an email before you can start creating repositories making commits now what you can do is you can either create a repository and push it to GitHub or you can get an existing GitHub repository down onto your computer if you want to First create a repository on your computer that is done using the git init command and that will create a new directory called dogit in your present working directory and then you can make commits locally on your computer and then you can add a remote repository on GitHub and you can then push your changes to the remote repository so there are some instructions here and you can also if if other changes are made on the repository online you can pull those changes back okay so that's one flow where you create a repository on your computer add some commits to it and push it to GitHub the other flow is that there is an existing repository on GitHub in that case to get the first version of that repository you do something called a get clone okay so more terminology uh you clone that repository which means you get your first version of that repository then you can make commments into that repository and then you can push that repository back onto the cloud okay so I've linked to a tutorial here that you can go through in case you want to use um in case you want to use GitHub on your computer so follow this YouTube tutorial it's about 40 50 minutes long and it'll get you through all of these as well but here is where we are going to wrap up today so here's what what we looked at we looked at using GitHub repositories to share your project source code and the simplest usage is very simple you go on github.com you click create repository put in some information add a readme file add a add a get ignore file add a a license file and you create a repository very straightforward right so the simplest way to create a repository is just to go on github.com and create a repository then opening up a GitHub repository on COD spaces is also very straightforward you just go onto the repository P page you click the code button and you say edit in code spaces so till now there's no git commands even that you need to run you just have to open up um a Cod space and you can use vs code for development then while you're developing the website U using Cod spaces you just make changes you can upload files or you can create new files and you can add code within those files and you can then preview them using the live server extension on git so the live server extension within vs code can let you preview changes while you are developing that is again fairly straightforward the next step now all of this is still happening on the main branch the single branch that you get is to create G commits so what you do is you take some changes you've made you first stage them and then you st then you take those stage changes and then you commit them so you record a version a new version locally and then you push those committed changes back to GitHub and that way the GitHub repository gets updated so always remember this always remember this picture what you do is you do some local development and then you push the changes back into the remote server you push the changes back into the remote server which is GitHub okay then we learned how to deploy a website to the cloud directory from directly from from GitHub using verel and again it's really simple you just go to ver.com sign in connect it to your GitHub repository and then just click deploy and every time the main branch is updated which means every time you push some changes into the main branch then your repository uh is going to get updated and your website is also going to get automatically deployed very easy and you can also connect a custom domain if you want so all of this is largely enough for working on personal projects but we also have the GitHub collaboration workflow so what happens in the GitHub collaboration workflow is that on your code space you take a branch out you make some changes within the branch you make some commits within the branch you push that Branch to GitHub then you set up a pull request and once you set up that pull request then somebody else can review that pull request and versel also creates a sample of preview deployment without effect in your main branch and once that pull request is approved you can merge that pull request back and the main branch gets updated and so a new version of your project gets deployed automatically by versel so that is a safe way for you to work on multiple features at a time without affecting the main branch without affecting the main deployment and whenever you're ready to bring things back you can merge you can approve that pull request or somebody else from your team can approve the pull request and bring the changes back back into the main branch okay so that is the GitHub collaboration workflow which is also fairly straightforward create a branch make some commits create a pull request get it reviewed um keep iterating on that branch and finally you merge those changes after the pull request is approved back into the main branch okay now where it starts to get complicated is when you have these merge conflicts when you have to keep your branches up to date and you have to and there are conflicts where multiple people can have updated the the same file now although we've covered it today don't worry if that does not make sense right now because that's not something you're going to run into immediately and that is something that we are going to cover at a later stage multiple times so you will become familiar with the flow over time okay so but how it works is uh you have to first get the latest changes from the main branch onto your code space then go into your uh feature branch and pull in those latest changes from Main from or merg in those latest changes from the main branch into your feature branch and then resolve any merge conflicts if they show up and push your feature Branch back to update your pull request and that is how you keep your pull requests up to date okay it's complex no doubt but only when you do it a few times you get used to it so all the code for the tutorial is found here you can find the finally from this point on we'll just be using GitHub repositories and you should also just be using GitHub repositories for all your work going forward so you should do that and you can check out the finished site here as well which contains all the meta tags Etc in place as well so we also looked at meta tags and how they can be used to set up a preview image some description and a preview title when a link is shared online now G can be confusing because of all the various terms and commands but it does become second nature with practice I still look up commands on git because even after using it for 15 years there are so many terms that I often find myself at a loss in terms of what I what I need to do but in particular just try to remember these common workflows when the simplest workflow is you make some changes you check those changes using git D or using the visual code Visual Studio code API you add those changes or stage those changes using git ad dot then you commit those changes using git commit minus M and then finally you push those changes to update your repository okay this is what you should be doing right now you don't need to do anything more than this the next level two is understanding the GitHub collab collaboration workflow where you create a branch and you make commits on the branch you push the branch you create a pull request uh for the branch to be merged into the main branch that is reviewed by other people you iterate you make changes based on the comments and then you merge that back into the main branch the third and the most complex workflow which will take some time to get used to is the branch update workflow where you have to first whenever your branch has fallen out of date uh because the main branch has been updated a few times first you go back to the main branch on your codespace get the latest change from GitHub check out your feature Branch merge the main branch and fix any merge conflicts and then push the feature Branch to update your poll request and you're good to go okay try to practice it try to set up a couple of accounts or maybe even um with the same account you can create two pull requests with some merge conflicts and practice it and here are some resources you can check out to learn more so there is the get documentation of course which is the official documentation and reference that you can check out there is the GitHub learning lab so specifically dealing with merge conflicts Etc you can check out GitHub learning lab so all of this you can see that there is this section on reviewing pull requests there is this section on reviewing merge conflict so this will set things up for you in such a way that it'll give you a starting point and then you'll have to do some reviews you'll have to resolve some merge conflicts there are some tutorials on atlassian some tutorials on get Kraken you can check out these as well um again get us that kind of thing that you can keep exploring more and more you don't have to become an expert on get right away if you can just do the first version you are good to go if you can do the second that's great over time as you start working in a team you'll be able to start working on the third version or the third workflow as well okay there's a g cheat sheet by gitlab you can go check out this cheat sheet it contains some of these common workflows so that you don't have to think about all all the different git commands together and you should also check out the documentation for vs code so if you just search vs code Version Control you will find that there is this detailed set of videos and tutorials on how you can perform every git related action directly within vs code without ever having to type a single command so most of the time you'll just be using this at work so check this out as well as well there is this nice YouTube tutorial that you can check out for a for local git development we did not cover local git development because we are going to use we are going to be using Code spaces for the rest of this course and for the rest of this program as well but if you want to do some local development on git then we have some instructions on installing git on your computer and then you can check out this tutorial for things like G config git init git clone Etc of course you should check out the documentation for verel if you have more questions about how verel works but the flow we've shown here which is connected to your GitHub account pull in a GitHub repository code select the root folder and just hit deploy and then automatically anytime the main branch is updated it's going to create a new deployment and anytime you create a pull request it's going to create preview deployments that can be used for testing without affecting the main deployment and then anytime the pull request gets merged the main deployment gets updated automatically so it makes things really seamless and it is used in production that is what we're going to be using extensively in this program and you can learn more about their versal and GitHub inte ation here as well responsive design is a crucial aspect of modern web development and it ensures that websites adapt gracefully to various screen sizes and devices and by utilizing responsive design principles you can effectively build user interfaces and accessible websites that can cater to a diverse set of audiences from any set of devices and in fact this is important because over 70% of web web traffic today comes from mobile and maybe another 10% from smaller tablets and there's only about 10% of traffic that comes from the large desktop screens that we typically develop our websites on so there is a bit of a disconnect in terms of what developers look at when they're developing websites and what people look at when they're actually browsing these sites so we'll talk about using CSS media queries and breakpoints to implement a mobile first in responsive web design we will also talk about leveraging the various properties off offered by the CSS flexbox layout model to build fluid and dynamic layouts we will then learn how to create separate wireframes to determine the layout of a web page at various breakpoints and this is how designers will often share designs with you and finally we will talk about implementing testing and deploying a a responsive website using CSS media queries and flexbox and of course the best way to learn these skills is to follow along step by step and type out all the code yourself if you are not been doing that if you have not been typing out all the code yourself you're making a big big mistake it is going to severely slow down how much you're going to learn so type out all the code yourself question everything that you do and if you get stuck at some point please ask us uh we have also just added a lot more oneonone support call slots and we're also decreasing the amount of time that we take to respond to your queries so please feel free to get all the help that you need all right so here is a problem statement that we look at today now in the previous lesson we built a jovian careers website so this is what the website looks like we have a Navar here with the Jovian logo we have this Banner image that says do something great we have an about Jovian section that talks about our mission and talks about two programs we offer along with a picture we have an employment opportunities table we found that a table was a nice way to Showcase some employment opportunities so that's great and and then we have the submit your application form where people can fill out their name email phone number date of birth select a position upload a resume add a cover letter agree to terms and conditions and submit the application and finally at the bottom we have a footer so this is the website that we have been developing step by step over the past few lessons however this same website if you've tried to open it on mobile you will see that it doesn't really show up properly what happens on mobile is this image takes up a lot of space there's a lot of blank space above and below it above and below this do something great part so we might want to reduce the uh the height of the image on mobile you may also notice that on mobile it doesn't really make sense to show these side by side the text and the image maybe it'll be better to show the image below instead of on the side then you will also notice that the table does not show up completely on mobile the table actually goes out of you and that requires horizontal scrolling which is not a great experience on mobile and finally the applic ation form as well it feels a little cramped on mobile and it would be nicer if there was more space on mobile for each of the input Fields so we will try and improve this website to make it more mobile friendly or what's called responsive and here's what we're going to do we are going to use different layouts for different screen sizes to ensure that the page shows up properly on any device so it's going to look different on mobile it's going to look different on tablets and different on desktops we're going to use CSS flexbox to make the layout more fluid and ensure that it adapts properly to any screen width and we will also set up a GitHub repository a new one so that the old one is not affected now normally you will continue working on the same repository however just so that you have access to the old code as well we will set up a copy of the previous GitHub repository and we will also deploy this new GitHub repository to the cloud using verel okay and of course we are assuming here that you are familiar with the the previous lessons which is HTML and CSS Basics Advanced HTML and CSS and Version Control with GitHub and Cloud deployment with worel the code for this tutorial can be found here so this is the starter code so I'm just going to open this up here this is the this is a GitHub repository which contains the starter code you can see here that there is an SRC folder here and inside the SRC folder there is uh there is an index.html file and there is a styles. CSS file these contain the HTML and the CSS for this Jovian career site okay you can also check out the starter site which is what we looked at just now so this is the starter site that we're going to work on today and I encourage you to take this URL and open it up on your mobile phone to ensure to confirm that it actually does not look very good so that you can compare it with the changes that we're making today and you can find and the completed code and the finished site here now to work on this tutorial we will create a new repository containing a copy of our original repository let us open it up here in a new window so this is the repository that we want to create a copy of okay now normally if you want to create a copy of a repository that is owned by somebody else you can just click this button called fork and what Fork will do is take the GitHub repository that is part of somebody else's profile and copy that completely to your own profile as a separate copy so that you can do your own development there um but sometimes you have to Fork your own repository and GitHub does not allow forking your own repository so I'm going to show you a quick way in which you can create a complete working copy of your GitHub repository as another new repository so here is how we do that go to github.com and on github.com click the new button here so I'm clicking the new button and when you click the new button you will get the option to create a new repository so let me call this repository Jovian careers responsive live because I'm going to create a responsive or a mobile friendly version of this site and I'm doing this live so I'm just going calling it Jan careers responsive live a responsive version of the Jovan career site okay I am going to leave this public and I'm not going to add a readme get ignore or license so this time I'm creating a completely empty GitHub repository so once I click create repository now a completely empty repository gets created okay now what I want to do is I want to take this GitHub repository and import all the code from this GitHub repository into my new repository okay this is the repository for the previous lesson I don't want to disturb it now normally in a job you will probably be continuing to work on the same repository but just for demonstration I'm showing you how to create a copy so that the previous lesson doesn't get affected okay so there are many ways to add code into a empty repository you can check out some of these but here is one called import code so what you can do here is click on the import code button and then grab the URL of the old repository so here is the old repository I'm grabbing the URL Joan career site and I am going to copy the code from or import the code from the old repository into this new repository Jovian careers responsive life and I'm going to click begin import okay now this is going to take a couple of minutes to maybe import the entire code depending on how much code you have in your repository all right and once we have this we will be able to now see our new repository and make changes there without affecting the old one okay so our import is now complete so let's open it up and I can close the old repository so now I have a new repository with my starter code all in place without affecting the old one okay all right so that's what we just did we created a duplicate of a GitHub repository by creating an empty repository not including a readme g ignorer license pressing the import code button and providing the URL of the starter code okay now of course as I mentioned if you are on somebody else's repository you can do all of this very quickly using the for button so you can see that there is a fork button here which is disabled for me because this is my own repository but will be available for you when you need to okay the next thing we'll do is we will also deploy our new repository to verel so I'm just going to open up wor.com and worel as we know is a deployment platform that has good integration with GitHub and once you're logged in on worel I'm going to add a new project so I'm going to say add new project project and if versel is not already connected to my GitHub then it will ask me permission to access my public and private GitHub repositories which I have already granted so here I can see on worel that I can I have the option to import the git repository Jovan careers responsive life so let me just go ahead and import that and that is going to create a project and I'm going to use a framework preset other because I'm not using any framework it is just a static site with some HTML and CSS and then I'm just going to click edit and I'm going to go into SRC because I don't want the entire folder to be deployed I don't want the entire repository to be deployed you can see here I simply want the SRC folder to be deployed because that is where my index.html file or my default web page is present okay so I'm just going to select the SRC folder and click continue and then I'm going to click deploy and just like that in just a few seconds the reposit will get deployed and I will have my new website Jovian careers live Jovian careers responsive live let me see I can just continue to dashboard and now I have my new project Jovian careers responsive live dovel DOA okay so now the repository is completely deployed to worel and any changes that we make will now be affecting this new site okay perfect so that's our basic setup in place so that's good to go now let us come back here and also open up this code using GitHub code spaces so that we can actually start writing some code and start editing things so I'm going to click on code and here now I can create a new code space on Main and remember a codespace is a local machine for us on the cloud given by GitHub associated with this repository and we'll be able to write our code in that code space machine so let's click create codespace on Main and by the way if this button is disabled you may have to go ahead and delete some older Cod spaces so you can go to github.com /c codespaces and I think GitHub provides two code spaces for free so you may have to go in and maybe delete an older code space so you can just go to an older Cod space and click delete and that's going to delete your old code space so that you can now reload this page and actually access this button okay so you can have at Le only two free Cod spaces otherwise you can pay and you can get unlimited number of them but free should be fine you can just delete code spaces when you need Okay so let's click code and then let us click create codespace on mean and let me bring this over here now what this is going to do is open up a machine on the cloud get the code from the repository and give me a browser based interface of Visual Studio code to edit and test and develop the code from this repository okay so GitHub is for storing the code Visual Studio code code spaces is for actually developing the code and then I can take my changes and push them back either onto the main branch or I can use the GitHub collaboration workflow where I can create a full request and get that reviewed and so on okay all right so looks like our code spaces system is now open and ready for development so I'm just zooming it in a little bit so you can see that this is a visual studio code interface and let me just close that now here we already have the repository the root file of the repository open you can see that we have an SRC folder we have get ignore license readme all of these were imported in from the original repository I can open up the SRC folder and open index.html and here in the index.html file I can see the entire code for my website Jovian cers so you can see that we have a head we have an HTML tag inside which we have a head tag in the head tag we have a bunch of meta tags to set how this page previews when we share it online we also set for example the title and the fave icon of the page then we have the body tag and in the body we have the nav bar and this is the nav bar we have a banner image this is the banner image we have a header we have an about section with an image and some description then we have a table here the table contains the employment opportunities then we have some a form here an HTML form and that form makes a submission to form bold which is an external service that we using for form submissions and finally we have a footer here which is the footer right over here okay and of course we have all of the Styles here captured in styles.css so each section has it has its own various set of styles which is what we have captured in styles.css so there are some basic styles for HTML body H1 H2 Etc and then there are sectionwise styles for each section and then the subsections inside those section and so on okay and we have certain images as well which we are incorporating within the page and of course we have uh we are connecting the styles with the main page using the link here the link r equal to stylesheet plus we're also using some external fonts from Google apis from Google fonts okay so this is the basic setup that we've explored so far all right so now we've looked at how to deploy to the cloud using verel we've looked at how to start development with GitHub Cod spaces now let's talk a little bit about responsive web design responsive design is an approach that ensures that websites adapt gracefully to any screen size any device and any orientation and that is the purpose here is basically to optimize the user experience by making the content visually appealing and easily readable and accessible okay now responsive design starts from the user interface design so even before you have started coding the page user interface designers will often create design mockups in three to four sizes depending on the available screen width so they will create a mobile design so let's say they're designing a website they will first create a mobile design and in the mobile design everything just goes top to bottom you generally don't don't have a lot of things side by side because the limit on the because the screen width is very limited and in fact just as a common practice something around 576 pixels and below is considered a Mobile screen just for reference so typically you will get a mobile design which is about which is something under 576 pixels in width then they will often give you a tablet design now the tablet design will have maybe two columns in certain places in certain places it will still have one column so certain things you have slightly more space horizontally on a tablet and that's why there might be a slight change you can see that these two sections were brought in here on the side on a tablet screen and typically tablet screens are about 550 to 750 pixels and then you have desktop screens desktop screens are screens that are bigger than 768 pixels so this is where you have a lot more space this is where maybe you can use three columns this is where maybe you can have more space on the left and right and finally optionally sometimes you will find a a layout for large desktops so often now as we are getting to bigger and bigger screens like 4K screens and 8K screens and so on we have the opportunity to use a lot of leave a lot of blank space on the left and right so sometimes especially if your website is going to be viewed by people primarily on the desktop you may get a fourth mockup or a fourth design for very large desktops okay and typically this refers to desktops with a screen width of greater than 992 pixels if you don't get a design like this this then you should just take the hint that you should take the desktop layout and just limit its withd so that the content remains centered on the page instead of completely spreading left to right making it hard to read okay so your designer will often give you three separate layouts at least and sometimes even four or sometimes you may just get two layouts one for mobile and one for desktop and you may have to guess what the tablet layout looks like okay now the specific wids at which these design changes are made where the design changes significantly are called Break points because the previous design breaks at the at that point and a new design takes over from there okay so the break point for mobile screens is 576 pixels beyond that it's the tablet screen and then the breako for desktop screens is at 768 pixels beyond that it is a beyond that it is a a large yeah beyond that it is a desktop screen so the break point or the highest break point for tablet screens is 768 pixels and beyond that it is a desktop screen screen and then sometimes Beyond 900 pixels or so it is a large desktop screens now these numbers are not set in stone these are just some common values but different sites different Frameworks that we use for CSS have different values but these are just some of the more standard ones okay now your role as a web developer is to implement layout changes at specific breakpoints while ensuring that the page adapts gracefully at all intermediate screen wids okay and that is what we're going to learn today now one important thing to keep in mind whenever you're trying to make a website responsive is that to make a to implement a responsive web design you must include this following meta tag within the head tag of your web page so this there's this meta tag with the name viewport and it has the content width device width and initial scale equal to one or sometimes this is written as 1.0 and you have to take this and you have to put this inside the HTML head tag of your HTML page okay now in this case I already have it meta viewport let me zoom in here slightly yeah you can see here I have the tag meta viewport with Device width initial scale 1.0 why is this important well back when mobile Mobile smartphones just came out there were no designs that were optimized for mobile screens so there were certain tricks that were employed by mobile devices to zoom in and somehow scale and make the text more visible nowadays those tricks are no longer required because developers Implement responsive designs so that's why to indicate to your browser to indicate to the device that please don't apply any tricks to make the content look good on mobile I will handle it myself you include this meta tag okay so all you need to know is whenever you're making your design responsive make sure that you have this meta tag included in your design okay so one good way to build your responsive design skill skills is just by checking out some examples of responsive design so here's one you can check out a bunch of examples here so here is one dropbox the homepage for Dropbox is a good example where this is the mobile view this is the tablet View and this is the desktop view which also contains a form here's here's another one this is dribble it shows images so here you can see that on mobile it shows two images side by side on desktop it shows four five images side by side and then a tablet it's somewhere in between GitHub is another example that there is often you will find this pattern that in the desktop layout there is space on the left and right there is possibly a form in somewhere on the right and then in tablet the form comes in the center and on mobile the form can go away Al together okay and there are a bunch of other examples that you can check out as well similarly there are again some more examples here for you to check out so whenever you're trying to make your website responsive it's useful to look at how other websites are doing it you can see here examples of uh design Modo so they have this layout for mobile tablet and desktop you can see this architecture site they have a different layout for T desktop tablet and mobile and here's another one this seems to be like a personal website so to become a good web developer you have to go and explore what other people are doing there are no ground rules there are no set rules for responsive design in in fact these Trends are constantly emerging so just explore and pick whatever you feel is working well now how do you develop a responsive websites so you can inspect how a website looks on mobile by simulating other devices within your browsers developer tools so that you don't actually have to go and open that website on your mobile each time you want to test it that's a good idea you should always do a final device test but you can just do that within your browser itself let me let me show you an example let us open up this let us open up this Jo Jovian career site and let me just zoom back to 100% so this is what the career site looks like on desktop if I right click and I select inspect now that open opens up these developer tools and I can just put these developer tools on the right so there's this button here on the corner this three dots button and I just click this three dots button and dock the developer tools to the right okay so now my developer tools are on the right side it's exactly the same but I'll show you in a second why putting it on the right head and now there is this button over here and I'll just zoom in and show you so this button is called toggle device toolbar so if you just press this button now suddenly your browser turns into a mobile device and you can go in and select a specific device as well let's say let me select iPhone 10r so this is iPhone 10r and this is what my mobile and this is what my and this is what my website is going to look like on iPhone 10r okay I can even check that the screen width here is 414 pixels let me just zoom in there a little bit so the screen width here is 414 pixels so that tells me that this is an iPhone 10r or I can even just select the option responsive and I can just vary the width of the screen and see how my website changes normally you will not be viewing a website on under 360 pixels so normally you might want to start around 360 pixels and just vary the width of your screen slightly and see how the website looks as you increase the width okay so this is a great idea this is a good way for you to inspect how things are going you can see that definitely there's a big problem here the table doesn't look good at all on mobile and it starts to look a little better when we go into tablet or maybe even desktop screen okay and one good idea for you would be to open up developer tools on your browser turn on device mode and see how various pages and websites look with different device vids you can check out Jovian so let's check out jan.com our homepage let's start with mobile this is what it looks like on mobile so on mobile we just have this text we have this explanation here we have these two things and you can see that the text is centered on mobile and we have this logo cloud and then we have a form below it and then we have all of these benefits that are shown one below the other as we go on a tablet screen you can see now that the text is still centered and but now we've put a maximum width for the logo Cloud we've put a maximum width we've added space around the form and now we showing two of the benefits on the same row as we go further let's go onto a desktop screen so now we've gone beyond the 900 pixels or so which is a a desktop screen or a large screen and now you can see here that we have a bunch of options here in the nav bar then we have left text and we have a form here and then we have now all four benefits listed on the same page on the same row and of course there are similar changes that are there on each section as well you can see here intensive programs here goes one in each row instead of two of two per row okay you can see that okay maybe this is something we need to fix so looks like like in the pricing div we haven't taken care of spacing and this is what happens when you are building responsive websites there will be slight cases here and there a certain place where you've not thought about how things should look and you'll have to go and fix it and that is why it's important to check across the entire range of fits okay let's check another one NY times.com so this is what the New York Times looks like on mobile you have a very little space on mobile that's why there's just this title and then there is this nav bar and we'll touch on how to show these NAB bars at a later point and then there is just this date and there's the sale offer going on then there is just one story and then another story below it and so on but as you start to increase the width you can see that now we go from one story to multiple stories and we also get this second bar here which opens up a bunch of categories and we also get something here on top we also get maybe a login button and all so things change significantly based on the screen that we on right and you can see now we go into three column layout when three columns are available so a lot of time is spent by designers deciding where exactly to change the layout what the break point should be and what the structure should be for the site and really this is where a lot of the time is spent just finetuning small things and testing things carefully okay so I encourage you to maybe explore a few more sites and see how they work now certain websites redirect to a completely different page when you try to access them on mobile for example if you were to open Gmail on mobile it will redirect to a slightly different page or show a completely different design that was a common practice earlier but now that there are many tools to or many techniques to build completely responsive layouts it's not recommended any longer so try to find some websites which follow this outdated pattern and avoid it when you are building websites instead what you should do is build something called a take something called a mobile first approach which is what we look at today let's talk about CSS media queries CSS media queries are a powerful tool that allow you to apply different styles to your web page based on device characteristics such as screen size resolution and orientation and here is the basic structure of a media query you say at media and then you specify a media type and then you specify a condition and you can have one or more conditions and then you open up these brackets and inside these brackets the CSS rules that you write will only apply when you are looking at this particular media type and you're looking at this particular condition okay now when you're working with responsive web design the media type is almost always going to be screen so there are three types of media there is the screen and then there is print and there is all now print is used the print media type is used when you try to print a page or export it as PDF which is not something we're going to look at today so in our case the media type is almost always going to be screen or it can even be all and the condition is something that you can set based on the width of the screen or the orientation of the screen or there are a bunch of other properties that you can use so here is an example let's say we want to change the background of the body when the screen width is at least 768 pixels let's say on mobile screens we want to have a separate background and then on on large screens or desktop screens we want to have a separate background so here is how we might do it we can say at media and then we can say screen because we only want to affect the screen layout not the print layout and then we can say and and now we can specify a condition Min width is 768 pixels so when the minimum width of the browser is 768 pixels then we can specify that the body should have a background color of light blue okay so let me just copy that and and let me put that into my CSS file so here I am in my CSS file and right maybe right below here the main body declaration I'm going to add this at media screen and minan width 768 pixels that means at a minimum width of 768 pixels when the condition holds true for the body I want the background color to will be light blue okay all right now I need a way to actually preview the changes that I just made what I'm looking at here on the left is the deployed website but I'm making changes in my GitHub code space so what I need to do is I need to launch this GitHub codespace this index.html file in a preview and remember for preview we actually use an extension called live preview because our codespace is a system somewhere on the cloud and we need to now view the HTML code in our browser as a web page and for that we can use this live server extension okay so let us open up the live server extension so search for live server by ritwick day and click install and code spaces and again all of this is covered in the previous tutorial so you should review that in case this doesn't make sense and now let's come back into index.html and let us right click on index.html and click click open with live server okay so now what this is doing is this is going to set up a simple server which is going to serve the file for us so that we can now view it in our browser and let me just bring that and put that here on the left let's bring this back here on the right okay so now I have this styles. CSS and I've mentioned here that whenever the screen width is more than 768 pixels my body should get a light blue background clearly it has gotten a light blue background which is not looking good but it demonstrates what we're looking for but let me go in here and let me also click inspect and let me just reduce the width of the screen let me reduce it down to maybe an iPhone 10r you can see that when I'm viewing the same page on a mobile device on the mobile device it is still has a white background but on this device over here it has a blue background and you can see the exact change happens at 768 pixels so as I increase you can see that just before 768 pixels it is still white but at 768 pixels it turns blue okay so you can do all sorts of things like that let me change another thing Let Me Maybe set the body font size to 10 pixels or 2 20 pixels let's just make it 24 pixels so that the font size also changes drastically so here you can see that I have below 768 pixels and then as soon as I cross 768 pixels the body font size should change well okay it didn't I just need to reload the page maybe yeah maybe if I just remove this it might change well it doesn't seem to be changing right now but but it will uh depending maybe I just have to like set the uh properties properly but you can set any property here and the font size can change significantly for that particular tag and or for that particular selector based on what property you set here okay so for now I'm just going to revert it and Below 768 pixels the background is white above 768 pixels the background is blue okay so that is how you use media queries and let me just get rid of this for now but one other thing you can do is also combine a bunch of conditions so you can say something like this that you want a particular CSS rule to apply only between Min width of 600 pixels and Max width of 1024 pixels so at 600 pixels you want it to start and that same set of rules you want them to end at 10 to 4 pixels you can imagine how using this you can set up maybe one layout for under 400 pixels one for 400 to 600 one for 600 to 800 and so on all right let's look at an example of this let me just take this and let me put it in here now I'm going to put a couple of layouts I'm going to say that at let me just make it 400 and 8 600 pixels just so that we can actually view the changes very easily now what I'm seeing is that under 400 pixels I have a white background and then as soon as I touch 400 pixels the background turns blue but as soon as I cross 600 pixels the background turns white again okay so do you see what's happening you can combine multiple conditions like this and you can also do something like this let's say I want to only have a condition for Max width so then I want to say that only under 600 pixels the color is blue and over 600 pixels the color is going to be white so as long as this condition or all conditions are satisfied these CSS rules apply and I don't just have to put body here I can maybe put change the H1 color change the H1 size here I can put maybe change some other size here as well so I have all those controls that I can modify okay now of course you don't only have to look at the screen size you can also use the orientation so let's say you want to use a certain font size only in a certain orientation you can do that too let us maybe try that so only in the landscape orientation we want the light blue color so orientation landscape and the orientation is also orientation is also piece of information that is sent by the browser itself so let us go to iPhone 10r and let us change the orientation here so there's a button here you can see that there's a button right here to change the orientation you can see that now this is in landscape orientation and in the landscape orientation it has a blue background and I can change it back to the portrait orientation or the vertical orientation and in this case it does not have the blue background right so let's bring that back and let us get rid of this so that is how media queries allow you to change the layout of a page at various breakpoints and that is what we're going to use today okay you can combine multiple conditions and you can check out some information about media queries here but we've covered the most common use case you'll be using the screen media type and you will be using maybe the max width or Min width to set break points specifically as we said earlier break points are the points at which Your Design changes to adapt different screen sizes based on the designs that your UI designer have has given you you may have to set some break points and these are generally set on some common device screen widths so media queries can be used to set breakpoints and apply CSS rules for each layout for example if you want to write completely separate CSS for mobile tablet laptop desktop and large desktop screens you may do something like this you may have one section in your CSS file which only deals with Mobile screen so you may say media screen and Max width 576 so under 576 screen width all these rules are going to get applied okay then you may have maybe another media query here called media screen and M width has 576 pixels and Max width has 768 pixels so between 576 pixels and at maximum width of 768 pixels so between these two wids all the all these CSS rules will get applied and then you may have maybe another one between 768 and 992 and you may have another one between 992 and 1200 and maybe you may have one for 1200 and higher right so depending on how many break points you've decided on for your website you can set up these Min and Max conditions and then you can write completely separate rules for each of these okay so this is one way you can go about doing things but a slightly better way is what is called mobile first design so the way you should be building most web pages today is by starting out with a mobile design so first you should just design your web page or build your web page for mobile and then slowly enhance that same web page to make it look good on uh on a tablet and on a desktop screen and maybe on a large desktop screen as well right so in a mobile first design the base CSS styles are for mobile devices so you do not have a media query for the mobile devices you just write all the base CSS Styles and apply that to mobile devices and then media queries are used to progressively enhance the design for larger screens right so what you're basically trying to do is you're going to implement this design first and then slowly you are going to add a break point and then at a certain break point you're going to maybe make you're going to maybe change this layout and maybe shift to a two column layout then slowly you're going to add another break point and at that particular breakpoint you're going to add a bunch of these categories and you're going to shift to a three column layout and so on all right so that is what we're going to do we're going to start with the base Styles and then you can have whatever new Styles you want to introduce for tablets you can simply say media screen and Min width 576 so you're telling the browser only for screens with more than 576 pixels apply these new CSS rules and some of these CSS rules will override the old CSS rules that have been set in the base Styles so that that's how media queries are more selective so they can overwrite the existing Styles and then we have similarly these a next set of uh a next set of rules Min with 768 and these rules are going to override the rules that have been created in these and these so they also follow the order and they follow the specificity that is how CSS works so all these rules are going to override the previous rules that you have set and then you can similarly have maybe another where you can say media screen and M with 99 2 so only when the screen width crosses 992 these new rules will get applied only a selective set of rules and they will override any rules that have been previously applied okay this way you don't have to repeat a lot of CSS for every screen rather you can sty you can start with the mobile design and you can just add a few properties here and there to make the website look nicer on tablet and this is a great approach because if you start out with the desktop layout and you try to compress it down to mobile you're going to face a lot of difficulty rather if you start out with the mobile layout often the tablet and desktop layout will simply either have more information or rearrange some of the things in a into multiple columns and that is easier to achieve rather than taking more information and compressing it down into one column okay so even as a designer you should always start from the mobile layout and then slowly build out the desktop layout so by removing the max with condition for the first breakpoint and using only minwidth queries for the rest we ensure that the base Styles apply to mobile devices only and then they apply to all devices further as well but progressively we also enhance the design as the screen size increases okay so try experimenting with this try setting up some of these break points in the CSS file and experimenting with this to make changes to the careers Jan careers website make it more responsive and observe how the mobile first approach is different from the previous approach where you have different set of styles between each set of break points okay all right so one other thing we need to cover before we go ahead and actually implement the mobile design is something called the CSS flexbox layout because it's not just that you're going to change the layout at certain break points between those break points as well sometimes you will have to make the layout a little more fluid so that things go from maybe two columns to three columns or maybe the sizes of things increase and decrease and maybe you add space on the left and right so to handle these kind of fluid layouts CSS has something called flexbox and this is something that was added to CSS about 15 years ago U about 14 about 12 years ago to be exact so this this is something that was added to CSS about 12 or 13 years ago when mobile layouts became more common when mobiles mobile phones became more common to allow for creating fluid layouts that can be flexible and that can grow and that can automatically shift into multiple columns Etc and as required okay so we're going to look at the CSS flexbox setup we're going to learn a little bit about flexbox it's not a detailed flexbox tutorial we're going to learn the most common flexbox properties and it is a versatile method for arranging elements within a container in a flexible and adaptive Manner and it simplifies complex layouts making it making it easy to achieve responsive designs and accommodate of varying accommodate wearing content sizes now the flexbox layout can be applied to an HTML element by modifying the CSS display property and it was added to CSS in 2010 and it was implemented by most browsers in the early 2010s and the CSS display property this is something that we've already seen here it determines how an element is displayed on a web page so just to give you an example I'm going to first just create a new file called display. HTML and in this file display. HTML I'm going to create a bunch of HS so let me just put in body and in the body let me put in a bunch of divs let's create a div called item one item two item three and item four okay and let us open up this page using the live server so let us right click and say open with live server and we'll open it up here right any the way to open up any page in live server is by simply write clicking and selecting open with live server okay and you can see that we have a bunch of these divs here and I'm just going to set the display property for each of these divs so first I am going to set the display property for item one so let me just give it the ID item one and let me give this the ID item two let's go ahead and give them item three and item four yeah so you have a bunch of items here and let us go ahead and set the display property for item one to display block okay and let's put that inside a style tag so that is how we are applying CSS so there is no change when we set the display of item one to display block what happens if we change the display of item one to display in line let's actually add a border around item one so that we can get a better sense yeah you can see here that when you have display block which is the default value item one takes up the entire width of the screen instead if we said display in line you can see that now item one does not take up the entire width of the screen and in fact it will show up in line with other things that are also in line so let me just go ahead and for item two as well let me add a border 1 PX solid red and let me set the display to inline as well okay and you can see here that item one and item two both show up on the same line because they are set to inline so display in line does not take up the entire width and allows a particular div to get embedded in line within some text or within other inline items but if either of these was block you can see that that no longer is true all right so that is display in line and then there is something called display inline block which I will leave to you as an exercise so I'll let you figure that out what that do and how that's different from display in line then there is something called display none I can say item two or item three display none now it just disappears so when you don't want to show a particular div and we'll see an example of this later today then you just set display none now the final property that we are going to study which is what triggers the flexbox layout is the display Flex property okay so we're going to come back and we're going to take a a closer look at the display Flex property is which is what makes a particular div a flex container and allows its children to be lay out laid out as flexible boxes okay very important we're going to look at that in just a second but there are also several other display options so I encourage you to check out the other display options as well and I encourage you to also maybe try out this excise which goes into the various options that you have for the display property but these are the most common ones that will use display block inline flex and possibly none okay so with that let's close this let us talk about flexbox now the first key thing you want to understand about the flexbox layout is that it works with containers and items so you always have an outer div which is a parent or a container on which you set the display Flex property and then you have the items and the items are then laid out in a flexible fashion based on a bunch of CSS properties that you set okay so the display Flex property when applied to a container or a parent component causes the items or children to be arranged using the CSS flexbox layout and the arrangement can be controlled using various container level and child level properties as we will discuss in just a second so let's go ahead and create a new file called flexbox HTML I'm going to right click here and create a new file called flexbox HTML into this file Flex flexbox HTML I'm going to add a bunch of HTML and CSS code to set things up let me also open it up quickly in the live preview so open with live server let us open it up over here and let us come back and let us set up the code for this I'm just going to copy this code and paste it in here and we'll just walk through the code and then start studying a bunch of okay so this is what our content currently looks like we have a box so we have a div we have a div with the ID container over here and then inside that div we have four divs one called item one another called item two another called item three and another called item four so we have these we have this container div that's clear the container div has four item divs and each item div has the ID item one item two item three item four respectively and all of the item divs have the class item okay and let us look at the CSS so so far we've not used Flex box flexbox at all for the container we have set a background color of coral you can see that it has this orangish background color and then we've also given it a background one pixel solid black background a border of one pixel solid black we have also just set a font family so that the font the text is a little easier to read and finally we have given it a padding of 10 pixels so you can see that there is a 10 pixel padding inside the border and then there is a Content inside it okay so far we've not modified the display property then we have the item for each item and again this is the class item not individual items so we have specified the class item for each item we're not using the IDS just yet we have again set a border of one pixel we have set a padding so you can see that there is some space around the text and finally we've set a background of cornflower blue that is the blue that you are seeing now let us slowly start turning this into a flex container so always the flex display properties set on the container okay so we say display flex and I'm going to hit save and now you can see suddenly that all the items are now laid out in a horizontal fashion okay so you set the display property on the container on the container you set the display property and that causes the items to be laid out according to the settings the default settings of a flex box okay so the first thing that we can change is the direction in which things are laid out and that is done using the flex Direction property and the flex Direction property has four values it has the row value it has the row reverse value it has the column value and the column reverse value okay so let us take a look again all of these properties are first set on the container and for each property we also have an example of whether it is set on the parent which is the container or the child so Flex direction is specified in the parent so we say Flex Direction row and that doesn't change anything because Flex Direction row is the default value but we could also say Flex Direction row reverse and now you can see that the items are laid out not from left to right but from right to left so you have item one item two item three and item four laid out from right to left okay they're still logically they're still in this order but they're just laid out from right right to left and this is where you can use flex box to maybe do some right to left layouts okay let's check Flex Direction column okay Flex Direction column as you might expect lays things out in a column format which is pretty similar to display block but except you are setting that this is a column on the parent and on the container not on individual items okay so fle and of course you'll be able to set a lot of other properties as well so this is flex Direction column and let me just increase the height of this so that I can show you clearly that the way things Stack Up is at the top okay so Flex Direction column is top to bottom you can also do Flex Direction column reverse and that will send things from the bottom to top you can see item one above that item two item three and item four so that is how you can lay things out Flex Direction row is left to right Flex Direction row reverse is right to left column is top to bottom reverse column reverses bottom to top okay these are the four values you can set for the flex Direction property and with flexbox spe specifically I would highly recommend that you practice this that you check out if you have a question what happens if I do X then just go ahead and try it out and maybe set proper Heights and widths you can use the starting code that we've provided here and experiment and understand and improve your understanding okay all right so that's fine now the next thing is to check what happens if you have maybe data that is not going to fix within the given width of the container so now we have a container and now for this container we have a bunch of items and all these items seem to be fitting just fine well what happens if we had more items let's say if we had item 567 right so item 567 clearly you can see what happens is first they try to compress to fit within but if they cannot go beyond a particular width then they just go out then they just fall out now when they do fall out what do you do another another condition that could come up here is let's say our left and right padding was actually higher it specified a 30 pixel padding left and right what are you going to do here now these these all seem to be overflowing these all seem to be going outside the box here and that is where you can specify a flex wrap properly you can say Flex wrap and the default value is no WRA and again this has to be set on the parent and it specifies whether the container whether the children should be be wrapped which means they should go on the next line or not no wrap simply means that you want everything to show up on the same line even if it exceeds the width of the container the other option is to say wrap in which case this is what happens it takes item 1 2 3 and then it when as soon as it finds a child element that cannot fit without exceeding the width of the container it wraps onto the next line so we have 5 six 7 you can also do Wrap reverse and the idea here is that it s not onto the next line but onto the previous line so you can say 1 2 3 and then it goes 4 5 6 and 7 okay and notice this is different from row reverse so if you did row reverse and you can check this out it would now go 1 2 3 4 5 6 7 all right so keep that in mind that you have a reversal on the row level you have a reversal possibly on the column level and then you can do that reversal on the wrap level as well whether you want the lines to go up or you want the lines to go down okay so that is your that is the flex wrap property so you can of course just use no wrap which is what just uses this and then you have wrap and wrap reverse can experiment with this and you'll get a better understanding now the next set of properties which are around justification and Alignment determine how Flex items are positioned within a container so these options provide control over the distribution of items along the main axis so the main axis let's say if it is a flex row then the main axis is the horizontal axis and the secondary axis is the uh is the vertical axis but if the flex direction is column then the main axis is a vertical axis and the secondary axis is a horizontal axis okay so we'll just talk about it's also called the cross axis so justification is controlled along the the main axis that is done using something called justify content and then alignment around is controlled along the cross AIS okay and I know this seems confusing this is probably the most confusing part of flexbox but with some practice you'll get used to it so let's look at justify content now here is how justify content Works let's say you have a flex container with flex Direction row and on that container if you set justify content to flex start then things will simply show up from left to right okay if you set justify content to Center then the items will still show left to right but they will be centered on the horizontal axis or on the main axis right so what that means is that all the items will be shown and then space will be added on the left and right on the other hand if you set Flex end as justify content then the items will just stick to the right you notice they're still rendered left to right 1 2 3 but they are now sticking to the right side instead of the left side and similarly we have a bunch of other options as well so let's take a look let's get rid of some of these other items so let's get rid of item four five and 4 five 6 and 7 or just let's get rid of items 5 six and 7 so I'm just commenting them out and let us reduce the padding the horizontal padding for each item so this is how they look right now now I can get rid of the wrapping for now as well now let me just add justify content and again it's on the parent and let me say Flex start that's where they are they are currently sticking to the start which is the left right it's not saying left it's saying start because if I had row reverse then they would stick to the right and if I had column they would stick to the top so it's just start at start of the axis whatever be the main axis okay and now I could say justify content Center and now you can see that they're still laid out left to right but now they are placed at the center and as I change the width of the screen you can see that they still remain right in the center so anytime you want to horizontally Center content within the page just put an outer div give it the display flex and then put in an inner div um and give the outer div justify content Center and that is going to horizontally Center bunch of content on the page very straightforward okay next next let us now do justify content Flex end now you can see that they are laid out at the end I modify then there's another thing you can use you can use space between now what space between does is there is of course this padding for now let me just get rid of this padding so that we can have a better understanding of the space so when you use space between then then space is added between each item and they are laid out from the left to the right with equal space between them you can see here that as I change the size of the page space is added or removed between and all spaces equal okay then you have space around a space around is similar to space between but what you do is you take half of the space between and then you add it on the left and the right end as well okay so that is what space around looks like you can see visually that this space is about half of this space and that is why I removed the padding for now just so that we could clearly see these effects finally there is something called space evenly okay now space evenly as you can guess what it's doing is it's going to add the same amount of space on the left Edge on the right Edge and between items so slight differences between space between space around and space evenly depending on the use case you can use one of these or just do something else all together okay but for now let me bring that back to flex start and we can also see this effect on a flex Direction column so let's say we have the direction column and let's say we have a height of 250 PX here you can see that these are now laid out from the top I can do Flex end of course I can then do Flex Center and they are now centered so now the main axis is the vertical axis and in fact it starts from the top so the start is the top end is the bottom and I can do things like space around space between as well so this is space between that is flex Direction column so all of these properties work for Flex Direction row and column okay of that height all right so that is justify content splex Start Center and space around space between and space evenly and the same thing works for the column as well when you have a flex Direction column this is how the justify content values look very powerful property you will be using this a lot to create more complex layouts then we have align items so justify content was along the main axis so for FX row it was along the horizontal axis for Flex column it's along the vertical axis align items is used to align things along the cross axis okay so here is what that means let's say you have align items on you're setting align items on a parent where the flex direction is row let's look at an example of this let's just see this live let's set the height to 250 pixels again okay so the flex direction is row and I want to set the Align items property the default value is stretch and you can see that as I increase the height of this div from whatever was the default height to 250 pixels everything stretched all of these inner divs all of these child divs they automatically stretch to take up the full height or the full space along the cross axis which is the vertical axis because the main axis is the horizontal axis but I could also do Flex start so align items Flex start so now along the cross Axis or along the vertical axis things are sticking to the start okay in the cross axis this is the start and this is the end so things are sticking to the start I could also maybe just stick them to the end so I can just say Flex end and now they are sticking to the bottom which is again the the main axis of the primary axis is horizontal so along the cross axis top to bottom they're at the bottom or at the end I can also align items Center of course and in which case they are centered here along the cross axis and notice how this is different from justify content Center which is going to Center them along the primary Axis or the main axis right so here is another trick if you just set align item Center and justify content Center then your content is centered vertically and horizontally on the page right as you increase or decrease the height it is going to be centered vertically and it is going to be centered horizontally as well so let's say if this was 300 pixels it would still be centered vertically if this was 150 pixels it would still be centered vertically so vertical centering can be achieved by using Flex Direction row and align item Center or by using Flex Direction column and justify content Center so there are both ways to achieve it but that is how align items and justify content play justify content plays along the main axis align items plays along the cross cross axis um what other options do we have for Align items well we have Flex start Flex end Center we obviously we looked at stretch which is the default value that there's also another specific align items property called Baseline which looks quite similar to start but here's the difference what this does is this aligns the Baseline of the text for each of the divs so if I were to go in let's say if I were to go in into item one and change the font size to 10 pixels and if I were to go in into item three and change the font size to 30 pixels this is what the content would look like so notice what's happening here because align items is set to Baseline the line that runs through the bottom of each line of text aligns perfectly now this is very different from doing align items X start which is going to just align things right at the very top or even doing something like align items Center which is going to just align the centers of the items and not the Baseline so a very special case you might not always need this but you can align by the Baseline if you need to if you have text of various sizes in a bunch of flex items okay so those are all the ways in which you can use align items and let us revert that for now and of course all of this works on Flex Direction column as well so here we have Flex Direction column let us increase this height to 250 PX okay so here is flex Direction column so now the primary or the main axis is along the bottom along top to bottom so the cross axis is left to right right and now I could say Flex start to align things on the left and by default of course the value is stretch to align things to take up the entire space on the cross axis and of course I could also have align items Center in which case they will be horizontally centered this time because the cross axis is the horizontal axis and vertically they're still right at the beginning so remember that for justify content the default value is flex start which is right at the beginning but for Align items the default value is stretch which is to take up the entire space along the cross axis and of course I can do X end here as well and now along the cross axxis or the horizontal axis they show up on the right let's rever that so that was align items okay so on this is what it works on row this is how it works on column I know it's starting to get confusing practice and that is how you'll get it and of course you can always come back and refer to it you don't have to remember all of this perfectly okay just remember justify content is along the main axis align items is along the cross axis now you also have this special property called align self which can be used to change the alignment of along the cross axis of just a particular child okay so now we're looking at certain child level properties not the parent level properties so let's increase the height here once again again height 250 pixels and by default everything has align stretch and let me just go in here and let me just set this to align item Center for now so by default all the Align all the items are aligned along the center and let me go in here into item one and for item one let me just set align align self so item one just by itself should be aligned to the start so Flex start now align items item one goes right right to the top at Flex start and I can then I can then align maybe item to align self to flex end now I'm pushing item to right to the very end of the Cross axis remember we still on the flex Direction row so the main axis is Row the cross axis is top to bottom and we can of course go ahead and for item three we can use LINE self stretch and now item three is stretching and item four can be aligned separately as well so you you can have a global setting for Align items and then you can override it using align self for each item as you need of course this works not just for column not just for row but also for column so here now what's happening is that we have this let me just get rid of the default get rid of all these for now so now we have the colum as the main axis so along the horizontal axis we have set to align items Center that's why they're all centered then if we change the setting for item one you can see that item one goes to the left because we are setting it to flex start item two goes to the right because we setting it a flex end so along the cross axis which is left to right it is going on the right right item three is stretching and item four is in the center which is the default setting that has been put in for the container okay so you can set a property for the container and then you can override it for these individual items now that makes sense for Align items doesn't make sense for justify content and I'll let you think about why okay for now let's get rid of this and let us just go back here to flex Direction row okay so that is align self you can use flex start or you can use flex end to move it to the end of the Cross axis you can Center it in the cross Axis or even stretch it or even align it to the Baseline you have all these options available to you okay next up there are also a couple of adjacent properties called align content and justify items I will not cover them here because they are not very commonly used I have almost never used them maybe once or twice but they are slightly different from align items and justify justify content so I will let you explore these on your own so check out the properties justify items and align content as you can imagine they might do alignment along the main axis and justification along the cross axis so you have those options as well and look up some tutorials to understand how they differ from justify content and align items or if you don't want to get confused us right now just skip these all together and just use the default justify content along the main axis and align items along the cross axis but if you want to you can experiment okay so those are some justification and Alignment properties so in most cases you will be working with flex Direction you will be working with flex wrap you'll be working with the Align items and justify content properties and sometimes you will use the Align self property on a particular child but then there are also certain Flex properties that you can set on children specifically to control how the various children take up space on the page okay and we're going to look at all of these properties they are called Flex grow Flex shrink and flex basis and then we are going to look at a shorthand property so that you never actually have to use all of these separate properties but it's useful to understand what they mean okay so the first property is the Flex grow property now notice over here if I get rid of the height notice that these divs are not taking up the entire space available these and let me just have three divs for now let's get get rid of the fourth div as well yeah so notice that these divs are not taking up the entire width on the page now sometimes you might want in maybe some kind of a sidebar layout where you have a left sidebar right sidebar and the middle item should grow to take up as much space as POS possible in such cases you can use the flex grow property so when you have some free space you can specify a flex grow property and by default its value is set to zero which means that you don't want a a you don't want one of the children to grow by default you only want each of the children to take up as much space as is required to display all of its children okay so for example right now to show item one one this is the only amount of space that is required but if let's say the text here was item one item one it would go it would take up twice the space to show the to show the content right however if let's say I wanted item two to take up all the space in between and item three to shift completely to the right then I could do something like this I could say for item two I could say item two Flex grow one now what I'm saying is that item two should take up how much ever space is available in between and you can specify any positive number here 1 2 3 4 and we'll talk about what they mean but as soon as as soon as you specify something other than zero item 2 starts to grow to take up the available space okay now let's say I wanted to do something slightly more complex let's say what I wanted to do was item one should take up maybe 30% of the space item three should take up 30% of the space and item four should item two should take up 40% of the space so it should always be if there is additional space available it should go 30 40 30 okay and Let's do let's see how to do that so the way I would do that is simply by specifying those proportions for each item so for item one let us say Flex grow to be three and these are proportions so that's why I don't necessarily need to write 30 40 30 these are not percentages and item three will also be Flex grow now you can see this layout 3 43 and maybe just to make it a little more pronounced you can look at maybe 2 6 2 and you can see that 20% of the space is taken up by item yeah 20% of the space is taken out by item 1 20% by item three and you can see that item two takes up about 60% okay you can also do something like 1 1 4 they don't have to add up to 10 or 100 or anything it's just that now you can see that the out of the additional space that is available 10% of the space is taken by item 1 10% by item three and the rest is taken by item two okay so what you're specifying is among the available additional space how much space should be taken up by each item how much additional space so these are not exactly in that proportion these are actually not exactly 1 is to 4 is to one because the base size is not affected and that is where we'll talk about Flex bases slightly down the line okay but grow tells Flex grow determines a flex item's ability to grow relative to other items within a flex container allowing it to expand and take up the available space so what you can do is you can say that out of all the additional space how should that space be distributed to each item and the by default it is zero so by default the additional space does not go to any item and as you start setting values for each item then by those proportions the space is distributed okay so that is flex grow next up we have something called Flex shrink okay now just as we have Flex grow we have the flex shrink property and the flex shrink property determines a flex items ability to shrink relative to other items within the flex container allowing it to contract and fit the available space so here is how it works let me get rid of flex grow settings for now let's just disable this disable this this okay so now let's say we had too much content here and we had to actually shrink things how can I do that well let me just add a bunch of space here okay so now there is now there is more space here and you can see that the text is wrapping onto the next line but if we wanted to if you wanted to shrink things a little bit then we would have to go in and set the shrink property let me set here Flex shrink and by default things shrink automatically so this is the default value so you can see that they have shrunk a little bit headily they should have been like this but they have shrunk a little bit they have shrunk a little bit because the the text has come onto the next line so there's definitely some shrinking that has happened right so shrinking is happening by default and they're going to shrink to their base size and they're not going to shrink beyond the base size by default but in case I set Flex shrink to one for one of them and then I set Flex shrink to zero for the others so I've set Flex string to one and flex string to zero you can now see that as I shrink it item one shrinks which is the default it tries to shrink so till it can no longer shrink Till There is no till it till the space of its children is completely taken up but item two and item three don't shrink because the shrinking is Con that's what happens and of course you can then shrink in proportions as well so let's say you set it up in such a way that each of these are taking up some additional space you have original size original size here and you then going to try to shrink them in a certain proportion so item one is going to shrink in a certain proportion item three is going to shrink in a certain proportion this will be clearer if we have more content here so let me just put some more content so that each of these can shrink independently okay now you can see that item one has shrunk significantly whereas item two and item three have not shrunk at all but let's say we want the shrinkage to happen in a certain proportion so then we could say that okay item one should shrink in the proportion of one item four two should shrink in the proportion of three so it should shrink 3x and item three should also shrink proportion one right you can now see that right now item two is shrinking the most whereas item one and item three are shrinking the least so what we are seeing here is that the decrease in size has to be distributed in the ratio 1 is to 3 is to 1 for the specific columns okay so that is flex shrink and then the final the final property is flex bases now the flex basis property decides what is the initial main size of a flex item before any available space is distributed and by default the flex basis is set to Auto which means that the initial main size of each child is determined by the item's own width and height which is basically the width and height of its content if it is not set okay however you can also say that the basis or the main size of a of a particular item is zero so let's see what happens when we do that let us set Flex basis to zero for all of these okay now when we set the flex bases to zero what we saying is that there is no basic size you can keep reducing the size and well I think I guess it's one probably yeah so by default Flex bases is set to Auto which means it takes up its default size and then Flex basis of zero says that there is no basis size and it can shrink as much as possible so in this casee you can see that item 1 2 3 are all shrinking as much as possible because we've not set a basis size so the basis size is just as low as possible right so by default there's no shrink there is no it is not going to take up any additional space than the minimum necessary space on the other hand and when Flex basis is zero shrink doesn't really make sense on the other hand we can add Flex grow and now what we're seeing is that they can grow to take up the additional space in the specified criteria so 1 is to 4 is to 4 to take up whatever additional space is available Beyond a very basic minimum space okay so the interplay of flex basis Flex shrink and flex grow is what decides what happens in the default State what happens when you have more space available what happens when you have less space available okay but however most of the time you don't actually use these three properties you just use a basic value or you just use a simple Shand property called Flex okay so here's what you can do instead of saying Flex instead of saying Flex grow Flex bases Flex um shink Etc let's say I want the ratios to be 2 4 and four at least the ratio of the additional space and the shrinkage I can just specify something like this Flex 2 Flex 4 and flex Flex 2 and now things are automatically scaling as I expect so there is the base size that still applies the very basic minimum base size so when you do Flex 2 Flex 4 flex two what that means is you're saying that the flex grow value is two the flex shrink value is two and then the flex value is or the flex basis value is zero okay or the minimum possible space so normally you'll just end up doing this Flex 2 flexx 4 and Flex 2 or setting some kind of a proportion between these Flex items and that is how you'll use it but you have a bunch of different ways to use the syntax you can just set a single initial value you can set it to Auto you can set it to none which will just use 0 0 for 0 0 for each and you can just use a single value one value syntax like Flex one which is going to set it to 1 1 0 or you can use a two value syntax which is going to set it to one one and then maybe a specific base size a fixed base size or you can use a three value syntax which is going to use a certain percentage base size as well so you have a bunch of ways to set the flex property okay the most common use case of the flex property is something that I want to show you because Flex grow bases and Shrink i' I almost never use them because they're never layouts are never that complicated that you need to use all these properties but the most common layout that I use is that one of these needs to take up all the additional space and the rest of them do not need to take up the additional space so in that case I would do something like this I would just go in let me just reduce the content a little bit Yeah and let me reduce the padding here a little bit as well yeah so the most common use of the flex property which is the flex grow shrink and basis property is this you want item two to take up all the space in between no matter what the screen width is so I would just go in into item two and I would say Flex one and just by doing that just by setting Flex one item two takes up all the space in between not just horizontally but this can happen vertically as well so let's say we have display flex and flex Direction column and we have a height of 150 PX or let's make that 250 PX yeah so you can see here now we are taking up all the available space in this Direction all right and similarly one other use case you might have is that I want item one and item two to always have the same width so let me just go back to flex Direction row and let me just set item one f one let me just set this to flex 5 or something like a very high value and item three okay now you can see here that more or less item one item three are going to have similar wids and we don't necessarily have to achieve it by setting these Flex values we can also just do these in this way we can just say width 20% and width 60% and width %. okay so this is the actual real use case of the flex property or why we use flexbox because we want to achieve a certain set of wids this may be our main content this may be our left content this may be our right content all of that of course when we using the flex property under the hood it's it's using Flex bases Flex grow Flex um shrink and all that but I just use the flex property directly okay so experiment with the various options for Flex growth Flex strength Flex bases but don't stress if they don't make a lot of sense because there are certain edge cases certain special scenarios which you may not be able to keep in your head you can always just look them up the key is maybe just to use the flex property and try to get what you want and the most common use case is either setting Flex one to expand a certain div to take up all space or using Flex one on a couple of divs to maybe make them roughly equal width okay now flexbox has many applications in all kinds of web design as you can see for the New York Times website this kind of a layout is achieved and made responsive only using flexbox it is used to create responsive layouts it is used to create certain grid systems as well there's a separate layout called The Grid layout which we've not covered today we'll maybe try and cover at some point it is used to create equal height columns let's say you want to have maybe a bunch of uh cards showing side by side all of those cards should have equal height that is something that you can create using flexbox it is used to perform vertical centering let's say you want to center a div vertically on the page or vertically inside another div the way you do it is simply by setting Flex Direction columns justify content Center or Flex Direction row align item Center it is used for reordering elements sometimes on mobile you want a left to right a certain layout and on desktop you want a reverse layout so that's what you can use it for it is used for maybe showing image and text side by side it is used for creating responsive forms let's say you have a form where you have a first name last name an example of this can be seen on the Jovian website so you can see that first name and last name are side by side and then again you have email and then we have phone number and you have the country code and phone number side by side and then you have again the program so all of this is achieved using flexbox and it is used for ensuring spacing an alignment making sure that something takes up the entire space making sure that two divs are the same size and there are many tutorials you can go through the more practice you get with flexbox the better you will get at it specifically I would highly recommend the series of screencast by West boss called what the flex box it goes into each Flex property and then it shows you a bunch of specific scenarios as well and I would also highly recommend you to check out 30 days of flexbox which is again a series of tutorials that you can follow along day by day and there is just for reference there is this complete guide to flexbox that you can always check out this contains a bunch of visuals and it contains information about each property so that you don't have to remember this I always look this up I never remember this even after using this for probably 10 plus years at this point okay so it takes a while to get used to things in flex boox but once you do you can build pretty much any layout that you can imagine right so the last thing I'll say about flexbox is that it's powerful but because it is so powerful it is also somewhat confusing it takes a while to get used to it but don't give up don't run away from flexbox just limit your usage to basic Flex Direction Flex wrap and align items and justify content and maybe every now and then use the flex property so so let's now go ahead and redesign the Jovian Courier site so this is what it looks like on desktop I think it looks fine on desktop for now we don't need to really redesign anything here but we do want to redesign it on mobile because on mobile it definitely doesn't look good at all so we want to do something with the mobile design and we are going to follow these steps first we going to create a separate branch on our Cod space remember we don't want to affect the main side when we are making changes when we are experimenting so we're going to create a separate branch and test our changes there without affecting the main side then we are going to create separate wireframes for mobile and desktop screens then we are going to set up base Styles and media queries for a mobile first design then we're going to implement each section first for mobile and then for desktop then we're going to test each section at various widths and make required adjustments and finally we're going to create a pull request we're going to revie review that pull request review the preview deployment and then merge it back to the main site okay so our main site which is Jovian careers responsive Livewell DOA this is going to remain unchanged till we merge our pull request right so this is what the common practice is that you have the main site that is running then you create a branch work on your feature and once the feature is reviewed and tested and merged back then this will automatically get updated because versal will do an automatic deployment for okay so this is our main site we're not going to affect that but this is our preview site which we are looking at here let us just open up index.html with live server put that in here so this is a preview site let me just set it to default WID so this is what it looks like on desktop this is 100% width let me just open the same page up in in a couple of other browsers as well and I'm just going to select different devices in each case so here I want to study its width on the tablet let's say maybe a tablet would be about 700 pixels the width a little bit here yeah so about 750 pixels I believe would be a tablet layout and let us also create a mobile layout here so we're going to look at a mobile layout as well so let's maybe design around 3 maybe around 400 pixels that is what most mobile layouts are around okay now we have for our code space for our index. HTML which is running using the live server extension so this is all the preview of what we are doing on our code space we have the mobile layout here we have the tablet layout here and we have the desktop layout here and we're going to start with the mobile layout we're going to do a mobile first design and then we're going to slowly improve that layout to account for tablet and desktop as well okay so we're going we going to use these break points under 576 is going 576 pixels is going to be a mobile layout so this is about 400 that's mobile under 768 pixels and above 576 is going to be a tablet layout I believe we've set this to about yeah we've set this to about 7 let's set it to about 740 yeah so that's in our that's in the tablet range and we can always go left and right and we can shift things and greater than 768 pixels is going to be a desktop layout which is what this is and of course we can also then consider large desktops etc for now I'm simply not considering those okay so let's get started step by step slowly and before we proceed I would encourage you as you are reviewing this to pause take a few minutes to think about how you would design the mobile version of the jobian career site and take inspiration from the examples that we looked at earlier and maybe try to create a wireframe for the mobile version of the site on pen and paper or using a digital whiteboard like excal draw.com but here is a wireframe that we are going to be using now typically a design mockup that is given to you is going to be given for mobile tablet and desktop similarly we can try creating my frames from mobile tablet and desktop but just to keep things simple we just going to create a mobile wireframe and a desktop wireframe excuse me we're going to keep things simple use a mobile wireframe and a desktop wireframe and for tablet we will just approximate and maybe pick some elements from the mobile and somee elements from the desktop okay so for the desktop view we are going to use the same layout that we had earlier so which is the Jovian logo here at the top with the Jovian text then an image here the about Jan section the job opportunities table and the submit your application form and then there is a footer at the bottom with a bunch of options courses programs and YouTube for mobile here is what we are going to do we are going to use a Navar but in the nabar we're not going to show the entire Jovian logo we're just going to show the Jovian icon okay this is a common practice on mobile that you often just show the icon so I'll just show you an example of this let's say I go to jan.com learn zoom in here a little bit and if I go into the mobile view here you can see that at this point we only show the icon because we often have a bunch of things on the right as well this is the profile icon which also happens to be the Jovan logo but yeah we only show the icon on the mobile and we also maybe change the layout slightly on mobile as you can see on the Jovan platform as well okay so on mobile we're going to show the icon we are going to show the image but we probably going to reduce its height a little bit not to ensure that not to take up the entire page otherwise it might just take up a lot of space then we are going to have this about Jian section where we going to have this description and we are going to move the image below right so the image is going to remain below and I think I'll use the same layout for tablet as well then we are going to have job opportunities but this time for job opportunities we are going to use a list or maybe a bunch of divs so we are going to show these cards instead of actually showing a table because on mobile viewing a table doesn't make sense but on desktop you're still going to use a table so we're going to see how to achieve that then we have this layout for application so on mobile it's a nice idea to maybe just make all your inputs full width so just let them occupy the full width of the screen and uh we have this upload resume cover letter Button as well and finally for the footer we are simply going to show the options one below the other unlike on desktop we are going to show where we are going to show the options side by side okay and we'll decide how to change these layouts for tablet as well but these are the two layouts that we are working with okay and specifically the job opportunities table is going to be the real challenge because it doesn't have a table layout on mobile it has a list of cards and I encourage you to go ahead and replicate these wireframes on your own wireframing is a very useful skill for a web developer before you can go in and start coding the website you should have a very clear idea of how it's going to look at the very least using these rough wireframes and as I've said before we are going to follow a mobile first design which means we're going to first set up CSS styles for mobile section by section and then we are going to enhance the CSS styles for tablet and for desktop and maybe even for smaller uh for larger screens okay so for that here is how we can begin we can begin by commenting out all the existing CSS and just rebuild the page right from scratch and we'll just put in a bunch of media queries at the beginning okay so first let's comment out all the CSS let us open up styles. CSS here let us comment out all the CSS the way we'll do it is by adding this star/ star at the top and then adding a star slash at the bottom okay so you added SL star at the top and star slash at the bottom and now if we reload our Pages we can see that all the all the CSS is gone completely gone right so we have no Styles we're starting from scratch same content but no CSS this one image is looking really big so I'm just going to give this image a height explicitly in my index.html file I'm going to go into this index.html file and I'm going to scroll down and find this image a team image and I'm just going to give it a height of 100 just so that it doesn't mess up the ENT entire page when I'm setting things up all right so now we are more or less ready to begin we have this mobile layout top to bottom content we have this tablet layout and we have this desktop layout all right now let us first just bring in our media queries that we are going to use for each layout now the base Styles because we using a mobile first layout the base styles are just going to be added right at the top without any media query they're going to apply to all the screens and then what we're going to do is have this condition called whenever the width of the screen exceeds 576 pixels then we want a certain set of CSS rules to apply right so we are going to then copy over this media query bring that in and that is going to handle tablets so more than 576 pixels that is going to handle tablets notice that it's going to apply about 576 and it's going to continue applying unless further overridden in a subsequent query okay this way we can avoid a lot of repetition instead of setting all the properties for each particular possibility okay then this is maybe going to be the second media query that we'll use which is for laptops or maybe desktop screens proper browsers so this is going to be medium devices or MD which is going to be above 768 pixels and then there are also maybe another couple of queries which we may not use but let's just keep them around what to do if it's even bigger if it's bigger than 900 pixels and if it's even bigger than 1200 pixels again we don't have to use these but if we want we can maybe increase the font size a base size a little bit or something like that all right so now our basic setup is ready we have this we have like basic CSS rules that are going to come here we are going to then add device specific or um progressively enhance our design to tablet and desktop okay looks good looks good the next thing to do is to just set up copy over some of the basic Styles without any media queries so I'm going to first come in here and I'm going to say that the font size the base font size on mobile is going to be not 16 pixels but 14 pixels I just want the font to be slightly smaller I don't want it to be too big on mobile because otherwise there may not be enough content on the screen to be readable so let me keep that and then let me come in here into body and let us come in and let us set the font size for the body to 1 em 1 M okay that is going to be the font size for the body then let me come in and let me set uh apart from the font size for the body we've also set here that we've removed the margin padding all of this needs to go for mobile as well we have set the font family to Roboto and Sans siif and we've set the the body text color to 444444 okay great let us now set the font family and the font weight for our headers so we want the inter font family to be used and remember these font families have been included using these link tags you can see here that we've included the inter and the Roboto font family and their various weights so all of this is common all of this is going to be present on mobile tablet desktop that's why we just putting it completely outside okay so that's fine too then let us go in and let us set the font sizes for each header so remember we are using these Rams we're using RMS or relative measurements for the headers so that on mobile screens there are going to be multiples of or let's set this to one ram on mobile screens uh they are going to be multiples of 14 so on Mobile screen you can verify here if I go into effect and I check its computed font size you can see that it's 35 pixels 35 is 2.5 * 14 okay but as we go onto bigger screens we're going to set the base font size to 16 pixels and so the header size is going to increase as well okay what else yeah I think that's what we've added so we've added HTML um body H1 H2 and let's add a couple more let's add the text color and let's add the the style for the link right now you can see that links are underlined I don't want that and I want links to be my brand brand blue color so that's where I'm going to go in and grab this decoration text decoration for the links let me put that in here as well okay so yeah so now you can see that if I reload the page our links have the desired color they don't have an underline and on clicking our links have the desired dark color or on our links have the desired dark color okay all right so now this is looking good so far we have set the base Styles let me just reload this page yeah we have set the base Styles now and of course it just spreads out um on tablet as well so there's nothing that really is changing across the different layouts the first change that I want to use is when we get to a tablet Style I want to use a slightly bigger font size for the body okay so within the media query where we hit a Min width of 576 I want to use a slightly bigger font size I'm just going to come in here and I am just going to use a bigger font size here so I'll just come into the First Media query which is over here and I'm going to put the font size of 16 pixels let's move these up let's keep all the base Styles right at the top so that things are well organized so these are the base Styles the base font size is 14 pixels no change here you can see that the base font size is 14 you can actually go in and check somewhere that the font size is 14 but as soon as we hit a bigger font size as soon as we hit a bigger screen as soon as we hit a Min width of 576 pixels the base font size changes to 16 pixels okay you can actually observe this change in the font size by just dragging this so 576 the text should become slightly bigger you can see here that the text became name slightly bigger and not just the text because we are using Rams to set the size of the headings you can see that the headings have become slightly bigger as well okay so this is one change that you will often see that from Mobile to tablet or maybe from tablet to desktop there will be a slight change in the font size of course you can go ahead and maybe change let's say you get a very big desktop a very big screen you can use the base font size of 20px let me just come in here and let me just show you what that would look like as as well see whenever we hit 1200 pixels I want to use 20 PX so so far it's 16 at some point it should become 20 okay maybe I'm still not hitting 1200 pixels let's try that at maybe 992 pixels yeah so you can see that it's small here so this is the tablet layout and at 992 pixels it becomes bigger right and then of course on mobile it is even smaller so you have all those well actually let's set that to 20 so at 992 pixels it should become bigger yeah you can see that just around 992 pixels it starts to become even bigger right so at here this is mobile and this is tablet and this is the large desktop okay these are all the variations that you can check and sometimes you just have to inspect things visually and figure out if you're getting what you're going for okay all right so now we've changed the base text size and I encourage you to maybe change some other base styes maybe change base heading sizes as well and see what happens now the next thing we'll do is fix the nav bar okay so first let us implement the nav bar from for mobile let's bring this back to about 400 and let us go check the nap bar Okay so now the we need to bring in the basic nav bar Styles first so let's bring that in here the nav bar has a padding of 8 pixels and a margin of 0 pixels so let's just bring that in I think we can keep that I don't think we need to change that at I'm just going to bring it all the way at the top you can see that our Navar is starting to look fine now one thing I want to do in my Navar is not use this entire logo but maybe use a smaller version of the logo that contains just this icon and not the text and for that I have already put up this this icon online so I can just use this link or I can download it drag it within my code space and add it to my repository both options are available so let me do one thing let me just add this icon into my code as well so let me just go IMG ID logo and I'm going to change the icon with the text to logo with text okay then alt equals Jian logo I'm going to change the alt of the existing IC on to Jo logo with text and let's specify an SRC and let us close it and I think we have a height 30 as well so let us set a height equals 30 as well I don't think we need to change the height particularly okay now we have both these images we have the icon image and then we have this logo along with the text now we want to show one of these on mobile and then on tablet let's I think we have enough space that we can show the entire logo with the text so here is how we can achieve this first we want to hide this icon we want to hide this icon we want to hide the logo with the text on mobile so by default I'm going to keep it hidden and the way to keep it hidden is let me just select logo with text so I'm selecting it with the ID and let me just set display none there it's gone the logo with the text is gone it's gone not just on mobile but it's gone on tablet and it's gone on it's gone on desktop as well now let me make this logo text visible on tablet so I am just going to go into the tablet style which is above 576 pixels or Min width of 576 pixels I'm going to say logo with text display I can just say I believe I can do lock which is the default now it doesn't show up on mobile which which is under 576 pixels but it does show up on yeah it does show up here on tablet and it does show up here on desktop as well okay but of course we also need to hide the logo we need to hide this logo icon so I can just also say over here logo display block on mobile and I can just say logo display none on tablets okay so on mobile I have the logo only the icon on tablets okay that should say none on tablets now I have the logo with the text and also on bigger screens I have the logo with the text so that takes care of the napar that is the change that I'm going for that is the change that we have on our website as well okay all right so the napar is taken care of and the only change we made is added this second image and we have added the base style where we putting the padding in the margin and we have put the logo with text as display none and we are showing it on tablets and desktops and we are not showing it on we not showing the icon alone on tablets and notice that once we apply for tablets because this is this only has a minwidth criteria not Max width it's going to apply at all bigger sizes if I want I can then go in and change it at a bigger size as well otherwise I can leave it as is so mobile first progressive enhancement section by section okay let's fix the banner image so the there are a couple of issues with the banner image one is that it's not taking up the entire width of the page and second is that I might need to limit the height of the banner image for each of the the wids that I'm working with okay and I want to do that let me just do that so the first thing I'll do is go into the banner image looks like it has a height let me remove the default height so that I can change its height based on the specific break points and let me come in here and let me just copy over some of the content that I already have for the banner so we have object fit cover this is to make sure that depending on what width or height we have it automatically fills the space the available space okay and here's the first thing I'm going to do I'm going to first give it a height of just 120 pixels the banner image and I'm going to give it a width of 100% okay and I think that looks good so maybe 150 pixels let's see yeah that looks good so now on mobile this is what it's going to look like it's going to take up 150 pixels and it's going to take up the entire width of the page and it is going to cover so if we did not have object fit cover you can see that it stretch stretches the image which is not good I don't want to stretch the image especially if these are faces of people so always use object fit cover or sometimes you might need to use object fit contain if you want to if you want the entire image to fit inside which is not what we want here we want cover so let me just put object fit cover that's what this looks like okay perfect so that takes care of the banner on mobile but you can see that starting to get cobbed on lap on tablet and it'll get further cropped as I go bigger so on on maybe on tablets I can increase its height a little bit so I can say banner I can give it a height of 220 pixels how about that yeah I think that looks good maybe even 200 pixels should do it I think that's good and then here again it seems to be getting cropped a little bit so I can come in and I can come in into the next design and this is the first time I'm touching the desktop design so far we've just been updating for tablet and that has carried over to desktop so here I can maybe give it a height of 240 pixels maybe even 250 pixels this is now looking good okay so I should probably verify that this scales properly okay maybe I need to give it a little higher let's go 300 pixels yeah I think that looks good so far at this as well but if I wanted I could even just do something like 250 pixels here and then on even bigger screens I could just go in and I could just make that 320 pixels okay so at some point it's going to become even bigger all right so that takes care of the banner I don't think there are any other changes required so we've removed the height property that was there on the image and we've actually set height specifically at various break points so it's going to start out with 120 pixels it's going to grow to 200 and then to about 280 pixels or so at a desktops so that was pretty straightforward let us now go ahead and let us now do the about section as well so this is the about Jovian section it has this H1 and then it has uh some text over here and then it has this image as well and what we want is if I go back to our layout we want the text to show up above the image still centered but on desktop we want them to show up side by side okay let's try and Achieve that so first thing I'm going to do is just copy over the styles for H1 so H1 has textaline Center I that's good I'm just going to keep that okay but I feel that the space here above and below H1 is seems to be very high so I want to reset that I just want to say margin I just want to set the margin to 8 px0 so just 8 pixels of space above and below should be good enough for me maybe I could go 12px yeah 12px looks fine but of course that may not look good on tablet and on desktop so I might then have to go in here and I might need to just put in an H1 margin let's say 16 PX on tablet and I might go in here in into desktop and I might set margin to 20px Z okay so it's about 20 pixels on the desktop which looks fine about 16 pixels here on mobile on p on tablet that looks fine and about 8 pixels here and I can verify this I can click inspect and I can go in here into the computed Styles and make sure that it has the right believe 12 pixels is what we put here so 12 looks fine okay so that's how you can progressively enhance spacing for the H1 but otherwise this looks fine to me of course the H1 itself is also bigger because the base font size is bigger okay next up we have this about section which has the ID about and notice that we have set a don't need this notice that we have set a maximum width for this about section okay so we may not need this maximum width on mobile but it was it is still useful on tablet and on desktop so I'm going to keep it around so we want to use display Flex that that was for the horizontal layout and then we have given it a Max width of 800 pixels and we've given given it a margin zero Auto and we've given it an internal padding let's just check okay so now as soon as we did this you can see that here it has taken up some space and now it is showing things left to right here is what I can do now this is the benefit I get with flex I can just set Flex Direction column I can use flex Direction column so that things the first and the second section the description and the image show up one below the other and then I can go in and let me see what I want to do for tablet so for tablet as well I think I want to keep this layout but I want to limit the width to about 500 pixels I don't want it to go all over the place so I'm just going to put in here Max width of 500 pixels so but on mobile and tablet it just uses 500 pixels on tablet also this looks fine but definitely on desktop I want it to take up 800 pixels as it is available right so I'm going to go in and I'm going to say for the about section set the max width not to 500 but to 800 pixels so now it's taking up 800 pixels and set the flex direction to row and not column so now it's going to show up side by side okay this is great but of course it's not taking up 50% of the space so I need to fix that as well so let's come back to the mobile view now there are two parts within about there is the description and then there is the yeah there is the description and then there is the image the team image so let's first get what we're doing here so for the description we have the width of 50% that we need to set only on desktop and we have a font size as well so let's just copy these over and let's try to fix them one by one so let's see here we are going to use the description we don't need withd 50% and we probably don't need the padding right but we do want the font to be 1.25 RM so I'm just going to come in here and I am going to go into maybe the large device because I think this still works for the tablet layout as well I'm just I'm just going to go into the large devices sorry I'm just going to go into the medium devices which is more than 768 pixels which is what this is and I'm going to add the width condition here under description okay let me add a width of 50% and let me add that padding right so that there is space between the description and the image and now you can see here that the description takes up half the space only on the laptop desktop and all the bigger screens it doesn't take up it takes up the full space on tablet and it takes up the full space on mobile as well and of course the flex direction also changes from column to row and that is why the rest of the space is taken up here by this image okay so the next thing to do is to fix this image so let's see we are going to get this image so we have this team div and it's currently configured to take up only 50% of the space and I I don't think that is necessary here so I don't think we need to take a 50% of the space here but I do like this border and looks like there is a height we have set so this height is probably coming from the HTML so I'm just going to remove this height so this is the team image I think this is looking good and this has the full width I if I want I could limit the height but I'm not feeling like it I'll just leave it as is I think this image is looking good I'll just leave it as is so it's looking good on mobile it is looking good on lapt on tablet as well I think on tablet too because we've limited the maximum width on tablet 2 the team image is looking fine looks fine on tablet maybe we might need to configure like a might need to configure something to make sure that it is actually show up properly let's just give team a maximum width of or a width of 100% yeah still a bit still a bit problematic well so there may be some minor fix that may need that we may need to do at the very end and we'll inspect it and fix it but for now this is fine but where we really need to make a change is over here so let me do one thing let me just fix the height of the image as well so let me just fix the team image height to 240 PX yes we don't need it I think this is fine yeah but now it is taking up too much space so we need to go in here and on the large desktop layout the team div should just take up a width of 50% okay all right so this is what we're going for we have the left half which is and of course the maximum width is 80 80 pixels and it is centered vertically using margin zero Auto so that is all that is being done on the about section here margin zero Auto and Max width of 500 and then the max width is increased to about 800 here the flex direction is row so that's why this is showing up like this side by side and the team image is has a width of 50% so that is looking fine too okay and it looks fine on mobile as well so mobile 2 this team image is looking good I don't see any problems here it looks fine on tablet as well more or less fine don't I don't see any major issues here we may have to make some change later on but otherwise this is looking fine now moving right along the next step for us is the jobs list so now we need to add a jobs list now if I go back here if I go back back here to our mockup on the mobile we have a job list so we have these cards and each card has a title and then each card has maybe one of these jobs listed right and on desktop we have a table how exactly do we achieve that we can do some kind of magic where we change the display type from div to table and all that but the simplest way to do it is to just show a list on mobile and hide it on desk toop and then show a table on desktop and hide it on mobile okay so here is what we are going to do we are going to first take a bunch of HTML so we're going to create a bunch of divs so we are going to create a div called jobl list and we are going to then have a bunch of divs each with the class job and then inside that div we going to have a bunch of divs each with the class job title for the title of the job and job detail for each detail within the job okay and of course I have the data for all four jobs here so these are the this is the same data that is present in the table but now I'm no longer using a table I am simply using a I'm simply using dibs not even a list and I can simply copy this so let me just take this so that I don't have to just type all of these jobs out yeah let me just take this HTML and I'm going to go put this into my index.html file right under or right above the jobs table okay so now I have this data of employment opportunities first let me change employment opportunities to job opportunities I think it looks better as job opportunities so now we have this job opportunities and I have a list of job opportunities which are just a bunch of divs and then I have the table of job opportunities as well and the list of job opportunities has the ID job list jobs list and the table has jobs table so as you can imagine what we can do is we can just set display properties for both of these to show and hide them respectively and while we at it let us also fix the display property for this H2 so let's go in here and let's go down first thing we'll do is for the H2 we are going to set text align Center so let's bring that up I think we are always going to have text align Center for H2 so let me just put that so that H2 has text line Center we may want to once again reduce the spacing above and below the hed2 um I'll skip that for now but I'll leave that as an exercise so use a smaller spacing on mobile and larger spacing on tablet and desktop respectively okay next up let us just figure out how to show and hide the job list so first of all the entire jobs div itself let's see if there is some setting for the entire jobs div yeah so the entire jobs div has a max Max width of 800 pixels so let's just take that and let us just put it here at the top okay so the entire jobs div on mobile just takes up the entire width no issue on tablet it takes up the entire width as well but we might want to limit it withd slightly you can see here at around 600 on tablet we might want to just Center it we may not want to just show it we may not want it to take up the entire space just like this content is centered we may want to center it so how about we use a Max width of 500 pixels just like that so that the content is centered on the tablet but then on desktop we want it to take up slightly more width right so this is going up to 800 pixel width so I'm going to come in into the desktop media query which is laptops desktops and which is above 768 pixels and for the jobs div I am going to set Min width of 800 pixels okay now you can see that it takes up 800 full pixels on the on desktop on tablet it takes up only about 500 pixels and on mobile it takes up the entire space available okay that's good Let Us Now set the display criteria for for both of these I'm going to go in and there is this jobs list that I have which I want to have display block by default and the jobs list the jobs table I want to set its display To None okay so now my job opportunities is visible here on mobile it is visible on tablet and it is not visible and it is visible on desktop as well and this is where I may need to change something so I need to change the layout here and I want to hide this and show the table so let us try and hide this and show the table well so if I go in into this layout above 768 I'm going to say jobs list display none remember the jobs list is simply the list of jobs that we have so that's gone and I can say jobs table display block okay now we don't actually want to use display block here the default value of display for a table tag remember jobs table is a table you can see here it's a table tag so if you just search default display value for table tag the default display value for the table tag is all right I'll just tell you the default display value for a table tag is actually table itself so we can we need to set display table here and when we set display table here what it does is that allows the table to take up the entire width of the screen um on most on most screens and that will happen once we add some of the other table Styles as well okay so just keep that in mind that the default display for a table a table tag is table all right well we are doing fine so far um we might need to copy in as soon as the table is visible we want to use it we want to set its display to use the entire width and yes we have a bunch of these settings as well so we have the Border setting we have the Border collapse setting and then of course all the table Styles can be incorporated directly into the media query where the table becomes visible let's capture all these table related Styles so this is used to set maybe the borders for each table cell this is used to set a bunch of other things now you can see here that our job opportunities table is showing up on desktop but it's not showing up on mobile it's not showing up on tablet and mobile and this is because jobs table we are setting its display to table we can also do block but you'll notice that in block it doesn't do what we want you can see that block is not what we want we want table because we wanted to use the entire available space okay so display table and below below the desktop screen width we have this display set To None right and of course we have this header row so we have colors for the header row we have a bunch of alignments then we have these alternate rows we have borders for these alternate rows that is something that we specify here we have a padding to space things out and for every alternate row we also have this background color that is done using the nth child all of this is covered in the previous tutorial okay all right we're getting there we're almost there now the only thing left for us to do is style this actual job opportunities this job opportunities div okay so let's try styling it quickly so the job opportunities div is this has each of these jobs has the class job so first I'm going to style the job class so do job and for the job class I am going to say let's look at mobile so I'm going to first give it a border so border one PX solid I'm going to use a light gray DDD DDD okay now they have a border then I am going to give it a margin top margin top 4 PX maybe even 8 PX all right I'm going to give it a border radius of 5 pixels okay that's nice now I have a rounded border I'm going to give it a padding of 8px let's see what that does okay that's looking good all right so I have these boxes now so these boxes are looking good then I have job title and job detail let me try and quickly style those as well so job title and job detail okay the job title is let me see font size let me give it a font size of 1.25 RM that it scales accordingly let me give it a font weight of 500 okay that's looking good let me give it a color of 22 22 22 okay color is looking good and then for job detail well let me just give it a margin top of four pixels just to space things out a little bit and let me give a color of be a slightly lighter color 55 55 55 okay that's looking slightly lighter okay I think that looks good so I have some job I have a border I have this radius around it I have this title I have U set up all of these details I've put in some space here as well and I've given it some weight so that's looking pretty good I think that's looking good on tablet as well and it is centered on the page and that is looking that's just not visible on desktop so with that we have completed the job opportunities section so you can see now we have the jobs list on mobile and tablet and the way we did that was first setting a Max width of 500 and then for job giving it a border border radius margin padding for job title increasing its font size for job detail increasing or making it lighter and then of course on the Min width of 768 we increase the max width of jobs so that it's a little bigger on desktop and we set the job list display to none for the job stable on by default we we set it display to none and once we reach that 768 width when we want the displayed we set it display to table we make it full width we give it a border border collapse and we give all those settings which are required to show the table properly okay all right we are on the last leg here let's go ahead and fix the application form as well the first thing I'm going to do is just pull out all these application form settings right all the way to the top so let's see have application form group form input all of that okay so how it works is we have this application div and inside this application div we have an application form which is a form with the IDE application form then each of these inputs and labels are together part of a form group okay so we're going to use all these Styles and we have a bunch of custom styles that we have set up for all of these so let us go in and do that let's see let's come in all the way to the top above any media queries and let us paste the Styles and this is what we end up with so now we have for the application itself the max width is 500 800 pixels so it takes up the full width which is not what we want let's set the max width to 500 pixels instead okay that's fine and now it is in line on tablet it is all centered but of course we can go in and on the desktop version we can increase the max WS so we can say hash application Max width to be 800 pixels so that on desktop it still takes up the entire width it's looking good I think the only change I'm going to make here it actually looks fine the only change I want to make here is maybe make the inputs full width so I am going to come in here I'm going to change this to form group because that is going to be more specific so in each form group I want the label to have have a certain I want the input to have the width of of about 80% let's say so that all the inputs are about 80% wide something like that maybe even 90% just going very close to full width yeah so I want all my inputs to be about 90% wide on mobile but as soon as I get to the tablet so on tablet I don't want it to be 90% wide so I'm just going to go in here on tablet I'm just going to set input select text area text area doesn't need to be modified I'm just going to set max width or width to be about to be Auto okay so on mobile it takes up about the full width and that's nice and on I can remove this with 80% here and set that manually here so do form group text area for text area we still want it to be a bit wide about 80% wide on even on tablet okay so on tablet what this is what it looks like the application look on application on mobile looks like this almost full width the application on tablet looks like this so it is not taking up the full width but it is still centered on the page along with the rest of the content and the application on desktop looks like it used to there's no change there okay so that's nice the final thing we need to do is fix the footer so we have a footer right at the bottom let's go ahead and fix the footer the first thing we'll do is just copy over all the existing Styles we don't need this H3 we don't need this apply I'll get r that so we just have footer quter links quter links Li and copyright that with that we've exhausted all the Styles yeah so we've carried over all the Styles so let me just go in right at the top before we create any media queries let's put in the footer Styles let's see what that gives us now we have a footer which has this background that we looking for and it has these links and it has this copyright all of that is good but on the mobile we want these links to show up one below the other and how do we do that well you see we have this display in line for Li I think we can get rid of this so the links are going to show up one below the other okay and looks like they're centered now but they're slightly off center so if I just inspect this list I can figure out why it is off center all of this seems to be centered but looks like this UL this um unordered list seems to have a padding on the left you see that green color thing that is just this padding on the left let's go into the footer links list and let us just set padding left to zero okay all right so that's what we have here we have this putter div then we have the footer links ul and then we have a bunch of Lis and that is now showing the Footers the footer items one below the other I may even add some margin bottom so I can say margin 4 PX and 16 PX so now I have a margin bottom so that they're slightly spaced out maybe even 8 PX okay so this foter is looking nice okay let's see on tablet now on tablet this footer is probably not looking good I think I can just get it back to inline so on tablets I'm just going to come in here and I'm going to say fter link Li display in line and let's see okay so on tablets it is in line on mobile it is still one below the other this is what I'm expecting and on desktop it is in line perfect with that we have completed the footer so we've done the we've done all the sections I think all of them look good on mobile tablet and desktop so that's good we have done the changes to the application form the only changes we made was some width adjustments for the inputs and we have done the changes for the footer the only change we made was that we wanted to show them one below the other on mobile and side by side on desktop and again practice this work it out step by step that is how all of these steps will make sense we can now review and deploy these changes so what we're going to do is first we're going to create a branch just going to do that here by first opening the terminal so let's say five you terminal I'm going to first create a branch so let's do get checkout minus P minus B is a quick shortcut to create and check out a branch in one step and let me just call it responsive layout okay now we've switched to a new Branch we've created a new branch and switched to it you can see we are on the branch responsive layout now I'm going to do git add dot I'm going to review the changes using git status you can see that above bunch of new files have been added there's a settings. Json as well not sure what that's for but it's okay then I'm going to do get add okay I'm just going to do get commit minus M added responsive layout now we've committed it normally I would commit after every section and keep updating my poll request but just for now just for example I'm doing that then let me do get push origin responsive layout okay so we stage the changes using git ad we then commit the changes using git commit and then we create uh push that Branch to GitHub using get push origin Branch name okay now we can create a pull request so there's actually a helpful there's actually a helpful link here that U that is printed out for us but we could always just go on the repository page and on the repository page you can see that GitHub tells us that a responsive layout branch has just been pushed and we can create a pull request so here's what we can do we can say added a responsive layout for the job page and I can mention changes and I can just bring in the changes that I've made here so let's see navbar has a logo without text then Banner size is updated based on screen then about section is vertical first then horizontal and then we have the jobs list on mobile and tablet and table on desktop what else application form full width inputs on mobile and uh vertical putter items on mobile okay just a short description of the changes and we can create this pull request and now you can see that our Joven careers responsive site which is our initial website Jian careers responsive doval doapp live doval doapp this is still not updated this still has the old design in fact I can go in into inspect I can verify this that it's still trying to show the table it's still trying to show things side by side but now you can see that in this particular pull request verel has created a preview deployment so I can visit this preview deployment this is just for this branch and you can see that on this preview deployment if I go inspect we have our new layout so this is what you want to do your main website is Asis no changes there but on your pull request you've made all these changes on your branch and you can test it out so somebody who is looking at your branch can first look at the preview deployment and the maybe the designer can take a look and tell you okay maybe you need more space about submit application maybe there is some change to be done in job opportunities maybe the footer is not looking nice let me rework that a little bit you can also maybe just see how things change you can see that okay job opportunities takes up the full space then it scks to around 500 pixels then it suddenly expands and now when it expands here you get this two column layout and here you get this table and that is looking rather nice and the application also expands accordingly so the designer or maybe another developer can review the changes visually by looking at the preview they can also review the changes manually so they can go in and they can actually check in each section okay looks like we've added a displayed or HTML file they can tell you maybe we don't need this displayed or HTML file get rid of it um we don't need this flexbox or HTML file so you can go and delete those files and update your pull request and okay they can see see a splits so there's a split view available as well let me just split view yeah you can see a split view yeah so they can see here the changes that have been made that you have added this jobs list as expected and you've not modified any other HTML except adding the job list and changing the title here they can see here that you've added a a bunch of Base styles for mobile and you've made it 14 pixels you've not changed a lot else maybe a few things here and there and they can give you inputs on specific things they can give okay this doesn't look right and they can comment it and then you can revise those comments and P pull your branch again and so on and they can see that okay now you've added a bunch of these media screen uh settings and all so this is a good way for you to even do a self review before you merge your changes to master and once the changes are approved then you can go in and you can get an approval and then you can merge this pull request to master okay now as soon as the pull request is merged to master what verel is going to do is it's going to pick up the new changes from the master branch and it's going to create a new deployment you can check this on ver.com that it is going to create a new deployment just now you can see here that's creating a new deployment uh created just now by syy Jovian and now if I reload the page notice that I'm on the deployed main branch Jovian careers responsive live. app.app and I reload the page and the layout is fixed this is the layout now the main page has gone live so this is the workflow that you need to get used to create a branch do your work test it out in a preview deployment and then merge it and then your layout is going to be fixed now we've created a responsive design just like that and that is something that you're going to experiment with in your next assignment okay so we staged and committed the changes pushed the changes to GitHub reviewed the code test at the preview deployment made some if we can required we can make some final adjustments iterate on it and then the pull request can be merged to the main branch and it gets deployed and this is the final mobile layout I think this looks pretty good it's everything is readable everything takes up sort of the full width this is the final tablet layout so we're centering the content on the page to about 500 pixels we're limiting its width so that things are still readable and this is the final desktop layout notice that we did not have wireframes for tablet but we just use some components from this side and some from that side to build it and as an exercise try adding more sections to the site try to implement them using a mobile first responsive design try creating a separate wireframe for the tablet screens and make changes to the page to implement it and then one other thing we we did not look into was the media type print what happens when you try to print this page so you can do that by trying to do command p and then trying to save it as a PDF and you'll see what your page is going to look like okay so by default it just picks up whatever is going to show up on the screen but for a print out you may need to do a separate layout and that is something that you can experiment with u that is something that you can experiment with the media print query okay so that's everything for today uh we looked at how to use CSS media queries and breakpoints to implement a mobile first responsive web design we looked at how to leverage various CSS properties uh specifically flexbox to build fluid and dynamic layouts needs a lot of practice so we will use flexbox extensively over the next several months so don't worry you'll get enough practice we looked at to create separate wireframes or design mockups to determine the layout of a web page at various breakpoints you always always should separate the design and the implementation don't try to do them both together you will get stuck we looked at implementing testing and deploying a responsive website using CSS media queries and flexbox the best way to learn these skills is to follow along step by step and type out all the code yourself and you can check out the completed code here using these links I have included a ton of resources here the idea is not that you need to go through through all of these resources right now a few I would recommend though is a responsive web design or media queries tutorial on CSS tricks the video course by vest boss on what the flexbox but there are a bunch of others no matter what you are feeling under feeling scared about or not confident about or doubtful about check out one of these resources you should be able to figure it out if one of the concepts that we covered today did not make sense and that's it so in this assignment two uh you will implementing a responsive web design using CSS media queries and flexbox so the figma mockups are already provided to you uh let's quickly go through the mockups so in these mockups uh there are three layouts uh for desktop tablet and mobile and on the desktop view there is a nav bar with the logo of the company and and some graphics some title subtitle and learn more button and on the tablet and mobile view also there is similar layout but the Navar is different it is not completely visible it is in the collapse mode and below the hero section we have the newest read section which is uh a card layout and on the desktop uh there are three cards in a row and similarly on the tablet also there are three cards in a row but on mobile we can see that the layout is bit different so it is having a column layout so you will need to use some Flex properties maybe to design these uh layouts for different devices and inside the card if we zoom in we have few more elements the image for the article the date of publish and the title and read more link so this is how the assignment 2 is looking uh the steps to proceed with this assignment are already mentioned and I hope you guys have already started on that so coming to today's session today we are going to build a responsive web page using flexbox and media queries so following topics will be covered in today's tutorial so we will be designing a responsive layout using CSS media queries then we will understand what are selectors in CSS and how to calculate Dynamic width for particular uh elements using CSS function and using the Box Shadow property so the prerequisites for today's session are you should be aware about basic HTML and CSS and uh you should know how to create a GitHub repository and the envirment that we are going to use for today's session is vs code and we will be using the cloudbased vs code that is the code spaces which is provided by GitHub so as a part of Designing a web page we are going to design a responsive block page which will make use of media queries flexbox layout and the design mockup and data is provided for you so let's go through the mockup quickly so this is how the layout will look on mobile uh it will have a page title and uh it has the cards which are stacked vertically so this is basically a column layout you can see and on tablet we can see that the card layout is almost similar but the uh method of rendering is different so we can see that on the tablet there are two cards in a row and for desktop it will be three cards in a row so this is the mock data that we will be using for uh our today's session so first let's quickly recap about uh what is responsive design so responsive design is an approach which ensures that our websites will look correctly and adapt to various different screen sizes devices and orientation so it will optimize the user experience by making the content more visually appealing so you can see from this image that this is some example of the mockup so on mobile it is vertically aligned and when it when we change the device it automatically gets aligned uh to some different layouts and it gets scaled on higher devices so there are few key principles that we should be uh aware about responsive web design first is the website uh layout should be flexible it should not be fixed sized like the width should not be given in pixels if we resize the screen it should get Scaled accordingly next is the flexible images so images have their own size and when we import the external images they render directly if we don't specify the width and the height separately and it might happen that the image can overflow uh of the screen width so to ensure that this doesn't happen we should be using some CSS properties so one is the max width that will ensure that our image is within the the screen width and other is the object fit that you might have already used in the previous lectures so that is used to maintain the aspect ratio of the image and it makes ensure that the image doesn't get stretched so we will be using that today third thing is the media queries which allows uh us to write various Styles based on the layout uh of the device so we can specify various device properties like width height and orientation and write the styles for that particular uh query fourth is the mobile first approach so this approach tells us that we should start designing our web page from mobile devices and then progressively enhance to the larger devices like tablet and desktop so this approach has gained popularity because of the number of users of uh mobile devices compared to other devices so the next concept uh is the breakpoints that is also important in responsive web design so breakpoints in CSS are specific points or conditions where the layout or styles of our web page are going to change and accommodate to different screen size these break points are generally used along with the media queries so what is Media query exactly so media query is the statement that allows us to write a specific set of CSS rules when certain conditions are made so these conditions are based on the width height and orientation of the device so let's see few examples quickly so in this example one we have a uh media query which says that uh it should apply to the max width of 600 p X so whatever Styles we will write inside this block will apply to all the devices whose width is less than or equal to 600 PX and this example tells us that we can also specify mean width and Max width together so this Styles will apply for all the devices whose width is between 320px to 600 PX and third is the minwidth which will apply all the styles for the devices which whose width is greater than or equal to 600 PX so we can use any arbitary width and height for defining these media queries but there but there are few standard break points that are generally followed based on the device types so for mobile the width of the device should be less than 576 PX and tablet which is the SM device uh it ranges from 5 76 PX to 768 PX and desktop ranges from 768 to 992 and there are also higher resolution devices uh which we call it call large desktop whose sizes are greater than 992 PX so let's get started with the coding part so we will be using uh GitHub code spaces so we will be needing one GitHub repository so I have already created a repository here and to run in the code spaces you just have to click on code and click create code space on Main which the main is the branch of our repository once you click that it will open a new tab and you will get a vs code Cloud interface and it should load in couple of seconds yeah so it is loaded and on the left side you will see the list of files uh so we are having a readme file here and uh we we are not going to use the terminal so I will close it and let's quickly write our first file which is index.html so we will add some basic HT ml code that is required for every HTML document we write so we declare the doc type then the HTML tag inside this HTML tag we will be having a head tag inside head tag we require a title tag and let me give the title my blog hey Ashish can you zoom in a bit yeah a little yes okay yeah so apart from head tag we also need a body tag and let me add a H1 tag here which will be the page title and all right so we have written the basic HTML file and to run this file we will need some extension that is live server and it can be found in the extensions tab so there is the extension live server uh by R day we can install that yeah once it is installed you will see this go live option uh yeah so you will see the go live option at the right bottom you can click on this and it will start a server and it will it should open in the new tab the uh HTML page that we just wrote so we are able to see welcome to my blog now let's add some uh CSS Styles so we will be using external CSS file and and uh we will create one file uh which is base. CSS so this base. CSS uh will contain all the code that is required to be applied to all the basic HTML tags so this is important to be consistent across various browsers because various browsers have their inbuilt style that is auto applied to all the tags so for example on this Blog Page we haven't specified any font or any font size so it is automatically given by the browser so I will just copy these styles from The Notebook and put it into this base. CSS file and uh we can import this file using link tag should be Styles and HF should be base. CSS yeah so uh the file is loaded correctly and we can see that the font is now changed to Sans ser and also the uh title is centered to the page now the next thing we will do we will create one more file which uh we will call styles.css so in this base. CSS file you can see that there is no code related to our blog page design so we will create one more file styles.css to write all the application specific code it's not a mandatory thing but to keep things more organized and to keep our Styles more organized we can create one more file and it can be similarly imported the way we have imported the base. CSS file all right so there is one more important tag that is required to make our web page responsive and that tag is the meta tag which has the proper attribute of name viewport so we also need to add this to the Head tag all right so we are set up with our uh environment and the basic HTML and the files which we will be working on today so the basic part of today's mockup is this block card which is going to be consistent across all the layouts that we have seen in the mockup so inside this block card we can see that there is one image one title author publish date and likes and I'm able to see that there is some spacing around the content so maybe I will have to use some padding left and uh that needs to be applied to all the content so that is one way other way I could think of this is adding one outer div which will contain the title author and likes so let's add this HTML code me quickly resize this a bit all right so let's add a d with which uh will be our for the block card and inside this block card we will require one div which will have the image for our block and uh for the title we can use the div also but I will use H2 because it is the second uh prior title after the page title so I will give it a class name block card title we will fill in the data shortly and after the title till we have uh the author and the publish date so maybe we can put this information in a single div because it is horizontally aligned so let me add a div for that with the class block card info and one more div will be required for this likes count all right so we can wrap all these three uh elements inside one more div to add the spacing around them correctly otherwise we will have to add the padding for each of these elements separately so let's add a div and give it a class name maybe blog card body okay and inside this image we will be having our image tag so image tag has will have the SRC attribute and Alternate text attribute okay so now let's put some data and see how it looks so I will just copy the data and put it in the readme file so that that we can get it from here so let's copy the title first and put it in the all tag as well as the title tag refresh this once sometimes it takes time let me try to restart this so if we disable and reenable the extension it would work all right yeah so we have loaded the title now let's add a image to this Blog the image link is is provided in the notebook and add that in the so the image is loaded and the title is also loaded but we can see that we haven't added any property for the image so it is taking its own width and height and it's maintaining its own aspect ratio and we can see we discussed the key principle that the responsive design should not look like this because we can see that the image is going out of the screen width so for that we will need to add some St Styles so let's create a style layout quickly so first we have a block card then we have a block card image then we have block card body inside this body we have one more div which is block card info okay so we'll need to resize this image correctly so that it doesn't go outside the screen width so for that we will be understanding the con concept of selectors so selectors in a CSS is a pattern that matches one or more elements in a document allowing your styles to apply to only those elements so you have already used the selectors in your previous lectures and assignments so the three basic types of selectors are the element selector which applies to all the HTML elements so div ptag HTML body these are the elements so in our base. CSS file we have used the element selector so these are all the element selector and these styles are applied to these elements next is the class selector that we are going to use in our styles. CSS file and third is the ID selector which begins with the hash there are many more types of selectors in CSS you can find it here I have provided the link in the notebook so the another type of selector is the child selector so in child selector we have to specify two things first is the parent uh selector and the child selector so that is specified using the greater than symbol so let's try to understand this using this image so in this image I have a div whose selector or class is block card image and inside that block card image I have a image element and there is one more image element on our web page so if we directly apply styles to this image selector so it will get applied to both the images this and this but what if I only want to apply the styles to the image which is inside a parent whose class is block card image so for this particular use case we can use the child selector so the Syntax for that looks like this we have to specify the parent selector it can be either ID selector or class selector or element selector and some same thing can uh be applied to the child selector it can also be element class or ID so we are going to use this to style our image so we will be using using block card image greater than image so let's add that so we will use the object fit property cover width 100% and height let's say 160 BX so we can see that uh the image is resized and it is not going outside our screen width and also we can see that the image is not stretched if you resize the window you will see that it is getting scaled in and scaled out but not getting stretched so this is how we want our HTML uh image to render in a particular screen width so let's quickly add few more styles to our blog card title we can left align the title so for that we can use text align left and we can also reduce the font size a bit that we can do using font size property and let's make it 1.5 REM all right and uh now we can add some border to the block card so that can be done using the shorthand property of border whose first value is the width of the border so we will keep it 1 PX and then the style of the border so we want the solid border and uh the third is the color so that can be any RGB color so let's choose some light color so f f stands for white so something darker than white maybe let's try CCC yeah so this is fine and also let's add some border radius to let's say 4 BX all right so we can see that the border and Border radius are added to our block card now now we need to add some spacing here but uh before adding that let's also add the other information of the blog the author and the publish date and the likes count so we can go here and add the author name coton and let say the publish date you can put today's date and the likes to be let's say any random number 256 okay yeah so the content for our first card is done now we need to style it more so we will go to the styles. CSS and first we will add the padding here so let's give it a full padding from all the sides so that can be done using the padding property and let's give it 4 PX okay and we can see that there is lot of space at the top of this title and that is coming because of the h2 tag that we have used so we can reduce that maybe let's make it zero because we already have a padding here and also let's change the bottom to let's say 5px so that it's look uh more visually appealing and we'll also need to add some spacing between the author and the likes so the author and the publish date information is stored in the div which is having a selector block card info we will add a 5px margin bottom to the this div so now it is looking fine maybe we can increase the font size a bit but uh we want a font size which is larger than the current one but less than the uh title of the blog so let's try is 1.25 R all right so our block card is ready now we will have to make it uh like we we will have to set the max width because we can see that it is getting scaled horizontally as I am uh increasing the SC screen width but we want to scale it up to a particular width and after that it should have a fixed width so for that we will have to add a layout that is the parent component to this block card because right now it is taking the width which is available to it that is 100% of the screen so we have designed the block card and it is currently looking like this so now we will need to add some layout to this card right now as you can see in the HTML file we haven't added any parent div to this card so let's quickly add that so I will create one more div whose class name we can call block Parts wrapper and we will put this block card inside this okay and let's define some style for this Block cards rapper so I don't want uh the blog card to take the llit width of uh which is 100% so it should scale up to certain limit but after that it should have a fixed width so for that uh I will have to use a Max width property and uh so we are designing for the mobile view first and uh mobile view the max width is 576 PX so our Max width should be such that it it is less than 576 so I will just use 360px okay and refresh the page yeah so now you can see that the block card is restricted by its parent uh component or elements Max width which is 360px and also I want all the blocks uh to appear centered horizontally so for that we can use uh margin left Auto and margin right Auto it will auto center the Block cards forer horizontally centered okay so now uh let's see the device mode quickly and if we go to 320 you can see that the card is scaling up to certain limit till 360 PX and then it will be a fixed width so in this way we are restricting the card width so that it looks consistent on all the devices because we are working for a range of devices so all devices might have different width so it our web page might not look consistent so let's so that's that is the importance of adding the max WID to the wrapper so now let's add few more Block cards to see how the vertical layout looks like for that we will need some more data and let me quickly see these and grab the mock data from here so we will be adding it at two places one is the m alternative text attribute and other is the block title and also let's add the image okay loaded we add other images title all right so we have all the data in place and we can see that all the images and the title are loaded correctly so we we want some spacing between two consecutive cards right now there is no spacing so there are few various ways to add spacing between the card the most efficient way that is uh used in the flex layout and that is the gap so let's quickly see what Gap is so gra property explicitly controls the space only between the uh Flex items that are the children of a display Flex layout it applies that spacing between the items and not on the outer edges so the another uh way to do this is the margin top but if you apply margin top it will also apply to the first element and we don't want that we only want the spacing between the consecutive elements so that's why uh it's best practice to use the Gap and GAP will require us to So currently we are not using any display property for this wrapper so let's add a display Flex property and the layout is in column format so we will have to use flex Direction column okay and GAP property which will be 10px so now you can see that our mobile view is looking nice so it is evenly spaced and there is no additional spacing here that is applied to the card so if we inspect this and we can see that there is no additional spacing applied here and the the so the margin or the spacing is uh highlighted using a color and there is no highlight or of uh the margin here so that is the advantage of using Gap so we have uh completed our mobile view so we uh so this is the mobile first approach and we haven't written any additional rules that how our web page should look like on tablet and desktop devices so it will look uh as it is as it is looking on the mobile to make it respond responsive to the other devices we will have to use media queries with the break points so let's uh first design the tablet view so in tablet view we want two cards in a row so in this case we won't be using Flex Direction column we'll have to change it to row and also we will need some wrapping okay so these are the requirements and the spacing between the two cards horizontally and vertically should be 10px and all the cards should take the space exactly half of the available size so for that we will need to add a media query so let's add that so we will require M width of 576 PX right that is the break point of the tablet and uh we first we will add the flex direction that will be Pro so we will also need to add the class name here so we can see that all the cards are coming in a single row so to uh evenly space them and not to shrink them we will have to use the property Flex wrap and set it to wrap so after adding this now you can see that uh all the cards are taking the space so that they fit their content correctly but uh we can see that now if we are on the let's say tablet device we want two cards in a row and it is just taking a single card in a row that is because of the max width which is set to 360 so we will also need to modify the max width because now for the tablet devices we have more space available on our device so let's update the max width to uh maybe we can double that because now it should be less than 991 PX which is the boundary of the tablet device so let's make it 720 PX okay and so still it will not work because we haven't specified any width to the block card and block card is still taking the complete width so we'll have to add a property to the block card to uh to let the block card know how much width it should take so that it can fit two in a row so we can add this property again using the media query and we can put the block card class inside this media query and let's add a width of let's say 50% okay so we can see that still it is not showing two in a row so the reason behind this is we will have to check if 50% of the available BD is available for the card or not so let's understand the concept here so we want two cards in a row and there is already a gap of 10 PX between the two cards and each card has a border on the left and the right side and the Border width is 1 PX so in total 10 PX is gone from 100% and uh comp like in total for the border is taking 4 PX so the actual available width is 100% minus 10 PX for The Gap and 4 PX for the border so that much width is available and that needs to be divided into two and if we give that then only the cards will show two in a row so how to do this so in CSS there is a way to calculate the width or any other property and that is done by using the calc function so calc function is used to perform mathematical calculations to determine the value of a particular CSS property so it is used to calculate the values dynamically and it is allows us to make more flexible layouts and even if we resize the screen it will automatically recalculate the values and apply it to the uh elements so to do that we will have to use the width property and the calc function so uh inside the Cal function we will put the calculation that we want to do so out of 100% 10 PX is for Gap and 4 PX is for border and the remaining width we will divide into two parts two because we want to show two cards in a row so let me add this width to uh this block card inside this media query so we can see that the blog page is looking correctly on the tablet device and from 570 six it should change to tablet View and below that it is still uh taking the column layout that is uh expected from the mockup so you can see that by writing just three lines of code here and one line of code here we were able to make our web page responsive for tablet now similar thing we will have to do for desktop so for desktop so this is the formula that we can use in general to calculate the width of the card so here 100% is the uh Total Space in width available and N minus one where n is the number of cards we want to show in a row and GAP Gap is 10 PX in our case minus 2 into n so n is again the number of uh cards and two represents the border on on the left and the right side so if we put two in this formula we will get the same expression so for desktop view we want to show three cards in a row so for showing the three cards we will have to uh again calculate the width by substituting n is equal 3 so let's understand again how it is done so this is the % width which is available out of that there are two gaps because we have three cards in a row so there will be two gaps 10 PX each so in total Gap is taking 20 PX space and Border left and border right 2 PX per card so in total we will have to subtract 20 PX and 6 PX and then divide uh the remaining space into three parts so this is how uh the block page will become responsive for desktop let's try to quickly add this so uh for desktop now we have larger screen width so we can change this 720px to maybe some more device because now we have space uh till 991 PX so I will copy this media query and change the minimum width to 991 PX which is the starting sorry 992 PX which is the starting point for the uh desktop devices and put the blogs card starter and we can see that these two properties we don't need to again copy that because uh on the desktop view itself we will be requiring the row Flex Direction and we want them to wrap the only property that we need to change is the max width because we now want three cards in a row so let's copy only the max width and add that here and let's say we make it 960 PX and similar thing we will have to add a media query for the block card so here the minimum width will be 992 PX and the width will be 20 100% 20 PX 6 PX ided by 3 so if we go to 992 PX we can see that now three cards are shown in a row so this has made our web page fully responsive for mobile tablet and desktop and if you want to make it more responsive by making use of the screen width of the higher devices you can add the green uh you can add more more media queries and can make that more uh responsive for the higher devices so you can see that we have added less than 60 lines of code CSS and have created a responsive block page design so now let's understand some other properties of CSS uh for adding the hor Styles so suppose we want to add some hor styles to the card so right now if we H using the mouse or this card it is not uh changing the style but let's say we want to add some Shadow to the card and also want to change the cursor of this card so how can we do that so for that CSS provides some pseudo classes so the one example of pseudo class is the hor so to add styles to the pseudo class we have to use the selector Po and the pseudo class name so for the block card we will be using the hor pseudo class and let's try to add that we can add it here and add cursor pointer now you can see that the default pointer device is the arrow and when I hold any card it is showing me the pointer device so in the similar way we want to add some Shadow to the card to indicate that the mouse is over that particular card so for doing that we have a box Shadow property in CSS so the way of specifying the Box Shadow is in this way so it accepts five parameters first is the offset X second is offset y third is the blur spread and last is the color so offset X means how you want to position your Shadow if you specify some positive value here the Shadow will shift to the right side and if you specify negative value it will shift to the left same thing applies for offset y if you specify positive value it is going to shift downwards and if you specify negative value it is going to shift upwards there are few more properties of the Shadow one is blur spread and the color of the Shadow so you can check this out uh I have provided a link here here which uh specifies some more properties and how specifying these different values how the shadow changes so you can play around with that for now we will use this Shadow property and add it into the or uh style so you can see that let me zoom in a bit so you can see that uh there is a shadow here which appears when we ho or the card so in this way we can also change the background color of the card if we want to also we can change the font size all the colors and font size can be altered here if we want to do that on hor all right right so that's the end of the session let's conclude so in this tutorial we learned how to create the responsive web page by just writing less than 60 lines of CSS code and uh we learned how to use scal function in CSS to compute the width dynamically for our block card and we also use the object fit property so that the blog images are not stretched we also learned the child selectors if we want to apply uh styles to a particular element inside a particular selector that can be done using child selector there are few more child selector that you can check I have provided the link and uh also we learned how to add a shadow to the card using the pseudo class core so few tips that you should keep in mind so don't create unnecessary HTML tags and try to design the web page with the minimum tags and same thing applies for the CSS properties don't add unnecessary CSS properties check if the display Flex is whether really required or not if it is required then only add otherwise it it will become very hard to scale on various devices and lastly use meaningful class names to make it human rable and signify what they are doing so if you look to the class names that we have used so all have a meaning to what element they are representing on our HTML page in today's web development landscape CSS Frameworks play a crucial role in simplifying and Expediting the design and development process you've been building web pages for some time now and you may have seen that a lot of effort goes into making sure that things looks things look exactly how you need them to and this is where CSS Frameworks can help reduce the amount of code that needs to be written and make the process of web development more efficient we are going to talk about the bootstrap CSS framework today which is a powerful and widely used toolkit for designing responsive and mobile first websites and bootstrap bootstrap offers a vast array of prebuilt components utility classes and a responsive grid system which also makes it very easy for you to work with flexbox without actually having to write a lot of flex properties So today we're going to see how to install bootstraps CSS and JavaScript bundles into a web development project we're going to learn how to modify bootstraps default Styles which is colors and typography using CSS variables we are also going to learn how to use bootstraps breakpoints and grid system for creating mobile first responsive web pages we'll talk about leveraging bootstraps utility classes for applying layout and style changes without writing a lot of CSS and finally we'll also use bootstraps prebuilt components and examples for building a web page quickly and efficiently and the best way to learn these skills is to follow along step by step and type out all the code yourself so I highly encourage you to do that the more code you write and the more you ask yourself about every line of code you write the better you will become as a web developer so always make sure that you understand every line of code that you're writing so we will explore these Topics by attempting to solve this problem statement over the course of the past few lessons we have been building a jovian careers website so here is what it looks like there is a nav bar here at the top then there is a banner image then there is an about Jovian section followed by some employment opportunities a table followed by an application form followed by a footer at the bottom so this is the website that we have been building so far and and in today's lesson in today's tutorial we will rebuild this Jovian careers website using the bootstrap CSS framework now the reason we are rebuilding this same site again and again is to understand how to make the web development process more efficient while at the same time improve the Aesthetics and the completeness or the finish of your websites okay so that I would like you to just keep that in mind today that you will notice today that we're writing less code but we're ending up with a better website and that is something that makes you far more efficient as a web developer so specifically we will add some links in the navigation bar as well so here we have a navigation bar We'll add some links here at the top and we will also then make that collapsible on mobile because you don't have a lot of space to Show links on mobile so we'll add a menu button over there we will also show the list of jobs using cards on mobile and using a table on desktop so here we using a table on desktop that is fine but we will also see how to use cards on mobile devices so right now we just have a list here uh yeah so we are using cards of some kind here but we'll see how to improve the layout of these cards using bootstrap and we will also make the color scheme typography and layout a little more consistent and a little more aesthetically pleasing okay so this is the website that we had and let's see what we're able to create today now of course we assume here that you have basic knowledge of HTML and CSS and there is also an assumption here that you know about flexbox in responsive design and Version Control with GitHub and Cloud deployment to versel all of this is covered in the previous lessons so I would highly encourage you to go back and review specific pieces if some some of these parts don't make sense today now please post your questions in the chat because we will pause periodically and take questions and the entire code for the tutorial can be found here so the starter code which is the site created in the previous tutorial can be found here and the starter site can be found here and you can find the completed code and the finished site using these links so the first step today is going to be creating a GitHub repository so I'm just going to go in here into github.com and once I'm logged in I'm going to click the new button and now I am going to give this a repository name so let me just call it Jovian careers bootstrap live because I'm doing this live let me give it a short description a jovian careers website built using bootstrap CSS framework I'm going to make this a public Repository so that you can access this code when I'm done I am going to add a readme file as well just so that I have some initial code in the repository I am going to add a git ignore file as well so I'm just going to type node which is going to generate the git ignore file for JavaScript which is going to ignore any files that are not necessary to be saved in Version Control things like temporary files or compiled files Etc and I'm going to add the MIT license here so that people can build on top of this and now I'm going to hit create repository and with that our GitHub repository is created perfect so now we have a GitHub repository called Jovian careers bootstrap live and we now need to start developing this repository and that is something that we'll do using Cod spaces so we are going to use a cloudbased programming platform called GitHub code spaces which lets us open up vs code or Visual Studio code in the browser so I'm going to just just click the code button here and select create code space on mean and that is going to Now set up a new machine for us on the cloud it is going to download the code from the repository that we've just created onto that new machine and then it is going to allow us to start developing it using this browser based vs code and we can also start previewing it as we develop the website okay so there we go now this has just opened up and I can open up any of the files here and I can now open up any of the files here and start editing them for example I can open up the G ignore file here and start editing it okay so with that our basic development setup is complete we have created a GitHub repository and we have opened it up using GitHub codes spaces the instructions are available in the notes if you need them now to begin we can set up a basic HTML page so we are not going to copy over any code from the previous uh tutorial we are going to type out all the code or most of the code from scratch today so let us create an SRC folder within the repository it's always a good idea to create an SRC folder containing the actual files for the project that are going to be deployed into production because we don't want to send our get ignore license Etc into production and in the SRC folder I'm going to create a new file index.html and now in my index.html I can start putting in some things so I can start by maybe a doc type tag which just indicates that this is an HTML file I can now go in and put in a head tag I can go in and put in a body tag and now I can start adding some information on the web page so I'm just going to copy over a few things here which is something that we've been creating over the past few weeks as well so I'm going to copy a title tag so I'm I'm just just going to have this title tag in the head and this simply says that the title of the page is Jovian careers powered by bootstrap then I'm going to copy a bunch of meta tags a meta caret tag to indicate to the browser that that we are using the utf8 character set so this is something that you should put into pretty much every website that you build I'm going to copy over the meta viewport tag and The Meta viewport tag specifically with the content width equals device width an initial scale equal 1.0 is necessary for triggering responsive design otherwise older mobile browsers may try to automatically zoom in the content of your page to adjust for a desktop website so this is a way of telling the browser that you have created a responsive design don't worry about what these specific things mean this is something that you should have in pretty much every web page I'm going to put that in here as well then I'm going to copy over a meta description and a meta OG properties so an OG or open graph title open graph description and open graph yeah open graph description and a normal description all of these as we've discussed in the previous lesson are used when you share the link that you have for the deployed web page with somebody else so this is what this is the title that is going to show up in the link preview and this is the description that is going to show up below the link apart from that we are also going to add a couple more tags so there's going to be one tag called the OG image tag this tag is going to determine the image that shows up as the preview image when you share this link on WhatsApp slack or any other social platform and that is going to be something set to the Jovian meta PNG file and we're going to need that meta PNG file so I'm just going to drag in that meta PNG file from my desktop so I'm just going to drag in this file from my desktop into the SRC folder so this is the file that is going to show up as the preview this image is going to show up as a preview when somebody shares the link to our website online okay finally I am also going to drag uh put in a link tag with the Rel equals icon and this is going to point to the fave icon so the fave icon is what is the icon the little icon that shows up in the browser like this when we open that website in the browser okay so let us add that meta tag in here as well so let's add the fav ion meta tag and let us bring that in here as well chian favicon.png okay so with that we have a basic setup of the page let me just open it up here so we have HTML head title meta a bunch of meta tags then in the body because we are going to create this Jovian career side I'm just going to put in a bunch of empty divs for now so I'm just going to put in a nav bar and about Jovian div a jobs list and application form so all of these are just empty placeholder divs along with HTML comments above them so let's do that as well and let us just format the document okay looks good so now that we have some code that we have added into our HTML page we need a way to actually see what this page looks like and that is where we're going to use the live server extension so I'm just going to search live server and the live server extension allows us to preview the web page that we are building in our Cod spaces machine which is running somewhere on the cloud so it sets up a server and it serves that page so that we can open it on the browser and once it is installed I can come back into my index.html file and right here at the bottom I should be able to see a go live button or I can also just right click on my index.html uh file and just select open with live server either way once I click this you can see that the website is now open all right so let me just put that website here so this is the site that we have right now and this is the site that we're going to start slowly building you can see that there's not a lot here even if I zoom in there there is just this Navar there's a bunch of divs with some placeholder text within them and this is site that we are going to slowly start building using bootstrap now with that out of the way we can start actually using the bootstrap CSS framework so bootstrap is a powerful open source CSS framework and this is the website of bootstrap get bootstrap.css and it has an extensive library of prebuilt components Styles and util ities and it enables developers to rapidly create visually appealing and highly functional websites a lot of the websites that you see on the internet either use bootstrap or something very similar to bootstrap some kind of a CSS framework to add all the interactive features all the various interesting layouts that you see on most modern websites and there are many ways to install bootstrap and you can check out the different ways of installing bootstrap on the website on the get started page but the easiest way to use bootstrap is to include it CSS and JavaScript directly within an HTML page so bootstrap has two parts it has a CSS file which contains a bunch of existing styles that you can use within your HTML page and it has a Javascript file JavaScript is used to enable some interactivity things like dropdowns popups tool tips Etc so there's a Javascript file that you need to include as well okay so let us first grab the link tag so there are two things here there is this link tag right over here which contains the bootstrap CSS file so I'm just going to grab that and it's always a good idea to grab it from the website because that is going to have the latest version of bootstrap which currently happens to be 5.3.0 so I'm just going to come in here and I'm going to paste this link tag right here right below you can see we now have this link tag bootstrap.min.css that gets included and you can also command click this link and see what that file contains so you can see that it contains a whole bunch of CSS Styles we will obvious obviously not be using all of them but many of them are going to be useful for what we're going to do today okay so that is the link tag then another thing that you can do is include this script tag and interestingly this script tag goes not in the head but in the body and right at the bottom of the body and the reason for this is you do not want the loading of the script to prevent or block the loading of the web page and that is why putting it the putting it at the end of the body ensures that only after the entire content of the HTML page is loaded only then the Javascript file gets loaded okay we don't do that for CSS because we want the styles to load beforehand otherwise if the Styles load after the page loads there's going to be a flickering effect but for the script because a lot of the interactivity is going to happen after all the content loads it is okay to put that script at the bottom of the page okay so I'm just going to go in and put that script right at the bottom of the page and you can see again there is this bootstrap bundle. min.js and this is all the JavaScript that is getting included by default so that is how you add bootstrap to your web page and once you save the file and come here and reload the page you can see already that the Styles have changed significantly so earlier we had a slightly different font we also had some default padding but let's say I comment this out you can see that we there is some padding on the body you can see that the font is slightly different so there's already some change that bootstrap has brought in in fact it resets a lot of the basic Styles and it sets up basic styles for text it sets up basic colors for the text it sets up basic font sizes fonts it sets up a bunch of things by default so that is how you set up bootstrap now before we actually start building something we will have to start first maybe customize the bootstrap setup to use the fonts and the colors that we want to use because given the whatever company you're working at they're going to have their own preferred fonts and colors that you might want to use and you can override or customize bootstrap very easily and Frameworks like bootstrap enable customization via CSS variables and CSS variables also known as custom properties allow you to Define reuse usable values in your stylesheets and this makes it easier to manage an update values such as colors and font sizes throughout your CSS code so I'm going to give you a quick tutorial of CSS variables and then we're going to start customizing some CSS variables to change what bootstrap gives us now to define a CSS variable you need to use the hyphen hyphen syntax or the minus minus syntax so any time you put minus minus followed by something that is treated as a CSS variable that's the first thing the second thing is uh as a good practice you should always Define your CSS variables in this selector called colon root and this is just this is called a pseudo selector this basically says that you want to put these variables and you want to make these variables available right at the very root of the CSS file so that it's available no matter where you are in the CSS file okay so it's it's it'll be at the root of the document and it'll be available across all different kinds of styles maybe even inline Styles and style tags within the page so here is how you can create some CSS variables so right now we don't have a CSS file that is Con that is connected to this web page but I can just put in a style tag here for now and I can just create a bunch of CSS variables here using the root tag okay so now I have this root and in the root I have set a primary color to be a certain blue I've set a secondary color to be a certain green and I've set the font size to be 16 these styles are not applied to anything yet these styles are just variables so just like variables in any other programming language The Hyphen hyphen font size is a variable and it has the value 16 pixels and similarly hyphen Hyer primary color is a variable it has the value blue or a variation of blue okay and of course this is the hex code of the color and vs code show very helpfully shows us a preview as well now once you've defined a CSS variable you can then use it within some CSS property and you can use it using the V function in CSS so here is how you might use it you might say something like body and then you might set the background color of body to where and then here you provide the name of the color provide the name of the variable hyphen hyen primary color and now what's going to happen is when I paste in this style and I save the page you can see that the body got a background of blue that's because where primary color invokes a search for CSS variables and there is a CSS variable in the root called primary color and its value has been set to 3498 DB which is a blue similarly the font size of the body is going to search for the variable font size and that is going to get the color 16 now the benefit of CSS variables is you can now go in and you can actually update these variables so once again if I go in here and then let me also create a button here just to complete this example and let's put a button here here right at the top let's say click me let's save that so there's a button right here right at the top and this button has the color secondary color and the secondary color is a green so clearly the button has a green color and the CSS uh the body has a blue color now you can go ahead and update a CSS variable so you can either update it at the same place where you defined it or you can update it some where maybe let's say you have a bunch of CSS files and you've updated it in a second or third file so let me just go in and update these two values or just update the primary color and now you can see as soon as I update the primary color to a purple that automatically updates the background color so wherever the variable is used the color is now going to get updated okay so now you can see the value of CSS CSS variables I can define a bunch of variables based on the scheme that our design team has currently given us then I can just use those variables everywhere in my CSS Styles and then when the design team comes and says okay we need to change the color we are moving from Blue to Red we don't have to go in and edit a bunch of different properties we just go to our root tag our root selector we just simply check the primary color and change its color to whatever the design team is asking us to do okay so that is the value in CSS colors so that is a value that CSS variables provide us okay so for a moment I'm just going to get rid of all of this now now that we understand how CSS variables work the last thing you can also do is you can also provide a fallback value so that let's say you providing a background color and that is going to come from a variable let's say this variable is not defined for whatever reason Somebody went and changed the name of the variable or it was in a certain file that did not actually get included you can actually provide a basic fallback or default def value as well so this is something that I leave as an exercise for you to test out okay so you can learn more about CSS variables and experimenting experimenting and experiment with them by following this guide on the Mozilla developer Network so I'll let you check it out as well but here's what I want to now tell you customizing bootstrap is done by changing CSS variables so many of bootstrap's default color and typography settings can be customized using CSS variables and you can get the full list of CSS variables that have been defined in the bootstrap.min.css file over here on bootstrap's documentation website you can see these are all the variables that have been defined by default and what you can do is you can now overwrite them in your own style tag or style file and then what is going to happen is all the bootstrap classes which use these colors are going to pick up the new colors that you've provided or the new fonts or sizes that you've provided okay so I encourage you to check out all the different variables that you can actually modify in in bootstrap so that's one way using CSS variables another way to bootstrap to override bootstrap default Styles is simply by supplying your own Styles in a CSS file with appropriate selectors let's say you don't want to change the primary blue color for the entire website only for a particular set of buttons in a particular section you want to change the color so you can just provide the CSS selector maybe give it an ID be given a special class and then in that class you can simply go ahead and apply the changes to that particular button so remember that CSS styles are cascading which means a more specific rule can override a less specific Rule and if two rules have the if two rules have the same specificity then the rule that appears last in order takes precedence okay and this is something that can be confusing and may require some experimentation to understand so let's make the following changes to our page we will use the font Roboto for the body text if you check the CSS variables here it looks like there is the the font family for the body BS body font family this is what is going actually going to be used in the body if you check the bootstrap CSS file it itself uses the variable BS font sanserif and looks like BS font sanserif uses something called system UI which is simply the default sanserif font in the browser or in the system or or in the operating system all right so we don't want to use this we want to always set it to Roboto so that is one change we're going to make then we will also use the font inter for headings now if you check here there is no specific font that has been specified for headings looks like bootstrap by default just uses a single font for the entire page for all kinds of text so that's where we can probably use some CSS selectors and change the font for headings and finally at Jovian we have a specific blue color that we use and there are different shades of blue that different companies use about half the companies on the Internet seem to use a blue color for some reason but we are going to use this 2067 F5 as the primary blue color and you can see here that the primary color that is used or the primary blue and bootstrap is something else and there's also this BS primary which is exactly the same blue that is here at the top we're going to change both of these the BS blue if I zoom in a bit so we're going to change the BS blue color and we are going to change the BS primary color as well to our desired Jovian blue okay so let's start doing this step by step so first We'll add a sample heading sample body text and maybe a sample blue box that is going to be present in the index HTML file so that we can actually observe these changes let me copy over this H1 tag this div tag and also this third div or the second div tag which has a height of 200 pixels and it uses the background V BS blue so you can use CSS variables within inline Styles as well so within the actual style attribute let's go ahead and let us just put this within the body here and let us save it and let's reload this page okay so now now you can see we have H1 so this is the H1 tag and the H1 tag has the sample heading and then we have some sample body text so I've just created some sample body text and of course I've zoomed in here a bit that's why it looks big this is the ual size but let me Zoom back in so that you can actually see this properly and we've created this box here which contains the default blue color of bootstrap as the background it has a height and width of 200 pixels each okay it's using the bootstrap blue as the color next we can now first to change any fonts we have to first import fonts from Google fonts so you can always go into Google fonts and let's say there are a couple of fonts that you need to use you can go into that particular font you can add all the styles that you need and once you've added all the Styles which I've done here for inter and Roboto and generally speaking you should be able to copy over pretty much all the Styles because you might you don't know which one you might need then you can come in here and you can actually go ahead and copy a link tag so if I zoom if I scroll up here you can see that there is this link tag that can be copied and that link tag has to be added into our index.html file to load these fonts from Google fonts onto the page okay so I'm just going to add this link tag right below my bootstrap link tag okay and let's format the document once again as well perfect so now we've included some fonts but of course no change has been made yet because we've not actually used those fonts next let us set up a styles. CSS file and connect it to index.html using a link tag within the head so I'm going to come back in here I'm going to create a file styles.css and I am going to link L it using a link tag so link Rel equals stylesheet HF equals styles.css so I'm just going to put that into Styles into the index. HTML file now one important thing you should keep in mind here is you have to put the your custom Styles below the bootstrap Styles because that is the order in which the CSS variables will be read so if you put it above what's going to happen is first your CSS variables will be read and then the bootstrap CSS variables will get read and and those bootstrap CSS variables will override your values but you want to do the opposite you want to take the bootstrap CSS variables and you want to overwrite them and then all the classes that are present in the bootstrap CSS file will automatically pick up the overridden value so that is the interesting way in which you can go back and you can change some of the Styles in in bootstrap okay all right so now we have the styles.css file still there is no change that has happened now let us start by first adding this root tag and then changing a couple of or a three properties so we're going to change the variable BS font Sans serif you can see here that there is this BS there is this BS font Sans serif this is what is actually going to be used as the body font family so the body font family variable gets used in the body if you study the bootstrap structure um so I'm just going to come in here and I'm going to create the root tag and you can see as soon as I pasted it a bunch of things have changed and we can disable these and we can observe the changes one by one first let us keep an eye on the text over here as soon as I enable this you can see that there has been a slight change in the text it's very it's very minute but if you just look at it carefully you see this is different and this is different right so these are minor changes in the font but you want to get the company font the font that your company uses that's why this is important let's then change this blue color as well again it's going to be very subtle yeah so looks like there's a minor change here in the blue you may not even be able to detect it but I can always go in here and just for the sake of testing I can go in and maybe make this a green color and you can see that now the color changes to Green right so whatever value you set for the BS blue CSS variable that is going to override the default value in bootstrap and that is then going to be used within all the classes within wherever you want to use uh this color okay so I'm going to reset it back to the color that we had for Jovian and just like that we have modified a few basic Styles we've modified the body font family and we've modified the blue and primary colors to our desired color of course we also want to use the inter font for headings so that is something that we can simply do by adding these selectors H1 to H6 and we can simply set their font family to enter with a fall back to Sans siif if the font could not be loaded so let me come in here and you can see that there is a slight change here to The Heading and I can even come in here and maybe know check out the font weight six and set that to 600 you can see now my fonts or my headings are a bit thicker so remember that if just because you've used bootstrap does not mean you can not use your own CSS Styles you can customize pretty much everything in bootstrap and simplest way to do it is often to just add a class let's say there's a particular button you want to customize just add a class to that button and simply go into your CSS file and then apply the styles to that particular button or div or whatever it is okay and with that we have performed a bunch of customizations the and we can now get rid of the sample heading sample body text and the sample div that we had and we can proceed with the rest of our website right now I want to point out that there's actually a much more much deeper customization that you can do at a very specific component level within bootstrap and bootstrap is written using this language called SAS which is essentially an extension of or an expanded version of CSS that can then be compiled down to plain CSS for distribution and for more advanced customizations you can actually go into bootstrap source code you can make changes to the original SCF CS files which is what bootstrap is written in that this is the format of the file and then compile them down to your own CSS file and all of that is described on the bootstrap documentation website okay most of the time you will not need to do this but in some certain cases where you cannot figure out a way to do it by using CSS variables or using custom classes you can go ahead and simply edit the scss files and generate a new uh CSS file for your project okay so as as an exercise I would encourage you to maybe make some more changes to the page either by modifying bootstrap CSS variables or by providing custom Styles within the styles.css file and observe their changes on the web page now let's talk about how you can build responsive layouts so bootstrap contains builtin breakpoints media queries and a grid system to create responsive layouts simply by adding some classes to HTML elements without requiring any custom CSS and this is one of the nicest things about using bootstrap that you don't have to write breakpoints and media queries yourself replacing CSS properties with utility classes is one of the biggest benefits that you can get from a CSS framework and we will explore multiple CSS Frameworks over the course of this program this course and future courses but all of them will have this common pattern that they're going to take away some CSS that you had to earlier write manually and just turn them into simple classes that you can include within your HTML file so first let's understand the builin breakpoints and boot straps because in bootstrap because it's still useful for us to know this so breakpoints in bootstraps are in bootstrap are predefined screen widths that help you create responsive designs for various devices like smartphones tablets and desktops and bootstrap uses a mobile first approach which means that the boot which means that the styles that you supply for the smallest breakpoint will automatically follow through or get applied to bigger breakpoints until you choose to change them all right so that is where you should always first design the mobile version of your site make sure that it looks good on mobile and by default all those Styles will carry over into the bigger layouts as well and then you can specify some custom Styles when you get to a tablet layout and just make the required changes that you need and then you can again uh go to a desktop layout and specify some more changes so that is called mobile first responsive design with incremental adaptation to increasing screen size so by default the styles that you supply to bootstrap they get applied on excess screens which is screens smaller than 576 but of course they also carry over to bigger screens then if you can if you supply some style for the S screen and we'll see where this SM word actually gets applied then that is going to only apply to screens that are bigger than 576 pixels then if you want to apply some styles for bigger or brows with a bigger width width greater than 768 pixels you then use the MD and then similarly there's a breako for LG Xcel and XSL okay so the way you create layout changes for specific breakpoints is not by writing media queries but by simply using certain class prefixes in your HTML markup and don't worry if that doesn't make sense right now because we're going to see an example of that very shortly so the first key component that we are going to use from bootstrap or the first key layout element is containers and whenever you want to use some kind of a responsive layout whenever you want to do something interesting with bootstrap where the layout changes across different wids you have to first create a container okay and the way you create a container is by simply adding the class container to a div that's it so you create a container by creating a div and giving it the class container now bootstrap comes with three different containers or three different types of containers and we'll take a look at them one by one so the simplest container that you can create in bootstrap is just by creating this div and giving it the class container okay I'm also going to give it a height and width so I'm just going to give it maybe a width of 200 PX height of 200 PX or actually let me just give it a height not a width right now because the WID WID is going to be set automatically so I'm going to give it a height of 200 PX and I'm going to give it a background of let's use the blue BS blue now we have this container uh we have just created a div with the class container and we've given it a height of 200 pixels and a background of blue and you can see here that this container has this property that it is always centered on the page and you can see when the when the page is really small maybe let's use browser tools to see the this it's going to be slightly easier to do it this way yeah you can see that when the page is very small it takes up the full width of the page but as we start increasing as soon as we cross the excess boundary okay now looks like up to 500 okay up to 576 pixels it takes up the full width and then its width reduces and it just remains centered on the page and then we hit the next break point which would be about 768 at 768 it becomes a little bigger but but it still remains centered on the page it still does not take up the entire page and then as we keep going we hit the next break point and then when we hit the next breakpoint at around 9 996 pixels or so it once again expands and it remains centered in the page and so on okay so this is what happens when remember we were doing all this business of setting a of first creating a div and then centering it using margin zero Auto by adding left and right equal margin and at various break points adding various wids well bootstrap has already done that for us and you can simply add the class container and when you add the class container till about 768 pixels or so so till about the let's see what this means yeah till about 768 pixels it's going to occupy the full width no till about 576 pixels it's going to occupy the full width now at more than 576 pixels it's going to be 540 pixels at more than 768 pixels it's it's going to be 720 pixels wide at more than 9 960 pixels it's going to be 960 pixels wide and so on okay so it's it just gives you a nice centered div or or horizontally centered div on the page and you can put all your content inside this div okay so the container is going to contain all of the rest of your page content now of course you may not always want this what you may want is maybe you may want it to always occupy the full width if you want it to occupy the full width just use the class container fluid if you use the class container fluid and let me reload that page if you use the class container fluid then it's going to always occupy the full width of the page all right that's container fluid and then there are various steps in between you could do something like this you could say container SM and if you say container SM so up to the highest point of SM which is just before MD it's going to probably still use up okay or up to the size SM it's going to use up the full width and from the size SM it's going to become centered okay so container SM I think it's going to do the same thing as container for us up to 540 pixels it's going to take up the full width at at 560 or 576 pixels it's going to become centered you can also use container MD Now container MD is going to take up the full width till 768 pixels and at 768 pixels it's going to start restricting its width and progressively increase size with break points similarly you can do container LG which is going to use up the full up to a certain large size and then after a certain point it's going to use the center okay so depending on when you want to constrain the content of your page you can decide which container you want to use and for now I'm just going to use set it back to div container and what that is going to do is given no matter what width I'm at it's going to just Center the content a little bit on the page have some padding left and right okay so that is the container that is the first basic thing no matter what you're doing in bootstrap what whatever page you're building the first thing you'll probably do is just create a container okay so one thing you can do as an exercise is maybe create a bunch of containers one below the other and give them all different container classes and see what happens to each of them as you resize the page now the next thing that we need to understand once we've talked about containers is the grid system so every container contains 12 columns you cannot actually see these columns right now but every container is inherently or internally divided into 12 columns and then what you can do is you can decide to put content and you can decide how many columns that content can take up okay so here is an example you can you can just maybe have a bunch of dips you can have maybe 12 dips each of them takes up one column and there is also some space between the columns or you can have something like two two divs and you can have six of those divs taking up six columns or you can even combine things you can maybe have a div that takes one column you have have a div that takes two column next to it a div that takes some more columns next to it and so on okay so whenever you need to horizontally arrange columns in a row or so whenever you want to arrange divs in a row and you want to control their relative width that is when you use this grid system and the grid system is invoked using two classes so the first class is a row so let's say you want to create three divs here you want to create three divs and each of those divs should have an equal width so here's what you can do within your container remember all of this always happens within a container create a class create a div with a class row okay now we've created div with the class row nothing has changed here yeah nothing has changed here now I can create a div with the class column okay and let me just call this box one and let me also maybe give it a border let's give it a nice solid black border and let's create a couple more Dives like this okay so I'm simply creating a few I've created a row and that is going to Simply put things in a vertical order then I'm going to create a bunch of boxes here box two and box three okay and let's see what happens so you can see now that we have taken the container and then there is this row div that has been created and I can just go in and actually get to that row div here as well just by selecting inspect element yeah so there is this row that has been created and then Within that row we have these three columns let me just make the background white for these just so that you can actually see these clearly yeah so within the rows we have these within the rows we have these three columns okay box one box two and box three now something I can do is I can actually specify ratios for for these I can say call one which means I'm wanted to take up one out of 12 columns and I can say call two I want this to take up two out of 12 columns and I can say maybe call six so now you can see that I have this box one which takes roughly one 12th of the space available in that row okay this is the entire row and it takes up 1 12th of the space box two on the other hand takes up 2 12th or one six of the space and box three takes up six columns right so imagine there are 12 columns here and what we've specified here is call One Call 2 and call six are the relative column wids that should be taken up now of course I can play around with this let's say I want four columns for Row one and then I want two columns for this so 4 + 2 6 and then the remaining half goes here and let's say maybe what if I had three columns what would that do so now you see what happens when I have four columns here plus three columns here so that becomes 7 7 + 6 becomes 13 and then the next column automatically drops onto the next line okay so it's using Flex boox internally but you don't have to worry about Flex bases Flex grow Etc you just tell it how many columns uh how many columns should be taken up by a particular box and it's going to automatically uh arrange the wids and if the number of columns in a particular row goes higher than 12 then it's going to drop down into the next uh next line automatically okay now where this gets a little more interest testing is that you can actually modify the widths of each of these boxes based on the break points okay so we can start out like this we can just say call 12 which means we want box one box two box three all of them to take up all 12 columns okay so no matter what width I am at it is going to take up the entire width of the row and that is why even though it's it's supposed to be a row because box one takes up all 12 columns box two drops onto the next line box three drops onto the next line and so on right so this is fine but maybe when I get to and this is maybe nice for a mobile layout I want to show three things one below the other but maybe when I get to a tablet or a MD layout I want to show maybe box two and box 3 together or some other layout so then you could do something like this you could say that okay at MD so you can say call hyphen MD so what you're saying is when we hit the MD breakpoint of 7 68 pixels I want box one to take up only six columns okay so remember we are going mobile first so first everything takes up 12 columns but now I want box one to take up six columns so I'm going to come back in here and I'm going to add the class call md6 and with that you will see that as soon as I cross 768 pixels box one starts taking up only six columns and not 12 columns now of course box two is still falling on the next line because there are not enough columns to fill its 12 and maybe then once again we want to use six columns for box two as well right and now you see what happened that up to 768 pixels all of them show up one below the other but as soon as we go into 767 769 pixels box one and box two come up side by side and the reason they're coming up side by side is because we have overridden the property at this break point using call md6 and call md6 and at maybe at MD we still want to retain 12 for the third column so we don't technically we don't need this property because it's simply going to carry over from whatever is there here so whether I keep this or I don't keep this it's not going to make a difference it's box three is always going to take up the full width now let me also increase the body font size a bit oh let me just increase the font sizes of the columns yeah so that our columns are a little bigger I'm just using font sizes of 30 okay perfect so now I have box one box two and box three and this is on MD and now at some point we're going to now hit maybe the next layout which is going to be LG right so LG is going to be about 968 pixels or 992 pixels or so so there's no change yet but maybe on a very large screen I want to show all three columns side by side so in that case I can do something like this I can say call lg4 and I can apply that style to all of them so let me go into the first box and use call lg4 let me go into the second box and use call lg4 you can see now that as soon as we crossed about 96 996 pixels or so now box one and box two are no longer taking up half of the row they're only taking up 1/3 of the row which is four out of 12 columns and now we can maybe take box three and put this here on the corner so let me also apply call lg4 and now box 3 show shows up here as well okay and we could do this in a slightly different way as well we can maybe use call LG3 for the first two boxes and maybe six for the third box because the third box may have more content so now you see what we've achieved we've not written a single line of CSS but we've achieved this very interesting layout where first we have box one box two box three all three of these and you can put any content inside this maybe an image a heading and then a and then some text and then as soon as we or maybe a heading text and then some content as soon as we go into the tablet layout which is about this much then box one and box two come up side by side because we have more space now so we can do that and as soon as we go into LG then box one box two box three all show up side by side and they have the proportions that we need this is very very powerful and if you can Master using bootstraps grid and if you can know what are the right properties to use here then things are going to become really really easy for you okay so that is the bootstrap grid system using rows and columns now one thing I want to mention here that you have to have this row if you want to put put things into a column okay if I don't have this row class here then every all the divs inside the container are going to be one below the other you cannot avoid that although the column the number of columns they pick is still going to get picked so box one is picking three columns box two is picking three columns as well and box three is picking six columns right so that's they're picking up the right wids but they're not showing up in a single row because to to make them show up in a single row you have to drop them you have to wrap them in a particular row Dev okay so keep that in mind all right so that is the that is how this behaves on excess screens all columns take up the full row width and show one below the other on MD screens 768 and above column 1 and two take up half the row width while column 3 takes up the full row WID and on LG screens all three columns are on the same row and we can decide what are their relative proportions now I would encourage you to experiment with bootstraps grid system so there are a couple of resources you can check out one is the documentation itself and it has a bunch of different examples and you can just click this button and live edit these examples so it's going to open up a cloud editor for you and you can start editing this is of course the equal layout but you can also have these unequal layouts like this and you can do a whole bunch of things so I would encourage you to experiment with this there are are also a bunch of examples that are given along with the documentation so you can check these out as well okay make sure you get a strong a clear understanding of how the grid system works now apart from this you can also sometimes you may not need a column on the left and a column on the right you may just want to maybe just shift a particular column a little bit so then you can also use something called an offset so an offset is useful when you want to add some empty space before a column and you can apply an offset using the dot using the off offset star class where offset represents the number of columns that you want to leave empty for a specific breakpoint for example we could have something like this we have a div and the we have a container inside it we have a row and inside it we have just a single div okay now we don't have multiple divs we have just a single div and I'm actually just going to copy this class from here and I'm going to get rid of all of these so now I have a row but what I want is I want this box to only take up six of the columns and I want it to leave three columns on the left and that is what the offset does so when I say offset three it's going to leave out three columns on the left and it's going to start from the fourth column if I set that to offset one you can see that it leaves one column here empty and it then spans six columns I can of course then maybe set it to call 7 and you can see that it actually does that and I can also then play around with break points I can say that maybe this offset should kick in only at MD so when I have the when I have the basic layout on mobile there is no offset here the column it shows up right from the left Edge and maybe there's something else I want to put here but as soon as I cross 768 pixels you will notice here as soon as I cross 768 pixels there this offset gets added okay and I can control this offset maybe I want this to be offset 6 in which case it is going out now offset has this property that if you set too high offset it's simply going to go out of the of the Rope it's not going to go into the next row because that doesn't really make sense for an offset so yeah so keep that in mind that if you don't actually need to create a column you just need to maybe shift a column a little bit you can offset and of course you can combine things here as well so you can do something like maybe this is three columns with an offset of two and above this you have another box so this is box zero and maybe this is one column yeah so you could have something like this you have this one column box over here then you have a three column offset and then you have a three column box over here okay so you can create all sorts of interesting layouts uh using offsets so that is all about offsets in the bootst grid system next I want to talk about something called gutters now in the grid system you can you have 12 columns but those columns do not have to essentially necessarily stick together to each other you can have a gap between those columns and you can specify gaps between those columns using the gutter or the G or the G Class so you can specify at the row level you can simply say that you when you're creating a row you want the gutter to be of a certain size okay and the there are sizes the sizes go from 0 to five and it's not 0 to 5 pixels you can actually check inspect and check I believe it's zero time I believe it's a multiples of four or something like that so a gutter of three would essentially result in 3 fours about 12 pixels or there's some kind of a ratio that that it actually ties into uh there is some responsive layout that it handles but just think of the gutter sizes as a sort of a scale of 0 to five that you can modify things for okay so let us come back here and let us maybe revert to the columns that we have so we had three columns here yeah so we have three columns here and all these three columns you can see show up like this uh and there's a sort of a responsive design in play here already now if I just add G3 you can see that some content or some space has been added on the left and right and also between these columns and for now let me just make these very simple columns so I'm just going to make it call three each of these is going to be a a call Four yep so you have a call 4 and maybe G3 doesn't seem to be working okay yeah it is yeah so the gutters are the spaces and as we increase the space you'll see that the gutter should increase let's see well this doesn't seem to be doing the job probably because of the yeah let's add a border to this okay so let's take a look at this so you can see that there is some Gap here and there is some Gap here now if we remove this gutter you can see that some of that Gap disappears now that Gap should also show up between columns I am not 100% sure why it's not showing up right now maybe it's because I maybe that that Gap is actually getting is going to get added inside the Border that's why we're not seeing it um but yeah so what the gutter does is it adds gaps on the left right and between your columns right so you can check maybe G4 or let's just try gx4 and G y4 yeah so gutters should add gutter should add gaps I believe it's because it's probably going to overlap with the Border here that is why it's not showing up but whenever you want to add spacing between the columns then you can simply set the gutter on the row variable okay so you can check out the documentation for gutters here this is this is exactly what it should look like so there should be some column there should be some uh space here some space here and some space here on the right and similarly here you can see that there is a gutter on the left and right and that gutter can also be changed customized on the left right and bottom as well so you can have some spacing between the columns you can have some spacing between the rows when things overflow into the next line and that is being set here you can see using gy5 and so on okay so that is all about how you use the bootstrap grid system so the key things for you to keep in mind are always use a container and the three types of container are a container that is always kind of centered and restricted and then a container that is completely fluid that always takes up the full width of the page and a container that takes up a full width up to a certain breakpoint and from that breakpoint it remains centered on the page okay so just use bootstrap containers don't you don't have to create your own containers or add your own break points or maximum wids generally speaking your bootstrap container should do the job for you okay now apart from containers you have rows and columns so you can create a row and then you can put a bunch of boxes in a row and then you can specify their widths using the 12 column grid system and you can change the widths based on C certain break points you can also then use offsets and you can also specify specific gutters and based on uh the Gap that you need between your columns okay now next thing I want to talk about bootstrap utility classes because this is also something that we're going to use when we start building our websites so utility classes in bootstrap are single purpose reusable classes that can help you quick quickly style and modify elements in your project and they include various aspects of styling such as spacing text backgrounds Etc the key idea here is for a single line of CSS property that you might want to put in the CSS file you can simply include a utility F utility class that's going to do the job for you so here are a few utility classes that uh we're going to look at the first is spacing related utilities spacing simply means margins and paddings so bootstrap provides a bunch of classes like this so you can say Mt hyphen 3 and what that does is it says margin top should be set to three and again this is not three pixels this is just on a scale of 0 to five this is a certain five is a very high pad margin 0er is zero margin so it is just somewhere in between and you can verify what that actual value is by inspecting it in your browser and similarly you can say mt3 or you can say mb2 okay so T includes t means top b means bottom so just using these few characters we've specified the margin top and margin bottom or we could also do something like this we could do p hyphen 4 which means that you want a a padding of four units not four pixels four units on all sides let's see what that actually means so let's maybe go in here get rid of this container over here and simply post these in so you can see now this particular div that we have here this div has a top margin of three and what do we mean by three well if we just in look at the styles for this div the computed Styles you will see that this div has a margin of 16 so three simply means maybe about 16 and this div has a bottom margin of two so that is 8 so I believe it works 1 is 4 and 2 is 8 and 3 is 16 and 4 is 32 and so on so yeah so mt3 means a margin of 16 pixels at the top and M mb2 means a margin of 48 pixels and you can go ahead and change this you can change this to maybe mb5 and see what that changes it to now the margin becomes 48 all right so you can always check what these margins are and let's check this div so this div does not have margins but this div has paddings so it has a padding of four pixels all around it or a padding of 24 pixels all around it so P4 simply adds 24 pixels on all sides I could also do PX4 and py3 in case I wanted to just X direction is left and right and Y direction is top and bottom now you can see that top and bottom py3 applies a padding of 16 pixels and left and right py4 applies or PX4 applies a padding of 24 pixels so this is how you can quickly apply paddings and they've already set some some default values so that the spacing doesn't look very off so always just try out maybe mt1 mt2 mt3 and see which one works best for for the layout okay so those are the spacing related utilities apart from that we can also use utility classes for styling text for example you maybe want to Center some text or maybe you want to make these make it italic or so FST stands for font style or maybe you want to change the font weight you want to change the font weight to bold so all of those things are something again you can do using utility classes so I can come back in here and I can just drop this in and you should see that this text is now bold because it has the class FW bold and by the way if you're ever curious what styles does a particular class actually apply you can come into the inspect tools and you can check the Styles Tab and in the Styles tab you can see that the class FW bold applies the font weight of 700 okay so that's what it actually does so there's a very deep level of CSS inspection that you can do whenever you're looking at a website or maybe youve just use some bootstrap class and you want to know what exactly it does just right click on the text just click inspect oops Yeah just click inspect just click inspect and then you can either check the layout here using in the computer tab or you can go into the Styles T Styles Tab and see the exact styles that have been applied for each of the selectors that applied to this particular file okay or to this particular element and FW bold is clearly coming from bootstrap and it sets a font we to bold let's check this one this FST italic this checks this sets the font style to italic and then we have text centered this is simply going to Center the text of course you could also do text right or something like that and that is going to put the text on the right maybe it's text align right okay I don't know so yeah maybe there's a way to align the text to the right I would just probably look it up in the documentation so how do you know these how do you know what utility classes are available well you just have to check the documentation if you check the documentation of bootstrap you can see that there is a section called utilities and then there are various utilities for text display Flex Etc so we were looking at text and you can see that there is text alignment so you have oh you have text start and text end so if you want to align something right you have to say text end and this is because it supports right to left layouts as well you can see that now text has moved to the end so I would just keep the utility section of bootstrap open and look it up how is it better than typing out classes in your CSS file because by using a utility class you are collocating the style with the HTML so at a glance it's going to be very easy for a developer or just for you to be able to identify ify what are the styles that are getting applied to a particular HTML element okay so utility classes are great because they just bring the Styles into the HTML and help you get a clear picture of what the what the element is going to look like okay then there are a bunch of background utilities so you could do something like this you could let's say set the background color to the primary color which is the blue that we have set so let's create this div over here let's get rid of these text utility classes and this this is a particular div let's format that yeah so you can see that this div has a primary background color which is the blue color that we've set and it has the color of the text white so you can say text white that is going to Simply change the color of the text and I could also do something like P4 let's say if I wanted to add some padding to it and I could also add borders and things like that so there are lots of utility classes available that you can apply here there are also dis display related utilities so let's say you want to change the display property remember you can have block Flex inline all of those things uh you can do all of that using display properties as well so let's look at an example so now we've created this span and we've set its display to inline block using D hyphen inline hyphen block so the shortcut or the Shand for the display utilities D and hyphen inline if you wanted to show it in line or hyphen block if you wanted to show it um block within in line so all of these have different meanings this is going to turn it into a flex container and again you can verify you can just go in here click inspect and you can check that this is actually this has the display type flex and you can verify that it actually has a display type Flex by putting a bunch of items inside it so let's say let me put item one item two item three you can see that they show up in a row of course if this was not flex but if it was block then item one item two item three would show up one below the other okay um but and I could also have set it to d none so I could have done something like this that this is just simply not visible and here's one trick let's say you want to make something visible for a particular size for a particular break point so you can say d none and then you can say d MD block or let's maybe say DSM block and let's say DMD Flex okay so what we saying here is I don't want this div to show up by default I want this div to show up as block on SM and higher which means 576 pixels and higher and then on 768 pixels and higher I want it to show up as a flex div which means its items are going to show up in a row okay so here this and let's just give it a little bit of padding as well so let's give it P3 and let us give it uh BG blue so that you can actually see what's happening here okay so right now that div is not showing up item one item two item three let's get rid of this upper span and now if I just increase it slightly okay I guess DSM blog did not actually work out here for some reason I'm not sure why but DSM block should also show up but you can see here when we set when we set it to uh let's just put it this way okay that initially it's set to display none and when we Clause when we go to MD we want it to show up as Flex yeah okay let's just look let's just do this so d none so it is none by default and when we go into the SM layout which is the small layout it's going to turn into block so you can see that below by at this point it is not visible at all and let's just set this to BG primary or how do you set the background yeah BG primary should be fine yeah so it's not this div is not showing up here but as soon as we cross 569 pixels or 5 576 pixels then this becomes visible and you can see that it is using the layout block SM block and let us add DMD Flex here so that when we cross 768 pixels it should show up as a flex container so all its items should go into a row and you can see now that its items have gone into a row okay if I come back at SM it is blocked so its items show one below the other and it is just not visible on small screen on excess screens okay so these are the display utilities is very useful for just hiding and displaying things sometimes you may want to do it the other way around and of course we it also contains a bunch of utilities around Flex box so one of course is D Flex or DMD Flex or DSM Flex so all of these utilities you can trigger them at specific break points so you can say dyen MD or BG hyphen MD hyphen blue or primary Etc and all of these utilities um can then also and there are a bunch of flexbox related utilities as well specifically the few the two you might use and are justify content and align items so let's just take a look at an example of this so here these are now this is now Flex div okay and let me just also give it a big font size yeah so this is now a flex container at MD screens and I could do something like this I could say justify content Center and now you can see that along the main axis because Flex direction is row by default all the content is Justified at the center or I could say space between or I believe it's just between yeah so now we have added space between the content so that is the other way this can work or I could say justify content end and now all of the content is Justified at the end similarly you can have align items as well so let's say we give this a height so let's say we give this a height of 300 pixels now I could do this I could say align items end and you can see that items 1 2 3 have all moved to the end right and the most common use case would be probably align item Center where you want to Center them along the cross axis and sometimes you want to combine that with justify content Center and what that essentially ends up doing is it centers no matter where you are of course the flex gets triggered only at at LG or at MD but no matter how you increase the height or width of the page the content is going to remain centered vertically and horizontally okay you have all these nice utilities where you don't have to go into your styles.css at all you can simply just add them at the class level in the HTML so I encourage you to create a simple layout using the bootstrap F utility classes where you create a container with three equal width columns then set the top and bottom padding of each column to size three and then apply a different background color to each column and ensure that the text inside is white and then try to Center the text horizontally and vertically within the columns so try to do all of this and make sure and also maybe throw in some changes at specific breakpoints and make sure that you are able to do all of this without writing anything within the CSS file okay you have to look up the documentation and you have to achieve a certain layout just using bootstrap CSS utility classes and let's see if you can do that the way to become comfortable is just to exercise there's no way you can remember all of these things it's just the more you use them the more they get committed to memory we've now learned about the bootstrap grid system it's pretty extensive it allows you to do a lot of interesting things we have learned about bootstrap utility classes they allow you to apply text Styles background Styles Flex Styles display Styles Etc now we are in a position to actually start building out our page and we're not going to write the HTML of our page from scratch completely in the sense that we're not going to just use grid and styles we're actually going to use some components that the the creators of bootstrap have already put together for us okay so bootstrap offers a wide range of prebuilt components and these components are designed to streamline the development of responsive mobile first projects and these components provide a solid foundation for creating visually appealing and also highly functional websites now there are a bunch of different components and we'll go through various uh we'll go through some of them definitely not all it's a huge library with a whole bunch of components but the few categories are na navigation components so things like navigation bars headers Footers breadcrumbs pagination that is something that we'll find in bootstrap then there are layout components so you can create cards you can create list groups you can create media objects like images Etc there are a bunch of form related components so the creators of bootstrap have set up SE special classes for rendering forms nicely so that you don't have to do a lot of work to show forms on your web pages there are a bunch of modal components which is basically popups that overlay the entire screen or things like dropdowns and Tool tips that you can add um then there are of course like a bunch of utility components like small alerts and badges and small things that you can use to highlight important information within your page and there are also a lot of interactive components and this is where a lot of the JavaScript is used because remember we used a we imported a JavaScript module as well so that's where we have like accordians carousal tabs Etc and I encourage you to check out these three not going to cover them today so they will possibly be get covered as part of a future assignment or something but I encourage you to maybe play around with these a little bit okay so you can check out the various components offered by bootstrap here so bootstrap has this section called components in its documentation and there are a whole bunch of components that you can pick up so I'll I'll let you check these out and then there are also several examples on bootstrap's web page on how to use these comp components in a proper page so here there are some common patterns for building headers nav bars building the hero or sort of the main section maybe building some feature sections building sidebars so you can create all sorts of interesting layouts using bootstrap components so check out the documentation for components and maybe also check out examples so whenever you're working on a project these two pages are going to contain a lot of useful information for you so with that let us redesign the Jovian careers website so this is the Jovian careers website right now this is what it looks like there's a nav bar there's a banner image there's this about section employment opportunity submit your application Etc so let's redesign the careers website step by step using bootstrap components as mentioned in the problem statement so the first thing we're going to do is we're going to add some links in the navigation bar and show a collapsible menu on mobile devices we'll see what that means we'll also show a list of jobs using cards on mobile and on table we're going on desktop we're going to use a table and we're going to make the color scheme Ty typography and layout consistent and aesthetically pleasing okay so let's start with the Navar and this is where we can use bootstrap's Navar component so we can come in here and you can see here that there's a component called Navar and a component essentially is simply a bunch of HTML and CSS along with some special classes so the way you use a bootstrap nav bar is basically by adding a class nav bar to a nav element and there are a bunch of classes that need to be added so the information about the classes that need to be added are here there's this navbar brand navbar nav navbar Toggler Navar text collapse Etc and naar scroll so the best way to actually do this is to maybe go through the examples that have been given on the page and pick the example that is closest to what you want to achieve okay so here is an Navar which contains this maybe this could become the logo and maybe these could become the links we don't need this form as such so we may not need this but there's and so this is an example example Navar and this is the code for that example so what you can do is you can simply copy this code and paste it now remember whenever you paste code you should study it line by line to know exactly what it does okay so copy this code and paste it in your HTML and that will give you a Navar and there are also various other examples so this is like a plain nav bar simple nav bar uh you can check out these two as well this is a nav bar with an image this is an AB bar with an image and some text this is an AB bar with a just a bunch of links I think this is something that we might be able to use and then there are a bunch of different examples so you can you can also embed forms within the nav bar I think I am simply going to maybe just pick the first let's pick a very basic one Navar with a bunch of links because that's what I want ultimately so let me pick this up and let me start customizing it step by step okay okay let's get rid of this and let us just maybe bring this make this a little smaller and make this a little smaller as well let's reload this okay so this is what we have no change here now let me just come in here and replace this navbar div with the code that I have just copied over okay so this is the code that I've copied over and this code results in this nav bar being added to my page all right well so first thing I want to do is I'm just going to study it line by line and I'm going to make some changes to it so all right I have this class navbar and I want this Navar to show so it's going to show up in a collapsed form like this you can see that there's a button here there's a button here and when I click on this button it opens up this menu so bootstrap automatically gives me this nice mobile drop down menu so that on mobile I there's no space to show the links so it's going to show up in this button so that's nice now I can specify when I want it to expand do I want it to expand on small screens medium screens or large screens So currently it is set to LG which means when the width of the page crosses 992 pixels I'll have to maybe zoom out a little bit yeah but when the width of the page crosses 990 pixels or so then this gets shown normally otherwise this getss shown like this maybe I don't need expand LG maybe I can do with expand MD so yeah so you can see here that up to the MD breakpoint which is about 768 pixels it's going to show up like this and after the MD breako it's going to show up like this okay so that's what these two classes mean Navar is simply going to trigger the entire Navar component um for this particular element and then the BG body tertiary I believe this is simply the background color I don't need that so I can I've gotten rid of the background color what I do want is I want to add this nice shadow I want to add like a small Shadow here which I have which we have on the Jovian website you can see that we have this nice subtle Shadow below the nav bar so I'm going to try and add that shadow and I believe there is a utility class for adding Shadows I believe you just say shadow and that's going to add a utility Shadow here but this Shadow is too big I can make that smaller so there's like a shadow SM utility class again something that you can just search online how to add a shadow and bootstrap and you can just find it online on Google or chat jpt okay so now our nav bar has a shadow that is nice next we have this container fluid so we have this Navar it's going to take up the full width of the page what do I want do I want it to take the full width of the page well maybe I wanted to take the full width of the page till the medium screen but for LG and bigger I want it to be centered okay so I'm just going to do this I am going to pick yeah so I'm just going to maybe make it fluid I'm just going to make it LG uh at LG it's going to become centered and it's going to remain fluid for MD and Below okay so remember what this container is doing is this container is deciding whether the entire Navar should be centered on the page or not now if I don't have this container LG you will or if I just make it container fluid it's always going to span from the left Edge to the right Edge okay and that is different from the toggle the toggle the toggle is controlled using the Navar expand the container fluid decides whether the Navar takes the full width of the page or not let me just set it for now as container um MD or container yeah container MD so from for MD screens and bigger it is going to be centered on the page okay so that is what this this does so far this is fine okay then we have this brand Navar okay I think this is where I might want to put the Jovian logo so I'm just going to grab the Jovian logo from here I have already put this in here so I'm just going to grab the Jovian logo so we have a couple of logos there's one logo that is going to show up on small screens which contains just the icon does not contain anything else so let me remove this text Navar over here and let me just put the Jovian I icon and you can see that it's going to show up on small screens but as soon as I hit yeah so you can see that I have given it the class DMD none which means it's going to show up on small screens but as soon as we hit the MD breakpoint it is going to stop showing up okay and why do we have that because for bigger screens or for MD breakpoint actually want to show the full Jovian icon or the full Jovian logo with the text so let's put this in here okay okay we given it I I don't think it needs an ID anymore so I think the ID can be gotten rid of and even the height may not be necessary but it's fine let me just keep the height for now okay so let's get another Jovan logo for bigger screens so let me grab the Jovin logo with text so this is simply again the Jovian logo with text so again it's an image tag and what we're seeing here is that it is hidden by default so it has a display of none but from the MD breakpoint which is 768 pixels we wanted to show up in line okay so this is what that ultimately results in that up to MD we have the smaller logo which contains just the icon and then beyond MD screens we have this bigger logo which contains the actual Jovian logo Okay cool so our Navar is almost ready I think we're almost ready to go ahead I let's see what we have here we we have this Navar Toggler of the type button if I understand correctly I think it what it's doing is basically simply setting this button so this button is the button that is rendered here so this is simply the toggle button so I can also maybe just add a quick uh comment here so this is the toggle button and this toggle button only shows up till MD because after MD it is going to just uh expand automatically and maybe I can add a small uh comment here saying this is the logo okay so now in my navbar I have the logo and I have the toggle button all of this is fine now in the Navar we have and in the toggle button we have this that it controls or it Targets this Navar nav and the Navar nav happens to be this div which contains a list inside it okay so it's not visible until we hit the MD breakpoint and then from the MD break point it becomes visible and we can verify this by clicking inspect and let me just turn off the device mode for now you can see that this ID Navar nav ID Navar nav is visible here but if I reduce the width a little bit it's not going to be visible okay so this is the nav all all right this is fine now what do we want to do here well we want to maybe first edit these links so let's see it has collapsed Navar collapse I don't think there's any change we need to do here this seems fine ID seems fine so I'm verifying every single line of code this is very important when you are working with bootstrap so let's see let's make the first link instead of home let's make the link courses and let's make this link programs and let's make this link YouTube and let's make this final link sign in so in case somebody wants to sign in here from the careers page they can sign in okay so now you see now we have courses programs YouTube sign in okay looking good so far now of course there are some styles that have been put in here so I think I can remove those Styles let's see the class is nav item for all of these and I believe we can simply change the actual HFS first as well let me just set this to jan.com SL learn so that is the link that I want the courses to go to and this is not the current page so this current page is causing the courses to look slightly different from the programs in YouTube so I'm going to remove this ARA current current page so that all of them look similar and I'm going to to remove this active as well so that yeah because all of these are going to some output So when you say active it's just going to give it a special style so I'm just going to remove this active as well so you can try out removing each class and see what happens and that's a great way to understand what these classes are doing okay then we have the second nav item and I think I also wanted to open in a new tab so I'm also going to say Target equals underscore blank okay so now when I click on this it's actually going to open the Jovian courses in a new tab so that is the courses nav item let's now fix the programs nav item as well I think I'm going to send it to the same location so we have the courses nav item then we have the programs now item both of them are going to the same location for now uh I we may create separate pages later on but for now both of them are going to the same same location okay so these two are fine I want to fix the YouTube link as well so let me just copy this come bring it in here for YouTube again it has a class nav link it is I'm going to give in our YouTube link here so youtube.com/ Jovan HQ that is going to be our YouTube link so that is going to open our YouTube link perfect and finally there is the sign in I want to turn the sign in into a button so let's come into buttons and bootstrap also has a bunch of button classes so let's come into buttons here and I can just turn that into a button simply by doing something like this and there are like there are examples here that I all I need to do is I need to say button type equals button class equals button button primary Prime and then I can put in whatever content and this way I'm going to get this nice blue button but one thing you can also do is you can actually just use not just a button tag but you can also just use a a tag or a link tag and this link tag by itself can Auto or this anchor tag this a tag is the anchor tag this anchor tag can also be made to look like a button using the BTN class okay so we are using a link but we're going to turn it into a button by simply providing these classes and we can also give it the roll button just for screen readers and such so I'm going to remove this nav link disabled class from my signin so now signin is just a normal unstyled link and I'm going to add to it the class BTN BTN primary and maybe let's see if we can also do nav link let's see what that does no that's going to change override things maybe I can simply do a p l or a margin left two that doesn't seem to be doing anything maybe I can do it here I can do PX or P L2 no nothing MX2 yeah MX2 does the job right maybe L should also do it no l okay I believe it is Ms margin start that does the job yeah so Ms is margin start so I'm just using the utility class margin start to give just some space to the button maybe ms3 can be tried as well yeah that looks good so now I have my Jovian logo I have courses programs in YouTube and I want this to go all the way to the right I don't want it to show up here right in front and also want it to be Center aligned with the logo so there are a couple of things we may need to do here and let's see how we can achieve them now this is where the abstraction breaks this is where you'll have to actually inspect the actual nav bar and make some changes directly so I am going to first just select inspect the nav bar here so right click select inspect okay so this is the nav bar this is fine and this is the container of the nav bar okay so this is where this is where my entire nav bar lives this is fine then I have the navbar brand this is all well and good then I have the Navar toggle that's not visible right now and then I have this navbar collapse okay so I want to looks like this Navar collaps is right after the Navar brand I want it to go all the way to the right how could I do that let me take a quick look at the parent component which is this container and let me check the what is the display type of this container so if I check the display type of this container the display type of this container seems to be Flex okay so that means my Navar logo and the links are both items within a flex container and it has a flex Direction row you can verify the flex direction as well by default it's row if it doesn't say anything so in a flex Direction row I want the contents to be spaced out how do we achieve that well along the primary axis so along this axis I want there to be an automatic space added between the starting component and the end component the first and the second component that can be added using justify content space between okay so think about this I'll let you think about this and when you practice this on your own so what I'm going to do here is in my container MD I which is a flex container which contains the brand and which contains the the list which of course it contains the button as well which is not visible right now I'm going to say justify content between or space between what does that do well that did not seems like it didn't do anything but maybe justify content let's try end okay that didn't do it as well so maybe maybe I need to take another closer look at what exactly is happening here so maybe I let me check this element so it looks like this div is also a flex div so maybe it's possible that this div may be taking up the entire space so justify content end is not working here let me try and come and set it on this collapse div which is also a flex div right so this collapse div is also a flex container and it it contains a bunch of these um list items and all of these list items are contained in this so let me come into the collapse div and let me add justify content end and you can see that it shift it to the end okay so how do I how did I achieve this well I actually just tried it out so sometimes all you have to do to achieve the desired layout is to think from first principles okay this is the box I have and I need to shift something to the right or left and how can I achieve that using some Flex property or using some display property and then just dig in into the inspection and fix things right but whenever you're using bootstrap the one tip that I can give you right now is if you want all of your elements in the list of nav links to shift to the right simply go into that collapse div the collapse Navar collapse which is the list of things that gets collapsed um at a particular breakpoint and just add justify content end and it'll shift everything to the right okay uh and on a Case by case basis you'll just have to search this sometimes you can just search this online as well and you can find the answer okay one other thing we can do probably is maybe seems like this is not these things are not aligned properly so maybe I think it might also help to add an align item Center here okay that's not doing anything all right I'll experiment later but one thing I want to do is maybe just slightly fix the alignment so that courses is Right lining up properly with the center of the logo which doesn't seem to be happening right now okay okay so now we have courses and we have signin as well for the signin Button as well let me just add an href and the HF is simply jan.com login and the class or the target is uncore blank that is simply going to open it in a new tab okay yeah so this is looking rather nice I would say so here we have this mobile view okay looks like on mobile view we need to fix the signin button it should not have the left Stop left padding right so I'm just going to trigger this from MD yeah so now what's going to happen is that the margin is going to kick in only from MD so let's see now this is looking good I can collapse it I can expanded this is looking nice and as soon as I increase beyond the medium width which is somewhere about here now it goes into this nice layout where I have these links right at the top and I have this nice sign in button I think maybe md2 might be sufficient I don't really need md3 okay I have this nice sign in button and this is looking pretty good so with that we have completed the nav bar this is the original layout I've just zoomed in a little bit so that you can see more clearly okay so that's what we did you can just check out the layout exactly the code is present here as well but we have just made it in made it so that it expands and it shows up a bunch of links from MD and higher right so this is the layout that we've achieved on mobile and this is the layout that we've achieved on desktop okay next up is the hero section or the about section so this is where bootstrap also provides various examples for specific sections so remember in this page we have this about Jovian then we have this then we have this and then we have this spanner image as well so let's look at some examples from the bootstrap examples so these are all the these are a bunch of examples for the hero or the about section and for for this looks like there is this centered option that we can just have some centered content on the page I don't want that uh there is this centered option with an image below it that's not what I want either okay this looks promising so I have some text here I have some text here and then I have an image here that looks somewhat similar to what I need here okay text image Etc and maybe this layout is actually better where the text even the title is on the left and not on the center and then I have these buttons here but I don't have to use these buttons instead of these buttons I can simply put in these two items that I have here okay so I guess I'm going to use this layout and this is one of the examples on this examples page we have a bunch of examples how do I get the code for just this example there is a way you can download the code and then search it so you can go into bootstrap examples you can download the source code of these examples you can open the hero folder etc etc but I'm going to show you a quick way uh when you're looking at a bootstrap example just right click click inspect and find the outermost container so okay this is the container and looks like this container contains this entire hero element and inside it is the entire thing so you can just click on this container right click select copy element and that is going to copy the HTML code for this entire container that we're looking at here okay so with one click I've copied the entire HTML code for this container and now I can come in into my code and here in this about Jovian section I'm removing whatever placeholder text I have I'm just going to paste in this container and just like that you can see that we got this nice responsive left Aline hero with image and of course the the image is not present here so we can change this image we have an image here um well actually I think we have a link to an image here that we can grab uh let's see yeah so I've hosted this image online so that I can just copy it over easily let's see I am yeah so the image source is this yeah and so with that I have this nice layout where I have this responsive left aligned hero with image uh and with some text with these buttons and I have this nice image on the right okay looking pretty good and let us start understanding and customizing this okay first thing I wanted this to be a container I think that's fine I want the content to be sent on the page no matter what screen size we are on so this is fine it's this content is always centered on the page okay let me get rid of this I think I don't need this call XXL 8 I am not interested in that right now it has this PX4 what is this PX4 okay so this PX4 seems to be this padding on on the left and right okay I think I can keep the PX4 it also has this py5 which is the space above it I think maybe this this py5 may not be necessary right now so I'm going to get rid of this py5 and automatically you can see that the top and bottom padding has completely gone away all right um yeah so that is looking good so far next let us come in here and let us check okay what's happening here so it looks like we have Flex by default we have like it's just a normal div with things going top to bottom that's fine and at some point it becomes a flex container with the direction row but not just row it it becomes a flex container with row reverse so on large screens we have Flex LG row reverse which means on large screens it becomes a flex container with a direction row reverse and that is why the image comes on the left and the on the right and the text comes on the left okay I think that works for me that I have this top to bottom layout here this is fine and then I have this left to right layout here this is fine I may need to do some centering but it's fine okay maybe I can just use a flex call layout initially a flex column layout so that there's already this align item Center so what that can do for me is just make sure that the content becomes centered okay that's not exactly doesn't exactly seem to be happening yet okay maybe we don't need this Flex call here so this is okay align item Center I think what this does I can I can remove it and see what happens so when I have align items when I don't have align item Center the text comes on the top and it is aligned with the top of the image when I have align items oops when I have align items Center the text is Center aligned vertically with respect to the image okay earlier it was here now it is here I think I like this better so I'm going to keep align items Center okay there is this G5 let's see what happens if you remove the G5 well looks like there was some shift in the gaps I think it's fine it's probably okay not a big issue there is this py5 okay do we need this py5 yeah I think we need that py5 maybe I can just make it py4 maybe we don't need that much space okay looks fine or py5 is fine too okay looks fine so far my layout is looking good then we have this image so we have this call 10 call sm8 call lg6 a bunch of stuff going on here I think I'm going to make it very very simple I'm just going to say call 12 and call lg6 so that it takes up the full width and I think we'll probably need that Gap five now because yeah I think we need that Gap maybe I can make that Gap smaller yeah so I I wanted to take up the full width the the div containing the image I wanted to take up the full width on all screens and then at some point I wanted to take up just half the width so at LZ I wanted to take up half the width but that doesn't seem to be happening okay so let's give this call 12 as well and on LG screens yeah on LG screens it's both of these are going to take up half width okay so there seems to be this MX LG Auto I'm going to get rid of that there seems to be this image fluid this is okay what else well I think it's this a gap that might be causing the problem we'll fix the Gap later okay so yeah so till LG it takes up the entire width of the uh width of the page or width of the container the centered container and from LG screen screens and bigger it simply takes half the screen width okay so this is good this is looking good so far and let me also maybe add a rounded border to the image so I can just go in and say rounded okay and let's also maybe say MX Auto so that it's centered on the page no matter what width it's taking up okay let's maybe add some padding below the image so let's just say MB four yeah I think this is good so now we've added some padding below the image and let's add a similar We'll add a similar padding for the other content as well okay so this is looking pretty good so now we have the Jovian logo and let's make this py4 I think py4 should do the job for us yeah so now we have this Jovin logo we have this image okay we have this text here I'm going to change this text so let's see display 5 FW bold text body emphasis all this looks good I'll keep those lh1 all that looks fine I'm just going to change this to work at Jovan okay I think I want it to be centered by default so I want to say text Center by default and then it's looking good and then at a certain point I want it to become left align so at LG when the layout shifts I want to say text LG left align to left align I have to say text LG start and it's going to become left align over here like that okay great so again we' you can try removing some of these and see what it does what happens if you remove display file what happens if you remove text body emphasis Etc let's try it let's try removing text body emphasis okay it didn't make a difference so probably we didn't need that what about font weight bold do we need that that okay we definitely need that what about display 5 do we need that yeah we definitely need that okay so this is all looking good we have work at Jovian this is a nice little uh thing that we've added and let's get rid of these buttons I don't need these buttons here okay let's take a look at this actual paragraph of text I think this paragraph you want to maybe change it to the paragraph that we were actually using earlier so I'm just going to come in and maybe copy over the paragraph that we had earlier let's paste this paragraph here okay looks good yeah this is fine I think we also had another paragraph linking to a couple of courses so we had this full stack developer boot camp data science boot camp let us maybe add those paragraphs as well so let's add another paragraph and and let's see if this class lead is important what if I don't have this class lead okay this class lead seems to be important it's going to make the text a little nicer to read a little bigger so I'm going to keep this and I'm going to keep this in my next paragraph as well and in my next paragraph let's add this text let's we also offer to Industry Focus boot camps all right cool and let's get the links to those boot camps so let's get the I'm just going to copy this entire ordered list so we have an ordered list o with the class lead it contains one list item which contains a link to the full stack developer boot camp it contains another list item which contains a link to the data science boot camp okay and just like that we have created a very nice looking hero section so this is often called the hero section um I think we can probably get rid of this margin you can see that there's this margin bottom that we had kept I think we can get rid of it when we get to a large layout yeah so we have this margin bottom I don't think it is very useful here in this case so for the large layout I'm going to get rid of it so I'm just going to say m lg0 okay nice so now it's nicely centered on the page okay perfect so on mobile screens we have this toggle and we have this image we have this centered work at chian but of course this paragraph It's better to just keep it left aligned and then we have links and then um the font sizes are also responsive you'll notice that the font size is actually increasing that's what the display fonts or the utility classes allow us to do then as soon as we hit this large layout you can see that we flip into and then at Excel there's a certain change as well in terms of the container size but we flip into this nice two column layout which is looking rather nice and I don't think we need this Banner image anymore because just this layout itself is looking so nice that I don't feel like then further adding a banner image or anything okay yeah looks good I am feeling pretty happy with this and now we can probably move on to the next section okay so the next section is the employment opportunities which we want to show as a list of cards on mobile and on desktop we want to show it as a a table okay so how do we do that let me just copy this over here so that we can actually just see this side by side so here you have this employment opportunities table by default it's a list of cards like this let's see if there is something to create cards in bootstrap so let's go into the bootstrap documentation let us search for cards yeah so there seems to be this card component and this card component can be used to show an image can be used to show a card title used to have have some text and maybe also have some content here at the bottom I need something much simpler maybe I need something like this which has a card title a subtitle and maybe just some text about it so I'm just going to copy this and I am going to come in here I'm going to create a new section again I'm going to create a div and I'm going to give it the same class that I had for the previous div Above So container let's see what did that look like container and PX4 so I'm going to give it container and PX4 so that left and right we have some space so that the content does not stick to the left end of the page and let me put in an H2 here and let me just put uh let me just call this job opportunities okay so now we have this job opportunities let me also just add class text Center here okay and I want to right now I want to just work with smaller layouts so I'm just going to going to keep it like that and let me just now add this maybe I'm going to add a div and I'm going to give it the ID jobs list well maybe I don't really need an ID let me just drop in a comment here saying jobs list okay and inside this div is where I'm going to create my cards all right so let me paste in this card and let's see what it gives me okay so this is the card that I get it's on the left so I'm going to change a few things up first I'm going to remove this width I don't need this width I do need this class card because that's what adds this nice border around it I am going to add maybe a my4 which is just okay maybe not here my4 which is margin in the Y Direction Four units which is going to just give us some space here and maybe I'm going to also add a Mt five here yeah so that this is a little spaced out from the previous content okay looks good so far and let us now add okay let's now fix the card title so we have this front end developer role let me just grab the content of the front end developer role here okay so C title is front end developer so I'm just going to use that frontend developer okay that looks fine then we have a subtitle in the subtitle I'm going to put in the location of the job which is bangaluru India and 12 lakh rupees which is the annual salary so I'm going to put that in here I don't need these Links at the bottom so I've gotten rid of these links and then I here maybe I can just put in that this was posted three uh this was posted like on March 3rd 23 or something like that so I'm going to put in that information over here okay so very basic content yep okay so now I have front end developer this is good bangaluru India March 3rd 2023 looking good I can maybe just make this slightly better I think the spacing is a little off so maybe this mb2 is not required maybe just make it mb1 this looks fine and I guess this text can be slightly smaller and maybe a little grade out and that is where I can use this small um tag HTML tag which bootstrap automatically turns into slightly smaller text and I'm also going to use text body secondary so I still have this card text class but instead of using the P tag I'm using the small tag and I'm using the color text body secondary color now you can see that we have this nice hierarchical card where we have this frontend developer bangaluru India 12 lakh rupees and posted March 3rd 2023 okay so that is the yeah so that is the card that we have created and I'm just going to copy this over just so that we have like a nicer version of this available for us to easily replicate yeah and let's fix this padding here as well to My5 empty maybe this H2 needs some padding below so I'm just going to add mb4 to this H2 yeah so that things are a little spaced out okay so that's one card let me copy over the other cards as well so this is the full stack developer role so let me come in and let's now oh looks like I have this additional div here full stack developer role let me just format the document looks fine okay full stack developer let me add in the data scientist role as well data scientist that is the data scientist role right here and finally let me add in the ml engineer role as well okay so all we're doing is simply using the classes from bootstrap we still using writing plain HTML code but now we adding classes from bootstrap and all those Styles and maybe also some JavaScript nice features can get added in autom atically via bootstrap so now we have all of these job opportunities I think this is looking pretty good um this is fine but I don't want this to show up Beyond MD so I think when we hit the MD breakpoint I want it to I want this to disappear so that's where we have this DMD nonone class so we can say that by default it has a certain display but at the MD breakpoint we want it to disappear so for the entire jobs list so this is the jobs list I'm just going to give it the class DMD none okay so you can see that at in very small screens this is visible and this is looking good as soon as we hit the MD breakpoint then this goes away and is no longer visible okay so with that I think we've completed the first one or the first half of the page which is the Navar the hero section and the job opportunities at least B on the mobile view now of course at MD this disappears and from size MD we want to show a table so let's maybe first bring in a table here so inside the jobs list well right after the jobs list but still within the jobs div So within the jobs container we want to add a table so let's just add a jobs table here okay and let's first maybe I'm just going to put in a div containing a table so you can see all I've done here is I've have a div and inside the div I have a table and inside the table I have this table row uh or the header row and of course I've used certain col column spans and row spans to achieve this kind of a layout where you have know job title and location has City and Country under it and so on so to achieve this layout I have used column span row span so this is the exact same table in terms of the basic HTML that we had the last time and I'm just going to save that and let's see what that does so now this has added this table here at the bottom right but there are two issues here one is that this table is always visible we don't want it to be always visible we want it to be visible only on MD and higher so I'm just going to say class D none so which is by default we don't want it to be visible and then DMD block okay and what that does is from MD on MD the list disappears and the table appears okay that's good the second thing is of course this table is not looking very nice right now so one thing we can do to trigger bootstraps Stables is simply use the table class and how did I get this well I simply looked up the documentation so in the documentation just search for table and they have this class for table so you can just add in table the table class to any table component and that's going to create this nice table for us okay the table is looking nice but we still want borders around the table so we want a bordered table so let's see where how do we add a border to the table it looks like we just have to add the table bordered class so I'm just going to come in here and I'm going to add the class table bordered and voila our table now has borders pretty good I would like to maybe give it some more color so let's see how we can add colors so accented tables well let's see how we can maybe make get these striped rows I think this would be nice so let me copy this table striped CSS property and this is how you work with bootstrap you look at an example that contains what you need and then you just add that property so table bordered let me add the Cs CSS property table striped and yes I think the table is looking nice okay maybe I can make a few changes to this particular to The Heading because the heading the header row should probably look a little different let's see how can we color how can we color the table are there any color tables here okay looks like there is a way to color tables as well we can use this table primary class to give it a primary color but I don't want it on the entire table I just want it on the header rows so looks like I can just add class table primary on a row and it should just color that row let me color the first header row table primary okay nice it's gets it gets this nice primary color let me add this to the second row as well which contains a city and Country and this gets the nice color as well and because of the striping logic this gets a slightly different color okay our table is starting to look good I think I want to Center the titles here the so I'm just going to add text Center for the table row text center right so this is how you build it out step by step okay nice the table is looking good so till mobile this is fine on MD we switch into the table which is looks fine to me I think it's not uh it's not cramped or anything okay when we get to LG and higher looks like this is this table is getting too big maybe I might want to just limit the overall size of the table a little a little bit so this is where I can maybe use a small helper layout here so what if I do this let's say on LG on LG I limited to just eight columns instead of taking the entire 12 columns I limited to eight columns so on MD it's going to take up the full width which is here but on LG it's going to just take up eight columns but of course I don't want it to take up the left eight columns I wanted to take up the middle eight columns out of the 12 so that's where I can add an offset so I can say offset LG 4 or maybe offset LG 2 yeah so what I'm saying is leave two columns here leave uh and then take up the eight columns and that automatically leaves two columns here 12 8 2 is 2 all right so that way the table is going to be sent completely full width on medium screens but on large screens it is is going to Simply take up okay on large screen it is simply going to take up the eight columns in between and that just expands a little bit but it still looks nice I feel okay so that's great I think we've been able to set up a nice table let's see maybe I can just increase this Gap a little bit mb5 maybe here yeah this is looking a little nicer okay so our with that we are done with our jobs list and jobs table so this is what our jobs list looks like job opportunities on mobile and then we've also added a table and this is what our job opportunities table looks like okay perfect next let's move on to the application form that is probably the only big piece that's left here and the footage should be pretty straightforward now for the application form once again bootstrap offers various prebuilt form components okay so first let us just set up the basic layout and then we are going to start incorporating this one by one so once again I need a container here so I'm just going to give it a class of container and PX4 because I want some spacing left and right so PX is the padding it is basically this space that you see on the left and right it's nice to have I think it's it's good we can keep it okay then I need an H2 here so H2 and in this H2 I want to put in sub MIT your application okay the H2 is looking okay too well maybe for this H2 I can add a text Center because I want to Center this text and maybe I need to add some space above as well so maybe let me add mt5 above okay now that has added some space above and let me then also go ahead and had a form here so I'm going to copy over the form that I had the last time at least in terms of the basic um action and Method so remember we were using a tool called form bold to actually post the form let me add the form element here okay I've added the form and now into the form I can start adding inputs okay so I've created a form but this form doesn't have any inputs yet I could put like input type equals text and that should create an input box here so let me just move this up a little bit you can see that now I have this input box but of course I want to use a nice input form that is created very nicely with bootstrap so I'm going to come into bootstrap here and I'm going to search for form okay so here is an example of forms looks like you don't need anything on the form component and for the actual inputs looks like we need to do a bunch of things here we need to set a class of okay this is just a we need to put the input and label and maybe some help text in a div and we then need to maybe specify the class form label for the label we need to specify the class form control for the input and if we want some helper text so this is some helper text that we want to show below the email then we can specify some helper text as well so how about we simply copy this over I think we understand this well enough so we can just copy this over and let's put it into our form instead of this okay all right so just like that we have this email address input field that is looking good and I am going to Simply give it the I'm going to give it the ID email so the input is going to have the ID email and the email help is the description below the email address this looks fine as well and yeah I think this looks good so we need form label and form control it looks like these are the two things that we require and that automatically helps us create the layout okay what else well I feel like maybe we don't want to use the entire uh we don't want to use the entire width for email of the page maybe we want to use just maybe half the space so I can go in here and I can say call six and this way it is only going to take up half the space but now the trouble is even on a really small screen it takes up only have the space so let me say call sm6 and this way on a really small screen it's going to take up the entire width and then as soon as we enter bigger screens it's going to take up less width okay so this is good I think I'm happy with this okay perfect so just like we have email I have also already put together some other examples so here now I have this name field so I'm just going to copy the name field all we have is we ex we have the exact same mb3 calls sm6 except this time the ID and the name are full name or or name I guess um so let me just copy this over and this is of type text so let's insert the name field that's giving us the name field email we already have the email field but let me just in any case copied over once again so that is going to give us the email field the only difference between the name and the email field is of course their ID and name are different the field name but also that the type is email and that is going to automatically add some validation and we've also added a placeholder and we've added a required field so forms we've covered in a lot of detail already so I'm not going to go into the specifics here but now we have the name field we have the email field all we've done is added a few bootstrap classes form label and form control which makes it look nice let's get the phone number field so again the only difference here is the titles labels IDs and the type is TE tell which requires this to be a phone number field okay and let's format the document a bit yeah cool so now we have the phone number field as well this is looking good let's get up the let's get the date of birth field as well okay let's get date of birth so yeah for date of birth we have once again we have the same layout exactly except that this time it's a date picker so you can go in and you can actually select a particular date here so that's good okay next up is the apply to field so this is more of a drop Down uh this is like a select component so I'm just going to bring it in here first so the position applying and then we're going to look take a close look at it okay so the position applied for is a drop down and from here you can select whether you want to apply for for full stack developer front end developer Etc so how are we doing this well once again we have class mb3 and call sm6 now the only difference here is instead of an input we're using a select which is what we have to do anyway but the class we are changing now from a form input to a form so it was called form control here now that has been changed to form select and that's it that's the only change the label still says form label and we have a default option with an empty value set to select a position that's why by default it is pointing to select a position and we have then a front end developer full stack developer data engineer ml engineer I believe we can also make it required so that the user has to select a particular option so yeah this is just a normal drop down all we've done is added a class to the label added a class to the select and added maybe this uh layout or this bottom margin and this six column layout here so that it looks slightly nicer okay then we have this resume upload this is a file upload and the only difference here is the input type is file so again I'm just going to kind of bring that in directly as well so here is your file upload and that allows you to pick a file again exactly the same finally we have this cover letter and in this case it is a text area Okay so no change here again the only change I'm making is I want the text area to actually be full width right so I want the text area to be I want the text area to actually be full width and that is why I've set I've removed that call sm6 so I'm going to use a full withth text area and that has a um label cover letter and once again you give it the class form control and that's it we have our application form the last thing we have is the terms I'm just going to bring in the terms real quick really straightforward it's just a simple checkbox so all we do is we say form form check input and form check label again all this is borrowed from the bootstrap documentation simply copied over and with a quick assessment of how things are what else um I think we have the submit button right here so let's grab that submit button that is going to be a primary button for us so we have submit application and now we're ready to submit the application so that's it I think this form is looking good maybe we can make like some final changes here let's see okay I think the form goes I guess the form goes too wide I think we want to restrict the form to just be just as wide as this job opportunities table because otherwise it's going to become a little hard to actually read the content of the page so I'm going to add the exact same classes here that I had for the previous one so on the form I am going to add the class LG let's say call lg8 so that it is not too wide and I'm also going to add offset LG2 so that it is relatively speaking centered on the page okay so now we have work at Jovian job opportunity submit your application and we have the form as well let's quickly verify the form okay we have email we have phone okay phone looks fine we have date of birth we have position yep I think this is all let's check date of birth yeah I guess date of birth needs to be changed to do let's change this to D OB d o and yeah with that our date of birth is fixed as well perfect so now we have the form now we have the hero section we have job opportunities the final thing that we need is the foter okay now where do you get the footer again bootstrap has a bunch of examples that you can choose from so here are some examples for the footer let's look for footer and let's open up the footer okay so there's this example right here this is something we could do or we could do something like this I think this might work out fine for us so we could probably just right click inspect and copy this entire container paste it in and make some desired changes to it so I can get rid of this I can simply paste that in and then I just need to make the desired changes to it and because I've made these changes already I'm just going to copy it over from here it's exactly what it looks like um I'm just taking an example of the footer which is a container and then it has maybe a py my and it has the list of links and below it it has this copyright text it's a very simple straightforward footer I've just made very minor modifications to what we already have in the bootstrap example okay so let's paste in the footer here as well and with that we have a footer so great this is what it looks like on let's just go normal to the basic device mode and let's see things from scratch so this is what it looks like on mobile there is this nice drop there's this nice menu here we have and then we have work at Jovian and maybe we can make this a little bigger on maybe we can make this a little smaller on mobile I'll let you maybe explore that as an exercise then we have job opportunities maybe we can make this heading a little bigger I'll let you experiment with that as well then we have submit your application then we have the form here full name email address phone date of birth Etc upload resume cover letter agree to conditions submit application and then we have a footer now as soon as we get into the MD layout the cards disappear and the this appears the table appears but we still have this vertical layout for the hero section and the form seems to take up the full width when we get to LG then this now becomes comes horizontal as well and these open up as well you can see that on md2 these open up and on SM these don't so yeah a bunch of changes going on in each section you can just browse through each break point and you can see that the footer also slightly changes you can see that the fter here it splits into multiple lines and here then it expands into a single line and of course we have this nice line here as well okay yep so I think this is looking good at this point I am just going to make the change so I'm I'm just going to commit this so I'm I'm going to say added bootstrap styles for sections and I'm going to commit this and I'm going to sync it and we're ready to actually deploy this okay so this is the final step we're going to take this repository and just deploy it on verell and you know how this is this is really really simple so we just go to github.com or we just go to verel . and on wal.com let us just add a new repository and you can sign up and connect your GitHub account let's add the repository Jovian careers bootstrap live which we have created just now and we are going to the root directory is the SRC directory so I'm going to select the SRC directory and I am on the main branch and I can click deploy and now it is going to take the code that I've just pushed to the get repository and you can see that we can actually see what the change that was just made yeah so we just added the bootstrap styles for sections and in the SRC folder we have this index.html file which contains bootstrap it contains the nav bar it contains the logo toggle button the collapse section it contains the about section with the hero image and it contains a description and links to the boot camps it contains the list of jobs so this is a normal list of cards and it contains a table with bootstrap Styles and it contains an application form and it contains uh the application form contains various types of inputs contains a position resume cover letter Etc contains terms contains a submit button contains a footer and that has just been deployed so in just under 2 or 3 minutes we've deployed our project to verel now we can open it up and check it out and of course it is a fully responsive website so we can actually just open it up here in our device mode View and we can check out the links the links seem to be working fine okay this link maybe needs to be updated to open in a new tab we can check out that job opportunities show up properly all right this is good submit your application this looks fine too and let's just try filling out the application as well Akash NS aashan join.com plus 9 one okay let's try to hit submit and it's going to say this is a required field so let us fill this in and let us upload a resume so let's grab a resume here I'm applying for the let's try to apply again okay this is also required so let's select that too well cover letter why well I no responsive design and bootstrap and then I agree to the terms and conditions I click submit and this is going to make a submission remember we were using this third party tool called form bold so if you check the form here we had set the action to form bold and in a future lesson we'll look at how to actually handle the content but we are simply sending it to third party and that is going to then send us an email with the response but yeah the form has been submitted and the Jen team will get notified so perfect I think this page looks pretty good now considering where we started and even compared to where we were the last lesson I think this was looking good better than what you had earlier but it still had certain issues you couldn't you could tell that it's not very polished but you couldn't tell exactly why and that is where Frameworks like bootstrap come into picture you can use their default Styles you can use the examples that they have and you can build out these nice looking uh web pages I think there's still some spacing that we can improve here probably I think the spacing seems a little bit off here too I'll let you fix that as an exercise maybe we can add maybe like a subtitle or something like that but otherwise uh maybe we can increase the size of this header but otherwise I think this is looking pretty pretty good and it also has like slight interactive elements U on mobile so that's it that is what we have ended up with this is what the page looks like all good and this is what it looks like on mobile uh we have these nice cards and we have this nice separation of the different elements of the card as well that's good so in this tutorial we saw how to install bootstrap CSS and JavaScript bundles into a web development project we saw how to modify bootstrap's default colors and typography using CSS variables and custom selectors we saw how to use bootstraps breakpoints and grid system for for creating mobile first responsive web pages remember you have to first put a container then inside it you can put a row if you want to put columns and then you put put multiple columns within the row and you can use sizes on a 12 column grid to arrange them then you can have use the break points as class prefixes and that is how you achieve all kinds of interesting layouts and of course you have a lot of utility classes for display for background for text for Flex so all those are going to be really useful as well we saw how to use bootstraps prebuilt components so we used the nav bar we built we looked at an example hero section we we used form components we used tables we used a example footer and we use these for building a web page quickly and efficiently and all the code for this tutorial can be found at this link and you can also check out the finished site because it's deployed to verel automatically and I would encourage you to check out some of these resources the official bootstrap documentation is really the only resource that you need to work with bootstrap and most of the time what you're going to be doing is finding an example or finding the documentation copying copying it over and then carefully making changes to each line always make sure that you understand what exactly what each class does and if you're confused try removing it see what it does or go into inspect element and see what it uh see what explanation you can come up for it with and then we have a bootstrap crash course you can check out which is similar to what we did today but a different example so maybe looking at a couple of different examples can help you just Explore More components become more familiar there are also a bunch of other tutorials and there's this nice cheat sheet that you can check out if you want to understand what are all the different classes that are available and what do they do hello and welcome to this live tutorial on building a scientific calculator from scratch using HTML CSS and JavaScript no Frameworks required we're going to do this all live step by step and we're going to try and replicate the functionality of Google Go's inbuilt scientific calculator and stay till the end because I'll also show you how you can do most of your work simply by asking chat GPT the right questions so with that let's get started now this is what Google's inbuilt scientific calculator looks like if you just head on to google.com and search for calculator you will be able to see this user interface and you can perform calculations here for example 7 3 multiplied by 69 * by pi and you can see that that gives us the result 86779 and of course you can then use this result and build on top of it as well but this is the basic functionality that we will try and replicate today you can see that there are a bunch of simple calculator buttons here and then there are a bunch of more complex scientific calculator calculation buttons that are also included here so let's see how many of these we can actually Implement and this is what the calculator looks like on mobile so here is the user interface on mobile and here all the functions are under this other tab FX so we'll try and replicate maybe some of this functionality as well and we are going to do this step by step using just basic HTML CSS and JavaScript so all the steps that we're going to follow are listed here in this doc which is linked from the description so you can follow along if you'd like like now there are some prerequisites here you need to know a little bit of HTML a little bit of CSS a little bit of JavaScript and a little bit of git and GitHub now don't worry if you're not an expert in any of these because we are going to cover just introductory uh explanations about each of these as we use them apart from this we will also be using the bootstrap CSS framework and that is again something that I'll refer you to the documentation for in case you're not already familiar with it and you will be able to find the link L here as well so here are the steps we're going to take we're going to first prepare our development and deployment environment so we're going to create a public GitHub repository launch it in GitHub code spaces to edit it completely online then we're going to set up our basic bootstrap framework and also then deploy the web page to verel quickly so that we can test and share our implementation easily then we're going to build the user interface with HTML and CSS we're going to look at what the Google Calculator works like and we're going to build that mobile first design and progressively enhance it for tablet and desktop and then we're going to add some functionality using JavaScript so this is where we're going to add a script file we're going to create some variables and functions to keep track of current and previous expressions and then we're going to create functions to implement the logic for each button and add some click handlers as well finally we are going to test the page carefully on different screen sizes ensure that the HTML CSS and JavaScript is well organized and then stage commit and push the changes to GitHub and verify that the site is deployed now I will leave some parts of these as exercises for you to do so try and build on top of what we are doing today and we'll see how far we can get in about 90 minutes or so and then we'll also talk about how you can use chat GPD to take away maybe more than half of your work all right so with that let's get started and if you have any questions please post them in the comments so the first thing that I am going to do is start a new GitHub repository so I've just gone into github.com I've signed in and I've simply I've simply uh ready to I'm ready to put in a repository name so let us call it scientific calculator live perfect and let's give it a description so a replica of Google's scientific calculator built live or right and I'm going to make it a public repository I'm going to make it open for everyone to use so that you can see the code I'm going to add a readme file and I'm going to select the git ignore template node and that is going to add a bunch of git ignore uh settings which are going to ignore any temporary files that get created when working on a HTML or web development project I'm going to choose the MIT license here because I want you to be able to build on top of this and let's click create repository and just like that we have our repository now created on GitHub GitHub of course is the platform used by 50 million plus Developers for sharing projects online we use GitHub internally at Jovian as well and of course now we need a way to actually write the code and that is where we going to use an online coding platform called GitHub code spaces so I'm just going to click the code button here and you can develop this locally you can get clone the repository and then you can run the code locally but I'm just going to use an online coding platform offered by G GitHub called GitHub codes spaces now what that is going to do is it is going to set up a machine for me in the cloud and then it is going to clone the GitHub repository over there and then it's going to give me this Visual Studio code interface within the browser Visual Studio code is the editor that we use for web development and a lot of software projects and now we can actually start writing our code in this Visual Studio code browser all right so let me just bring this to one half of the screen so that we can be a little more organized here I'm going to close this terminal over here and let's bring this here and we're going to use this for just testing what we are building okay so to begin I'm just going to go back and search calculator so that I have for reference what my calculator looks like so this is what my calculator looks like right over here I am just going to right click and click inspect and gently when you inspect you will see a view like this so you will see some developer tools here below your actual web page and in the developer tools there's this button right here this is called the device mode so what you can do here is click this button and now you can view the web page in a mobile device so you can see a mobile preview of the web page and you can also put the dock to the right side or the left side so that you can actually line it up nicely with a mobile device so this is what let me just reload the page so this is what the calculator looks like on a mobile device on google.com and I'm going to open up one version of it on desktop as well so this is the normal view of the calculator and this is the mobile view of the calculator and we're going to start by building the mobile view of the calculator okay now to start coding uh I am going to start by creating an SRC folder over here so I'm going to just create a folder SRC which is where I'm going to put in all my HTML CSS and JavaScript and now let me create a new file index.html which is going to contain all the HTML that I'm going to write so let me just uh put in a doc type here so that's something that you should always put in let me put in the HTML tag and in the HTML tag let me put in a head tag and let me put in a body tag and in the head tag let me just put in a title scientific calculator and in the body tag let me put in for now just a div that says hello world all right so this is what we have so far we have let's Zoom that in a bit so we have scientific calculator let's get rid of this yeah so we have scientific calculator that's the title of the page we have a body inside the body we have a div that says hello world and now let us simply try and view this page so we want to be able to preview this index.html page and to preview it we can use an extension called live server because it's not very straight forward to preview a web page directly from Cod spaces you need a vs code extension for that so just head into extensions and search for live server okay the live server is simply going to let us preview the web page we are building within code spaces okay so once this live server extension built by Ric day is installed let's close this extension tab here so extensions are found here in the menu you can see that there's an menu called extension and just search for live server install it now once you do that you will see that there is a go live button I'll have to expand this a bit yeah you will see that there's a go live button at the bottom of the page and this go live button is going to turn your code space into a server essentially and it's going to give you a preview of the page that you had open here so I had open index.html here and now you can see that I have this index.html if I zoom in a bit you can see the words hello world over here and you can see scientific calculator in the title so that is how I've set up a preview of my code okay so that's great now we have on the left we have an index. HTML file on the right we have this hello world text so that's great now of course we want to use the bootstrap CSS framework so I'm just going to go in here and search boot bootstrap CSS and bootstrap CSS makes it really easy to build very flexible layouts it also provides a bunch of yeah maybe I should go for the latest version uh it also provides a bunch of different components that we can use and that makes development really fast so I am just going to let's see read the docs and we want to get started with bootstrap so let's start by okay it says that you need to create an index.html file and we need to add a couple of meta tags so let's copy these meta tags meta caret equals utf8 and meta name equals viewport so these are both required to enable proper responsive behavior on mobile devices so I'm just going to come in and paste these meta tags in my code over here so all I've done is I've read the documentation so read meta tags from here and pasted them here then the next thing I'm going to do is include bootstrap CSS and JavaScript so bootstrap contains a CSS file which contains all the styles that it provides and it contains a JavaScript file which contains all the all the interactivity it provides with drop downs and things like that so let's just come in and include those as well so I'm going to include my the link tag for this bootstrap CSS file in my head tag and I'm going to include the script tag over here at the bottom of the body okay now if this doesn't make sense don't worry you can spend some time learning bootstrap but the idea here is we using an external framework all it gives us is some nice things that allow us to quickly build web pages without having to worry too much about writing a lot of custom CSS okay perfect It also says you can also include popper and JS separately well I'm not worried about that so with that I think I have added bootstrap and I should immediately be able to just see that you can see here that the Styles have immediately changed I had a different font earlier and now I have a slightly different font so that's great now we've added bootstrap as well and at this point I my web page is looking pretty good and I think I'm ready to start building my scientific calculator but let me also save the work I've done and the way I'm going to save it is simply by adding so going into the git tab in Visual Studio code and adding a adding a commit message to perform a git commit so I'm just going to say here um add bootstrap let's see add index.html and bootstrap and I'm just going to click commit and it's going to ask me a few things and it's going to just commit those changes and that's it and now this is going to get pushed so you press the sync button and that is going to now push that code back to the repository okay so that of course is the git workflow you open up the code either locally on your computer or on a GitHub code space then you make some changes and you test them out using a live server or some kind of a server and then you commit and push those changes back to GitHub so GitHub makes this workflow very simple and now you can see that in this index.html file you actually have the scientific calculator basic code that we have put up so far all right so with that let us actually start building this scientific calculator so I am just going to build this piece out for now to to begin with and this looks like okay maybe I just want to put this in the center of the page somewhere somewhere over here and maybe I'll just put a title called scientific calculator somewhere so I'm going to start by creating a bootstrap container so I'm going to create a div with the class container and what that does is that creates this nice div which is always going to remain horizontally centered within the page and let us inside this div let us put in an H1 or a header tag and let's call it scientific calculator okay perfect so now we have this scientific calculator thing over here and this is looking fine um I and you can also see that the container is actually centered on the page so that's why this is centered but I could also just add text Center the class text text Center on the header itself so that this header comes right in between okay I could also control the font size if I wanted maybe this is too big for me maybe I don't want something so big well actually I'm not I'm a bit zoomed in and that's why maybe it appears a bit too big I might want to add some space above and that that is where you would normally write some CSS you would say margin top 32 pixels or something like that and again bootstrap provides some simple U simple classes utility classes where you can say something along the lines of myy or Mt which stands on margin top and you can say mt2 and it has like a preconfigured sets of margins so you can say 1 2 3 4 or five and that is going to control the margins let me try mt3 yeah so I think mt3 that is the amount of margin that got added here that looks good okay so that's the utility of bootstrap and you can check out all of these classes simply by looking up the documentation so there are these utility classes for spacing and you can see here bootstrap includes a wide range of shorthand responsive margin padding and GAP utility classes and you can do something like mt1 mt2 mt3 so I'll let you experiment with it this is not a bootstrap tutorial but the idea is we've just spaced things out a little bit we've centered this on the page and we have now put some space above our title and let's start building this uh let's start building this actual calculator so I'm going to put this calculator inside a card a bootstrap card because that would be a nice way to kind of contain the entire user interface of the calculator because my page is largely empty and the way I'll do that is first I will create a row so in bootstrap whenever you're creating a responsive layout you start by creating a row and in that row I am going to now create a column okay and in this column so maybe let's just look at the row and let's just add a border to the row so that you can see what the row looks like so right now we have this row and this row takes up all the space from this end to this end that's a lot of space I probably don't need that much space uh so I'll do something about it but let me now add a column to it so let me add a column and let me make this maybe just six U let me make it width six columns long so in bootstrap there is something called the grid system so every row is split into 12 columns and you can create a div spanning six columns so this is where my UI my UI is going to go so I could say UI goes here all right so now you can see uh if I add another border around this you can see that now we have this row of content once again I'll zoom in for you so that you can see clearly what's is happening but yeah you can see that now we have this row of content and in that row of content we have this column this one this one div that covers six columns out of the 12 I I want to Center this div I don't want it to take up the entire it but I want it to Center so that's where I can say something along the lines of offset call 3 and okay that doesn't yeah I guess it's just offset three yeah so now what we have done is we have said that we have a row and the row spans the entire width of the container and in that we are going to create a column A div which spans six columns but of course it's going to leave three columns on the left and then it's going to create span six columns and then of course three columns are going to be remaining on the right okay so we've left an offset of three columns we are taking up six columns and then we have three more columns on the right that we uh that is that way we've centered this user interface on the page all right so so far so good this is looking fine to me now let us start adding some of the user interface for our calculator um now I'm going to use a card to create the calculator just to have a nice let's see let's just search for card so just to have a nice border around my calcul around my calculator I'm going to use a card so here's what we can do we can create a div with the class card and then we can create a div with a class card body so let me just quickly do that let me get rid of these borders and let me get rid of these borders and I'm just going to say div class equals card and I'm going to say div class equals card body and my UI goes here okay so we're getting close so you can see that by using the card component from bootstrap again just look it up just look at an example you'll get it now we've created this nice card and inside this card we have this nice user interface that we can now start building okay and now let's start by creating so what's the first thing here the first thing is this input box right over here so let's start by creating this input box how do we create an input box let's search for input okay looks like there's something called an input Group which we can use or maybe even like form control I think we need something like this we probably want to just show the output of the button clicks the current expression in an input box like this so I am going to use I think this looks good form control LG so maybe I can just use this so let me just copy this form control LG and come back here and paste that in here and yeah that looks good to me of course I probably don't need I probably don't need this placeholder over here so let me get rid of placeholder so you can see we have an input of the type text and it has the class form control and form control LG to LG simply means large so to make it a little bigger and finally we have uh a bunch of other labels that we might find useful okay so now we have form control LG I'm also going to make this read only because we don't want to be able to edit this directly so I'm just going to make it read only uh like that uh and we only want to edit it based on the content that we put from the buttons that we click okay and that's going to come up soon all right the last thing I'm going to add here is maybe an ID because so I'm just going to give it an ID Cal display and because this ID is going to be used to actually set the value of this particular field over here okay so now we have this field something like this not exactly this but close enough now we need to start adding some buttons so we have all these buttons okay brackets percentage AC 789 Etc so let's start adding these buttons so to add these buttons I am once again going to create another row so I'm going to say div class equals row okay and let's add the first row of buttons here so the first row of buttons is I'm going to use the BTN or button tag and each of the buttons is taking up 1/4 of the space so remember that every row has 12 columns inside it so that means each button is going to take up three columns so maybe first let me create a div with three columns so div class equals call three and that's going to take up three columns and inside this let me put in a button now again there's a way to put in buttons in bootstrap there there are some helper classes so I'm just going to search for button right over here and again we're going quickly because this is not exactly a bootstrap tutorial but you can go to the documentation you can see what buttons look like this is what buttons look like uh I don't want a base button maybe I want a button like this because that seems to be the color that is used in most of these buttons so I'm just I'm just going to use BTN light or button light let's grab that okay button type equals button BTN light and let's just paste that in here and yeah looks like we now have this light button so that's good uh of course we need some spacing around it we maybe need to add a border around it so let's fix that in a second but at this point let me add one button here so the the button here is that okay so my buttons looking fine and let's add maybe a couple more buttons and then we'll fix this spacing Etc so we have another closing bracket percentage and AC so let's come in and fix those buttons okay this is interesting now when we make when we reduce the size of our scientific calculator of our browser that is going to squish the calculator a little bit so maybe we can do this we can say offset md3 and call md6 and for small screens we can just take let it take up the entire space call 12 okay so for small screens it takes up the entire width of the container the this is the the div wrapping or the column wrapping the card so for small screens it takes up the entire width and then it shifts into a smaller width later for MD screens okay and we can adjust this further towards the end but for now this is fine all right coming right back we need to add a few more buttons but let me just improve this button slightly a bit the first thing I want to do here is let's put one more button and then we'll see what we can do about it so the first issue that I'm running into that this button is not really taking up the entire width of the column maybe it should so I could just come in into the button and let me just go into the button and say w00 and w00 is a helper class within bootstrap that makes the button take up the entire width of the column okay let me add that here the w 100 let me add that in here as well so both my buttons have width of 100 so that's good I think buttons can also have a margin top probably so let me add a margin top here so let me say mt1 or mt2 okay mt2 looks good so now there is some top margin that we have added Let Me Maybe also add a border to these buttons because it'll be nice these buttons seem to have a border around them maybe so let me add a border to this as well so let me add empty2 border okay the button is looking good I think the space between these buttons is too high um maybe I can reduce the space and this is a default Space Between The Columns within a row and you can control the space between columns using something called gutters uh in bootstrap again that is done I I'll let you explore this but the basic idea here is you can use these GX and gy classes to control the amount of space between columns so I'm just going to come into the come into my row here which which is the row of buttons that I've created and I'm going to say gx1 and you can see just as as soon as I say gx1 the buttons become a little wider and the space between them reduces okay so yeah I've just added a bunch of classes here and you can always look up what these classes do so I encourage you to do that and I encourage you to also maybe right click inspect and see what exactly what are the CSS properties that get applied here okay all right so now we have the button and we have uh another button let's take and let's take these two buttons and add a couple more buttons oops okay let's add let's see what these buttons are so percentage and AC are the buttons that we are adding here so let's add the percentage symbol let's add AC okay that's good now we want more buttons here so one thing we could do is maybe create more rows uh we could actually create another row and then in that row add multiple columns but remember that bootstrap has 12 columns within a row and if you try to create a div that does not fit within those 12 columns it'll automatically go to the next line or the next row essentially it's going to wrap onto the next uh line so I can I don't actually have to create a new row I can simply copy these columns and just create another set of columns right below it and what that'll allow me to do is I can then make it a little more flexible maybe uh in my layout but you don't have to do it this way it's just an easy way to do it okay so here's my second row of buttons how many rows do we have so we have 1 2 3 four five rows so let's add those five rows here so I'm just copy pasting uh I'm just copy pasting these four columns or these four column buttons again and again 1 2 3 4 and let's add one more set of buttons Perfect all right so now we've added a bunch of these buttons and let's maybe actually put in the values so we have 789 and the division symbol we should find a way to actually copy that division symbol uh let's find it so if you just search division symbol you can actually find the symbol online uh but anyway let's first put it in so this is the first row of data this is fine then this is the second row of data or second row of buttons let me make them 7 8 9 and the division symbol so let's copy that division symbol and put that in here okay so now you have 7 8 9 find division perfect then let us get that next row that is 4 5 6 and the multiplication symbol so let's get that in 4 5 6 and multiplication symbol yeah this is the multiplication symbol so 4 56 and the multiplication symbol perfect it's looking good let's get the next uh set of rows here so one three and the minus symbol so let's get the minus symbol is already present on the keyboard so we don't need to change a lot here 1 2 3 and the minus symbol okay we've added the next set as well finally we have 0 dot equal to and the plus symbol so now we have zero we have dot or point or percentage or decimal point equal to and the plus symbol okay but perfect it's looking good I think the equal to symbol can be made blue and again this we can do simply by changing the class here instead of button light I could say button primary and instead of Border I could say border primary or maybe like border and then border primary and that's going to give it the blue color okay with that we have implemented the basic user interface of the scientific calculator right over here and we have of course it's not working yet none of the buttons actually do anything but if for 15 20 minutes of work this is not looking too bad okay so let's go ahead and commit that so basic buttons and input box let's commit it and let us just sync it and that's going to now go and get added to our GitHub repository okay perfect now we'll also see how how to deploy this so stay tuned till the end and as I mentioned earlier we'll also see how to do all of this or most of it using something like chat GPT okay now let us start adding the functionality for this and to add the functionality for all of this we are going to have to use some JavaScript so I'm going to assume basic knowledge of JavaScript here variables data types functions and I'm going to show you how you can use JavaScript within an HTML page and there are various ways to do it but but the simplest way to do it is by using a script tag so you could for example go to this bottom of your body and add a script tag here so I'm just going to go in here and add a script tag and you need a closing script tag as well okay and you can also put in yeah I think that's it and then now you can put in anything inside this so I could put for example console.log hello world okay and and now this anything you put within the script tag is Javascript code so now you can actually check you can inspect let me yeah so this is the mobile view I think that's fine but let me just bring the doc down to the bottom and let me also turn off device mode for now yeah so you can actually check the console tab here of the developer tools you can always go go here from window developer tools or just type developer tools here from the okay it's from The View tab so view developer developer tools or JavaScript console that's going to bring you to this page so view developer JavaScript console there's also a shortcut for it you can see here that we typed console.log hello world and that printed hello world here instead if you had said hello Jovian that would say hello Jovin so this way you can add JavaScript code within your or HTML now of course we need a way to actually connect this JavaScript code with the buttons that we are seeing on screen so the first thing we'll do is we're going to say document dot on ready yeah something like that so uh what what we want to do is we want to make sure that we run the JavaScript only after the entire document has loaded up properly so I'm just going to go in maybe and ask this on jobot our chat GPT powered chat assistant so let's see how do how to run some JavaScript code after the HTML document is ready okay and it's going to tell me some explanation which you should read absolutely okay so basically what it's telling me is that if you want to run some JavaScript code if you want to interact with an HTML page after the HTML page is loaded up properly then you need to put in your JavaScript code inside this piece of code so basically what we are saying here I'm just going to first come in and paste it in here so basically what we saying here is that to the document which is the entire HTML document and this is a predefined variable in JavaScript there's a bunch of predefined variables like window document Etc so to the document we are adding an event listener which means when this event occurs we want to do something with it what is the event that we're looking for we looking for the event Dom content loaded which means that the entire page the HTML the CSS Etc of the entire page has been loaded in by the browser and when that event or when the entire content has been loaded then we are asking the browser to fire this JavaScript function so you can see that we've provided two things we to add event listener which is a function or a method inside document we've added two things we said when the event Dom content loaded is fired which means when the entire content is loaded then call this function inside call this function or call the code inside this function okay and that's why we're providing it as a function because a function can be invoked when the event occurs and not we don't want to run this code immediately we want to run it only after the page is ready okay so that's how you add some JavaScript code into um an HTML page okay now what do we want to do here I guess first thing to do is maybe just once again add that console log saying that document is ready and let's just see and you can see here now the same thing is printed document is ready but of course it is printed after the browser has loaded the entire content okay now let's get remember this input over here we have given it an input uh we have given it an ID calc display okay we've given an ID calc display so let's first get this input let's get a hang of this input so let's um let's call it display so let me say const display equal equals document. getet element by ID Cal display okay so what we're doing here is we are saying that we want to get the HTML element which has the ID calc display and document. get element by ID is the function you use to do that we want to get the calc display HTML element and we want to store it in the variable display okay and now we can just do console.log display for example okay let me fix the tab size over here looks like it's just adding a bunch of spaces that I don't need end it using spaces and two spaces yeah all right I'm good so now we have this now let's do console.log display okay and now you can see here that as soon as the document loads our JavaScript code is searching for the element with the ID Cal display and it is simply printing it here in the conso cons and you can see when I hover over it it actually shows me on the screen right over here that the input box is what um this element is referring to okay so now we've gotten a hold of our input box now let's try to get a hold of all these buttons okay how do we get all these buttons well let's see const buttons equals document dot get Elements by class name and I think all the buttons have the class name BTN and I can say console.log buttons okay great so you can see here that each button has the class BTN all right so we have gotten a hang of all the buttons with the all the elements with the class BTN simply by saying document. get Elements by class name BTN okay and you can see here that we've printed them out and it says that it's an HTML collection of 20 buttons and each Button as I hover over it you can see that shows me that specific button so that's the first first thing you need to understand whenever you're writing some JavaScript code to add interactive interactivity into an HTML code you can simply uh select a some HTML node using things like document by. getet element by ID or you can get element by class name or you can get element by tag name there are a bunch of ways and you can store those HTML elements or references to those HTML elements in these uh in variables of your choice okay all right next up now let us maybe try to add a click Handler to one of the buttons let's do something when a button is clicked so let's say buttons zero and that should simply pick the first button dot add event listener so again now I'm adding an event listener to the button and what event do I listen for want to listen for I want to listen for the click so I'm saying when the button is clicked I want to run a function so I have to provide the function that is going to get executed when the button is clicked okay so the function that gets executed when the button is clicked uh for now I'm just simply going to say console.log first button clicked all right and now you can see that I have this event listener attached to my first button and nothing happens so far you we are not printing first button clicked and let's say I click the first button you are going to see printed your first button clicked so that is the next thing you want to understand that you can add event listeners or click handlers to specific Dom nodes in this case it's a button and you do that using add event listener and you can do that not just on uh click but you can also do hover and let's say I could just then print out first button hovered and this time what happens is when I simply well maybe not hover maybe it's some other event I don't know like Focus I don't know well there's probably some event uh out there but yeah uh for click you can simply get uh some something printed out on clicking okay perfect so now we've added a click listener to one of the buttons but ideally we want to add click listeners to all of the buttons at once uh or individual click listeners to all of the buttons how do we do that well we can do something like this we can say buttons. for each so for each is a way for you to do something for every element in a array in a JavaScript array okay so what you can do is you can now provide a function to for each okay which is going to take each individual button and it is going to operate that on the individual button so the button now is going to refer to each button one by one and now I can say console.log button clicked and from this button maybe I can get the text of that button so button do inner text so if you want to get the text inside an HTML uh element then you do that simply by simply by calling do inner text okay that's a property let's see maybe it's for each without a yeah like that okay so let's turn that into get Elements by I could just use a for Loop here I I think that would be simpler so for let I equals z i less than buttons. length i++ a for each would have been nice but looks like there are some problems when you're working with an HTML collection you probably can't do for each or something but button so const button equals buttons I so what I'm doing here is I'm looping over the list of buttons and I'm getting each button and then I'm saying button clicked button do inner text okay all right so now what we've done is for each button we are simply going to log that the button was clicked when the button is text and we are going to log the inner text of that button so ah I need to add that actual um click listener so I need to say button do add event listener click of course we want to do the console log only when the button is clicked and not always so let's add this console log only when the button is clicked okay all right well let's see what's ah l n GTH that should fix it yeah okay so now you can see here all we've done is got in a list of buttons using get Elements by class name gotten a list of the actual docu the actual display input display using get element by ID and now we are looping over the buttons using this for Loop we saying I equal 0 I less than buttons. length i++ and we getting each Button as buttons I and then we adding a click listener uh event listener to each button and on the event click we want to invoke this function okay the function that that's going to get invoked is simply going to say console.log button clicked and now when I click on a button you can see that each time we simply print which button was clicked button click percentage button click 99 8 7 Etc okay so it's a bit of work to hook up JavaScript code with some of the event handlers for specific Dom nodes for specific nodes on the HTML page that's why a lot of people use Frameworks or libraries like jQuery react Etc but this is just raw JavaScript we're simply picking up a button we are attaching an event listener to it and this is what it's doing okay now of course what we want to do instead is not actually use the console loged event but simply add that here add that information here for example if I type seven I just want seven to be added here okay so here's what we can do about that so let's say in this button let's do this let us first keep track of the current value of the input in a variable called current value okay so let's do that and let us say const value so this is the value that is present inside the button is simply button. inner text okay and now I can say current value plus equals value okay so we have adding we adding the inner text of the button to the variable current value which we have here and then we can say current value uh then we can we have the display here so we can say display do value remember display this this is simply the input box over here so we can say display. value equals current value all right so let's try that out okay so you can start to see here what's happening as soon as we so what we're doing is we creating this variable current value it contains the empty string right now but what we then doing is when a button is clicked we're getting the inner text of the button adding it to the current value so the current value now contains the empty string plus the value from the button plus the value from the next button that clicked and so on and then one very important thing we also doing is we also setting the value of the input box to current value if we didn't have this then current value would keep changing so we could just log current value over here okay we could just log current value over here and you can see current value is changing to whatever I set it to but this is not changing there's nothing is getting added here and that is where you can actually set the value of the value inside an input field and you can change the text inside a particular div and you can do all sorts of things so basically you can modify the content on the page using display. value or display. inner text or whatever you want to uh want to use for it and you can set it to some value that's coming from a JavaScript variable or you can just set it to something manually okay so that's great so now we have this functionality and I think one thing we can do maybe bring it to the right instead of the left so I'm just going to come back in here into my text uh into my HTML code and I'm just going to say for this input text end and I believe that's simply going to orient the text at the end for it and that's looking good okay so now we able to actually capture this value but of course we are not actually working with the equal to yet so we need to handle equal to we need to handle AC let's start with AC AC is simply going to clear the entire thing so let's start with AC so what we can do here is we can actually do an if else on the value of the button text of So based on the button that was clicked we need to do a simp we need to maybe uh run a separate piece of logic so I'm going to say if value which is the button that was clicked equals and I'm just comparing here that's why I'm using the double equal to equals AC then we want to do something else otherwise we want to do something else right so else we want to do this so let's get this into else okay let's get this into else over here and let us now go in here and let us set the current value simply to empty and again let's just set display. value equals current value okay so now we've implemented the functionality for the AC button so let's say minus 3 and when I press AC you can see that's simply clear clearing the current value because its value is AC and it is setting the display value to the current value okay so now I am I think things are looking pretty good so now we are working now this is working of course brackets and all are also working these may not be Val valid Expressions but nevertheless these expressions are working the next thing we need to do is actually evaluate these so when equal to is clicked we don't want to insert an equal to we actually want to evaluate these and for this we're going to use a shortcut here normally some something like Google would actually do a proper ifls condition they would pass the string and they would have some logic to evaluate it or maybe they would send it to a server and evaluate it and get the result here but we just going to use a shortcut which is not safe to use in a production application so I just want to tell you that but here's what we're going to do um let's put another else if over here so let's say else if and after lsf let me just uh close the bracket over here as well and let's say if the value is equal to the string equal to okay I know this looks confusing but we saying the value inside which is the inner text of the button is equal to the string equal to in that case what do we want to do well uh let's maybe write a helper function here to do this so let's see uh let's call this function evaluate so function evaluate and let's call it evaluate result and let us just call this function evaluate result in that case okay and we're going to put and this is just to keep our code organized slightly nicely so evaluate result so I am just going to here's what I'm going to do I am going to Simply say con result equals eval okay now this is a very dangerous function be very careful while using it but here's what eval does you give it some JavaScript code and it is going to ex execute that JavaScript code for you ideally you should not be evaluating User submitted JavaScript code on your website because they can have some code there which can fetch some data from your um from somewhere on your server and then do malicious things with it uh this code could be coming from some Chrome extension or something so definitely never use eval in production applications rather you might want to write an if else to kind of pass the expression and then execute it so that as an exercise but for now I'm simply going to evaluate the current value so I'm going to take the current value as an expression as a JavaScript expression I'm going to evaluate it and you can test this out you can actually go into the yeah so let's say you you type 2 + 3 you can see that that evaluates to five right and you can also do slightly more complex things you can say 2 + 3 now of course in JavaScript multiplication has this star symbol 4 / 7 and that evaluates 2.85 Etc right so eval is simply going to take an expression and execute it like JavaScript code and store that result in this thing called result okay and then we can say current value equals result and maybe we can convert it to a string so how do we convert something to a string in JavaScript I'm just going to add ask jobot how do you convert something to string in Java script and you can just say two string and that's going to convert it to a string so I'm just going to use that so I am just going to say result dot two string perfect and let me now set display. value equals current value and I think this should be it um let me also maybe yeah let's let's try this out first so let's say 4 + 3 = 7 and just like that we've implemented our calculator see that wasn't that hard and we still just about at 160 lines of code but of course most of this code is just a bunch of buttons copy pasted many many times and we will when we learn Frameworks we are also going to learn about how you can reduce the amount of HTML that you write where you don't have to copy paste things and if you have to change the style of all the buttons you have to go and change them in a bunch of places but for now since we're keeping things simple let's just uh keep it way but just like that we've implemented the functionality and it works probably with something even more complex I could say 7 3 plus and then in Brackets 2.1 + 6 and that entire thing works okay so that's good there is one problem though AC works as well let's try 8 * by 9 what does that do okay that that fails and that fails specifically because well uh inside evaluate result let us just log the value of current value so let's say console.log current value current value okay it's always a good idea to give labels to your logs uh let me get rid of this document. is ready I think I don't need that anymore okay so when I do 8 * 6 you can see here that the current value is 8 * 6 it has this time symbol but we don't want the time symbol we actually want the symbol star the star symbol is what is valid JavaScript code so we may have to do some replacement over here and that is where we can say const um let's see converted Val let's just call it converted value equals current value so current value is a string and and in the string we simply want to replace the the this character over here which is the times character let's get that from our code over here yeah so this is the times character so we want to replace the times character with a star okay so that's all we are doing here and now we oops sorry about that and now um we can log the current value and let's log the converted value as well in the converted value we've simply replaced times with star and let's evaluated let's evaluate the converted value okay so let's now try 7 * 6 equals and you can see here that the current value was 7 * 6 and uh the converted value this should say converted value and the converted value is let's try that again 9 * 6 so the current value is 9 * 6 and the converted value is 9 star 6 which which is valid JavaScript code and that ultimately ends up being converted into the string 54 okay so that's great we have fixed that maybe there we also want to fix the division symbol so let's go ahead and fix that as well we don't need to fix minus and plus they're probably fine we probably need to uh do something about the percentage as well we're going to see what to do about that but let us fix the division symbol as well let's grab the division symbol over here and let us come in here and let us just go in and say yeah replace right so I'm just going to come in and say let's let's add some space here just so that things are a little easier to see and by the way in JavaScript you can actually put statements on the next line just for better readability so I'm simply replacing the division symbol by slash and hopefully now 6 / 3 should work that's two uh let's try percentage so now 9 29% equals okay that doesn't work again so we want to convert percentage as well a quick replacement for percentage would be to Simply multiply by 0.01 so I could just say multiply it by 0.01 and let's see now so let's see AC 9% equals 0.09 okay that's working as well I think that's it that is our basic calculator we've not added the scientific functions yet we will see how to add them in just a bit but that's looking pretty good and things are looking so good so far so I'm just going to commit this so I'm going to say added basic functionality and let me just commit that and let me send that back to the GitHub repository okay now I can check back the GitHub repository over here let's see github.com and I should have my reposit here where is it well I'm just going to go into my profile and in my profile I'm going to look for repositories and here we have scientific calculator live and you can see scientific calculator live has all the code and everything is still inside index.html uh one quick thing I'm I'm going to show you right after this is how to separate out the script into a different file so let's do that as well let me come back in here let's create a file script.js and let's grab all the code from index.html into script.js okay and let's put that in here so that we can worry about it separately and let us now just give this SRC equals script.js okay and it should still work exactly the same way H let me just restart the live server and let's see okay let's uh let's try going live again yeah there it is and let's see if the let's grab this and put it in here okay well it says refuse to execute script from such and such let's we should be able to fix that so let's just go into jobot and let's search I got this error while including JS in HTML okay so we sending the wrong mime type Etc the server needs to do something okay looks like there's some kind of a yeah I'm just going to say I don't have access all right well looks like there's probably nothing I can do about this at the moment so I'm just going to have to maybe bring back my uh JavaScript code well no it's gone okay yeah that did it I think I just had to put SRC script.js instead of/ script.js and that worked yeah sometimes you run into these errors and you just search online and you should be able to to figure them out and let us just Commit This so let's say separated out the script file and let's push it back and now the next thing I want to show you now that this is loaded up let's just yeah you can see there's index.html script.js I want to show you how to deploy this so you can go to wor.com and create an account and worel is a platform for very easily deploying JavaScript related or nodejs projects in any web related project and I'm going to say add new project and you can connect your GitHub account here and it can get access to your private repositories public repositories Etc and you can see here that it can see in my account that there is this scientific calculator live so I'm importing this project over here and here on ver cell.com I can select some framework so I'm not using a framework right now there's a CSS framework but this is talking about more of a backend framework that I'm using I'm not using any of these but I do need to tell it which directory contains my index.html file and that happens to be SRC so I'm going to select the SRC directory as the Live directory and then I can just click deploy okay it's as simple as that you go to wor.com sign in connect your GitHub with it and then click deploy create a new project and select the root root directory and now you can actually go ahead and uh you get this nice URL scientific calculator Livewell doapp and I'm just going to drop that in the chat and you can try it out you can try it out on your own and you can see whether it's mobile friendly or not yep it looks fairly mobile friendly to me yep and we'll have to figure out how to make it exactly like the Google uh scientific calculator but for now I am pretty happy with how this is looking okay great so now let's continue on now that we've done this deployment as well let us continue and add maybe some of the scientific features we may not get to everything we are kind of running out of time here as well but let's see let's add maybe a couple of rows all right so so now there is this selector here 1 2 3 in FX I'm just going to add it below I'm just going to keep keep things simple for now but I encourage you to try it out and I'm going to add this row s Ln pi and cos because these seem like an interesting set of things to add so let's see let us come back over here and let us say uh let's add another row of values so let me grab the last four buttons and let me create a copy and let me paste that in here so one is called s then one is called Ln which is logarithm and the natural logarithm probably and one's called Pi let me just get the pi symbol let's get it here okay and the pi symbol over here is just that character and let me get in what's that last symbol over there C so let's get C in here as well okay so let's see if we are able to make that work of course this doesn't need to be a primary button anymore this can be our normal light button all right and yeah there we have sign Ln Pi cos and let's try to just Implement sign for now okay what if we do s and then maybe Open brackets of course like it has to be proper it has to be a proper expression for it to get evaluated and I click equal okay runs into an error so it says reference error sign is not defined okay and I'm literally just going to copy this error and I'm going to come back to jobard and said um say let's just reset this I got this error when trying to compute sign in JavaScript script and what does it say it looks like you may have forgotten to prefix a sign function with the math object and this is how you should be using it nice so I'm just going to go ahead and use that I'm going to go into my script.js and into my script.js I'm just going to add that replace and for sign I am just going to replace that with math. sign and hopefully that should fix it let's go back in here and let us check so S 4 equal okay looks good it's probably in radians not in degrees that's fine I'm not too concerned about the specific details right now so sign is implemented here minus 0.75 uh maybe we should fix cost the same way as well let's see cost uh that is simply math. cost for cost okay so let's try cos 8 * sin 9 equals okay yeah seems fine I could I could just test that in this calculator as well uh this calculator actually allows typing to in case you want to try that and it also inserts button it also inserts a bracket and all but cos 8 * sin 9 that's what we did so cos 8 * sin 9 yeah that's about the same 0.559 0.559 599 0599 okay that's good uh let's deal with Ln over here so okay I think one thing we should do is somehow find a way where if the result has already been computed then we should not um pressing a button should not add to that but again Advanced behavior I'm going to leave that for now but Ln 8 let's see if that works nope so let's try math. Ln I'm just going to try this out and see what happens Len math. Ln okay so Ln 8 H math. Ln is not a function so let's see um I'm going to come back here to jobot I'm going to ask it once again uh I'm trying to compute the natural logarithm in JavaScript I get this error okay jan.com jobot just go in here and drop it in okay it's math.log I believe so for the mathematical for the natural logarithm you just say math.log so I'm going to change that to math.log um and I'm going to say uh while we here can you also tell me how to find the value of pi yeah it's just math.pi so I'm going to going to fix that as well so let's go in here and let's replace the pi symbol I'm going to get the pi character the pi symbol is right over here and there you go we have fixed that as well so now we type Pi you press equals that's 3.14 and whatever pi means okay and we can for example try to compute the the P Pi R square of a circle okay that reminds me we can probably add things like Square to let's get one more line while we while we're doing this this is interesting let's go go ahead and Implement one more line over here okay we have log e tan and square root fine let's do it so log I believe would be the log to the base 10 and I can verify that by again going into log to the base 10 equals 1 yeah so log is log to the base 10 so how do we do log base 10 lock to the base 10 in JavaScript yeah I think it's going to try and figure out yeah okay there's something called math. log 10x and that is going to do log to the base 10 for us so we can do one more row and probably square root is going to be somewhat interesting so let me just do one more row and I'll leave the rest rest as an exercise for you um so that I don't give everything away let's see so we have these buttons I just going to grab these buttons once again and I am going to drop that in here let's add log uh by the way if you have any questions please drop them in the comments we will look at the questions and alongside I want to tell you that wait till the end because there's going to be something really interesting that you don't want to miss okay so we have log e tan and the the square root symbol so let's go in here square root symbol and let's grab that okay that is called the radical symbol but let's yeah let's just put that in here and now we might want to just handle these as well so what what about e let me just ask it what about the constant e how do I get that well that is simply math. capital E so we just use that so let's go in let's go into the settings uh let's go into the script.js file and let's add those Replacements as well so replace we want to replace log with uh math. log 10 that's fine and we want to replace e with math. e okay and we want to replace tan with math. tan before we actually evaluate it and finally we want to replace let's see the square root symbol and what exactly do we replace it with I'm not sure okay let's just search here what about square root you just use math.sqrt so I'm just going to put in math.sqrt right in here okay and with that hopefully let's see square root of 4 equals ah okay there some something went wrong here I believe this requires a bracket so um I think we might need to actually put a bracket here so square root bracket 4 close bracket equals yeah that's two so that works so we might need to rep be a little careful while working with square root or we might want to do something something a little more interesting while replacing instead of just replacing the square root itself maybe you want to take square root followed by whatever comes after it and put that in Brackets or something but for now it's fine but uh another thing that I should do properly is I should maybe just put all of this into a try catch okay so JavaScript has something whenever there's an error you can actually catch the error and you can handle it in some fashion and maybe show a message to the user so let's say try and let's put all of this into a try block okay so it's it's going to try to execute this code and if the uh if the ex if the code works then that's fine but otherwise okay let me just search what is the Syntax for TR catch in JavaScript what is the Syntax for try catch in JavaScript okay the syntax is like this so try catch and then you catch an error and then I'm going to print the error so I'm going to say console. error and that's going to print the error in that nice red format so I don't want to get rid of the error but what I can do is I can set current value Val equals error and I can say display. value equals current value okay this way I'm also informing the user that there is an error and they can then deal with it somehow okay so let's try that again let's do something wrong let's say percentage and let's do equal to here and it just prints error over here just like a normal calculator and it also prints out the exact error for us for the developer to debug invalid regular expression missing slash or something like that right so definitely this is something that you want to do you want to try and catch these errors so let's say you want to understand what exactly is TR catch you can actually ask jobot um or there's like a personal tutor here and you can just ask it teach me about JavaScript TR cat statement and start conversation and it is going to just tell you a bunch of things about the TR catch statement okay what exactly it does it's going to maybe show you an example so it's going to show you an example of how to use it how to catch these errors so you can generate tutorials on demand just go on join.com jobot and if you want to go use one of these specific tools over here just scroll down and use them or you can just type start typing and get help okay all right I think I'm pretty happy with the scientific calculator at this point I am not going to go any further than this um I will leave the design the responsive design to you as an exercise so how do you make it go from this to this that is something I let you figure out uh if you can't then just put all the buttons here below that's perfectly fine you don't have to exactly implement the design and then there's also this one other interesting thing that the Google um that the Google Calculator does you can actually give it a certain input and when you click when you click enter it stores the previous result on top and you can see that pi equals is stored over here and it shows this recent history as well that is probably too complex but this is something might worth checking out where you can have a previous result variable and just show the previous result above the current result again uh it's an optional part so you don't actually have to implement the whole thing but we've got ourselves a pretty good scientific calculator I think I'm pretty happy with this uh right now so I'm just going to save it over here so let me go ahead go ahead and say um implemented a few scientific functions I'm just going to commit it and I'm going to publish it and my scientific calculator should now be live now one of the things that verell does the platform that we've used for deployment because it's connected to our GitHub uh what it does is every time you push to the main branch or the the main branch or the the primary branch of the repository it is automatically Ally going to redeploy your code and you can see here that now you can see that on my versel production website uh it is automatically now it automatically contains the updated code so you can play along with it right now and this is one of the best uh things with using an integrated platform like worel for deployment now you you're probably wondering what if I make a mistake WIll the what if the deployment fails well it's going to use the previous version but if you create a branch and this is something that we cover when we talked about git but if you create a branch then on that particular Branch it's going to create a preview deployment it's not going to affect your main deployment and then you can create a pull request merge it back so that's all about the GitHub workflow okay the final thing that I want to show you before we close is that we didn't actually have to write any of this to begin with um the tools that we that are at our disposal are actually getting so good right now um that you might not actually have to write much of this code at all um so this this is one thing that I tried to do earlier today I just figured what if I could just ask jobot which is powered by chat GPT GPD 3.5 right now soon GPD 4 what if I could just ask it that I want to build a scientific calculator similar to the one available within Google search Okay and let's build it step by step so first please give me the basic HTML code for the page and the calculator without any buttons and use the bootstrap 5 CSS framework and make it responsive okay that's what we've said here and let's see if we can if jobot can generate some code for us and looks like it is generating some code looks like it is okay it's generating it it created an HTML page for us it has a meta it has the right meta tags it has this link tag for the stylesheet it has the scientific calculator and I've asked it not to put any buttons right now I'm going to add the buttons in The Next Step but it could have just created the buttons for me as well there's a limit to how many characters it can can give you at once and let me just grab this and let me open up this online platform where I can quickly uh test out HTML code let me get rid of what they have here let me put in this HTML and you can see here that it is creating this scientific calculated this basic layout already now the bootstrap styles did not get added and I have a sense of why that is so one of the issues that the chat Bots or the code generation Bots run into is that they may not because they're characterwise generators they may not actually have picked up the right Integrity which is the hash that is used to verify um the link tag so you might need to replace this link tag with the actual link tag from bootstrap so I'm just going to go back in here go into introduction and grab the link tag from bootstrap itself okay uh so let's go ahead and fix the link tag so you should always verify any AI generated code that you are working with you should always go through every line of code but just because it's not directly giving you the result that you want doesn't mean that it's not going to be able to solve your problem okay let me add that script tag in here as well so it is created for me the scientific calculator and you can see that it's followed the same best practice that I followed or maybe I copied it uh but you can see that it has this row over here and it has this column and okay has okay it's made it's made this calculator too narrow so I'm just going to stick with call md6 or call sm6 so so far so good okay let me now go in here and let me come back okay so now let me ask it okay give me the additional code to add the buttons within the calculator and I'm just going to tell it not to don't rewrite the entire HTML yeah and let's see if it can just give me the code to add the buttons and it does so now it tells me that copy paste this code into the form element um just below the input field so let's do that so now it's adding a bunch of buttons you can see it's adding 78 9/ 456 star 1 2 3 so it probably also knows what Google's calculator looks like or a calculator in general and that's great and it's got these bunch of uh other buttons here at the end equal to Z Dot and then it's got maybe a button called clear that's like a huge button and maybe a backspace button okay and it's given me some explanation about the code as well yeah this is just insane I did not expect that things would get to this point um but it it is and let's just put that in here let's add in the buttons okay well it's not looking too bad I think definitely there's maybe some layout changes we may have to do to make the buttons look slightly nicer but I'm not complaining I think this is is fine for now and we could for example go in here and we could say gx1 right uh not just for this row but for every row so we could go in and say gx1 over here we could go in and say gx1 over here and we could go in and say gx1 over here and maybe gx1 over here right now of course it is using button secondary maybe we could just fix that and use button outline and um let me just actually ask it if it can add some space between the buttons so let's say uh provide some CSS to add space between the rows of buttons okay so now it says okay just add that that's it just add the margin and you can just add it within the you can just add it as a style tag within your HTML and I just go in there and I just put that in there and there you go the scientific calculator is looking rather nice I could maybe come in here maybe uh the H5 I could maybe just uh text Center it and I could maybe just make it read only okay that's nice and but it of course doesn't have any logic yet let's see if jobot can actually write the logic okay this part I'm not too sure but can you now write the logic for the buttons using JavaScript um don't use any Frameworks because sometimes it might use jQuery or something like that that's what a lot of examples on the internet contain don't use any libraries or Frameworks and just give me the content for the script tag okay and let's ask it and let's see if it can do that okay perfect it is giving us H okay it seems like then I I then have to add this okay I let me tell it I don't want to add I don't want to add any on click handlers so you can actually tell it that you're not happy with the code I don't add any on click handers all the code required to implement the logic should be in the script tag okay yeah look at that so now it's just doing document. query selector all expression field and it's given it's given it the ID expression probably and then it is evaluating a bunch of things let's see let's just copy this JavaScript and let's see if that works I am not very confident if this is going to work uh gp4 would definitely do do a much better job gp4 is the newer version of chat GPT but okay yeah so now we have added some event listeners I think it we might want to put it inside document. element ready or something like that but let's see if this works seven nope let's see so what does it say the expression field is called uh okay the input does not input has the idid result so maybe this should be get element by ID result what's the expression field well there's no expression field H Maybe not maybe this is uh you've added the result field okay let's just do let's just change that to current value well what if we just give it the ID result as well so looks like it is it has two Fields one for expression one for result maybe it got confused there but look at that 8 9 = 1 that's not bad okay clear and backspace are not working so let's tell it you're not handling the clear and backspace buttons please update the code also there's no field with the ID expression we just have one result field okay and it apologizes for the mistake obviously and now it is going to update things to also handle the yeah again it probably messed things up a little bit like it is thinking about C and slash I guess it probably doesn't have the full context with it anymore but let's go ahead and fix make that small fix uh this is still a lot faster than coding everything from scratch of course and yeah so here it's using this backspace button so instead of the back word backspace it's using just this arrow and it's using C so maybe just let's replace that with clear and let's replace that with or how about we do the other thing we we replace clear with c and and we replace backspace with the arrow character like that okay so how about that 56 and that backspace is now working 56 589 * 23 equal 13 457 yeah 5889 * 23 that's actually right great you could probably also now go in and say add sign log and a bunch of other buttons but I'm pretty happy with this it it just generated an entire scientific calculator with maybe two or three messages it is uh just insane and not only that it also we also just copy pasted a bunch of errors that we encountered and it's all those errors for us so use these tools use chat GPT use jobot uh of course verify the code that it writes do not just depend on the code without verification I've not had a chance here to look through every line of code but you should you should do that because it may introduce some security ver abilities or something like that but in any case that is how you build a scientific calculator using HTML CSS and JavaScript I hope this was an informative session uh a lot of things that look fairly complex are actually really simple to build out it's that you don't have to build in a lot of the complex functionality you should always focus on building the most simple Parts first and then you can always add in the responsive design the animation uh the multiple rows of data the history etc those are all things that actually do require a lot of additional code but the simple functionality is generally fairly straightforward to implement and in a lot of cases you can get a lot of help from from jobot from chart gbt from whatever AI tools you're using Okay so let's see now if we have any questions at uh this point okay well I do not see any questions can this be uploaded on YouTube this is on YouTube it's going to stay on YouTube so you're fine how to create a function for the how to create the functionality of clicking on either FX or 123 and the buttons to Ensemble changing entirely yeah so see if you want to do something more complex than what we've done here ideally what you should be doing is two things one uh you shouldn't just be storing the current value in a string what you should be doing is maybe having an you should have an array of tokens and you should have an array of tokens or array of uh whole hosting the value of button clicks and that array could be converted into some value that is actually displayed in the input so that when we click the equal to button you don't have to evaluate a particular string but instead you can look at element by element look you can look at the array and you can then use some JavaScript code to evaluate an arithmetic expression right so yeah you could for example let's just try this and see what happens okay jan.com jobot you could for example ask jobot write a JavaScript function to evaluate um an expression from a scientific calculator don't use eval okay let's see so this takes an input and it has this whole set of operators and you can add more operators as well you can see here that it has created a bunch of like a BAS basic code for you and now it's going to do some of this business and you can see here that it can work with all of these interesting operators clearly H it could also potentially okay square root is not yet supported but let's say add support for S log cos Etc it's going to then update that and let's see maybe we can actually use it in our code I don't know but uh possibly yeah so it's basically what it's doing is it's maintaining a stack it is putting tokens into the stack getting tokens out of the stack and it is also testing whether the expression is invalid and yeah all of this should work if all of this works then potentially let's see if okay the maybe the expression may not contain any spaces so we may have to fix that it says let tokens equal to exp. spit space um the expression may not contain any spaces what will you do then yeah so it's going to write more complex logic and you can keep working with it and try and figure it out so I encourage you to try that out with chat GPT okay instead of eval you want to create a different function is there a better way yeah so one thing you could do is you could actually attach onclick handlers on specific buttons directly from HTML so I want to show you right here this is what Char GPD or jobot tried to do you can say onclick and then you can provide the name of a JavaScript function that is defined in the script file and you can call it with some value right so you can have a function called button clicked and button clicked Can U be get called with this particular value when this button gets clicked so that's one other way to do it I am not going to go into a lot of detail with that right now but just know that you can also specify onclick handlers within the HTML itself so I hope that answers your question yeah looks like this is actually working not too badly let's just try it out I'm not sure if this is actually going to work but let's see let's put that in here so let's get our evaluate expression and instead of eval let's just do evaluate expression over here evaluate expression I should be taking a close look at this code but what the hell let's see 7 * 9 equals nope there's definitely some error here I guess there's it's not uh that straightforward because it's like doing some regular expression match yeah but now 7 * 8 works fine yeah so you might need to just test this a little more carefully than what we have done here um you can one way to test this would be maybe to put it into a JavaScript console and then test it out uh but this looks this looks good I don't have have a problem with this um with the modification it should probably work out just fine okay all right I think that's everything that we were covering today so let's just go back and check where we started so we wanted to build a scientific calculator and the way we did this is let's grab those links and put them in here as well so that you can actually see these so here is the finished code I'm just going to add it right here in this Doc it's also going to be in the description here is the actual scientific calculator that we built out the finished site uh that's right here so we created a public GitHub repository we Ed GitHub code spaces for development we added the bootstrap CSS framework and of course we also later figured out how to deploy this web page to the cloud by creating a verel project and you can then connect it to your own domain as well something like scientific calculator. a or something and it should it should work fine too so that was the first step prepare for development and deployment the second step was to build the user interface with HTML and CSS so we added the content for each section one by one using HTML This Is What It ultimately looked like this was the HTML code so we had a bunch of uh we had like this row we had maybe a a column inside it we had the title we had a card we had a body inside the card we had an input then we added the buttons row by row so uh we could we could also have used the browser inspect tab on Google to inspect it but we didn't need to do that uh we didn't really get into a lot of progressive enhancement for tablet and desktop but we did make it a mobile friendly or mobile first design and we've not tried to design replicate the design very closely but we did our best effort given the time we had then we did add a script file later in the in the process but we started out Simply with a a simple script uh tag of the file was added later f variables and functions to track the current we were just tracking the current expression we didn't really track the previous expression uh we added functions to implement the logic for each button Well turns out we could just use eval and we did not actually have to implement the logic separately for each button and then on click handlers those we just added it in a loop so we took a bunch of shortcuts here which is fine for something like this where there is no sensitive information for us to worry about we just used eval but otherwise you might want to use an evaluate expression kind of formula or an evaluate expression function again could be generated with help from jobard you could also give it some example inputs saying these are some example inputs you have to handle and giving the keeping those example inputs in mind it's going to then generate a function so remember that it's not always going to be able to read your mind and know exactly what you need so you need to give it some input you need to give it some examples and in a lot of cases you can also give it uh if it does not give you exactly what you want you can then ask it another question follow up with it it and it can give you the right answer and you can also just copy paste your error and it'll fix things for you okay um and of course you should very carefully look at all the code that is generated by AI definitely don't just copy paste the code into your projects okay test the page carefully at different screen sizes Ure that HTML CSS JavaScript is well organized yeah it looks fairly well organized to me I could add a few comments here in there maybe I could add a few comments here so I could always just go in here and I could would say to jobot add some comments to the following JavaScript code and it can add a bunch of comments for me yeah it is now explaining the code but I want to I want to add some comments inside the code and I can always tell it that uh yeah please add comments inside the code okay so it may not understand it may not exactly understand what you want it to do but just talk to it just don't give up immediately and now it is rewriting the code for us with a bunch of comments how nice is that all right and one thing you can also do is you can just use jobot to get explanations on code so you can always just go on jan.com jobot and simply go on code explainer and paste whatever piece of code you have enter the programming language and it's going to explain that code to you but let me just for now now let me just take this code put that in here and see if it still works I think it should I don't see any reason why it shouldn't generally doesn't mess this up too much let's see 8 88 3 = 85 yep Ln or let's do AC Ln 8 that should be about okay Ln seems to have failed yeah for I I'll investigate that later but yeah you can definitely use it to document your code as well just verify that it has not modified any of your existing code okay so that we did then we staged commit and pushed our changes all in a few clicks on vs code didn't have to write any get commands and then we verified that our site is deployed to verel we tested it out and it's working fine again maybe there might be something I might need to fix yeah there's something wrong with my Ln function cannot read properties of undefined log 10 yeah I guess it's probably math log 10 there's something wrong with that in JavaScript math.log 10 H okay I don't know what's um what's going on here but we'll fix it we'll find it and we'll fix it no problem so with that we've reached the end of this tutorial I hope you enjoyed it do leave a like on the video and of course please do subscribe we we're going to do more of these tutorials and if you have any questions please post a comment we will try and reply to all the comments uh specifically if you have technical doubts or you could also just go on jan.com jobot and ask your question there and continue building on this try to see how close you can get to the Google scientific calculator the closer you get try to implement this toggle for radians and degrees see exactly what it does um and and try to maybe also add this button which is going to toggle a few things again the hint here is maybe use some JavaScript to trigger the maybe have like one div of buttons and another div of buttons below it and have a JavaScript variable which tracks which mode you are in and based on the change to the variable also change the display property of the divs so that's kind of the hint that I'm going to give you here but I'll leave it at that so thank you for joining and have a good day or good night take care now the express web application framework is a minimalist web framework for nodejs streamlining serers side application development with flexible routing middleware and a vibrant ecosystem of libraries so we'll talk more about all of these aspects don't worry if these don't make sense right now now you might think that a server is a piece of software and that is partly true server is some uh is a piece of hardware and uh you might think that a server is a piece of hardware and that is partly true these are racks of servers in a data center but the server that we going to talk about today is a piece of software that serves requests now uh here's what we're going to cover in today's tutorial we'll talk about creating and running a web server using the express web framework we will talk about serving HTML Pages static files and dynamic data using templates we will talk about using route parameters to create and serve Dynamic Pages we will talk about accepting form submissions and sending emails from a server so there's a lot of ground we're going to cover today and in some sense we are stepping into the full stack domain here in some sense we are covering the backend side of things now that we've learned basic web development so let's move forward now of course the best way to learn these skills is to follow along step by step and type out all the code yourself so make sure to do that to get a proper understanding and we will explore these Topics by attempting to solve this problem statement so the last time we created a jovian careers website powered by bootstrap and this is what it looks like it has a navigation bar it has a bunch of links here in the navigation bar and a signin button it has this work at Jovian section with some text and an image and it has this job opportunities table a list of job opportunities and an application form and it has a footer here at the bottom okay so we built all of this using bootstrap and you might also remember you might ALS also remember that uh we had made this responsive so you can see here that there's an image here at the top there is some text and on the mobile view we have cards instead of um instead of a table and we have the same application form except that it is now adjusted to show up properly on mobile and it scales properly as we grow from Mobile to tablet where we switch into the job opportunities table from the job opportunities card list and then we also take up more space on the screen okay now uh we are going to do a couple of things this time the first thing is that we should we want to make the main page only show a list or a table of job openings we do not want to have the application form on the same page uh it's probably a better idea if clicking on a particular job role opens a job Details page with an application form and submitting that application form can then potentially trigger an email to us and also show an acknowledgement for acknowledgement page to the user so now we going to build a server which is going to accept these form responses and send out an email so let's get into it now of course we assume here that you have knowledge of HTML and CSS Basics and a responsive design with bootstrap and you are familiar with Version Control with GitHub and Cloud deployment with verel okay if you haven't please make sure to review the previous lessons uh before we move forward and you can find all the source code and the result for the starter site and the Finish site over here in the notes so we'll start by creating a GitHub repository so I'm just going to go over to github.com and if you're not signed in make sure to sign in and I'm going to click new and I am going to create a repository and let me just call this Jovian careers express live because we're building this live and this is simply a jovian career site powered by expressjs all right and this is going to be a public repository I am going to initialize it with a readme file I'm going to select the git ignore template nodejs because we're going to actually write some nodejs code this time and I'm going to give it the MIT license and let's create this repository so with that the repository is now created and now we need a now we need a way to run this repository and of course you can download this repository onto your computer and run it but we are going to run it using Code spaces and I just select the code option here and select code spaces and click create codespace on Main and what this does is GitHub sets up a machine for us on the cloud where it pulls the contents of this repository and opens up a visual studio code interface for us to interact with the repository which is to write code and run the code test things and then we can push these changes back to the GitHub repository okay so that is a GitHub workflow that we have been following for the past few lessons all right let's give that a second to uh start properly now um let us uh so here's what you do to uh start developing on GitHub Cod spaces and now let us start building our web server now web servers are software applications that handle incoming requests from a client and that client could be a web browser or that client could be a mobile application or that client could be a Discord bot slackbot anything any form of a client any anything that requests or needs some information makes a request to a web server and then the web server processes that request and for processing the request it may then contact a database it may contact another external service it may do some uh data processing and then it returns that response back to the client all right so there is a request sent from the client some processing happens from the server and the response is sent back to the client so that's basically what a web server is software applications that handle incoming request from web clients and it's a it runs on a computer essentially so web server is running on some computer on the cloud and is handling incoming requests and it responds to these requests by sending back the requested content and that could be web pages images videos data Etc and to communicate with the web server typically you use an HTTP um protocol which is where you often see if you just check the URL of any page it says https or HTTP and that basically means that you using the HTTP your browser is using the HTTP protocol to commun Comm unicate with the web server and web servers can be configured to handle different types of content for example HTML CSS JavaScript PHP python all it just depends on what kind of uh software you want to run on your Cloud computer which is powering the web server and web servers can obviously be used to host web applications for example Jupiter what we are using here is running on a web server Jovian itself runs on a web server Google Instagram Facebook everything runs on a web server now the difference between websites that we've been building today St the difference between websites that we've been building so far called statch websites and web servers is that web servers can deliver Dynamic content from a database or a rest API whereas static sites like index.html the web pages that we were building cannot deliver Dynamic content so today we'll talk about how we can deliver Dynamic content using the express web application framework so let's get uh started with Express um so here's what you need to do to set up a simple hello world project using Express GS step one is to initialize a nodejs project inside a project directory so we are here in this GitHub uh project GitHub repository that is open on codespace and I guess we can just go ahead and use this as our project directory so I'm going to initialize a new nodejs project here and to do that I'm just first going to zoom in a little bit all right so let's zoom in here and I am going to start by typing npm init minus y so let's type npm init minus y and now the you will see here that a project has been initialized and what that really means is a package.json file has been created so you can check here in the sidebar there is a package.json file which contains the name of the project which is auto inferred from the name of the directory it contains a version and a description again both of these are Auto inferred version is set to 1.0 and description is auto inferred from the readme and then we have a then we have a main file so this is not something that has been created yet and this is something that we can potentially change when we want to in fact we can even remove it if you want then we have some scripts here some keywords some author some license these are not important right now these are more important when you are publishing a module to uh the npm registry but for us the key things here are um these and these are some things that we will modify over time all right so now that we've initialized the nodejs project the next step is to install the expressjs web framework and we're going to install the expressjs web framework by simply running npm install Express so I'm going to come in here and once again let me reset things here and I'm going to say and I'm going to say npm install Express now when we click npm when we type npm install Express you can see that a node modules folder is created here and inside these node modules folder Express and all of its transitive dependencies get in installed so you can see here that you have uh you have Express here of course this is the Express framework then there is also a bunch of other Frameworks that have been installed now I do want to mention that the node modules folder will not get added to your GitHub repository when you push these changes back to GitHub because if you check the git ignore file you'll see that node modules is mentioned here uh so basically we don't want to uh send all of these dependency files all their JavaScript code to our GitHub repository because that's going to make our GitHub repository really heavy uh so instead what we do is we simply add that dependency in package.json and that happens when you run npm install so you can see that package.json contains the name of the dependency that you need to install and the version of the dependency and whenever you need whenever somebody someone else need to run your code they can simply get the bare minimum code and then they can run npm install and they can install all the dependencies on their computer and the same can happen when you're trying to deploy this application to the cloud all right so keep that in mind that we don't commit the node node modules server the node modules folder to our GitHub repository because it is ignored in the git ignore okay now you will also see this package log. Json file basically what this contains is all the dependencies that node modules uh that expressjs depends on those are listed here and their versions are listed here so this is to ensure that some of the transitive dependencies don't go out of date and cause problems later so this is to lock the version verions of all the dependencies that you've installed and and their dependencies and their dependencies and so on okay now don't worry if all of that doesn't make sense the only key thing you should keep in mind is when you say npm install and type the name of a package that is going to get added into the package.json file and that can then be used to reinstall that package on any other computer okay now next we are going to create a folder called SRC and we are going to put all our application code inside that all our HTML CSS Javas script Etc and inside the SRC folder we're going to create a new file app.js and inside it we're going to add some content so let's create a folder SRC so I've just created a folder SRC and now let's create a file app.js and now in the app.js file I'm going to say uh let me copy of the first two lines so I'm going to say Express equals require Express this is how we uh pull in the express dependency so this is how we get access to the express Library by saying require Express and then I can create an app an express application a web application simply by calling the express function okay and just like that an app has been created a web server has been created but we're going to do a couple more things as well now the first thing we're going to do is set a basic um set a basic route okay so let me just paste this over and then we'll talk about it here so what we're saying is app.get so we're saying that when the app gets a request and when it gets a request on slash which means when it gets a request on the basic route right by the basic route we mean it's simply let's say this application was deployed on jan.com then when you try to access jan.com that is treated as the slash or the root level route but let's say if you try to access jan.com aashan that would be treated as the SL aashan route okay so if you just try to access the server raw without any sub path to the URL then that is going to get sent to this particular route so whenever you're add whenever you're attaching a route Handler to whenever you're attaching a route for an express application you need to specify a route Handler which is basically just a function that is given the request that has been sent from the client and that is given a response object and it can then use the response object to send the data back to the client okay so the request object is used to get data from the client the data that the client has sent in its request the response object is used to send data back to the client all right so you will see this pattern very commonly in all JavaScript web Frameworks you'll attach a route and the method could be get post Etc we'll talk about that but you'll attach a route and to the application and for that route you will specify a route handling function okay finally we actually need to run the server and the way you run the server is by calling app. listen so once you've created an express application you can say app. listen and basically what this is saying is now the app will start listening for requests now to start listening for requests it needs to specify a port there are many applications that can run on the same computer on the same Hardware so the different applications or different servers can occupy different ports they can listen at different ports all right so that's where so think of it as mailboxes within a building so you specify your mailbox number or your port number so let's see app. listen port and the port is currently just being set to three ,000 but what we also often do is sometimes while running the application a an external Port is specified so when an external Port is specified while running the application that is going to be configured in what's called an environment variable process. env. Port but we uh if that is not specified we just pick the default value of 3,000 okay so for now again don't worry about this line basically what it says is use the port 3000 if no other Port has been specified while running the application okay all right so this app is going to start listening on this port 3000 when we run the project and it is also going to just print something out to the to the console saying that the server is running on such and such URL okay so with that we have set up our very basic web application that is going to take a request and simply return hello world now uh the last thing we need to do is we actually need to configure a command to run this server so one way we could run the server is just go and say node SRC app.js okay that's one way to do it we just go into the terminal and type node SRC app.js but the preferred way to run or configure applications in general is to specify the script that is used to run the server in the package.json file so in package.json you will you will have this scripts object and in this scripts object it is common to just add a start key and in that start key specify what command should be executed to start this application okay and the command of course that we want to execute is node SRC app.js okay so now that we have done that now that we've started now that you have specified a start script in package.json we can say npm Run start okay and when we say npm Run start that is going to do the exact same thing as node SRC app.js why are we doing npm Run start well it's just good convention any nodejs applications that you create it's a good convention to specify the start script so that somebody else who's running the application can does not have to guess what the start script is uh going to be okay so let's just run npm run start and with that the server is running so now the server is running on the visual studio code uh the server is running on the GitHub codes space machine that is somewhere in the cloud and to access that machine we can just click this open and browser button that shows up what it does is that is it takes our request from our browser and forwards it to the port number 3 3,000 of the GitHub Cod spaces machine okay and you can already see here we now have on this port we are simply printing hello world and you can see now that if I just change this to hello Jovian and I kill the server and I restart the server and I reload this page you can see say hello Jovian so just like that we have set up our first basic server so here's what's happening when we type the URL into the browser that URL sends a request to the server and see this URL this is basically just like a simple URL like a simple something. something.com or dodev slash and there's nothing after it and that is why that is going to match with this particular route Handler and this particular route Handler simply says hello Jin now suppose I had said in here SL Akash so if I had something at the end of the URL SL something you can see that it says cannot get slashes it only knows how to get slash and we'll see how to add more of these routes to our servers shortly as well okay so now we've set up our Dev server and one thing I want to mention is instead of running npm Run start because start is such a special common command you can also just say npm start instead of npm Run start and both do the same thing and with that we have set up a web server that shows hello world okay now the next step would be to serve an HTML file now of course we don't just want to return hello world from our server we want to actually return some nice HTML so here's what we'll do we will create a folder Pages inside the SRC folder so I'm going to say SRC I am going to create a new folder Pages all right and now inside Pages I'm going to create a file index.html so now we have an index.html file all right and into this index.html file I'm going to put in some content so I'm just I've just taken some of the content from the from the website that we had created the last time the Jian careers website and I have included it here on this link so I'm just going to copy paste it because we don't want to just uh sit and reimplement the entire page that we had created the last time already okay so now we have put in inside SRC we put in a folder pages and inside Pages we put in the file index.html however this browser has no way to actually access that index.html file this browser can only make a request to the server and the server is only listening on the route slash and on that slash route it is simply returning hello Jovian it is simply sending hello Jovian so instead of sending hello Jovian we need to send the contents of the index.html file all right how do we do that well here is what we can do so we can first include this new utility function called path so we say path equals require require path and this is path is simply a utility to construct full file system paths based on based on relative paths next let us change this one line of code so instead of saying rest. send file instead of saying rest. send hello Jovian so let me comment that out I'm going to say rest. send file path. jooin name Dame is basically just the name of the current directory which is/ SRC soore uncore Dame is a existing variable in nodejs that automatically gets the name of the current directory so we want to take the name of the current directory and to it we want to join Pages index.html all right so we want to get current directory which is the SRC folder SL pages index.html and we want to send that file in the response all right that's all we are doing here so let us hit save again and let us reload the page nothing happens because we have to restart the server so remember this Express what it does is when you start the server it reads the entire Javascript file and then if you make changes you have to restart the server so let's see control let's typ control C control C is used to kill the server or stop the server and then uh so you just go into the terminal press control C and then type npm Run start or npm start again and now if we reload the page you can see now that it actually shows us the job applications page that we had created earlier so it has a header it has this work at Jovian over here and it has this footer over here as well all right we've not added the jobs table and we've not added the application form yet we've just added these parts and you can of course you can study the code inside index.html to make sure that's exactly what we have so yeah we have a head and inside the head we have a title we have some meta tags looks like we have some link tags Joan favicon.png we have some um we have bootstrap we have some fonts and looks like we have a stylesheet styles.css so we might need to add a few more files but then we have a nav bar over here and that is what is uh showing this nav bar then below the nav bar we have this about Jovian section over here all right and then below the about Jovian section we have a footer over here and that's basically what we are showing on the page all right so with that we have just returned some HTML from the server now one very important piece of information I want to point out to you to you here is to understand what is visible on the server and what is visible on the client now all of this code that we are seeing here it is Javascript code but this JavaScript code is not running in your browser this JavaScript code is running on the server so your browser simply makes a request your browser simply sends a request to the server all the JavaScript code inside app.js is executed on the server it picks up the index. h HL file and it sends it back to the browser and now it's in the browser that the index.html file is passed and displayed as a web page okay now what you might also have is that you might also send a Javascript file to the to the browser and then that Javascript file can get executed on the browser on the browser as well okay but that's different from the app.js file the app.js file only runs on the server and I'm stressing this again because this is a common source of vulnerability right so understand that only the result of the execution which is hello world or the HTML file is sent to the browser this should say browser uh is sent to the browser and the rest of the code remains on the server so understanding which part of your project code is executed on the server and which part of your project code is executed on the browser is very important to avoid any security vulnerabilities you do not accidentally want to send some database credentials to the browser because then your user will be able to see your database credentials and they'll be able to access your entire database rather you want to keep them on the server and just send the response that the user needs to them okay so with that we have figured out how to display a HTML file so that's great now uh the next step is to maybe make our workflow a little easier every time we make a change to the index. HTML file we have to manually restart the server and each time uh that requires us to go in press contrl C and then restart the server there's a better way to do this there is this helper Library called nodemon uh which stands for node monitor so I'm just going to say npm install nodemon so that's going to install the node Monon package for us and you can see here that it gets added here to nodemon all right and now I'm going to add another script here called Dev so now in my package or I already have the npm start script which is going to be used when I'm Happ with all the code I don't feel a need to change the code too many times but uh I also want to use another script during development and here I'm just going to say nodemon SRC app.js so the only change we've made between start and Dev is that start has node SRC app.js and dev has nodon SRC app.js what this is going to do is every time the every time there is a change made to any file in the project it is going to restart the server automatically so that we don't have to in and restart the server manually okay so let's now run npm run Dev instead of npm Run start I'm just going to run npm run Dev and now you can see that if I go in here and I change the title of this page for example so the title of this page is Jan careers powered by bootstrap and let me just change it to Jovan careers powered by Express you can see that the server will restart automatically well looks like it did not so that's where you also have to configure what causes the server to restart so we say noon. Json noon. Json that's a new file we put into the root folder of the project and then we say um EXT and then we give it the list of extensions for which nodon should monitor right so let's see nodemon extensions let's just search that format yeah so you can specify it this way you can say um EXT and then you provide a list of extensions so I'm just going to provide a list of extensions here I'm going to say that anytime a JS file or JavaScript file changes restart the server anytime an HTML file changes restart the server anytime a Styles or a CSS file file changes restart the server anytime a PNG or a JPG file changes restart the server so any time any of these files change I want to restart the server and let me just restart nodon itself once again let's see okay I think I might have messed something up here ah I believe it's just uh you do not need it to be an array yeah you just need it like that okay so you provide a list of extensions as a comma separated string and let's now run npm run Dev once again and now you will notice that anytime we change any HTML file CSS file Javascript file it's going to restart the server okay so I'm just going to say powered by Express here and I'll just reload the page and now you see here it says powered by Express all right so that is the benefit of using nodemon it's going to automatically restart the server but you still do have to go to the browser and re reload the page all right um so now we've set up not nodon and we are using npm run Dev for development and when we want to do a final testing or deployment then we can just use npm start okay now the next thing I want to point out is that index.html contains references to files like styles.css Jovian meta PNG and Jovian fave icon.png but so far we have not added any of these so you see we referring to styles.css but there's no styles.css file here and more importantly there will there is no styles. CSS file here so all of these things are executed on the browser all the HTML is run on the browser and when the browser when the browser tries to get styles.css it's going to run into an error so we need to find a way to pass all of these files styles. CSS and PNG and all of these directly as is without any changes to our um browser and that is where we are going to create a folder called Static okay so we are going to create a folder called let me just rename it public actually yeah let's create a folder called public so SRC public and into this I'm going to uh put in all the files that are going to be sent as is without any change to the browser okay and inside the public folder let me put for example styles.css and into the styles.css let me put in some content all right okay I've put in some content into styles. CSS looks like I have one more piece here yeah so all we're doing in this styles.css is maybe configuring the default font body font and config configuring the default blue color and the primary U color on bootstrap so these are all CSS variables we're configuring and then we are also configuring the font family for the headings so we're using the inter font family which we have included within our index.html page from Google fonts and we are also configuring that the a tags or the link tag should not have any underlines so text decoration under line is the default we are setting it to text decoration none okay so that's a styles. CSS file next I have a couple of these files I have this file Jovian fav icon.png and Jovian meta PNG on my computer I'm going to drag them in here and put them both into this public folder as well and you can download these files from these URLs so just go into this URL and right click and save it as Jovian favicon.png and Jovian meta PNG so this is what the Jovian favicon.png looks like it is going to be used to configure the fav icon or the icon in the browser and this is what the Jovian meta image looks like this is simply going to show up when we share that link with somebody else on on social media Etc okay so um all right so now we've added these files styles.css index.html uh styles.css Jovian 51 Jovian meta but nothing seems to have changed even if I try to access SL styles.css I still cannot get it so it's still says cannot get styles.css so what do we do well you actually have to inform Express that there is a certain folder on your in your project from where you want to directly send all the files to the browser you don't want to make any changes to them okay so how do we do that the way to do that is by just adding this one line within Express so we say app.use after creating the app we say app.use and app.use is a very common pattern in Express where any new feature you want to add any what's called middleware in express any new features you want to add you just add them using app.use and here in app.use we're going to use uh we're going to set up a static folder using express. static and we need to give it the exact directory name so all the full or the full path of the directory where this um all these static files are located okay so I'm going to say path. joinor Ford name which is simply getting the name of the current directory SLU so what we're seeing here is take everything that is there in this folder called public and send it to the browser as is when requested okay and now it says the app crashed okay I put in an extra underscore so yeah now the app should have restarted y so now the app is restarted and now if I reload the page watch closely you will notice the fonts change there you go you see the fonts just changed and you can actually see here if I open SL styles.css you can see that now we have this Styles file that is served and if I open slash Jovian _ FV icon.png you can see now the fav icon is getting rendered if I open Jovian cora. PNG you can see that our Meta Meta image is getting rendered as well okay and all of these are linked from index. HTML as well well so that will show up properly too you can see here it shows the nice icon here in the browser tab so that's one other thing I want you to take away anything that you want to directly send out to the uh to the browser then you simply create a folder and put all of those files into a folder and you uh simply configure a static folder within app. use okay now we didn't do this for index.html because we're going to make some changes to index.html show some Dynamic data on that page that is why we want to process it before we send it that is why we didn't put it in the public or static folder okay all right so just keep that in mind static files are served as is by the server and it is generally used for stylesheets scripts images icons that you just want to pass on to the browser directly and you can check out this resource to learn more about static file serving now one last thing we can do is to Simply push our changes back to GitHub and then deploy it to verell so I'm just going to come in here into the git tab of the sidebar and I'm just going to say added basic uh well added Express app index.html and static files I'm going to click commit and that is going to Simply stage and commit all the changes and I'm going to sync this back to GitHub so stage commit and sync threestep process and once this is done we can go in here and you can just reload this page and you can see here that we have this SRC folder we have this package.json you can see package.json has the dependencies express and nodemon and there's no node modules folder because it is ignored in the git ignore and the SRC folder has a Pages folder where it has index. HTML of course it has app and it has this styles. CSS Etc as well okay now let's deploy this so I'm just going to go to wor.com and worell is the platform we typically use for deployment because it's really easy to use that's what jan.com is replied on as well and I'm going to select add new project here and if you haven't connected your GitHub account you can connect it here if you can if you haven't connected all the repositories you can configure your GitHub setting here as well but in this case we're simply going to go into the Sydney Jovian account and import Jovian careers express live and when we import it we can select the framework preset okay now uh there's no framework preset here and because this is just Express there's no framework as such it's just a in fact versel does not have inbuilt support for Express but the root directory is just the directory which contains the package.json file and we can click deploy now hopefully what this should do is it should look into the package.json file and it should deploy and let's see if that happens okay so looks like the deployment is complete but if we try to access it it says 404 not found and this is because verel needs things to be configured in a certain way versal needs to be told what is the root file that we need to access versal needs to be told what are uh the different ways in which different routes need to be handled so there is one special piece of code that you need to add when you're deploying an express application to worel okay and again this is not something that you know by default this is just something that you would normally Google and figure out but you need to add a file called verel Json that informs verel a few things one it tells verel that s rc/ app.js is the key is the main file that it needs to build the for for which it needs to install all the dependencies ETC and you also need to tell it that it needs to use the nodejs environment so what supports a bunch of different runtime environments and we just informing here that we want the nodejs environment and finally so this points to the main file of the server this points to the uh the use points to the environment all of this goes into builds and finally you also need to configure we want what we want to do is all the routes and no matter what route we try to access we want them all to be sent to app.js and we want app.js to handle the routing and not verel itself so that is again something that is configured and again don't worry if this seems confusing whenever you are deploying an expressjs application to verel you simply copy paste this um or find it online Okay so let's go back here and let me go in here and create a worel Json file so new file verel do Json and in this file I'm just going to put in this code version two builds routes um just standard code for configuring versal to run with Express and I'm just going to say add worel do Json and let me click commit and sync it and that should now get sent up to the server and now let us go back into our versal dashboard let's go back into Jovan careers express live and delete this project and and just create a new one with the worsal Json file so sometimes what happens is if you change the worel Json file you may have to just uh recreate the project so I'm just going to delete this project and you can delete the project from the project settings and let's check the worel do Json file so the worel do Json file looks fine to me and now let's come back into verel and create a new project so now once again I'm going into new project I'm set i'm selecting the Jovian careers express live project which has the ver. Json file already uh no framework preset and the root directory is just the do slash which is the root of the entire directory because that's where the package.json and other files are present and I'm just going to click deploy okay and hopefully this time it should pick up the settings from the ver. Json file yeah looks like you have a versal Json file so it's going to pick up the settings properly and let's see if it's going to do that deployment this time and it does perfect so our application or our web web server is now deployed to verel and it is now scalable so our Cod space machine can shut down anytime and it cannot scale but verel will automatically scale things depending on the traffic and it will automatically redeploy whenever you push to the main branch so that's it so now we have a basic deployment ready as well and now we ready to start maybe rendering some data dynamically into that page maybe let's see if we have any questions at this point already okay the there's a comment here server is a special computer to deal with traffic that's right yep that's a good way to look at it what's the difference between using static. apppp and using Express so in static. apppp all it does is it takes the files that you have and it gives them to the browser when requested in Express we can write some custom Logic for example uh fetching data from a database sending an email handling form submissions and all of that okay so I hope that answers that what is the difference between flask and express well flask is a python web framework Express is a JavaScript web framework they do the same thing they are both the smallest possible Frameworks essentially in each of those languages um but that's basically it what are Dynamic contents so anything any data that is for example fetched from a database for example if you go to my Jovian profile each time you open it you'll see something different because I may have worked on New notebooks in the meantime now obviously I'm not creating an index.html file and putting it up each time I create a new notebook this data is going to be fetched from the browser from a database and that HTML file is going to be created on the fly when you try to request it okay what was minus y doing here so when I said npm init minus y I will let you search that online all it does is well it makes our work a little easier otherwise npm minute is going to ask you for the package name etc etc okay what is a route well a route is simply a path on the page so for example if you have um for example if you have jan.com aashan that's a route right so SL aashan is so join.com here is the domain and SL aashan is the path or the route which is where within this server do you want to go or SL Akash notebooks which is what you see here that is another route or SL Akash or SL Sydney Express web application that is another route or SL learn SL courses that is another route or SL learn SL full stack developer boot cam that's another so these are all the sub paaths that you can have present in your application and uh we've just looked at the root route which is where there is no subpath which is just jan.com or wherever or in this case it is deployed at Jovian careers yeah in this case it is deployed at Jovian careers live. W.A so that is what we've looked at so far but we look at some sub routes as well uh shortly okay what is a port well as I gave the mailbox analogy let's say in a building you have a bunch of people living and every everyone needs to get their mail delivered so that's where there's a mailbox and the mail for each person comes into the respective mailbox in the same way when an application is running when a server is starting on a particular computer and there are many servers all the time running on your computer internal processes that you may not be familiar with each of them can can put their claim on a port and all the requests messages sent to that Port are going to get delivered to that server so that is something the operating system provides if we deploy to the cloud do we have a different port and how does it work yeah so when we deploy to the cloud what happens is worel or whichever Cloud framework we are using it automatically puts in a variable called Port process. env. Port so it automatically supplies a port number and ideally your application should have the ability to read that port number from the environment variable that is being provided by the cloud infrastructure platform so that it can run on that Port okay okay where can we read these good conventions any resource well these are all just things that you will almost always end up doing so what we're doing right now is just the only way to do it uh you just have to go through the process of building an application and you kind of learn all these conventions along the way it's hard to go wrong you can just search these online how do I do this or that okay why do we do it this way why do we have a request why do we have a client and a server so the client let's say you have an application like Jovian which has the data of 300,000 users now when we have the data of 300,000 users and you you open join.com on your computer I don't want you to be able to access the data of access the private data of all 300,000 users that is why your in your browser I simply give your browser the ability to contact my server and then when the when your browser sends a request to my server I have a way to validate okay this came from this particular user and then I can ensure on my server that I can contact the database and only return the data that is um that makes sense for you okay but if I simply open up my entire database then anybody would be able to access anything and that's why we put a server in between to do this okay what is durame well uh as I mentioned underscore uncore Dame is going to simp when you use it within a particular JavaScript or nodejs file it is simply going to get the uh directory which contains that file and we have just used it to get the full path for the pages index.html and for the public directory what is colon root pointing to yeah so in our styles.css this is something we covered the last time in our styles. CSS file colon root simply is a way to define some Global CSS variables all right and it's it's Global not just within this file but across all files so because we want to override some CSS variables that have been defined in bootstrap that is why col rot is going to take whatever Global CSS variable is there and it's going going to rewrite the variable with this name with this value okay so this is how you overwrite the CSS variable if we are creating a web server using Express then what are Apache web server or enginex or Tomcat okay I will not get into those right now I will encourage you to ask chat GPT or jobot this question uh is there an app. delete app. put yes so we'll talk about HTTP methods so you have all of these app.get is just the simplest way where you simply get it's just one of the HTTP methods that is used why is there no Express framework preset inv versal yeah it for some reason they don't have it I'm I guess they should they should probably have added it at some point but they decided not to okay please add the questions in the chat as well when recordings are posted okay we'll try to do that are all these routes basically different folders in the server in the source code okay not exactly so conceptually yes as a browser or as a user I can think of folders I can think of them as folders on the server however if let's say we have zin.com Akash join.com sidhant shin.com somebody else if we create ended up creating folders on our server for every single person then we would end up with a lot of folders and we would run out of server space what we do instead is we put all the data in a database which is optimized for storing large amounts of data and then our routes are configured in such a way that given whatever route we get they can figure out how to fetch the right data from the server and we're going to take a look at that shortly okay next question difference between HTTP and https so HTTP traffic is not encrypted which means if somebody is uh can track the packets going uh going through your network so basically somebody who can kind of listen into your WiFi router or maybe even your WiFi router company or maybe your internet service provider everybody can see exactly what you're sending the full contents the the email that you're sending or the password that you're sending whatever whatever it is but https means that the client and the server they have initially done some kind of an encryption handshake and the client encrypts the data sends it to the server and when the send server sends back the response it encrypts to the data sends it to the client in the client being the browser in between your internet service provider or somebody just listening into your WiFi will not be able to see what's going on and now most websites just work on https so moving right ahead let us now send some Dynamic data and add it into the index.html page now of course we are not going to talk about databases just yet but we're going to simulate databases in a certain way essentially um so here's what we're going to do we're going to create a file called jobs. JS so I'm going to create a file here called jobs. JS okay and in this jobs. JS file I'm going to put in some data let me take in all this data over here and this is simply a list of jobs so cons jobs equals uh this is our first job object which has an id1 title frontend developer location bangaluru salary 12 lakhs um posted on March 3rd 2023 similarly there's a second job third job so we've taken a Json array an array of Json objects and put that into this variable called jobs and uh we are going to just export this as the default export from this module okay so jobs. JS is this into which we have put in a bunch of jobs now um we can actually import these jobs here so we can say const jobs equals require do/ jobs okay and I can also just console.log jobs and you can see that when we import this from require do/ jobs we get all of this data here and we can now use it in our server and we can even send it to the browser however we want okay now of course right now we are getting this from a file but in a real world scenario you would be getting this from a database which is something that we'll look at in a future course okay the next thing is to actually put these jobs into the index.html file so now what we're going to do is turn this index. HML file into a template and we're going to turn it into a template us using a template rendering system called mustache and I'll talk about what mustache is in just a second but here's what we need to do the first thing we need to do is install this mustache Express package so I'm just going to go in into the terminal and I'm just going to stop this server for now and I'm just going to say npm install mustache Express okay so mustache is the templating uh the the template engine that we are going to use and mustache Express is the connector that that allows you to connect mustache to allow Express to mustache okay so that was step one the next thing we need to do is to convert our index.html file which is an HTML file into an index. mustache file or a mustache template okay and here's what what we're going to do so I'm just going to go into my index.html file and I'm simply going to rename this file so I'm just going to rename this file to index do mustache okay all right so far so good we've not really changed anything we've just installed a package renamed a file what difference does that make now um we'll add some of this later now I'm going to come into my app file my app server and I'm going to incorporate the mustache template rendering engine into my Express server so first thing I'm going to do is go into app.js and just require mustache Express and get this mustache Express object okay so now I have this mustache Express object over here and in this object uh this object now contains the mustach template rendering engine now I need to add it into my app Express app and the way we add it is like this so first we have to set a bunch of views within our application so what we say is that the views or the templates or wherever whatever contains the markup or the HTML is all present inside this folder called pages okay so what we're saying is um let's actually just make that nicer here so what we're saying is app do set views to path. join underscore uncore durame Pages all right so we are saying that inside the pages folder I have a bunch of views or I have a bunch of templates that I can use uh that's the first thing second thing we need to say is that we need to set the view engine okay whenever you hear view think of it as template these are all just words for the same thing um so now we say app. set view engine to mustache Okay so we've set a directory that contains our templates or our views then we set a view engine and that engine has the name mustache and finally for that engine we need to provide the Handler function okay and the Handler function is simply coming from mustache Express all right so uh three things we need to set anytime you're adding some form of templates to render some form of dynamic data and all of this will become clear when you actually see this in action you need to set the views so the views we are simply setting to the pages folder you need to set the view engine and the view engine we are simply setting uh to mustache and the actual engine that we using for the engine name mustache is called mustache Express all right so this is just something that you'll have to drop into any Express applications whenever you're adding some some templating U engine to it and there are a bunch of other templating engines as well like pug ejs Etc mustache is just the easiest one to work with really simple to understand all right so so far we have installed mustach Express set it as the view engine and we've said that all our templates or mustache files are inside the pages folder okay now the next thing we can do is we can go in and render that template so here's what we can do instead of saying rest. send file which is what we were saying earlier we can say rest. render and in while we're rendering we need to give it the name of the view that we want to render so we are saying that we want to render The View index and we want to send this data into the that view to populate the uh to populate that view okay again these words will soon make sense but basically now you can understand that okay index simply refers to the index. mustach file and that index. mustach file is going to be located in the folder that has been configured for views and the folder folder is called Pages all right so we have this Pages folder index. mustach so so this is simply going to pick up the index. mustache file and it's going to give this additional data which is a dictionary containing the key jobs which points to the list of jobs that we have and that additional data can now be used within our index. mustach template okay so let's come back and actually use this now we have in this page we have this about section and then we have this footer just below the about about section and above the footer I'm going to add a new section called jobs so here's what I'm going to do I am going to first add this div called jobs job opportunities okay so so far there's nothing new we've done we've simply added this job opportunities div and there we have it okay so now we've simply added a simple div which says job opportunities nothing fancy going on here but then we want to now add the job list so let's add this jobs list so this is going to show up only on mobile so I'm just going to reduce the width over here as well so that it shows up properly so this is going to be our jobs list and let's add the SL div over here okay now inside this jobs list I'm going to do something very interesting I'm not going to type out all the jobs one by one but instead remember that my template is being rendered with this data so I have access to a variable called jobs which points to a list of jobs okay so so I can take that list of uh I can take that variable which is a list and I can Loop over that variable like this I can say hash jobs SL jobs so what this is doing is this is basically creating a for Loop and inside this for loop I can put in this content like that okay so let's see what is happening here we have it we had an index. HTML file we just renamed it to index. mustach inside it we added this new div called jobs list inside this jobs list we use this special syntax called bracket bracket and that's why these are called the mustaches or the curly braces that's why the library is called mustache and then we said that okay we want to look for this object or this key called jobs and whatever is there in that key if that is a list we want to Loop over that list and that is where we use this hash character this hash basically means we want to Loop over something and this slash simply means we are we are at the end of the loop and then in each Loop so remember our jobs. JS file our jobs. JS file contains a list of jobs so in each Loop we have access to the job and now what we can do here is we can use a particular key or a particular a particular key from the object for example we have the key title we have the key location we have the key salary we have the key um we have the key posted so all of those can now be accessed within this Loop okay so now bracket bracket title bracket bracket ET is going to get the value for the first element in the first Loop in the second loop it's going to get the value for the for the title from the second element then it's going to get the title from the third element and so on so because there are four jobs listed here four of these divs will be rendered div div div div and in each of these four divs the data from that corresponding job will be picked up and what data are we picking up we are picking up the title we are picking up the location we are picking up the salary and we are picking up the poster okay so wherever you see bracket bracket that is going to get replaced with some actual data and finally uh we are also picking up the job ID and using that we're creating a link okay let me save that and again I encourage you to just run this yourself and see if you can make sense of this and let us yeah and now you can see here now we have job opportunities frontend developer full stack developer data scientist machine learning engineer all right so again think about what happened what we did was we installed the mustach Express package we then imported it we configured it as the default view engine for Express and we configured the default view directory as the pages folder then in the slash route we are simply rendering the index mustache file or the index mustach template into that template we are passing a dictionary in that dictionary we have a key called jobs which is a list of jobs now whenever you have a list you can use it within that mustache template like this to Loop over that list and whatever you put inside the hash and slash that is going to be applied to each element of the list okay so each element is going to be one job or one job object from that one job object we want to insert into our HTML the title the location the salary so that's why this title gets inserted the location gets inserted the salary gets inserted the posted gets inserted and all of this gets looped four times for each of the jobs that we have okay so here this data came from a file but this data could instead have come from a browser or from a database or could have come from a third party Source like Twitter or something like that if you're using the Twitter API or something okay so think about this but this is basically what mustach or any templating engine is used for to insert data into an HTML template and fill it out and create a proper HTML page out of it now if you just right click here and click inspect you will not be able to see this template over here what you will see instead is that we have this jobs list and in this jobs list we have these four jobs these four cards and in these four cards we have each of these particular data for each of these particular job roles okay so the so this template combined with the code that is running over here is going to generate the HTML and only the HTML the final HTML sent to the browser uh and that is how things work okay now if you can wrap wrap your head around this and you may need to just rewatch this a couple of times to get it then you've basically understood what most web servers do they take some data from a database put that into a template using some kind of a templating engine and then they just send that data back to the client okay so that was the jobs list but why don't we also do the jobs table so let me just grab the jobs table as well oops yeah let's grab the let's grab the jobs table as well so I am going to zoom out here a little bit grab this entire jobs table like that and let's put that right below our jobs list so that's our jobs table let me just give that a tab and all right and now you can see that on mobile I still have the jobs list yeah on mobile I still have the jobs list but on the desktop I have the jobs table okay jobs list on mobile jobs table on desktop how did we create the table again we created a normal table with the table TR and it had a th job title location salary Etc but once again we use the same jobs variable and now using the jobs variable we now created the title we created the location we created the salary and posted at and we this time we created not a card but we created a table row and four of these get rows get created and each of them is going to have the appropriate information okay so just understanding this templating syntax can sometimes be a bit tricky at the beginning but once you get it it becomes second nature and mustache is actually really simple to understand so with that we have rendered the mustache template you can see here we say rest. render we've given it we've given it the name of the template index. mustache and a list of parameters that we wanted to pass in okay now of course uh if we wanted we could also pass in more parameters for example I could pass in a parameter called company name and I could pass that in as let's say Google for Just For example then in my index. mustach I could come in here right at the top where I have my H1 where is that yeah so I have I have my H1 and here instead of saying work at Jovian uh I could maybe have just done work at company name all right and if I had done that work at company name you would see that now it would say work at Google so you can pass not just one parameter but you can pass any number of parameters you want and now I change this back to Jovan and it says work at Jovan and you can modify any part of your template as you want you can modify something inside the class inside the tag name whatever you want templates are very flexible but also they can also be a little tricky to work with for the same reason all right so now the job now the page shows a job table or list on the appropriate device so now it says work at Jovian and now we have the job opportunities table one thing I want to mention is we have also added links to these taable so what happens is when you click this link it goes to this uh if you if you see here at the end of the URL it goes to SL job SL1 or two or three or four based on the job ID it's going to go to a different route so the next step for us is going to be Implement that route page implement ment the individual job Pages for each of the jobs and we'll see how to do that in a dynamic fashion once again without having to create four separate pages because you could have 100 jobs or you could have 50 jobs so you do not want to create U hardcode the number of jobs you have or create a bunch of routes uh anticipating how many jobs you'll have you should just be able to handle any number of jobs okay so that is our second step and I would encourage you to maybe check out the mustache manual to learn how the mustache templating engine works it's actually really simple all it does is given some text like this it could be HTML CSS whatever it and given a bunch of these uh template tags name value in and slash in or whatever it can take this data and it can just simply uh fill that data into this template okay now the next step for us is to create a page for each job add the URL SL jobjob ID okay and for this we we are going to again follow a twostep process first we're going to create a template for that particular job so I've already again put together some content so I'm just going to create another template called job. mustache so in the pages file I'm going to go in the pages folder I'm going to create job. M job. mustache and let's close everything else and let's paste in here the job. mustache file and what does it contain well let me just change this formatting to HTML yeah so what does this contain this contains again a bunch a head basically a bunch of meta tags Etc then it contains a body in the body it contains the nav bar so it's the exact same Navar that we have in index. HTML but then it contains an application form okay so it contains an application form and here it says there is an H1 that says that it is going it is going to say apply job. title so you can already guess here that it expects to maybe get a variable called job which has a title field inside it or a title key inside it similarly it expects to get the variable or input job which contains a location and a salary and a posted information and also it's going to uh create this form and the form Action Now is also going to be something different we'll come and touch on this later but then it renders this form over here this uh application form and then it renders the footer below it okay there's no yeah there is a footer here as well okay so we have you can already visualize that this is going to render the same page but instead of the about section and instead of the table it's simply going to show an application form with a title on it okay but how do we actually show this page when you try to access a job that's where we now need to add a new route so here's the route that we're going to add we are going to go back into app.js and now we're going to create a new route this time we're going to say app.get slj jobs colon ID and in this case or the and you see here we've not put in a particular job ID we could have put in SL one SL2 sl3 sl4 but we have created a more generic route and this is called a route parameter we've created a more generic route that can handle anything after SL job so it can handle SL job1 SL job SL2 sl99 slob hello slobby slob gooogle it could handle anything but of course we want to maybe do some filtering and ensure that it's actually a number a job ID okay so what we do then in our route Handler function is uh we get the ID so whatever is indicated using a colon at the beginning you can access its value in request. params okay you can always just go in here and also do console.log rec. params and that's going to print rec. params okay and by the way this console log is not going to show up on the browser this is actually going to show up on our terminal down in the server over here oops yeah this is all this is going to show up in the terminal down in the server over here so if I just run the page once again and open that and if I actually try to open that particular page that uh that particular route then it is going to show up here in the server it's not going to show up on the browser so remember what is executed on the server and what's on the browser all right so we get the ID uh that is present in the route parameter and then we try to find so we are using the find method of an array all it does is given a condition or given a function it finds that job uh that element which matches that condition so we saying jobs. find given a job the job. id. twring so we've done two string here because the IDS here are numbers so what we're saying is in the jobs list find the job whose ID when converted to string matches the ID that we got from the URL so from the URL we get an ID and we search for the job matching that ID in the job table and that gives us the match job and let us also log the Matched job so console.log matched job and let's log match job okay and finally we are saying rest. render job so we we are rendering the template job. mustach this time which is present in the pages folder which is configured as the views uh for our Express so we are rendering the job. mustach template and we rendering it with the data job where the key job or the variable job job will have the value of mash job okay so let's just run this let's see it in action and things will become clearer let me click on front end developer over here yeah let's click on front end developer and you can see now magically we have navigated to/ job1 because that is something that we configured in our index.js template we've navigated to/ job1 so that automatically gets caught by this uh route Handler and when it gets this ID you can see that the ID it printed here is one and you can see that it's a string so by default all route parameters are strings and then we Tred to search for that ID within the jobs array and we got back a match job and this was the match job it had the ID one Title front end developer location bangaluru India salary Etc and then we put that into the um into the template like this and in the template job. mustache we actually using it to render things so we are using it to render the job title which is showing up here after apply we are using it to render the job location job salary and posted on which is all showing up here all right and the application form is generic there is no change here so that's I think that's pretty neat now we can go back and like let me open full stack developer and now it says apply full stack developer and there's a different salary and location let me open data scientist now it says something different and let me open machine learning engineer and now it says something different all right so that way with just one route we have handled four jobs but not just four jobs potentially hundreds of thousands of jobs on Jovian for example we have hundreds of thousands of notebooks that people have created but there is only one route that is serving every notebook right and that is the benefit of having web servers and web applications that can do all this kind of dynamic stuff okay so let me get rid of these console. logs and now uh we are ready to move forward because now we've created the single individual job page so the next step for us is going to actually support submitting the application so if you see here if I click on a job Ro and I fill out the application let's say I fill out John do and I fill out the email address John do.com and I fill out a phone number and let me fill out a date of birth here let me fill out a cover letter and agree to the terms and conditions click submit application so now what happens when we click submit applications is in the form we have specified a certain action so and we have specified a certain method so all of this data is going to be posted uh so there are two ways two methods we can specify one is get one is post and I'll talk about the differences as well get simply means that all of the parameters or all of the data that has been filled in into the form will be sent as part of the URL whereas post means that the URL is going to be just this the data that is there in the form is going to be sent as the body of the request okay so every request has a URL and a body and it has something called headers as well which we'll talk about later but a URL and a body get is going to just put everything in the URL your url is going to become really long with your cover letter and name and email and everything which is something we may want to avoid especially if you can if you have these text Fields with a lot of content so that's where we use post so in post this is we simply going to send this data to this particular URL SL jobs SL particular job id/ apply on the server but we're going to include all the data in the request body and let me click submit application and it says cannot post slj jobs / one/ apply well that is because in our web server currently we can only we have only handled the slash route and we have only handled the SL job /id route well we could try to handle like this we could say app.get SL jobs slon id/ apply and we could say something along the lines of Rec res um and let's say let's simply send rest. send got the application let's see if that works so let me go back here and let me click submit application it still says cannot post that is because here I listening for the get HTTP method so if I was sending the data using the get method like this then it would work so if I click Send I'd have to reload the page yeah so if I just put in something here a b.com and something here and something here and something here and I click submit application now it says got the application so when I send with the method get and I have a listener with the method get it gets the data but where is the data all of that data is here right here you can see it's part of the URL it's all part of the URL phone equals such and such email equal such and.com U and name equals such and suchar and this is not a good idea for long longer forms for short forms it's okay but for long forms it's not good but on the other hand what we want to do is we actually want to send it with the method post and we want to listen to it with the method post as well okay so this time when I reload this and let me fill that in again John do a date and something and submit okay do at e.com and submit this time you can see that we actually listened so every request and hence every route has two things it of course has the route path which is going to match the specific route depending on the parameters and it has a method so we need to to accept form submissions which are sent using the post method we need a route that can uh that is declared using the post method okay and now here we will be able to get some things out from the request uh all the all the form elements that have been sent and then maybe do something with them maybe send an email send them to a database Etc so uh there's a comment here well a lot of things make sense now yep y so this all fits together is we have to go about it see the whole thing to actually understand and um this was I was going to say this is so much easier it is such a hazle typing table rows one at a time exactly so you almost never type out the data by yourself you almost always get it from a database and you just use some kind of a templating engine to just generate all that HTML for you okay what is the small tag well it simply makes the text a little smaller that's all okay when do we learn to get data from the database in a future course are you also using Express for the Jovian website no so we're actually using another framework called nextjs which is what is part of the next course because we use a UI Library called react and nextjs plays better with react a lot of people use express it's part of this um you might have heard the mean stack which is the mongodb express angularjs and um angular and nodejs stack I believe or something like that and similarly there is a M Stack which is the mongod express reactant Nots yeah so yeah there are a bunch of these Stacks but U there's also some Frameworks that are specific to specific UI libraries for example nextjs which is what we use which is what we're going to cover okay then we were using flask and later using something yeah so we're also using flask for us somehow for some reason we because we've migrated to things over time we started out with python as our backend and or JavaScript as a front end and that's why we still using both flask and nextjs okay yeah so so we are planning to use react we are already using react Nexis we just haven't migrated to it fully how can you make the web app remember what you input you cannot it's just that when you go back and forth in a browser uh the browser retains the history of the page uh so that's all I was just using that normally a web app will not remember what you inputed what other Dynamic content can we use this framework for well you can create a blog post all of Jovian could have been built like this there was no problem with it okay is Java lets us do multithreading and jospt script allows for asynchronous programming but it is still single threaded yeah so this is some more advanced concepts I will not really address this but I'll answer your questions say if I want to handle multiple concurrent request I think a Java backend would do better than a JavaScript well not necessarily because what you could do is you could run multiple JavaScript processes so what you do is Ja JavaScript itself is single threaded but what you can do is you can run five JavaScript processes and all of them can asynchronously handle a lot of uh load for you or you could just use a bunch of servers um that said a Java backend would be better if you have to do a lot of processing on the server typically if you simply have to call a database and then return the result maybe just format it in a certain way fill out a template nodejs is going to be as fast as you can get more or less because it has that asynchronicity it's very easy to write asynchronous code with it um but if you have to do a lot of processing then you might run into issues where if you have like one second of processing where you have to process maybe 10,000 rows of data or something in that case you might want to use Java or something okay and if for those of you who have no idea what we just talked about don't worry about it it doesn't matter okay my end goal is to build a web app like Jovian uh by the end of the program that is going to be a final project to build something like uh something along the lines of Jovian uh a proper web application with a user login with a database with uh proper framework a UI framework etc etc so let's continue on now uh so far we have created this individual job pages so obviously we have the main page which contains the list of job opportunities either as a table or as this nice list of cards and when we open up a particular page we have a dedicated application page for each role frontend developer along with some information along with a bunch of uh inputs and when we click submit application so we have a submit application button over here right now that doesn't work so if I just put in John do and I put in something like that and put in a date of birth here or something and finally put in a cover letter and agree to the terms and conditions it does work but it doesn't really do anything right now uh it simply says got the application but it's not doing anything with it okay so now the next step for us is to actually fill out the application um or is to actually maybe do something with the application data so I'm just going to delete this right now um and that is going to ensure that this doesn't do anything like that so we we're now going to fix that okay so let's now add another page that can accept form submissions and send the application over email and then send send an acknowledgement show an acknowledgement page to the viewer so for this I'm going to need three packages I'm going to need a package package called node mailer which is going to be used to send an email so what I want to do is I want to just inform myself like I'm the creator of the site I'm the CEO of Jovian and I've put up this job site and I want to just send an email to myself whenever somebody submits a job application okay I don't want to give away my email publicly so that not everybody can contact me I want them to fill out the form on this site but I don't want to store that in a database anywhere right now that's too much work I'll just send that data to myself as an email okay and maybe I could also CC the person who uh who applied just so that they know as well but in any case now for that we're going to use the node mailer package number one second we are going to use a package called EnV now the EnV package is useful when you do not want to put sensitive information like your email password in the code remember we going to put up all the code for this particular email um for this particular um project on GitHub uh in public or sometimes even even in private and we may not want to put our password there because then our password will will just be present there on GitHub for everybody else to see so that's where there's a way to securely read some of these things using environment variables for which we use the end package and finally um the request body that is being sent when we are posting the form data that that body is going to need to be passed in some way and for that we need to use this body parser package okay and you'll see all of them in action shortly so let's come back in here let me shut down the server for a second and let me now just install these packages nod mailer Dov and body parser okay all the packages are installed now I can restart the server npm run Dev and let's close this for now next let us create a file called EnV at the root of the repository so I'm going to create a file over here called EnV into which I'm going to put in my email and password password credentials so let's put in a folder EnV in the root of the repository and into this I'm going to put in these two things of course what I'm going to put in here is the actual email and the actual password that I want to send the data to um obviously I don't want to show you that information so what you will have to do is you will have to replace this with your email and your password and I would suggest not using your primary email uh just to be careful what you can do is you can go to gmx.com this is a website where you can create a free email and on gmx.com you can just create an a throwaway email and just use that and its password okay and that's what I'll be using as well so I'm just going to go in into another desktop over here and I'm going to close it over close it here but I'm going to put in my email ID which I have created for this tutorial and password okay and I've done that so I'm not going to show you my enem file again if I open it you'll be able to see my email and password so I I I won't show it but it's there now the other thing I want to mention is the EnV file is already ignored in the dog ignore file so which means when I do a git commit and send it to GitHub then this data is not going to be sent it is going to remain securely on my code spaces machine which is just private for me and it's not going to be sent to the GitHub repository which is public for everyone to see or if it was private and my coworkers would be able to see which is again undesirable okay but now that we have put the uh information in this v file we need a way to actually load this information into our app how do we load this information into our app we do it by saying this require. env. config so the first line require. env. config is going to read the EnV files that are present in our project folders and it is going to then read each of those and then automatically add them to the process.env variable okay so remember we had this process EnV variable so now instead of apart from Port it can also get a bunch of other things that we have defined so let me just put this right here at the top EnV and now here we have the we've also included the node mailer package and we've also included the body parser package okay all right next step is to also configure our application to use the body parser so remember when we send the data from this form we are posting it which means we are not sending the data in the URL we which means we are actually um sending it in the body of the request and that body of the request needs to be passed in a special way so right below app do uh Express right below my app creation logic I'm simply going to say app.use body passer. URL encoded extended false now don't worry about all all of this right now if you just search online how to add body parser to express you'll get the line of code that you need to add and you can look up what exactly extended does okay but the basic ideas is and by and just one General tip I want to give you here is from this point on you will see a lot of code which we are using uh which we will not exactly describe perfectly and the idea is that you have to kind of look it up online maybe use chat GPT jobard Google and understand what it means because there are so many libraries so many Frameworks so many U options in each of them that it doesn't really make sense to cover all of them it's something that you should just look up uh and try to figure out as you need it okay so now we add body part we've added this middleware essentially to our application to which is going to parse the request body and now uh one other thing we need before we actually start processing the request we are going to create a transporter we going to create a transporter which is going to have the configuration required to connect with the mail server and send the email okay so I'm let me create this transporter over here so I'm going to say node node mail create transport and this transport uh is basically it needs it needs a host the host is mail. gmx.com so depending on which email provider you're using you'll have to look up their SMTP host so just search for SMTP host for your email provider and you also need to look up their SMTP Port all right and then finally you Al secure true is almost always said secure true means you're using https the secure version of the transport and finally you need to provide authentication and in the authentication you need to provide the username and the password as the user and pass keys of course I'm not going to type in my username and password here rather if since I've already put something into the EnV file and I've read that using the require n um line of code over here so this is automatically going to get populated with my email ID and this is automatically going to get populated with my email password so now we have this transporter and now we can simply say transporter. send and that's going to send whatever email we want to send okay so with that we are finally ready to actually pass all the content so let's just go about this line by line so let me come in here first and let me just for now simply say console.log requestbody req. body all right let's just do that much very straightforward we're just going to Lo the body over here so let me just open up the terminal this is my terminal over here and let's just click submit application and you can see that when I clicked submit application it simply said um name John John do email whatever Akash jo.com phone number do cover letter Etc so we simply logged the body over here and nothing happened here because we've not sent anything from the server let's just go back yeah yeah what we can also do here is we can we can do right now rest. send application received if we had done that then when I click submit application it's going to log the request body over here you can see it loged the request body over here for us but along with that it also printed application received right but that's not what we want to do we want to actually do something with the application now that we have the request body okay so what next well next up then let let us get so the request body has this name email phone date of birth and cover letter let's get all of that information out from the request body and for that we're going to use this special syntax called destructuring whenever you have a particular object and you want to get the keys out of that object and you know the names of the keys you can put all those keys into specific variables like this so you can say const and then you can open brackets and you can type the names of all the keys that are present in the object or you can pick just some of the keys that are present present in the object and you can say equal to request. body so it's kind of the opposite instead of saying request. body equal to name email Etc now you're saying that from request. body extract the name and put it into a variable called name extract the email put it into variable email and just do that and now you can see if we do console.log name now this will just have the name picked out from the request body all right and I can see submit application here yeah if I say submit application you can see it prints the name John deto okay so we now have all this information from the request body into a bunch of variables nice next let us now get the job that we are currently working with so remember we are posting when we're posting we're also specifying the ID of the job in the URL as a route parameter so let's get the request. par. ID that is going to get this uh that is going to get this URL parameter ID and let's get the matching job so let's also print in the matching job so let's log console.log matched job matched job okay and let's also for now just do rest. send received so that is a match job but then let's also maybe log the request body just just for complete clarity okay and let's click submit application once again so now you can see that this was what was sent or submitted by the user so this is obtained from the form that the User submitted name email phone number date of birth cover letter and this was received this was a match job so that means in the URL we had SL1 if I check the URL over here you can see that we've done SL1 SL apply right so SL1 SL apply and that is get getting picked up as the ID here so and that has been matched or searched within the jobs list which currently comes from a file but could have come from a database and from there we get the title of the job essentially um so now we have all the information we have the information about the job that uh that is being applied to we have the information about the application itself the applicant itself so the next step is to actually construct an email so for constructing an email we create this mail options object all right so all we doing here is into it we are putting a from email now the from email ideally is the same email that whose password you have put in into the transporter so yeah you put in a username and password so the from email should be the same the two email could be whatever you want let's say you've set up this GMX email because you don't want to reveal your credentials or put your password of the primary email the true email could be I could put into the two email I could just put in Akash ANS jan.com something like that or I could also put in I believe I could put in a list as list here as well so let's say I also apart from from sending it to myself I also wanted to send it to the person who has actually emailed me so their email is present now in the email variable I can pick it up from the application and I can email them that the application sent and such and such but for now just to keep things simple I'm going to send it to the same throwaway email that I've created all right I don't want to worry about that but I could send it to whatever email I wanted so keep that in mind from is ideally the same email that you've configured in the transport two can be whatever you want you can put in multiple emails here as well all right then we have a subject we can set and I'm just saying new application for matched job. title so that when I get the email I want to know which job the person is applied for and then you can create some HTML so what you can do is you can create an HTML string and inside that HTML string we have inserted a bunch of these things so this is what is called a JavaScript string um formatting essentially or a template literal where you started with a back code and then you insert into it using a dollar you insert name email Etc okay you can learn about this what you can do is you can also just paste this code on chat GPT or jobard and ask it to explain the code but essentially what we doing is we are creating a simple HTML email with name email phone number date of birth and a cover letter information all right name email phone number date of birth cover letter all of that and that is our mail options so with that our mail options object is ready and finally we can now just simply send that using transporter now we can say transporter. sendmail yeah so now let me get rid of this rest. send and let me paste this in here so now we can simply say transporter. sendmail and I give it the mail options which contains the from to subject and HTML body and then I can give it a Handler so when it tries to send the mail and let's say it succeeds or fails after the mail sending is done it is going to get called uh it is going to call this Handler function that is provided here with whatever error or info was received so if there was an error then we want to Simply log that error we want to print that error here in the server and we want to say error sending email if there was no error then we want to Simply say email sent successfully okay so let's just save that um so now we have all the information I think this position is not required because we're not actually asking for position in the form okay so I'm going to just close this terminal tab here let's take a quick look at this again before we actually run it for when we post some data to/ jobs colon id/ apply then this Handler gets called from the request body we are going to get the name email phone number date of birth and cover letter from the request params do ID which is the URL parameter we are going to get the ID and we going to find the matching job we are then logging both of them to the terminal and then we are creating a male options which contains a from two subject and a body and then we saying transporter. send mail with the mail options and if we receive an error so we need to give it a Handler so what happens is it tries to to send the mail in the background and once the mail sending is done it calls this Handler function so you always have this like call back function that you keep passing to almost everything that you do in JavaScript right this is this is what is meant by asynchronous programming that you're not you're not blocking the main thread you can serve other requests from other clients till the mail is being sent in the background and then whenever the mail sending is done it is going to invoke this function now if there is an error after sending the email then we are going to say rest. status 500 error sending email so what we saying by status is HTTP status codes indicate whether the request was served successfully or not so I would encourage you to just search for HTTP status codes you must have heard of 404 which means that the page or the the URL was not found 200 simply means that the URL was found 500 means that the server encountered an error 400 means bad request means you made some mistake while sending the request and so on right so there are all these HTTP codes that the server uses to inform the client client what went wrong if anything okay and it also sends the message error sending email otherwise it says rest. status 2 200 email sent successfully okay so let's now go back here and let us submit this once again so I'm going to click submit application This Is The Moment of Truth and when we click that it says email sent successfully so I'm just going to go into my GMX account so GMX . and let me just log in over here let's see let me grab my email and password and let me log in and once I am logged in hopefully I should be able to see that new email so it says here new application for front end developer John John do Akash jan.com phone number is such and such date of birth in suchar and such I write code well that seems to be exactly what I had filled out here great now one thing I want to mention though almost every email provider has turned off SMTP by default because it is somewhat insecure and that includes GMX to so what you what you will need to do first is if you're using GMX uh you will need to go into home you will need to go into email settings and under email settings you will need to go into POP 3 and IMAP and under POP 3 and IMAP you will need to enable this setting enable access to this account via POP 3 and IMAP okay so that is just how you enable this SMTP business on um GMX let's see if it's not enabled so let me just show show you what happens if I don't enable it and I try to send it now you'll see that it faces an error in sending the email and what is the error well I can actually look up the the error here so if I just check the terminal and you can see that it says that I got the data I matched the job but invalid login authentication credentials invalid all right but I turn this on again and save it and fill out this capture qdw ZZ ZB and continue and now I try to submit this again let me try a different job this time maybe D scientist and let us put in a date of birth here and let's click submit and this time the email should be sent successfully okay I can come back here and check the email and let's see back to email and you can see there's a new application for data science is Akash he.com such and such and the cover letter simply says I train okay so nice I think with that we've basically implemented what we were looking to implement we have implemented uh the the page here as well now of course this is not how we should show it ideally we should create a nice page saying your application has been received maybe let's try to do that as well let me go in here and let me say create a new mustache template applied. mustache okay and let me go into my job. mustache copy over everything from here into applied. mustache yeah and let me get rid of the form here probably don't need the form and let me simply say in a div your application has been received all right I'll make it look slightly nicer so let's see what can I do here well let me go into index. mustache let me get some styles from my description section just so that it looks slightly nicer okay class lead this looks good so let me get that class lead in here apply. mustache let me give this class container and Lead all right okay so let's try this again I click submit application oh let's also render this template so instead of saying do send I can say do render and I can simply give it the name of the template I want to render and the name is simply applied and now if I click submit application okay just says email send Pro it should probably reload oh sorry I should not render this one I should render in the other case so do render applied that's it and now let's click submit and you can see that the email has been sent and it also says your application has been received and of course I can make a few changes here I can make say text Center and I can say mt5 and I can also say maybe mb5 so that this is slightly nicer uh so let me go back here let me click submit application again yeah I'll have to restart uh something probably oh I see what's happening so we actually want to reload the server even when a mustache file is changed so m t a c e I'm adding this setting inside noon. Json so that whenever I change a mustache file that automatically reloads the server as well so let me make these mt6 and mb6 let me go back and submit application still okay I need to restart noon as well when you change noon. Json you need to restart nodon um or you could just do you could add Json as another file that it watches for as well okay but npm oops let's run it again npm run Dev and let me just fix the spelling here I think there is a small fix it we have three PS here let's do that let's put this in here quotations let's go back and let's click submit application and it says your application has been received okay perfect so with that we have implemented we should have a pro probably a top margin as well it's not showing up just yet um but you can always figure that out small styling changes I'll leave that to you as something to do but with that we've implemented a nice applied page as well that's nice um now we want to actually deploy this so for us to deploy this of course we can go in here and we can say um added templates and dynamic pages and click commit and let's send this so that's going to go to iub and that is going to automatically deploy to verel uh however remember that ourv file is not is not uh going to get committed to the GitHub repository which means if I look back at my GitHub repository over here that is going to contain everything but it's not going to contain the EMV file so when worel picks up all of this code and tries to deploy it to the cloud worel doesn't have my credentials so I need to give versel my credentials let's go back here into the project your Express Careers Live and Let us actually see it in action okay work at Jovian this is all well and good full stack developer all right let me put in some information here aashan a atb.com something like that and let me put that in here cover letter not ready and let me click submit application and we're going to get into this error error sending email obviously because versal doesn't know the email and password that we need to have right so that is where just like you have environment variables in a EnV file for local development veral has a settings tab and inside it you can specify some environment variables okay so here you need to add in a couple of environment variables and I believe I can probably just paste the contents of an environment variable file yeah but I I just want to do that securely so I'm going to go in here and and paste my environment variables so my email ID yeah and I've added them and now I'm going to just save them yeah and now they have been added so they've been added below I've added my email ID I've added my email password and these are stored securely on worell and I can add so the way I basically added this was to say email ID and whatever at whatever.com and I clicked save and that is how these got added okay so now the environment variable my email ID and password have been added into verel and it is going to populate them into process. EnV and that is going to then get picked up but I just need to do one more deployment to actually send it so let me just do redeploy and redeploy it's going to take a second it's going to pick up all the environment variables as well this time and it is going to redeploy this versal it's it's going to redeploy the package or the application and now let's go back in here let's try again okay full stack developer role let's see janeo jan.com like that and let us just fill that out here so I can zoom this in for you but yeah I've simply filled out for the full stack developer I've simply filled out the application and click submit and this time it says your application has been received right we can add some space above it but I guess this is fine I can also then go into gmx.com and let's see let's just reload this page this is a very old email service so you can clearly see that you have to reload things and all but yeah Jan dojo.com phone date of birth cover letter perfect and with that we are more or less done so now we have created our website which anybody can use and this is a website that honestly at this point we can probably deploy as our careers website maybe just change this image to an image of our team maybe just update the uh roles that we have in our in the repository and then deploy it um but the next step here would be maybe adding some sort of a login system maybe storing the data in a database and maybe allowing applications also to be stored in the database and so on so there's a lot you can do here now here are a few exercises for you create a mustache template apply. mustache we've already done this but how about apart from saying your application has been submitted you also show what is all the data that the user has filled out remember you still have you can pass a variable the you can pass the request body maybe as the application data into the template and you can populate the template and show all the data there how what you can try modifying the form submission to include the resume as an attachment to the email so what happens here is you have to use a encryption or an encoding typee called multip part form data and for that you'll have to use not body parser but something called molter okay so multer is a middleware for handling multiart form data in express all right so I'll let you check that out as well here is another thing you can try to do now what might happen is somebody can create a quick script that can open up the page or maybe like some kind of a web scraping script that can open up the page and then just fill out hundreds of applications and then yeah fill out hundreds of applications let me reload that yeah fill out hundreds of applications by simply automating this or clicking the submit button again and again and again and that will lead to hundreds of email over here so we want to avoid that we definitely don't want hundreds of emails and for that what you can do is use some kind of a capture you see that thing where they ask you to select traffic signs and all it's actually very easy to add and U one one capture system that you can use which is actually easier to use than Google's recapture is The Edge capture system okay so what you'll have to do is you'll have to go in and log in here and you'll have to generate some you'll have to put some code into the index.html file or whatever uh HTML you're sending to the browser you'll have to put some code on the server and you will have to um then just verify that it works properly okay now one good way to do some of these things is to maybe just go on uh let's say on jobot so jan.com jobot and you can ask jobot um show me an example of how to add spam protection using H capture in an expressjs application okay and just like that jobot should be able to tell us exactly what we need to do so first you need to install the npm install edge capture package then inside your Express server file you need to um require the hedc capsa hedc capsa package and then what you need to do is a couple of things one um you need to create some capture HTML and send that into your um template and then second you need to maybe verify the capture response using capture. verify from the body you can get this get this Edge capture response and verify it okay and that's it right or you can also look at the documentation so the documentation there is some documentation for expressjs and here you can check its example and it says something about how you do it so there are many ways to do it um just look it up this is a very common use case that people do and this is again a common pattern from now going forward that it is impossible for us to just learn or teach or remember all of the various possible things that you can do from this point on what you need to do is figure out what you need for example I need a capture then search online maybe study the documentation maybe use chart GPT or jobot or look at somebody's blog post understand the code that is there bring that code into your project because that code is never going to be directly copy pastable bring that code into your project test it out and if something goes wrong check the documentation repeat the process again um debug things test it out and uh once it works you're good to go right and with that you now have access to potentially thousands of libraries and thousands of features that you can easily incorporate into your web applications all right so I'll allow you to do that modify the S modify by um yeah prevent spam and automated submissions by adding human verification using Edge capture and use chat gbd or jobot for help so here's what we did today we created uh and ran a web server using the express web framework really simple just a few lines of code we saw how to serve HTML pages and we saw how to serve static files and then we also saw how to serve Dynamic data using templates where we use the mustache templating engine and we filled in jobs data from a list it could could also have come from a database into the template we also saw how to use route parameters to create and serve Dynamic pages so we created a jobwise application page where we showed the job title salary location Etc at the top of the page and the application form and then we also accepted form submissions um on a new route which was a post route where we passed the request body we passed the content from the um form that was submitted and from there we got the emails and by the if you have a doubt how did we get to know that the form had this uh yeah if you have a question how we got to know that the form had has certain Keys um so you have these things here how did we get name email phone number how do we know that these were the actual names of the keys within the form well that is actually present within the form itself so if you check the form for every input we specify the name so name equals name name equals email name equals phone name equals doob and that's exactly what we get here name email phone doob and then there is that last input which is the cover letter name equals cover letter and that's what we get as the variable cover letter okay so we got all the data from the form and then we created this mail and we use node mailer to configure our settings our credentials our credentials of P post our credentials were stored securely in aemv file read in securely using the N library and then we created a transport and from that transport we sent an email and that email was then visible here on our GMX account yeah so maybe I was just uh I got logged out here but yeah that was available on our GMX account so that's how you build a web application right this is the most basic version where we simply using HTML CSS JavaScript we're not using things like react Etc but this is the code the code ideas going to remain the same you have a server some logic happens on the server server can connect to the database server can process request server can handle form data etc etc and then you send some HTML to the client and that along with that HTML you might have some CSS you might have some static files you might actually also have some JavaScript files which get executed only on the client all right so all of that is something that you can do as well now all the code for the tutorial can be found here it's all open for you to see so you can check it out except of course the credentials themselves um this is the starter code and this is the finished code so this is all the finished code that you can look at and this is the finished site that you can check out and check out these resources to learn more at this point you just have to Google things or ask jobot or chat GPT expressjs documentation nodemon mustache body parser HTTP methods node mailer SMTP all of that okay one exercise I would definitely encourage you to try is to modify the form submission code to include the resume as an attachment to the email that'll be a very interesting thing for you to try okay now your objective with this project and with this course really is to be able to build uh an entire website by yourself from scratch so you're going to build a personal website using the tools and techniques that we've covered in this course okay now of course this is not a web design course and design is its own uh entire area that might take several years to perfect uh so that is why I would not recommend trying to design a website from scratch what you can do is check out the figma community over here so this is the figma community if you just go to figma docomomo figma is a design platform web design platform and just search for personal website you should be able to find a bunch of interesting personal website templates that you can use so uh for instance this one looks interesting let's take a look at this and whenever you open up a figma Community project you can actually go in and you can check out what pages they have provided so yeah this is a UI design page and on the UI design page you can see here that uh this person has created two versions so you can use either of these versions okay uh they have a they have a name then they have uh a couple of links and a download savy button and then they have like this hero section after that they have their Social Links after that okay they're talking about some of their services this is where maybe you could talk about your education your work experience um then they have maybe uh some projects that they worked on like this listed here and then they have maybe some blog post so if you have some blog post that you've written on medium or elsewhere you can link those as well and they again they have a fitter with some Social Links right so you do not have to and I want to stress this again you don't have to try to design your own web page I would not recommend doing that because that's not what this is about it's about being able to code your own web page in HTML and CSS uh and make it look good make it responsive use the the tools libraries Frameworks that we have covered in this course here's another example again let's go into this U so here again there seems to be this section over here there is a nav bar and then a bunch of links here so it's not that you will use these exact same links in your project what you're going to do is you're going to replace it with some of the links or some of the items that make sense for you and there's this hero section you can probably put up your own picture here and then there is a bunch of services there's an about section there's a bunch of project sections a bunch of cards here and then just more things here right so it's again you don't have to use all of this you can just use some of this then there's a contact form here as well and so on so I just want to go over some guidelines here so there's no tutorial here as such for this because I want you to just try and do this on your own this is the first openended Endeavor in terms of web development so there's not a lot of stepbystep instructions it's a bit openended for you so go out check check out the figma community check out dribble find a good design that you feel you can Implement then here are some requirements that your website needs to satisfy now of course feel free to do as much as you want feel free to go as deep as you want in and as um Broad in terms of the kind of content you want to incorporate but the the key things that you need to keep in mind is this that your website should contain at least two pages and I would recommend these Pages can be home and contact or if you want to spread them out into multiple pages if you want to have home as one page and then maybe projects as another page or one page per project or something like that you can do that as well or if you want to incorporate a Blog of some kind into your website you can do that as well but for the purpose of this project we require your website to have two pages all right uh not more you can have more than that but at least make sure that you have two not one will not do second the homepage should have at least four sections and by section we mean so and that excludes the have bar so this is one section you can see here this there is this section called um this is generally called the hero section because well this is where you kind of put a put a picture and just say some say something with big text this is just welcoming people then you have maybe uh you can have maybe a work experience section you can have maybe a project section if you don't have a lot of projects you can have maybe an education section or something like that uh and then finally or you can just talk about your career and finally maybe you can have a footer you can have maybe just like uh a a small note about yourself maybe just sharing your uh basic your your life Journey so far or some just something very basic that would be informative for a potential employer so when you go out later down in the boot camp and you go on and apply for a fullstack developer role and you share the link to your website so keep in mind that what do you want people to see when they click on the website link in your resume now what is it that you want to say to them right you want to present you you want to tell your story very briefly just like you do on a LinkedIn profile for instance and you want to present some interesting work and you want to showcase that you have what it takes to build good goodlooking responsive websites okay then the website should contain at least one form and I would recommend this could be a contact form so you can maybe if you have a contact page on the contact page you can have a contact form or you can have a if you if you don't have a contact page you have a different page for something else then you can maybe just create a form for on the homepage itself but make sure that it it has at least one form with maybe at least three or four Fields typically they would be email name uh your your message or something like that and uh I would recommend that as you browse a few of these examples and we have included several examples here start by first creating an a wireframe because that is what we have been doing so far right so follow that procedure of creating a wireframe even if you've picked a design because you're not going to implement a design EX exactly right you are going to change the design or you're going to pick the content that is going to make more sense for you for your website so start by uh just after having selected some design or after having just figured out what you want to show start by first creating a wireframe so that you can figure out what content you want to put on the page right so for instance is if I were creating my personal we my personal website I would maybe let's see so let's say I were creating Akash that is my that would be I would probably get that domain and that is my personal website and here what would I like to put so well I would like to definitely have a nav bar at the top and in the nav bar I would want to mention my name I would want to mention uh maybe like the home link and maybe let's see I would like to mention a contact page link something like that right and then on after the nav bar I would want to to have maybe a quick hero section let me just put in that information here and then we'll draw the wireframe so a hero section and in the hero section I will probably have maybe a photo uh maybe a heading like a big title ha am Akash or something like that and maybe a subtitle let me just call it title and subtitle right something like that so that would be the hero section then maybe I would have an about section in the about section I would uh create a short bio something like hey I'm Akash I'm from such I'm from India I live in Bangalore I do this I do that I've done this in the past Etc thanks for checking out my website feel free to contact me right something like that so uh that would be good then I would probably want to include maybe my uh projects because I think that would be the most interesting thing that I would want to showcase all the interesting things that I've worked on over the years so um I have a bunch of uh like Android apps websites uh courses ET Etc I would mention those um then maybe I would want to let's see I would want to maybe talk a little bit about my um career right so in this I would probably mention my education and I would probably combine education and work experience because I've just had one job fulltime job and after that I've just worked as a consultant and and so on so yeah education work experience Etc uh so I would do that then I would probably just uh have a and here I would put some Social Links I don't have Social Links but I would probably put like some external links so like Jovian uh Jovian links Etc right and maybe I might also have one section here where I might highlight some of my best uh work in terms of videos so like uh add some YouTube videos like that all right so that would be what I would want to put so then what I would do is I would try to create two wire frames I would want try to create one wireframe for mobile and one wire one wireframe for desktop so I would just put it like that maybe and I would say okay this is my desktop wireframe and this is my mobile wireframe all right and then as you can imagine I'm basically going to just put a bunch of boxes here okay so this is going to be my Navar and I can just fill in some information into my Navar and again you can do this on paper I'm just showing this to you here on this tool excal draw.com but you can do this on paper absolutely fine so that would be the nav bar and then I would have a hero section here so I would kind of leave some space for the hero section here is where I would put the title something like hi I'm Akash like that and often when I'm doing this I would even just predraw so I would maybe just do something like that that okay maybe here I want to put like a uh a picture of myself saying hi or something and maybe have like a couple of lines of introduction about myself here I might want to again mention my name here I want to say home contact something like that then I have the about section so that would be something like about me and then I would have maybe a few few lines of text about myself uh I could also maybe put a picture on the side but I think that's fine so then after the about section I would probably then go down and then uh create a project section and that's where it's a good opportunity to use some card maybe so let's see projects and I would probably just put a bunch of cards here uh like that maybe three cards or so and then I would maybe just put a button saying view more and maybe there could be a separate project page that goes in there and uh yeah feel free to get as detailed or as rough as you need but uh the idea is you want to lay out all the content that you want to add here so so that when you are actually implementing you don't really have to think about what content do I want to put here right um then okay we have videos so I would probably put in some videos here so let's see videos again I would probably just embed a couple of YouTube videos here like that and maybe have a line describing what projects what what videos I've done uh and so on and then I would adapt it to the mobile view so in the mobile view of course you would have a slightly different structure maybe you would not you would need like a menu over here instead of an actual buttons so I would probably have that menu button over here I would probably take this hello uh you might also want to take a picture uh a new picture for your personal website it it would be nice but yeah I would probably take this like hello thing and I'd probably just put that here and then the hero text would probably become centered and that would come here like that and then I would have the About Me section I think this would remain as is so you get the idea that you want to have one breakpoint for mobile you want to have one breakpoint uh for tablet and one for desktop but if you want you can just do mobile and desktop wireframing and you you will kind of know that okay this I'm going to get from this so it's so the Styles I'm going to get from here but the content and what I'm going to write here all of that you can actually put into your wireframe I'm not putting it right now because it'll take a while but you can actually put all this into your wireframe or maybe into a Google doc or something uh but the idea is before you even start writing your first line of HTML you are in a position where you already know what's the what the page is going to look like so the biggest mistake that you're going to make and I'll repeat this again is that you start coding right away and then you're thinking okay what should I put in this section and then you as you're trying to put something into the section you realize okay now the design is no longer working or now uh I'm not able to make it responsive so separate the design content and implementation okay um yeah so then once you've created a wireframe then uh create you and once you picked a design for inspiration then create it section by section and the website must be responsive and it should be easily viewable on mobile on tablet and on desktop okay so make sure to test it on real devices and make sure of course you can deploy it to verell you can open it up you can send yourself a link and test it now you can use bootstrap or you can use any other CSS framework you want to build the website if you want you can do it without bootstrap feel free this is an openended project we not forcing you to use bootstrap you don't have to but if you want you can uh use bootstrap that's fine or you want to use some other CSS framework that's perfectly fine too now for the form that you create you can either use form.com to collect the responses using uh and we've covered this in one of the lessons probably I I believe the second lesson or you can set up an Express server uh an Express web server to collect form resp responses so again this is covered in the previous lesson so in the lesson Express web application framework you can see here that we have a section on handling form responses where we basically used uh we created an app. poost link so you can do that as well uh both of these can be deployed to versel equally easily so that's fine you don't have to use express for this you can do a simple HTML and CSS if you want that's perfectly fine but uh yeah as a challenge I would encourage you to maybe try try out using Express that will also help you practice templates and other things then use consistent and aesthetically pleasing colors fonts and Design Elements so one of the things even though we are not focusing on web design too much in this course one of the things we've tried to do is make sure that our websites that we build don't look ugly uh which means that they don't have a very poor or not poor exactly but they do not have a very well they don't have a thoughtless or or or a random choice of colors right the default colors that CSS gives you are not great ideally want to use a color palette and that's where we have looked at things like Tailwind uh Tailwind colors it's a good place for you to pick out yeah tailin color.com so you want to use a color palette you want to have one primary color and you want to use different shades of that primary color if blue is not your thing pick green or pick Rose or pick red but definitely stick to a color palette and similarly fonts as well you want to be consistent with fonts feel free to experiment here feel free to try different fonts but ideally stick to one font for headings and one font for body now that doesn't mean that it has to be inter and Roboto like if I go back here on the figma community you can see that here there's an interesting font that is used for the uh for the header here and that's what's called a what's called a set font and in fact it's not just ter font it has slight slight calligraphic elements as well whereas there is a different set of different font that is actually used for the body text all right and then there's this uppercase font that is used here as well so feel free to experiment you can use two maybe three fonts but make sure that it stays consistent across the page it shouldn't be the case where you use a certain font in the nav bar then you use a certain font in the header or the hero section then you use certain font in the about section please don't do that please uh keep it consistent I hope you've picked that up and similarly with design elements as well like if you want to spray in Design Elements here and there for example here there are these dots that are there um you'll have to figure out how to actually add these Design Elements but for all these Design Elements keep them consistent like this Arrow you see here that arrow is there everywhere or you see this highlight here that highlight is there everywhere as well so um yeah make sure that you are staying consistent in all of of these in terms of the design that is the key even if it is a very simple black and white kind of page with with maybe just one color here and there consistency is key so make sure of that now you need not replicate a design exactly just try to make your site look good just try to make it look consistent just try to make it look well spaced out and finally your website should be deployed to worel and again there are no instructions here by this time you should be familiar with the deployment process so you have to create a GitHub repository keep it open source keep it public and um then you deploy it to verel and optionally if you want you can also connect a custom domain to it so you can go ahead and actually on ver.com if you go into domain settings I'll let you figure it out but you go into domain settings and you can add a custom domain so you can purchase a domain I think some cheap domains are uh let's see so I I believe like do XYZ domains are very cheap so let me if I let me just search for Akash XYZ um I think that's about 164 rupees that's about less than $2 a year right so $2 a year is not that bad but uh so you can buy it for a buy it for a year if you want but this is not a compulsory part of the um this not a compulsory part of the project even if it's deployed to verel that's perfectly fine even if it's Akash doval doapp that's completely okay no problem there now uh one thing I just want to suggest is make sure that know as you copy over things from different sites you might find that there is some content there and you might just put that content directly uh make sure that all the information on the website is true and accurate that is key because we want you to be able to actually use this website this is not just a project that you're creating we want this to be a website that you can use that you can update over time as you work on the through the rest of the boot camp and you should be able to link it from your resume right so you want it to be informative for your potential employer but at the same time you also want it to demonstrate your skills so finding that balance is the key here again it's more openended I I'm we do not intentionally don't want to give you like a set pattern that you can follow here we want you to encounter these challenges we want you to uh like look into these constraints and figure out what is the right balance for you okay and for the project is specifically I would highly recommend scheduling at least one oneonone call maybe two so once once you once you've created a wireframe once you know what your website is going to contain and once you maybe pick the design as a reference maybe schedule a oneonone call just to have a chat just to kind of go over the content itself right and then the second thing that you should do after that is once you have implemented the website and made it responsive maybe you can get one get on one oneonone call with one of us again to get inputs on on what further improvements you can make to your website okay so those are the two things that I would uh that I would suggest you should do okay so here are some examples for inspiration let's go over some of these examples very quickly um you can search for more on dribble or the figma community just search for personal website and you'll find hundreds of examples okay so let's see there is this one this one is yeah this one is one that we already looked at but let's take a closer look at this so here okay it says hi I'm San I'm a web and app designer I designed beautiful websites and of course you can imagine putting a picture here there's a nice uh nav bar here at the top then latest work so is put like you can refashion this as an about section of course you can just put um uh about me and you can just write a few things here uh and then again okay what I do okay so this is more like the about section want to work so there's not a lot here there's like three sections maybe you might want to add another section here or maybe just reuse one of these again this is not uh it's not like something that you can use directly you might have to make slight changes to it here is one this is something that we uh used for assignment one feel free to use it if you like it I would not suggest using this because you will not be learning enough in the process but this is a good template as well so you can definitely use this for inspiration in terms of how to structure your website if you don't end up using this exact um if you don't end up using this exact template itself okay let's take a look at this then yeah this one also looks pretty interesting it has some interesting fonts as well so again let's see yeah there it is so now you can put a logo here or you can just put your name name here and here the napar here is at the in the in the center and then there's a contact button um then okay hello I'm zeror and and then there's some information there's an email and CV download button okay there are a bunch of logos of uh his favorite tools I think that is a good thing you can put in four plus years of experience and here okay there is some information here there's a Code this could also be an about me and let's connect yeah so four sections and of course you may have to think about what content you're going to put here but again a good one let's see what's up here yeah Stefan William uiux designer again there's a bunch of uh interesting stuff going on here so let's see final design there are four sections so there's of course the hero section um it has this nice thing on the side that's also interesting then um yeah these are projects so maybe you can put some projects here and you can link to them as you work through the boot camp um you can maybe link to some some of your GitHub repositories here then okay these are also like projects so you could use maybe this one as about this one as projects or something and then this one just has a code or something you want to convey to the person seeing it and then this is like the footer so this is nice and then let's see a couple more yeah this one is very detailed you don't necessarily have to use uh all of these sections but again use it more for inspiration so you can see how it goes I think this is a great example of how it goes from um yeah how it goes from like a basic design setup here to something that is more interesting here with a hero section and some articles and some projects and things like that okay so great um if you want to add a Blog feel free to add a Blog uh into your website and blog would simply be a couple of pages for now I like this one this one is really simple let's see yeah so this one doesn't have a lot of images this is basically this hello section over here then this is what I do where to find my work about me and schedule of consult this could probably go on a second page and that's it there's this bottom over here all right um yeah a couple of real websites I want to point out so one you can check out the website for Ashish Ashish a senior software engineer Jovian again this is a very different style and this is a sort of a very minimal approach here but I think it covers everything uh it it has a it's very text Heavy it's sort of more structured like a resume but it's great it does the job and for a developer it actually might be a good thing the font used here is a monospace font so that's again an interesting choice of font um but again for a programmer that is something that might make sense and then there's a link to a Blog here and then so again these these open into different uh other websites so that's fine there's a project section there's an achievements yeah so so this is more structured like a CV and that's perfectly fine it's your personal website you give it your personality uh just as long as you are satisfying the requirements that we have laid out here that is perfectly fine here's another personal website you can check out um so this is akansha she is or was a graduate student pursuing Masters in uh data science so here she has a homepage where she has a picture she has this about section and she has a bunch of links and then she has a project section where she has like a bunch of cards uh showing her projects right and this is great because it um it it simply shows you that okay there you go to this site you learn enough about this person and you can go into the project section and then you can check out okay this person has done a lot of interesting work and I probably want to like as a potential employer I probably want to talk to this person then um here's another one another like a lot of people take a more text Heavy approach and that's perfectly fine again I want to stress that this is your website so this is Andre karpati he's a researcher at open aai um so before that he was working at Tesla so he has this simple website where he has the timeline of his work and after that he has some featured talks or um that he has given over the years and then a little a section about teaching a section about writing and in this case yeah the the blog actually opens on a different s and that's perfectly fine a bunch of pet projects and Publications Etc right so again great it's all and then a bunch of Social Links here as well so perfectly fine uh this works too so I want to say that don't limit yourself to the kind of websites that you see on figma or on dribble U go feel free to go a little um wider in terms of your search feel free to just look at personal websites of people uh you generally tend to follow you can generally find them on the Twitter you can you can find them on their uh on their LinkedIn project or elsewhere one other good source for a bunch of these uh sites is just going on YouTube and searching personal website HTML CSS and you'll find here okay this looks interesting that looks interesting that looks these three look somewhat similar I would say but still uh this looks pretty interesting this one uh this one over here is also good um yeah this is also interesting this has got some this one looks pretty slick I it's got that whole cyber Punk theme going on and uh it's also a tutorial so you can actually probably even follow along with this and again it's fine if you're uh referring to a tutorial a little bit so let's take a look at this this one's got got a few animations as well so let me just play this yeah so this is what this website looks like at the end of all of this development I believe this is implemented in react but it doesn't have to be so it's got a bunch of animations it it's got a bunch of colors over here it's got this nice bottom sticky Bottom bar um let's just watch the entire demo over here it's got a portfolio link it's got a bunch of Social Links it's got this nice image which is cut out in a random shape over here got this nice about section there's some uh animation going on here as well there's the animation on the buttons too then there's a more detailed section what I do again this could be projects as well possibly let's keep going and yeah these are like some latest projects so that and then probably there's at the end I believe there is a contact form somewhere yeah so again you don't have to add any animations but if you want to you can and um there are often you can use a bunch of like CSS or JavaScript helper libraries to implement animations bootstrap itself also allows you to create some animations the reason we don't cover animation a beginner course is because most websites will not require any animation or you'll end up just using some prepackaged Library uh but if you want to add animations please feel free uh we're not stopping you so one tip I want to give you very important tip is that you can go beyond the scope of work as uh that is described above you don't have to limit yourself to this however make sure to First Implement everything that we've mentioned above so first do a first pass and Implement just the bare minimum just Implement everything that we've done before going too heavy on let's say creating five pages and all that so first create a basic version that satisfies the evaluation criteria make a submission here and only then continue building on top of it very important you have to do this iteratively because if you keep expanding the scope of your website you'll be stuck on the first page or the first section forever and you will never actually and and you'll be trying to animate the first section the Hero part of it and all that and you'll be stuck on that for days right so do the basic version make a submission we'll give you feedback as well um and then continue adding whatever else you want to add okay we started out by looking at HTML and CSS Basics um so here we just understood HTML CSS the very basic foundations of uh a web velopment so we wanted to create our first web page and creating a first web page what we really wanted to do was we wanted to create a jovian jobs website which we kept building and and improving over the course of uh the several lessons and we just wanted to have a Navar a header section displaying a picture a list of job openings and a footer at the bottom uh and that for just for that what we did was we uh created a folder on our desktop we opened up visual studio code we added just some HTML code to it that showed us our first web page then we understood how tags work then we uh created some important tags like HTML head body title Etc then uh we added some div tags with some content um then we had created a wireframe so we decided that okay we need to maybe first create a wireframe like this so this is where it all started uh okay we wanted to have a Navar we wanted to have this header image we want to have an about section job opportunities and a footer then we added some content uh using HTML so again we added a bunch of headings like this then we added some text and paragraphs so then start things started looking a little better of course it's still basic content then we added some lists so we created a list for Let's see we created a list here an ordered list and an unordered list here for the footer then we added some links so after adding some links this is what our page looked like then we added some images so we added an image here at the top and image here below and and uh this is what a page looked like without any CSS then we went ahead and added some CSS so we started centering things we started adding some image Styles so we learned how CSS declarations work we have some selectors and then we have a property and a value and we can put it inside the style tag we can put it in a CSS file or we can use the style uh attribute then uh we looked at the different ways to select a tag and ID a class and we understood the CSS Box model where we have some content padding border mark and then we implemented the wireframe so we started by adding some basic Styles so just adding styles to the body then adding the nav bar uh with the Jovian logo then adding the banner image the about section the jobs the footer and this is ultimately what our first web page looked like right so once we did all of that this is what our first web page looked like and then we deployed it to the cloud using this platform called static. apppp not something that you would do in production but it works for our first web page and that was was that was our first web page and that was not too bad for our first web page uh but this is something that we then kept incor improving on over the next several lessons so the second lesson was Advanced HTML and CSS and this time we just wanted to iteratively improve the existing web page by adding and modifying sections we want to learn how to work with tables how to add forms how to how to work with colors in CSS how to um save how to use meta tags all of that so again we uh basically just and we learned about the iterative method and this is something that you should try to apply to your own personal website development as well try to get the first version out in one day and maybe then take the second version out everything is something that should be deployed and that is why we may we also focused on deployment from the beginning your website should be live from day one and you should just keep adding more information to it instead of saying okay I'm still working on it I'm still working on it I'm still working on I'm I'm going to take it live tomorrow or next week or something like that don't do that just take it live with whatever minimal content you can and just keep improving it so here's what we decided that we're going to add this job opportunities table and then we are going to add a form here as well and uh then we learn about tables in HTML and how to create complex tables like this using the table TR and TD tags we learned about using um The Border attribute to make sure and collapsing the border so that it looks something like that and then once we had the table okay so that's a table Without Borders and then we saw how to style HTML tables so again we can add a bunch of borders we can add a bunch of background colors we can add a bunch of text Styles so just with a few lines of CSS our table looked a lot better and then we decided that we want to merge some rows and columns make things look a little nicer so we uh learned about row span call span and things like that and this is what our table ultimately looked like then we learned about text Styles in CSS so every website every company has a personality and part of that personality is the fonts they use so to use external fonts we use uh Google fonts and again I encourage you to experiment with fonts but just pick two or maximum of three fonts one for maybe headings one for subheadings or things like that and one for the body text um and make sure that those fonts pair well together and there are a bunch of resources here that you can check out for finding good font fairings we at Jovin we use inter and Roboto as a heading and body uh probably a slightly boring choice but it does the job um maybe at some point we'll update that but there are a bunch of pretty interesting pairings that you can check out here okay so part of building your personal website is going back and reviewing all the resources that we've shared with you and figuring out something that is um that interests you but at the same time that also looks good okay um so yeah so then that we learned about a bunch of font and text related properties we learned about understanding size in CSS so there are absolute sizes pixels are the most common these are not really used and the relative sizes again percentages and Rems are the most common others are not really used too commonly but in any case you have a bunch of these sizes that you can use as well I really want to stress again that feel free to go back and refer to specific sections we've put we've put in a lot into these lectures like these are things that you'll keep probably referring back to for months probably even years as you going through uh the rest of the boot camp and also your web development uh uh job all right U okay then we have yeah text sizes and Style Guidelines again we have a bunch of things over here then we talked about colors in CSS so there are a bunch of inbuilt colors they are not very good for actual web design so I would not recommend using these inbuilt colors and in general you want to avoid something that is too bright or too dark or too grayish it looks very 90s um you want to use something that something that has like these are called pastels or something that is slightly dull but at the same time also has a also has an interesting shade to it right so these ones the all of these slate green SE green all of these are interesting um but really what you should be doing is using a color palette using some platform like Tailwind colors or something so then we have RGB colors so you can of course specify inbu color names you can use RGB background RGB values you can use hexad decimal which is basically another another short way of writing RGB where the first two characters represent red the next two characters represent green and blue and it goes from 0 0 to FF that's why it's called hexadecimal so 0 to 9 and a to F all of these are used to create numbers essentially you can learn more about the hexadecimal number system if you need you can also add transparency to your colors whether you're using rgba or you're using hexadecimal and colors can be set for the text colors can be set for the background for the border for the Box Shadow and and much more by the way backgrounds can also be images so that's also something that you can check out like this one here has a background image not a great choice but you can see the difference between a good consistent color scheme and fonts and a good contrast between the text and the background versus a good contrast versus bad um definitely your personal website shouldn't look like this so I just want to stress here that it's very the reason a lot of the old websites look like this or poor poorly designed websites look like this is because this is what your website will naturally look like if you're thinking on the Fly versus if you have looked up a template if you have decided a color palette if you've picked good fonts colors you have Frozen all these details before you're actually coding it then your website is more likely to look like this okay um so yeah so just keep that in mind then these are all some color text color guidelines again not it's not fixed but you can use these as a reference so almost always you want to start out with some standard reference something that is some somebody has figured out is a good set of selections and then make slight tweaks to it to uh do what you want it to do um so yeah once we apply all these uh then we get back a pretty goodlooking site and then we have forms as well so forms are created us using the form tag and through the input tag select tag text area tag and we also use the label tag so every form has an action and again this could be an external website this could be maybe a server endpoint you have implemented and a method uh but you create divs and inside the divs you create these labels and you have a bunch of different types of inputs text checkbox radio dropdown text area password email Etc and once you've put in a form then um you can sty it you can give it a bunch of different styles and this is what a form might potentially look like okay and then there's a action and a method and a Target so in this case well uh we used form bold because we were not talking about servers early on so you can just use any service that can receive form responses form bold is a good one useful one uh in case you don't have the option or the time to set up a proper server and we simply pass its action method Etc and it can collect whatever we needed to collect and then we have uh HTML meta tags metatags provide information about a web page to search engines and browsers so when your website is searched online and Google finds it and shows it in a search result that is when all these metat tags will come into picture Okay so these are some common meta tags and these are some platform specific meta tags and then there's a title and fav icon tag that are used to change the browser title and fav icon so that's again something that you can um set up as well right so you should you can literally just take this set of metatag pasted into any website that you're building I think one uh requirement we should we will add in the project is that it should have your website should have proper meta tags um so that it can be shared easily by with other people as well and then Cloud deployment again we were still talking about uh static app here because we not touched on git and GitHub so that was lesson two and then you had an assignment where you had to convert a design mockup into a web page so you had this design mockup and what you did was you had to inspect it using figma you had to set up a basic page structure and styles this is the mockup over here you had to set up the basic page structure and styles then you have to implement the web page section by section then you have to deploy your web page to the cloud and make a submission all right um a few tips avoid copy pasting Styles directly from figma so there's a knowledge based article on this and we've also picked up a bunch of common mistakes and put them into this Google drive folder so again use these go back and refer to all of these for your personal website as well your goal should be to get a pass grade on your first submission and for you to get a pass grade on your first submission make sure that you're not repeating the mistakes that you or other people have made okay um that was this first assignment then we talked about Version Control and Cloud deployment the proper uh way to do web development and that is where we talked about git and GitHub so we started by just getting started with GitHub we learned about what Version Control is how it is useful we learned about git uh where you basically you put your code on a remote server and then you can pull it into any computer or maybe a cloud computer like GitHub code spaces and you can make some changes and then you can push it back and still have all the older versions available and you can also view it from the browser on github.com and you can also collaborate with other people right so again there's a lot git itself is a huge thing that for years people um keep learning or just try to manage through uh just running a few simple commands that's what I do I just remember three or four commands and use them all the time and look things up whenever I require but this is the basic structure of what git gives you and GitHub gives you a bunch of abilities on top of uh Git it is basically a web based platform that also gives you some collaboration tools uh it's where you can find open source projects it has a wide community and it has great integration with other tools right and for a web developer that GitHub profile is kind of like the resume so we'll talk at some point about actually creating your own GitHub readme profile as well okay we'll cover that at some point so here yeah we talked about how to create a project repository and then you have these things called A readme and A get ignore we talked about them as well and a license as well especially if you're building an open source project and once the project repository is created we talked about how you can open it up using GitHub code spaces a cloudbased development environment with a free tier that allows you to write test and debug code directly in your browser quick to set up gives you a consistent environment you don't have to install anything lets you work from anywhere and starting a code base is really easy you just click the code button and click create codes space and that's how you can create a code space and it gives you this Visual Studio code interface in the browser which honestly is good enough that's what I've been using for a bunch of projects that I've been working on and uh you don't even need to install anything on your computer and you can install extensions within this vs code browser and they will remain there the next time you try to open it uh so we at Jovian have almost completely shifted to GitHub code spaces uh we still do use our local machines because the free uh tier is not sufficient for some of our work uh that's why um yeah and then you can run it using a live server so especially when you're developing a simple HTML and CSS web page you can just use a live server to run things and then gith updating a GitHub repository is fairly straightforward it's a threestep process uh but there are buttons to to do it in one step but you just first add files and Stage them and then you commit them and then you push them right so each of them has a certain purpose a reason they were built um but what you should just remember is that all these stages are important for your code to actually reach the GitHub Cloud repository all right so make sure that you are always going to add push and then add commit and then push so add is going to Stage your changes comp is going to record a new version and push is going to push it to GitHub and then somebody else can pull it and there are ways to just do this using visual studio code so that you don't have to run anything on your end then Cloud deployment with verel was again a breeze all you do is sign up on wor.com and you connect your GitHub account then you select the repository that you want to deploy and you select the folder inside which your actual code is present that U that needs to be deployed and it's going to deploy it for you and it's going to look something like this so this was actually the website that we deployed and um yeah that still looks fine it's going to be there so you're going to have all these old versions of your websites or for each repository versus fre has a good huge uh basically an unlimited free tier unless you start hitting significant amounts of traffic at which point it will make sense for you to pay anyway and finally once again we just cover T talked about meta tags So Meta tags are pretty important because you want to be able to share your work with other people and when you share it it's kind of the cover for your book uh if the website is your if your website is is the book then the meta tags which is the meta title and image are the cover and books are judged by the cover so similarly websites are judged by their meta tags all right and then the we talked about the GitHub collaboration workflow when multiple people are working on a repository the way you should work is create a branch then you should create a make your changes on the branch by making a bunch of commits like that then you should create a pull request where somebody from your team can or even just you yourself can review the changes and then you can based on the comments you can make uh you can update your branch and keep pushing more changes and finally you can just merge uh the merge your branch to the main branch and just like that your changes will then get deployed automatically if you're using a deployment platform like worell right so whenever you're doing any new development and this you should try to apply to your website as well once you've pushed out the first version then for the second version make sure that you create a branch and then you keep pushing your changes into a branch and uh keep updating a pull request and when you've done enough work that you feel it's ready to again go live then push it back okay so try practice uh practice using the GitHub workflow here the GitHub flow for your work um it's also again just good practice and it's something that you can talk about when you are um let's say when you're sitting in an interview you can mention that when I built my personal website I used the GitHub flow so first I created a simple page with just my picture and a few lines about me and then I deployed it to verell and then I created a new branch and on that Branch I added a project section I um created a pull request I tested it I reviewed my own code and only then I merged it back and then I updated and I I did that three four more times to add multiple things to my website okay so try to do that try to follow the GitHub flow for sure and it'll help you then creating pull requests well pull requests are again there's a flow here then keeping your branch up to date so sometimes the master Branch or the main branch will go forward so you'll have to pull those changes back into your branch and all that this makes more uh sense when you are working in a team where actually other people working in as well and you might run into merge conflicts you might have to fix them uh not something that you have to know by heart or not something that you will be doing on a daily basis but you can always come back whenever you want to review this topic so there are a bunch of resources here that you can check out okay regarding merge conflicts and regarding uh branching of course git can also be installed locally so if you're up for a not a challenge exactly but if you want to put in the work to actually set up get locally you can go ahead and do it I wouldn't say that this is necessary anymore because either your company will be using something like GitHub Cod spaces or they will give you a laptop with with all of these things preinstalled so I wouldn't worry too much about it okay but all the information is here and you can always look it up whenever you need to so feel free to come back to all of this whenever you need to look into it then we talked about responsive design and flexbox so this is now we got to a point where we want to make our websites look good not just on our desktop development screen but also on mobile screens so this is where U we wanted to create um so we saw that the website that we had created doesn't really look very good on mobile and we wanted to create the webs we want to make it more responsive and to do that well first we duplicated the GitHub repository that we had and then then we deployed it once again opened it on GitHub code spaces and we learned that for responsive design we have to break up our design into three or maybe at least two but maybe three or four uh different designs and at each break point which is at each device width the layout will change a little bit so here you can see that at for small screens the layout looks like this and then suddenly at about 576 pixels the layout is going to shift into this and then the layout is going to shift into this at 768 and at 992 it's going to shift into something else right so this is a very common pattern almost all websites follow it any websites made in the last 10 years will will follow it to enable it though you need this meta tag this is often something that is forgotten so make sure you do that again a lot of these instructions are not necessarily given on the project page but you'll have to go back and see how to make these happen Okay so it's also a way for you to review all the content you have device mode on your browser using which you can test the respons or the responsive layout of a website and uh you can a great way to just see how other websites are achieved achieving responsive design is to just open them up on device mode and see what they do now the way responsive design is implemented is using CSS media queries where you can provide at media you can provide a media type and a condition and when the condition is met for example if you say Min WID 768 so if the condition Min width of 768 is met so when the condition holds true then these CSS rules apply otherwise um the CSS rules don't apply all right so here are some examples minwidth and you can also do it on orientation you can Al combine Min width and Max width like that so that way you can define specific rules for different Windows of width however the better way to do it so that's how you set you can set break points but the better way to do it is use a mobile first approach which is first Rite all your CSS queries or or your create your design for mobile and then add maybe for small or for tablets add a minwidth breakpoint and add some additional CSS rules that can go on top of that and then for your tablets and laptops add some more Rules by setting M with 768 and so on right so you want to ensure that you don't have to repeat a lot of the layout uh design uh and you want to start building from mobile first so use this for your personal website as well uh use a mobile first approach so start with the mobile design and then add these break points or you can use bootstrap to do it uh But whichever way you choose to do it this is um how you should achieve it then we also talked about flexbox because as browsers resize you cannot exactly know what size you should build for so you should not you should never hardcode your wids but to keep your proportions constant you can use CSS Flex box and again there's a bunch of things in CSS Flex box so the first thing is you have to uh set the display property now of course the block inline inline block are some of the basic display properties but display Flex enables Flex box and display none hides the element all together so flexbox has this concept of containers and items so there's a flex container and then there are a bunch of flex items now as soon as you said display Flex then the container um or the items are laid out along according to the rules of CSS flexbox and then you can give a bunch of properties to items as well so some are container level properties some are item level properties one is the flex Direction which is where things flow from left to right or right to left or top to bottom or bottom to top so this is done using row row reverse column column reverse then you have wrapping so again uh things by default just go out but if you say no RP then they're going to try and fit or compress um you can say wrap down so they can wrap downwards and you can say wrap reverse and they can wrap upwards like that okay um again these change based on the flex Direction so you might have to just also uh play around with it but in most cases you just want to do the simplest thing some of these more advanced uh options never actually get used or they get used simply when you're trying to achieve a fair Advanced layout which doesn't really come up very often so then you have justify content so along the main axis you want things to be at the start at the center or at the end or maybe you want to be spaced uh you want space around them you want space between them or you want even spacing or uh and of course for Flex Direction column it's going to be different then you have align items and that applies along the cross axis so again if the flex direction is row do you want things to be sticking to the top sticking to the bottom be at the Center or stretch to take up the entire space or maybe align according to the Baseline so that is something that you can look at as well then you can change the alignment at a child level as well so let's say you have an alignment setting at the parent level you can actually modify that setting for a particular child using the Align self property and you also have something called align content justify items I've almost never used them so I wouldn't worry about it you also have these properties Flex grow Flex strength Flex bases they have a certain meaning I would really not bother about these too much really the only property that I often just use is the flex property where I would just simply put flex one to make something take up a bunch of space all the available space okay so that is that and using that we then decide that we want to redesign it using uh flexbox so we the first thing we do is we create a couple of wireframes we create one wireframe for desktop and we create one wireframe from mobile so this is what we want it to look like on desktop and this is what we want it to look like on mobile and we start with a mobile first layout so we lay out a bunch of Base Styles and we we have a base font size we have a base body size we have a base um font we have a base size we have a base heading sizes we have uh we have a bunch of Base Styles and then uh for tablets we want to slightly increase the body font size and so on right so yeah so we then we create that Navar uh like this so for the Navar we used a slightly different logo then we created the banner image we created the about section and then we added we started with a mobile first layout and then we added a bunch of things here to uh change the layout slightly on Mo on tablet and on desktop then we have a jobs list that was shown on mobile and tablet and then we have a job table that is shown on desktop so yeah a job table that is shown on desktop and then we have this application form we made some changes here but ultimately this is what it looked like on mobile about Chi and employment opportunity submit your application etc etc uh looks good looks readable uh could be better but looks readable and even these are stacked vertically and this is what it looks like on tablet slightly different okay slightly more spaced out but still using the list and then this is what it looks like on desktop here it's using a table and here the three footer items are shown vertically are shown horizontally like they are on tablet okay so that's our uh that was a lesson on responsive design and CSS Flex box then we had an assignment on mobile first responsive design where you had this layout that you had to implement so this was the layout where you had a mobile tablet and desktop layout and you had to implement each one of these like that and yeah I think there's not much to be said here except that you could use flexbox to do this and you also learned about the CSS scal property and these are the the process you first set up prepare for develop and deployment you set up base Styles and Blake points you implement it section by section and then you deploy and make a submission okay then we learned about the bootstrap CSS framework which is uh which makes life really easy when you're working with the uh when you're working on a complex project so again we wanted to rebuild the Joan careers website add some links in the navigation bar show a collapsible menu on mobile devices show a list of jobs using cards on mobile and table on desktop and make the color scheme typography and layout consistent and aesthetically pleasing and for that we wanted to use the bootstrap uh so there's a basic project setup of course but we wanted to rebuild the project using bootstrap bootstrap is a powerful open source CSS framework that is used to design streamline the development workflow uh especially for mobile first designs so we installed bootstrap and we installed simply by including a couple of links within our page and right right away it changed a few Styles then we customized it using CSS variables so we changed the primary color we changed the uh let's see yeah so we changed customized bootstraps typography we customized uh we customized the fonts so we used a couple of outer fonts then we created a styles. CSS file we set the fonts we set the primary color and we set maybe the heading font to be enter and there are other customizations that can be done but these basic customizations should do the job even for your own personal website then we decided that okay we're going to start out so bootstrap has a bunch of preconfigured breakpoint so we're going to start out with uh uh just building out a a basic container and building out a layout and then making it responsive by adding more utility classes so in bootstrap you typically start out with a container that centers your content on the page horizontally and it takes up full width till whatever size you want and after that it stays in the center and bootstrap has a grid system a 12 column grid system and what you can do is you can uh set up a row and inside that row you you can have a bunch of columns and you can set widths for those columns on how many of these uh grid elements you wanted to span so you can mix and match you can have 3 3 3 three or you can have three four and four you can have maybe 3 three and six you can have 3 two2 things like that as soon as it crosses 12 it goes onto the next row okay so you create a row and inside the row you create a column and that's what it does and then we talk we looked at offsets we looked at gutters those are just ways to shift things around here and there and then we talked about util classes so bootstrap has a bunch of utility classes to set margins set paddings um to set sizes a bunch of utility classes to make things bold italic to Center text a bunch of utility classes to set background colors a bunch of utility classes for borders for display for Flex Etc okay and it also offers a bunch of components so it offers a Navar component so you can use something like this um so this is a naar component for our site and this produces an app bar like this which on mobile created a collapsible menu but on desktop creates this nice Three Links with a signin button so what you do with typically with components is you check out the example code and you simply copy paste and drop it into your um not copy paste exactly but yeah take a close look at it and either just drop it line by line or write it or maybe in some cases when it's exactly what you need just uh copy paste it and it's fine but make sure you understand every line of code that you're copy pasting don't have anything that doesn't actually make sense you can always inspect something you can right click inspect on the page itself and see what exactly a piece of code does okay so that's the nav bar over here it had a couple of images so we were using a different logo on mobile and a different logo on desktop like that you can do all those using some utility classes then we created a utility hero section again there are a bunch of examples here for the hero section and we found this one interesting so we went ahead and simply copied it from the browser itself so you can just open up these tools so again feel free to use some of these examples if you think that is going to be useful for your website your personal website and then we pasted it in here made some changes and we got this nice hero section which looks pretty good pretty well designed um and yeah that's with that we had the hero then we created a jobs list this is where we used a card component so bootstrap has this card component that we could use so we added a bunch of cards and you can see here that we created this nice job opportunities and it has this nice visual hierarchy big text bold font dark color uh smaller text then even smaller text lighter font even smaller text even lighter font all right so use all of these things to give your content some hierarchy then we created a jobs table for desktop again bootstrap has some examples of creating tables and this is the table that we ended up creating then we wanted to create a form and again bootstap has a bunch of great utilities for building form so we just dropped in a bunch of examples and then modified it and that gave us this nice little form with uh everything looking very consistent very clean and also a nice submit application button and finally bootstrap we looked at some examples for foots uh over here like for example you have a bunch of footer examples so from this we picked out an example that worked for us and we added a footer as well and and then we took the site and then we deployed it and this is what our site looked like which is so much nicer it looks looks so much cleaner and if you want you could just use a bunch of these bootstrap components and templates to build out your personal website and make it look just something as simple and clean as this and that's perfectly fine that's not a problem at all and this is what it looks like on mobile this expanded menu and then work at Jovian some of the content is centered and of course things that were side by side have come one above the other the table has shifted and now or has gone away and now we are showing a bunch of cards then we have the submit application section and that's it and then we have summary and references U about this and a bunch of tutorials on bootstrap that you can check out okay so that was a bootstrap CSS framework and the next assignment was building a scientific calculator and here your job was to use uh not just C HTML CSS but also some JavaScript to build out a scientific calculator that is as similar to Google scientific calculator as possible and many of you did a pretty good job at this and you also wanted to make it respon responsive so that it looks like this on mobile and it looks like this on desktop and um there's this tutorial here that goes into how exactly you add the javascri functionality yeah uh basically what you do is let's see you go in here you add in a bunch of event listeners for each of the buttons and for each of the buttons you uh yeah you you add event listeners and then you add the logic so you have maybe uh you take the expression and then you evaluate it or you add something to the expression so all of that is covered here I think this is a great tutorial on uh how exactly to use JavaScript to add interactivity and we're going to go much deeper into adding interactivity but for now I think this this does the job and the last thing I want to mention is you can build these things pretty easily with chart GPT anytime you want some piece of functionality on your page you can always say let's say how do I animate some text to just shift up and down as um the user is scrolling you can always just search on chat GB and get some code from it right so that's what I just want to mention there as well use chart GPT or use jobot right over here use jobot for help too okay so that was the um third assignment then we talked about the express web application framework so the express web application framework is a minimalist framework for nodejs for streamlining server side application development with flexible routing and middleware support and a wibrand ecosystem so we wanted to improve the Jan careers website this time we we wanted to have a single uh just only show the table only show the jobs on the main page and then show the application form on individual job pages and then we wanted to have uh an application form that can trigger an email and an acknowledgement page so this is what we did well we again created a new repository and we learned about creating web servers so instead of static websites where you simply open a URL and then you get back in HTML csss page page a web server can take a request and then do some processing maybe call a database or something get some data from a database like jan.com is doing and then send it back so we learned how to build web servers or web web applications and the way we did that is well we use the express uh web application framework which is really simple to get started with you just create a bit of text like this and uh you just write a bit of text like this and as just like that you will get this when you open it up when you run it using npm start or node SRC app.js uh you're going to get this hello world response and now you can start sending whatever content you want after doing whatever processing you need to do right so the key benefit of uh web of uh server side Frameworks is that you can do some processing so we saw how to serve HTML files you can always just uh do rest. send file and send out a file like index.html and this is what it looked like now uh as we make changes we don't want to keep restarting our server again and again that that's where you can use a tool like node mod to automatically restart things then to serve static files you can use express. use so Express or app.use express. static so any images any CSS files are often served as static files and uh deploying Express applications to worel is also fairly straightforward you just is also fairly straightforward you just need this worel do Json file in the projects root folder with some content that uh informs verel where to uh send all the requests and what environment to use okay now uh next we looked at how to use templates so let's say we had this list of jobs that came from a database or maybe it's just something that we have hardcoded um now we want to actually render it using a template and that's where we can create a template we can change index.html to index. mustache and then inside it we can create this mustache template which can Loop over the variable jobs and then create a list of these cards and in each card insert the uh title job title Job Link and the salary and the posted date and then similarly we can also create a table once again that can Loop over the list of jobs and create table rows and the table will be shown on on desktop and on mobile we'll show the list of cards so we are reusing code HTML code but this time we're putting it inside a template and we configure mustach as the view engine and then we simply render that index template and we give it the data jobs the list of jobs as the variable jobs and just like that that renders this page over that renders this table on mobile on desktop and a list of cards on mobile and there are a bunch of things you can do with must it's really easy to use uh but the idea here is you take some data and you put it into some HTML template to uh render a page then we also looked at Route parameters so if you have a route like this app.get jobs colon ID then you can take your uh you can take some logic and then use that to render different kinds of dynamic Pages for example here we have this template called yeah we had we have a template called job so we have a template called job and in that template job. mustache we simply render an application form and we render the title of the job right and that's what that looks like I believe the job template is yeah some it's a you all the source code yeah here is the template content for the job template right so it contains just uh uh it's going to use the job title and it's going to show that job title in here it's in the application form at the title of the application form all right uh then we looked at how to handle form submissions now to handle form submissions we need to use this app. poost route okay and we need to also give it a we also need to use this body parer middleware so that it can pass the uh content that is going to be sent using the post method and finally we can store the form responses in a database but what we chose to do instead was to Simply format an email and send it send out an email using the node mailer package okay so the idea is not that every form response has to be emailed but you can get that form response into a route and then you can do whatever you want with it store it in a database just throw it away send out an email call an API whatever you want to do okay and um once yeah and then we saw how to just make sure that we are not exposing any credentials directly within our Cod Cod so we put in an email ID and password as environment variables both within our uh as an as a Dot N file uh within an within a n file which is get IGN noed in a nodejs project and then also within uh verel because verel also needs those and just like that we created this uh final website which has a bunch of job opportunities at Jovian like this and we can also then go in fill out an application let me just fill that out and when you hit submit application that's actually going to go and try to send an email not right now this this did not send but yeah it's going to send an email it's going to show an acknowledgement page so that's great and there are a bunch of other resources you can check out and in most cases you can just ask chat GPD what your you can ask it and it'll tell you exactly what you uh what you need okay so that is the final lesson and of course now you're going to be working on building your own personal website um so that's all that's all for today and we have successfully made it to the end of this course uh we've learned a lot about HTML CSS JavaScript and web development in general um it's been a great journey so far and I hope you feel like you've learned something over the past uh several weeks that you can actually apply