hello so today i'm going to be talking about interviewing which is really just the tip of a very large iceberg which we're talking about the whole iceberg i guess this talk is not just for you if you're looking for a job but if you interview people i'm ryan lebove i currently work for envoy where we challenge the status quo of workplace technology it's a bay area company super fun most of the time i'm doing ember and node stuff but since it's a startup i do a little bit of everything this talk kind of started at a certain point in my career i was started interviewing more and more people as we're trying to hire and i would see people make the same like i don't want to say mistakes but it's like i had to look and i found really interesting things about people but they just weren't coming across in the interview so like i would have to do a lot of like poking in their github looking on their social media and asking them a lot of questions actually get kind of the best to shine through i was like i wish i could give a talk and kind of just like put it on the table from like my perspective and helped people get a job so given that we have 45 minutes i'm going to kind of lay out some goals i want to give you more or less a map to getting the job you want this is not like just your first job but this is like a career trajectory that you should be able to keep coming back to so i don't care if you're a junior dev or if you're like you have a really good job and you're looking for something else or if you have a job and you're trying to help get people to come work for you i think there's something for everybody the hard thing here is there's like thousands of pieces of advice i could say about this and like it's trying to distill and present in a way that makes sense so i'm going to start with the story this may seem a little bit unrelated to what we're talking about but i promise it's not there's this really indie kind of anime short film called the reward on vimeo and it starts off with these like two super ordinary dudes sitting at sitting in a village and this like completely crazy hero rolls through the town they're both like man i want to be like this person and on the way out of town the the hero drops this map with an x on it and like they fight over the map and they end up like let's go on the journey together and they start off in like some really basic places and they like find these magic weapons they start taking on new challenges a lot of time unsuccessfully a lot of time having to like bail their crazy friends who are like doing it with them over and over again but like eventually your friend that you're on the journey with like kind of helps you back and you start like having some wins and taking on bigger risks and like before you know it you're like riding on an ocean of lava on a fleet of narwhals um having completed some epic quest and like what what we see as the journey progresses is like in each frame these people kind of like change and like they don't see this but we see them becoming the heroes that they originally saw riding through their village and like they just keep fighting like crazy bosses and blindly charging towards this x and when they get there there's nothing there it's just literally a big x on the ground which is all the map advertised really but there's this big mirror and they kind of realize along the way it was like the journey the journey has made them into these heroes and that was like the reward right and then like it ends with them riding through the same town with like some dopey looking kids looking at them and like to these kids they're like the heroes now and these kids are like how do i how do i become like you and you see one of them slowly like slip the map out of the satchel with the x on it sorry the whole journey for them and the kids like repeat the same thing over again this is exactly like my journey of programming it's like a it's a little bit ridiculous for like the premise of this talk but we'll see you'll see if you don't already see uh so kind of like revisiting the goals for today given this map we have with the big x i want to help you see like where you are and like help debunk some of the myths of the journey uh to help you get the job this is all leading up to the fearless interview some antigoals i'm not going to teach you computer science in 30 minutes it's not possible and i'm also not going to help you fake your way into a job so anyways let's get started the quest map i kind of broke it down into six six parts one is learning how to code two is getting your first tech job three is preparing to look for a new job four is the job hunt five what we're leading up to is the fearless interview and six is kind of a postscript of being at the x and throughout this talk i've talked to literally all of my friends who code and had them just give advice that they found helpful along the way so it's uh you'll see quotes from a lot of a lot of randos that i really respect so learning how to code this is your magic weapons that you find it's interesting i was talking with john moses and one of my friends and he's actually giving a talk about this in a few weeks so i'm not going to like try to go over it all he's got a great series on it and he's going to speak more about it in about a week or two or three i don't know but my tldr is like learn a language build internet things meet developers share what you build i personally learned how to to code on this this book called the ruby on rails tutorial where we built twitter from scratch free code camp is great there's another one by colt steele i highly recommend you build yelp from scratch that's not the point though it's just like it's a lot less important where you start as long as you pick something and finish it that's kind of my point for learning how to code after your boot camp experience this is where the real work begins you need to build something on your own if you don't know what to build i recommend starting with a blog because it's like really easy to like you know what a blog is and you can build a very small or very complex one you can ship it people can read it you have users you have something to talk about like my friend jordan smith says be honest keep learning and talk about what you learn so after you build something cool this is where you start signing up for lightning talks free code camp okay cjs the ruby group wherever you can talk you need to share with share what you learn just keep building things get as far as you can on projects make them dumb make them fun make them something you use there's this guy ira glass he has this little short story called the gap it's about creatives about how like when you start in a new field you like you're like i want to be a painter it's like i see these amazing paintings and then you paint this just like terrible thing it's like how do i get from here to here and everybody goes through this it's exactly the same with programming and his answer is do a lot of work a huge volume of work and that volume of work is what helps you close the gap and eventually the quality of your work will catch your ambitions so if you're still stuck on this west boss has this thing called javascript 30 you build 30 small things in javascript over 30 days you'll probably make it to day 13 and be building something really interesting that you like and like you'll just go off on this tangent that's what you want that's great that's like a sign that you're doing the right thing so the boss battle for learning how to code can you get in github do you have like a side project that you can point to that's like i built this thing and it's on the internet now i can prototype stuff in html and css i can solve basic coding challenges with javascript and also i understand the basic workings of an api this is like a pretty good start which segues into getting your first tech job so especially if you go through free code camp you've built some stuff on your own you want to get paid like you want to start working in tech and so before your first step tech job i personally felt like everything i did was just a string of terrible failures with programming and then somehow like as soon as you learn your first tech job this is where you feel like you're on the fleet of narwhals cruising through the lava sea it's just like i don't know it's really big it feels a lot like getting your big break but a question i get a lot is how do i know i'm ready for my first job in the industry so this is where i have to remind you everybody started somewhere everybody was a junior nobody came out just programming so my rule of thumb is if you can build something useful you're probably hireable to somebody you don't have to know everything you just have to be able to add value to the team that you're joining that's like a really important thing be very open about your current skill level you don't have to hire wide about anything but also don't undersell yourself like especially if you come from a job that has like a customer service background a lot of programmers after 10 years turn into like sea creatures and they like can't talk to people so like you bring very valuable skills to the table just by being able to engage with your customers it's like these are very valuable things that you bring to the team so i really like queen carmen says it's okay to say you don't know something much better than making something up specific warnings for your first job in tech you want to make sure the team you're joining is ready to bring on juniors some questions i suggest asking one do you have other juniors on your team two are there people on staff who were a junior but now are no longer juniors that are still with you three how do what kind of mentorship do you have for juniors how do you make sure that they continue to progress and four are there clear job bands how and how often would we reevaluate whether i'm still a junior and i'll say personally envoy this is something we always come back to and it's like i think it's hard for companies to get this right and so it's like don't feel bad if you're at a company it's like we're trying to do the mentorship program the important part is just to keep asking yourself these questions and trying to make sure the answer continues to improve john mosesman says get a friend that can get you a job honestly this is probably the hardest step in the whole process so harder than like getting building that compiler or doing weird video game stuff is getting your first job that's like pretty deep for somebody who's been in the industry probably at least 10 years so boss battle first tech job from this job you're going to want things on your resume you're going to want to launch something monitor actual software maintain it deal with customers these are all skills that you won't get from anywhere else specifically you want to make sure you're continuing to gain more experience collaborating with other programmers this is something that's very unique to actually having a programming job and at the end of this you really want to make sure that you no longer consider yourself a junior so that one leads me to my next point is preparing to look for a new job this there's a lot of overlap between the first job but this is where i find is actually on my personal journey was like the hardest point because i worked for a company for maybe six years and like at some point i felt really stuck and it took me a long time to figure out how to continue to ramp up my skills to get ready for the next stage in my career um and again going back to our metaphor like this is where you're kind of like i'm kind of a grizzled veteran already i probably don't see this if you've been working in a job for one to two years you've changed you're shipping software whereas before you are not this is this is like massive changes in you um so i break this down into three parts and i'll go over them one is to prove your t which we'll talk about because that sounds really weird slash r no context two is get the junior out of your title and three is improve your coding chops so there's this idea of tshaped people somebody came up with it i don't know who they are but if you think about the letter t it's got like a horizontal long top with a long vertical stem and essentially what you're wanting to say is i have been experienced i have been exposed to a lot of things in programming but i'm really good at this one thing um and this is where like tshaped people i will hire these people all day every day and so this is where you want to say like yeah i've made a couple apis i've done like some devops things and i've built some front ends but i really love amber js and that's where i spend most of my time contributing um and so really this is like being going from a junior to just a software engineer this is probably the hardest thing figure out what you're interested in and then work on developing the stem of your tea so let's say you're really into x how do you prove that some things that i recommend is like open source you'll probably be using tools that revolve around x so like if you like d3 go sign up for the d3 repo look at other libraries built on d3 start trying to contribute back to these things write an article comparing d3 to 3js i don't think that's actually a good comparison but anyways complete like one serious side project that lets that shine blog about this uh how do you do a nontrivial d3 project from scratch even if you feel like it's repetitive and people have done it it's still important for you to do it um and just for example when i was like i'm really into ember js i was like how do i actually prove that to people and then i went and looked this is open source i've done and launched projects on my own here's projects that i've contributed to actual full side projects articles talks it's just like if this was a court case it would be really easy to prove that i really like ember.js it's a very specific thing but when somebody's like i need somebody to do ember js and i'm like here's my resume they're like i want you to help me so like that's really what you where you want to get getting junior out of your title uh what's the easiest way to get junior out of your title stop calling yourself a junior that seems like really dumb advice but like after you get your first job drop it you're not a junior anymore you're always just a software engineer every organization is going to have different standards from junior to senior so don't try to sell yourself to something just like explain like i'm an engineer here's what i love some things you can do to really help you with this also is have a regular practice of learning from people and resources that are better than you and practice the things you learn and then focus on one thing at a time i'm just going to throw a couple things that i've historically found really helpful i'll publish these slides and you can refer to them later if you're new to computer science and have a nontraditional background the base cs podcast is amazing it breaks down usually like pomp and academic things like data structures and b trees and traversal of recursive blah blah blah as like breaks it down into ways it's really easy to understand you don't know js it's like a great like i do javascript every day and i want to know more about this eric elliott writes on on medium a lot his stuff's great there's this book called pooter which is practical object oriented design in ruby it's like there's a lot of great like architecture books you can start reading and starting and start like improving like different domains of your programming skills rubytopas fun fun function is a great javascript one there's more this guy's super grumpy but his screencasts are great upcase is a another one that's like really good this is where i stole the like get the junior out of your title it's literally like you watch really good programmers pair on hard problems and you end up learning an amazing amount by doing this and when you're comfortable enough which should be now read the open source repos you use it's my one soros reference i promise so open source projects are literally like playbooks about how to make the things you like so you can just like read how to do it and it's like oh my gosh i can make d3 now i don't know why i chose d3 i never use c3 and learn how to use a debugger i don't that's a hard one but it's useful and also learn how to do tdd same so and another thing is like when you're ready to actually start applying for jobs you need to make sure that your your coding chops are like up to snuff which is like more of a matter of discipline do an hour of hacker rank every day read the cracking the code interview book this book is amazing like nobody remembers all this stuff but if i had to look for a new job i would get a sixpack of red bull and read this every one weekend and like that's where i would start imposter's handbook is another great one and then interview cake again i'll post all these later so like if you're looking for specific resources reach out to me i'll help you match like what i think would make the most sense for your ad okay so preparing to look for a job you can prove to me you're interested in one or two very specific technical things this is a very important thing you have a consistent practice of learning from high quality sources like hour a day two hours on the weekend whatever it is like continue to learn things and you can also easily solve a wide variety of programming challenges okay now we're on to the job hunt this is all about networking positioning and negotiation i really just want to put this in my slides it's not really relevant to what we're talking about [Laughter] so networking heroic eric says go to meetup and conferences this is where i've gotten most of my jobs from alex an engineer i work with says meet actual engineers where you're applying message me and buy me coffee i will tell you exactly what things are like this is great advice like i actually knew somebody who the way that they would start applying for a job they would find an open source repo for a company they want to apply for start opening issues and pull requests against it and use that to like apply like what open source have you done well have you seen your projects you didn't update this and i did like it's an okay way to do that this is also extremely um opinionated but in my opinion the best jobs come from direct recommendations then applying for companies you like and then literally everything else and i'm not gonna like poo poo on recruiters or job boards or anything they're all great but if you have a friend who will say i like working at my job that's huge like that's somebody you want to work with that is like the easiest way to know you're getting into a situation that you'll like um so again make connections contribute to open source go to meetups go to conferences speak at meetups and conferences if you can apply for contracting positions at companies this is easy because if you do a bad job they don't have to pay you after a week like be like hey i'd love to do some consulting for you contracting for you and then twitter like a madman or mad person the last time i tweeted that i was out of a job i had three job offers from twitter just because i tweeted about programming stuff this is like an amazing thing um so positioning what kind of company do you want to work for what matters to you do you want to be remote does salary matter is a tech stack matter does your team matter this kind of needs to inform what type of jobs you start to look for startups big companies consultancies going out on your own uh do you want to work for like ou or a government thing when you kind of have this like if you want to work at macro corp like update your linkedin don't have weird stuff on social media buy some nice business casual clothes do whatever these people do like be like them this is the this is the job you want this is the lifestyle you want like figure out how these people work and just like like emulate them in a way that's not like i'm forgetting who i am but like these are the people you want to fit in with so like start fitting in with them now if you want to work at start uply like buy a macbook and a hoodie uh like but you say like start taking pictures of your latte and post them on instagram these are like these will help you fit in and kind of understand how these people think and work again know how to fit in know how to be yourself know how to stand out um so when you're applying when you're like working on companies you're like i want to apply it start uply or micro corp macro corp um like you need to kind of do some research on these companies what are their core values their mission statement what is their financial health key personnel google the company and figure out what what they say on their social media figure out who their competitors are and when you start interviewing like i know people know that they're interviewing with me at least a week ahead of time it's like it's really easy to figure out what i'm into so if you start like if you open up with like react versus ember joke i'll probably be like oh this guy's funny he knows that he's like he's trolling me like that's great um then for every company you interview to you need to add them to like i i have this like spreadsheet there's actually a better way to explain this it needs to look like this like when you're interviewing you just have like you're connecting all these dots and like looking at all of your opportunities so negotiation it's super hard but your salary in negotiation which routinely takes less than five minutes to conclude has an outsized influence on what your compensation is the difference in five thousand or ten thousand dollars to a company is chump change it's nothing it's an hr gimmick so like you need to do a little bit of research about what companies are offering because they game they game the system to give you as little as possible not everybody um but like you just need to you need to look out for yourself also like apply for a wide variety of positions specifically if this is one of your first jobs the only successful way to leverage your salary up higher that i've seen is to use offers from other companies it is not it is not playing like you're not playing anybody like the companies are playing against each other this this guy right here he was a professional poker player who turned into a um a like software engineer and he basically started getting like 80 000 offers and he this whole blog post is how eventually he ended up getting a 250 000 offer from like companies playing against each other which i'm not saying like that's the rule i wish i had that kind of offer i don't um but like it's interesting you should definitely go do a little bit of research here um and again it should feel like this if it if it doesn't feel like this you're not you're not hunting for jobs right um let's see i actually don't care about that right now this is actually a really good story but um stephanie holbert kind of talks about her whole like career trajectory so go read this later but i'm kind of wanting to run out of time so again the job hunt this is all like super basic stuff have a resume post on social media looking for a job portfolio side projects and personal site are up to date and operational nothing's weird's on your social media network constantly and apply everywhere and so 34 minutes and we're finally to the fearless interview and it's going to be a lot like the x in the story you may be very surprised at how little is here why because your whole journey in your software development career is what allows you to have fearless interviews it's the side projects it's the open source it's the networking that's what prepares you to fight the boss battle if you're level one and you're trying to go against this like deity dude there's nothing you can do to prepare you just have to go kill pigs in the woods until you level up like um but that being said i will talk a little bit about the logistics of interview because i think it helps a lot there's usually three parts intros some type of challenge and then questions at the end so this is maybe my favorite piece of advice that any of my programmer friends gave me be prepared to answer or volunteer the what is the one thing you built that you're most proud of david said if people can answer this well that's the leading indicator if you'll hire them or not and it's never let him down specifically he looks for do you care about what you're building do you understand what you're building is it something that i personally can connect with um also on intros my little piece of logistical advice if you're signing up for a a or you're if you're trying to interview the company sign up for their service have a critical opinion about what they do understanding a little bit of business context can really drive the conversation when you're interviewing so if it's like an error tracking software sign up for them and then their competitor like one of the biggest things i've ever got dinged on with an interview is i applied to the place i didn't sign up for it and i didn't really know what they do and like the first thing was like tell me about why you wanted to interview with us specifically what did you think about our product and it's like you basically can't walk your way out or around that so like if you do this it's one of the like most insightful pieces that you can do to help prepare the challenge this is like people's most stressed out like if you read the title probably what you thought i was going to talk about is like 300 tips to defeat the programming challenge and the thing is like there are some it's like read this book and do this like but but and that's honestly what it is there's no tricks it's like hard work and then you just have to be ready i will tell you the challenges typically come in three flavors there's usually like the especially if you're doing front end stuff like react or ember or view it's like build a component like an auto complete or a star rating ui which is where things like the javascript 30 come in handy like as you're interviewing just build small dumb things so you're ready to do that the other one is like building a crud app so like specifically with full stack or backend positions i would expect that you could test drive like basic code operations on an api like that's a pretty common common challenge and so like this is stuff like to do mvc the blog and then another one is explain a solution to hypothetical problem this is easily the most frustrating one because it's super objective no subjective it's like i don't like whiteboard we don't do whiteboarding in our interview process other than like like if you want to like explain a system with like some flow charts there's like a whiteboard available but i think whiteboard coding is just dumb but i mean if you use that it is dumb so don't use that but but if you're interviewing for a place like again i think i don't know if google still does this but like when i read through this it's like part of their coding problem is like pseudocode on the whiteboard so like if you want to work for a place and they're a really good company like sometimes their interview process just has this you need to be prepared for it it's all part it's like part of the game and again read this book cover to cover build dumb things and you'll be fine i've never been in a coding like i've never been an interview so first of all for your first couple of interviews you're gonna do a bad job probably i did like a lot of people do this is just like you don't go from like i learned to play guitar on youtube too i'm playing with celine dion in one set like you just have to play like you have to kind of have you're going to have some interviews you're going to have to kind of figure out how to do things but as long as you're preparing you'll get you'll get better every time yin ying one of my favorite interviewers says practice going through the problem and thinking out loud practice explaining what you're trying to do when you're coding or explaining then coding which is actually a good skill esteban who is another amazing interviewer says practice on things like kakurank be ready to solve an algorithm problem know the difference know how to explain the efficiency of what you're doing which if you want to know how to do that read the green book for me have your ide and program environment ready if you say you do ember you better have in brazil installed and be ready to go if you say you do react have create react app installed and ready to go we usually try to have like bootstrapped environments ready but there was a time when we didn't and there's plenty of people who don't so like if it's like hey i want to see you cuz something and react and you're not set up you're burning like 20 minutes of your interview trying to figure out how to get something happening just like it looks bad even though it shouldn't be bad on you it does look bad and then questions always have a physical list of questions you're wanting to ask the employer make a couple of them personal based on things you've read and make a couple of them very general there's usually some time when the interviewer goes do you have any questions for me on most of our like more senior people this is one of the biggest things that they look at when they interview people is what questions they ask back questions i usually ask which i think are like pretty good to write on your every time list that you can just like have ready is like how do your engineers sell disagreements what is your biggest concern going into the next quarter how this is this one's actually amazing how likely are you to recommend that one of your friends works here because like if they're like uh like if you go back to like where i talked about where can you get the best job is from your friend that you know likes their job so that kind of helps you understand the culture how does communication work here uh describe the company culture this is pretty vague but like if people have like dirty laundry to air they're going to do it here and you're going to know you want to know this ahead of time what's your favorite and least favorite thing about working here how do you know you're doing a good job at work um again and then like have some other ones like have you read that they just closed the big funding round be like house of how's closing the funding round change your hiring process like what is the morale like after you just close this massive series b or something like just be ready to talk about things that these people know about you'll make a personal connection with them and you'll seem like you're already on the team and finally if you use sublime text buy a license before you interview with me if you click save and the police buy sublime cop pops up it's just like losing points for no reason that's kind of personal preference but so again the fearless interview uh review your dossier before every interview that evernote file that you have on this company that's like you've done your research your local coding environment should be set up you've solved hundreds of algorithm problems and done dozens of dummy components and apps which just happens over time you're networking constantly at meetups and conferences you're regularly applying on job boards listing sites and through recruiters and everything else you can think of if you do these things you can get a job at whatever company you want so you're at the x if you're somebody who has this fantasy job i love my job and i think that i'm there like i'm sure like i'll think that about every job from here but like like i just love what i do now i work remotely i've got two kids my water cooler is having goldfish with my threeyearold i love ember that's like i get to work with my favorite technology i love my team help other people get there there's a lot of people that are making less than they're capable of right now getting into a program the technology industry can amplify their quality of life it can help it can be the difference between my family has enough to make it and not so like have us having programming jobs if you have them help bootstrap people to get into these jobs like i think that's part of our responsibility being in a good job is helping other people get there so share your journey there are people looking like this at you no matter what stage of the journey you're on encourage the future heroes and that's where i will end also if you have finished free code camp i will happily interview you and tell you what i think like just to help get the jitters out so message me on social media if there's a flood of people i will find other people to interview you don't worry about it like if this is this is your big stumbling block we can fix that together after 174 slides i'm curious does anybody have any questions me general advice okay so the question was if you already have a job in a nontech industry it's a pretty good job any specific advice on people wanting to cut over to the tech career i think um there's basically two different trains of thought on this one you need to look at where you are now and where you're going to be in 10 years and if you hopped over to tech and took a job a pay cut in 10 years where will you be that's not i don't think that's a way to decide anything but i think it helps answer some questions going back to some of the other advice i have you bring something unique to the team so like can you tell me what field in general you're in right now for example so if you're doing supply chain management stuff there's likely tech opportunities in your field so when you add oh and i can program onto your current title it will likely give you a raise in the same industry i've seen a lot of people do this where they essentially take their current job they pivot into tech stuff and then they use that as like hey i've already had a tech job and now i'm applying for another senior position so it's a little bit of a longer path to the tech industry but it is a way to like provide like kind of that like no loss in like financial wellness path does that make sense what else i'm trying to think so uh somebody who was a literal author interviewed with me recently um which is not like there's nothing magic about being an author any one of us can go on lean pub and publish like feeding dogs for dummies and like weren't authored right but um like i was actually familiar with their work and we ended up solving some completely unrelated challenge so it's it's weird because it's like the people who really impress me is very seldom about the actual interviewing it's more about like the conversation around it it's a bad answer let me think again um interviewing is very hard not many people impress me that's that's the honest truth that's why i wrote this talk like people so i'll tell you i'll tell you conversely there have been people who have not impressed me in an interview who we've hired that have really impressed me in the job that's probably a better answer so it's like i think that's really we've worked a lot on our interviewing process to make it like we want to capture that um yeah next question so i think like in the green book the general rule of thumb is six months i don't have personal experience with that i think this is so like especially with places like google or facebook like it's pretty much accepted you're not going to make it the first pass so like applying again at a place is not bad the thing that i would tell you if you apply again you need to kind of have some like change to your story so like again this is why i'm a big fan of side projects or if you get another job that kind of helps like like change like i was here and now i'm here and i think i'm a much more compelling case to work with you that type of thing um yeah anything else okay um so this is where um i go and look at their social media this is like a big thing like i want to know who like the people also like you know how i said the best jobs come from your friends the best candidates also come from your friends so i think number one is like if somebody is like i respect bob and bob has recommended sally work here like going into that usually sally is going to be a better candidate than like rando so like any recommendations through relationships are usually very good specifically for people i feel like are gaming me for us in particular like um i look at their so if it's like a coding thing i'll look at their personal github and i actually will be like i see you worked on this project let's work on it together like when people game you they tend to be very good at the interview so you need to do something nontraditional to break up the interview process so like when you when you open an issue on one of their repos and you're like hey for our interview can you explain how this works to me that's they're going to be expecting like the standard challenge so like i think that's where you need to kind of like does that make sense are you able yeah so are you able to do any research ahead of time into your candidates yeah if you are concerned at all i think one really good thing you can do is um specifically if it's a like if you have any red flags i always opt for like can we contract for a while instead that doesn't work for everybody but it's a lot lower risk to bring on somebody as a contractor or consultant and actually get to know like yep and so i think also the thing like if we have a specific technical recruiter and she's great i think if she was here probably one of the things she would say is like going through like where are you sourcing these people from like you should also talk with the people who you currently work with and be like hey is anybody that you know looking to make a change or looking to get into this because again your best candidates will come from people that you know so if you if you love working with somebody you'll probably love working with their friends uh yep and so the comment was like uh you're not miked are you i'll repeat the comment then the comment was like in my experience the hiring pro a slower more thorough hiring process tends to yield higher quality candidates i would say this is true also our hiring process is like at minimum for back to back to back to back one hour coding challenges which i think is brutal like when i did that i was like this is insane but i'll tell you that this team that i'm working on is some of the best software engineers i've ever worked with so it's like probably true um sure so the question was uh like i i'm a pretty private person is it a big turn off for people trying to hire me if all of my social media is locked down i highly see like going back to the if you want to work at macro court be like a macro corp you want to work up startup lee you need to be like a startup person i think that what i would do in your case specifically with like twitter if as you're learning things and reading articles and like you need to treat twitter more as like a knowledge share so like if it's the case where you make a different twitter that's not personal you publish little today i learns and things i think that's actually really important because it will help your employer know that you're engaging with the community and so it's like you don't have to like put like any personal stuff on there like you know i've got kids and i very seldom post kid pictures on twitter ever even though they're adorable there's like a lot of creepy people out there and i don't want you know want to cross across those paths but i do think it's very important if you're trying to get a new job specifically you have to have some community presence and so i think i think about this a lot like if you have a house and you have like the massive privacy fence around the house every time somebody drives by they're gonna think it's a creepy creepy family creepy house even though you could just be valuing your privacy i think it's a matter of how you present yourself so it's like if you like have the nice yard and the nice face but the privacy fence in the back i think that's basically what you want you have to have something that people can see so they can get to know you i think that is pretty important but you don't need to do it in a way that puts your family at risk at all okay so the question was what social media is best for the tech industry unequivocally in my experience that would be twitter it depends on the industry like linkedin is very important for a lot of people but like nobody i know uses it instagram is never important unless you're like trying to sell products or wanting people to know how cool you are and facebook tends to be the same it's like usually highly personal stuff so like i don't know of any like i'm i'm friends with all of my coworkers on twitter but i'm not friends with any of my coworkers on facebook if that kind of explains any other questions so how would i get started on twitter so if you go on my github there's 150 open repos i open source literally everything i did it because i was too cheap to pay and it's turned out to be one of the biggest like recruitment ways that people try to recruit me so people literally do like automated searches through github on what you star and what you have and like use that to automate their recruiting process like open source as many things as you're comfortable with specifically who runs the free code camp twitter there's there's probably some way they could help you get started too if you like give a lightning talk then they can promote it and then i'll retweet it like it just kind of has to start like that so like another big thing is conferences if you go to conferences and meetups try to follow people they'll usually follow you back so like i have 700 something followers which has been only through like i know most of them so like you just have to go network like a madman or a mad person if we um any other questions was this helpful at all okay great i when i was like looking at this i'm like i feel like a little bit of false advertising since i called it the fearless interview but i don't i thought it was useful or people are just going to hate it so i'm glad you all enjoyed it cool