learn how to use angular and superbase to create a realtime chat application you'll learn about things such as realtime data fetching with superbase superbase triggers and functions how to use the Google oaf service in angular and more deji from the code angle develop this course hello everyone welcome to today's video tutorial in today's video we are going to make use of angular 17 as well as super Bas to create a real time chart application now let's take a quick look at the demo of today's project as you can see on the page we have a button that says sign up using Google what this button does actually is it makes use of the authentication Service in super base as well as Google what 2.0 service to create the authentication currently we have no users on the super based dashboard as you can see another thing you should take note of is we have two tables in in our super base setup the first one is the users table and the second one is the chart table as you can see both of these tables are empty what this user tables does is basically anytime a new user signs into the project not only do they get saved in the authentication page we see right here but they also get saved in the users table so we make use of this by making use of super based functions and super based triggers we'll get get to look into that as the tutorial proceeds but for now let's take a sample of how the integration for the authentication works so I'm going to head back to the angular project I'm going to click on the sign up using Google button and then a new page pops up this page asks us to choose an account we want to sign up into the chat dashboard so I'm going to select the first email on the browser here and then as you can see I get authorized and signed into the chat dashboard but before I show how this chart dashboard works I would like to head back to the super base dashboard and as you can see on the user table we have some details showing which includes the user's ID the user's full name as well as the user's Avatar URL we are able to retrieve all this data from the newly signed in user and then save it into our user table with that we'll be able to use it on the front end of our application anytime the user sends a message what do I mean by this if I head back to the dashboard and I type in a message this is a test and I click on send you can see we have the username which is D adoga which you can see right here the users's Avatar image which you can see right here and then the users's ID which we do not need to render into the user interface but we also have access to the dates and as well as the time the user sends the message which you can see here another feature of this application is anytime we send the message in the chat table it gets f in real time without needing to refresh the page in our angular application let's try to send another message to see how this works so back in the chat application let's send a new message that say this is a test two and then click on send as you can see the message gets displayed in real time in our angular project as well as on the super based dashboard which you can see right here so this chart table as a field of ID created at text editable as well as the same ID so we display some of these details on the page another feature of this project is as a user you are able to delete your message so if you click on this menu right here and you click on this delete drop down a modal pops up in front of you and you have presented with two prompts to proceed with deletion of your message or to change your mind if you do no longer if you do no longer want to delete your message so let's proceed to delete this message so I'm going to click on yes and then the message gets deleted while the page gets programmatically refreshed without reloading the entire angular application we make use of this by making use of the router feature in angular 17 also a user can get to log out from this charts dashboard by simply clicking on the logout button and then and then it gets navigated back to the login page another thing I'm going to do is I'm going to sign up again using a brand new user let's see if the details is going to be different from our previous user so let me click on another account and then send a message using this account that says this is a new test so I'm going to click on send and as you can see this user has a different Avatar image as well as a different name and then this user can delete their own message if they try to delete another person's message it's not going to work a user can only delete their own message if you try to do this I click on the menu and I click on delete you can see the message does not get deleted but the user can proceed to delete their own message as you can see right there so that's all for this tutorial but before we proceed I would like to highlight some very important Concepts you stand to gain if you decide to follow along with this project so in this tutorial you're going to learn how to authenticate an angular application by making use of super base and Google's oart 2.0 you're also going to learn how to integrate functional rout guard for Route protection that is if a user is not currently logged in they cannot access the dashboard the route guard is going to prevent them and log them back to the loging screen so um we're going to make use of the newly integrated functional rout guard in angular 17 to make use of this feature another thing you're going to learn is how to work with the latest control Flows In angular that is we have the new control flows which include the at if and at else block me angular 7 contain the syntax to this um directives were changed and updated another thing you're going to learn is how to manage States using signals signals was newly introduced in angular 16 and fully functional in angular 17 so in this tutorial we going to learn how to manage the data in the application by making use of signals so if you are learning angular and you've not touched signal before this tutorial is a good place to start to learn how to make use of signals Al so you learn how to create tables in super base super base makes use of progress ql so in this tutorial I'm going to show you how to integrate the tables by making use of some of the uh keywords required to create tables in super base another thing you're going to learn is how to set up security policies for created tables so as you are setting up your table in super base you have options of creating security policies that is to determine who has access to what in the database another thing I'm going to learn is how to create super based functions and Trigger events and finally you learn how to use angular to delete list and insert data into the super base table in real time so you have a lot to learn in this tutorial and I think with that we can get started with this project to get started with this project we are going to head straight to GitHub and in GitHub we're going to clone a boiler plate template for the UI Design This the link to this particular GitHub repo is going to be in the description box on YouTube to help you get started with this project to do that all we need to do is to click on this code button it brings out a drop down and then we're going to click on this copy to clipboard icon now all we need to do is to head straight to the terminal where you want to create your project and then run the command git clone and then the URL you copied from GitHub so what that does is it's going to clone the project into your project directory so once that is done you need to CD into the project directory which is ng chart D UI and then click on enter but before we proceed we need to have access to all the dev dependencies and to do that we need to run mpm install so quickly I'm going to run mpm install and then it's going to download all the packages in our Dev dependencies within our packet. Json file now that the installation is complete we can now open the project directly in our Visual Studio code editor so I'm going to run code and then dots and press enter so it's going to open the project up in Visual Studio code I'm going to increase the fonts it's more clear for you to see the code so the next step is to head straight to the SRC directory this is where angular has all the required folders needed to run the angular application so I'm going to extend it further by heading straight to the app directory and within the app directory we have a a Pages directory where we have two components we have the chat component as well as the login component so what I'm going to do is to open up the chart component and you can see the user interface code so all the code here are all static code and we have a CSS to do a bit of styling so there's nothing strange here this is just the user interface for the project the reason why I'm not creating the user interface from scratch is so that we can focus fully on the integration of our chart application instead of focusing on the user interface now another thing you should take note of is in the index.html we have the bootstrap 5 CDN available for us as you can see this is the CDN link that make reference to bootstrap 5 as well as the script for the bootstrap 5 CDN what this does is it allows us to have access to the classes some of the classes you can see here um in the user interface same thing was applied to the login components within the login components we have the HTML code as well as the CSS code to help us integrate the design which I think think is very um easy to understand so there's no need for me to go into details with that so to test how the UI currently looks I'm going to scroll down and head straight to the app components. HTML file and within this file you can see we have the app plugin and the app chat currently imported or referenced here and one feature you should know is in previous versions of angular you don't have self closing tags so Ang recently created this um update so where you can make it of close closing T self closing tax which I think is a very good development from the angular team also another thing you should take note of is in the app component.ts file because we are dealing with Standalone component which is also one of the new features in angular we need to import each component with reference in our templates for instance we're trying to reference the app plugin and the app chat that means we need to import them within the import array which we have right here now that that is clarified what I'm going to try to do is to compile the code and then let's see how it's displays on the browser so to do that I'm going to make use of the traditional NG serve command so I'm going to press enter and then the compilation begins as you can see our compilation is successful and and in angular 17 some analysis are available in the terminal that shows the sizes of your angular application the initial load um size and the time it requires to complete complete the compilation so this is the Local Host URL which is Local Host for 200 so I'm going to head to that route in the browser so to do that all I need to do is to type in Local Host 4200 and as you can see we have this button that does nothing currently because we just have a UI so if I click on this button nothing happens so we can see the login button or the login page is uh just the user interface currently available now let's see how the chart component looks to do that all I need to do is just to comment out the login tag and then uncomment the chat tag so all I need to do is save and then once the project compiles we exray to the browser as you can see we have the chart user interface so nothing happens I can click on send type in click on log out nothing is happening so we need to configure everything from scratch and then so we need to configure everything from scratch so I'm going to show you how to do it step by step with no step skipped so the next thing I want us to do is to deal with super Bas so to do that I'm going to run mpm install for super base so once again I'm going to stop the terminal and then I'm going to call mpm install at Super Bas 4/ super Bas DJs so this is the command for you to install super base in your project so we're going to wait for the installation to be complete and once that is done we can move to the next step as you can see the installation is complete and super base has been installed into this project to confirm I'm going to head straight to the package.json file as you can see this m means modified the that is a change has occurred in this file and when we scroll down a little bit we can see we have at superbase for/ superbas DJs and it shows the version which is currently version 242.4 that is the current version as far as this tutorial is concerned in the future you might be following along this tutorial and you might be seeing a new version probably version three or version 4 or version 5 depending on the year you decide to follow or go through this tutorial so um some slight changes might have occurred during that time but for now with version 242.4 which is the latest version we can now continue our integration so the next thing I want to do before we proceed is to generate our environment variable file um to do that we need to run the command NG generate environment so what this folder does basically is to help us create a place where we can store our API key any API key we get from super base this is the place to do it so if I go back to the project you can see we have this environment folder and there's environment do development for when you want to save the API key currently in the development mode and if you want to go live you can make use of the environment. Cs file so depending on what you want to do but for this project um since we are still in development mode the API key is going to be configured in the development file environments. development file so with the next with that we can move on to the next step which is to look at the authentication Service in super base so let's head straight to super base so now that we are inside of the super Bas dashboard and I'm signed into my accounts if you don't have a superbas account all you need to do is to go to superb.com and then use your GitHub account to authenticate yourself into the super base dashboard now you can see I currently have two projects called NG gallery and Ng super I think I've used this project in the past to create uh angular tutorials but for the sake of this tutorial I want to create everything from scratch so I won't use any of these predefined projects in super base what I'm going to do is to create a new project so within this organization I'm going to click on the new project button and then choose the organization which I currently have which is the suar 10 or so once I click on that we have presented with a new form so we need to fill the form so the project name is going to be called NG chat and then the password I'm going to generate the password dynamically by making use of a browser extension called bit Wen so I'm going to click on generate password and I'm going to type in the password and super base considers the password as strong and then I'm going to select a region um for best results like that is for in order that is in order to reduce latency you you need to select a server that is closest to your location so for me um I think I'm going to go with an European location which is preselected for me I'm going to go with um frankfor so as you can see you have this text here that says select the region closest to your users for best performance so that's a very important criteria so I'm going to click on create new project so the project is going to get configured for us and with that we can now create our our authentication as you can see the setting of of the project is now complete and we get presented with a welcome to your new project uh message and the project status is showing this um yellow icon right here so but what we need to do actually is just to over over the sidebar we have right here and Edge straight to authentication because we want to authenticate our project and once you in the authentication tab all you need to do is to click on providers and under providers you have so many providers I think in this YouTube channel I've gone over so many of these providers and today I'm going to try a new one which is Google so I'm going to click on Google and I'm going to enable signing with Google so the signing with Google requires two input fields to be filled up that is the client ID for the art Service as well as the client secret for the oart service so we need to get these two requirements from a platform called Google Cloud platform so if you are not familiar with Google Cloud platform if you have a Google account you can always create a new project in the Google Cloud platform and then derive the client ID as well as the client secret which is what we are going to do next so you don't have to worry about it I'm going to show you how to do it in a simple step so let's head to gcp and see how we can get our client ID as well as our client secret so inside of gcp as you can see I already signed in and if you're not signed in once you go to console. cloud. google.com you're going to have a page where you can log in using your Google account once you sign in you'll be required to create a project for me I have some projects currently available as you can see I have about seven or so projects but for the sake of this tutorial I'm going to start everything from scratch so I'm going to create a new project in gcp so that you can follow along and see how to get the client ID as well as a client's secret so let's click on new project and then we get presented with a new field that says project name as well as the project organization so the project name I'm going to call NG charts and then I currently don't have any organization I can select or if you have an organization you can always browse through the organization and then select them but for me I don't have any organization so all I need to do is just is just to click on create as you can see the project is getting created for us through this loading icon so it's going to take probably before I finish speaking the project has just been created so we need to select the project because the current project selected called angle we need to select NG chart so to do that we click on this drop down right there and then click on NG chart so once NG chart is selected we can now proceed and to proceed we need to add to apis and services you can see it's here but another place where you can locate the API and services in case it's not showing in this quick access uh section of the browser I'm going to close this message you can click on this menu icon this navigation menu icon and then it's going to extend the sideb and as you can see you have API services so under the API Services what you need to do is to click on credentials so I'm going to click on credentials and it's going to take us to the credentials page under the credentials page we need to create credentials and to do that we need to click on this create credentials button above so I'm going to click on that and what I'm going to select is the art Cent ID which is what we need in our super base dashboard so I'm going to click on that and it's going to take us to the page and within the page there's a requirement for you to create a client ID you must first configure your consent screen so for us we currently have a brand new project and we've never configured a consent screen before so we need to do that for us to have access to client ID so all I need to do is to click on this configure consent screen so this screen is going to load out a new page and we have two options that is for the user types we have the internal and the external so the internal is just a able for users within your organization no need to submit your app for verification while for external users uh you need to submit your app for testing mode and things like that but for us we are just working on a educational content so we're going to select um internal radio button so so we have a warning button which doesn't allow me to click on the internal radio button because it says you are not a Google workspace user all right fine I'm not a Google workspace user so let's just go with with the external anyways and then click on create so you can see we have some forms we need to fill so let's start from the beginning the app name so the app name for the consent screen I'm going to stay consistent and go with NG chat and then support email I'm going to select my email the code angle gmail.com for the logo I'm just going to leave that blank for now um next up it's asking for the application homage that is the link to the project homepage this is going to be in Local Host uh because it's a we are still trying to create the app in development so we only have The Local Host URL so I'm just going to paste in uh Local Host 4200 within the application homepage which is our current homepage um provide users with a link to your public policy um I don't have a public policy terms of service we don't have uh links for that so uh we're going to scroll down and then developer contacts email address uh it's also the code angle so I'm just going to enter the code angle at gmail.com and then I can click on Save and continue then under the Scopes we don't have any scope I'm going to click on Save and continue and then for the test users currently I don't have any users I want to add but let's click on this add users and see okay you can add as much as 100 users to test your application but for this application this is mainly for educational content so we don't need to add any test so I'm going to click on Save and continue and finally it shows us a summary of all the forms we've filled and then uh if we want to make any edit we can always go back but I think we we we're good to go so I'm going to click on back to dashboard now that we are back to dashboard I'm going to head back to the credentials we have now as you can see we've Now set up our or consent screen so I'm going to head back to credentials and under credentials I'm going to click on create credentials once more and then the all client ID which is for the second time so now you see we get presented with a new form instead of uh the notification being that we should create a content screen we've created our consent screen now it's asking us for application type so let's click on the drop down um our application type is actually a web application it isn't a Android app or a Google Chrome extension so I'm going to select we web application and like I said I stay consistent with the name and I'm going to call it ngat once again so with that we can now click on create to create our client what id so it says notes it takes it may take 5 minutes to a few hours for settings to take effect for the sake of god let's hope this doesn't take more than 5 minutes all right I'm going to click on the create button and as you can see we have our client ID as well as our client secret created for us and then we can download it as Jason and we can also see that the status is St as enabled and luckily for us um the client ID was created in less than 10 seconds now all we need to do is just to copy these values into our superbas dashboard so I'm going to start with the client ID so I'm going to grab the client ID Ed stra to super base paste it within the super Bas dashboard and then head back to the gcp click on the client Secrets uh and then paste it within the client secret what and then back in the what back in the gcp I'm going to click on okay so there's this um condition here that says call back URL for what I think we need to uh include this in our Google Cloud platform so that it can Al always reference this um super base application so I'm going to copy it and I think we forgot to set it up while we were trying to create our credential so to do that I'm going to edit our NG chart uh what and I'm going to add the redirect URI which is here so under the redirect URI I'm going to paste it uh I'm going to paste in what was given to us in super base you can see this is the Callback when using the um signing with Google or web so it's our callback URL we need to provide it under the authorized redirect URL so I think we are good to go with that we can now click on Save and I think that's what we need to do Under the Google Cloud platform now before we round up this portion of the tutorial do not forget to click on save for our enable signing with Google to be completed now now that it's successfully saved we can now head back to our Visual Studio code to integrate our authentication Service to do that what I like to do first is to configure the angular router so I'm going to scroll down to app. r. CS file and within this file I'm going to close the rest of the open tabs which we don't need So within the app. routes. TS file you can see we have a route array and within this route array we're to create the route object now this is going to be a functional route which is the latest syntax in angular 17 so let's open the first object and within the first object we're going to set the parts and the part to this is going to be charts which is our chart dashboard and then we can now click we can now make use of the load components to import the components for this part so I'm going to type in load component and we have a parentheses a f arrow and then we're going to call import and within the parentheses we're going to reference the import Page by doing for/ Pages for/ chat for/ chat. components and then because it returns a promise we're going to make use of do then and then passing an argument of coom and then the coom represents the component so I'm going to say components dot we're going to call the chart component so I'm going to say chart component so that's first all we need to do to create the first route object for the chart component so I'm going to duplicate this so the second component which is the last component we have is the login component so all I need to do is just to type in login I didn't spell login correctly and once I type in login I can just replace chat with login and then the component with login component so that's what we need to do so in case the user wants wants to pass in an empty part we can handle that as well so I'm going to do at this and all I need to do is just to remove the login part which we have right there so I'm going to save so anytime the user enters it doesn't enter a for slash that is if they enter a empty if they enter a empty part they get navigated to the login component so with that we can now head straight to the integration of our login and logout function so quickly we need to generate a service to do that so I'm going to head straight to the terminal and and then I'm going to run the command NG generate service the s represents service so under the service I'm going to generate the service within a Services folder and I'm going to do for/ this is where our or service is going to liveing within a Services folder as you can see the old service folder has been generated for us so let's head back to the project and then let's locate o service which is right here the first thing I want to do is to create an instance of the super Bas client to do that we need to configure the super base URL as well as the super base key within our environment variable so we need to head back to the super base dashboard and then head straight to project settings and within the project settings click on API which is under configuration and then we need to grab the super Bas URL so I think we can find the url somewhere here at the top of the page as you can see project URL so I'm going to grab the project URL Edge straight to the project and within the environment. development. TS file I'm going to set production to false and then I'm going to call super base URL I'm going to set that to the super base URL we copy just now from super base and then the second one is going to be the super base key so all we need to do is just to say super super base key and then we need to grab the key as well so within the dashboard so the key we have two types of key we have the non public key and the service Ro secret so for the sake of uh this project because we we have we are going to have Ro level security enabled for our tables so this is the right key for us so I'm going to grab that and then paste it within the super base key object so I'm going to save and then we can now use this super base object within our all service while creating the super base instance so quickly within the Constructor in fact before we do it with within the Constructor I'm going to create a variable called super base and inject the super base client into it so what I mean is we're going to type in private super base we make it of private because this this variable is only in there within this file so super base and then you can just give it a type of super base client which we need to inject and you can see it's injected right there at the top and it gives an error that says super base is declared but it value is never read and also property super based as no initializer so to get rid of this you can either make use of an exclamation mark or a question mark any of these two works but I'm going to use the exclamation mark That's the convention I am comfortable with so we can now ex straight to the Constructor to configure our super base client so to do that I'm going to say this do superbase is equals to create client which we also need to import as you can see above we have the C client imported I'm going to open a parenes c and within the parentheses we need to configure our environment super base URL and our environment super base key so to do that I'm going to do environment which we need to import as well so we have imported environment from development file so I'm going to say environment dot so it gives us the option of the super base key and the super Bas URL but the first one we need is the super based URL so I'm going to call that and then finally we can now call the environment do super base key so that's all we need to do to configure the super base client we can now make use of this instance called super base anywhere within our project to access the various methods available for us to configure our logged in to enable us also to sign out from the application so the first thing I want to do is to make use of the super base on all states changed so to know the meaning of the on all states change in super base I'm going to head to the browser and type in on or state change in super base as you can see this method allows to listen to All Events I'm going to open up this particular link to get more insight on what it means as can see it enables us to listen to all events that is authentication in events so that is you can see the highlights below it allows us to subscribe to important event occurring on the user session but one important thing about this particular event is it emits three events the first one is the initial session the signed in session and the signed out session so what it does basically is it allows us to track the current state of the user that is if the user is either signed in or signed out so we need to always know this to determine how we are going to render the user sessions in our project so I'm going to head back to the browser and let you see what I mean so within a Constructor we can just say this do superbase do do on state change which we can see right here and then it's going to take a parentheses and then it's going to take in two two arguments the first one is called event and the second one is called session so I'm going to make it of a f arrow and then open a bracket and what I'm going to do next is to console log each of these arguments so the first one is the event I'm going to type in event and then under the second console log I'm going to type in session and this session so to see this in action what I'm going to do is to save I think we should be able to get the instance of this event once to save so I'm going to save and then type in NG ser and then let's see if we get anything console logged in the browser quickly we head back to the browser and then I'm going to open up the inspect button and then head straight to the console now as you can see we don't get to see anything within the console now the reason for this is because this particular service is not being called by any of our components but once we reference this service in any of our components that is our login component this is where we need to make use of the authentication Service we're going to see this console loged events in the browser so what I'm going to do is to create the sign in with Google what service so below the Constructor I'm going to say a sync and then I'm going to call it sign sign in with Google and it doesn't take in any argument so I'm just going to open the bracket and within the bracket we're going to await this do superbas do dot then we can see the various methods available to us what we need to do is to sign in with or so I'm going to say sign in with what and the sign in with what takes in a parentheses and an object and within this we have some conditions we need to set the first one is the provider we have other options but for this tutorial we're going to only make use of the provider to signify the type of Provider we are trying to work with which is as you can see from the super based dashboard is Google so if you're working with every any other one maybe like the Apple or GitHub you need to reference it there right here to show the type of what service you are working with so we working with Google currently so before I proceed I would like to create the sign out method as well so I can just say a sync sign out let's give the O an uppercase and then open a bracket the sign out doesn't also taking any argument so all we need to do is just to await the response and by saying this do superbase do what then the sign out method available for us in super base what this method will do is to clear the entire local storage and possibly the session storage in the browser when the user tries to log out so now let's try to call this methods within our login component so I'm going to exray to the login component and within the login component we need to inject our all service so to do that we're going to make use of the injector which is one of the new updates available for us in angular instead of making use of the constructors can we can just say private or is equals to inject and then we're going to call the all service which I as you can see is import imported for us above we also need to inject the injector within our components within angular core so I'm going to click on the inject and then we can just inject it within angular core which you can see right here so now we now have a reference to the instance of the earth service so now let's create the method to handle our authentication so I'm going to say a sync and within a sync I'm going to say handle or let's call our method handle or and then we can now say response is equals to await let's reference our all service by saying this do dot we have two options currently sign in with Google or sign out okay it's called sign in Google let me check I I'll prefer it to be called sign in with Google so I'm just going to grab this and then paste it within our login component and then add the parentheses at the end so with this we can have access to signing with signing in with Google Now we need to and do this using the click event in our template so to do that let's head to the HTML file of our login component and we're going to call it I'm going to change this a tag to button so we don't have the hre we don't need the hre so this is going to be a button and then okay let me change the syntax the button should be below so within the button let's make use of our click event and line angular so I'm just going to call click which is equals to handle all so I'm going to save everything we've done so far far and then head back to the browser so for this I'm going to refresh the components and then I'm going to try to reference the login component within our app components for now because we've not integrated the OD guard so for now I'm going to load the login component so we can test out our Google login method so now we have sign up using Google so I'm going to click on sign up using Google and let's see the response we get as you can see it asks us to choose the particular Google account we want I'll clear the console before I click on one let's select done to stay gmail.com and it's going to ask us if we want to continue I'm going to click on continue and then our request is successful as you can see our request is successful and if you can look at the console for now we are not routing to the dashboard on successful response for now I want us to take a look at the console.log we did in our service so I'm going to close this and this as well in our old service you know we are console login the event as well as the session so let's take a look so you can see the session as an object while the event showed sign in that is this user is currently signed in so with the session it shows an object of the user's detail like the email uh the date it was created the role which is currently authenticated and other details which you might consider important it also shows the refresh token as well as the provider token and the access token so we can handle all this responses to configure your application while you are authenticating your user so what we want to do next is to create the authentication guard that is when the user is signed in they get logged into the chart component but if they are not logged in they get shown on the current page which is the sign up component so let's integrate the O guard and to integrate the O guard we need to create a guard so I'm going to stop the terminal once again and I'm going to run NG generate guard and then the guard going to be called or because it's oh I made a mistake I didn't put a g I didn't put generate it's it's supposed to be NG generate guard then the O guard which is the name of the Guard so it's going to generate a new o guard file for horse so it's ask it presents us with some prompts if we want to create it using the can activate they can activate child they can deactivate and they can match but the one we need is the can activate H guard so I'm going to select can can activate it and as you can see it's the two files required the test file and the O guard file itself gets generated so we're going to head straight to visual studio code and let's take a look at the Ard file I'm going to close the up routes as well as the Lo login component here so you can see this is a functional G in previous versions of angular I think from angular uh 15 downwards we still make use of class based Old Guard but for angular 16 and above the functional guard was introduced so if you have not use the OD guard so this tutorial is going to explain to you step by step how to use the functional o guards to configure your angular applications uh authentication States now before we begin our integration here we still need to do some things in our all service file so one of those things is to get the login state of the user so to get the login state of the user we're going to make use of the session this session we are getting we need to set it to local storage once we save it in local storage then we get a way to assist or to determine whether our user is currently logged in or not this particular data is important while configuring our Ard so to do that below the console logs I'm just going to say local storage remember we within the All State change this is where we get to determine our alt event and our session event so we can say local storage do set item because we are trying to save the session and I'm going to call it session and then I'm going to make use of Json do stringify so I'm going to say Jon do stringify and I'm going to save the session now we need the user session because when you check the console log the user session contains the information we need so I'm just going to say session do user so let's remove one of the brackets so I'm going to say session do user so that's all we need to do to save the item in local storage so now we now need to create an a condition that if the user exists then we want to navigate the user to the Chart component so so do that I'm going to say if session do user so if there's if the session do user object exist then I can say this. router. naate and then we can make reference to the Chart component by doing for/ chart so we have this error we need to inject the router by making use of the injector so I can just say private router is equals to inject and then we can call the router so we need to import two things the router as well as the inject service so you can see the error disappears and we can now proceed with our integration so now we need to head to the O guard service so within the O guard service what we need to do is I'm going to leave the state as it is so I'm going to say um we need a particular geta function for us to determine the state of the application so after saving this session in local storage we also need a geta fun function and this geta function is what we use in this um Ard so let's quickly create a geta function So Below the Constructor or outside the Constructor you can just say get anytime you click create a getter you signify it by saying get it's going to return a bulling actually so I'm going to say get is logged in that is if the user is logged in then I'm going to signify it as a bullying then we're going to have a bracket so we're going to create a variable that says con user is equals to local storage we need to get get the item so I'm going to say local story. get item so what item are we trying to get we're going we're trying to get the session and then we're going to save it as string and then we now need to return the geta because without the return we always get an error that says an accessor must return a value so that's one of the conditions of creating an accessor so to return the value we're going to say return and then we're going to say user which is variable we created above if the user is undefined so if the user is undefined we can return false however if the user is defined we can return true so this is the data we're going to use in our old cut to to determine if the user is logged in or not because anytime the user session is available it's going to return true if the user SE is not available is going to return false so back to the O guard we can now say if we need to make use of the injector here to to reference our all service so I'm going to say inject then I'm going to call the all service all service which has just been imported above let's import inject as well so if the O service dot you can see the methods available for us we have signing with Google we have sign out then we have the geta which is the which is called is logged in so if o service do is logged in is equals to false so what do we want to do we want to navigate the router to the login page so to do that we need to make use of inject again and this time around the inject is going to deal with the router we are going to bring in the router which has has just been imported above so we're going to say inject router. navigate and then just like we did in our or service file I'm going to reference for/ login here and then we need to return something we need to return false so if the login States is false we navigate the user back to the login page else we do what we return true so where the true comes in is where this router. navigates moves the user to the charts that board so this is how the router works so I'm going to save everything we've done so far and then let's test it out but to do that we need to run our project Once More by calling NG Ser while the project is compiling I'm going to exray to the super Bas service and I'm going to delete the current user because while we're creating the authentication we created a new user which is the don't to stay email so I'm going to delete this particular user so let's get this deleted and then our project is still compiling the delete is successful So currently we have no users call so now our compilation is complete the project gets refreshed and we need to clear the local storage so I'm going to clear the local storage and this is so that we assuming we assume this is a new user coming into the application I'm going to refresh the page so now what I'm going to do is try to access the chart component so I'm going to say for/ chart as can see we get navigated back to the login page so let's try for for/ SL chart once again we get navigated to the login page so now let's try to create a new user so let's click on sign up using Google select the user we were using before which is done to stay at gmail.com and for some reason it doesn't navigate us to the chat D dashboard okay let's investigate why that is the situation oh I think um we forgot to remove the configuration we did in the app. component. HTML file we need to get rid of this this is confusing our application so we need to get rid of it and then remove it from the import array as well so I'm going to get rid of this we no longer need them to display the application now we can now save and then head back to the page yes as you can see we get navigated to the chat application because the user is signed in P so now let's integrate the logout button within the chart component we already created the function in the service so all we need to do is just to head straight to the charts component and with the chart component we can create the logout method so I can just say a sync logout and then we need to reference our or service so we need to make use of the inje injector to do that so I'm going to say private or is equals to inject and then all service which we need to import both so let's import the inject so we have the inject method imported so we can now say this do dot we have the sign out method so um it returns a promise so we can just say do then and then make use of a fat arrow and then we can just make use of the router by saying this do router. navigate we need to navigate back to the login page and then if there's an error so we can just say do catch passing the error argument and then probably Aller an error an Aller error do message cool so we can see see we have the error this do router um has not been ejected it doesn't EX so we can just quickly say private router like we've done so many times in this app inject and then call the router that is all so let's test out our log out if it works so I'm going to clear the console click on log out oh we are nothing happens because we haven't made use of the click event and so quickly head straight to the HTML page I completely forgot about that so within the button I'm going to make use of the click event and so we can just say click and then is equals to C the log out method and then save once again so this should work now that we have the click event so I'm going to click on log out and you can see the user is logged out I'm going to refresh the page and then so let's try to access the chart URL without logging into the application let's see if this works so I'm going to say for/ charts and whoo for some reason despite the fact that we are not logged in we're able to access the dashboard this is not good so to prevent this there's one final thing we need to do with our OD gu that we need to call it within our router so the applications we do not want or the components we do not want anyone to access without logging in we need to call out the odard right there using can activate so those components include the chat and the chat alone only logged in users should be able to access our chart component So Below the chart part I'm going to call can activate which needs to be imported into this component so can activate and I'm going to make it of a square bracket and I'm going to call alt in lower case alt guard so we need to import our alt guard which has been done above and then we need to put the comma so it gets R of the gets rid of the error so I'm going to save and then let's head back to the browser to test things out once more in fact we don't because immediately the O guard was injected into the router it routes the user away from the dashboard because they are not currently logged in let's try to access the charts component once again from the URL as you can see our o guard is in full control by navigating us back to the sign sign up or signing with user button so only signing users can access our dashboard but there is one more thing I want us to do before we complete our authentication part of this tutorial so I'm going to click on the sign up with Google once again and then I'm going to select one of the Google accounts which is the first one we have right here and then as you can see we get logged into the into the component but there's an there's a one here that says navigation triggered outside angular Zone did you forget to call NG zone. run because it's within the angular Zone we need to make use of ngzone to get rid of that error message so quickly back to our service um where we have the router I'm going to say this doore NG Zone do run the NG Zone also needs to be injected into this component so let's not forget that but for now I just move the router into the NG zone now let's inject NG Zone into this component so quickly above below the router you can just say privatecore NG zone is equals to inject so we need to inject ngzone so that gets rid of the error so let's save and then let's let the page reload we can see that error gets disappeared and even if we log out let's log out and log in again to see if we get to see that error message we can see it has completely disappeared so we do not have the NG Zone error so we are good to go so with that we've been able to complete the authentication part of this uh tutorial so next up is for us to start creating the tables for our chart application so for this application we're going to have two tables created in super base now let's take a look at this readme.md file so this readme.md file contains our database schema so like I said the link to this GTH up repository is going to be made available in the description box so it contains everything you need to know to create a database table in super base so the two tables we're going to create is the first one is the users table then the second one is the chat messages table so these are the two tables we are going to be creating and the two schemers include uh the ID the full name and then the Avatar URL while the chart table is going to contain the ID the created art the text the editable and then the sender that is the sender uid and then if the message is going to be editable or not the text is the message being sent and the date is the dates in which the message was sent and the ID for that particular message so um let's get started with the users table now to create the users table let's straight to super base within super base I'm going to click on the home button and there's something thing we need to note to create a table in super base you can either use the table editor or the SQL editor so I'm going to make use of these two options so the first one which is the table editor is going to be used to create our message table while this SQL editor is going to be used to create our users table so to get started with this I need to copy some of the commands for the users table which is within our redme file in fact to dis playay this text in a clear format I'm going to open this using a markdown preview which makes it looks like an article so you can see by the time I push this to get up it's going to appear this way because it's in markdown format so this is very clear to read as you can see you have for creating a user table this is the command to enable Ro level security this is the command then to enable permit access for users to access their profile so all the commands have their own heading so uh everything is perfect clear so let's get started with creating the users table so to create the users table this is the command to create the users table so I'm going to grab this and then xray to super base and paste it within the SQL editor now you can see this um queries is Untitled so let's give it a name so I'm going to click on REM rename and luckily for super base as a superbas AI that can help us to remove the buing of trying to come up with a name for our query so I'm going to click on rename with the super base Ai and you can see it gives it a name as well as a description that fits the particular profile of our query so I'm going to click on rename query now to execute this query before I click on ex uh run to execute this query you can see the preview it says create table which it says create a public table and the table is going to have a ID with a type of U ID a full name with a type of text an avatar URL with a type of text and then a primary key which is the ID we have right here you can see um the ID above is it serves as our primary key now when I click on run this table is going to get created for us as you can see from the result success no rose returned now before we proceed I want to quickly take us back to the table editor and let's see if a table has been created for us as you can see we now have a users table with an ID with a full name and then an avatar URL cool now let's head back to the Avatar let's head back to the SQL editor rather and then let's click on new query to create a new query for our users table so the next thing we want to create is to enable Road level security so to enable Ro level security I'm going to grab this SQL command and then head back to the SQL editor paste it in and then click on run as you can see Ru level security has been enabled and automatically um the super base AI helps us to the name and we by clicking on it again it helps us to generate the description and I'm going to click on rename query so I'm going to click on new query once more and I'm going to grab the next query which is to permit access users access to their profile so users can access their profile when they want to access their profile so I'm going to grab that policy and then I'm going to paste it in and then I'm going to rename the query by clicking on rename with AI super base or super base AI as the case may be and then um I'm I'm going to click on run so we have more queries to run so the next one is to permit users to update their profile if a user wants to update their profile so I'm going to click on new query once more and then I'm going to paste it in click on the menu we have right there click on rename query rename with super base Ai and then click on rename query then run the policy that is the query and you can see it's successfully integrated so the next one is the super based function so for the super based function we need to grab this particular query and I'm going to do a bit of breakdown for this I'm going to click on new query and then paste it in so as you can see this query this function can be a bit tricky now depending on the old service you are using the values needs to follow along with the type of service you are using for us the O service we are using which is the Google Service as a full name metadata as well as a avatar Ur URL metadata so if what whatever go authentication you using probably using GitHub or apple or Discord you need to check the metadata because if you just copy this query which has a full name and Avatar URL it's going to return an error it's not going to work to make this more clear I'm going to head back to my application and then I'm going to head straight to uh probably the the local storage and within the local storage you can see the app the user metad data rather under the user metata metad data you can see I have something called Avatar URL and I have a full name so these particular keys are what I'm referencing in this particular database function this query function for GitHub and other authentication Service you may not see full name there you may not see aat URL that that reference the image you may see other things so you need to be careful of that whatever you want to reference you need to check the user metadata and then reference it within the query if I wanted the probably the phone number or the name or the picture so all I need to do is just to duplicate this then change the string right here to picture or whatever is within this key right here so I thought I should make that clear so let's change the query Name by clicking on rename with super base Ai and then click on rename query so I'm going to run that function and it says there's an error on line 8 um I think this trailing comma shouldn't be there so I'm going to click on run again and this time around it's successful now I think the final thing need to run is the super base trigger so what this does basically is every time a new user signs in it saves their data into the data table it triggers the table to save the new user so um I'm going to paste that in so it's going to insert each new user into the user's table we're going to see how that works once we integrate it with our angular front end application so I'm going to click on rename query rename with super based Ai and and then click on rename query then we can run the trigger and with that we've created all the queries for our user table so I'm going to go back to the user to the table editor rather and then select users so you can see under the alt policy we have two policies the select an update policy created for us because we uh we did it through the SQL editor so normally you should be able to do this um using the table editor if you decide to create a new table by making use of the the table editor format you need to fill the forms but to do that um that will be when we start creating our messages table but for now we need to create the road level security we need to enable it for our users table I think that's the last thing we need to do as far as this table is concerned so to do that I'm going to click on all policies and then I'm going to click on create a new policy so this policy is going to be select so there are different policies you have the select the inser the updates delet and the all policies but for this case we have the select and I'm going to set the expression to true so that is the users have read access so I'm going to give it a policy name for this form we don't have super B it to help us out so we need to just say probably enable read access so we've enabled read access so users can access their profile by setting it to true and then we can now click on Save policy and we've been able to create a ro level uh security for our uh uh users table so to test this out you can see currently we have no users the table is currently empty so what I'm going to do is under authentication I'm going to delete the current user we have I'm going to delete this user and then I'm going to log out clear the local storage open up console and then I'm going to refresh the application to ensure everything is in sync so the idea is anytime a new user registers into the application we now have them available within the users table so I'm going to open up the table editor and select users and let's see when the new user logs in if we are able to retrieve the ID the full name and the Avatar URL this data is going to be what we use within our application uh within our angular application to display uh the user's full name as well as the image so let's see I'm going to click on sign up using Google once again then I'm going to select this account and as you can see we are signed in so I'm going to head straight to super base and as you can see we now have this data we have the ID we have the full name and we have the user URL the Avatar URL rather so I'm going to grab this Avatar URL um let me copy everything and then let's paste it here let's see what it displays you can see it displays the Avatar of that particular user which is available on Google so we can now persist that particular image within our chart application right here every time a new user signs in the trigger gets um activated and then it saves the data within our users table so it can save as many many users as possible that signs into the application so I think that is the implementation for the users table so the next thing is to create another table which is the message table so to create the message table I'm going to click on create a new table this time we are not using the uh SQL editor so I want us to learn the difference between using the SQL editor and then using the uh the form we have right here to create the different tables so uh using the user interface let's give the table a name so I'm going to call the table chart for description I'm going to skip that for now enable Ro level access yes I'm going to say that true and then um another thing is because this is the chart we want to enable real time broadcast that is every time a message is being uh sent to this table we want to display it in real time instead of having to reload the page so we need to set that through so um the next thing we need to do is remember we are following this particular schema that is the table needs to have an ID it created that field it TT field an editable field and a sender field so back to the super base um we need to change the ID from in 8 to UU ID and then we can set the default value to a random ID then the created art we're going to leave it the way it is so we're want to add a new column and the new column is going to be it's going to be text and it's going to be a type of text as well and then next up before we create another column we don't want this to be notable so I'm going to disable this field so the next thing is to create the editable field this allows the user to determine whether they can edit their data or not so it's going to be a buling so for default value going to set it to false this is not going to be nullable as well and then finally we have the sender so the person that sends the message is also going to be a uu ID as well and then the type is going to be o or U ID so it's it's not going to be nullable as well so we need to also add a foreign key relation so to add the foreign key relation I'm going to select the add foreign key and then it's going to be in the a public schema and then the table is going to be the users table and then we can connect it using the sender uid and then we're going to make use of the uid so I think that's all for the actions we need to set the actions we need to Cascade the actions so I'm going to select Cascade um so anytime the update happens it it's going to update all the records reference to this table same thing for the deleting as well it's going to update all the records in the table so I'm going to save and for with that we've been able to configure the current key relation by connecting the sender ID with the current user ID so I think that's all we need to do so I'm going to click on Save and then I think we are good to go now the final implementation for this chart table is to add Ro level security policies so this is going to have about um three to four Ro level security policies so the first policy is going to be the delete policy so for the delete policy I'm going to select delete and then delete is going to be called delete by user ID and then I'm going to scroll down and the SQL expression is going to be if the O id. uid rather If the. U ID is equals to the sender ID then um you can delete your message message that means you're able to delete your own message you can't delete someone else's message so that's uh the condition the SQL condition for this particular uh policy so I'm going to save so that's all for the delete policy now okay there's an error oh I use 3al 2 is supposed to be a single equals to I'm used to writing so much JavaScript I'm sorry about that so the next thing is to create another policy this time probably let create the insert policy this policy helps to determine how we want to insert the data only authenticated users can insert data and quick pause before we proceed with that particular insert policy there's something I missed with the delete policy um only authenticated user can delete once a user is logged in they are the only ones that can delete a particular message so I forgot to um call that so now we can now create a new policy called insert so for the insert policy we are going to call it insert for authenticated users and then the SQL expression for this is going to be if the sender is equals to the. uid and created uncore art is equals to now so if the sender ID is equals to the alt ID that is if the authenticated user ID is equals to the person trying to send the message and then the date of the creation is the current date then the user is able to insert data so I'm going to click on insert before I skip that um I'm going to say this policy so the next policy we are going to create is the read policy AB ability to read uh the policy so I'm going to call this read access so as usual only authenticated users can uh read uh this message a user that is not authenticated cannot read a message so all we need to do is just set it to true it's a bullying so once you authenticated then you can read a message so I'm going to save this policy and then the final policy we need to create is the update policy although this feature is not created within this application but for the sake of people who might want to integrate it into the project so I'm just going to create this policy so I'm going to call it update user based on ID so the public role is going to be authenticated and then we're going to say if the. uid is equals to Sender ID then we are allowed to update the message so so you can only update a message if it's the message you created yourself so I'm going to save this policy and those are all the policies we need to create for our message table so I'm going to go back to the table editor and you can see uh on the chart table we have four o policies and on the users table we have just three art policy so with that we can now try to integrate this within our angular application so what we want to do now is to interact with our chat table in super base we need to have the ability to create a new chart then fetch the newly created chart in real time and as well as delete the created chart and to do that we need to make use of services in angular so let's create the services folder so back to the terminal I'm going to stop the current terminal and then run a new command using NG generate service and it's going to be within a super based folder So within the super based folder we are going to have our chart service so I'm going to press enter and then the new service will be generated for us now that our new service has been generated let's head back to visual studio code and try to locate where this service is created So within this folder called super base we can see the chart service and within this chart service we need to reference an instance of the super based clients which we already did in the old service so to make this process easier and faster I'm just going to to head to the O service and grab the super base variable instance and then paste it within the chart service instance we need to import super based client another thing we need to do is to grab the code within the Constructor so I'm going to grab this and then I'm going to paste it right beneath our declaration and we're going to wrap the Constructor with the bracket so we still have error messages because we haven't imported the right modules so I'm going to import create client as well as environment and with that we are good to go and we can now reference super base within this angular application within this angular service so the first integration is going to be the ability to create a new chart in our application so to do that we need to create a new function so let's call this function chat message so to do that let's just say a sync chat message and it's going to take an argument and it's going to be a argument of type of of text of string because we need to pass in a text and remember within our super base chart table we have a text which also accepts a types of a type of string as well so we need to configure it in a way whereby anything we type within the input field can be saved within our chart table so within a try catch block I'm going to say try and then catch and the catch is going to have an argument of error and then we can alert error so let's create a variable object and within this variable objects we're going to have two arguments so the first one is going to be the data and then we have error so we're going to set it equals to await this do superbase do from and we're going to try and access uh the data from we're trying to reference our database table which is called charts if you head back to super base you can see that we called our super base name charts our super base table chart and then we want to insert so we have different option we have delete fetch um select but for this uh situation I want to insert into the super base table so what are we trying to insert we are trying to insert the payload of text which is the argument we have up here so now that that is determined we can now create a condition that says if error that is if an error occurs during this process we want to Aller error do message so if there's no error so we can proceed to return the data so I think that's all we need to do I'm going to save that and let's head straight to our chat component to access this particular service so within the chart component. CS file I'll need to create a new method as well so this method is going to be called unsubmit because we are trying to submit the chart and push it to our database table so within this unsubmit method we need to create a form to make this work so what do I mean by this when I head back to the browser anything within this input field we want to send it straight into a chart table so so to get any data within this input field we need to make use of reactive form for this project so so to do this we need to import some API from angular forms which include form Builder form group The reactive form modules as well as validators let's get started with the reactive form module So within the import array let's import the reactive forms module as you can see we have it imported above another thing we need to import is the form group so we need to create an instance of the chat form so we can just say chat form and then we're going to attach it to an instance of form Group which we need to import as well and we need to attach this variable to an initializer by making use of the exclamation mark and with that we can now exray to the Constructor um currently we don't have any Constructor here so I'm going to create a Constructor and within the Constructor we can just run this do chat form which is the name of our chart and then we're going to say is equals to this dot so we need the form builder for us to be able to have an instance of the group object so to do that we need to create a new variable so I'm going to say private FB which s which serves as form Builder I'm going to say is equals to here we need to make it of inject so I'm going to say inject what are we injecting we injecting the form Builder which we need to import so let's import the form Builder we already have inject imported but I would like to move this above the chart form variable so let's just do that now so everything that has inject is above and every other variable comes below so everything we create is in an organized format so we can just say this do FB dot then we have access to array control group and No Label as well as record but what we need is the group so this do form builder. group and then we need to open a parentheses and a bracket and within this qura within this qura bracket we need to create another key and this key is going to be called chart message so chart message and we can just open a bracket it takes in two arguments so the first argument is going to be the initial value which is going to be an mty array then we can make it a required field by saying validators do required validators is also imported from angular form so this chat message is also going to be refer within the HTML file this allows us to attach it to the particular field we are trying to get the data from so we need to head straight to the HTML file so let's head to chat component. HTML and this is where our form should be within this input field we want to get the data that is being typed within this input tag so we need to wrap this div around the form so what I'm going to do is to create a form tag it doesn't need this attribute of action we don't need that I'm just going to cut this closing tag and and then wrap it around the div and then we need to reference the name of our form which is called chat form using by binding it to the form group so I'm just going to say form group is equals to chat form and then we need to also use the NG submit event andl to access to reference the submit function so we can just open a parentheses and then say NG submit and then we can say is equals to the name of our method which is called called onsubmit so I'm going to pass it here and it's going to have a paren at the end as well and finally let's make use of form control name to access data within this input tag so we can just say form control name which is going to be equals to the name we called this particular key within the Constructor so which is chat message so I'm just going to attach it to the form control name which is chat message this allows us to access all the Valu within the input tag rather so so I think that's all we need to do for now so let's try to log anything we type within the input field within the console let's try to log it into the console so I'm going to head back to vs code and then we can just do const form value is equals to this do chat form do value do chatore message so let's console log this variable into the console by saying form value so I'm going to save everything we've done so far and and then restart the server by typing in NG serve now that our compilation is complete we can head back to the browser on Local H for 200 and then reload the entire page so once this is done I'm going to clear the console and then let's type probably 1 2 3 4 5 6 7 and then click on send you can see we now have the value of the input field in the console anytime we click on send so this value is what we want to send to our chart database within the text schema so let's head back to visual studio code and then let's reference our service so what we need to do next is to inject the super based service that is the chart service within this component so I'm just going to duplicate this and it's going to be called chatore service and then we're going to call the chart service within the super base directory so now that that is injected into this particular file we can now make use of the dis keyword by saying this do chart service dot chart message the chart message expects a payload that is the field that is the value within the field which is called form value so I'm going to pass it within this parentheses and then we can now say do then because it's it's returning because it's returning a promise and the promise we can give an argument of response although currently we don't need to make use of this argument but let's pass in an argument and then open a bracket and within the bracket we can just probably conso loog the the response to see if you are getting any form of response from the database and then we can make use of catch to catch any form of error that may be coming from the database make use of the F arrow and then we can alert any error that is coming from database by making use of error. message so I'm going to save and then so let's try and see if we get any data within our database when we send a value into the input field so for now I can just type something with the input field we are getting an error let me reload the page probably the compiler didn't compile uh complet didn't compile properly so within this input field when we type something we're going to see if we get a response in our database in real time or if we get an error the value this is a text and to ensure that we are eating the service I'm going to open up the network tab I'm going to clear everything in there and I'm going to click on send and as you can see we get a response of 200 created and then we can see the text payload as well as the pre uh it doesn't return any preview but we can see the payload being sent and then it shows the status code I've created so I'm going to rush straight to the chart database and you can see we have the value this is a text the editable Boolean is returning false we have the sender ID the created art as well as the user ID so everything is working smoothly and we can now insert data into the database so let's insert more data um we can just say uh this is another test I'm going to send that and then in the next Network tab we can see that is also successful let's send in another message to micky3 the third message and then let's click on send you can see all this data is sent to database and it is reflecting in real time without having to refresh the page so there are a few modifications I would like to make for instance anytime we type in a text I want the message to clear off like anytime we typ in a random text or a text or an input into the input field the message still stays so let's reset the the form anytime we type in a message in the service file I noticed there seems to be a warning and the warning says not all code Parts returns a value so in this case what I'm going to do to get rid of this warning is probably to get rid of this return data so uh with that I think we should still be able to send data to the database what I want to do now is to reset the form and in reactive form you can do that easily by referencing the form Name by saying this just chat form and then you can say do reset okay the reference to the reset method is after the chat form so it's going to be this just chat form. reset so I'm going to add the parenes at the end so let's test that out to see if the form gets cleared immediately we submit the data in the input field so I'm going to type in probably I'm going to get some data from this um static text I'm just going to paste it within the input form and I'm going to click on sent as you can see the text gets cleared immediately the data gets sent to the database so with that we are good to go with clearing the input field another thing we need to do is maybe uh we shouldn't allow someone to send an empty field to the database because currently when the FI is empty and I click on send okay although we do get an alert that says um no constraint it violates the nor constraints but we need to prevent this in the front end as well because this still gets sense to the database uh or not I think the database um handles that but in an ideal situation that shouldn't be happening we shouldn't have a scenario where we can type in uh we can send data using the send button using an in an empty input field so to prevent that we need to make use of the disabled attributes so we're going to make use of the square brackets and I'm going to call disabled and then say if not charts form do valid that is if the chart form is not valid disable the input field so you see um now that the compilation is complete this send button is grade out you can't click on it because the input field is grade out so but when you paste something or when you type in something then it gets enabled so you can only send that to the database so that's how that works and how we can handle um trying to submit an empty fi to database but but also we can see that super base helps to handle that because of the way we configure the database that is uh null is not allowed for the type of text it's not it's not nullable that's why it was not submitting previously when I was trying to submit the empty input field now we can see that we are able to send data to the database what I want to do now is to be able to fetch this data this Dynamic data from our database into our application what we currently have is a bunch of static tests in our HTML file which you can find right here but what I want to do next is let's fetch it within an array and then Loop over it and display it into the front end so the integration for that is going to start with the service so within the service we're going to create a new function and we're going to call this function list message make use of the asnc keyword and say list instead of list message let's call it list chart since we've been using the chart keyword consistently throughout this tutorial so let's say list chart and I'm going to make it of the TR cach block once again so I'm going to say try and then make it of the cat block and the cat block is going to take an argument of error and then we can just throw the error so by making use of the throw keyword throw error and within the card the tri block let's integrate the functionality so we need to create a variable a d structured variable of data as well as error so we're going to say this equals to await this do superbase do from and this is trying to reference uh the particular table we are trying to speak to in Toba base which is called chat so from the chat table we want to select all the messages from the authenticated users so to do that we're going to open up a string and then make use of asterics that is we're trying to select all the messages from the authenticated users this would be in lower case in fact not upper case and then we're going to make it open a parentheses and the parenty is going to have an asterics as well and that's all we need to do to select all the m messages from the authenticated users so once this is done we need to create an if condition I'm just going to grab this if condition we created in the chats message and then I'm going to paste it right below our destructured data and error variable and below that we're going to return the data so I'm just going to make use of the return keyword and then return the data then I'm going to save everything we've done so far so this is the service that will allow us to fetch all the chart data from the chart table so now we need to speak with this particular service in our chart component CS file so within the chart component CS file we need to create a new method so I'm just going to call this method on list charts so it has no arguments it's just straightforward so we can just access the list chart method from our service by saying this do chat service do list chart and then uh this returns a promise so I'm going to make make of then and then uh no intended I'm going to pass in an argument of response and then let's conso Lo the response and then let's undo the catch because uh of a scenario where we have an error so we can just give it an argument of error make use of the first arrow and then we can just allert error do message to help us undo the error now uh what I like to do is to call this unle charts within the effects so effects are available in angular 17 they are one of the reactive Primitives in signals and they can only run within an injection context and such an injection context is includes the Constructor so the effect can only work within the Constructor so let's call the effect and then um we're going to pass in an anonymous Arrow function and then we can just do this dots the name of our method we're trying to log in the console which is unle chat um I think that's what we need to do we just need to import the effects and if we scroll above you can see effect is imported into the at angular call library over there so we can save everything we've done so far and see if we get the response on line 67 which should contain all the charts data from the database so quickly let's head to the browser and let's see if we get that response as you can see we get all the response from the database in an array uh we currently have five charts in an array in the data table and then we have this users object so if I go back to the chat table you can see we have five data currently imputed so we have access to those five data as well as the users who are sending those data so so currently I'm the only one sending the chats that's why my full name is currently having my name and then it's currently having my avatar URL as well as my ID if someone else logs in and sends a message is going to have different values over here so uh let's try to display these five responses within our chart user interface because currently what we have is just a bunch of static data so quickly let's head back to visual studio code and to do that we need to make use of signals to handle the data from the table so I don't want to make use of obser to handle this I want to make use of signal so to make it of signal we need to scroll up so I'm going to declare a variable called chart and it's going to be a assigned to a signal which has just been imported above as you can see we now have signal imported in angular core and it's going to be an empty array by default so um what I'm going to do is to open a parentheses and then pass in an empty array but in this scenario we need to create an interface that handles the response we are expecting from the uh the data from the superbas table so uh let's quickly create an interface So within the app directory I'm going to create the folder called interface and within this folder I'm going to call it chat Das response. TS So within this let's create our interface it's going to be modeled after our response so let's just say export interface and then it's going to be called I chart and it's going to be within this object so uh all the data we get from the database is going to be respon is going to be represented within our interface so quickly we're going to have the first one which is called created Arts so we're going to have created Arts it's going to be a type of string then the next one is going to be editable this is going to be a booing then we also have the ID which obviously has to be a type of string then we have the sender it's going to be a type of string as well and then we have the type of text which is our message so it's going to be a type of string and then we have the users which is an object on his own and it has three objects the Avatar URL the ID as well as the full name if you check the response you see it right here the Avatar URL the full name and the ID so let's have it within this object so I'm going to say Avatar _ URL which is going to be a type of string and then ID type of string and finally we have the full name full name it's going to be a type of string as well so our interface is created so we need to import it and assign it to the signal because signals can also take in types as well so uh let's assign it to this signal by saying um I charts which we need to import and with that uh it seems we have an error that says type never is not assignable to parameter of I chart and it's missing some properties which includes created that editable ID and the like so we're going to handle this error down below from our response or probably we can also set the I chart interface as an empty array so all I need to do is just to reference this empty array so with that error message from typescript uh disappears so right now let's assign our response to this chart signal so we can have access to all the signal Primitives so to do that down below within our function this. chart do set because it's a signal we have access to the set method the set method what it does basically it allows us to set a new value to our variable so whatever is coming from this response is going to be uh reference within the chart variable is going to be available throughout the application within the chart variable so we can just pass in rest so we are setting the response so we have an error that says argument of type null is not assignable to parameter of type I chart so we need to handle this error so one way of doing this is to assign a type to our argument from our response so I'm just going to say type of I chat and then uh it's going to be an empty array by default and we are still getting an error that says uh void is not assignable to type of parameter uh this is a type cryp errors that might get you confused but I think we can handle this by saying or null so you can see with that the error gets disappeared so but we need to create a condition that also handles the response by saying if the response is not equals to null if the response is not equals to null then we want to set the new we want to set data into the chart variable in our signal which we defined above right here so this is going to contain our response so if the response is not null let's pass the data into the chart variable from our signal else we can just console log that um no messages was found no messages found or you can probably display uh an alert or probably something to signify that to the users on the front end so uh this is one way to handle this and with that we can Loop through the UI by making use of this dot charts signal so to do that L Edge STS to the user interface and where we will need to Loop through it is somewhere around here uh to be precise that will be below the columns this this area where we have the different columns so I'm just going to extend this and then see where this ends and to do that we're going to make use of the newly introduced control Flows In angular which is the ATP block it allows us to Loop through data so I'm going to say at four and then I'm going to say MSG which represents message messages of these do charts you need to make use of your parentheses at the end and then I'm going to make use of the track keyword so that it allows um the signal to know if any item changed within the array so I'm going to make it of the track key word and I'm going to open a bracket so I'm going to wrap everything within the bracket where the div ends so this is one way to Loop through it using the newly introduced art four Block it's charts not charts so if this so message of this dots chart then the track then we can now say at empty that is if the result is empty the newly introduced control flows allows us to handle that as well so if the array is empty we can just display a div to the user interface that says no charts available so with that we are go to go so I'm going to save and let's see how the user interface currently looks as you can see it displays the static data five times so now we can just access the uh Keys within the array so the first one we're going to reference is going to be the image I think the Avatar URL so we can just make use of the Calli brace the double call Brace by saying MSG do um that will be the users do Avatar URL so I'm going to make use of optional chain for this to handle this particular scenarios so the next one is the time so let's handle the time so we'll make use of date pipes for this so I can just say uh within this div let's make use of the interpolation and then say MSG that is the message do created art and then we make it of a pipe and then we can now say date and make it of a colon this is a pipe in angular it's all available in the documentation so I'm not just coming up with this so you can check the documentation for dat pipes in angular then I'm going to make it of the month I'm going to reference the day as well as the year and also I want to show the time so let's say comma the hours then the minutes and then the time Zone probably is in the afternoon that is a.m. or p.m. so I want to reference that but we are having an error in these dat that says no pipe was found with the date with name date so we need to inject it into our import array we need to import date pipe so right after reactive forms I can just say date pipe and then inject it within or from at angular common so with that that error gets cleared so the next thing we need to display to the user is the full name of the user currently we have Sharon do but we want this to be dynamic so let's just say MSG do users. full name okay another thing we need to do is we need to interpolate the message itself so that's quite easy we can just say mg. text that's what we called it in database and I think that's all and I'm going to save let's save everything we've done so far and then let's check the browser I'm going to close the console so we can see everything properly as you can see we now have all the messages from the database so what I want to do now is every time we enter a new chat I want it to display immediately on the frontend because currently if I say let's just type in a random uh text if I click on send I need to refresh the page for us to see the newly uh typed in text which you can see right here but I want it to happen inar where anytime we click on send we see the response immediately and to do that all we need to do is just to call the unlist chart we need to call it within the submit function so we can just say this do unlist chart so I'm going to save and let's see how this works so let me just type in a text by saying here I am I'm going to click on send you can see it's showing immediately everything we type gets uh feted immediately from the database in a reactive format in real time so um uh with that we are able to fetch uh the data in real time from the database so we can now move on to the next implementation which is um ability to delete a chart so to create the delete functionality we are going to pass through three basic steps so the first step involves us trying to access the particular data we are trying to delete from the chart components that is within the chart components once the user select the message they want to delete from a dropdown that particular object is going to get passed down to the message service that is our chat service So within the chart service we're going to assign that particular object to a signal by making use of the set method in signal so once we set that particular object in the message service then we are going to access it within the delete component itself the delete component is going to have its own separate model so in that within that model we are going to that is where we are going to finalize the deleting of the message I hope this doesn't sound too complicated but I think once I start the implementation you're going to see how easy it works so let's head back to uh Visual Studio code So within Visual Studio code we need to create a new component and in fact this is going to be within a layout folder so let's generate a new component by saying NG generate components and then we're going to we say we're going to call the layout folder and then pass in the delete modal component so I'm going to press enter and while that is getting generated we can head back to the browser and xray to bootstrap 5 so in bootstrap five what I'm going to do is I'm going to guess two things the first one is the model and the second one is the drop down so let's get the user interface for the model so I'm going to search for model within bootstrap five so let's search for model and then let's scroll down um I think I'm going to go with this particular model so it has a text and then it has two buttons so one button is going to be yes another one is going to be no and then we have a text that says do you want to delete this particular message so let's grab this I'm going to grab everything here then copy it and then head straight to our chat component and it's going to be below the main tag so I'm just going to say modal so this is going to be within a comment and then I'm going to paste everything we copy it so now that we have the model the way we want to access this model is through a drop down so once a us a menu once they click on the menu a drop down appears once they click on the drop down a model appears so what I'm going to do next is to grab the drop down so I'm going to search for drop down um in bootstrap so we're going to see the different drop downs available for us um I think um we can go with this very first drop down we have over here so I'm going to grab everything within this div as well so where this is going to be is within the loop within the at four Loop so we can just put it probably after the div that contains the message of text so I'm going going to paste it in there then I'm going to save and let's uh clear out this drop down button I'm going to put uh three dots that serves as a menu in place of the text so I'm going to save that another thing I'm going to do is I don't want this to show as a button so I'm going to remove the button class by removing BTN BTN secondary as well as the drop down toggle class and I'm going to save let's see how it currently looks on the user interface so we need to compile the projects Once More by typing in NG ser and now the compilation is complete let's head back to the browser and we can see the menu doesn't look the way we want so we need to make uh some slight adjustments still so this button tag I'm going to change it to a span tag so I'm going to remove the button I'm going to type in Span and I think that should get rid of the weirdness of this menu cool so we have this so but I don't want it to be so close to the message box so I can just give it a class of margin top of three and then margin left of five so I'm going to save and let's see how this looks now I think it's much better so you can see when we click on the drop down we have the options uh displaying from the drop down but I just want only one option which is going to be the delete text so I'm going to get rid of this to and and just have delete right here and since I messed something up okay we didn't delete all the tags so now we can save and then let's see how the drop down Works once again so I'm going to click on the drop down you can see um I'm going to change the text to delete and not action so with that uh the next thing we want to do is once the drop down shows the delete we have right here is meant to trigger the model so what do I mean by this so what I'm going to do is I'm going to scroll down to where we have the model and I'm going to grab some attributes we have here so one of the attributes includes the datab BS tole as well as the datab BS Target so I'm going to cut that and then get rid of this button and then I'm going to paste it within the a tag in our drop down so let's paste it somewhere here and this should trigger the model so let's click on the menu again click on delete you can see the model now shows cool so I don't want the model to show Within These components we need some separation of concern so we need to cut it and then paste it within the modal component which is within the layout folder so let's go right to the HTML paste it in so this is where our model is going to leave um but we need to grab the selector so I'm going to grab this selector head back to our chart components and replace uh the UI with it selector and we have self closing tags available in angular now so let's make use of a self closing tag and then inject that component in our import array so I'm just going to say delete mod components and then save everything we've done so far so now our UI looks more modular and easy to understand so can just head back to the user interface and see if the model still appears with the change we've made and you can see the model still appears so I'm going to change the text within our delete Model instead of having these uh three dots we have here we can just replace it with a text that says are you really sure you want to delete this message so let's type that out are you really sure you want to delete this message if you really want to delete this message if you click on yes it's going to get deleted if you click on no the model gets closed so that is pretty much straightforward and from the presentation I showed uh before we begin this implementation we need to start the integration of the delete from the chart component TS file so what that means is we need to create a new function for our delete functionality to work that is anytime we select the particular text we want to delete we need to grab the object anytime we click on this drop down and click on delete we are grabbing the object we are trying to delete that is the chart we are trying to delete so uh to see that in action let's head back to this chart component TS file and within this file we can just say open drop down that is uh that's the drop down that shows the delete text so we're going to create a function this function will allow us to grab the object of the message we plan to delete so I can just say MSG and then give it a type of I chat then we can now say this dot okay we need to conso log it first to be sure so I'm just going to conso log MSG but for us to see the details in the console we need to call it in our HTML template so that's going to be within the span tag so within the span tag we can just have a click event and and then let's paste in our function and then save everything we've done so far we need to paste in the particular variable as well that is the argument so which is going to to be MSG that's why we are getting that error so we need to pass in MSG then we need to open the console to be sure we are getting the right object so the first one we're going to try is let's try this particular testt that says this is another text once I click on that you can see uh we get the particular object which is this is another text so if I try to grab another one probably this Latin text you can see we grab that so we can easily use the drop down to delete that particular message all we need to do is just to pass it down to our service which is going to be the next step so let's pass this data down to our service so let's head to our chart service and within the chart service we need to create the function that helps us to grab the selected object so I'm just going to call the method selected chart so let's just say selected chart and then it's going to have an argument of MSG and then I chart which is um the interface and then we can now create a signal above so the signal the signal is going to be called saved chart so what I need to do is just to say public because we want to access this particular signal in our model so we can just say saved chart is equals to Signal which is going to be an empty object by default so all we need to do is just to say this do Saed chart and then we need to pass in the MSG that is the message you are grabbing from the um chart component but we need to make use of the set method which I forgot so we need to set it uh to the latest object we are trying to grab so let's not forget that we are making use of set anytime you make use of signals you have access to this um uh Primitives so next up uh we need to head back to our CH component and reference this particular selected chart function So within the dropdown function all we need to do is just to reference the message service or that is the chat service by saying this your chat service dot select charts and then passing MSG so uh we are able to pass down the object from our chart service from our chart component rather down to our chart service and in the chart service it's now available globally in the angular project through the signal Cod save chart so we can always retrieve this in our delete modal components to see that in action let's head straight to the delete Model component so I'm going to save everything with done so far and then close some of the tabs because I think we have so many tabs currently open and it's going to cause some confusion so let's head straight to the delete Model and log the selected charts into the console to see what I'm talking about so all we need to do is just to create the instance of the chart service so let's just say private chatore service and we need to make use of the injector so we're going to say equals to inject which we need to import and then we reference the chart service so we now have an instance of the chart Service uh before we proceed let's just Define The Constructor and then log the particular object from our model delete Model into the console to be sure we have access to the uh data that was selected so I'm going to open this Constructor because we're going to make it of the effects to log this into the console and we know the effect can only work within an injection context so we need to import it uh within the Constructor and then open an anonymous Arrow function and then we can and just do console.log this do chat service do saved charts and then pass in the parenthesis so I'm going to save and then let's open up the drop down and see if we get to log the data in the delete component model so let's let's select one of the charts so I'm going to go with the last chart which is a bunch of random string and you can see in the delete Model component we have access to the right data we just selected you can see uh if we select another one you can see we have access to it in a delete component model so you can see we've been we've been able to use signal to manage state from one component to another component in an angular application I mean the code base is kind of um very simple to understand compared to observables where you have so many boiler plate code so um if you are new to signals this is one of the reasons why you might want to try out signal so let's continue with the integration so to proceed we need to create the delete service for our delete implementation and that can be done in our chart service so to do that we're going to create a very simple method so let's head to the Chart service and right above the selected charts you can just say a sync delete chat and all we need to delete a chart is an ID so and it's going to be a type of string so we're going to open the object and then we can create a variable by saying con data one thing you should know about super Bas is when you delete data you don't get any response so uh we don't need to handle anything um when it comes to deleting of data so you just get no response so we can just say cons data we're going to say await this do super base just like we've done previously do from our chart table and then we can do do delete and then it's going to take a parentheses and then we can say do EQ and then we're going to open a bracket and within this brackets we're going to reference the ID of the chart we are trying to delete and that's all we need to do and we can just return the data so I'm just going to make use of the return keyword and then return the data so this is the simple service function to delete uh to delete a particular chart so we can now integrate this within the delete Model since we have access to all the objects we can just reference the ID and delete the specific chart we want to delete so we need to create a function for that so that function is going to be called delete chart So within the delete chart function we need to extract the ID of the chart we're trying to delete so to to do that I'm going to create a variable called ID so I'm going to say const ID and let's try to access it through our signal by saying this do chart service do saved charts and then because it's a string we can just make use of as we can just make use of the type the as keyword in typescript by saying as and then open an object and then we can say ID of string and all we need to do is just wrap everything within a bracket a parentheses so I'm going to wrap this within a parentheses and I'm going to say do ID um this is pretty much Clear um probably I need to break this down a little bit what I'm trying to do is I'm trying to access the ID of the chat are trying to delete by making use of ID so in the results uh from our delete object once I click on a particular drop down you can see we have ID we are trying to get this ID so that's why we making use of ID right here this is what we need to pass an as an argument in the delete chart service so I hope that is pretty much clear so let's now reference it in fact let's console log the ID to be sure I know what I'm talking about so I'm just going to do console.log ID oh this is outside the function I'm going to cut this put this within the function and then um let's make use of the click event and La within our user interface uh this is the particular button we want to use to delete so I'm just going to make it a click event and la and then pasting the method then I'm going to save everything done so far so when I click on yes we should be able to see the ID in the console so let's do that click on delete and then I'm going to clear the console and I'm going to click on yes you can see we now have access to the ID so this is where we are going to call the delete chat service so let's head back to our TS file and then we can now say this do message service or rather chat service chore service do delete charts and then we pass in the ID which is a type of string and like usual it returns a promise and we need to make use of do then so I can just um make use of an Anon Anonymous function which has a fat arrow and then within this context we can just try to close the model or probably route the user to another page or something of sort but for now I'm going to leave that block empty and then I'm going to make it of dot catch and within the do catch it's going to have an argument of error make it of a fat Arrow then we can console log the error or probably alert the error do message depending on what you want to do can handle it however way you want so I'm going to save and let's try to see if we can delete a chart right now so I want us to try to delete this first charts we have here which is this is a text currently we have n charts so let's take note of that so I'm going to click on the drop down click on the modal and then I'm going to click on yes so on the network talk tab the result we have is 204 no content I told you previously that anytime you make use of the delete uh method in super base we usually get no response and you can see it from here we have no content and I believe this particular uh data has been deleted to confirm that let's head straight to the database and you can see that this is a text just got removed in real time so um for now what I want to happen is how I want to handle this is once we click on yes and it deletes happens we want to close the model immediately and then refresh the UI without reloading the entire page because currently to see this in action I need to refresh the entire page for us to see that that particular text has been deleted you can see it's no more there if I delete this second one I need to refresh the entire user interface which is not really good for a single app sing a single page application rather so um let's try to implement that and to do that we are going to make use of the router in angular so let's let's begin our implementation by calling the router object so what I'm going to do is to create a private variable called router and I'm going to say that to inject within the injection context I'm going to call router which we need to import and you can see we have router imported from at angular for/ router so um this is going to be done within the promise where we have a successful response so we can start this implementation by creating a variable which says current URL so we can just say let's current URL what I'm basically trying to do is just to get rid of the modal one and then ensure we have uh and ensure that the user have the latest data from the database in super base without refreshing or reloading the page so that's what we're trying to do here so I can now say let's current URL I typed ulr instead of URL sorry about that then we can now say this do router Dot URL so this do router. URL we can now say this. router. navigate by URL and this is going to take in two arguments the first one is going to be empty for Slash and then we're going to pass in an object that says skip local skip location change I'm going we're going to set it to true so I'm going to type in skip location change this going to be set as true so with that returns a promise we need to change that Promise by making use of the keyword and it's going to be an empty or an anonymous function and within that context we can now say this dot router. navigate and then we want to navigate to the current URL without reloading the entire page so because if we reload the entire page it defeats the purpose of this being a simple page application but before we save and test it out I also want to close the model when the response is successful as well so to do that we need to make use of attribute binding and we're going to make use of the signal API to handle this so back in the delete Model we have an attribute called data bs dismiss this is the attribute that helps us to dismiss the model so I'm going to grab this particular attribute and then I'm going to bind to it in anytime we click on yes because when you click on no it dismisses the model automatically but when we click on yes there's no way we are handling uh the closing of the model so we need to make use of attribute binding to close the model so I'm going to make use of the square bracket and then I'm going to say at which is a reference for the attribute binding and I'm going to say data DBS do dismiss which helps us to dismiss the model so I'm going to set it to a condition but let's define the variable for that condition so right into our TS file we can create a variable that says dismiss this is going to be a signal I'm going to say equals to signal I'm not sure we have signal imported into this project so we need to import signal and then by default it's going to be false because it's a bullying if the user clicks on the delete button it opens the mod out but when they click on yes and the request is successful we set it to true so that's what we're trying to do so by default it's false then we're going to access it by saying this do dismiss do set and we're going to set it to True any time we click on yes and our and our request is successful so we can now Implement our condition in the HTML file and to do that all we need to do is to say if not this do dismiss don't forget to make use of your parentheses is equals to true we want it we want it to return the modal class because remember in the data bs dismiss it's by default calling this particular model uh class so we want to conditionally render the model class if the user clicks on yes and the request is successful um we want the modal to show else we passing null okay this should be outside the okay we didn't close this properly so this should be closed here and the model should have its own quotes So I think um we now got it properly so um I'm going to save everything we've done so far and let's try to delete a model or a particular message rather so let's delete the last message this is a form of gibri so let's delete it away I'm going to click on delete I'm going to select no first you can see the mod gets removed but now let's click on delete again and then click on yes you can see that message gets removed from the user interface let's delete another message so the model gets closed and the message gets delet deleted so I'm going to delete the messages that don't really make sense so you can see finally let's delete this lating message I'm going to click on delete click on yes the model gets closed and then the URL uh only programmatically reloads this section of the user inter interace it doesn't reload the entire page reloading the entire page includes the the browser setting the entire state of the application to the way it is um by default which defeats the purpose of making use of a single page application so I think we've been able to integrate all the functionality of this chart application so the final thing I would like to do is to host this application on a platform called vual so to begin the hosting implementation we need to go to the Vel website so right on the Google search I'm going to search for Vel and I'm going to try to log in into Vel to log into vessel you need a GitHub account or probably one of the other git options version control options like um gitlab and bit bucket so I have a GitHub account where I already have the app hosted already as you can see it it's available in a repository called NG charts DV and then I'm going to continue to get up and I'm going to get authenticated into the versal dashboard now that the authentication is complete to create a new project inside of vessel all you need to do is to click on the add new drop down then select project so once you select project right in your on the left hand side of the dashboard you're going to see different projects currently hosted on GitHub so all you need to do is to select the project you want to host for me I'm going to select the NG chart DV project so I'm going to click on import and then we are going to be presented with the configuration for the hosting of the project so the first thing we need to fill up is the project name I'm going to leave it at is currently is that is with the name ng charts DV then uh the framework is angular obviously then the root the the root directory is for/ I'm going to leave that the way it is then I'm going to extend the environment variables now you know in our environment variables we have some configurations so I'm going to grab them the first one is the super base URL so let's grab the super base URL and then the and then the value inside of this super base URL I'm going to paste it here and I'm going to click on ADD then the second key we need is the super base key so I'm just going to grab that as well and then I'm going to grab token for the super base key and I click on ADD and those are the two keys we need to add before I click on deploy you can just take a look at the build and output settings by default super base provide us with these two command for angular Eng build is the command that helps us to build the project and the output directory is always located in this and uh the installer would make use of any of these uh install commands depending on how your project was set up so if you want to override any of this configuration all you need to do is just to click on the overr right then you'll be able to edit these fields they are disabled by default so the way it is is just how we want it so I'm not going to override any of the settings all I need to do is just to click on deploy and the deployment configuration begins so we need to wait for some minutes before the configuration is complete now as you can see the deployment is complete and we have a congratulations page currently displaying on the browser and you can see the landing page currently showing which says sign up using Google so what I'm going to do is to click on continue to dashboard and then we can see the dashboard of our hosted project so what we can do is just to click on the URL the deployed URL which we have here NG ch v.v. apppp let's click on that and you can see our project is now hosted live on the browser so let's try and test this out before we proceed I would like to open the console in case we might have any form of error while trying to access our chat dashboard so quickly let's click on sign up using Google and then I'm I'm going to select one of the existing projects I used in the local version of projects and we are presented with an error message the reason for this is our authentication was created making use of super base so we need to configure the super base URL because while creating the project we made use of the project the super base configuration relied on Local Host so it's still trying to access the Local H so we need to configure the URL to do that let's head straight to super base and within super base we need to headed straight to authentication and within authentication let's select URL configuration so before we proceed I would like to grab the URL for this project and to do that all I need to do is just copy this URL right here and head back to the super Bas dashboard and I'm going to click on ADD URL so I'm going to paste in the URL and click on ADD URL now we've been able to add the URL for our project another URL I I need to add is the URL that handles the authentication while you are trying to log into the application so what do I mean by this once I click on ADD URL I'm going to past the URL but this time it's going to be for/ off for/ callback so this is the call callback URL for authentication and then finally right above where we have site URL as Local Host 3000 I'm going to paste in our URL there as well and then click on Save and with that I think we are good to go so um I'm going to to go back and then reload the page so let's attempt our authentication once more so I'm going to click on sign up using Google button and then select my account and this time around you see we are authenticated right into the dashboard and we have access to all our charts as you can see I have my details showing my name the time of the charts that was sent the image as well as the chat as well uh let's also test out the delete functionality let's see if this gets deleted as you can see it gets deleted and let's send a message testing live and then let's click on send you can see that gets sent as well and save to the dashboard we can also log out so let's try and log out from this project you can see the log out functionality Works let's try and sign up using another user a brand new user to see how the dashboard uh looks like so I'm going to select one of my account right here without an image I'm going to select continue because this is a brand new account and then we get navigated into the dashboard so let's try and send a message with this account uh I am a new user and then click on send you can see the account name the account image as and the time as at when the message was sent so you can see the live version of the project still has all the functionalities working the way they should so that's it for this project I believe you've been able to learn a lot if you are new to the channel make sure you like And subscribe for more more educational content and with that thank you very much for watching and I'll see you again in the next one