welcome to the python by immersion tutorial here at pycon 2018 uh thanks to everyone for coming i have been doing this tutorial in various formats in various places for almost a decade this is actually my 11th time teaching some kind of tutorial at pycon taught computer science at university for a while so i've got a fair amount of teaching experience in sort of scattered areas so hopefully this will work if it doesn't i certainly want to hear feedback on the survey link or just in person because it helps the tutorial get better so you're going to be drinking from a fire hose so i'm going to show you about 1100 lines of code in under three hours and talk about a fairer number of them especially early on somewhat slowly and then we'll get faster don't please try not to get discouraged if you don't understand everything i go over i think you'll understand most of it but some stuff you won't and that's okay definitely do not try to memorize what i'm showing you right so the the title of the tutorial python by immersion uh is like learning a language by immersion right you don't start with well here's the grammar and hear the tenses of the verbs and hear the those kinds of things instead it's just like you just start listening and you start absorbing your brain starts absorbing in ways you don't even understand um and and that's my goal here so i'm going to show you a broad overview of the language and my hope is three weeks from now when you find yourself needing to do a particular thing in python you'll go you'll be able to say with some level of confidence but you're not sure why oh yeah i'm pretty sure i can do that in python pretty easily even if you don't remember what i showed you today somewhere in your brain will be the knowledge that you have a sense for what python's about and you have a sense for the kinds of stuff you can go looking for okay i'm going to start the la the first 20 minutes about fairly slow and a little bit pedantic trying to explain certain things about python that are very different from many other programming languages especially a number of the ones that you are coming from and that all has to do with objects and names and variables um yeah so uh and the rhythm is that i will talk for a bit and then show you some code and then i'll give you time to work on some exercises during which time i'll wander around and if i answer questions when i'm wandering around i'll probably just answer them oneonone and then summarize them at the end when i uh come back up here and we'll go through the same exercises you just did a little bit quicker and adding the explanations especially where people had questions feel free to stop me with questions raise your hand sometimes i'll say ask me later or i'll get to it later sometimes i'll answer it right then okay any questions before we get going okay so here's the uh form of this tutorial that this this is what most of us gonna be like i'm gonna show you lines of code and talk about what's going on first of all i'll tell you what version i happen to be running uh and then i'm going to talk about how objects get created in python and this would be kind of slow but it's really important to understand to get the right mental model of how this works so i'm going to talk about this line for about two minutes i'm going to type the number one and hit enter so this is the read eval print loop you can tell that by the three a little greater than signs of the chevron there at the read eval print loop when you type an expression python parses it compiles it into bytecode not into machine code but into bytecode it then executes it and if it's got a value if that expression has a value other than none it will display that value on standard output so it'll print the value of the expression okay so there it just did it it evaluated the the character which is the digit one and it figured out that that's an integer literal it's called because you literally are typing the integer into the prompt there and you can put all these lines in code too the only difference between the the read eval print loop the repl and uh what you what happens when you run your code is it doesn't automatically print out all the expressions the read eval print loop prints the one if you write a script or code it's not going to print the one unless you use the print function but what actually happens when i type the 3.14 in this example by the way the for numbers on the far right those are just line numbers to keep me on track and i can go back quickly so when python sees a literal like this this one's a floating point literal it creates an object which represents the literal so let's go back to the one there and just do that one because that's what i'm used to talking about so when i type the one and hit enter python goes off and it creates an object in memory uh an integer on most of your machines takes about 64 bits of memory about eight bytes the object that python creates is more like 30 or 40 bytes big it's huge by in computer terms relative to the amount of memory that's actually stored in the integer so you got this big object that has all sorts of information in it of which the one is a small piece the other stuff is what type it is what its super classes are what is documentation there's a whole bunch of stuff in there how many names are bound to it etc okay so every time you do that so this is in contrast to the way you're used to thinking about variables in python and any language most people think of variables as a box within memory location in memory and if i assign a variable the number three i write over the bits that are in that box with new bits and i get the three in there and if i say that variable equals 17 then i erase those bits and write over it with 17. that's not what's happening in python in python if i say i equals 1 it creates an object and makes i refer to it if i say i equal 17 it creates a different object and makes i refer to that instead and i'll repeat that a few times in the next section as well but let's just look at how you create stuff in python so i can create integer literals floating point literals string literals with single quotes or double quotes round brackets or parentheses around a list of literals or a list of anything a sequence of anything gives me a tuple sometimes pronounced tuple and it's a an immutable list is the way a good way to think about it if you put square brackets instead of round brackets it's almost the same except it's mutable so one you can change easily one you can never change once you've created a tuple you can't pull things out you can't change elements in it a list you can change it all you want and there's some reasons for why there are both that aren't that important that i'm not going to really mention hang on a second oh sorry wrong code okay uh great all that work and now hold on a second here okay so when you create objects in python they have a single value a single type they have attributes they have one or more base classes if you understand what classes are it's not going to slow you down much today it has every object has a single id and every object has a name usually almost all objects have a name and many times objects have more than one name those names live in different name spaces so i might have two names in my current namespace and i'll explain what namespaces are soon you might have more than one name in the same namespace much more often you'll have names in different name spaces like you might import a module and then access an attribute of it and you might have names in multiple places so let's uh sorry i'll get the hang of this soon okay so let's explore this a little bit so what's going to happen here is about one of about 10 times i'm going to slow down and just say it the same way python sees the one it creates an object it sends that object it then looks up the name type and finds another object what happens to be a function a callable type is a class or function but it's callable like a function is it then takes that object and sends it off to that other object and executes it because it's got the round brackets it does a call it executes that function that function does something with it and returns a new object which is the class int the class of which one is an instance is its own object so classes are objects in python everything in python's an object uh and then it tries to represent that class well instead of you know right showing you the c code that implemented or the python code that implemented it it says well it's a class and it's got its name in it because it it's got it's trying to show you what it is but it's hard to show what it is because you can't type this back into the prompt and get the class in okay 3.14 type float uh there's string for a string str the type of that tuple is tuple there's the list objects have attributes so this looks up the name true finds an object and then tries to access dunder dock so this is a double underscore dock double underscore which we say instead of saying double underscore true double underscore we say our start doc we say dunderdock so if you hear me say dunderdock it means double underscore on both sides and those are attributes in python that are sort of behind the scenes you're welcome to use them but they're sort of more implementation side than user side and you can see that that has an attribute which is this long string that explains how doc works here's a string object and we ask access its upper attribute and we get back built in method upper blah blah blah so it's a method methods are like functions but instead of calling them with a parameters or arguments you call them on an object and pass extra arguments so a method is always a call made on or to an object so this method when you call it operates on that okay and when i say operates doesn't mean it actually necessarily changes it it might just return a new one or a different version or how big it is right so here i'm going to check is that string is the is this attribute of this object callable yes it is so i can call it like a function so i will call it like a function here i just access the attribute now i'm going to call it like a function and it's like i'm asking the spam object give me an uppercase version of yourself and so it returns a new object which is an uppercase string spam okay objects have base classes the inspect module is a good way to look at them so spam is an instance of string which is a subclass of object true is of type bool which is a subclass of in which is a subclass of object so if you're familiar with classes everything in python the superclass of all the objects in python is the type object which just has a few rudimentary things that it can do every object in python has an id the id of the object that gets created when python sees the three and creates that integer object that represents the three with some long number the only thing you're guaranteed is that number's unique across uh between like every object has unique id other than that you don't need to worry about what that means and so here in c python which is the version the implementation of python most people run it's written in c that's why it's called c python um it's actually a memory address which is kind of interesting but that's not guaranteed to always be true and it's not true in all implementations of python uh here's uh the other way to create objects so so far all i've done is is directly created objects with literals or called functions to get them back in general you usually call other objects to create objects or get access to objects so abs is a builtin function it is callable if i pass it this object i'm going to get back a different object in this case all right int is a builtin type 3 was an instance of int it's actually callable and every class is callable because when you instantiate a class you do it like a function call in this case it kind of functions uh it sort of feels like a function that when you call it converts whatever you pass it to an end like that okay so let's talk about names more carefully uh i just restarted my python to clear my namespace which makes things a little easier so there's builtins which is a name that shows up in my namespace in this the way i'm running python here let me create a little function here that you don't need to worry about how that works uh when i say a equals 300 i'm going to add this name to my current namespace and i'm going to take that object that got created when the 300 was interpreted and make a a reference to it so if you want to say a is a variable and it holds the value 300 it's it's mathematically that's good language in terms of computer programming it's a little bit misleading especially if you don't have the right mental model for how it works um and and even if you've only ever learned python you just people talk about variables this way they talk about the box into which you put values so i prefer at least when i'm teaching to use the language that's standard in the python documentation which is the name a is bound to the object 300. so this is a name binding and the name lives in a namespace okay once you've bound the name a to the 300 then you can see in my namespace i didn't have anything before now i have a name a there's a representation of the the objects what it looks like and here's where it actually lives in memory it's id so now i can type a and hit enter and python says oh that looks like a string but it doesn't have the quotes around it but it's a valid identifier it starts with a letter uppercase or lowercase it has some number of letters uppercase or lowercase or maybe an underscore in it with no breaks that therefore that looks like an identifier i'm going to assume it's a name i'm going to look it up and try to find it if it does it gets the object back and tries to show it to you that's why you get the 300. okay this i'm not going to go this slow the whole time don't worry but thinking about it this way is really important so that's why i'm taking the time now right so uh i actually had a mistake here that i didn't notice which is i forgot to do this so i've restarted the interpreter the namespace was cleared if i type a now it's going to go look in the namespace because it looks like an identifier it's not going to find it really i thought i restarted the interpreter there we go now if i type a and hit enter i get a name error okay so uh if you type a name and it's not in the namespace it can't find it then it gives you an error well but how did it find abs and true well that's different those are sort of builtins that are hiding behind the namespace um so this is there you get name error and when you see errors like this read them the first 10 of you like this is kind of complicated what does this all mean but once you get in the habit of reading errors they actually come in really handy sometimes often you'll find that if you read the error after reading 10 or 20 of them you get to the point where oh actually that does give me a clue to what i did wrong so in this case traceback if this were a function calling a function calling a function you'd have that whole call stack in the traceback in here it's a single line because i'm running at the interactive prompt the rebel and it's saying it's it and it was running this file well it's not a file it's the repel so it calls the file console it's at line one well obviously there was only one line and it wasn't in a module because i was just running at the rebel but then it gives the error so name error is the name of the exception it's this is a common name it's a common it's usually up a case lowercase camel case and its name error something error something here and then it tells you exactly what it was name a is not defined okay so a little diversion there about reading names okay so let's go back and do we got the a and there's the 300. okay so i've got that i can access it and what if i hit say type a equals 400. so what's going to happen is python sees the 400 goes off and creates an integer object representing the integer 400 it then says okay i'm going to add this to the namespace well actually it's already in the namespace so it's just going to change the value so namespaces in python are like dictionaries dictionaries are mappings from keys to values and it's a common data structure in python that we'll explore later key value pairs so the key is a the value is 400. in a dictionary you have to name the dictionary use square brackets put a quote around the a close quotes square bracket uh names it sure does all that for you is another way to think about it it's like a dictionary that it doesn't you just type the the characters right away and it assumes you mean a key in that namespace dictionary okay so here it's just going to change the value that's already in the dictionary for the name a in the namespace right so we can see that namespace change the a is still there but different value different location so what this does is it looks up the name a gets back an object and then adds a new name to the namespace b which refers to that same object okay so it's not copying the value from a to b to b in the traditional variable computer science or computer programming sense it's just putting two names in the name space that point to the same object okay and if i look at b it says 400 a's 400 and you can see that they are at the same address so these are actually the same 400 because they're it's one object that represents the 400 two names the other way to think about names as being bound to objects is to think about postits right so if i have a postit and i write stuart on it put it right there that's a name for me a stuart if i write dad and put it on a postit stick it on me or in some name space at home with my kids that name is the name for me right in a different name space someone else's family when you put the name uh mom on you you're gonna you know if you're a mother then your kids will understand that name but in our family it's like a different name space mom means a different thing it's bound to a different object okay um so think of postus on an a on an object and you can have multiple ones just like we have an a and a b here c equals 400 oh okay so interesting now we have a and b they all have the same value these two actually are at the same address so we know those the same object this one's at a different address that's up to python whether or not it creates the integers at the same address are different and they're uh it actually preallocates some sometimes it'll it'll reuse an object sometimes it won't in the case of integers and strings it can reuse them because they're immutable you can't change the value of one it's always one so this is getting sort of uh so i'm going slow to explain names and namespaces and objects i'm also showing you some of these behind the scene details like where the memory is because just because that helps you understand what's going on at that level right so if you want to program well in python it helps to know a little bit about what's going on uh underneath the hood or behind the curtain uh if you want to know how to drive a car really well it helps to know a little bit about the engine works uh if you want to ride a bike earlier etc so so knowing that the next layer down a little bit of it is helpful i think so ida is one is the way you can get these addresses is is the way you check in python if two i'm going to say it wrong if two objects are the same well if two objects are the same they are the same object so what it really is checking is if the name a is bound to the same object as the name b are those two names the names for the same object that's what is means uh it does not mean really really equal right some languages you've got equal double equal triple equal that's not what it means and there are some uh edge cases where you'll actually get in trouble if you assume that is is the same as equal yes question uh yep i wonder if i do that next no i don't well now it's going to fail let me show you oh sorry it's gone uh the answer is yes it would it would uh sorry so asb was true it's now false because i went on and moved backwards and if you said a to c you would get the answer false so here i'm going to change the i'm going to change a to be abc you can talk like that remember what we're actually doing is we're creating a new object representing the string abc and binding a that was looking at the 400 on binding it to now refer to the string abc so i'm rebinding the name right so now if i look b is still 400 show names shows me i've got a is bound to that b is bound to that c is bound to that these are two different objects usually you don't need to worry about this but when you do need to worry about it you really need to understand it and it really matters a lot in rare cases well relatively rare in some some of you are doing uh pandas for example um there are cases where whether or not the objects are the same object or if they're just equal makes a big difference in terms of performance sometimes you just want to use the same one again because to reallocate a data frame with millions of rows is going to be inefficient okay we're almost past the slow boring name stuff here uh del a what do you think that does it takes the postit off and throws it away it doesn't take all the postits off just the one that was the a it doesn't do anything with the object the object is not deleted when you call dell a right when is an object deleted well when all the names when all the postits have been pulled off the object and there's no more references to it then there's no way you can it can be reached from any line of code then python goes and cleans it up and that's called garbage collection and that's very convenient for programmers to not worry have to worry about that and and uh in languages where you do have to worry about that uh memory leaks are always a problem unless you're very careful or there's a strong language support for it so now we've just got b and c left a is gone delby del c now it's empty nothing in the name space uh just i said uh there are cases where knowing when you mean equality and when you mean is basically the only time you want to use is in common practice is in a function when you're checking to see if a nondefault parameter was passed or argument was passed and i'll show you that later and so you'll often see at the beginning of function if arg1 is none well that's the right thing to do otherwise you almost always want to use equality instead of is and here's proof okay that's interesting so i said i equal 10 j equal 10 turns out that when python saw this 10 it didn't go create a new object it went and found the one that already existed that represents the integer 10. and so you can see here i'm going to the comma here means please evaluate these both these expressions is actually an implied tuple um i'm saying are they equal are they the same name are they are they two names for the same object yes and yes and you can see they're at the same address however oh in here i equal j equals 500 this is python syntax that says please bind both these names to that object at the same time or right after each other so it's actually here you're guaranteed that whatever j was bound to i is going to get bound to the same object and you can see that they're equal and they're the same object yeah but this one does not so in this case if i create a file if i say to python i want to use the integer 500 it goes and creates a new one and you say it again it goes and creates a different new one in a different location and so these are equal but they are not two names for the same object there are two names for two different objects and why it does it this way it's for efficiency reasons uh integers from about minus five to plus 256 are commonly used and so preallocating them saves um memory um whereas other integers aren't used that often so it doesn't preallocate them so that's behind the scenes what's going on the lesson here is use equals almost always when you want check for equality use is extremely rarely okay so import math what it does is it uh asks python to go find the library named math pull it into memory so that it can actually execute parts of it and then puts the name math in the current namespace so it bound the name math to that module now i can access the attribute of that object like math is not his name referring to an object it has an attribute called nan and if i get that back it shows me as nan uh some of you familiar with this it's not a number it's a representation of something that's not a number uh its type is float so here's a counter example that's kind of weird in this case they are the same object but they are not equal to each other right and that's just the weirdness of nan and it's useful to have that behavior so the nan object is not equal to itself but it's it is the same object okay just driving home the point here use equal equal okay so now i'm going to let you do some exercises uh i this section i can't remember exactly how long is i'll bring it up and see for myself um so i'll give you a few minutes to do the exercises when you do the exercises i encourage you to i've tried to make them easy to type so a lot of times i use short names and short stuff whenever possible i encourage you not just to type them and hit enter i encourage you to type it and then think about what's going to happen here right okay it says i you know for example it says uh okay like here when you when you type this into the interactive prompt type i before you enter figure out what's going to happen what is going to happen when you hit enter on this okay and if you can't figure that's okay go ahead and do it but but try to figure out ahead of time and i will wander around and answer questions and then we'll move on usually when about half the class has done the exercises i make them long enough and hard enough near the end that i try to keep everybody happily doing exercises but when you're about halfway through you've gotten as much as you really need to know to move on any questions okay so if you haven't gotten the exercises yet there second of the bottom line here http immersion uh or or it was you was emailed out to you about three hours ago as well um if you you'll bring up a dropbox screen that un shows three files you can download one of them or just click download and download the whole zip down you so um um yes um but you can't use locals when i use dirt the other form which is to pass it an object uh stop at the end of the exercises is that clear it's like uh let me just so when you get to the numbers we haven't talked with numbers you did a little bit with lists okay okay so how many people are done uh lots of people like you when you're half done and what happened you're done that's when i was in general i mean uh don't feel bad if you're not finishing especially when else this is normal like different people are here with different levels i usually will move on before everyone's finished at all learn what you can and you can go through some of the stuff again later watch the video again later et cetera okay so now i'm going to go through the exercises which means even those of you who didn't finish you're going to see me doing them uh and show you what uh new things there are to learn and answer questions you might have as you're going thank you so i'm gonna now go through the exercises uh that you just did and those of you who uh didn't finish you won't have to worry about not finishing because you're gonna see what i'm doing so i name error how many predicted that correctly that's pretty good more than half didn't and that's normal you know i'm making you think i'm i'm going to intentionally frustrate you a little bit to make you think and hope that doesn't go overboard because thinking about what the computer is going to do is is a really effective way especially when you're diagnosing a problem just look at the code and say okay what's python going to do in this situation it's a really effective way to find bugs and figure out why something's not doing what you think it should be doing because python can't read your mind so and you can see there is no i in the name space once i bound i to the object integer one then when i type i i don't get a name error i get the value back and you can see that the i got added to the namespace it's an ins now j and i are two names that are bound to the same object uh and and i i know that not because of the value but because j equals i it's going to bind j to the same object that eyes bound to so that's not implementation specific that's guaranteed by python and so they are going to be the same two names for the same object so this is a list we create here with two names and they those two names the object is the same so it looks the same you can see the m and the n names that got put into the namespace you didn't do either restart like i did so you'll probably have i in there as well and maybe some other names this is the syntax in python to access element at index one python lists and tuples start at index zero so the first element is called zero and that's not just to be frustrating that's because it actually reduces bugs um there's some interesting papers from many decades ago talking about zerobased indexing is better than one based indexing it makes a lot of calculations easier once you get used to it so what this does this is actually not a name assignment right so earlier i said you know m equals in the list that's assigning or binding the name n the name m and the name n to an object in this case this is actually a request to the object that m refers to to change index element one to be that object instead and i'm saying the request is like message passing the old metaphor for objectoriented programming with methods right so that's so this so this object tries to change itself the m object the object m refers to try to tries to change itself and say oh let me go find index one the second element and whatever was there get rid of it and put a b in its place oh sorry and whatever it was referring to at element one make it refer to something else instead right you know i'm sort of switching between the talking about variables colloquially and the way python's doing it and so now you look at m and you've got one b and three so if i ask if i asked the object that m is bound to to change l index one to b will n the name n the object it refers to will it also show up as changed the answer is yes because it's the same object so we asked the object we didn't ask the m or the n the object doesn't even know its name it just knows it's a list okay all right any questions on all that all right we're gonna go a little bit faster a little bit a little faster now okay so let's just explore numbers a little bit oh okay one minus yeah that doesn't really make one sense minus one means negative one so minus you can either subtract or say something is negative uh here's you get here's how you get a syntax error and it shows you the line that failed and it shows you where in the line it failed that's what that little hat or carrot means it says at that character is when i couldn't figure out what you meant that's reassuring actually that i can't assign to a literal i can't make the literal one have a different value it's always going to mean an integer one in python okay there's equality there's inequality the not equal used to have the other one less than greater than is a not equal that i think got removed in python three so it's always this one instead is one less than two yes is one less than or equal to one yes it's equal to one so it is less than or equal to one is one greater than two no we can do math that's pretty good one slash two in python three gives you 0.5 that was a big change for python 2 fixed one of the problems with uh design problems from python that was figured out to be a design problem long after the fact this is floor division which basically does an integer divide rounds down okay this is a modular modulo operator or otherwise known as clock arithmetic right if it's uh how many times does three go into nine three and how many are left are well zero it divides evenly so there's the zero whereas if you divide that way you get one left over it's the remainder uh sorry double click there int is callable i can pass two to the int callable and get back the same thing if it takes a it'll take a float it'll take a float that's not equal to an integer and it'll truncate it it won't round it it'll convert from strings but it draws the line somewhere and says uh sorry that was a float you want me to convert that string that's a float to an end it's not a string int it's a string float and it stops there because you wouldn't want to do that one by mistake okay this error is kind of interesting value error so we've seen name error and syntax error well now we have value error invalid literal which is the string literal for int which is what we call with base 10. so it's maybe there's a clue there that you can actually use other bases and of course it's not going to magically figure out that you speak english and want to turn that into a number so it's trying it's pretty strict in terms of and narrow in terms of how it interprets it okay uh float two will convert from it to float they'll convert from strings including floating point numbers this will give us another error zero division error at what line can we add types that are different types sometimes floats and it's you can all right a equals one yep yeah we've seen that a plus one so look up the name hey in the namespace find the object it refers to or is bound to which is represented like that go find or create another object which represents the integer one add those two numbers together to create a new object which is going to be an integer 2 and display it right so now what is a what is a bound to yeah it's still one i didn't change it right and now i can bind so it showed me the two and then it stopped using it didn't have a name anymore so if i want to give it a name i put the name binding in front that assignment here it is going to change what a is bound to right it's not going to change what's in the box a because that's not the way python does it but it's going to look up the one uh create another one add them together create a two and then bind a two so in this line it looked up a is one and now binds it to two okay so it's a change in that name space a plus equal one is lets us do that or something very similar to that all in one line and we get a3 this operator is actually its own it's just it's not just syntactic sugar for this this actually tries to ask this object to change itself in place but integers can't change their value lists can by change their contents or what they refer to if it can't change itself then it falls back and does that so that's a little bit behind the scenes or a little bit more depth of what actually is going on uh this you'll see you may be familiar with from c plus plus doesn't exist in python that's a conscious choice okay these are pretty straightforward i think oh okay let's do some math so sine pi 2 name error there is no sign name available to us in python we didn't put it in the namespace and it's not part of the builtins there are about 50 builtins that you get for free that don't show up when you do a dur but they are accessible sign is not one of them right so it's not in this sort of hidden name space and it's not the ones i've created import math as i showed you before we'll add math as the name to the current namespace and make it a bind it to the math module which has a whole bunch of attributes including sine and pi so will this work now is the name sign defined in my namespace no only the name math got defined in a namespace right so there's the math that got added if i look at the attributes of that object there are lots of them including somewhere over there sign and wherever pi is there it is right so i can type this and it will work right and again what's going on here python looks up this object asks that object for this name and gets back the attribute which is a floating point object representing pi it goes and creates a floating point number representing two it does the division takes that object sends it off to whatever to look up here you get the idea right so we get the number you can do from math import sign by whatever you want and what that will do is it will go find this module which already was imported so it doesn't reimport it from the disk it just says oh i've already got i already know about that one because i did an import of it earlier and i'll go look inside it for those two objects and instead of putting math in the name space it puts sine and pi into the name space right so sine refers to math.sine now and pi refers to math.pi now i can just say sine pi over 2 and it works in general this syntax is uh not recommended when you're writing code that's going to live for a long time and lots of people are maintaining because it doesn't take very much effort to write that over that and then it's very clear to the reader exactly this is very clear to the reader what's going on oh you're talking about the sign from the math module not the sign from the numpy module something like that has to load the whole yes uh does this take a performance hit because it has to load the whole module uh no so when you load a module it loads the whole module unless the in a few cases the module is smart and will sort of auto load certain pieces but something like the math it just loads it in because it's fast to get it in um so it's pretty rare that you have really large complicated modules that incrementally load and when they do that's usually hidden from you help in is a builtin function you can pass it an object not a name it's python looks up this looks up this gets an object passes off to help and based on that object help says oh i'm going to tell you about that object and so if that's true how did help know to use the word math and the word sign well it's because the object itself knows its own name i told you objects don't know their names in a few cases they do modules classes functions when they are created the name is stuck in there or reference the name stuck in there so that the documentation works again more implementation detail than you need maybe but some of you so when i when i sort of do those little digressions like that if you don't get it don't worry about it we'll just keep going okay your turn to do a few exercises with numbers you you uh you you what do you think um come on okay let's uh move along so a number of you that you noticed in this set of exercises a couple things one is i introduced new things in the exercises and that was intentional all right i i i'm not going to do what knuth did and offer you double a dollar you know the first person who finds a bug i'll give you a dollar the second person i'll give you two four but i'm almost positive there are no errors left in the exercises um they're all intentional so when you get an error it's because i wanted you to get the error and look at it and think about it when you see an r in front of a string i want you to think what is that can i figure out what it is just by looking at the code and then i'll explain it in the exercises so so uh so yes get a little bit frustrated enough to make you think harder but if it really bugs you in you know if you're gonna hate me for it well tell me afterwards and i'll clean it up because i don't want to be too frustrating camera what else i think that was the only thing i noticed in terms of the questions that were coming around but let's uh look at these so create an integer add yep so we can do equals 1 plus 2 less than 3. so is this going to say is 3 less than 3 or is 1 plus 2 less than 3 well the answer is going to do 1 plus 2 less than 3. there's a notion of operator precedence the python documentation documentation sells you what comes first which is binds more tightly than others i'm not going to explain all that now you can look it up or you can put parentheses around stuff when it's not clear if it's not clear to you good chance it won't be clear to other people so it doesn't hurt too much to put in extra parentheses it makes your code a little bit unreadable for a little bit less readable for people who already know it once you get to know it so you should try to learn some of them but don't worry about learning all of them this is one things i didn't tell you about but you can in python you can say is one less than two and two less than three all in one line all in one expression which is kind of convenient is two less than one and one less than three well no because two is not less than one uh all the boolean operators like and and or in python are short circuit meanings it won't evaluate them all it'll evaluate till it knows the answer's false and it'll stop unless it's an or then it keeps going um 3 star star 3 means 3 raised to the third power round 1.0 and 1 is going to round up or down depending on if it's 50. one person noticed that round of 2.50 goes to two instead of three that's because uh computers don't store floating point numbers the way we look at them it's they store them with base two using a ieee 754 i think or 854 is the standard that's the standard that all computer hardware uses so it's predictable what it's going to use um but it can't store arbitrary precision so there are some rounding errors that will happen that's one of the reasons why people talk about dusty decks these algorithms were written back when people wrote using card decks and once the experts math experts who do numerical analysis figure out how to write that algorithm so it doesn't drift one way or the other with these little tiny rounding errors then they don't want to touch it because to get that provably right is really hard so when you import python libraries especially from scipy you're occasionally importing fortran code for example stuff that's been around a long time and is tested and true it's easier to upgrade the compilers for modern architectures than it is to rewrite code cheaper easier safer okay so uh around that so here you notice that here's an example where i have round takes an argument well actually now i can give it two so python has this great feature which is optional arguments round you have to pass it at least one argument but you can pass it a second argument and in this case if you look at the documentation for round it'll tell you what that second argument does and it basically says how many decimal points after the decimal but what if you put in a negative number you'd think that might give you an error but someone thought well yeah it's obviously an error you if you but there's a nice feature we could add which is how far to move the decimal point the other direction so you can round that way as well and there are a bunch of sort of easter eggish kind of features in python like that where once you know they're like oh that's really handy um okay advanced exercises again all of the exercises are start easy and get harder so by the time you get to the end of them hopefully you're thinking really hard and most of you won't get that far but here type callable help callable okay this tells you a little bit more about what the callable function does yeah yeah all pretty straightforward here i don't think there's much i want to talk about because there's more interesting stuff we'll keep going to uh here's here's where i i said okay end with base 10 so what about that also base 10 but i can do this so a second argument to int is the base so c in base 16 hexadecimal is 12 in decimal any questions okay yep so the help callable uh he noticed that the second argument was slash so that means no more required arguments after that and that's a fairly new feature in python that shows up with that slash that's a documentation it's not actually a um it's not the name of the second argument because you can't have a the name of an argument if you name it you can actually pass names i'll show you that later uh has to be a valid identifier anyway okay so strings here's a string same string right so you can use single quotes or double quotes whichever you prefer some people prefer double quotes because they're more like c some people prefer single quotes because they're slightly easier to type and they are python's canonical representation you see that you here we entered a string literal when it shows us a string literally it will use single quotes when it can well what i mean when it can well okay i want to put a single quote in that string how do i do it i can't do it that way because it gets to the there defines the string and then it sees this s all by itself and then a dangling unmatched single quote at the end um so i could either put a backslash in front of it which escapes it's called escapes the quote right so python when it sees the quote it says ah you're starting a string and it remembers that and then it starts adding characters to the string so t is the first character the string not the quote when it gets to a backslash it says oh whatever comes next i'm not going to do what i usually do which in this case is end the string instead i'm going to actually add that character to the string and then it keeps going when it gets to this one which is not escaped with the backslash it says okay that's the end of the string because i was looking for i got a quote and this is the second one therefore it is the two ends of the string okay so you can do that notice what python does it gives it back to you in the way it its best effort at representing the string it puts double quotes around it in a single quote in the middle which is a lot easier to read so that's one of the reasons why you can use double or single as it makes it easier to write things with quotes inside them like this like this how about two lines no it doesn't work but that does so if you use triple quotes single apostrophe or quote marks you can have multiple lines uh newline characters in the strings you hit enter and this is whether you're in in python code or at the interactive prompt uh now in python code if you're doing it inside a function and it's indented then all those spaces that are indenting it are going to be part of the string okay here i want to put triple quote around triple quotes so i want a single quote there and a pair of double quotes there it doesn't know what to do right so it's got the four quotes in a row and it got confused it's one of those ed's cases where in theory the people who maintain python and are extend improving it could go make that work but is it worth it there's other ways to do it so it just gives you an error and keeps the language faster and easier to maintain being less code this will work here's the other way to put new lines in of course up here we put a new line in by hitting enter on the space there that's because at the interactive prompt it always puts in a space as part of interacting with you typing in is an operator in python operators aren't just pluses and minuses and slashes they're words sometimes too like the in operator so is the string el in the string hello so is it a substring not in is also an operator those of you who are familiar with other programming languages you might find it funny that this not isn't over here it's because not in two words is a single operator which means the opposite of n you can also say not el in hello it would work but the not in is easier to read and there's lots of things in python that are done to make it easier to read make it much more like you're reading like you would be speaking all right so a string is stored in python as a sequence of characters a single character in python is stored as a string of one right so there's not a separate character and string type like there is in some languages a character is a string of length one a character the string you can access elements of it so here we use the square brackets to access the element at index zero that's the way i would say it which is going to be the h and we get back a single character i.e a string of length one so it's the same type so this single character string and this multiple character string they're the same type of type str uh are those characters stored as bytes or two bytes or four bytes the answer is it's none of your business you shouldn't have to care right in python this string representation is a is an abstraction of whatever was on the disk or whatever came in over the network um it's an abstraction that's trying to represent at a high level closer to where we think about things it's a string of characters right and if those characters are klingon or korean or french characters whatever it doesn't matter python knows how to handle those when you put stuff on the disk then you need to worry about it when you read stuff off the disk you need to worry about it and i'll show you some of that later okay let's bind snt to the same object there they are i can look at them so here you notice if i evaluate you've seen this before just a reminder when i say s comma t python says oh you must mean a tuple and so it interprets that as a tuple and returns you a tuple that's why it's putting the parentheses around it it's handy for uh to be able to do that though in several cases so this is going to look at the ello and look at the j create two string objects from those literals concatenate them which is allowed in python when you use a plus on string types it puts them together and return a new string object jello and bind s to that what's t that's right okay what's this gonna do are you going to change jello back to hello strings are immutable that's right strings and tuples are immutable in certain individual floats are immutable it means they cannot be changed and the way it shows up here is string object does not support item assignment so someone out there said it answer the question correctly good for being correct just keep answering incorrectly just don't be afraid of answering the wrong answer we're here to learn stuff yes right so why why was it that before when i had two lists m and two names and one list i had a list object where i said m equals n equals list and i then used m sub square uh subrag sorry m sub 0 m square bracket 0 equals and i changed that's because lists are immutable and the equal in m square bracket 0 is a request to the list for it to change itself in this case i didn't use the any square brackets so here it's actually this is a request to python to change the binding of s to point to the object that gets created by the right hand side okay so yes good good catch that those seem to be behaving differently and they sort of did and they sort of didn't uh so partly it's because uh partly it's because the list example earlier we had s we had m sub zero so i tried to do that here and i can't so that's why that's why i had to do it that way instead okay but i don't like the fact that i have to go back so i'm going to make a note to fix that okay all right so s is still jello didn't change okay hmm what's the b oh in the exercise the strings oh someone was working ahead they were noticing the r in front of a quote you were working ahead i think okay uh so what's the b mean the b means bytes so in python there is a bytes type which is really great but it's actually a little bit confusing and uh this is the first time i'm trying the next treatment here so be sure to write down notes if you can think of ways to make it better um but what this does is the the string type is an abstraction of characters the bytes type is bytes it's like one byte right but you notice i didn't have to put in the integer numbers that represent these characters it assumed i meant ascii and it translated the h into the number for me and the e into the number for me and if i look at the type it's a class it's type b class bytes it's the type bytes um s1 is hello b1 is b hello are these equal who thinks they're equal raise your hand who thinks they're not equal raise your hand oh fairview fair number you know that they're not equal right so why aren't they equal it's because by making them not equal it helps you prevent it helps prevent you from writing bugs so character encoding was one of the things that was well supported in python 2 but the way it was supported made it confusing and it made errors lag it did the friendly thing which then you would regret it later python 3 you regret it right up front it tells you right up front no you can't do that so you can't compare and that makes total sense right if there are bytes on the disk i've got a if i've got you know a byte which is you know 220 followed by a byte which is 13 follow which byte which is seven and i compare that to three characters well they're not the same one is integers and one is characters the fact that we use integers are numbers to represent characters that's the confusing part or the part we have to make sure we think carefully about the difference so what if we want to take those bytes the numbers that are in here and turn them back into string characters into characters in a string this is how i do it i decode right so we take characters we encode them in bytes on a disk in a file or over the wire like a network protocol so if i decode them then i can compare it to the string so if i take those that what looks like a string is actually bytes and decoded into a string then it actually is the string hello and it's equal to the string hello okay i'm going to keep going here uh what if i take s1 and call n code on it well s1 is a string when i call the encode method it's going to return me an encoded version of that string encoded in bytes and it works now why did it work partly because uh it encoded it with a default encoding which is utf8 and utf8 encoding for hello is the same as the uh is the same as the bytes uh ascii hello sort of is basically where i'm going with that um so as long as you work with ascii uh which is seven bit then utf8 is identical as soon as you go past those first 127 characters then utf8 you start to get different numbers of bytes per character sometimes and how many it depends on the character anyway your turn to do some exercises and i'll wander around yeah one more comment uh so so i said that the the way i'm doing the bytes and the encoding and decoding i put a lot of that in the exercises so when you get about half done the exercises i'll stop us and go through it together i probably should have moved some of that around my mother um uh uh you you okay so i think uh close to i think most uh more than half of you have gotten about a third of the way through and i'm going to change the structure here and i'm going to do the second most of this is i'm not going to let you finish the exercise i'm going to go through them slowly and i i i had planned to shift that section around and forgot to do it so to have more of it in the lecture and lessen the exercises so let's look at this so if you put an r in front of the string it doesn't do much to that string it just seems like it's a different way to do the same thing but here look what happened so r spam is spam r spam with the backslash n it puts a double backslash in right and the r stands for raw i think which seems kind of a funny name but basically it means don't do any special processing on the stream i.e don't interpret backslashes as an escape character so when it sees a backslash it puts it in and then it displays it to you with a double backslash without the r because this is what you would have to type back in without the r to get the same string as you type with the r and a single backslash okay uh and again the exercise here was trying to get you to figure that on your own and if you don't that's fine it just helped you to work your tiny gray cells as poirot would say um the uh and you can see those those are the same string right so if you put the no no these are on right why are these not the same because this one has a backslash character and an n character and this one has a new line character which is what backslash n gets interpreted as in a regular string and you can see the length is different right so one's got one more string than the other one one more character in it than the other okay so yeah i'm going to skip that one so you can multiply strings which is basically concatenate multiple copies of it you we saw you concatenate strings before but you can't concatenate strings to other things at least not those but you can turn it into a string and then you concatenate them okay oh that's kind of cool if you have two string literals next to each other python assumes you want to concatenate them so it'll do that as part of parsing all right there's a dollar sign there's unicode code point 24. oh it looks like a dollar sign there's a unicode named camera exactly the right term for that but unicode is the standard is the standard we use for encoding characters but the unicode standard is not um i have a pet peeve what is that file encoded in well it's encoded as unicode no unicode is not a an encoding unicode is a standard that includes things about encoding so if someone ever says to you it's a file encoded in unicode you say okay which one unicode utf8 utf16 some other character encoding so this is the there's a there's a a table table hundreds thousands tens of thousands i think of characters and they each have a name and this is the unicode name for dollar sign and you can use the backslash capital n to actually enter a character that way if you want and you can see that these are all the same character okay interesting not really helpful it happens to be that those three are also stored in the same object strings are immutable so it can do that if it wants to but not every python implementation will do that um okay just think about equal so let's uh do a few things with that dollar so if we encode that looks like it's the same except the b in front so when you encode it turns it into a bytes object and they are different as you saw earlier with um was it hello the string hello and if you look at the you see the types are different one string and one's bites it's a single byte long let's encode it and take its first element i didn't say character on purpose because it's not a character bites don't store characters they store bytes what's first it's an it's so that's interesting if you take a bytes type like uh where was it first so dollar encode you turn that into bytes well hello for example the bytes type hello the bytes object hello it looks like hello it's not it's actually whatever the number is it's it's a list of integers but it's sort of intended to be used for encoding characters right so it's kind of interesting that when you take uh the bytes type let me have a better example of that hang on a second okay right like if we say b hello v hello sub zero that's kind of weird isn't it so what's weird is and this is the trick to uh if you're new to character encoding and you think you i encourage you to just remember that when you see a b it's lying to you it's letting you enter the characters because it's convenient but it's not storing them as characters as storing them as bytes and i'm bytes meaning lower level down on the disk okay okay so if we look at the types of these things we got you know string bytes and int if we look at the the dollar string the encoded version and axis in the first element of it if i take that 1036 and call the chr function on it it will give me back so chr and ord let you map from ascii values to ascii characters uh i can turn it into binary a string representation of it okay let's take the pound sign and do something like that so there's the pound sign character uh some of you might not be able to display it that way it depends on what version of python what outbreak system what shell so whether or not your shell actually can display characters beyond ascii defense if i try to turn that into a string well yeah what would turn it into a string b isn't this a string already the answer is yes it's a string it's a type string if i do a wrapper of it well repper all that's going to do is show you what you would have to attach here's a string of five characters the middle three characters from the uh quote to the pound and the quote that's what you would have to type to get it back in if your interpreter interact your prompt can let you type in those characters i can turn that into an ascii and i get xa3 using a certain encoding okay okay let's look at encoding a little bit more and then we'll move on so in code we saw earlier encoding utf8 break is at what time i think it's three someone look it up for me please i think it's three but yeah i'd like to know a few minutes before thank you for that reminder um so if i encode the pound sign using utf8 it actually gives me two characters uh sorry two bytes two values right so if you take the pound sign and code it with utf8 which is by far the most popular encoding on the web has been for almost a decade not quite uh you get two characters or two bytes to represent that oh sorry for being giving all this detail about encoding you need to know about it otherwise you get into trouble and you'll just like if you know what you get into then it's not so bad what time's the break anyone find out yet okay thanks so we think it's three o'clock uh so utf8 is the defaulting coding i can pass it or just give it no argument it'll assume that it's two bytes long those are the values of it right so you notice if i take that and try to enumerate over i get the integers out when i call a list it just says whatever it is iterate over it and give me the elements individually so that's why i get the list back with those two and i can get the first one the 194 and look at it as bytes and the second one look at his bytes and here is where you'll see in uh basically if these if this is a one this is just for your information if the first bit is a one then it's the start of a multiple character utf8 character multiple byte utf8 character if it's a zero it's not and so in this case uh so with utf8 when basically running along you say all these bytes that are less than 127 and you're or 127 or less and they all start with a zero as the highest bit most significant bit and when so i'm reading utf800 let's just ask you to ask you ask you ask i get to one where oh it starts with the one then i read the byte figure out okay is this one it's going to be one more character two more character or three more characters it reads those in and turns it into a unicode behind the scenes it's stored something like that okay what else here interesting so if i you encode that with windows 1252 which is was the most popular encoding on windows i'm not sure if it still is depends on how you measure it it's a single character if i encode it as iso 8591 which was a popular html encoding it's the same as windows 52. how about the euro sign the euro sign in windows 1252 is that byte in utf8 it's those three bytes in iso 8591 it's not possible so this is why if you're doing stuff you sometimes need to worry about encodings and how to do things always use uti always remember that characters are encoded at a higher level obstruction when you go to bytes or come back from bytes you have to worry you have to know what you're encoding from or to can't do it that way i can use the ignore on the encoding and it'll basically drop the ones that can't convert or i can replace them say replace them replace the characters accounting code with a question mark instead some interesting features okay string functions and methods any questions about all that encoding stuff i think i that was the first time i've presented this material i think i've got a lot of changes to make to make it a little bit simpler a little bit easier more feedback would be welcome yes what was the first character it wasn't it was two bytes what was the first byte oh you could convert it and find out i don't know what the actual number was i let python worry about that what's that there you go and and and you and you can't you i there's no one answer for it because that first character changes that's sorry that first byte changes depending on where in the unicode code space in utf8 it's trying to get to so encoded in that first byte i think you can have i'm not utf8 expert i think in that first byte of a utf8 more than one character character representation like a 2 byte three byte or four byte utf8 i'm pretty sure that first byte actually some of the low order bits can change too i could be wrong on that though okay yes yeah it is confusing here the here's the summary uh when python's running and you have it's doing things with strings like you're saying is this uppercase does this string end with an s you're dealing with characters and the characters are can be anything uh hindi arabic korean english english with an accent imported from you know whatever all sorts of stuff when you want to store that on the disk you have to choose an encoding to use you can't just say well use the use the one that everyone uses because everyone doesn't use the same one there's some stuff that's encoded as ascii and only has 127 characters there's some stuff that's coded as windows 1252 and has 256 characters well not quite there's some stuff that's encoded as iso 8591 and overlaps with tundra soft due to a lot it's almost the same but there's some that are different and then there's stuff that neither of those can encode at all like the euro so you have to choose an encoding the short answer is always use utf8 and you'll be happy as long as it's supported all the way downstream including the database how many characters can be encoded in utf8 uh was many 256 to the fourth power almost plus right because i think four byte characters are the largest in utf8 and except for the first few bits any of them can be used to encode that so unicode has tens of thousands i think it's in the 50 000 range maybe more i don't keep up the difference between binary and right so the bits i'm just saying i use the word bits to mean on the disk there's bits on and off so it's actually the the number that's represented in binary the bytes type is the way a convenient way to store a list of integers in a compact format that's almost always used to convert between encodings between encoding characters and unencoded characters that's all it is and that's why it looks funny is when you look at it it'll often show you characters even though it's actually storing a list of integers okay string functions and methods uh i think uh so the break is at three then i'll get through at least some of this maybe all of it and then you can either take your break early or late or whatever choose when you work on the exercises we'll see length four min what does it mean to take the minimum of a string well min is going to iterate over this object when you iterate over a string you get four strings each of length one and it's going to show me the smallest character uh in terms of the earliest in the in the way it's encoded is historically how it was max works sorted always returns a list does that string start with an s does it start with an s and a p does it end with an m give me an uppercase version give me a lowercase version take the white space off the front and the back new line tab space vertical form feed all those things just rip them off actually no just take them off the right side oh no actually just take them off the left side okay take off now this one's confusing you might think this is dropping the csv the dot csv from the end of a string but it's not this is actually dropping the dot or c or an s or a v from the right side which doesn't look any different there but here it does a and here certainly does right so this one's a gotcha that some people get confused about so uh r strip and strip and lstrip take a string and it looks for any character in that string and rips it off okay split is a method on string that returns a list of strings split on any white space by default if you give it an argument then it's not going to take the default of any white space it's going to use exactly what you give it so here it's going to look for the 2 character string comma space comma space and there it's the end of the string so it doesn't matter whoa look at all those methods i did a dir of str or maybe a deer of the string what would i do i do the the class itself or the type itself there's lots of methods on there let's just look at what they are well that's a little bit easier to read but there's lots of them if i look at the string or the type they're the same which is mildly interesting for those of you who know what's going on behind the scenes a little bit or have more programming experience uh index says please find that string in the larger string so look for that string pa in the string spam and it finds it at character offset one zero one so there's the one and two or this is index is just like oh no index will raise a value error if it can't find what you're looking for find is just like index except it has different behavior when you when it can't find the string these are all fairly straightforward oh i can replace the e with a three all e's with three or just one e with three and that's it so start the break now come back at about 3 15 3 18. you can work on the exercises now or later if you want to break snack coffee you probably want to go out now instead of later shorter lines spread it out so before i formally start how many of you have finished the exercise and i won't walk through that shows okay welcome back from the break um some of you had time to work through some of the exercises i'll go through them now and show you what you missed or the ones you didn't get to uh before i do that had some couple comments uh helpful comments on the utf8 and encoding those pieces and a blog post was it joel on software a very good old blog post on understanding encoding there's a bunch of good ones out there that explain encoding again it's it's i don't know if you need to know the depth i put in here i'll probably simplify for next time but understand at least about encoding the two levels of abstraction that you can't mix them easily and when you do you have to be explicit on what you want to do so if someone gives you a file and you just open it and read it without asking them what encoding is that file then someone's made a mistake like you need to know what encoding a file is if you want to safely get the characters out of it and simply for a like a stream of data it's usually not as important to ask because it's usually encoded in headers between like a browser and a server it's already that negotiation happened for you but if it's just a file on a thumb drive or email to you find out what the encoding is okay so exercises here so sorted spam again supposed to think about what's this going to do well sorted is a function that takes any iterable string is a kind of iterable a list is kind of iterable a tuple is an interval a dict is an interval there's lots of other file handled and then it pulls out all those elements which for a string are going to be the individual characters representative strings and puts them in in sorted order let me get rid of my little sidebar there uh you can pass an optional character optional argument reverse equals true puts me in the reverse order reversed is a builtin function that takes an iterable and returns a reversed object at a particular address so many uh over time python has is gent is is slowly and steadily marching towards more and more lazy evaluation so don't uh evaluate until you have to generators do this a lot of functions do this um the views on dictionaries et cetera so in this case the reversed object won't give you them in reversed order until you ask for them individually and that in many cases can be more efficient because it's not putting stuff in the member you might never want anyway well in this case it's all memory anyway but uh if you want to iterate some over something to see what's actually in it like a reversed iterator you want to do the iteration the easy way is just pass it off to the list built in it will iterate over it for you and return the list okay upper is upper title is title see the pattern there there's a bunch of them there where the is is the predicate function or predicate method it's called because it answers yes no question and title returns a title case version of the string and you can see what title case does with spaces swap case right so here we've done what's called method chaining we called a method so this object this method was called on it a new string object was returned which was spam eggs in uppercase and then the swap case method was was called on that object to swap the case so method chaining is becoming more popular especially in some libraries in python is that string substring is pa a substring of the spam string is the exclamation point in that string okay will he nearly find ill ah it said in index one right there find the first one that starts after six that should be that one there we go offset seven anyone get through far enough it's not going to work for me because i didn't define s anyone figure out what s dot index 0 s index space does oh this didn't work because s is defined but it's not assigned oh so in years s was defined thank you that's helpful where's mine it was not because i'd reset my interpreter right so if we set s to hello world as an example which i think i did next and then go back and do it well then we see i mean basically what's going on here is that s dot index says look for the o but starting at the character starting at this character position where this character position is whatever s dot index space returns so it's going to start looking at space to find the o so it's going to get the o there okay uh yeah and then you can see yeah build it up and see okay uh count the spaces in string how do i check for more spaces of nonspaces in a string think about how to solve that you know that they say about regular expressions if you have a problem that you solve with regular expressions now you have two problems just because they're so like for simple stuff they're great as soon as it's so easy to go over this line that's hard to see it's in this visible line and suddenly like why did i write regular so yeah they're great but keep them small regular expression would work you could do an s count of spaces you could do replacement spaces and count what's left there's a bunch of ways to do it i'm not gonna actually go through it yeah oh no that was a not a question okay questions before you move on so let me do a check uh how many of you think i've been going too fast raise your hand how many of you think i've been going too slow raise your hand so at least within the bounds of people's courage to stick their hand up alone uh i'm i'm hitting the right stride good um and and other feedback welcome in the uh there's a little comment box in the survey i think you can type as much as you want i'd like to hear it i was tightened with someone over lunch who said yeah these you know surveys are a great way to get feedback but sometimes it's kind of you know it's kind of passionate not very polite feedback if you're so frustrated that you can only give me feedback online in politely i'd still like to hear that because that's really important feedback for me to know and i have in teaching over the years sometimes gone too far on the frustrate users to help them think make them think i have gone i've gone across that line sometimes so feel free to tell me i'd like to know so print and string formatting no difference when you're in the rebel in a script or code you're running if you just put a three it's never going to print out you have to actually call the print function right i can call it with multiple arguments by default it separates the arguments with a space here you can see print three four it printed and then there's a new line that got printed just like the repple printed a new line after it so by default there's a new excuse me new line you can put a backslash n to add another one you can do this in python 3. most people are moving towards the dot format operator or f strings uh so the way this works and you still see it it's um it's basically this percent that i showed you earlier as a mod operator like a remainder um is saying is basically saying please look in the string for percent d and interpolate is the official term for that number into that string so you get three good reasons um however this is much more common in newer versions of python since two six or two seven i think um and so what happens here is it looks for curly braces and then matches the argument to the curly brace that's in the string okay uh so there's the format built in method you can call it with no arguments and there's nothing to interpolate not a problem you can call it with an argument that doesn't get interpreted because this string didn't have it but if you say i want to interpolate something and there isn't an argument to interpolate then it tells you there's a problem and there are good use cases for why it would allow these other ones because you don't i mean here we're playing with toy strings where we know the string we know the argument ahead of time often in your program you have multiple cases and some runs or once sometimes through the loop you might have values there other times you wouldn't and you could simplify code by having these at least in some cases more relaxed interpretation such as this one where you have an argument but nowhere to put it uh yeah that's no different so hi class uh i can use numbered arguments if i want i used to have to use them now you they're optional and that's advantageous if you want to change the order which again in this toy example it's more confusing than helpful but in real world examples it would sometimes be more helpful than confusing you can also repeat them that way so they're a good good uses cases good times it's good to have the ability to use numbered arguments uh and then you can see like the colon d here now again reminder i'm not expecting you to memorize all this stuff just let it wash over you and absorb as much as you can okay so so you're aware of all the things you can do just like strings there's tons of things you can do with string i would say i think this is good advice if when you're trying to figure out how to do something in python and you know i could do that with an index and a this and a loop think is this something that lots of people have done before and wanted to do before and if the answer is yes there's probably already a way to do it that doesn't involve you writing five lines of code there's probably a method or a builtin function and if stack overflow doesn't give it to you just keep looking because it's almost always there standard library same thing the standard library in python is huge people say it's batteries included and for probably the first six seven years of me programming quarter of my time in python i kept kind of every few months like oh that's in the standard library why did i write write that code six months ago um because there's just lots of stuff hiding in there that you know i and i'm the type that reads manuals up front like oh let's just read through the standard library manually skim it to see what's there and then i'd forget stuff okay back to string formats uh so colon d is the way so you put a colon after the missing argument here so so again here the the argument is just the implied first one because it's the first in the string here um and then colon d is a modifier that says here's how i want you to format that argument so i want to format it as a decimal a string a number or a number 10 characters white right justified or same thing but put the negative all the way at the left side or explicitly right justify it put underscores in front of it left slide to the left of it put it in the center lots of stuff what's that yeah you can do that too and i have some duplicates here i don't know what that one does equal plus 5d what's the five it's only showing i think it says no no oh show yeah i can't remember there's actually a good online resource called pi pi format i think uh dot info or something like that that just shows you lots and lots of examples um it's a really complicated like there's lots of features i don't know nearly all of them you can also put names in like this and then give argument names like that to match them right so and in most recent versions of python you can use an f string where it will look in the current namespace for gree and who so if i have these names in the current namespace when the string executes then it will find them and put them in and that's uh these f strings are like way almost always far more readable than the dot format version because you can see the placeholder okay your turn to uh spend a few minutes looking at exercises you you so you okay i'm going to move us along here and i'll go through these exercises so you notice you can take that print takes defau optional arguments like what to separate in what to use as the separator between its argument its other arguments other than space or what to use as a ending string instead of the new line character if you want to have nothing as the end character you might think that end equal and then give it an empty string would work but it won't sorry that n equals none would work but it won't you have to give it an empty string and that's because the end equal none that's the way almost all functions when they're written they take uh they say well this is a character that you you you have to you can supply what you want to end with or if you give us nothing then we'll use a new line and sending n equals none is like not giving it there's no way for the called function to actually tell if you explicitly called it with none or just left the argument off so that's a little gotcha that shows up in other places as well once you realize that's the way functions are implemented you won't it won't trip you up as much uh nothing new there there we duplicated the three or the four switch them around right so here you can see that seven is the width and point two is how many decimal places and those mean different things for different items like the s if you say it's a string then the dot means how whether or not to truncate and how closely or how tight b is binary you can sort of play around hex hexadecimal octal percent so it does the math for you and puts in the percent sign here it's print for me one third five wide two after the decimal point and it's a percent so here notice that we have a curly brace pair and inside it there's a curly brace pair exactly where you would expect to see how many digits after and so there you can see how that works uh obviously if you know up front what they are stick them in the string but if this is a variable that changes with various runs or configuration or whatever that's when it makes sense to use it and you can even do something like that where date time objects the date time object has its own format specification so when format method runs it acts the objects it actually goes and talks the object to say well do you have a dunder format method and if so it uses it to figure out how to do it so you can write your own in theory sis.version info is an example of a named tuple in python so it's uh it's like a list it's like a couple of elements that you can access by index or by name and so for example here i can say pass cis as the argument and then i put dot version info as the part of that argument i want so uh yes so then it's going to show me sysdot version info or i can pass uh in this case i use the format in this case i'm using the fstring so it's going to look for sys.version info and just take uh oh it's gonna put the whole thing same thing in there 308 i think that's a little confusing let me make a note uh and notice in in the f strings you can put inside these curler braces i mean here i've got you know take that piece out and multiply it by three and add five and we'll play that you can put almost any python expression in here which is not true for the dot format method the dot format method there's not quite as much python you could play there there's a few restrictions but not too many so um and that can wait i mean like in my opinion that's starting to get pretty ugly and hard to read so when do you put stuff inside the curly braces when you put it in a format whatever's going to be readable easiest to read by yourself or someone else six months ago is the way i answered some of my questions think about readability okay questions on format printing okay tuples and lists there's a list there's a tuple you can pass any iterable to a list and it'll create one for you you can pass you can access you can ask a list to change its element at index one so it's going to instead of referring to the b it's gonna or two it's gonna refer to the b so it can change itself they are mutable i could take uh any iterable and pass it to the tuple builtin name that callable and it will create a tuple from it and if i try to change the contents of a tuple though i'm going to get an error does not support item assignment but you create the mixed of course there's no restriction that tuples all be the same type the only place you start you see that all the things in a data structure need to be the same type are things like little string they all have to be strings and then you see in other libraries like numpy where columns have to be all the same type if you want to be fast okay so can i concatenate lists the answer is yes then you see what happened i got a new list those two lists stuck together sort of of course the original list didn't change i didn't use plus equal here i just used plus right earlier i used a plus equal which says please modify the list extend it can i so here i added a list to a list here i'm adding a tuple to an int and it says you can only concatenate tuple to tuple okay so let's try concatenate the tuple read the error what happened so right here not int it's seeing an int there why well because round brackets in python are used both to create tuples to call functions and to uh enforce precedence in mathematical expressions or make them more readable or both so the 4 is being interpreted as not a tuple with the single element but as the number 4. well there's a that works okay that worked for creating a tuple no it didn't look good so t equals four that actually said t is now an inch so that's not working and it doesn't matter how many parentheses you put on it's not going to help um but you can oh see how about here here if i put abc is going to give me a tuple here i did tuple four and it gave me an int here i give double abc and gives me a tuple of three characters so if it can iterate over what you pass it it will do so and put those elements in the list in the tuple sorry um if you need to create a tuple with a single element you can do it that way and you can see that it works so occasionally you'll see that on output as well like here and that's what's going on there so it's sort of this collision between the multiple uses of parentheses we have this edge case that we have to handle so a comma trailing is allowed uh is required and in fact a trailing comma is allowed in lists and tuples and dictionaries and that's quite handy when you have a list or and you split it across multiple lines you'll often see a comma f between them like you'll have element number one comma element two comma and the last element comma and then the closing square bracket and that people once you get used to it it's more readable it's easier to edit a bunch of reasons why people do it that way oops got an error there i have a typo here let's do that and that was it line 433 is that the second typo is that two dollars now okay so now if i take the tuple t which is a b c i can add the tuple four and i get a b c four as a new tuple right so you can do the math as in concatenate multiple versions of itself there's another way to create an empty tuple a list vcdf length 4 minimum maximum sorted reversed list reversed i think you've seen all this in the exercises before why does this feel like repetition i think i have another error is that eight dollars no four dollars now there you go just reinforcing thank you so uh m dot insert zero a what that does is it's going to insert a into the list m before index zero okay what's that going to do someone said at the end so let me read this one again insert a before index zero so let's insert e before index minus one what is index minus 1 on a list that's index minus 1. so if i insert e before the index of f i'm going to get it e before f okay so if you someone asked me earlier about how do you read slices and where is it going to put it well if you think i always think of before in cases where it's i think in most cases maybe all cases where it's ambiguous think about it as before the index you're giving is you wanted to put it in before that put it in before that and then it makes sense and we'll see some other examples that later m.remove e this is one that sometimes people get confused and think it's going to if you pass it a number it's going to remove an index it's not it's going to look for that element so mr move looks through the list finding one that's equal to e and removes it from the list now you notice it didn't return anything so it doesn't pull it out of the list and give you a copy it just asks the list to remove that element from the list um actually what i couldn't remember oh so m.pop will pop the last item and return it hang on uh and what i couldn't remember earlier but i'm sure i'm remembering right but someone feel free to prove me wrong is that if you had two e's in the list it finds the first one to remove it it doesn't go looking through the whole list it says just remove the first element that matches that that is equal to that all right so pop does return an element and remove the last one so let's uh bind i to the one and j to two okay so i don't need the parentheses here i'm doing uh this is uh sometimes called tuple assignment or unpacking basically if the right side is an iterable and the left side is multiple names like an implied tuple that can be entered over it'll do multiple name assignments at the same time sorry about that all right so there's a tuple of three there's another tuple of three are they equal what does it mean for two tuples to be equal the answer is it's that they have this they have the same contents meaning that each of their elements are equal so when you say our two lists equal our two strings equal our two tuples equal python goes through looking at each element and if it gets to the end and they were all equal then the tuple is considered to be equal the two tuples are considered to be equal how many threes are in there you saw this before with strings right so a bunch of these the same now this looks kind of weird but it's really nice left side right side is four elements left side is three but the star says put extras in there so what's gonna happen is n3 will be three and four will be four and rest will be all the rest of them it doesn't remember the type on the right side like this is a list over here it's just looking at this as an iterable iterates over it doesn't know that it's a list it just puts them all into a list it turns out right so n3 was assigned three and four four rest was designed four five six and then be because i use commas between them here it shows it to me as a tuple but it's actually it's doing the three name assignments is the part that matters if i put it in the middle here works cool you can't it can't be ambiguous so it doesn't always it doesn't read your mind so your turn now to do exercises for tuples you you okay once again i'm going to stop those of you who haven't quite finished and go through it as a group here there's another one that exercises pretty long so lists right so you can see here that if you're going to use the plus equal operator on a list the object has to be an iterable such as another list also implies it doesn't have to be another list it could be any iterable all right sure enough append appends an element to a list and append appends an element to a list it takes only one argument okay so let's append an element to a list and we have a list that contains as its last element a list of three strings okay let's uh delete that one so before you saw em remove here i'm saying do a del of m minus one this is not a namespace operation it's a request to the list object that m is bound to to remove its last element so and this last element is the list efg so i remove that and now it stops at d and if i use extend instead and give it an iterable like a list then i get the efg added each of those okay that comment i forgot to take out i think yeah it's bam we have five in m right so similar that's just too long right so in here just like in in a string here it's just looking to see if it's in there and you can see that in and not in not in as a single operator or not the expression of within operator either works well how about that one five six i see five six in that list oh no i don't do i but now i do so is that object in that object so that list now contains five six before it contains five and it can say six but as in as separate objects that's interesting m is one two three four five six seven all the way up to g with some weird mix of integers and strings uh n is three characters one two and four three elements and one two and four so python lets me compare those two objects and it will go through them and say is 1 less than 1 yes is sorry m less than n is 1 less than 1 yes 2 less than 2 yes 3 less than 4 yes and then it runs off the end of this list and it's done so it says sure true so you're allowed to compare lists of unequal length in any interval other intervals of unequal length that's not a problem so these are just doing lots of unpacking on the right to assign to bind multiple names here multiple assignments do you notice any iterable works on the right side as long as it's the right length so all these are unsurprising there's a split like we saw before gives us a list join is the reverse so if you call split on a string it returns a list if you call join on a string it returns uh and pass it a list if you pass a list to join on string it returns a string just a little bit sure in the middle this one line 520 yeah show up where this line igk i j k l m n o p ah so this did the assignment this is showing the values p is right there i think it is anybody else in the problem yep so what happens here is python looks at this iterable one two three four five six seven eight objects and it looks left side one two three four five six and says okay i can do the last two and the first three and all the extras i will stick into there yep you're the only one that asked some of the other people were thinking they were under it too probably oops what happened here so here i join on space i can join on something like a column space i can join an empty string just to concatenate strings together you'll often see that as a pattern because joining concatenating to strings one at a time is slow if you're doing big strings well computer's a lot faster now so it doesn't usually matter occasionally it does okay there's a list m dot sort called the sort method on the list m and it will sort in place and it doesn't return anything or more precisely it returns none than none object reverse similar okay let's start over again i could do sort ask it to sort itself in reverse order yeah that works too i can ask uh it to sort itself and reverse itself why will this fail so remember how method chaining works is that this will create a list that looks the same as that one this will ask that list to sort put itself into sorted order and it will return nothing and then python will try to look up the name reverse on the none object and it can't find it so i'm going to get a name error or an attribute error on the none type object the none object which is a type num type no no some it depends so some methods don't return anything some do so in this case sort and reverse uh i have a specific reason they have there is a specific reason for that all right and i don't actually say it but but it's it's because there are builtin functions sorted and reversed and built in and methods on list sort and reverse without the d on the end uh and by not by returning none it makes it even more clear that if you've done the if you use the wrong one by mistake uh so we could say m equal list m.sort m.reverse that would work fine well sort returns none yep okay uh and here's the sorted function well it's not though i called it as a method there's no sorted method there is a sorted function okay so sort and reverse are methods on list or and possibly other objects sorted is a builtin function that takes any iterable and returns a list of those elements in sorted order okay any questions all right let's do some stuff with slice sequence yes does what so the method reverse is a request to the list to reverse its contents and it returns none it's a requested list to reverse itself and the list method does do that in theory you can write your own reverse on some other object that doesn't but reversed is a function that takes any iterable and returns a list remembering that exact difference it's okay if you forget that but in general you got to remember these little details that's part of what keeps you happy when you're programming okay so there's a list access element zero number three the last element second to last element okay so what's this one going to do this is going to return this one returns an element an element in element l this one is a slice and it returns a sub list and the sub list is going to be a list of elements that start at index 0 and stop before they get to index 1. so what will this return some people said march and that's not quite right it's going to return a list of all the elements starting at zero and ending before one so it's not going to return march it's going to return march right it's going to return a sub list okay and that's a tricky thing uh this one will start at zero and stop before two so it will return march and april in a list a slice this one will return the whole list start at zero stop before you get to the minus one element it will return the whole list except for july okay this one will start at zero and stop before it gets to element 100. who thinks it'll give an error raise your hand who thinks it'll give the whole list raise your hand yeah it'll actually work so it's completely reasonable to think it might give you an error many languages would in python it's like well again as long as you think the reason i'm using this stop before you get to is that way of thinking about it uh makes it at least a little bit more comfortable that this would not return an error okay it's a language choice when they design it that this works and that actually does come in handy sometimes this returns a list starting as early as you can and stopping as late as you can because we've left off the start and stop so it returns the whole thing and those are three ways to do the same thing okay so all three of those basically make a new list all of these are making a list this is a new list new list new list new list and these in this case all three times there month two was bound to a new list where the elements and their order was the same as the old list but it's a copy of the list okay so the difference is the list stores the ordering of the objects the objects are shared between them but those are all immutable objects they're strings so you can safely change one and the others won't be changed okay there's a tuple and there's a copy of the tuple oh no that's not right i think i'm wrong i think i have a i think i just learned something other check here oh no i'm right okay yeah so if you use uh so so all of these using start with that tuple if you use square brack cone it returns a sub a slice of the tuple and it is a tuple type because it's a request to that object so it returns the same type and you can do it but you can't do copy there's no copy attribute you can't do there's no copy method on top of but there's a list some objects have a dot copy some don't uh in general when you are writing this to remind me to tell you this in general when you're writing a function try not to think okay i'm going to get an argument which is a list and i need to do some things with this list instead think more generally if you can instead write the function as okay i've got this list and i want to do something with it let me write a function but let me write the function so that takes any iterable and works on it and don't assume that it's a list assume that it could be a list or a tuple or a string or an open file handle or open network handle or anything that can be iterated over a generator a generator expression uh then your code will be more reusable uh you'll you'll find you're using it for things you didn't intended for down the road which is really nice okay let's get back to that list there's months two which is a copy they are the same they are the same what they're equal those two lists are equal when you compare them they are equal are they the same two names for the same list no because remember i create a new list when i use the square brackets so they're different list objects that happen to share the same uh contents if i ask month 0 to delete its 0th element the element beginning march it will do so and we can see that march got dropped but months 2 which is a different list march is still there if i take months which was april may june july and add months uh i'd concatenate these two lists together and rebind months then i get more april may june july so it just it created a new list which was same as this list plus one in front of it as a new list i said that twice uh okay can i do this again or is this going to say doesn't support item assignment no i can do this because it's a list lists are mutable there we go so we fixed march i can append an elemented list i can change that element like this meaning i can add a new object as the last element in the list in place of the object that was there right i didn't change the string lowercase august to be a different string like there's still there was a string lowercase august and it got thrown away and i put a new one in its place dell months 2 is going to return what no it's going to do what to list the list will then be march april june july august okay what's this it's a list of lists we saw a hint of that when we had the 567 i think in there so it's a list with two elements each of which is a list of three elements and if i access the zeroth list i get the list abc the list one two three if i access this list and then access its zeroth element i get the one back okay so you can use lists of lists to do a twodimensional or multidimensional array of course if you're doing anything that's big or you want to be fast you would use numpy or pandas or something like that instead but occasionally you would do that and any questions before you take your turn at the exercises okay go ahead you yes i would is is so okay i'm gonna continue here the first part of this exercise is the that's the most interesting stuff i think all right so remember what so we have a list zero one two m sub one equals is there is we're basically asking the list to change this link or the the in here that refers to the object one and change it to instead refer to that the 1020. so this 1020 a list 1020 is gonna replace the one i hope i did okay that hopefully makes sense uh let's put it back to zero one two and now what we're saying is uh let's replace what well this is saying so if we just pull this out if we just access this we're gonna get the sub list that starts at element or index one starts at x1 and stops before it gets to index 2. well the element that the part of the list which stops starts at index 1 and stops before index 2 is just the single element in there and here we're saying replace that sub list with instead this sub list 10 20. so we actually take the 10 and 20 and stick them in as two new elements in that list okay um and uh one person was asking me why wouldn't it be something else this is the way that python interprets it you just got to get used to that there's not really a wrong or white way to think about it python chose one way and so hopefully the way i've been describing the start and stop before uh will help you at least get get the bounds right which is the most important part what's that it's it's that's right here it's saying change that element to that sub list here it's saying please change that sublist to a different sub list yep now this isn't like unpacking though right if we added an extra value in the second and the 10 20 if we added like 30 or like 10 up to 100 it would just replace the two values and then with however many values are in that other list that's right this is not like the unpacking earlier and in fact it it couldn't be in this this example shows that it's not because it sing it's a sublist of one element and we're replacing with a sub list of two elements so if you replaced it with a sub list of a thousand elements it would just slide them all over and stick those elements in as opposed to stick me in one object i'll skip that and these ranges i'm not going to cover uh but basically the same thing you can do with uh slices which are what these actually objects that get created as with that syntax are and range have very similar syntax and you can play around with those they're kind of complicated make you think hard maybe do some unexpected things but you can see you basically are saying okay range 101 for example we're saying start by default at zero and go because range you can have multiple arguments as well which i don't show you here oh yes i do right there right so start at zero stop before you get to 101 and create a list from uh and that that that's a range object and then you can access elements of the range object saying start at uh the last item and then count by minus 10 to get there as in 10 index over and stop before you get to element at index 1. that language almost all i think always saying it that way always will give you the right answer this argument the one so the first uh the slice has three up to three numbers uh and always a colon so the number before says start at start with the element at that index the second one says stop before you get to the element at that index and the last says instead of increasing by one increase or in this case decrease by a different amount this step exactly okay yep that works true okay so range is an object that you can iterate over it'll go from zero up to seven inclusive stop before you get to eight uh this is a list comprehension it has square brackets same syntax as a list but inside it's not individual elements it's sort of like a for loop which we haven't seen yet in this tutorial and basically you get to choose the name e and then there's a four ex set of names here in and then an expression that gets evaluated so e for e and range eight that's just going to give you gonna iterate over that whole range and give you a list of those elements you could do this with a for loop it's a little bit longer the big advantage to list comprehensions is they are uh they are a declaration of what you want as opposed to a declaration of how to make what you want right so it's a slightly higher level of abstractions i want to have a list that's that that's more like a mathematical expression saying this is what i want you know you know if you did create with a loop you'd have to create a for loop and say well i want you to loop over and add these things well then you're telling it how to do it you can put uh any expression on the left here so you too sorry i said you choose that name that's not true you choose this name this is the name that you control the second one so e4e in range it's just after the four is where you choose whatever name you want or multiple names if you're entering over something that can do tuple and unpacking or unpacking um so here i'm going to take the each of those 0 through 7 inclusive and multiply it by 2 and i should get back the list 0 to 4 up to 14 okay or i can add i can also add an if clause afterwards if and then after the if comes any expression could be quite a long complicated one so only give me the even ones uh and the expression doesn't have to be i mean it's any arbitrary expression so here the expression is an f string all the way to that quote so it's going to return me that string evaluated eight times with each time through the e being zero then one then two all the way up to seven so i should give back a list of eight strings that are like that uh and you can buy them too you can buy them if you want right so here's the long expression for that if that and we get some other so i said like you look back here that's pretty easy to read this one not so much if i saw that in code you were asking me to review i'd say just make a for loop it's easy to read and that's my general advice is use list comprehension sparingly make sure they have no side effects like don't put print statements inside or something like that and usually avoid nested ones you can actually nest you can have a list comprehension that says e for e and this for x you can have them nested multiple times but they get pretty hard to read after a while question this one i would say for e in range 8 colon well first i would have to create a list create an empty list before the for loop create the for loop and then for each element in the for loop if e percent two equals zero if it's an even number then i would append this element to the to the for the uh to the list what is so this is an f string f quote quote that's an f string which means it's an expression like a format string that's in that is evaluated and it looks for the e in the current name space which we created by say naming it by by using the name e in the form great questions uh so here here's the name that's going to have each time through a different value i don't use it at all in the expression right it's all kind of silly i think i would use uh easier ways to do that but but i'm just pointing out here's here's exactly how what's going on help you understand it hopefully here's some months in alphabetical order a comes before f comes before m well okay these are months these are tuples which include a month a month number and a number of days nonleap years okay if i call sorted on them it returns me a sorted list which is the same one because remember when you compare tuples it compares april to february then it compares four to two then it compares to 320 well never got that far because the a and the f and the f and the m it made the comparison right there it stopped right there and figure out what to what order put them in i can reverse the sorted okay uh element two is going to give me the tuple march 331. so here's a function we haven't seen a function yet in this tutorial but i think most of you probably see them before all right but the way it works is that the def starts a block you give the name of the function you give any argument you want and then you have the body of the function which is all the indented stuff possibly indented further and then it ends with the first nonindented line or when you're in the ripple like we are the redevel print loop you have to have a blank line so this blank line is optional in code you're writing in a file it's required in the reply because otherwise it doesn't know what you whether you're done or not right so get index is just going to return uh whatever you pass it element number one so if i call index 612. i don't like that name so this will return february 228 right zero one two it's asking for one so get index one is going to return element at index one of months sub two well month sub two is march 331 index element one is going to be three right and i realized i just made it all to myself month is a bad name here because it's anything it doesn't have to be a month um let's import the operator module and use this item getter operator item getter built in sorry the function in there so if item getter is a function that you pass it an argument and it returns a function who here finds that kind of hard to think about a function that returns a function come on come on be honest yeah it is hard to think about um when i started using python that was one of the things that for me was hard to think about it took me a while to get used to it and decorators were like because they're functions that return functions or callables that return functions um most of them are well yes most of them are um unless it's a decorating a class then it's a functioning class anyway the point is this is kind of hard to think about but it's just a simple way to write a function right like this is one way to write a function that returns whatever you pass it it accesses index element one and returns that part of it this is another way to create the same function object no an equivalent function object right and the way i give it a name here is i do a def get index the way i give it a name here is i just say equal or whatever that thing is whatever that object is that gets returned which i know is a function object because that's the documentation item getter says give it the name and get it x1 and then it just works same way okay this is a a common thing you'll see in python is functions returning functions functions that take functions as callbacks have you seen that before in python give me an example oh no sorry i i that was a trick question and it was the trick was on me sorted is one but we've seen sorted only with reverse equal true which is not a function you can call sort with a key function and a comp function so that's actually sort and sorted or another one that can take a callback function so sorry about that trick on me so if i call get index 1 of months sub 1 i'm going to get 2 right there's month sub 1 that object i pass it to get in x1 it's going to return me index 1 of that object there we go get so do i need to give it a name in order to call it no i can just take that and stick it right in place of that so i take so so again it's kind of complicated what's going on here is python looks up this module name which was imported so it's in my namespace it accesses the object that's got the name item getter which is a function i call it with the integer object one it returns to me a function and i call that function passing it that thing and it gives me back something okay so that works just as well so there's the foreshadowing to what i was trying to get you to say here is a function sorted that takes a function as an argument and what it does is this is one of the ways uh one of there's several ways in python to take some existing code uh which either was by design or by accident uh somebody wants to let me rephrase that sorted was designed so that you could change its behavior without having to go in and change the sorted module or the sorted function in a module in python you don't have to edit the sorted function you can just change its behavior by giving it a key function so what sort does is it takes the two things coming in and i don't know if this is exactly what it does but you know what say oh how long are they okay well let me start marching through them let me compare the first two and see which one's smaller but it actually doesn't do that what it does is it says okay let me compare the first two to see which one's smaller but only if they didn't pass me a key function if they passed me a key function then i'm going to take those two objects call the key function on both of them and get something else back and i'm going to pair i'm going to compare those two objects to see which one is smaller okay that's what's going on here so if and then so what what sort is going to do with this key callback function is it's going to call this function on those objects like the march 331 and then what it gets back which is the three is what it's going to do to do its comparison and sort the original list right so this is going to sort by month name oh sorry month number so now february comes before march comes before april and of course we don't need to use the git index we can use the on operator.item getter so sorted months key equals operator i'm getter one that's code that you might see that kind of code exists a lot in a lot of python code and now even better than before hopefully you know how to read it and what it's doing okay and if you want to sort on something else well you could do uh actually this we could sort on first item getter01 actually returns uh i had a note to fix this and i didn't uh this is yeah let's skip that because it's kind of confusing let's just imagine i'm not going to type it for you but if you change item getter 1 here to item carrier 2 and it would sort by the number of days instead and let's skip those two and we'll skip that one as well okay sorry about that so your turn to do some exercises oh question first instead of using operators no you could use a lambda using operator.itemgater i would use because it's builtin library people know what it is if they're familiar with it they understand it right away they don't have to parse my lambda and i'm not going to get my lambda wrong because i won't be using it right what's that yep yep they have limits you can't do as much as with others but yeah i would i would yes a lambda function would work fine in that case i would recommend use the builtin because it's well known and someone else already got it right that's all okay other questions okay go ahead and take some time working on the exercises you yes okay let's look at the exercises here splits pretty easy m for m just to simple this comprehension so here i'm using a nested four 4n in range 3 4m in genmar split so i get this more complicated thing you know i suggest avoid them but be aware you can do that if you want to enumerate's a kind of cool it's a very useful function especially in python in languages where you always have to remember the index to iterate through things this is why would you have enumerate in python usually you iterate over iterables without remembering the index because python does it for you but sometimes you actually want to know well how far am i am i at index 50 when i do this um and enumerates the easy way to do that basically enumerate as you can see it takes an iterable consumes it and it returns in turn pairs an iterable of pairs where the pair is 0a 1b 2c okay and you can of course change what happens like once you've got that end in the c you can change it there and by the way this parenthesis here is these parentheses there are optional but i think it's a little bit easier to read zip is another cool function which uh very much like a zipper but not quite a zipper right interleaves the zip function doesn't interleave it does pairs that's the way it works um and so zip you can take a zip pass it two arguments and it will pair up the jan the one the fab the two the more the three if you pass the three arguments it'll give you triples et cetera and then zip returns an object which is iterable so we hand it off to list so actually we can see it what it looks like and there we get that list so what do you think will python give us an error in this case we've got three on the left and four on the right the second argument to zip and the answer is no zip will happily stop when it exhausts the first of its arguments as an iterable sort of like the m100 it just that's fine i'll stop before i get to 100. um if you wanted to stop there's an itertools.zip longest in the inner tools module um i don't remember that may not be the right name but it will stop when it gets to one of them and then only one two three same the lowest stop the shortest one um and and again that is can be i've used that lot it's convenient when for example i don't really care uh like i have several of them and i don't i don't even i want to maybe add an index to one of them and i don't know how many i'm going to have i'll just put in place of the last of the one i want the index to be i'll do a range from zero to accent it'll only evaluate as many as it needs and it'll stop when it's done so that'd be an example of where it's handy to have that functionality so there's another way to create that list that was created earlier right is you could take there's the zip of three elements and you can see i'm combining the split stuff like that of course here's another way to do it oh and here i put in look at that there's the range 100 just like i said and it stops when it gets the shortest one and there's a something i want you to try solve and another one and this one we talked about a little bit about i'm going to skip most of these five minutes right can we end at 4 40. all right so dictionaries and cents i'm not going to quite get through the rest of it which is typical i usually i put in more content to make sure you can go look at it afterwards dictionaries are a really important helpful data type in python a list is actually a mapping is one way to think about like remember math venn diagram venn diagram dots in it the arrows that map from a to b that's what i mean by mapping uh in a list maps from integer zero to the first element integer one to the second element element at index one integer two et cetera and so here's an example of right so if i take jan feb mar well that's i want i'd really like jan to be index element one so i put a none in front of it or i could use that in python three or five or greater using that that uh syntax now i've got zero one two three which is convenient for me because one two three are the month numbers as i think about them all right so now i can map it i can say well give me uh take an in to turn it into a month and i get back jan is one number two is jan sorry number one is jan number two is that a dictionary is a onetoone mapping from anything almost it's got to be hashable i'm not going to cover that today to any other thing so instead of assuming the index value or the key value of 0 1 2 3 et cetera here i have to explicitly state it and i can use integers if i want so here i'm saying map one to jan two to fab three tomorrow and then i can just say into month one two three and it works so dictionary is uh more powerful in terms of the more things you can do with it it's also much uh it's very fast for uh for searching and finding things in it um okay i could do that too instead of explicitly doing the mapping i can do a dictionary comprehension i think is what it's called so i sort of looks like a list comprehension but it kind of looks like a dictionary with a curly brace and a colon with the key and the value and these are variables that are iterated over the change through that iteration so that's another way to do it and then i can just access it right month to int so here i'm doing month to instead of into month right and so i've got january is month one etc april is four no it's not there okay let's add it so this is how you access elements of a dictionary use the square brackets just like a list and you pass it the key which doesn't have to just be an int it has to be whatever key you've defined the dictionary to have and you can see it now has an april over there on the end in for dictionaries is asking the question is this key in the dictionary is there a key value pair in the dictionary with this key here's how you would delete an element from the dictionary you give it the key and it'll delete that you can't ever have two uh duplicate keys so you don't have to worry about how to figure out which one to remove there's only going to ever be one key feb in the dictionary that's one of the constraints just like months you can't have two elements at index one there's only one element there okay is february in there not anymore okay uh do a couple things here how to use dictionaries dictionaries are one of the data structures in python that if you haven't had them in languages you've used before you will find yourself not reaching for them until you get to know them and then you'll find yourself reaching for them all the time so for example if you want to know how many letters there are in what are the letters in mississippi here would be a way to do it so what i'm done letters is going to be a dictionary with key m we'll have one what's that no no i i'm looking for what letters are in mississippi right so so s is going to be set to one four times no we're not counting letters we're just saying what are the letters in mississippi okay uh or i can just look at the keys and i get back this data structure that i can iterate over that shows me those are the letters here's another way to do the same thing using addictive comprehension there is a collections module in the standard library that has a default dict you can pass it a function and it will add elements to a dictionary on the fly so earlier with a regular dictionary this would give me a key error with a default dict it doesn't it gives me a zero because it says oh i can't find it so i'll call this function to figure out what to put in its place added the key value pair and now it's in there so this one i could do what you were getting at which is let's count them right and i get the letter count right so it added letters as needed and incremented them so the first time it saw the m it stuck in well that's a bad example first time it's because i already did it up here first time i saw the i it stuck it in as zero and then incremented it made it one next time it pulled it out as it won increment it to two put it back in etc and then you can look at how many of the letters are in there there's also a collections counter that will do this for you and a bunch of other things and if you only care about the keys like we did in the first example well there's a simpler way to do it there's a set builtin type and you can also create sets with a set literal like that looks kind of like a dictionary with curly braces but has no colons because you only care about the keys and then you can do various operations mississippi hero you're all familiar with the ascent of boyne it's in my backyard so one of the two rivers that runs through winnipeg here's another way to do the same thing but set operations are pretty handy at line 687 and lots of set operations okay so i can put almost anything in a dictionary key but not quite everything and i won't be able to explain why but but it's basically because they have to be hashable because if they weren't i'm about to explain why uh then if you when you change the key you can change the contents of a list then when it goes to hash it look it up fast it would find it in the wrong place or not find it because it would look in the wrong place okay so what i did not get to show you was an example with dictionaries which is kind of cool blocks and for loops iterators and generators and a little bit about imports calling functions etc so we got through a fair chunk of this tutorial and i hope it was helpful um please please please please fill out the evaluation forms give me feedback afterwards i'm happy with for that as well and hope you enjoy using python functionality