with mommy should I say he has I'd ask let me stay here it's design and yes I do speak a little bit of German because I've lived here for eight years when I was a kid so it's always really nice to come back here because there is a lot of memories involved and it's been 23 years since the last time it snowed on me so I'm very much looking forward to tomorrow so I'm a frontend developer and over the last the last three years I've been doing a lot of work with SVG because SVG excites me it is both an image format and an object and the document format and there's so much possible with it I'm not a designer but I wish I were particularly I'm not really well I do like web design but the kind of design that excites me the most is print design so as a kid I always used to grab magazines and browse them I still do that today with digital magazines I rarely ever read the text in them I just like looking at them I love the layout I love the imagery I love the effects included in it so and I started with the web I wished I could do on the web or actually I expected to be able to recreate certain print designs on the web but it wasn't really that possible before but the gap between what's possible in print design and editors such as Photoshop and what's possible on the web has been getting a lot smaller over the last few years in fact this grab has always been very small it's just taken us an awful lot of time and years to realize it and to pay attention to the parts of the web that do make that gap small now when it comes to CSS over the last three a few years mostly three or four years it's been getting a lot of features that make the scab smaller it started with printed with CSS shapes which which allow you to create content that wraps around and inside irregular shapes i got extreme can imagine i got extremely excited when i saw this back then i was even one of the first people to write these articles on them and then with the introduction of CSS blend modes which also enable us to do a lot of color compositing and blending to create really nice effects that are also part of what you always see in poster design and print design and then there is CSS filters that enable that in to do more image editing right in the comfort of our code editors there are 11 filter effects possible that do a range of effects from blurring to change in color to contrast and saturation and all of that and one particularly interesting function is the URL function which enable us to import even more complex functions and new functions and to CSS from SVG now extruded CSS has made this gap smaller of the last few years but SVG has always had a lot of features that have been around for a very long time in fact these CSS filters and most of what's possible in CSS when it comes to graphic design has been imported from SVG the CSS versions here are optimized fairly optimized versions of filters that are currently available in SVG and that are even more capable for example it is currently possible to blur an image using the CSS blur function okay and the image above I'm blurring it using six pixels so the blur is applied uniformly over the entire image both in the horizontal and the vertical direction but this function is merely a simplified and very limited shorthand for the blur function that is available in SVG so SVG allows you to blur an image either uniformly just like you do with CSS or if you provide two values two numerical values you can speed them blur the image on the x axis and the y axis separately differently or at the same time so you can imagine can use this effect for example the be horizontal during you can create a motion blur effect if you combine it with other filters as well now I know that for me I did it too so at some point I did wonder why would I want to use these effects on the web why don't I just create an image and you know just embed it on the website right it's just one image you create it and then you embed it well the first problem is if you're building responsive websites then you're not just dealing with one image if you think about it because you have multiple resolutions we have picture and sources and other resources that that enable us to embed different image resolutions for different screen sizes and we have to do that and if you want to change anything about your effect you have to jump back into Photoshop or whatever editor you used to create it and then you have to edit it and then you have to edit all of the versions of that image and then you have to reinvent them now in addition to that there are other reasons now the ability to apply filter effects on the web helps us maintain the semantic structure of the document instead of resorting to images which aside from being fixed resolution most of the times they tend to obscure the original semantics of the elements that they replace and this is particularly important when it comes to text if you want text that has a specific filter or effect applied to it and you create it as an image and then you embed it you lose the semantics of that text it's no longer searchable not selectable it's not accessible anymore and that is not right so the content semantics are preserved this is the most important point personally for me the content is editable and dynamic so if you want to change that text you can do that in the comfort of your code editor you don't have to jump into the graphics editor change it and then we embed it it's easier and faster to tweak the change either the content or the effect itself if you're applying it with code you can change it again you don't have to resort to the design design editor anymore and the effects are animatable so if you create an effect as an image and then you embed that you can't animate it even if you have multiple versions of that image and then you're animating between those images is not really a transition anymore it's not it doesn't look good for example with CSS filters you can create an effect that is as simple as this one here which it just fades an image and an ounce and you can change anything about it you can play with the contrast with the colors and you can do that using just a few lines of CSS and using filters on the web can also be a really nice addition for progressive performance so you know Kravitz has this really nice technique it's called contrast swap where you create an image in Photoshop and then you reduce the colors in that image and then you embed it on the website and then you re increase the colors or you edit the colors using CSS filters so the image that you're embedding is a much smaller size than the original image which would contain all of the colors so you have a smaller image you are embedding a smaller image is better for performance and then you get the benefits or you reapply this effects on the web using CSS now there's a lot of controversy around that issue like if you want to download the image is going to be downloaded without the filter effects and stuff like that but it's still a really nice and a really nice effect if you want to do it now filter effects an SVG are defined using the using filter elements a filter element filter elements are never rendered directly they're only usage is as something that you can create and then you reference and apply later on certain elements it could be images it could be text it could be anything such elements elements that are only defined and then reapplied a referenced are usually raps and deaths deaths is short for definitions and some element and SVG whatever you put into a deafs element is not going to be rendered on the page but when it comes to filters whether you wrap them in the Deaf's or not it's not really it doesn't make any difference because it's not gonna rendered the reason it's not gonna render anyway because the reason for that is that filters require a source image to work on and unless you explicitly dis define that source by calling the add the filter on that source image then it's not gonna have anything to render and so it's not going to render so you can put it in the Deaf's element or not it's up to you now a filter effect to create and effect whatever that effect it's made up of a series of operations and each operation is created or as done or is applied using a filter primitive in SVG all of these primitives are prefixed F with F e F E is short for filter effects so you have F a blend which is the blend filter effect and then you have Fe composite compositing effect each filter primitive performs a single fundamental graphical operation on one or more inputs one or more so an effect can be applied to either one input or it can take two inputs and apply the effect using those two inputs this input can be it's gonna get very technical from now on okay the input can be the original image the source graphic is called the source graphic and SVG it could be the results of another primitive so you can chain filters together the result of one primitive can be used as an input to another primitive or it can also be the alpha channel of an element which is essentially a black version of that of that element this in turn means like you have you have more than 19 filters Viji each one of they can all be changed they can be chained they can be you can take an input from one of them and use it for more than one more than an input for more than one other filter primitives we have almost an endless combination of filters and therefore an endless combination of primitives the sky is the limit now before diving into the examples and we're gonna talk about some of these filter primitives and create some really nice effects with them I want to cover another topic really fast it's called the filter region the the set of filter operations need a region to be applied on okay so suppose you're applying a filter effect on one of many elements and the SVG how do you tell the SVG that you want that effect to be restricted to a specific area and not be applied on everything else on the on on the SVG or maybe you want to do it the other way around you have multiple images multiple elements on the page and you want the effect to be applied on the entire SVG you can do that by specifying the filter region or editing the photo region so each element has a small region every element and SVG has a small region whose boundaries are defined by the borders of the bounding box a bounding box also called a short but the short version is called be box in SVG it is the smallest fitting rectangle around an element okay so if we have text this is what the smallest fitting rectangle could look like it could also have some padding on the top and bottom because the line height also counts here the bounding box of an element is by default the filter region for an element so if you apply an effect to this text for example it will be restricted to that small rectangle of the text however some filters affect pixels that are that lie outside of that bounding air but bounding box for example if you apply a blur effect and you look at this image here on the right side and on the left side you can see that the blur being clipped off and that is very undesirable now according to the specification it is often necessary to provide padding space in the filter region because the filter effect might impact bits slightly outside the tight fitting bounding box okay for these purposes it's possible to provide you can change the value we can change the area of the region by changing the position of the top left corner and the width and the height of that region and in order to expand it you need to be able to provide negative values for the X&Y positions and that is actually possible so if we were to visualize the filter region area we'd be able to see that this padding indeed exists by default so it is the the filter region is the bounding box but if you look at it if you really visualize it in real life it's not really just the bounding box it is a little bit more than that now first of all I want to talk about how I visualized it so I'm using a filter here and we have the FC the filter effect it's got the flood filter effect what the flood does is it literally floods the filter region with color it just floods it it the cut lip color is gonna cover everything in the filter region but when it does that is going to cover everything behind it so the text will no longer be visible so in order to put the text back I'm going to be using these filters and the rest of the examples as well and that's why I'm covering them right now so in order to report the text on top of the image you can merge both the flood color and the source graphic using the merge filter function each merge element has children elements what each one of them is called merge mode these are essentially just layers so the first one takes and the flood color and the second one takes in the source graphic and it puts them on top of each other the ones that come later are the ones that on top so we have flood and then source graphics the source graphic is going to be on top each layer okay is called an emergent but you need to keep in mind that you need to keep something in mind here the units that you use to change the the origin and the size of the filter region are can be in percentages or they can also be in pixels if you set them in percentages they're going to be relative to the bounding box of the element okay so if you want to move to extent to expand it you extended you would use minus 5% minus 5% not positive here and then you could extend it to a hundred and 20 percent in in width or if you use if you use the user space on use as the coordinate system which is essentially the entire SVG then you can specify the filter image and pixels but when you do that is going to be relative to the entire SVG these are a little bit of small technical details that I needed to cover and now we can start creating some effects now the most basic effect that you're probably most of the times find and tutorials about SVG filters is creating a drop shadow because it's a very simple one fairly straightforward and it gives you a clear idea of how chaining works and how then merging layers and stuff like that so I'm gonna create this effect here I just have an image I want to create a drop shadow the drop shadow is a very light drop shadow it's not very dark so it's not really black we're gonna have to change that color into gray sure okay so you can start that by creating a filter element inside of that filter element you use the offset filter primitive the offset primitive offsets the input image relative to the to its current position and the image space by the specified vector so I specified DX and dy and then the DX and dy will move the image on the X and y axis respectively this is this offset filter is you is most important in effects like these like creating drop shadows and this is why we're using it here now and then the second one is the Gaussian blur Gaussian blur effect so the Gaussian blur effect takes a standard deviation which specifies the amount of blur that you want to use you can specify one number only which creates a uniform blur or you can specify two numbers if you want to create only horizontal or vertical or different horizontal and vertical effects the end that we're using in the offset we're taking the source alpha and then we're moving that source alpha well if you have if you have a JPEG image then the Alpha Channel of that image is always going to be one because it's fully opak and so the Alpha source alpha the Alpha channel is going to be a fully black rectangle which is the same size as the image and this is what we have here so we get the black rectangle we offset it and then we blur it using Gaussian blur next you you flood if you want to color your plot you want to apply a color to that shadow right you don't want it to be completely black anymore so you can use a flood a flood we're flooding the area with a very light gray color the hashtag BBB and which is going to give us the color result and then you then you use the composite function now compositing is the combining of a graphic element with its backdrop okay a backdrop is the content behind the element and what is the element is what the element is going to be composited with using different compositing operations there are sixteen different ones you can specify which parts of the source and the backdrop are going to be visible so you would have something like this if you have two elements one of them is blue and one of them Avia is yellow and they overlap in certain areas different composite operations are going to tell the browser which parts of that you want them to be visible so in our case here the flood color is on top so it is the source and the backdrop the the the shadow is the backdrop which is the destination and we only want to show the part which is the backdrop itself which is the shadow so we use source and in this case if we do that we're gonna end up with only showing the parts where the flood color and the shadow intersect which happens to be the shadow and it's going to be the color gray which is the flood color so essentially we're literally coloring the flood shadow coloring the drop shadow with the flood is confusing so at this point the only thing that is visible on the page is this year we have a rectangle we have it blurred and we have it colored but we so we have the drop shadow but we don't have the image how do you combine them using merge so you get the shadow you put that in a merge node and then you put the source graphic on top and you end up with this very small effect so upset the source alpha use that for input for the Gaussian blur the Gaussian blur is going to blur it and then you flood the area with color and then you composite that color with the shadow you have a colored shadow and then you merge that shadow that you created with the source alpha and that's how we create a simple drop shadow another simple primitive that I personally really like is the FE morphology morphology to morph an element means to transform the shape or the form of that element the morphology filter effect operates on the form of the object at values the first one is erode and the second one is dilate to erode an element means to make it thinner to dilate means to make it thicker and this is literally what this primitive does it either makes the element thinner of Earth makes it thicker now the amount by which you make it thinner or thicker is specified using a radius attribute and even though we're saying radius which usually refer means a circle or an ellipse the browser doesn't really use a circle in order to make this erosion our dilation using the number that you specify and radios the browser is going to create a matrix or a kernel which is then used to do this this kind of erosion and dilation this is a little bit technical jargon but it's necessary to know so when you apply to a graphical JPEG image to a photograph erode and dilate have very very predictable results so the image is going to be transformed in a sort of a an image that has been painted with a real really large strokes of color and this is literally what it what it looks like and if you were to animate the effect to see how it works it's the one on the top right so you start with the image and the thicker you make it or the more the the stronger the morphology you have let me repeat that the thicker or the wider the strokes get under less detail you have in the image the only thing that you might notice in this slide is that when you apply these effects you have a road and you have dilate the difference between the image on the top right and the one on the bottom left is the color one of them looks that it has lighter strokes and the other one has darker strokes this is because again a little bit of technical stuff erode sets each pixel to its darkest or most transparent neighbor whereas dilate sets the channel to match the brightest or least transparent one so morphology when applied to images has a very predictable effect that image did get if you look really close the image with when you apply erode it gets it does get a little bit smaller on the edges around the edges whereas dilate makes it a little bit wider one was dark one is like very predictable effect now this is all too much again gibberish so for single objects such as text for example erode makes the object thinner or dilate makes a thicker we can take advantage of this fact to fix something fix something that we usually want to do an SVG but we get unpredictable results for so if you want to add a stroke to text an SVG you can do that you think using the stroke attribute okay so if you add a stroke you can do that like this stroke deep pink this is the color that I used most of the times because it's the easiest you add a deep pink stroke and you give it a stroke width and you end up with the results on the second line here what happens when you add a stroke or an outline you want to add an outline but if you do it using stroke you end up with the text that that's that got thinner so that stroke actually ate up part of the text and this is probably not the effect you want if you want to add an outline you want to preserve the size of the text and then add the outline to the text if you use stroke this is the result that you get you're going to eat up some of the text but if you use SVG filters you can fix that so what do you have here we have we have a source alpha we have text okay we take the source alpha of that text and then we operate it we specify the operator on it on the morphology filter to be dilate so we want to make the text thicker okay by three pixels and then we flood the area with color let's sleep tank again which results in a pink flood area and then we composite remember compositing you specify which parts is going to elect you're gonna clip off something so in this case here if you use the operator M what's gonna happen is you have a color on top and then you have the the text and the background and when you composite them together that the dilated text and the color you're gonna end up coloring the text and then and then you merge you merge the recolor text with the source graphic so you have the original text which is in black and then you have a pink version a dot a pink dilated version of that text okay you have them on top of each other and then you show them on top of each other with merge so you end up with the one on the bottom here so literally right now you two layers of text the one in the behind is the text itself but it has been dilated and colored and pink and then you put the original text on top again you can take this a little bit further and create something like this you can create outline only text so for example if you have this outline here and you can put it on any kind of background anything that happens in the background will be reflected inside of the text and this is also possible using the exact same technique or changing it a little bit and then adding one filter to it so we're gonna start with morphology again we're gonna make the text thicker but what i'm doing here is into instead of taking the source alpha which which is black and then i'm gonna have to color it with Fe flood and f8 composite which is a little bit too much I'm taking the source graphic itself which is my text right the text is going to be originally black or any other fill color that you want and then you're making the text thicker okay and then you're using the composite with the operator out so you have the thicker text and the background and then you take the original text you put it on top and you cut it out so you're creating sort of a hole in the thicker text from by using the original text and the most important part here is because I'm not using Fe flood to color the outline the outline has the same color as the source graphic so the same color as the text which gets its color using the fill attribute which ki can't specify using CSS so if you use this flow through here just these two steps you can create outline text and then you can style that text and change the color and CSS which is perfect for separation of concerns the next thing here what this is the thing that I'm most excited about the demo I showed this demo to a lot of people and some of them said well I thought this was created using 3d max and another one was like oh my god this is SVG I said yes so in this section I'm gonna talk about how you can use an image of a texture any texture and then use it to change the shape or apply a texture and change the shape of text okay in particular I want to create this effect that I borrowed from a Photoshop tutorial that I found on YouTube because I'm not a designer I have no idea how to have to do things in Photoshop so what I do want to come when I want to experiment with SVG filters as I find a really nice Photoshop tutorial I follow the steps that they make and then I recreate those steps with filters now in the video the designer created this effect by using what is known as a displacement map a displacement map is an image whose color information is used to distort the content of another element they have an image it has colors those colors will be used to distort another element that is put on top of it an SVG filters the FE displacement map primitive uses the pixels values from the input image that you give it to spatially displace the image from another input so displacement map takes two inputs one of them is the texture or the map and the other one is the element that you want to apply the texture to the steps to recreate that are in Photoshop you want to desaturate the image turn it into black and white according to the designer then you want to reduce the amount of detail in it by blurring it by just one pixel because the more detail you have on an image the less realistic that effect is going to be so you blur it by one pixel which is just enough if you blur it more it's gonna be too little detail and it's also B it will also be very unrealistic you save that image the black and white slightly blurred you save it as a displacement map and then you reuse that image you open it again but use it as a displacement map to distort some text okay so the text now has changed but you don't see a background image so you take the original image again you use it as a background and then you composite the text with the background to make the effect even more realistic in SVG fill the region area with the image that will be used as a texture so we have an image we're going to fill the region region area with that image we're going to desaturate it using color matrix which is another filter primitive with a value saturate just like saturating CSS if you set the saturate to zero the image is going to be d saturated you apply a 1 pixel Gaussian blur to the image using a few Gaussian blur use the image to distort the text with displacement map blend the text into the background image using blend and apply a translucent effect to it just to make it a little bit more realistic by decreasing the opacity using component transfer and then we display the text on the image behind it by more the two layers again this is the coat so we're gonna start with Effie image and then she literally just gets an image and puts it in the region area it's gonna fill the region area with it it even comes with a preserve aspect ratio so if you want to preserve the aspect ratio of the image or if you want to just fill the area in regardless of the aspect ratio you can do that and then you desaturate the image with color matrix color matrix tape it takes many types one of them which is saturate which is just a shorthand for a specific color matrix it's just for convenience and it's available for us so if you use type saturate values zero you're going to desaturate the image and then you decrease the level of details by applying a Gaussian blur on the image itself in this case I've used the 0.5 because I found that to be more even more realistic than 1 pixels and that result is a map and this is what it looks like okay then you use that map as a displacement map to displace the text which is our source graphic so the displace in the map takes and a source graphic and then it takes the n2 it's called you can only have N and in to know and three you know and four and the end two is the map so the map here is going to be used to displace the text and the scale is 15 the scale allows you to specify the amount or the scale by which you want the effect to be applied the larger the scale the more the more dramatic the effect is going to be the channel selector is only you're essentially telling the browser which colors you want to use to apply the distortion and then there is a result which is texture check a texture text and then using the color matrix on that texture text you can reduce the opacity so a color matrix has the matrix for RGB a plus an offset at the end that's why you have five columns and then four rows for RGB a so the zero point nine there that's where the opacity is it's initially one in the identity matrix and I just turned it into zero point zero point nine this is what the text now looks like it has been changed displaced using the texture now I want to show the texture no first I want to decrease the opacity okay I didn't decrease the opacity I add now the image again back in the background using EFI image again and then you can change the gamma what I'm doing it is just a little bit of tweaking just like the Photoshop guy did I'm adding increasing the contrast of the image using component transfer the component transfer is very similar to matrix but instead of using a matrix you can you can have a channel for each one of those components RGB and even a and then you can use functions to change the values in those channels now the type gamma the component transfer type gamma literally works on the gamma of an image so it it manipulates and changes the lightness and the dark areas of the image so if you make the dark areas darker you're increasing the contrast and if you make the the light areas lighter with the darker dark areas you're increasing the contrast and this is what I'm doing here changing the amplitude and exponent as much as going to make the dark areas darker and make the light areas lighter so we have this displace text in the background re added the original image and tweak the contrast a little bit of that image and this is the background now and then you blend the text with a background using the blend primitive so again the blend takes two inputs noir that you want to blend to add together the mode can be multiply screen one of the many blend options that you have in CSS except that you only have like four or five in SVG but you can definitely recreate the others on your own so I'm multiplying the text with the background and then I'm merging the two on top of each other to get this result now the color could be made even more realistic I just didn't have a little I just didn't have the time to do it if instead of using multiplier you use a linear burn I would have to recreate the linear burn effect and then apply it then it becomes even more realistic similar to this here this is the original tutorial and this is how you displace text with SVG filters thank you now in addition to getting an external texture and applying its own element SPG is even more cooler it allows you to create your own texture that you can use as a displacement map later so filters can generate too rich textures you can create fire textures cloud textures marble stone paper and we're going to create paper shortly we can do that using the turbulence function the turbulence filter whenever I say function I mean filter the turbulence filter primitive generates and renders Perlin noise this kind of noise is useful in simulating several natural phenomena like clouds fire smoke and in generating complex texture like marble marble organ night just like Effie flood when use F if F E flat you flood the entire region with a color if you use turbulence you flood the entire region with a noise that we're gonna see shortly now in this session I'm gonna go over how you can create noise with Fe turbulence and how that noise can first be used to distort images and text distort images and text and then we're going to see how the noise can be generated with this primitive and combination with SVG lighting filters so you have a texture and then you apply some light to it and you turn that into real you have noise and you apply light to it you turn it into a texture and the more different the noise the more different the end result is going to be so this is what Fe turbulence looks like here you will usually only have to worry about three attributes the base frequency it specifies the grain of the noise very low values such as 0.001 will produce larger patterns you see on an example shortly and very high values such as 0.5 will produce tiny patterns values in the range of 0.02 and 0.2 are a useful starting point for most textures there are also two types of noise fractal noise and turbulence the fractal noise is the more smooth one it's it gets you closer to clouds and those kinds of effects and then there is the num of tabs which is the number of octaves which very similar to music is just the number of levels the higher the number of octaves the higher the number of layers you have and therefore the higher the detail level so these are these twelve images represent twelve different results of noise created with turbulence with different types based frequency and Nam octave values just to quickly go over them an image you have a base frequency of 0.04 this is a standard noise we're not playing with any of the other values just a base frequency of 0.04 B is the same as a but to increase the level of details with number of tabs to so if you look at it as B is exactly the same as is the contrast good enough can you see them okay so B is the same as a but with a little bit more detail if you look inside of it C is the same as B but we change the seat to 201 so essentially what the seat does it affects the shape drastically just not in a way that's understandable it's just that to generate the turbulence you need to generate a bunch of random numbers that's random noise and if you want the same randomness the same randomness in multiple faces for example over multiple elements that are next to each other you can start the generator from the same seed multiple times so the seed is sort of like changes it's a random number that the browser's going to use to start the randomness from D is the same as C with the number of times five so we've increased the level in d e shows that noise is continuous so if you have a and E let's start with the same with the same seed and you put them next to each other you're gonna see that the noise is continuous from A to E it's like it's the same noise da F is decreasing the base frequency to 0.01 and that will create larger patterns so if you look at F this is a larger pattern and then you have the smaller patterns each one of these can be used to create different textures GNH show the difference in the number of octaves again between G and H I and J is nice but that is using fractal noise not turbulence so if you look at all the ones like AE b c d @ GH all of these are like intricate noise and then i and j are more cloudy and more vague and more blurred these can be used to create clouds for example okay and I'll show you that you can change the size of the noise the size of the turbulence along the xaxis and yaxis so if you look at L for example you can create that effect and you can some create some really nice effect with that an example that I have now is this is a demo online that shows you how we can apply an effect so if you choose turbulence and you use the turbulence as a displacement map on this image this is what it looks like and then you can change the scale to make it more dramatic or less dramatic and then we can also apply the same texture to text which will give you that warping text effect dirk Weber used FK turbulence as a displacement map on text to create this water splash effect which is available in Smashing Magazine and then code drops they have this really nice button effects that are also using noise and your animating that noise because all the numbers all of the values and the noise are animatable so if you animate those you can end up with these effects I like this one the most is that the music one this is a vertical noise like the one you show earlier and but you're just animating it now what I want to talk about now is how you can this lose this noise this turbulence plus lighting effects to create texture and more specifically I want to create a very simple rough paper texture which I borrowed from Michael Milani by the way online this texture requires literally two steps two functions two primitives and then you can do anything with it you can use it as a displacement map or whatever you want to do so first we're gonna start by creating the base for this whole effect with the turbulence primitive we're not specifying a type on the turbulence at at this point so we're getting toward turbulence not that cloudy effect yeah we're creating the base frequency 0.04 which is a fairly good start most of the times I just experiment so I just change the values to see which one gets me closer to my to my goal and then I have a rectangle that I'm applying this texture to this is what I have this is what you start with now we need to shine a light on that surface shining a light on graphic provides additional depth and texture and to create a lighting effect you need to specify three things a light color specified by the lighting color proper lighting color property you're going to see shortly and type which is specified using a light source which no a light type so you can there is diffused lighting and there is specular lighting and SVG the diffused lighting indicates indirect light from an outside source and is best used for some light effects something to simulate Sun you use diffuse lighting if you want something to simulate more of a lamp or a room and a light inside of a room you use specular lighting which specifies secondary light that bounced from reflective surfaces both these primitive shine light on an object or image by using the Alpha channel of that image as a bump map transparent values remain flat while elpac values rise to form Peaks so if you have let me rephrase that a light source filter uses an input alpha channel to provide depth information you have an alpha Channel you take the Alpha values of that channel and then you use those as a bump map for the light so how do how does the light know that this part of it is high and the other one is low how do you create shadows and Hills it uses the Alpha Channel to do that the more transparent the lower and flatter it is the more opac the higher it is because Fe turbulence generates an alpha channel full of noisy values so red green blue are noisy and random so is alpha it comes with a lot of different alpha values it produces a nice variable Z terrain that creates highlights when we shine our light on it I know there are two yeah so there are two types of light and there are two sources of light to create a light source you nest the light source inside of the light type so you have type source inside of it and then you finally specify the lighting color so to light the noise we generated earlier we will apply a white diffused lighting which is sunlight emanating from a distant light source and this is what the code looks like both of these primitives accept an attribute called surface scale which is the set index multiplier so if you increase the scale does that index is going to be higher and you can gotta get more steeper steeper visual slopes and your texture then you have azimuth and azimuth and elevation on the light source as you can see in this graphic here from the specification as the most azimuth and elevation both of them specify where the light source is coming from essential and you also need to play with that because the closer you make it to the texture the different the effect and the lighting is going to be so we have here turbulence and then we have a lighting apply to that turbulence this is what we get there is too much sharp edges here so we need to smooth the noise out we can do that by using fractal noise to start with instead of using turbulence switching the type to fractal fractal fractal noise gives us a better base which is this it is smoother a little bit more like water in this case it's not really rough paper rock paper has more detail so we need to increase the detail and we can do that by increasing the number of log tabs five octaves is usually the highest you will need for most of your effects if you have six and more the effect is not very visible if you have a very sharp eye you can't you can notice a little bit of difference I do but most of the times it's not really that big of a difference so if we increase the number of octaves it gets a little bit more grain and it looks much better than generally you can change the effect a little bit and tweak it more by playing with the source and the distance distance of the light maybe even the color if you change the color this is going to be colored rough paper decreasing the elevation on the light source for example it's going to make it look like this it's a little bit of darker which brings us a little bit more to sandpaper which is not what we want we want to rough paper so I think the previous version looked just fine and that's all you need to create a simple texture you need noise and you apply some text to it and then you can use this texture to use it as a displacement map so if you want to simulate writing on paper you can do that you can do pretty much anything with this now we before you can also create a myriad myriad of different effects if you take that noise and you apply different other filters to it so this is an example here this is each violence some of them may might look like more closer to bouquet effect others like like fireworks are something what we're doing here and the ones on top we're blurring we're changing the colors using color matrix and then on the one at the ones in the ones at the bottom we're changing the sharpness by using con twelve major convolve matrix that's filtered for motive I'm not going to talk about that because that won't occur it requires an entire hour and it's the most complex of all filters because it allows you to create your own filters and filter to create filters so you can do a lot of things if you have noise if you delete colors you're going to end up with a different texture you can do anything essentially the sky's the limit now before we end this talk I want to give a short overview of two primitives that are also the most used that enable you to manipulate the colors of images so we talked about thinning and thickening of text or of images we talked about blending compositing turbulence textures displacement maps there's a lot more but I want to cover image color manipulation just like the ones you can find in CSS so more specifically I want to cover poster effects something that would create a poster version of whatever you have unlike Chris island I do draw a little bit so the one the image on the Left I drew that using pastels and then I turned that digitally into a poster version so you have the real pastel with all of the color gradients and then on the right side you turn that into a poster effect now this effect can be created using discrete component transfer function okay I'm gonna go over that shortly but what what when you use this function here it's called component transfer again RGB a lot of control you can use different functions we use the gamma function earlier to control contrast and brightness and then you have the discrete function the discrete function has four different attribute which is called table values it reduces the number of colors in an image and shows more sudden color changes which look more like the images made up of color bands or color clusters so again if you look at this instead of having a gradient of every single color every color you les couleurs the browser deuce this does this by doing some sort of mapping so if you have for example table values set to zero zero point five one you can have as many values as you want the more values you give the more ranges you have and the browser is going to map the color to these ranges so if you have a red color for example between the range zero and 0.33 the browser is going to map it to just zero so all of the shades between zero and zero point three will just be one shade less color zero point three is 0.66 will be mapped to your zero point five so you only have three shades of red you're decreasing the number of colors and they're forgetting that poster effect and this is what you get here so all I did is I gave I use discrete I used three different colors and then the browser is going to take the whole shades of red and green and blue and it's going to map the shades into the ranges I specify here another thing is I want to create a dual tone effect with contrast control so to create the dual tone effect in Photoshop usually do two steps you turn the image into grayscale and then you map the greyscale range into a new range that instead of having black and white on the edges so instead of a range from black to white you map that to arrange from pink to yellow or whatever color you want to do in other words you will need a gradient map that the browser will use to map your greyscale image to now this is the tutorial that I found on YouTube again so you have this black and white and then you're gonna do a little bit of mapping you change the black to some color that you want so all of the shades of black will be transferred to this or map to this color and then the white you change that into your other color and you get written effect like the one from Spotify how do you do that in SVG you need to create a gradient map using component transfer but instead of using the discrete value which limits the number of colors were going to use the table value in order to map your colors into a new range of colors without losing any colors like we do indiscreet you can use the component transfer type table so suppose you want to create the duotone image using these two colors here you have a pink color and then you have another color for every one of those colors the two colors you get the RGB values which you have on the right and then you divide that value the R value the G value and the B value divide that you divide that by 255 you get a small decimal value and that's what you're going to use and the function here so these three here are G B are the RGB of pink and the other ones here RGB are the values for the other color so red is going to be mapped from black and white to these to rate this range and then G is going to be mapped to this range and B to this and that gives you the dual tone effect this looks nice but it does look like it's missing something if you increase the lightness of the colors increase the lightness of the yellow and increase the intensity of the pink the color of the the effect becomes a little bit more realistic so you can do that again by using the gamma function of component transfer increasing the amplitude decreasing the the exponent a little bit of tweaking you get a better result now you may have noticed an attribute on the component transfer filter here is called color interpolation filters this attribute is used to switch from and between the linear RGB space and the srgb space it is useful to get more desert deserve desirable results when applying certain effects for example if you want to apply a an inversion effect if you will have an image and you want to invert the colors of that image if you use the default linear RGB space you're going to end up with the result on the right which is not very desirable the one you want is the one on the left with more intense colors now the reason this happens this is not really wrong the mapping is happening it's correct everything is working as expected but because of the way the human eye perceives colors lighter tones always look more like actual just white to us so we have all the tones we need and the right one but it's our eyes are seeing it in a two light way in order to change this and get more darker shades and less lighter shades you can switch to the srgb space and you get a more desirable not more rights because both of them are correct you get a more desirable effect yeah before before the thank you just a quick note so if you use any kind of coloring effects in SVG and you get the colors are not really just like you expected the image is too light most of the times the solution is going to be to switch the color interpret interpolation filters to srgb and that is all I have thank you so much thank you sir thanks a lot