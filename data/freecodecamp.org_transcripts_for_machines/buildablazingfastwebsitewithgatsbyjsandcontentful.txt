hi my name is khalid and in this video we'll take a basic gatsby example and turn it into a contentful powered website let's get started here we have the gatsby documentation website and it's telling us to install first the gatsby cli so let's do that once that's done it's telling us to create a new site which is using gatsby and then new gatsby site so we hit enter it's installing all the packages now the installation is done let's cd to the directory and start gatsby develop or it's all there's always this npm script so we can do npm run develop now it's building all this stuff and once it's done it will give us the link to our website if you go here this is a very basic gatsby website and with navigation now let's install the gatsby source contentful plugin to be able to pull the data from contentful so we close our server and then we do npm install and then we need to save the gatsby source contentful plugin hit enter once that's done we need to add our contaminant credential into the gatsby config so we go to our getspeedconfig.js and as you can see here it only has one plugin so we need to expand this and then in here our uh plugin will be defined as an object because it accepts uh some configuration option so first will be resolve and then here we need to type the name of the plugin which is gatsby source contentful and in here we need to pass in options and basically the options are two things one is the space id which we'll get in a minute and then we have the access token which is the delivery access token that you need to do in there so let's get let's guess these credentials so i got the app that to app.contanfo.com and then in here i select my space i already have few predefined articles that you create but i need to go to the apis tab and then in here i just add a new key and then call it gatsby website but here i'm not gonna do this because i already defined my key so i go here first i get my space id and now i need to get my talk and we should reset okay so now we need to write some gatsby specific code to be able to create a page for each blog post to tell gatsby that we need to create some pages dynamically we need to export a function called create pages so we do exports create pages and here we get an object as a configuration we are interested in the graphql function and then the bound action creators so this will be a function in here first thing we need to get the create page function from the bound action creators this will use to map a path to an actual react component also we will need to return a promise since this is a promise based api you can also use the callback but that's you can check that in the documentation so here our new promise will have the resolve and reject as usual now we need to get the path to our blog post template that we will define later so for now we'll assume that it will be inside the src and templates folder so we call it blue post template and then here we'll use the path.resolve and then src templates block post js and here of course we need to define the path it's basically mainly important okay so here we need to call the result function and inside the result function we'll have the graphql function that will accept our query and our query basically will be all contentful block and then here the limit would be 100 you can make it up to 1000 and inside of these all block contentful we'll have edges and inside of edges we have node and in there we'll have access to all our fields that defined in content for like slag id and so on we're only interested in the id and slack in here the rest of the data we can pull it on later so you might be wondering why this is called all contentful blog where this name is coming from so if you go to your website to you to the contentful app excuse me and then go to your content module you can see here is there's a blog content type and there's also author content type what the gatsby source content plugin is doing is actually getting all your entries and they group them it group them based on the content type so here basically we are asking the gatsby to give us all the entries that are based on this content type which is blog so think of it as all contentful and then here is your content type you're gonna type id basically okay so here we change the spec to block so in here this graph function returns a promise so we need to resolve that and then it will give us a result and the result will contain an error if something wrong is with the query so we should check for the errors with result dot errors here we just simply reject and we're passing the earth so we can see them in the console otherwise we can just create the pages based on the data so inside of results there will be a data object and inside of the data object you will need to follow this through so here would be all contentful block or all contentful whatever the content type you looking for and then in there it will be there will be edges and edges basically are like all the objects that contains our data so we need to look through them so we need to do for each and then here we get for each edge we need to create a page so here we call our create page that we got from the bond actually create and the create page will accept a function an object sorry so first we need to specify the path for that and the path for that will be edge dot node and then slide so the slug is the unique string that defines the path for our blog posts and also we need to map that to a component and here we just need to provide the path of the component to gatsby which is here the blog post template yeah made a spelling mistake in there yeah no that's right and also you you can passing some data to the component to the context and this is actually will be useful later when you want to use queries graphql queries inside of that template component so here we are interested in the slag so we pass in just the slack because we'll use it inside of that object to get the data related to this blog post so it will be hedge.node.slack just need to return here we hit save we need to create our blog post template so we go to src and then we add a new folder called templates and inside of it we create the file called the blogpost.js and then if we go here this is our template component and then here i need to define my component and here we will call it blog post component we don't need these styles and we don't need the constructor you don't need all of that and let's clear this templating stuff okay so this is a clean component first we need to add the prop type to our component so here types to we'll get a data we'll see where this is coming from later and this will be a pro type dot object what is required and also here we need to have a query specific to this template and to tell gatsby about it we need to export a variable called page query this will be template string with the tag graphql and then here we do query blog post query so this is basically just us defining this function name it could be anything so this will accept the slag of type string and once we get the slag which we've been passing it through the context in the gatsby node.js we call contentful block so contentful blog this is the sing thing so all contentful blog is the collection and this is just uh just getting one entry based on this one based on some filtering we'll be doing and we'll pass the slag and it should equal to the slack our slag and in here what we'll be getting is title and slack for now so after we get this data we need to fill in the render function here so we can for now just have some dip and inside of the div we display simply for now the title so maybe we can wrap this in an h1 and then we hit save and for the title we will be getting it from the props so title is actually coming from this dot props dot data dot contentful blog and then hit save so if everything is fine now we should be able to run this and test our website so it's building and it failed you probably were screaming at me because i forgot this new promise in the beginning when we were creating the gatsby node.js so i added that and our website should build fine right now so we do npm run develop and everything is fine yeah now the website it looks the same but we actually created pages and to test this we can trigger the 404 page of gatsby basically by just go to the 404 or adding any random id and the good thing in develop mode when you trigger the 404 by error gatsby will show you this page and will tell you all the pages that was created and as you can see here we actually created our pages so if you go here this is one of the blog posts title and here again and then if you go back to content form and we check our content these are the titles so for example like do you know hacks and it's here and then we can check also the slag which is matches this lag so so that's great but we need to list have a list of all the articles on the index page which is very easy we just need to change the index js so if we go to our source pages this index.js remove all of this that we don't need and then if i save you can see that reflecting here because now we don't have anything and then we need to define another component in here as a function we call it a blog post we'll see why for a moment in a moment and then the blog post will get props instead of props there will be a node object and then here we simply return the jsx that we need and to be just an item inside of a list so and then i and then here we just do link this is a special special link object coming from gaspi so it knows which uh when you knows how to map links to a component through its route so we tell it to go to node.slack and then here for the text it will be node a title and then we close the link here and then for our index page it will get data inside of the props and then inside of the div instead of the div sorry we'll have a url and then in here what we're gonna do is we do data dot all contentful blog dot edges so it's similar what we did in the gatsby node.js and then we map all that data to a component which is basically the block post component and then we're passing the node so we edge dot node and then we need just to close this yeah all set one more thing we need to have a query for this page to fill in uh the data so again we export the page query it should be a template string with the tag graphic and then here again same thing query page query and the page query will be all contentful blog because here we actually want the collection and not a single entity and then here we do a filter filter will be an object and inside the filter we need to have the node local i'll explain a bit why we need that and then here the location will be english us so why this node locale uh the thing is that the contentful the source plugin for contentful and gatsby it uses the sync endpoint and all the data is coming in the form of local and then you get the field and here by default my website has only one locale which is english us but you can make this super dynamic and maybe get the german one and and so on but for default there's always the english os or the default local space if you go to space settings and locates you can see this is the default location it might be different for you but mainly but for me i use english yes so that's why i put in here english us okay what do we want to get from there we have edges as always inside of the edges there's the node and we need to get the title of the blog post and the slug so we hit save and go back to our website and you can see here we have the list of all the blog posts and here we go back we have everything let's improve our website a little bit more so as you can see here we only show the title so what about the content so a nice trick is to debug any sort of data in gatsby is to use the local graphql server that is spawned with any development build as you can see here it's showing us a link so if you go there you can see that we can query our data and also there's autocomplete so if we go back to the structure of our blog posts you can see that there's a field called content and yeah by the way i added a featured image because uh we're gonna be using it uh later to show off some of the baked in uh feature of contentful images so it will be using the image api so going back to the content field this is like the content of our blog and we basically want to show it so let's check how we can query that so we can first debug that and once we have the correct query we can move it to our blog and then show the content based on that so the field is called content so here we can add in just content and content if we hover over it it's actually a text node and the text node is handled as an object in gatsby when when the schema is created so we actually need to get the content of that content and then when you hit play here you can see that all the content is displayed in here but there's one problem uh this is actually the raw markdown data which is not that useful for us so we want basically html to work with to do that there's a neat package called gatsby transform transformer remark so this will detect any text node that has markdown and then password for you and will add a lot of neat features so let's test this first we need to install it i want to cancel the build and do npm install and then i need to save it and then the name of the plugin so that's installed we need to go to our usb config in here and then if we follow along it's a matter of just adding uh this plugin so just i'm just gonna copy this and then after contentful we can add our plugin in here and then don't forget comma and then we hit save so let's see what's changed in our content after we have this block so maybe we can also clear the cache and the public folders and then do npm run develop as before this will go through we'll build all the data query the data from content and so on and here if we refresh let's check what we have inside of the content now so if you go here based on the plugin we will have an html in here so we can actually uh to this child markdown remark and inside of that we can get the html and there's also the excerpt so accept is just a short few sentences from the whole content we can show it basically in the list of blogs but what we're interested in is actually the parsed html of the markdown content and if you see here there's the past content so let's add this to our detailed component so the the one that will show our blog so if we go to the template and then go all the way down here so we follow along as we have in the graphical i hope i pronounce it right so it's gonna be content inside of content we need to get child mark tom remark and inside of that we will have the hdmi so we save everything is compiling but we are not going to see that until we actually have the data in so we can create it even here and then from here we actually can get content and then in here we display that which is content and here you need to follow down the whole structure so content and set of content is child markdown remark and html so if we save hopefully everything will work no uh let's see yeah of course hit save and hopefully here everything is building and then if you go to the detail boom we have um our um h7 in here but it's actually not parsed because uh react will consider this as a string and not an html so what we need to do is to tell react to create the content as actual html so we're gonna delete all of this and then there's function called dangerously dangerously if we can spell it right set in our html and this will accept an object and inside of that we will have html and this html will be our content dot child i follow okay yeah so it's child market on remark dot html so if everything is fine this should work hopefully yeah it's compiling and as you can see here we have a need structure and everything is parsed and you can see and let's check another blog post here's the other one and another one all right that's pretty cool so let's also add a little bit of text in here to show like a teasing or an excerpt about what we are expecting inside of the detail of the article so we might get like the first 100 200 characters so to do that let's go back again to our graphql server and play around with the data so instead of html we can do excerpt so we can do excerpt here and you can see it's some text from the content we can actually say i want the first 300 characters from there and you can see it this is changed but for now we can just use the the default behavior which is here so that's that so we need to go to our index page which is the page that lists all the blog posts in here and we need to add content and inside of the content we need to call the child markdown remark and we get the excerpt so if we save everything is fine here we can just add another dip and inside of here we can do node dot content child markdown remark to and then we close the div tag and hopefully when we save everything show up but did it so content child markdown yes of course i made a typo and we save and as you can see here we we are able actually to display an excerpt and i'm sure with some css you can style this in the way you like and then when we go here we so we see the full blog post so uh one more thing in here is we maybe want to show for example the featured image so i've gone ahead already and added the same image pretty much to all the blog posts which is here and to test this again we can go to the same graphql server and then see so if we go to the field it's called featured image so after content here we do features image as you can see it's available in the autocomplete and then in here what the content contentful plugin gets people again will add is some new features which is some extensions to actually give you a responsive image size so we can actually do responsive resolution and then inside of the responsive resolution we can give an argument so i want it to be like 300 maybe and then we can actually do height and then i want it like 300 and this will automatically create the corresponding urls to be using the contentful image api so from here we can get the src the src set also you can get the aspect ratio and the base64 and so on so here we are for now we are just interested in the src and then if we do this you can see here that it's calling getting the image or potential and it's at passing the parameters in here you can check these in the documentation i will link below so you can actually do some transformation and the first hit to the contentful endpoint will be processed and then the other any same hit with the same url it will give you like a cached image so if you request a 3 300 by 300 image and it doesn't exist conductor will create it for you and cache it so the next time you just get the cache cached version so no extra processing in there so let's add the image to our list so i want maybe an image in here and then the text again we can update our query so we go here and then we want the feature image and i want responsive resolution and i want with 300 and hate 300 and i'm interested in the src so here we can just add our image tag and then we have the src we are getting the soc from node dot feature feature image and then you can see the structure here so responsive resolution inside the responsive resolution we have the src so hopefully this will work and we can see here the image obviously it's not well styled but you can see here it's there's the image there's the link to the blog post and so on so if you click here you can see blog post you will try to connect everything together and make our blog build automatically through circle ci whenever you publish an entry from potential or you do a normal commit but before doing that i would like to add some css to my blog to to look nicer so i've gone ahead already and added some css if you go to the layout and then see index css then go all the way to the bottom and this is what i added it's just basic css so to see the result we need to um go here to our ul shoot the list of blog posts and then do class name and then call this blog post and then once we save and by the way um it's the server still running that's why i had the autorefresh okay so now we have this kind of grid thingy but this is a blog post i added but the publish date supposedly if you go to content well it should be october 18th 2013 so it should actually be in the bottom of the list and we can solve that using uh sorting so so we need to go to our index page at least the blog post and then we add the sort sorting in there we can do easily this via graphql so this is the filters we have here and then we can just add another parameter which is called sort and the sort accepts the fields so we can actually sort based on multiple fields but for now we just sort but basic on the publish date and then we have the order which should be descending just like that and then we save and then go back to our server and we need to build again because the query needs to build again and then if we refresh everything should be fine and then there like as you can see here the old blog post is actually on the bottom of the list all right so this is looking good we can now start configuring our surface ui so first first first thing to do is to create a folder called circle so we can just do a folder called a circle ci and inside of that we will have a config embl file and then we go here and then here first thing is we tell circle ci that we want to use the new shiny version too and in here we tell it about our jobs so the jobs one will be build so this the build we want to build to only run when we are in master so any experiment you want to do in a separate branch and don't want the like the search side to deploy to your website or maybe you wanted to upload something somewhere else so and then uh all the new builds and search ci are based on docker images so we configure our image so say image and then circle ci and then node 7.1 or 7.10 and once we configure the docker we tell the build process how to do the steps so first step would be check out this is a pretty fine circus ui and we want to do some caching so we don't need to um actually rebuild everything rebuild everything from scratch every time so we do restore cache and here we need to pass in two keys first one is the key based on the package.json so we just wanna check some of our package chaser and we need to pass in a fallback key in case there isn't any already cached items which is actually very useful because the first time we commit this nothing will be found there so we give it this dependencies and once we're done here we run our first command so we do run and the neat thing is we can actually name every step we do in here so here we can do for example install dependencies and the command in there obviously it's npm installed or yarn whatever you you're using we need to save our cache this is to tell circle ci to save the cache so path is here we can do node modules so with tester because i have to save the node modules and then give it the key actually here this needs to be two spaces back so the key will be v1 dependencies and then the checksum of package json and now we need to run tests so since we don't have any tests in here we can just do a simple echo like no test so echo has the exit exit process with a number zero so it will be considered as successful and now we need to build our gatsby website so we need to define another run step and this will be named build and then the command that we need to run is npm run build which is specified in our package json after building um i would like to install the aws cli since i will be deploying to s3 so i'll be using the aws cll so the step will be named install aws cli and the command is since this is multilines we can just do pipe and then do sudo aptget install python pip and the reason we are installing python is because the aws cli is uh depending on python and the latest version is always in the python pip and then here we need to install our ios wci and after we have that here i obviously forget about the column and then here i need to deploy to production so the name is deploy to s3 and our command will be aws s3 and then we need the sync in there and then we take the folder public then it's s3 and then the path of our back bucket so i have a subdomain called preview my website okay so i'll be deploying um there and then i want to delete anything that i actually deleted before and of course i need some cache control this is really nice for uh our static site so images and so on and don't we don't want the browser to load them every time you load the website so we will cache them and after that this is an optional step but since i have cloud fraud on top of my s3 bucket i need to invalidate all the caches in the in the cdn in there so before doing that i need to enable the cloud front feature in the aws cli so we can do this through this command is called aws configure and then set preview dot create validation true so that's the command that we need to use and it's called create validation and this will trigger what's called invalidation in cloudfront to delete all its copy through all the servers and then get the fresh one and then now it's time to start the invalidation so here we can do create or start cloud prompt validation and then the command will be aws cloud front and then you get the idea create and validation and then we need actually to pass our configuration as json is the easiest way i found out and then i will be copy pasting this station because i actually can't remember all of it here and then boom this is all the json i can actually explain it a little bit so um for creating the validate creating them validating and validation sorry we need the cloudfront um instance so every cloudfront instance has like this kind of an id so you get it from aws and then here you tell it to clear the path like the main path and star so this means like delete any reference or any cache for every file in there and from there we actually are done in the yaml file so we can just save this and then i have somewhere this syntax error duplicate mapping key yeah that's fine i need that yeah but maybe it's this is my jslander somehow is picking this stuff up um yeah now we're done uh what we need to do is define this cloudfront instance as a command line bar in circleci and one thing actually here after like if your project is public after this emulation is created actually the cli will spit out a json that contains the instance of your cloud front and this is okay because you still need also other credentials to create a validation but if you want to hide all of these logs you can just simply redirect the errors and the stdr and sddl to the dev node so this way it will run the command but any output will be just ignored so no output after this which is a nice trick to do circuits i provide actually a nice tool to verify your config yaml before even push it to the ripple so we can actually do circuit ci config validate and then we give it the file and it should tell us that okay our config file is valid so that's nice for now we need to go to circle ci and then we add our project and our project is actually in here and it's called contentful the gatsby content from our site which is this guy in here so we do add first and then we go to our site and click setup and then here this is the project so we need to push everything in here and then we call this um ci first i need to add everything and commit and then we hit push okay all is good if we go here and do start building it should pick our configuration so let's give it a few seconds you can see here it's going through the steps that we defined so first installing the installing the dependencies this will take some time as it's the first time doing this so i'll speed up the recording a little bit and here's the next step okay now it failed because it's actually um expecting some uh command line bars that i need to add in there and if we go to our psp config you can see it's expecting these two environment wires so let's do that so we need to go to settings and then environment variables and then we do we do add this is the space so we go here this is our space and then we paste in in here and then we add another variable which called token and and then we go to our space apis and then get the token from here and let me add the bar and if we go back and then hit rebuild and that's done now it will use the aws cli to deploy to s3 bucket and of course it fails because i need to add the s3 credentials in here so first let me go to console dot fws. so i go to the i am and here i go to my users and then i go to this user and go to security credentials and i get my access key and then i go in here and there's actually the aws permissions i put in my access key and then this i save that and we go back to our build and then rebuild again so i just realized that we don't need any cloud front and validation in here because um how it did set up the s3 bucket is it has no uh cloud front installs on top so it's just pointing to an s3 bucket uh after this if i go to my preview website you can see that i have my website here already and it's deployed next part is actually to go to um first we need to disable this cloud front and validation so let's go to the code into our config and then we just delete all this part and then we add everything and then we do commit and we can push that okay let's take a look on how we can automate deployment whenever we publish an article on contentful so we can do that through the webhooks we can go to space settings webhooks and then we add the new webhook here we can call it gatsby website and then the url is this one which is the url to the surface ai api so here we need to specify the username and then in here this is the project name which is basically this one and we need to tell it which branch to build so usually this is master and then here there's circle uh token so we need to get an api token from circle ci so we go here user settings and then personal api keys and i create a new one and i call it let's be content for website and then add it and then copy it and now i just add this token in here and i only want this web hook to be triggered whenever i publish an entry unpublish an entry or delete it and same for assets and of course if you have a preview environment you can for example do it on the autosave so i hit save then i go back so if i go to my content go to this title and i want to remove this extra word in here and then hit publish so this should trigger a circle ci build so it's in here and as you can see it started and it's running and it should deploy the new website here's building and deployment is successful so if we go in here we still have our website deployed and now we have the full uh circuit so whenever an editor goes in here and then add the blog post so let's just add a test blog post so we call it this is a test and then we have test content we can link an image and the date should be um today and the author is here and then i hit just publish so this should trigger another build as you can see it's running so now hopefully when i go here i can see the new blob in in here so this is a test which is the same so we can also go here and delete it and this is of course we'll start again another build and we will end up with a website without this book blog post