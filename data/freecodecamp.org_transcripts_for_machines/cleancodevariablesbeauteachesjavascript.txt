clean code in JavaScript variables I'm going to be sharing some guidelines to make sure your variables are readable reusable and refactor the first thing is to use meaningful and pronounceable variable names you can see in this example VAR y y y y MMS DST equals moment. format so and so on instead of calling it y y y y mm sdtr just call it year month day so this variable is a lot more meaningful and you can easily pronounce it uh the next thing is use es6 constants when variable values do not change we have VAR first US president equals George Washington instead of using VAR you should use const because the first US president is always going to be George Washington the next thing is use the same vocabulary for the same type of variable if you have um three different functions or variables we have get user info get client data get customer record let's say these are in different parts of your program well it it's all basically the same thing a client can be considered a user a customer can be considered a user you should call these the same thing in each part of your program so we're just going to get rid of those two and we're going to make this just get user get user you don't have to say um get info data well we know it's going to be data so just call them get user in every part of your program so it's easier to remember what you Ed the next thing I want to talk to you about is use searchable names so if you look at this function or this for Loop for VAR I equal z i is less than um 525,600 so what is this number here what does that number mean it's actually better to put it right in your program what what that number means the truth is we will read more code than we will ever write so it is important that the code we do write is readable and searchable so we're going to declare what this variable means um in a capitalized VAR Global so we're going to put and then we can just change this to now it's a lot more obvious what what that's supposed to be in the program and as an added benefit of it being more readable it's also more searchable if you want to search for that number in the program if you can just search for the name of the variable next thing I want to talk about is to use explanatory variables so if you see this const city state reject and then this whole um reject thing and then save city state City citystate reject. match citystate reject and you just look at all this whole thing so there's a way to make this a little more readable because so what is this thing right here and what is this thing what if we could just make this into a variable let's just work backwards I want this to be City and I want this this to be State now we have to go and fill these in so we're going to do so you can see uh it's doing the same thing except it's just breaking it down a little more so it's more obvious what's happening first we're trying to find the the match and then we break it apart into city and state and then when we call the function it's more obvious what we're passing into the function okay next up is don't add unneeded context so if we look at this whole thing um varar equals car make Honda car car model Accord car color blue and we call the function function paint car car car. car color equals red so look at this part right here car docar color so we have a repetition we have car and we have car again right here car color so when you are um storing the car make don't call it car make just call it make because we already have car right here and then for model just call it model car color just call it color and then down here you can just call car. color and then you won't have to repeat yourself just unneeded context let's go down a little bit more um the last one I'm going to talk about is short circuiting is cleaner than conditionals so let's look at the bad example first the function create micro Brewery name our Brewery name if name then Brewery name equals name else Brewery name equals hipster Brew Company there's a way to make this a lot quicker if we can just take this whole thing out and make this into a conditional and that's it so this whole thing was this this conditional here was the same as that whole thing before so it's a lot cleaner it does the exact same thing and it's easier to read it's easier to understand understand well thanks for watching my name is Bo KS if you check the description you can see a link to what inspired this video don't forget to subscribe and remember use your code for good