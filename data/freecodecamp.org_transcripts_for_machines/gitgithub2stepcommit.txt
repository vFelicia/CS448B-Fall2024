Alright, so you've made commits, you understand that a commit ID is a big deal and now we're going to talk about a twostep commit why you have to use 'git add' and 'git commit'. Now remember when we make a commit ID that is pretty permanent, right, that's in history. So, this section over here is our log of commits. It's like a story of all the changes you've made to put together your code base. But first, we have to get there, right? So, you're working locally you make some changes. Say you make changes to an index.html and to a CSS file but you don't really want those to be stored together the changes that you made were not logically related in anyway that's ok. That's what 'get add' is for. Git lets you choose exactly which files you want to include in the next commit so let's say we want to do the index first so we'll 'git add index.html' and they'll move that file and git's metadata to the staging area. Git knows that when you run 'git commit' only to include the index file not the CSS file. So, any files in the working directory, if you want them to be included in the commit you need to use 'git add' first. Once they're in the staging area, Git's going to include them in the next commit once you run 'git commit' and then all of those files, that snapshot of the repository, including your changes, are stored with that 40 character sha1 hash in history.