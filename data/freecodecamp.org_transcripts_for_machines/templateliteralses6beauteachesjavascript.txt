template literals template literals are string literals allowing embedded expressions you can use multiline strings and string interpolation features with them template literals are enclosed by this bag the backtick with the back that key is right next to the one on the keyboard first I want to show you multiline strings now you can see these this is on two different lines in the console normally it you can't just put extra lines and have it make a new line in the console that put a few more lines like as you can see it's gonna put a lot of lines in between these two lines another thing you can do with template literals are is expression interpolation let me give you an example of that so if I run this you can see it's the expression interpolation happens with these symbols there's a dollar sign and then these squiggly brackets and and anything inside the dollar sign the squiggly brackets is going to evaluate and put the answer right into your string same with right over here and you can see that it adds a plus B Phi plus Inc we get the 15 over here and that does also two times a plus B over here to get the 20 you can still use the the newline just like you would do in a regular string you don't have to give it a newline but that would work if I just put new a new line just like that you can see it's gonna be exactly the same the next thing I want to talk to you about is tagged template literals this is basically passing a template literal into a function let me show you so I have my function written and now I'm going to pass a template literal into that function this function is called tag but it doesn't matter what the function is called and let me run that so you can see the last two lines here is what happens from the this tag template literal example it's going to run the function tag and it's going to input input this tip template literal all the strings go into this strings array and the values go into the value array if you have dot that dot that just means a a an array here so the strings you can see our hello there's also so you can see the hello here and then world right there is right here in the in the console and then there's nothing right between this last expression and the back tick there's nothing there so that's shown in the console with an empty string now you can see the values in the console 15 and 50 well it passes in the expressions as the values so this skips passed in as 15 because 5 plus 10 is 15 and then this gets passed in as 50 so it it goes through the whole template literal first it takes out the strings and then it takes out the the values as as the expressions in this function I had returned GS nuggets but it's not we're not doing anything with that so we can do this if we consult log this and then we run this you can see that it's gonna print print J's nuggets at the end now I want to show you a more complicated way of using tag template literals ok this code I copied right from the Mozilla developer Network page on template literals and this code right here and I just want to walk you through it this is the function and we're gonna have this we're going to assign this variable down here t1 closure to this the function template and we're gonna pass in this template literal here I'm going to uncomment out this console dot log and we're gonna run this we're gonna look at the very bottom where it says yay so when we passed in we called the t1 variable and we passed in the letters wine a it print printed yay let's walk through why that actually happened in our previous example of the tag template literals we returned a string but you don't have to return a string because in this function we actually return a function the strings and the keys from the that we pass into the original function are right here so we're passing in this template literal that becomes they gets broken into the strings and the keys then we are down here we're calling the t1 closure variable and we're passing the Y in the a into the function that's being returned by the template one way to help you understand this better is we're going to console dot log the strings here and the keys and then comment out this and I'm going to run it and you can see at the bottom the strings here where you console that lock the strings that's blank blank string blank string exclamation Park exclamation point because there's it gives you a blank string because there's nothing between these these expressions in the template literal and then we have the exclamation point at the end and then it's 0 1 0 this what we get when we pass in these expressions 0 1 0 that's the keys from here so now we're going to return this this function and the values from this function come from the Y and the a so let's go through this VAR dick equals values so we're going to the values array and we're finding this index values dot length minus 1 so that's gonna be the last item in the values array so remember the values array is why a and the last value is a so we now have our result equals an array C it's surrounded by these brackets and inside the array array we're gonna access this other array the strings array which is right over here if you look in the console dot log the array at index 0 is nothing so the result is going to currently equal nothing now Keys dot for each so we're going to loop through each of the keys now remember the keys if you look at the console the keys arrayed are 0 1 0 for each key we're on the the first key 0 VAR value equals number that is integer key so it's 0 number yes it is a number and in fact 0 1 0 those are all numbers so this is a ternary operator if the it is a number and all these are numbers we're gonna do the first thing before the colon if they weren't a number we do the second thing if you look at down at line 43 at one of these examples we have something that's not a number but for this example all of our numbers so we are going to go to the values array and go to the index of the key remember the values array is right here Y a and we have the index the first the first key is 0 so that would be Y and this is result that pushed the value and that values of Y or Y and we're also going to push the strings array I plus 1 so I is 0 so that b1 the strings array is red it is here 0 plus 1 is going to be it still an empty string so it's not going to push anything so this is going to just push Y now I'm going to go through it again and we're going to use the next key which is 1 so the next key 1 is going to bring up the a here and when it does result that puts out it's gonna push the a in here and that's going to go through a third time we have the key zero which is going to go back to the Y and this time we're gonna push the Y and when we go to strings I plus one well I plus one is going to be two plus one which is going to be three so this is the strings array this time it's not going to push on an empty string it's going to push on the exclamation point at the very end and then return results dot join so we have an array which is just Y a Y estimation points and when we join each item in the array it's going to put on to one string and that's how we get Y a for this string at the end now if i uncomment out these and run this you can see that this is going to do that it's gonna go through the same thing but it's gonna eventually get to this hello world and if you want to go through individually and see how that all works out you can thanks for watching my name is beau Carnes check the description for links to more information please subscribe and remember use your code for good