hello and welcome to this video where you're going to learn how to code in javascript with the help of two really popular millennial games my name is anya and i'm a software developer and youtuber who just loves to teach javascript and reacts by building all sorts of online retro and modern games today i'm going to be focusing on two modern classics that's doodle jump and flappy bird in these two tutorials you're going to practice over 32 of javascript's most popular methods including for each event listener slice pop push and many more these two tutorials for those who've already completed free code cams fundamental courses in html css and javascript as we're not going to be going into the nitty gritty i'm gonna already you know assume you know the for loop is you know what a const and let are if you are unsure of any of those words that i've just used please go ahead and do those fundamentals fast or hey if you're feeling brave follow along the more the merrier i'm gonna go at my natural pace but please feel free to use the youtube settings right here if you want to speed up or slow down it should be where the little cog is so yeah go ahead and do that it's pretty hard to please everyone but hey i try i also want to make note that this is going to be the basic versions of the game okay so we're not going to be like leveling up adding levels and the styling is going to be super basic i'm doing this because we want to practice the logic of javascript and not focus too much on styling that part is going to be completely up to you when you do finish your games please do share them with me i'd love to see what you've made how you have been creative how you've really taken the game and made it your own who knows maybe you've like added 10 levels to it i really want to see so please do share them with me i'm going to put my socials right here please tag me and free code camp i know we'd both love to see what you have made okay so what are we waiting for let's do this doodle jump exclusively for free code cam coming up first okay so first let's talk logic let's actually figure out what we need to do to make this game first so if we look at the game itself you will see that we need to start off with five randomly placed platforms so we're going to need to make that we also know they're all equally spaced apart so that's something that we're going to have to think about equally spaced apart vertically that is we also have the doodler himself who automatically lands wherever the first platform is okay so we're gonna have to remember that as well he can't just be landing wherever when we start the game otherwise you'll just fall to the bottom and die we then also have the platforms moving once the doodler is at a certain height okay so they're not always moving it's only if he moves past a certain height that's something else that we're gonna have to remember now you can also see they are disappearing if they pass the floor and then we add a new one to the top once that happens so i already know this is going to be array work we're probably going to be using pop or unshift in some way or another with this array and of course we have the doula movements themselves so that's gonna be a lot of jumping and event listeners so yeah you can see he he jumps up and down if he is on any platform at any height he also moves left and right but stops if he hits the left or right hand edge and the game is over if he hits the floor we then also need to see the final score which is actually the amount of platforms we have jumped over so we're gonna have to account for that we're gonna have to store this score somewhere okay so now that we have those basics down here are some of the javascript methods that we're gonna use for this project okay great and now time to set up our project okay so to start off here is our project i've already gone ahead and made some html boilerplate where i have linked our app.js file for our javascript with a script tag and our style sheet with a link tag right here i've also gone ahead and put in a div and given it the class of grid this is where all the magic is going to happen this is where our grid our doodle jump grid is essentially going to be okay so let's actually start off perhaps by styling this grid up so let's open up our style sheet and use dot grid because this is how we get classes with the dots we're grabbing the div with the class name of grid giving it a width of 400 pixels a height of 600 pixels a background color of let's say yellow for now a position of relative okay so i'm going to explain this a little bit later but we need to give it a position of relative if we're going to be dealing with positions of things in our browser okay so the next thing we're going to do is actually grab our doodler so we haven't made them yet but i'm going to go ahead and style them up as if we did so once again i'm going to give it a class of doula so dot doodle and then he's going to be 60 pixels wide so width 60 pixels a height of 85 pixels a background color of let's say red and this time position absolute ah we need to actually spell doodler correctly okay so this is looking good let's go ahead and make our platforms too so each platform is going to have a class of platform and i'm going to give it a width of 85 pixels a height of i don't know 15 pixels and then a background color of green i think green will be good i mean this is just temporary for now i'm also going to give it a position of absolute i am using position absolute for the doula and the platform to make sure that their position is absolute inside our grid whereas the grid itself is going to be relative to our browser okay so that's the sort of meaning behind that now let's flip over to our app.js file now the first thing to do because i did put my javascript tag in the header is actually use a document event listener and pass through dom content loaded okay so that's the event essentially what this is saying is that i only want the contents of this file to load only once all the html has been written let's just get rid of that for now we don't need it an alternative to this would be putting your script tag at the bottom of your html file both ways are correct this one's just that little bit more foolproof okay so first things first let's actually grab our grid so we can work with it in this file i'm going to do so by the getting the const grid and using document query selector so query selector is actually a javascript method that allows to pick out elements from my html so in this case i am picking out the class again dot of grid so i'm picking out this element right here next let's grab our doodler so we don't actually have this in our html file yet so let's go ahead and create him so cons doozler i'm going to use document create element to create a div so i'm creating a div at the moment and i'm calling it doodler we haven't actually placed our doula in anywhere yet so if you go to your browser you won't see him we have just created a div okay now next let's actually write a function to create the doodler itself okay so i'm gonna write function create doodler and inside of this i'm actually gonna grab our grid which is already made and use a javascript method called append child okay so i'm going to put in something into our grid that's what child append child the grid is the parent i'm putting in a child into it so i'm going to put the doula the div we just created called doodler i'm bringing that into our grudge okay let's go ahead and invoke this to see what happens and if it has worked so let's go ahead and do that now uh we actually need to add some styling to this otherwise of course we won't be able to see it so let's grab that doula the constella and use classless add to add the doodler class so this class right here to it okay now let's click refresh and there he is there's our doodler fantastic that has worked okay now let's actually get to moving our dealer around so i can actually move elements using my javascript which is pretty cool i can actually use javascript to essentially give css attributes to elements i'm going to do this by writing doula style and left okay so if i go ahead and just write the string 50 pixels and save this file you will see that i have actually made my element move 50 pixels or appear to move 50 pixels because essentially all i'm doing is giving it a left spacing of 50 pixels great now i'm actually going to store i don't want 50. i want to store this 50 as a variable so that i can manipulate it later and we can change it around so i'm going to do that now i want to say i don't know doodler left space sure let's do that do the left space so i'm replacing the 50 plus px and now all i really need to do is let doula left space equal 50. so this is essentially the same thing as we wrote before it's exactly the same thing cool now let's go ahead and give it some bottom spacing as well we do that in the exact same way so get the doula use style and bottom and then do the bottom space plus pixels and once again at the top let's define what this is so let doula bottom space i don't know 150 pixels see what that looks like and fantastic so you now see 50 and 150 and it's going from this point right here okay this corner that is essentially what we mean okay great so we've created our doula this is all looking good now uh when do i want to create the doula well i'm gonna actually write another function i'm gonna call it function start and i want our doula to appear if this function is invoked okay so let's get rid of this here because i don't want it creating in the file now i'm going to use an if statement and if is game over which we haven't defined yet equals false then i want to create the doula i'm actually gonna go ahead and do let this game over false here to start with because obviously when we start the game the game is going this game over is false now another neater way of actually writing is game over false is actually to get rid of this and just put a bang at the beginning okay so if the game is not over then we create doodler great let's invoke this again so this is going to be our start function it would be cool in the future to attach a button to this to make our game start so it doesn't just start you know when we load the browser so i'm going to make a note of this here attach to a button so we attach this function to a button but that's something you can do if you wish now the next thing i want to happen when my game starts or whenever we press the button is i want to create platforms i'm going to write function create platforms and let's go ahead and write this function so function create platforms now essentially in here we're going to be using a lot of the same logic we did to create the doula apart from five times so hopefully you're gonna be a little bit more familiar with this so let's go ahead and do it so for this i'm actually going to use a for loop as we need to do this five times as i said so for let i equal zero and as long as i is smaller than five we increment i by one okay so this is the syntax for a for loop now i could make this a little bit neater instead of using the five and actually replace this with a variable so let's just do that platform count i guess that sounds right i'm gonna use platform count for this so let's scroll to the top and once again let platform count and i'm going to store the value 5. this is so we can change it later on as well okay so now let's get to writing some logic for this i'm actually going to set a platform gap to start off with okay because we need to decide exactly how much space each platform is going to have in between each other so let's call this platform space now to decide this i'm actually going to have to look at the height of our grid so 600 pixels take that 600 and divide it by the platform count okay so that as we know is five so the platform space actually let's call it platform gap that probably makes a lot more space the platform gap is now gonna be 600 divided by five so that's going to be the space if we choose to add more platforms this will of course change as well okay now let's go ahead and start adding some spacing to all our platforms so to do this i'm going to make a new variable called let platform bottom let new platform bottom and once again i'm gonna actually give this new platform bottom a value of 100 plus i multiplied by the platform gap okay so what i'm doing here is using my for loop in order to increment the gap space so 100 obviously when i is zero times platform gap would be zero one times the platform gap is going to be 120 two times the platform graph is going to be 240 and so on okay so that's how that's going to work so let's go on and do it so i times plat gap okay cool okay great now that we have that down let's go ahead and actually start making our new platform so let new platform and i'm actually going to create a class for this called new platform okay and it's going to use things like the new platform bottom in our for loop so i'm going to show you how to do this class platform and then i'm going to need a constructor so constructor to construct our class that's what a constructor essentially is now in it as i said i'm going to pass through the new platform okay so let's pass it through here as well and i'm going to use this to create our new platform so each new value that i get is going to be passed through into this class five times so in each platform well what makes up a platform let's have a think about it each one of them is going to have its own bottom so bottom spacing between the five is all going to be different and we're going to use new plat bottom for this we then also need a left spacing because each platform has its own left spacing okay now we know the grid width is 400 and the platform width is 85. so we actually go ahead and make sure that the left spacing is anything from 315 pixels okay because 400 minus 85 is 315 and the left spacing as we know is from the left side of the platform so as long as we get a number from zero to 315 it will appear in our grid okay so this left equals math random this is another javascript method if i use math random and multiply by any number it will return a random number from 0 to 315. this is going to be our left spacing for a platform now i'm going to do something called this visual and again use document create element just like we did with our doodler to create a div for each platform okay so that's looking good now we just need to add some styling to it so we're going to actually store the visual as the const visual okay this is just we can use it so now visual class list add andy's style of platform i'm doing this because this visual.classes ad wouldn't work we need to store it as a variable first now once again let's give it some left spacing so this style left will be this left plus the string pixels and visual cell bottom is of course going to be this bottom plus pixels this is looking good i'm really pleased with this so far okay so the last thing to do as you might remember from our doula is actually put this into our grid once again using append child the javascript method of pen child and passing through our newly created visual okay let's see if this has worked moment of truth and great you can see all five platforms randomly spaced out from the left and evenly spaced out from vertical great let's refresh a few times just to make sure this is working and fantastic this is looking really good i'm really pleased okay so we've created the five uh platforms but you actually now want to put them in an array so that we can work with them in our project to do this i'm going to use an array called platforms so let's actually move to the top and make this an empty array now i'm going to use a javascript method called push now each time this loops i'm actually pushing the newly created platform we've made into this array okay so i'm literally going to push it into the platforms array okay this is how we do it and this is how push works so platforms push new platform i'm going to console log this just you can see exactly what's happening and how we're looping over and how each time we loop over it gets added so ah oops we've obviously misspelled something here uh that's right platforms cool thank you so much console log for helping us figure that out let's refresh and great you will see here that the for loop is working each time we loop we're adding our newly created platform into it and if we look into these into our array you will see exactly that you'll see our platform with the bottom with a left so essentially everything that's in our constructor this is pretty neat and we can now visually see all this information in our console as well awesome okay now that is done and we can see all our data and we know everything's working correctly let's carry on so we've already got the jeweler we've created our platforms i think the next thing we need to do is why do we focus on moving the platforms so let's go ahead and do that move platforms once again we actually need to write this function so let's do that now i'm going to do it here so function move platforms okay okay now as we discuss we only want to move the platforms if the doula is in a certain position so what this means is let's actually take the dual bottom space because that's how far the doodler is from the top from the bottom sorry of our grid now if the doula is anywhere above 200 the doodle at bottom space is above 200 then and only then we want our platforms to move so in the grid you will see here if our doodles anywhere in this space up here okay then we want our platforms to move okay so now we actually grab the platform so our array of platforms and then for each platform inside this array so this is how we use the for each javascript method we go into the platforms array we then do for each platform inside of that array we can essentially call it whatever we want but i'm gonna call it platform just for the sake of readability and for each platform in that array i wanna get the platform and to its bottom minus four okay so by writing minus equals four i'm essentially writing platform bottom equals platform bottom minus four so this is just a nicer way of writing that it's a lot it's a lot simpler now once again we need to get the platform visual so let visual equal platform visual and then visual style bottom equals platform bottom plus pixels okay so essentially what we are doing is making sure that each of the platforms moves by four each time okay let's check it out that has worked and great that has essentially worked but because the change is so small i mean four pixels you probably can't really see it now that we're moving each of the platforms down by four each time we actually need to put this move platforms on a set interval okay so i'm going to put on a set interval so this is another javascript method that will allow us to invoke the move platforms function so we pass through a function and then the time that we want to keep invoking this function at okay so now let's go ahead and refresh that that should be moving every 30 seconds 30 milliseconds sorry what is not happening here so we're getting our visual from each of the platforms we're then getting the style bottom and applying the new platform bottom to it ah okay yes it's because we are not above 200 pixels so if i move up here 250 tada all our platforms are falling down because they're on a set interval moving by four pixels every 30 milliseconds okay if i move this back to 150 pixels we are alert below the 200 mark so nothing's gonna happen amazing this is working okay now that we have the platforms moving we of course need to make them disappear once they hit the bottom and so on but let's leave that for now let's actually focus on getting our little doula to move so i'm going to write a function called function jump jump let's spell that correctly function jump okay so our jump function is actually going to have a lot of set intervals in here just like we have the moving platforms we're going to need it to make our doula appear like it's jumping now one thing that we didn't use with the other set interval is a timer id so a timer id is essentially how we can stop this clear interval okay so once we don't want it to keep moving we can actually clear it with this id so i'm going to call it uptime ids you can already see i've done and i'm actually going to define it outside of this function so i'm going to move it up here and make it global so that we can cancel it outside of the junk function too okay so this is how you do that you just make a global okay so uptime id equals set interval and then we pass through a function we don't have a function to pass through so we're going to write a function instead so function and we're going to invoke it every 30 milliseconds it's the same format just written a bit differently this move platforms function is essentially this function here okay so same thing just different format okay so what do we want to do every 30 milliseconds in our jump function well i'm going to get my doodler bottom space okay and i'm going to plus equals 20 to it so once again this is essentially just adding 20 to my doula bottom space each time i'm also going to style it so doodle style bottom i'm going to apply this bottom space to it using a string as well of pixels so this is we can see it as well so we're not only moving our doula bottom space we also want to apply it to our element let's check it out and whoa there he goes amazing so he's going up we now have to probably make him go down right so let's go ahead and do that in here if doula bottom space is smaller than let's say 350 for now we want to invoke a function to fall okay so now let's get to writing that for function let's do it here function full okay so once we are falling we actually want to clear the interval that we discussed we want to get rid of the uptime id because we don't want it going up anymore so another javascript method called clear interval will do that and we just pass through the up timer id we then want to start another set interval so this is going to be just the same as a jump i'm going to use dime down down timer id and once again set interval and pass through a function and in that function i want the doula bottom space to this time go down by five okay and let's go ahead and apply it by the styling so doodle start bottom doula space plus picks doula bottom space sorry plus picks okay so what else do we do i mean it's going to be exactly the same right so what we're doing in here we've got that great so i'm actually going to make sure to clear the downtime id when we jump so each time we go to jump we want to clear the down timer id okay and then when we go to four we want to clear the up time radius so each of them canceling each other out let's make sure to invert the full function every 30 milliseconds and let's test it out and whoa yeah we can see the little element is jumping and going down once he hits that 350 pixel mark okay so this is looking good now let's go to stopping him so if doula bottom space is smaller than or equal to zero well we know that's a game over so let's actually just go ahead and do it now so game over function which we haven't written yet because of course we're going to write it now so a function game over now if you think about it in the game over we essentially just want to know it's a game over right so let's console our game ever so we know that it's a game over so cool that should be enough to do that this is obviously just for us developers this isn't going to show up anywhere it's just a console log now we also want to set the is game over to true because you know the game is the game is over um so that is looking good and we also want to clear the interval of the uptown up timer id and the down timer id even though the technically the up timer id should be cleared already because we're going down i'm just going to do it here you know it's default just as a safe sort of practice okay cool and there he goes and our console logs printing game over and we're no longer moving down because the down timer id is cleared fantastic let's just try again this is looking great but as you can see we need to do a lot more right we're not even done we don't want our doodle jumper to just be okay so this is all looking great i'm really pleased with how this is all looking we've got our game over we've got our platforms moving one thing we did mention is that we actually need our doula to start off on our platform right so we don't want them just appearing anywhere but not just any platform our first platform so we can easily do that let's move over to our create doodler function now in here doula style left now we don't actually want him just going anywhere so i'm going to get the doodle less space and assign it our first platform so we're going into our platforms array we're getting the first item so we do this by passing through a zero into our array and we're getting the left of that platform so let's have a look at it here so if you look here i'm going into our platforms and then going into the first platform and then grabbing the left so now it's going to be the same let's check it out so let's go ahead and see what this looks like ah and an error message why is there an error message all we're doing is going into the platforms heart it's because we actually make the platform after we try to get the platform so we can easily solve that let's just solve this by moving these two functions around so we're going to create the platforms first and then create our doodle jumper okay because we want to create the four or five platforms first so we can then take the first platform once again thank you error log okay now let's carry on okay so now what else do we need to tackle well i think we need to actually get our dual jumper moving when we control our keyboard so i'm going to do this with a function called control in this control function i'm actually gonna essentially link up the keys on our keyboard in order to use them and whenever we press the keys that we want a function will get invoked so i do this like this if e for event key equals arrow left as a string so ease for event we actually need to pass this into our function if the key that we press is the arrow left on our keyboard then we want to move left right so we don't have a move left function yet so i'm just going to put some pseudo code in here else if e key equals arrow right so the string arrow right this time then while you guessed it i want to move right so once again i'm just going to put a placeholder hole that placeholder here else if e key equals arrow up well i essentially just want to straighten out because i don't want to move left or right anymore so i'm going to just put move straight sure move straight function do we want to write this here no let's let's comment it out for now and put it as a placeholder okay this is looking good um what should we tackle first so again we want to be able to move our doodle jumper before we do anything let's actually set ourselves some variables so i'm going to put let is jumping equals true because if we if you remember we only want to be able to jump again if his jumping is false okay because we don't want him to be like midjumping we don't want to jump and jump again if he's already midjump and then in the jump once we are jumping we want his jumping to be true okay that makes sense right when we're jumping is jumping is true and when we're falling well you guessed it as jumping is false so now we have this being stored so we always know if he is jumping or he's not jumping and we can use this in our project great okay i think we should probably tackle i think let's tackle if the doodle jumper is actually on a platform so we're essentially checking up for collision so we're going to do this in the fall because we don't care if he's jumping if he's jumping he'd go through the platforms we only care if he's falling and if he falls onto a platform we want him to essentially jump again so let's do this by grabbing our platforms array and for each platform so for each item in our platforms array if the doula bottom space so from the bottom is bigger than or equal to the platform bottom and the doula bottom space is smaller than or equal to the platform bottom so essentially we're going we're making we're checking if the doula bottom space is in between that 15 pixels in between so we're checking if it's in the platform right so you can see here height 15 and that's why we are adding that 15 because we are checking if he's at the bottom of the platform but plus 15. now we also need to check for if the do the left space so we need the first statement to be true and the second second statement to be true and now this statement to be true so do the less base plus 60 so we're going from the left and plus 60 because that's the width of our doula and then we are checking if that is smaller than or equal to platform left okay so once again we are getting the doula less space we're adding the width of the doula to it and whatever that number is is smaller than the platform left means he's not on the platform okay he's to the left of the platform somewhere so we need that to be true and we also need to get the do the left space now this time we actually need to check that this is smaller than or equal to the platform left space but this time plus the platform's width okay so we're essentially making sure that the delay is not anywhere on the right side of the of the platform so all of these four things need to be true in order for a collision to happen so we need to make sure that the doula is not in here or not in there and he's also in that little platform space cool now we just need to check for one final thing and that is that he is not jumping okay so just this is sort of like i guess safety blanket because we are falling so he should technically not be jumping but you know just to like fool proof this whole thing great let's actually also get a console log going just to check that we have met all of those criteria and we should get a console saying landed and then once he has landed we want him to jump again so let's put that function here and invoke it so if all those things are true in that if statement we want to print landed and jump again so bang there we go landed bang and we are jumping awesome okay this is looking good there is a floor however i don't know if you can see it but our jump only goes to a certain height this is because we hard coded the max height that we can jump to okay so at any point we'll never ever jump higher than this okay not even c not even if we get like a platform that's close to that it just won't happen this is because we need to reset our starting point of where we are jumping because at the moment we're simply jumping a certain amount so let's do it now so do the bottom space is 150 i'm actually going to make another variable called let's start point equal and to start off with it's actually going to be 150 so i can actually get the do the bottom space and assign it the start point for when we start jumping so that's what we're writing here essentially okay so now let's use this to reset essentially our jumping point each time so once again i'm going to do this here so i'm going to get the start point and whatever the doula bottom space is at this time i'm going to make it the start point okay so i'm overwriting 150. so if we're on a platform then we can overwrite the start point and store it as start point so we can use it globally so our start point is only now changing okay so there's gonna be our new start point for jumping i'll do the bottom space it's always gonna be moving continuously moving because we're gonna track wherever the jeweler is but our start point is gonna change okay so now if doula bottom space is smaller than and we need to change this 350 we're going to get our start point so remember at the start it's 150 plus 200 so essentially we're not changing anything too much here but as soon as we land on a platform that number's gonna change so let's see if that has worked woo okay and there we go we have now fixed our problem okay only a few more things to do and that is actually write our move left function move right function and move straight function let's start off with our move left function so here we go function move left now what happens when we move left well essentially it's very similar to the jumping but we're going to be changing the doula space left instead so i'm actually going to write a new variable let is going left let's actually also set this at the bottom so it is going left is false because that's what we are starting with i'm actually going to go ahead and write let is going right false as well because i know i'm going to use that later on so it is going left when we are moving left i want to change this to true okay and we're going to store that globally now i'm also going to start a left timer id so once again it's a set interval left time id equals set interval and pass it through a function once again i'm going to store this left timer id globally and this right time id globally so we can access it and other functions so that is now done cool now what do we want to happen let's move on equals what do we want to happen in here well a few things we need to get the doodler to move so let's go i'll do the left space and this time minus five from it or yeah minus five from it and then we need to actually show this in our browser so i'm gonna use doula style left and then do the left space one of the new dead doula spaces plus pixels okay and then i i want to invoke this uh set interval every 30 milliseconds so that is looking good now okay now we just need to hook up our control function so the move left is in the control function i'm going to do this in the start function and use document and add event listener and pass through control but also the event of key up so now each time we essentially press our key we can invoke this control function which will invoke our move left function and if we move our or click sorry our arrow left button on our keyboard we will move left and great this is working perfectly now one thing that isn't going well is that our doula is actually going off the left off our grid we need to stop this so if do the left space is bigger than or equal to zero and only if this is true then we can make our doula move otherwise we move right let's get to writing our function for move right again it's going to be very similar to move left is going right equals true okay now let write timer id equal set interval and then a function which makes sure that if the doula left space this time is smaller than or equal to the width of the grid so smaller than or equal to what is it again 400 okay and then we need to actually minus the doula width so 400 minus the doula width so 340 okay so if that statement is true and only if that statement is true we get the doula left space and this time let's add five to it and once again let's apply this to the styling so doodler left sorry doula style left and the do the left space cool don't forget to add the string of pixels so now we just need to make sure to account for if it is so if it is then we move left and let's invoke this every 30 milliseconds great this is looking good okay shall we test it out let's actually put this back here so move right and invert the function okay so now if you press the right arrow so let's go ahead and do that whoa what the hell is happening why is it going so fast okay what have we done that's strange it's also sort of like flinching because it can't decide whether to go left or right that's because we haven't cleared the interval so let's do that first function move left if is going right we clear the interval right timer id and we set is going right to false okay so when we're moving left we need to clear the right time id and make sure that we are not going right anymore let's do the same for move left so if is going left well we need to clear interval left timer id and make sure that is going left is false okay great that should definitely stop the twitching um let's refresh that boom i mean it's still going really fast i don't know why that is but at least it's not twitching anymore boom why is that doing that ah it's because we're putting 50 we need five great typo okay and that's much better cool we now have a little doula whacking off each side we now need to actually allow it to straighten up if we want to write so we don't always want it to going from left to right from left to right we need like an out so for this let's focus on the move straight so function moves straight and i'm simply just going to clear everything so i'm going to put is going right it's false it's going left is false um what else we need to do clear the id so clear interval right timer id and clear interval left timer id okay it's looking good cool let's test this out again and we've done it this is looking better and better each time it's still glitching when we get a game over i mean we just need to do some more interval clearing but this is looking good okay now i think let's focus on actually removing the platforms and adding new ones so that's gonna be fun that's gonna be some fun array work let's do this in the function move platform if the platform bottom this time is smaller than let's say 10 so you're really at the bottom of the grid not exactly the bottom but you're in the last like slice that 10 pixel slice if the platform if any of the platforms in fact are there we need to get rid of the first platform in the array okay so let first platform let's define it let's grab our platforms array go into it so we're going into our opening of our array we're in first item and we're getting its visual okay so now let fast platform is defined classlist i'm going to remove the class of platform from it so i'm removing the cluster platform on the first item this is so we can visually not see it anymore okay now we actually need to also remove the array i'm going to do this by grabbing the platforms array and using shift so shift will do that it will get rid of the first item it's another javascript method that will get rid of the first item of an array so now if we console our platforms let's see if that has worked and great you will see here that the platform array is getting shorter and shorter each time let's just test out again i'm just really happy with how this is looking and obviously it's quite cool to see our array going down by one each time okay so we're getting rid of the first one let's go ahead and actually add a new platform as well so i'm gonna use let's new platform and what we need to do is actually use the class again so let new platform new platform but the class of new platform this time so this is the class of new platform now we need to pass something through into our cluster platform member and that's our bottom space well because we know that our grid is 600 pixels high let's pass through just a hardcoded 600 so that will mean that our new platform will appear at the top of our grid okay this is looking good and now we actually need to add that to the end of our array so i'm going to do that again with another javascript method i'm going to grab our platforms array use push and then pass through this new platform okay let's test it out and great this is looking good you will see our new platforms being created each time a platform disappears i mean i'm really proud of this i think this is fantastic um let's carry on okay so the one thing i did want to do is get rid of that glitchiness right so this this is definitely to do with the intervals let's head over to our game over function and clear the intervals of left timer d and right timer id to stop that glitching so clear interval yeah pass that through and clear interval again that will 100 100 stop any glitching happening okay so let's test that out i mean it's just so fun to play um but yeah come on let's let's actually do some testing it's actually quite hard to get at the bottom maybe i should increase the hardness settings of this okay let's do it now okay put that to a 20 and put that to a 20. i think that should make it harder okay i think it just makes just means everything's gonna move faster right so ah it's still glitching why is this happening hmm okay this is really weird but you know what let's just get rid of it right because it's game over we don't want it there anyway so i'm going to show you something cool and a cool way to get rid of all the children of a parent so i'm essentially going to get rid of anything in the grid i'm going to use wild to do this so while grid first child this essentially means if this is true so if a group if the first child of the grid exists then we continue to remove the grid's first child okay so this is essentially a loop while this is true remove the first child if there's another first child remove the first child until we have zero children in there okay so that's cool i'm also gonna actually display the score here so i'm gonna use grid and then in html and then score so let's actually set that globally to let score equal zero now all we need to do is define where we actually add a score well i think it would probably make sense to add a score you know like as soon as we get rid of a platform so score plus plus and there we go now that means that we are storing a score so once we actually let's die and let's see what happens you should see all the elements disappear and then yep and great you will now see it that was worked it's tiny but it has worked that's just styling so cool let's go ahead and i'm gonna do it now with you quickly so inside our grid i'm actually going to add font size and let's make it huge right let's make it like 200 pixels cool text align as well to make it in the center and center great so now when we die let's make our little guy die of course like this is still really basic i really do want you to like go wild with the styling i'm gonna style it myself and put on my github so feel free to take it if you want but obviously it's like it's much better to do it yourself and really give it that ah and there we go 22. amazing my score was 22 i passed 22 platforms and we can now see an average one huh okay that's it thank you so much for watching i hope this was really useful i really enjoyed making this with you and as i said please do share your finished games with me i'd love to see how you styled it this is something i made earlier this is something i made you're more than welcome to it but again please do try it try make your own thanks so much again for watching if you enjoyed this video please do like and subscribe to my channel i'd love to uh have you there and please do comment on any other sort of projects you'd like me to make or you'd like to see from me or if there's some like concepts that you don't understand i'm more than happy to explain them to you thanks so much again and i'll see you soon for those of you who have never played flappy bird before it's a simple game in which you as the player so the little bird have to navigate obstacles which are little pipes actually coming down this way and this way so there's like two pipes you have to get navigate through them but you also have gravity trying to pull you down so you can't hit the pipes and you can't hit the floor otherwise it's a game over so now that that's done let's do it flappy bird okay so make sure we have linked up our javascript file with our script tag and the style sheet with the link tag now we create a game container div so give a div the class container now our game container is going to contain a div with the class of sky and a div with a glass of ground in the sky div i'm gonna hard code our bird so add a div with a class of bird in it great now go ahead and save this file and flip to your style sheet now styling we're going to do this by picking out the class of our game container so let's do that first we tell our file to class by this dot before the name now how big do we want our game container to be well let's give it a high of let's say 730 pixels and a width of 500 pixels i am also going to give it a position of absolute this means the element is positioned relative to its positioned ancestor element in layman terms this means whatever parent div this div is in we will position it based on the parents dimensions and position now let's grab these sky we will give it a background color of light blue for now just so we can play around with it we can replace this with an image later let's also give it a width of 500 pixels so it fits in our game container exactly let's also give it a height of 580 pixels and a position of absolute relative to the game container it is in now let's pick out the ground once again let's pick a color so brown this time give it a width so it fits exactly in our game container a height that is 730 pixels minus 580 pixels so the height of our sky so it fits in the remaining space of our game container let's also not forget to give it a position of absolute once again this is relative to the game container because that is the parent element okay let's flip over to our browser see what this looks like ah it appears that light blue is not a color so let's go back and make this blue you will see here that we have all the elements here so you will also see here that they will collect on the top left corner we need to fix this so the ground appears below the sky we can do this in our css file using a property called top by writing top we are saying that we want to give spacing between the top of the element and the top of the parent element the ground is in as we want the ground below the sky we simply put the height of the sky so 580 pixels like this let's see what this looks like now that should be below and it does great let's also just zoom out a bit so we can see what we are doing okay now i'm also going to go ahead and style our bird so let's grab the bird class give it a background color of yellow so we can see it against the blue background now once again a position of absolute a height of 45 pixels and a width of let's say 60 pixels we are now ready to start applying logic to our elements so let's go ahead and flip to our javascript file in order to pick out elements to work with now as we put our script tag here we need to wait for all our html to load before reading any javascript we do this by using a dom event listener so we grab the document and add a javascript method of add event listener to it now we pass through the dom content loaded event and need a function so this is how event listeners work we pass through an event and then a function from now on all our javascript will be between these two parentheses and curly braces now we need to pick out our first element let's get to picking our bad let's pick the badge we do this by grabbing the document using a javascript method of query selector and then passing through a string of bad not for getting the dot as it's a class name we are looking for let's also save this as the conspired so we can use it again and again in our javascript let's also do the same for the game container so get our document use our query selector then pass through the class name of game container let's save this as the constant i don't know game display and once again for the ground so const ground equals document query selector and pass through the class name of ground now the first thing we're going to do is move our bird to the bottomish center of our sky of our sky div as that is what it sits in right in the sky div so right there in the middle bottom we're going to do this by adding space between the sky's left side and the bird's left side let's say by 220 pixels so let's set a constant that will vary so let bad left equal 220 and let's do the same for the bottom of the sky div and the bottom of the bad element so let's say 100 pixels we want between those two now that we have this declared let's write a function to apply these pixel changes to the styling rubber element let's write a function called start game now by grabbing the bird element and using a method of style and bottom i'm going to add this new bird bottom value to it and using plus px and strings i'm saying add 100 pixels to the bottom of our bird element relative to the sky div it is in let's go ahead and invoke the start game function and have a look what this looks like and great you will see our bird bottom we have added 100 pixels to that that looks cool let's go ahead and do the left side so we want to add spacing between the left side of the wall remember left side of the sky grid and the left side of our bird so once again let's grab the bird element get the style and left and assign bud left so about left is 220 and add the string of pixels start and left is actually javascript methods i'm not making that up and let's refresh and great our bird is now in the position that we want let's carry on now as we know we want the bird to move down with gravity because the bird starts dropping as soon as this game is started so let's get gravity and set it as two as a variable so let gravity equal two now let's grab our bottom and each time we invoke this function we wanna minus gravity from the bird bottom so we're changing the bird bottom variable essentially to minus two each time this function is being invoked now as you see it's only moving once we won't actually put this on an interval because we wanted to execute over and over again appearing the bus be dropping so i'm going to use set interval this is a javascript method called set interval to do this the set interval works by passing through a function and a time so let's put 20 milliseconds so i want this to invoke every 20 milliseconds i want the start gain function to invoke every 20 milliseconds if i assign this to a variable so let time id i can actually stop this set interval from running i will do this by passing it through another javascript method called clear interval so as you can see here i am passing time id through clear interval this will essentially stop this particular set interval from running let's get rid of this now as we don't need it and see if this has worked okay great that looks perfect let's carry on okay now let's get about to jump so as we know we need about to jump if we press a button we want it to actually go up and sort of fight against the gravity i'm going to do this in a function called jump so function jump let's grab that by getting the bird element star bottom bad bottom plus pixels now i'm going to grab the bad one again and actually add 50 to it before passing it through to style our badge this means that each time we invoke the jump function i am adding 50 pixels to whatever bad bottom is before styling our bird with this new black bottom okay now using an event listener i'm going to grab document and using the javascript method of add event listener so remember about event listeners we need to pass through two things the event in this case is going to be key up actually key no key up so each time your finger leaves a key on the keyboard i want to invoke the jump function let's see if that has worked and great that looks good i am happy to carry on let's just console log the bird position at all times to the bird bottom just so we can see in our console look what's happening let's inspect the page open it up and great you will now see our bad bottom at all times whenever we jump as you can see here we're sort of reaching 500 we don't really want about to go off the grid off the top so we can actually stop this so yeah that looks around 500 i guess essentially i guess it would be 100 we're in a 580 box so 480 i think that's around 480 we should make the bad stop so if bad bottom is smaller than so this means smaller than and i guess yeah 580 pixels minus the 100 we started so 480 pixels and only if this is true we want to jump okay so as long as bad bottom is under 480 we can keep jumping and okay well oh that's weird maybe we should increase that a bit because you can actually go a little bit further can't it let's make it so as long as bird bottom is smaller than 500 we can add 50 to the bed bottom to make it appear to be jumping and great this looks great perfect i am really happy with how this is working out let's perhaps continue by making sure that not just any key on our keyboard is a jump but specifically the space bar will invoke a jump so i'm going to write a function called control and password e for event so this e is actually short for event now using e if e key code so key code as a javascript method deeply equals the number 32 so number 32 is actually the key code for your space bar so if we press the keyword 32 so the space bar then we jump so now let's go ahead and replace the event listener to execute the control function which then controls the junk function now have a go yourself we are jumping we are jumping but we are only jumping if you press the space bar not any other key on our keyboard that's pretty cool you can link it up to whatever key you like i've just chosen the space bar please do google kiko's on the internet there's loads of resources to choose from keycode.info is a good one i'll share it with you below okay now that we've done that let's get to generating obstacles so i'm going to do this in a function called generate obstacle i'm actually going to use a javascript method called create element to do this so by grabbing the document i'm going to use a javascript method called create element and pass through into it the string of div okay so from now on this is how you create divs i'm going to save this as const obstacle so we can use it later in our javascript i'm now going to grab the obscure and using classlist add another javascript method i'm going to add the class of obstacle to this div we haven't actually written this styling yet so let's flip over to our style sheet and give our obstacles some styling so dot obstacle for class background color let's go green for now we can change this later width i'm going to say 60 pixels height 300 pixels let's say position absolute as always so it's absolute we haven't actually put this div in anyway yet but we will be so i'm going to do this now let's flip back to our app.js file now grabbing the game display to the game container i'm saying i want to grab this div right here so the div class game container now using a method so let's grab that game display now so that's the game container i want to put in my obstacle into this i'm going to do this with the pen child this is a javascript method a pen child and pass through the created obstacle we just made by doing this i am literally putting in a div into the game container it's pretty cool right i'm putting it in with sky and ground let's invoke this function to see if this has worked so press save refresh and great we have now put an obstacle into our grid amazing now let's actually position it to where we want so we've done this before we grab the element we then use style and left to give it a i guess padding from the left side of the sky container to the left side of our obstacle i'm going to set a variable obstacle left let's declare it up here so let obstacle left equal 500 pixels that's the width of our grid so then it should appear in the right place if we said it's 500 i'm actually also going to give it obstacle bottom as well so we want it to appear i guess above our ground which is 150 pixels tall as we can see here so as a reminder what i am doing is positioning our obstacle to be 150 pixels so i guess the height of the ground so it appears to be above the ground so let obstacle bottom equal 150 great this is looking good now let's grab the obstacle element and use style bottom to add the obstacle button passing through this so this is we're just passing 150 150 pixels and fantastic this is exactly where we wanted our obstacle to be everything is looking great 500 pixels and then 150 pixels fantastic i think we are ready to carry on right hopefully you understand this by now and how the left and bottom work okay now the next thing we want to do whenever we generate a obstacle we want to let it generate a random height okay we don't want all the obstacles coming in at the same height i'm going to do this by generating random numbers and passing them through into our obstacle bottom so let random height i'm going to set a variable of random height equals now i'm going to use math random this is a javascript method and if it's multiplied by any number we get any number from one to that number so let's say i don't know 60 that should be fine so math random multiplied by 60 will give us a number for one to 60 now that's our random height so i can get i don't know 5 30 45 whatever number coming out of this i have chosen 60 as i want an obstacle to appear below this ground line but quite a bit under it okay so there's 150 the ground is 150 high and i've chosen to make our obstacle ps60 from the ground to 60 from the game now that we have our random height i'm going to assign it to obstacle bottom now each time we refresh the page you will see what i mean so our obstacle is generating at random height from 0 to 60 each time by 0 to 60 i mean from the bottom of our game grid now let's get our obstacle moving from right to left in the generate optical function i'm going to write another function called move obstacle in it i'm going to get our obstacle left and minus 2 from that variable each time we execute this so sort of like we moved our flappy bird we are now going to move our obstacle left by 2 visually each time the move optical function is invoked so again we need to put this on a timer as we don't want this function invoking just once we want it to keep invoking until we stop it so again let time id we can set it as let him id as the other timer id is outside of the scope of this function so it's fine now set interval let's use the set interval method and pass through a function so this times we move obstacle and let's choose to invoke it i don't know every 20 milliseconds again just so it's consistent so 20. great okay now that we have done that we need to grab the obstacle use style and left and reassign the obstacle left to it so it actually affects our obstacle element let's save this file and check it out and awesome it's moving amazing i love how it moves this looks fantastic we now need to stop our element once it hits the left hand side right we want to make it disappear we need to stop it and make it disappear let's do that again in our move optical function so if obstacle left deeply equals zero okay because that is zero position zero right here if it does deeply equal zero actually let's have a look at this so maybe we actually want the obstacle to view when it's minus 50 as we own the whole obstacle to be out of view if we stopped at zero it would sort of disappear but you'd still see it does that make sense so we want it to be when it's outside of view and since the obstacle width is 60 pixels isn't it let's check this that's actually yeah okay yeah it's 60 so let's change it from 50 to 60. okay so if obstacle left db equals 60 we clear interval and we pass through the timer id we stop this set interval from excusing we then grab our game display and just like we used a pen child we remove child obstacle so we pass through the obstacle to remove it okay let's see if that has worked and great our obstacle has now disappeared and stopped fantastic now that we have done this let's move on to actually generating new obstacles once our obstacle has gone off the grid i'm going to do this by putting a function that we've actually already written so the generate obstacle function on another timing event called set timeout so set timeout once again we pass through the function so generate obstacle and this time we pass through a time so this time means after this amount of time has passed then we want to execute the function generate obstacle okay so let's say that we want to execute this function every three seconds so i think three seconds is about enough time so we pass through three thousand three thousand milliseconds set timeout generate obstacle 3000 milliseconds okay so generate obstacle let's save one two three great we now have random obstacles generating at random heights every three seconds fantastic this is all looking good so far now let's actually get the game to stop if the bird reaches the bottom of our sky grid so once again because the bird is in the sky grid if bad bottom equals zero it means it's at the bottom of the sky grid what do we want to happen well we want the game to finish right so let's write a function called game over so function game over in it let's decide that we want to clear the interval start game do you know what let's for clarity let's actually change this so maybe make it i don't know game timer id okay just so we don't get confused game timer id so we want to clear the start game function from running we want to then set a variable that is gamer to true let's actually go ahead and declare this here so as default is game over it's false obviously because we want to start off with it being true we can play the game that looks good okay what else do we do on a game over well we actually want to stop our key spacebar key from working so using document and remove event listeners time we pass through the key up and control this is how we remove events so now if a game is over and you press your key space bar nothing will happen let's go ahead and try that and yeah perfect that works now let's get to writing what happens if our bird is in the same location as an obstacle so essentially if we collide with the obstacle okay so i'm going to write this like this and tell you a little bit why so if obstacle left is larger than 200 meaning that it's not in the last 200 pixels of its travels and obstacle left is smaller than 280 okay so it's like literally in the middle of our grid essentially and our bird left deeply equals 220 in the position of 220 as it is all the time anyway maybe this is relevant then we have a game over okay so let's check this out okay so as you can see our game is stopping our bird is no longer moving it's not dropping down our spacebar does not work anymore great and we're getting game over show up in our console fantastic i know the obstacle's still moving we need to fix that we can actually do this by using if and then passing through is game over but bang by putting bang is game over i'm essentially saying if this game over is not true so if this is false if it's game move is false so the game carries on then we can generate new obstacles every three milliseconds however if this is true and it is a game over then we won't generate new obstacles on the set timeout get it let's see if that has worked okay it has worked we are not generating new obstacles however we're generating one obstacle do you see that so it was like one got generated then we stopped generating new ones but it was too late for the other one how do we solve this okay perhaps i know okay so obviously one more obstacle is being generated we can actually say we can actually just not add a class to it so once again if bang is game over so if the game is not over so if this is false then we can add a class of obstacle to the obstacle but only if the game is not over okay let's see if our little fix has worked okay great now once there is a game over there are no more obstacles being generated we are that much closer to what we want the last thing we need to do is actually stop our obstacle from moving so that green one right we actually want to stop when it collides with the bird let's also do that here so if any of the above is true we get a game over and we also clear our time id so we stop the move obstacle from moving so we'll let's clear that term 82 right here let's save and now ah oops and now when the bird and obstacle collide both stop amazing now you will see here that we have not written a rule to allow our butt to fly over the obstacle we're simply saying if the two are aligned vertically then the game is over let's fix this so again in here let's write more rules so once again here let's write more rules so this time if bad bottom is smaller than obstacle bottom plus let's just play around with some pixels here so 190 let's see if that works okay that's nearly there let's make a bit smaller so let's go ahead and try 160 i just want to see what looks the best really what makes it look like the most realistic so that looks okay actually let's make it a tiny bit smaller again 155 actually 153. let's make it 153. okay that looks perfect i'm happy to carry on so bad bottom as long as bad bottom is smaller than obstacle bottoms whatever obstacle bottoms at the time it'll be a number from 0 to 60 plus 153 and that should work great i'm actually going to go ahead and show you how to make these pipes looks like actual pipes so if we head over to my github where i've stored these items for you kindly please feel free to take them or you can of course make your own that's a lot more fun so if you go over to my repo called flappy birds you will find the pipe just go ahead and download it and then perhaps you need to write so i'm going to right click and save image save image as and just save it to my download so save now i'm just going to import it by dragging it in so this is quite easy when you use vs code i'm just going to drag it into my project cool so now you'll see my pipe okay i'm going to replace the background color here background image and the url that is the url of my pipe in the project so it's actually the root of my project so i don't need to do much just pass through the name uh oops i put in the wrong place let's put it in the root of my project i don't know why i put in an open editor okay let's save and let's see how that has worked amazing here's our pipe this looks great i'm happy to carry on now i'm actually going to shoot something cool we're going to actually do the top obstacle so i'm just going to copy paste this here i'm going to rename it as top obstacle so it's the same thing really however i'm going to use a property called transform and pass through the degrees i want to transform it by so to make it look upside down i'm going to pass through 180 degrees so rotate 180 degrees cool now this part will be easy essentially each time we have anything to do with obstacle we need to do the same for top obstacle okay so here you see how we create a element div let's do the same but call it top obstacle so top obstacle equals document create element and then pass through a div so we're creating a div and storing is top obstacle this time now let's grab the game display and append it using a pen child top obstacle we're passing through the top top obstacle into our game this time if there is not a game over so if the game is running we also want to add the class of obstacle or top obstacle to our obstacle and then of course we want to as the obstacles are moving the same time we could just use obstacle left so top obstacle style left equals obstacle left just to make sure they're both moving at the exact same time use the same variable and top obstacle style bottom now again we'll use the same variable so bottom optical bottom plus a gap let's set this gap at something i don't know 400 pixels so now each time the top of the score will have a gap of 400 pixels between it and the bottom obstacle cool oops we need to change that top obstacle too i forgot okay let's save this ah amazing we're getting the top of school it's not moving yet but that's fine we'll fix that at least it's appearing there with a 400 pixel gap i'm gonna make this gap bigger let's make it i don't know 430 pixels i'm sure that'll be fine cool let's carry on now let's just see if this works okay yeah that's better that's much better actually now the reason our top obstacle is not moving is because we actually forget to assign it the obstacle left variables so once again top of school style left equals obstacle left pixels while we are here let's actually go ahead and remove the top obstacle once it hits the left hand side too ah i missed about left and great we now have both obstacles moving along now we need to also write some rules that is a game over if the bad hits the top obstacle let's do that once again in here this time i'm going to write i'm going to open up some brackets okay and put this around the brackets so what i'm saying here is that if bad bottom is smaller than obstacle bottom plus 153 or the bad bottom is bigger than the obstacle bottom plus the gap minus 200 let's try that out okay great once again i'm just sort of playing around pixels with trial and error you'll probably figure out the right pixel that you want it to stop at what looks good this looks good don't forget to put it in brackets however as we want this to execute as one thing so we're going to choose between the two and then have and and and all the others so and the bad hits the bottom so there's a game over if obstacle left is smaller than 200 and obscure left is bigger than 280 and about left directly equals 220 and either of those two and the bad bottom deeply equals zero cool i believe we have most our logic done this is looking really good i'm going to quickly go over some styling just so we can i can show you how to bring elements uh in front of one another so i'm gonna actually make borders so our left border right border top border and bring out the ground so our pipes are behind all of these so i'm gonna show you how to do that quickly it shouldn't take too long but it's quite a cool thing to know about it's called the z index so let's go ahead and add the z index to our ground first so by putting plus one i'm saying i want it to be appear like closer to us let's refresh and great it is now in front of the pipes it is now plus one in front of us on the z index let's do the same for the borders so i'm going to make a border left once again let's make it i don't know 60 pixels wide as that is how wide our obstacles are i'm gonna give it a height of 730 pixels as that's the height of our game container actually i'm going to make it 90 because if i'm going to give it about a top i want it to sort of be the height of the game container and the top border again for this position absolute a background color of white so it blends in that background and a zen index of plus one actually maybe yeah plus one fine um now let's go ahead and add this to our html so i'm gonna put this above here it will appear stacked on top of our game container but don't worry we're gonna give some styling to the body of our game oh this is very strange why are we missing a body tag hmm okay let's put weird let's put the body tag in so now that we're in the body tag let's style up our body okay to make sure that our divs appear side by side and not stacked on top of each other so body i'm going to use display flex to do this cool i need to also in my game container 60 pixels left to make space for the border left so let's do that let's change that to left i think that's how i spelt it let's check yeah water left water left and refresh amazing we now have a border left fantastic this is looking really good let's go ahead and add the other two borders let's actually go ahead and make this made our board a little wider so 80 pixels here and 80 pixels here okay that's better that's better yeah i like that more okay now let's make our other borders so once again i'm gonna make a border right so in our html i'm gonna make a div and give it a class of border right cool border right and i'm basically just going to copy it so width 80 pixels height 790 pixels position absolute background color white and z index plus two okay now the only difference is is i'm going to give it a left left positioning of whatever the width of the game container is plus the border left width so that's 580 pixels so it starts at the 580 pixels from the left cool refresh amazing now just the top one to go so the top border it's going to be very similar once again so we should probably feel comfortable doing this by now so let's go ahead and bought a top let's give it a width of whatever the width is 500 plus 80 plus 80 right because that's the border right width and then we're left with plus the game width okay so i'm actually going to put it in the game container because i want to put it in the game container but i'm also going to i guess position it outside of the game containers so make it appear above the sky even though it's in the container it's sort of not really if you get what i mean i'm going to make it like position it off so yeah div class border top okay let's save this now border top once again width well i guess it's going to be the border right width and the border left with plus the sky so 660 pixels height let's just go with 50 pixels that should be fine position absolute and background color white z index i guess plus two again why not okay now this is what i mean top i'm going to go with minus 50 okay because i want it to appear above the sky cool amazing fantastic i am loving how our game looks this is looking really good i'm not going to go ahead and style off for now that's something you could do by yourself i'm going to show you a little something i made earlier so yeah this is my game with moving grounds and everything