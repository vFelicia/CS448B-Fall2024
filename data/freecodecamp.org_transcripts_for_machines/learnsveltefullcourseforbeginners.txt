Lee Howe is a core maintainer of felt so he is a great person to teach this massive svelte course for beginners spell is a frontend JavaScript framework for making interactive web pages leave starts at the absolute beginning with creating your first svelt component and continues on to teach every component you need to know to develop applications using svelte hello hello I'm Lee how so today we are going to write our first Spell components so usually when I write a spell component I will head over to the svelt rapple it's it's like a playground where you can write your components without having to worry about all the setup it's just right and then you take a look at the results and if you're happy with it you can even download the codes and run it in your environment so let's see so let's head over to the repo which is felt.dev Rebel or if you are in the svelt.dev website you can come over here to the top right corner and click on the rebel button and so here is this playground that I mentioned you can play around with it I'm something and see the results immediately on the right and you can download as I said which you can run your code so we'll take a look at that later on but first let's open uh Zoom this up and let's start with our first component so I'm going to name this first component about components so first thing first as well component is if it's written in one file and the file extension is have to be end with dots s v a l t e dot svelte so a spell component is a file that ends with a dots felt extension and the syntax of what you're going to write in here is going to be similar as HTML so uh as felt syntax is actually a superset of the HTML syntax so if you're familiar with writing HTML you can just write it over here for example I'm going to write H1 hell my first cell component whoops and I'm gonna have a few paragraphs uh let's see paragraphs hello world and I can have style text like how you would in your HTML uh file where you can have style tag and install your elements that you like so I'm gonna make my H1 the color Rebecca purple this is the purple color that Rebecca loves the most and a Rebecca's favorite color and you can change P tag to maybe a different font size font size 44 pixels right so you can add Styles you can have HTML just like you would in HTML right so you can add some um attributes so I'm going to come over here and say at the anchor attack so link to my YouTube and then can add okay attributes just like how you would in HTML so I'm come over here and say okay this is my YouTube channel uh hopefully you come okay this is my link to my YouTube channel so you can click over here so you can have a hashref um attributes and you can have children like you would in HTML so um let's see let's come over here gonna have a I'm gonna wrap all this within a div right so you can have children you can have attributes just like you would in HTML and lastly could the Logics for your components will be in a script tag right so we will explore how you will write your logic for your components but just for you know anything within script text will be like JavaScript so you can have something like let's uh name equals Lee how right this is Javascript you can write any JavaScript you like over here so one thing you need to take note is that unlike HTML you can have multiple Styles uh tag but in a Cell component you can only have one styled egg right only one and that one is important right same goes with script hack you can only have one script tag or else you get a warning an error a build error right so that it is that is it sorry that is it lastly um when I show you this I'm going to download this I'm going to open it up I'm gonna open it up and let's let me allow me to open up my code editor so I'm using a vs code over here um where I have so this app.spel is what we've written over just now and to use this components in in a setup that you would right this is a quick preview of how you would do is you will come over here in the mean JS file and you will import your swell components and it will be a class it will be a default export and you can use it where you choose where to Mount Your components I will talk about this in more detail later on and even how to set up your environments how to set up build settings right but this is just to let you know that your components will be in a DOT spell file and you can import from anywhere and use it like a component like a class let's talk a bit more in detail about styling in Spell components so over here on my screen we seen what we have left over from the last video where we created a H1 a paragraph a div and a link right and we started using CSS uh it within a style tag and now I have another component called components Dot svelt and I'm going to import this component into my app.spel right so bear with me if you are not familiar with this because we're gonna talk a bit about them more in detail later but as you can see how important is I'm going to import components from the file and then when I can drop my component over here right like this so my first component hello world and link to my YouTube is from amplus felt and component another components by wall and link to my Twitter is within another component so what I'm going to share today is a few things first the style that you write within a component is going to be scoped meaning all the styles that you write only apply to all the elements within this component see take a look at this I have the same heading 1 paragraph and div and anchor tag in another component and but if I write the Styles over here it's only going to apply to the H1 in my component only the this only the my first component is being colored in purple and only the paragraph within this component is going to be font size 44 pixels see the other com paragraph in another component is much much smaller so first thing the style is being scoped within your component meaning any elements it only apply to all the elements within this file this file that you look at right now so uh it it means actually spelled will read through all the selectors and figure out what element that it will apply to and then does some svelte Magics over there so this gives us a few Advantage first is that of course you are more confident with the styles that you're writing right now because uh it will you will make sure that it will only apply to the components over here to the elements over here of course not just limits to attack uh if you can have a class like this class I'm gonna say uh links and I can style it over here as well so links will have a let's see uh text align right so your right line and even if you have another class over here it will not write a line right so it's not just elements you can have class selectors the same it will only applies to all the elements that's written within this file component so you are confident enough that if you change something will only apply to all the elements within a component so you don't have to worry about messing up other components two because svelt knows what elements it will apply to and this also means that if you write something like uh for example if I already remove this I don't have any elements that has a class links actually this felt will know that you have a selector that is not applied to any elements within this file so um there is a warning and also you you and so that you know that you have to remove them because it's not applied to any elements anymore and what's good about it is also that during compilations fellow actually removes it so if you go to look at the CSS output uh text align right is no longer here so while we are looking at this CSS output I do have to point out that right now if you look at um I want to point out actually how this works so svelt will actually find out all the elements that will be targeted and then add a special class to the elements that will be uh that that will be targeted by all your class and then so and then it will use that class to increase the specificity of your selector of course your selector will be more specific right now but it will make sure that they will increase the specificity the same way for all the selectors so that um if you have selectors over here make sure that the specificity the relative specific specificity among the selectors is still the same right so so that it does not just add like a class over here and then bricks uh make this slightly higher specificity than the links you will not do that like it will make sure that relative specificity is still maintained so if I come over here and inspect the elements you will see that because I'm targeting H1 and P over here uh if you take a look only H1 and P will have that special class applied let me Zoom hopefully it's not too small all right so let's let me zoom and let's scroll so only the H1 and the P tag will get that uh special cost supplied but the div and anchor attack because you are not you don't have any selectors that applying to this element so that uh so the special class will not be added to your to these two elements right so spelled nose felt will do what is the most optimized thing it will not just apply blindly to all the elements so look again at the CSS output you have H1 and p uh being increased with this class special class right so so just let me demonstrate the case where I'm saying that if I have class over here say links um you'll make sure that if you come over here link starts felt and P dots felt so relative specificity is still the same uh is still one up in the class specificity uh yup so so this is scope styling and this is not just applied to selectors it's also applies to um keyframes animation frames so if I come over here I see keyframes I'm going to write a zoom animation so like bear with me let me type that out transform scale three and maybe 50 time I'm gonna transform uh scale 0.5 okay I'm gonna apply this uh Zoom animation for my header come over here animation and then I would say Zoom uh five seconds and finite so you see that I'm applying an animation to this H1 for five seconds with this Zoom and my point is this Zoom is being scoped to this component only uh meaning if I come over here I'm going to copy this and I want to apply it to my H1 as well sorry I should write Style H1 animation Style you'll see that Zoom is not applied to these elements right or rather you apply the zoom animation to these elements but Zoom is not defined because these keyframes that you write is only limited available to your elements over here it will not pollute any other Zoom animations out there so look again at the CSS output you will see that animation uh uh although it's minified but you can still weekly figure out that this keyframe name has been changed it will add svelt Dash Zoom special just it's a hopefully it will be unique animation name and then you also apply that to your animation so this animation that you write over here is scoped within your component so you may ask me like yeah that's great but what if I want my Styles I want my selectors to be not just apply to the components over here I want you to apply to all the Hedge ones out there as well yes so if you want to do this and you are very sure that you are going to do this we have a backdoor hash uh catch hatch that you can work around right you can this is like an escape door to use if you want your if you are sure enough that you want these selectors to be available globally and how you would do it is you will apply your ads a pseudo selector called global and wrap it with your H1 so immediately if you take a look at let's come over here and inspect first immediately you can see that your sorry let me expand your H1 immediately you can see a H1 no longer has that special class because it's not going to Target this H1 only right so it does not need to have that special class anymore and if you come over to look at the CSS output H1 is no longer having that special class so this H1 will apply will have effect to all the H1s out there right so if you look at here you can see immediately this uh component is also a purple color as well right so if I come over here for P tag global you see that Bible or like yeah buy wall will be um 44 pixels as well so this selector will become a global selector as well and lastly you will ask me how about my animation frames I want to have a zoom over here um how what how um if I want to use zoom out elsewhere say I want to come over here and say H1 and P to apply the zoom animation how do I make this animation keyframe to be globally available well you would have to prefix it with a global Dash Global Dash so you have to prefix your animation name with this prefix and there you go it will be available globally right so if you take a look at the CSS output again your Zoom will be your keyframes will be named zoom and it will go everywhere so there you have it you can CSL Styles in svelt is scope to your components to all the elements within your components only and if you want to escape from this there's an escape door for you which is to use a global pseudo selector uh sorry yeah pseudo selector or you can uh use a dash Global dash for your keyframe to make it globally available let's take a look at how we can add data to your Spell components over here I have written as well component which has a h heading which says hello world and image tag that has a logo for the spell logo what if I want the the contents of the header to be dynamic I wanted to come from somewhere that can Define from my code import from somewhere and how about I want a dynamic image URL for my image tag right so that is when you need to write a script tag over here script tags in as well components allows you to add Logics to your components and add Logics and data in your component so I can come over here and Define content say hello okay let me just copy instead of typing it out hello world and I can also have an image URL um which is this one let me copy it whoops and if I so that I can have Dynamic contents over here Dynamic data and I want to apply it to the um to my elements over it below so how do I do that well in this result if you want to use a JavaScript expressions in your HTML you would use Clear brackets curly brackets so instead of writing hello world I can have my curly brackets and I within a clear brackets I can write any JavaScript I want so over here I can write content so any variables that you define within a script tag as long as it's at the top level then it will be available for your script tag what I meant by top level is that if I come over here if I Define a function so I call it function full and I Define contents over here hello I buy world then this variables that you define is actually scoped within a function it's not at the top level so if I comment this out then you will say content is not defined fair enough so I have to Define it at the top level same thing goes for um your attributes I can come over here remove this and have a curly bracket so anything within curly brackets will be able for me to write JavaScript so I'll come over here I say image URL paste it in boom I have a dynamic attribute in um in in my HTML elements so a few things about this uh you can omit if if this is uh this is just a value for the entire variable will be able for your attributes you can actually omit the code sign well it's so it is useful for some people where maybe they are writing HTML uh they are used to writing HTML then you can keep that code sign and it's also useful for editors that does not support svelt um you have that code sign on it makes the and you can start you can select your language as HTML and then it will syntax highlight the syntax highlighting will still works fine so that's one thing and secondly if I instead of defining image here I'm going to define a source over here you see I'm typing Source it goes to Source um this may be a bit more keystrokes than you type so we create a shorthand for this if you have case like this you can actually write this in States so this curly brackets wrapped with the source is exactly the same as writing Source equals source so if you have a variable that the name of the variable is exactly the same as your attribute name then you can have this shorthand instead so in summary you can write a curly brackets and you can have any JavaScript in there B it's the content or an attribute and lastly we've seen how you can write a shorthand for attribute if your variable name is the same as the attribute name we are going to talk about reactivity in sweld well reactivity is a previous fancy word that means that if you update a variable it should reflects on to the Dom or your screen in the previous video we've seen how we can add Dynamic data Define your data in the script tag and then you can use them in your HTML templates and today we're going to look at how we can update those data and then get it reflected onto the screen so over here I have a count it says I Define a count variable as 0 and I use I show it on the screen using the color brackets count over here and that's it and I have a buttons and these buttons what I want to do with this button is I want when I click on this button it will increment uh the count variable so we haven't learned about events handlers yet but let me just type it in and show you that how it's done we'll talk about them in more details in the next in the next videos so in this video just assume that this will add on click so they increments the count so how do I increment the variable counts I can do it like how I would do it in JavaScript I'll just come over here account and then I say plus plus this will increment the count will it work yes of course it will just work like this so you come here you increment count and then it just works like magic uh do you don't have to do anything else so what happens over here what I just felt will analyze the code redraw the code and it will has some sort it has a sense of what are the variables being used in the template and these variables is called a state a stitch within your components so this stage is only for your components so the state we have over here is called count and whenever we're trying to update the state spelled will knows as well so whenever you update the state spell will update the components uh updates elements and then reflect over here you're using console right it will reflect it will it will update this element and so that it will reflect the latest value of the count so now this begs the question how does swell knows that I'm updating the state well it tries to analyze the code that you write but of course it has its limitation so there's a few things that svelt looks at and sveld knows that it's updating the states so here is here let me list them what they are right first is assignments so if you try to sign counts to another variables so let me remove this for now counts equals to 10 this is assignments you're assigning 10 to count as well knows that this is updating the variable count right the states count so click C 10 appears on the screen secondly let me go ahead let me comment this secondly you can have update statements update statements so what are update statements update statements are like this this is like updating this is a unary operator that updates a variable so this works uh you can have update assignments so counts plus equals to two let me comment this when you click your plus equals to two so uh so plus plus minus minus plus equals times equals divides equals uh times equals all these are update statements so else knows that you are updating this variable count and if count is a state variable then it knows that it needs to update the component so let me comment this and let's take a look at the third one and it's the last one updating or assigning a property so say for example instead of having count I have an object object equals and then I'm gonna this object has a property called count so that I don't have to change too much of my code so over here in the clear brackets any JavaScript you can write so I can write object.con still works so here if I try to update this property say I try to update it by say object count plus plus then this will still works so how how spell looks at this statement is that I see you're updating a property of an object this object this variable called object and if this variable is a state variable right again if this variable is a state variable in this case it is then it knows that this is uh when when you do this you need to update the component at the components you have to trigger component updates same thing goes with object dot counts equals to 10 let me comment this out uh if you click it will update as well so uh updates or assignments on property will Kickstart that so anything that falls outside of this three category will not Kickstart uh the spell will not know that you're actually updating the variable and thus it does not runs an update cycle which means that you're still able to change the variable but then it's just not reflected on the screen so let me get you a few examples so uh not an update to svelts so first is um again we have an object right so let's let's take this example if I now object uh if I assign this object to say data and I come over here data.account plus plus you you would expect that the object counts has incremented right you would expect that um if I click this you should see but no it does not why so swell looks at this yes it's an update statement but this data is not the states this variable data over here is just a variable within this function so it has no idea no idea that um this data over here as a state so that's why it does not updates the component so you may ask me like well this is obvious right data is equal to object yeah this is obvious in this case but what if you have another case where data comes from a parameter or something else right this is object you pass by reference you Updates this data you should expect to see it reflected but how does shroud knows you you have to trace a lot of things so swell does not know at all it is too difficult to know so that's why if you are updating a variable and this variable uh is not a state object it will just look at this statement and if this statement the object is not a state this is not a state then it will not Kickstart an update cycle just so you know that we have already updated this data but it's just not showing on the screen I'm going to come over here uh uh have another function called uh do something else and I'm going to this time around I'm going to say object dot uh full equals to 1. so calling this function will will tell us as well that object has updated and you need to go through and update this the component so if I have a button over here says do something else something else right so my the point I want to show you is this if I click increments a few times the data the object the data is pointing the same object as the object it's the same reference so uh you you should have already updated the count the value has changed balance well does not know that it needs to update the components so that's why you don't see this being reflected over here but right now if I come over here I have a do something else and this do something else uh assign one to the object right so it looks over here object.full object is a state so I'm gonna update my component so if I click this right now you see that it reflects immediately right it tells that object has updated so it it knows that you need to update all the elements that relies on the object it comes over here it looks at object account huh what's the value right now it is 11 so I need to update so you see 11 reflected on the screen but if you click again this nothing happens because well just look at this statement it says data data is a state no okay I I can't do anything about it right so this is something you need to know you you need to know this is the limitation of the svelt's reactivity over here let's take a look at another example this time round we are going to look at um methods for example array methods so calling a method so if I have um object as an array instead okay and I am going to call up object dot push okay so here I am going to say object.lank right so every time when I call I'm going to push one item again and over here I should show the object length I want to see the length of the object but if I click click click click click click nothing happens I think better you should just json.string G5 so they can have a better look at all the items right so I click click click click click nothing happens again object the push it's felt has no idea you're calling a method whether this method will affect this object itself no idea at all it could be just calling a function method and it does something else like console long or do something else right it has no idea that this will affect object so that's why it does not updates to everything so you've come again if I come again to click at this something else this will do an assignment and a signing object tells that object has changed and then hopefully it's felt will Updates this right so if I click here see it's updated because well knows that okay you are updating objects so I come over here object has changed uh Json 25 of object has changed I reflects it on the screen so now svelt knows right so um calling a method or update or you're assigning a a reference to another variable and update that variable has no idea that you are changing the states so these are the few caveats of limitation of the svelt's reactivity lastly let me share you with a tip this tip hopefully will help you to understand this whole reactivity better so over here um zwelts will compile all this code into JavaScript so let's take a look at the JavaScript outputs come over here we scroll down you will probably see um this increment function right so everything that we've written is copied over here right it's nothing special well nothing special is a problem if you don't see anything different then which means that any when you try to change the variables over here it has no it does not trigger an update cycle if we scroll down to look at the do something else you see that something is different you you see this dollar dollar in validate function this function tells svelts that hey update this uh uh assign this update this object and then also click start a new update cycle so if I uncomment this you see that in each statements that I said wool Kickstart an update cycle you see that they all comes together with a dollar dollar invalidate a well counts does not okay that's because we count is no longer as dates right so if I Define counts over here uh you probably will see that and to use it to show this conversion you'll see that all of them will have the dollar dollar in validate um function being called alongside with them because it knows that uh you are updating the states and this state is being used in your template so go updates right so all this has invalided by the case that I say the caveat the limitation does not have so this hopefully this little tips will help you to better understanding house wealth reactivity works so try to write something on the left and take a look at the right and see where the swell picks it up at this dollar invalidate function and you know that whether this will Kickstart an update cycle let's talk about event listeners on svelt so you probably have seen me done it before how I add a click event listeners to increment the buttons but in this video we are going to dive deeper and explain all the things you need to know about adding event listeners on your elements in your spells components so let's take a look at the rebel over here I have a H1 and if I want to add event listeners this is how I would have done it if I write vanilla JavaScript I would have a reference to the elements like the H wand and then I will say add event listener and then I'll pass in the events name in this case if I want to add click I will say click and then I will pass in the event handler so I will write event I will have a function and then I will do something on the events right I can have a I can Define this function ahead of time say on click so there's two ways I can uh create the function inline or I can create a function ahead of time and pass the reference to the function in this add event listener method so the same thing goes in the elements in your svelte component I will start with the on directive so on o n and then a colon defines that I will start to Define an event listeners so ons and then I'll pass in the name of the event so over here I say click right so I'm going to copy it and paste it over here so on click and then I just like how you would pass values to a attribute you you do a equal sign and then curly brackets because I want to pass in a function so curly brackets and then I'll pass in the function reference to the function over here and there you have it so if in these events I would I do a console log click you will see that when I click on the hitch one there's console out the click message so that's that's how easy it is to add events listener to elements in your cell components but one thing we didn't cover is that if you have to if you do it this way in your vanilla JavaScript you have to remember to remove the event listener when you no longer need this H1 heading 1. but in svelt if you do on click over here the event listener will be automatically clean up by its weld component if this H1 is no longer in the Dom so one thing it's automatically clean up so you don't have to worry about it at all so uh and then as I mentioned earlier on we can either pass in a function or a inline we can inline a function over here so same thing we can do that in zvelts as well you can come over here and create an inline function so anything within the curly bracket is uh we can write JavaScript in there so click again so I can write an inline function over here and you would expect it to work as well you may be worried about inline functions if you're using other Frameworks because you might be wondering uh would this be creating this function over and over again uh there's no such thing as well about having to running something over again right this function is not if you are not going to change this function this function is not going to be changed then this function will be just defined once and attached to this H1 once and that's it so if you don't believe me come over to the GS output you can take a look over here this function click again is defined over here once and then this is being passed into somehow pass it into this uh uh my uh function right so this function is being declared defined once you you don't Define you if you try to search around there's no law no one is defining this function over and over again I can guarantee that to you so no worries about uh no any performance penalties whether you're using a function or inline functions okay with that settled one thing I want to cover before we end this video is about event modifiers so let me come back with this on click because it's easier for me to do it over here so a lot of times we love to do things like say uh events that prevent defaults right for example if you have a form and then you add onsummit event and you want to prevent default prevent the default behavior of that Summit so that you can make some validation and then cancel the requests things like that you you often come in case where you have to write events of preventive for if you have some events like drag and drop you always needs to do like prevent defaults then one great tip for you you don't have to do it you don't have to like come over here and then for each of the click you have to write it here you can come over here and add event modifiers basically you do this uh pipe and then you pass in a modifier so a prevent default modifier will automatically add the event prevent default for your uh event handler so uh so you can have event prevent default so what else besides that you can have stop propagation so that is application that is also another modifier that does the events.stop propagation for you by default so for example if you have a nested element so for example here I have a parent and then I have a child I can come over here on click and stop propagation and come over here on click on parent you would assume that uh oops so you assume that this will not propagate the events up to the parents to that will not propagate and Bubble Up the events to the parents right so this is uh you write stop propagation is the same thing as coming over here and have events and write event.stop propagation it's the same thing so you can use even modifiers or you write it your own it's up to you so for people who are familiar with ad event listeners you know that the third parameter over here is that you can add some options to the events listener right let me pull up the mdn documentation when you say add event listeners when you scroll down there's options and options you can pass things like uh capture once passive so how do you pass these things to your event listeners because you can't really control it over here right you you have no way to to get involved with the advantages so you use event modifiers as well so for example if you want to have a capture event you want to register event at the capture phase you can write on clicks pipe capture now if you click on uh when you click on a child you see that the parent is on a capture face so parent will be called first before child and once about once you can do that as well you can have a pipe and then once so now the parent will only register once so it was you it will be using these options once uh as as defined over here in the add event listeners same thing with passive so passive is a you have to pass in a Boolean so true or false has different meaning in it right so if you want true you will pass it as passive and you want false you will pass in as nonpassive so it really depends on which one do you want okay and then uh so you can see over here I um I can pipe as many um many event modifiers as I want and the order does not matter I can type in all the event modifiers as I want right so the order does not matter and one last event modifier I want to share with you is self so um if I come over here and say self so this is not in the event listeners over here but what self does is hopefully it's selfexplanatory self means that if your event listeners uh if the events or Target is self only it will trigger right so meaning in your event handler you're checking event.target equals to the current element and if if it's true then you will do something right if it's true then you do something so if I do self then if I come over here and click apparent you'll see that log out parents but if I click on the child then yeah the current the target is the child and it propagates to the parent so it's the target is not the parent so you don't see console log parents when you click on the child so prevent default stop propagation and then we have capture then you have passive and nonpassive you have once and then you have self seven modifiers that you can use if you can't remember all this don't worry you can always find them in the spell.dev docs they will they are all listed over there events modifiers yeah all of them all seven of them are listed over here you can take a read we are going to talk about one big important features in svelt and it's one of those powerful thing that sets vaults apart with everyone else which is the reactive declarations or statements well so what is reactive declarations and statements we shall see but let's start with this example first so over here I've created a component that has accounts variable initialized with one and I have two buttons which has decrements and increments so whenever I click I will increment all decrements the value of counts and at the same time I have these Expressions called counts times two this this uh anything within a curling brackets can be a JavaScript expression so over here I'm going to say counts times two over here so I can see this is always two times of the count so this is okay right uh nothing's wrong with this but what if I have another button over here and uh but I'm gonna call it do something because I'm not sure what I'm gonna do yet because they click me okay and in this function I'm gonna Define this uh okay now I know what I'm gonna do I want to console out the value two times of counts so I probably have to come over here and say counts times two again and so that every time when I click I see the value two times of account is printed in the console so nothing's wrong with this because this example is simple but what if you have a more complicated example where you have a super complex formula over here and you and you want to assess this variable adopt at a lot of places well at that point of time you probably would realize that you can't calculate this on the fly anymore and you want to come here and Define this variable called double so initialize with counts times two so I'm going to show double over here but and then I can use this as well but as soon as you do this you realize that um so at first it's 2 is correct but if you increment it's still two because you got to update this variable double so you come over here and look at all the places that you does you do counts plus plus that you all count minus minus anywhere that you make changes to counts you have to say updates the value of double as well and this does not scale uh it works but this does not scale because what if you have another button uh I'm gonna call uh e scale because it's just not scale all right okay I'm gonna say multi multiply all right so I come over here as a function called multiply and what I have what it does is that it counts equals counts times count always multiply by yourself um so now again uh I need this is our single again because I need to come over here and do double equals counts times two I need to remember to do that every time I change I add a way to updates um count so this is error prone every time your updates counts you need to remember to update double and this is this does not scale so what should we do well this is where reactive declarations comes in so uh this statements itself so a declaration is a type of statement and this statement itself is a declaration statement because over here we actually declare this variable double so reactive declaration is a it's a declaration statement that instead of use called let's double equal something it starts with a label dollar so this dollar label over here um if you if you have so you use a dollar label over here and you write double equals counts times two right so you replace the good old declaration and you with this reactive declaration so what is this dollar label thing well this is actually a label statement um used usually with loops uh for Loops while Loops where you can label a loop and then you can break it right if you have a multiple nested loops and you want to break the loop at the second level right you normally break can only break the nearest level but you want to break like some first level second level or the level of Loops then you have to label them and then you break with the label so this is actually a label and if you know if you know that this is a label which means that actually I need to Define this variable double right uh but then you don't have to you don't have to come over here and let's double right in normal JavaScript you you would have to do this but in results what we do is that we call this reactive declarations and we will inject the lens double for you so you don't have to declare it or you don't have to define it so you write this and then there's this magic of reactive declaration what this does is that it will always execute every time when you call when you change count so which means I can save my time not to do this uh my code is cleaner as well I don't have to come over here and manage the double whenever I change count and you can see this double value changes instantly when I change counts so this this is reactive declaration so let's talk a bit more on this reactive declaration so you've seen like why we need this because every time when you change a variable you have to manually pin stickingly updates a new value that derives from this right so you see the why but let's talk about like how it works in more detail so uh over here the title I say reactive declarations and statements so this does this is not just declarations this can be any statements so any statements that start with a dollar colon will be a reactive statement so I can come over here and say console log count this is again a reactive statement so reactive statement reactive calculations the only difference is that the creation is to declare something and if you declare something means that you don't have to Define let's double yourself right it's being declared together with these statements um and sometimes of course you you uh if you write this it does not uh it is still okay right you can still Define it but the point is you can you can omit it if you want to so um so these two okay reactive declarations and reactive statements and how does that work how do they work how that works is that actually they will actually look at what I call a dependency after statements so what dependency means is that if something so these statements this reactive decorations or statements depends on something and what is that something that something is variables States variables that is um that is being used within this statement itself okay so what are they so for declarations it will always be the all the variables on the right of the equal sign right it depends on these variables to to to update the value of double right so anytime when you see an assignments in a reactive statements on equations the one on the right are the dependencies so this double depends on count right two is not available so for statements you don't have assignments then all any variables that you can see here are the dependencies right so if I say count uh so over here this example will have two the console it depends on console and depends on count over here it depends on count so I prepared some more examples over here let's let's see them so full name first name last name so this is a decoration so all assignments so whatever on the right which is the first name on the last name is the dependent so anytime first name or last name change this whole thing will be evaluated but here for us this case will be a b and c any time A or B or C changes this whole statement will be evaluated but here is num1 num2 and calculate uh because it's still the assignment and over here this is statement so whatever is account if this is the same example so I'm gonna remove this right copy this down over here right over here um do something A and B so anytime any of these changes um you will have to reevaluate these statements right so when we reevaluate say in our previous example we reevaluate meaning we'll re uh re reevalid this which means that we're gonna reassign the new value to the double the variable double so why this is important well this is important because if say for example if you have do something do something A and B but you do something with say console log a b and c you do something at A and B and C um then you have to know that anytime C changes it will not really you will not call this function at all because it only depends on here right so if you define this only do something A and B A or B or do something changes we'll call this function again but anything that is being used over here C is from outside like if you have counts out from here or you come up with a new variable D over here whenever they okay this can't change right but any variables that you refer from this function outside of this function changes uh this will not call meaning it will not call this function right so that is one thing that you need to take note of so second thing that you need to take are notes off is that um when this is being evaluated right one this is being called is important because when this is being inverted depends well decides when this the value of the double being updated so if you come over here and I say console log double uh I'm just gonna add this so that you know that it's double I come over here and you run this and I click increments you'll see that this value always lags behind of what what it shows in fact this is actually the previous value that you see right if I click scale you see that this uh wait now it's 18 when I click it shows 18. this is the previous value you have an update double right you tell me that whenever you change you will you will update this value of double yes but not immediately it's not immediately it's asynchronous it's asynchronous it's it does not happens immediately but it happens right right before svelt update the Dom right before right so uh right before it Updates this double over here the the it evaluates this okay it gets a new value of double now it's 20 and then it shows on the screen but over here it's not yet not there yet so when you come over here you change counts see that the double uh the value of double is still the old value so this is important because uh spell can't go all everywhere else whenever you change counter and then increment a double immediately uh there's a lot of work so it only happens right right before this is felt updates are done so this note number two that you need to take note of then uh the third thing that I want to talk about is the order of um the reactive statements right so I can come over here um I can come over here and then do something like uh console log double so let's let's practice what this statement depends on depends on Console depends on double right so anytime console a double changes uh this statement will be reevaluated so uh you expect that double uh so so over here every time doubles changes your this all right so you expect this will shows the latest value of double well in fact it does right so now it's four you reevaluate this right before it updates the Dom okay uh double is now four and then you console log four but what happens if you write this right before the when you evaluate double or if you write it right before uh civil actually will reorders it for you so what it means is that spell actually will look through all the reactive statements and reorder them reorder them based on the dependency order so uh in this case double depends on counts right this statement says double depends on count this statement says it depends on double right nothing not it does not create anything but it depends on double and if I come over here and have another variable say quadruple uh equals to double times two so this quadruple depends on double so you would expect that a okay you can't see quadruple okay let me let me show it here quadruple right so um whoops yes quadruple is written before the double equals to count times 2 but the dependency has order itself so you have to reorder as well not you have to but as well will reorder this for you we'll say Okay doubles depends on count so this but then quadruple depends on double so this has to come after all right and then this console depends on double so this has to come after so if you have cases like this you have cases where two things that depends on double then the initial ordering does matter right the order does matter is just that if there but then if there's dependency other than that counts in priority higher priority than your initial ordering so for example if I come over here console log uh double two equals to double right these two statements both this step both the both of these two statements depends on double but the initial order does matter so if you write double two first then C double two and double but if you come if you reorder this reshuffle come over here you'll see double first before double two right the order does matter but if the dependency but the dependency order comes first so that is notes number three the dependency uh the order of reactivity reactor the order of your reactive statement will be reordered based on the dependency order um so hopefully this uh these three notes the dependency order and then the what is the dependency and the sorry let me let me and then they will be evaluated since asynchronously these three things if you remember it carefully you will you can avoid a lot of a lot of pitfalls involved with reactive statements or declarations uh lastly a few other things that probably you also need to take note of is that reactive decorations or statements only happens at the top level so only here if you come over here and they find something like this uh double equals counts plus two or something it has no effect outside of the top level it already shows you this warning right so yeah that is something else a small thing that you need to take note of to talk about reactivity as well as we talk about reactive declarations and statements and I think it's time for us to talk about the tick function so what is Tick well tick is a builtin function from zwelt that returns a promise and This Promise will be resolved when the update is finished right right after as soon as any updates any pending updates that is already applied to the Dom then the tick the promise returns from a tick function will be resolved um enough with this definition let's take a look exactly what it is so over here I've prepared an example over here you can see that this is what we left off from the reactive declarations uh video If you haven't watched that links in the description so over here we talk about uh if you remember I talk about reactive declarations are evaluated asynchronously they are evaluated right before as well applied the changes to the Dom right right before so over here if you have an increment uh so it right over here you have a double reactive double that is always two types of counts but in this function increments when you increments count double is not this statement is not evaluated immediately right so over here if you console out double you will still get the old value so if I click over here you can still see that it's it's showing four but it's already updated to 6. so how do we make sure if we really want to get the uh the value of double uh to be the latest value what should we do over here well we talk about tick function right so obviously we're going to use the tick so you're going to import tick from sveld and tick is a function that returns a promise so you can use dot then when the promise resolved and when it resolves which means that all the changes that's going to be made uh will has already been applied to the Dom meaning Dom changes has been applied meaning this double has been already updated to the latest value right this this statement will be evaluated right before you apply a changer so when changes has already applied definitely double is already two times of the latest variable account so come over here and I move this double in all right so this I'm gonna say after a tick and just for comparison I will come over here and say before tick so let me click on the button you can see that before tickle gets to because uh this is a synchronously and then at and then when swell decides to update because there's a changes value decides to updates the Dom and you evaluate this double and then you apply all the changes you see two times two equals to four on the screen and then this promise returns from tick will be resolved which you can then console this value out so this although it look it seems that it's coming right after another but it's actually a run a little bit longer than that right so if I come over here if I say uh if you're familiar with asynchronous and synchronous you should know that this happens asynchronously so it's way after even if I have put before here you should see that before comes uh comes way earlier before the aftertick so um this so tick function it's it returns a promise and a lot sometimes I I I don't really like to use the then this is just my personal preference sometimes I like to change the function to be a asynchronous function so that I can await the tick so I come over here and with the tick and then console console this out over here so this this is a Sim this is the same behavior as what we've seen before instead of um it's just that I can use async awaits so that um it's less nested I would say like I because I don't have to do the Callback function in the dot dance it feels like it's nested in I since it's one straight line I can I can wait for this promise to resolve and then do my thing over here so it's the same thing it's just my personal preference of writing it so what are the use cases of this tick function well I prepared another example that um you can use this tick function as well so I'm going to import this component called input dot spelled so let me come comment out everything and just show the inputs so this input I uh we've learned how you can add event business right so I add an input event listeners so every time when something has changed I will update the value to be whatever the value of the input to uppercase so right now I have my so just to show that show the effect I comment all the two uppercase when I type anything the value will this the value because we're passing in the value in so the value will be whatever I'm typing in right so I don't have my caps lock on uh but I when I type something you see that it will automatically converts to uppercase because the two uppercase will convert the value and then you get the uppercase value of the value and you pass it in and then you update the input however this way of updating the value of the input because the input the value of the input originally is lowercase and then you you change you assign it to a value and then you've you have to use this variable value to assign the input value right you're calling uh internally it's calling input of value to this new value that we evaluated and this value is not the same as whatever it's internally in the input so what happens is that it will clear whatever state you have within the input uh it's a bit I'm not sure I will describe it well enough but what what it means is that if I come over here I type something and I try to highlight something and when I try to highlight something there's an internal state of this input so if at this point of time I try to change the input value programmatically right if I do don't do anything and I change the value programmatically um we'll lose the state you will create all the text and then replace with the new text and what happens is that right now if I manually type some uh let's let's come over here I have a button right just to demonstrate this on click if I come over here and say value equals to XXX all right so I type something I highlight something and as soon as I click oh okay I think we need to set some time out over here then I want to make sure that we are still in focus of the input so when I click I have uh five sec three seconds before it's being triggered all right so I try to type something highlight something okay I can highlight something and as you see when the value updated the cursor will shift all the way to the right right because you change every you change the text right there's no way to restore the cursor position it so even if you come over here and you do something like uh value equals to Value 2 uppercase because just now we change it to xXx right definitely there's no way to restore the cursor but if you come over here type something all lower caps and highlight something and then I change everything to uppercase you see that my cursor jumps all the way to the back so that that's annoying actually if you if you don't if you haven't realized it yet that this is actually very annoying especially when you implement this updating the value within a input Handler meaning if you come over here you try and type something and I highlight something and I suppose to press on Q right now uh it jumps all the way to the back and I type Q again you'll see that it it it's typing at the end of it instead of like it where my cursor was supposed to be so how should I solve this well I can save the selection start and end of where the I can get the selection start and end from the input so I can come over here and say let's selection start go to this input.selection start and get the end of as well and one once I change this value I want to restore the selection right input a selection starts equals to selection start so once I update I want to restore it so let's try and see so if I type okay right now I'm going to type Q I'm going to press q q but it still jumps all the way to the back well at this point of time you probably should realize that yes uh you change the value but then the updates happens far later on right asynchronously as as we have this scene if you want to have a reactive statements and you console out immediately it does not update similarly because you haven't updated the Dom so any changes right now happening right now uh the Dom hasn't updated yet so we haven't really actually called input.value Equals value internally within swelt yet so the only way to wait for it to happen before we restore back the selection is to use tick so we come over here import tick and I'm gonna come over here and I want to wait for the tick so I can't use a weight unless I make my function async so come over async function and wait for the tick so wait for it to update the thumb so internally this will be called to update of down value and then we restore the input selection and start and end so let's see how what's the end result of this right so I'm going to type ASDF ASDF okay okay I think I'm gonna type A so that it's more obvious I'm going to highlight this 3A I'm gonna press Q right now Q you see the cursor is still maintained at where I was and press q q and that it is that is what we are achieving so tick allows you to wait for Dom updates to be applied so it returns a promise so that when this promise resolved all the Dom updates has been applied and then you can do something with it so you can um check any value of the relatively declared variables or you can make some changes to the Dom or you get any updated value of the Dom right you can probably instead of getting selection of the inputs you can maybe right before you make changes check the scroll position of your elements and then you add new items updates and wait for that update to happen without all the updates to finish before you say restore the scroll position or something like that right so tick will be very useful in that sense I'm going to talk about components and props you probably have seen me done this you have seen me adding a component into another's wealth components and I promised you back then that I would make another video to talk about this in more detail so the time is now I'm going to talk about components in more detail so here I have a component called app.velt and I have another component called component of sprouts bad naming but bear with me so here um to use these components what I do is I need to import from this file right this Rebel allows us to create multiple this attempts and this is actually multiple files in your file system if you are developing locally so each of them are named dot swelt so you have to import it to use in your components so you can come here and say Imports component from component that is welt svelte so uh one thing to take note is that you're importing from a default export so this is one key thing about uh file is that your component itself will be a class and then it will be an export default so you import it from export from the default exports and to use it you use it like any other elements you're getting buckets and there's a component so a different one thing to differentiate between what is a component and what is an element because you could write something like this and how does felt knows that what whether this is a component or an element so the differentiator is that component starts with a capital letter and element starts with a lowercase letter uh so I I believe this is quite uh prevalent in other Frameworks as well anything that starts with a capital letter is always a component anything that starts with a lowercase will be a elements so this is how I use my components and I'm not sure you're paying attention to me speaking or you actually are looking at the screen because at the screen right now you already see a component right this is the components that I've written over here if I change it uh say hello hello then yeah you can see that over here reflected over here this is the components I can create multiple components if I want they will be created this way and there's no limit in um your components where how many top levels elements right there's no such thing right you can have multiple divs as you want come over here I have like two divs three divs okay I think I don't think we can see a difference let's say one two and three you can have men as many divs as many top level elements in one component as you want there's no limit at all what's what's the point right so here you have components four components and create this then having a components you know uh element in your component having a nested components in your components is not that fun at all if you just show like content that it has right you can have Logics in your component itself but what's great about what's what's more interesting is what if you can pass the data from I would call this the parent components to the child components right I call this a parent and this component is a child because parents bear a child right so any anything that is used inside is called considered a child component by this current component which is called a parent so you can pass data from parent to the child how pass it by what I we called it a props so same thing as how you will pass things uh attributes to elements you can pass attributes to components and we call it props right we don't call it attribute to call it props so you can pass something like over here I have name right so I can pass name to the component as props and same thing that you need to remember as well is that same as how you can write attribute shorthand you can have shorthand for props as well so this and this are the same if the if the attribute name and the value variable name is the same you can do it this way so how do I receive it within the child component well um of course probably I have something like a variable right I need to receive it into a variable and how do I make this variable a props well you use exports so use export let's name then this way um this way what you define is this name is the props so you have to follow exactly the name itself right if you come over here and say Nami then this is not the props that you're passing in you're passing in something else so you can only part you need to make sure that this name and this is the same okay and once I do that I can come over here and use it right I'm gonna say component uh I'm gonna put it a div so that you can see clearly right so as a div components and a name so I pass wool for the first two cases and over here I didn't pass it because I call it Nami Nami something else I don't know what it is and this I didn't pass anything so I get undefined as well right it does not have to be a a variable you can pass it with like a string right this sorry this works as well so what if the case that you didn't pass but you want to have a default value so anytime when you don't pass something but I want to show a default value what do I do well it's like defining a variable like right now you are defining a variable what do you do to provide default value for the variable before you do some changes well you said something right so you come over here and say uh default uh say svelt is amazing then this will be the default value and as you can see over here uh the last component does not pass in anything that's not pass in name then the name will have the default value which is spelled is amazing it is amazing it isn't if it feels amazing click like on the video so we've seen how you can create props you can have default value of the props and one thing I want to show you is a lot of times we are lazy uh we are lazy so we like to do things lazily so what if I have over here is this component I have two props like spot let name and then export let email so can I have default email address as well blah.com and because I say email right and I'm lazy in a sense where uh what if I have an object that has name uh little and email .com this is this is not a real email don't email me to this address so what if you have this object and you want to um add it to your components you would have to basically come over here and say object.name equals to object dot email right this is this is what you have learned so far this is what you have to do but humans are lazy and lazy humans come up with lazy ways to work around things um if you imagine if you remember uh cases where you if you have no object and you want to copy some of the properties to a Target object you can spread the values the properties of the object over right so if I have a Target and I want to copy all everything from here I can do a spread all right so same thing goes same idea goes I can come over here and copy this because I'm going to prove it it's the same thing I can come copy this and I'm gonna paste it in over here so this spreads the object into the props and as you can see uh let me comment this out this is the ones that we already spread the objects into the props and so it has name and email so it's spread and you get name and email over here of course you don't I think this is a bit ugly to me it's hurting my eyes usually I write it within just one line so that it looks concise and compact so I can come over here and write this you can spread props so what we have learned so far components Imports components default exports you write props how do you create props exports syntax allows you to create props and then default props as long as you provide Define the problems with a value that is the default value if the props is not passed in and we have seen how we can be lazy spread the props into the components using this syntax where you spread like an object right like how you spread an object you come over here and do the same thing three dots and it's spread it so we have learned about how we can use Elements by passing in attributes as well as how to add event listeners to elements and in the last video we learned about components we learned about components can be used almost as the same way as elements and you can pass in props almost as the same way as you can pass in attributes to the elements so can an component attach any event listeners well we'll take a look in this video so over here I prepared an example I've created a component called profile uh and I pass in props just like how a processing attributes I pass in props I have a name called Lee how which is me and then I have a status which is a status that I'm currently learning svelte okay so in my components I declared two props name and Status that's how I pass that in and I also have this button called uh skill points it's a local state skill point and I have um buttons that I can increment or decrement my skill points so if I click you can see my skill point is increasing or decreasing not quite sure what to do with the skill points yet but uh that that is how this component works so if I want to know when my skill point has changed what should I do if I want to know my skill point whether my when my skill point has changed from this parent component from the app.spel what should I do well um one way is I can firstly I of course I need a callback function so that I can do something when that change so I can define a on skill point change and hopefully this is some sort of event right maybe like skill points the new skill point and why I need to what I want to do over here is just to console it out so that you can see that it's it's being called so I'm gonna say on skill point change and then my new skill points so how do I pass this function into my components well you can pass a anything through the attribute through the props so it could be a string it could be numbers and it could be functions as well no one says that you can't pass in a function as a props so you can come over here and say maybe on skill point change and pass in my props and because this the props name and the variable name is the same I can actually use this prop shorthand or the attribute shorthand so of course I need to do Define these props or else I can't receive it so I'm going to find this on skill point change and I need to use it as well I need to come over here and call this with the updated skill point value so come here and say skill point and I need to do it for my skill point over here as well okay looks good so uh let's come over here and take a look at the console so if I change something you can see that this function is being called right that that's good because if you take a look at this you say okay this has to be called every time skill point uh exchange actually we can use a reactive statements right no one says you can't do that so I can come over here and say uh on skill point change skill point so this statement let's take a look what when will this be called whenever on skill point has changed or whenever skill point has changed exactly what we want so we can come over here click click click click you can see that this is being logged out whenever any of it has changed okay so far so good yep but what if I come over here okay I'm not sure whether you like the butts but but is how I segue into uh what I want to share next so if I come over here I have another profile um call me again and learning component events okay but this time now for this profile I don't want to know about when the skill points change right I can know and I can just don't care about it right um not all the events I want not everything I want to know right so for this case I don't want to know but then because we kind of assumed that on skill point change is a function because we call it no matter what then uh that that is a problem to us and we kind of have to so the way to work around this is we have to check uh if type of is a function then we call this right so so there's actually there's two ways uh I jump the gun too fast but actually there's two ways to work around this right first is every time we want to call this on skew Point change you check whether it's a function if it's a function then you call it another way that uh you if you assume that it's either always a function or it's just that not being passed in then you can have a default function over here default value for onscrew Point change right so if it's not passing then it's always this fallback function and if it's defined then yeah you can call so if you know that it's either passing and always be a function or not passed in then you can do it this way so two ways that you can do right every time when you call you check if it's a function or secondly it's you provide default a fallback function so that if it's not provided you can you can still call it you you can still you it's fall back to a function so it can always trust that it's always a function um yeah so nothing wrong about this but as you can see we kind of couple strongly about assumptions of skill points change has to be a function right or else we have to provide a fallback function um but if you take a look at um buttons and all the Dom elements you have usually it's it's very common that uh the function the events itself is optional right it's not all buttons you have to listen to on click on or not all inputs you have to listen to on input on change on anything right so it's very common that you listen to events only you I when only you are interested in so that should be the same case as a events from uh components right it shouldn't be like this where you you have to always assume that within the function a component itself always assume that it's always there and you can always call it as a function you should it's it's more of the other case where you should assume that any events that you're going to come out uh it should be optional to be received on the other end so I would kind of prefer if you check whether this is being defined and only then you call it um of course there's an even better way to do it which is to use a component event so let's take a look at how you can uh dispersion component event so before we dive into how we can take a look at how it should be written instead from from the outside right instead of passing it as a function right it should be more like an event listener so instead which we can listen to events so I'm going to come on event and pass in the name of the event so I can come up with any name but now I'm going to call it as a skill point change as the name of the event and I can pass in this function instead right this is to handle when this event has it's been this patch it's over here I'm not going to listen to so I'm not passing it in and here I can so it's it's an optional thing right when whenever you do this you know that it's kind of an optional it's like event listeners for your elements so how do I make my component to able to dispatch this event I can come over here and I need something called uh event dispatcher so I'm going to come here and I'm import create event dispatcher oops and this uh this is a function that creates the event dispatcher so let me call this function so this function itself the create event dispatcher has to be called during a component initialization meaning it has to be called at the top level when we uh so this all these are going to be called during the component initialization right so you have to call it at the top level you can't create event dispatcher within say within a function right that does not work we're trying to call it here and you try to decrement you'll see that your through an error it says that function called outside component initialization well why is this so well this is because uh when I call when during component initialization svelt's uh knows that okay I want to initialize this component this instance of this component so I it turns it's it's remember okay this is the component I'm setting up and then Whenever I Call this function so this function itself uh you import directly from spell right so this function itself has uh itself kind of like stateless but at the same time it's it's when you call this it will reach your asphalt hey what is the component that you are currently initialization initializing right when because this function is not coming from anywhere within this component right it's not some some function that pass it in so the this function within this function itself has asked well okay what is the component you are initialization in initializing and then you know okay this function okay I'm gonna register I'm gonna get something from this component right so you get the dispatch function you get what is the component that was initializing at that point of time so you get this dispatch function and then you can dispatch events so dispatch events is like how you would dispatch an event on your elements right element can dispatch an event so so that anyone from outside can listen to it so get this dispatch function and I'm come over here so whenever skill points change I want to dispatch a new event so there's two parameters first is the um first is the the name of the event so I come over here I I kind of assume that I'm gonna listen to this event called skill point change right so I copy this and I'm gonna paste this in so this is the name of the event and then uh Skip and then the next thing is the I'm going to pass the data whatever I'm gonna call with uh with the events so uh okay so I don't need this on skill point change anymore and then remove this so let's take a look over here over here when I change something okay you can't see it because this is no longer the new skill point if uh because okay so if you inspect this you could see that this is actually the event right and uh okay I think as always I told you don't take my word for it so you should always inspect element and take a look so go to combo console and clear everything and I'm gonna click over here you see that this is a custom event an event has this property called detail and detail is the data that we pass along with this event so I'm gonna close this and I'm gonna say events.detail which is the data that I pass in from here so this is the event detail you can pass in anything I can pass in a string a number an object an array and anything that you can think of so events are detail over here and now if I decrement you can see that it still works you can have on skill point change and print out the skill point right the current skill points so this is a way that you can't dispatch an event from a component by creating event dispatcher and then dispatch the event and as you can see how we work through then and decides that okay we need to use an event dispatcher is realize that this way when we do it this way it kind of decouples uh from the user perspective the user of this component versus the internal of the components right you right now it decouples where you don't assume that this event is always being listened by the user it's not always being passed in you don't have to always pass in a function we can always dispatch an event and anyone can listen or not it's optional right so you see that both we can click on both both components skill points we can change the both skill points but it does not throw an error if I'm not listening to it it's optional so it's some at some sense it's it's being decoupled already whether you're listening or you are dispatching it's it's the couple so that's why we and so to use this events listener you add event listener as the same way as adding event listeners to your elements add on skill point change uh you pass in a function just like how you would and you can pass in data for your event so this will be the data if you don't pass anything it will be undefined don't take my word for it it should be undefined in the event the detail and let's see oh wait what okay so right now if you look at this statement this patch uh what what are the dependence right the dispatch all the skill points uh this is a string so this if this change will so right now if I change skill point it will not reevaluate these statements so uh one workaround is I can add I can call this skill point and then comma so that this whole statement will be evaluated when skill point or dispatch has changed so if I come over here and then you can see that right now it's okay that's why I told you not to take my word for it it's now instead of undefined if you don't pass anything it's now all right so you your event or detail will be now um and if I change it back now you will see that uh it's it's it's the value again so that's that's how you create uh events for your components in the last video we talked about component events and in this video we are still going to talk about component events because there's one thing that I didn't mention about in the last video uh which is I feel it's important and you should know about about component events which is about event bubbling so event bubbling it's it's not a concept in com it's a concept in elements events so if you have a element like this over here as you can see when I click on any of the buttons element button one or two and the events will bubble up to the parent so if I even if I click on the buttons and I don't uh the events will be bubble up meaning uh any of the parents that listen to the event should be able to uh listen it should be able to trigger the events Handler even it's uh even if it's on a parent level right so this button when I click um if it has an event listeners it will be handled and then it will bubble up if it's not if it's not prevent uh propagation then it will propagate up right it will go to the parents which is this div and then go to this parent and then in this parent you have the event business uh registered you you are listening to on click so the on element button click event listener will be triggered and therefore you can console out the value of course it's still the target the events Target the the elements that is this uh The Click is on is this two buttons so if I um check the data set dot value which is the data value attribute over here I can get button one or two right so if I click on the element button one or button two you can see that this is being triggered and you can get button one or button two so this is uh events bubbling in Dom elements but what about components if I have an app I have this parent component um listening to this component button click right so if I look into parents I have another component called child looking at child I have another component called grandchild and in the grandchild I have another component which is okay no it does not have so it has two buttons same two buttons I have button one and button two uh wait hold on button two does not have one click let me add it in so button one and button two have two on click event listeners and over here I am dispatching component events I I use create event dispension to create a dispatch and I dispatch component button click event and I pass in the events uh I pass in data like pattern one and button two so that the component uh when I listens to it I can get event or detail and will access the button one or button two so will this event when I click wallet bubble up to the parent which is this child component to its parent which is this parent component and then to its parents again which is this app.component and receives it from here and the name is the same and then you get handle over this on component button click callback function Handler functions does it will it work well let's see let's click well it does not work okay that that's why we make this video because I'm going to tell you how you can make it work so um so first and foremost I have to tell you unfortunately component events does not bubble meaning it does not go one left it does not go through all its parents and then bubble up all the way to this app.spel right it does not bubble all the way to this uh parent component over here so what I can do instead is a workaround sadly it's a workaround so I have to come over here on ciao I have um I'm dispatching an event from this grandchild right so I can definitely listen to this event called a component button click I can listen to this so I can handle it over here and come over here and create this event so if I come up here and I say in ciao does felt and take a look at event dot detail hopefully this works if I click yes you can still see button one button two right so if I once to Bubble Up to the parents like bubble it does not bubble right so if I want my parents which is in this parent that's felt to able to listen to this event I'll have to dispatch this event myself so I have to come over here Imports create event dispatcher whoops and I am going to create this dispatch function oops and then I'm going to dispatch this event okay so I'm going to dispatch I'm going to use the same name so that the parent can listen to the same name as well and I can come over here and pass in the same data which is the event or detail all right so we're going to come over here paste it in uh comment okay I can still leave it in so with this in place I can come over here to my parents and listen to it I can listen to this component button click event console in parent dot spell and events.dto right let's see so I click yes my child receives it and then I dispatch the same it's not the same event per se but I dispatches another a new event with the same events name and the same data so that in the parents I can register I can listen to that event I can log out uh the data as well so I get the same data so in order for my app.velt over here to listen to it I need to do the same dance again I need to come over here copy this paste this in I have this patch come over here the scratch the same event so I'm going to dispatch the same events name which is component button click so that in amp does felt I can listen to it alright so the moment of truth let's click the buttons and now you see on component button click logs out the data right finally after passing one by one it's it's like running a relay marathon where you relay this you relate the events from the grandchild to the child to the parent and then all the way to the eye dots felt so if you look up this on this Felts website or documentation it's called event forwarding you have forward the event from one place to and to the parents all the way to the its parents to its parents and and therefore you you achieve this event bubbling effect that you would get it normally in a Dom elements of course this is uh this is this is a lot of keystrokes to type so uh sveld comes up with a shorthand right everything that is annoying a lot of keystrokes we have short hands for it so if you are listening to this event and you are going to dispatch the same event right your dispatching the same event you can come over here and just do this instead so you can remove all this and there you go so you click still works right you still dispatch all the way so you you listen to the events and dispatch the parents and the uh like forward it right so it's the same uh thing that we've written so far except that so so let me keep this I commented out so that you can compare so previously is you have to register your own event listeners and you do a special own now you forward it by just doing this so I click again everything works you forward all the way to its uh parent so there you have it event forwarding shorthand and this shorthand actually does not just apply to component uh to show you that this actually applies to elements as well so if I come over here and I will do this then this is actually the same shorthand of um having adding a on a shorthand of so previously we were doing okay let me let me copy this and so that we can comment it out all right so previously we were adding event listeners to on click one and then dispatch this event so if you do this then this is the same as dispatching the same the event of the same name right of this name so this is the same as doing this uh on on click on the button so you can listen to so we if we want to fold all the way to the to the top we do this come copy this forward it up and then come over here those felt and let's listen to this so I'm gonna whoops what's going on so I have my inline event handlers okay it's a bit hard to read so I'm just tap in so I have my invent inline event handlers and I'm gonna come over here and console log on click in at dots felt and I have yeah and there you go and let's click on the click me too right on button on component button click and click me one which is on click in app.spel so we you can use this shorthand on elements as well on element um on element events as well Dom events as well uh it will be the same as how writing this right so this code over here it's not evaluated we are not passing on click one to anywhere right so this is just to demonstrate that if you write this in state and dispatch click then it will be exactly the same as using on colon click shorthand so when would you use this on Dom elements well usually if you create a component that is kind of like a button and you uh button with a different styles or you come up with an inputs but input with a different styles or different behaviors small Logics and you want to Bubble Up the Dom events to the parent as well so that if I come over here have a custom button and I kept my button over here as I say a custom button and I want to forward this Dom event on click Dom event to the parent as well so that I can import custom event a custom button and listen to click event then I can do this right this will save me time of having to register event listeners and then manually create event dispatcher and dispatch the same uh create an event of the same name so today I'm going to talk about installing your elements with class wait I thought we learned about this before right in this example you we we talk about how you can add a class and then you can add a class selector in your Styles and then boom you apply the styles to elements right what else to learn about well that's right have you learned about a conditional class well that's not that hard either right um if you come over here if I have class over here I have a profit where if a profit is negative I'm going to apply a negative class if it's positive I can apply a positive class so a class attribute is is a you can pass in a string and within string within this string you can have curly bracket so anything within color brackets is you can pass in any JavaScript expression so I can come over here um I'll check whether the profit is next time zero then apply a negative class uh if it's greater than zero I use positive class um yeah that that's that's it is there anything else you want to show me well it is can you make this more concise well of course there's a little way to write this uh you can okay so if it's profit less than zero I use negative and I can combine these two expressions together um is that what we are looking for so it's like this then I can be like this uh right yeah can you make it more concise and easy to read well yes kind of uh maybe I can come over here I can define a class or so class so this is a profit class and I can use I can apply this over here and then I can add this as the string to my yeah to my class so that I can change whatever string it is is that it's well well we've seen a lot of different ways of writing right so there's no a perfect way of writing but today I'm going to share with you one thing one tips which is to use a class directive yes class itself can be attractive as well so if I come over here uh let me undo a bit and if I come over here I've written this a class let me back it up even more I I have these two conditions over here and you can immediately see that negative class should be applied when profit is less than zero and there's a nice way to write this to express this um in using a class directive so same thing I same thing as what we have over here I'm gonna copy this first I'm gonna use a class directive so as a directive is anything with a colon right so I write class and then a colon and I can pass in the name of the class so the name of the class is called the negative and it passing a condition for this so I can come over here and write a profit Less Than Zero so this thing this whole thing class colon negative equals to profit less than zero it's the same way of writing expressing this but I find this is more ex is more expressive it is it expressed more to me where it says that uh if this Cloud uh negative class apply based on this condition rather than you have a ternary Expressions that tries to return a string from your JavaScript expressions and we kind of have to figure out like what that string is by reading this and we figure that oh it's either a positive string or an empty string and and then what is the condition and I find that reading this this writing it this way is is much more readable I'm gonna come come over here and convert this to class positive with the condition for the class positive as well so I can write it this way now so I have class negative profit less than zero and plus positive plus relation one so let's try it still works I always try don't take my word from it always try whether it works or not okay so I have one more thing for you to try as everything goes where we like to have shorthand class directive also has its own shorthand and I hopefully you can guess what it is it's basically it's like this uh if you're if this condition so this condition can be any JavaScript Expressions right what if this condition is a is a variable if I write negative over here as a variable and I declare a negative as a relatively declared variable so this the value of negative always change when whenever I change the profit um then I would end up writing this right class color negative equals negative and since this class name and the variable name the condition variable name is the same I can omit this I can write this so class colon negative it's equals to let me copy the previous one and then comment it out so that you can do a comparison you want okay paste it over here so this is equal to this is the same thing so let's try it out right it works so if you have a same condition name as a class name then you can do this shorthand and there you go a class directive hopefully it adds a new way for you to specify what's the class of the elements um instead of just having to concat strings to form your class names so hopefully you learned something new and I like to see you applying this in your in your swell components we are going to talk about bindings what is binding well we shall see let's take a look at one example that I prepared for you so over here we have an input and and a variable called value so this is a state where we can change the value of the value variable and we show that value variable on the screen over here so we add input events on the input so that we know whenever we type something like this we this will be called and then we update the value of the value so this will pass this value into your into the input itself so that it's updated and also it will show it on over here on the screen so every time when you want to add event listeners from an input and then uh update a value of a variable and then if you want to somehow change the value and then get it reflected onto the input so when I say we get it reflected is what if I over here I have a button and whenever I click on the button uh I want to change the value to see ASDF right so I can type over here every time I hope come over here I change the valuable available valuable variable call Value and get it reflected and I can do the other way around which is I click click me after the value of the verb the variable of the the value of the variable value and then get it reflected on the input so I click you see it's updated to ASDF instead so there's two ways of updating this variable value one from the input events or two is by just changing it directly and this is this is very common pattern that you would come out to control your inputs and so so that's so uh svelt comes up with a um directive that handles this so that you don't have to come over here Define the event listeners Define a variable uh I mean you have to Define a variable but like you you can save time typing all this and just do this one thing instead which is bind that bind directive that's why the title of this video bindings bind and then I need to bind what I'm going to bind um the value of the input right so inputs.value is the value of the input we over here we read this value from here in this event and then we pass this value in in this variable so uh so this two way we we want to read and write also right so we want the value property of this input and bind with what we're going to bind it with a variable call Value so I'm going to copy this variable and pass it in here so I can remove all this at once so this and this is the same binding is to re receive an event listeners to uh get the value of this input and assign it to this variable call Value and also this is also doing this where whenever the value of the variable value has changed we're going to update the value property of this input it's it's it's a bit mouthful so let's let's try to change this I'm going to call this a full instead so that it's it's so that you can differentiate where this is right okay come over here up here all right so inputs you read a property called value okay you can do this now a real political value and then over here you want into full and then you want to set full into the value the property called value it's the same this is the property name this is a value you read it to the variable called Foo and if you've changed full we want to update it back to the property called value so I come over here I can type as you can see uh this is this okay I I should comment this out so only have this by input that has bind so when I type it will get the value of the input so this is no longer in use right just just so you know a type of value of the input value of the input comes to variable called full and so you see full reflected over here and if I click okay let me type more and I click on this button I change the value of full it should update so this full variable should update the property called value so there you go so binding we bind a variable a property called value to the variable called full and it works two ways it's a twoway data binding changing in the property will update a variable changing the variable will update the property and and if your variable instead of calling it full you call it value instead let's come back value value call it value instead then you can have a shorthand right the property and a variable name is the same then you can wow omits the whole thing so this and the above is the same right so I'm going to change this so that you you have a clear value so this and this is the input bind value equals value and bind value is exactly the same so let's type and see a change and you change okay and you click on you update variable called value it will update it backed to your elements a property of the element so there you go binding on elements can't you do binding with components well yes you can as well you can imagine uh instead of attribute instead of the attribute of the elements you can change on the property of the component the props of the component and so I have a component called components I'm going to impart this over here and in this component I am going to use it over here and comment out everything that I'm not in use so this component has a a counter called count and I have a button that just increments discount value so to to listen to uh discount changes we we maybe we can add event listeners and then uh so that I can update a variable over here so I can come over here have a variable called count and I can uh to count equals count okay so this is a shot I can do a shorthand Chronicles count uh I can have a button that changed this value whoops because 999 so I can have a button that updates account value and whenever I change okay I need to also have a event right so I come over here this patch count change foreign Imports create event dispatcher from sveld and create event dispatcher so every time counts change I'll dispatch discount change event come over here uh on wait wait it should be on a component on count change uh whoops I receive an event let me get it to a new line so that you can really carefully clear right on count change you have events and the count will equal to event dot detail so over here you guys do think whenever we change inside oh click me uh increments I'm gonna name it differently so if every time when you increment um this will be called this event will be called and I need to come over here and show you that this value is updated so every time it's called I will get the latest value of the count and it will be reflected on the screen over here right and anytime and and when I click on this button I want to update this value count to 999 so when I click this it'll be 999 and this value will be passed in so this count will be updated right so if I increments yeah and you get received over here so can so it's it's kind of the same as your inputs where you events happening you update the value and if the value changes you update the property of the attributes of the elements so I can do the binding for any props in fact any props so this props is called count so I can come over here and bind bind count to count second comment okay so this whoops let me comment this and just leave this for you so buying counts to count is again exactly the same as distance to events of the variable accounts and whenever count change update the props call count right so this is the same as above so I try over here you see it's the same the same behavior and in fact since this variable and the this property of the component is the same as the variable that we're going to assign to we can use the binding shorthand and just write this increment and click me increments click me so here you go bindings for elements as well as components today we're going to talk about bindings wait we talk about bindings but there's a lot of examples a lot of things that you can cover about bindings and I'm not going to cover all them to be honest you should learn yourself and I'm going to show you where you can read about them so over here I am at this result tutorials so as well prepares as well and the main official docs it prepared a very amazing tutorials step by step you can come over here to start from the day ones both of the things we have covered um and what I'm going to show you now is you come over here and you look for bindings and you see text inputs this is where it starts and from this drop down you probably have seen that you probably will see that there's a lot of things that you can do bindings with right text inputs numeric inputs check box uh group inputs text in text area select content edible editable media Dimension this components a lot a lot of them some of them I'll cover for example component bindings and like text input element bindings I have covered some of them but some of them I would not cover you can explore yourself so I'm going to show you how you can explore yourself so you choose one of it say I'm going to come over here in numeric inputs and it will show you that it will tell you things that you need to know about for example if you have a numeric input then you set type equals number or type equals range then you will mix it make it into a numeric input which means that the value will become a number before assign it to a variable um so buying value takes that for you so um it will show you for example uh in this example over here uh some example that has prepared but I believe we don't have bindings here and if you click show me you replace the code with bindings and then you see that uh everything works now so you can compare the before and after you can reset and show me to compare yourself quickly toggle and see what's the difference and then play with it right change this this is a ripple the Sim Ripple that I've been using all the while so you can play around and learn about it so today I want to cover is group inputs because I find that it's slightly um different uh it needs more explanation hopefully you are smart enough you don't need my explanation but I believe uh maybe with my explanation or maybe some people might need it maybe with my explanation you make it clearer all right hope I do that for you if you feel that I have make it very clear comes up comments share this video out to everyone else right so um I'm gonna come over here with a rebel that I have prepared uh so one is group inputs right so group inputs um it's actually mean it actually means that you can bind a group of inputs with a binding group so this binding is called buying group and what you do is you can bind two kinds of inputs with this only two kinds it's either a radio button or a check box button all right so review button is one that you usually see with a circle where you have to choose single option and check box is usually uh when you see there's a square boxes where you check and uncheck you can have multiple choices so what this uh buying group is does is that instead of making your own group of checkbox by setting them the same name you should set them the same name but um besides just setting the same name what else you can do to say collect all the values from this inputs together and assign it to a variable what you can do with is you use a verb you use bind group so say for example if I come over here I have already three check boxes uh value one two and three uh what you usually do is you okay I should remove this sorry let me remove this first what you usually do is you should come over here and name it uh say Foo all right sorry I'm better naming this has come a full full and then you just use radio for now radio radio radio so with the same name you expect that you can only choose one of them right um if I create one more four you expect them to to only choose one and how do you bind the value of this group uh to a variable right I want to bind it to a value you can't say because radio usually you have a property called checked so do you do like buying checked but this will only bind the checked to a variable and bind the value of the checked off like this want input how do you bind a group of inputs because it works together you want to say this growth input I want to know which value is being selected so what you do is use binding group in States so I can bind it to a variable over here I'm going to say uh come create a variable call options uh come up here say options select the option so if it's radio then you can only choose one option and so I'm gonna uh come over here and bind it to option so one so it should be naming is important I'm gonna use a single noun right I'm going to use a singular noun and I'm gonna paste this bind group over here mine group oops sorry mine group now this variable now becomes sorry let me uh I have my camera just block my view so I'm going to resize this a bit so that I can see it clearly so if I select you can see that the option the current option selected will be assigned to this variable call option alright so it depends on the value so what you have to make sure the value is uh not you have to make sure but whatever is Select whichever radio input is selected the value of that variable uh value of that input will be assigned to this group variable called option all right so the option variable will be assigned to whatever input radio button that is being selected at the moment um so this is a binding which means it's twoway if I come over here and initialize with say three it should okay with a string three you would expect that this ring 3 will be selected by default um and if I come over here I have a button uh resets okay I'm gonna this function will will try to set uh option to say four right I change change and I say click this oh sorry I click once and I click reset I'll set option value to 4 and 4 is selected right so I can bind Group which is the group of inputs uh what is the value of that group of inputs uh with buying group and it works with uh check boxes as well so I'm gonna come over here comment this out so that you can play with it later on and come over here and paste this and I'm going to replace all this with check boxes check box check box check box and checkbox in most cases check boxes you have multiple selections right so most likely you what you want is more of like an array of selected options so you use arranged it and for the sake of naming it should be a plural form so it's options so I'm going to change it to options options options options um and just to show it nicely and join with uh and a comma right and a space so whenever I click on select select and unselect you see that uh it will add all of the selected options to this variable call options so it's an array it will add more items to that array and because it's a twoway binding I can change this up value of options I can come over here where on click on this I will select uh one and four right so I can select something I can select two and click reset I'll select one and four and four one will be the value of the options so buying group allows you to bind a group of check boxes or a group of radio inputs uh where checkbox when you're buying group you bind uh you you expect to pass in a array as a variable right because you can select multiple inputs select multiple check boxes so all the selected check boxes the value of them will be uh will be the value uh will be they will collect all the values of the selected checkboxes into an array and that array will be assigned to the variable that you are binding with right um so say if I have now if I have two variables I have options and options two come over here and have another variable now this will allows me to um have collect the options to only bind to the the up checkbox three and four so anytime when I change the value I check on it's not changed I check and uncheck the value of three or four it will collect them and then assign it to this options to variable and then you will see whether options to what what are the inputs that is selected by options two right and it works two ways so whenever you change this variable programmatically then you will reflected by uh all the variables all the inputs boxes that binds group on that input so that's all hopefully that is useful for you when you want to have a group of radio boxes or check boxes reminds you of using buying grouped to bind them today we're going to talk about another type of binding which is bind this so what is buying this well we shall see in this example over here over here I have prepared a component which has an input and a button so over here if I type something in my input yeah you got that something from the input um oftentimes when we write this we assumes that a cell wall understands this component goes through some compilation into JavaScript and what the JavaScript do is to create that input element and inserts it into the Dom um yeah and most of the time you don't have to care about that element itself you don't need to know like what you don't have you don't need to get the reference of the elements because if you want to manipulate say the value of that input you use a bind value to bind the value of the inputs and you control from there and most of the times you just want to control the value of the input or maybe some validation which you can pass in Via other attributes but if for some circumstances you want to get the reference of the element then you probably would want to use this which is the bind this so buying this allows you to bind a variable so let's say I'm gonna get I'm calling I'm creating a variable called elements and I want to bind this this input so this stands for this reference of this input to this variable so buying this is actually one way binding you you do this you will bind the reference of the inputs to this variable but it does not go the other way around you can't go the way where you say sets update the value of this variable and hopes that it will somehow reflect on this element no it does not work that way you can't say I have this element now and I want to create um say a button element and hope that with this binders I'll make this input into button no it does not work that way it works only one way input when it's on the screen when it's Felts created and added onto the screen then bind this will uh will bind the reference of that input element to this variable called element so um hope that you hear the keyword over there when it when the spell mounts these elements then you will get this right so which means that if you want to access the variable right now if your console log element right now at this point of time you probably will get undefined and when does it being defined well it's being defined when spells creates this element and mount it onto the Dom so if you come over here on Mount so on Mount is a life cycle that will be that allows you to register a lifecycle event when um when element is mounted or when the component is mounted then I can call uh at that point of time the elements should be available uh you don't have to worry about on Mount we'll talk about it later but as you can see over here uh I can say type of elements and you can see it's it's something it's object right um so the spell ripple does not allow me to print out elements reference but if I come over here and uh open up the elements tab you will see that it is console.s and input right the reference of the input so what can you do with it so let me comment this out what can you do with it well you can do something or you can since you access the reference of the elements now you can do anything with it you can say reset the value of the input which conveniently we have this function called reset and this is what I'm going to do I'm going to say reset I'm going to reset it to just an empty string okay so if I come over here I type something and at this point at this juncture you can see that element has mounted most likely the reference to that input is already assigned to this variable called ambulance so if I come over here when I click reset it will oh sorry this is elements not inputs all right at this point most likely the element is pointing to the input so when I say if the element dot value equals empty you expect that this you will reset will clear some of these inputs right so when I click it it clears up right so um this is what you can do with uh reference to the elements so anytime when you want to get a reference of an element you use buying this and as a lot of things in this world's components work similar to elements so if I say you can use bind these two elements you can use bind this to component as well so if I come over here I prepared a component so I'm going to import it let's say import component from component dot spelled and then I'm gonna create this component uh over here and okay I'm gonna still keep this variable called element but you know that I'm going to bind this to a combine this component right so this element is going to point to the reference of the component so we're going to say bind this elements again this is a oneway binding so uh you you only get the reference of the components on this variable when this component is mounted on the screen you can't say the other way around where uh changing this variable in hopes that change something on the component itself but of course this component over here that I'm going to show you now um have uh variables right uh States it's called count so when I click this button it will increment the count and also it expose a props right so Props can be variables can be functions uh in this in this case the props is a function um why I say you can be anything it's like you can come over here and do this uh it's it's like a props but it's a function right uh this is same as this is similar to this right you're exporting something like a props which is a function so uh you can come over here and get the reference of this component which means you also uh you get the reference of this component which means that you can access all the props from this instance of this component so anything that's exported can be accessed say for example if I exports the count as a props and if I come over here and I say console log elements dot count uh okay so two right now you click you expect that oh what ah sorry so I can't really read it like this except unless I pass in this flag over here so don't worry about uh spell options accessors this is something we will talk about later on but as as the warning shows it's clear enough you just copy paste this thing in and now you can see that we can get uh we can console out this count over here right a basic explanation of what this is is that it allows us to compile this component in a way that you can access props uh with this uh directly with these accessors uh using like getter function to get the props value right um of course however uh if you look at functions you don't need that you don't get use accessors like Getters to get the value of the props you call the function directly so over here in States I could replace this with elements dot reset and we export this function called resets which it will resets accounts to zero so if I click a few numbers over here and when I click reset it will get it will use the reference of this component and call a method on that component we'll call the props function which is this reset over here right and so I call this reset and this will be called this function and you will set the counts to zero so when I click reset it will resets the value to zero and when I click now it does resets to zero and there you have it uh why if you ask me why you need a reference of a component this is the reason you can access to any methods of the components then uh you you um unlocks yourself not just control the components by its props you can also control the components via its methods you can export more functions more methods from this exports a lot of functions which will be like a methods of this component and once you get the reference of a company you can call all these methods and it will in some sense control your internal state right so in this case if I want to set the counts to zero I need to have a props I need to pass in count it goes to a variable somewhere and any different counts and then you set it to zero right and and if I have more than that I have a a group of props then I would have to coordinate them out here but if I get a reference of this component and I can call a methods to do all of that at once then wasn't even isn't that great right so buying this allows you to get the reference of the element or the components that you're binding right if you use other elements you get the reference of that element you get a you use it on a components you get the reference of the component and when do you get the reference you get it when that element or the component is mounted it's created and mounted by its felt and this binders is a oneway binding which means that it will when it's mounted it will update the variable but updating the variable itself does not reflex does not goes back to change the elements or component itself let's talk about component life cycle events there's four life cycle events uh there's a on Mount and on Destroy and then there's a before update and after updates so let's take a look at some examples on how you can use them so over here I've prepared app.spel and I have a component so in this component I have a import unmount on Destroy before update and after updates from svelt so each of in each of the life cycle I try to comment a console out the lifecycle name so in the console you take you you see that um when you when you first Mount Your components there will be three events fired uh before updates and then on Mount and after updates so do notice that before updates and after updates will be fired even if you are uh just mounting your components and on Mount will be fired when you try to Mount Your component right right right after the all the elements like the buttons over here is being mounted then unmountable fire and after updates will fire as well so if I come over here in the components and I try to add a if statement if condition and if I try to have a checkbox that I can toggle on and off the condition checkbox buy and check then if I turn it on you'll see that it's called mounts and if I turn it off you'll see on Destroy being called okay let me try that again like clear if I turn it on before updates on Mount and after updates and if I turn it on you see on Destroy and within a component itself I have prepared a buttons which will update the count over here so if I click onto the button right now then I will update the account and it should kick in an update cycle so if I click here you see that before updates and after updates although you can't really see the timing that when this is being called but according to the Spell documentation it says that before updates fires right before you update the Dom uh and then after update fires right after you up the Dom has updated and in the docs it says that it will after update will fire once right after the Dom uh is updated so it has this word once and I was curious like why is it so and it's because if you come over here in after updates you could possibly go and update the state again and if this happens this actually kicks in another round of updates on your component and this could lead to an infinite Loop if it's not carefully handled and I'm and somehow apparently swell handles it by make sure that after update only called once throughout the whole updates right so if you kicked in another update cycle in the after updates uh you will go updates again but then after update will not be called again so uh I'm not quite sure whether this is this makes sense to you but for S5s I can see this does help prevent infinite Loop recursive calls so the cell version that I'm using right now is is 3.35 so this Behavior stays at this current version so if I click on over here you can see that before updates on Mount after update and this kicks in another round of updates so you you see that before update being fired so if I click click me again you'll see that before update after update and before updates being called uh yeah so this is something um weird but of course I wouldn't expect you to actually change the state in after updates that is um you shouldn't do that effects so that that is one Edge case that I want to point out over here and you can see that I'm calling this component uh calling all this lifecycle methods to register the event uh to register a callback so did you call this on mounts or any of this uh and you pass in a function so this function will be called at the right point of time and you can only call you can only do this registration during the component initialization what that means is that you have to be written at the top uh when at the top level when you're trying to execute this this whole script over here so if you do it something like do it slightly later for example if I say set timeout and call it at the next timeout then what you have actually is an error it will say that function called outside component initialization you have to call it during the component initialization um but that does not stop us if we say if we come with a function over here full and we make sure that we call the food during initialization of your function which is calling it at the top level over here then of course there's no error right so it's not about where this amount has to be it's more about when you should call it you should call it during your component initialization this is because whenever a asphalt component is initializing your component sorry spell is initializing your component it knows which component is initializing so so you're importing on Mount on Destroy before update you know that you're importing this function this function has no idea uh it or rather these functions are so called uh is is importing from sveld right so you it has to know that what are the current components being initialized so you have to call it during initialization so that it knows that oh the current component is being initialized is this and I want to register this this event this amount on destroyed to this components but once it's finished in installation that then you couldn't find that component anymore and therefore you get this error of you have to you can't call it during after you have to call it during component initialization uh so one last thing that I want to share is that one great example that you can one great use case that you could use uh when it stems out from this where you can actually call this somewhere else meaning actually you can have a function say full right in this case and save it somewhere else uh some food.js and you export this function and so for each of the components that wants to do something during our mounts for example calling on Mount you can import Foo for all of this components so so there's ways that you can reuse lifecycle logic so you call full from here you can have multiple components and import full and when you so you you have to call it during combination component initialization initialization but then this will make that all any component that you call this will have a one callback registered for on Mount and it will which is to print out the on Mount during on Mount right so it's a bit mouthful but yeah uh so one example I can think of is to have this function called Mac updated Mac updates uh so uh let me show you how I can use this I can import let's let's remove this I can import Mac update and call it over here and this function actually returns an action curious why right so I'm going to say action so this action can apply to any elements use action and you'll see that my element will have a outline uh drawn on top of that element right this is this is done by the action but anytime when I change something it turns red the outline turns red so there's no way that this action will know that something has changed right because there's no way this action we are not passing any parameters to this action so there's no way that for you to know but one curious point is we are actually creating this action on the fly over here this Mark updates so over here Mark updates I actually call the before update so I'm gonna so any for any component that I call this I'm actually registering something in the before update so that actually I know that some this component is updating and what I do for the action is actually just add this element that I apply the action to to a set so that every time when something has updates I draw and read outline to that element to all these elements so that that is one interesting use case of uh where you can have before updates or unmounts being called within a function and you can reuse Logics of them right it does not have to write you don't have to write this within the component itself you can write it in other functions but make sure make sure you call them during component initialization in the last video we talked about how we register component lifecycle events such as on Mount on Destroy before updates and after updates we talk about some of the do's and don'ts about registrating them for example you have to call them during the component initialization we briefly talked about when they will be called but today in this video I want to dive slightly deeper into the on Mount component life cycle so let's take a look at the two examples I prepared for you for on Mount so over here I have my app.velts that renders two example if the show is true so I use a checkbox to turn that on and off so what other use case of a good example use case of using on Mount well I can think of two but of course there's a lot more so the first one is I use on Mount to set an interval right so you you wouldn't want to kick off this interval of like uh some events that you're doing during interval this should be only triggered started when your component is mounted onto the Dom right over here I I set an interval on every second so that I can see the counter increase by one every second and then the second example that I can think of is using on mounts to fetch data so if you use a server side rendering and a clientside hydration kind of model where you want to fetch some data in the client side so mainly usually because you want this data is less important it's it's probably showing up later on so you you you are able you're okay to fetch them later on in a client side then probably you can add it in the on Mount uh life cycle right you you wouldn't want to do it um in like component initialization uh and because that will be actually being triggered by the server side rendering right during server side rendering you you would want this to only happens in a client side then probably you add this fetch within on Mount if it's purely clientside rendering you don't have any server side rendering then uh um yeah you can fetch this during component initialization because the time difference isn't that much and then probably you can even like fetch make a network call way before your component is mounted so that when it's mounted the data Maybe it's already there so uh on Mount so remember uh you don't take my word for it that I say that on Mount will not be fired during server side rendering uh remind me later on I will show you uh we have to try everything so that you don't take any word from anyone right but let's take a look at these two examples so when I turn on this flag uh you should be able to see the counter is incrementing and also I fetch this data um and then also have because on I either the console log so on every interval you see that the console is logging in the log but but if I turn it off see that this is still running you're still running 33 94.5 because we didn't clear the interval this is another source of memory leak we set an interval to run on mounts and then we didn't clear it up and the next time when we Mount this component again we set off another timer and we turn this off see that there's two run two timers running at the same time now so we need to remember to clean it up so how do you do that uh in on Mount maybe we can uh take this interval instead of setting it over here we uh we we Define the interval ID on top so that on Destroy we have to remember to clear interval interval ID let me save this and hold on let me just pass it over here we save this and refresh because the old interval is still running so if I come over here and I turn it on console is running and turn it off it's gone right that's great we remember to clean up uh whatever we set it off during on Mount because this is a bit um wordy like you have to remember to do an on Mount and on this right path and because this is a very common pattern that we usually do uh if so actually well provides a way that you can do it all of this within just one on Mount event life cycle Handler so what you do is you re you can return a function in on mounts and this will be called uh when you this will be called when the component is destroyed so you can have the interval ID over in within on Mount and clean it up at the same time within the same event handler so you can save a few keystroke you don't have to import on destroy you can even you don't even need to define interval ID on top you can do this and hopefully it's more concise so let's let's try this out turn it on console and turn it off it's gone right so you can return a function in uh in the on Mount event handler so that it will clean up it will be called when the component is destroyed so they will do the cleanup necessary same thing goes for fetching um if you Fetch and your component is destroyed you don't really need the data anymore then probably you can use a bot controller and you return a function to I bought the fetch so if I take a look at the network tab over here clear this up turn on and turn off immediately you see that uh wait hold on I think this is returned now let's let's do it faster let's turn it off you see that this is being canceled right because you don't need this data anymore uh yeah so remember to do remember to clean up whenever you use on Mount anything there's a lot of things that can be cleaned up so remember to do that right so timeout intervals fetches uh there's a lot of things right so that's there you have it um on Mount and remember to clean up so before we end this I promise you I'm gonna show you how to run this in a server side rendering uh so I'm gonna save this and I'm gonna download the projects and then come over here and compress this allow me for a while we're gonna run this with my code editor so I have vs code open and come over here most likely I need to install something right so this one I'm Gonna Change it to server side rendering so we're going to come over here SSR wait no right I think it's the oh generates called generate and come over here let me know install my dependency and build my code okay so actually this is not gonna work because we're gonna compile it as a Services rendering so I'm going to come over here at dot render uh props empty props I'm going to come up here let's have the HTML I'm gonna just cancel it out and build this again and I'm gonna run it oh man what did I do build this and run this yep you can see my HTML is up and you will notice that okay so we haven't really console out anything in on Mount so this is what I'm gonna try see whether this online is being called uh we can default to true so that you will show the example one and two okay let's let's build this again and then run this and you just as you can see over here we did not run anything we don't see anything on on Mount right so this zero is this count over here so we do render this uh this image over here is the image and we didn't see any on Mount so on Mount is not fire during server side rendering hope that uh hope that's clear today we're going to talk about if logic block we have seen how we can use Dynamic data to present uh onto the templates in your swell component but we haven't talked about how we can based on a certain condition show or hide a certain content so this is what we're gonna do today so over here I have prepared some examples for you as always so here I have two buttons one uh called condition the second button is also called condition right but they are controlling different conditions so let me name it better so this is condition one and this is condition two so as I click on each of the buttons I add event listeners so that it will toggle that condition so if it's initially true then it will turn to false if it's initially false returns it to true alright so as I click you'll see that it turns from True to false false to true so now with all this set up we're gonna see how we can based on this condition to show some content so firstly first is that to write this if block we use uh we we start with a clear brackets and then a hash and if so this is how we start the if block and then we type in the condition so this we are going to use the condition one and with that to close it we use curly brackets again and then backslash if so in between you can pass in any content right so I'm going to say any uh condition one is true so if the condition if I turn toggle on toggle off the condition one you'll see that this will be hidden but when I turn condition one to true this will be should so anything uh within this block of uh if condition uh will be shown based on the condition itself so the condition is any Expressions you can pass in any Expressions so I can see um say condition one and condition two so this time round if I turn on any of it it will be hidden but if I turn on both then it will be shown right so this will be based on both the condition and condition one and two so anything here can be a expressions right and um so again so to recall we start with a hash if and then we end so if a slash if so this marks the beginning and the end and as what we will do in JavaScript we have if we sometimes like to have else right if certain things do this else do something else so um same thing goes with the logic block as well we can have an else condition so if show something else show something else so over here we can type else but this time around when we see else we are going to start with a colon sign so curly brackets again and then colon else and then close your curly brackets so else uh I would say either condition one or two is false so as you can see if I turn on it will see either one of the condition is false uh if I both is true then uh it will it will show the first content okay so now I'm going to tell you there's actually a pattern there's a pattern in logic blocks so so you learn the pen this pattern now it applies to other logic blocks that we're going to talk about in future the pattern is this uh when you want to start something you start with a hash sign so curly brackets hash sign and something right in this case we are learning about if then we will start with a hash if to end that we will have to use a slash if right so this marks the beginning and this marks the end and anything in between anything in between you use a colon sign so in this case we have colon else we can have colon else if as well right in JavaScript we have if else and then n right you can have if else if another condition else if another condition and else an N or without else as you can see right you can have as as many else if or else in between so the same thing goes with uh spell logic blocks you can have else if so anything in between of the if you use a colon right so else if and then you can type anything you like so in this case I want to say uh condition one or condition two so again this is whatever you type over here can be any JavaScript Expressions it could be condition one or condition two it could be a function call right maybe I'm going to say check condition one two and I'm going to Define this function on the top so I'm going to say check condition one oops condition two and return all right this this works as well we can if we can pull this function uh extract this into a function and call a function over here right and then probably over here I put some content so you you can you can see really if I don't put anything spell actually will complaints like oh uh you you have nothing over here right uh so uh so that which means there's rooms to improve in this code itself we probably don't have to check this condition uh to put an empty maybe we can have else an alternate uh condition and then put like over here instead right we can compact this instead of leaving like one condition that has empty block so uh over here I'm going to say condition one or two is true all right so now if I turn you will see that it will change the wording and if both of them are false then either is false right I think now it should say both condition one and two is false right so you can play with this uh however you want right so logic blocks um so logic blocks itself uh like any other elements is felt they can Nest itself as well so I can come over here and I can Nest again so say for example I have condition three uh right and I can come over here and Nest it at anywhere I like I can Nest it over here say if condition three uh another content all right so if I you can see over here and I can put it over here as well if I want I can have as many uh within a Blog I can have as many number of elements I want so I can have one div oh in fact I can have two divs if I want to uh if any content I like right I can Nest conditions and I can keep nesting them and the ones that I can't do that right so uh the sky is the limit you can you can do as as however you want the sky is the limit you can come you can just treat a logic block itself like an element which can have children and so you can Nest uh have like logic blocks and then element and then maybe logic blocks again and an element and then and all the way down to Nowhere right so so there you go here you have a if Logic box for you to show or hide content based on the condition right based on certain Logics which is the if the condition is true then you will show something if it's false you hide it and we've seen how you can start and end a block and we see the pattern over here where to start a block you use a you use Clear brackets and a hash sign and to end it you use the same name right so if you start with a clear uh you should start with if then you have to end with an if block and this time around when you end you use a slash and anything in between say else if else you start with a clear brackets and then a colon sign today we're going to talk about each logic block in this example I use I have a list of colors and I want to show all the colors in a list so what I do is I come over here I create one list item by one one by one so I show like The Colors the I use index to get the first color the second color and the third color but when I need to add another color say I want to add yellow then I have to come over here copy and paste uh change this to three and to show like the the fourth color so is that a way to reduce this so that we can just write it once and some way to Loop through all the colors and display it on the screen well there is right there's the point of this example that I want to show you is there is a better way of doing this which is to use the each logic block so before we go dive into the each block I'm going to draw a comparison for uh from JavaScript on how you would Loop through a list of colors and do something with it right so we're going to compare that with our each logic block so that you can see the similarities so that you can draw the connection between them okay so over here I if I'm going to look through the colors uh usually there's a few ways I can use a arrays or forage right I can use arrays.forage I could use a for loop with index to Loop through uh length look through all the colors but my favorite is if I just want to get the colors I don't care about index I would use four cons off Loop which is four color off colors for off Loop right so in this fall off loop on every iteration what I get is the color so I uh so in this example I'm gonna just console out what is in the color and you can see from the console let's read green blue and yellow so every iteration I'll print out that color at at this point of time right so the same thing goes with each logic block to start the each block so I I think I give a big hint for you the block name is called each and we've learned previously how to start a block you start with coming with a curly brackets and a hash sign and then the name of the logic block right so we're going to use each logic block so we're going to type h and before we type further uh the way we end it is to come over here slash H right you start with a hash and you end with a slash so how do you Loop through an array using each logic blocks well it's kind of a bit uh inverse of how you do with a fall off Loop right you start with the erase the name of the erasers so each of the colors and then you use S so each s is a four off right so for each of the colors as as a variable so I'm going to say color so over here I have access to the color so it's so you can see this is kind of like with uh inverted right u4 item off an array and you each the array as the item so in each of this content over here you can treat it as each iteration what you are going to show for each of the iteration so for each of the iteration I'm gonna show a list item which is this one so I'm gonna copy come over here and paste it in and I'm gonna use the color that uh in in the current iteration so which is the color variable right so now I can remove this and you can see immediately that uh green blue yellow is how I would it trade through I print out red green blue yellow I use each block it will iterate through all the colors and it will show in other red green blue and yellow all right so that is how you use each logic block so let's move on to the next thing right so um over here right now I'm going to change a bit on my array I'm going to come up here and change slightly to include uh do not just use a string but an object because so that you know in each item I can not just telling you what is the name of the color I would also tells you like what's the hex uh representation of the number of the color so for red is f zero zero for green it's a um zero green blue F0 for blue it's gonna be uh red green blue so zero zero f and for yellow this is a tricky one I don't really know the hex of a yellow color I'm guessing it's gonna be a red green blue green and blue zero FF I'm gonna I'm just gonna guess but let's see how it is right so uh we have a list of colors uh which is object and you have a name and a hex right as you can see here we are we are considering our object and if we show an object directly on the screen it's just gonna see the string representation of it right you just cast it into a string right it will be similar as you call string with the color this is the same thing but what we want instead is maybe for now we're just just gonna show the color the object itself so I'm gonna use json.swing G5 so that you can see the resemblance of this in the console and this in the screen so with a for Loop uh sometimes I'm gonna cheat a bit instead of I can say let's not do the cheat first right so if I want to access the name of the color I will come here and say color.name all right I mean again I get all the colors and I can get color dot hex I get all the hexa representation of color so the same thing goes I can come over here and say color dot Nim right again I'm going to see red green blue yellow and I'm gonna color I'm gonna add a Style by color the item with the hex right so I'm going to say color and then color dot hex really okay so this is definitely not yellow I can't remember what's the yellow oh yeah okay ff0 ff0 yellow so this our style the item with the hex of the uh using color.x and color name right same same way how you would access it using a for Loop but sometimes I'm getting lazy right uh getting lazy that's why I'm going for because sometimes I am lazy and I I I know that I don't really need the color I want to destructure immediately of this array so how do you do destructuring right destructuring you can destructure it like this and you can name out the properties of of the item right so previously we have color right color has two properties name and hex so I'm going to say name and hex so I can use it directly from here all right as you can see again in the console you console out red and the hex value in each iteration so can I do the structuring over here as well well yes you can so I'm going to destructure so um let's do type I'm just going to copy this and paste it over here so now I have name and hex to use it I will replace this with a hex and this is name and again nothing's changed but we have changed our code so this shows that this what we've written previously and what we're writing now is the theme right you can you can do this you can destructure directly in the each logic block and it will work so if I come over here again if I want to add another color name it goes black uh this color itself does not have any hex value so you can see if you print out is called undefined because you don't have any hex value so if you inspect over here you probably will see that the style color will be undefined so uh sometimes you have that what happens is that you want to have fallback right you fall back to some other things over here I'm gonna just say a purple just so that it's it's obvious right so the fallback for this is you can do it this way right you fall back to a purple color uh but this is this is uh falling back on the usage of hex right when you want to use the hexadecimal representation uh you want to use it you say okay if it's defined yes show me this value if not uh fall back to purple but what if you want to provide like some sort of uh default value when you're declaring the variable hex over here right here we are this declaring name and hex in a destructuring way and we can provide a default value by say a hex equals to purple like this so what it means is that if I remove this if hex is not defined it will be purple right so black you have a hex called Purple so how do you do this over here you can do it the same way so I'm gonna just copy so to show that it it's the same thing come over here and I can remove this you can see really again uh it's showing purple color right nothing's changed because it works because it works that's why uh nothing has changed so um so here you can see we are drawing very closely to the four cons off loop with the each logic block except that you start with a four the item of the array but in each you use each of the array as item so anything over here um you can write anything that you write over here can be just copied over and paste it in over here and it will work as you would expect and whatever inside the content will be evaluated on every iteration of the loop just like how you would do something at every iteration within this block so you have access to name and hex the same way as here as the for Loop right so and as of the for Loop you can Nest it right so I will come over here and because I'm lazy to come up with a raise uh I'm I'm gonna Loop through the hex string itself so can I say a character uh of hex so if I console log you'll see that it will Loop through all the characters of the hex all right so same thing uh over here if I I can come over here and add this uh block but I need to write as each block right so I'm gonna say each and we copy the array first s and then the item every time when you start you need to close it so I'm going to come here and close the block and what are we going to do in between okay what are we going to do in between is we're going to create more items right because I am dim and can't think of anything uh so I'm gonna say character uh and you can see you are looping through all the hexa characters of the hexadecimal uh representation of the color so you can see we draw very close comparison with the four off loop with the svelt logic uh each logic block we are going to continue to talk about the H logic block in the last video I've drawn comparison with each logic block with the four cons of loop um we draw we've seen that they have a lot of similarities on how you use it use them except that they are in a mirror inverted ways of using because you use four an item of the array but in each use each array as item but in this video I'm going to show you two more things that you can do with each block that is not available in a far off Loop so are you ready let's take a look what are they so the first thing is um each block allows you to get the index of the phone of your item right the current so as you iterate through the item uh you can specify the index of what you're iterating through so I can come over here uh to get the index and come over here after the each array as item and then I will type a comma and I can define a name for the variable to get the index so over here I can get this index called a I uh index I name it index so to use it I can come over here and let's say index name Dash Index right as you can see now read index 0 green is index one blue is index two yellow is index three four and so and so forth right you can get the index of the current iteration which something you can't do it with a fall off Loop well you can't do it for off Loop but you can do it with a for each Loop so one is for each right so you can come over here uh colors for each and you pass in a function over here and in this function you can have the item itself again you can do similar things and you can have comma and then you type in the second parameter is the index right so this now this each logic block is actually more closely related to the four h Loop where you have an array forage and then the item comma and then the index over here so for on each iteration you get the index uh this the value variable so you can Define any variable you like the name any variable name you like and it will be shown over here right so this is the same way you get index for your each block so which is something you can do with four off Loop right so that is number one and number two is what if your array is empty right in this case uh both of these four Loop or for each Loop will not do anything because the array length is zero right so if I comment everything array is empty you don't do anything right you don't console anything but what if I want to show something when it is empty I want to fall back to say okay my list is empty just show one item that says list is empty what should I do well in ish logic block you can have else interesting right because else is not just for the if block right if else else if but this is also this um this you can use the else when each has no item right so you have um so how do you add the else as you have learned in how you add else in the if logic block anything in between you start with a column sign right so I'm going to curly brackets colon and else so over here else you can put in item that says uh um anything right I can say uh the list is empty so you can put in the content that that will show only when the list is empty right as soon as I add something back that this content is is not going to shown anymore it's hidden right this will only be shown when the list has no item right when the list link the length of the list is zero so here you go two things that you can't do with a fall off Loop that you can do with each logic block first you can get the index of the current iteration second you can show something when the list is empty using else today we're going to talk about key h block what is kit each block well it's like a ish block but with key but what does that key do well we'll learn about it in this video before that let's take a look at one example so over here I've prepared an example which again we look through a list of colors so I have three colors red green blue and I have a button to add a new color so when I click on the button I'll push in a yellow and hopefully you'll see yellow added to the list so under here I add I Loop through the colors uh with the least color and then I yeah I show what's the color it what what's the color right now right so when I click you'll see one new color added at the end of the list so what happens here if we investigate this what happens is that svelt will actually Loops through the list all right so previously the list only have three items now you have four items so you will look through a list and compare one by one the color and the index well it does not really compare the color and the index it Compares what is being shown on the screen and what it's going going to show what is showing and what it's going to show right so right now uh the first item is showing rate and we're gonna show red as well so nothing to do and second item is showing green and we're going to show Green as well so nothing to do uh third item is blue and we're going to show Blue as well so nothing to do over there and then we don't have any items left but we still want to show one more item which is the fourth item is yellow so we add a new item at the end of the list and show it uh add it as a list item and the content is yellow and there you have it right so if I come over here and I inspect elements uh we're gonna see uh close uh a little bit closer and what what is happening right so gonna reset this uh I'm gonna inspect again so before we inspect I am going to use the developer tools to save the reference of the list item so that you can know that whether what I say is true right what I say is that you will compare compare compare the first three items and then the fourth item is is newly inserted right so I compare reference and see whether do I remove any of the elements or are they the same reference so I'm going to save it um over here so I'm gonna say a uh okay I'm gonna name it better right so the first uh first item equals to the current element I'm selecting so this this one the rate and highlight the second one and the second item is zero and third item so first second and third okay and now I'm going to click the button to insert yellow into the list okay if you notice over here as well uh it flashes something over here right I don't want to restart because I have to retype everything but rewind pause this and Rewind you can see that uh it it flat the fourth item flashes and nothing flashes on the first three item because you don't have anything changed all right so now interesting thing happens right we want to compare the item so if I come over here this is this current item and we're going to compare first item is it equals is it is a reference equals the first one yes it is so we are not we're using the same element okay that's good let's check the second item uh and let me highlight the second right and whoops right it is true right so the second item is equals to the second elements over here let's highlight the third element and let's type third item it is true as well so that's great and the fourth one uh no one is um we don't have that fourth item yet so it's it's a new item so we can't compare with any of the elements right that's great so um what happens if right now instead of pushing yellow at the end of the list I'm gonna insert yellow and say the second position so I'm gonna use spice instead uh zero uh so the index I'm going to insert it in the second index I remove nothing and then insert yellow right so if I oh sorry splice so I click you'll see yellow inserted at the second position well it's third in a second it index or it's a third item right okay so let's let's come over here and before we do that let's restart again before we do that I'm going to keep all the reference of the elements and let's guess what what's gonna happen right now all right so we're gonna before we do that I'm gonna say first item oops highlight the second item and then highlight the third item all right so first second third you can see it it's also how when I hover it's also highlighted on the left on the Ripple over here right so as I click what happens right so this is what I'm going to explain what happens and we're gonna see whether it it matches what I explained right so I have red green blue three elements and right now I'm gonna render four items right and I'm going to insert yellow at the third position so you're gonna have red green yellow blue so compare the first element and the first thing I'm going to render right first thing I want to show is read and read okay I'm gonna not go into anything I'm gonna see next thing right the next thing I have on the screen is the green and what I'm going to show is green as well so nothing's changed okay that's good third thing that I have on the screen is blue but what I'm gonna show is yellow so instead of uh inserting yellow I'm gonna change the blue color to Yellow right blue to Yellow because that's the third item I'm going to show and then fourth item I don't have anything I don't have fourth item element on the screen so I'll create one new element called blue and then I insert it on the screen right so that that's what happened right of course in my mind when I do this you're gonna say like isn't shouldn't the better way or what I want is more like keep these three elements and insert yellow and new elements as yellow in the third third position rather than you know change the blue to yellow and then insert one at the last it shouldn't that be the way well it's not really and it trust me what I say is what's actually happening and I'm gonna show you I'm gonna prove it to you right now then click on the buttons and you'll see yellow on the screen now and again if you haven't noticed on over here on the right you can backward a bit and you you will notice that both of these elements flashes right flashes means that something has changed right the the Chrome extent developer tools will flash on elements when it's changed so we're gonna come over here and do the element uh reference comparison right so I come over here and say it is the first item equals to the current element well it's true yes and the second element is the green color one I'm going to come over here and compare is the second item equals the current yes it is and I'm gonna highlight on the third one and say is uh is this the element equals to this it is true again right but previously remember third item shows the color blue but now it's showing color yellow so it's reusing the same elements but then change the text and for the blue itself we recreate a new ones this one is not equal to anything else so it happens as I what I said right it will compare one by one and if it's different you will update it and if you have more items at the bottom you will add it in right so in general uh whenever the length of the array changes um whenever the array changes in general what happens is that swell will go through list one by one and compare what is on the screen and what is going to show Even if you rearrange the things it will still go one by one in order and update the text or the contents according to what it's going to show right it does not know whether it does not have no idea know what idea whatsoever about how you rearrange the item right you just go one by one compare and update compare and update and at the end of the list if you have more items then they will be created and inserted into the Dom or if you have less item then the extra items will be removed right that is what what happened so uh again to prove this to show you this is what actually happens I have another component over here this way I can show you that the component will actually tells you that when it's being mounted and what it and it will console out the color of the element that is provided to this component itself all right so I can come over here import this component I'm going to show this component in States I'm going to pass color so on Mount you see that I will Mount red green and blue right you can see red green blue okay and I have another variable that's called initial color which will be computed will be stored the value of color and the initialization right during initialization uh your storage and it's it's not a reactive variable so anytime when you change color this will be stuck at the initial color you you pass into this component and as now what I'm going to do is I'm going to insert yellow in the third item as soon as I click that you see that a long blue right it inserts a new item inserted is actually a blue color instead of yellow although we insert yellow in the middle it does not matter it will only check like what we have and what we're gonna render we have the extra item and that extra item is the fourth item which is blue color so as you can see here it locks out blue instead and then one thing you can see here is that the third item although the color right now is yellow but the initial color is blue right this tells you that previously this is blue and we change it we change the color property to Yellow right to show on the screen but this is purposely designed such a way that it still show you that what was the initial color right so they will swallow go through the list updates every element in in order and then anything that is extra it will be inserted or anything less than it will be extra extraneous elements will be removed right spelled has no idea whether you insert something in between or rearranged order rearrange my hair as well so is there a way to let svelt knows that you want to rearrange the item right I've said so many things so that you know like how it works and so that you can know that you make a conscious choice to know that okay I know it's felt you have no idea that I rearrange but can I tell you that some odds can I tell you that a way so that you know that when I reorder something you know when I reorder it well can you well that's the point of this video we're gonna do a key each block and a key you can think of it like an identifier for the elements because anything can be anything over here can be a as your item uh element item of your array right so as well has no way to know that whether you rearrange or you just modify one property of it right if it's a string yeah sort of you can compare the string but if it's an object how can I know whether do I use like object reference or like how can I know right so you can provide a way to tell us about that okay this is this property or this value is the key you use this key to compare if right now if I show a list of elements each of them has its own key and anytime when uh and and then when I update something you compare I will also use I for each of the things that I'm going to show will also have a key and you compare the key first so if the key shows uh so if the key appears previously but now it's in a different order because it's showing early on or you rearrange it somehow then you know that this element should be shuffled onto the top rather than you know compare one by one and update element one by one right so how you write that key well you come over here each array as item and then you can add index as well uh whether you have index or not is up to you but to provide a key what you do is you use a bracket and inside bracket you can write any JavaScript Expressions again any JavaScript Expressions you can call a function you can have a plus you can like adding up multiple elements or you can do whatever you want any JavaScript Expressions but of course make sure that it evaluates to uh something that you can store in a map right of course you can store anything in the map but I will suggest that you know put in some sort of strings or numbers or that's that kind of thing something simple right don't put uh because you smell will have to hold it in reference in a map and you you wouldn't want to throw everything in there uh so over here I um of course whether is there a performance penalty uh you would have to test it out to know for sure but in most cases you just need something like a string right in this case uh we have colors and we can use the color itself as key right so that I know that okay red green blue right if I insert yellow in between uh yellow should have a key of yellow as well so you know that blue uh the key blue is still there right uh it's just like Shuffle to the bottom so that um we know that okay we compare the key first right all of the item is still there but then yellow is a new one so you insert yellow in and then we push the blue down at the end right so that is um what will happen so I can use a color as a key so uh so to show you I'm going to say key is color I will comment this for temporarily so you have red green blue and the key is the red green and blue you can have anything as a key in this uh in this example I'm just use I'm just gonna use the color itself as a key okay um so I come over here uh now do the same thing that we have done earlier on I'm going to skip the reference and then we compare the reference right so in this time round we're gonna see what we what we're gonna happen is that uh you will compare the key first right so right now you can show red green blue you have three keys and when you insert yellow you have red green blue yellow you have four keys right so you will find every time when you render uh you see red the key is red fine where is it and then if if it appears at the bottom you will move it to the top right and then I'm gonna use green and find through the list where is the key which one which element has a key green insert it there right yellow do you have anything that is yellow no that will create one and then blue do we have any elements that is blue yes we will insert that over here right so things will be reshuffled uh so if I come over here and I keep the reference uh so I'm gonna keep the reference first so I'm gonna say first item equals this right first item equals this second item equals uh highlight this on this and third item equals to this all right it's first second third and now when I insert yellow uh if you bank was a bit you'll see that only the third item flashes right the fourth item will be shift downwards so let's compare whether the reference uh of each of the elements has changed right so if I come over here and say first item equals to the current element yes it's true right we will use this second element uh it is true as well and let's look at the third item third element it is false right this is a newly added newly inserted element newly created and newly inserted so yellow is something new uh and then but you compare the fourth one and you see it's true right we reuse this right we reuse blue so blue is shifted downwards and we insert yellow in inside right so if I come come over here and use a component in the States you see that okay initially we are say red green and blue right we are mounting green and blue and when I click uh to add a new yellow insert a yellow in between and a third item you see that a new component is created which is colored yellow and now as you can see also the asian color of that is also yellow right this is a newly created component inserted into the list right so if you uh instead come over here if we do something like a reverse uh colors dot reverse uh you see that when I click uh again it's also yellow is created and even though like we should reshuffle um we're gonna reuse all the elements elements will be just Shuffle and it knows uh it use the key to look up for from the previous render version to find out where the element is and then insert it in order of what you're gonna show next right so um why is this important well this is important uh in a few ways in two ways first is that you reuse uh the element reference in ways that you are expecting it to right you don't updates uh the elements one by one to change this right so if you have a huge list which you want to insert something in between right uh so if you don't have a key each map you what would happen is that uh you compare and from that item onwards you always have off by one error where all the elements have to update it's update to new value because you know something has inserted below and you shift down so you compare the uh for example you insert at the second position then the third item is equals the old the old second item is equals to the third item and you know third is equal to four fourth equals to fifth it always have to update itself because you know the value is different right so uh having KH allows you to insert anything in between but still keep a reference keep using the same reference instead of updating of course there's a penalty in terms of space you actually have to keep a reference uh using a key uh you have a map to keep keep the key with uh reference to the elements so that you can reuse that elements right so that is like a changing sorry you are trading a space with like time efficiency right um of course however if you are using components where it itself has some life cycle methods where you know when companies created like in an example we've shown you use unmounts and when you update it you use like before updates and things like that well you and and probably you want to make some API calls or make something when the properties has changed well in a list in a context where you use it in a list most likely you want to uh you know if if the item is not changed you most likely will want to use the same item is like if something is inserted in in front or reshuffle you most likely want to reuse the same data for the component rather than you know update the comp data for each of them so that it matches the New Order right in that case you want to use a key each block and lastly there's also one reason you want to use a kit each block is when you add transitions or animations when you reshuffle the items uh this is something we're going to learn later on on how to add transitions or animations when you add something to the list but here here is how it will work with no with them right you need to know uh you need to keep the reference of where it was and you have to move it up instead of just updating the value right if you update the value then there's nothing to transition or animate about right so you need to keep the reference you need to know that okay I'm going to reuse the same element but previously it's at the fourth position now you have to shift to the first position and while you move it over you need to add some animation that's how animation or transition will work with a key each block um so uh there you have it a key each block and I hope that I explain it clearly with you uh and if you're not clear enough uh watch the game watch this video again and play around with the reference or life cycle so that you can clearly see the effect of you know whether you're updating an element or reusing your elements or create a new element right especially when you insert something it should be it should it be created or should it be updated on on existing elements in the video I share with you the differences between each block and a keyh block in particular how the updates right so um in the video I try to explain to you with a lot of hand gestures and I'm not sure whether you get it or not so in this video we're gonna see how key each block is different than each block true visualization right so this video is going to be visualized I have prepared a very simple example with a very nice slides so let's take a look so here is my slides key each visualization so let's first talk about how each block updates so here I have an array four items right each with ID and name and here is my code where I use the each block where each array as person and in each iteration I will render I will have like a list item which uh inside that will have a person.name as a Content as a text content right so what you get is like this uh Alfred Bob Danny and Elliot right so we look through the we look through all the persons within an array and then there we have for this item so what happens if I add a new item so here I add the third item in in between uh the first two so right I insert one item and the third position and what see what happens so the first thing that's going to happen is uh internally so what I'm going to show you next is um what's it's gonna happen within svelt conceptually right it does not happen one for one because you know uh spelled May optimize the implementation but conceptually it happens like this right so that if you get this idea clearly then probably most likely or not um it will not change right the concept the concept behind will not change so what happens when you have this is what we will what we need to prepare is what the end result would look like right so this is like the target result this is what we're gonna We want to end up with so what happens is then we actually iterate through the target result and so right now we are looking at the first item which is Alfred and then we compare with the first item of the current Dom right what we have currently on the screen versus what we're gonna end up with so if compare the first item with us for the Target and first item for the what we have currently right it looks the same uh the text content is the same as well so we move on the next one so the second item uh second iteration we have personal name which is Bob uh and it's exactly the same of what we have on the screen so we move on the next one so the next one the next personal name is actually Charlie right in our array the third item is actually Charlie but what we have on the screen is Danny so Charlie is not equal to Danny so we change Danny to Charlie so so over here after the titration after your updates it looks the same now so we move on the next one next one we have Danny because the fourth item is Danny right now and what we have on the screen is Elliot Danny is not equal to Elliot so we update Elliot to Danny and then we'll move on to the next one so the next one is Elliot's but on the screen we only have four of these items so what happens is we create another one create a new item and name it Elliot and we insert it in the screen right instead in the Dom and there you have the end results so five items as you can see over here in the process we update two list items and insert one at the very end right although we conceptually we know that when we look at the array we know actually we added only one item and there's no change right we insert one in the center but in terms of operations that swell does to updates um the Dom to match up what we want to render in the end we actually end up with two operations two updates operations and one insert uh operation at the end of the list so let's take a look at another example which is to remove an atom item right now if you have have a notice we remove the second item right second item is Bop but we remove it now so this on the top or the bottom right corner is what is the target what will end up to look like what we want to end up to look like so uh once you have the target we again we do the same operation which is We compare item by item right the first item is Alfred uh first item is Alfred in the screen the same we move on the next one next one what we have on this on what we want to render is Charlie but on the screen we have Bob so we're gonna rename that we're gonna update that list item to show Charlie in the states and then we'll move on to the next item next item what we want to render what we want to see on the screen is Danny the third item is Danny but what we have the third item is showing Charlie so we'll update the list item change it to Danny and we'll move on we have Elliot but Danny is not Elliot to updates Elliot and move on uh now we reach the end of the list of what we want to render but we have some extra list items in the screen on the Dom right what we do is we remove it right no extra elements so we remove everything and this is what we end up with although by comparing the array we know that we remove the second item but if you look at the the target results and try to update the current Dom towards that Target results what we do end up is we remove one item and modify or update three this item so that is what happens under the hood right that is what happens so is there a way that we can tell svelt the engine tell it that okay actually you know what this is what actually happens we remove only one item and just do that right or tell it that okay we don't we we only insert one item in this in the middle of the list just do that can you do that well we can we can do that by using a key each block so what KH block is different from normal each block is that we add this bracket and in this bracket we have Expressions telling um spells that for each of the item within a list one is the key it can be anything it can be any Expressions but whatever it evaluates into what you see is that okay right now we created four elements and for each of the elements we also evaluate its key so we have we use the person ID as a key so on the screen we also have we have the key as one two four and five right so this uh this represents the key of each of the item and let's take a look at what happens next so what's happened next is that we insert a third item right into the array so this is what we will end up look we will end up what we would end up what we want to end up with right five item each of them with the key which is calculated evaluated on the right so what's next what's next is uh svelt will actually first go through the the Dom go through a current Dom go through all each of the item and use the key as a key use the key as a key of a map we will create a map use the key as a key of the map and then each of the the value would be a reference to the actual elements on the Dom so this is what we created we have a four entries in the map one two four five each of them is pointing to the elements on the Dom right so if you compare this item and this they're exactly the same so this is construct conceptually what happens it may differ a bit on what actually happens under the hood but this is what happens conceptually right imagine when you have pH block what will do every time we want to update we will create like a mapping of a key to the actual elements and then let's take a look at what we're going to do with that mapping so first is we're going to go through the Target and we're gonna go through one by one and then compare the key uh component key of that element and then we see whether we have that element on the screen or not right so we we have the first element is Alfred and we look at the key the key is one we go through look at the mapping okay mapping one has Alfred right so the the content is the same okay let's move on so let's look at the second element on the target results we have Bob which is the key too let's take a look do we have key two yes we have and content is the same so we don't do anything right next is Charlie Charlie is key three do you have a key that's number three in the map no we don't so what we do is we create one and then we create that at least element called Charlie and then insert it into the mapping right so this will be inserted later on right this is something we need so we created one list item and let's move on We compare the fourth element which is Danny key four do we have key four yes we do next we have Elliot's key five so do we have uh key number five and Elliot yes we do in the mapping yes we do okay so we are done with the targets and let's take a look let's go through the target again which compares to the results right this time around we just look at the key right we have created all the elements for all the keys that will end up to be right in the Target result we have already created all of them in a Target in the mapping right uh things that are keys that already exist will also be in a mapping so we already have all the elements we need so now it's just go through the list for example we look at the key one compare key one okay and then we look good and since it's already there so we remove from the mapping right we don't need it anymore let's go for key two key two on the results okay that's correct now three key three right the the target one two one is key number three exit at this position right now but what we have at the position right now is uh not key three is is four right so what we do is we insert it the key number three inside this results uh and then we move on right next is key number four we have uh right now we're also seeing key number four in the results in the current Dom which is correct then we move on key number five we look at the Dom key number five which is correct okay and then that's all and we take a look at the mapping we have almost every elements all the elements is being used up so which is good and let's and we can call it a day so uh hopefully you can see that what we have go through so far is we only create one list element and then we insert it into the right position and left the ref rest of the elements untouched right this is by by doing the way we do it do this is by marking each of the element with a key and then we use the key to compare whether that element exists or not only we create elements that if the key does not exist right and we when we want to update we also compare elements based on the key so if uh if the current existing element is the same key has the same contents then we don't have to update them let's take a look at another example when we try to remove an item right so over here we have remove bulb just like how we did we remove Bob the second item in the ish array each logic Block in a previous example so let's take let's do the same thing again let's go through right now on the screen we have five elements with five different keys and what we want to end up is only four elements with four different keys so first thing first is we go through all the elements on the current Dom and then build this mapping right so we have five elements so and five different Keys one two three four five and now stick let's go through the Target and see uh go through Key by key element by element and then see whether it already exists on the mapping or not right so we look at right now the key is one uh there's already a mapping uh there's already an entry with a key number one in the mapping contains the same so we move on three we have key number three in the mapping content is the same so we move on okay number four we have four in the screen mapping is the same in the mapping content is the same so we move on key number five the same we move on right now let's take a look at now let's go through a Target go through each of the keys again and go through um the re the current Dom right so first element is key one and what we have also key one okay so we can strike that off from the mapping second element is key three and let's take a look at currently we have key number two which is extra Okay so it does not mean that we're going to remove this immediately but we're gonna take it out from the Dom right and then yeah take it out from a Dom that's all right so here we call it slightly different just just to let you know that this is something uh it was there previously in the current dome but we've taken up temporarily right now so with that taken out let's take a look at the next element the next element is key three on the Dom which is map which maps with what we have and then so we move on right key four we want key for next and we have key for in a Dom let's move on we want key five next and we have key five on the Dom which is great so uh we have all the elements we have all the elements in the targets and let's take a look at what we left in the mapping these are elements that we are not going to need it anymore because you know we have showed up all the target results so these are extra elements and we're going to remove it so so we clean it throw it away so we clean up the mapping by straight away and that's all so by the end of end of the whole update cycle what you see is we end up with four elements with four different keys right that element is removed all right so operation wise what happens on the Dom is we remove one element and that's all we didn't update any elements and only remove one element which is what we want let's take a look at a last example of a key h block update here if you take a look at the array we swap the second and the third item right so right now the order will be Alfred Denny Charlie Elliott so we have what the target at uh we have our Target Alfred Dennis Charlie Elliott key 1435 and what we have on the screen is one three four five right so first thing first we create a mapping out of the edges current uh Dom so we have all the keys and the reference of the Dom elements on the Stomp and go through and we go through each of the key by looking at the elements uh finding the key where the Alfred uh so where the key number one is as is in the mapping it does content elsewhere is the same okay we move on camera four and this is in the mapping contains Danny Danny the same key three Charlie Charlie the same we don't have to update anything Elliot uh key number five is Elliot and we have key number five for the mapping and Elliot Elliott is the same we don't have to update anything that's great and now let's go through this again um by just looking at the key right we have key one we have key one on our first elements on the Dom that's great let's move on we have key four on the what we want is key for and what we have is key number three on the screen okay that is not correct so we're gonna temporarily take it out um take it out for now and let's take a look at the next element on the screen which is keynote 4 which match what we want right and that is that uh so we can strike that off from the mapping and let's take a look at the next elements we want to render which is key number three and what we have instead is schema 5 on the screen which is what not what we want but let's take a look at the mapping right mapping wise we have key element key 3 with a Charlie right a reference to a Dom element called Charlie so we insert that in I will insert that in and since we insert it in then we are good and we move on to the next one right so we look at the Target we have km5 let's look at the Dom right now also key five so it's the same and that's all all the elements we have already we already go through the target results all the keys are there and we call it a day so that we have it um so key each update also will help us rearrange item right we you see that we take it uh took um the element Charlie out and insert it after Danny right uh this is how what it will happen conceptually but um in terms of like what actually happens under the hood whether we remove Charlie and innocent after Danny or maybe the other way around where we actually uh remove Danny and insert before Charlie that is uh that is implementation detail you don't have uh it could be optimized uh different ways in future so we're not going to say that that this is exactly what happened but conceptually what you see is that with a key you know that element has been rearranged and the only operations you need to do is to pull elements out and insert it at the right position and that will be it right so we have seen three different kind of operations uh adding removing and rearranging items and we have compared that with how uh it will how how the update operations is done for the each block we see that there's a lot of updates if you don't have a key and we see that if we have a kit each block uh the up the update operation should be slightly more socalled optimized of course uh in terms of less updates on the elements but of course you trade it off with having more memory consumed because you have to have a mapping of all the keys versus the elements and go through a slightly longer operations of comparing elements with the key and the mapping and rearrange items right so there you have it there you have the difference between uh each block and the key each block with visualization so today we are going to talk about how you can fetch data in svelt's components and how you can use a weight block to make that make your life easier so let's take a look at an example that I've prepared for you so over here we have a app.spel component which we have a list of breeds okay only have three but the reason of using uh uh so this is these are dog breeds right and we have a we have a select a drop down uh elements and we use each block we learn about each block and here we are using it right now right we learn and we use apply what you've learned so we uh we use each block to Loop through all the Brits and we create um an option element on every iteration and we use a value over here and we bind value right you learned that before if you haven't even know how to use it links on the descriptions to that previous video that we have talked uh discussed previously so you bind the value of the select element with this variable called selected breed so these are dog breeds and the reasons you are using dark bridge in our example is that we have this API called doc Co or doc API sorry docso doc API uh this uh API will return us a list of docs or random or it can return us a random dot images based on the breed so this is the API http.co API breed breeds image.com random so we are going to use it to fetch random dot images over here and so so let's take a look at how we can do that so first thing is every time when selected breed has changed we can call a function to fetch uh our dog images right so uh we're gonna have a variable called image source so this is a variable that will start the image of the dock and we're gonna display it on the screen so we're gonna come over here and say image source is the image source and of course we need the L alt which is a duck picture right sorry dog I'm gonna say dot and now we need to function to update this variable so we're going to create a fetch dot image and we're gonna pass in the breed and we're going to call the API over here so I'm gonna say French I'm going to use the window.fash API uh pass in the grid over here breathe slash images at random oops whoa hold on fetch okay so this will return us as a promise and we have a promise we're gonna say dot then so the promise will return resolve with a response so the response itself will have some methods and one of the methods that we're going to use is called uh Json so this will uh pass the body of the response and con as if it's a Json object and then will return us another promise and This Promise itself will have the body right so if you take a look at a doc API uh if you okay let's see the documentation it says that uh the API will return an object which contains two field right the message and the status which it says whether it's success or not so message we're going to come here and say so this will be an object right and object.message is gonna be the image URL so I'm going to assign it to image source equals this and we're good of course uh what if the API fails then or any of the steps that above feels then you will need to catch them right so you to catch a promise you use dot catch and this will give us an error object and what should we do with an error right for now what we're going to do is uh we're going to have a variable called has error uh and initialize with false so every time we have it we're going to say it has error is true all right so we can show some generic error message so every time we start fetching we're going to reset this to false so this will be reseted every time we fetch a new DOT image so uh come over here and we say if has error then I'm gonna say we're gonna show like oops something wrong right and we only show image if a if there's no error right so if else there's no error then we're gonna show the image but then you see that uh before we finish anything the image is uh we haven't have any image yet right so in this case okay we need to call the fetch right so uh we want to call this fetch dot image every time when a bridge change so we're going to use a reactive statements if I haven't know what reactive statement is again videos on the description we have done that previously so we're going to cover this in this video I'm gonna say uh fetch dot image we will breed selected breed so this statement will be reevaluated every time when the Brit has changed or the fat stock image function has changed right this one we won't change it because we initialize once and we didn't update this variable so so far from what we can see over here is every time we change selector this one should be called right and true to that every time we change something it will be called uh but when we change something uh we see that while we're fetching we didn't reset this image source right that's why you can see that it's showing a previous image until the the response is back so what happens if we come over here uh what we should do is come over here and we should reset it right to now right so every time when you change it is reseted and then you see when it returns from the API response and then only you show the image of course it's a bit ugly if you show an image with no sauce right and usually what when that happens is actually when we are fetching something right we can have a flag called it's fetching so initialize is false so every time we call every time we start fetching we're gonna say it's fetching is true and we are done uh and when we are done we say I'm going to set it to false right and we are done it's either we have a uh resolved or we have catch right so we can actually do that called a finally this is at the end of everything right either we have an error or either we have finish uh resolve either we have resolved with a value or we have rejected the promise has been rejected with an error finally we will still be caught right so this will sets the is fetching to be false so uh now we're gonna come over here and say if it's fetching then I'm gonna show loading and else only we are going to show the results this is fetching right seems like the finally is not being oh wait it does right so loading and results loading and results so here you see how we can fetch a new dog image every time we change the bridge so this is how you're gonna fetch data in as well components but this is troublesome right because you you have to maintain the state of whether it's still fetching or not or whether it has error or not and and turn on and off that flag to signify whether you are fetching or you finish fetching but you have error or you have finished fetching and you don't have error and you have a result right and this is a very common patent and we come out with a way to write it easier easy more easily right so the way of writing it better is using a width or chip block so width is like how you would await a promise so talking about awaiting a promise right now what we do over here is more of like a promise chaining way of handling promise right an alternate way of doing this of or writing this let's say async uh wait using a weight we're gonna use a width to do that right so this uh this function and this function is going to be the same uh in terms of the execution but one of it is using a weight and one is using a promise chaining right uh it's just difference in terms of style on how you're going to write them so you can await a promise and every time when you await a promise what it returns is the results so over here what we get instead is the response and with the response we are going to call response.json which also returns as a promise so we await for that and what we end up getting or what we want to get is the object so let's see equals to oh wait over here and with the object we can assign image source equals to object Dot message which is what we have done over here so you can remove these two lines and if there's an error we want to catch it so we can write wrap the whole thing with a try catch block and catch it with an error and over here what we're going to do is call has error equals to true and with a try cash flow you also can have a finally and this is where we're gonna pass the finally in right so finally it's fetching is false okay so there's a reason why I try to rewrite this whole thing in a try cash block because um this is how an awit block would look similar to this right a width is using a weight it's similar to a weight in JavaScript so we overall over here what we are waiting for is a promise right uh these two are actually the promise uh we we have two promise to wait right we wait for the first to finish and we wait for promise to resolve in a Json object and we use that results right this is where we actually use the results so uh to make it clearer I'm gonna re copy this and into another function I'm going to say uh get random talk image okay so here I can rewrite the whole thing with this breed so always get random dot image breed give me a response okay so you should give me an object and object that message is the image source okay so now we are closer to how what we want to write in the end in a weight block right so let me collect some of the code that we are not going to use right now right so the first thing of how you write an awits block is you use you start with a hash sign and you start with a width and and whatever you do you also have to remember to end it with a slash and a weight so over here the first thing we're going to pass is is the promise and the promise is this this is the promise that we're going to wait for and this is the results right so we're gonna wait for this promise come here wait for this promise uh and we're not calling Bridge we're gonna selected breed okay and review for this promise and and then we have a den which is when this promise resolve what we get over here is the object so we can copy object over here and with the object what we're gonna show is we're going to use object a message as the image source all right so we're going to copy this paste it over here and we also have our image so you can copy the image come over here replace this with the image source okay and over here we also do a catch right if there's an error so cache is also one of the uh thing that you can have in a weight block so you can catch an error and the way of handling it is to so when this is true we're gonna show an error message right so we're gonna copy this and paste it over here oops something is wrong and now when we are waiting when we're waiting we show a loading right so this is what we're gonna show in States so we when we are waiting we have loading and when we have results we're gonna show the image and when there's an error we show up something is wrong so now as we change you'll see that we have loading okay let me commence this out so that you know we are not looking at this uh we have loading and we change we have loading and then we have a new image right and if you come over here and if we purposely change something right typo and what you get is oops something is wrong so uncomment this we have our dog image back and so you can rewrite this using a width block and what we end up is we can throw all of this away we don't need all of this anymore right we don't need this uh don't do this all of them is we don't have need to write them anymore just need a function that returns us a promise and we can call that function over here if you don't want you can come over here you can have a variable called Promise or any variable name you like right so this will get evaluated every time when selected has changed and can use this promise variable to replace this as well so now it is the same so which means that a weight can have any Expressions you want as long as that expression itself is a promise and there that and and you go right and every time this expression This Promise changes or any Expressions we even hear changes that returns a different promise then we will have to relay the whole logic block where we will show loading and then we resolve will show the results or if there's an error we show the cache block so uh let's take a comeback and take another look at the code over here that when we use an awaits block right so over here we instead of getting object a message over here like this using a property reference we could have um this structure it right we could have Destructor a message out of it using object destructuring and just assign the variable directly right you could do this as well uh and which block you can come over here and destructure it if you want uh it's the same right and then and the next thing I'm going to tell you is that some of this block can be skipped right the promise can be skipped the result can be skipped or the error handling the error block can be skipped as well does that mean well that means is that what that means is that you can skip it so uh to skip bits you don't even need uh to write that block at all you can come over here and say await promise dance and then you show the results immediately right there you go you can skip the results right or you can have a you can have loading but you skip the whole results right you skip the promise you skip the loading you can skip the results or you could skip the error handling as well right uh let's see you can just like how you would await promise dent what you can do over here is also you can avoid promise catch and do it this way as well right so in this case our promise has no error has no loading State you see nothing right so these are other forms of the obit block where you can have part some of the blocks uh be omitted because you don't have if if you don't have anything to show right uh this would lead to other interesting pattern for example you can use a width block to show only the loading State and when some so you can have a component called loading components and only only render something when the promise being passed to you is in a loading state in a pending State and whenever it's resolved or rejected you'll show nothing right so you could have some a component that like that so uh in this video we learn about how you can use fetch in as well component and we've seen by moving things around we slowly comes into weight and how we write it using async with syntax and we realize that actually we can have even easier to write an easier way to write it or a similar way to write it in a lot a weight logic block which kind of match the a width in a JavaScript block so we've seen how we can use a weight block and we've seen how we can omit some of the blocks if you don't have anything to show so today we are going to talk about key block not key each block is a key block so we've talked about a few logic blocks about if each await and today we're going to talk about key so what is the key block well have you ever have this scenario where you want to recreate elements or components when something has changed right it's not like you want to it's not if where you because of the condition you want to show a height it's more like if this condition is if this variable has changed I want to recreate component recreate the components or recreates elements uh sounds vague right who would want who wants to do that well I will show you an example and you understand why before that let me show you uh how to use a key block all right so over here I have one example a very simple example uh I have an input and I have a buttons so input is something I can type and buttons is when I click it will increments the count sounds simple right okay so what if whenever the count changes I want to recreate the input okay don't ask me why but what if I want to do this right so if I want to do this what I can do is I can come with here and say key so every time when you have a logic block you start with the curly brackets and hash sign so this logic block is key so we're gonna save this and we're gonna end with key and uh in the logic block we say key and then we write an Expressions so this is uh kind of like your reactive declaration or reactive statement right you can put in any kind of Expressions uh you uh you treat it like like a reactive statement so any variable within that expression changes this whole thing will be re uh created so the input will be recreated so I'm going to pass in count so every time when I click uh the number increment the number and when I change count this input box is recreated so how do you know it's recreated uh when I type something right and I click this you see that when I type in is it's gone right actually I didn't really I didn't go and change the value of the input but rather that inputs the previous input with all this value is thrown away and a new input is created in replace of uh replacing this current input right so when I click I create a new one and replace it that's why you don't see anything so this is the key block let me clarify a bit uh if uh when so the key block will whenever the expression has changed and the value of that expression is different so it depends on two conditions right first is whenever the expression is changed it will be kind of you will reevaluate the expressions like your reactive statements and to compare the result of the expression and whenever the result which is the value of the expression is a change then the content inside inside the key block will be recreated right all the so if you have input here the input will be recreated if you have a few divs or contents for example here I have another count and a divs uh all this will be recreated so what what is so good about this uh like what is the purpose of having this uh key block right so one thing uh I can show you which is based on something we haven't learned yet but I'm gonna show you which is if which is to add transitions so transitions so let me do like a fade transition so for transition uh transition is like an animation where it it applies to element when it is created and added to the Dom or when it is destroyed or removed from the Dom right so this animation will play uh when it comes in or you will play when it goes out so I can add an animation to fade in when uh when this div is is is created so now whenever I increase uh the number over here you see that this div is destroyed and created right because discount value of count is changed has changed so this div will be recreated every time and therefore you see that every time when it recreates you replay this uh fade transition that's why you can see that it's it's come fading in every time when you change the value so this is probably one of the use cases that you would want to use with key but there's another case where I feel it's even um it's not just about animations there are cases where you want to recreate components so over here I prepared another example where over here you can see that this looks like a chat app where you can click on different users and you can type message try to chat with the person right right now you're talking to Charlie or Ben or Dawson right so of course you see but you over here you see that does not really work over here although we have a list of names and whenever we click on one of it we will change the selected friend right I use each block I use a radio box to buying group we've learned that before uh and we right over here we pass the selected friend to this component called chat so in a chat component what we have over here is a um yeah we we have a props called friend and we read out the name uh we have chats and we try to load the chat what we don't what we didn't do over here is that whenever a friend change we actually have to uh reactively update all the different inner states right for example over here the name name is initialized whenever we create a chat component and whenever this props change we actually never update this variable name that's why you see talking to name is always the same person even if I switch to different people so I can I can use reactive uh statements that already declare the name every time when I change right I'm talking to band I'm talking Alfred I'm talking Dawson all right same thing goes with messages over here when I type something what you expect is whenever a switch to different users you want to um I'm going to clear this uh this this import input over here right so this input uses a buying value to bind value of the input to the variable called messages which is initialized to be empty string makes sense fair enough but now we kind of have to you know whenever a name change name exchange we want to initialize something right so we create a function called init and or or reset right we want to reset uh so we create a function called reset let me let me write it over here reset so I reset what I reset do is it will send message to an empty string so hopefully when I type something and I switch to different user it will reset by setting an empty setting message to empty string right and as you can see over here also one thing that is important is the chat message where when I switch to different users I need to load a different uh a lot of different chat messages so I need to come over here uh instead of calling it over here I need to paste it in the resets right it's it's kind of like reset whenever you change the name right it sounded weird when you change okay maybe when you change friend whenever the friend has changed we'll call reset right although we're not gonna for now we are not doing anything yet but probably we will use the friend uh okay maybe we use a friend's name uh to to load the chat so when I switch over to band you see that it's loading uh a band's message as usual Dawson you'll see that it's loading a Dawson's message but if I switch quickly you see that it loads Charlie's and then Benz and Alfred and then Ben and because it's the same components over here uh when when and and our logic is quite simple we just call this load chat every time when we change the friend and whenever it's come back it will update the chats right so uh you can see if I change quickly I'll update the load chain will be fired a few times subsequently very fast and whenever it comes the first one comes back to update the chance and then the next one will come and updates right uh so this one whenever we change when we call this function every time we we kind of have to actually cancel the previous one before we so it's like a reset your reset we need to cancel previous ones before we um load a new one so this is something we need to do as well so there's a lot of things we need to do like reset things whenever we switch uh to a different friends when you're looking at a chat app and actually you know what there's a very simple way of doing it right we'll learn about key and I say that whenever the keys expression has changed you will recreate right you destroy the elements and recreate elements or destroy components and recreate the component instance so this is actually a perfect scenario or use case to use a key um I let me let me undo all this right let me undo all this but I say let's name equals a friend's name uh let's message to be an empty string and then we call a load chat right we call a little chat over here so this is a perfect simple component where we don't have much Logics over here uh everything is is uh the initialized over here at the start and all the states are initialized to the style we don't really handle whenever like we don't really care whether a friend handle the case where a friend has changed and just treat that we just assume that it's not going to change right in this component so so the logic within the component is much simpler and when we come over here we can actually use a key block to say that whenever the friend has changed we want to recreate this chat component right whenever it's changed we recreate so things that you initialize whenever it uh will be kind of reinitialized because you you destroy this component and create a new one right definitely you will have a new brand new component with everything initialized and initial initial States right so your code over here is much simpler you don't have to care about whenever friends change you want to do something you can initialize all the things you want and the thing that you need to do is just just throw it away and recreate a new one right so the state over here that we in this example is much it is fairly simple right only a message fetching some data and that's all but if you have a slightly more complex more complex components where you have more uh in more states that is uh defaults to different kind of values based on different kind of props and things like that uh an easier way for you to is just to destroy the component and recreate if you want to reset the whole state right rather than having a function that tries to figure out what to reset and what not and handle all the things right so that's why there's this logic block called key which really helpful when you want to destroy uh whatever elements or components within a block whenever an expression the value of an expression has changed and this is useful when you want to reset everything within the component or elements or you you just want to recreate elements because you know that you have an uh you have transitions applied to elements so that they can replace or whenever it's coming in So today we're going to talk about context so what is context well context is a way for a component to pass data to all its children components always child components all this grandchild grandchildren in plural grandchildren children any component that is within this parent component will get the data right it's a way for you to pass the data to all of them so if you pass data from what we learned previously is you can pass by props basically you have to pass one by one but context is a way that you can set up and all these children components or its grandchildren components will receive the data so to see how we're going to do this how we're going to use this context let's take a look at an example that I've prepared for you so over here I have app.spel which uh shows a parent component so this parent component is what we're going to focus on right this parent component has a child one child um and this parent component will shows a the child and pass the color called red right so now we have a child component which has two grandchild and to so to pass the data down we have to pass this color to when child a and grandchild B because we need both of we need to color in both of the components right grandchild a uses the color to change the color of the text so as you read when child B use the color to show data right show show the color as a text so you can have uh as many components as you want over here right say I'm gonna have another child child two which uh I'm gonna create right now but let's color and I'm gonna say ciao two the color and maybe add some weird text over here and we're going to import child too so come over here and say import child two from ciao to and I'm gonna use child two and also need to pass in the color red right invalid tag name ciao hold on what is okay child two ah okay this is uh okay so you see the parents so once okay let me I I have two color rates over here let me just make it nicer I'm gonna declare a color called red and as you can see if I want to pass down the color I need to do it one oh on All My Children components and for each of my children if I if it has a grandchildren I will have to pass it down to each of them as well so that uh so you can see over here let me adjust this you can see over here a parent has two children child and child two and two grandchildren grandchild one a grandchild a grandchild B and you can see we have to pass the color down layer by layer to each of the components so alternate of doing this is to use get context and let's take a look at how we can use get contacts to do this instead of having to pass down color level by level first thing first is I'm going to import get contacts from svelte and I am going to sorry set context so the parent will set the context and all the child or grandchildren that needs this value will will use get context to get it from them so I'm going to call set context and I'm going to pass in two parameters so set context takes in the first thing is a key and second thing is the value right so you can actually pass in any uh you can have multiple contacts for one component and it depends on the key of uh what value you want to pass in right so when you call get context in the child you will get contacts with the same key so they can get the same uh some key of the context right so over here since we're going to pass colors we're going to name it color as the key of the context and the value of it would be the color rate all right so I don't have to do this anymore I don't have to pass Carl to all my child right so let's see ciao I I don't really need color over here as well so can I remove this and I'm going to pass it to grandchild a because you get it from the context for childhood who we actually need color right so the way we get it is we're gonna say Imports gets context from svelt and we're gonna get contacts I'm gonna pick in the same key so the parent use color so I'm going to use the same key over here so um so they will return me the color so I can use the color right now right so you can see it's updated to color to red so um in internally context is like a map and this is the key to the map which means you can pass in anything uh that you can pass as a key to a map right so um if you worry about getting conflicts then probably you can pass you can you can create an object right and and pass and use that object for example I can come over here and say a context I can create a key so this is a an object that you created and you can import this and use this key in your contacts right so because um so because the data itself is the the key itself is by reference because it's a map it depends on the reference of the key then you can instead of worry that maybe you know what if someone else have this context name color will I get conflict and this way you kind of can ensure that this key will always be unique right because this uh if you if Because unless you get a hold of the reference of this object you'll never create an object that has the same reference as this let's kill it over here so I can actually come over here and do this instead right uh now you see it's not available but I can come over here and import key from Context and replace this you can see now I I can read it out again right setting with the same key and this key is an object reference and I'm going to get this from there so I can and as soon as as long as I ensure that the key reference is is unique then I can make sure I I basically I'm sure that I don't get conflicts with naming keys with your contacts right so let's let's finish this let's come over here grandchild a and you know import get from the context so actually I can copy these two lines these few lines which is to get context import get context from svelt and then import the key and then I use get contacts with the key to get the color all right let me copy this over for grandchild b as well replace this you can see now grandchild B is a also get the value rate all right so all the children components grandchildrenal components will get the same value from the context right now I'm going to create another component called a parent 2 that's felt and in this parent two component I am actually going to import this a grandchild a grandchild a from Grand ciao and I'm gonna show you why in the moment but I'm gonna come over here and uh do this and I am going to import parents two in the apps that's felt so grandchild a okay the now you okay so the grandchild actually gets contacts and from the parent and use it as a color for the text right so the context over here for parent uh this parent is that the context value of this key is the value for this context is red right so all grandchild a gets the value called red and then set the color as red but the grandchild in these parents too uh receives nothing in the context so most likely what you see if you try to console out the color you'll see that one is red and one is undefined because you didn't Define the context uh within this for for this component uh grandchild a right this grandchild a lives within parents too and lives within which lives within app and app does not set any contacts parent 2 does not set any context so it does not get any value from the context so we can actually come over here and set it up so we're going to say import sets contacts from svelt I'm going to say set contacts okay I need the keys I'm going to import the key as well import key from context key and I'm going to say blue right as soon as I do this you can see this screenshot a which is in parents 2 which sets up the context which value is blue and then now I get it and I can't I install it as blue color right so one so it depends on where grandchild a is located whether it's within the context of the parents the first parent then you get color red which in the parents two you get color blue and context itself can't override each other so say for example the in this example we see that parents creates a context right uh which is color red and now I have child which I have grandchild a and grandchild B right let's let's also import uh grandchild a okay in the uh in the channel 2 I'm going to use it over here so this is still within the context of the parents which which has the color red right but what if in the child who I'm going to set a new context here I'm gonna import this okay I'm gonna set a new contact with the same key right so although this uh grandchild uh this child 2 receives a context from the parent which is the red color but from this channel 2 on below it will set a new context for all the children and grandchildren and this context is going to have a value called Green right as soon as you do this all right let's let's all right it does not matter the order but as soon as you do this you can see that actually the order mentors okay let's just do this you see that everything below color is going to be green right grandchild a is is is Green Oh although it's within parent B uh sorry parents the first parent right it says read but then parent inside have a child to child tools that's a context called Green which overwrites it right so how do you think about this is actually you you try to it it matters on where grandchild is being created so it looks up to the parents right so the parent has uh the parent has one A Child two child who has contacts then you will use that one right if it does not you go up again one level and see parents parents as contacts yes and then you use the parent one right so as soon as it finds the value then it will be override overridden right and apparently the order of set contacts and get context matter right so I think in in terms of implementation it's a very simple map right so if you set the value first for this context then any time later on when you're trying to get context from this mapping it's actually being uh overlapped overwritten right so now you get contacts it's the value called Green rather than red but if you get first and then you set it later on then you get uh this still gets the one from the pattern which is straight and then this will over override it and become green right but this will only override for all these children right it does not matter if you come over here and say uh grandchild sorry I think it should be come over here and you know the order of child one or two uh it does not matter right because uh this will only override for itself and it's all its children right so whether it's it's sibling it's uh whether the siblings whether you you override the context first for yourself and then you know whether does it affect sibling well it does not so here you go having a context where you set up a way to pass data to all your children and grandchildren right um there there's a few rules on how you use this basically first is that set context and gets context has to be called during component initialization meaning right here right you can't call it later on for example sets timeout you can't do it like this right so this is similar to a common life cycle methods you can't call it outside component initialization because this function itself needs to know what other com what is the component that is initializing right now and then set the context to that component so you can't do it inside set timeouts same thing goes with great context right so that is rule number one and rule number two is that it's not really a rule but it's it's if you take a look at here you get context this function will be only called during initialization meaning uh this value will only be read out during initializing this component right meaning again meaning if this value is like a state where you change it dynamically it won't reflect over here right this this you reach up once so uh it won't change later on if you change the value of the variable in the parent today we're going to talk about how you can communicate through the context in the previous videos we talk about how we can use context to sort of pass the data to all your descendants all your children's or your grandchildren's components and today in this video we're going to talk about a more in depth about how to use context to communicate between the ancestor the parents and all its descendants right so today we're going to focus on two directions of the communication first is how you can send data from the parents to all its descendants and of course we're going to talk about how you can from all its children's and descendants send data updates the parent right so we focus on twoway of course the first way from parents to all its descendants we kind of have seen how we can do that in the um in the last video when we talk about context but there are some more things I want to add on so let's take a look at this example over here just my mic so in this V in this example we have an app component and within the app component we have a parent component which uh shows two children component one child one and child two uh in terms of code they are pretty much the same it's just that you know uh just want to create more children over here I could have um actually on a hindsight I could have just used the same component and that does not matter actually uh nonetheless just leave it here nonetheless uh what we can see over here is we want to pass the color the color which is red we set context over here we pass down the color from the app and you see that we don't pass it through the parents so the parent does not know about the color at all it does not pass like from children to all these grandchildren but rather we set this context in app thoughts felt and all its descendants for example in child one and two we can actually get the color by calling get context over here we can get the color um color and now you can see that the color is red so you you see the red color right so all this set context and get context is called during the component initialization let me reiterate it's set context and get context it's being called in the component initialization meaning once this is initialized uh you set you call this set color now right now uh you basically set this color to context right uh later on if you change it anymore it does not matter right you only call this function once this is a variable uh and you pass in a value so you pass by value because it's a string is passed by value this value is already in the context there's no way they can change this value anymore unless it's an object you can't change the object but you can change its property right and over here the same thing as well in the ciao once is being uh initialized where this function get context is called you read this value out from the context you have this color and that's it you can't do anything you can't uh basically this this is done right you you read this value anything change in the context somehow by whatever means it does not matter anymore because you read this value during initialization and that's it right you don't call this function anymore right if this color is a value it's like a string number uh or Boolean then that's it if it's an object the object reference does not change anymore but the property could have changed uh you could have maybe set timeout or interval to to constantly read the value and see whether it's changed right it could change because you can change you can mutate an object a property value so uh and that's what we are going to do actually because right here I have an input call which is a type of color which is a Color Picker and I want and binding is a variable called color so I want to change the color I change the color but it does not reflect over here right so there's two reasons first is this set context is set is called once and that's all right so if you um try to change the color it does not matter to this anymore so one way I can do is a probably I would say two ways one is maybe pass an object so I'm gonna say uh uh a clear object called color object and the value of the color J is called color I'm gonna say rate over here right so I pass this object down and when I bind I actually use color object dot color right so when I change I actually change the color object the color okay I need to change this as well so you see that this is this is changing on real time and then children I can read out and this is an object right so what it means is that I'm gonna say color this this guy context returns me an object and I can get the color from color object dot color right this gives me the color so I can change um still it does not reflect but in appearance I have a checkbox that I can show and hide component if I unhide and I show again now you see these values updates uh there's no updates actually because you you show you hide it you you destroy the component and when you show you actually recreate a new one and give you a new component when you initialize it reads from the context and you realize that okay this object value okay Char one this object value uh the property the object itself the reference of the actual cell is still a Sim but then the property value is different right now you read a different value from this property and that's why you see a different color actually why I'm gonna remove this file because I'm gonna change one for now so just but hope you get this idea right so you you can change the object and now you get it updated but if what if I want to change this color and I want to see the sorry I wanted to I want to see the color change on real time as well well there's a few ways you can do one is um in future videos you'll probably see this I'm gonna talk about store and you can actually pass a store over the context and you can have a reactive context via the star right without learning about that we can create like a simplified version of it which is um I can say that let me think okay I can passive create another function and this object is not just about the the color itself I can also have my own methods which is say I'm gonna have this listener kind of mechanism where all my children can list register itself to listen to it so that okay so we're gonna add uh listen let's say listen to color change all right so they can listen to it and when the color change so that they can notify it and read the latest value out of it right so I'm gonna pass in a function and here I'm gonna um maybe keep a list of all the listeners so I'm gonna create a set new set uh this set is going to call color listeners so I can come over here and add the function in and every time when I change the color right every time I change I probably will have to notify them so I can come over here and say uh color object uh dot color so this is a reactive statement every time this cloud has changed I would have to execute this statement so this statements what I'm going to do is I'm gonna say a color listeners.4 h listener and maybe I'm gonna just call this with the new color right this is a so I'm gonna look through the listeners and call each of the function with the latest color right whenever the color change so this is a reactive statement and when does it uh execute reevaluated it will be Revisited by when all of these variables has changed right so what are the variables over here color listeners is one color object is one listen is not because you create a listener over here and that's all right so colorlessness has changed our color object exchange we will um uh revalid this statement but because um over here we only call them add method so add method does not cause a re and method is neither like assignments or updates uh Expressions so basically this statement over here um will not Trigger rerender or revalue this statement right but that is okay that that is uh what we want actually as well uh so let's after once we implement this listen color change gonna come over here and say in well let's see if the color object has another method right at listen to color change and this can pass in a function and the function itself returns us a new color right new color so what we can do with this is probably we can set colors length so color equals to new color let's see oh this is color object so as you can see now if I change my color you can see the color has changed over here as well right because every time we change the color we'll call The Listener and you can get notified when the new color is changed and we update the color States within this child one component right so um when you pass data down it's only set up during the initialization right so the value that you pass in will be there during this like when you it will be set during initialization when you call set context right so if you pass a string a Primitives like string numbers booleans then they will be there will be it you can't change it at all but if you pass in a more complex objects like objects or arrays then you can still mutate them although you can't change the reference in the context anymore but you can still mutate them right and then during on the other hand get contacts will be called during initialization so um if you if you destroy and recreate you will you call this function again so if you pass in uh objects during uh from a context then if you mutate the object when you call when you initialize the object a component again you probably read the latest value of the object right but you still read the same object reference right that you can't change that anymore so if you want to uh socalled reactively updating the context value and get it updated from the child then you probably have to set some sort of uh pop sub mechanism where you have a publisher of changes and listeners subscribers or listeners to subscribe to the changes right over here we kind of manually implement this and there's a lot of things that we didn't handle for example we didn't actually uh do a cleanup so this listener will only listen a function and we didn't clean up right if you uh if we a few times actually create a multiple of child ones functions over here and we actually didn't which are added to this set and we didn't really remove them at all and this causes some issues like memory leaks uh which can be easily handled if we are using store we should be covered in future videos right stay tuned for that so we've seen how we can use get contacts and contacts to pass data from parents to the child right now we're gonna take a look at a different direction from children from all the grandchildrens and children from descendants to send data all the way to the parents and usually when you want to send data from a child to parent in normal way what you do is you use a callback or you event listeners or callback functions right that is how you pass data up if the parents want to know something from you you want to pull something from you maybe they can use like a binding to binder one of your props to a variable to the parents variable so they can reach so that you can update this uh parents States from the props from your props but the other way where you want to actively pushing data from the children to the any children to parents usually you uh you still you you're taking a function where of course you still have to get the parents to pass in the function but then you can call all this function anytime you want to identify the parents that hey I have something has changed so this is what I did for the counts so in in child one I have a buttons which I use a component event and also about forwarding events when you don't know about forwarding events from components probably you can watch my previous videos so links in the descriptions as well so this is to forward the event I followed a click event to the parents and parents forwards click events to each parent which is the app which listens to this event and registers these events to on click so every time when click happens or increment accounts so when I click any of this button it will increment account so this is this is a lot of things to set up right uh child have to dispatch a component events to the parents parents would just listen to it and dispatch and to the app app has to do it as to register it right if you add a few more layers to the parents each of them have to kind of forward the events upwards which is a bit tedious um it's just it's not like it's a bad idea maybe you you want it that way uh there is reasons where you want to do a component event forwarding but in this case we actually don't want it in this case we want a very simple setup where um I want my I want to create I want all my children to tell me if they want to click something right so what I can do is um I can set set up a context as well okay instead of context call click and I can pass in this on click function over here right so this what this means is that any children Within Me can read this function called on click via this context called click and they can call them call this function anytime they want so um with that I'm going to come up with you in a trial and I'm going to say I'm gonna come over here and get that function right so on click uh get contacts click and I pass this function to my own click okay and now I can actually remove the parents component for event forwarding can also remove the event listeners from over here and let's take a look at what we have right so we get the click function for context and we call it right and lo and behold it still works right now you don't have to care about how many layers in between all the children or grandchildren all your descendants can actually read these functions that you want to call back and call them at any time they want and you can actually pass data up if you want to right so for example if over here I say a on click uh I can if I say I wanna uh uh maybe like a Delta and so that I can increment my accounts by a certain Delta right I'm increment by one increment by two or any numbers right then I can convert here and do that if I want to right so this is Click me plus one and I can have a button called click me plus two which increment by two and see if I click the number one I increment by one click number for two increment by two right I can pass any kind of data up this this is now the CH all your children will be like you're a publisher of events and the app can now change rules to become like a subscriber of events I want to subscribe this function called click anyone's can just call this and notify me something has changed right you can any of my children can let me know when something has changed this is the function to call right I have set this context just read it and by design of context uh what so amazing is that your child one can be in and different parents right it could be with under this m.cell it could be maybe under app2.felt as long as they provide this function called click uh this context called click but uh have a different implementation of it it does not really matter for child one right where you are underlying where uh no if you under okay which component you're under then you will call which uh which contacts you're under with then your call which function that context is set to right so that's all for this for today so we have learned about how we can communicate uh from parents to children via contacts where you see a parents two children by how we pass data out and we also see how we can pass data from a child all the way to the parent today I'm going to share with you all a concept in svelt which is the star in particular what is a store and also why do we need a star is felt so to explain this it's easier to look at an example and so let's take a look at this example that I've prepared for you so over here you can see that there's a sample component in the app and in a sample components we have one input and a heading which tells us the value of the value variable so over here when we in the inputs we have want input events listener so every time when we type uh the it will trigger input event and then we will use the value of that input to updates the value variable over here so if I type something you will see that the value changes immediately right so within a sprout uh components you when any variables is like a state within a component right when you change it uh you the reference of that variable will be updated immediately so you can see that changes on the screen immediately right but what happens if we are going to break this input and the heading one into two components and how do we share um variables or States across components right so firstly let's do that first I'm gonna say uh inputs component and I'm gonna have heading component so on the inputs what I will have is just the inputs right over here and in a heading I will have just the heading right so there's no callback function so just a heading so how do I share this value with this value in the input over here how how do how do I Bridge them together so that I can share the same variables or States across the components right so um if you know about uh props probably you can pass it in as a props from one component to another component um but what if in our case the components are side by side like a sibling how do I pass one State's inner state within one component to another to its sibling component um probably you might think of maybe we can lift the state up we can define a variable called value over here in the parent com in a common parent component and we can pass this value down to the output so the inputs will change this value and you pass that value to the output yeah you can do that but what if I have a few other component when in this case when a contract for example to show that this may not seem as easy as you think for example if I have a parent component that renders the output and then have another grandparent component that renders the parent and finally you use the grandparent component in in the common parent right so this app right now app.fl component is actually a common ancestor right they don't they are not exactly the input the output and input is not exactly C blinks right now it's like a nice or nephews grandchildren right uh yeah so so how do you pass the states do you pass one by one level by level or you create a context over here and share it across well you can do all that but you might think one question is that does the app does fail should the app.fl knows about the variable value right because over here it acts like a mediator or ancestor that tries to mediate all the verse all the different states across all the children or the grandchildrens like a hub that controls all of them right is that uh does this app does felt component should the app.strual component knows all of this should it control all of this or is there another way or an alternative that you can do well we do not have to share um the states and across like the component hierarchy you can have it as a separate file so maybe I'm going to call this as data.js I'm gonna move this to the front because this is the thing that we're going to focus right now so why not we have this data.js that exports a variable called value as well as a function that we can update it right spots a function that we can update the value right and in this case what we can do here now is that you can come up with the inputs and we can import updates from data and we're going to call this update instead and in the output we're going to say import value from data and use this value in States right so now we can still share across um we can have a common file that does not that is beyond the app component hierarchy and all these components any components whether it's it's your sibling your grandchildren your niece nephew or your grandparents all of them can just import this file and you can share the states within this file across all the different components that scatter across your application right so here I import the updates from the data for in the input so that we can update that variable and over here in outputs we can import the value and hopefully it's changed right so let's try it out type the value oh so the value does not update well why well that's because uh this data.js is a Javascript file uh it's not and it's felt component so the variable when you update it is not reactive when you try to change the value over here yeah it's changed it's updated but it's not reactive over here in this output of swelt does not know that the value has changed it will not rerender or update the value over here it does not know that it's updated so what can we do well again we can use like a subscription model um like an event listener kind of style where we can subscribe to the changes that's happening within the data.js and then what is when there's a new changes uh we try to rerender ourselves right so what we're going to do here is I'm going to have a function called subscribe and we can take in a function that lets us know let us know that what are the functions that you need to trigger a call when something has changed so um right now I'm gonna have a variable called subscribers and a subscribe method is nothing but pushing it uh pushing this function burst dot push into this subscribers list and when we have an update we're gonna do is we are going to notify all the subscribers that hey this value has changed the subscribers start for age function we'll call function all right I'm going to three I'm going to call each of the function tells them that hey uh the vet we have a new value so over here in outputs Source felt we can call subscribe and we can sub call this function to subscribe to change um okay so over here what should we do right one simple way we can do is that instead of using value directly so over here what we know is that here the value definitely has changed but how do we tell that this has changed or what we can do is that we can say value equals value okay that does not work because you can assign to the value so maybe we can have a variable called underscore value we can use it here actually use it here as well and let's see so we type yes let's change right we subscribe to the data over here and when there's a new value of the data we get notified and then we update our internal state which is the underscore value variable and when it's the internal state has changed this will be rerendered will be updated and you will see the change reflected on to your Dom immediately so um the concept of star is this right uh you can have a variable or like a data or some sort of states of your application that is not uh presented with that is not uh part of your app component hierarchy it's in a separate file right which you can import across different components it does not matter whether all the components that's importing it are siblings or nephews or grandchildren's or grandparents it's not a matter of the how their importing hierarchy within the component app component hierarchy right and then you provide a way to change that value and then to know that when is the value is updated provide ways to subscribe to it to know that the data has changed so that uh you get notified right so one thing we need to do over here as well is that when we subscribe we also need to unsubscribe right so there's two ways one is you export another function called uh unsubscribe right or and then so here is that subscribers dot supplies subscribers Dot and next of FN okay we can remove it are an easier way of doing this is that instead of creating another API we return this function immediately from the Subscribe method right so here what we can do over here now in output.s field we can't import uh on Mount from sweld which we can subscribe to uh during on Mount and one cool thing about on mounts is that you can return some a function during in the on Mount which will be called when this component is unmount right so or when the component is destroyed so here we can return this immediately which is to return the unsubscribed method so that um this function will be removed from the subscription list or else if you um still have still being subscribed to it then you know you this will always be called whenever the value is changed although this component is no longer on the screen and then it tries to update some sort of component or it will create some sort of a memory leak because you're trying you're still trying to update a component that is no longer being in use right so it has to be retained in the memory so one way you can do it is doing like this right it's on Mount and then return a subscribe so uh in essence this is a very uh this is a concept called store in svelt you can Implement a store like this yourself or you can use some builtin uh store Creator function that is provided by swelts let's talk about um builtin shell store function right these are builtin functions provided by salt allows you to create store easily right in the last video you've seen me create like a subscribe function a method and update methods and then we manage our subscribers manually you don't have to do it your own there is a builtin's felt functions that you can do so how you use it is that you import them from asphalt star so there's two uh two apis one is the writeable and another is readable right and as the name suggests a writable star is read and write that allows you to read and write and readable store only allows readable only right so both of the store has a method called subscribed which is pretty similar than what we have over here that allows you to subscribe um to subscribe if the store itself has changed so to create it what you can do here is that let's Value Store okay I'm gonna yeah Value Store equals to writeable and then you provide a default value so over here I'm going to mimics this so I'm going to say empty string okay and I'm gonna export this right and actually I don't need all of this I'm gonna comment out and when I come over here in the input so I'm going to import the uh value Star right okay Value Store over here so to update it there's a method called set so I'm going to say values value star dot sets this value right and then let's take a look at a over here so now we don't have value And subscribe we only have a value store what we can do here is um instead of Define it now over here we can Value Store dot subscribe with a value I'm going to update value equals value over here same thing it returns an absorb scribe method a function so I need to return it over here change it here like this and yeah we are done so let's try something over here see it's updated it's reactive so uh using writable and then passing the initial function allows save others a lot of time implementing ourselves uh previously we've seen that we have to implements like a update then subscribers And subscribe method all of this is done within a function called writable and this is so much easier right So today we're going to work on readable Stars so you may ask like if the star is readable only which means you have no way that you can update it from the outside then how does the value of the star changes well we're gonna look at it right now so over here we continue from where we stopped the last time so just a reminder previously we have a writable star which is going to be updated by calling the store.set so over here I'm going to type something you will see that we update the store value and then to listen to what uh when the storm has changes we use the Subscribe method to subscribe for the store changes and the Callback function will be called with a value that the latest value of the star so right now instead of writable we are going to change it to a readable star and with a readable star there is no way you can call the set right it is undefined it's not a function so over here what we're gonna do is gonna removed it remove this input components for now right because there's no way they can update the store from the outside so with a readable store the first argument at the same as writable store is the initial value so over here if I change the elliptical value to hello then you can see initial value is hello right now and then one thing that is slightly different or with with the writable store is that the second argument is actually something that you need to do because without that you have no way that you can update the readable store no way that you can update the value of the star so the second argument which is optional for writable star is mandatory for for I mean there's no error but it does not make any sense if you don't provide it right so this function is called um a start stop Notifier what does it mean is it means that this function will only be called when there is someone subscribing to the store right if that's so imagine you have five people that's kind of subscribe the star from the Zero from nothing from zero to one uh from from no one subscribing to someone subscribed then this one should be called but then if you subscribe it multiple times this function will not be called anymore so it's only at the edge of no one subscribing to someone subscribing and this function within a function you can return a function so imagine this function is like your cleanup function you want to clean something up so this function will only be called when from some subscribers maybe like one to become zero subscriber then this function will be called so it's a cleanup so when when it reaches no one is subscribing then this one uh this return function will be called right later on we're gonna look at uh we're gonna see we're gonna console out and prove this uh it works as I explained right so this function takes in one parameter which is set and this set is the same sets where you see in your readable store basically in a readable star you have a way that you to set the value of the star this is exactly the same one right so if I come over here and I say Set uh world you can see that initial value is hello and then you set it to world right maybe it's too fast your eyes cannot catch it it's okay we set the timeout over here for one second I'm gonna call sets from here so one second later it turns to whirl right hello world so now you see it right so uh as anything goes when you try to set something up like set timeout you need to clean up right what if uh right before you even like trying to set the world um everyone subscribes from your store no one cares about whether your timeout triggers right so you need to clean up so when you set a timeout you need to clean up so I'm gonna say uh timeout ID over here and I'm gonna say clear timeout over here so now I want to show you uh the point that I was trying to make so over here I'm gonna console out uh I'm going to say start right so you only see one starts uh right because we only have one subscribers over here but what if I remove this then this never started right the store itself has no subscriber then it will not start at all but if you come over here value store.subscribe when I'm passing a function over here okay um there's an arrow over here it's okay let me save and refresh yep I think the error is gone um yeah so probably a bit error that what happens just now is that we as this whole code is executed as I type right so I think when I type this is not a function so it it creates you'll see that error and because as uh every time we start we every stroke that we type in we create a new timeout that's why that error keeps popping out so now I clear it it should be gone so as you can see it says start and if I paste this multiple times you can only see one start where if I remove all of them no start right comment only one starts okay so no matter how many times you subscribed uh it only have the start only call one so this you can think of it as you only need to set it up only once so uh that that creates the value of the star and if you subscribe then unsubscribe them answer right uh one two see three four I call all that I'm subscribed uh one okay so this function I'm going to say console.stop and if I call unsubscribe once it's not going to call two it's not gonna call um tree still there and let's remove the last unsubscriber and then you can see a stop if I comment one of it you only see start right so this tells you that this will this function is like setting setting up the store and only will be called when there's uh starting that there is one at least one subscribers and then the subsequent subscribers you will not see this being called and when you tear down uh only this return down function the function and return will only being triggered when all of when there's no more subscribers left right until the last ones unsubscribes uh this will be called right so you can use a readable store by this way by creating a function and you can use this set to set whatever the value of the readable store is so in the previous videos we talk about the writable and the readable stars and I told you that in this video I'm gonna talk about what makes the two of the Stars similar which is both of them actually follows a strong contract so what is a star contract well before I deep dive into what is this contract itself let me show you something that um a secret syntax that's felt provides that leverages on this store contract so if you have a star that follows the contract you can use this secret special syntax to get the value of the store right so let's take a look at this example that I prepared over here so in this example I have two stores one is a readable star which is star one and the second star is a writable star star 2. right over here I have an inputs box which I um imported the store tool and use the store.set to set the value of the store and over here in the output of spelled I basically on the mount I subscribe to both of the store and then as the value changes I assign it assign the store value to the first value one variable and a value 2 variable right and over here you can see the value of the Star by value 1 and value 2 over here um so the first star is a readable star which the value of the star is being Set uh via the set interval so every one second you will see that the value will be incremented by once and for the star 2 we set it in the inputs box right so when we type something we will set the value of the star over here right like this right and as I mentioned both of this star follows the star contracts and because of that we can use this secret special syntax that provides which is a dollar prefix variable name right so what does that mean so if for example if this star 2 follows a star contract instead of just using a star 2. sets and a value we can use a dollar prefix of that store value and we can assign variable to its direct the value to the variable directly right so dollar prefix of the store variable so this is a special variable um that you can't Define anywhere um so if you have a variable like this basically you are referring to the store but the value of the star and you can assign value right trade it as a normal variable you can assign value to that store like this so is so let's just try it out right so over here when I try to type something as you can see this behaves the same as store tool that sets the value right so instead of sets value we use a dollar prefix of the variable equals and your assign value to it to that variable and it behaves the same right so is that all that um a star that follows a store contract can do of course not right over here um this is only when we are trying to set a value right how about over here when we're trying to subscribe to a value uh subscriber value of the store right if you if the star one or Star 2 follows a star contract uh we can directly access the value of the star using a dollar prefix variable of that star right so for example over here I'm gonna say store one so this will get the value of the star of star one and use a dollar prefix right so this is a shorthand for a lot of things right first thing is subscribes to the store so it does this it subscribes to the store and then this variable dollar prefix store one will always have um will always be the updated value of the store and also when you unmount it it will also unsubscribe from the store right so it also does this thing when you return the unsubscribe function where you unmount right so it does three things subscribe to the store and then this variables the value of this variable is always updated as the value of the star and then when your component is unmounted it will unsubscribe from the store as well so you don't have to write all this to clean it up you can directly use a dollar prefix star 1 to access the value of the star right over here let's do this as well store two and as we type you can see the value of the store is updated and reflected immediately right so now we can say goodbye to subscribing to the store on Mount you can even remove the on mounts and yeah everything still works fine right so this is the power of the store contract if you follow the star contract anything any variable that follows a star contract you can access the value of the store via a dollar prefix syntax and then you can set the value of the Star by just assigning it right so what is the star contract so listen carefully right so as a star um probably you have known you need to have two variable one is uh two methods one is the subscribe and another would be okay so I'm gonna call it star tree another would be the sets right so set is for you to set the value of the star and then subscribe is to subscribe from it right and as we create this and we as we use the store probably when you call subscribed you probably will want to pass in a function right the function that uh a subscriber function and this subscribe method should call this function immediately synchronously right you need to call it call the value of this call this function with the value of the value of the store immediately right so right now I call it immediately right you cannot say uh set timeout and then you know call it later uh in in the next take or next timeouts and things like that no you can't you need to call it immediately right you need to call it with the current value of the store or maybe your initial value or all these things you need to call it immediately and then the Subscribe method should also return a function that's unsubscribes this function from the subscriber list right so one way you can implement it is probably create an array called subscribers and then whenever you have a function you're gonna push it in to the subscribers list and then the return function probably will have to remove it so subscribers dot Supply subscribe person and next of FN one right so your subscriber method again let me recap text in a function and you need to call the function immediately synchronously and then this subscribe method should return a function that unsubscribes this function right and then when are you calling these subscribers when are you noticing notifying them it's up to you right it can be uh maybe like you have a time timer for example over here maybe you uh say set interval and maybe it's a set interval for one second again and for every one second we'll Loop through the subscriber list subscriber of subscribers and call them with the value of the Star right so over here I'm going to call um uh uh let's see probably let's create a variable called uh I I mean okay let's let's just create a use the time so this is the time right now right so I'm going to call this so uh so this star tree follows a star contract which we right now kind of Define the stock contract for the Subscribe method uh which is sufficient enough that we can call store tree with a dollar syntax and as you can see over here this star tree values is updated on every second right this makes your star tree as your start three variable follows a star contract now you can access the value of the store via dollar star tree right and what is the value of the star well that will be whatever value you are going to call with the subscribers right this function is a subscriber you call it with empty string and the value of the store is the empty string if you call it with the current timestamp then the current timestamp would be the stop value right and if you're trying to access it try to set the value of the star using dollar star tree equals something then the sets method will be called with the value right so uh yeah depends on what you want to do with it right you can call you can set a value of the star and then notify all the subscribers that is one way so for example let me show you for example if I sent and say subscribers uh let's copy this for over here for each of the subscribers you're gonna call notify with the new value right and as I okay let's see we have a button on click um click me right over here when I say star 3 equals um hello right so whenever I'm type I'm click on it the sets function will be set method will be called and it will notify all the subscribers telling that okay this value of the star has changed to this value whatever you are passing in which in this case will be hello right so when I click hello right uh it's it's updated immediate uh reflected back immediate because this set interval is still happening right uh if I remove this no longer see anything it's not going to update as a timestamp so when I click me it will turn into hello and it will stay there right so let me recap on the store contract you mandatory as a store if you want to follow a stock contract you would need to implement it's an object that you need to have a method called subscribe it takes in a function and you have to call that function immediately and then that function is your subscribers right so um you can return a function to remove that subscriber and to notify whatever the value of the store is you have to tell the subscribers right so you have to notify all the subscribers that a value has changed optionally you can Implement a sets method which takes in a value which is you want a value that you want to update your store with right so to kind of reflect that to tell everyone that your store value has updated you also need to notify all the stores uh subscribers right whether or not to notify them is up to you right you can batch them you can asynchronously call it after maybe after you set everything and yeah on the next kick and things like that but the outside world would not know what the value of the store is until you notify them right so this sets method is optional because for example as you can see readable store does not implement this you can't set the value of readable store because this set method is not there but the Subscribe method is mandatory right as soon as your variable follows a star contract what you can do is you can use a dollar prefix of that variable to access the value of the store as well as using assignments like this to set the value of the store right so if this is the star contract so in the previous videos we talked about how we can use store to manage applications state that is not constrained by the component hierarchy of your application and what makes Stars different is that um if the star follows a star contract we can use the dollar prefix variable to access the value of the star and automatically subscribe to the store and unsubscribe when the component is unmounted so in this video I'm going to talk about some of the application State Management libraries out there in particular how are we going to use them in a svelt application if we can make them to follow the star contract probably we can use the dollar prefix syntax with them So today we're going to look at one of the state management Library which is Redux right Redux has been well known in a react World where you use Redux with the Redux binding that allows users to connect and map the property from the store State into your application props right and you can dispatch actions to which will be run through a reducer which will create a new state of your application right so in this video I'm not going to talk particularly in how we're going to use Redux uh like it's not a relaxed beginner 101 video but more of how you can make Redux to follow the store contract and you can use a dollar prefix syntax uh in with the Redux store right so over here as you can see we have prepared some simple code to use reduction spelled I have a Redux file which I create a store from the Redux package so over here I use patch processors to define the process environment because it it reads that but once you run this which once you define this variable process in the window even if you remove it it will not cost anything because it's already defined right but you have to have it in the first run over here I use crit store from Redux package and I Define a reducer function which this function will tell takes into parameter a state and action which uh depends on the action you will Define the next States right this will return the next state based on the action and we take this reducer and we pass into a great store which over here will return us a new store and we're going to use this store uh there's two apis from the Redux store the first one is the get state so if you call get State you get a current state of the store and if you call subscribe you can pass in a function to be called whenever the state has changed right uh it does not takes in any parameter for the Callback function so to get the next stage you basically have to call a store or get State again to get this current state right so these are the two apis State guested and subscribed and then uh one more is the dispatch right so here you can dispatch actions so this action is the one that's going to be passing over here which if which over here you have a switch case to decide what's going to be the next state based on this action so here I have two function stored decrement and increments which I dispatch a decrement action and increment action and over here I show uh I'm going to call this decrement when I click on the minus button and I'm going to call the expression increment action when I click increment here you will see the state of the Stars changing because we have this subscribe method over here which will be called and then update the state variables every time when the state has changed so as you can see over here the Redux store does not follow the spell store contract in a few points right so firstly is that the function that you pass into the Subscribe method should takes in the value of the Star right you shouldn't call another EPA to get the state of the store or which in this case is the value of the Star right and secondly um when you call subscribe methods this function does not being called immediately that's why we have to manually set the state of the store by calling store like a state if you don't do anything the state will be undefined because this function will not be called synchronously immediately when it calls subscribed that is required for the store contract so we're going to fix that we're gonna wrap it with another object that does all this right so um I'm gonna keep using this star variable over here but I'm going to come over here and do the changes right so over here I'm going to say uh star uh Redux star which is we call it create star and then we're gonna return a new uh sveld star that follows a spell store contract right so here I'm gonna have the Subscribe methods and I'm gonna also have all the other apis that Redux stores provides right so I'm gonna spread this out Redux store and then subscribe subscribe sticks in a function which we're gonna call with Redux store dot subscribe um right I'm gonna call let's see the call with this function that's it no we're gonna call this and then for each of them we're gonna call function within this new function that we're going to create right over here I'm gonna call this function with the store dot get state so that the function itself right now um is being caught with the state of the star also we need to call it immediately when we call it subscribe so I'm going to do it here as well and similarly Redux stored or subscribe returns us and unsubscribe method which is good because we can return it immediately so that we can subscribe from the store and now this more or less follows the spell store contract so I can return this and since it follows that contract let's see spell store it's not defined ah okay it should be Redux store Redux store since it's follow the store contract what we can do here now instead of calling State and all this gonna say comment this out I'm gonna say dollar star right now uh this will give us the state or the value of the star which is the state of the redox star right so when you click increment decrement as you can see it it works immediately right and good thing about this is that if you unmount these components we will unsubscribe it as well because if you follow spells store contract we will do that for you now as you can see it's it's much simpler in a sense where to access the value of the star you don't have to call subscribed unsubscribed take care of subscribing as well as store against it all of this is being handled with just one dollar prefix variable right of course you may think or you may ask me all this complexity is being hidden but it's still being done somewhere which is being done over here which is like a wrapper to make uh your Redux store to a spell store right yeah maybe you're right but we can I mean this is pretty standard we can make it like a function and we can call it like make uh Redux store spell into spell store and I'm gonna pass in Redux store over here and I'm gonna copy all this in I'm gonna call return right this will return me a new uh spell Star right so I can call this over here like this let me so that it's easier to read yeah so I can do this over here right now uh right nicely formatted yep as you can see over here this still works fine perfect so now I have this function I can just call with any Redux store and it will mix me a spell store which follows the star contract so before I end this actually there's a better way of doing this if you are very familiar with Redux you probably would know that Redux has an API call and an answer right and an answer is the second parameter or the third parameter that you can call uh with when you're creating a Redux store right and this enhancer um it's like a higher order function that will text in the create store API and returns a new create store API and we can have this uh we can do all this in a real enhancer and just pass it in as an enhancer in a create store API right ideally similar is just using a different uh using a Redux API to do it instead of having to wrap this um make Redux store with your new store right so let me show you how you're going to do this so we're gonna say it's felt star enhancer which takes in a great store API right and then you need to return a new create store API which is uh texting reducer and initial States so create store API texting reducer and initial state right so over here we're gonna call Star equals to create store API with the reducer and initial state and then we can make we can return this which is return this so this is a new store we're going to create that enhances the existing Redux store so this is a Redux store I'm going to enter format this nicely here Yep this is a spell store enhancer and we can use this over here by calling create store with the enhancer right and yeah and we may try to do this it still works fine as you would expect except that right now we're going to use an enhancer instead of yeah wrapping the create store with another store right all this um this is I would I would prefer doing this because it follows more of like a Redux API style where yeah it already supports so why not use it use it right so yeah if you want to take a read on this Ripple the links is in the description I've talked about how uh spell store allows us to share application State across components without having to worry about the component hierarchy and this actually is a problem that is being trying to be solved with all those application State Management libraries out there for example Redux valtios and many many more if a star follows a star contract we can use dollar prefix variable to access the value of the star this saves us time in terms of having to set up boilerplates to subscribe and unsubscribe from the store if you can make the application State libraries that we want to use follows the store contract then we can have a very simplest experience using them in spelled application right so in the last videos we have talked about how we can make Redux store a special store which if you haven't watched it please click on the link on the top right corner and in this video I'm going to take a look at a different application State Library which is valtio right so valtio is a proxy based uh State library that allows you to wrap an object into a selfaware proxy according to them which you can subscribe to any changes made to that object right so so you can have a subscribe method that listens to any changes and when that change you can get a snapshot of the object at that point of time right so subscribe unsubscribe pretty much the same of the store so let's see how we can use it in Asphalt application so over here I have set up an example in code sandbox because of some package issue it's a bit hard to set up on the spelled Ripple so I do it on the code sandbox right so over here I have my app.spel and the data.js so in the data.js I create a proxy State using proxy from valtio vanilla so this let me zoom in a bit I mean hopefully that you guys can see it clearer so proxy well taking an object and create a proxy state which allows you from this data where we import from f.field allows you to change the data like this immediately right you can change this data any way you like count minus minus count data.com equal to something however like and to know that when this data has changed use a subscribe method from value vanilla so I use a vanilla version because by default value supports react but this is like the core of the value which just subscribed and snapshot and proxy right so subscribe allows you to subscribe Adidas state uh proxy state so we pass in the data and then or it will have a callback function so when when this function is being called we know that the data has changed so to get the snapshot off the states we use a snapshot so we pass in the proxy State and then gives us a snapshot so every time when you change because snapshot it gives us the snapshot so very simple way of understanding is this is that snapshot shows the exact point of like what is the value of the states so we use Snapshot to read the data from the states so we use Snapshot accounts over here on Assumption of the text over here right and when in whatever we want to manipulate data we just manipulate data directly right so over here we have a button that on click you say dot dot counts minus minus decrement it and data.com incremented and snapshot account over here and then we can also bind data.txt because using bind we are going to set the value of data or text directly um and then yeah and read the data text value from it so this makes the binding works as well so if we type something the snapshot will always get updated because of this subscribe method and you'll see the snapshot of text reflect over here same thing goes with counts increments and decrements right so if you take a look at the Subscribe method of the data well it does not follow the store contract right um so three points about the subscribing right so first thing is that subscribe is an API so it's not an object data does not have that subscribe methods so probably we have to create an object that has this subscribe method so point two the Callback function does not calls with the uh state of the Star right you have to call an API to get the states right and then point three is that this thing uh does not call this copy function immediately right it calls so you have to initialize the data of the snapshot over here yourself right so because of all these three points we kind of have to make it have to turn this data into a spell store following the store contract so over here let's see what we can do over here so I'm gonna Define a function a util function I'm going to export function to svelt star right and then taking the proxy state and we're going to return an object so over here we are not going to change the star so we just make it readable which means we only need to implement the Subscribe method subscribed takes in a function which in this case we should subscribe directly to the proxy and return the Subscribe good thing is that it returns an unsubscribe method so we can return it directly as well so over here I'm gonna take a value then FN and I'm gonna get the snapshot of the store so snapshot let's say uh subscribe to the proxy state and then I'm going to call this with snapshot of the proxy state right and we also need to call this function immediately so I'm going to do it over here as well and here we have it so we're going to import this function from data and we're going to pass I'm going to get a new star uh snapshot star equals to do cell star and then data and then since this star follows the star contract we can use dollar prefix to assess the value of the store so I don't need Mount I don't need to do it or not anymore dollar prefix Value auto subscribes when the command component is mounted and unsubscribes when the component is unmounted so we can remove all of this uh remove on Mount as well and remove all the Subscribe snapshot everything so now I can use dollar prefix over here snapshot.com snapshot.tanks right and let's see it still works right it works fine as it's supposed to right so this is how you can convert a value proxy States into a swell saw following the star contract so one great thing about velto star is that you can uh any sub property or nested objects of the value store is also sorry of a value proxy state is still another it's another proxy state right so which means that you can actually subscribe to parts of the value store and ignore the rest of the things right what I mean is that for example over here say for example I have a dollar prefix which is a reactive statement where I'm going to console out every time the snapshot store has changed you're gonna see uh sorry let's see this change so every time the snapshot star values changes I'm gonna call this console log over here okay so when I every time when I change something you will see that your console out over here change your console out over here and if I type something over here it will console up as well right I'm not sure why it's consoled twice Let me refresh this probably it's of the Hot Wheel loading let me let me refresh and at the same time let me disable the heart reloading configuration sandbox config hot reload okay save close come back sorry for that okay I have my Applause felt and data.js collapse this let's see yeah whoops so so it's still called toy is it something wrong with the subscription let's see it's supposed to okay yeah only called once right when I change when I change the text you will see the console out when I change the account you'll see the console out right because you're subscribing the whole object right which contains both the count and the text but we can actually subscribe to only one of it right and that that is how a value star works right I can say the count snapshot I'm going to say data account and over here I'm gonna console.log change right because of hot reload hard reload it has to refresh itself every time so let's save again refresh or proxy objects ah I think I know why okay so I'm Gonna Change uh because this is a primitive so it can't do well with this let's say uh count value zero over here and we are going to change counts.value instead okay let's see Okay so okay by default we have a snapshot change and count change right so if we change anything over here you'll see snapshot and the count snapshot has changed so we kind of monitor that anytime when this uh when we change the count of value these two will be executed because the whole proxy state has changed right but if we type over here you see that only the snapshot store has changed but not the count snapshot because you just subscribes to a part of it which is only the count uh sub object right so whatever whenever the text is changed we don't care about it so this is one great thing about velto you can subscribe to a partial object of the whole entire proxy store because some the proxy state is made up of smaller proxy States so some object is also another proxy state right so one great thing about using valtio so would you consider using velto with swelts comments down below I would love to hear your thoughts about it svelt star allows us to have a state that does not binds to the hierarchy component hierarchy of your application you can have a spell store declared in a file and we can have all our different components imports from it so different components irrelevant on the hierarchy within that application can share the same States right but spell store itself has is very flexible it does not care about how you update it or use it right it's a very simple construct that allows us to subscribe to the changes of the store itself and get updates from it and because of the star follows a star contract we can have a very simple dollar prefix variable syntax to access the value of the star and auto subscribing to the store itself so that whenever it's changed the value the value of the variable will get updated itself so if you are coming up with a more complex application and you are thinking about using some other libraries like State Management libraries or state machines to control your States then you you might think that maybe if that's the case then are we losing out I'm not able to Leach on uh using this dollar prefix variable syntax well maybe not as long as we can make the library itself follows the store contract then we can actually leverage this on the spell dollar prefix syntax to subscribe to the value of whatever libraries that you are using so that you can have a control in terms of how the state changes from one to another yet at the same time when you're using it you can still use a dollar prefix syntax to get updated every time whenever the state has changed so today we're going to look at one state machine library that has gained some hype in the JavaScript World recently which is exit so right now we are looking at the GitHub page of X dates says that it is a state machines and state charts for the modern web and as you scroll down below you'll see that it has a lot of sub packages such as the finite State machine for xstate utilities or hooks for react for View and testing libraries and inspection utilities and a lot of templates that you can get started with as well as the xstate with spell template over here let's take a look at on the docs or apis so over here we have open up X States apis you can see a quick start guide will be installing exit and creating a state machine uh so I'm not going to delve into how you're gonna do that but uh so we we can start with uh defining the state machines and then we interpret the machines which when you run starts it will give you a service where you can send actions um to to stop to transition from one state to another and you can and then this service you can based on the service value you can know whether which state are you at currently right now right so I have started this I've copied all over this into a spell code so over here I have data.js which has defined the state machine and have started the machines like the docs have said uh specified and over here with toggle service it has apparently a subscribe method which give us the current state and this States uh so we assign the states to the the current state and so we can use the states have which has methods like matches to tell us whether it matches whether the state currently is an interactive or active right as well as it has like uh it returns enough subscribe methods and to sense actions with toggling the service like send toggle and stuff so if we take a look at this toggle service variable does it follow the spell store contract well okay let's see so first of all it has a subscribe method check once and the function within the Subscribe methods has one parameter which is the states which is the state that it will you get check two right then if you can see here the Subscribe method this function get called immediately right so I I just do this I don't have to initialize the value of States but right over here when you console out you can see the state already which means the moment when you call subscribed this function will be get called and it will update the variable States right check 3 which means um yeah it the the function itself will get called synchronously immediately when you start subscribing it right then this function variable itself when you call subscribe it should return a function uh which is the unsubscribe which you can call to unsubscribe uh the service check for basically as the basic mandatory of get of a star contract having the Subscribe method that fulfills all this check which means it is following the star contract what does that mean means that actually you can use dollar prefix syntax of this toggle service and actually gets the state value immediately right so over here instead of state which is the value from this state we can use toggle service but with a dollar prefix which is getting the value of this uh the service or the states of your ex State service right and let's try and see everything works still still works fine which means that we can remove all this code uh remove on Destroy remove all this and everything still works as expected let's see let's refresh yeah everything still works so very simple nothing much to do for using a xstate uh install because the exit service has already been following spell store contract and that's so easy to use sexted in svelt so in the previous videos we have seen what is a store and how do we can create a custom source and we have seen examples on how we create custom stores out of application State libraries out there we converted a Redux store um valtio States state machines ex State machines into svelt's custom store and today we're going to look into how we can actually convert Dom events like a state of a Dom events into a svelt customs Customs felt store Oswald custom store well I'm not really sure which one is grammatically correct but anyway in this example I'm going to show you is we're going to use Mouse events so every time when you move your mouse you probably want to record the mouse uh X position and Y position right so you probably would have um and event listeners as you can see over here we use a mouse move event listeners and we use a client X and client y value and we'll assign it to a variable X and Y over here right and we use these two variables over here where we trying to say show it on the screen or you can in the other hand maybe use like a reactive statements where you do something with the X and Y position right so in this example we're going to look at how we can um instead of having to have like X and Y variables you try to extract out all this into a field store because as you can see over here it behaves pretty much similar as well star um for example we when the component is mounting we listen to something right it's akin to spell store where it starts or subscribes to something and as we unmount we unsubscribe unlisten oops this this should be removed even listeners so we are remove event listeners which akin to unsubscribing from a spell store right and over here whenever there's something change we update the variable X and Y so it could be like a value of your store which probably have X and Y properties so your store is like an object which have X and Y properties so every time something has changed like a mouse move then the X and Y value should updates and you should get no about it right so that is pretty much like a spell Store where the value is updating every time something has happened so we can encapsulate this logic over here into a svelt store so that you can reuse this you don't have to always like declare X and Y variable and then write all this thing over here and hopefully it updates X and Y variables and do all this stuff we can take all this and convert it into a spelled store so that's what I'm gonna do over here right now so I'm going to create a new file called Mouse position dot Js and I am going to copy all this over here right now so we don't have an on Mount but we have a move event listener and yeah we have all this uh remove so we're gonna take care of when to call this remove event listeners right now and I think we can start with uh creating a star right A Star is an object that follows the store contract uh you can have subscribe method as well as the sets methods in our case we don't have to set anything right the set is we don't allow anyone else to set the value of the store which is the X and Y position of a mouse no one says that uh you only updates it so you only reads from it so it doesn't implement the sets when you do the subscribe so we're gonna pass in a function and we're gonna need to call this function immediately with like the value so value over here I'm going to say mouse position but we're going to Define this we're here right now so I'm going to say mouse position whoops uh so I'm going to initialize it with x equals to 0 and Y is 0 at first right and then something something happened and when that happens okay I think we can add event listeners over here Mouse move and then uh move so move it's gonna copy over here move right and then we should return a function to unsubscribed right so return a function so this function should unsubscribe from yeah the doc body so let's say remove event listener we're here whenever we have X and Y position we are going to call the function again to update right I'm going to say uh X is the event client X and Y is the event client y right let me remove all this clean this up I think actually we might not need this variable over here I'm gonna copy all this over here right now remove this uh remove this as well and I'm gonna call this with uh the default uh it may be initial is the X and Y is zero right okay and I think that's done so let's export default a star and let's import this star uh so let's see it's Mouse position from Mouse position and let's remove all this you don't need any more and since this is a star it follows a star contract we can use dollar prefix of this to access the value of the mouse position as you can see here the value has changed can move around yeah you can see it it works right so um and good thing about it is that we can have another component say over here I'm going to say uh ciao from ciao dot spelled I'm gonna render this component over here create a child or spells and we can also subscribe to this uh Mouse position store over here I'm gonna say children uh create a line break over here I think it's yeah I'll create a div to wrap all this thing up and yeah both of them works fine uh that's yeah sorry I have my camera over here so it blocks my sights but yeah as you can see over here it works fine right except that if you actually scrutinize this probably even ask me like every time you subscribe you listen to the body uh you listened to event listeners every time you subscribed wow um isn't that a lot of event listeners um yeah you're right every time I create a new event listeners I create a new move function so there is uh there is as many um Mouse move event listeners as num is the same number of how many uh new subscriptions I have so over here I have one in a child and one in the app.spel so there's two I create two more smooth event listeners so is there a way to improve this I mean yes we can do it one better as in probably we can say for example collect all these functions and then we only create event listeners once if it's the first time subscribing so let's let's Okay let me type while I'm saying all this so that you can have a better understanding of whether uh grasp of what I'm trying to say over here so probably I have a variable called subscribers um so every time when I subscribe I will gonna what I'm going to do is um I'm gonna push this function that push into function so every time uh subscribing I will add this new function to the array right over here I'm gonna have a variable called Mouse position so this is like telling me the last uh I'm gonna say this is like the last Mouse position right so I'm going to have uh so this is so I'm going to call this from here but we're going to update this mouse position later on as well so this is kind of like the last Mouse position right and over here I'm going to move this uh add event listeners into um a function on its own so I'm going to say setup uh setup event listener and I'm gonna say uh remove event listener so over here set up okay so I'm gonna have a variable called uh is set up equals to false so I can call this setup event listeners multiple times over here but if it's already set up then I will not do anything I'll return immediately but if it's not then I'm going to set this as a true first and then we're gonna set event listeners uh to listen over here um so this is like we only set once uh if it's not set up so you only have one event listeners listening so on a move event what I'm gonna do over here move as I am going to visit this text in an event I'm going to Loop through all the subscribers for each subscriber okay so first thing is I actually need to read out the X and Y position so over here I am going to update the last Mouse position now x equals to this and last Mouse position dot y equals this so the next time when you subscribe later on you don't get zero zero again you get the last Mouse position uh that we have collected so far um so over here I reset it and so for each subscriber is a function that we push into the array we're going to call it with last Mouse position okay so that is it for move and when we want to remove event listener uh is we're going to call this every time when uh in the return function right so this it will be called as many time um as many times as you unsubscribe so first thing is we need to remove splice uh subscribers dot index of the function uh one item we remove that one item and then um if okay if if only when we have no more subscribers and then we remove the event listener right so in this case remove event listener will be document body dot remove event listener Mouse move move right so now if you look at this code now again we are subscribing uh we're only setting up if once once it's set up we are not going to set up anymore I think we need to also okay over here we're gonna say setup is false since we already tear it down so when you set it only once so how many times when you call this setup in event listener doesn't matter we only do it once when we add event listener once right and tear down we're gonna check only if the last one is removed we don't have any subscribers left only we remove event listeners so we are going to tear it down and then we see the setup is false so that next time whenever we have a new subscribers we're gonna set it up again at event listeners right so over here now Mouse move still works but Mouse move only will only have one Mouse moves event for this entire store and yeah this is quite lengthy code if you ask me so is there a better way of doing it of course right I've been setting up all this just to tell you that actually you don't have to write all of this because this has already been done by readable star all this setup like setting up event listeners if only setup only said at once and things like that should have just been already written up all this logic has already written up uh by the readable store you don't even have to maintain like the list of subscribers and push it in and stuff like that so let me show you how you can do it instead so import readable from svelt Star and in States so I'm gonna remove I'm gonna comment only so that you know if you want to read this code uh The Links of this Rebel will be in the description so that you can still read all this so I'm going to remove comment out and I'm gonna create a new one spot default readable and this is the initial value so when we say initial value is x is 0 Y is zero and then this is a function where it has a set parameter so uh as I've said in the readable store video this function will only be called whenever you have only have when you are starting from zero to one subscriber you will be called and then you can return a function which will be called whenever um The View you you your subscribers is removed unsubscribing from until zero so when you have zero subscribers and the return function will call exactly as a logic that we have mentioned earlier on so over here we can copy like uh this over here event listeners at move and remove event listener click here for remove and lastly for the move events copy over here whoops uh we we need we need these two and we don't have to Loop through all the subscribers because the sets will do it for us to go set why is this but we call a set with an object which as the X as the client X and Y has the client why right we call this sets it will handle everything for us we don't have to worry about it uh let's see what's wrong over here okay this right set has handled everything for us we don't even need to manage the subscriber list everything is handled and as you can see here everything work still works fine as previously right so I'm Gonna Keep both of this code over here for you to have a read links in the description so yup you can use you can convert a Dom event uh anything that you are listening from a Dom events like a mouse position scroll position or intersection Observer whether it's observing or not observing the values of it everything any snapshots of like the Dom events can be used as a store value and you can subscribe to it like how you listen to The Domain listen to what the value is right so with by making it following a stock contract uh by implementing yourself or using the readable this allows you to use the dollar prefix variable syntax to read the value of the star and take care of all the subscription from the store itself today we are going to look at one more Library which is emergs so Emer allows us to make um an object to become like an immutable object allow us to work with immutable states with very convenient API so right now I'm at its um documentation it says that it's based on a copy on rights mechanism I'm not really sure what it means but a basic idea is that you have a current object and then you can apply um changes to a temporary draft so over here you have a draft object which you make changes on there you can make mutations but it will not affect your current object and then once all the mutations are complete you can apply all them and create and gives you a next state so current and next are immutable you don't change them and you only change the draft so this allows you to make changes make mutations uh easy mutations while still keeping making sure that current and next are still immutable so um let's take a quick look at like the API of emerges so over here you import produce and you have a base state and you call Produce with the base stage which in this case is the current state and then it gives you a draft state so you can make changes on the draft States anyway you like for example pushing a new item to the array or marking sump object as done and when it returns this whole produce when this function ends will be and then it will be returned by this produce will gives you a new next state and you can ensure that the base state is unchanged everything in base state is still the same everything in the next state is already changed so if you keep the snapshot of pasted and next state you kind of able to time travel to the previous state or the current state so we're gonna take a look at how we can use it in the svelt and I have already prepared a simple example over here uh in the spell repo so over here I have a state with two users user one and user two which has a different first name and last name so um and over here I when I'm gonna change the name I use emergency as produce so I said produce if the current states and then I give us a drop State and I can mutate to the draft State anyway I like it and it will return me a next date ah so same thing goes with all the last name and over here I copy and paste all this for over four inputs and as you can see here um over here I'm going to show the states um user one or user 2. first name and last name so when I type something see I'm gonna say hello then this will be changed immediately right and because it's immutable you are not if we keep a reference of the previous state and and then the next current states actually there are different objects and so if you compare for example previous States equals to current state what you can see is that so initial initially it's they're all true but when you change something you can see that the previous state and the next state is two different objects we are not mutating on the same object compared by reference the I3 difference and one great thing about Emer is also that it will make sure that if you're only changing user one then only a new object created for user one but the user 2 reference since we are not changing it is still referencing the same object so previous state user 2 equals the current state user 2 is still the same right so if I change anywhere I like this is still true and if I change user 2 you can see that now user 1 is always the same right the reference of the object is still always the same so uh this is this is Emer and let's take a look how we can make it converted into a spell store by following a spell store contract so first thing is I'm going to create a function uh let me see get Emer star and I'm going to pass in an object so over here there's two things one is actually um the draft right the draft State and which we can change it directly and the next thing is the base the states so it feels like there's we can have like a tool store approach where we have a draft store and a current store uh the state store so if we can make if you can have a draft as a store you can make changes to it directly and then for the base store the states actually is another store once when we are done with all the changes we can get a new state and this will get updated to it um it sounds complicated I'm not quite sure but let's take a look over here right so um how do we get a draft so from what I can see over here let's take a look at all the apis there's a create draft uh probably you can use it we can use a create draft let's take a look over here create drafts so you can create a draft along object you can make all the changes we want and then we call Finish draft which returns us a new hopefully this is a new user right which is a new state okay so let's let's create two stars so first is the draft star which is an object and the state star same object so a star is an object that follows the store contract and if you can still remember the store contract says that uh you need to implement the Subscribe methods which takes in a function so I'm going to implement that and the Subscribe method should be called the function being passed in the Subscribe method should be called immediately so over here I'm going to call immediately but I haven't figured out what to call or what value to be passed in for the states I think we just call pass in this right um and then for the draft okay so let's probably let's create a variable so let's Stitch equals to object and let's uh draft equals to create draft object or hostage I'm going to import create draft from Emer and also finish draft so since I will use State variable I just used States so this is the draft so the function has to be called immediately and then you need to return uh a function to unsubscribe your store so I need to return a function which means that I need to keep track of the function so probably let's create an array over here uh so draft Subs cribers we make it a set so that it's easier to retake it and remove so same thing for the state subscribers so I'm gonna say uh add function and over here I'm gonna say dot delete function so same thing goes uh come up here oops uh State subscribers now return the function that I delete the function right so okay so we we have a subscribe method taking a function call a function synchronously written the unsubscribe method all right everything looks fine and then um optionally optionally you can have a set step set method so I'm going to implement it for this draft because we can set something on the draft so value so hopefully this is like the new value but um I'm not quite sure uh so a new new draft right not quite sure how we're going to use it for now I'm gonna say to do uh but we're gonna not change we're gonna not allow to set anything on a state uh because it's suppose it's meant to be immutable it's meant to be uh readable only so okay we are done with here I'm gonna return this to written an array of uh State star and the draft star so outside over here I am gonna um since over here is gonna call this States and draft and I say create email star Okay so um so we still use this over here um so to get the value of the state probably is like dollar prefix because it follows I think I named immerse store because it follows a store contract we can use the dollar prefix variable to access the value of the star so over here we can access it with that dollar States same thing goes from here and here and over here what we want to do okay here I think uh State as well but over here what we want to do differently is that we want to actually use the draft store to actually change it so uh we use do this over here I think we remove this as well right um over here as well uh draft store over here okay draft star um let's see I think this is irrelevant now let's let's uncomment this for now uh okay let's type something updated because we changed the draft so this is uh hopefully this is going to be called so I'm gonna say console log value over here this is being called uh I think it's an object it's a draft object so that you can see it but it's being called so over here what we need to do is that we will have to um finish the draft and then get the new States but not immediately we can do it in a debounced way so which means is that we can allow uh setting multiple times over and then we update the states at once right so we're just gonna set like a set timeout uh set timeouts and over here we are saying uh finish draft value okay so this is this should be the value so this is the new state so when I say State equals to this and then draft since it's already finished we're going to create a new drop so uh draft here state and then um I need to notify all the subscribers I'm going to come over here drop subscribers dot uh for each and call it with the draft object and do the same thing for the state subscribers call it with a new state and we want to debounce this right so okay so timeout we're gonna say say let's say for 500 milliseconds only we change it and we want to debounce this meaning um if you type it multiple times We're not gonna like five times we're gonna not set five timeouts and Trigger this like in sequence five times we're actually gonna cancel the previous timeout so we type five times and then only the last one will wait for 500 milliseconds and then trigger so all the changes are batched in one time one go so over here I'm gonna get the timer ID equals now so if timer ID then we got clear timeouts so this is going to clear the previous timeout and and then if we successfully trigger a timeout then we set it to null then we're not gonna clear timeout right so here I'm gonna declare the timeout ID and let's take a look at what we have done so far so over here I'm going to change something and in 500 milliseconds this is going to be updated so if you feel it's a bit slow it sets it to 100 sorry and let's type right it feels immediately um so what we have we achieved so far we make it like a store uh contract that allows us to use the sets method to like update the draft immediately but what's good about using email um does it like justify all this uh boiler extra piece of code so I'm going to show you something called immutability right so for example um hopefully because that over here when we see that if after updates the previous stage is not changed then uh user if boosted for user one is not changed you can see that it's it's not updated right so over here what we want to do something similar as well gonna say uh previous state is equals to the value of the state and come over here uh we can compare it again and we can see that um because of immutability this is not this is referring to the same uh still referring to the same object this is false this is true so which means that this object itself is not uh create a new object right the reference of the object is still the same but because of how uh spell works if you have a reactive declaration and if you try to console out say uh state user one this is gonna be called every time even if you're not updated in you are not updating it right you kind of expect that this since it's the same uh you shouldn't console out anymore right but because of how this felt works is that as long as the states is the same is different then this will be called so because this is always going to be false if we're going to update something then yeah then it's too bad for us so we can use something called derive from spell star which we can try to the revenue store out of the current store so for example I'm going to come here this is a lot of boilerplate code um it's uh it's meant for just for your example education purpose um you you shouldn't you don't have to do this for a very simple application but just bear with me let me show you like what this will leads us do all right so over here I can create two derived Stars so if one is the user one I'm deriving from the the store uh the states and then can return the value which is state.user1 so this gives us a new store which is the user one it's a derived star so this is giving us a new store uh by creating like uh coming out from deriving from another store which is the the hosted and give us the state DOT user one right and so this user one is another store and we can create another store called user2 and over here let's try console out again so in this time round you kind of hope that uh this shouldn't be user one shouldn't be called again when if you are updating user 2 and user 2 should be called when we're trying to update user one so let's see is that holds true so I'm gonna type something over here but two bets uh user one and user 2 is still being called um uh yeah it so it's kind of like what's the point like even if you know that user one is still the same object you like by using email we make sure that it's exactly the same object we don't change it we don't mutate it but it's still that uh it's still telling us that uh either one has changed well that's because by default uh spelled allows you to mutate objects directly does not know that you are trying to do something immutable so any changes to an object uh anything that they assume that has changes to an object is a change and you will try to console this out right meaning even if it does not actually check whether it's a strict referential equality it just says that oh if this is object then I assume that this has changed because you cannot mutate it and the object reference is still the same and we have no way to know that whether it's a change or not so any object when you kind of feel that it's changed and because in user one is it feels that it has changed because state has changed so user probably has changed and because of that uh we're gonna re execute this statement and we do it for this as well and I have said that this is because uh you can uh spell assumes that you are trying to make things uh you're gonna try to mutate an object and if you can cancel that we're not going to mutate any objects whatever we do over here we're gonna make any state changes over here uh gonna be immutable then you can use a strict equality referential equality to compare an object if it's exactly the same uh assume that um no changes has to be made don't have to assume that uh yeah you can assume that no changes has to be made you don't have to do that weird uh stuff that assumes that as long as an object you kind of assume has something has changed so what that means is that you can use you're trying to tell felt it is immutable and how do we do that we can use a Spell option called immutable true this tells felt that any changes made in any states it's going to be immutable so you use uh so if user one uh this reference if they're referring to this like and I read changes when you see on user one if they are still the same exact object triple equals the same then it has no changes because if you're going to make a changes it's gonna be a new object so let's come back over here and let's try to type something Mary can see something's different now when you change on user wants user 2 is no longer console log anymore if we change on user true we don't see any console log on user 1 anymore right um so image.js has helped us to create an immutable a new immutable object um over here and because of email JS we can still make changes like they are immutable uh because we are mutating the draft object we are rotating the draft state and whenever uh once we have changed something on the draft States uh the sets method of the draft store will be called and we debounce it um just for performance sake we debounce it and once uh and then we notify that okay uh all these changes that you have made on the draft State should be applied and uh use it as the should be applied and then you create a new immutable state right so this is like finish the draft and create a new immutable State and because it's immutable we are not changing the previous state uh the reference if there's changes the reference to that object will be there will be different because we're going to create a new object um so over here if you change user two you only see console log of user 2 user one is always the same reference object it's no changes uh so you don't see a console off right there and and then and we also have to tell svelt that we when we make changes we actually make make changes immutably so by passing in options called immutable equals to true so um before we end this let's make let me show you one more thing that you can do with Emer which is in Emer uh you can have patches so to enable patches we need to enable it first it's gonna come over here and paste these two lines over here so we enable patches and with patches we can uh when we we can apply patches right what that means is that um I think in the finished draft method finish draft method we can we actually can pass in a callback and there's there's uh two parameters one is the changes one is the inverse changes so changes is that the changes that you're gonna you can apply to which is the changes that is going to be applied to and inverse changes is uh changes that you can unapply the onto the states so we can apply patch on the next date with the inverse change will give us the previous state so this this can actually helps us to create undo and redo kind of uh interaction so I'm just gonna save just the inverse changes and I'm gonna come over here and push it into undo list so I'm gonna have a variable called undo this on an array and in the draft you can provide more methods right so you uh as long as you fulfill a store contract you can actually Implement more methods it's up to you as long as the Subscribe is there follows a song contract and optionally set method is there and follows the store contract that's good about uh that's that's good enough so we can have an undo method and this undo method I'm gonna check if undo list dot length which means there's something to undo I'm going to call undo.pop and do list of pop and I'm going to apply the patch so apply patches apply patches onto the states with the undo this should give me a new Stitch which is still immutable uh so can I say State equals to this and I'm gonna say draft equals to create draft from the state and I notify all the subscribers so I'm gonna paste this over here okay and let's try to use this undo method so we're gonna come over here have a button on click undo and I'm going to come here and say uh draft dot undo this time around I'm going to call it on the draft store itself right uh if the dollar prefix is getting you the states of the draft but we're not going to get the value of this the draft store we're going to use the draft store itself we're called undo so over here we have an undoom button now so if we type something the changes has been made type something changes has been made and then we undo oh wait undo is not working hold on apply patches is not defined sorry let's let's come back over here and import it okay so make some changes applied make changes applied undo undo you cannot do and and yeah you can apply patches um from your JS it will create so when you do when you use image yes you can make changes on the draft States itself are mutably and then when you finish it when you finish drafts it gives you the next state immutable next date as well as the changes you can you have made in these drafts and you can apply the changes again or you can inverse the changes right there's a lot of more advanced stuff that you can do with Emer which is probably very Advanced where you you when you're dealing with some sort of a complex kind of state so I don't recommend you to immediately jump and use this in a very simple application but as your application grows you have a very big object and you want some immutability in your States then probably you can take a look at emerge.js and take a look at how we can use Emer make it like a store contract and use it in svelt using the dollar dollar prefix variable syntax and today we're going to take a look at one builtin method from sveld that allows us to quickly create another store from existing stores so the way for us to derive stores from existing stores that you have so self provide us with this method called derived and we're going to take a look at how we can use this methods so let's take a look at an example that I've prepared for you so over here I have a writable star and I create a writable store with initialize with a value 10. and I've bind the value of the star with an input with the type number so over here if I change if I move the number along you can see that it's updating the value of the star using the dollar prefix syntax because the writable stores uh matter from spell implements the store contract so we can access the value of the store using dollar prefix variable of the store variable name and we can do it over here as well and bind will set the value so the the store the writable store also follows the store contract for the set method so we can set the value of the store directly from this bind so that we can update the value of the star like this right so if you change the value of the store you can see that it's updated immediately so right now I'm going to show how you can use the derived method from spelled so same thing as sorry same thing as spells writable imported from svelt Star so it's a name it's called derived and over here how we use derived is you can write for example new num equals derived and pass in the store which is in this case is num is the store and we can pass in a function so in this function we can we will have the value of num so the this is the value of the star so if you can you can see here the the variable over here we kind of prefix it with dollar but it's just any name so any name you like it's easier for us to think about value of a star is prefix if dollar and star itself is without the dollar sign right but this itself can actually be any uh any variable name so uh just to demonstrate I can say haha okay and over here I'm going to return a value for this derived star so um this derived star will subscribes to the store and anytime every time when a star value has changed this callback function will be called and the value of the store will be here hardcore haha variable and then we're gonna return a new value for this derived store it's going to say uh return haha times two so this is always two times of the value of the store of num so if I come over here and I because derived follows a store contract whatever returns from derived followers of store contract we can get the value of the star using a dollar prefix variable as well so you can see over here this right now has a value of 20. so I'm going to say num times oops 2 equals to this and when I change the value of the num star you can see the value of the derived new num star is also updated immediately so uh where can I read from like apis for derived so you can find the API for derives in over here in the docs you can see over here derived um so there as you can see over here there's actually a lot of different kind of uh whoops let me Zoom it in and yeah if you take a look at the docs right there's actually a lot of ways that you can define derived and at first glance you may see me it's a bit overwhelming so let me break it down to you so that it's easier for you to understand all this right so I I you can think of it as um you can think of it as a two by two variants I'm gonna have I'm gonna write it all of the variants over here so that it's easier for you to think about it so first is whether you derive from one store versus derived from multiple Stars and then uh in in either case you can uh get the derived value synchronously or get the derived value asynchronously okay so what does it mean so let's take a look at the first two component uh combination so derived from one store so in this case derive actually derived from one store right so we only have one store called num and then we derive from just one store uh and then it says derive multiple stores which means that actually we can derive from multiple stores so let's do that so let's create another store called num2 in this case uh initial value is 42. and we are going to to have another input that binds to num2 and now I can derive from the num and num2 stores so instead of taking it as a instead of taking it as just a store the first argument for derived can actually be an array and so you can pass in as many stores you want so I can have num and num2 two stores right so over here if you have two stars then this variable the first uh parameter over here will become an array now so this is the value of the first star and then the value of the second star do note again this variable name uh can we can name the variable name any way we want this is just that a convention for us that tells us that this is the value of the star instead of the star variable itself right so right now I'm gonna say um this this new value the derived value for a new num2 would be num times num2 and if we come over here I think let me rename it better so that's less confusing so this is I'm going to call this multiplication and this is a double of num right so double of num we're gonna come over here and multiplication let's come over here and let's let me another div so num times num2 equals to the value of the star multiplication as you can see here uh whenever I change this value of star this derived store value will get updated immediately right I'll change this the second store value also get change updated immediately right so this so you can derive from one store or you can derive from multiple stores so from all the examples we've seen over here so far is we return a value immediately from the call from from the second parameter right but then there's a case where probably you may want to um do something like do something asynchronously and then set the value of the derived store later on for example over here I'm gonna have this called uh this new store called delete num so this delayed num is special in a sense where every time when the num store value has changed uh we were gonna update this delete num the value of the direct num store but it will go it will be updated uh in one second later so how you're gonna do it is um the same thing we have in function and then the first parameter is the value of the num star and then if if okay so let me show you uh uh so by the previous we want to have like the the value of the delayed num to be set as the same value of the num store but only delete one second right so if I come over here uh okay delete I come over here uh if you see right now right now we return this num directly right so if we change the value you see the value is updated immediately but if we now start to take in a second parameter you see that this becomes undefined immediately why when you pass in a parameter called set right now uh this is this derived function is assumed to be asynchronous and when it assumes to be asynchronous it no longer look at what is being written from this function anymore right this is important right so once you take in a second parameter it no longer takes into account of what returns from this function as the value of the star no no longer right so now the value of this uh derived star is still undefined and if you want to have an initial value you can take it over here as a third parameter so I'm going to say uh not set and you can see this is the initial value right whatever written here is not the value of the derived store when you take in a second parameter if we remove this then you can see that immediately this is synchronous and then we just take whatever from here as the value of the derived star if you're taking an apartment second parameter sets this is asynchronous whatever written is not the value of the derived star and what is the derived store the initial value will be this the third parameter for the derived function a derived method and if you want to set the value of store you have to call the sets so here I call sets again now the initial value is not set but then we call set immediately now you can see that this value has updated to this 10 right so if I come over here the 10 14 15 uh we this function will be called every time and the value of the store will be uh updated by calling this sets right but we say we want to delay the value right so what we can do over here now is we can set timeout for example one second and we want to set the value of the star one second later on so by default initial value is not set but once we set the value for example right now we want to update it okay first is let's see the initial loading so focus on the delete uh over here once we refresh the initial value is not set and then one second later it turns into the value uh over here where we call sets and whenever we update the value gets updated one second later right and remember that whenever we say we want to use set timeout we need to remember to clear the timeout because what if no one is subscribing to this store anymore or the whole component is being unmounted you wouldn't want this timeout to still be triggered and then call the sets for not for nothing right no one is listening anymore so here is the Thing Once you add the set parameter whatever it written if it's a function it should be the cleanup function so this is kind of similar with um if you have seen previously how we a subscribe method where you return in a subscribe method of following the store contract whatever you return is the unsubscribe it's the cleanup so we're going to do the same thing over here so I say clear this is a timeout ID and I return a function called clear timeout timeout ID so this is synchronous this is asynchronously so I'm gonna to demonstrate that this is actually being called I'm gonna console over here hi uh the reason is uh if we're gonna update this value of the start very fast then most likely is that before we the set timer is being triggered it's going to be clean up and then we have a new set timeout later on right so if I change this very fast you see that uh instead of going from 10 11 12 13 change to 13 immediately so right now I'm gonna go from 13 to 10. you see that it does not go step by step because every time we update the value the cleanup function is being called will clear the timeout and then the new set timeout is being triggered Heights so as you can see over here as well the highest being consoled out many times when I update this so this is a good way for you to clean up the timeout because it's no longer in use and so that uh you so that uh you can clean up and remove any unnecessary sets store value so so I've said that this is a two by two Matrix that means is that um you can derive from multiple stores asynchronously as well right so in these two examples we derived from single store synchronously derived from multiple stores synchronously we can also derive from a single store asynchronously and derived from multiple Stars asynchronously so over here I'm going to create another delete multiplication and over here I'm gonna copy this to and now since we are passing an array this will be an array of two value num2 and I'm going to return the multiplication num 2 over here so we're going to look at the value delete foreign so if I change this this will get updates one second later and change this as well this will go updates as well but one second later so you can derive from one or multiple stars and you can set the derived value of the derived star synchronously or asynchronously we've been talking about stores over the past few videos and don't you find Stars a bit boring and dull like whenever you set a value you just change to that value does not moves to that value elegantly right when I in this example that I prepared over here I have a writable stores that is initial value is zero and whenever I change it it just change that value why don't it like move slowly from zero to one instead of just changing from zero and then one wouldn't be better if we can have a special kind of stores where whenever we try to increment it it moves slowly from one to two like and showing the values in between like 1 1.1 1.2 1.3 more form by five all the way to two would that be more beautiful and elegant right so today this is what we're gonna do now create a custom store that allows us whenever we set the value allows us to uh the value of that store itself will not go to that value the target destination value directly but rather it will slowly move to that value and we're gonna do it right now so over here I have my boring dial star called value created using writable I'm gonna create a new custom store and I'm gonna use a function called twin initial value and then uh and I'm gonna use this to create my create a store for myself so I'm going to replace it with uh twin uh replace the writable to twin but over here I'm returning nothing so nothing is not a store whatever store has to follow a store contract and a stock contract dictates that it has to be an object and an object has to have a function a method called subscribe which takes in a function and you kind of have to call the function immediately uh like say FN and then call some value right so I'm going to call the initial value uh immediately and over here I need to return and unsubscribe methods right so that I can unsubscribe from this custom store so over here as I've shown you many many times in the previous videos where I need to push this function into an array we have to keep track of the uh all the list of some sorry subscribers and then remove it from that list in this function so today I'm gonna be a bit lazy and actually a bit more efficient which is actually you don't have to manually write this subscribe method to maintain a subscriber list we can create say uh I'm gonna create a store called uh using writeable with the initial value and then we can cheat a bit by using the Stars subscribe method instead so this way you can delegate all that responsibility of maintaining a list of subscribers returning and unsubscribe methods and everything to this store and if you want to notify all the subscribers that a new value that you have then what you need to do is to call store.sets a value and this will notify all the subscribers the new value So today we're gonna cheat a bit right so over here I have a subscribe method and I also need a set method and I'm not going to use a store.set directly because we want to do something different over here for the set method of our custom store so I'm going to call sets and a new value so over here I need to slowly move my value from the like the value of my writeup of my star slowly to the new value and it takes time take some sort of duration uh probably we can make it like a parameter over here say duration and let's give it a default value so here I'm gonna say one second so at least I don't have to pass it in the default is a thousand uh milliseconds and over here uh what we can do is we can use something like maybe like set interval so on interval uh maybe we can have an interval of say 100 milliseconds so on every 100 millisecond we do something so um so we can keep uh we keep updating this on every 100 millisecond we keep updating our store to a value um and then we have to calculate the value here okay so every we we have an interval of upkeep updating the value and of course we need to know when to stop so uh when we call set we can get the starting time equals to date dot now and we can get an ending time equals okay starting start time and end time so this will be the start time plus duration so in the set interval we can check that maybe let's get the current time it goes to date dot now and if current time is greater than the end time that we know we need to end this interval so here to end it we need a interval ID interval ID so copy it and clear time interval the interval ID and I need to return so I don't need to do whatever I'm going to do next so over here uh if it's not ending if we are still looping we need to know what is the new value uh what is the value like the intermediate value that we need to set to our store so let's do the calculation so we need to use something like a ratio We compare for example uh the current time minus the starting time uh divide by the ending time minus start time so end time minus start time is actually the duration so I'm going to do it by duration so how long we elapse from the starting point over the whole duration will be have to be equals to how long uh well it goes to the the value that we want us um the uh the well equals to uh the same ratio will equals to the the value that we want to set value to set minus the initial value over over the new value minus initial value right so uh how long it elapsed over the total duration will be equals to uh how how far from the initial value over the distance total distance uh that's new value over the initial value and we need to calculate the value called the value to sets so we need to do some aromatics to move this around um so I can shift this new value minus initial value over to the other side so this will be multiplication let me repeat that with a bracket and then value to set will be uh and then we shift the initial value over as a plus so this whole thing plus initial value will equal to the value to set so over here I can copy this value to set and then put it as the the value that we are calculating over here cons value to set so this is the value that we need to set and so I'm going to set it in and foreign let's have a try right so now I'm gonna click increment you see that the value slowly moves from zero to one it's not going to set 0 1 directly right we slowly moves from zero to one and now we click again whoops it starts from zero again do you notice that let's try again uh let's let's clear this so the first time starts from zero to okay almost one point nine so this is something we need to fix uh and then when we click again it goes from zero again and all the way to 1.9 uh what's wrong over here let's see ah okay so there's two things to fix right first is um whenever we increment it always starts from zero counting from zero again and that's because we keep using initial value over here once we have set the star like once the value has reached the new value we should update this initial value to the new value right this will be the new initial value so over here I am gonna come over here current when we hit the ending this is when it ends I'm gonna say initial value it's equals to the um new value so let's try this again zero plus all the way to almost one so this is something we haven't fixed yet and when we increment it moves continuous moving right from one all the way to almost two and then we click again it moves from two to almost like three so when I say almost it is almost um so to make this looks nicer uh this is and this is actually because the time um our interval is not always in like 100 uh milliseconds it actually sometimes it offshoots a bit and sometimes it's less a bit so probably when you reach the end uh uh maybe the the last time you update is not yet three and then this time around when you offset uh overshoots a bit we don't really update the store anymore so the here before we end actually we can do one more update which is we're gonna set store dot sets uh to the new value so if we do this right now I'm gonna try again it always ends nicely at the Target value all right so one and then now in increments all the way to two if decrement two all the way to one nicely done let's set this slightly longer duration and let's try again it takes five milliseconds or five seconds but if the Midway if we try to decrement uh you probably see something as the value it's it's jumping a lot it's jumping a lot from uh if you can okay let's let's try let's try Plus uh minus equals 10. so when we go this it slice tries to go from 0 to 10 and then we try again oops uh you you see that it's jumping it's trying to update like it feels like there's multiple things trying to update um our value at the same time let me do this I think it's easier to demonstrate it this way where we have uh where this value is over here so that I can click on the minus or plus easily so if I click decrement it should go to negative and I should click plus you should go to positive value right and if you click this and we try to do this you see that it's still in negative and it's like flipping from negative to like I'm not sure positive or something um so what's what's the what's my point okay so my point is whenever we change halfway we can we have to actually cancel this interval and then moves to the Target new Target value from there on what that means is that uh this shouldn't be uh in the interval ID shouldn't be a variable inside here anymore should be declared outside and when we have a new set we should actually if interval ID we need to clear interval ID and then start from there so I do clear over here I also need to just to clean up this set interval ID now and then return so let's see minus and I Plus uh no it seems like the new one does not takes in effect at all um yeah what could be wrong let's see um stand Arrow I see an error clear interval Ido clear interval no wonder okay so plus minus Plus and then minus you can see that the number jumps uh if I do minus now it jumps to zero and then slowly moves down and I it does not continue from where the current number is actually uh you you could you could kind of feel that uh we're starting from negative 10 to 20 right anyway plus immediately it still said it's trying to move from negative 10 to some other numbers instead it does not um hold on this to be fair this should be plus 10 okay so for example what I'm trying to say is right now it's zero and quite a click decrement 10 it slowly moved from 0 to negative 10 but in Midway if I click plus it should be moving from zero to it it feels like it's going to move from 0 to 10 instead of like halfway 2 10. um so let's let's see that again so I'm moving halfway which is negative five and I click plus it jumps from zero all the way to a new value so this new value is actually correct in a sense where I actually click plus 10 when I add negative 8. so negative 8 plus 10 is 2 plus 2.5 something right so if I move over here it slowly moves to negative eight maybe right now negative four and I'll click it moves all the way to negative 4 plus 10 is like six ish but then it moves from uh the two instead of like negative four so what's my point my point is that um the initial value has to be always updated has to be always updated so that whenever we cancel and we start from there on this initial values should be the latest uh should be calculated as the latest of the value to sets but we shouldn't um affect this initial value uh we shouldn't change this initial value like this like I shouldn't say initial value to Value to set we can't do it like this way because um this will affect the formula or value to set again because this the the range from new value to initial value will be wrong we still need we still want the previous initial value before we we cancel and then we um I guess you try to get what I'm trying to say so over here there's a few ways to do it so first thing is before we start over here before we clear interval we can get a hold of the value like the current value so for example instead of having set of a uh like constant uh this as a local variable I can have value to set over here and over here if I try to set against which if I clear interval then this tells me that okay I need to interval ID equals to know this tells me that uh previously the value to set is some sort of value and I need to I need to update it uh I need to update the initial value to Value two sets and this reminds me I need to do this as well over here actually okay we have done this right so this will be slightly correct so let's try again and see so we move halfway to three to four or five and then I click it slowly moves down from three to one all the way to uh just now was what seven or eight ish and then minus 10 is like roughly 2.8 ish right so few we have with with me a lot of code over here it looks very complex right but hopefully you get the flow of this if we want to make a variable slowly move towards the target this is what we would have to write or no actually this twin is actually provided it's actually built in from svelte you can use it directly although it's not from the store but it also still implements the stock contract so it's actually from svelt motion so I'm not gonna remove this because maybe you want to take a read what we have accomplished so far but let me comment it out you can use twin API does not change but as you can see oh okay ignoring the moving faster parts we it's not using an interval it's using a request animation frame which is much faster uh as in we can make it fast as well if we have like a smaller intervals as well right but ignore the fact uh it still works The Way We Were designing right so in this does not the second parameter of the twin is not a number it's not duration but an object where you can pass in a duration so let's pass in like five millisecond again and take a look at the problems that we're trying to solve just now right move halfway and I kind of remove it continues from there instead of jumping here and there all right I think spell does a very good job in handling all those edge cases and if we start from zero it also nicely lands at 10 instead of having all the decimal points right that is something that we've done over here as well make sure it nicely set the value at the end of the time so um let's take a look at the docs for twin and see what else we can pass it in so twin takes in not just duration it takes in also delay easing and interpolation and delayed cells is pretty interesting because for example if I say a delay of say one second okay maybe two seconds and I change takes two second delay and then slowly move up and when I click minus it does not change immediately except two seconds later it's slowly going back right uh two seconds later then two seconds later it's only decreased back so it still takes in it still moves from where it is at at that point of time but it takes delay of two seconds and then here you have a easing easing is a function that you can control how much uh what's the rate of moving from the initial point to the final point and it interpolates which is how um which is depending on what kind of value you have you can interpolate it differently right for example if you are you can use Queen with colors as well you can twin between colors and you also can twin dates and time and a lot of things you can try that out so beside twin uh spell also provides something called Spring so spring is also something like twin except that it moves like a spring it it has like uh so let's let's replace this and let's take a look at the value so let's increment you can see the value is incrementing a bit like a like a like a spring and you can't tell that from the number itself so what I'm going to do now is I'm gonna use um a colored diff so that you can visualize it better so style equals to say background red and then with one PX height 5px and front Okay this is a bit short that's 10 PX at 20px okay this is this is more like it and then transform scale and I'm going to use the spring value you can see it does not move directly it has some kind of springy feeling to it and if you if you can pass in values like uh stiffness to control the spring itself so here if I say stiffness equals to zero oops see is zero to one right I'm sure too stiff moves one um if we move to like 0.8 um 0.4 you have different kind of uh okay I think we need to add some dampening damping so that's if you have more damping it will have more springy feeling a less stamping you have more springy feeling it does not and like the movement does not and immediately and if we have like a lot of damping then it will less springy right so you can play around with this value but the point is as well provides two billion function spring and twin which allows to which returns an object that follows a store contract so it's still like a star but when you set a value to the store it does not does not update the value of stock immediately but it slowly moves from one value to that value um through some sort of twinning interpolation and some springy feeling so in the last video I talked about custom stores in which the value of the star slowly moves from the current value to the Target value that you are setting it with I explain how you could write such a star and in the end of the video I show you that you could actually use the building methods from sveld like twin and spring depending on what kind of a movement that you want to um in that video I didn't explain in depth about how uh what are the possible ways that you can use twin and spring in which it does not do them justice so in this video what I'm going to do is I'm going to show you how you can use twin and spring and make full use of them so the first thing I'm going to share with you is Twin so let's take a look at this Ripple that I have prepared for you so over here I imported both twin and spring but right now we are looking at Twin first so in Twin uh so right now I am not using anything I'm using a writable so when you have a writeable when you change the value of the star where you try to assign a value to it it will turn into that value immediately by itself right so there's no move there's no transition from the current value to the Target value but if I import twin from swept motion and I use that instead of writable now as I change the value you see that it slowly moves towards 20 right and I change to zero it will turn to zero slowly so here is so the second parameter of twin is actually options that you can adjust the tweeting so first thing is you can adjust the delay so for example if I set delay in milliseconds like 500 milliseconds then the value does not change until 500 milliseconds later next thing is duration if I set the duration to be 5 000 milliseconds which is 5 second then it will take one two three four five okay my counting is bad but as you can see it takes five SEC whole second to reach from 0 to 20. now next is the easing the easing is a function that describes how the number uh the acceleration the rate of the number changing from the current value to the next value so if you don't pass it easing then the value is moving linearly which means it moves in a con it in it moves in a constant speed but if you can pass but if you pass it in custom easing for example right now I'm going to import cubic in from svel easing now you may not notice but the number actually increased in an increasing speed right it stays at for example right now I am at 20. you'll see that it will stays at 20 okay let me remove the delay but you notice that from for example from 1 to 20 you see you see that the number stays at one to two a very long time and then it starts to accelerate and moves faster and increase faster and all the way it shoots up like a curve over here and a rich 20 probably a very short time from reach from 15 to 20 right so pay attention right it stays at one for a very long time and then suddenly it shoots up and then it hits 20. so you can control all these different kind of easing using a different easing function so the next option we have is called the interpolates before we move into interpolate let's take a look at what actually what are the type of values that you can pass into twin a store right now in most of my examples you see what I've do have done is I twin from a number to another number so I I start with the initial value if it's just a number and then I set it to another number but it does not have to be just a number it can be other data types for example it could be um an array of numbers so I have to say 0 1 0 50. and I want to interpolate to I want to set the target value to be say 100 and then maybe zero right 100 zero if I click this you can see that both numbers will change together at its own speed right so 0 moves to 150 will move to zero so if I remove the easing and delay let me just comment them out you can see that it's it's both numbers are moving right towards their Target number in five seconds so you can have a number you can have an array of numbers and then the next thing is what you can have is actually object where the values are numbers so for example I can have an object say a is zero B is 50 is 100 B is 0. so all the property value has to be and oh sorry let's see how should I do this um because this will be interpreted as a Expressions which I don't want so probably I will use HTML and let's do this instead okay so um I change so I have a proper object with two properties 0 and 50. a is zero B is 50 and I change both properties will be updated at once right so um you could have more properties right but then oh because C is not there it is undefined initially then you have error but right now if I set C to say 40 hold on hold on um this is not okay I think I made a mistake over here there should be null and two so that this is multiline okay let's take a look at how these three property uh interpolates to each other right just to make it clearer let's update the button as well the button text although it does not make any effect so right now we change from 0 50 40 to 100 0 30. right so you can see that all the numbers is being interpolated at the same time okay so besides object where its property is numbers and arrays which is item is numbers can actually have each of them nesting each other so for example I can have array of numbers over here 50 and turning into 30 70 see it still works all the numbers still changing or I kind of array of objects over here instead and maybe another item equals to 40 and here is a equals to 30 change all the numbers are still interpolating correctly so as long as the number of items matches uh the number of properties is the same and each of the property has the same type for example number matches with number array matches with array um the builtin twin function will able to handle all of them nicely right and lastly it's not just about numbers it can be about uh time so if I have new dates over here and new date uh say zero right and I change you can see the time will moves um well will between as well so numbers dates object with keys is numbers arrays where it's proper uh sorry object where it's value is numbers and array in which the item is numbers and nested of either nested object array array nesting with object what else um basically I think that's all so if you try to change it to string and try to interpolate you can't interpolate string so that's where the that option called interpolate comes in so interpolates um is of option allows you to add more features to Twin to tell them okay I'm getting a number I am getting a string and here's how you can twin them so here's how you can interpolate them so for example let's uh make our example simple I start with a string which is a and I want to move I want to set it to Zack right I'm gonna say A to Z so I change I can't interpolit string value so over here I can Implement a function called interpolate which is a function that takes in a which takes in A and B and returns another function that takes in a t and then returns something that you need to implement over here so what's a b and t so let's print this out and take a look so a b t so a is actually the starting point B is the target point and T is the value from 0 to 1. so as you can see here a is z because you start with e and then B is actually exact itself and then the t is the time from 0 to 1 uh so which is the position where like you are currently at from 0 to 1. so it will start moving from zero and all the way to one right so for example right now I want to Twin from A to Z then what should I do well probably I can do something like this where I can maybe interpolate in terms of the characters so for example Ace chart code at zero is a number right a code and B code sb.char code at zero and then I can interpolate between these two numbers so I will say uh result code equals to a code plus b code all right sorry it's a b code minus a code um times t plus a code so we get the difference between a and b and then we type so uh if it's zero and then we plus times t and n plus a code so a code uh if a t is zero then what you get will be just a the value of a code right but if T is one which is the target value then um this will be B code minus equal plus a code will release you to B code right so this is uh standard format of how you would write interpolation so with the chart code we are going to convert it back to its own character so a chakra has to be an integer so and we are going to round it so math dot round result code and to convert it to a character I'm going to say a string Dot from Char code I'm going to return this whole thing and let's see we'll change from a all the way to Z right um so if I change this Z to A okay so and change a to z and then change it back to a it's cool right so you can write your own interpolation um as long as you follow this uh function so let's summarize what we have learned so far um we have seen how to use the twin method to create a twin star so the first parameter is the initial value and second parameter is the options in which you can control the delay duration easing as well as interpolation we have seen what can be supported by the builtin twin what can be interpolated by them and we also seen what how we can write the custom interpolation function so next let's move on to the spring methods so let's allow me to copy this and let's take a look at the spring star so again uh spring is like a writable in which you can change its value but by default when you change the value it moves it changed the value directly so if you use spring instead then your value have the value changes moves like a spring and a spring has actually properties like how stiff the spring is and how much resistance the spring has so this two value is being summarized by stiffness and damping so for example if my spring is very stiff which means that it will snap back to the Target value very quickly so for example let me just uh choose average value like a 0.5 and maybe damping is also 0.5 let's see how it what we get so if your num if the stiffness is if you have a higher value in terms of stiffness the the value will snap to the Target value faster so let's see if I starts from 0.2 you'll see that you will move slightly slower and if I go for a higher number like 0.9 then it snaps to the it moves faster to the Target value of course it will move faster which means that it will also overshoots and then snaps back like a spring and then damping which means damping is a function for uh slowing things down so it works in an opposite pair of your stiffness so if you um if you have a very small number for example 0.2 which means that um uh it will it will decrease in terms of velocity slower so you will see your spring your you will see a spring moves oscillation a lot oscillate oscillates a lot but if you have a higher number for example 0.8 then your spring will not oscillate that much and then settle down faster so these are the two values that you can play around with spring and over here we set the value right so when you set the value you'll move to that Target value but sometimes you want to move to that value but without but without um springing to that Target value so how you would you do that so you can do that by uh coming back to the sets method so value dot sets so if you write dollar value Sim variable over here where you assign value to 20 it actually means value dot sets 20. uh but you can't uh in this way of writing you can't actually specify the second option arguments if you have so here we we fall back to value.sets because we want to pass in a second argument and the second argument that you can pass to a spring store is first is an object and the first is you can have a property called heart goes to true This Heart indicates that you want to move to that Target value immediately without without making like a spring where it Springs to that value for example you have moved to 60 it's like a spring 80 and then 40 it's like hard jump to that value and opposite of Hearts what you get is um soft so value dot sets 60 soft so you might ask like uh if you already if you already like if you assigned a value it's already moving like a spring to that Target value right then what's the point of having to pass in soft well um I'm not able to show you a particular in in this example I probably we can't really see the difference but then the difference is this when you said soft you actually tries to maintain the speed of the moving value for example if I'm moving to from from 0 to 100 and then I quickly click 60. it will maintain the speed to reach you will maintain a speed and instead of setting 60 as a Target value and trying to snap to 60. and how long do you want to maintain the speed will be this value that you pass into soft so this soft actually tells you zero to one you can pass the value from 0 to 1 indicates like how many seconds it takes to recover to turn back to become a spring I know it's a bit abstract and personally I also can't tell the difference visually but that is how it works so um so for example if I say um I want the I want I pass in zero which means that it does not take it takes zero time to convert back to a spring and which means that this actually is the same as calling value equals to 20. right value sorry value equals to 60. so setting soft to zero is three the same as setting value to 60 without passing any soft because uh you you take zero second to recover back to become a spring right and if it's one then it takes like one second so that is it's that is all the options that you can pass in for spring so let's summarize about spring is you can control the stiffness and the dampness of damping of your spring she controls how much how much it will spring and how much it has resistance in slowing it down right and then you can have options like hot and soft to control whether you want the Springs to kick in when you change the value or you want it to be disabled just for the moment in this video I'm gonna bring in a concept from functional programming to allow you to create more stores using uh function pure functions right and this concept is what I'm going to introduce you is called higher order Stars so what is higher order Stars so if you are familiar with functional programming uh terminologies you know that higher order functions is a function that takes in a function and then return a new function which the new function is being enhanced by your function and probably if you're familiar with react or other component libraries you're familiar with this concept called higher order components which means that your function take it takes in one component and return a new enhanced component and I'm going to borrow this concept this idea of higher order function I'm going to bring it to store so right now I'm going to share with you a few uh higher order stores which is a function that takes in your store and then return a new enhanced store so you can do cool things with the star so are you excited let's jump right in and take a look at this example that I've prepared for you over here so if you take a look at this code right here let me zoom in a bit so that you can see the text clearer I have a mouse position which is a star if you have followed me on how you can create a star using dumb events this is exactly the same code that I have written over there um links in the description if you want to watch that video so um I use this star and I assign it to a variable so you don't have to I mean right now I'm going to assign it to this variable called position so position is actually equals to Mouse position um you don't have to do it you can use the mouse position directly if you want to as well but just bear with me for now so this store the store value itself has two property it's an object and has two property it has Y and X so when I move my mouse the X and Y property value of this star will updates according to my store a mouse position so over here I created a div which is really in color uh 100 times 100 in size and then make it a position absolute and so that it has a transform that moves based on the value of the star the mouse position star So based on the X and the Y value so right now if I move my mouse you can see that this box is following me around with my mouse so um so as I move my mouse the value of the star is updated and the code over here subscribes to that to the value of the star so that it always gets updated so over here you always get updated value of the X and the Y position and you can also see it over here where I print that both value out in in the Box over here so um so let's let me introduce a few higher order store that I've prepared ahead of time so the first one is called the bounce so the bounce is a function and takes in a star and it's going to return a new star so over here I use derived to do that so I use a function called derive and takes in a star and derive metal will return me a new store right but then this the bounce itself is a fun it's a high order star it takes in a star and return me a new star so what this derived method does is that it will um I will set timeout um so that it uh it will debounce the value of the star so the the starter is text in by this the bounce function whenever the value has changed it does not change the return star value immediately you only updated in maybe after 100 milliseconds if nothing else has changed right so you make a lot of changes at once it's not updated until uh 100 milliseconds after the last change so to use it you can import the Bounce from the bounce and since this is a function and it that takes in a store and returns a new store I can do it like this all right so you see that this is still a star you don't have to change anything we just wrap your store with a function which is a higher order store function and this will gives us a new enhanced or a customized store so with this the bounce what you can see is when I move my mouse it does not move immediately but uh the value of the X and Y is being the bounced right so it feels a bit weird but it it is how the bounce work but probably what we want is not the bounce but throttle or throttle means is that for every so whenever you have valuable changes you don't um you limit the changes to happen only maybe uh once in maybe 100 milliseconds so you have changes that happens very quickly in successive that does not happen only the value will only be throttled to only change in every 100 millisecond so we're going to use this throttle function apparently we haven't implemented it but you can see immediately the the ID of high order star is texting the store and returns a star right so um I can so I can easily replace this like throttle with throttle and replace this function I still get my star I still get my store and I don't have to change anything else so um I can and good thing about because of the functional programming idea I can change multiple star at once for example I can debounce and then throttle and yeah this still gives me so this gives me a new star and then the bounce will give me another new star and I the the position is still a star I can still use it like a star so yep so let's since I haven't implemented throttle let's do that together okay so here I have my function a star I remember the last time we used derived to derive the star um I'm gonna do the same thing over here as well so I am going to import derive I find that derive is a very uh great way to create a new store out of an existing store so that is what I'm gonna do it over here as well so derive from the store and it takes in the value and the sets method and over here I am going to take I'm gonna know like what take note of what is the time right now so now it's equals to date dot now so I also need because of throttling I need to so the idea of throttle is that things happens at most uh at the the value the the star changes happen at least uh 100 milliseconds apart right that that amount of time is something that we can control but it happens in uh in a fixed interval so to to have this kind of fixed in the bowl we have to know like what is the last time that we have changed the value of the star so this is the last uh I need to derive uh declare a variable called last time uh that we just change the value of the star so if last time is probably undefined it's not it does not have a value or now minus the last time is more than 100 which means that either case so if there's no last time we need to change set the store right now because it hasn't been set before and it was set before then we only set it again if the time right now is more than the last time so over here I'm gonna say uh set value oh sorry value and last time and then we need to update the last time so last time it goes to now or else we're not doing we're not doing anything right let's try and see so yeah it's it's slightly slower it's following around but it's slower it updates slower so we have like some sort of throttling happening right now so we can compare you can have two divs uh so I'm gonna create another div um so here is the throttle position which has the color of maybe blue uh set it uh 120 120 uh this should be negative 60 60 okay and let's create a new star let throttle position equals to throttle Mouse position so we can remove this for now and let's see so with throttle you can see that it does not update immediately all right and however it feels like um once we stop uh if it's just recently updated the last value is not being updated uh to the store as well so probably we want that to be updated as well so that you know it does not stuck at like uh either like it still honors uh last few changes that's made but then still within the interval so what I'm going to do here is I'm gonna set a timeout if uh it's not changing I need to set a timeout and probably clear this if uh if there's new changes coming in so I'm going to say uh set timeout which is let's say also 100 milliseconds and if this timeout triggers I'm going to call set timeout with the value um over here I am going to get the timer ID I remember remember that when I say derive uh if it's a synchronous mode you can return a function that clears that does the cleanup so I'm gonna do that over here now so I'm return the function that say clear time out with the timeout ID if it does not return a function so if it's in this if case it does not return the function it's okay as well we'll handle that but in if it's the else case return the function so when the next time this async this function has been called again uh as well clean it up first by calling this function first before executing the holes it will clean the previous return function and then run the script again so let's try again so at least I think right now you can see is that uh even we move very fast the um the last value is still being updated uh like even if it's not like even if the last update happens uh right just right after the last star changes we're still gonna change it um uh 100 milliseconds later right I think it's a bit abstract to understand the bounce usually uh if you are not familiar with the uh sorry throttle if you're not familiar with throttle uh you can take a look at maybe like some diagrams of throttling and you can see over here what throttle means is that it will ensure that uh events events happen at a fixed interval right so this one uh what happens over here and then if like a lot of things happening at once only this this interval is fixed so that it will it will just show like the last value over here and then show this last value over here right so um yeah if you are you if you are still confused you can comment down below and I try to probably find some link uh to help you with help with help you with right so uh as you can see here I have other uh high order stars that I want to share with you as well so another one I can think of is actually called a readonly high order star so for example if you have a star that you can change the value with for example right now I'm gonna create like input box buying value with a value star and you want to create a new store which is called read only value but somehow uh the user of this store does not know and still binds it to a input and you want to actually want them like no don't do that right uh so let's see so for example right now I have a writable star so that's our writable spell star and declare like a value equals to writeable let's read only value equals to value yep so for example okay let me hide this two box first for example I have uh value is a writable star so when I change something should change and I want to pass this store around to anyone to subscribe to it but I don't want them to actually set the value I just want them to able to subscribe to it and just read only right so if you pass this store as like a variable and if you assign it to a variable called read only value and you expect it to only read only and then you are wrong uh because they actually can't set the value so this this variable is being used by this second input and the second input tries to set the value and actually manage to set it so if you want to prevent that you can wrap this door with um instead of writing your own trying to come up with a custom store you can write a higher order Stars so that if you have a lot of similar use case not just for this store and a lot of other stores you can take in the store and then pass it into this higher order store and this higher the store will make sure that whatever store you text in will become a readonly store so you will return a new copy a new star that is read only and without touching the existing star so this year I um import read only from read only and I'm going to call this read only with the value so this will return to me a new star so I can it's still able to subscribe to this the value star but if I try to change over here although you don't see it immediately but you can see that there's already console error that tells you that the value your unable to set a value of a read only star uh you still The Binding still works is just because the uh in uh we we don't really we don't really do a uh because an area has already thrown out so right now you are changing the value of the input uh but after that the input will try to set the value store and there's an error and it does not come back again to reset the value of the inputs that's why you still see the values there but actually an area has already thrown and uh error has already happened right so read only star and how you implement it you don't always have to use a derived to create a higher the star or custom store you can create your own for example in this case I only need the Subscribe method from the store so I say subscribe it goes to the store subscribe but um to to give up a better to give out a nicer error I also implement the sets method that it throws an error whenever you call it so without it I will still it will still it is still a readonly store for example when I said something it is still a read only store except the error is slightly different it says read only value.set it's not a function so to give a meaningful error I say I still implement it and say it will throw in an error so that you know that you have done something that you shouldn't have done so lastly I want to show you is called a spring higher order star so um you've seen that we're able to throttle the value of the position so let me comment this out and let's come back to this two Box Thing right you see that we have able to um passing a throttle and then throttle the position right um that's we that's not so we we doesn't have to limit ourselves with like things like the bounce throttle or delay we can do something like a spring and this example I'm going to show you particularly and we can write it out together because it's I find that it's a bit interesting to think about this so I want to implement uh spring higher order uh star so such that I can call Spring with the value I the value of the uh to pass in a star to the spring higher the star and returns me a new star that is hopefully well the value of the star will be springy so over here um I am going to imp I'm going to use the builtin spring method from the spelled motion so hopefully you have watched my previous video about spring and twin I leave the links to that video in the description so over here I'm gonna import spring from svelt motion and over here I want to implement a spring store I want to return a new spring store um yeah I want to return a new spring store so I need to create a spring store first spring star it goes to spring and the initial value of this spring should come from this star but we can set it later on so so for now I'm going to say undefined so if it's undefined or now it will be now undefined and when you set a value it will not like spring to that value like the first value that is not null or undefined will be um will be set it directly so there's no springing from undefined to like your number so over here I say I'm gonna Define some like properties of the spring for example stiffness probably I'm going to go for 0.6 damping maybe on like 0.2 thing so that it's more springy so that I can see the effect and over here if I return spring store directly um written spring store directly you we still haven't have a way to update the spring store right you have ways to subscribe to it but you have no way to update it and I don't want to return spring store directly as well because um that in that case springstall will have both uh subscribe and a set method and I only want people to subscribe to Spring store I don't want to set the value of spring store and yeah it should be a readonly thing as well so I can say uh subscribe for now it goes to springstall.subscribe um over here I need to subscribe to the store uh to the original store and I'm going to have a fun whenever something has changed I need to use this value to set the value of the spring star so over here I'm going to say um spring store.sets so let's try uh whoops it's not work is it working is it not working yeah it is working it is very springy it is very springy um I'm guessing shouldn't need throttle for now let's take a look at how it will it's still very springy uh oops yeah very springy so I'm gonna reduce this spring uh maybe like damping increasing the damping so that it it settles faster right so uh if you take a look over here the code you may notice that we subscribe to the store but we do not unsubscribe from it all right this is this this will lead to us always subscribing to the store even if say for example we are no longer subscribed uh for example this function written the Subscribe method should returns an app subscribe and over here we should um unsubscribe uh if it's we should unsubscribe from the store as well and if we do something like this uh so if we come over here and have a function subscribed to it and let oh this one also have to be unsubscribed from Star you can do something like this right so that we unsubscribe from both subscribe from store and um subscribe from Spring yeah but this doesn't this isn't exactly correct as well because if you take a look over here um this unsubscribes it's just unsubscribe from like once instance of unsubscribing so if you have multiple people subscribe like multiple cases to sub subscribe to the the return store for example you have five cases of subscribing to it as long as one of it unsubscribing from this store uh we uh immediately unsubscribing from this uh the initial position store you cannot subscribe from this spring star is okay right because you still have four other people subscribing to it and receiving it but you shouldn't unsubscribe immediately from this um original store so we can't really do this we want to do this we have to um maybe Keep A Memory of reference counts of how many functions that we have and only unsubscribe from the store if all of them is being unsubscribed which means we have to manage again come again to manage the number of functions that is being subscribed being subscribed to the to our to our store and yeah so so that is something we should probably change to but I have an idea over here we can define a readable star so if I say okay so that let me type it out first I can use readable from svelt Star readable um I can have undefined first and a set so over here this function of the readable star will be caught only once when someone is subscribing to it and you can return a function if that will be called only if all of the subscribers unsubscribe from it so probably we can set up the subscription of the store over here instead and I'm subscribe it from here only in here right we answer we subscribe we only subscribe once when there's someone subscribing from this readable store and unsubscribed immediately uh unsubscribes when not immediately but only when everyone has unsubscribed from this readable store which is great right and which we probably should return this readable store instead so yeah but then how about over here um so when we subscribe to the store and we should also uh have this in here as well right we should also subscribe from the uh spring star subscribe so we should also subscribe to the Sprint store and since uh when whenever the spring store has changed should update the value of the readable store as well so instead of function this is actually sets so this set will notify all the subscribers that uh the spring star has changed and oh and then notify all the subscribers of the readable store right so over here I copy this over and I think this is much better implementation than the previous one so I'm going to remove this and I'm gonna clean up over here a bit and here we have readable and Spring right so if I move along it still works pretty much the same we don't really test out the unsubscribing parts but based on the logic that I've walked you through I hope that you understand uh where I'm coming from and why is it so right if you are not sure comments down below you can ask questions and I love to answer them okay so finally we have seen uh various kind of high order stars like throttle the bounce readonly spring and if you uh being inspired by this video and you think that you also want or you already have some sort of some higher the stars that you want to share comments down below I want to see them and if they are good I'm going to share them to the World on my Twitter account and probably I will want to also make a video out of it right I want to learn from you as well so you have seen how we can create custom stores and it's felt out of popular state management libraries such as Redux State machine exit value and you're seeing how we can create a immutable star using images and there's one Library although it's not entirely like a state management libraries but it has helped us with a lot of event streaming uh which is rxjs so today I'm going to let's take a look at how we can use rxjs as a store in spelled application so um I'm actually very new to arcgs and in fact I haven't really used rxjs before prior this recording this video I have done my research it's just solely because of this video because I know some of you have been using rxjs and wanted to see how you can use rxjs with spells um so if I do anything wrong please comment down below and let me know about it okay thank you so rxjs so rxjs provides us like observables that you can subscribe to and get the value of the observables and that actually the concept of debts actually very similar to cell store where you can subscribe to the store and get the value of the store and you can subscribe from it so if you take a look at observable and the stock contract you'll notice that observable actually kind of follows the spell store contract so what that means is that if you have an observable you can use the dollar prefix value variable syntax to access the value of uh the all the the values that is being generated out of the observable so let me show you an example over here I have a rebel so now I want to create an observable using from event so from event allows us to create observable from an event listener so I'm import from rxcs and over here I'm going to create a mouse position observable so over here I use from events say document and then listens the mouse move even from a document and immediately uh if I do something like this Mouse position merely I can already get the value uh all the events from Mouse move observable so it's it's mouse event but there's nothing uh it's it's like the event itself so if you want to actually get the client X and client one of the mouse move event you will have to pipe it through um rxjs operators to maybe pick up uh pick up some X and Y position right from the from the event so for each of the events I'm going to call map so map is an operator from arcgis um so I'm pretty new to this uh I've tried to do my best on researching this if I'm doing something wrong let me know in the comments right so our shares operators so I'm using map and oops sorry from and I need to map the events to maybe an object so I'm going to say x is events.client X Y is event.client y so I pipe this event to the mouse position and now let's try and see what happens come over here okay object object so I'm gonna say uh instead I'm gonna say Json or 3G file to see the mouse position so when I move around you can similarly that this is like um a star you can subscribe to it and it also returns and subscribe unsubscribe method then you cannot subscribe from the store so basically it's it works out of box right what about using rxjx with shell you just work out on a box you can use it immediately so um you've seen how we can convert an observable to a spell store basically not really convert because observable has already implemented the spell store contract so you can use it like a spelled store using the dollar prefix syntax to subscribe automatically subscribes and unsubscribe from it and get the value of out of the observable events but now we're going to look at a flip side of it for example if you have a spell store can you convert that to become an observable well of course the answer is yes I'm going to roughly show you how I would do it again disclaimer this is my first time doing this uh if you have a better way of doing it or better API that I don't know of let me know comments down below right so here I'm gonna say uh from uh I have a decline function called tool observable and it should take in a star and I'm gonna return a new original observable so I can create Observer a new observable using the Constructor observable and for each of the Observer um we need to subscribe from the store and for each of the value coming out from the store we are going to call Observer dot next with the value so um I think I need to return this unsubscribe method so um so the observable can be upsubscribed from it as well if you return the unsubscribe method if you can from uh from for each of the Observer so I can convert a star to observable right so here I've created a store using a mouse position it's the same event but it's it's using it's creating a new readable store which is a custom so we can create a custom spell store out of the mouse position uh you should watch the video on how I created this links in the description below so over here I'm going to import that uh Mouse position store and actually over here I also need to know that I need to import this observable right so over here I'm gonna I have my mouse positioned as a store okay Mouse position star I would do to create um observable out of it I probably will have to uh call observable the store and since it's observable we can subscribe to it and take a look at the value out of it right so here I'm gonna say value console log value so this is now an observable uh we can see the value out of it and to prove that this is already an observable we're going to use pipe like one of the rxjs operator again over here so I'm going to say pipe it to see um this time I'm going to use a new operator called plug so I can just pick one value out of the uh uh objects so this object the store gives us X and Y value so here I'm going to plug just the X so if I move around you'll see that only the x value oh I think I forgot to unsubscribe that's why you can see the console again Let me refresh this uh whoops yeah so you can see that the x value is coming out from the console so here we're here um I am going to so this is like the X observable uh using I'm gonna say x dollar uh and I'm gonna create another observable called y dollar equals to two observable Mouse position star dot pipe and you can plug just a y property and finally we are maybe going to create a news uh new observable by zipping this to where these two observable into one let's say sum of X and Y equals to zip maybe X and Y and pipe it so I'm gonna use map again over here I'll become an array of x value and Y value and I am going to return the sum of both X Plus y so again this are all observables right to prove that this is observable you can do all the operators from observable uh from arcgs finally this is an observable which means it follows a store contract and you can still subscribe to it but here I am you can see sum of X and Y so as I move along you can see that over here you can see the sum of X and Y being shown over here right so that's all for um rxjs with svelte star you can uh this rxjs observable is already following the swell star contract which means that you can already Subs subscribe automatically subscribes from it using a dollar prefix variable syntax and it's and also actually we can also in this video I've showed you how you can convert a store to come observable so that you can play around using all the observable rxjs operators to play around with all those events and then finally because it is a store you can use it directly again so instead of you know coming out with your own derived and uh deriving like custom store uh deriving store from an existing store you can convert it to our xjs maybe it's easier for you to play around with it using all the rxjs operators and then finally it is still following a store contract so although essentially it's observable but you can still subscribe it like a store so today I have a challenge for you how to make a Class Property to be like a star so the question is like this I have a scenario where I have a class called clock which has a property called time so this time right now is the current time but I have a function called tick that will update this property every tick so I I can call this tick function tick method every time every second or every few minutes uh that does not matter but every time I change call this method I'm going to change this property called time and what I want is that I want to subscribe to this class property I have so over here I am using this clock I'm creating a new instance of this clock and every interval I'm calling a tick method right every one second for now and I over here I want to have I want to always show this clock time I want to show that it's uh I want to so I have two places one is in a reactive statements where I'm assigning this clock time to a variable and hopefully this variable can uh this this hopefully these statements will be reviewed reevaluated every time when the clock time has changed uh of course right now it does not uh because if I uncomment this you notice that actually we are calling a tick method every second but you only see one console over here which means that those Felts not all the variables over here say this is a assignment so all the variables on the right which is the clock uh has not changed so far right which is true because we haven't changed the clock variable over here time yeah time is being assigned over here so all as well I can see is that the clock has not changed and therefore we are not going to this is not going to be reevaluated every time when you call the clock.tick same thing goes if I come over here and say clock the time instead um again this clock is this clock variable has never changed so we are not going to update this text over here um but how about when we assign it to a variable I'm assuming that the time proper clock does not change is okay but I'm assuming the time variable should change I'm I guess this this should change right because the time variable is the time property is what we are changing so far but again Phil does not see that so it does not know that um every tick you update this property does not know when this is updated there's no way to know um so what should we do so to know a variable that has changed is either whether the variable is being defined as a top level variables in a script tag which is like a stitch to the components yes there's ways if your update is those variables spell would know immediately but over here clock is a class it could be written in a separate file or it could be written in your M plus field but then all this property is not a top level um top level variables in a script tag therefore it is not a state to the components and therefore spell has no way that to know that day has changed spell the compiler will not analyze until that level to know actually this property has changed there's no way to trace this you can change this variable everywhere right if you pass this clock um because plus this crop clock instance to anywhere and you call the tick function a tick method uh the the variable will change in terms of compiling time you in in terms of the compile time there's no way to trace that deep to know actually all the places where you call the tick method and therefore end those kind of reactivity over there unless you trace it unless you use some sort of runtime method like a proxy to to to figure those things out right or maybe like some sort of dependency tracking but here so what we left over here is of course yes you can use some sort of dependency tracking Library memory to to help us with this but in this video we're going to take a look at how we can use store to help us right so star I can see two ways to use a store to to help us out in this scenario so first is take a look at so to to come up with this tool to come up with that two ideas that I have is it stamps up with this statement time equals clock dot time and as I explained earlier clock has never changed so spell treat does not treat this as something that will ever be reevaluated anymore so there's only two ways two methods that you can do over here right first is that how about we let sellout knows that clock actually is a star clock is something that you need to subscribe to right that is that is possible right so one is you make a clock like a store and a store with a property that has a Time so over here you you kind of subscribe to the clock right that is one way uh way number one and don't worry we're gonna explore both of them we're gonna try both of the uh idea that I I can think of for now so first is you treat uh clock as a star okay second way that I can think of is how about we treat time as a star so what I mean is that say for example let's come up with another reactive statement uh or not maybe we have like a Time store variable equals to clock Dot time okay and what you have here instead is you are consoling the Time store so this is a you can even do chords right this is a variable but this is a store variable which means that this can be subscribed and the value can change so if you do this over here we are telling that thanks spelled that okay this is a star subscribes to it you if it if the store value changes then you have to run this again so the way you probably would want to use is come over here and do this right you come over here and write time star so this is Method number two all right time star so let's let's write the method number one as well here is the clock the time right so if you if you take a look at how I come up with this you notice that the initial code the initial code that we have time equals the clock but time I'm looking at this statement time equals clock on time and this if you want this to be reactive to be something like a store that you can subscribe to then there's only two possibilities right one is the clock itself is a store or secondly is that the clock the time the time is the star so that's why first one is I retrieve the clock as a store and we do this so that we can subscribe to the cloud and secondly is we treat time as store so if you get the time out as a variable then we can subscribe to it all right uh do not do know that uh although time is a storm we can't really do like this because cloud.time is not a uh you have to Define this as a property and again this does not mix well things that it is a star uh spell only looks at the variable over here right so if we assign it to something else and we now itself is a variable then we can use a dollar uh that variable to subscribes to it okay so let's start with the first idea right clock as a store so what is a store is a contract where star says that any variable that you can treat this as a store when it implements this method called subscribe and of course if you want it to be readable you want the store to be able to be updated then you implement the sets method right and the Subscribe method itself takes in a function which is to be which is like a listener a subscriber and you have to notify that function every time that you something has changed so um yeah and then that function once you when you call subscribe method you should return also a function to unsubscribe to the store right so this is the score contract we've explored that and you can find this video in the link in the description or even in my channel say what is a store contract and you will find that so let's start with implementing clock itself the class itself as a store right so this clock is a class right and all these are the methods so what we can do actually uh very simply is to implement this subscribe methods once you experiment this subscribe method you clock this is another subscribe you can already treat the clock as a star right so if I come over here and comment other things away is not a star with us wait wait I do write subs or Subs cribe right now you see that this is a subscribe and you need to return a function written a function to unsubscribe now you right now you implement this immediately you are making this clock instance This Cloud class instance a store so what do we notify what do we send this clock right so um we can come over here and record down all these functions subscriber function uh Subs function and we need to tell them the value right I need to tell like a value for example time okay I I can do it two ways one is I pass it with everything I have for this class so every time this class has something changed uh yeah I would have to notify the subscriber um with the entire thing so whatever I get from this whatever is treated as a store value from this store variable is the whole class instance okay so if I do this then it can get every anything I have so it's not about time it also have this uh tick you do this hold on what's wrong again subscribe subscriber okay yeah you can also call Tick over here it will still work right so it will the store value itself is the class itself right everything you see there is is a value so that is one way of course if you want to limit whatever you can subscribe to like you limit only the properties that you can get then maybe you can create an object instead and just pass down properties that you want to be accessible from the store as a star value so I'm going to pass just the time this Dot time and now you see that clock.tick is not a function it complains because whatever is treated as the store value is whatever you pass it over here so you only has the time right so it it kind of I'm not sure about you it really depends on what you want right so this may make it a bit less intuitive because you know clock itself has all this time and tick method but once you treat it like a store then the store value only have time property so it's up to you right so for for Simplicity I'm just gonna pass everything like I'm just a password this over here so that I don't have to write so many things over here and now uh I also need to record the subscriber down so that every time I call Tick I also have to call the subscriber uh this right I have to come over here to get this reference and call this this right so probably I would have to do things like uh maintain a list of subscribers and over here I'm gonna push this this like subscribers that push subscriber and over here I'm gonna Loop through desktop subscribers dot push uh sorry the forage for each of them I'm gonna call this right every time I tick I will have to come over here and notify with a new value and immediately you can see now I this is updating uh even here even here hey sorry yeah even here it's it's it's being triggered right you can see this has been controlled out now this is great except that it's undefined because this is Tick so I'm gonna change it to time you can see that this is being called with a new time every time now right we are making our clock a star we're making a clock class uh instance a store because this is a lot to implement um although it does not seem that way any uh and we even forget to how to implement the unsubscribe which is we have to uh subscribers and supplies and gets the instance to remove it subscribers ah that index of subscriber and we need even to need to remember to clean it up right this does not look a lot but there's actually an easier way to do this which is to use a writable store so we can use uh inbuild Stars writable for example and we can rely on them to to handle all the subscribers for us so what we can do what we need to do now is uh just create a store first up front so I'm gonna say this is the store okay writable so what you pass in is the value of this store right we're going to pass in this and over here in the Subscribe method we can do is we can call it store and then we say a uh subscribe we can call this subscribe we can delegate this to our store uh object over here it's called subscribe and subscriber I'm gonna return this right so the store helps us to do the subscriber it also returns a function to unsubscribe so we just return it directly so all of this being delegated to this writable store that we have over here okay then the next thing is ah man I forgot probably there's too many stores running that's why because we forgot to do a cleanup so I'm going to refresh this page now so that it does not it stops consoling right okay now uh and it stops because we haven't notified uh our store that something has changed I'm gonna come over here uh now we don't need subscribers so we come over here and we notify our store so we're gonna see this store and sets this right so we're gonna set whatever is the updated value right so now you if we are using this as the value of the star then we use this if you were thinking of doing this like the time then you have to write this over here like this right so it's up to you whatever what what is being what is the value of this store so I'm gonna be lazy and write this and that's all and you can see now it's nicely done uh my star is ticking this is the this is the um uh we treat the clock instance as a star okay so next we're gonna try a second method which is to treat just a property itself as a store so over here I am gonna pause it for now I'm gonna uh let's see not pause it I'm gonna copy all this and create another file clock so that um the link of this Ripple will be in the description and so that you can compare this to uh implementation right clock 2. so I'm going to replace this I'm going to replace okay no I don't have to replace let's say import Clock Two from two okay and uh for the time being and stop ticking so that less noise over here and then I'm gonna use my clock to I'll create a clock too clock2.tick and now we want to figure out how to do this which is get a property and treat it as a store so let's see so we can use the same idea which is to use a writable but itself has to be a star right so this time actually has to be a writable star and now every time we tick we're gonna say this dot time dot sets right so every time we tick I'm gonna update this writable store over here so over here uh Cloud Dot climb store oh hold on clock that time oh this should be Clock Two the time is a star and now if I uncomment this you see that this number is updating every tick because and over here you can see this is being consoled out on every tick because yeah this itself is a store now so what does that mean what that means is that if I clock that clock to the time if I get this this is no longer a value I can't read this value now I have to treat it as a store and I have to either do this to get the value of the store or I have to import the get from svelt Star to get the value out of this time variable over here like I have to get the time to actually read out the value because it's no longer it is it is no longer a property uh no longer a primitive it is an object right even you can't see it over here so um that's great um depends on your use case but to me I feel like we kind of gain something and lose something at the same time I want this property to be a Just A Primitive number but maybe we can have some sort of convention to tell um to to kind of tell the user that maybe this is a very primitive value which is a number but if you do something like this right this should give you the store that you need or maybe even like this should give you the star that you knit right so what that means is that actually uh this has no special meaning until we give it to them right so uh what this means is that we can actually have time as a normal variable but we also did find another proper another property called maybe time dollar is equal to writeable uh this dot time so every time we change the time maybe we can come over here and say this dot time equals to the date now and we also update this star over here and say this dot time so now this is not a sub something you can subscribe to but rather this is something that you can subscribe to so uh so I I kind of uh I have yeah so it kind of allows us to a have a flexibility of you know just use it as a normal value or have it especially right have some sort of special thing that is like a special property that is like a store that you can subscribe to so user can use both of them if they want to so here I can still console hello time primitive I can have still console it as a number and if I want to subscribe then I use a subscribable property right so this is this is your this is up to you this is how you design your components um yeah so before I end this I'm going to say that this star is created every time when we create a clock even no one is subscribing to it and we can actually um change this slightly we can add slide uh if this is a bottleneck that you encountered and realize that hey I shouldn't create this store every time when I have this clock instance because no one is subscribing to me and if you if you know no one is actually assessing this time Dollar property if you notice that then maybe some you can optimize it this way I'm gonna show it how I I would do it so first is I i instead of doing this I I can have like again like us more of a private property called uh time star uh yeah so I haven't defined it yet so I just wait so I'm gonna have this private property called time and that that starts with a pro underscore but at the same time I look at a gather for this class called time dollar right so this is the geta method so this tells us that if I call this right it means that I'm reading the time a dollar I'm gonna read I'm reading this time Dollar property out from this class all right so uh that tells me that okay if someone is accessing this meaning someone is interested to the store and someone wants to subscribe to it so only then we we create this store so I will do here is that I would create a store and store it somewhere which is like privately so this this is the variable that I'm gonna start this is a state I'm gonna start in it so I'm going to come over here and say uh if this dot underscore time uh it's already defined right so it's like if this is not undefined then I'm going to return this immediately or else I am gonna uh create this right so maybe I can do the other way around if it's not defined yet I can create this this dot underscore time dollar equals to writeable this dot time so I want to create this writable store only when I'm assessing this time Dollar property of my class only created and when in a tick method I will also if this time is not undefined and I only do this only when it's already defined I only update it let's say this dot time uh dot sets this the time so I only update this store create this store only when it's needed and only update the store when it's created so this way you kind of uh delay the creation of the writable store if it's if it is a bottleneck to you right so that's all that that we have done so far uh how to make a Class Property a store or how to make how to subscribe to a class property right you can make the class itself a store and you kind of subscribe to the class itself so that whenever the property has changed you kind of know on the know about it or you make the Class Property a store and you subscribe to that property right so we've explored two different methods and I hope that this opens up the possibilities that you can do and if it if you quit something so amazing that you want to share paste your link to the Rebel or your project in the comments and share it to the world hello I'm Leo so today we're going to talk about how we can create a store that allows us to do undo and redo right so we have a store that stores our data and we can make changes to the store so presumably you have history of the changes that you are making and then right now what we want is that we want the ability to undo the changes or we do it after you click undo right so here I have done a basic setup I've created something like a mini calculator where I have an input field over here and I have ADD button so I can type a number and then I click add or add the number 10. and then hopefully I can type say 50 and add 50 to it to 60. so what I want to do is that uh this is implemented as a store and I want to have the undo or redo ability in the store that allows me to click undo and jump back to 10. and then redo will jump back to 60 because uh yeah because we created with 60 first and then undo back to stand and then we back jump back to 60. so to create this kind of stars so how should we approach this so that's what we're going to talk about in this video so um the thing about how we can create an undo reduced store right we want to think about the undo redo mechanism right so most likely you will have an array that stores a history and that history could be of two kinds right so that defines uh that determines the two different approaches that we can look at for this video uh for this problem right so the two approaches would be first is that we have a history we have an array of actions so that the array of the history array records every action that you are making right so hopefully uh when you do Undo It means that you are reverting that actions right so the action will probably have two different kind of methods or maybe the action itself uh is is designed a way that can make changes to the store in one way as well as reversing the changes right advancing like applying a changes and reversing the changes right so you have a array of debts record then doing undo or redo BS straightforward as applying the changes or reversing those changes right so that is one approach and we shall explore that later but let me tell explain like the second approach right the second approach would be the history array starts a snapshots of the value at every changes so every time when you make changes you store the snapshot of the value that you're storing right so when you and so when you make new changes you store again a new snapshot so you have a history of snapshots of your value the star value and doing undo or redo will be um reverting to that snapshot right so you'll be kind of like setting back the value of the star to a previous value or previous snapshots and then redo will be setting it to a new snapshot but of course the act of um and do what we do shouldn't like affect the history itself right so setting like doing undo will be setting your the star value to a previous snapshot but that shouldn't uh set the store value is in a sense where it's like setting a new snapshot right that is just reverting snapshots that's all it doesn't touch the history of it at all right so probably so we're going to explore these two approaches uh this will most likely will be like a live coding kind of way of explaining things so you will see like my thought process along the way on how I'm gonna tackle this so I've laid down my two um General approaches two way of thinking of it and we shall take a look at both of them right so this video may be long so I will try to put in some landmark in the um in the YouTube video so you will have like sections if you want to jump on the first approach or the second approach right so before I get started if you like this video or you think that this video is going to help you a lot please consider to like my video as well as share it if you are at the end of the video if you think it's it's great right so liking my video will definitely help me as well as you because anyone who likes my video will give YouTube an idea that this video is great and it will share and recommend to more people like you and more people like you will able to see this kind of video and help them right and in return may help you right so let's see the first approach so the first approach we're gonna do is we're gonna so here we have a simple store where every time when I add something we are actually changing the value of salt right we say store plus equals value where we change the star right so what we want to do here is we want to add an array called a history history okay so remember this approach number one um I'm gonna create a new file called approach 1.js so this approach number one is we're gonna uh start a history of a star history of actions applied to the star right so okay I think I should do it this way I should import something from approach one so this approach one let's see we're gonna use meeting how should I do this okay someone could use a concept that I introduced previously it's called a higher order star so it's a function that sticks in a store and create a new store so this star hopefully will gives you a um and enhance ability uh to the existing Star right so much like you learn about in JavaScript where you have higher the functions which is a function that returns a new function I'm probably taking a function and return a new function right so how the star sticks in one store so that star itself can be any kind of stars can be a readable can be a twin star can be anything right so we don't care about what is that store under the hood but we just add we're just gonna wrap this door and add two more abilities which is to do an undo and redo right so here we're gonna export this function uh which is our higher order store function I'm going to call it approach one right so it takes in a store and hopefully it returns a new star right so a star is a normal object any object can be a star as long as it follows the spell store contract which is to have the Subscribe function that takes in a function and return an unsubscribe function and the function will be called with the sort value right every time when you change the function should be called to notify all the subscribers that a new value has changed right so you have to follow the store contract which we're gonna Implement implement store contract over here okay so here I'm gonna take it I'm going to import approach one from approach one and here we have our store right so we're just gonna make this star a undo redo Star right so we're going to create uh we're gonna say undo redo redo star it's gonna be approach one wrap around with our existing store and hopefully this function will return to us a new store with with the same store ability but with two more functions which is to do undo and redo so we're gonna use this undo reduce store instead so everywhere here we're gonna just use undo reader star and in and over here one click for undo and redo we're going to call undo from the under region store and redo right so we haven't implement the store contract that's why it says that under review store is not a star with a subscribe method and we're gonna Implement stats right so first thing first we can um we can still use the underlying store subscriber method over here so subscribe can still be the store subscribe okay and Set uh is something that we're gonna overwrite right set value okay and then we have the undo function method and the redo method over here okay so first is we need to have a history restore history of actions that is going to be applied to the store right so I'm going to create this history array um okay so now we are doing a history of actions applied to the store so which means that we right now because of this design we can't do this and do resistor plus equals value anymore right because uh if you just do this we're gonna setting a new value to the store but we didn't tell the store that how we are going to do a reverse action of it right so um of course of course there's a lot of ways to um yeah so we can't really do we want to we can't write this straight away but we're gonna write it in a way where I say um I'm gonna say undo redo store and then um I'm going to call let me think of a okay I'm going to call it do action so I'm going to define a function called do action which uh we're gonna have two methods right as I say it's either you apply the action or you reverse the action right so it's apply or reverse right so apply and reverse so do action so now we we change this to um a method called direction that does that that takes in the object that you would have to apply this this object itself is like an action right which is something that we're gonna store in the history so it has two methods in this object which which is to apply something or reverse something right so say for example here I this should text in like the value of the star of this undo register so apply meaning we wanna here we are adding right so apply is to uh at at Value right we're going to return a new value of the star so we're going to add this value and reverse it is actually going to be subtract from it right so written is value minus this uh this value from from it right so you you apply or reverse so we have to do this kind of pair of course you're saying wow this is uh this this is ugly right this this way is a bit ugly to write this um so this isn't an action object that has two methods right apply reverse and a lot of times if you look at libraries like um or best practices of when you see how people use Redux and Redux like um libraries you'll see that they have a function that creates this object itself right so that function kind of abstracts away a bit of this ugliness and makes it more easy to every time when you want to add value it's not gonna write like this object right so this is an action object and the functions usually is being called an action Creator right a function that creates that action so I'm going to call I'm going to create this function just to show you how that function usually look like so we're going to call x a sum right uh which sum takes in a value so this should create this object right so I'm gonna create this object so this value comes in over here right so so to call this we're going to call do action and sum with the value right uh so hopefully this looks less uglyish right um I guess we have problems with okay having a I'm gonna call I think this is a bug from svelt said that does not allow dollar value in an argument right that's just me removed it okay so this function returns a object right so we're going to call this to return us that object so this is the action Creator I'm just gonna add this in the comment action greater you probably see this kind of action creators a lot people think it's a boilerplate kind of age I think but here we want to because we want to have like two kind of two methods where we'll apply changes and reverse changes probably we're gonna have to create this kind of object that we're gonna push it into the history so so this is something that we kind of have to do right history of actions right that's what we're gonna have of course you can't um uh hide this somewhere else right you can have maybe um like storing this part of the definition of the store itself and then maybe over here instead of directions you maybe you call like the sum of value something like this but having like this action is defined in green within the store itself right so the star kind of know that okay it has a function that calls sum that actually does that pushes this object uh this this object this ugly object here into the history right so over here we're going to do something more generic we can say just like do action and push the whole action into the history right so this is about the boundary of where you abstract things out whether you keep more push push more of that detail into the story self or maybe just like expose or have a more generic and expose that option to to the user right so here we are calling do actions so maybe do action meaning we are going to have a do action method instead of value and this is not value anymore this is actually uh action right we're gonna do this action so first thing is we're going to push this action into the history right so we have a list history of actions and of course we want to do this action right so we're going to say action dot um action dots what's that apply action.apply and we're going to apply the store value right so what's the value of the star well we would have to say import and get rom spell store you get the value of the store right and then this will return a new value new store value and this new store value we're gonna set it back to the stock right store dot sets new star value because this is um um a lot of line of codes and maybe slightly unoptimized because every time you get store when you use get it's what it does under the hood is trying to subscribe to the store and grab the value and then I'm subscribe from SQL right so we can work around we can have a much concise way of actually expressing this right which is to call Star dot update the star value okay so this is the value and over here uh we are calling action to apply with that value and we are returning immediately so returning immediately which is to set this written value as a store value right so this replaces these two lines right so we don't even need to get glue the cats over here right so we have history the push and now uh undo is nothing but history.pop to pop up the action okay and we have this so we pop up the action we're going to do is action dot reverse right so we're gonna copy do this like store the update by using installer reverse instead of store.apply so I'm going to copy this okay so let's let's try this out right we have we're gonna ADD stand I'm gonna add 20 we have 30 so we have and then let's add 30 to get 60 right so we have we start from 0 10 20 0 10 30 60 right when you click undo we jump to 30 and undo we jump back to 10 and do we jump back to zero okay so um uh a great thing about using the higher other star is that instead of having to just use writable we can have actually twin twin star it's spelled motion whoops Twin Star right so now we can add you can add 20 okay at 30 and we can still do undo undo and undo right so um it doesn't we don't really care what's the underlying implementation of a star it can be a twin it can be a spring story it can be readable anything you depends on what you want but the the key is we are adding this undo redo ability to your store that allows us to change the value right however if you right now we want to implement this redo we realized that um it's not as straightforward as this it is anymore because we pop out the action right we pop up the action meaning the exchange is no longer in the array so right now if you want to do a redo um we kind of we want to do a redo what other actions do we do right so meaning we can't really when we do undo we can't really pop it out because if we pop it out uh this this action will be dis be used and then discarded after this action this this methods and with no way to redo it unless we maybe collect this undo action right but a much easier way to do this is actually maintaining a index like what is the sorry zero so what as in what is the current index which is what is the current uh history right so it starts with zero and the history itself should actually start with the current value of the Star right so here we're gonna just get the first initial value when we create this new uh approach one undo redo Star right so let's add Bank the get Okay so here we do action what we want is that we want to forward this index and we say history index is equals to the action and we're gonna get the this one history history index dot apply the value right so undo will be actually decrements the index history index and then uh again same thing history history index to refer to that action and then reverse it right and then redo is actually to increments again back again and this time round is to apply it right apply that action uh of course there's one thing you we kind of need to take care of here right so when you do undo a few times and then you do um when you want to make a new changes you actually want to discard the the rest of the undo uh whatever is undo you can't do a redo anymore right you want to remove all the undo actions all right so that is what we need to implement it but before that let's let's just try this out first right so we add 10 we're at 20 we had 50 right we undo back to 60 undo back to ha so something is from over here let's let's see what's wrong so let's ah okay reverse is not a function so I think we need to check if we greater than zero only we can do undo right so um uh I think this is sure this is not a start we need an action right so sorry no idea why I wrote that line okay so um while we still have it uh we just keep increasingly this one should just start with negative one right so index is zero and then action okay so greater than zero while we still have something on the uh history array we just decrement and then apply that okay so let's set with 10 Rich 10 and then it starts with 20 which 30. and then 30 which 60 right undo okay undo should bring us back to 30. and then undo should bring us back to if something is wrong over here right so let's let's take a look at it 10 and okay let's I think let me change back to a writable so let's start with 10. and then 20 and 30. I undo should be ah okay okay so we should okay I think I got the logic mess up okay so here we are while we still have history right greater than zero right greater or equal to zero we apply the current action right because the current action is the one that is pointing at the history index we could apply the current action as a reverse and then decrements the history index right so yeah so if you are at zero you apply that zero actions reverse methods and then you decrements to negative one and then therefore you can't do an undo anymore right so we have 10 20. 30. undo is 30 and do a stand and do is zero okay that's right correct so if we do redo again we should apply the current let's see no no so redo is because undo will move the index back right so redo is we will move forward and apply that action so we're gonna say uh yeah move forward and apply that action but we have to make sure that if history in next is less than uh history dot length minus one right so because the last index that you can get is history length by the minus one right so if uh you the most you can increment is to that place right so if you're less than that you still can increment okay so at 10 20 30. right undo is 30 undo stand reduce 30 redo is 60 and then you can do and do a read yeah you can redo animal unless you undo right um so why sit before that before we train out and fix things around is that when we do action we also make sure that uh if we have undo previously we want to remove all this undo history when if we do a new action right so what I mean is that say we redo is 60 right so you undo 30 but right now if you add say 40 we should not allow any more reduce right we should all the reduce should be nullified right so in this case what we're going to do is uh once we increment a plan action uh we should also add another check which is uh to remove everything all the history index above all the history Beyond history Index right we remove all the past histories right we of course we can overwrite this but then whatever is beyond that it's going to be nullified and thus we don't allow any reduce anymore right so see for example I do add 10 20 30 I will do undo and then we apply say 20 right so now if you do redo it jumps to 60 which doesn't really make sense right because 60 was like the then we should be a redo again so here we're gonna uh remove them right so we're gonna do for Loop uh a very simple followup to go through everything and remove everything um I think I'm just gonna use a instead of for Loop I'm going to use a while loop to say while uh okay I'm gonna say let's I equals to history in next start um index plus one right we're going to remove everything okay I don't know so while um say history index is less than the history Dot link minus one right so this means is that once this line it says that um history index should be the history length minus one right if you are less than that meaning we have still a lot of histories in the history array we should remove them the way of removing is going to say history.pop it's gonna pop out from the end of the array right so while history length minus one yep correct so let's try that out so we're at 10 20. right 30 could you undo twice back to 10 I'm going to add 50 and now I can't do redo oh wait you can't tell the difference okay hold on let's let's uh say let's let's restart everything again so can I say start with 10 uh 10 again and 10 again so we have 10 20 30 undo undo and then now we're gonna add 80. right so if if this works I should not redo back to 30 right so yeah if I click redo nothing happened but undo will bring us back to 10 and we do bring us back to 90. right so here we have our first approach brush number one which is to start a history of actions an action is um this is nothing but an object right it's nothing but an object that has apply method as well as a reverse method right so we have this kind of object with apply and reverse we store them in an array of history as a history so every time when you want to undo it's going to be calling the reverse method and you want to make changes you're going to call the apply method right so undo is reverse reverse and then redo is apply apply apply again right so you start this history of actions and there you go there you have a history under redo kind of star right and we say that creating this object this actions is is uh it's a lot of boilerplate then maybe instead of like having to create this object every time maybe you create a function that's called an action creator that creates that action for you and maybe this makes the code more slightly concise and easy to understand and you could Define this action right with inside this store itself like say maybe have like uh maybe like adding this whole thing like sum in here foreign which is to do like this dot do action to to do this action itself right you can have this built into the store then you'll be able to just like like calling the sum itself instead of having to call like the do action right you you can do that uh you can you can do that uh it's it's up to you on how you designed your store like how you abstract out the functionalities of your store right so yeah we've we've seen how we can do the approach one which to have a history of actions let's explore approach number two which is how we're gonna have a history of star values so if you like how I approach the approach number one so far uh don't forget to smash the like button because that is very important as I said it's important to you as well as the me so that we all know YouTube knows that this is a good video and you will try to um promote all to more users so that they all all of you will enjoy and learn more together and grow together right so let's take a look at approach number two approach 2.js same thing uh I'm gonna create a higher order store so I'm going to copy some of the things over here of course maybe we don't need this all right approach number two it's a star history of star value snapshots right so the way of implementing this would be uh every time when you set a new value we are going to a so a new value into the history and every time we do undo is to reset uh set the store within with the previous history value or on whatever is the value inside that you store in the history stack all right so here first is we're gonna again create this uh I'm gonna have the similar concept over here history history index um here we're going to store a snapshots of the store right so we're gonna I think the first item you can have in the store is the value of the star the current value of a star so history Index right now is is zero okay uh next thing is gonna have same thing this is gonna be a star and copy some of some of the things that we've done over here uh subscribe okay and do uh maybe we don't need uh this is to be determined right but the idea of History index is still valid uh redo this is too still to be determined by the idea of not going over the array is still valid right so we have our new start approach number two um I think I should just copy this whole code over here and say app one right so if you want to play with this Ripple you can look at the link in the description right so I'm not going to remove like modify this code this is app one for approach number one okay so right now we're gonna import approach number two create a new approach number two undo redo star and this time round we don't need uh we can't do this directly because we're gonna just set the value right we what doing this is to call undo reduce store with a DOT sets method to set a new value to the under redo star so the magic itself will lies within the sets function right so here we have a set so let's write set okay set will be called with a value okay this will be the new value right so we want to store a history of values right so here first thing is we say history index increments when I say history of History index would be the new value and now we want to set this value to our store as well so that's whoever is subscribing to the store this so This return store is still using the same store subscribe right so the subscribed subscriber of this doll will get the new value out of it so we're gonna say star dot sets uh new value okay so this is actually the same of writing this let me just do it like this for now because later on you will realize that we are making a lot of this and we hope uh we're gonna do this all over and over and maybe we can make this into a function right abstract this out right so um for undo undo will be take a step back and sets the store to the previous value right so here we're going to say his story again history minus minus is correct um but we're gonna do it while history index is greater than zero because we're gonna take the value from history after we decrement right and we're gonna copy this because we're going to set it backed and over here redo will be playing the history next right so uh while history index is less than length minus one we incremented correct and then we're gonna set the value of the Star right so you realize that we're going to do this over and over maybe maybe we can't make it a function we're going to say update star uh I'm gonna paste this in and I'm gonna replace it over here like this right place it like this okay so we have all this and of course one last thing that we did for the previous approach is that when we increment and we update the value we also need to remember to clean up all these three right so what we did over there was to say while it's less than that we're going to pop the history all right so we're going to do that as well and let's try this out okay so let me say 10 right if not 10. we have another 10 okay now we undo we're going to jump back to 20 and do back to 10 and redo 20 reduce the 30 right undo undo and we add 80 and now we can't redo anymore but we can still undo undo or redo redo right so there you go have a history of values like the snapshots of the values of the store ah so before we end this there's a cache on this approach oh there's a cache on both approaches depending on how you design the the action of approach number one which is that what if we want to um star instead of storing numbers primitive values like numbers or strings we want to have a store in the stores an objects right what if we want to store an object why does that matter well because object itself is mutable right you can mutate object right then oftentimes we are so used to in spelled we assigned a value to the property of the object right to the store right that actually mutates up Star right so let me so so if you are storing a snapshots uh yeah I think that will mainly affect approach number two which is if you store snapshots of the store and you're storing a reference to the store itself right and if you mutate that up star object the value the star value objects every time when you changing it starting a reference ejectories storing the same reference over and over and over again and in the end you are not uh when you want to try to redo it or undo it you realize that there's no effect because you are still storing a steam object reference right because all along when you make changes you are actually mutating the object right so to demonstrate this let me show you what I meant right let me change a bit on the code itself right just make a very simple change let's just say writable is a value it's an object with a value property value zero right so here we I'm going to have two uh two ways of displaying the value so first is we're gonna sleep stringify the undo redo star so this shows us what is in the store itself right now and here we are uh getting the value itself right so okay so now we have the star value right so every time we increments we are we need to plus one of the value right so technically this is the changes that we just need to do right uh because this will still this line itself will still call the sets method of the undo reducer to set the new value of the star because in this case the star itself is the value of the stars is not change uh the reference itself is not changed the value in inside it has changed right the value the store value dot value has has is updated right so uh let's see right so when we add this is this has changed we're at 10 you see that it comes 11 we're at 20 it turns it to 31. and if you when you want to undo it you realize that it's not possible it's not possible at all so what is happening right as I explained this is because everything within the history is still um record is still everything within the history is referencing the same object to just show you one more step that this is itself is true I'm gonna create I'm gonna expose the history out I'm gonna say this is a writable Pro okay import writable from spell star right and so I'm going to make history a writable store as well uh I'm just going to create a new history right the ball okay sorry history star and I'm gonna have uh uh property called history that returns history store and everywhere we will change the history which is over here only over here I'm gonna set uh which is called histories start or set history okay so here we have it and here right now we're gonna just have somewhere to show you the value of the star gee fine uh okay so this is the history but history and this is a star so we're gonna say star okay I'm gonna add a new line so this is the history I'm gonna add 10 whereas that I'm pushing a new value to the history but then because both of them are referencing the same store the steam object both of them the value is updated right if I do this you realize that uh we are update we are pushing another same reference into history so undoing itself does not have any changes it does not have any effect at all right so uh yeah so what should we do so one way is I say we're gonna save the snapshot so snapshots of the objects inside the history array right so um getting a snapshot itself can be as can be a very simple straightforward way of doing it would be using the Json stringify or Json parts a combination of both right so if we turn the whole star value into a string and then convert it back to an object what you get is a new object of whatever the the store value is right this is a new object so we store that new object into the history so every time when you make changes it will not affect uh huh it will not affect the sorry you're not affect the reference within in the array right so I'm gonna so what we're gonna do here is we're gonna say json.35 uh okay I'm gonna create a new function instead so sometimes this has been called as as like clone cloning the object right a very uh a fastest way of cloning the whole object out right which is to convert it to a string and return it and then pass it again to return back the object itself of course this is this has his drawback for example this has uh this uh there's a cache on this clone function which is it only works with object that has no cyclical reference because if you have a cyclical reference a string G5 will not work it will break and also it works if the object itself just a plain Json object because if you stringify you can't specify functions all of them functions now undefined things like that will be gone right so you have your own drawback over here and then lastly of course about performance whether it's it's puff it's it's performed the performance is good if you just like if you have a very huge complex star you want to stringify it and pass it again the stick uh is the performance okay well it's it's it depends it it's Dependable right so I'm going to just show you like a simple straightforward way of doing a cloning first and then I can and then later on I'll suggest some alternative of um using the idea of immutability to reduce this cost of course immutability itself introduce some sort of cost but then if you have a more far more complex big object that you want to get a snapshot that you want to not mutate it then you immutability will come in handy in that case right so firstly we just do a simple cloning because our object itself is so simple right it's a value right uh that you only have one property called value and it's number right so here I'm just going to call clone the value of the star and every time I push something into this history I'm going to clone it as well right shouldn't you find it's not a function oh sorry my spelling string G5 okay let's clear this okay so let's try this out so now I add a number right you see here this is not mutated right because we we actually clone a new copy and store it into the array and if we make changes again hold on hold on hold on ah okay I think this is okay so we we clone it and stored in the history but then when we call up this story we are actually setting the the Clone version right which is not what I uh and then if you mutate that clone of the the Clone version of it you are still changing it mutating it right so uh I think over here um let's see it's starting free okay so I think over here update star okay so the update star actually okay shouldn't we don't have to um you have to start a clone version in history in this case right so of course the first time we we started clone so we are not changing the first history right but then after that we are going to every time when we sell something we are not storing a clone we just start the change version but because we calling this the Clone right so this is just not taking care of the place where we just call set also taking care of the place where you do undo and redo right so every time I undo redo we are pointing back to the previous snapshots but then we are giving a new clone to the store the underlying store so that you whenever you change from the history again we're not changing whatever it started in the history you are changing from the clone of the history right so let's let's try that out again so let's say that's that 10. at 20 right and let's add 30. so we have history of six or four four items in the history and to undo we're going back to 30 undo back to 10 and we can even redo undo and we can even like change the value at 20 or sorry actually at 20. undo and then add 80 right so this uh this does not change the current the state that I was changing right it does not change this value 10 like just now but it's created new it's actually modifying a new clone and then updates and then push that new value into the history right so um cloning it cloning object allows us to create new snapshots objects that because object is mutable and you can't if you change the object if you want to store it snapshots of objects within the history and then make sure that each of them are a different reference so that you don't mutate the the snapshots that you are storing in the history so finally with as I said about cloning I I mentioned about the drawback uh in terms of performance things like uh so and I suggested that we are going to talk about immutability right because immutability itself will allows us to immutably change the object uh meaning you when you make changes you actually create a new reference of the object you are creating a new object and then we're going to store that object into the store instead right so in that case we don't have to do clothing right every time when you make changes you actually create a new reference of the object and you just started a reference into the store right so even and so so you don't need to do a cloning right so the immutability parts of the algorithm of the library whatever you are using will help solve that problem right so a very simple way of doing the immutability is to instead of assigning a value directly we're going to say we're going to spread it out right so we're going to create a new object reference and then value equals to the new value right uh actually the new value will be that this the Value Plus value right so this will create a new store a new object reference I'm going to store in the store and that way you don't have to you don't need a clone function anymore you don't need uh clone yeah at all and we try to run this right that 10 at 20 they are all different it will always create a new object before you're calling a set to the store right so here you will allows you to uh um having a snap array of snapshots without mute changing mutably changing the star value of the in the history of course you may ask me like okay how about using libraries like images and things like that where because uh writing this sounds easy if you have a very simple object but it may get Harry if the object itself is humongous right if you have like a very nested object itself then you have to keep doing this and then maybe like a fool and then you have to spread uh undo redo star.full and then you because you want to add a new value to full and then you fool the bar you will and then you have to spread it again and things like that and in the end it just makes the whole thing very messy and you will just like to use emergency because that allows you to assign uh make changes more is more intuitively to just make changes because image.js will create give you uh the library itself will give you like a draft state where you can make changes to draft States directly and then you can commit that and then apply and return a new object reference right so we shall take a quick look at how you would pair this with say image.js so uh first thing is I'm going to import produce from email right and actually I've created a video about how you can use images with stars and yeah you should watch that video if you're interested like that will be a full length video about talking about images and spell sore right how to make image.js into a spell store right but over here we're gonna do a much lighter version of it right so uh you have a function called produce an image yes which uh if you come over here how it works is that you can call it produce with this with an object and it will give you a draft right a draft the draft itself is actually the the value itself but but the implementation of it is like it's like a proxy to the actual object right so this object right the solve value is an object and draft is a proxy to that object so changes make to it mix to it will be applied to it later on uh and it will apply it in a way that it's done immutably without changing the reference of this right and so you return a new reference new object reference in this and you can assign it to the start right so here every time when you make changes you'll just create a new star reference right so draft over here we're gonna because the drop is the object itself we're going to just say drop.value x equals to Value right that is what it writes I mean uh make it nicer okay right so this way is much nicer and simpler to write right I I thought I believe that you will agree with that so let's try this try this out right let's add 10 okay our process is not defined so because of how emergencys library is implemented I believe it's it's using like the process right so uh process variable and it will be handled by your bundlers but let's just Define this first and then so that's so quickly Define this would be uh going to the sorry iframe that we are running this and just Define this window.process equals to f uh which is an object I believe node f is should be maybe I'm just gonna say production and this just need to do once uh processes oh sorry hold on uh uh I'm not I okay that's that's just not play around with that let's just Define ourselves in pots patch I'll call this patch we know the process equals to f node f equals to production okay uh yep I believe we fixed it and let's try it okay find a full error okay there's some errors while using with the draft I believe uh let's see let's let's try again okay it works okay I I believe we shouldn't return any value from that so just make it a void uh so here you see we we just make it this way and now it's very simple we just add something always give us a new reference but from this produce function now we can undo make changes and we do and do redo things like that and it just works right so um if you want to start a history of objects of snapshots of the store values then uh if you're it's a store value itself is primitive then it's simple for you because you always store the Primitive value but if your star value itself is an object then having so you then you would have to either one clone it so that clone to always clone a snapshots to store in a history or two uh make changes immutably right don't mutate the object itself so you can do it yourself by using spread or use libraries like images to help you to do that right so that's all from my video hopefully this uh long winded video helps you and makes you to learn understand more about star itself in general as well as like Concepts like Hydro stars um and undo redo kind of uh operations and hopefully uh you learn a lot from this video today I'm going to share with you about context in particular how to make contacts reactive using Stars so let's start I've set up something over here I have three components app ciao and grandchildren so app Imports child and when there's a child child Imports and uses a grandchildren and grandchildren over here as you can see all right so I want to use context to share data from app to grandchildren by passing ciao in real life you probably have a very nested deep uh component structure where you have multiple layers of component and then and but then you want to share data across uh across like the parent the grandparents and the grandchildren component um if you want if you want your data to be irrelevant of your component structure you can use an external star but in this case we want only all the grandchildren of this grandparent component to have to share the same data that's why we go for context so the way of using context over here is you come over to app.silts and you use set context from svelte so it's a key and then value so you pass in a key for this context and then the value of of the context value so in this case I'm setting the context name value and the value the value of that context variable the context data is called count so initially I have counts equals zero so I'm accepting a context of value of value 0. and in the grandchildren to receive it I use get context and pass in the same key in this case the value and I get the count over here so now I have two variables um so to make to show that it works I can initialize counts to 100 and now my grandchildren when I received it the count is value 100. I'm sharing the count over here and I have buttons to increment and decrement the count and same thing goes with the app.s felt but context is actually linked up during the component initialization meaning when the component grandchildren is mounted initialized the link from the app and the grandchildren is being linked up and that is when you get the context so get context will get the initial value of the account which is 100 and that and that is being linked up during initialization so the value of the count is that variable but then um discount is a number number itself is not um say mute is you can't mutate a number you get the value by value rather than by reference so now we didn't grandchildren if you're trying to increment discounts you only uh it only change within this grandchildren component same thing goes from app.felt since this set context will be only called and linked up at the initialization now when you try to increment and decrement it don't really change the context value in the grandchildren so two bands there are linked up at the start but then it lost synced out of sync so how do you make sure that it's reactive in a sense where when you change the value over here the context the value of this socalled context is always get updated like all the grandchildren get updates when this where when the counts value in the grandparent has changed well that's right you can use store so here instead of just defining the variable as a number 100 and can import writable from svelt Star and make my account a writable star so now I can um I'm still pass in the store over the context but to show the value I'm going to reference it using the dollar prefix variable syntax now I am seeing this count over here and now since I'm getting a star to read the value of the star I use dollar prefix and now uh although it's being linked up at the initial initialization of both components but because it's a star and it changes to the star uh all both app and grandchildren is subscribing to it so both of them will know that whenever this store has changed the parent in the app will incremented it's it's being notified on the grandchildren because they're subscribing the store and that's why the value of the star is being update uh being showed over here the latest value of it is being shown right same thing goes with the grandchildren when you click over here it's being updated right on the start so summary uh context is being set up during initialization and therefore value if you change the value is not being the updated value will not be reflected at the grandchildren to make it reactive in a sense where whenever you change the the variable in the context in the grandparent if you change the value and you want it to be reflected to all your grandchildren then you should use a store in States you can pass the star um over the context just like passing any variables and hopefully your grandchildren will subscribes to it and get notified whenever you change it in a grandparent I'm going to share with you tips and tricks to manage stores complex stores in your spell application I believe a lot of you love to learn about this in fact the prepared content the material of this video is it's been very difficult not all problems can be solved with one solution right different applications different styles different Logics requires different ways or methods to optimize them um so I try to look around in the front end wall try to gain get some Inspirations from different libraries or different Frameworks out there and try to summarize a few points I would say tips that you can use in your application of course you don't have you you shouldn't apply all this methods blindly to your application optimization is a science you need to First measure before you do anything right you need to know whether there's a problem to be fixed in the first place so over here I have prepared an example and hopefully that is real life enough and under in this example I have two main issues that we are going to solve so let's dive in and take a look at the example that I prepared for you so over here I have an app that is like a todo list so you can come in and type to do you type a checklist say uh record a video you can click add you can add more uh edit my video and let's say uh publish to YouTube and oh what okay so something must be wrong in the logic over here um which we will take a look at what it is but at the same time take a look at here there's a nav bar and this is like a notification that shows you what has happened so far and we have my username so when I click I can change my username over here so the house it's the best oh no the worst okay I have fun uh so let's take a look at in terms of code how how what how this works so here I have a nav bar in the nav bar I have a notification components that shows the notification and then I have my username and then I have my profile so this edit profile is a a buttons that will pop up and then you make changes so anytime when you make changes you see over here I uh edit the notification so all the changes for example edit profile or add to do I will insert a new entry to the notifications right so that the notifications you can see that there's a new events coming up right so all of this the data itself comes from this file called Data so everything in this application is controlled from one store one writable store which is in which is created using a writable so I have a list of todo's notifications users so users information right so that's roughly about the application itself so at to do it's it's a form that you can add to do and there's a todo list that shows a list of todo's okay so if you want to follow along um I am going to share the link of this Ripple will be in the description so that you can follow along with with me right so the problem that we face just now right when I type something and type something again uh okay this time now it's it's it seems like it's there's nothing wrong but somehow in the first time when I create some todo's it's like gone immediately so um this is a problem with having a writable stars like this you have a writable starts with a todo and basically you allow people to change the todo's anywhere right anyone who Imports this will be able to change it we change it uh over here in the todo list where we feel where we come over here and we you know Mark some to do to be done over here on the other side an attitude we push into the list um so it's part so anyone who Imports this file can change the todo's so we kind of have no um no way to enforce like what can be done by todo's right so just previously we add a few todo's and suddenly the todo's is gone uh it's it shouldn't be something that is being allowed so let's try to find out the bug over here let's say okay so whenever we want to change the todo's probably will assess to data to Do's right so let's let's search for this um there's two okay there's only one place that makes this change access to data the todo's okay so let's not change in this file let's try to search over here at the profile uh no okay how about navbar okay we we checked if the todo's length and then oh this will show the todo slang okay so this is filter this is length okay oh everything looks okay normal how about notifications nothing nothing okay to do this okay you filter the to do um this is showing the count and then we Loop through to those uh this is okay we are removing something splice but this is in a delete button so it's supposed to just slice off one item so I don't think that's about it let's let's see data nothing wrong okay nothing nothing's wrong over here I have those Felts so nothing is wrong at here so but then something is wrong right if you if I try to add again it's all gone something is wrong but I can't find where it is so if your application application is getting bigger and bigger you have code all over the place and you have a writeable that is like this uh that allows you allows you to modify the two Do's within that writable object any way you like um then you have a problem right this is not about whether your right your to Do's is like you can have a writable that is an array as a todo but if you pass this todo store anywhere anyone can change it anyone can modify it as they want and it's very hard to track that you it's not just searching for todo's todo's can be renamed you can change um assign it to another variable and then do something about it and subscribe to the store and stuff like that you can't really find out where is going wrong so and this is not a new problem when you have a big state this is bound to happen because anyone around every anywhere in your code can change that state in fact a few years ago I think many years ago Facebook has come up with a architecture to handle states which is called the flux architecture and pop you can take a look at this the links will be in the description but basically the idea is this um you are the way that they want to design is that they want to design a single directional flow of the data right so you have your you have a store and then store changes will go to your view that is okay but then anyone can change the star which is not so okay so we want to draw the boundary we want to create one more abstraction which is called the action any time when you want to make changes to a store you should um make an action call an action dispatch an action and then the action itself will modify your star so no one can modify a star except uh actions right and I believe if you are very familiar with a react well this sounds very familiar with you this is actually one of a very famous implementation of this flux architecture is the Redux library right every time when you want to make changes to the store you have to make you have to call you have to dispatch an action and the action will change the value of the star and the changes is being made in one uh one unit of code which is in Redux is called reducer but it does not have to be a reducer but the logic is there anyone uh the only logic to make changes to the star is is contained in one unit and anywhere else in the code if they want to make changes to the store they will have to dispatch an action and then if you make the action easy enough to be look for then it's it's easy to to figure out where where went wrong right so you can trace out where who is dispatching this action and then figure out why is this place dispatching an action right so we can um borrow this idea right um maybe let me come up with another example library that uh maybe some of you all are more uh excited about that which is a state machine library right a state machine is also a state the no one can change the state except uh actions that's being done on onto the machine itself right every time when you um make some changes you have to say Okay based on this state that I am at right now and these are the actions that I can receive and only when all these actions coming into my action my state I will derive a new state and then again again right uh so no one is modifying the state directly they all make changes through actions and and that is how you can make um make like control your data flow from your application you can control who big changes right you buy your controlling who making the actions so over here let's let's make a very simple modifications to our code right now right we we want to uh provide some API to make uh changes to the todo's so that if you want to make changes to to those you have to make it this way so I'm going to provide some API for example uh add to do data and this is okay I'm gonna call this okay data right so uh new to do whenever I have a new todo I need to come over here and uh update data so data dot to lose data dot to those uh new to do right so I'm going to come up with a few methods that that I approve of to make changes to the to the to this to do stars and okay so I'm going to create more of this right and in the meanwhile whoops and in the meanwhile I and what I'm going to do is I'm gonna freeze the to do I'm gonna freeze it so that this uh this is just for for demonstration only right I'm gonna freeze the to do such that whenever I make changes I can't right so you you have to call add to do in this case so I'm gonna so this also I'm gonna freeze it every time when I create a new to do so I'm gonna come over here at to do uh this is at the add to do stops felt over here I'm gonna say add to do right this is something new okay and let's see add to do foreign okay this is working okay so we are going to handle the done and delete as well but I think the rough idea is it's clear for you we are going to we we should have methods that um allows us to modify the todo's directly and then only call this um methods from outside from your view so that you know that uh we have one file that has we have one every functions that modify the state of the star in one place and everyone else just call these functions right so so that you you have a clearer control better control of your stock your states of your application of course this is a very simple example uh if you have slightly more complex Stars more complex Logics I would definitely recommend you to look at State Management libraries and then see how you can incorporate them using stars and in fact I've created some videos um links on the description on say how you can use a state machine Library exit as a star or how you can use Redux as a store right the ideas are the same you they allows you to have a better control of how your state changes from one to another of course once we've done like having our state freeze right now we kind of probably we probably have a better sense of where this comes from right because if I change right now if I'm gonna change the state a few times you'll see an error and let's just Trace where this error comes from um okay this is this is bad this is not easy to trace but because I prepared this uh example I know where it comes from actually coming from here see uh somewhere someone just leave this code maybe because of testing they want to test something on the todo's it says that if notification link is three I'm gonna I'm gonna remove everything from the to Do's uh so this is this is the point right you could have a code written anywhere like this and it's very it will be very hard for you to trace out where it is so I'm going to remove this and hopefully we fix our issue right when I'm trying to create more uh it's not deleted it's not cleared right now and we've solved this so tip number one is if you want to have a complex store store that has complex Logics it's better to use some State Management libraries or write out your own reducer kind of thing or state machine counting to to manage your store or else it would be a very it will be a huge mess if you allow anyone any components to make changes to the store directly of course some of you may have doubts or concerns uh about using libraries like Redux right uh I think that's that this stems from overusing Redux right not all the states are complex you don't have to use it and every situation but only when cases where the store logic itself is complex then probably you that the idea the con uh that reduction stock have may be helpful for you right and also one thing that stems from that is a huge Stars right you typically somehow we end up with right having a very huge Redux stores in our application as the applications go big and this is something that uh will have effect as well and let's take a look at our example in our example we have a data store that has to Do's notifications and users which means that anytime when you change something like change the username um you have to change the star and change the star which means that the whole star is being invalidated anywhere that is subscribing install will get notified and then try to see whether they should update their component right to to demonstrate this I write a simple utility over here called Mac updated and I applied to all the components over here so uh I have I've applied this Mac updates for each of the components like the nav bar the add to do the todo list and um and also notifications and edit profile so every time we make changes to the States you see that it will turns red right it will transfer it every time I add a todo it will turn red on places that has updates meaning places that because add to do changes the data right and anywhere that subscribes to the data store get notified and try to update its content and that's where you see the it will turn red outline so uh if as you can see here if I open turn on the profile you'll need you only see that this turns red because uh this this is controlled using a locals state right show so only the local component will get updated and if you come over here you want to update your username so this username is over here this input we binds this to the data.user.name meaning that anytime we change username we have to update the data and the whole data will be in will be updated and anywhere there is that subscribes to this data will get updated right so if I type something you see everywhere turns red time again all the places has a read outline so that is bad right if you imagine that you have a lot of components that is uh you have a lot of components then it is just dragging you down and it doesn't have to be this way right so let's try to break this down let's try to make user and separate store because user itself the logic of user does not got to do anything got to do with the todo's and notifications you change notifications or to Do's independent of your users you don't have to know them together to make changes so I'm gonna take out the users in its own store and come out export concern user equals to this writable and to use it I am going to come over places that uses the user star say the edit profile I'm going to import from I'm not sure I can still use the data but I definitely need user and come over here and change it to subscribe to user name okay I still need data okay uh let's see this should be user name and I think at the nav bar I also need user and change this to user name and let's see what happens right so if I turn on and I'll change something only the nav bar stands real because only you you only because only the navbar component is subscribing to this user store and if you of of course this is uh the the highlighting itself is uh is saying that this component itself will update but of course uh my spell actually has optimized that the update only happens to the element that uh uses only the elements that uses the information from user and only when the information has changed only this text elements is is going to be rerent uh updated by its felt but immediately you can see the changes right you you can see that anytime when you do something um only the youth components itself only has changed so that is tip number two have your store small have a small store Only Store information that is needed for that store and if you have separate concerns then store it in a separate store so that your component that subscribes to that store only concerns to the data that is needed for that store right in our example we've seen users you don't need to know about users exchange anywhere else in the component then you can have users separately as a separate store however if unfortunate circumstances that you have you have to have a big complex star for example in this case our todo list is big and complex you have an array of objects an object can contains a lot of information and if for example in this case in our nav bar take a look at our navbar whenever we add a todo it will have to be updated because it updates the account right every time we Mark something as done it will have to update itself as well um so uh so that is an unfortunate circumstances but there's something else we can do as to help this to alleviate this which is to use a derived star so for example if I come over here I'm gonna import derive while I'm typing let me explain like why this helps right so over here um our inner com application over here we are subscribing to the data because we need the data to lose length we need the length of the to Do's maybe the length of the todo's that is filtered out for for those that has marked as done and we need the length of notifications but if you are changing the to do right we just change the to do anywhere we still get notified that data has has changed and events and when we check the length and fill down everything and check the length it's actually the same number right of course uh spell will not do any updates to your component over here it will see that oh if it's the same text value it will not update it but then there's still update cycle happening in your component which means that if you have life cycle events uh for example if you register before updates or after updates in your component they'll still be triggered and run so what can you do uh what we can do is we can create derive store derive a new store from the existing data and if the derived stop value does not change then there will no there will no there will no uh update cycle happening in your components so I'm going to create a few star over here because we have uh we have three three different things right first is we have the to do slang derived from data and then data equals to data to reduce link we also have a uh let's see notifications so it derives from data but then data notification link and then I have a todo's done link right then link the copy of this and paste it over here so I'm going to replace them over like this to lose length uh okay this over here to this line over here notifications link over here now okay let's see what what it's missing oh okay so then if we come over here and mark the do laundry as done uh it's some it's not supposed to be updated but I'm not sure you can see it clearly so I'm gonna come over Mark updated and make every element with some margin uh let's see four pixels eight pixels of margin right so then let's try this again if I come over and click done you see that this whole nav bar is not rent uh does not go through an update cycle right if I try to add a few to do um come over here Mark has done this does not go through the update cycle because we are not updating to data the data store we only are subscribing to three stars the todo link to do stun link and notifications link and when you click on the done button we the length does not change yet so in that sense uh nothing has changed yet uh this the the uh yes they are subscribing to the data and they are updating the store value but then the value is not changed yet so in this component when we are subscribing to these stores we are not getting notified therefore that we are not going through an update cycle um of course this may be a contract I think in some sense it may be up to over optimizing but of course you have to look at it by Case by case basis and and this example definitely is a contrive example where we check about the length sometimes we want to know about certain to do item that is whether it is um certain to do in this list uh so sometimes you have a store that is an array and then you want to check a certain item within that array a certain property of it whether it has changed um yeah things like that right and if you can create a derived star out of it and only subscribe to that derived star then although the derived stall gets uh well we'll keep evaluating to get that new value out of it but if the value itself is a primitive and it does not change then the component subscribes to that derived store will not go through an update cycle right so when I say update cycle is a cycle that goes through like checking uh running through before updates update after update lifecycle and also checking through like what other element uh what are the values uh that any Expressions over here and check the value see whether they have changed or not right so it does not go through that um of course um you so you you can also come out uh this I'm not sure whether it rings a bell to you but you can also have your star that is immutable based star so I've done a video uh links in the description as well on how you can make your store to be immutable so an immutable star allows you to um know what other things that will change right so if you have a big complex store that has unfortunate situation you have to have a big complex store uh immutable store allows you that if you change one place then only part of that store has changed the identity has changed right it changed the reference of the object so the rest of the star you can still subscribe and still does not get um notified because that part of the store has not changed yet right or you can come up with a proxy based store uh proxy allows you to change uh part of the states object and you can subscribe to the part subscribe so part of of the state object and get notified only that part of the things that you subscribe has changed right so I've done another video about using value is a proxy based State Management Library so you can use value to create your store so that only if that part of the states that you're interested has changed you get subscribed you get notified and go through the other Cycles if only necessary right so that is three tips number three uh have use some uh immutable star or proxy base star or you can come up with your own derived store that only subscribes to a small part of the store that you are concerning about so that your component does not have to go through update Cycles to updates everything when the things that you're concerning is not updating at all it's not updated at all right so I have three tips for you and hopefully that is useful for uh as a serve as a good guide for you to think about how you can manage your store in a sprout application and how you can optimize your application today I'm going to share with you how you can get store value outside a spelled component you may ask like why what's the problem with getting a store value outside of sveld component is that hot well let's see at this example so over here uh this is a disclaimer this is a very contrived example just to demonstrate you how difficult it is to get the store value of sales felt component right so over here I have a star uh created using a writable star and in here to get the star value within a spell component one and good what I can do is I use a dollar prefix variable to get the value of the Star right this automatically subscribes to the store and gets the value so the this variable represents the value of the star but then I also have a function called calculate double value I pass in my store and so this function I Define it within um a Javascript file so it's outside this felt component so in this function I want to get the value of the star and then calculate the double of the value of the star but then how do I get the value of the star if I do something like this uh this does not work because it says dollar store is not defined you can't do this over here you can't uh subscribe to this star value and get this variable defined over here because this is outside of swell component so how do you get the value of the store then well one way is we can Define this variable uh we just for the sake of telling you that this variable is going to be the value of the star I'm gonna Define a prefix with a dollar but this got nothing to do with the dollar prefix variable in a spell component where it automatically subscribes to the star right so I Define this variable and I can subscribe to the store subscribe and then I will get the value of the star over here right so I can just immediately I can assign this value to the variable called star and since I get the value so this subscribe method will return me and unsubscribe function and since I already have the value of the star actually I don't really need to know what's the next value I just need to know the current value so I can unsubscribe it immediately so come over here and call unsubscribe so at this point of time um I should already get the value of the store in this variable right so should but it it I there's no guarantee right it depends on how this store is being defined so remember when I say in a writable store in the previous video um you when you call subscribe when you put you when you define a subscribe method you need to call the value of the star immediately are you sorry you need to call the function with the current value of the star because us and synchronously because or else this function if it's not being called immediately then then the store will still be undefined so you have to call it immediately so that you can assign to this value immediately and then right now you can already get uh use the value of the star for example star times two right so luckily writable store does that writable stores always give you the uh always will call when you call a subscribe this callback function will be called synchronously Always to give you the current value of the star so uh this is how you would get the value of the store at that moment you subscribe it and then immediately unsubscribes from it and then you get the value of star and actually there's something that I didn't really talk about which is if you come over here if I Define this function over here in States let's let's remove this I can't actually um gets the value of the star using a dollar prefix variable as well so star has to be a top level variable that for example over here and only you can use dollar prefix to access them right so if you're trying to Define any function any variable that has prefix dollar it will you will get one and if you try to access any variable uh that is any store variable that is not defined in the top level it will complain as well because a spell component can't really subscribe to this automatically subscribes to this value and then updates it because uh you may just call this function once and yeah things like that right you uh there's no like automatically subscribes and clean up uh that that ties to the component life cycle because you can call this function at any point of time and how many however many times you want right and every time when you call the store value X the story will actually is a different value so to yeah so over here uh this warnings just tells us that we probably have to call it a different variable name so I'm gonna say um prefix and this will gives us the same value as well and finally if let me comment this out and come back to the previous code so finally one I one thing I want to share is that um this piece of code actually we already have a util built in from swell that does this this this whole thing over here and it's called a get so gets will do exactly what we are doing over here so we don't have to write it ourselves every time so we can call up do this instead and it will still works right so get will do the same thing it will subscribe to us R and then get the value immediately and unsubscribes immediately so uh here you go here is how you can get a value of a star outside of a sveld component let's talk about the difference between Star and context well you know that I've made a video about how you can pass star over context to make a reactive context right and some of you may ask me like what is the difference between a store and context right if you have a store why do you need contacts or if you have contacts where you store for example so let's take a look at one example over here over here I have a app which has two parents right parent one and parents two these two components actually are the same uh yeah actually they are the same right I just create two of them for no reason but anyway anywho uh parents one uh imports from Imports the children and these children with this child component reads a context from the parents right the parents set the context over here called data which is a context data and the child reads from it right get contacts the context data we pass a the data that will pass in is actually a store so when you read this to get a value out of it you use a dollar prefix syntax to read the value of the context um on the other hand also I created a file called storage yes which Imports the writable and create a writable store and I import this um to parents as well as the child so in the parents one I import this uh the star data and have a range inputs to kind of like modify the value of the star same thing goes for parents too it's the same code right so I have two inputs one to modify the data of the context for these parents and modify the data of the store which is from this store file parent2 as well as a context data where I have where it has one's inputs to modify a data of the inputs and once inputs to modify the data of the store which is coming from this file and a child uh both of them have a child and the child component is the same component which reads imports from the store data and imports get the context for context data and show both of the value of the star and that's it so um so let's try to play things around and see what happens right so if I change the value of the Star right now when I change it you can see that all the all the instances that imports from this store right pass one in front of this file and two imports from this file trial imports from this file so all of them are reporting from the same store instance and when one of the value of when one of these instances changed the value all the other instances actually get notified and update the value itself as well so you can see that the store when it changed from the parent one is the child within pen one is updates as well and the parent two updates as well oh sorry yeah updates as well and the child within parent two updates as well as well if I change from parents to same things happens right all of them are importing from a steam store therefore all of them get notified or get updated at the same time they are all in synced now take a look at context right so for context wise I actually create two two stars right I create one store for the parents want and send it to the context I create another store for parent 2 and send it to the contact so they are actually different store uh in child the child component is the same where this in terms of code is it is the same component file but imported in two different places right meaning uh where it's being imported where it's being used then what kind of context you'll get all depends on where it's being used right so uh I uh so the child is being used in pair one and parent two then uh irrespectively they receive the context from each of their parents uh so if I change the parent wants context value you can see that the child in context uh in the parents one get updates get updated by the child and parents too does not right does not know at all because it's it's living in a different context it's receiving the context data from a different parent it's receiving from these parents too so if I change the value of the context in the parents too then you can see that the child in parents 2 is has has changed is changing right but not the child uh the data in the child in the parent one right so now you see that there's this difference and this is the main difference uh between a context and a star although so the star itself if you're using the same instance of the store basically you can make anyone anywhere that's using the store to be updated to be in sync at the same time context on the other hand uh works is a slightly different concept right context says that for all the components that is within my context will receive this context we'll receive the data they're going to pass through this context so you can get the same data right so if I passing the same uh if I create one store instance that all of the children will get the reference of that store instance we're gonna pass uh if I'm gonna pass this uh the instance of this store from store.js then you probably see that if I change all of the uh if I if I if I pass the same Store contact store instance to both the parent one and two then you still you will see that all the instances will be updated that's not because they are you are not about the context anymore it's about the store instance because if they're getting the same store instance then they're gonna do it they are going to get updated at the same time in sync right but uh for for context it's more of where you are living under right in this case we create a different content store instance then you are living in a different context therefore you get a different store instance and therefore if you change from parent one to only the child in the parent one will get updated you change your parent to only the child uh you know only the story instance in the store in the child and the parents two will get updated right so so there you go so there you see the difference between the store and a context and they are not like a mutually exclusively kind of different therefore you can actually use them together you can have a store inside context to create a reactive star okay so here is the difference between a star and a context but some of you may still ask me like hmm I know the difference but how should I decide when should I use a store or when should I use a context how do I differentiate when or what kind of scenarios I should use which of the things I know how it behaves I know how it works but which one should I use so here I'm going to share you a way to think about how or when you should use a store or when you should use a context or when you should use both okay so imagine over here you have a two by two matrixes which is a two by two different kind of scenarios that you can encounter so it depends on the data right the data you you want uh on an excesses let's say xaxis what you want is whether this data is static or this data is dynamic so static data is something that you you wouldn't expect any changes but Dynamic data is you you want this to be changed uh during the runtime which is during during user interactions where user interacts and you want this data to change and on the vertical axis on the other hand you have um what I call a global data or a local data so for global data it's it's not about how pervasive this data is being used it's more of uh this data should be one and only one right this data should be usually have one data for all of the components or wherever you use it it does not matter where you're using it you're using you're you're gonna have just one copy of the data and for local data it's more of where you are using it it depends where you're using and what kind of data you're going to get okay um so you have static Dynamic and Global to local so you have a static local kind of data or static Global kind of data and you can have a dynamic local or dynamic global data right so let's take a look at example right I come out I've I've been trying to think about what is the best example for you and I have been thinking about this and coming out of like different examples for different scenarios um may not be convincing because sometimes this example can actually be like be become like be part of any kind of scenarios right because for example say for example a team it can be a global team but it could still be a local team right sometimes in your application your some parts of it I use is using like this maybe like a dark blue team and part of it is like a dark green team right you can have different kind of teams within the com within the application at the same time so team can be a global thing it could be a local team and team itself can be fairly static for example you don't expect users to change the team but it could be fairly dynamic as well sometimes it allows your user to change the team um uh from maybe the light team to a duck team to a different kind of team right so depends it really depends on your use case it really depends on what your requirement is determine it rather than say a team should be always be like a dynamic thing or team should always be a static thing right so this is exactly the example that will come up with I'm gonna have a data called color over here let's take a look at the first scenario a static and a global data right in this data.js I have a color so this color I'm not going to use a star because it's it's static right so for static data you're gonna just Define this variable it as it is Define it as a variable so that you can use this variable across components um so I'm using this data in a button so in a button I import this color and use it and I also have this over here I have like a game controller thing so in the controller I also um let's see right oh I think it's a game ah okay I didn't do that so in the controller I also import the color right in the controller also Imports the color so this color is static I can Import in multiple components and just use it right and it's because if it's it is a global thing so uh I can Define it in maybe like a one file and everyone can just import this file and use this data right so static and Global right static means that you would not use store and Global means you don't have to use context it does not matter where your button or where your game component is you just use this same color so you import from the same file okay and static locals so in this case uh still color but it depends on where the button is or where your component is you may want to have a different color right so all of this uh the game all of the button you can see on the screen is the same component it's this button components so it depends on where this button resides in the component tree of the app component tree it shows a different color it shows a different background color so in this case uh to do that I I'm using a context right an easier way for me is to use a context or I can have maybe like spot as a props instead of getting it from a context right so Props is your parents pass the data to you context is a parent pass data to all of you all those children in this case I'm going to use the context instead of props because uh the place that sets the color is actually very high up in the component Tree in this case it's in the app and the app I set I pass different colors to the game I pass green and past blue that's why you can see like there's a green game and there's a blue game and in the game I set context right I set the context using the color from this props so that all the elements within this um component for example a button over here so game has a controller controller has buttons so button reads this data from the context and sets the color of the button and one thing you can see here also is that actually in the top of this component we have the app which already sets the color which is already sets the orange color but then because of context you can also override whatever is being said and apparent right so you just look at the most immediate parents to determine what context color you're getting so here I am still part I don't use a star because the color itself is is determined by the component tree and it's static I'm not going to change I'm I'm not allowing user to change the color right this color can be coming from maybe say some configuration files or maybe change of requirements or coming from API but once this data is once you get this data this data is fixed you don't change this data by user interaction then this can be a very static data you don't need a store for this and for but for in our case we want this data to be local Right Where You resets depends where what color you're getting so you are getting using a context to handle it right so static means no store and locals means we're going to use a context now last two example right now we have a dynamic and a global uh component example right so this scenario I have a Color Picker so when I come over here Color Picker I change color you can still pick that on on the right right you see that whenever change these colors are changing all right so this the data itself is dynamic although the color wise is is global every buttons every controller are changing at the same time so because if it's Global I can Define it in the external file I can Define it in in a separate file but because it's Dynamic I'm going to use a star so that I can change the value of the star and all the components that's using a Sim store will get reflected immediately right getting a data updated dynamically lastly I have Dynamic and locals so in this case let's take a look at the example I have I have three different kind of colors right different components different buttons are getting a different colors and they are Dynamic I can change the color anytime I want right I change this to be dark green or maybe purple I can change this to be blue like a blue I can change it any color I want right so this is uh Dynamic data and local data so because of its dynamic Behavior I will need a star and because it's local I need a context and therefore I need to use context to pass down the star so here you can see that I am now passing down stores and I'm using the uh context to puzzle store and I'm using a writable store right so this all these three Color Picker is changing this value of star and all the components that is using the star value it gets update dynamically right and I pass the data through the store through context so depends on where my button is it will be reading from a different context therefore reading from a different store and therefore gets a different color updates right so this uh player one color will not be updated if I change the first Color Picker and and vice versa right so here you can see four different kind of scenarios by splitting by two by two quadrant again static or dynamic no con no star or with a star and Global or local so not using a context or using a context so I hope this can explain can answer your question well so today I'm going to show you what is felt actions well spelled actions is um essentially a life cycle functions for your elements right so it's a very powerful feature if you know how to use them but before we learn about what are the use cases that you can use actions let's take a look at how you can write actions right so it's over here I have a rebel over here so um actions is nothing but a function so I can name my functions any name like I want so I can call it a Lee how action right and I can use an action on an element so any elements in the screen so I have like a H1 over here I probably have another H2 over here but if I want to add an action on this element I will use a directive use and then a name of the action right so this name itself has to be defined right it can be um functions that you define in a script in a function you define in the global scope as long as it's a function then you define it somewhere the name then you can use it right so this function now we are using this action right so this section itself sticks in a couple of parameters and the first one that we're going to look at is called a node right so if you console log over here right now what you will see is that um you get the note itself in this action right so whatever elements that you apply with the action you will get it over here right like this right and remember that say that it's like a life cycle events for an action well that's because uh when this element H1 is mounted on the screen onto the Dom then this function is being called immediately right so you have the access to this Dom uh this node that you are adding action to you can also access to like the parents and everything else right so it's like a life cycle you know that this will be called when this element is added to the Dom right and to know that when it's removed you can return a method call so you can return an object in action and you can return something called and within object it's expecting to have a method called destroy so this is optional you can return this or not as you can see earlier we didn't return anything still works right so over here you can console log something where it's destroyed which means that which means that this node itself is being removed from a Dom right so this will be called when it's being removed so let's take a look at an example of um how this is being used right so over here I have a checkbox uh which which I check and uncheck will show uh I use with an if block so check and uncheck will show this div over here right so in this diff I use an action called action so um this high should be called when this div is added to the Dom and this Destroyer should be called when it's being removed right so let's see I'm gonna Zoom a bit on the console and I'm going to click so when it once I click it's on the down you'll see that it's called high with the note itself and when I unchecked it was removed and it will call the buy function right so this way you can know when the element is being added and being removed right so early on I mentioned that action itself has a couple of parameters so the first one is a node which is the element itself and it actually takes in two parameters so one is the node the second one is called the params right so params so what params does is that actually in an action you can pass parameters to the next one you can do it by uh some like this right so it's like imagine this in attribute this is like the value of the attribute so you can pass in anything over here you can pass in something probably like the name as a variable you can pass it a string because pass in a number over here I'm going to pass it name right so here in the console log I'm going to just console log out params as you can see really the name has the value of wool so over here you can see wall in the console let me Zoom it up a bit and you can see it clearly okay so let me clear this and run this again right so you can see the node and the world over here right so what you can do with it is that now you have access on both things you can play with a note right so for example I want to say no dot inner HTML equals params immediately once I run this action you can see that the notes in a HTML is changed to params right so um this is this is very powerful and I'm going to show you what you can do with it in the next video so over right now well what we have learned so far is that actions is nothing but an action uh sorry but a function that you can call uh and it's like a life cycle method or event for your action for your elements so when the element is added to the Dom you actually caught and when it's removed the destroyed method we call right and an action can text in the parameters like this and it will be appear as a second parameter to action right and then you can play with anything with the note and the parameters you like so in the last video I shared about what is spelled actions right and some of you may ask like for example you have a variable then you pass in as a parmes of the action and you want to change that um the parameters and how will that reflect how do you get that parameters will be reflected in your action right so probably a bit big but let me try to explain this to you with um example in this Rebel so over here you have an input box that is buying the value of the inputs is bind to this variable called name and I'm going to show a name over here as well so when I type in over here say I change the world to spelled you can see the name changes to spelled right and I'm using this name variable in this action called the how action right but this action is being only called once when this element is added to the Dom right and the REM and the destroy will be called when it's removed from the Dom right okay but I want this name variable to be always in sync with this action I'll put it the other way I want this action to know that whenever these problems change I'm going to do something because in this example in this action I'm setting the inner HTML as the params which is a string that I'm passing in and it's only being called once when this Dom is this div is added to the Dom which is when it's say whoa when the value is wool right but then um when I change this variable which is the pumps I want to get notified as well right how do you do that well actually this object that you've written besides you can return a method called destroy you can actually return another method called updates right and this updates methods will also will contains the new params right so this function will always be called whenever this problems change right so update because see I'm trying to say updates and new params I'm going to show you over here right so gonna when I type I'm gonna change something you're gonna see that update is being called with world one as I'm typing right so this way I can change it uh I can use this and updates my next demo if I want to right so I'm gonna oh come here and say this equals to new params right so whenever I change this inner HTML updates as well right that's cool right that's slick so that's that's that you have it right um so let me conclude it even more even better which is that an action is a function that will be called uh when your element is added to the Dom right you can pass in the parameters which will be the second parameters to your action right if you if your action returns an object and if that object has a method called update that updates matter will be called every time when your palms change and if that return object contains a method called destroy that method destroy method will be called when your element is removed from the Dom right so any of updates are destroyed or return object is optional right once if you have it you will it'll be called right so it's very simple you to use an action you call a use directive so use a colon and the action name equals to parameter right a parameter can be numbers objects and strings and so on and so forth today I'm gonna answer a hypothetical question what happens if felt does not have a feature called sveld actions why do I ask this question well because um to me in my opinion the best way to understand what a feature is how this feature works is to think about what if there is no such feature right so there will be most likely two outcomes right one is that you can't do anything at all so which means that this feature is necessary it's essential to help you to achieve something without it it's not it's impossible a different outcome would be um you can still do what you want but probably it will be slightly harder to achieve what you want maybe when you want to write code you'll be more complex uh more boilerplate code or maybe you have to do a roundabout way to in order to achieve something right so which means that this kind of feature actually does not change the essential of like like ability or possibility of doing something but actually helps you to accomplish something in a much simpler or easier way right so so what about spelled actions is it like an enabler enabling you to accomplish something that is not previously possible or it's like a facilitator like allows you to accomplish something in a much simpler and easier way to think about well let's find out so over here I have um a simple application where basically I have an input over here and a counter all right so if you can as you can see over here this counter uses an action called counter so how it works is that whenever I click on this button we with the one the button with the action applied when I click on it the button will increment by once and this number which apparently uh coincidentally it's this number one right so if you see that this number is bind by this input and it's being passed into this action so if I try to increment this to say 5 then whenever I click on it it will increment by five so if I change it to 10 then increment by 10. all right so this is um so all this is the doing of the action right so your action over here let's take a look quick look at how this action is being defined so this counter action uh itself defines a variable called count and it will update the text which is to up to set the buttons in a HTML to be the count the value of the count right and then it adds an event listeners so whenever you click your increments account and then update the text over here returns an object which has two methods one is updates which is to updates whenever the increments is changed you will update to that new increment so this uh if you remember in the last video this is this parameter that we pass in so we pass in this number so that will be our increment so whenever this change this update function will be called which means that your increment the value of increments will update as well and the destroy will remove the event listeners right so we take a look again at this function I mean the the behavior of this action isn't that complex right so it's like once you have this um button you probably would want to um add an event listener and and then uh probably you keep um uh knowing that what is the value of the counter and then uh probably with which you um whenever you increment you you uh increments with a new number right so I probably want to do now is to rewrite this without actions right because we are trying to answer like what if there's no action so what would we have to write so yes if we don't have an action then probably we have other things that is available to us right um we can use buying this uh to get the instance of the button and we can use that to add event listeners or we can also use um on click to register for event listener and then um and then do the job right so what I'm trying to do now is instead use bind this the button that I have a reason of doing this but probably uh you will it will be more obvious later on right so if I use okay so here I'm going to define a button variable so whenever bind this when this button is on the screen it will make sure the ref this variable will be updated with the reference of that button right which means that um over here when we have like on Mount we will have access to the instance of the button right so over here we can do the things that we have done over here which is um register a nonclick listener on the pattern and then we can return a function which is being will be called when this component is being destroyed um with this remove event listener right and we're going to Define on click which is over here we can copy it over here so on click uh we'll update account so we need to Define count as well we're going to Define it here and you're gonna update text so we need to Define update text as well so we're just going to change this to button and then lastly we'll import on Mount which is from svelt right and lastly we also need to call update text to set the text to one so count is starting with zero right so now we are not using this counter at all let me collapse this this is not being used anywhere um and supposed to work but let's see what is missing okay increment is not defined oh sorry so we need to Define a variable increment as well right so uh increment should be equal to number okay so now we need to update the value of increments right so increments is actually um the value num over here so probably we can maybe do something like this increment equals number okay num sorry now in Click we can increment with updates it works right so not big no big deal right you can achieve this without using action so what's so cool about action right well how about this okay so instead of having one button we have two buttons which both of them using uh counter right so I'm just use counter on both buttons so um let me comment out this first oh nevermind let me keep this uh so that this button still works so you the first two button is the one that with actions so right now if I try to click on both the increments independently right and when I change this both of them increments independently uh the counts within this button is not the same as this right so how do you do that with um how do you reuse this uh buying this button right can you do that well I mean um so probably we instead of having one button variable probably we need two button variables and then probably we have to copy this over um and then replace all of them as button two right I guess that would work so replace all of them as button two um and then counts probably you need account two for button two right on click as on click tool update text tool well let's see what else is missing count uh increment update text to no update text 2 over here um up to text to text to on click two this is two I'm gonna have two buttons right um what else is missing let's see button to count to okay I think we are missing button one um not really oh okay so here instead of returning probably we have it on both sides right and yeah we can do that as well they're both incrementing um independently right as you can see over here probably we have to duplicate like the instance of the button in order to like try to replicate this but if you're using actions right um the but the element itself the counts itself they are all encapsulated within your action so every time when you create when you're using one actions all these variables are locked in in the scope of that action and it's only um available for your instance of this element so you can call it multiple times on you can apply this action on multiple times on multiple elements each of them will have their own scoped accounts update tags and everything else right so um yeah that is one thing that it's a bit inconvenient if you are doing without um action but is that the deal breaker well not let's see right so the next thing we're going to do here is that we're going to add a check box okay so over here I'm gonna have input called type check box let's say a show a wrap it with a label so buttons and over here I'm going to bind this checked with a variable called checked which I'm going to Define it over here let's check it goes through right and I'm gonna say if checked I'm gonna show this right if if check is true then I'm going to show the buttons if not I'm going to hide the buttons show hide show and hide right immediately you can you can see if I checked and uncheck a few times um because this is only being executed on Mount therefore uh as you can see here once we recreate this button as because we create a button without in a Content the button is now without any content right um so probably something we can change over here uh is to use ons uh use after updates in States right probably that would work not really right so what why what happened right so once you hide the buttons so after update will be called every time when there is a new uh when there's an updates right so when you uh so when you when you show the buttons you'll run after update when you hide it you'll run again and when this time when you run again um you are trying to run execute this thing right which is button two and event listener and button two now is undefined because the button is removed from the Dom right so yeah that is something that we probably will have to take note of right so we're gonna say if button two only we add event listener right and if not so which means that button 2 is hidden then we are going to remove event listener for the button too right and same thing goes for button one and two button one right so over here uh button button button and as probably at this point of time probably you might have already noticed is that having returning this previously during an on Mount is not that accurate right because this button this actually creates and removed um on on change which is right now where we are changing something which means that um if we hide this button we should also remove event listener from the button but if we are using it inside and on Mount it will only be in caught when the whole component is being removed so if within this component is still here and you're just toggling showing and hiding the button well it will not call this remove event listener right so that is something that you might want to take note of um probably you have already noticed so can I remove this now okay so show and hide right same thing goes with the update text probably you can't call it right now uh we're gonna call it only when the button 2 is available over here as well um button to button one all right show height uh hold on remove your lens off now okay so now it's something uh okay so now a button is actually undefined when you you hide it right which means that um see now we we if the button is there which means that uh we want to add an event listener right but when you hide it which means that the button is right now is already undefined so how do we remove event listener if we can't even get the instance of the button well probably we can do something like um assign the button on the event remove event listeners as um uh let's see right so probably we can still do it but I think at this point you notice that it's not that easy anymore while having let me comment this while having um okay let me collapse this and comment this as well while having actions everything still works pretty much the same if I change this they are still incremented individually if I change this still works right still works perfectly fine right so let's see should we continue on fixing this um I think we can still try a bit so let's get back to just with one button and with that one button I am going to uh resurrect this part of the code so probably maybe let's don't do it with after updates maybe that's not the right um let's see whether it's the right way of doing it okay so imagine we don't have this right just without this probably we can go away with a lot of things oh let's see event remove event listener um count counts button button okay now click2 is undefined ah okay and click okay so I think we can still get away with um without remove even listener but um you know that it's not entirely exactly like the one with the actions right and now if we try to increment this um okay so see that this is not quite working um let's see what happened oh I think my whole screen hang uh let's see what's going on probably runs into some sort of infinite Loop somewhere okay I think I'm gonna give up and I'm gonna okay uh refresh okay but it just come back let's try again no it died so I'm gonna give up on this one let's just refresh again and hope for the best well as you can see over here it's it's not that simple to do this without an action right um so probably it's for the best that you have an action um to help you achieve like something such simple as adding an event listener um and exit page having an event listener and then you know increments whenever that this is incremented right so let's shall we just try one more time this time around let's do it do something different I'm gonna same thing goes we're gonna have binders with button this time around I'm probably trying to probe it in a different approach which is to use reactive declaration right so if pattern is so this will be this will execute when um any time went so I'm if I'm using a button variable in here which means that this whole X statement will be execute anytime when this button variable change so if button is available then we are going to add event listener right click and call on click right on click then we're gonna say buttons uh okay so we also need a variable called count so let's count equals to zero and count should add plus num and then we need to set the HTML of the button equals to count right so now uh we also need to do the same thing over here so now when we click uh it will work right as we increment this and we click again it will continue to work then again the deal breaker which is what if we have a checkbox that was a true initially and I'm going to say okay have new line up here new line over here input type check box um um bind checked also checked okay so now I'm gonna and have an if statement if check this show this um and see what I can still increments yep it works I increment this number is still works as fine well um but actually not quite so if I console log over here on click um I'm gonna see it oh wait yeah it works right so okay um yeah probably this works now probably we have to think about how we can remove event listener um which is over here let's see remove event listener when button is defined uh but but then but then you don't have the reference of this button so what we're going to do is that um we I'm gonna use before okay I'm gonna stop here because there's no straight easy way if you as if you follow with me so far you may really realize that there's no straight easy way of doing it uh without going even more detail so probably I feel like probably we have adding more Logics over here and and I think we have achieved our goal so far is to demonstrate that how what happens if you don't have an actions is felt uh probably you have to write all this uh quotes just to achieve something where I think it's much easier to reason about and read about if you have an action and so first thing is it's much harder to write this second is that it's um you can easily reuse this the same action over and over and over if you without it you probably would have to copy paste your code multiple times having multiple references of the same uh having multiple variables reference to the different elements today I'm going to talk about how you can use felt actions to integrate with a UI Library right so swell actions is a very powerful construct in svelt as I mentioned in the previous video If you haven't watched them the links is over here okay click them watch them right so today I'm going to show you one of the many ways of one after sorry one of those cool ways that you can use actions for which is to integrate with a UI Library where it does not have to be UI but it can be any library but most likely you would want to use it with a UI Library so what is a UI library and that I am referring to and how do you integrate it in svelts using actions okay so maybe let's let's have a story first right so the background of this is that maybe one day you want to build a date picker right you know those kind of date picker when you click on the button you see a calendar you can swipe to look at different months of the calendar and then choose a few dates and then you select a date right um probably there's a builtin one but you feel you don't like the look or feel of the browser defaults uh calendar input date input you want to build your own but you can't so you find you look online Google you find some libraries or someone recommend you this very cool UI library that allows you to create a date picker so because you're using us you're writing a swell application um will that work with svelte right I mean usually if you work with other libraries usually what you do is that if you're using react you look for react date picker if you're looking at view you look for view date picker right so is there a spell date picker and if there's no and you find some date picker it says that zero dependencies and very good how do you integrate it with svelt and today we're going to show you how right so I'm I before this video I Google around and I found this date picker which says that it is um lightweight and Powerful lightweight and powerful and it's like lean extensible and does not depend on any Library which is great right because which means that you just install this you don't install come with all the bells and results of every other library is not the weight of all the other libraries you just need this Library that's all so you'll look around and you see like getting started which is how do you start using this it says install this library and probably add this in your HTML so to include the CSS and then to use it you import flat picker and you wrap it around an element and that element itself will become a date picker how easy is that so how do you do it in sales actions it's Felts using actions well uh so now first thing is I'm gonna have like I should say we need an element right so I'm going to use probably a button date picker so now when you click on button nothing happens right so next thing is we are going to um so to use this first thing is you include this CSS right so this probably want to add it in a hit of the HTML so I'm going to use felt hit angular copy paste this thing in right the Cs is loaded you can't you can't see it but it's there okay next thing is we're gonna have a script text and we're going to import flat picker right one thing cool about this Rebel is that you can import any Library uh we will try to find it from the unpackaged CDN where it will download exactly what you would download from the npm right so I have this flat picker and now how do I um integrate this with this button right so one way you can do is you can bind this button and uh and then when button is defined probably you call Flat picker with the button right uh button so we're gonna say let's button right and that's it so you click you have a date picker that's cool um now next thing is um well I'm showing I'm buying this right so why not actions right yeah we can do it with actions as well let's see how how it will look like in actions right so I can comment this out and I'm gonna comment this out sorry let me copy this and comment this out so that we can have it compare side by side so now instead of buying this I'm going to say use date picker and this will be a function restricting an element I'm gonna call Flat picker elements right this works as well right nicely done so um whether to use this or use an action I mean it's pretty much similar is there a difference well if you are thinking about this question you should watch my other video over here the link will be over here which is what happens if we don't have a feature instead called scrapped actions how would you have to go about it right um it talks about how you have to work around it and let me show you one thing that it's not easily done if you don't have action is that I can copy this paste this in I have two buttons with typical each of them can pick individual dates while having this I will have to Define uh two buttons and then bind it to a different button variable and do it this way right smart much hassle um so I'm not going to do it anymore right so I'm just remove this forget about it and focus on this right so next thing is let's see so let's look at the examples and see how we can use with this flat picker and as you read through it you realize that you can pass in some sort of options right some sort of configurations so let's look at what is the configurations so one of those configurations would be say uh let's see let's see um the previous Arrow right um wait let's see maybe Showman's number of months to be shown at the same time right show months so how cool if is if you can just pass in an object in here instead and it says show month is three and how cool is that if you can do it this way so this is config and you can call it like this way so the first button has show months of three months second button has none so probably by default is one so over here you can see you have three months this one you have only one right three months one right this is it's that easy right and this month itself can be a variable right so if I say inputs bind um value equals to show months uh type number and show months is up say let's equals to 3 use it over here so if I change this I want to able to change number of months to be shown so let's change to set one well it's not working because you need to implement update as well because you know this variable is going this parameter is going to be updated all the time when you change it right so I'm gonna say return um sorry return an object with an updates method so it's the new config over here now and what should we do with a new config right so let's see a flat picker instance probably have some methods that you can call say um to sets options uh is there a setting there is a config configurations set options set okay sets option right so I'm going to say uh this is the calendar and calendar dot sets right so probably you have to read about it in your UI library that you're using and see what other apis I can use can be used to uh uh that can be changed and things like that and you you can update It On Demand using the update method right so now if it's two then you will show two months it's one then only show sorry one month right it only show one month and if it's um six then it will show six months right it's it's it's highly configurable and you can just change it at the whim right you just do it this way so one thing I noticed just now is that probably there's this parameter called open and close right so let's let's try core methods instead in the update function so what that means is that so let's say instead of this uh I'm gonna have an input called type checkbox buy and check equals to variable called checked so let's Okay so I'm gonna pass in this as a parameter instead right so this is like open right so now this is also like this value opened so you see if you change this variable if open then I'm just going to say calendar dot open so this uh this method is something I read from here where you can call open or close um in the API documentation so probably you have to see what all the things that you can do with your UI Library so this is going to tell you that okay see to show you that if I buy this check and then pass it in over here then now when I check and unchecked basically you can control opens and close right changing this or changing this parameter and in terms will be called this update function a method and over here we can call methods of your library instance right and in most cases you probably would have to remember to do to implement the destroy method because in most libraries when you uh when you remove these elements you also remove this button element you also do need to do cleanups right and probably some libraries will provide methods like destroy to clean like all the event listeners and all the stuff right so over here probably you will have to remember to call calendar uh dot destroy as well um but we are not gonna demonstrate how it will take an effect but trust me it will work right remember to clean up whatever you have set up so remember to implement the destroy of your actions so that it will clean it up so um that's all for Implement integrating uh UI Library using swell actions with swelt right integrating a UI library with felt using stealth actions so today I'm going to share with you how you can use swell actions to reuse event listeners to do so I'm going to share with you three examples right so let's take a look at the first example so over here I have an example and a result which you will see the example will be on the left side of the Rebel and the results will be on the right right so what we're going to do here is that we're going to have three examples on using event listeners and I'm gonna rewrite it to use actions to replace them and that will be on the right right so so that we can compare side by side like to make sure that the effect still looks the same but it's Rewritten using actions right and you can then decide on your own whether you prefer to write it with actions or continue to use your event listeners right no judgment over here I'm just going to show you how you can do it so the first example over here let's take a look at the first example so the first example is called a blur on X Escape right which means that I'm informal type over here type something and when I click on the Escape key the input itself will be blur right which is it loses the focus and you can you know like you don't see the blue outline of that input anymore and the cursor is no longer in there it's losing focus so how we can achieve this is that um you can there's multiple ways of doing it right so one way I'm doing it over here is that I'm having an input and I'm bind the inputs to a variable so the ref so this input variable will reference to this uh input element and then I have a key down which uh on key down will listen to key down and in the event handler over here I will check if the key is escaped then I will blur the input right so far so good so one of the things that I mentioned earlier if you haven't seen this video about why uh like what's so good about swell actions you can click over here the links over here is that one of the things that you can do is that you can reuse uh it's it makes you easier to reuse um actions on the same elements on multiple elements so in this case if I want to have multiple inputs and want to blur uh let multiple inputs then probably I would have to make it like input two input 3 and you know uh probably over like blood Escape 2 and 3 which uh would have to blur a different input right probably I would have to do that instead to achieve this effect then as you can see over here then there will be um duplication of code over here I would have to create input one input two and input 3. all right so that uh I can escape from the first input from second input and from the third input right so you know do I have to do this well if you're smart enough you would you might notice something well uh you don't have to declare a variable called inputs in order to blur each of them well you can you can get like event dot current Target right and then you can just remove all this and you can reuse the Sim events listener get do away with this uh bind this you can still achieve the same effect I skip I skipped and Escape right you can still achieve that do you need action do you need it well um yeah I'm not here to pass judgment on whether you should use or not but I'm here to show you how you can rewrite this to use actions and then you can reuse that action on multiple places where you don't have to import or so instead of importing this event list Handler or writing it multiple times now you are instead you are importing that actions and reuse it multiple times right so over here I'm gonna create a result one last felt I'm going to copy this over and I'm going to import from result one instead right so over here on the right is the result so I'm gonna change this to use actions instead of event handler right so over here I'm gonna say function so an action is a function so I'm going to say I'm gonna call it uh blur on Escape function below action and this function an action function takes in a node and param right in this case we don't really need a parameter so we just leave it like this right and then what we can do next is that it should um return an object which could be called when you are updating the parameter or you are destroying that element right so right here we have if we were using actions instead so I'm going to just use Action Now use this you can copy paste over multiple times so if you use an action instead of event listener then you will have to add event listeners yourself right which means that I will probably have to say no dot add event listener key down and then I'm gonna have the same events over here so I'm gonna copy this over and have it here instead all right so blur on Escape let me pass it over here I'm gonna re return a destroy I'm gonna remove event listener instance all right so this is the same way this will achieve the same effect of using an event listener instead right so let's see whether it still works I'll click Escape type type type Escape type type Escape right so um yeah so over here example if you're using an event handler now you're using um an action instead and you have to register and unlisten the event listener right so let's move on to see example two right so we're gonna change this to example two and let's see what we have for example two so the second example over here is that um we have uh same thing goes we bind inputs to a tree inputs element and on key down I'm going to call next on enter meaning when I type something when I click on the enter key it should go to the next input click on the next inputs right so how it works is that I bind these three variable input one two three and then I on each of the event handler when I click enter I'm going to focus on the next inputs right so over here I'm going to do this multiple times um is there a way that we can instead of so in the previous example we see that we if we we don't have to create multiple event handlers when we can somehow assess like the current Target of the event so that we don't have to reference any elements that we assign outside of this event handler then we can reuse this event handler right so in this case we are referencing input 2 but 3 in this event handler and input 3 in on the uh this event handler right so the first second one is the focus and the third one is that when I click enter because there's no next uh event input then I will have to blur myself right so stay away that you can um somehow pass this inputs as an uh parameter of this event handler or something like that right is there a way well remember that action sticks in not just the element itself also perms right so probably you can use that instead and probably with that maybe we can just need one event handler so we're gonna do that right now two and I have copies it over here and I'm gonna use reference to result 2 in States right so over here I'm gonna create is called uh next on enter action that takes in the elements and a param so same similar things we're going to copy one of the event handler and we're gonna say um elements that add events listener so copy this event name key down and gonna call uh next on enter so we're going to re rename this to next on enter and also I need to remember to remove event listener because now we are adding on ourselves then we have to do the cleanup ourselves as well let's say return and then call it destroy I'm gonna copy this line paste it in except that I need to call remove instead of ADD okay so with with this I'm going to say uh okay so now we're going to change this right we can pass it as a param what it means is that now uh instead of on key down I'm gonna say use this I'm going to pass in as oh sorry uh over here use this I'm going to pass in inputs two right which is that I need to focus on input 2 on on next on action over here gonna focus on input tree and over here we're gonna just not passing anything so not passing anything meaning you have to blur yourself right so we can Define that ourselves um so meaning this will this uh input is the params of that action so which is this so now I'm going to say if param then param dot Focus right else okay now next so okay probably a better naming would be instead of called Parma gonna say next element uh to focus it's going to say here we're gonna paste it in place it in and then if not there will be event dot current Target Doppler right so now I can remove all these three event handlers well just focus on one big action that does a job right so I'm gonna type something enter wait wait wait not working uh event listener next element of focus wait wait hold on okay so next element to focus next on enter destroy element remove event is now see okay so I'm gonna try and see um console log next element to focus which is undefined okay over hold on so this one is input two ah okay so this action will is called on this input on the so now now we find the bug and then we can fix it right so which means that when you call this action we will bind so the action um is happen when you are mounting this component which happens uh where so initially which what happens is that the when we are mounting these elements input to 1 2 3 are all undefined right and once we mounted all everything so so this is being called on when we're mounting it right so this is passing in undefined over here um and then after we mounted all the three inputs we the bind this will update the variable input one two three to the reference of that elements right but we didn't and this will be updated as well but to get that updates we need to call and up we need to add update method over here which is the like we call next next element to focus which is the next uh next element to focus that pass in I'm gonna say uh this equals to this right so now probably will work so I'm going to say enter it will focus on next one right so this will since this action uh on mounts you receive undefined because we haven't defined input one two three and once it's mounted uh they call the action first and then it's passing undefined right and then The Binding bind this will be will updates the variable one two three to the reference of these three inputs and then uh because input one two three is changed it will notify these two actions as well telling them that since they have the update method it will call it to tell you that okay what's the new reference of this parameter right so we have it we updates to this next element to focus and now so we assign it to the next element to focus so now the next element to focus is updated with the new reference so when we type something and click enter it will focus and then it will blur right which works as expected so um so a so now using actions save us some uh some code like we don't we can reuse all the event listeners with one action where we can have like variables passed in like the parameters to the action well is that like a limitation of an event handler well not it is but not really right so if you look at over here one thing you can do is that we can write in instead of having like an event handler that defines that uses a variable input 2 over here you can write a higher order function what that means is that we can hire a function uh create next on enter so so we write a function that returns us this event handler right why we want to do that is that we can create this function that returns us and it can take in parameters so you can text in a parameter called like input and then we can use it over here instead right so input could be again uh the next inputs are undefined right so I'm going to say if input then it's inputs.focus and else I'm going to be event so this is the same thing that we have done to the actions earlier on so even the current Target dot blur all right so so now instead we can remove all these three Event Center rather we have a function that creates a new event handler all every time and we're going to call it over here instead input one oh sorry input 2 and this will be input 3 and this will be no inputs right so once again we can try still works still works right so you may ask whether um this is better do it this way or uh using actions right well if you ask me I would prefer to do it using an action and here's my reason why right so if you take a look at over here this event listener which is uh this over here when we pass in an event listen over here it's um this thing is the create next on enter is a function creator that creates a new function every time we call it right so what that means is that we are creating multiple event handlers every time um over over every time when we have a when the input 2 has changed uh the input over here has changed right so so the first time is that input 2 is undefined so this will return us a new function where the input over here is referenced to undefined and then as we mounted all the inputs where we assigned the value of input 2 to like reference of the inputs to input 2 then this will get this function will get caught like this expression will be inverted again which means this function will call again with a new input reference and returns us a new function right so every time when we change input 1 2 or 3 we will create a new function right is that costly uh I'm not sure but it's definitely something right so in this very simple example probably you don't feel it right on the other hand over here results too uh when we use an action on an element this action will be only called once when we Mount the input and then it will return us two methods and then we just call that method right so whenever input 2 is changing to maybe pointing to different references what it does is only call this uh method which is the updates and it will do an assignment to update that reference right so there's no it does not create new functions or create anything new right so that that's the difference of using an action versus like um maybe a higher order a function Creator over here in States right so um probably in this example the differences is negligible and if you do it well um namely like if you make sure that you don't have any memory leaks probably new functions they created the old function will be Memory garbage collected and it does not feel much difference to your app anyway right but just for the information it's that's the differences that's the difference between using an event handler and action right so we have seen two examples and let's move on to the last example which is example three so I'm going to change this to example 3 and the same time this as well so I'm just gonna copy all this and create a new file called result three and paste all of them in and let's take a look at what we have for example three so in example three is what I call a secret inputs uh combo uh inputs so what it means is that I can have um so I I'm listening on key down and if I typed some sort of secret combo like Arrow up down up down left right left right so I'm going to do now up down up down left right left right I'll unlock a secret right so how it works is that I have this secret key over here I can Define it um and then on key down I will push whatever I click on and do an array called keys and then um also and make sure that uh if I stop typing for maybe uh one second then I will just clear that array right so I need to click fast enough that in between the keys does not um um lasted more than one second right so at the same time I will so after I click a key I will I will set a timeout so that I will clear but at the same time if I type another key then I will clear that timeout meaning um which means that sorry which means that the timeouts will be cleared and then uh it will not this this callback will not be called you will not clear a key and then we'll register a new timeout to clear another in the next one second right so once we type in enough uh keys that it matches the secrets which will just simply do like a rate of join with a comma so all the items in the array will be drawn with a comma and if it matches the secret then it will unlock the the unlock right so so that's that's how the code works right I think I think I need to do something over here which is I need to make sure that uh once I set timer over here and ID equals to now and then I'm only clearing if there's a timeout ID over here instead okay so um let's rewrite this I'm gonna I'm not gonna explain like how you would do it otherwise but I'm gonna ex like show you how I would rewrite this using action and you can judge yourself whether it's better writing and using an action or writing using like event handler like like we've shown earlier right so first thing is we're gonna call this a secret use Secret combo action by the way you don't have to always name your action with ending with an action it's just to let you know that it is selection that's all um I don't usually add that suffix of action right so I've heard I will call so the action will text in an element and probably taken us a params which I would um see let me see what I can do so I will take in the secrets as the param as well as maybe something like a callback function right so if I want to pass in a secret as well as a callback like I want to pass in multiple things then a easier way of doing it is to pass in as a function sorry as an object so I can pass multiple things within a Sim object right so an action will only have two parameters so the second parameters if you want to pass in not just more than one thing then probably you have to pass in as an object that collects all the things it could be an array as well so anything like object or array that has that is like a collection of multiple things that's all right so I'm going to say secrets and a call back and over here I what I'm going to do here secret combo action is I'm gonna add event listener and event listener key down okay and then I'm gonna copy all this thing over here format nicely key Downs are on key down right and then I'm going to return an object where I will have update as well as the destroy so on Destroy I need to remember remember most important thing of all is to remember to remove event listener if you are adding an event listener in an action right remember to clean things up you don't want uh if you do not do that it will memory leak because um it will still listen so your elements itself still listen to some even listeners and probably you couldn't and key down is probably referenced somewhere and you just couldn't garbage collect your elements right so over here let's see um so I'm going to clear I can remove this so the way of using it would be instead I'm going to say use I'm going to say use secret combo action and I'm going to pass in param so I can pass in an object so I'm going to say I'll create that object over here so uh the outer brackets is like whatever you put in a param and then inside I want to pass in objects I create another clear brackets right so over here I have um I'm gonna pass in Secrets which is a small key lower key passing as a secret and then a callback function which is a function and this function will be setting the unlock to true right so now let's update the code over here so this is the secret and this if it matches I'm going to call the Callback right and now uh all these things can be defined inside so it's locked within the scope in a scope it's not leaked out outside you can still Define keys and timeout ID for other users right so now let's see what we have come over here which is the results up down up down left right left right it's not working hold on let's see secret secrets unlock callback okay let's let's see what we have over here uh console log key start drawing come on type in something up down left right left right oh okay it works well it works so um there you have it uh rewr write it using actions right so we can have multiple inputs over here you can have um a different kind of Secrets maybe over here we want to just uh up down six uh three times up down up down up down then this one will be up down up down up down unlock the secret right so um callback um yeah so you have it uh using a secret and a callback today I'm going to share with you how to create events using spelled actions so you may ask me why do I need to create events what do you mean by creating events well you know the last video we talked about how to reuse event listeners using spelled actions and there's this one example that we use in actions to allows us to create like a custom secret unlock inputs which we're gonna see over here so I'm just a recap so if you haven't seen this you can click on the videos link over here on the top right corner and so here's a recap on the examples that we've created so over here we create an actions using secret combo action that takes in two parameters one is a secret one is a callback so in this example we pass we call use secret combo action where we pass in a secret which is a secret combo key and then a callback which is whenever we successfully call this key like press that secret combo Keys the Callback function should be called which will do things that we want to do when it's called right so um nothing wrong about doing it this way but so let me copy this over and go to the results but what if we can have an event listener that listens to a custom event which tells us that the secret is unlocked right so probably we can have like a custom events listener over here which is like we so it's a custom event listener right so we listen to this custom event so we can use on directive to listen to it and the events name so for example like input you can on like a key down key press or you can have on value events listener change but over here we can have our custom event name that we can Define ourselves right so this name probably would be something like since we are using a secret combo action would be like secret combo achieve and since this is a event listener we can pass in an event function so here we say unlock equals true right so uh which means that we don't need a callback function right we can call we can have our secret combo action that looks like this and by adding this action probably we have a custom event that's called secret combo achieve when that event happens the triggers will call this callback function which is to set out on not to be true right if you write it this way you you find it um slightly more elegant than what we have done earlier where we pass in a callback right now we can have like events listener right so this is what I meant by creating an event uh so an action can create events I mean you can create events yourself but we can use actions to create a custom event that is being triggered by a custom trigger right so by for example in this case is when the combo action uh when we when you type in a combo uh in in your input right so how do we do that so over here when so in the existing Hood we pass in a callback which is being called over here so over here is where um we successfully triggered I mean we successfully pressed down the combo Keys which is a callback which we'll call the Callback so now we don't want to get the call back from the uh action or on the other instead you want to um dispatch a custom event so I'm going to say elements dot dispatch events New custom events right and the custom events can have a custom event name which in this case is the secret combo achieved right and that's about it so instead of passing a callback where you pass in the Callback function that we call we just dispatch events and you can decide whether you want to listen to it or not right so having a callback function passed in you probably have to check whether um this callback is uh it's passed in it's a function and then you call it right doing it this way it decouples with like whether you the need of having to pass in the function where you just dispatch events whenever you feel like it and in this case uh and then the user itself will be deciding on its own whether to pass in this and then we do dispatch an action this like it's whether the there's event listener or not it's optional uh so one great thing about it in this case we change it this way and yeah let's try it out so um like in the last video we have uh in the apps itself we have the example and the result which is the example would be the original code that does not create an event and result is the one that creates an event right so this uh is um Rebel will be shared down the link in the description so that you can play around with it right so on the left is the example and on the right is the results which we use the create custom events so let's see whether it works so I'm gonna press in the custom uh combo key which is up down up down left right left right right so up down up down left right left right secret unlocked right so that's so easy right yeah so let's take a look at another example and so just to like drill you in this like way of uh creating custom events using actions right in this example example two we're gonna change to example two and result 2 which is the same I'm going to create a file called result two dots felt right and over here example two it's what I call a triple click event right so over here I can open up the console so I I sent an on click event listener and when I click and I have to record account so when I click I'll in clip increments accounts right so when I click three times in quick succession then it will be triggered like it will call like console triple click right so how do you know that it's being clicked fast enough in succession uh basically we set a timeout so I'm just like arbitrary time in this case it's 800 milliseconds So within eight milliseconds if you haven't figured another click then you will reset the counts back to zero right so what I do is I record this timeout ID so whenever the next time I click on it I'll clear this time up so it won't reset my account and at the same time I create a new timeout so that I can record I can see whether the next time out next click and then next next subsequent click whether they are within 800 milliseconds as well so if I click once there's no effects if I click twice no effect Okay click one two three and you'll see a triple click right so um in like in elements you don't have an event called triple click but what uh how good it is if you can so a copy over the result if you can have some you can write something like uh on Triple click right what how good is it that you can do this and you can console log triple click right how good is this to have have this right so how what can you do probably you can write an um an action right so that that's like the aim of this video you can write an action and you can apply that action on this button and once you apply that action uh amazingly it has this triple okay try click triple sorry let me triple click event and then you can listen to and you can pass in the Callback function so that is what the action that we are going to use that we're going to write we're going to say use triple click action so not all so so I'm just adding a suffix of action to this so that you know that it is an action uh it's not a mandatory thing to name your action that ends with an action got nothing to do it's just you just need to be a plain function and then you just can and then you can pass it into the use directive all right so I'm gonna call Triple click action and this will give me an important element so over here I'm going to copy over the code over that I've written over here uh over here and over here as well as this on click right you're gonna paste it in okay so I paste everything in and then I need to remember to up uh the elements that add events listener click on click and when I add event listener I need to always remember to um I remove events listener on Destroy so that you remember to clean it up let's say elements remove event listener event listener yeah okay so yeah so you have this action and hopefully so to to have this triple cook events you just need this triple click action that apply to the button and now when you click the button three times you get Triple click yay so there you have it you create an action events using swell actions right so with cell actions you can enhance your elements so that it can dispatch any kind of events where you can listen to them right so I believe that if you visit spell rebel I sorry spell tutorial on actions um the one that they introduce about actions which is this Panama as you can see here you also in this example is also uh where once you add this Panama action you magically have this pen start pen move and pen and event which you can listen to and react to it today I'm gonna share with you something that I feel that you should know about spelled actions something that is important but you may not even notice about until you run into some kind of bugs so um what I'm going to share with you today is about the order of sveld actions so let's take a look at this example that I prepared for you so in this example we have um two variables one called value before action and the other call Value after actions and you will see why because over here I have two inputs input one and input two one on the left one on the right uh the difference is that the the one on the right on the left the value we bind using a value before action and then we apply an action use uppercase and the other inputs next the second input is that we use an action first and then we bind the value value after action right so you may ask me whether wait is it is the order important in in like buying and use um well that's what I'm going to share with you so let's before that on the action itself uppercase uh is very straightforward I think um which is it listens and inputs events on the element and then destroy and to remove it so in this event listener what you do is then you get the value of that element and then you set it to its uppercase value right so yeah and then in this over here we're gonna say I'm gonna show the value before action and the value after action so that you can compare the two of them so what do you think about the order of actions does it matter that you apply an action before you bind it or you bind first and then your plan action well it does matter right so or else that wouldn't be in need to video this right so over here I'm gonna pull it over and I'm gonna type so right now I'm on caps lock off so I'm not on in any caps lock I'm going to type ASDF let's say a s d f as you can see when I type the the last character is always lowercase right so I'm trying to do again a s d f that's because whenever type um the bind will get that value first uh so uh why when I type I type in a small letter A so that that the value before action will get that value but then an action applied later on the bind because it comes later on in the order and that's when you change it to an uppercase right so can I type so right now I have uppercase a I'm going to type with s so it will applique a and lowercase s which is the value that I get from The Binding and so the bind get first and then an uppercase uh action will apply and then a change that my action the value of the inputs to be an uppercase right that's how you see that um it's always lowercase on the last letter because I'm typing in a lowercase right if I apply an action before the bind then the action will comes first before the bind right so I the same thing I'm going to type ASDF in lowercase but notice that uh whenever I type the value after action is always in full uppercase right that's because we change it to uppercase first and then you get you update the buying value right so the order does matter in terms of the in the attributes in the terms of when you apply that action right so um you may ask me um uh like is there a cash on cash on this right so that um so first thing is that yes the order is always applied in the order of um The Binding I mean in order of how you declare it in the attribute list right and and to make this uh example works is that I know that bind value actually listens to an event listener on input so you you listened so an event listener the input event listener always adds um always being triggered in the first come first serve on uh first in first out order or first come first serve order so uh the buying get applies first so the event listener for the buying gets added first and then the event listener for the actions to apply it later on because it's applied later on right so and then when you trigger the inputs um the bind event listeners get callback get called first and then the actions event listeners get caught later on right so um to demonstrate this if I add um events dot stop immediate propagation basically what it does is that it will stop the propagation of that event to other event listeners that listening to the same element what happens is that you'll notice that this buy will no longer get the value of the inputs because it's listening to inputs events listener but then it's uh what the uppercase will register first and then stop it from stop from it to be propagated to the other event listeners right so if I'm going to try over here everything still works like normal but you want to try over here you'll see that the buying value no longer gets its value right so um I not sure when you need this but this is something very important and your actions are there uh within the attribute list is important so it it works the same thing as applying the ons event listener as well so all uh on use and bind the orders are important which come first and which comes later are important so that um if you're listening to the same event listeners or changing the elements at the same time probably the the one that registers earlier will have effect earlier before the one that registers later on let's talk about some examples of using spelled actions and today we're going to look at one example which is use click outside so you may have seen some applications that has models or popup and when you click outside of the model uh it may do a few things one is maybe prompt you that are you sure you're gonna quit or you just close that popup itself so we are going to achieve that using an actions instruct so as you can see over here we have a div that is called a class model which we just add like some paddings and border so you can see that that is like the region of the model and we're gonna add a action an action called click outside and we can decide to do something that we want about it right so but first let's have um the action so action is nothing but a function that takes in two parameters one is the elements which is these elements that we we call the actions with as well as some parameters right so if we pass in some parameters over here this will be available as the params um so a few ways you can do this so usually before we start anything we probably want to decide or design how the actions will behave right so on use click outside we can maybe a few ways of we can do this one is probably we pass in um callback so when you click outside this is a callback function that will be called right so click I would say right so this params will be a function that you just pass in um or you can use click outside and then probably you know pass in something like um where in uh we can where we can once we use click outside probably we have a new event that we can listen to right for example on click outside so this is uh if you are not sure about what is this probably you can take a look at my previous videos over here on the top right corner where I basically talk about how you can use actions to create events right so um like once you add these actions then this element itself will have a new event that we can listen to probably called click outside I mean we can name anything we want right but in this case I guess I mean click outside will only needs one parameter so probably instead of having it as uh like kind of decoupled using an event probably in this case I just want to pass that function is as a parameter right so now um let's go down to how we're going to implement this action right action is a function and it also returns uh which which will be called when this div is mounted where the element is the div that is being passing and the parameters is that function so I think I'll just rename this to be callback function right and over here it can return to an object with two methods one is the update um the other one will be called destroy this is when uh the element itself is being removed right update will be called whenever this phone like the comparable parameter is changed right so I'm gonna for the completeness sake I'm going to say this is the Callback the new callback function and I'm going to assign callback equals sorry the new callback function right and now we're gonna add an event listener to the elements right so instead of adding it to the elements what I want to do is adding actually adding it to the document body and when I click anywhere on the body um I I would uh want to be called like so this is the events Handler event right I'm going to listen to the document body so that I can know that it's not just clicking on this element but anywhere within like the documents right so document.body dot at events listener click and on click and every time when we add an event listener we need to remove it in the destroy right anytime when you want repeat again anytime when you want to add an event listeners in an action remember to remove it and the destroy method right clean it up you wouldn't want a stray event listener registered and you know that will cause memory leak so now I've added a click event and I remove a click event now in the click event I can know the event.target which is what I'm clicking at right and if uh these things that the element that I'm clicking at is not within uh the model which is the element that I'm calling with the uh action then uh then I know that it's clicking outside of this element which I will call the Callback function right so let's pull up the console and let's try to click on the model and click outside right you can see as it works right now so you can use this to be probably pass in a function to instead of console out click outside probably you can do something like you know close the models and things like that right so here you go uh creating a click outside actions let's talk about examples of using spelled actions and today we're going to look at one spelled actions which is use tooltip so let's take a look over here and let's let me tell you what is a use tooltip action do right so um you have an element over here in this case maybe hello world let me just change it over like make it simple like Hello World right no Dynamic elements and whatsoever but uh over here we can have um title say um this is hello world and this is a greeting okay right so what happens is that when you hover over hello world wait for me and then you will see a toe tip right this is a builtin uh browser Behavior like when you hover over on an element that has a title it will show you that this is a greeting uh yeah the the title right but what if you want to customize the tooltip you want something different you want you know like something that looks nicer that suits your style or theme of your website right then probably you want to do uh you you want to build your own tooltip right so what you can do over here is that maybe we add like on Hover events like like Mouse over and like when you all hover on top of this elements you want to show like customize nicely built a tooltip element instead of like the default browser Behavior right so that's probably what we want to do over here and that's what I'm going to achieve right so um so that would be having like use tooltip uh action and we're gonna Implement that use tooltip action right so before we actually dive in um to implement this um what I want to do today which is slightly different let's approach this differently right why I want to do this is that there's multiple ways of doing something right uh I can't say that actions is always the best way of doing it um you know some some other ways may be better than using actions right so uh you you would never know which one is better right it comes with probably a bit of experience and probably a bit of like gut feeling as well as like what kind of stylistic how way that you prefer to write instead of the other so what I'm going to do today is I'm going to try something different which is we're going to approach this by use writing it as a component a tooltip component and then we will refactor it a bit to convert that component into an action and then hopefully by the end of it you will see like side by side two different kind of two codes side by side and you compare yourself whether you prefer the way of writing it as a component or do it as action right so let's go in and take a look okay to start writing as a component I will start with a tooltip component oops sorry 20 plus results so um so before I implement this again I will have to imagine how I would use this tooltip component right so probably I would have like a tooltip um that wraps around the inner content right so probably I have over here a tooltip component and within it is like the hello world and in a tooltip component probably I have a props um called title and that is like this is a greeting right so um tooltip will wrap around this hello world whatever it is you can have like multiple divs multiple like all kinds of different kind of children elements in it it will wrap around it and then whenever you hover on those elements it will show you a tooltip called uh type the title which is this is a greeting so to do this I'm going to start with having a script that has a props call Title probably I just defaulted to empty string um right so this is how this is what we're being passing in and then we will render whatever it is as a slot right we'll call it as a default slot so whatever is inside the tooltip component will be rendered in here and to add event listener probably will have to wrap around with a div I mean because um you can't add a directive on you can't add event listener to slots like say on Mouse over uh uh yeah you can't so if I import it you will see the error now yep you can't have directives on the tooltip and this is because you know a slot over here can have can be this text element can be having can have multiple divs and all the stuff right you you wouldn't know like which of these elements needs to be applied with that action or you're going to add apply to all of the elements right um I mean it's not impossible but it's not implemented right now so you know probably you can go and implement it right so as far as we are doing right now in uh version 3.31.2 right this is not possible so we will have to wrap it with a div and apply that over here uh so on Mouse over and we are going to have a mouse over event and then we were going to listen to okay so we're gonna listen to three different kind of events one is mouse over so that we know that um uh it's hover on on top of it and then we are going to listen to on Mouse Leaf so that we know that uh uh the mouse is left the element itself so that we need to remove that um remove that tooltip right and over here we are going to have uh based on the condition which is is Harvard I'm gonna show a tooltip which we can style if you want so we're going to call div and then over here is we're going to render like the title in here right and okay so over here we're gonna Define all these three because like you know spell is complaining about them let's define uh is Harvard is false by default uh function on mouse mouse over gonna set is Harvard to true uh Mouse leaf is Harvard is false okay and over here we can start a bit on our you know this tooltip so what I'm going to do here is I'm gonna put some border so that you know that it's there uh um position it's gonna be absolute um and I'm gonna so that you know it will replace that right where your mouse is hover on too right um yeah I think that's for now uh probably background would be white so that you know back back black uh border white background and yeah maybe adding some padding as well four pixels okay so we're done with here I'm gonna show this a tooltip component so I'm going to copy this over title I'm gonna remove this I'm going to call tooltip right so um wait hold on tooltip and we will remove this uh hello world us uh I have two div over here so let me re uh let me add a class for this one called tool tip so right now the the I have two divs so it's applied the style to both of the divs so probably I want to make it more specific make this a tooltip class and states right so when I hover and I hover over you you'll see that this is a greeting and I remove my mouse on Mouse Leaf I will hide that tooltip right so um this itself can be uh as previously what we have is a H1 right so we're going to wrap replace this H1 tooltip now yeah so one thing you probably notice is that this is always below the uh wherever we hover on it always show that it's below um the elements right because it's it's written over here like it's right below it so we have set position is absolute but we haven't set like the top and left position so that you know it's it's always right below the mouse position the cursor position when we hover over so I'm going to have Style over here and I think I will gonna have two variables which is one is the X uh and another would be y right and over here we Mouse over where you can take the event and then we can set like x equals to event dot pitch X and Y equals event dot pitch why so what this means is that um that we have the event object and itself has like uh some properties like pitch X and Pitch y will tell us that the X and Y position within a pitch right so once we have this we probably see like the top uh well based on the X pixel and left sorry top should be Y and then left should be X pixel wait and let's see right it will based on where but once I move around it it's not showing because Mouse uh over will only happens when we move move in right so moving from here you will see it's here but it starts there and I come out hidden and move on here you will see that it's showing here it Stacks here and yeah right so um if I need to move around as my mouse is moving probably what I need to do is add a mouse move event right so Mouse move event and I can do this I can copy this over so Mouse move also have a pitch most move events also have page X and Y so I can constantly update the accent why so here what I want to do is I'm going to have on Mouse move Mouse move right now when I come in hey let's see uh it's it's not showing probably because as uh it's it's constantly rendering right below my cursor and as it's showing right below my cursor um my cursor is now hover on top of uh that tooltip that's why it's uh it's it's like a mouse Leaf because it's leaving from my Hello wall element right so I can solve that by probably add some distance like five over here so that it's not right below my mouse so when I come in yeah it's always five from uh five to the right and to the bottom of like my mouse cursor so yeah looks good right so um probably I'm gonna say now since we can see the tooltip I'm gonna start it slightly nicer right not like a squareish white background black border kind of thing I'm gonna probably add some border radius 4 pixels um border will probably um slightly grayish maybe uh let's see 888 let's see looks slightly better or not I probably even like lighter or say DDD right slightly lighter and yeah looks nicer I guess right so um this will be okay I think last thing I I probably would like to have some box Shadow like one pixel one pixel pixel DDD some sort of shadow makes it nicer right it's like it stands up right so now we we have this tooltip implemented using a component right um yeah so this is how you would write it as a component and as mentioned earlier we're gonna write it reimplement this whole thing as uh as an action and let's see how we can do it right so we're gonna have like a tool tip JS which is an action an exports function tooltip uh so an action is a function that takes in two parameters and say one is the elements one is the params and again before we even start we're going to decide how we would want to use this action right I think over here you have seen how I Envision how I would be using it will be use tooltip and you might ask me like do I need to pass in a title I mean like no because the title I can get it from the elements attribute called title and I don't even have to pass in like you know as a string over here as a params yeah no point um unless you're telling me that this title can oh can can be changed right so are you able to dynamically read the title from this attribute and if it's not then probably we might want to pass in dynamically over here so that you know when it changes it will inform our tooltip action that it changes then we'll update the tooltip contents and uh in our tooltip right but I think for now we just assume that it won't change so this is clear enough we just use tooltip and we just read it from these elements attributes so which means that I don't really need a paramps right and I don't even need since I don't have param stand I don't even need a an update methods because it will never update because there's no params parents is always undefined so over here I will have to so I have two tips that I use three events right so I would have to do the same thing as well I'm gonna listen to these three events so I'm gonna say element elements that add event listener then Mouse over probably Mouse over over here so I'm gonna be quick Copy all this come here paste paste it in okay and as I mentioned otherwise when you you add an event listeners in and action remember remember to remove them from destroy method so that's what I'm going to do now first even before I implements like Mouse over Mouse leaf and mouse move right remove event listener remove event listener remove event listener okay so now I need to implement Mouse over Mouse move and mouse leaf I'm gonna have it over here um of course uh I mean variables over here will have no effects will not be reactive at whatsoever right um so what mouse over is going to do is going to create a div dynamically and then append to the body and yeah so I'm gonna have a reference of a div here because once we created a div when we leave we're gonna remove it right so what this means is that we probably will have to reimplement this Logic the if logic right so we know that this Hardware has always been triggered by the mouse over and it will be true when it's Mouse over change to True when it's Mouse over and we change to false when it's Mouse Leaf so we can simply like create a div over here and create a div and append it and we can know that we can now receive that to remove it over here which is uh sorry which is document body dot remove child death which means um this uh these two lines and this one line is actually trying to implement this logic of if it's hover right when it's hover the if and the is Harbor uh we are creating a div and it's false and we remove it so we can remove these two lines now so this div right we need to know what is the tooltip title so what we can have over here now is um we're gonna probably see let's see okay we are going to read it from here so div dot Set uh text content I'm gonna do it all this right before the append Channel just that you know we create elements and uh update all of it before we just append it to the body right um it's just like uh there's no particular reason why this has to be this way um it's just my personal habit so we're gonna set the text content as element dot get attribute title right and and then over here uh we need the X and Y position I think div dot style will need something to do because basically we don't have this so we're gonna copy all of it over here and paste it in and then X and Y which is the top and left copy these two as well and paste it right in over here right so this is a so X and Y right so probably this can move it up so that we've defined X and Y uh I guess probably we just remove we just paste this whole thing in over here right so you now you notice that manipulating Dom yourself manually is a bit it's a bit hard isn't it right if you can use components use fill to handle all this for you isn't that great so here I need to also install the top uh I'm gonna update this as well top equals this plus pixel I think better to just make it like a string literal uh oops okay and this as well pixel so div.style dot left right and I believe that's it so I'm gonna uncomment this and I'm gonna import the tooltip function from the tooltip.js and to differentiate this is Hello wall from action and this is Hello wall from components let's see uh whoops create elements a spelling error create element whoops let's see whoops it's not creating uh let's see let's see what is missing position uh okay this is working this is not let's see I think we can inspect elements a bit to help us out let's see I have a H1 and a div okay when I hover it's not adding something isn't it and does this show any error it's not showing any error as well as in okay I'm gonna just not doing anything on Mouse leaf and okay so it's is it the same area where it's showing and then it's removing console. Mouse the leaf ah I know okay okay so Mouse leaf Mouse move ah this is a kindergarten Mystic and I made it Mouse leaf Mouse move right so let's see this is a greeting this is a greeting so from actions and from components right so um if you're gonna ask me whether which one I'm gonna do and I mean honestly I I don't want to pass any judgment over here you can decide yourself right um doing it in a component is slightly more declarative right you don't have to take care about creating a div and stuff um doing it over a tooltip probably will have to manually add event listeners manually create the div and stuff right um yeah but then uh one thing that we can think about here is that I mean one thing about the component is that you wrapped the whole slot with a div right so that is one extra idea created even your slot will only have one element but using a tooltip is different uh in a way that you will apply it on that element that you want right you don't wrap it with any div so one difference is that probably for example maybe I have a paragraph over here let's say hello story something and I want to have a tooltip right and I'm gonna say it's from felt right and then you note as you notice that this is creating in a new line because it wraps it with a div but if say I want to wrap it in a span you know spend and I use tooltip okay I'm gonna add title so that you can see that it's showing something uh yeah I wouldn't do this as well over here and you know I came from spelled and uh this is inline because you just add it to the span you can choose to use a span instead of using a div well yeah I mean that that is probably one of the side effects of using components because of multiple reasons one is that you can't add event it's not directly on the slot right now and probably then you would stay there oh maybe I need to you know dynamically change this div to it depends on whether I want to spend I want to div you know uh is there Dynamic elements no there's no Dynamic elements for now there's only Dynamic components so uh yeah I can't can I like choose div or something else uh yeah that that's like a uh some limitations that we have using components right now but you don't have it with actions but I wouldn't say action is better because you know writing this all this is kind of a hassle but yeah it up to you choosing yourself right uh there's things that you can do it better with components there are things better with actions and yeah I'm trying to show you side by side so that you can see it yourself and I write it this way like we write it from a component and then I translate the actions you can see that actually that component itself handles a lot of like adding and removing 11 listeners some decorative way of writing something and you have to manually manual uh do it yourself if you write it as an action all right um so one last thing that I want to show you uh is that you can com kind of com combine the both of like Goods of the Both Worlds which is the good of having components writing it declaratively as well as having actions created using connections right so this is one last trick that I have for you which is now I'm gonna say tool tip from action just to differentiate it and this thing is gonna be just a tooltip uh itself so as a script I'm gonna export let's title and over here I'm going to use the title okay and over here I'm gonna have I'm gonna copy all these things over here to apply to the style apply to the diff and then this one right p over Style um this wait let me just remove this I can make it multiple lines so that it's easier to read enter right and then so this should be X and Y I'm gonna export let X export that's y and I'm not sure whether you're guessing where I'm going from basically I'm going to import this x component tool tip from tool tip from action thus Felts right and I'm gonna use this to render uh the component for me meaning I created a div let's see register even I create a div yeah I can create a div and let's see let's see oh no I don't even need to create Thief I can create a let's tooltip and told hey tool tip component so when I say tooltip component equals new tooltip and the props will be title will be the element get title and let's see I am part of me I'm not fairly sure right now uh sveld component API hey Paradox create components components okay options right when I say oh props and the targets right so props they have the title X would be the event pitch X plus five over it I think I have plus five over here so event pitch X y equals to events page y and I'm gonna have uh yeah that's it and targets is the documents.body and that's it I think so I can comment all this away and comment this out and let's see it works whether it works it's kind of work right uh it's just that we didn't remove it uh so yeah it kind of works let's see let's see uh this is position absolute and everything okay it's correct so next is that we need to update whenever we must move and we need to remove when it's not so here I'm going to say tooltip component dot destroy right I think it's called destroy right yeah destroy and here I have this uh I'm going to set a color sets right I can call this sets which is uh tool tip component dot sets let's say um left uh no X and Y right x y so X is the pitch X and Y is the page y right top is the ah top is the Y and left is the X okay so no wonder just now was place it weirdly now you see it's working it's working fine from actions so you can use um you can Define it like as a component and then you can use a spell component within an action right this way um you know what I'm going to copy this over I'm going to say tooltip tool tip using V1 right so that uh uh this file is still around you can oh this is GS file right this file is around you can read it I will send this a rebel in the description so they can play with it you can see the three different versions so I'm going to uncomment all this so that it's it's around for you to play around I yep let me just do it so this is you use you you do it with you know iteratively programmatically create like a div and then you set elements and attributes and styles and stuff you manually update it this way is you utilize a swell component API you create you create a component using Felts you create a tooltip like just a tooltip you can start your very run like all the you know the uh CSS scoping of the style class themes and all these things are there works fine right even like you see X and Y you can like declaratively say X and Y which is the top and left everything works like a component as you wish and then you create a new component instance you can Target anywhere you want probably a body and then you just update it with sets API and you can remove it when you destroy it when you are done with it right this way you kind of get the breath of Best of Both walls right so I'm going to just leave it here for you to decide what is your prefer way of writing let's talk about some examples of using swell actions and today let's take a look at one example which is use viewports so we're going to write one actions that will allow us to uh know that whether an element is has entered the viewports or has exceeded the viewport right so probably will be something a quick and easy and we can take a look at how we can do that using spelled actions so um over here we're gonna have uh one um uh header one tag over here I think I will just name it hello world simply just remove all this and let's gonna have this actions called use viewport and let's design how this use viewport actions would work so I would want this use viewport to be just like this but when um and then we by using this viewport probably it will give me some events like uh like on enter viewport and on exit viewport so having these two actions are two events and I can listen to it and I can handle I can do things with it so right now I'm just gonna print out enter and exit right so um if this is the first time you're watching my video about spell actions probably you can take a look at this video on the top right corner where I talk about how you can create events using spelled actions so basically this actions view use viewports will create two events which is one is the interview part the other will be exit viewports whenever my elements is entering or exiting the viewport sorry let me adjust this okay so let's implement this action so we're going to create a new file called view use viewport action dot Js and I'm going to Define this use uh this viewport action so the action is a function that takes in and two parameters and elements and the params so in this case we're not expecting to take in any param so I'm going to just leave it as element an issue written an object that has two methods one is updates one is destroy if you're not taking any parameters then you wouldn't expect that the parameters will be updated so we can ignore the update methods but implement the destroy method right so this function method would be called whenever the element is destroyed so we're going to just export default this action and I'm going to import it from here use viewport action.js right so now we are going to implement uh the action right so I'm going to use um an intersection Observer to do it for me so probably I can create and enter section Observer new intersection Observer and the Constructor of intersection Observer should give me uh should be ticking in and callback function whenever and any elements that is observing is enter or exit the viewports right so this is something I will have to fill up later on and the action itself will be this function will be called whenever this element is mounted on the screen and at that time we'll probably want to observe this element to see whether it's entering or exiting the viewport and once this element is removed from the Dom we probably will want to get tell the Observer to unobserve this element right and now let's fill up the Callback function right so this intersection Observer takes in a callback function that will have an entries of element where each of the elements could be either entering or exiting the viewport right so what we need to do is to look through these entries so for each entry and in each entry it has two um properties one is the entry dots is intersecting telling us that whether this element is intersecting which is true if it's within the viewport or false it's not within a viewport right and we have entry.target which is the elements that um is within this entry so what we're going to do here is that we are going to dispatch a custom event when the element on the element itself whenever it's intersecting or depending whether it's intersecting or not right so I'm gonna call this patch event over here I'm going to create a new custom event right so this event will be depending whether it's intersecting or not so I'm going to say I'm going to Define a variable called event name and if it's intersecting which means it's within a viewport I'm gonna dispatch an event called enter viewports which is this one right it will copy it over I'm gonna paste it in here and if it's X it's not which means that it's just exiting the view you copy this which is exit viewport event right so entries will have only the elements that has just triggered the intersection Observer so it's either just entering or just exiting right uh so that's why uh whether to know whether it's existing or enter entering based on this flag and so that will depends on this slide will depends on what events that we're dispatching and I'm going to copy this event nymph I'm going to paste it in the custom events right and I think that's it that's that's easy right um so to test it out what I'm going to do here is I'm going to create some you know some placeholder elements that we can push this uh hello wall header down and then we can scroll up and down to see where the like the intersection Observer is being the enter viewport like exit viewport events being triggered all right so I'm going to create div style if it's like um maybe height of 200 pixels and background of read uh uh I'm gonna copy a few probably just to know that it's different I'm gonna say blue and green go copy a few over this and paste a few at the bottom as well okay so let's take a look at the console right uh once at the first when we adding this um use viewport actions the moment that we start observing probably we need to know also whether the element is entering or exiting or is like within or outside of the viewport so this is when the exit viewport is being triggered the first time right it depends on whether you want it probably you have to handle it so that you know whether you are you should be doing something or not right and as you scroll um once we see that hello was entering the viewport you see that enter and then if we scroll Plastics as it right coming back enter and exit right yeah that's that's pretty easy right I mean that's that's about a use viewport action so before we end this I want to add a few tweaks to my viewpoint actions which is over here as you can see that we created an intersection Observer once we like at the beginning like in the entry of this module uh what I mean is that when I import this action whether or not I'm starting to observe an element uh I am initializing a new intersection Observer at the very beginning right so even I'm not using it at all it's it's been created right um I can either create a new intersection Observer every time for each of the elements that I'm monitoring I could use just one instance of it and I feel like just using one is good because you know it's designed to observing multiple elements at the same time but I wouldn't want to start initializing this in the section Observer uh right at the start right before I'm observing anything probably you can see where I'm coming from what I want is that this intersection Observer is being lazily initialized so let's do that right now so I can Define this intersection Observer um at the very beginning but I would create another function called initialize intersection Observer which I would initialize it over here right and there there's a few ways multiple ways of doing this uh one is that I can keep calling this over here many many times but within this function I would check that if it's defined or return early right another way of doing it would be not checking it over here but you know uh if it's not defined then I will initialize it right I think either way is fine uh it depends on how uh how you like to write it right um but for me my personal preference is that if I'm doing if I name my function called initialize intersection Observer then probably I will check whether it's defined first before I initialize it right it doesn't make sense for me to call this initialize many many times because it should be call it once right but if I want to do it the other way where I check within itself then uh I in this case right um written then I will call it like Ensure intersection Observer initialize is initialized right so it's just me where I'm particular about the name of the function that because it carries some meaning about how you should use it and yeah this is this is my uh pet peeves about names and how it should behaves right so either way if it's unsure then yeah you can call it multiple times and if it's initialized then you return earlier but it probably is not even it's initialize just ensure that intersection Observer right ensure that it's it's there uh but if I call it initialize then I will check if it's initialized first before I call it right this way we have our intersection Observer being lazily initialized so meaning um if you don't use uh the intersection Observer at all uh which means you the element that has a user viewport is not mounted at all then it's not initialized right you are not creating a new instance that is doing nothing right that's lying over there and doing nothing let's talk about some examples using sveld actions and today I'm going to talk about one example which is I'm using swell actions to integrate with this UI Library called popper.js why am I talking about popular.js in specific well um the last time when I wake up did this video about using swell actions to create tooltip um someone commented on Reddit about about if you want to use proper GS which allows you to create Dynamic tooltip that overflows and I click in to look at the implementation of the svelt proper JS by Brian Lee and I find that it's pretty interesting you can take a look at it if you want but we're gonna do it on ourselves uh why is it so interesting is that if you take a look at the proper GS API you import a create popper from proper JS core and you pass two elements in this proper JS API which is the one is the uh the tooltip uh the the elements and then the second one will be the tooltip right so you wrap this API you call this API with two elements and remember when we use actions we only use we're going to apply it on one element so what if you want to apply it to two elements like this proper JS and how would you do it and that is what we are going to try it out in this example right so over here I have my ripple open up let me split it on half so that you know okay look it side by side what we're going to do here is I'm going to copy this whole chunk of code over here and I'm going to create use popper uh dot Js which we're gonna export an action called use popper and an action is a function that takes in an element and a paramps and it returns uh and it could return an object that has like updates and destroy and over here we're going to import the proper JS which we're going to take in um if you call create popper we need to take in two elements right one is the uh the elements and the other one is the tooltip right and probably we also need to copy this which is the placement on top right so now we have a problem right where do we get tooltip right if you use use popper with this element um how do you get the tooltip or whether it's these elements the tooltip but not the elements um yeah so the thing is you can only apply an action to one element and how are we going to do that if if your API requires two elements right so this is something we're going to explore now but in the meantime I'm going to say div and then use use pop use proper right I'm going to add some words over here uh hello world right so tooltip is undefined so how do we do it so um let's think about how you want our API to look like so let's imagine our API so if this is the elements that when we hover will show a tooltip then we probably will also have another element which is the tool tip itself right and we would also want to apply some sort of actions over here right so that probably this is like proper tooltip and this is the proper element in such the way that you know uh this is the elements that when we hover there will show two tip and this is the tooltip itself and so that we can get two elements and then apply the action to it so if we're going to have two elements two actions that are in a pair why don't we create a function that returns these two this pair of action what if we have a function that looks like this um probably it returns an array of actions a way of two actions so the array of contains two elements first is the action for the elements and then the next would be the action for the tooltip and probably here I will call something like a create popper action so probably here we will have a great proper action and go level so probably here we will have the great proper action and that will return us two actions and these two actions should work in a pair where once the action is applied on both elements we get both elements only we call this create proper API from the proper JS core and so let's take a look how we can implement this right so now we have imagine our API let's come back over here and think about how you can write this we will have a create proper function so I'm going to say a function called create proper action and it should return us an array of two action right the first action is called the use proper element so use proper element and the next action is called the use proper tooltip right use proper tooltip and these tools are these two are actions so they both text elements and params which um in our case probably we're just gonna ignore the problems for now and you're gonna return these two action over here so these two should works like a pair um and we'll take a look at how we're going to implement this right so this we're gonna make it as our default exports so we're gonna remove whatever is here and we're gonna call this uh create proper action for the use popper right so now let's come back to the use popper let's open up a bit over here we are going to call this function uh this action will be called when the proper element is mounted but at that time the tooltip element may not be mounted right so we want to have like a reference somewhere like the proper element and the proper tooltip and we're gonna assign this um elements whenever the element itself is mounted so we're gonna say this is this and this is sorry this element and because doing so we will now probably want to have a function that is the actual grid popper uh I'm gonna say initialize popper so because create popper is here already so initialize proper so this function uh will be called in both actions so we don't care about which uh order of like proper element is defined or proper tooltip is defined but we're gonna call it call it on both sides and we only do our thing when both proper elements and proper tool tape is ready right so if this function is called first then proper element may be ready but it may not or if this is called First and proper tool tip is ready but proper element is not so only the second time when we call initialize proper after in both actions where the proper both element and the tooltip is ready so we're going to say popper element and proper tool tip is ready what I call the create popper uh API right let's see here let's see process is not defined ah I believe this property.js core itself is using some imp process environment what I can do as a hack here is that Define process JS let's say um go window dot process equals to F production okay and no so this is ignore me this is going to be a hack uh and we're gonna import this Define process first yep so yeah probably let me explain a bit on this hack basically we're going to Define process as the global variable which is the nth node nth is production because I know that in some Library they like to assess a process.f.node f as they assume that this is being imported uh in node.js as well as your bundlers like webpack or roll up understand this process.nf but not in the browser right so we're going to Define this right before we import our use proper which Imports this proper JS which itself is using that process so now as you can see this is showing up over here I believe this is working let's see placement uh top end um would it be because the hello world is gonna okay how about let's try bottom starts uh pot placement bottom starts right ah yeah so probably the default placement is over that right corner now it's bottom starts so this is the placements and all the power arms probably we would also want to pass it in somewhere we can decide whether we want to pass it in the proper element or proper tooltip but decide only one because you know what happens if you pass two conflicting problems on both sides I'm going to reconcile that so I probably would want to pass it in the tooltip element because it feels like it's a tooltip related power ramps so over here we're going to say proper params equals to Prime Rams so I'm going to Define this over here and I'm going to replace it over here right so after replace it I'll probably have to pass it myself so it's at the proper two tip I'm gonna say um equals to placement bottom starts and now it's back to the bottom start again right so if you are curious why is there two curly braces well the first outside most the outermost curling brackets is just telling that this is what is within is an expression and the one inside is just like an object right so the expression is an object so we say use proper tooltip and we have params and over here we do popular dot equals params right that means that we're accepting prompts here we also need to prepare to be prepared that you know there will be an update whenever you're using that params be sure that you also Define and updates methods because params itself can change right if you don't have it over here then yeah we don't have to care about but if you are taking problems here yes please define new params let's see proper dot params equals the new params by the same time we would also want to like changing it this alone wouldn't affect the proper here so probably would have to have to look up and the proper API documentation to see whether how we are going to update the params so I'm gonna say prop I'm gonna guess probably it's in over here create popper and see let's see instance updates set options I would believe this is the options right so set options takes in an option write a shape of options right so probably is this one I'm gonna come over here and say uh popper dot set options with each the proper params but what is proper well proper will be this instance of after you create a popper right so I'm gonna come over here and say popper equals to create popper lead popper right so now if you okay see let's let's try and see it's a buttons uh let's create let's make placement uh variable I'm gonna say it starts I'm gonna replace this placement over here and I'm gonna have a button that click me that when I click we change the placement to say let's see what other placement you have on the right all right let's let's try on the right equals right so when I click yeah it's on the right right okay it works right so make sure when you're taking the pumps please be sure that you also Define updates so that it it it feels good where it's you can dynamically change whatever is inside the params and see it reflected immediately right if you don't have updates defines then it will not update itself so um as you can see over here um when we're looking at the apis we also see a destroy which is to clean up the instance which means that whenever an API provides a way to clean up we also need to do our own cleanup which is over here we will have to define the destroy to do a cleanup and so if proper uh okay because we can destroy this tooltip as well as this proper element so I'm gonna extract that method out um just like how we say initialize proper right so when I say uh destroy popper uh over here I'm gonna I would copy the same thing as well over here and then um also once we are destroying then probably will say proper tool tip is now and over here we're going to say proper element is now so that you know we don't hold the same reference against uh we release the reference from from this action pair and Destroy popper let's define this function destroy proper and I'm gonna say if you still have popper then popper dot destroy and we also you know popper equals null so that's if you call destroy multiple times it's it's not going to call the destroy API anymore so how do we validate this so probably we have um show tooltip as a variable uh we're gonna say True by default I'm gonna come here and I'm gonna uh probably have the tooltip as you know down in place shown whether this show tooltip is is true or false right and to the easiest way to check uh true false is to have a checkbox uh buy and check equals to a show tooltip so when we turn it off tooltip should be hidden and we turn it on it should show and height show and height and we say click me which change the placement to the right and we show it should be on the right right so that's about it we we have shown I've shown you how you can uh integrate the proper JS using action and in this case why is it so special is that popular.js Library uh takes in two elements and usually an action is only taken one so you would have to create an action pair in this case where you have two actions and they have to work together to to create the proper tooltip right and so as I said you can return an array of two actions and to coordinate between the actions you would have to kind of abstract like the initialization or destroy function where you would have to check in during initialization is to check whether if both elements are present only you create the proper and when you destroy make sure that as long as one is being called you will destroy it once and you don't destroy multiple times because you know both elements can be hidden at the same time you only destroyed once right and then um also when you have two actions that potentially can take in params you have to decide which action to take in params or you or you or you kind of like split into some params to be configured on the one action and some to the other or you just make all problems to be configured on only one action well this this is because it will be slightly harder if you want to reconcile the pumps you know what if both actions params one says that you need to place on the right one says you need to place on the left you need to come away to reconcile that and in either case I don't feel it makes sense you know like why must tooltip takes priority than the proper elements right so an easier way is to say proper element will not take any params and proper tooltip will take all the params and once you're taking params make sure that you have an updates methods so that you can make sure your parents is dynamically reflect uh the library under the hood right so that's about it so in the last video we talked about how we Implement uh use viewports and this video we're going to talk about how we can use that and to implement a use lazy image basically it's an action that allows you to lazily load your image only when the image is within the viewports that's why we're going to use the use viewports over here so let's take a look at the code so this is uh continuing what we had done so far we has we have a H1 that has used viewports and if you scroll you'll see that when it's enter it's it will cancel out enter and when it exits you will say exit right so I'm going to reuse this I'm going to firstly create an action called use uh I'm gonna lazy image action so action is nothing but a function I'm gonna say lazy image default that takes in parameter which is elements and optionally params if you provide if you are allowing people to provide parameters to the action and okay so this is your action and we import this okay import lazy image from lazy image over here and we are going to use our lazy image action to replace this H1 so I'm gonna have an image tag I'm gonna say I use lazy image and I'm gonna remove this so now I need an image okay I'll take I'm gonna say uh lazy image demo I need an image so um let's see let's probably let's steal this image over here I'm gonna inspect and it says oh hold on says a background image you're gonna copy this over here um so let's collapse this so I'm going to use Source equals to spell dot def slash spell logo dot horizontal SVG probably needs to add the https over here so if I scroll this you'll see that the image is already in the screen and if I inspect the elements and take a look at the network tab so let's clear everything let's let's collapse everything unused let's only focus on the image tag filter with SVG um let's refresh and see that the image is loaded immediately and if I scroll up and I refresh you can see that the image is still loaded immediately right immediately and what we want to do here is that we want to prevent this we want to we want the image to only load when we scroll until we see the image is within the viewport so what we can do here is that instead of using the source attribute which will lets the browser to load the image immediately what we can do is we can rename it to data source right so um it's just like random other attributes but over here I just use I use the data attributes custom data attributes here uh it can be data Dash anything that you like but I'm going to call it data source so if I refresh this again you'll see that the image is not loaded which is good and if you scroll down you see that the image is not showing it's not loading so what are we going to do so let's come back to Lazy image action and let's try and implement this so uh we have implemented um use viewport action that uses intersection Observer to know whether the element is entering or removing leaving the screen so why not reuse this logic over here and we use this actually we can reuse the action itself so action is nothing again is nothing but a function that takes in the elements and optionally in params and it could returns us an object like destroy with a destroy method or updates method so to use an action outside of svelt what you can do here is you can call it yourself so let's see let's import viewports from use viewport action what I mean is that you can call this viewport action rename this Yarns right you can do that um you can do this and it should work because it's nothing but a function and he returns us um I'm gonna say uh action methods viewport action methods it returns us an object and this object has a destroy and updates methods so if we are going to destroy these elements which we'll call the digital method of this lazy image we should also call the destroy of the inner action as well so that is what I'm going to do now let us come here and destroy I'm gonna call viewport action methods dot destroy as well all right so this will cleanse up whatever is called set up when we call the action right so if if you have something like an update and it's relevant to your action then probably you can also call like dot par update with the new params right so probably over here you have a paramps and you can pass it in and if something updated you can call updates method of that viewport action methods as well but in our case we don't have it our viewport actions does not take any problems that does not return us any updates so we're gonna remove this remove this revert this okay right so once you use the viewport action remember what happens you have two new custom events right the enter viewport and exit viewports and what we're going to focus now is just the enter viewport because when we enter the viewport we want to load the image so we can elements.at event listener call enter viewports and then we're going to have enter viewport event listener right and every time when you add an event listeners in your action you need to remember to remove events listener over here okay so let's see and the Viewpoint now defines so let's define enter viewports okay so what are we going to do when we enters the viewports right um over here the element is an image tag and we can get the source of the image that is supposed to be the actual Source in the data source right so we can basically get elements.datorsets.source which is this the value over here and what we do we can do is we're gonna set the source of the image to this value right so when we enter we're going to set it to to this value right so let's let's refresh this let's clean this come over here let's do a refresh okay you can see that there's no image being loaded and when I scroll and as soon as the image comes into viewports you see that it's being loaded and the image is being downloaded you can see it it's reflected in the network Tab and why is it two entries over here well it's basically because one let's see not quite sure why um but I think that's besides the point so uh over here um let's see one thing we need to do also once our image is loaded we probably wouldn't want to kind of load the image again so what we can do over here is also to remove event listener over here so once it's done we can remove the enter viewport listener so we don't care about whether it's entering reports anymore and yeah that's that's about it that's how you would Implement a lazy image using a viewport action right so what you have learned so far is you can use an action to compose an action within another action right so if you have multiple actions and probably you can use that to compose it right so here you have it lazy image using actions I want to talk about Ensemble actions so what is Ensemble actions well as you can see if you Google around you probably couldn't find this because this is a makeup word for uh patterns that I found arising in creating a few actions and I find that I need something I need an actions that I can apply to a group of elements and I want to apply an action to them together right so I have an action so usually actions is applied to one uh per element basis where you just interact with one elements but sometimes I want these actions to be interacting with a group of elements that apply this action so it's not applying to all the elements you can group different elements together with one actions and so we're gonna look at some examples about this right I come up with three examples as you can see over here in the rebel and I would I will go through with you in detail in the first example right so we're gonna see how I transform something into that an ensemble actions and we're gonna take a look at example two and three which I already come off with that actions so for the example one uh over here you can see I'm use showing example one example one is like this I have two box that I have enabled Dragon top drop so I can basically drag an items into the box and then you will see that it shows up whatever I'm dropping into so I can drop into the box 2 as well but I can't drop a into box two well uh so so there's a limitation of like I can only drop A and B in drop uh in box one but not C and I can only drop B and C but not a in the Box too right so this is a very contrived example but I want I I purposely designed this so that you can show you can see one coming over here right so over here I use a drag and drop API I use on drop and drag over event listeners for for different boxes and then for each of the ABC I add draggable and on drag starts and on drag n and as you can see because of the I want the first bug to only receive a and b but not C and second box for only B and C but not a what I have to do is that my on drop will have to be I I can't reuse the same on drop actually I can't use the same on drag over because on drag over I I checked for a flag whether I can drop it if I can then I'll prevent default I will prevent the default behavior of the browser which is to prevent all drag and drop so uh so because of that I have to have two different kind of event listeners uh checking different flags and for the on drop I have to use a different event listeners again because I am going to call uh I'm gonna append the drop the data to a different Drop Zone string so this string is going to be shown over here so um if you have watched my previous video about how to reuse event listeners with action you can even immediately see that uh I have defined a lot of actions over here and probably I can reuse event listeners and create a new event out of it um same thing goes with the drag up draggable uh token the circles A and B and C um but then I also want to incorporate this logic of what can be dragged into a certain Drop Zone I I don't want to just apply this draggable on all of them and then proof I can drag and drop all of elements into all the Drop Zones right I want to have like I want to scope um certain items to be only drag dropped into a certain Drop Zone so so that we shall explore how I'm gonna do this so I'm gonna come over here and create example three final okay so this is the end result and the main point mean time I'm gonna copy example one oh sorry example one final no example three so I'm gonna paste it in and we are going to use the example one final instead and so I'm going to keep this example one for you in the meantime I'm gonna change this example one final so uh let's imagine how I would want the end result to look like so let me collapse everything so that it's cleaner for us to explore imaginations so I'm going to come over here and this is how I would imagine instead I would want to have a function uh function I'm going to call it get drag and drop actions so you see it's not an action but it's a function that creates an action so this function hopefully I gives me a pair of uh drop uh drag and drop action so hopefully these two are actions so I can have two different pairs of this drag and drop action so I'm going to call drag one uh drag two drop one and drop two so if this two pairs I can come over here and okay so so the first drop zone I'm gonna use drop one and for the second one I would use drop two and now I'm gonna come over here for the draggable part I say A and B I can drag from am so for the drop zone one I can only drag from A and B so I'm gonna use drag one for this two and for B and C uh for the drop zone do I can drop B and C right so I can come over here and then use drag two okay so as you can see it's it's quite clean I have dropped one use drag one and use drag one drop two use drag two and use drag two over here so this is the end result that I would once my actions to look like um so of course you say uh drop one what does it what happens if you dropped yeah then I would have probably a custom events as dispatch right if you don't know how to do how to create a event using actions you can watch my video links in the description so probably I will with this drop one action I will create a new um new actions I called it uh on receive drag data so on receive direct data oops so for here I can have my event handler I'm gonna inline this uh by saying uh dragzone Drop Zone one plus equals event dot detail so hopefully the string that is carried over from the drag one and drag two will be in the events detail I will be received from the drop one event and then receive as event or detail so I'm going to come over here and copy the same thing over as well but change it to drop zone 2. so this is how you're gonna look like and maybe I can change this as well so previously I'm just use a when I start dragging I use the inner text as the data that pass into the drag and drop API data transfer but over here maybe since I'm using actions probably I can pass this data in for my action so then this data can be dynamic as well uh as you if you change the data and then I can change my I can change my poweramps over here hopefully by now you should able to know how to um updates these poweramps to your action so um if you are adventurous enough you can pause over here and try to implement this pair of actions yourself if not I'm going to continue over here so I'm going to Define this get drag and drop actions so I'm going to come over here say function get drag and drop functions so I'm going to Define two actions right so the first one is called the drag action and the second one is called the drop action so you may ask me like why is it returning it as an array and you do this um I think since react comes up with the hooks pattern hooks API a lot of us realize that actually we can return an array of results and then you and then you can destructuring using array destructuring right we all know that but then this is one good way that we can return something without enforcing the the name of the thing that we are going to return a lot of times if we are coming you're going to use this multiple times then you kind of have to think out of a name to rename it right so if I gonna return uh drag and drop as an object then because I'm gonna use this twice I would have to manually rename it like come and drag drag one and drop equals to drop one and do the same thing for drag two and drag drop two but if I know by convention by Design I say that okay this will only always return two items or maybe one or three items okay not one but two or three like a fixed number of items I think the best number is two at most three then since it's only three items and I design in a way that maybe for some convention there's always a pattern on in terms of the position of the items they're gonna return then I can say that I'm going to return it as an array so you can come up with your own name without having to destructure in this structure at the same time rename it so I don't force whatever name that you want you can come up with drag one drop one or blah blah blah one and blah blah two right so it's up to you so here I have my functions and I'm going to return it so these two are actions so remember actions is a function and function that takes in a note and a paramps so I'm going to come over here and do this two for now and now so I need to incorporate some of this logic uh so for the drag uh previously when I have drag I have set the draggable to true and on Drexel and on drag and so I'm going to copy this and come over here and whoops and Define it right I'm gonna Define this too so first thing is note dot draggable equals to True okay that's settle and then I am going to say hold on let me check my notes I'm not sure whether I can pass it as a string but let's just try as a as a Boolean and then I'm gonna add um two event listeners right on dragstart and on drag n so instead of writing it I'm going to copy um come over here and drag start drag and so previously we have a custom um Logics over here that says a what can be dropped right so right now since we're returning as a pair we don't have to come up with this custom logic we just need to say Define a variable here can drop it goes to false and can turn this flag on so anytime when we are dragging anything it should always turn on as true so this flag is going to be used on a drop right so I'm going to use the same flag in my drop event so that so that's why I'm Define it outside of the drag so that the drop can use it as well so as long as this flag is turned on then I am I am open to receive this data coming in so okay then on drag and I need to set reset it back to false okay and then the data instead of reading from text since we're in passing as params this is going to become over here and I think that's it so I am going to add event listeners uh drag start and then on drag start and do the same thing for on drag n as well and then if I'm adding event listeners I need to be a good citizen I need to remember to remove it when during this drawing so I'm going to come over here copy these two lines paste it in oops and then replace it with remove event listener and one thing I need to do also is I need to make sure that I can updates my program if it's Dynamic so this will be the new Power ramps so uh I think name it to be the contents is better so data right this is a data that we are passing in so this will be the new data and I just need to update this as the new data over here so this will always get the latest data okay I think that's that's great for the first action so I'm going to remove this sounds good okay now let's focus on the second action the drop oops so I can come over here and let's see okay hold on this I need to be a string okay so I'm gonna come over here for the drop I am going to copy the drop handlers over here okay so for the drop action I'm gonna do this too right on drop and on drag over so in drag over you so let's let's copy these two events listener uh okay just copy these two so on the drag on drop is to handle when this is being dropped I'll do what happens and then on drag over is to handle the time where should I prevent default which is if I prevent defaults which means not the browser default Behavior which means you allow uh people do drag over this item right the default behavior from browser is to prevent anything so I come over here and I said dot on drop uh event and then I'm gonna get the data out of it so this drop event I I don't have to do this handle it myself I can come over here and dispatch a new custom event new custom event and I'm gonna call it receive drag data and for the data that I'm going to pass in for my custom event will have this detail called the data okay and on Direct over what I need to do is I need to check the flag to see whether this is turned on which is only when I'm dragging anything that is covered by this drag action only them can be dropped into my drop zone and check this flag if it's true then I event different defaults allow the dragging over and I think that's it so I'm gonna add event listeners again so note that at events listeners drop and then on drop note that at event drag over on drag over and by now you should know what I'm gonna say be a good citizens remember every time when you add events listener you need to do destroy to remove them so copy this to come over here replace the ad to remove oops and I think that's it so let's remove this and let's Okay add event this there a listener not listeners listen there okay I think that's it's it's good now and let's try so okay I can remove anything that we don't need anymore so on drop one all these functions can be removed even this flag can be removed okay so we have this get drag and drop actions probably you would you if you want to reuse across multiple components you can move this into a file and you can create it you can call this outside of swell component as well and then pass this drag one into um one of the components in any components that you want to drag and then drop one the drop pair into any other components you want so you can doesn't have to use these two pairs in the same components you can pass it to multiple components as soon as they come with so that's the beauty of coming as a pair you can control where uh you can control what are the pairs and then use it as a group all right so they together these two actions and because they come as a pair the internally they are sort of like linked they and then all these actions all the elements that apply with these actions works together to achieve one effect therefore I call it the Ensemble actions so does it work let's try it out let's come come over here and I'm gonna drag okay it looks draggable go over and drop a drag drop B yeah I can't drop C okay let's look at the second I drag a okay I can't drop it that's good I can drop B and can drop C well that's that's great we've achieved it I will achieve a Ensemble actions a group of actions you can be one actions or multiple actions but they are and they can apply to on a list of elements a group of elements and these elements apply with these actions works together in a in an ensemble manner so I come up with a few other um examples it may be some contrived but let's take a look at them so let's take a look at the example two so example two is what I call a Mac update action so um this action again it returns of action this function returns an action and this action I can apply to multiple elements and they worked together so what this does is that this function over here uh I call before updates within this function right I can call this because I call this function immediately within the component initialization so it still knows that I'm initializing this component so it register a callback function for this component what I purposely call it inside this function so that it has a scoped it receives the same scope as the action that I'm going to create later on so I'm create this action so this action what it does is that every time when you use this action I'm going to add and the element that is applied to into a set over here and when I destroy it and I'll remove it from a sense so anytime when there's an update I'm going to come over here and iterate through the list of elements that applies this action and add an outline color read to them so every time I change online color read and great thing about this is I can't uh instead of use it over here I can call it I can I can call this function so say uh I'm gonna name it first get Mark updates right and I can call this function immediately in my gets default right so what this means is I can oh hold on I can't ah I can't do it can't do it over here because I have to call before updates well well that's that's a that's that's it but um I can't figure a way to pass this Mark update function around right so if I come over here and say let's see let's let's think of our work around over here I'm gonna pass this Mac updates in do okay and then design something very ugly but just for the moment just for demonstration purpose design function called sets mark the so I'm going to create a pair of get and center and I'm gonna come over here Mac updates so return this and so bear with me this is this is ugly this is not what you're gonna do but this is just for me to demonstrate that I can come over here check mark update and pass this action in so for the sake of demonstrating that this a this thing works this actions that you're gonna see what works in a pair I'm going to come over here and okay I'm gonna come over here an app over here and I'm gonna import that actions and I am going to use it so see whether it works come over here get Mark updates okay Mark Updates this should give me an action and then come over here diffuse action uh okay so probably there's a risk condition where basically this get my updates uh this this registration this this initialization calls after my app thoughts felt after right that's why this is not set yet so probably I can come over here uh action all right I'm gonna say this is even uglier and I would I imagine I didn't prepare this ahead of time but let's see whether this works uh I'm gonna say on Mount so by default is a no function so I'm going to say a function that does nothing but then I'm going to change my action let's see hey there's whoops I don't think it works I think it works this way uh action itself is um not reactive at all um well I can come out again another weird idea they're gonna compose an action right so sorry for this I didn't plan this but let's come up with a new uh an action an actual action over here and my action what I will do is I am going to ah I don't think that works sorry so um let's grab this but I think one is point out this this I can't point it out if it does not work well I can okay I know I want to do when come over here example four I am going to pass that function in script okay export let's action and I'm gonna come over here I have a div full use this action all right I'm going to pass this action in uh okay I don't need all this I don't need all this crap I'm gonna import example for well it's not an example the stricter stance it's just a sub component I'm gonna come over here action it goes to mark update so I'm passing this action in as you can see now it applies the same action and if I come over here and do this update right this will turns the ball outline of this will turn into red as well um there's nothing relates to them they are not the only thing that relates to them is they are applying the same actions so all the elements apply the same actions they have the same behavior or they form together to form one behavior and therefore I'm going to call it Ensemble actions I can call this name again and again so that it will be a real name uh when everyone anyone tries to refer this next time all right so last example example three I'm gonna come over here change it to example three this example three is again contrived but I want to show you something uh again the idea is the same I am going to a uh create I'm gonna apply this action uh stats I'm gonna have again have a function that returns me an action so why oh what so you you I guess you kind of slowly see this pattern where on simple actions you have to have a factory function that creates this action you have to have a function that creates this action because whatever this function is this function is always to be created anew and and only the function so this function itself is unique and if you apply it to a few like so so that when you apply to these elements they work together right it's slightly different where you you already Define a function all the function is the same function going to apply for all the elements yes they can still works together right but this has slightly different sense where you always come up with a new function and this new function so so you can apply this function to a group of elements so you can have multiple groups of elements applied to this same action that has a similar Behavior but then they are grouped together they are only formed in smaller groups because each groups use this one unique actions that was created for them you can create three if you have three groups you create three actions that logically they are the same but because of the scoping that you you do because of the closure sorry not scoping but because of the closure it it stores this growth elements in that closure so the the behavior happens together in that way so over here I have again I create a stat actions and this um I got applied to all the items so one thing interesting is I can actually uh this stats action is not an actual actionation experience object so if you come over here and look at the code I am actually returning an object and one of the property contains that action itself right this is the action and this object can also have more methods where I can use these methods to control my elements that apply this action so I have more x uh I have more methods over here from this action so I can actually apply an action uh this way where I use and then colon and then together action I go to call object dot actions right so you can actually it doesn't have to be just a function you can be a method or yeah in this case actually a method right because you define action on the object itself so it can be in a method so it can be a yeah and so I get past something some information to this action and over here whenever I change I have a different I does something like I do a toggle what it does is that it will call this object dot get all the elements that has a value less than 20 and change the background to Red so if I toggle on and see all of them turn rates and toggle off back to normal you can Shuffle again and this way and just demonstrate that this item data can be dynamic and again uh I so because it has can be dynamic I'm gonna up when I during the update I'm gonna update uh what other elements that is less than 20 or something after the sets things like that right like I could have uh done it within this function as well instead so I can have a set of all the elements and then only filter out filter them out and get less than 20 or I can do it um during the update as well so up to you so I shuffle Shuffle and then toggle we can see it it's updating all right of course this has a glitch in this example if you haven't spotted let me show it to you so I can I can toggle it on and then I can Shuffle so whenever I shuffle uh I am not going to call this reactive statement again because a shuffle does not change this variable nor this variable so it's not run again and therefore uh I couldn't like go in and highlight the elements uh that uh that is less than 20 to be read right so this is not highlighted rate and the rest also not being removed background color because I only take care of the element that is less than 20 right so if I toggle on and off on Tech cast items S7 and 20. well there's a bug on this but yeah I'm just trying to show you how you could do uh with an ensemble action but yeah I didn't really bother to fix this Behavior Uh well if you if you're interested you can come up with something else uh refine it to be better but I yeah so uh Ensemble actions you've seen three examples and so Ensemble actions again is an action that applies to a sample of elements and because they apply to the same actions the works together to create one Behavior So today we're going to talk about slots so what is slots well slot is a way for us to compose components what what is compose components well um in in a HTML Dom elements you can have other elements within your Dom elements right you can have a span element within a div element and you can do the same thing for components as well you can have other components or other elements within your components and well let's take a look at one example and you'll know okay so here I have prepared an example where I have created a component called component right and I'm going to use it over here so if I said earlier uh within a div you can have other things like text and spend right and spend element and inside components you can have same thing as well so I can come over here within components I can paste other things within over here but how would you how how does this elements that you created like you insert it over here gonna be used within a component well over here I have a component where the content of component is like components right so where where do I place in the hello world over here within the component um well you can decide your own you can decide within this component you can decide where this uh if if the user of this component provides something as like socalled like a children within my component then where will the content be go to where will the component be inserted into and you can specify that using a slot so if you guys come over here say slots over here component and Slot then you can see that it's slotted after my the text call component if I put it in front then you can see that hello world component is slotted in front right wherever so depends on where you have a slot then there it is where where it is being slotted into and you can actually have multiple of this right so slot is it's like a place where you can insert the content into and you can have multiple of them if you like to and if you have other other Logics within our components say for example I'm going to create a variable called show which will be which you can toggle it on and off using a checkbox then I with if it is true right if show is true I show a slot if it's not I will hide it okay so um over here if you see if I show I will show the slot if not I'll hide it this way if I turn on you will see the slot if I turn it off you'll be hidden so this so within a component you can control how you want any contents that is being passed within a component inside your components right you can so all this uh what what whatever things is passing over here you can control from within a component so that you know that where it will be slotted into and you use this special element called slot to decide that and just so that you know that uh elements over here is is nothing but like a normal elements that you can expect that you can write within this app.s felt I'm going to create a variable called count equals to zero and I can show this value over here count show the same value over here as well and I can have a button over here to Maybe increments the count and have another button over here to say decremented all right so this is decrement this is to increment so if I show this component if I click increments you can see that this this is just like uh other uh just like a normal Expressions that you can write within this M plus felt got nothing to do with this component this component just says that where you're going to slot my content in right if I hide there's no way to study in that that'll be it if you unhide you should say that okay here you're going to be sliding then yes you're gonna slide it in right but then the data inside the expressions or whatever you have inside is still be treated like you are rating them within this emboss felt you can increment you can decrement them and remember when I talked about um scope Styles scope CSS I say that when you have when you write Styles within a component say for example if I say button where the button font size is say 42px it affects all the buttons within this component file right it affects everything within the file so you have one button over here and one button over here they'll be both affected this is not depends on whether this button is you know kind of like placed inside somewhere within a com this component does not matter the only thing that matters is that this button is written within this file then your style uh your scope style will be effect to all to the button itself so now you have a slot and you have components and you can insert content inside so what if uh what if your slots on the other hand does not have any content which is so over here you write slot to say that okay if if you have anything within a component you could just slot it in right what if you create another component like this and you close it immediately so that there's nothing inside then what happens then right so this is the first one you see you slot the content in this is the second one you slot nothing in right of course you've slot nothing in there there's nothing but what if there's nothing and you want to show like a fallback well there what you couldn't do is you're gonna have you can write slots and you can put some content inside so whatever you pass in over here inside the content it's like a fallback the fallback content if you have nothing right if you have something then you see something but if it's nothing then you'll show the fallback content so this is one way you can fall back content so that it does not really depends on whether so it depends on whether like whether the parents passing something into your component if there's something that you Slaughter in if there's nothing then you just show the fallback so one last thing before I end this video is um what if you have more things that you want to pass into the components uh leave more places to slot into right over here you only have one component called slots and you can only pass you can only pass in a or what all the things that is within this component will be slotted in what what if you have multiple places of socalled placeholders or slots that you want to put things in and you want to decide where and things like that what should you do well you can have name slots so let me come remove this and let's create a few slots uh first thing is I'm gonna remove okay I'm gonna remove everything first I'm gonna come here and say this is the header and this is the footer right so for example you have this maybe like a layout component where you create a tether and a footer right and you can allow people to pass in different content for header and different content for footer then you can have different slots all right so if you pass in a steam slot over here then you're getting the same elements into both of the slots but what if you want different things and you can have name slots you can have name for the slots over here you're gonna name it um call it footer then this is a folder name slots so if you want to pass something to footer then you can have to come over here maybe you create an element for food element for footer and what you do is you're gonna call you're gonna pass in the attribute name footer and the value will be the name for that slot right so this is the slot attribute to determine which element should this um slots to be inserted into so this specify that I'm gonna go into the footer slot this attribute tells you gonna put the slot and over here you have a name slot you have a name for this slide called footer and there you there is where you insert the the elements that has a slot attribute called footer in right so uh by default uh a slot without a name is actually named default right so you can't have a slot named default right this is reserved for the default slots so yeah one thing you have to take note about so you can have name slots and come over here I'm gonna say this is going to be a hitter slot and now I am going to add this button into the header slots right but I also want to add the the count into a header slot so now what we can do instead is create what I call a slots template and this can this allows me to wrap over multiple elements so I can I can have multiple elements wrapped within the slots templates and all all the elements within here will be part of the slot header because of the attribute called slots header and they will be inserted into the slot named header right so you can see slot header has has zero and minus right a button and you can have element for footer over here right so you have name slots so let's recap what we have uh gone through so far we can have child elements for your component right and the the way where these com elements within the component will be inserted will be depends on the slot Right Slots is where you slots the content in you can have fallback content for the slots if you have if you pass in like a children within a slots element and if you want to have multiple slots you can but if you want to differentiate from different slots that like this is the Halo content for the slot this is a header slots for header content and this is a footer slot for Fuller content then you can have a name slot you can provide a name for your slot and then since you provide name for slots so determine which where does the element goes to Which slot that will insert into you can pass in a slot attribute to name like Which slot you go into so if you slot in on one only one element then you can pass it as attribute but if you want to group multiple elements into the same slots then you can use a slots template and same thing slot attribute to determine which slots name slots you're going to slot into and we also talk about Styles where if you have uh again just a recap of scope styling or if it affect button then it will affect all the buttons within this component file it will irrelevant whether this is being inserted in like a child component right so any button that's written in this file will be affected so in the last video we talked about slots we talk about slots it's a way that you can insert elements inside the component into a slot right within a component you can provide elements as like a children to component and they can be inserted into the slots in this video we're going to talk about how we can pass data into that element or pass data from the elements to the outside world right so here in this example that I've prepared for you I have a app.felt which is the parent component which uses the component the child component and I pass a an element right I pass in a fragments of elements which is the app count data and do these slots so inside components you will have this element called slots that determines where this app count is going to be passed in if I don't have this then you will see that uh although you pass in the app counts but there's no nowhere that you're gonna specify because you're gonna insert it into right slot is where you specify you can insert oops where you're gonna insert that into now inside this the elements that you have that we have we use data like app count which comes from the apps file right from this file you have this variable called app account where you can increment or decrement you see that this data updates uh accordingly this is what we have shown in the last video as well but how about the data within this container components I have accounts minus and count plus plus uh sorry I have accounts and I can increment a decrement but how do I pass this data into this element inside over here well you can do that using a slot props which is props for this slot element so for example I can pass in counts like this pass in accounts as a props to this slot then I can read it out into this uh slots templates so what I do is I can come over here and say let's count so let is the way it's a directive and it says that if I have a props for the slot then it will be available over here uh within this uh fragment over here so uh I'm gonna say this is the variable uh count so it has to match up and now I can use this variable count over here so component I'm going to say component count is this count right so if I increment like this you can see it changes if I increment like this you'll see that it changes for the component's count uh that let me right uh so so that you can see that there are side by sides one is I'm count one is component count so um so this is how you can get so within your templates within this swell fragment you can have data coming from two places right one is within this app component file and another is from the the components right the child components the other one is from here the component counts now um so this is I wouldn't say like past data in or out right uh because it's it's probably it's a bit confusing for you over here to think about that like passing in or passing out but you can take a look at you can think of it this way so all the data that's from uh there you if in the perspective of this felt fragment think about where the data can come from and where the data can go to right it can come from this app. so This resides in this app component and also within the component component right so you can have the data from here and you can have the data from component from component from here and this comes by getting it from a slot props and you assign that count over here you can reassign this variable to something else or if for example you have like count over here instead then you run into the issue where if you want to use count you realize that uh they are both they are both coming from this slot props right so you can actually rename the variable if you want to you can rename it from here I see I don't want to use count I want something else I'm gonna say uh a count then I can let a call in States and get the value over here but what if you have no choice uh this is the problem the name of the problem is called count you have no choice to use let counts then you kind of actually rename it you can rename to something else so actually you can come up here and it goes to a new name you can bind it to a new name and bind it to count from component and I can use it over here like this right now you can see that I'm getting the count from this app component and come from components from the component component right so we see that how we can get data from here inside to uh from app and component now let's take a look at how we can get something out of it out from here from this field fragments to inside this app dot spell or component as felt right so first thing is if you have say a button I'm gonna copy this button and paste it over here but if this button um whatever I do over here actually will affect outside whoa or I can also Define a function say ink uh increment which is count plus plus and can also call this function over here to notify that this uh let's let me add this okay I can also so this button is is within this felt fragment right I can have any function declared within apps felt and I can call it right I can call this function so it's like passing data outwards right I can also do things like increment and say increments by five and then again come up here and say Delta plus equals Delta so I can also do it this way by passing different kind of data out to the app.f files and how about passing data into the components Fields well it would be like passing a callback function right I can come over here copy this function I can have my own increment function over here and I can pass it in as a slot props now I can come over here to get to receive the slot props from within my template I can come and see let's increment and because this is using the same variables name as the function over here and I don't want to override it then I can rename it again I can rename it but I say int from component I can rename anything I want right and I can come over here and use it so I have two buttons uh one is to increment in the apps felt one is to increment from the components right so if I call this you can see this is incrementing if I call this this is incrementing so you can pass different data from this templates out to the app and the components felt and we have seen how we can pass data from app.strual and common spell into these templates so things over here is is you can have a combination of both walls you can also maybe swap this out where I'm going to call this the increment by the counts from components and increment for component with the count right then uh if this is three then I can increment by three and if this is 12 now I can increment by 12. right this you can mix and you can take data from both sides and then do your own combinations and and also sending data out to both of the components so in the last videos we talked about slots and how we can communicate data through slots and in the previous videos I might have misspoke about the slot template there's no such thing as slot template it's spelled fragment uh so sorry for misspoken and mistyped it I must have been sleeping while recording this video uh that video right so uh today we're going to talk about slot forwarding it's a good way for us to um revise and ensure that we really understand how slots works so let's take a look at what is slot forwarding and have a check where how good we know about slots so first thing is over here I have prepared a rebel where I have three components I have a I have B and I have C right so a in Parts B Be import c c and the app will import a so we just just leave the app component alone and we're just gonna take a look at the a component or rather let's take a look at the C component first so the C component is the most interesting one we have three slots the header um we have three slots element three of them are named slots so they have names for it right they are not default slots they have names right we have header content and we have footer okay so how do you pass elements uh into this header slot well if you are in the B component and you want to do that you would first create a component called C and within C you can have elements as long as your elements has the slot attribute called header then elements and all these children will be inserted into the header slots so for example if I come over here I have say a div the slot name header so you have to make sure that this slot attributes value is the same as the name then all its content will be all its contents will be inserted into the header in C right so here I'm going to say C header and this is C footer all right so C header C footer so you see that this is being inserted into it right if you have a few elements right uh that is so one element can have only one element cannabis attribute called slots with the same uh so you can have multiple elements within this components but the slots attribute value has to be unique right you can't basically do this where you have multiple elements with a name called slots uh no elements with attribute a slot attribute value that has a is the same right you can't have two slots header so if you want to have two siblings elements to be passed into the same slots element then what you need is is felt fragment right this is a way for you to group your elements you group your elements so over here you're going to copy this slot attribute and yeah we don't need this copy our slot attributes and wrap these two elements these two siblings element together and now we insert both the div into the C header right okay so so far so good we've learned this before right this is just a revision so now let's make things slightly harder so for say for example now I want to pass content from a to B uh what do I do well B will have to have a slot say for example I come over here and Define the slots I'm going to this name a b header okay I have a slot okay I just can close it directly I don't need any fallback so I have a b header over here and to pass contents from A to B header what I need is I need to come over here in a create this component called B and I have elements inside so here I'm going to create div again uh header from a and I need to have a slot attribute to tell because this is a name slot so this is not a default slot this is a name and then I need to create and a I want to pass something into that named slots I need to have a slot attribute with the same value with this name of the slots so let's say a slot attribute value is equal to the same thing right so now you see that b here has the either from a header from a over here and then yeah this is the same thing as how we pass from B to C right okay so let's move on one more step what if I want contents from a I want uh I want to have this slot uh whatever the content is passing to be hater slots to be passed into cease uh header slots right so what do I do okay so first thing I could come over here uh instead of having this div remove all this and tick and copy this and put the slots in over here okay so now what you can see is I uh I still use the same slots elements but this slots element is being placed inside a instead of being put somewhere else you can put in here as well right it's how the the slots element can place anywhere now what I want is I'm going to place it inside a c component and into this slot called header slot attribute called header so that it is all the contents from a will be inserted into the slot named header in C component right so now you can see that I can do this and it's kind of a forward like the content from a into B uh to be insert into B but then the content you insert into B is going to take and insert into the C component right so this is like like forwarding the slots and if you guys do this you can simplify it by come over here uh if if this is all you have because slot frame as well fragment is usually used when you want to group multiple elements to insert into one's slot right but in our case we only want to I have only one element which is this slots element so a further way to simplify this we can copy this slot attribute and pass it inside this slot elements and we can remove this uh cell fragment right and you can see that it's still working right it's still working you taking contents from a in the a file uh you take it in and pass it into the B component over here right so the slots attribute says b header so we're going to pass insert into a slot element in B component named B header and then I want to pass this B uh this elements this whole element coming from a I want to slot it inside a slot in C component name header so I come over here and add slot attribute called header and there it is it's being slot slotted into C component right to make metal worse or confusing sometimes you want you might write something like this where the name and the slots is the same so here it's like this but you need to know that uh you you after X my explanation hopefully you are clearer now where basically slots and the name creates a slot a name slots element which says that whatever comes from a uh whoever create a b component then you can create something with a slot attribute called header that will insert into there right and at the same time if you have a slot attribute then it means that I want to insert into this components right wherever it has a slot name header inside C component okay so now let's take a look uh hopefully this you understand this and let's take a look revise again what we've learned in the previous video where we say about communication right data how do we pass data right so say for example if I come over here I have a script tag and I have a counter equals zero and as always I like counter because it's easy to create and demonstrate a button so oops okay uh and I have a buttons to counter I have a button to increment this counter value okay I want to pass this counter into the slots counter so when I pass it in you will see that in over here I can assess this value right by via the let the let's right so I can have a let counter right and but okay I have a let's counter but then again I have a lead counter but I you know this is usually used in Elder elements right if I if I come over here and if I put div uh I I would have this I could now use this counter over here and you know do something about it right I can I can show this counter directly this this is the element right as you can see it's incrementing but instead of having a div or something else I have a slot element right so that element is for people to insert something inside right so now probably I would want to also pass this counter value to whoever is slotting into my slots so I can come over here and say counter I'm do this so I'm going to pass this counter value go over and insert and provide to whoever is slotting into the header so this is the slot header over here and I can take this same thing let counter and then come over here and use this value now you see that when I increment this data as being updated right over here so this data comes from uh how I pass this data is when I create a slot element slots elements I can have props so all the any props you have the data will be passed into whatever elements that is going to insert into that slot element so whatever elements are elements with slots attribute with the same name so in here C component we have slots attribute called header so this will receive that counter right the receives it you use a let's counter and now because we also this element just coincidentally is a slot element or else we were just gonna use this counter but this is a stock element which means uh it's not showing anything but someone to insert content in right so we also want to pass this data into uh whoever is inserting into this slots element so we're gonna create this props so that we can pass that data down and of course of course you say that this slots element could have fall back right so this is a fallback so this is uh this content will be rendered if you don't pass in a element with a slots named header right so for example if I say this is header Z Now you see a fallback and this fallback has this content right where basically it's this one right you you take that counter and you're gonna show the content over here but if you pass something that has the same slot attribute now you want to pass the counter to that though these elements right if you want to right you don't have to you can pass as a counter you can maybe rename it as say full equals counter now what you can do is maybe let full and then take the value of 4 over here and show full right so this is this is the full value over here you can see over here right so of course so it's up to you whether you want to pass it down or maybe something else or do something with it maybe full counter times two uh so what you get over here the full value that you receives is always two times of the counter that's that's really up to you right I'm just gonna show how you can pass data all the way back in and as as we learn we can also pass data upwards or uh over here we we have this data go through a b and c right so everyone can be participated into this the data to be passed in so now I'm gonna have a b value create a button on click me okay I have a button called B button that I will I'm going to pass a props call sum now uh I'm gonna counter uh plus b okay and so so this one I'm gonna be uh nicely puts this is C this is B and now I also in a I also gonna have something called uh let's a equals to zero I'm gonna copy this code over a plus plus a a now uh this will be sum so we're gonna take let's sum and sum plus a uh so this is a sum from a this is but then the sum plus a so what is some sum is actually coming from here which is let me make it a new line so it's easy to read sum is equal to counter plus b so B comes from the B component and what is counter counter comes from here right from the left so which means this come from C so what is counter over here this counter is this variable from C right so we increment any of them you see that it is adding all the variables all the counters from a b and c right so this is amazing if you uh this this unlocks a lot of possibilities that you can do um possibilities are endless imagination is endless it's up to you right hopefully I explain this slot folding concept um to you clearly and I think that this slot for the idea of slots falling like forwarding a slots really and forces you to think about how slots really work what is the relationship between a slots element and the slots attributes and how do you pass data across them right hopefully after this video you don't have any doubts anymore but if you still do comments down below ask me any questions if you have if you still have right I'm I'm very more than welcome to answer all them today we're going to talk about a magic variable called dollar dollar slots so what is this magic variables about well we're going to take a look in an example and we're going to learn about from that so over here I have is uh app a DOT spelled components which it has three name slots name a b and c each of them has it's wrapped by a div and it also contains a fallback for the content right so if you don't provide this name a slots you don't provide a element when you're using this a component with a slot attribute called a then you will see the fallback instead so uh and the same thing goes for B and C so over here if you come over here and see a has three uh a has nothing you don't pass anything so you see fallback A and B and C and for this one you have ABC you pass something you so each of them has something for it right and and then if you come over here and say you do this then you get a b and fall back for C so this is useful when you so this is very useful when you have fallbacks right so if you don't pass something you you see the fallback but sometimes um sometimes you have text like this like the B and you you don't want to fall back for B sometimes you don't want to fall back right so for B case you don't want the fallback so if you don't have anything you don't want to show you you don't want to show anything right this one you don't have fallback don't show anything but at the same time you also don't want to show the text called B you don't want to even show any of this div but you know this is outside of the slot elements how do you know whether sums whether the slot element itself has something or how do you know whether a component Pro whe whether or not it provides elements with a slot attribute called B well as the name suggests as the name of the video suggests we'll use a magic variable called dollar dollar slots to tell us so this dollar dollar slots is a variable uh which is an object and this object contains key for each of the slots um for each of the slots attributes that is being passed into this component so for example in this case I probably will see um an object with a b and c right so this object the value of the object for now is Trudy um and if you take a look it's actually true right but um I can't say for sure what is going about so you're looking at you don't have to you shouldn't care about what is the value for now um so at the point of this recording version 3.37 right you just need to care about the key whether the key is exists and where the key value is Trudy right as long as truly then you can assume that the slot is there so over here what we have now uh is we can use this dollar dollar slots right so if B is truly which means um I can use this in the if I can use this in the if logic block to determine whether this is truly or not if it's truly then I'm going to show this whole thing right now if someone does not pass in anything for B it will not see this div and B colon right so if you see here I have fall back for a I fall back for C but you don't see B at all you will only see B if something for B is being passed in only when you have an attribute a slot attribute named B so over here if I remove this then you'll see that b is gone right you don't have B at all um so there and in those case in those scenarios then it's uh it's probably pointless to have any fallback for here right because for this slot name B because you probably would not need uh probably it will be hidden because of this if thing so this slots double slots it's a variable again it's a variable it's an object and it contains key for the name of the slots attribute being passed in and if you're gonna check whether if there's a pass in then you probably will check whether you have a whether this is truly or not uh if you check for C then you probably will check slots see whether it's 2D or not so for default slots then it will be default all right so default slots are the one that slots element without name at all right so we don't name that it would be a default slots so uh by uh at the point of this recording version 3.37 uh you don't have a way to conditionally say hide or show a certain slots add an element with a slot attribute you can't really say I want to hide this or show this which means that it's probably uh the slot the order slot itself is it's not reactive at all right so it will only look for elements whether it would have a slot attribute right so if say for example if you do something like this uh okay so if you do something like this yes it seems like it's empty but it is not you still have an element with a slot attribute called B so it's not hiding for this right even if you see if you come over here and slap spell fragment again uh this is this is not empty right as in you you sorry you still have elements with a slot attribute called B it it's not it does not care whether it's empty or not it just care whether you have element called slot attribute called B at this point of recording right I'm not sure this is the best way of doing it the best feature we have but at this point what we have from svelt is that we'll check for elements with the slots attributes I will not care about the contents so even if you have no content uh you you still this this thing is still hold on slots B yeah if you have no content okay because for this yes you don't have a content right because it's empty at all right yeah so so I also sorry but if you um but if you have something like this if some condition then oops then again this is some sort of like content right this is content so I correct myself um you will check for the slots and then it will look at the socalled content but the content itself um uh does not have to be like actual having a Content it's really like uh whether anything is written inside this uh spelled fragment or elements that you have right even if you have a if logic block inside you because of the condition you're rendering nothing is still considered as having some sort of content uh for your slots attribute B and therefore you you this is still a Trudy so it will only be falsy if you have if it's totally empty right totally empty um so I think even if you have a space okay space is too empty okay ignore me right so yeah every day within us new things right we're trying to test boundaries and and I would say this is not like the personally I feel that that there's room to improve as well probably in the future versions future versions but at this point and the point of recording version 3.37 um does double dollar slot stop B only checks whether you write anything inside these slots all right so hopefully you you learned something today the slots where you can use it to determine whether um a slot attribute is being passed in if it's not sent you can use this to say to to wrap it around with elements so that you know it's not just about the slots if it's nothing is passing this is empty right but then also the surrounding elements if you want to hide surrounding elements if the slot is not being passed in you can use these total slots with an if logic block so we have learned a lot and we have come a long way we've learned how to use a store how to create a store we have learned how to create an action how to use an action and we've learned how to compose or create components how to share data across components how to create slots where you can insert some contents from your component into somewhere that you want to insert into the inner components right and we learn about how to transfer data across we've also learned about how you can dispatch an events from components or dispatch events from elements we've learned a lot and today we're gonna try to use all of them all of the things I have mentioned so far into one example which is how are we going to create an infinite list so what is an infinite list you probably have seen this kind of UI where you scroll and scroll and as you scroll it loads more data and then if you scroll a lot small data and it skips scrolling in finely and we are addicted with this especially in social medias with you keep scrolling and keep seeing new contents where you just can't stop scrolling and scrolling and scrolling I'm going to create this um component called in finite list whereby you can pass in different kind of data to this component and you can decide how to um how to render or how how how does each item within the infinite list looks like so this will involve in how we compose our components so first thing first uh let's take a look at this Ripple that I have kind of prepared actually nothing much over here except that I've created a few files the app the list component which we are going to do the data.js so this is where we're going to fetch the data and an action use viewport action you probably have seen this you probably have done this before in the previous video where I showed how I create this viewport action so links in the description if you haven't seen that before so over here app thoughts felt let's let's imagine how we're gonna use this infinite list so most likely most likely or this is how I imagine right I'm gonna share how I come up with this and uh if you if you if you disagree or something let's comment down below and let's comment uh discuss about it so this is how I would imagine my list component uh will be will be used right usually when you come up with a component you probably instead of like hit you that there's two ways right first is you want to experiment you want to play with it then yeah go ahead uh go hits down to the component and try to experiment with something but sometimes on the other hand when you want to design a component you want to think in terms of how you want to use it how you want to allow people to use it and then figure out how to provide that behavior so over here I want I am imagining that I have a list component okay I have a list component where I can pass in data right I can pass in data like this right so this will be an array of the elements okay so this is empty array for now and I would imagine that I would have also um ways to get so this list will render in finite list right so for each of the elements I probably would want to uh Define how how each of the elements will show right so uh for each of the elements probably I have a variable called a item over here item item is like one of the item of the list of arrays so I don't have to do like a four inch Loop within like in in this app right so the list will do that looping of creating each of the items whenever they need uh all I need over here is I let item and I probably will able to say maybe show a some contents for each of the item right something like this right this is what I would imagine my component will look like I I pass in a list of data and then for each of the item I have I can bind it and then I probably will show like how how each of the item will show and then probably I also would have maybe an event called load more so this will prompt me to load more data right fetch more data so that uh so most likely this will be called when I scroll to the end of the list so this is roughly how I would imagine my list would look like of course there might be more things say for example loading you know you never know that whether you are loading or not or yeah you never know whether you are loading or not right so um I I could pass in as a props or probably maybe like a lot more is a maybe it's like a async function so um then maybe I don't need loading right so every time when I call load more I will just wait for it and when it's done I would when it's when it's pending then I will show a loading icon indicator and when it's done and I I don't need right so then in that case I don't even need to pass in the props called loading um and probably one more thing that is uh maybe like no more data right this is uh helpful when you scroll to the end of this and you realize actually there's no more data to fetch right maybe this this can be a props or maybe we can somehow indicate from the load more I don't know but this is this is one way right so the way I design it this way which means that uh in this app does felt I I will have to Define how what is the data and how do I load the data right um of course there's a lot of different ways of Designing this list this infinite list component it could be that your load more will always return the next items right then probably you would not need this data props because every time when you call load more you will try to the list itself will handle like a pending will maintain a list and pass it right um there's another that that could be another way of doing it but for now I'm probably will keep it simple where list itself will handle that right so probably you'll come here you'll call a fetch more will we will update this data and we'll pass the data down to the list component right um of course you can trick around if you want to feel free to grab the rebel Link in the description and play around and try out different ideas you have so uh first thing is so this is what we're gonna go and first thing is let's come up with an API or what is the data they're going to show right I I found this lorem pixum which gives us a lot of mock photos and there's um there is this link list API where I can call where it has a page ID and a limit so that I can keep calling for get the next page so I probably will gonna use this and use this to show images right so probably my item would have a say download URL which is the image URL so if I click this this is the image URL you can probably would have a download uh download URL over here so here I I let item right I can I could have used item but I can also assign it to a different variable right I think we've learned that where we can say another variable and use like another variable here we can rename the the variable name right and actually you can also you could also if you don't know you could also destructure it and use this download URL instead so here in my list probably I would have image source as the download URL and probably also have like maybe the author where I could use this author as the alt all right I'm gonna say uh taken bye stunning view taken by author right this is this is just to show that I I could destructure and you know have a take out different properties of the LED okay now let's let's since we have this API now let's try to implement the data right okay so first thing is I probably will use a writable data so that whenever I change it changes you your component get notified and then you you would render right so here I will say import writable from svelt Star of course you could use a normal data and then in the app itself you can update that variable right so if I put it in an external file then most likely the best way to update and get notified is through a writable here I'm going to Define some variable say maybe loading false I have no more no more data false and then I have my uh page so this will increments every time when I Fetch and then maybe I have my data over here as an empty array so the first thing I'm going to Define is the list which is the writable all right so this I'm gonna have the data itself and the no more data all right I think I probably would want to yeah this the same name so it's easier for me to do to to assign uh to use it later on okay so so this is the list writable um I I could have just exported this list writable but I also um I I want to also add more methods to this list uh to the store that I'm going to export and also remove some of the methods right I so here is the final star that I would have is I'm gonna have a subscribe method all right subscribe it's a must for to be considered as a store according to the store contract but I don't want to expose the sets and updates method right so I don't want the user of this data this uh image lists data to to update it to modify it I don't want to expose the sets and update I just want to expose subscribe but I also want to add one more methods which is called Fetch more this will allow us um the user of this store to call this and fetch more data right so in later on I will probably come over here and you know look more I will say uh the store dot fetch more I I would call this to fetch more data uh uh yep so before that let's come over here and say okay so now when I called this um I maybe just make some some checks first for example if there's it is loading or is there's no more data then probably will just end immediately so so nothing happens right but then I would say loading to be true and next I would come over here and actually refresh the data right so called Fetch copy this API let me use uh so the page will be page okay I'm gonna say plus plus the limit I'm gonna say just limit to 10 10 items every fetch so here I'm gonna get a response from waiting this fetch API and I would also need to wait for the response to um after I get a response I'm gonna get the Json format of I'm going to Json data of the response body so we're gonna say uh data uh okay I don't want to use the same variable over here we're going to say new data equals to a weight response Json and then um okay so now I'm gonna update this loading it's going to be false now and then a no more data will be depends on how many data that I have so this returns me an array right so if I go to the extreme end say 100 then I get empty array so which means that if the new data.lank equals to zero then it's no more data and now I my data needs to be updated I'm going to push all the new data in and finally I'm going to update my store right so I'm going to say list dot sets uh here and get the data and no more data so I'm going to update my list okay so there we have it and now we're gonna import from data so this is going to call data from data so this is not started this is the data.fresh more um so I'm going to create an async function that calls and return fetch more right this is this can be simplified to just pass it like this right data.fresh more and over here because my my store value has data and no more data I could actually just spread it right I can just spread the data right because the the value of the star is an object with data and no more data I can I can spread this instead of having to come over here and you know data.data and data no more data right I can I can spread it instead okay that is done and we have that done which is nice and now let's take a look at the list components okay so in the list component I need first to create some of the props that we're passing in so the first thing is the data and next is the no more data right and then yeah that's it and because over here we have an event from this component so probably we also want to import create event dispatcher all right so you will create a dispatch method to dispatch this to dispatch a no uh do dispatch dispatch a lot more event later on right now I'm gonna create a list so firstly I'm gonna have unordered lists whoops and we're going to use each to Loop through the data so each data as item and look through each of the data um over here I could use a key each block if I want to um or okay let me think now we can use key each block all right so that if if we somehow reorder them then then it's it's useful but let's let's leave it like this first but if you want to use a pH block you would have to decide what as the key the prop or the attribute to treat as the quiche block and if we're gonna do that but we we have no idea in this this component to know what is the um what are the attribute of this item to be treated as the key for the for each of the item right then probably you would have to say exports that key you would have to have it as a props and ask maybe the user of it to Define like okay so the key should be ID right because you know we can see over here uh for each of the item ID is kind of unique so I can come over here and see Item ID is the key sorry item key is the key and key in in this case is a string ID so in my uh in my each block I'll what I need to do now is actually to create each of the list item and have a slot so slot is where you pass in a this uh where where we we have a default slot so whatever is being written over here this is being inserted into the slots right so as we Loop through we create one list item and every list item will have its slots and for the slots for each of the different slots that we have that we iterate through we can actually pass a different item data right we can pass a different item so over here maybe the first item so the item will be the first item the second the second first image second image third image and so for each of the slots elements that you create maybe you create because of the each block you have three slots elements and each of them has a different item right so each of them will actually insert a different image from here because this image takes in the props of the item and takes a download URL as a source right each of the download URL is different so you have a different image um okay so although I'm not quite sure why is it not okay so next the next thing is we have a fresh data that's why we are seeing nothing over here so to fetch the data we're gonna create another list item and this list item uh I would be uh let's see I'm gonna come over here uh okay use viewports we're gonna import the viewports use view Port action I'm going to use viewport for this list element okay so if say if no more data if if no more data then probably would we would not need to use this again right this list item this last list item will have the viewport so that we know that when it's entering the screen so uh you call enter viewport event on enter viewport so when it enters what we want to do is actually to call uh fetch more data right so uh over here instead of calling a method we are dispatching a new event called load more so here I'm gonna say a hold on load more yeah I I could have um was that I I could have a used event uh forwarding by for the enter viewport instead so if I don't do anything then this will actually create whenever this event is happen this event happens it will dispatch a new event from this component called uh this enter viewport right that's where you see this is being called and fetch more data but I I for the sake of pattern naming because it does not make sense of list to have a and the viewports events so I'm going to come here and dispatch action myself I'm going to say here and dispatch uh enter viewport sorry not enter viewport but load more right um okay so the image is a bit too big so I'm gonna come over here and maybe have a style with equals a hundred percent right so I have a smaller image right now as you can see as you can see my scrolling if I scroll to the end it will this enters and it will load more right uh the image just now is it's like it's trying to load the image right and as I scroll down you see that it will loads more image more image is being loaded so every time when I scroll uh when I this list item enters the viewport you will see that the viewport uh enter viewport event will be dispatchers and here I handle it by Dispatch a new event component event called load more and over here I listen to that and fetch more data um I I initially I was planning like maybe to use this um to give us like the loading but then because events when you dispatch events it's kind of like a couple you don't really get whatever is returned from this event handler so probably I would want to pass in loading into uh exports that's loading uh in in here so that you know uh when when it's loading if loading Flash show a text call loading but we haven't passed this loading in right we haven't passed loading so I can come over here and maybe have this loading as part of the writable as well so loading over here so that means when I said loading to true I also need to update the store by set loading to true right I could use sets I could also because of writable I could also come over here and say update so I have my original uh see data and then return Yes okay no it takes in a function and returns right the current list and I can create a new list by setting loading only which answers okay I need to return new current list or I can do this as well now I have my loading I'm not sure this is easier to read uh probably I'm going to change it back to just to this this is this is much simpler to my eyes right uh in terms of like the effect is is roughly the same it's simple to my eyes with this right so now you can see when I scroll down you will see loading and then you load more data and then you you kind of show more data right so what you've seen over here is probably we didn't really mention it but it's possible where you can have multiple slots elements in a component and you can have multiple slot this slot is the same slim slot name right this is a default slot right if you can have you can have a different name maybe like item and you can come over here and have like this image as a slot attribute called item then they are the same this is still inserted into this slot right so you can have multiple slots elements in a component and you can create them using if each or all any logic blocks they can think of you can have a lot of those kind of slots and for each of the slots you can actually pass in different data right I can I'm passing a different item as props now you get different item over here for each of these slots and so that you can show different Data Insights you can create a different image for each of the item right we can create different image over here so here you go here is how we create an infinite list using all the techniques or knowledge that we have learned so far we'll learn about how we can create a writable star custom writable style basically you have at different meta Studio writable store we learn about actions although we didn't write an action today but we we use it right inside this list components and in a component wise we learned about how to create components how to create slots elements and how to have slot attributes to inserts into them right how we can pass data in so we are passing item from the list components to this main component we'll learn about events so lists we we are listening events from an item we are also dispatching a new event called loot more so you can fetch more data over here we will learn about spreading yeah we've done spreading over here as well so here you go how you can combine all the knowledge you've learned into an infinite list So today we're going to attempt to build another component which is tabs you often see this or even you see this every time when you try to use the spelled Ripple which is the tab right you can come over here and switch a create tab right and you can switch between tabs and the content will change because yeah because you switch the tabs right so let's come up with this tab component and let's try to design this tabs component together right oftentimes when you want to try things yes you can go hit down and try it out but sometimes when you want to design a components you will try to imagine how you want the user to use your components so for here let's try to put on our thinking hat to try to go into imagination try imagine how you would want to use this awesome superb type components that you write right so how this is how I would imagine how I would want to use I'll probably want to have a tabs component at the outsides right I have a tabs and inside I can Define as many tabs I want right so I have tab I can have multiple tabs I want and sometimes based on certain condition I want to show or or remove or hide right based on certain conditions so see if here I'm going to say is logged in okay just just a random condition I'm going to say if based on this condition I'm going to show us hide certain tabs right so for example maybe this is a tab that can at least be seen by a login user right and maybe sometimes I want more than that right I want uh maybe height two tabs at the same time I'm just trying to imagine how I want the user to use this okay uh these are annoying so let's let me just come over here create a script tag just let Define tabs like tab let's log in so they stop bugged me okay let's come back and try imagine again okay continue imagine I have a tabs component inside I can shove as many tab I want and I can have certain conditions to show hide the tabs right so another way of doing this show or hide a certain tab so this is when your height is like it's gone right you don't see it over the tab it's not like whether you are choosing that tab at the current moment right it's just gone so sometimes uh some a different alternative alternate way of Designing this would be maybe uh maybe come to use a props right show uh like shoot show right is look it may be like alternate way of Design This will be uh uh this way right you use a props to decide whether the tabs itself should be shown or not but I find that maybe what I want okay let's let's try to get our imagination well right I want to design it in such a way that I just use the if logic block 2 decides when to show or hide a certain tab I want it this way right okay so I here I have it uh so here is what I want and then next thing is what about tab content right type content should be as easy as go into the tab components and write things right I wanna hey hey for this one and log in content one and I have a login content too and here are like who ha okay so I have three tabs four tabs two of the tabs may be showing uh maybe there or may not be there because depends on the condition call is logged in um so here when you I write this you probably think of like oh I'm gonna use slots Right Slots is the perfect way of having contents inside the components to be inserted somewhere right yeah that's that's right probably will use slots slot element for this and tabs usually comes with a title right so title probably I can come over here and write the title of my tab so I'm gonna have my tab is this is a lack of good names I'm going to call this type one uh this is gonna be a log in tab 2. secret tab three okay I will probably just call it secret as well secret tab two and so type three and this is the final final tab okay maybe final tab will be I want to just show that this can be dynamic I'm gonna come out Divine a name called username and the final tab is actually based on the username right so huhahi this is the user con user uh this is the info for the user name okay so this is the content itself can be dynamic as well this is how I like it and let's try to figure out how to implement this right we just it's come up with like all the things that we want and then we reverse engineer about how we can implement this okay so we need two components right the tabs and tab so I'm going to create the tab component um so for the tab it's quite obvious right you need a props called title and whatever inside is just that types content so I'm going to come over here I'm going to create script export let's title and I have my slots for all the content inside tab right so for the tabs itself yes again I need to use slots to basically insert all of this into somewhere right if you if you don't have a if you don't have a slot for this then you you know shorten all this content will be nowhere to insert and it will not be available at all right so I'm going to come over here and add the slots for this tab so here I now instead of let's tabs I'm going to import Steps From the tabs those Felts same thing goes with tab Imports tab from tap dot spelled okay so now so now I have all the tabs showing on the screen okay username I should say username is me right Liao okay uh oh we've said we wanted it to be dynamic right so we're going to create a input mind value called username so that I can come over here and come over here and change my name okay so we have all the tabs shown at once which is not really what we want we want to uh we want to we want to only show the one that is being selected at the moment right so probably here we can have um I would say like a key for the tab right so usually you you would have like certain things like a key or ID for the tab and in the tabs component you want to see what are the default selected tab right the selected uh uh I selected tab will be the ID would be say something right so I'm going to call ID would be this is this number right so I'm going to see here will be one so I'm going to create id1 id2 ID3 and id4 for this so usually you will have a default selected Tab and you could be changed by someone else right so uh you can up this is optional so here my tabs I'll probably will have defined these props all right script uh export let's selected tab and default maybe I'm just gonna say one for now I have no idea what's going to be okay and then tab I also needs to come over and say Define the ID as well okay so now tabs and tab has to talk to each other right I need to tell my tab when you should show your content right now my all my tabs is showing all their content let me let me wrap this whole thing with a div so that it looks nicer right I'm gonna wrap all this with a div so that they are on different lines so I have two tabs content right now because it's login is false right so once I set this to true then you see that you have four contents so I want to have a way for the tabs component to tell the tab that hey uh you should be hidden or hey you should be showing right now and usually that is being done by if you if you have the tab component within the tabs component then what you usually do is you probably pass the props tell that right but in this case we don't really part don't really import tab component in the tabs uh but we actually pass a tab inside tabs so tab is actually a a children it's actually a children of tabs but we just don't have a way to communicate right so there's a few ways to do this first is you could pass it through slots right you can say uh select the tab is this select the tab is this and you can come over here and use let's binding right let's select the tab and for each of the tab you kind of pass in selector Tab and decide whether you should be showing a you should be showing your slots right based on a certain condition whether your selector tab is equal to ID and it should show or not right so let's So based on this ID this decides whether you should show your tab or not but we're adding one more thing over here which which is I don't like right I already come up with a design where I I don't have to pass all this right I just want to write like this so what's the alternative to pass data besides going through props context are you thinking about context hopefully hope I hope that you are thinking about context because that's what we're gonna use so we're going to come over here with tabs I'm going to import set context from these Felts and I'm going to set a tab context right so we're going to set set context um call selected tab I'm going to pass the selected tab over okay and over here each of them I don't have props anymore to read it I'm gonna say get contacts and let's select it tab equals to get contacts select a tab and now you can see that you only have one tab showing right which is hey hey because right now you're selecting number one if you say number three number two then number three then you will see login content two right you can say number two then you'll see login content once right that's great that is what we exactly what we want now um now we have one more thing that we haven't settled which is the title right there's no way to click the tab right here you can choose between tabs because you can see the title and click it but here you can't right so once again how do you pass data from one component from a grandchild from your tab component to the parent right previously we learned several props where you can do something binding to pass but uh we we've come we've come to the conclusion that we should use the context to pass the selector tab to the child component which is a tab and we can do the same thing as well to use context to pass data from the tab all the way back to tabs right so here I'm going to create another context uh called titles and here I'm going to gonna have a personal object uh with two methods one is called register tab and one is called unregistered tab so this is a way for me to register and unregister tab uh using a so I'm going to call it with a ID with a title and unregister with an ID okay so here I I provide these two methods let's say tab titles well probably doesn't matter okay provide two methods so that uh over here my tabs I can get this and I'm going to register myself and cover here gets contacts uh this is the uh tab titles and I'm gonna register myself so guys call here type titles register uh ID right and when I am unmounted so say for example on Destroy I need to unregister myself because say tab titles dot unregister ID actually I need to pass ID and the title okay so I've registered myself and I remember to unregister myself of course I need to import this from sveld as well okay hold on tap titles is not register oh I should call register Tab and unregister tab all right so you register yourself when you are being created and when you are destroyed you unregister yourself so that is how we can achieve when certain things is on and off you um when this is false then you are destroying these two and we need to unregister ourselves to remove the two tabs right so here now I can come over here and implement the array okay probably do it here array which is a titles that I have let's see probably I'm gonna use okay I'm gonna push on the title and the ID as an object into this array right and when I want to register unregister I need to find out uh index want to find out the titles so I need to find out the title that you know I'm gonna title that ID that matches the ID that I'm gonna remove all right Tap index and I'm gonna remove it so I'm gonna say type if tab index if I find if I can find it if it's greater than negative one then I will say titles dot splice uh okay that this have to be less than title dot supplies um type this tab index and what I'm going to remove one item and I need to make sure I update the title so I'm going to say titles equals titles over here same thing goes for here so that's spelled knows that I am updating this variable called titles okay so here I have all the titles I'm going to create all the tabs so can I use I'm just gonna use simple things like button uh and I'm gonna use each to Loop through all the titles titles as so each of the item is an object that has I ID and a title oops that's let me come over here and each right so each of the button I can show the title right so I have four tabs right now and upon clicking I want to set the selected tab to the ID right so here I have four tabs and if I come over here and say for example if I have certain condition inputs fine check equals to is log in this is my favorite way of defining a of to control a variable right using a checkbox so if I unchecked you see that I only have two tabs left if I check then you have um four tabs right okay the order is wrong now because this is being pushed in later on so this probably something that we need to think about and figure out later on but here let's have all my tabs um let's here let's switch between tabs does not work right we've updated this variable but it's not a it's not updated it's not reactive because variables are not reactive across context you can't react make it reactive across components and we have to talk about this in a context versus Star when when should you use a reactive star a reactive context using store which is a writable plus context combo and this is exactly the case when we we need it so someone come over here and say import writable from svelt's store I'm gonna make this a writable object okay make this a writable so I'm going to pass in a writable selector tab and here since it's writable I'm going to come here and see where where am I yeah I'm gonna update this using a dollar sign right select the tab equals ID okay but um this over here we pass in selected tab S2 right this again has to be uh so two ways of doing this this can be a default uh a default selector tab or this we want to pass in a string then probably we cannot reuse this anymore we can we would have to create a new variable called selected tab star and create a writable store like this right writable selected tab and I'm going to pass it this over here write this instead and now what I'm getting is a star so I need to use a store to to to get the value of the store right now as I switch you can see that I am switching the switching the step right and the title is it uh reactive no it's not so what should I do I need to come over here um get the title exchange right every time my title change I need to do something right I probably would whenever title change I want to update my title right so this slide starts to become more complex we need to come over here and see we can register and unregister we can also come over here and do things like update my title my ID title because the all the list of titles is being managed over here in the tabs right I need to provide a way to update Title if I want to and I'm going to copy this find the ID I find the index and then I'm going to say titles tab index.t title equals to the title that it wants right so now if I come over here I need to call tab titles dot update Title with the ID and the title now when I change this you can see that the title is updating now right if I switch to this tab this is updating as well so it's remove right I can update my title dynamically okay so what's next what's left right we can switch between tabs we can have a uh we can hide and show tabs although the order is wrong but they are still working fine I I resume okay so here I can also change the selected tab from outside can we I think we we should allow people to change the tabs right so say for example for some reason I have a button over here click me for some reason I can change the selector tab to say 4 okay so this now suddenly becomes a variable that I can change that is dynamic I select the tab equals to two let's see yeah so I can switch between tabs and I also want to click this and switch to 4 but it's not it's not switch to so what should I do well again come over here you see that this uh it's just red once when you create a writable and then it that's it so here probably you will have once to have a relative statements to update this variable every time right selected tab star equals to selected tab right so this what is the dependency of this statement select the tab so every time select the tab change you want to update the value to the store all right so we can just come here to switch my tabs and if I click this it should switch to this tab as well uh of course here we can't really see what is being selected from the button so maybe I can come over here and maybe add some Style right so I can come here and say a button that says that has a class called selected maybe you should have a background color uh background black and color white so we have learned this before how do we dynamically add class we can based on a certain condition you can see it's class selected equals to this right this is the condition if the class is selected it goes to ID let's see okay now this is this this should be a dollar right at the class when it's being selected so now you can see that secret Tab 2 is selected a switch is it will highlight the tabs being selected right if you can switch the last tab come over here and hold on oh yeah so this switch internally but it does not update the variable outside so that is something still something slightly wrong um so I would say we can come over here we want to update back this variable called selected type right so probably a better way is to bind it right to bind the value out to the variable outside so over here you can see that a selected tab is number two right and I switch I should update this variable as well uh which means I need to come over here and do the reverse of this if you come over here and say select the tab equals to to select the tab star right uh however it gives me a cyclical dependency detected okay so um let's see what should I do obviously you can see that I never planned this before I just wing it so let's let's figure out how we should do this right so every time uh select the tab has changed we need updates like the tab store and select the tab change okay obviously uh I wouldn't say Obviously but a workaround to bypass this cyclical dependency is to create a function uh so that it does not see this dependencies cyclical dependency but that does not mean it's a good idea to do it because we if we override it if we do it this way we may end up with an uh we may end up with a circular recursive endless request recursive Loop of updating right but let's try and see okay I I at least right now it seems okay let me switch this before switch back again yeah it looks okay from now set so hopefully that is still doing good so if you have so what what what's happened and what how do we divert this hard limit well um we we change this to a function instead of like assigning the value directly and what that changed is that now spell only sees that uh you only as long as update props change or selected tabs store changes then you will call this declarative statement right so what's what what happens is that um if you have a variable over here instead then it would know it will look at this variable and say this depends on this and so it depends on this store and this star depends on selected tab right if you have selected tab equals to store and start go to selected tab then they are depending on each other right so if you remove it and you just shove it into another function spell will only see this statement and couldn't figure that that is actually a cyclical dependency here so I'm not telling you that you should do this uh do it at your own cost I feel that there are some things that I I I can't think of right now but there might be something that may not be that right maybe there will be a few Loops before it settles um but let's let's so let me know if you see any issue with this right so I'm just going to leave it here because apparently it seems like it's working right it changes my variable and I click I can update them as well and now if I come over here and I hide this and I turn it on again it's showing but at the wrong position so now let's take a take a look at here and let's think about how we can fix this well apparently again I've never prepared for this so that's why I'm thinking together with you so here I'm hiding I'm showing okay so let's let's take a look at how do we how are you able to tell the order from here to the uh to the tabs right there's no way that we can tell and how how but how do we get the order right in the first place well the order was right because its login was turned on okay false in the first place right so if you it's false and you create this then these two will be definitely be pushed later on we push later on into the array and you never know where it was intended in the first place right so now let's think a bit at how is there a way for the tabs components to know uh their relative position amongst each other I feel like there's no way to do that so it means that there's no way that we can fix this now for now I don't think there's a way that we can fix this so let me know again on the comments down below uh comment if you have any good idea to handle this right so there's no good way then which means that we kind of have to sacrifice a bit with our design and come about and say maybe other right if you want like some fixed ordering come up with a props call order and uh and therefore you can get away with having a yeah come up with a thing called order and then you can register and pass this order to the titles so that you can have a control with the other right I guess that's why uh maybe a less obnoxious way of doing like having to pass order is to pass maybe a condition to say show tab right so this way uh this way you maintain the order because the component has obviously created but then because of show tab you can say that hey you can tell over here you can have a way to say hey this tab is hidden and another method they say hey show this tab now right so you you have your titles being created at the right order at the very beginning because all the components has already been there except that you also pass in the flag to tell that which tabs should be shown or should be hidden so that um when you un untoggle that you still maintain the right order so that's all for now I think because I can't basically I'm hunting of a better way of solving this so as I said I'm not I I don't know every no I I don't know everything so if you have a better idea comment down below tell me and we can learn this together right so uh what we have done so far we've created a tabs component uh by coming up with a nice uh a nice design component uh component design that we have and then figure out how to fill in the gaps on how to achieve what we want right so things that we have used so far we have we have used context to pass data around from tabs to the tab and pass the tab to the tabs right we pass um we pass like uh one other selected tab from the tabs to Tab and we pass uh titles register like our title register our contents ID and title from tab to tabs then we use uh store in our context right a reactive store a reactive context and along the way we also use things like binding and let's see how we can use a rectif statements and we have some workarounds with that so hopefully this is useful for you to implement something more nice nicer than what I have over here my tabs is hideous right although it's working but it's hideous but I believe you can do something much better So today we're going to talk about two more magic Global variable which is dollar dollar props and dollar dollar rest props so what are they what are they used for what are they good for well we'll take a look at examples and I'm going to show you what are they for okay so let's take a look at the example so here I am trying to come up with a super nice button component so maybe say you're a button Library author and you write very good button library and you come up with this button and and you saw that the user can pass in different kind of button different types of button so you can pass in a primary type or secondary type which renders a very nice red and gray button for primary and secondary well that's that's great so let's take a look at how the button is implemented over here we are actually using an actual button but based on the button type we create a different class for this button right and whatever is being passed into this button and what is whatever is passed in will be slotted into this slot element that we've written over here so users can come over and say do different things to a button maybe add some bold text right it's up to them this looks fine right this looks great until someone requests new features to a button say oh I like your button but can I add custom styles to your element to your button component I say yeah sure you can pass Styles right you can pass Styles like this a let's see font size equals to 20 pixel right you can pass those like this yes but I have to handle it so you go over to your button component and you export let's style you create a new props so that the user can pass that in and after that you have to pass the style to your um button element as well so you pass it around to a button element and that's it now your button can have custom Styles isn't that great and then again more requests comes the user was happy but now they want more they want to see him I read about a accessibility I want to pass in area label to my button because for some reason my text is X but it's actually a close button I want the I want the uh speech sorry what's that called again on a screen reader yes I want a screen reader to read out this button as a close button I want to see Aria label for this is close can does that work it does not work I pass this property but it does not work so you say let me think about it okay I'm probably gonna say how about I I can't really name my prop as Arya props area label contact I can't do that right I probably will have to say a real label no it does not really work that way as well so I will say okay I'm going to come up with a property called Aria label and I'm gonna come over here and say Arya label to this Aria label and now you should change it to this way right so you go and change your code you add more props to your component and sometimes you have to rename your components and so that you can pass it you can you can handle it and pass it to your button elements that's great right again user wants more they wants to do more thing with this button they want to say um is it possible to pass in like on click to your button is it possible to um passing other attributes that is available for HTML elements right on click is available for HTML elements Aria label is available HTML element style and there's a lot of other uh elements HTML attributes that you can pass the button I want to add them I want you they want to add it to the button and they want you to support it and now you say now you have a headache every time they come up with a new attribute someone invented a new attribute you kind of have to think about I need to add it to my props and I need to pass it to my elements so is that a way that you can um do it once and for all all right let me just remove this I think three attributes is enough to handle this is kind of too much to handle I feel I'm not sure about you all right so what should you do well the dollar dollar props and dollar rest props is here to rescue so what are they well basically uh dollar dollar props if you try to console dollar dollar props it's actually I kind of showed it here why can't I let's see no problem I shall come over and just show it here so dollar dollar props is actually an object which has all which is all the properties that you bring past into this component all of them right so if you see style area label and maybe you add class do it um let's see Class A B C all of them uh you can even have like uh full equals bar all of the props that you can pass in will be available as the in object called dollar dollar props and it will be reactive so if you change your if you change your value over here say for example if it's a timeout so maybe your type initially is called primary and then maybe one second little type becomes secondary uh let's see all right then you see that it changes as well the props the props itself is reactive and that's great so now you basically need to you have an object and you have an element that you want to apply it an object of properties to it what do you do well you use a spread props so over here you try to spread over all the props that you have oops that's that so you can remove all of divs and spread all of them to your button right as you can see your button itself now um is big because you spread the style over the button itself is now um have an area label of clothes so you've inspect the button element in the inspector oops inspects it you should see that the button itself has an area label of close it has all the properties that you were passing into that sorrow it has all the properties that you're trying to pass through right the class area label the food the style name type and everything well but we lost the color aren't we right uh so we we kind of lost this uh the color of the button because we we spread all the things over here which include which include class let me let me remove these two since we are not using it anymore we spread everything over the props include a property called class so that class overwrites whatever in the class over here right so so that's that's too bad you kind of spread everything that's being given by the button so all the props that you can see type style area label class full are all spreaded to this which is great but not that great because first thing you you override the class because you already spread the class over and you overwrite it um the the way I walk around is probably come over and reverse it but um if say for example in my app does felt I really do have a class called a okay I should make it Global because it does not match anything at the moment okay Global a I'm going to make the phone uh style to be italic now you don't see or you don't see your buttons to be italic don't you but if you reverse this you see your text is italic but then you don't see your class button primary applied aren't you so what should we do about this uh maybe we should take out the the class um are we supposed to come over spread over first and then uh class and then we add a prop start class right is that is that is that how we should do yeah probably right but then again if you inspect element you also see that the type is being spreaded onto this button as well but we don't really need type right type is something that we can't kind of invented for our components that is just for us to decide what kind of class that we apply to the button and we don't really need that type to be spreaded into the attribute of the button so what should you do well Here Comes rest props so rest props on the other hand is the rest of the properties that are not defined as the properties okay so Props are whatever so dollar dollar props are whatever being passed over here right what are all the props that you pass over here are dollar dollar props and rest props are all of the props so everything of dollar double props minus the one that is declared as props so type is declared as props so you don't um so dollar dollar rest props itself will not have the type right if I come over here and you inspect this button you'll probably see that you'll probably see you probably won't see type oops let me close this drag it down yeah you probably don't see type over here let me zoom in a bit so that if you can see it clearly you don't see types over here all right previously if you use props instead then you'll see that the type primary or secondary is being passed in so rest props is great if you know some of the things that you don't want because you want to handle it differently so you you export them as props at the same time you want the rest of the things that unknown kind of like being specified to your but being specified over here as a button that is unknown but you want all of them collectively and then do something with it then rest props is great for that case so I use rest props and then I can also I can also do this I can Define class as my props as well okay class is ah this is tricky because class I can't really use this as the color the ah okay I can't really do that so um so I can't uh kind of fix it with class but we can show uh how about style right let's just show about style so say for example I have a star over here and say a color it goes to Green right you have a green text and if you come over here and say I want to add other styles like font size you probably see that the font size is being undoed right uh and because this style comes before it comes after the rest props or if you reorder this you'll see that the text itself is now no longer green and if you are one both of them you probably will have to like this way you do dollar dollar props and Dot class right to get it but if you say export let's start over here then you extract the style away from rest props early because rest props is what it's all the things being passed as I shouldn't come over here it's all the things that you're being passed as the props minus of whatever thing that you kind of declared over here so you have a type style area label class full minus type and style so you get only only available class and full right and now you can just get this and add it over here right nicely done and you can see you get a big text and a green text as well so here I was initially I was thinking of doing it for class but then you can't really export let class it's it's not a JavaScript it's not a valid JavaScript syntax so I'm just going to leave it be all right so now you learn about rest props and props we see mostly I think most of the time it's it's kind of useful when you want to spread all the attributes to your uh elements from a component props to a spread all the unknown component props known on unknown mostly unknown uh onto the component from the component props to something else right for example like the elements attributes and let's take a look at another example so that you don't uh let's try and see different possibilities of using props or rest props here I'm going to create a component called joke because I found this joke API web that can create jokes for us okay so this API is called joke API dot Dev and I'm going to come over here and copy it so here I have I'm going to call this API with a width uh okay I probably would want to just have a button to load so just in case we don't um uh hit the rate limiting so I'm going to create button and I'm gonna say load joke okay so here I Define a function called load joke I'm going to call this API and I okay right now I'm gonna call any joke with a single type so here I'm going to async okay response a wait and I'm gonna uninstall um data equals a with response.json and let's see what should I get from the data um joke right I'm gonna get a joke so here I'm going to Define a variable called joke and I'm going to assign joke equals the data.joke okay so every time I load a joke I will get a joke and I'm gonna display it so here is the joke okay this is my joke component I'm going to come here and import this import joke from joke that's felt okay let me Let Me Maybe remove this let's see where I'm gonna use my joke over here okay when I load the joke you see that I get a new joke okay so what does this gonna do with props can you please direct go to the point well over here if you take a look at the joke API there's a lot of things that you can configure and it doesn't make sense that you come over here and Define all the different props that allows people to Define for your joke right um sometimes you want to have joke that is maybe of type a single see type single or you want to type okay no let's let's not do single things where do you have we have done that let's do a twopart joke so the type if it's the type two parts then you're gonna see a twopart joke okay and what else can we do for joke API we can have Flex to Blacklist so now I want to Blacklist Flex called NSFW not safe for work okay let's let's do that okay what else can I pass to my joke API say for example I want a custom joke maybe just a programming joke um so this is the type it's the categories right so categories it's called programming uh let's see if I don't miscellaneous what happens okay if I miscellaneous I'm gonna have comma right so I'm gonna have programming and dark joke so this is gonna be my Doc and programming joke okay so uh what else can can I get different kind of uh configuration amount of jokes on my language let's switch for a French joke so language code is called French although I don't understand French but let's try and do that so language is French okay so we have custom joke component with I want to customize through the props and I could have defined all the different possibilities all the uh the things that you can pass over here as an API but I don't have to do that I can say I can only I think I just need to define the categories because the default categories that I can do the defaults categories that I can have is called any if I don't pass in anything okay so now I can take this I and I can use it to change my query params so say for example if I come over here and I'm going to create uh I'm gonna use what should I use props or rest props well rest props right because categories I don't need it anymore as my query prompt I only need rest props so I'm gonna come over here and get my rest props okay rest props but I need to convert it to a URL search params so can I say params equals to new URL search params do I get the correct I'm not quite sure let me let me Google there for a while okay yeah you are such parameters yeah okay I need to capitalize URL okay search params and let's uh let's insert all of them so what I need is I've got a pen uh all the rest props look through my uh look through the key in rest props and I'm gonna append this up and key and the data and I'm gonna get the two string to get my query params okay so here I'm gonna say oops sorry I need the yeah I need question mark come over here question mark and params dots to string okay what did I miss yeah I don't miss anything okay so now let's see I have my custom joke that is dark and programming and two parts and French joke and I have another joke that is just dark and what other languages that I can have um say Portuguese joke PT which is just a single joke one part joke okay and let's try and run this little joke oh no what's this ah man let's see can't access data before initialization oh this is key this is not data okay so I have a Portuguese joke hopefully it's loaded no please loot the joke what is happening let's see Haram starts to string loot joke yeah that's correct and probably I can't load any joke because let's see what do I get for data okay there's no no matching joke found okay I don't have a Portuguese duck joke that is not safe forward let's try no Blacklist Flags let's try run this no matching joke okay probably just Portuguese joke with no categories ah there's no such language oh no okay how about just come back and get some German joke d e oh man that's so sad okay let's just use English joke okay now I have an English joke right let's talk about this one I can have um no matching joke found again uh that is still so sad I'm gonna use French with two parts joke no okay two parts you have a setup and a delivery okay so I am gonna just make it one thing it's a joke okay so uh let's see what's the again probably I have the uh what is that let's type two parts right so if data DOT type equals to true part then the joke will be data.setup plus data.delivery just punch it in in one sentences if it's not if it's a single joke then I'm gonna just do it this way okay A little joke I have a French twopart joke and I can also have an English single joke okay so here you see I can use rest props in in anywhere I want it does not have to be spreaded over as attributes on elements I can use rest props or props as as part of data when I want to want to fetch something or I will just use it in somewhere else I can use it any way I like so this allows me this opens up that I don't have to Define all I don't have to declare all the props over here I can and allow people to just Define as many props as they want and I used dollar dollar props or rest props to access them So today we're going to talk about lazy components what is lazy component well lazy component is like any component but you only created create them lazily which means you only create a component only when the user can seize it or only added at a later time what is this useful for this is useful when you um have a big huge page a very huge list or a page that user may scroll to see more and oftentimes user may or may not see more of the content so you want to get only download the necessary components or the informations you need and only load more if the user Scrolls to see them or you know expands or click on certain interactions to see more content so we're gonna use what we have learned so far like the a width block as well as maybe the dollar dollar props that we've just learned so far right so let's take a look at example a rebel so over here I have app.spel that written that is importing the component um not lazily so I'm going to call say it's importing synchronously so you directly import this components and this component will be available right when you are using the Applause felt so you import this components and we're going to pass some props like full and bar so this component is just like any other components that you have seen so far and now we want to see how we can lazy load this component so first thing is we're going to change how we import this component so if you use Imports components from a file you are you are saying that when you have this app.fl components this component should be ready together as well until so you will wait until this com this file is ready only you you um only you proceed with whatever in the appbox files and usually with a bundle with a bundler with a build tools like a webpack or roll up you usually bundle these components together with the airport spout right so they are they come together so they are not loaded later on deferred to be loaded later on lazily so what I'm going to do here is to change the way how we import this we can use the dynamic Imports to import the component file so as if I say this component does felt and I remove this this okay let me just comment this out first this hints the browser that okay this we're gonna fetch this file now right if you call this function now you're saying we're going to fetch this file but this does not blocks whatever app.fl is doing right now so you import this and this will return to you a promise this will return to your promise that will be resolved when this component is when this when this file is being fetched over the network and it's ready for you to use so this will return the promise that's why it's not blocking you can continue to see whatever over here uh continue to have whatever in your approach field while waiting this later on and you know when the problem is resolved then you handle it later on so this creates a promise and if you use build tools like webpack and roll up that I mentioned earlier on what this what the build tool will do for you is that it will create a different it will not bundle the Commerce field together with the AdWords felt it will create another file right often in case we call it a separate chunk so it's a separate file that will be fetched over later on so they are although the bundle will try to bundle all the files together but you'll create a separate file for this component as well because it knows that this import statement hints the bundle that this has to be a separate file this can be fetched later on this can be deferred later on it should not block whatever we are doing so far okay so come back to this we right now we are loading this we we are fetching this as a separate file and if you take a look at the network tab right this is a let's see I'm not sure whether we can see this but let's let's try you should okay okay uh sorry I think you can't see this from a network type but if you use a build because because of the Ripple um all these files uh are not actually fetched they are somehow simulated to be fetched lazily but they are not actually going through the network so if you use a build tool and you build it probably will see that you have two files over here on a network tab one is the bundle for the uh like the Applause Road and another one will be the component as felt right so uh trust me when I say that this will be loads lazily right so over here when it's finished loaded it should return me a promise right this this is a promise so I'm gonna say a component promise I can wait for this promise so I can use a weights block to do that for me I can see I can wait this component promise and I can say maybe loading right and when it's resolved um this will give me an object with a default property right so I can I can do I can have my destructuring over here but you have not uh familiar with it this is like um yeah I I can have a destructuring so I can get out the get the default property from this uh from the resolve object from this promise and can use it later on so over here when I want to use it so first thing I would want to rename this property because if I can use default uh but I can't really use the uh but if I destructure it as a default I probably can't use it like this as an element called default because um it starts with a lowercase letter which means it should be an element rather than a component right itself just looks at the first character and say okay it's a low case there should be a element it's not a component we want to create a components that's being returned from here and the components is in the default property so what we can do is we can rename this we can rename it to say component okay and we we use it over here so this is capital letter so we can use it and now we have our components same thing goes we want to pass some props to this component we can come over here and we can pass it to this component and now you see that this component is is being loaded and you can see full one two three bar four five six right as if nothing has changed but you can come over here and um load this later on so here we call Imports immediately when we we call it immediately when you uh in the initialization of the app does felt right but sometimes that is not what we want we want to wait for certain interactions or wait for this components to be actually shown to the user only we load this uh this component because for example sometimes you have a very huge list and you want to okay so I'm going to create a huge list over here so imagine I have a big uh big block of content over here and let's say background is blue and the height is 1000 pixels you have a very huge blue content over here and if I come over here in a component uh console.log you see that this initialize has been called immediately although I haven't seen my components I can actually load this later on until you know when I scroll to the end and see this component so what I can do instead I can come over here and maybe create a small div that has this used viewport action so this viewport action is an action that we have written I've created a video over here that talks about how we can write a viewport action in the use viewport action example so this action what it does is that it will observe um your elements if it intersects with the viewport if it comes into the viewports then you'll get notified you get an event and therefore you that's when we want to load our component so I'm going to use this use viewport and then import import viewport from the use viewport action okay you import this file viewport when you use this action on this component using use and then when it's entering the viewport you will see this event called on enter viewport so I can call on enter viewport and I'm going to do something which what I'm going to do is I am going to load my component so here I can I can have maybe a flag over here is loaded it goes to false and here when I enter I'm going to say is loaded to true and I want to load my component as well so I only want to load it once so when I say check if it's loaded if it's not loaded then I'm going to load it and I'm going to set it's loaded to true and therefore I will load it once so what I'm going to do here is that I'm going to change this component problem is to be let and we'll come over here and uh set this component promise to this import ant component.felt over here okay and now my component promise is um is is undefined at first so I probably wants to check first before I await for it I wait for anything okay for now I wait for undefined I will get resolved uh to do whatever it is right because sometimes uh when you await a promise you will get whatever is you you wait for that promise to return but you've await something that is not a promise then you kind of immediately resolve with whatever that thing is so uh so right now what happens is that we are awaiting undefined and undefined it's not an object and we can't destructure here that's why it says cannot be property default of undefined so we're going to first check if a component promise is something right I can do this just make sure that it's not undefined and we promise that we always set it to set it to something else which is a promise when we want to actually load it so now you see when we do this um first thing you'll notice is that component is not loaded yet if you look at here initialize it's not called and if you try to inspect the elements you probably gonna see that there's nothing here right you only okay let me Zoom it up a lot more I think this is big enough you probably see that you have the blue diff over here this is our little div that we try to see whether we um we are uh whether whether we are entering the viewport right this is like our little marker over here that that is right above the component where the component will be right so now if I scroll scroll and when this div enters the viewport oh no it's not working let's see let's see uh on enter viewport is not loaded then okay let me check over here whether an interview part will be called okay so if I come here and scroll ah it's not being called so something is wrong with the action itself maybe is the event name and maybe is that this div has no content maybe I'm gonna set maybe like a style wait hold on it's entering viewpoints ah man what happened uh okay so if I scroll you see that it's loaded so I'm not very sure what what's happening probably I was okay I typed this out maybe my spelling was wrong so play back and see what happens I have no idea what's happening so here uh as you can see we didn't really change much but but only when you so so only when this initialize it's not called this component is not loaded yet it's not being fetched yet and when we scroll down all the way you see that once it's entering a viewport it's being fetched and it's being loaded and you see this component right um because how the rebel works this component is being finished so fast that you can't see the loading state but yeah you probably have to handle like a loading put something like a placehold over here so that when it's loading um you you you have something nice to wait for right so uh this is how you would roughly create a lazily loaded component but then again to do this to to do all this is a lot and if you want to do it for every time every every time you want to lazily load a components that you have to write this right viewport and have a promise and wait for it and all this it is not that hard but how about let's make it into a component that handles this for us so we're gonna have this component called lazy component lazy and let's again go for API first approach to design how we want to look how we want this lazy component to do feel like how you want to use this and then if you go take a step back and figure out whether this is possible is feasible and let's see how we can Implement that so how I would want my lazy components to be is I'm going to write lazy over here all right I want to have my lazy components and hopefully this lazy component handles all the viewports thing for me so I don't have to take care of that and probably I would want to also pass in uh maybe like a props call this which is the com uh the okay not this but get component right it has to be okay it has to be a function import okay it has to be a function at first I was thinking of writing maybe lazy uh let me let me enter a few lines so that we don't get disrupted by that so initially I was thinking of like writing as lazy and look at this just like how we would write the spelled component with this right I was thinking of having this kind of similar props and API Style but the thing about it I need to have a function rather a component I can still use this the name I'm kind of not that hinting that it's gonna be a function but I can still use this okay maybe let's just decide that it's called this I'm going to call import right this this has to be a function because this only will be called this function will only be called when we want to load it right if it's if it's a components then there's no point and if it's already if you already call it Imports directly then it has it has no point as well because this is like yes it is another file but you kind of call it immediately right we want this lazy component to handle the viewport when we only load this only call this function I'll call this import when we are entering the viewport so we're gonna change this to a function and of course what we want also we want to come over here and pass whatever props that we want to pass to this component so that yeah we want to pass all of this to this component so that uh you can pass it over to this component itself okay now we have this and also maybe we want to think about loading States we can have a fallback for a loading state that shows loading dot right but we want to also may be a way to specify that by the user so I'm gonna come over here and say lazy and I can use a slot to do that for me I can write a okay not not that different but I'm gonna write loading but I'm gonna style it over here so that it looks slightly different at style okay first thing I want to have a slot attribute first because I don't want to use a default slots because I may want to use that for something else but this one the name slots uh I'm gonna name it I'm going to name it as a loading state right loading and now I'm gonna install my style my div let's see what I'm gonna have is uh div ING with all this indentation nothing wrong okay it's my div I'm gonna say a color is blue just just to see that it is being styled right okay this is not class this should be an element okay we are done with here and now let's design our lazy component so far so good although you can't respond but hopefully you you can see where I'm coming from now let's design our lazy components so you can see over here we we can pass arbitrary numbers of properties to our lazy component and hopefully you can see by now uh what we have learned so far we've downloaded all the props all the rest props this is what we're going to use to pass all this to the component to the underlying components all right first thing is we're gonna take in a prop called this right this spot let's this uh let's import lazy import lazy from and meantime I'm gonna I'm gonna copy all this and then comment it out right we don't need this but we probably would have to implement something like this over here okay so we can't uh oh no we can't use this let's this over here um that because this is a keyword that we can't really use this so probably we can rename this somehow right I'm gonna say this is gonna load component and let's see I wanna but I I can have I can do this where I simply rename it with my export so export load component as this so here this is not going to complain that this is a a special default uh it's this will treat this as just a normal variable name it does not have the context of being a uh was that call again uh uh yeah a certain a special keyword a projected keyword this over here whatever you pass in can be any string or even emojis if you want so here uh let's let's try to import some of the stuff that we have imported previously the viewport and then a I think that's all so we need a state called it's loaded and the component is component promise right so you can see oops that's not what and let's is loaded and let component promise okay uh we are done with this and now let's see external reference only please con so I'm gonna use this load component over here in States so we enter viewport we're gonna load okay so I'm gonna uh I think all this will is okay now and you're gonna come over here and use the rest props instead um yeah rest props because we don't need the this props as the props to our component right and I think that's all so uh one oh another thing over here um we we have our slots loading slots so we're gonna install have a defaults we're gonna have a slot component named loading and of course we're going to provide some fallback called loading if it's not provided so if I scroll down see again it's called initialize and then you see the data over here and everything is still passed through nicely because if you use a rest props so we press everything that is being passed to our lazy component to our components to the underlying component so let me clean this up we don't do this anymore okay we're not don't need all of this anymore and let's clean this up so before we end probably let me do some more do some more cleanup right uh first thing is I don't need this div anymore uh once I've entered right so the way I do it is I still have it and I still listening to the viewports but every time uh it's entering again the next time I will check this flag when this flag is false uh when this flag is true then I am not triggering anything anymore but what I can do instead is I can have a different flag which is uh I can use the same flag but only render this div when it's not loaded so if it's loaded if it's not loaded I'm going to show this diff so every time when I enter I will load something right but then we also know that one is being called this load is loaded Will turns to True which means that it will hide this div and that's oops which means we'll hide this div and that is the only time you will see this on enter viewport uh the events being triggered right so once it's been once it's called loaded uh it doesn't mean that it's actually loaded right it's just that okay we now we are trying to load this uh component uh this lazy component so maybe I can change this name again to to some more suitable to our case oh yeah uh uh okay I'm just gonna leave it I can't think of good names right now so this is only this is like loaded it just tells us okay now we are going to show this component right if you haven't show uh okay I'm gonna stay showing okay it's showing component right if it's not showing okay by default is false if it's not showing then you have this div that has this viewport action that tells us whether it's entering a viewport one is entering we set it to True which means we're gonna hide this if we're gonna hide this uh div anymore we're gonna hide this div and now we're gonna fetch our a lazy component right so over here we also don't really need to check if component promise because once we know that if it's showing component is true uh the component promise is assume that it will be a promise right so we can also remove this check uh this is unnecessary now because every time a showing component is through this component will always be a promise so let me nicely format everything and here we end up with if showing then we if it's not showing we have a div that tells us whether we are entering Viewpoint once it's enter showing is true then now we're actually waiting for our component promise to wait for this to resolve and show our component so let's let's scroll back up and let's run this thing again right okay let's see okay run this thing again so now you don't see the initialize combo is not loaded and once we scroll it all the way down you see components here and immediately it's initialized so that's all well I thought so too but then I think about it even more I realized that yes I have my lazy component but at the same time I'm kind of lost something is lost along the way for example if my component self have same binding for example I'm going to come over here and create this uh bar that can bind to a variable so input bind value equals to bar if I create this input and somehow over here I also want to show this value of bar which is a variable let's bar over here and I want to bind This Bar with bar and let's okay let's initialize this with four five six let's try this so let's scroll all the way down okay we see four five six over here and the bar and the input and if I try to do something like this you see that the binding is not working and you may ask like why well here's why um binding is actually passing a property called bar to this component and also tries to subscribe to any changes in the props of the lazy component but the lazy component itself does not have anything does not change the props directly it spreads all the props to this component so it passed down the bar to this component but itself does not pass down The Binding that it's receiving to the component itself so there's no way uh as in once you use this lazy component you kind of lost the thing that you can do with these components now you can't do events you would have to to add events you would have to forward all the component events uh through the means of component event forwarding and at the current uh and currently there's no way to forward all the events you can only forward um again only forward based on the events names that you know right so there's no way that you can in advance know all the events that you need forward so that is one issue and also binding does not works so you kind of lost this when you are using this lazy components that tries very hard to encapsulate the logic of lazy loading right and capital logic of trying to know when to load when you're entering viewport and then showing a loading uh components when it's loading and then only use the components so I I think about I thought about that and I realized that hey there's one thing we haven't utilized that's one way they can use it's like it's uh which is to use a let props so here is how it is going to be so imagine here I have my lazy components and I pass all this uh properties and bindings and stuff to this uh via this lazy components right but what about how about uh we can also create another slot attribute over here I'm going to call it uh spelled fragment oh sorry hold on this should be a closing I'm gonna use felt fragment so that I can read more things uh here as also components here my lead binding I can actually use a let's component I can have uh I can only I can get this component from lazy components right so it will load and here I'm going to use a slot attribute called component right meaning when this component is finished loaded it will try to have a slot element with a name called slot name called components so this part whatever I'm going to render within this felt fragment will only be shown when the component is loaded and what is that component the component itself is provided through this let's binding so here I can actually do I will change actually create this component and I can pass all the props I want myself right so here I don't have this limit of having to um event forwarding for the component because I'm already using this component right here I don't have to worry about buying things to pass down bindings and stuff uh because I'm doing myself directly to this component right so this component can be any component being resolved from here uh this is just like a variable but you can treat it as yeah it is a variable you treat it as a variable but it itself is a component and I'm gonna use it over here so now how do I uh uh implement this so um we've learned so far that if you are slot attribute called component then you need a name slots call components so here when it's done and create a slot name component right and we learned that if you want to use a lead binding over here this data is being passed into the slot as props so here we what we want to pass in is this component so we're going to pass this component as props to my slots and now I can remove this because I don't need any more and let's and everything still works fine right so now let's take a look Moment of Truth and now we're gonna scroll so nothing is initialized until we scroll the way down so this component as you see even if we write it here it's not created yet right and all the way when you scroll down now it's initialized and this component is created and added and mounted to the Dom here during initialization phase you see the console log right and now when we want to try The Binding or type something you notice that this four five six seven eight nine comes from here so The Binding Works The Binding Works nicely and we don't have to sweat about trying to figure out how to pass down The Binding through a component and if you try to add events over here right on click Maybe oops I'm just gonna say this and let's add the buttons and forward that event you'll realize that when I click this button let me uh add more space over here I'm not sure my hit is blocking this so let me add it at the front so now when you click me you'll notice that this event is also being dispatched and I can listen from here right so there's no need to go through this lazy component previously we create this component within the lazy component so if you want you have to forward the event yourself and now we don't have to do that it's so easy right now so I would say that this will be what imagine my lazy components be like So today we're going to talk about a special elements called svelte component so have you ever have this situation where you want to based on the condition use component a but as a different condition you want to use component B and at a certain condition you want to use component C this ABC component I actually interchangeable they are they're taking a different the same props it's kind of taking the same um have the same behavior but you just want to use different components different of them for different situations and how do you do that usually let's take a look at an example usually what you would do is you would have a if statement and switch between them right so right now I have if statement based on the condition I want to use full and sometimes I want to use bar and actually Foo and bar can take in can bind value right you can bind value to full and Bar and so that full and bar can handle them right can they oh no I haven't implemented so let's come let's do this so let's have this let's value and full will show an input type uh number and bind value so full have its own input and bind a value bar will do almost the same thing as well um yeah except they show a different words okay um of course there's better way of doing this but let's assume that the looks almost the same takes in almost the same props and have almost the same behavior actually this is exactly the same behavior so let's maybe let's try uh something else let's say aim okay I need actually exports let's value in the states so that it's a props for bar I am going to have buttons and States on click this is 200 okay on click value will be 200. another button on click will be 400. okay so bar has this button that you can click and change the value and full has this number uh that you can change input text that you can change so they they both have the same props called value and they can they work slightly differently internally and what when do you want to render full or bar basically based on some other conditions right in this case based on value if it's 50 you will show full or else your show bar okay this is very contrived but this is just going to show how this works right so when you come over here and you change this value to say 70 you will see full right and full can change this back to zero and then you see bar but I can click to change to 200 and you see full right based on the condition you want to switch between different components so one way is of course use an if else statements then you would have to implement uh if you have a lot of props that you want to pass in a equals something b equals something c equal to something if a lot of props that you know pass into both of them and both of the case have actually the same props that you want to pass them then you may start to question yourself is there a way that I can extract all this out and switch between prop components well if you don't have a bind value then yes there's of course some ways that you can do say for example you can come up with props object so I can say a equals a b equals to B C equals to C and I can spread the props right I can spread the props so so I can kind of still keep them the same uh try to reuse as many code as possible but buying you can't do that right if you have events like on click over here and on click over here you you can't reuse it right uh so directives you can't really reuse by using a spreadable using a spread props you have to write them manually so again you are thinking Hmm can I have a way that dynamically changed between full and Bar while you're watching The Right video to learn the right stuff as a title show this is called swell component so we are going to use felt component to solve this so how does that work well spell component over here it's spelled component is a special elements in swelt so usually special elements starts with a swelt and a colon right so these are not normal elements there are special elements in svelte okay so Spell components must have a this attribute so what this attribute though is that whenever you pass in should be a component so for example based on a certain scenario I want full or one a bar I can say uh okay I can I can have eternal real over here and say I want full based on this scenario and I want bar for this scenario okay so I can now come over here and copy all the rest to this special elements and this will I can replace whatever I have written back there with this all right so spelled component this is the this takes in the component that I want and then I can pass in however many props that they are sharing right you can have some extra ones that just for full and of a bar um if but does not text it it's okay you can have more than you need for for one of them right but I think it's okay um so here you you use this and now let's see does it still works if I change to 200 now you see full and I switch it back to zero now you see bar and all the binding still works right so for example if I change it to 200 and come over here and I change it uh 200 to 300 oh sorry 200 and I'm gonna type something all the binding still works you can just treat this as a component that is being created with full or with bar based on this condition over here and and all the all the directives uh different kind of directives bindings on event listeners and as well as props spread props all kind of props they are all works they will all of them will be passed to full or bar so here you go you have a spell component that allows you to quickly switch between uh different components and while while you have while they can text in the same props right so sometimes you don't write it this way where you don't kind of a uh uh have this Expressions over here maybe sometimes you may want to say come over here and declare a reactive the variable called component and do it this way it's fine as well this works as well right if you switch between it still works and sometimes for some reason right say for example maybe value is greater than 200 then you actually don't want to show something you use a null or undefined over here let's see I think undefined works as well so in this case when you hit 400 you're actually not render anything right I think now works as well let's let's let me try I can't remember yeah now works as well so now or undefined now or undefined as long as the component is now undefined that you pass it over here for the disk so if this is now undefined you don't see anything right there's no error there's no error where uh the component is undefined and you can't create it right spell will just remove it so if you are rendering nut if you chose nothing here then you don't see a component and if you go back turn it back to 50 then you you start see your component based on this condition so what components you're giving was your comp component you are getting out over here So today we're going to learn about a special swell element wait it's felt special Elements which is spelled self so what is civil self well it's well let's take a look and we shall see take a look at an example so the example I prepared for you over here is I want to create a visualization for arrays right so if I have an array say the data is one two three four five I'm going to display it uh um like like this right I I wrap the array with a blue box and each of the item with a red box so you see that this array has five items nicely done but sometimes life is not that easy sometimes the array is not flat this array is flat right you only have one level but sometimes some people may create a really that are nested for example like this you can you get nested arrays so what should you do with it right um by default if you don't do anything if you get an array it will you you will make it a string by calling like a string and wrap it become a string and when you wrap a make a real string you get a comma separated value of the item right so this is what you get um yeah but this is not what we want we want is wrap this with a blue box and each of the item with red box and then do it recursively because 3 is another level of another level of the array right so what can you do probably we can extract this out into another component and call it again right call it recursively well how about call yourself recursively because this component itself will know it already handles a rape and we can use ourselves inside ourselves recursively when it's an array and as a title suggests you can do that with this specials spell special elements called spelled self so let's take a look at how we can do this right so over here if you come up here you see that item we can check the type of the item right so if say for example if the or the item is an array I use array is array then we can um come over here and use I'm gonna render ourselves right so our self is self and can pass data to ourselves right so here what I'm gonna do is the data is a props I'm gonna pass in item the sub item over here pass in data and if it's not okay let me let me format this nicely right so if it's an array then I'm going to use myself and if it's not which I'm going to use a else then I'm going to show my I'm just just showing myself so over here you see um it creates this nicely recursive pattern so I have a blue box which is the big the array itself and I have three Red Box inside right one and then this uh two I have two red three three Red Box because I have three items and within one of it I have another blue array a blue box because it's an array and I create uh two three four right three items and then this is a server yourself and I create this thing over here over and over again right so when you want to recursively render yourself over and over and over again you can use this component called as well cells and it pass props to it right so you can or can uh you you can choose past to pass or not to pass any props to it and you can do this recursively right render yourself recursively with spelled cells so there's a few rules that you when you use felt self right to prevent yourself to unconditionally render yourself again and again and again and reach and infinite Loops you can't use felt self outside here right so it says spelled self can only exist inside if each or within a slots right so inside if hopefully it's because hopefully you are smart enough to not come out with condition like if true and always render myself right hopefully you don't do that at the top level of course this is still kind of uh safe in a sense where item itself can is is numb is uh sorry what was I'm trying to say yeah save that this is this bricks because items sometimes is not an array it's a data right so if you still pass something that is um something that is part of yourself then yeah you're still okay you're still stiff right for example if I come over here and as long as I wrap it with if right even if I say if always true um then I can come over here and pass like some some data that probably supposedly to be lesser than itself and no that's not true also so you have to have a condition to stop that recursive Loop if you have that then you are safe then you don't end up with a un unconditionally going all the way down the rabbit hole and never ending all right so let me undo all this and let's come back and enjoy and be amazed by this recursive components created using spelled self let's continue with our svelt special elements we'll talk about spelled self and sveld component today we're going to talk about svelt window so let's take a look at some examples on when we can use this spell window and what is it about so over here we have our application so sometimes you want to listen to window events for example over here we try to listen to resize because we want to get the windows inner width right so we listen to on the window and then you um listen to this event listeners and then get the window in a width so every time when you resize you get a new value right so as you can see here the width itself is changing because I'm resizing the window and sometimes you want to also listens to events uh for example key down in this case so it's the same case previously as we listened to precise and then we get the property from the window and this time we listen to events and try to react to it right so this time this one when we add event listeners like key down for example when you click Ctrl f you will want to focus on this input bar rather than having the bit default browser Behavior which is event prevent default right prevent the default behavior from the browser which is to do a global search like here uh let's see like yeah something like this a global search you want to change that you want to Focus over here in States so um so how you would usually do is you would maybe wait for a component to be mounted so you add the event listeners in on mounts and remember to return a function to clean it up so that you don't lead to like a memory leak so um yes you can do it this way but today we'll talk about swell window right and spelled window is actually a way for you to add event listeners and read out some properties such as inner width from the window without having to manually set up your event listeners and listen to it and update it so let's take a look at maybe the first one which is this one which is closer so that we can change one by one so here we listen to the keto events and we add this um call this event handler right so uh an alternative would be having a spelled window element and we add this event listeners over here so you can treat this special element spelled window like your window element except it won't render anything so there's nothing being rendered uh that there's nothing new there's no new element created by this special element itself but rather this special element is here for you to add event listeners so here I can add on key down and let's stick let's copy this event handler let's collapse this and comment all of them uh on key down so pass this in over here and let's try to click Ctrl F and everything still works so you can use you can write this instead using on key now and the same thing as how you add event listeners with elements spell well take care for you when you want to announce this component you remember to remove the event listeners from window so this is a slightly shorter version of writing all that we have written so far adding event listeners and remove even listeners when we are when we don't need it all right so it's felt window again it's a special element so that you can do this on a window object another example that we've seen so far is to add a resize and then read this inner width right so so we can add also or you can come over here and add this on resize and this event listeners call on resize I'm going to copy all this I wouldn't say all this but it's just one a few lines over here on resize copy this and pass it over here right so now when we resize our width you can see that we still update the value we still have these event listeners and update this value uh in a way right um is there a better way or is it a shorter way I would say better but that's a shorter way of writing this yes that's actually a shorter way of writing this which is if you which is you can use a binding right binding is like a twoway binding uh where you can bind you can set the width of the window well I'm not sure whether you can but you can also when when the events happening you will update this variable from the property of a uh from property of your element right in this case of element is window we are we want to listen to some event we want spell to handle that know what event so listen and listen to the event and then update our variable so we can actually bind inner wave over here instead of writing it on resize so let me comment this let me remove this let's come over here bind ER with and I'm going to bind to the variable with the same name all right so there's a shorthand writing there for binding which is just do this and now we can even go ahead and remove this on precise handle and everything still works fine so one of the things that you can buy into and what events you can listen to well for events you can listen to all the events uh that is available on window or any elements right but most uh but of course it's on you make sure that it makes sense to listen on to the window right so you can basically listen to any events you can there's no restriction over here but for binding on window elements there is um some of the things that you can do so here I'm at the tutorial for swelt and this chapter where it says well binding it's spelled binding you'll see that there's a few properties that you can bind to um so in a weave in the height of the width of the heights scroll X scroll Y and online so you can bind all this variable so the first four is more about the window size and as you can see here everything except scroll X and scroll y are read only meaning although you are using a twoway binding The Binding but you only have one direction from it which is from the element events and then update the variable instead of having a variable update step right it does not make sense that you have a variable that can update can change the window size right that is most of the case I use that is only user Dragon like resizable height and width right um as well as online status right online whether the user is connected to the internet or not this is um this is not you can't change the user's connectivity you can only have events like the online on offline events from the window and then read this property out of Windows and Navigator although of course scroll next and scroll why you can change both ways right you can change the scroll position or get the scroll version to change your variable so these are things that you can bind to the window and instead of writing your own event listeners on a window object you can use this special element called spell window let's continue with our svelt special elements we've covered spelled self it's felt component spelled was that spelled window and now we're gonna conquer threat body so by the name svelt body you kind of know that it's kind of similar with spelled window which is allows you to add event listeners on the body so take a look at this example that I prepared for you so far um I spent some time to create this nice visual which uh at a mouse move event listeners on the body so whenever I move my mouse on the body you see that uh I'm updating the mouse position X and Y and does create this very nice pattern which I use two linear gradient so one is linear gradient from top to bottom from a transparent linear transparent color and do all the way to a solid color solid red color but with 50 opacity so that you can see that on the next gradient I'm going to lay on top which is from left to right transparent and then on the right side you have blue which is again opacity of 50 so on the so you get a top bottom transparent to red and then left to right transparent to Blue so on the bottom right corner you you see a combination of both color which is kind of a little bit of purpleish color so um so the gradient we use a color we use a stop point which is the percentage which is calculated by the mouse position X and Y divided by the body kind height and width therefore you can see this when I move my mouse you can see that it's drawing a gradient at uh stopping at a different position so with n we use document body event listeners to add this and as we've seen in the earlier video which on the spelled window we say that if you have we can use a special element like spell window to add event listeners on it so that as felt can also help us take care of removing even listeners when we are not needed anymore so same case like this we don't have to come over and add our own village at our own village event listeners and remove them you can create this special element called svelt body and add our event listeners over there so sveld body itself will not create anything on your screen except it's just a special element that allows you to add event listeners onto the body so here I'm going to say add on and we're going to use a mouse move event and call this function Mouse move so at the same time we're going to copy this mouse move event handler collapse this on Mount and comment everything oops let me let me do this comment and now I'm going to create this multiple function so um now everything still works the same except now we don't have to come don't have to add event license on unmount and then remember to clean it up we can have all this handled by the special element svelt body to allow us to attach event listeners onto the body so um that's all about cell body there's nothing more that you want that's all about it um so at least if you download this if you go over take it over to the link on this Rebel you can also play around with this so that you learn something unexpected so let's continue with our special elements if you talk about self spell component spell Windows felt body and now we can continue with svelt hit so what is felt hit similar to sveld window and spelled body it allows us to add event listeners to the window or body weight but we don't add event listeners to as well to hit to the Head element right no we don't do that but we do use a head element to add links meta tags and other stuff right so swell hit is these special elements that allow you to add things to the Head element in your HTML right you usually use as well components to um render something or to add elements on a specific Target which is usually in the within the body but sometimes you want for for what for some reasons you want because of SEO reasons you want to add some meta tags meta tags based on your content onto the title or onto the description or you want to add external links just only when this component is loaded you want to add some external links to the head you want to do something add something to the Head this is this special elements swell hit 4. so here I have an empty rebel I haven't done anything but just to show you that how this works I'm gonna create um svelt hit and I'm gonna come over here and go to I randomly Google some um Mana text for SEO and here is the first link that I see so I'm just gonna come over here and copy some of the stuff okay so we need some title text so how about the title of the tag is based on um based on the name variable so here I'm going to have a input by value equals a name so here is the wall and here I can use this variable over here like name like this so you although you don't see the title change over here but because this Ripple is within an iframe so I'm going to inspect element and take a look at the HTML within this uh documents these iframe documents so here if I zoom enough so that you can see clearer I have my head elements and there's this title called wool so as I type over here as I type you see that this title is updating right the content of this title is changing based on is is dynamic and it's based on the variable or content over here so that's why you you will want this felt hit a special element if your hit content is fairly static you know that you want this for all your pages then you can just write it into your HTML you don't need this special elements you usually use it because you have some Dynamic contents inside right so next if I take a look what's next over here is some description right meta description text so copy again and I'm gonna paste it in um again I'm just gonna use name for the contents in this meta tag and you will see that now the meta description the content is called world and as I type the meta description changes as well so here you can add as many meta text you want anything as long as you wrap it within swell hit they will be inserted into the head so let's take a look at another use case that sometimes I would use because of the rebel I want to add some some fonts to this Rebel and usually when I come over here on Google fonts when I select some of the fonts it tells me to come over here to use it on web use a link and add it to your head of your HTML but on a rebel I have no way to whoops sorry and the rebel have no way to add HTML to control the HTML so I need spell head to do that for me so over here I'm going to copy these two links this links uh over in the head and now I can apply the style to my elements so here I'm gonna have I'm going to add the div over here and I'm going to add style tags so that I can style the div oops Style the div and the input and come over here and copy the font family I'm not sure you can see this hopefully not covered by my head but I'm going to copy it um over I'm just copying things from the Google Phone website you can see here my phone family is just now dancing script and cursive if I switch over you can see that now I am showing a cursive script on both the input and the div if we take a look at the um the head of the HTML you will see that besides title and some Styles this Styles is added uh this is the style that is added for this newly Creator Styles and also have some meta tags links as we added over here in the spell head okay so there's a lot of things anything is possible within swell hit you can even have say a style tag added over here and maybe a maybe use some uh so anything that you can write over here will be inserted to the spell head right so here maybe I want to do something like um style and then I have what is that I'm gonna say Okay root can add some um CSS custom properties I'm gonna say roots and over here I'm gonna have the maybe font color equals and then I'm use name for the value okay and here I am going to use my CSS custom property so color equals to VAR font color and as I change this to say red hold on uh maybe I'm not doing it right let's take a look at whether this is updating correctly because it may not be uh let's take a look at our special Style Elements that we just created root okay this does not handle nicely okay so this does not work but we can use HTML and set the content over here instead wait hold on I'm not supposed to add it over here but rather I'm going to add this whole thing to wrap over the whole Style Elements so I'm going to use a HTML tag to add content over here and this content and add this content on to the hit so if you look at here this is being added okay sorry hold on this should be like this this whole thing is added to the it's holding is added to the Head Right the style is added to the head if you want anything to edit hit use a spell hit element and here now if you change this word to Red you kind of see that this font color turns to Red because we set uh the font color custom property to be uh to be whatever we are typing in the inputs and we use that value to be our color of our uh text over here so if I change it to uh Rebecca purple you can see that it changes to replica purple of course it doesn't have to add this Style Elements onto the head then you can yeah add it over here somewhere in the body as well it's up to you right so because style element itself does not have to be just on the head it can be anywhere right but usually people like to edit on the head that's why we are adding it over here like this so there you go as well hit element a special element that does not do does not add anything on the screen that you see but edit at the behind the scenes which is on your head element it adds anything you add to this felt hit element will be added to the Head today we're going to talk about svelt options so as well options is a special element in svelte which allows you to customize compile options of your Spell components customize compile options for as well components what is that well if we're not sure about compile options of components basically spell options is it's it's beyond our Beyond us right so let's first take a look at what are they so over here and I when I'm looking at API docs which shows uh which if you go to the spell compile section it says that you can use this as well or compile method a function to compile just felt source code so usually you don't do this yourself you use it you use some plugins or loaders in based on your build tools so for example if you are using roll up you're using rollup plugins welt if you're using webpack you're using spell loader using something else it's something something plugins well something something right so under the hood they are calling svelt's compiler which is a metalcore spell.compile to compile your code into JavaScript right it takes in this source code that you write and it spits out JavaScript code and this method itself the first argument is the source code you write the second argument is the options it's actually the compile options uh for your result component so over here there's a lot of things for example the file name so this is useful for debugging there's like name there's format there's generally there's Dev uh whether it's a development mode or production mode so that whether you insert more uh runtime checks or insert more debugging um debugging methods or functions inside right then you have immutable hydratable Legacy assessors custom elements so there's a lot of things over here which I'm not going to go through each of everyone especially those that are related to its custom elements we're going to talk about them more extensively we will talk about custom elements okay so stay tuned if you want to watch about that subscribe to my channel so that you get notified when that's it out so here um if you scroll through you probably see that some of the things sounds familiar if you read the docs for or tutorials for spell options okay if you haven't so here I'm gonna jump over to take a look right here I'm at the spell tutorial it says that you can have small options to come to make some changes right so here here are the options that you can set immutable assessors namespace and tags um so these are here right so you have tag you have accessors and you have immutable so here if I read it out it says that blah blah blah blah blah right so instead of reading them out we're gonna try one by one and see what that affects the source code that's about is generating for us right so we are going to focus on these three uh rather we're going to focus on two which is immutable and accessors uh and name space so three so for tag which is related to custom elements again I've said we're going to talk about that extensively when I talk about custom elements subscribe to my channel again okay if you want to get notified for that so here let's take a look at the first one which is a more simpler one right we start from simpler and move our way up to something more complex so we'll start with namespace so here we are back at our Rebel over here this is our code and over here on the right is the output so if you take a look when you write div and if we write some SVG elements for example a group element if you go over here and look at the JS outputs you'll realize that they end up a different code which is one is created using a function called elements and the other is using a function called SVG elements why are they different that's because the underlying API is different one is created using document.create element and another will be document create element name space right if I'm not wrong so um why is this different well because svelt has a little how does veld knows that this G element is supposed to be SVG Wells felt uh maintains a list of all the elements over here so here I'm at the source code um and compiler where it sees that over here SVG elements are all this right odd glyph devs animates animate motion Circle color depths and all everything that you see over here so they are created using a different API from the Dom that's why you need to differentiate them but however if for some reasons when you're creating an element and this element is not in this list in this SVG list as well has no idea that this is actually an SVG element then there's one way that you can tell spell that okay hey how how about this all these elements that is written in this component should be considered as an SVG element and how you do that is you're going to use a namespace option over here so you could either pass it to the I'm not sure you have this name space over here yeah you could either pass it as namespace over here in the compile options which you can have a HTML math ml SVG foreign and and foreign over here what we want is SVG right so you can tell that okay hey you create this element using SVG element so you say you'll come over here and write asphalt options namespace equals SVG uh you can close it immediately you can create you can close it later on it's okay but here you see namespace is SVG and you take a look at the code now we're creating elements we even treat divs as SVG right so if you're using other things like say spelled natives or other um compose elements that seems like a normal Dom elements but it's not then you can actually pass different namespace for example Hub but instead you're using document elements maybe you create a new namespace called foreign and you use that to create an element right Custom Custom namespace so this is um the namespace option fair enough right just treat all these elements whether they are using a normal element document create element API because that's only for HTML with SVG or it's other things math HTML and other stuff you use a different you just tell them you just tell spell that okay use a different name space okay so let's move on to the next one which is ancestors true or false right adding Getters and Setters what does that mean okay so here if you have props for example here I have name props I can add accessors which is like Getters for this Getters and Setters for my props so um let's take a look at what does that mean so over here I'm going to copy all these codes and come over here and say component paste this in I remove this okay so here I have my components and if I import this component in Parts component and add this in over here I can bind the instance of this component to a variable so I'm going to bind this to component here um I'm going to add on Mount so that I know for sure this component instance is available and on Mount cover here and say component I'm gonna console log this component so this should gives us the instance of this component so of course I need to declare this variable so here uh probably you can see anything but if you inspect you open the console you should see that okay let me clear this and run this again you should see that this component have some methods to it um most of them are private the only thing that you kind of able to use is if you come over here to look at component API which is this these are the socalled slightly public methods for example sets and for events and Destroy to remove your components right so if you come over here and you set uh you can set uh the props right so here I'm gonna say component dot sets I'm going to pass in a object and here I have name right so I'm going to pass name to something else name to buy foreign update the value of the props using the sets dollar sets method to update the buy a name to buy and you see this value has changed uh of course this you can use this but sometimes you want a slightly easier way of getting the props or changing the props over here there's no way that for you to basically read out the value of the props right so what we need is socalled assessors so we're going to add the swap options to the components that we want to have accessors which is this component come over here and say spell options uh assessors equals to true so false is the default if we take a look here it says false it's the default if we want the asset getter and Setters we need to pass it as true so here we have accessors as true now what we can do is you can convert here and say component dot name equals to buy at the same time if you take a look at one of the components that's log out you can see properties over here right now previously there's no such thing and now you have new property and we can now read the value out and update value directly over here using accessors so now if I close the console and take a look at the output let's see what's the difference right so we'll focus on the components and see the code over here so it generates a class for your component and it adds this to the name the getter for the name and the center for updating the name right under the hood is still using the dot sets method except that it's much easier for you to just call component.dame equals something right so that you can set it if you remove this line or just change this to false then these two getter and Setter is not generated so by default this is false for some reason if you want this you can turn it to true all right this is usually I'm not sure what is being used in real life but one very nice cases that been using is in the test test cases for source code you will see that this is turned on so that we can just read out the props value so that we can verify you can check uh but we can check in our test cases asserts whether the props is right now the value that we are expecting so this is excesses so if you have multiple options that you want to change for example just now we were saying like a namespace and now it's accessories then you use the same Spell option element and add more stuff over here right um if you try to create another spell options elements you probably see that you will say that one component can only have one spell options tag so you can only have one so if you want to have configure multiple of them just create multiple attributes right here now we are fully that's okay for assessors so we're gonna move on to um the last one which is immutable so if you watch my previous videos on spell store you probably noticed that uh in the immutable star we talk about how we use this when we are saying that we want to have immutable data so what is this immutable options okay so here is a ex explanation from my a slightly easier explanation on this option itself so by default uh if you come over here let's continue using this component let me set it up first say for example I have another state object called uh object okay this is an object and has a few properties say maybe name equals my name and maybe ish oh no it's a secret okay secrets so here I have an object and I can show the value of this uh state so I'm coming over here and object dot uh okay let me okay this is not let's just commence this out right hey what's wrong with okay now we have object dot name and is object.h okay so I I'm gonna read this name and of the object a name and object H and you can see this display on the screen okay that shouldn't be a problem so now we have a buttons that we want to uh updates the object right so when I have this button when I click this button what happens is that uh I will set maybe object.name it goes to felt so I when I click this button let's see let's have this button button hey where does my button go okay names access namespace is fpg so it's creating an SVG element equipment element in the SVG namespace that's why you don't see the button over here let's remove this or change it to HTML to tell you that this is the default see the button over here so here if I click on the button it mutates the object uh by setting the name equal to svelte and now you can see this is updated on the screen right I think we've been used to do this for and this is the default behavior of svelt right so what happens is that actually uh what spell cares is uh down to the bottom of this is it only cares about the state variable right so name is not really a state variable it's it's the object itself is a variable that is a state so any top level variables over here that is being that can be changed and is being used in a template is considered as States variable so like name and object over here not this object name or object.h right so every time when you change something when you change this object it will um it will go to spelled and say okay this is changed but before that we also need to verify whether is it actually changed so for example if you come over here and do something like name it goes to world since it's already wool and you try to click and so if you do this you're changing name to bank to the same value nothing will happen when I say nothing will happen it's not like you click and you see nothing and husband right of course it's gonna even if something has happened it's updating the variable wall the name to the value wall and you don't see it happen but when I say nothing is happening has happened is that it's actually nothing has happened so if you import uh say before update so technically this function should call when there's an update and right before something has updated right so if you come over here and register before update and let's just add uh maybe like a console log to let us know whether something is happening like something is updating you realize that okay when I click this button nothing has happened you don't see a before update it's being logged out we change this to world to wall two when you click you see that before update is being called right two times right the first time is when when we Mount this component second time is when you click on the button but you are changing back to the same value nothing has happened why because right before when you assign or right after you do an assign and before I'll say hey this variable has changed and this file does one check it checks whether the value is the same as what is being assigned to so if the value is exactly the same then we can just even skip this update cycle don't run like before updates and you know go and check like updates as elements and then call like after update and all those stuff don't do anything because nothing is Gonna Change um but how about object if you do this if you come over here and do this to object what are you going to compare with if we're going to compare by the object reference nothing has changed right you are mutating the object object reference is still the same then technically nothing should happen but because we've been kind of promoting mutating this object uh in a sense where we're saying like you can just change this object directly and it should trigger a um a change and update so this comparison this compare method of comparing whether something has changed or not is not your typical triple equal it's not your typical referential equal that compares and see whether something has changed it actually has an uh special case for special case for objects and function it treats all objects of function as it's always changing right as long as you do this and say oh I guess object is changing and you call this function a check it will always say that okay if it's on the object it should be changing right I don't check the value at all and if you take a look at this um generated code over here what this function that I just described is called save not equal over here and you can read this Source or save not equal over here let me find it for you it's called runtime internal util it's called save not equal let me Zoom it up if it's not clear enough it says that compare this object right if something has changed or as long as the object is object or function it should be changing just treat it as it will change if you if you assign to something else although you're assigning it to the same object reference as long as you are assigning to an object it should just you just treat it as it has changed right so this is how it is um and you can actually change this Behavior right if you all the assessors that sorry all the assignments that you're doing even to objects are not mutable meaning you are not mutating this object then you can have this flag turned on which is called immutable immutable we set it to true then now it's spelled uh trust you that you say that everything when you want to change it's going to be an immutable change meaning it believes you say that this is not gonna happen so whenever you try to assess or something like this it will just check the object reference it will check your object versus the reference of the object that was currently and if you try to click this button now you see that nothing has happened before update it's not being called but don't forget you are still mutating the objects meaning if you come over here and say uh maybe we add some time out uh some interval to log out the value of the object say here on Mount and we're gonna add this uh when on Mount let me type uh let's interval ID equals to set interval uh every maybe one second I'm gonna say console log object and return clear interval interval ID okay so now every second we are Consulting out the object and when you click yes nothing has changed but you realize that this object name has changed to svelt okay that I believe we have been running this uh there's a lot of things being running because we we refresh so let me just refresh and only it it hot reloads every time when I type that's why maybe there's a lot of things printed out at the same time right so now we only have one object printed once a second so here again when we click the button nothing has changed but you mutate the object and now you see that the object name is spelled emitted object right but then because swell trusts you that when you you won't do mutation right meaning when you do this it will still say Okay I want to something has changed object has changed here okay go and check but now you're not used this uh what's that called again you're not calling save not equal you're not using save not equal you're using uh not equal over here you're using not equal which is comparing uh it's a triple equal comparison to your um to the object right so if you take a look at the source code now scroll all the way down it's called not equal right this is a triple equal meaning if your object reference is still the same we are not considered it as a change right there's no special case for object over here so if you do this then yeah you're not gonna see any changes happening on the screen so the way to now is to do this right object equals to and then you do uh uh you do not mutating object rather you try to maybe update the object over here manually so H equals to object.h right you create rather update red sorry I shouldn't say updates but rather you uh create a new object every time you want to mute it so here you call name spelled and H equals the original H are usually what people likes to do is to just spread this object and because there's a lot of properties that could be changing so you do a spreading uh let me let me oh no wonder it's not working it should be clear interval no wonder it's not cleaning up for me okay let's be refresh again right so here uh you you do this and now uh you look at the object when I click it change to spelled right now you see I'm I'm not gonna mutate I'm I'm gonna create a new object for you right so when is this useful this is useful when you are using when you when you update object every time immutably right meaning every time you want to update something you create a new object or maybe when you're using some sort of library that promises your data that makes your data to be immutable right and you can turn on this immutable flag only on that component when you're using those kind of data you don't have to apply to all the components right some usually when you come over here to your compile options that we've seen so far uh usually you specify this in your build tool to your plugins right or swell loaders or rollup plugins felt so that will apply to all the components but here you are only turning it on for this particular component if your other component is changing object mutably is still okay it is still okay so right now if I look at GS output this is still safe not equal but for components felt if you scroll down it says it's not equal right so this will only apply to one component only so um using if you so the the inverse of it is you're gonna say immutable to be false but that we know is the default Behavior right it says this is the default Behavior so so there you go we've talked about immutable options namespace options and assessors options so options are like compiler options that determines what is your output your generated code will look like where to add extra code or change some of the output of your generated JavaScript code from asphalt source code right usually you apply you Pro you provide this to your plugin for your build system but if you want to apply this only for particular for one component only then you can use these swell options element which allows you to change only this component so there you go spell options if you have any questions any questions comments down below because I believe all these are very different from what we have used to be doing because this is more of a meta level you try to change the output code and tweak a bit on the behavior which we don't usually interact every time when we're using svelt but it is there so we have seen how we able to style our elements in svelts using the style attributes class attributes we've talked about how we can use the class directive that you can toggle on and off apply certain class to your elements and today we're going to explore another features from svelts that allows us to pass custom properties from CSS CSS custom properties to a component and we're going to explore how that help us to style our components control certain Styles within our components well this is actually a new feature added and it's felt in version 3.38 based on this RFC as you can see on the screen RFC pr13 it says passing CSS custom properties to components and it's say that there's a lot of text that you can take a read about this I'll link this in the description explain the motivations and things like that but you know uh it's we're not going to read all this out for you rather we're going to explore how this will help us um in part like controlling some parts of your components uh stylings from the outside this feature will give us one more tool in our tool chain to help us style our components so let's take a look at an example that prepared over here so here I have a button component I create three buttons on the screen with the red button the blue and the yellow and as you can see how I control the style of the components is by using the props so I'm going to pass in a props called button color and sometimes I pass a props called text color that control the color of the text because if you take a look at the codes in this button component you'll see that actually allows two props a button and a text and the there's some default colors so the default will be the red color and default colorful text will be white and as you can see we're gonna use these two uh value in our style attribute so the background is using the button color and the color is using the text color so all good um yeah I would say that this is this is one of a good pattern for you to allow um installing the your components right but sometimes you you might want you might think that sometimes you know for some reasons you you don't want to um use the props to control the style of your components because sometimes you think that a like props should be more of like data kind of thing more for JavaScript site if you want styling maybe you want to do it on a CSS side right so here we have another here I would like to propose an alternative um to what you can do over here I wouldn't say this is better or like worse is it's just like an alternative one more tool in your toolbox that you can use and employ so here sometimes you want to style your elements using a CSS custom properties so CSS custom properties um custom properties that is um that that are not like world uh that that are not defined then you can customly Define so properties are like background and color they are like builtin properties right but then you also can Define some custom properties for example um uh um the way you do it is that you come over here and you add two dashes and you name your custom properties over here so here I can say maybe a custom property called button color um and then I pass in a value so maybe I can pass in value like red and to use this custom property I will come over here and say VAR button color in States right so now you can see all my buttons are in red color so this is the custom property right you can Define it anywhere any element and it will follow inheritance based on the Dom tree structure right so if your parents Define this custom properties all the elements Dom elements based on the Dom structure of the three Elementary will will receive these custom properties and can able to use this custom property right so here you uh we we are defining and using it on the same elements so you can have you can come over here and have a span instead uh and come over here and use this value if you want to so say style background it equals to yeah over here and it does not have to be used in an inline style you can also have uh things like maybe a style tag and say Define like a spine elements with a background equals to VAR background color right so you can Define this custom property over here called button color and all its elements and its element to room will be able to use this custom property um so depends on what the value is you you will use that value over here and you can use this value across a lot of places right it doesn't have to be just in Span background color it can if you have another say a div over here um see some text some text you can also use it uh multiple places right so it's just all all the elements that uh is underneath of all the elements that is within this scope of your custom property will be able to use this custom the value of this custom property over here so as you can see you can have the text and some text in different color and yeah using background and color different properties can use the same custom properties over here so uh what this means is that because you can use this uh element uh this custom property once you apply to one element all these children will receive it right so meaning it doesn't have to be come over here it doesn't have to be within uh this button component you can have this written somewhere else somewhere higher uh as long as it's a parent of the uh of your elements in the elementary structure in your Dom tree structure right so if I say I wrap this button with this uh if I wrap the button with a div and I come over here and Define the style of say button color as read you can see that now this button will receive this button calibrate because these two Now does not have any color plight because the button color is undefined and if you have undefined then the background and color will be undefined so you can uh this so in CSS if you want to use a custom property and sometimes you know that maybe this may be undefined you want to provide a fallback so the way of providing fallback for a custom property will be come over here in your bar you see a custom property name and then a fallback value so here I'm going to fall back to say blue uh and here I'm gonna fall back to say blue as well and now as you can see oh sorry yeah it's not working because I shouldn't have the quotes and now you can see that now uh instead of red you'll fall back to Blue and if I come over here and ramp this uh buttons and I say style equals to button color yellow you'll see that now this will be in yellow color right and so in this is this is all CSS right it has nothing actually has nothing to do with felt um and one more thing I want to point out is this itself can be uh there there is like hierarchy uh there is like inherit some sort of like inheritance in terms of the elementary of of your custom property right if um the when you are reading a custom property you read from a nearest parent that is defining this custom property meaning if you come over here and uh and Define another div that has a style called button color green you see that you still the yellow still applies this is the same as how you add CSS property in your in your style of sheet in your elements right when you when you change the color to green and you change the color in this div to be yellow then all the text will be in color yellow because the nearest parents rule applies right and it overwrites whatever is set out there right so if I if I remove this you'll see that now it's in yellow in green color because now the the nearest one will be this one that's been defined right so so CSS custom property is very similar as a normal property in CSS except uh this is custom you can Define any name you want and you start it with two dashes and you can use it in any way you want uh like like a variable in CSS where you use VAR and then this custom property name and then if you want optionally you can have a fallback value right so all of this is is about CSS we've got nothing to do with components but now we're going to tie it back a bit on how we can use it um in our components how we can use this to style a component so here instead of providing props if we now have another way that we can instead of providing props now we have another way that we can um allow people to affect um the colors or the styles of our elements right here we instead of providing props we now we say if we Define you know docs somewhere like in our component if I say that okay we are going to use this property called button color to style our button then from outside here we know that okay we just need to provide this style like color green then you'll affect a color yellow over here then you will affect the color inside right this is this is somewhat like a props but it works in a element Dom tree Dom element structure way and it works using CSS it got nothing to do with the Spells at all but here once you define like okay I would accept CSS variable like color and CSS uh maybe property called text right let me let me go back to here and say let me revert some of our changes let's say background color it's going to be VAR button color and then fall back to red and color will be using VAR text color and fall back to White okay I forgot I shouldn't use quotes because quote the snow Works in CSS okay if I do this um I can also remove all these things all right just let me just revert all the changes I've made so far now we can don't we don't have to take in any props and we can allow people to come over here and style this right I can see uh text color is black and now you can see I'm styling this yellow button to be yellow color and black and this button to be a div style button color blue and text color uh uh yellow right so some people will prefer uh using CSS to style like everything relates to style use CSS some people may have that preference and this is one of the way that you can use right this is this is purely CSS got nothing to do with uh spell at all it's just about you can use you can pass a CSS custom properties from the outsides and then you can affect Styles and inside of your component uh one good thing about using this method is that you don't have to come over here and reach into elements inside the components so meaning you don't have to know uh like for example uh previously if you if you don't have CSS custom properties to to change the style inside using CSS and you don't have any props to change that the one way that you can do uh is to to use the style to to try to change it right where you would write div and then maybe you know that somehow you know that within a component there's a button so you look for the button elements and you want to change uh something inside there right uh maybe font size 20 pixels and because the button itself is not written like there's in this element itself there's no div button and because this button is written inside the components usually right here with a global so that we can Target uh go buttons that is within not within this component file but it's within some components that we are using so we we have retargeting the div that is scope to these components all the div and if they have a button inside those buttons should be font size of 20 pixel right so this somehow is a bit leaky in a sense where you kind of have to know uh what elements is rendered inside your components of course you can document that you can you can publicly say okay I will have a buttons elements and you can style it right it's up to you but sometimes you don't want to expose that sometimes you know sometimes you're using a button element sometimes for some logic you're using a span or some other elements and you don't want to expose that as a public API for publicly for other people to know um so so that is so in that sense you wouldn't want to do this so here is an alternative where you can use CSS is that okay how about I don't tell you what kind of elements that will be but I tell you like what kind of CSS custom properties I've been using for example in this case button color and text color and just style them right you don't know how I would use them because I may have multiple elements that use the same custom Properties or use a few custom properties say I can use this button color as a background I can use it in my box Shadow and all these things I'll just let you know you don't have to like find a way to override them I just let you know I'm going to use this custom property and you can just change it to change the style of my component right in that way uh you use a CSS comfortable property to override them over here so so there is there you go how to use Uh custom properties to do this but sometimes you don't want to add an extra div and that there is for good reasons you don't want to add an extra div um because if I revert all this you may notice something happens when I add an extra div uh you notice okay not just the color I've changed notice that this button and all this button button itself is an inline element uh display inline block uh you notice that now uh these two buttons are side by side but once you add a div like this kind of create a new uh for Block formatting context which makes this diff uh renders in a new line right so you add Styles over here and you say uh button color yellow and text color black creates a new light right so oh I think I need two dashes over here create a new line and sometimes we don't want that right so if you know okay this is creating a new line maybe we can use a span because span is inline itself but that means we kind of uh have to know like what kind of elements inside and kind of have to decide whether we are going to use a div or span or maybe you know within these components is actually rendering two buttons and it itself may have some sort of uh if if the parents container is using some display Flex or something you may adding an extra element over here means all that your will break your layout right for example maybe you you're using a grid right a grid is a good example because using a grid uh each elements in a grid level uh decides which um where do you place that grid element right so for example I come over here and say div uh over here with a div we're going to use display grid um you create template columns uh I'm just gonna one fi one FR grid template rows okay I don't even need this right you notice that now I have um two by how many however many rows of a grid okay maybe I just do three right uh if you know if I don't have this div all the wrapping diff you'll notice that buttons are rendered in a three by two Matrix but once you wrap with a span over here this whole thing is considered as one right this whole span is considered as one now these two buttons are rendered within a one grid one grid cell right uh which is which is which is not great which is not what we want we just want to have a way to style at like a style custom elements on over here and it now breaks our layout uh it doesn't matter whether we are using default span right it's just because previously there's two elements now it becomes only one element so the way to solve this again we're going to reach out to CSS a way to solve this is to use a custom display value which is called display contents what this display contents means is that uh treat this div itself as nothing SS nothing at all in terms of layouts right so what this means is that I'm it's I'm just don't consider me at all when you're doing layout just consider all my contents right if my contents has two elements it should consist two elements and and you place these two elements separately in your Grid or whatever layout you're using just consider me as nothing consumers has gone I'm not here at all in terms of layout so which means this element itself cannot be applied I cannot have like padding can I have margin can I have anything right just it's just gone in terms of CSS layouts so here uh we kind of solved this with display contents and um and now again we can add uh CSM Uh custom properties to this button right of course this is a very contrived example because sometimes you don't have all these different buttons that you want to have different styles maybe in your case all your buttons are all your buttons you want is yellow and black text button right then maybe you don't even need to wrap div at this level you just need to wrap it over here you just need to add this custom properties over here right uh just need to add over here and all the buttons are yellow color and black right then you don't even need to worry about display contents at all because yeah it's it's this does not matter at all right so the the case that I've showed you just now is when um you want to start a particular button component over here you you want to wrap around a particular components because it wants to have starlings custom properties defined on that is specific to this button itself right so let me revert some of the things uh let me copy back this and I just want to say that it's different because this is green and white okay you can see now again it's not too um it's not occupying two cells separate independently now we use display um contents and now you see there are individual cells so we we have talked uh we will spend the whole video talking about how we CSS CSS custom properties how we can use them what kind of uh situation that you may occur how you can work around and fix it how you can use display contents and things like that so where does this where does our passing CSS custom properties to components come into play well uh we are actually staring at it pretty close right now so here we we say that we come into some sort of conclusion when you have certain scenarios where you want to wrap a component with a div just because you want to style it and you want to have this div to have display contents because you don't want to affect the layouts because maybe this button itself the parent of it has some sort of display grid or display Flex you don't want to break it and you want to have a div elements that you define some some CSS custom properties so that you can um affect this button only and not its neighbor and stuff like that right so um so svelt actually provides a sugar syntax so to to um to have a shortcut syntax to write all this to write this div that as has display contents as custom properties applied to it right so it's a shortcut uh it's a sugar sugar syntax what it means is that we write some nicely written syntax but under the hood it's going to translate into what it is which is what we're going to see over here right what you're going to translate is you have a div and display contents and all this thing over here so let's let's see how the sugar syntax looks like so here instead of writing this we can have okay I think these two props are useless so we can remove and just to compare I have my original code over here and I'm going to show you how it will turn out to be uh in in over here right so the sugar syntax is that you can have a props that starts that starts with double dashes and you can name with uh you can have a property value like this right and now you can remove this div yeah and both of these looks the same I will inspect element you'll notice that this and this is actually the same exactly the same just that allows us to write this way it looks like Slicker you don't have to figure out you don't have to write display contents you don't have to write extra divs uh your your code looks shorter and nicer sweeter because of the sugar but under the hood it's actually doing this right this this just translates to this and then you you um yeah and then you get spelled to uh render whatever to control this div right and also what this means is that we've seen previously where we can have Dynamic styling from on the diff where you can have say color over here a property called color let's that color equals to Green you can have that over here as well color um and then this variable itself can be dynamic so if I have an input type color buying value equals to color you can see over here if I come over here and choose uh pink you can see all these button colors change so this is dynamic right so uh here you go passing CSS custom properties to components um so one caveat over this is that this is this custom property these custom props that you pass in as a custom property for your component um um has to be written this way you can't use a spread props meaning you can't actually spread it uh if you have an object that have discount property right this does not works because um it's a limitation of this this custom properties for components right now because in compound time we actually have to know what this uh what what are the whether you have an extra whether you have custom properties uh defined on this CSS custom property defined on this component itself if you do this and you have like some sort of variable that you can spread over in compound time there's no way to know whether you have custom properties using right with custom properties then you will wrap the component with a div without then you don't even need this div at all because yeah pointless right so you need to know whether you need to create this extra diff compile time that's why itself cannot be spreaded across this this custom props cannot be spreaded so I hope that explains why and the limitations of what you can do and of course you don't always have to reach out for this as I explained earlier you can also Define custom properties over here if you want to when you want to wrap across all the components you want yeah then you don't have to actually reach out to this this will be even better but instead of having like wrapping all the button components with extra div elements So today we're going to talk about ad HTML so what is it well we shall take a look so imagine you have this scenario where you have a HTML string that is dynamically generated and you want to insert all this HTML string in somewhere in your head in your document right in your Dom so what do you do so maybe you can use an action well let's take a look if if you want to use an action and how you would do that right so here I have a div and a text area that I can edit my HTML so what I need to do is probably use an action over here uh inner HTML and I'm gonna pass my HTML into this action right so let's define this uh this action so I can have inner HTML as an action that takes in a node so node will be the div that I'm applying this action to and the HTML which is the text that I'm going to pass in over here right so usually what you would do is maybe you want to add all this HTML inside this element right so actually dump your your Dom API provides an API called a you know HTML so you can say node.inner HTML equals to no it goes to HTML right here you see that you get this is a baltex and click me button right that's that's easy right so next thing is if you try to update this uh return so you need to return an update method over here HTML what we need to do is constantly update the in the HTML of your nodes so if I type something it should update a sequence uh update on Demand right as you as you change the text so you could use this um action to achieve what you want to do but that's an even easier way to do it in sveld which is used at HTML so as HTML actually does all of the above that we have done so far but using uh but we we've packaged it up in a nice API which is called at HTML so let's write add HTML and you can throw all these things away and here you pass in an Expressions so an Expressions can be anything that just form a string that you would like to be installed as an inner HTML in your in the element so you would say HTML over here and now we remove this action see that everything still looks the same and you don't have to even handle the case where Dynamic taxes text you can change it dynamically it will update by itself that's good right so um sometimes uh this is good enough for you but sometimes you have some requirements right so sometimes this HTML comes from some API somewhere that you can control um but itself have some some parts of the HTML is Interactive right so uh there's two parts over here so if this HTML is somewhere that you can't control at all then you kind of have to insert it as ADD HTML over here right uh dynamically update it right but if it's somewhere that you can control then my suggestion for you would be copy all this come over here create a new component paste it in and then just import it right then um then it's once it's a lot way easier to add interactions to elements over here for example adding on click for the button have some Dynamic contents to update the text things like that right but how about your case that is that you can't control for example this text is being clapped out over here um and so so the text is generated On Demand on the Fly uh somewhere that you can't really control like for example this is being typed out by the user and now uh the tricky part is you want to add interactions to some of the elements so for example you want to make all the buttons click to have a kind of like a similar click you want to have a click Handler on the buttons right so each button probably has some ID right over here I have some ID uh XYZ and when I have a quick function I want to know for example here I want to know uh maybe once the buttons ID and I can do something with it right so here I could have say event.targets uh dot ID and I just console out but you know I can I can do anything with projects right the thing is how do I attach this event listener to this button that we just generated so this is tricky right so when you right right now when you want to do it you realize that you haven't have the reference to this to any of the buttons yet so how do you add event listeners to the button right so where you have to edit is you have to add it during on Mount why because before once models and only if you do it over here for example you come over here and say document.query uh selector button and you will add event listener you realize that uh realize that you have error because the button you can't find the buttons yet because the button is not yet available for you so what you have to do is come in here use unmount and then run this during unmount so I can come over here and say on Mount and find the buttons and then add event listener right that that's that's only when the button is available for you but in this case it's a bit tricky let's select all the buttons on the screen right uh meaning uh because your query selector on a button on the document so if if uh if this is an optional uh if if I said for your situation that it's possible for you to find out all the uh like a container elements then a better way is you have maybe like a div buying this right you have a container reference a container and you use that to query all the buttons inside this div right so this is slightly safer than doing a documented query selector all right you're finding all the buttons within the documents right so here we only find all the buttons within this div so hopefully that's only limited to only this HTML buttons over here so over here I add event listener um and I console log click right now you see that it works however if I'm going to change this now this most likely will set in the HTML updates all this all everything over here replace the HTML text which then will uh by for the browser it means to recreate all the elements right now when you click on click me nothing happens so what should you do now well uh one way that you can do is um have a way to uh runs every time on HTML changes right and that is to use a reactive statement right so you have over here HTML and then you would do something uh Dutch button this so what what this line of code means is that forever for this is how a reactive statement works right so when you look at it you'll see two variables over here HTML and attach button listeners whenever either of the uh whenever either of the um either of the variable has changed then this statement will be reruns right in this case since function attach button listener is a function and we never change it then it's indirectly means that anytime when a HTML changes uh this this whole statement is being reevaluated because uh you can write this way as well it doesn't in our case it doesn't really matter because HTML is kind of always something right so if you write this HTML attach button listener then yeah you want to do something foreign selector you'll realize that there's a few errors first is that div is not yet available because you have a mount a you you will run this you either this first before your first mounting any elements right so relative statements or reactive declarations will be run uh even before like after initializing your component but before you try to mount the elements when you're trying to create elements the all the reactive statements will be run because sometimes you want to declare some reactive variables right and you're going to use it in a template so this has to be run ahead before you before you actually create an element and mount it on a Dom so over here diff will be undefined um so what do you do in this case I would think that um we would either check like we could check if div is it's not available then we return right so we we over here if we look at console log every time I will change something where I said it will be Evil Dead but again this is going to be evaluated before we're going to update something so um what this means is that if you notice that uh I uh although I I I type and I'm gonna call this every time but when you click nothing happens why because this runs right before any changes right because you you want to if it's a reactive statements or variables that you're trying to update it you want the variable to be updated before you actually make changes with them right before you update them and things like that because you want the variable to be ready first right all those reactively declare variables to be updated first before you up to the top so over here when this is being run you're actually accessing the old contents right you are finding all the all button and then attach event listeners to them so this is not what you want what you want is you want to come over here at tick you want to wait for a tick before you oops you want to wait for a tick before uh before you actually search for the buttons and then make some changes right so now once the tick is done actually the div is also being defined because the tick happened the tick will be resolved the tick will return a function that will be resolved when updates or mounting has has done if you're not sure about how tick works I have a video about tick you should check that out links in the description and hopefully you're on somewhere in your screen right so uh we wait for our tick and then we select uh so we wait for updates as wait for updates happens and then only you look for buttons and attach even listeners right so here if I click now you can still see a click me I'm gonna change something and then I click this will still happen because uh you will anytime HTML changes your your way for the changes to be applied then only you figure out uh you find the the newest uh buttons and then you attach event listeners so here we always attach event listeners um but we never remove them so will this be an issue and how do we resolve it right so here uh let's let's try to just use this event listener in States no matter no big deal it's just that uh it's easier to remove this because we can reference to the same function right so here um this still works right we still print we print out the XYZ of the button so if you have multiple buttons over here I can use selector all and then for each button button dot add event listener all right so here if I create more button ID equals to exact click me to whoops what's wrong with this okay okay so if I click this you see exactly it click this you say XYZ right and every time we change something uh everything still works but we actually haven't we haven't removed event listeners for for previously selected button so here what should we do is that we should as I mentioned here we kind of know that if we call this is every time when a HMR changes right so there's two phase one is before you want to create uh any elements right the first time when the component is mounted you run this uh first and then only you mount a component and we use a tick to wait for that mounting to what be done only we select for any elements and updates attach event listeners right the same thing happens when HTML changes you call this function but that's update hasn't been done right you call this function so we wait for tick we wait for the changes to be actually applied to the Dom then we select the newly created buttons and attach the balances so there's there's always like before the update is done which is like the prior right which is over here before things has been updated or before the things has been created over here we can actually find out all the buttons that we have over here and then um remove evaluations from them right so here uh I would need to check if this is being defined first because um there's two cases right one is mounting One is updating right when you're mounting the diff it's not even existed uh you don't even have any buttons that you can query for right so if you you check if div only you try to if it exists then only you try to remove any evidence from the buttons right over here I'm going to copy the code and say button remove event listener click all right so now uh although if you take a look at the code nothing much has changed but we remember to remove event listeners that we just uh added to to their uh add it to the buttons right and that's now we have we handle the mounting case and the updating case we actually have a handle one case which is when we try to remove unmount the component right over here when you unmount the component this will not be called because HTML is not changing we just just want to remove the component right so right before that we still have one last chance to do cleanup which is living on destroying so on Destroy we're going to come over here on this drive I'll just removed I comment this on this try I'm gonna find out all the buttons that we have and remove event listeners so now when you detach I remove this container all the all the buttons has already been clean up with all the event listeners so here you go here is how you would have to if you want to not just adding HTML string as as part of your container you want to add some interactive like event listeners and do something you would have to do this dance of um a wait for the content to be changed before you apply some changes right and if you want to add event listeners remember to un remove event listeners when you're not need you don't need them anymore uh of course uh depends on your design sometimes you don't have the luxury of having uh a div container that wraps your elements right in this case uh HTML you have to write it at the root level well then it's um how do you Scope this so this is just about like how how do you Scope the query selector right um uh if you ask me I would say that every time when you want to apply like when you have something like this and you know that you want to find out all the buttons um probably you can add some hints to the HTML right so for example over here I can see because this is a string right so I can come up here and replace all I can replace all pattern text ah okay uh so so the thing about here is okay is I think it's just a syntax highlighting uh I can replace all button text with button and maybe add some data attribute that I can query for so special okay uh lee how right so I I replace all this button to be button data special the house so what does that mean if you inspect element over here you realize that um this line of buttons that I created all have this special attribute called Data special my name right so here you don't have it here you have it so uh this is because HTML is just a string right you can you can replace string you can make some manipulation before you insert HTML into the Dom right so here you kind of have some way to scope up all the buttons that you only created in this component so maybe this is a string that not just the harmony dynamically generated you ID that attached to this component and now what you do instead of div the query selector all you come over here and say uh document like query selector all button with this special attribute data special equals the how and then for each of them you attach event listener right and now if you try to click this yeah so uh I think it's just like the hot building something messed up just now so now if I try to click me you see that this this works and we only scope out to the buttons uh that has this special attribute called lihao my name right so any buttons outside will not be selected right so you can remember this is just you can pass in any string and even if it's a dynamically generated string that provides to you you can still manipulate the string replace like the button to add some special attribute things like that of course this does not handle some edge cases where maybe this is part of your text that you don't want to be transformed this is some button that you want to replace you want more sophisticated things then you have to have some more specific way of doing the replace all right but this is just a way to this is a very simple case to demonstrate for you that you can do a simple replace all to um to scoop out the button that is only at created via this HTML and then only attach event listeners to them right only at interactions right so you don't affect other buttons outside um but if you're lucky enough that you have a container then I think the easier way is to just uh query selector from the content itself so only find out all elements but if you're unlucky enough to have maybe like other buttons over here then yeah maybe you would have to do this to only limits button that is created only from this HTML so let's talk about at debunk so this is a very useful uh tag in svelt that allows you to help you to debug um some of the data that you're using in your field components so let's take a look at an example and see how we can use this at the back tag in as well components so here I have a components that has a written array and attacks a value right so I look through the array to render some input tag and also use an input to bind some value so I can type on it so as a type yeah you can see that it uh you can't really see a data change unless you try to come over here and say value so that you know that you're actually updating the value so when you type you see that the value is changed maybe this is okay for you but let me show you an alternative that you can use as well right it does not mean that my alternative is better it's just that more Tools in in your toolbox so that you can try and mix and match different kind of things that helps you to debug your application so here instead of using value I can use add debug tag so I say I will write start I will start with a curly brackets and say add debug and then I can pass in any Expressions that I want to debug so here if I say I want to debug the value or say I debug value immediately you can see in the console you see it's printing on the object with a value and a value of the value itself so as I type you sure enough you can see that this value is is updating you'll see more things printing out in the console and one script about this is that if you internally inspect Elements which is when you try to open up your Dev tools and one when you try to type something uh the debug tag itself also will send a debugger so here you are you are you are breaking so the the Chrome Dev tools will break at a point where we are printing out the value of this value right so here you can see that's what that's how this value is being printed out console.log value and now you all console can do things like getting this value and you know type out in the console say what is the link um do something and check check some other things right so if you have some sort of complex object that you're trying to log over here then this is very useful where you can uh like you don't have to manually set a breakpoint somewhere within your Spell components uh this will get triggered will be tripped and now you can um yeah open up console and check things like that right so let me close this and get out from the debugger um and I want to show you one more thing right so besides like using this debug value and like in the normal input value or things like that okay it doesn't have to be in value you can come over here have some uh reactively declared like a double equals Value Plus value you could also have double over here right so every time you change you see double bring that double over here so besides doing this at the top level you could also have this debug tag somewhere in in inside like each tag or if tag uh each each block or each block uh why is this useful this is useful when you know when you're trying to iterate through an array and uh you want to debug like a certain item inside the array and exactly ah I want to take a look at this item over here here right I want to I want to look at this um uh what are all these item value is right so let me let me remove this depart let me just comment this out I want I want to debug what are the items available over here and if I try to type something and see you know uh it will print up more and I can say that oh this item value is 12 right it would be useful for me when I have a breakpoint I can break this uh at the particular item but of course uh you see that every time I change something I'm updating the uh the array itself so all this uh all this item is being updated and um too bad there's no way that you can just limit scope limit this debug in for particular index um at least you don't have you can't do it this way so a trick that I have is I can have each each block if in the index goes to say I just want to check those the second one which is index at one and print out this debug right so now um I when I change something else it's not cheap anything only when you know what I think this is a bug and I'll probably fix this so um if you're watching this video uh right now I'm using at version 3.32.8 uh 38.2 um this does not work but I'll try to make it work in the future versions and hopefully this will be very helpful that you just need to you know debug at a certain item and and see it changes right so uh yeah too bad I feel this is a bug but anyway I hope that you learned something to use an ad tag so today I'm going to talk about module contacts in svelts what is module context well we shall take a look at examples and we'll figure that out along the way so let's take a look at examples so here I have my app and I have a component called map this is a very contrived example I tried to come out a very convincing example but I feel so this is a very very contrived example but it it serves its purpose well I believe to explain this concept for you okay so bear with me with like unreasonable variables over here so I have two components I have one components but use it twice I have two maps over here and I have inputs okay so over the map components uh I have a div so this is one map component it says it has some uh it it has it Imports some stores and it has some buttons that you can click right send me and who sets so the store itself um because we want to share it across um components as in it doesn't have to be across like component a and component B it's more of like across all the map components instance then I probably would have to create this store somewhere else outside the component and to be able to use it and import it over here right because if you try to create a star variable over here like I try to say import writable from svelt s spell store and try to create a star from here what I end up creating is this store is actually like a stitch within this component um so if I have multiple map components I will have multiple store created and that's not what I want I want to be able to share across all the map um all the map components that is going to be created so what I do is that I create a new file external file and create and store here so all the every time when I import here when I create a new map component where it imports from this store they're actually importing from a steam store right it's the same store instance so there's only one instance sometimes you call this a Singleton because it's just single one done right so if it's a single turn one star instance then I would have to ex move it out into one separate file and import it from here right so here I have a map store file I create this in store instance and I import it into the map component okay so uh so this is the map store and I also use this uh star uh over here in the app component right so here in app component I render uh inputs that I can change and I can update the value of the store from from the outside right so that's um so this star is like external where I can import from uh I can import from across multiple files but and use it and update it there right so here I have some problem over here I wouldn't say a problem but um I have some questions over here where I would think like is there a better way of writing this is that the map store itself uh we kind of agree that I can't in create this map store within this map component because it will end up become like a state for this component I want it to be a Singleton I want one instance across all components but this map store itself is uh it's very couple or related to this map component right so um I doing it this uh imported from separate files feels like they are two separate things so um that is something that I doesn't really like so this is something that we're gonna take a look and how we can fix it later right uh so now take a look at another file another file I have is called a map data so this is also an external file um where I have variables up that exported so this is again like a single turn right this is a module oh no matter how many people import this module there's only one instance of this module so there will be only one instance of the current map and I also expose functions to update this current map so what this current map does is that no it's contrived but what it tries to do is that it will take in a current map for now this current map is like a div that wraps around each of the map right it takes in this div if it's uh there's something that's set as a current one I will set the border to none and then um so this is kind of like reset the previous set previous current map and now we're gonna update my current map and also set a border so that you can see that it's being set this is the current map this is the value of the current maps right now so uh so fair enough so here in my map I have two buttons when I click Send me is to set call Set current map the current div so that you can see that it's it has a border so that visually you know that I have updated the value um but uh you want to actually know whether the value then I have another button called who sets that will console out current map so this is what we exported so you may not know this this may still this may feel like a variable that you to you that uh does it gonna be updated but it it will right it it will because uh anything that is being imported is actually a live binding anytime when you try to out the variable value over here like this this variable actually will be updated live uh this is uh this is not some magic from spell this is actually the specs from JavaScript okay so if you import something uh if this is a variable uh like you do export let something or export con something this variable itself okay export coins you can't change because it's a constant right export let something this variable itself uh if you update it from anywhere uh wait I'm not sure about anywhere but if you update it from a file like here uh this real value actually will will change right this will actually change um so uh let's see so let's try run something right so here I call set me so this has a border and I call whose sets you'll see that in the console so I will print out the the current sets value so I click whose sets you'll see this div if I hover it you see which one is being turned on right so if I click on this button it is still showing the same current map if I'm trying to change this sent me now if I click who sets you'll see that now it's uh log print out this different state this button is the same thing right so now I can change my div and I can print out who is being set that's great um so what is this context a module context thing how does this help me improve my code um I mean in this situation over here um so map data again like map store I'm going to say is that this current map and this Set current map is very very tight to this component itself right if it's possible you want to actually write them in the same file but unfortunately you can't right because if you try and declare current map in this map as well if you say let's current map then these variables itself over here will become a state of this component which is not what you want you want to share this variable across all the maps instance right as you see just now when I try to click who sets across this current map is the same value across and it's being updated with the same function to update all across them right so this is something that you you wouldn't want to put it in the Sim that you can't put it in the same file but with model context we're going to show you that actually you can there's actually ways to do that so um remember the point the time when I say that a file you can only have one script tag well I kind of actually lied a bit because we haven't learned about model context module contacts is actually telling me us that uh you know you can have another tag another script tag but whoops you have another script tag but this time around uh yes you can only have one script tagged but this script tags we're gonna add module contacts which is I'm going to say context is module when I do this you see the errors is gone so this script text and the this script text is different so take a look at the errors right let me remove this and look at the errors it says one component has only have one instance level script element instance level so uh what's felt called this script tag is actually an instance level of script tag right instance level of the script element so instance meaning for each of the instance you create like variables right so these variables are for are created for each instance and therefore they are like States within your component every time you have a new map component you have a new div variable uh for for this new map instance right but if you have a context module over here this is a module level uh script it's not instance level so anything they find over here is is on a module level uh do you hear what I'm trying to say is a module level so meaning previously I say that you you have to import over here and you have a module Singleton you import from this module everything over here is defined like in a more in this module and everywhere you import is important same thing this is actually creating a model inside your component and anyone can import or do something like this this is shared across this is this only have one copy for one module um and therefore what we're going to do is we can actually copy these two file this the two code from this file into this uh context module and and you can just refer it directly over from your component so uh that that makes us have uh just write one component file and and have a code that can be on variables that are like instance level are like states to your components and as also variables that are like module levels so like this content map is module level all the instance are importing from the same level so if I come over here and Define current map uh of course this this has conflict but uh right now I'm gonna just uncomment I commence this out I'm gonna say this current map is actually just one copy of current map um um and so what happens later on is that when you try to call sets you're actually updating one copy all the instance all the component all the maps instance that you're going to create the two different components only have sharing one current map variable right here I'm going to copy this function as well to set current map to come over here and do it over here right so now your Set current map and current map actually interestingly they are available over here in your everywhere in your code right so now what I'm trying to do now is that I'm going to click Send me uh and and I'm gonna open up the console again and take a look at what is whose is being set right so now this variable is like a module level it's not your State anymore and if I click who said from here it's pointing this who said from here is still pointing the same variable right they are actually pointing the same variable they are not like States in your component I try to set me over here click who sets is this who said from outside is still this um this this div right so they are actually being shared across all the um components just like how you would write it over here uh one module and every component is important in the same module right so this is a module level variables functions and everything that you can think of so um before I go ahead and talk about more you you may have questions like how how would this be different from um from other states like yes I I get what you're trying to say but why is this different right how does spell um create this like module instance for me and actually there's no magic to this right so you know like every spell com file like the file that ends with DOT spelled it's going to be compiled down into JavaScript right and and you import this field component you're actually importing the file you're importing this file and it export default the component itself right um so this is actually a module that you're importing right it's because it dot spell file it's actually a module and you're importing and all this code over here if you open up the JS code you realize that all of these are being um paste it over that's that's fine it's actually on the module level right over here so this is socalled module level uh it's it's in this JavaScript module level so let if you have other things like like States like for the div they are actually defined inside this function called instance so this instance function is being called every time when you have a new map instance component being created right so this variable every time we have new map components this new instance function being created this new variable is being created and and being used but variables or functions over here like current map and Set Card map are defined at a model level there are paste like they are copied over at the module level so JFL does not do any uh Magic over here anything that you write on the content or context module over here will be pasted over here no no magic over here at all and no reactivity at all you can't really expect that you change this um this this variable over here and get everything to be updated you still need like a start you still treat this like like a shortcut of not having to write a separate module file to declare them just paste everything in here and if you want the reactivity you still need like you want to up you have you want the store like reactivity you still have to do that um yeah so now I'm going to copy all this over here as well and create a yeah a map value so now I don't need this I can directly use this map value over here and do you notice that I do the export cons over here so if I export things over here this uh being exported like like a module right this is module level so I can import map value from this map dot smell so personally I'm import this over here now I can write this like this I can import map and map value this is a module level export and get if you use exports in the instance script tag that could be a props or could be a component method but if you have it over here then you're able to import it in your module so this is like a module level export so you module you import like a module name exports from a module right so you do it over here so one thing you can't do is export default over here uh because you already have export default which is the component itself so so you can't export defaults in a module context hopefully that's reasonable so we have everything copied from the two files map store and map data into our component as a con module level module context and let's try to see whether everything still works as previously right so the star still works as we said just now and so here we see that we have a function called Set current map and actually it does not matter whether we you define this function over here or actually in the script tag the instant script tags um that's big so you may ask like okay will this be um creating an extra functions every time well it depends uh spell actually will do some optimization so you will see that well this function is actually updating something uh that is like a state or it's it's not a state at all right so this is not a state if you take a look at the codes you would probably realize that um like this is still at the module level right so it doesn't really matter whether you you do it at over here or within an instance right but as soon as you try to set something like this then then that's a difference that's a different story you you make it um inside as like a States methods right so here um since we can do it this way we can update this current map like this then we might as well not have this function at all and in the sets me we just directly sets you know our current map so you can you can directly change variables inside the context module context you just can't assume that it's like a state right so every time when you so what it means what that means is that if you try to say Define maybe a variable like count over here and I I'm showing this count right you can see that it is one for now but every time when you're trying to change it uh on click cons plus plus you you can't really expect it to change it it does not work this way you have to you have to think that all these variables are like variables that you have defined in external filed external modules so when you have this usually what you do is you make it the writable star right and you that you update the very valuable value of the star using a dollar sign to reference it and to update it right so this will update all and you can see that this shares across all instances it's it's not a state of your component so hopefully you get that right and that's all for now here I have a task list application where I can add more items or remove them I'll create more lists and remove the list so here I'm going to take a look at another implementation of the similar application so here I have the same Task List application where I can add items or remove them add a list and remove the list notice the difference yes the second application feels more fluid because we added Transitions and today we are going to talk about how you can add transitions in this felt let's take a look a bit on the code structure before we get started so we render each of this list within the each block and depending where the the list should be shown or not we have a h block and then for each of this list we have another each block that Loops through all the items and then here is where we each of the items is rendered with a list item to start using transition since Felts we need to import spell transitions cell transitions provide five builtin transition fade blur fly slide and scale and we are going to look at how we can use them in the example to start using transitions you can use the transition directive here you type transition colon and the name of the transition in this case fate so here I add transitions to the list so when it's added or removed it will fade in and Fade Out you can add arguments to the transitions in this case we're going to add duration equals to four seconds so now it will fade in four seconds and fade out within 4 seconds to look at a complete list of all the arguments you can provide to the transitions you can take a look at spell docs under the title of spell transition here you can see that fit takes in three arguments delay duration and easing next we are going to make the item fly in when we add or remove the item so I'm gonna add the flight transition so flight transitions takes in the X and Y offset which means that in this case the item will fly from 30 pixels from the right if I want the item to just fly in but not fly out I can change the transition directive to in now the item will fly in but not fly out and similarly I can change it to the out directive then it will not fly in but it will fly out so I can use the ins or out directive to control the enter or exit transition this also means that we can have different transitions for enter and exit in this case I want to fly in but I want to blur out we are going to look at how we can coordinate between transitions so take a look at this example if I click on this button the item will fit in and the item supplies it are slice in at the same time right let me do that again two transitions happening at the same time is it possible that we can coordinate them such that the first transition happens at the first and then after that subsequently on the next transitions so it is possible to do with a property called DeLay So in here we can look at transition phase tickets 400 milliseconds over here on all the items we fly in and the default delay is zero seconds so which means that these two transitions is happening at the same time so if you want to make this happens right after the fade in of that list what we can do is we can add a delay of 400 milliseconds as well so this fades in in 400 milliseconds and 400 milliseconds later the item flies in so let's take a look at the effect right take a look at that again so 15 and then after that slides in so if you don't want the elements say in this case to slide in all at once what we can do here is we can have the delay based on index of the item so for example if I add an index so this is the index of that item we can add 400 milliseconds times uh but plus index time 300 milliseconds right so it depends on where the item is it will have a different kind of delay right so let's take a look at the effect right now if I have multiple items close it one two three right one two three so here is how you can coordinate in between transitions using delay so the next thing I want to show you is this let's take a look at what happened if we close this list well it's not that obvious but let's change this to slides and let's take a look at it again so when I close this and focus on this item When I close this it slides up when it close right because this element is going to be removed together with the parent and when it's being removed it will play this out transition right but what I want to do is that I don't want the transition of this element to play when I'm removing the parent I'm okay when I want to remove this elements itself but I'm not okay to play that transitions when I want to remove the parents so what I can do here is to provide a modifier called local so let's take a look at how this local effect When I close it does not play the transitions right so the local modifier makes that this transitions will only happen when this element itself is being removed or being added but if this element is being removed together with the parent the transitions will not be played right so if I removed it you can see the transition but I remove the parent it will not play the transition so if you take a look at here when required to add an item it takes a while to be added and it takes even longer to be added for the third item that's because the duration for the transition elements is based on the index so that is what we're going to fix in the next video So today we're gonna fix the bug that was mentioned in the previous video so the bug was like this we added a delay based on the index of the item in the list so that when we have multiple items when we try to close it and try to play it the item is added in succession however because the delay is based on the index um the the transition better is coming in is being added as item or the transition is being played together as the with the list it's the same transition so now the delay when we add the third item is going to be very long because that is how we've coded over here so what we're going to do in this video is to try to see whether we can have a condition for the delay so we're going to have this condition based on whether the list is being shown if the list has been shown then whenever we add a new item the condition should be true and the item should be added with no delay if the list is not on the screen try to add the list item then the condition should be false and each of the items should be played with a delay so over here I'm going to have I'm going to write this condition list dot shown then the delay will be zero and if the list is not being shown the delay will be based on the index so now what we're going to do is how or when are we going to update this value the list are shown we can do this using a custom transitions event so on the list item we can have a few custom transition events such as on intro starts on intro and on outro starts and on outro n as if the name suggests interest time will be played when the intro transition starts to play and when it ends it will call this event handler and if you have outro when it starts playing this event will be triggered and then when it ends this will be played all right so these are the events handlers so now we can add event transfer for intro n and outro n I'm going to remove these two so now intro n we're going to set the list start shown equals to true and on the outer land we're going to set list dot shown equals to false so let's see what we have right now when we click on it you have a delay so when you click on this element you have a sudden delay when you are showing the item but when you're trying to add a new item because the list as shown is true there's no more delay I try to close this and try to play again the delay is based on the index if I add a new item it shows immediately so a summary of what we've done so far we have a custom condition to determine what is the delay of the item and then we also seen a custom event for transitions such as intro start into n Ultra start and Ultra n so we have seen how we can use delay and duration to customize a transition but there's one more thing that we haven't covered which is easing easing can add a lot of flavors to a transition and that's what we're gonna look at in the next video in this video we're going to take a look at how we can use easing to add flares and add flavors to a spell transition so the first thing is what is easing so easing is a function that specifies the rate of change of the entire duration of your transitions so there's a lot of builtin easing functions from spelled and these are all of them right and you can visualize them through each visualizer over here we have each visualizer open what we're going to take a look at is firstly a quad is in easing function so this is the shape of the easing function so on the xaxis is the time and the yaxis is the value of the animation that we are animating right so in this curve if you play it again you can see that how does it takes from the beginning point to reach the destination point right so different kind of easing functions have different kind of curve for example for this elastic it moves towards the destination and goes further from it and goes all the way back up to the destination so different easing functions will give you different kind of flavors in your transition right so let's head back to the task list and let's try one of the easing function to use easing we're going to import it from the spelled easing so in this example we're going to import bounce and out ROMs felt easing to use this we're going to copy the name of the easing function and we're going to find one of the place where we have like so in this case we are going to add it in the fly where when the this items flies in I'm gonna add easing to be bounce ins out so take a look at how it will look like now so the element will fly will bounce in when you fly in right probably let me add this to have a longer distance for the element to fly in and probably that would be more obvious all right it says like that it's shaking over here uh we can add slightly long duration to make it even more obvious right so that gives us a different kind of although we are using the same transition which is to fly in from the right but then with easing functions we can control how it flies from the source to the destination so let me try another easing function and in this case we are going to use sine out I'm going to replace it over here and let's look at how it is different right now begins slow and then it accelerates and move to the destination if we remove this all the way you'll find that the elements just fly in without any acceleration right so easing functions you have a lot of different kind of easing functions that is built in from swelds you can import damps from Spell slash easing and the list of all the easing functions are specified in the swell docs and you can visualize them with each visualizer today I want to talk about something as important as making a site cooler with decorative animations or transitions because some users outright experience motion sickness when faced with Parallax scrolling zooming effects and so on I mean vestibular disorders reactions includes dizziness nausea and migraine headaches so today I'm going to share with you some techniques on creating an open and inclusive spelled app we're going to continue on this todo list app which we added some transitions such as fade slide and blur when adding a new item many operating systems have accessibility settings for specifying a preference for reduced motion on the web we can use media query such as prefers reduced motion which was introduced in a media query levels 5 to detect if the user has sets an operating system preference to minimize the amount of Animation or motion so now we are going to take a look at how we can utilize that firstly svelt's transitions or animations depends on the CSS animation so we can use a media query to disable or set the duration of the animation to be zero so right over here I'm going to add media prefers reduced motion to reduce so there's two values that you can provide for this media query sorry for the typo which is reduce or unspecified so if the user chose to prefers A reduced motion then we can Target the element that has animation or transition and add animation duration to be zero seconds I'm excited to important so that it always has the highest priority right I'm using a star over here because I'm going to Target all elements but you can do that for in this example would be div you can do it to div only as well so it depends on your use case you can use a star to Target all the elements in in this component or you can Target specific elements in the component so let's let's try that out right now if we click on this button it has a transition to emulate prefers reduced motion on Chrome you can go for the Chrome Dev tools and then search for rendering over here there is this emulate CSS media feature prefers reduce motion so if you choose prefers reduce motion to reduce and let's try to close this list and try to open it again now you realize that there's no any transitions for this container right although there's still transitions for the item that's because we are using a list items instead of a div so over here we're going to add list and now the item itself does not has any transition so you try if you try to open the list you may realize that there is some delay on the item showing up on the screen right so when we use CSS a solution to disable animation duration by disabling how long it takes for that animation but in this case we still have a delay when the item is showing up on the screen so we need a JavaScript solution so that we can pass a different delay for the transition over here so the delay right now is based on list shown 0 or 400. plus index times 300 so we need to add another condition over here where if the user prefers reduced motion and that's what we are going to do now so over here we're going to have cons media query it goes to window.match Media prefers reduce motion to reduce and the value where it matches or not would be media query dot matches so this will be computed at the very beginning of your component and depending on the user which I think is unlikely but there may be user like us where we try to switch between reduce and no Emulsion back to reduce so if you want to check that as well you want to constantly update these variable matches you can use media query look at event listeners change and you can update the value of matches equals the media query that matches right in that way the matches will always reflects the latest CSS prefers reduced motion right so the user may go on to the system operating system settings and change it and you want that to reflect on your spell component immediately then you would have to listen to any media query changes for this prefers reduce motion and now we know that whether it matches or not to this media query so if it matches which means that the user opted to reduce the motion then we are going to pass this in as a direct condition for the duration all right so we're gonna add here our matches then if I click now there's no more delay for this item to come out on the screen right another alternative that if you don't like to pass in a delay or duration for each of the transitions depending on whether the user opted A reduced motion what we can do here is that we can create a custom transition right so I will talk a bit more on custom transitions later on but over here a custom transition is none other than a function that returns an object that describes how your transition works over here we can pass we can return a delay of zero and duration of zero so meaning this custom transition is actually no transition right you can still pass into the transition directive but itself has no effect at all because it has no it has no duration it has no delay it just happens immediately right what we can use here is that we can use this node transition and then we can have what we call a reduced fly is equals to whether we matches the user preference for reduced motion if it if thus we will return a node transition or else we will return a flight transition from the spelled transition right so we can use this reduce fly instead of the builtin fly this way this reduce fly will have no effect at all you don't have to use a custom delay and whatnot and this itself will be a no transition if the user opted for a produced motion and it will be back to a normal fly transition if the user didn't specify any preference all right so let's try it again it works and that's all so we have seen how we can use CSS solutions to have to stop all durations that would be one way of doing things we also see how we can use JavaScript with match media query and we use that to have a custom transitions or we use that to set like the delay or duration to be zero once again I believe that web should be open please for everyone and we as a developer should take responsibility to build an open and inclusive web and app for everyone so the other day I saw this um talk and swell Summit by Annie Taylor Trent on building a mail flicks which you guys should definitely check it out um within a talk I saw her slides when she moves from one slice to another there's this very amazing transitions that swipes through the text and then transitions to the next slide so take a look um so I played it slowly at a quarter speed and as you can see the there's a block but there's a color block that swipes through the text and as it shrinks it reveals a text behind so let me play that again so um the color blocks grows and shrinks and reveals the text behind see that again growth shrinks rebuild attacks and what we're going to do today is so what I'm trying to do today is to try to replicate this behavior in a spelled Rebel using custom transitions so here I have my basic setup so you can see there's a checkbox and then as it clicks to check to show it will reveal slow text hello world and custom transitions and as I unclick it it will hide it so it's implemented using IF block over here so the first thing we're going to do is to write a custom transition right so custom transition is nothing but a function so I'm going to call this transition name swipe and it returns an object right so it takes in a note that you're going to apply the transition to so now I'm going to apply the transitions to the element itself it's going to call transition swipe over here as well transition swipe okay so what's going to be returned from this object so if you check the docs about custom transition since that it's gonna return an object that has the following key values uh delay duration easing and CSS and today we're going to focus more on writing the CSS function right so in the CSS function uh it takes in a parameter called T which represents a time through the transition so the time T itself will grow from T will gross from zero all the way to one right um so I'm gonna replicate or reproduce these transitions right is to try to break it down into two parts so the first part is where the solid color block grows from like zero width all the way to um full width covering the whole text so I'm break it and then the second half of it will be shrinking the solid color block to reveal the text behind so I'm going to chop the time into two halves so the first half is from 0 to 0.5 which is where we will grow the solid color and at this point the text is hidden and the second half would be from 0 to 5 to 1 which will shrink the solid color and the text is revealed in this case right so so I'm gonna have a basic structure of how the code will look like so 0.5 and else it will be here right so the next thing is how are we going to create like a growing solid color block um so I have an idea is to use a linear gradient as a background so let's try out like how linear gradient looks like here I'm going to write the div with a width of 100 pixel and height of 100 pixel so and then let me put a border right so over here you can see like we have a solid square with 100 pixel width and height so linear to gradient takes in a few parameters uh which is like the color stops so it specifies like the color and the position of the color so you can specify multiple color stops that will create the gradient right so when I have the first stop as red color at zero position and the second color will be yellow at the 100th position you can see here it starts from zero all the way to Yellow at the bottom so we can change the direction over here so I want it to be left to right so I'll write to right now you can see the color grows from Red all the way to the right which is yellow 100 if I shrink this number to 40 percent you'll see that the rate transitions to Yellow is from zero percent to forty percent off the block and then from 40 onwards all the way to 100 will be a full solid yellow color so in linear gradient there's a concept called a color hint which indicates how the two adjacent colors should transitions so in this example if I specify 40 percent it means that the color red will start to transition from 40 of the position all the way to Yellow which is at forty percent so in this case both values are forty percent so you'll see like a very sharp distinction uh from the first 40 of a break color and forty percent all the way to 100 is um yellow color so I can change the yellow color to say transparent in this case you will see a red color block at 40 width so if I change this value from 6 40 to 60 then you'll see a solid color block of width 60 percent so I'm going to use this as a means to create a solid color block which grows and shrinks based on the value that we can control over here so let me just copy this out and remove the rest so in CSS method you are going to return a CSS strings so in this case we're going to return this ring and here I'm going to do the same thing as well so now let's figure out how what's the value that we are going to put in over here right so in this case um oh it should be less than 0.5 so in this case we're going from 0.0.5 I'm going to grow the solid color from the left to the right so um over here we have the rate which is a color which we'll Define later so let's say color goes to read and the value of here should go so it grows from zero to a hundred percent right so we have a value t that goes from 0 to 0.5 and we are going to calculate the value uh percentage that goes from 0 to 100. so let's do some math over here so percentage should be a value times t and this value is um so 200 because 0 times 200 is 0 and 0.5 times 200 is a hundred so we're going to use this value percentage but here and over here right and over here on the other hand we are going to have a gradient of transparent all the way to the red color so you should start from transparent to read That's because um the red solid block color will shrink um from the left to the right so let's calculate the value of here so as it shrinks it's also going to grow from zero to 100 percent so T is now 0.5 to 1 and we're going to calculate a percentage we should go from um zero to a hundred so how to calculate that um so we can shift the value from 0 to 5 to 1 to 1 to a value of U which is um T minus 0.5 this value itself will go from 0 to 0.5 right so 0.5 minus 0.5 is 0 and 1 minus 0.5 is 0.5 and now we have a range from 0 to 0.5 which is the same as above so we times it 200. so U times 200. now we have the value of percentage let's pass it in over here and we're going to use a variable color instead of red so let's see what we have right so it's a bit too fast I'm gonna change the duration to let's say three seconds it says it grows and it shrinks all right so if I don't have the first half of the so let me comment this out first so that you can see what it's doing on the first half right and what we have on the second half okay um so we're almost there the next thing is that we are going to hide the text right so for the first half the text is hidden and the second half the text is revealed how we're going to do it is that we're going to change the color of the text to transparent for the first half of the time and change it back to the original color on the second half of the time so assuming the color of text is red we're gonna or rather this very variable color that we will compute later on we'll set um over here color is transparent for the first half of time and here is the color is color right so let's check it out again right and transvestit yeah it looks okay now right so on the first time of time we don't have the text and second half you see the text and then as it transitional the first half you see the text and then the text is heated so when you hide or you Transit out um what happened is that the value will goes from T from the value T will go from one to zero instead of zero to one if we calculate all of this correctly it's still the the same animation will actually be reverse so the next thing we are going to do is we have to figure out the color of the text so we can use a browser API called window dot get computer Style sorry let me fix the text okay and pass in a node and color okay so over here you will get the color that is being computed for this node in CSS so depending on how what the specificity or whatever you specify in the Styles or in the CSS once it's sets we can get the computed style and we can get the color of this so here let's take a look at again right so the the color of the block is no longer red but rather the color that is specified for the text which we specify over here in the CSS all right let me show that again so the last thing is the ice the icing on the cake is to take in a parameter called params over here so the second argument of um a custom transition is actually the object that you can pass in over here so I want this to have a certain kind of delay which is say um 500 milliseconds right uh if I so this params will be that object the delay 500 milliseconds right so I need to use these params and provide it to the transitions itself if I don't do anything there's no delay right so what I'm going to do is uh if nothing is being provided I'm going to fall back to an empty object and I'm going to spread this over here so I'm going to return the same delay or duration that's being passed in by the object itself and take a look it's a five second of delay sorry 500 milliseconds of delay right nearly five milliseconds before you exit out and so I'm gonna remove this duration so that it goes to a default duration right think so in default in spell for duration will be 400 milliseconds which is things should be written somewhere in here in the docs right 400 milliseconds that's the default um so here you go custom transitions uh with the animating color solid block based on the color of the text today I'm going to show you how I create a custom transition which I call a Flipboard animation transition this inspiration comes from a tweet from Pine where he showed one of his art created using JavaScript and CSS as you can see over here this is one of his art and while looking at it it reminds me of a Flipboard where you can see in a departing terminal where basically text being flipped in the Flipboard and in the transition you can see different characters showing up before it reveals the actual text that you want to the Target text right sorry for my bad explanation but you get the idea right so I'm thinking of creating this animation as a transition where if you reveal the text you have this kind of a transition where it flips uh show different kind of characters until you actually reveal the actual characters the text that you want to review right so that will be a great transition idea that I think of and today I'm going to try to do that so first of all we have this custom transition starter which is uh nothing but a checkbox which uh check and uncheck to reveal the text as you can see here we use a if block so if you want to follow along you can get the link at the description where you can get this starter and you can follow along with me right so let's get started so first thing first a custom transition so a custom transition is nothing but a function so let me name this transition I'm going to call it a Flipboard and it's going to return that object so to use this custom transition I am going to use the transition directive I'm going to apply for both of the span okay and over here uh what we are going to do is we're going to use the tick function which takes in the T right so um a custom transition is a function that returns an object and that object has several properties that you can Define and that uh that will Define how your transition will behave right take is one of them so this tick function takes in a t which so this tick function will be called by its Fields when the element is being transitioned out or in and it will be called on every frame so this T value will represent whether it's it stands for time but it represents uh what the state of that element is so if you are transition in meaning uh from nothing to something then the T value will be a value from 0 to 1 and as so zero as in it's not shown on the screen and one is being shown on the screen and if the element is being transitioned out then you'll get from one to zero right so this tick function will be called a lot of times while transitioning and the T value you get for each time will be different right from one to zero so to get started uh Flipboard over here on the other hand actually takes in an argument called node so this node will be the actual the elements that uh the animation is the transition is being applied to so this node for this case will be this band and for this case will be this band right so let's get started so the first thing first is to get the text for the text contents of the node so this is the text that we are going to reveal we're going to keep it as a variable because in the meantime when we are transitioning we're going to use um we're going to change the value over the time right and so this will be the final text that will be shown on the user right so over here uh if T equals to 1 which is at the ending state ending where it's it should be revealed then we're gonna set we're going to revert back the content of the node to be the text and then we're going to return over here so we're going to stop here and in between we're going to figure out what should be the value of the text right so um okay so now uh if it turn on and off you didn't see much so let's let's figure out uh how we should try to do this right so imagine this is the text right imagine I have a text like a b c d e f g this is the text and if the value of T is say 0.5 um what should I see on the screen right so um so this is this is something that we figure out so I'm thinking uh if the time is T is 0.5 which is a halfway point then I should at least see half of the text and then the rest of the text is probably nothing right so probably I represent it with Dash um and probably uh some of the text will be revealed as like X which is the which these two characters will be actually tries to uh will be replaced by a random character right so imagine these two will be replaced by a random character and then this is the characters that has been revealed because we have passed the time of 0.5 right so if the time is say at the sort of like beginning then if my text is a b c d f g again then the text I'm going to see probably will be a and then some random text and then dash of like this is like kind of empty space that represents uh the unrebuilt text right these two will be uh random characters right so as you can see here is that um it what characters that we are going to show it depends on the position of the character right so we are gonna probably create a string like this this will be the string that we're going to create so I'm going to call it like uh SDR string I'm gonna start with the empty string and probably we're going to set the text content equals to string right so now what we're going to do is we're going to try to construct this string okay so uh probably we're going to look through the length of the text right so this the length of this string that we're going to construct will be equal the length of the original string over here so I'm going to look through the length of that original string uh so I less than uh text Dot link I plus plus so now what I'm going to create is a variable called J which is the value of I divided by the text length so this is the percentage of where the character is so I'm going to represent like each character will be a percentage of where it is the position of it uh relative to entire the length of the string right so the character would be one out of say uh seven and the middle of text will be say 3.5507 and the last character will be seven out of seven right so J will be that position so if J and T is the same or J is less than t meaning J is uh at the position that is in front of the T value we are probably going to reveal the actual text right so if J is less than t then I'm going to append the actual text which is um the text I right and then probably we're going to have one or two extra characters over here um so this is a bit arbitrary but what I'm gonna try is that probably I would say if it's 0.1 I'm gonna like point two percent of the text less than like point one two point two percent of the text should be a random character right so in this case I would say like 0.5 to 0.75 right which is like um 1.5 times of t uh if it's less than else if J is less than 1.5 times of T I'm going to have a random character and the rest of it will be a dash right so let me Define this function called random character over here firstly is let me collapse this can Define the function over here okay so um I'm going to create a string called uh random cars that contains basically all the character that you can think of even including numbers right so what I'm going to have here is that I'm gonna randomly pick one of the character so math dot random uh times the length of the so this will be giving a random value that is within the length so I'm not sure 26 characters plus 10 so it's a random correct random number that is within 36. and I'm going to round it so I'm going to call it floor and after I get that number I'm going to pick it I'm going to use that over here right so this will return me a random characters from from this set of string okay so I think we are done over here and let's see how the effect looks like it's a bit fast so let me slow that down uh rather increase the duration so I'm going to have the relation of um say five seconds so the default duration of a custom transition is 400 millisecond which you can see uh which you can find it on the spelled docks so now we have a duration of five seconds so let's take a look as you can see here the text is the length of the text or the length of the span is is vibrating right you can't see the dash fix at one point um that's because the width of each character is diff is different right so while we are randomly choosing one character um say I is actually narrower than say n or S right because different characters has different width and if we choose a narrow or Slimmer character then the dash will be then the hold width of the text will be is narrow that's why you can see that uh the a jiggly part on the dash over there and that's because the text has different width right if we use a monospace text a font so if I use monospace font family then you will not see that jiggling in fact because in essence a mono space font have the same for weight for each character right now as you can see the dash basically steals fix fixated on the screen right I think we are really good we are making really good progress uh this is exactly the effect I'm looking for um exact except one point that I probably want to point out is that I find that the character is moving uh random uh shuffling way too fast uh probably I want to slow that down a bit but let's see but how are you going to do that because we can't control when svelt will call this tick function and actually still will call this tick function on every frame right so we can't on everything when this function is called we are going to generate this string uh every time right and because we have random characters generated on every time the tick function is called we can't guarantee that we're getting the same random character therefore uh the character we're going to be change very fast or rather out of our control over here right so one thing we can do is that probably over here in this function before we start to recreate the string we can do some check uh check that uh sub check the subsequent invocation of the tick function to see whether it passed a certain number a period of time if we pass that period of time then we're gonna recreate a new string if it's less than that period of time then probably we're gonna say hold on here we don't have to do anything let's just skip what am I going to do next right so every time when you want to measure like the time we need a variable outside of here because we can't Define that variable in here because this variable will be created every time so we're going to create a variable out here in this group that basically represents the last time that we just execute this tick function right so every time when it has tick function we're going to calculate the current time and if the current time is minus the last time is greater than say 30 milliseconds right so uh usually a browser will execute on it if we execute this on every frame usually a browser renders at 60 frames per second that means that it will be this function will be called on every 16.66 second a milliseconds right so this will be like double of that amount of time so if it's greater than that then uh or rather if it's less than that we're gonna end here we're not gonna do anything but if it's greater than that uh then last time will equals to the current time and then we'll allow to calculate a new string all right let's see the effect right you can see here definitely it's shuffling less frequent than we had just now if you can't tell the difference let me bump this up a bit so 300 milliseconds so text is being updated every 300 milliseconds right probably very slow right 100 milliseconds slightly faster right so this is updated on every 100 milliseconds rather than every frame so every frame this function will still be called but we are not going to do anything if it doesn't pass a hundred milliseconds right so this is one of the way that you can kind of control or throttle how fast that you you want the tick function uh the rest of the tick function to be called so there you have it a custom Flipboard animation so today I'm going to talk about component API in svelte more specifically clientside component API so what is that about so let's take a look at one example um where we over here I have app.strout and importing components.felt the component is all the things that we have talked about previously for example dispatching events having prompts having reactive statements and some uis binding event listeners and all these things right so this components when we import we write import components from component.s Fields so in this statement we can see that the component that we just written in this component as well file is exporting a component that you can use in a default export right here we are imagine if this is normal JavaScript module then this will be your default export right so we're importing default exports importing a component and we just write this and we can use this component on the Fly of course this is in the app cells but what if you want to use this component and use it somewhere else so we know that a component if you look at the JavaScript output it says that it's a class that is being exported right so we want to use this class somehow mounts on um somewhere else on us by ourselves so what do we do well we will just instantiate this class and and use it and that is the component API that I'm going to talk about we in this example we're going to talk about how we can use this class one other API that we can use and for example how we can update the props as well as how we can listen to events coming from the component so here we it's a bit limited to do this in the rebel so I'm going to download this file download this project and on I'm compress it and I'm gonna use it and open it on vs code and do it over here instead okay so here we've seen that uh in the main JS file this is the main file of your application over here we can see that we are importing app from app.felt and we are actually instantiating the component like this so um there are some properties that you can pass in for the app right if we remove this line if we just do nothing don't do anything from here you see that now there's nothing shown on the screen right so this part is where it will attach or Mount your app component onto the screen so what I'm going to do here is I don't want to use this I want to use my component directly because the component I've written has has props as event listeners um as as component events list component events and and we're going to play with that instead right so here I'm gonna import directly import the component directly and now uh just like how we did for app.spel we are going to a mount these components onto the screen so I'm going to say app equals new component and Target document.body all right so how about just use the same use component instead of app so now if we go if we split the screen into two parts you'll see that we can still see the components of the screen right so here the first thing we're going to take a look over here is what are you what can you pass in uh for the as as the parameters for your Constructor right you are constructing this component instance and what can you pass it so the first thing you can see is we can pass in an object and the first property we can see is targets so Target is where you are mounting your components so if we come over here inspect elements uh if you take a look at the HTML let me try to zoom this up all right let me close everything else we try to expand you realize that now the component is mounted on the document body right this is this diff is what we've written over here in the component.s fields right exactly the same div with the grids right so um let's try to play with this let's try to mount it somewhere else so let me open this file uh in the HTML file I'm going to add some div over here I'm going to add maybe like header uh well hello components API and I'm gonna come over here and then create a div or maybe a main tag right main con main content will be added over here in the main tag and then maybe some foot over here uh so here I'm gonna put the second hitting a footer right footer uh examples prepared by the house okay so I have I have a title main tag and a footer right by default you will realize that because we are adding the com we're mounting the components on the body itself so it will be appended to the body right so here you see that all this H1 main footer is still intact on on the on the screen but then the components right this this div is a component is being attached um appended at the end of the document of body right so now we can change this target to um to the main uh elements instead so we can do document dot query selector Main and now if I refresh realize that this components being sandwiched between the header and then a footer right so now inside main is where you see the components okay so uh how do you know all this is you can come over here to the document and you probably can whoops you can probably scroll all the way down to find client side components API then you'll probably find that it says Target is where the HTML the elements of the component will be rendered to right then you also can find things um like props so Props is something we can pass in as well so over here I'm gonna um since we in a component of spells we created we have two props right A and B so the default value of the props is one for both of them that's why when you create the components it says one right so now how about let's just try and re uh change add some props to these component props let's say a equals to 5 and b equals to 10. I save this you realize that now it's being rendered with 5 and 10 as a props value and now you the product is 50 right so so here is how you can pass in the props if you don't have props then it will be it will use the default value of of the props okay fair enough right so if we take a look over here again it says context you can pass a context uh for your components so say for example if I have my components over here and say it gets contacts foreign text I am going to get a value called C equals get context C okay I'm gonna show this value C value over here on the screen as well okay as you see okay maybe put it at the end see okay so if we see C is right now undefined and we can come over here and say context and we can create a new uh context is where we can pass in a map it's uh here it says default is a empty map so you can create a map a map with some value in it right so I can create uh maybe I create a new variable called context it goes to new map and context dot sets C equals to 10 20. right and then pass this context I save this and then you realize that now C is 20 because C is is um the context will be reading will be read from this map that we just created right of course if you don't like to write so many lines of code you want to have a more compact code then of course your map can be instantiated directly with um key value pair so here I'm going to say uh C and 20. right so here uh so just like a explanation of how this works is that you can pass in an array of key value pairs so you can have as many uh key value pairs over here for your map that you're creating and since we are doing this we why not we just inline this whole thing over here this whoops this would work as well right if you if you really like a very compact uh code for for some reason right so just to just now I was trying to like explain you can pass in a map and creating now just like yeah one liner okay so we can pass in our props that we want you can pass in contacts uh what else can we do over here anchor anchor says that this is a child uh that the render immediately before an element right so for example over here if I come over here and say previously we will say document uh body right we were we're rendering uh at the body so by default it will be appended at the end of this uh body so you see H1 main footer and then the the components that we just written but we can add an anchor anchor and see where we want to anchor anchor meaning this will be um uh this component will be inserted right before the anchor so here if I say uh if I come over here and maybe query for the footer right document dot query selector footer save and realize that this now this component is inserted right before the footer right right before the footer so anchor is where you want so by default your app when you're inserting to the targets you're inserting you're appending this components at the end of the children so if it's there's existing children you will add at the end of the children list but Anchorage is that you want to add into uh as my children but before something else right so if you are familiar with the Dom API called insert before this is how um this is this is being used by when you're trying to insert elements right so anchor is like inserts these components before an anchor and by default anchor is now then insert before if you're passing and now actually you're inserting at the end of the list so um so there's nothing unique or special over here okay so let's take a look what else we can do right so hydrate and intro right hydrate is when you want uh when your HTML has already has something in it uh and you want to um hydrate it right meaning uh if if you use a serverside rendering and then then you probably will want to specify uh hydrate equals to true and you want to hydrate the uh but existing HTML dot Dom elements with with your components right probably will explain this more extensively when we talk about server side rendering all right so let me just remove this for now um then what else okay so lastly Intro by default is false right so what is intro say for example if I come over here and try to import fade from svelt transition and I add fade transition to my component okay by default if I try to refresh this you don't see any fading right although I'm adding this transition fade um to to the component um why that's because by default when you are in the initial when you initially the first time when you're trying to show the component uh the transition will not be played by default right of course if you come over here and maybe add another variable called D equals to truth or initially and if and we're gonna use this D to depend to try to show a height um the whole component content and then I maybe create a check box now I notice when I refresh the page there's no transition being played at all but now if I try to turn it off and turn it on you see that the component is fading right but then the first time when you see on the screen there's no fading being played um right I refresh no no fading is being played so uh this is um to some people this is not what they want but to most people this is this is good right because you you wouldn't want um at first glance when you try to add components everything is fading right this is this is some like the initial content it should be just there um of course if you want to change this Behavior then this is where the intro uh useful right remember if we look at the docs by default it says false says that it will not play transition on the initial render right it will not play but if it's true you will play transition on initial render so if I come over here and say intro to true I save this um okay and I try to refresh you see that if you take notice over here it will refresh you'll see that the intro fading is being played right so this is uh how did how this intro is being useful right so even if we don't have this at all we don't have any condition we have just our components with a transition the transition will be plate uh during the intro when during the initial mounting of your component all right so here basically we covered all of the options that is available uh in your Constructor but let's move on to other things that we can do with a with the components instance results right because when we try to initialize this and instantiate these components we have the component instance and this component instance actually you can do certain things to it so for example if I take this component and come over here and try to do something right so before we do something we maybe let's add some buttons tradition the traditional old school way adding some buttons over here I'm going to add one button called ID a random okay let's say ID goes random random mice okay so old school way we create a buttons and now we want to add some um we are going to add some um event listener to this button so we're gonna say document dot query selector random at event listener click ok not sure you can see this clearly let me try to expand it bigger wider and let's just make this narrower so that okay hopefully you can see the whole lines okay now I have my function uh let's do something with this right okay so uh when I click on the on the button what I want to do is I want to randomize the props so I want to pass the different values to A and B so first thing is how do I pass values to A and B uh what I can do over here is I can come over here and say component dot sets and sets the props value so set is a method for you to actually set props value to the component so here I can say a a equals to 20 and b equals to 70 right safe so when I click randomize you'll see that it will change a to 20 and B to 70. so I want random right so probably I can map.random um and then let's see um times 100 math.flor so I can get a nice round integer number and a range from 1 to 100 so let me save this so now I randomize you can see that this is changing A and B right every time when I click so this is useful when um for example now we we don't have we are not being restricted on just using a spell component in another swell component you can actually take this component and use it anywhere right so for some reason you have an existing um react app or have existing PHP application Ruby on reels any framework do you have existing uh you if you want to uh just have a very small part of it being written in svelt then you can compile your spell component right you can import the spell component and if you compile it using a Serial compiler what you get is a a spell component class right so you import that class you're trying to instantiate this class and you can pass all these things like say props and context into it and can use it and you can still interact with your components by sending the props or you can set the props with this component and if you watch my video about uh props the two timer props one is like normal variables there are also um what I call a component methods for example if you export function say do something uh what this will do is um I'm gonna say Okay instead of do something called resets do so a sets reset a and b equals to one uh this component method can be also used by uh from your component instance over here right so here I can't come over here uh maybe have another button called reset and I'm going to call this method reset all right let me save this let me add another button called reset okay so here I have two buttons a randomize and change the value and reset and we reset everything back to one right so I can interact with these components by setting the prompts or getting some complementals and call it directly right so the last thing I want to show you is actually how do you listen events component events being dispatched from this component itself so here I'm dispatching a product event the name of the event is called Product right so here I want to listen to it how I what I can do is I can come over here and say component dots on and pass in the name of the events so this is called Product and I can get a event listener and the date um let me think let me just console out the data right so console logged uh product event events.detailed right events dot detail is where you can get the detail of the product which is the data that you're going to pass in over here which is the product itself all right so here let me open my console uh let's show the console at the bottom let me hide my head and let's see so here uh every time when I change the value you you notice that the product event is being triggered and you get the detail of the events which is now the value is 70 right of course you can pass more things say products oops Pro product Oh I mean our products A and B can pass in all these things in here and so every time when you change you get products A and B right so you get um data coming out uh by listening to events so I believe this is almost everything that you can do with the components right you can't set the props or call functions or even listen to events coming out from the components so lastly um here we introduce how you can mount the components but what if you have some buttons that you want to do where you want to unmount components right how do you unmount your component that will be calling the destroy method right so first thing so this fry will be here in the docs right destroy so first thing is I am going to create a button for that I'm going to say destroy okay so upon's click clicking on this destroy button button whoops let's see destroy ideas destroy I'm gonna call destroy okay so once it's dimming destroyed you'll be removed and it will be it you can't uh Mount the component backed again anymore you have to have to create a new component because the Destroyer will do all the cleanup for example remove any event listeners being added for the component it will um stop everything it will call the on Destroy component lifecycle events and things like that and the it's the best for you to just recreate a new instance and mount it on the screen Dom right so that's why when you create the component you have to pass in a Target and like when you create an instance it's like it should be immediately mounted on the Dom and when you destroy there's no more mounts method that you can call anything else right so now let's take a look over here if I come over here um I click destroy and this whole thing is being removed and that's it you try to inspect um or take a look or anything uh it will it should be it will be gone right you won't see this anymore and and you have to create a new component instance um I see in the docks that says like component props I I believe this we we talked about this before um if you if you remember the video I will talk about uh spell options called accessors um links will be in the description if you haven't watched that video so if you set if you use an access uh set accessors to true then you will also not uh you you will get a getter and Setter method for your prompts so not only you can set it with a dollar sets methods you can also directly assess the value of a or sets a directly um as like like as if this component property like this right so today I'm going to talk about components API in svelt specifically serverside rendering component API if you have watched my previous video it's about clientside component API meaning you can import components um on the client side which is in the browser and then you try to instantiate a class and to mount it on the dump and then you can call like the set or on to set the props call some functions or listen to component events and runtime right so but today we're going to talk about more on the serverside kind of things right so uh spell supports server side rendering meaning um svelts can actually uh provides a method for you to call which returns a string which is like a HTML string which you can then return to a user so this code can run it on the server and whenever every someone tries to um query something from you you can um return some contents to the user so the content can be dynamic um maybe your your site is about food blog and every time user visits a different URL you want to return some different different foods then it's good to have this function in a server site where you can call and then returns a UI HTML content HTML string that's rendered for different food right so you have this function that returns and we're going to talk about this function which is the serverside rendering components API so here we are take looking at the same examples that are prepared for clientside component API the same old components that we have um but one thing is different right now is that we are going to stare at the JavaScript output for a while so this JavaScript output is what you would expect from client sites uh codes right this is what you expect to be run on the client side you see methods like mounting elements um sorry let me just open on the component of spells you'll see codes like creating elements mountings elements you see codes like listen to component events handle it or set the component elements values and things like that and then last but not the list you'll see that this is exporting defaults the component which is a class which you can use to instantiate amounts on the Dom and call the methods that I've said early on right but you do you know that there's a compile options uh for swelts that will compile this code that you write the same old code that you write but compile it for server side rendering which is the function I just mentioned where you can call this function and return you a HTML string amazing right same piece of code can compile to JavaScript that adding elements on the Dom as well as can compounds to a function that returns a HTML string that can run can be run on the server side and you can use a flag on a compiler to turn this on which is called the generate right by default it sets to Dom which is for the client sites but you can change it to SSR which is to export a function that returns a string right so if you take a look at here still again it is expanding default components but now you look at the component itself it looks different now and it feels like a function over here where you can see that this is a function that's written a pretty much like a string right returns a string um so it's a Pity that you can't really run and try server side rendering components API um or server side rendering at all on the Ripple this is meant to be interactive and only for clientside rendering only so what we're going to do is we're going to download this example and we are going to try to run it ourselves right so that we can verify how this works okay so before I start running anything I want to bring attention over here in the roll up config this is the config file for um this the basic setup for to to start to compile your spell component and start a Dev server um so here if we scroll to look at spelled you'll see here we're passing compiler options this is exactly the same that we are looking over here compile options and now I want to change a bit I want to add generate to SSR so that we are generating serverside rendering code uh uh in States okay so I changed to generate SSR and now I try to run this young Def and before we run anything we're gonna now take a look at the main.js right so previously in the previous video I said I want to throw all this away because I'm going to take a look at just the component as felt so I am going to import that component that's felt but now I I can't really instantiate this like a new component and mount it on the Dom it does not work that way for server side rendering now anymore so suicide rendering uh what you import you you still get the export default right as we see here export default is the component but this component itself has only one method which is component whoa components dot render only wants methods so this is where you uh rent you this is the function I mentioned because uh all in all and again this is a function that returns you a HTML string so I'm going to console log that because it does not really returns a HTML string per se it's returning an object and then object contains some HTML string and some other information that you would want to know about right so I just console lock everything out so you can call this function so if I come over here and try to open this browser open the points you see nothing because we are not mounting anything anything on the Dom but if you open up the console let me drag it all the way up you probably see that it's it's printing up a um it's printing up some content right CSS hit and HTML so um you can pretty much see that the HTML is the uh you can pretty much guess that HTML is the HTML string that I mentioned but you also see strings like hit and CSS so if you have a style tag in your component then you probably have something in the CSS which is um some CSS code that you would want to add to your uh in in your HTML they want to return to the user so usually what you would do is you probably come over here and piece everything up into one nicely one nice HTML document and then send it to the user um yeah send it to the user right so here let's let me try to instead of doing that let me just uh have a quick code to show you how that would roughly works right so first is in this object you have CSS you have hit and you have HTML okay okay so now um in the so first thing first thing let me try how about that let me do this let me come over here and in the body I am going to add a pretag uh and I'm gonna add all the contents over a to the pre elements right so here I'm gonna document dot query selector free dot inner text equals to the HTML so now you can see that um this is the this is the HTML uh string that is being written right you you get a div um yeah basically everything that you you can think of right um let's see and I think what we want to uh focus our attention is over here uh first thing is so two things right so this component that we just written as props called a equals one and b equals to one all right so here you would uh if you pay more attention uh here we have an input that we binds a value right a the value of a and value of B so here if you zoom in let me zoom in a bit and you focus over here I know it's not nicely formatted but let's let's try our best if you focus over here that I'm highlighting over here you see that the value is is one right so this is like the default default value that you will find in the um in your input when you load this HTML on the screen right and here you have the second input value equals one and then here you have the product which is one as well so you can change this by passing a props to your render function right so here the render can actually takes in US quite a few options um so that you can you know same component but render different kind of content and here the first thing you can do is you can pass in the props um says a equals to 5 and b equals to ten if I save this and I try to oh hold on let me did I did I get it right let's see uh oh no okay so the first first argument is the prop itself so there's no props okay so I'm gonna pass a equals five b equals to ten let's save this and now immediately you realize that here same inputs but value is five and this input value is 10. you can see here the product the product is 50. so you can see that you can't um generate a different HTML string based on the different props that you're gonna pass into this component right so um of course not just about props you can also pass in some context so here let's come over here in our components let's write some context uh import contacts uh get contacts from sveld okay and I am gonna get C from context lowercase C just in case and then I am going to show the value of C so c c okay so here let's take a look at the docs it says that second options you can pass in context which has which is a map same thing as the clientside component API right so uh first thing is we take a look here it says C is undefined so we're gonna change that we're going to come over here and pass in the context right so here we're going to create the second argument it says context equals some new map C equals to 10 whoops uh let me make it 20 right so now if I come back you'll notice that c is now 20. so uh you can pass in context you can pass in props and that's basically the extent that you can do with um you know on the server side rendering right you you can't really change props uh it does not make sense right you are you are have a function that just returns a HTML there's no reactivity or whatever that you you intend to because this instrument was just going to be sent to the client and then the client browser receives it and render it on a screen right that's uh and that's the end of the job of the server side rendering right there's a job it's just to return a HTML string so there's no uh methods for you to play with uh change the prompts or there's no mentors for you to sort of like listen to component events um the X so the extent of server side component API is just returning a function and returns um HTML string of course we we said earlier on there's also CSS and there's also hit so um if you come over here you take a look at this HTML this is like not a very complete HTML right you you probably what you want to send to the client is probably a full HTML document right nicely formatted so here let me try to do that uh let's let's create a template string so here I have HTML right as as how you imagine a HTML and now I have a uh so the this usually goes to the body so I'm gonna have a body element let me Zoom it up a bit so they can see clearly body and I'm gonna add this over here nicely done and then sometimes you have a hit right uh where you put in things like titles and stuff like that right title so let me refresh you probably see like this is more like it a nicely formatted HTML uh document that you would usually um use right so here um let's come into this components and add some contents to the head right so what you can do is you can spell uh whoa spells okay and you can add things like title why why you can add things like meta I'm not very familiar with meta decks let me try to search for One HTML meta uh okay this this is this sounds like good enough author uh keywords okay um let's save this and let's take a come over here and take a look at how this hit would look like right um oh I didn't print that out so let's go back to our editor um here I'm gonna print out what is in the hit so you'll see that the heat now contains um this it is also a string which contains everything that we just returned in these felt hit element so let me copy this and let me try to replace this in States so anything in the head will be head so if I ref I don't think I need to refresh let me just collapse this down now you see that everything is over here is in the head everything in the body is nicely your component so if you have uh maybe you have a props that is like the title let's and you use this props in your title over here like this then you could also pass in a as a props and to change it so like this is server sites rendering components API and take a look here is your title right you can pass in title as props and then you render it inside the spell hit as a title and when you call a server side component API to rent a DOT render function to returns then the hit will be a string that contains all the elements in your in the render function over here and HTML will be everything about that is that should be that is over here that is not in a spell hit every part of like the body lastly you have CSS right um I think we've seen CSS it's like an object right uh if I come over here you see CSS like an object so you just need to peer focus on the code right so there's code and that's map so map is more like a source map it'll be useful if you uh you want to debug something um I believe it will be turned on if you pass in the developer mode to be true then you have some more debugging information I'm not quite sure this is my guess right but I think the focus here is the code so here you will come over here and say uh maybe in a hit you would also have uh say for example a style tag and then put everything in the css.code inside over here okay uh yeah everything like this so now you see the style also have some inputs and this class name matches the one that you added so this this has like the CSS class CSS scoping built into the component it's not just work on the client side it also works on a server side as well so here now I have everything um how about just you know um add this let's let's save this whole thing let's let's copy all this whoa let me try to select all copy all this and let's try to save it into a file all right so public I'm gonna say um SSR dot HTML let's save all of this into a file let's try to open this file right so let's try to visit SSR and here you have it we have styles you have everything nicely done um of course you still don't have any interaction because um we haven't load any JavaScript in it right this this whole uh file that you see over here if you view paste sauce is exactly everything that we just copied uh being written from the server side rendering function render function right so this is this is what you get um so probably the next thing we're going to talk about is hydration today I'm going to talk about stroke compiler API we know of swell is a compiler or kind of know about spell as a compiler because I've been on and on saying that you write your spell component and then uh spell or transform it into JavaScript right so that process is called a compilation you compile your code that you've written in one language or something into another thing which is Javascript in this case so we the spell compiler compiles a component code that you write into plain JavaScript that browser that can execute right so most of the time when we interact with felt for example import get contacts um import uh create event dispatcher from svelt we are interacting with the sort of like the client side of a uh of svelte which is the runtime of svelt the code that actually runs in your browser but today we're going to talk about one step back back which is how um the the part of sveld which is the compiler part how do we use it to convert your spell component into JavaScript code all right so we're gonna take a look at how we can use the spell compiler okay so in most of the time you wouldn't have to do this because most of the time you will probably be using um uh some bundling tools some build tools that you're using for example roll up or webpack and there's already a rollup Plugin or webpack loaders that can handle those for you but you know it's never um there's nothing wrong to learn something else uh that how how these plugins Works under the hood right So eventually these plugins for example spell roller Plugin or Rolex file Plugin or spell loader in webpack under the hood they're still using the spelled compiler API to compile your component code to JavaScript code right so we're going to take a look at how that is being used one of the options that can be used and and probably some scenarios of how you can use them right so let's take a look at some examples right now so here on the screen that I have is a very very very basic setup you can see that I have on the left or I have um four files right so I think three of the files that you just need to pay attention for so the first one is the component as well so this is a plain this is my typical spell component that you would write just a normal cell component that has um yeah that import forms felt that has some functions templates hit and everything else over here so index.js is what we're going to fill in later on so this is where we're gonna import the spell compiler API and we're gonna use it to compile our code but here package.json um this is very common um npm uh sorry node.js setup where you have a package Json where you specify all dependencies so that you can use them right here I specifies felt as my dependencies so I'm importing's belt so the first thing we're going to do is we're going to import spell compiler and start compiling our spell com code into JavaScript so here I am going to index.js and I'm going to import this field compiler so this is this felt compiler from oh sorry require swell compiler okay and of course I need to find this file so I'm going to use uh f I'm going to read out the content of this file first so that I can compile them so I am going to use FS require RFS so FS is a builtin node modules API that you can read content from a file um also I'm going to use path so that I can form a path for this component so here the path would be path to my component will be path.join current directory Source component does let's see okay then I would have next thing is that okay hold on I oops sorry let me wrap around okay so next thing I'm gonna do is I'm going to read the content so fs.read file sync I'm going to use a synchronous version of the read file so that I can just uh yeah or whatever everything is like one line we don't have to use uh promises uh deal with promises and stuff so here I'm going to read the file content encoding is utf8 uh spell code so this is a spell code that we just read out from this file and then the next thing is we're going to call sveld compiler to compile our codes so let's take a look at how we can use this so if you import compiler you get a spell dot compile so here's dot compile and then you pass in the code so this is the code and then you can pass in some options over here so some of these options we've seen before for example like file name um sorry some of not not file name but some of we've seen before such as um but in the in a episode when we talk about asphalt options we say that spell options allows us to specify some of the spell compiler options so these are the ones like immutable accessors custom elements um tag right these are the ones that we've seen before so I'm gonna I'm not gonna go through them but for file names and names would be what will be the um uh class of the the name of the the class name of the cell component right so if you take a look at spell rapple over here sorry where we see that this is the JavaScript output let me take a look come over here we see that app is the class name right so you can change this you can specify what kind of class name it will be and by default it will be component right so um I'm not touching this but this is like just to tell you like what will what you get if you will change this right so by default also if you don't have if you don't specify a name it will try to infer from file name but founding by default is is now if you don't specify so found it if so meaning uh if you specify file name and uh if you like if you specify a file name for example in this case our file name is the uh component component that's felt right uh then it probably would know that uh it will probably will infer this as as component is the as the class name right if you if our component name is say tab bar then Tap bar will be the class name so if you don't have file name then you're based on the name that you specified so Name by default is component if you don't specify one if not you can still change it as I say name is a um scrollable list right then then the name will be the component class name will be Scrabble list okay so here we also have formats which is esm or CGS this uh this will change how the code will be exported right so uh things like uh okay you can't change it here so probably we will continue and we'll take a look we'll compare the uh the difference of the output and then we will take a look at it right so by default I think we don't have to specify anything we can come over here because most of the things has reasonable fallback a reasonable sorry reasonable default for example format is esm generate this term and things like that so what you gather from here is gonna be um JavaScript CSS EST warnings variables and stats so a lot of things that you don't really need to know or care about I think the most important one is the JavaScript and CSS so Jessica and CSS would be an object so let's take a look let's just console off for the moment all right JavaScript and CSS uh no let me Zoom this up a bit as well okay no index.js okay so now you see that um the JavaScript would be an object that has code which is the JavaScript code that you see as well as a map which is like a source map so Source map will help will be helpful for you if you want to do debugging later on right so this is the source map object that you probably would want to save it in a separate file um yeah as a separate file um then CSS will also have two uh it's also an object that has code as well as Source map all right so first thing what we can do is now is we're just gonna save the JavaScript into a file right so we're gonna create I'm going to write this file write file sync and I'm gonna create another path so half name.join and I'm gonna maybe called output.js and then the JavaScript code and format is utf8 right I'm gonna say for CSS file as well output.css okay so let's run this again we're done let's open our you'll see that we have oops uh I think I save JavaScript code into the CSS okay now let's try running again okay we're done I'll put CSS we have we have a CSS file over here okay JavaScript we have a Javascript file over here um yeah we have everything over here let's scroll all the way down um yeah this is the component so by default the as I said component name is component right so let's try to change that um so I can come over here and say um let's think let's see our name equals to fool okay if I run that again okay and now you see that output is is full right let me try to just open both sides so that uh probably we can see changing immediately hopefully if we have enough space okay so um a big cramped maybe not okay so this is one thing we can change the class name and here you see that it's using ES module so it says export default full um okay so let me interrupt for a bit so you may ask me like what what does it matter of the class name well um most of the case it doesn't matter unless probably you are using something uh for some reason you um uh maybe in the script module you write you you have another uh uh context you have something else over here um like a class component or something then maybe you are worried about conflict but I will assure you that um it doesn't really matter because uh the the name is it's like it's it's based on um yes you you give a hint about the component name but when during the output it will still try to deconflict and prevent prevent any conflict between um uh prevent any conflict between the code that you write and the code that we the spell compile is going to generate right so you don't have to really worry about that so it's mostly for nicely printing out the codes where you have a nice class name and also maybe when you print out the instance some debugger will tell you like this extends from a certain class and if all the spell component class that you created are all named components it's a bit hard to debug I would say so this is mainly for nicely printing out and nicely debugging right so as I was saying that this output export default is es modules so you can change that you can come over here and make a change right so we can see uh this is part of the format so now if I change it to format to CGS common GS now if I run this again you see that the output now change to common.js right previously it's export default um something now it's exports.default equals to something this is the common JS export so you still get not default so that when you import no matter whether you are importing from a common GS file or like um yes modules I think your bundler will know how to handle this case where uh components will still be the dot default export so it could be the named defaults or like actual default export from es modules so next we have generates I think we've seen this before the last video when we talked about server side rendering so this would depend or will um will allow us to specify whether we are generating for a serverside rendering so SSR so this is a service ironing code or it should be a code that run on the client side on the browser right so by default is Dom okay so um we have some Dev this is to turn on or turn off some of the um uh debugging code that you have so for example if you use add debug or if you are using a spell Chrome extension to do a spell debugger um this actually will when you turn this on by default actually it has some sort uh will add extra code for you to for for the for your code to talk to the uh swell Chrome extension um so here we have we've seen yeah I think it's best for me to just also show you that what are those codes so if I def equals to true I think it's true by default but um over here you'll probably see like things like add location uh things like insert depth so it's a developer a Dev version which when you call this function internally it will also inform the uh Chrome extension that oh you're inserting some elements over here uh there's also some Dispatch they have some some Dev uh some communication is happening from your code to the swell Chrome extension right so if you specify this as false which you should if you are building for production then all this code will be will not be generated right so you you don't have this yeah all those codes will not be generated will not be inserted into your compile code right so here um you can also have this flag turn on called Legacy so this will try to generate uh try as as much as possible to generate code that will also work in ie9 and IE10 so try not to generate codes that is uh so this okay so so there's a difference between using this and using Babel for you to do Transportation right so uh this will only ensure that the code that smell generates spelled injects will also works in I9 and IE10 but if you are yourself writing syntaxes that is not supported in 9910 for example if you are writing optional chaining for example uh those will not be converted to support for I9 and A10 you will need to pass this code that you have for example right now it's outputting a JavaScript code right so this code will be uh what we will inject some of the Spells code so those will work for I9 and 10 but the code that you write will also be copied verbatim so so we don't do any transformation for those code except for like reactivity and stuff right so here if you have code that is written for I like newer browsers and you want to support all the browsers Legacy browsers then your JavaScript code over here you probably will have to come over here and maybe do a Babel transform sync with a JavaScript code and you get a transform yeah maybe a trans like a Babel transform over here and you write this to your your to the output right so if you so this will help you to transform the rest of the code that you write into uh to JavaScript code that uh ie9 or 10 or any browsers that you're targeting that supports them right so uh in this example I'm not going to show here I'll just leave it as it is okay so the rest of the options are I think you've seen before uh most of the things are uh pretty much um selfexplanatory like the file name output file name CSS Apple file name that's felt path so this felt path itself is interesting because this right if you come over here and take a look at the output code it is importing from svelt right it's spelled internal spelled and spelled right so this uh assumes that um spell is available at this current location that you are putting a code to right so for example and this is okay and most of the case when you are using a bundle because this uh but the bundle will know how to look for a Sprouts in our case also I think we reinstall in no module so this is okay for us as well uh but in rare cases that maybe yours felt um is in some other folders that you somehow for some reasons okay you can change that you can come over here and say spell path equals to um XXX right just just for demonstration then you'll see that now instead of importing as well you're importing XXX internal so if you have a custom version of svelt or your spell is in certain folder somewhere then you can have this you can change this and and the rest of the code is still like like normal that how cell generates right so here if we take a look at when we are generating for Dom you'll see that there's a function called at CSS this uh will try to add the CSS into so this this function will be run when you are mounting your component and this function will try to add a style element with the CSS that uh that it's generating right but we really have an output CSS file as well right or this will also give us a CSS code that we can write in a CSS file as well so it's up to us whether we want to have the CSS as like a separate file or or just let the JavaScript to just do it right so if by default the JavaScript code that the slot generates will also take in charge of adding CSS to the Dom so you don't have to worry about that uh so yeah but then if you don't want that you don't want that extra could uh thing that you've been generated by JavaScript you don't want JavaScript to insert CSS but rather you have an external you you want to get a CSS output and save an external file and include this CSS file in your HTML right if you want to do that then what you need to do is you're going to come over here and specify CSS to false right so this is this option it says over here CSS false then you will not be included in the JavaScript so if I run this probably see that now you don't have the CSS function over here right we don't the jet skill will not take care of adding CSS but of course your your component is Right will still have the class names right those those are scoped class names so it's up to you to figure out how when you want to load your CSS so you still can get your CSS output from here and you know try to write in a file or do whatever you want with it but just make sure that you have it available so that at least your component is style right uh there's another function called CSS hash so this one if you take a look over here it says that it's a function that takes in a hash CSS name and file name and you should return some a string right so what this means so over here you see that CSS uh to to do a scoping we add some Spell customs felt hash class names to your elements right and here is a spell Dash and blah blah right so this this hash is generated um uh based on it's a hash of your code that you you written so every time when you change your code it join a different hash right and and some people doesn't like the prefix call spell Dash prefix so you can change that uh so this is a CSS hash uh function that can change these class names right so it's a function that that's not so you you just Implement you you specify a function that returns a string and that string will be used um will be will be used in States that that string will be used instead of the the default class name that provides right so by default a hash is a function and you can pass in a CSS or whatever and then you generate this right this is the default uh spell class that spell generates but you can change that so for example I'm gonna say I don't care about hash I don't care anything I just want my all my class to prefix with uh x y z okay but you have to be careful with this so everything prefix if x everything will be x y z okay uh let's take a look over here so all your special scope class name will be x y z and when I say you have to be careful is that now if you have multiple components that has this class name then they are not scoped to just one component anymore because all the components share this special unit class name right previously this class name also includes a hash that is unique to this component because it's generated based on this component based on the code that you write you've written for this component so if you don't have that stand um yeah it's it's a bit uh you have to it's a bit worrying that your scoping may not work right so by the uh so it's recommended that you use the hash function to generate some hash right so you have a hash you have CSS you have name and file name right so this name and file name is the one that being passed over here previously we say we can specify name and file name right uh of course so here we're gonna say this plus uh maybe a hash CSS all right let's try run oops let's see so at least now you have some hash in injected as well or maybe you don't even you don't like xyzing you can total it's totally up to find so this is customizable it's really up to you what you want you can have a hash only uh and if you find that hash hash is too long you can change it but you have to be careful right um just make sure that there's enough characters to make sure that the Collision the possibility of collision is very very low right if you only have like one character imagine you only uh have like a to z and one to zero to nine that's like 36 characters and it's very high probability like 1 in 36 chance to get Collision all right I hope I get my match correct so anyway um oh okay I think my match should be every as long as my pigeonhole principle more than 36 if you have 37 components then you will have one two components that will have Collision right so uh here we have some um other flags that are just uh for developer uh that is turned on for developer mode for example Loop got timeout this one is we added this for the repo for example if you um for example accidentally added a while look that never ends this will try to throw an error for if your Loop goes uh um goes more than like how many cycles or something like that right so this will oh if your Loop goes more than like a certain period of time so this guards the the loop so um yeah you want to have this if you have a look if you just in case your your code will like in finite looping and freeze up the whole browser but this is mostly for developer potentially right because once you your code is written you you tested it most likely you don't have any infinite Loop happening right I believe I believe in you so uh here are some other things like say whether you want to preserve a comments or you want to preserve some white space in between elements and things like that and I think that's mostly of most of the options that you can do with uh your spell compile the last video we talked about spell compiler API and this video I'm going to talk about spelled preprocess so um in a spell compiler API will learn that we have a function called spell.compile which takes in the spell code in string that you write and it will return an object that has like JavaScript and CSS which you can use it and write in a file or use it somehow right so um you you take self code that you write and it transforms to spell to JavaScript code but sometimes the spell code you write it's not actually it's spelled code per se for example uh as well expects that the code you write is in normal CSS code and also like normal JavaScript code and HTML but sometimes you are lazy or you want to use some tools that you have for example like typescript or you want to write a says or less instead of normal CSS or you want to use park instead of normal HTML then you want to preprocess your code before you pass that code that you have into this filter compile function so imagine your code whatever you write spark CS says less subscript or coffeescript the code you write over here on the on your on the left so this is my right spot I know this will be reflected on your left um whatever you write you have to pass you have to transform them into normal code which is just HTML CSS and JavaScript and then use felt the compile to transform that into JavaScript and CSS right so this step from whatever you write to HTML JavaScript and CSS um you can do it yourself you can just transform yourself or you can use preprocess which is a helper function that extracts out um pieces uh it will break your code into pieces into like CSS uh not CSS it will break into the style text script tags and markup everything that you write and you break them down into pieces so that you can um so that you can transform each part individually if you want right so let's take a look at an example over here so here we have the code that we we just written for as well compiler API so we we read all the code from asphalt code from a file and we pass that file directly into our search compiler right so say for example right now let's remove everything from the slope component that we have that except we just left with normal script tag style tag and some HTML right so first thing is maybe we don't want to write a script tag we want um let's see okay let's let's just try to write some basic CSS right let's Stitch equals that name equals to over here I will say I want to have like a global variable uh which I want to be injected when we were uh by some process right so maybe I have a value that I I only would know during composition process so here I'm going to replace it with a placeholder like uh maybe using this right so name um using a percentage sign okay so this as you can see I have some red underline You by by the looks of it you know that this is not a valid JavaScript code right you can't have a variable name that starts with a percentage so um and then we have HTML code so here I'm going to have a div tag that that restart name right so here we want to um take this code read this piece of code and then we're going to process it we want to transform it into a normal JavaScript uh sorry a normal Circle and then only pass it to spell compile because if I just take this read this code oh this file and pass it to spell compiler uh what you see that is that it will have a past error because the code you just written is not a valid JavaScript code so let's see so here we read this file out it's a normal code so what we can do is we can um process I'm going to have a new variable called process code equal to 0 could not replace uh this thing into whoops into valid string so here I'm going to say it has hello world okay now uh if you try to look at this process code you realize that we have replaced this percentage into a string and hopefully that will be that will end up with a valid JavaScript code in the script tag so if you run this now hold on okay we need to pass this in as well I run this now replace let's see what do I missed um okay so most likely we don't have CSS that's why this is this is throwing an error okay now we run everything works if you come over here and take a look at the output JavaScript code we'll take a look at the code over here you see that the name is now replaced to hello world and everything still works right so um of course this is you so this is the essence of preprocessing you have your code you run through a function in this case a function that we're going to run through is replace like name and then we pass the preprocess code to the cell compiler right so sometimes it's not as straightforward as this sometimes your code itself the entire piece of code is is written in like say typescript or coffeescript that you can't really uh do like just a normal replace you will have to go through like they are compiler to transpile it out to just normal JavaScript then you probably would want to have this function called a preprocess so sveld compiler has a function called preprocess that's again taking our string and taking a list of preprocessors okay uh it could be an array or it could be an object and this will again return us a process code okay let me comment this out okay Returns the process codes so here in a preprocess what you what you pass in is an array of objects so each of this object is called a preprocessors and this over here you can this object itself can be a can have three properties one is the markup or the style or the script so individually each of this is a is a function that takes in the code just in the script tag and transform it out right so uh what is so let's take a one example I'm going to do here I have this you know we said about this is is have in our script tags but we also have the same text over here in HTML so we want to handle only the case in the we only want to trans uh replace it okay so let's let's do this we want to replace if it's in a script tag but not replace it if it's in the HTML so what we can do here is that we can't really rely on replacing all anymore but rather we have to come into a preprocess serve preprocess part and we only do we only transform in the script parts right so here it takes in a Content which is the codes so it's a function so this is a function so taking contents and we're going to replace the content right so we're going to use the same code over here and do a replace and now we then that's it that's like a simplest preprocessor that I can think of now you have a preprocess code and you pass it on the compiler and now we run it through hold on it must be a string okay and then preprocess code is oh it's a promise okay now I need to uh okay so I have done uh value okay I'm gonna copy all this shove all this in so value like code is the code so value is an object that has a code as well as a source map so that Source map can works or can map back to the original code before you do a preprocessing okay so for now we just for Simplicity we just pass in the codes in uh let's going on that's oh I need to return this right and what you return is actually going to be um object as well and you should return a object with content right so it says over here that sorry not contents code it says over here that your preprocessor should return um if you return the object with a code property that represents the transform code right so here let's run again and we are done and let's take a look at the output which we have Hello World being transformed over here at the same time in the text content you still see like the normal percentage percentage name right so um if you try to log out from here you try to console out from here you notice that the content will just only uh having the contents in the script tags so this is how you would probably use this spell preprocessors um because then you probably would have to handle like uh like and so so you can write your own preprocessors if you like too right so it's not just about contents what you get over here is also attributes so attributes is all the attributes that's available on the script element here so for example uh sometimes you know we don't want to transform all the script tags uh it depends on maybe say a language is it a typescript a coffee or you have some other things like contacts also special things like that and you only want to do a preprocessing for um code that has this attribute script tag that has only this attribute if you want to do that then what you can do is you can come over here and check the uh attributes right so say for example uh maybe I have attribute say name equals to special so this attribute is what we're gonna read from this attribute and actually we're going to replace percentage percentage name with this name right so for some reasons you already know it but you just want to use it over here and you want to replace everything from here to here so what we can do is we can't um check attributes dots name this will give us a value so this will gonna replace it over here instead and this is the string itself right and we can't just put in a string if we just put in a string like this what you'll get is um what you get is special like like a variable right but what you want is actually like just a string so we're gonna do a Json string G5 as in a spring literal that directs with a quartz sign so now if you drive run again now we see our code will have name equals to special right so here you can read um attributes and most of the times it will also some people would like to do is it will check say for example attributes the type uh language is typescript only then we do some transformation or else we just leave it alone and things like that right so you should also you could probably see some examples over here as well like if it's if it's attribute this language it says then we we return we don't do anything if it's not sense we don't know anything and the rest will be like preprocessing for for sales right so here um uh you see that this is how you would write your own preprocessors and code is just one of the um uh property that you can return you can also return one thing that's called dependencies so here optional array of dependencies so dependency should be an array of files that um that you return from from the process code right here process code actually will have not just code you can also have dependencies right this will be an array that combines all the dependencies for all the preprocessors so um in our case we don't really need uh this this array is useless to us but in some cases it's useful for uh your bundles for example roll up a webpack because they want to know like what your file is depending on right it's not just depending on the current file itself it also maybe depending on some config file some of the files so for example if your if you're writing a preprocessors and you uh uh you read the name like this name from some files then you probably also have to specify the the the path of the file so that every time when someone change that file um your bundler will know that it will have to um go come over here again and run through the previous process again and update so that it will preprocess again and up have an updated name for your component right updated value for this name right so dependencies will be that array that you specify like what other files will depend on so another example would be say you are using Tailwind you preprocess Tailwind in your CSS and you will want to specify Tailwind config as your dependencies so every time when you change the Tailwind config like changing like the font some colors then the your bundle would know that oh um all the files are depending on that config will have to be recompiled have to be run through the preprocessor again and and that's where this dependencies array will be useful for you so uh we we've seen how um how we can do with scripts but it will be the same for style and a markup right so that I will not go too deep on that anymore I'm gonna not gonna show any examples um so this is this felt compiled a preprocess is only uh useful if you are like me then write this code and show you an example but most of the case this preprocessors preprocess function will be called the same way as how the spell compiler compile will be called by the plugin for your bundles say for example spell rollout Plugin or like spelled loaders right so um in in those loaders or plugins usually they have a few called preprocess that you can pass in preprocessors so that is where you can pass in this object into that option right so it's still useful to know that um how to write like one preprocessors and you can try it out with a spell compiler and try it out yourself but usually you wouldn't want you most cases you wouldn't call preprocess directly and you would let your uh bundles plugins like Plugin or spot loaders to do that for you in this video we're going to talk about hydration so we have talked about how we can use clientside component API serverside component API we talk about compilers API and naturally I'm not sure whether it's natural but we are going to talk about hydration so what is hydration um and how do we use hydration in Sprouts well we're gonna check that out okay so what is hydration so hydration is a process where you have uh content in HTML that is coming from the server be it rendered dynamically whenever there's a new request or the HTML has already generated ahead of time via prerendering and you get this HTML download it to your browser and it creates all the Dom elements right so you already have existing Dom Elements which is the same elements that you might have or you could have or you would have created using uh on a client site uh you over by your cell components so instead of recreate like instead of recreating elements um you look at the existing Dom elements and say hey actually they are the same element we are going to use this existing Dom elements instead of creating everything from scratch then uh you would do the process called a hydration in which you kind of find you'll try to go through on elements in your template that you are supposed to create and instead of creating them you're referring you're you're pointing a reference to elements that's existing existed on the Dom and later on when there's interactions you since you already have the reference or Dom you can immediately later on you can immediately make changes to it or react to any user interactions so that is in essence uh how what is a hydration and in this video we're going to take a look at how we can use how we can do hydration in svelt are you ready okay so here I have my component written ahead of time so I have two props name and language at the same time the name is actually a state where I bind and inputs to this name variable right so you can see I will expect this when on the client side when I hydrate I still have my own the same input and I can make changes to the input and over here I have some elements that shows the content um based on whatever the data that we're getting so uh first thing of hydration is you probably want to render this out in the server side right you you want to have a way to generate a HTML first and then you serve that HTML user so here what I'm going to do now is that I'm going to come over here in next year's and I'm gonna write all that out right so first is I'm going to import this felt compiler uh from spell compiler um so here I'm gonna write out um the raw process the manual process that you you might uh you would have to write if you are not using any framework such as um swiper or in future maybe spell kit right this is what is being done under the hood I'm gonna take a look at like the the raw way of doing things right so we have a spec compiler and we're going to compile our code um uh using a Target to SSR so so that we get a function and we can call this function to get us a HTML right so first thing is I'm going to call spell compiler dot render uh dot compile and when you pass in the code right so first is we so we need to read our code so we're going to use import file system from node API and as well as a path so that we can read out the path um so our source code would be here uh path to component is path.join okay okay and then we're gonna read out the source code so code equals to read file sync so I'm going to use a synchronous version of the read file so that I don't have to away from anything I can just like read it out so I'm gonna pass in a path to components and encoding would be UDF so here I'm going to pass in this code in and I'm going to specify my targets uh no I think it's called generate to SSR so we're going to generate an SSR code and also most importantly because we want to do hydration we also need to pass in a flag called hydratable to be true so this will generate uh the function the that the function that we end up getting that will return as a HTML will be a hydratable HTML so uh cell may do some optimization or add some reference here and then um so that it's easier for us to find out where the element is later on when we want to hydrate this um from this from the HTML that is being returned from our code right here uh if you take a look we have just cut and CSS I think we can leave the CSS alone and get the JS and so now js.code uh would be the code outputs that uh it's a function that there's a function right so what we can do is we are going to um take this phone uh take this piece of code okay so first is let's take a look at what this is right this is a piece of code um JavaScript codes that is compiled using SSR mode right um probably we would let's see yeah so um we have to call this we will have to treat this as a module and then call it later right so I think the easiest way is we're gonna write this piece of code into a file and then we execute the file later on so I'm gonna do that so right file sync and then they wanna say path.join um oh uh component.ssr.js so we're gonna write this content into a file and we're gonna import it later on so this file is um see it's an es module and right now we are running in common.js so probably we also say the uh out what's that uh we need the option call let's see formats right we're gonna change our formats to CGS I'm going to write this file the this this the JavaScript code that's generated into a file so if I run this you'll see that now we have a new file called component SSR which is in common.js and probably we can run it so the way you run it is to just require it right so probably I will save this path as a path to SSR code um so SSR component and remember we use a Xbox on defaults right so we can probably we need not default to get this value now if you console out SSR components it will be the SSR you'll be object with a render function right so we're going to call this render function to render um to render our component into a HTML code and glass so now we're gonna call this render and I'm going to pass in some props so the first so here if we took a look at our code there's two props name and language so I'm going to say uh name would be uh Scout and language it's also called sprouts right okay maybe name is the how Okay so we're gonna call render and this will return us um some contents right so if you take a look at server side component API this is the results result will return us ahead the HTML and the CSS right so he HTML and CSS so we're gonna piece all this together and then we'll um to form HTML content I'm gonna send that contents to a user right so here we're gonna what we're gonna do is we are going to firstly okay so I wanna my plan is I'm gonna write this HTML file into a folder called public um so that later on we're gonna open this folder right so this folder will be uh I'm gonna create this folder now public so this folder will have our HTML file and later on we're going to compile the JavaScript code uh and we're gonna include that JavaScript code in this public folder as well so here we're gonna say a let's see okay so the output HTML would be looks like this so we have a HTML and then we have a hit this is where we put in the hit content and also we can have some Style this is where we put in our CSS and then we have okay I think style text should be placed inside the head all right let's say format it okay and then we have a body and I guess that's where we'll put in our HTML con our our HTML content right so here if I output HTML that looks like this and we're gonna write this HTML output to a file inside public folder right so I'm gonna do that now so um write file sync path dot join public index.html content all right so we're going to write this file into a HTML file into the index HTML right so when I run this see that now I have a new file over here and I have all our content so ah wait hold on CSS is not so CSS knob and object which will have to write the css.code in all right now we have everything ready and if you try to open this file over the browser it's gonna say open public index I'm sorry public index HTML oh whoops foreign you see this now okay but there's no interaction yet so when I type something there's no reactivity at all because uh we haven't load our JavaScript code so now the next thing we're going to do is we're going to compile our codes uh for JavaScript for the client sites and write it to a file in a public folder as well so next thing is we're gonna do is we can come over here um I'm gonna have the same Parts but we're gonna we'll still do a compilation but now we're gonna do we're gonna compile for our client sites and make sure that we also have high readable to true and we format will be I think we can leave the format as it is as esm okay and next thing is uh let's see and okay so because uh server side we already have like CSS inserted so here we can uh just don't have to compile CSS for our clientside component so if you check here there's this flag call CSS right so CSS you can find as false because we don't need don't need it right so now we get our JavaScript code I'm going to write it into a file so FS dot write filesing uh now we're gonna have uh this one and I'm gonna say index.js yes I could and encoding as UDF okay so um now if you run this we oops sorry ah okay so we have to rename this I'm gonna say JS client side Js okay you're gonna build again uh I don't see anything different yet but we have X at we have a new file created um add over here index.js right so here uh we are going to also we are now we need to add this file into our index uh refer reference to this file in our HTML so that we can load this JavaScript on the by the browser so let's see uh we can come over here and add a script tag Source will be index.js and because we are using import statements so we also need to make sure that uh it's uh the type is module right so let's let's try to run that again and if you take a look over here it says that um okay uh we can't we need to be a relative path okay so the thing is we can't load a module scripts um uh using uh in the file protocol right so if you open this file like this you can't really serve this file so what we need is we need a file server uh that serves all the folders from the public folder so here I'm going to open a new tab um and run the hdb server to serve the public folder so here I'm going to visit this and it will still serve our index HTML right you can take a look now uh we realized that oops we reloaded index.js and still not working take a look at um I think jet index.js is loaded correctly hmm I'm not sure maybe because of this right uh how are we going to import from svelt slash internal because if I come over here and say um part 8080 spell internal um this does not lead to anything so the files felt slash internal is giving us a 404 we can't find this file uh fair enough uh this file is not even in the public folder at all so if you're using if you're using a bundler this shouldn't be a problem because a bundler will look through all its dependency and try to bundle everything into one file in our case um we don't have this we don't have a bundle we only compile one code one spell component code into like one normal JavaScript module right so all these import statements are still there um we will have to figure a way to find this file and um resolve it ourselves right so first thing is this is not like a valid import statement you can't really import um like this it's either where you start with a slash where it says it's absolute from the root folder root as in this case is the public folder or relative to the file the current file which is public index.js relative to the current file right so we're gonna um what we're gonna do is we're gonna probably try to copy this file from the new modules and paste it into the public folder so here this will be coming from root folder uh Slash internal and also you need extension so that you know what file to find right uh it's unlike unlike you when you're doing a bundling uh the bundle will figure out that okay spell internal uh which file am I reading from in this case if you take a look at the node modules you'll find that svelt's internal slash internal there's a package Json so a bundle will look at this file and then figure The Next Step so if it's internal it's a folder and it finds a package just on your figure okay let's read this one and figure out okay uh a bundle so figure out whether to get like the main file or the module files or you know and and try to get resolved to that file but in our case we don't have a bundle so what I'm going to do is I'm going to just copy this index MJS file and gonna paste it into the public folder right um so these are like manual works so I'm gonna copy paste the index so I'm gonna have root paths slash internals Dot MGS okay so here I need to rename my file to be spelled slash internal MGS as well so that I can resolve to this I can find this file right luckily this file does not have any more import statement so I think that will be the extent of it so let's save this let's save our index.js as well uh let's and let's try to refresh again um interesting this is not uh resolving from the let's see bundle will load this file index.js type module oh we didn't close our script tag that's why that's problems over here okay so let's see uh let's come over here and close our script tag uh we I think we just come over here and do it ourselves in the build code as well okay and let's refresh again okay in this case we loaded index.js as well as internal MGS right everything is loaded but if you try to run nothing happened yet right so what's the problem now uh the problem is we have this component we loaded but we haven't really used it right recall the clientside component API where we actually import this component and then we actually use it in a sense where we uh instantiate this component right so what I'm going to do now is I'm going to move this index.js file into a component.js and I'm gonna create another file called index.js and here I am going to write uh Imports component from component Dot Js right and then I am going to create an instance okay component equals new component and now I need to figure out my targets so in my case in our case the target is the body because we pasted everything HTML into the body so we're gonna say uh I'm gonna come over here and say targets it goes to the body sorry document.body and then hydrate the bow uh let's see so let's look at the component event hydrate the ball whoops I think it's called the hydrates we need to pass it as true now we need to specify the same props as what we get over here as well in our server side when we render this component a our component let's see where are we okay we don't when we call this uh props is Lee how and spelled so we're gonna copy this over as well you see there's a lot of things to make sure everything goes correctly right but when you have something like a stepper or spell kit all this is being done for you so here we instantiate okay so the most important thing that is different from what we've done previously is that this has to be true hydrate has to be true and I have to make sure that this uh our code that we built is hydratable to be true for server side as well as the client side so let's save this save everything and let's try to refresh again this time round uh we loaded in next year's component and internal MGS now hopefully the uh we there's no error in the console except we didn't have a fevicon very con right but now we we already Mount our component so if I try to type something you see that now everything is reactive right so um so this is how it's it's gonna be what uh how it works right so now you maybe will ask me like oh okay um it feels like nothing's different if say if your HTML has no elements at all right if I remove everything from the body I remove all this like this nothing inside the body um if I refresh again everything still works fine how do I know the hydration kicks in and how do I know whether it's being hydrated correctly or not well let's take a look so let's restore back the let me put it back put back the original elements right and let's refresh everything looks normal uh so how do I know whether hydration Works usually this is how I'm gonna take a look first is I'm gonna open up the network condition so let's let me find where is the say Network condition so I use command P to open up this drawer and find like uh you can manually type this arrow symbol and say Network condition so here I'm gonna see I'm gonna okay sorry I'm not sure I'm not going for no condition first is I'm gonna disable JavaScript JavaScript disable so what this do is that now I load my page this whole thing is so called server rendered because we uh of course on our case it's more like we don't dynamically render this page on per request but we render ahead of time when we run our code to generate HTML right so this HTML is already rendered is being generated so here you get this static HTML that has no JavaScript at all so no interaction at all you can still type but no reactivity at all right so here when I I can do is I am going to look at this elements right look over here these are the elements and if I turn on JavaScript uh what I expect is that later on when I refresh uh let's see okay I think I miss one step so first is I'm gonna come over here and set a timeout you know timer is a bit uncomfortable okay let me add another button in the HTML let me add one button so it's okay that you have extra elements over here uh High trade I'm gonna call it um ID it feels hydrate so I'm gonna have this extra button over here and in our code we will uh um only 100 our HTML when I click this hydrate button right so I'm going to say you'll see hydrate and then I will instantiate our component so here is where we actually do the hydration right so let's let's try refresh again so everything is done uh but if you look at console there's no hydrate yet meaning we haven't hydrated out elements we try to type something nothing's changed right so if you inspect elements you see that these are the elements that is Created from the HTML written form when we do that rendering now uh first thing is I'm gonna ins cop take a look at this element I'm gonna store the reference of this H1 so this is I'm going to start as a variable uh H1 equals to this so now here's one is pointing to this session element okay so what I want to see is that later on when I hydrate um this is still the same H1 element rather than you know being discarded and thrown away and I want to make sure that later on it's still the same element and the input is still the same input so I'm gonna do this as well input equals to this the input is still the same input but then the input and the H1 has interactivity has reactivity right that's what we're gonna aim for when we click the hydrate so uh at the same time you can start at this screen usually whenever whenever element has changed when something has done to the elements it will flash us right so let's click actually everything is flashing I'm not sure whether we're hydrating correctly but let's take a look so uh H1 uh yeah it's still referring to the same element so we didn't we didn't create a new H1 this is still the H1 that we reference to just now before we hydrate and this is the new uh this is still the same one that we see on the screen so no new H1 being created right if I look for input this is still the same input elements that you see uh just now and the one that right now we are looking at is still the same input element so no new input element being created is still a same input element but right now the input element is reactive right when you're trying to type something you see that it's reflected reacted and uh yeah things change right so this is hydration hydration is you get the HTML being um rendered when you uh prerendered meaning render ahead of time or render when you have a request you get that HTML as software user at the same time you compile the code for the client side which uh when you instantiate you should pass the flag call hydrate so that it will instead of recreate any new elements it will look for the existing elements and then um Point reference to them right so let's if I don't have this hydrate to true what it means is that you ask felt to actually recreate this component and rather than recreate actually what swell will do is it will create a new set of elements inserted at the end of the body right we learned that we can have as many elements we have on the screen when we do when you create an element it will actually create a component the amount component actually will insert at the end of the children right so if you don't have hydrate this is what's going to happen but you pass hydrate to true then it will claim existing elements as uh as the elements that that's treated like existing elements as elements that it will be creating and then pointing reference to them and then add event listeners so that whenever something has changed it will update the existing elements so in this video we're going to talk about svelt register as I was trying to read through the docs I found that um there's this section that says swell register it says that two render cell component in node.js without bundling use requires felt register after that you can use required to include any.spel file but apparently this is like a magic where you can require a spell register and therefore you can start import requiring the spell file how does that even work right let's let's try it out so uh we shouldn't know that right we try we're trying to require something it should be requiring a JavaScript module right or else it won't work it should require a JavaScript um common Jazz model because we are using require so over here if we try to run this we'll end up in the unexpected token syntax error because this it itself it's not a JavaScript right so apparently there's this magic that you can do oops where I can copy over here paste it in and if I run this now amazing we can now import dot spell file so how does that work um in this video of course we're gonna learn about yes you can do this as expected but how does that work um so apparently from what I found that is that there's this secret API from node.js says that require extension apparently it's deprecated since version zero is that yeah version zero so it's it's added in the very beginning and it's deprecated since very early on because right now I think node.js latest version is 14 or 16 right at this point moment when I try and record this so this has been added very early on and it's deprecated since it's very very early on but it's still apparently it's being you in use um so apparently this require extension Works uh in a way that you can in a spell register it tries to add um like a preprocessing before you require any files and it's using this require extension API from node.js that does the magic so in this video we're going to take a look at how it's being done and how we can use uh use uh try to write one ourselves right so instead of importing still module for now we're going to create a file called a DOT n f file right so this is a very common file you see that the end files you can write some environment variables that was supposed to be secret and only so that you don't commit this file it should be a git ignore file so every time by then uh to save time to every time when you run a command you have to provide some environment variable maybe you write this file right so this file usually will look something like this where you have a secret a equals to xXx and secret b equals to y or Y right something like this so imagine this is a file just like any files that we have uh imagine what we want to do is we want to require this file oops variables I want to see whether we can um require this all right if you try to run of course you will end up with an error because this it's not even a valid JavaScript so we're gonna learn from spelled register where how we uh to use these require extensions so how it works is that you can come over here and say require .extensions and you can add an extension so in this case our extension would be a dot f so any file that ends super.f would be uh have to go through this ex this e this function this let's see dot f equals so you can pass in a function apparently so module it takes in two parameters one is module one is file name so here what you can do is that you can read the content or file process it make it like a JavaScript and then uh use this module to do something to uh to parse it parse the JavaScript and then return whatever it is all right so uh it's it's easier to do than say so I'm going to type it out right now so first is uh here we get a file name so probably we're going to read the file content so I'm gonna have FS equals require FS so we're going to read the file content content so here I'm just going to console log the content here I'm gonna add some logs um and let's try to run this okay we are we able to it's not defined okay apparently we are not we didn't trigger this so uh maybe we need to add some file name let's let's try that I have no idea how this works uh maybe Dev dot EnV so let's require.dev.env oh okay so now you you have to have a file name and then an extension extension so in this case um what we have is when we try to require any file that ends with DOT ends in this case Dev dot at the F what we get is what happens is that this function will be triggered and you will gonna uh you able to do something right so here we're going to read this content and we're going to process it like treat every line is a property so we're gonna content dot splits new line um and map for ish okay the Creator object for every line for each line the line that splits Again by equal sign so you have a key and a value pair so object equals key use value so I create an object from the content and I want to create a Javascript file JavaScript code of it that makes sense so the JavaScript code should look something like this module that exports equals to blah blah blah whatever right so you should be having like a secret a equals to xXx and Secret b equals YY right it should look something like this right hope that makes sense so instead of uh so what we need to do is we already have this object in JavaScript uh so we can serialize it using Json 25 to make it like this object to print it out like an object json.string G5 and also we need to add this so we're gonna make a string that looks something like this so instead of like having a module that looks like this we have a JavaScript code that looks like this so it's it's a string it's a code it's a piece of code it's a string and what we do with this piece of code is we are going to use module dots compile all this with a file name and this will return us as a module which we just returned from this function okay now what we've done is that we create a module out of any file and if you try to run this you realize that now uh let's remove this uh and let's print out here realize that we ourselves we make any file to become just a normal JavaScript module so this is a secret behind spell register and actually what it does is that it will go and require extension uh those fields file and make it a module so it will make it or make it um a cell module so here I'm going to read the content and I am going to use fill compiler to sorry to compile our code compile our code with a generate SSR and of course the format is CGS right we have the code so this is the JavaScript part of it I'm gonna return module so since we already have a JavaScript code when it is going to module compile the JavaScript code with the file name right so this is the secret behind spread register so if we have this you have this code over here it tells us that we are able to import file and this function here will focus on transforming that source code you have into JavaScript code and then use modular compile to compile it to a JavaScript module so now with this code we have we can now import adjust group uh file like a JavaScript module right you see that we don't have short register at all so resistance is just a file meaning uh just another module meaning we can actually move this all of this into the file register like this and we just import it import that register module and it will do it will try to try to set up the required extension for self module and allows us to import spell module just like in any JavaScript module so this is essentially what's felt register is so it allows us to import any field module so if your cell module is important another skill module what happens is that every time when you require something importing something uh it will keep on triggering the extensions and then therefore you're able to import so a module just like a JavaScript module so that's the secret between register I hope you learned something if you if you love this video share it to your friends uh when anyone who is learning spell at the same uh right now share to them so that they can learn as well so see ya bye