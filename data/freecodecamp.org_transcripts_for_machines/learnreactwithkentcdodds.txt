hey everybody so uh let's get this started my name is kent c dodds and i'm going to be talking about react with you all this evening and or whenever whatever time of day it is wherever you are um so let's just jump into things i've got a couple of slides here and we'll go over some logistics and stuff for the next um hour that we'll be together so um yeah so this is some stuff about me we're gonna be learning react and um yeah just a bunch of little icons and things you can click on i've got my slides right here um maybe we'll add those to the to the notes at slides.com kensey.learn.react um so these are my slides for my normal workshop which is like a full day workshop and very very interactive and so um yeah just be aware that some of the like exercises and things are kind of catered toward a handson react uh react workshop this will not really be handson like you can follow along if you want to but um we only have an hour tonight so we won't be doing everything for example we won't be doing the air squats that i normally like to do but though you can feel free to do air squats health is a good thing um so like i said it the the exercises and things you can actually do on your own um you'll see there are lots of comments and the exercises to tell you exactly what to do this is really fundamental stuff and so whether you've been using react for a long time or you're just wanting to get into it this will be really valuable because um often when we start building products with a framework or something we don't really understand what exactly is going on under the hood or how things are working and so that's hopefully what i'll be able to give you uh from this it's very very bare bones so we're not um like i i start out with just index.html file so that you can draw a queen separation between uh react the framework and all the other stuff uh like webpack and things um so yeah we're all the examples aren't 100 practical it's not we're not covering everything you can do with react but most things the nice thing about react is that it's pretty has a pretty small api surface area and i'm not going to go through every single api and say like okay so let's look at the docs here are all the apis lifecycle methods and things it's it is a little bit more practical than that um but uh yeah it's not everything so um we are gonna be talking about react create element and jsx um and how those uh relate to each other we'll go over custom components prop type styling event handler state dom manipulation forms and http we'll see how far we get uh it's pretty likely we won't get like really all that far i'm not going to give you any time to do the exercises on your own um and so yeah that's um unfortunate but that's uh kind of the nature of the time limit that we have so we'll probably get through quite a bit more than we would if you were doing the exercises on your own i give you time for that um and the cool thing about having this recorded is that you can um watch it later and and pause it and do the exercises and then watch my solution okay cool so if you haven't set it up this is how you do it um there you can actually run everything in code sandbox so if you haven't heard of code sandbox before um it you're gonna have your mind blown because it's amazing so this is the repository for it um we have a gitter chat but i'm not going to open that up i'm going to use the youtube chat maybe there's a lot of chatter which is great um but i'll try to keep up on questions and stuff in there but yeah if you go to the repo and then go to code sandbox.io go on that link there then it'll open up in code sandbox which is a full like it's almost like an integrated developer experience an ide in the browser it even runs the test which is like really awesome um so yeah this you can do most of the workshop just right in here so you don't have to install anything which i think is pretty rad so um yeah you can find a link to this repo in the description of the video um okay so once you get that set up just a couple logistics we're not in person so there's no real raising hands i will try to keep an eye on the chat here but um it's kind of hard so yeah if you have something just go like in the chat or something um and feel free to answer each other's questions i think that is really helpful um yeah and when you're going through the exercises uh fill out the elaboration and feedback forms for the exercises that will help you solidify what you're learning in your brain which is useful um if you have questions for me that are not related to this feel free to ask on my ama or first search because i've got like 400 questions that i've answered on there and then as always follow me on twitter because i tweet things and some people think it's use um so the normal routine for my workshops is i i give a quick intro to the use case that we're trying to support and then we do an exercise and then elaboration and you fill out the elaboration and feedback form and then if you have some extra time you do these extra things help each other and stuff um for us i'm just gonna skip all this stuff and we'll go i'll finish the exercise for you okay so that's it that's like literally all my slides no more slides uh slightly boring okay so here we go um i've got the project set up locally and um yeah we're gonna actually start in this intro directory so um here we have exercises exercises final uh this is actually a create react app app so if you've used create react app before then this should be pretty familiar you can look at the package.json and check out the scripts that we have here we'll be using some of those um and but from the right getgo we just have these exercises and then the final version of the exercise so if you want to peek at the final version then you can do that um so sorry i just realized i don't have things arranged the way that i wanted them to be arranged move things over a little bit um people are saying nice things in the chat thank you that makes me feel good okay so let's go ahead and um i've already opened up this file you can just in your terminal open intro exercises zero zero dot html that'll pop it open in your browser so i'm gonna pop that open and look oh my goodness where's the code see we're gonna actually start with a very very basic hello world in just javascript so we're not even going to do react for this first thing so to get us started we're going to have a body and then we're going to have a div and we're going to give that div an id of root and then we're going to have a script and that script is going to be type text javascript love javascript and um yeah for this javascript we're going to have a variable i'm going to get the root element or we'll just call it root l and that'll be document get element by id root all right sweet so now i'm going to create an element i want to say hello world to the world right so um sorry i just got distracted by a chat um we're going to make our element document dot create element div that's the kind of element we want to create i'm going to set the text content to hello world and then just for fun i'm going to set the class name to a container you know because why not and then we'll say root l append child element okay so this is how we do this in javascript i refresh and i get that here let's pull up in the developer tools pull the bottom make sure we don't get any errors in the console all right cool so that's hello world in a regular javascript where document create element um to make an element and then we append that to our root you can think of that as kind of rendering this element to the our root element if i don't do that you're not going to see anything in here this element is just like existing uh somewhere in in memory it's not actually being rendered to user so um yeah so let's go ahead i'm i'm seeing some questions so let me address some of those really quick um so a quick question can you include redux in this tutorial i actually will not be including redox and that's totally intentional um i have a talk actually i have a blog post uh let me blog dots.com how to react there we go um and i'm sorry i can't actually paste links in the chat i think unless maybe a moderator can yeah i can't paste links in the chat so you'll have to google it um but uh yeah how to react and i talk about how it's a really bad idea to start with redux so we're not going to be doing that um today because that would be more distracting than helpful um so let's see will this live stream be updated later um probably maybe i don't know um i can't tell the future um but this content like lots of this content uh is like it's all totally up to date today and most of this content actually hasn't changed um for many versions of react um these fundamentals are are true for lots of versions of react um let's see oh that's really nice benny um what type of program you use for these type of recordings check out my ama kcd.imama that's actually just a github repo and i answer that question there you can search around okay so let's take a look at the next one uh and feel free to like ping me in here oh good question from somebody named machine are you a robot uh okay is react like angular or like bootstrap it's more like angular bootstrap is a bunch of css and some some javascript for interactivity uh it's like a ui library um for um like uh design uh system um react is more building user interfaces so you could actually build something like bootstrap with react um and people have uh so yeah it's definitely more like angular in that way in the way that it's a framework but you'll see it's quite different in actual implementation which editor are using using casey imvs code that will take you to my editor settings and lots of information about that on that note um my font theme um so you'll go to that and that will send you to a tweet that i just tweeted today so that people don't ask me about my font and my theme because everybody asks about my font in my theme so learn more about that there um am i going to do any context api stuff in this tutorial no i'm not um but um if you go to kcd i am slash advanced react that will take you to a course where i do go into context i also have a blog post about contacts and also on my youtube channel acne i am youtube you'll find the um i have somewhere on there like look in my playlist my toxic workshops i have a recorded version of the advanced react component patterns course which i gave it at paypal to some coworkers so you can learn more about the context api there um okay cool sweet now we can move on feel free to interrupt me with questions that you have that are um both relevant and and not relevant but hopefully mostly relevant okay so the next thing that we're going to do i have our script here this is basically the same thing that we had before just with more comments let me navigate to this thing okay so we have our rendered hello world so now i'm going to bring in react and we're just using script tag so i've actually got react dom and react in here and react is responsible for an api called react dot create element so this is how we cr similar to document.createelement you have a react create element and we'll take a look at that then react dom is responsible for the same thing we have here with this append child you can take a react element that you got from react and react dom will render that element to the dom you also have react native and you have the ability to render to a string of html rather than a dom node so you can do server side rendering and there's a whole bunch of other renderers there's even a renderer for react to render react elements to a word document or to a pdf or to canvas so there's that separation between creating react elements and rendering those react elements to some sort of environment so let's go ahead and reimplement this using um using react so i'm going to say react.createelement and then react createelements or react.createelement that api is a little bit different from document.createelement i guess i figured you don't want to monkeypatch a bunch of properties onto onto things and so instead you can set those right away as an object so here instead of text content of hello world we're actually going to call this children and it kind of makes sense if i were to make a div and i'd say hello world um this is text content but it's also a child of the div and so i can apply that same children concept to a span or whatever else that i want um and so just calling it children not worrying about the text content idea i kind of like that so that's what the children are gonna be so we got text content and then class name we actually have the same thing container whoops i just did something okay um there we go okay cool so now we have an element but this is not a dom element let's actually take a look really quick at uh right here you bump the font size up there dot create element div see what we get back okay um sometimes chrome tries to be helpful but it isn't entirely helpful console.log if there we go okay so if i expand that then i can see a whole bunch of properties here it's actually a created element is actually just a um a huge javascript object that has a lot of properties on it and lots of those things are associated with the dom specifically um the for our element that we're creating with react however if i log that element that we created with react i'll refresh i'm getting a message here talking about reactive tools and stuff um ignore that if i click on this this console log thing it's actually also an object it's not quite as big it has some like underscore properties which is basically react telling us hey don't touch these things this is like internal implementation stuff so here we have this type of thing that's just how react ensures that this is actually a react element and then we have this key thing we'll learn more about the key later when we're entering arrays right now it doesn't it's not really relevant and then we have this props thing and that's those things that we passed here it's the second argument as an object so that props object is um exactly what we provided and then we have a ref we'll learn more about that when we're talking about interacting with dom nodes and then a type that's that first argument so react element when you do react.createelement you're just creating a javascript object that represents a react element you can't render react elements to the dom with a root element of pen child you actually need to use react dom to do that and react dom will uh will pen the child for us and manage um keeping it up to date and stuff which we'll learn more about later so let's go ahead and do that we're going to do react dom which we're getting from this script and we're going to render our element to the root element and then if we save that refresh we get our hello world so uh just quick comparison you um actually it's just these lines that are different um yes thank you aj for that consulter that was i should have done that okay um so we have we're creating an element we're setting a couple properties on that element and then we're appending that to the document in react you create an element and you provide some of those properties and then you use react dom to render that to the document okay good so far hopefully i'm going to check for a couple questions oh i'm blocking the console with my video thank you for telling me let me move this around we'll put it over here or actually you know what maybe instead i'll just do just screen there you go you don't need to see my face um okay so let me just check on some of the questions if there's anything i am going to skip some repeat questions and things so if if somebody asks a question that has already been asked please do answer them because i'll be skipping things um okay yep no no question so let's move on then to our next step so um anybody who's actually used or seen react code before probably doesn't normally see react create element in the code and that's because most of the time we're using something called jsx because let's say we wanted to render as like an additional child another div so i'm going to create another element here we'll just say kant's child element and this one's going to be a span that says hello and it doesn't need a class name oh yeah and then we'll we'll do actually we'll call it this hello element and then we'll have a goodbye element okay cool so now um we want those to be the children here of this element so we can actually make children an array because they uh you can have multiple children and we'll have hello element and goodbye element and we'll save that refresh and now we're getting hello hello because i forgot to do um world this should not be goodbye element this should be world element okay if i refresh you'll notice there's no space there so let's add a space um as a child there we go well so this is like totally not fun um to create variables for all this stuff like clearly this is a hello element because it has a childhood element so i don't like i don't want to name that so let's go ahead and put that there in its place and we'll do this same thing for this world element and get rid of that and um now good okay cool we're we're all set here except like this is horrid who would ever want to write code like this not me and so this is why we have um and actually sorry i have seen some people um who don't like jsx some people will do something like this they'll say um like they'll call it h i'm not sure why they call it h but react dot create element and then in all the places where you're using create element we'll do h i honestly don't feel like that's any better but i have seen people who don't like to use um react create element um use h instead kind of weird um and so yeah like let's let's make this a little bit easier and that's where jsx comes into play okay so somebody mentioned i'm going a little fast so i'm gonna slow down a little we're gonna go to exercise number two it's still in the intro and here i moved the react dom render down here and now we're just getting the element by id root here so we don't have to have any extra code that's irrelevant yeah at the top okay so jsx it's this really uh kind of neat thing let me give you a quick intro so oh actually i have a newsletter that you might appreciate just this week's article is about what we're going to talk about um so if i go what is jsx and we'll just go through some of these um examples here in just a second um but yeah you can subscribe to this every week i send out an article and then two weeks later that hits my blog um so let's go ahead and convert this to jsx wouldn't it be easier if we could make this be div and close that off and hello world and then class name is container and it looks like html right there's there's a little bit of difference right here we'll talk about that but uh yeah it's a lot easier and now we could actually add our span low fan and base and span again uh world right so it definitely looks a lot better than this but it is the basically the equivalent of what we had let me just format this a little bit prettier formatting isn't applying for some reason um so this is jsx we're we're in javascript we're in text javascript right um this like makes total sense inside of html but this isn't javascript syntax so this is what's called jsx and it is a shorthand for the react create element api uh for this to work let's we'll go ahead and comment this out if i go to zero three oh no we're on two that's right and i refresh here i'm gonna get a syntax error unexpected token less than okay so it's that token right there it's like wait what is going on here so the problem here is that because jsx is not actually javascript you need to convert it into the javascript version of the same api before the browser runs it and to do that we use a what's called a transpiler and a transpiler is able to make this conversion for us my transpiler of choice is babel you can also use typescript typescript will also transpile uh jsx code but i have babel loaded in here as as part of a script tag so i didn't mention this but i probably should don't do this in production it's a bad idea to do in production but it's great here because it makes it a lot more clear where the lines are between abstractions so babel is going to be responsible for taking all the code inside of this script tag and doing its translation magic to convert it to um actual javascript and then running that that converted version in the browser so to make that work we're going to change this from text javascript to text babel and now this babel script is going to look in the document for all instances of script where the type is text babel it'll take the contents of that run it through its magical transpilation to convert stuff like this into stuff like this and then um and then run that in the browser so if we save this and refresh we're going to get our hello world hooray um and we're also going to get this warning that says don't do this in production this is a bad idea um okay let's see um yeah so i'm not seeing any um any other relevant questions so i am going to just demo a couple of things for you that you might want to pull up yourself so let's go to oh actually sorry one second i just want to show you there's no smoke and mirrors going on here so um go here and look at the dom we're going to have that div classes container here we're calling it class name that's one of the differences between jsx and html and then we have a span and a span for hello and world okay so um all that same stuff in our actual um dom cool so um in my blog post that or my newsletter that i just sent out this last week uh which actually by the way if you subscribe you'll it'll send it out to you right now so you can get that in your inbox um but i give a couple examples i talk about this a little bit more how react create element just gives you an object um but i'm going to at the bottom here i link to um babel um online babel has a what's called a rebel that's um read evaluate uh print and i actually i don't know what it load i don't know i can't remember what that last one is um so here you can actually type out your um jsx stuff and on the right side you'll see what babel will turn that into so one thing i didn't actually mention to you that i probably should have is here with this children api you can actually clean this up a little um what we're looking at a little bit by using a convenience part of the api so the this middle um argument to react create element is the props that you pass so if i said class name i that's going to be that object right there any other arguments following that are considered children so if i do ban or we'll do hello ban and then another span of world then we're gonna see on the right side um we have the type we have the props and then the rest of the arguments to this react create element call are the children so that's neat so let's go ahead and um well i'm not i'm not going to waste your time and uh convert the old one just trust me that's how it works um so yeah let's go ahead and we'll just take this really quick copy this in here and that's yeah that's what we're gonna get i think that was basically the same um let's see some other really important things to know about jsx is like what if we wanted here we'll say this is our element and i'm going to do that pretty high um what if i wanted to take this container and extract that class name out to something else or maybe i want to make it a dynamic value so here we'll start with my class name container and then i can make this dynamic by doing an interpolation before i show you that actually i'm gonna um if you're familiar with uh template literals then you can have something like um yeah my html equals this template literal and we're gonna have um a div in this template literal and then this is actual html so we'll use class so this is not jsx it's just a real html so in a template literal you can do multilines you can do all kinds of things but if you want to stick a variable into that template literal what you're going to do is use this dollar sign and these curly braces and everything that ends up inside of those curly braces is what's called an interpolation so you can provide a javascript expression and whatever that expression evaluates to will get inserted into that spot in the string so i'm going to say my class name and here if we also log my html um let's see if that happens yeah tada fancy stuff right so um anything goes in in these interpolations i can do plus one i could even do like regular arithmetic so now that class is three um and then i can do like really weird stuff too so i could do an immediately invoked function expression uh using an arrow function um and this could be like return i and if we pop open the console here we're going to get classes high so you can anything that is a javascript expression can go inside of these curly braces okay so that is template literals jsx is actually really similar in that um if you wanted to make a part of it dynamic then you turn use an interpolation and instead of a dollar and curly braces you just use curly braces and now you're in interpolation zone and so we can say my class name and it will be interpolated and the value of my class name will be assigned to the class name prop which as you can see on the right here we have my classname variable and classname the prop is getting assigned to my class name so here we're creating an element its type is div and it has these props and before it was let's look at that again container the class name is just just the string now we're doing an interpolation of my class name and it's just the the value of the variable so it's actually not doing a whole lot of magic things it's just whatever goes inside of these curly braces is what's going to be assigned to the value of that prompt okay so i'm going to jump over here really quick to check out um if there are any questions that are of relevance to everybody okay yeah so somebody asked the question env or stage two for babel or both in regards to import statements um we i can actually turn that off um yeah use env definitely use env um i don't have it enabled right now i just have react enabled because i don't want to transpile more than i need to um oh my dog just walked up i gotta close this otherwise she'll start howling at me i have a uh walkout basement so the window is like at ground level with the dog okay um let's see uh any other questions can i explain things in slightly greater detail if i'm um if you could ask more specific questions then uh maybe am i going to talk about class based versus functional components or function components yes time is slipping away very fast but i will um i will probably get to that okay so that's that's jsx i don't think we need to spend any more time there other than to say you can use it for attributes you can use it for values within the like the children area of the jsx here i added a space and you'll see actually if i go back and forth look on the right side here um so i have an interpolation and then a space or anything and that will get added as this additional argument so more children okay cool um so that i i think that's like really really important to uh to uh grab is interpolations and javascript expressions if you can figure that out and and learn more about what a javascript expression is then you can really nail jsx and you can come up with new patterns and and good ways to interact with your react stuff okay cool let me just check out something here really quick make sure i'm not missing anything yeah okay so wouldn't it be cool um if we could have like let's say we wanted to do um two of these hello world and goodbye world and um we wanted each one of these to be inside of a div by themselves and both of these we want to have the class name of message okay right that's that's pretty cool we can um we can do that the thing i don't like about this is the repetition and especially like as your application gets bigger and things eventually you're going to get to the point where the um you want to make some sort of abstraction so if we think about this from a like react create element standpoint then it might actually make a little bit more sense so what i'm going to do is i'm going to comment this out really quick and man why is the formatting not working yeah i need to set up vs code to format my html i guess i don't know i used to use atom and it worked great um okay so these things look very similar so in javascript like the way we abstract things is by making functions so i'm going to make a const message function and that's just going to be an arrow function implicit return here and it'll implicitly return react to create element okay so with that i want to be able to take what the message should be so i'm going to call this i'm going to make it take an object um just for our purposes here and let's see we'll stick with the um or actually yeah we'll just do msg or the message and then instead of hello world as a hardcoded string in this function we'll just do ms cool so now i can change both of these to a function function call into message okay so if i refresh um stuff is busted what am i in the right file yeah ooh message message oh right ah you were supposed to correct me i was testing you no just kidding i messed up so we're passing an object right i'm just structuring that okay there we go so i'm um creating an object i destructure that object to pull out the message property and then i pass that message property along to this uh function call of create element as the child cool okay so how do we do this same kind of thing in jsx well let's uncomment this again and we'll move this up here so we can use it and we're going to take this message and remember any javascript expression a function call is a javascript expression so i can do this and i can do this okay so as long as i'm in interpolation mode um i'm in jsx here jsx jsx boom interpolation now i can do javascript stuff all the way until the matching curly brace and now boom i'm in jsx um here look hello world jsx oh uh busted here we go wait what my editor is kind of confused there we go okay hello world jsx goodbye world right okay but this is not like this is cool i've been able to abstract things away um make this thing reusable but it's not a super great way to compose things together like let's say for the message i wanted to um i don't know here let's well it'd be more confusing but what if i wanted to make a message a child of a message here like i wouldn't really be able to do that and it doesn't look very jsxy um so let's change this a little bit remember this react create element api it takes a string that's a div it actually also can take something else what if we could do i'm going to log this react dot create element message i want to create an element that is of type message let's count to log that and pull up my thing here i'm going to get an object i'm going to get the type is a function now if you recall we'll do a div here the div is just type is this string and then here our type is this function and it's that um message function right here okay so i've created an element that is of type message um can i pass it some props yeah probably as a second argument right that's props msg hello world we'll refresh that and now if i look here props okay message hello world okay yeah cool so what would happen if i put that react element in here instead and i refresh oh look it actually still works because what i'm rendering now what i'm interpolating is now not just um well i'm actually just kind of moving where things are happening so i'm creating an element that actually creates an element itself and i'm um and then i'm rendering that created element so it would be the same as if i were to say const um good or other message is a div hi there div and then i can interpolate that in here so i'm doing the exact same thing um so let's actually do this with hello world we're gonna create elements okay so that should work um but remember how with the react create element of div i was able to convert that into this jsx thing which i kind of really like that i want to be able to use that and so huh what if i just did like message and then this needs to be a prop so msg hello world maybe that works try that refresh oh that's not gonna work i'm getting a warning message is unrecognized in this browser well here if we look actually we can see our message is getting rendered so the react folks the people who are making this jsx thing they're like okay how do we solve this problem we want to give the same kind of experience with these custom functions of creating react elements i want to give that same kind of experience to that we have for creating um divs and being able to convert that to jsx so how do we do that well what if we tell the remember all of this is getting converted into these react create element apis using babel it's transpiling them so what if we just tell babel that anytime something is capitalized leave it alone and transpile it to just what it was before so if we capitalize this function and then use that capitalized version we'll use the capitalized version in our function call there and that good work except time that's a logging up okay cool okay so we're doing this create element of that capital message rendering that out and in jsx land we can use the capital version okay cool so let's go ahead and just see this in action over here if i put message right there so it transpiles that into react create element message with our props our props can be anything they don't have to be html things and in the case of custom react components like what we've created here custom functions it's just actually arguments that our function is getting past and then they can do whatever they want with those arguments so we're not forwarding that on as props to or attributes to our div tag we're forwarding on something else entirely and we're just using that as the uh children the additional arguments and what's cool about this is um now i can have a much better composability model so what if we re rename this message to children now we can take this hello world and remember this is this is the children prop right between here that's um that's what gets accepted as the children prop so i take that children and i remove that um and switch it over to children here ask children as a prop and now i can say let's switch this over really quick sorry here we'll just do this okay cool so i have this really nice looking it's almost like html but it's not quite html and what's cool about this is now i can put things or i can nest things just like i would in normal html so i know i've got a message and a message we can see that evidenced here we have this message in a message and i have this really really nice composability model where i can create custom components custom functions that return more jsx and react can create elements out of those and it will continue down the chain until it finds all of the elements that are of type div or type span or actual dom elements these lowercase elements let's actually rewrite this really quick to just be jsx the more typical standard here so we're gonna do a div and class name is going to equal message and then um children is children that's a prop right selfclosing tag that's one handy thing with jsx is you don't need to actually close divs if you don't have any children that you're putting in between it opening and closing you just selfclose it okay so that's working but i kind of don't like the children prop when i'm using jsx so i'll just do do this now i do have a selfclosing tag or nonselfclosing i have a closing tag cool and that works and so now uh things look a fair amount more um palatable it's it's easier to reuse this stuff let me just put this on oops new line there um and i can create all the custom components that you could imagine so to create a custom component in react you make a function and it's called whatever you want so my component that was really boring and then it accepts props and those props are whatever passed my component as prompt one hi and prop two is true drop 3 is 34 and whatever else prop 4 is a function to be anything and then in here we can use those props and return more jsx turn div i we don't have to use the props um we just get them and we render more jsx that more jsx can actually be yet another component and it's components all the way down cool so it's been a little bit i'm going to check on the questions we've only got like 10 minutes left which is unfortunate um but uh this is like paramountly important for you to be successful using react um or most efficient using react and so that's why i include it okay let's see a couple of questions so am i explaining what's happening under the hood or does this really react so um yeah so like this isn't typical react um like in an application you will not see react written this way um we're starting to get to more typical react with the jsx stuff um but yeah mostly i'm just trying to explain how um this jsx stuff works and javascript expressions because it's really really important to being successful and and understanding what's going on with the future stuff okay cool so um i'm just gonna show you a couple of things because we were limited on time um and then i'm i'll go through a couple of exercises probably so when um you want to like spend more time in these exercises just a couple of things um i have a another process over here that's running npm start so you're on npm start hit enter in your terminal and it'll pop open an app that looks like this and in here you'll have um the exercise version and the final version and for each one of these exercises that we have kind of fun stuff so um the yeah so that's that's the actual app you can also do this in um in code sandbox the app works there too we also have some tests so oops that so if you run npm t to run the test or npm run test or npm test all three of those things will work then it'll start jest in watch mode and just watch mode is awesome if you hit the p key you can filter by file name regex pattern so we'll do zero one or actually here let's see which one do we want to do we're gonna um oh i've got that label drawn um we'll probably do this one actually you know what with the last 10 minutes i'll do i'll do this one you'll see a bunch of stuff that you hadn't seen um but hopefully it'll give your mind the idea of what you want to or what's possible um so yeah we're going to be doing number five and so that will just filter down to the tests that are that match that pattern which is just the zero five exercise and then if we go to our test directory zero five we can comment out exercise final comment in exercise zero five and it will start failing and it'll tell you what's going on um and you're supposed to supposed to do some stuff um to make things things work so let's go ahead and um jump into number five on the exercises thing and i'll work through this and that that'll be the end of our doodad uh for today so here let me jump over to five or actually the url just zero five so this is the final version of what we're going to build jumping around a bit yikes there we go cool so then we stop start stop clear start clear so that's what it's um what we're going to build here uh with react um let me actually just jump over here really quick make sure i don't mess up really bad okay cool so to get us started i'm actually going to just show the isolated example of exercise so that we can be focused okay so the first thing that i get that i like to do when i'm creating a component oh sorry take a step back because we kind of skipped over a couple of things so you know how i made a function message that takes some props and then you can return some jsx from that so you can actually use a class as well javascript class and the only stipulation is that the class has to extend react.component and with that and like some of this stuff will be new to you and i don't have time to explain it all because we just have like five minutes left um but uh yeah so here we're creating a property that will be added to every instance of the stopwatch class that we instantiate and that property is called state and this is the initial value when that is constructed and so um yeah we're gonna start with a lapse of zero and it's not running so that's our initial initial state there and then we're gonna do a bunch of things here um that's cody the qual bear helping us out and then we're going to we every react class has a render method so if you're if you're using a function that function is the render method so that message function its render method is something that returns more jsx more react elements so here we're creating a class that has a render method and that render method is responsible for returning the jsx so that's what we're going to do here i'm going to create a div we'll get rid of this thing and we'll return that div let's render our label so our label is going to say the elapsed time and here inside of this render we have access to this dot state and this dot state has a property on it called lapse so that's what we want to render we'll say and actually this is interpolation right here lapse we're interpolating the elapsed variable into there and then ms for milliseconds and we save that and we're going to see zero milliseconds awesome we're going to have two buttons one that says clear and then this one that says running or it says stop if it's running and start if it's not running so let's pull out the running state and here we'll say if it's running you're going to see a lot of ternaries in jsx because a ternary is an expression you can't do like an if statement inside of the jsx if you want to do that you can do that up here but i like that and then you can make like a let element equal or whatever and then if and then set the element and then render the element but i like to just inline it so we'll use a ternary so if we're running then we're going to say stop otherwise we'll say start and save that and now do we have start and clear let's go ahead and add a couple styles so i did i skipped over this but um in in react and with jsx you can use the style prop but the way that it or or the style attribute like in regular html you have a style attribute you can have a string of css but that string of css doesn't compose very well um so you can't like you can concatenate strings of css but like how do you um reliably override things and and stuff like that it's just like a little bit harder and so um in jsx they decided hey let's have it accept an object of things that look like css and so that's what these things are you can look back at the exercise for styling to see more about that but here we have button styles and label styles so let's apply those so style equals that object and like really often you'll see that in lines like border border none stuff like that but we have this as a variable so we'll just interpolate that variable and we'll have button styles for both of those and then style is label io files with an s and refresh it looks all nice css is pretty cool okay so let's go ahead and make this interactive so we skipped over the event handling stuff um but uh we want to add a quick handler onto this button unfortunately um in like regular javascript and like with jquery and stuff you have to say okay find me that button node and i'm add event listener onto it and now i have a javascript callback that responds whenever that listener happens in react it's a lot more direct a lot more straightforward what's going on we simply have it on click and this on click we're going to assign it to a um a instance uh variable we're going to call handle run click and um we'll just make that one work for now actually you know what let's um let's do the easier one first so we'll have on click and this will be this dot handle clear click and you know what all these comments are just distracting me oh i'm getting get rid of all this stuff see it's not all that bad so um we need this handle clear click to be an instance method and um it's just gonna be an arrow function so it can make use of the lexical this and i actually just today talked about this in um tips i have daily videos that i put out during the weekday that are just little tips and stuff today was how does this work in javascript so you can learn more about the reason that i'm doing this arrow function thing um so go check that out yeah how does this work in javascript um yeah don't google that uh kcd because you'll find a million things youtube and then you can find mine out there okay so handle clear click um here we need to update the running state so that it's no longer running i'm going to initialize it to true so we can see this handle clear click actually working and we'll start out here with alert hi just to make sure that things are wired up properly so when i click on a handle clear click it's gonna or sorry when i click on the clear button it's gonna call my handle click callback and that should alert so i click hi and we know we're in a running state because stop is showing and so now we need to change that state we need to tell react hey listen i know that the state is running true but i'd like to change it to running false if that's cool with you and so we'll say this dot set state now where's the set state method coming from i don't see it in here coming from react component we're extending react component grant component provides this dot set state and here we can say running is false and it's not going to change the value of our lapse it does a shallow merge of our properties so we don't have to say um like merge this dot state or whoops you do that on the other side we did um because react will actually do that for us and so we just provide the state um the first level of the object the properties that we want changed um so cool let's we'll save that this gets refreshed and i click on clear and you'll see the stop turns to start cool so the query button is working let's make the unclick this dot handle start or run click that one's tricky because it's also it's start and it's stop um but that's what we're going to call it so we're going to do the same thing here just going to be an arrow function and i need to determine i need to set some state i need to make some changes to state i need to say that it's it's running now or it's not running now and i need to know what the current value of state is and so i can say this dot state dot running and i can know okay if it's running then i want to change it to running false otherwise running true whatever and then like i need to start a timer somewhere um but for reasons that i don't have time to get into if um react actually well i have some time to get into it watch this okay so if i wanted to um instead of this.false i wanted to call setstate a bunch of times and maybe it wouldn't all be right here in the same function it'd be part of the code path like this calls another function which calls set state and that calls another one and whatever and let's say that i was using not this dot state dot running okay so um i'm saying okay set state running is the opposite of what it the current state is then i'm going to toggle it back and toggle it back and toggle it back so we're bumping back and forth between running and not running um if i save that then presumably we're we're in a running true state so this should now say running false running true writing false running true okay bye click on clear oh actually i need to be an odd number to show the problem sorry i click did i mess something up all right yeah no so it's going to toggle every single time so um what's happening here is the set state method is actually batched and so it doesn't run synchronously so here maybe a better way to illustrate this is this dot state dot running and i'll console log that between every single one of these here we'll do another one at the beginning i pop open the dev tools and if i click on clear i'm going to get true every single time even though i'm calling set state each one of these times i'm getting um through every time and so setstate is um it's run in a batch and the reason for that is um it like we don't want to render like a million times to our user um like it's kind of nonsensical to do this like i could just store up a variable and then set state once but react doesn't want to make you have to think about that or worry about that worry about performance this is one thing that react does for performance um so it waits until all of your set state calls have run and then it flushes the state to determine what the actual state should be so anyway that whole long thing that i just went through all just to say that here when we do handle run quick if i want to get this dot state running then and i'm going to be updating state we're going to do anything else then i need to say hey react what is the state of running at this time in our batch run so i'm going to say this dot set state and we're going to use a function and so then if i call this over and over and over again it's going to react can run this one and then this one and each time it's going to give me the state and it'll give me an opportunity to return what i want for this the new state to be based off of the current state in our current batch run okay so that may be a little bit heavy and i'm sorry about that that i didn't um have quite as much time to to get deeper into that but just if you don't like complicated rules of like should i use an object or should i use a function then just always use a function and you don't have to accept any arguments uh so we could actually refactor this and this is probably what i should have done and not gotten into all this stuff but um so that is totally cool to do things out this way if you if you want to just always use a function i have no qualms with that okay cool so um here we're going to get our state and we can say if state.running and we're going to do something otherwise we're going to do something else and in either case we're going to return date dot or actually we're going to we're going to toggle the running state right so we're going to say running is opposite of state dot running okay cool so we're not actually doing actually running any of these like a timer yet or anything updating that lapse value but we can stop and uh start and clear and stop start and stop start and clear so all of that is working our running state is being updated properly um so we're we're gold in there so what we need to do now is if state dot running um then we need to set an interval and um let's see so every like as soon as possible that's the default is zero so as soon as possible i want to update the laps so i need to know what the current the start time is so we'll say start time equals date dot now and now i can get what the lapse is with um let's see or we'll we'll just say this dot set state lapse we don't need to know what the previous last was so we can just use an object here um and i'll say start time or sorry date dot now minus the start time okay cool so let's see what happens when i do that and i actually put that in the wrong spot that should be there but anyway so that's working cool isn't that okay so listen every single time that number is changing that's that's happening as fast as possible as fast as this set interval is running and it's running all of this stuff doing react create element for the div and the label and the button it's running all of that over and over and over again as fast as the browser could possibly go it's kind of nuts i think that's pretty cool i love doing this exercise because i like to see that but now we have no way to stop this so i hit clear and running is uh now false but this keeps on going and that's happening because inside the set interval we're calling this dot set state on lapse over and over and over again we need to clear this interval what i'm going to do is i'm going to set a property this dot interval and inside of this handle clear click i'm going to say clear interval this dot interval and so with that i can now refresh start and then clear and it stops it doesn't change the um the laps though so let's have that set state change the lapse to zero and i'm gonna initialize this to false now because that makes more sense and so i start it and then i clear it start it and then i stop it well stopping doesn't work yet so let's make stop work so here um if it is running then we're going to stop it so i'll say clear interval your interval this dot interval okay and then um yeah that's actually it um for that so i can now start and i don't want to set it to zero milliseconds anymore um but when i hit start again it's going to start over i don't want it to start over so what we're going to do is i'm going to move this start time to up here oh actually no that doesn't work hold on how did i solve that sorry i'm cheating what oh right you know what all that stuff that i said uh rats oh i know what i'm doing okay sorry let me just copy this over because i don't want to waste your time uh and i'll explain things okay so magic happens so here we're saying um if the state is running then we're going to just clear the interval otherwise we're going to do this set interval and then here when we're calling set state to swap the running state we're using the state updater function to be perfectly honest like in this situation using state updater functions versus using just regular objects it's really not that huge of a deal so i would like encourage you not to get dogmatic about this but it is just a good general practice to avoid surprising bugs by using a state updater if you need to reference the state that's all i'm going to say about that so here though we are determining what to do based off of the state whether to even set state or start this interval and so in this situation it is totally like it's actually better uh to use this. okay cool and so then when we set our interval we get our start time and um yeah so let's did i save that no i don't think i did we'll save that and start and stop and start again and stop again stop yeah so this is actually the magic that was i could have fixed this the start time is now um a variable based off of the current lapse time that's what fixed the bug okay cool so that's actually almost it there's one last thing and i can't really demonstrate it with the way that this works um right now but i'll just explain it so let's say that um let's see yeah let's say that i have a toggle button or something to render uh the stopwatch and so if i toggle it on it renders the stopwatch i toggle it off stopwatch is gone it's completely removed from the dom like i would have some state that says stop this.state.renderstopwat then i ran to the stopwatch otherwise i don't render anything just no um and so when react reruns the render method it's going to actually remove not only the dom nodes but it'll destroy the component as well so it gets garbage collected and whatever it's just an old object so um in that kind of situation if the stopwatch we're running at the time that it gets ripped out then this set interval is still going to be happening we're calling this dot set state every like millisecond or as quickly as we possibly can and so um that can be a problem because it means that every instance of the stopwatch that gets rendered will hang around forever because it can't get garbage collected because it's being referenced inside of this callback function so we need to clear this away clear this interval um right before react removes things from the dom and tries to destroy the instance what react calls that is mounting so when a component i'm going to stop this it's probably distracting when a component is rendered to the page it's going to be mounted to the page so there's a life cycle hook called component did mount there's an inverse life cycle method for when react is going to pull it off the page and throw it away that's called component did unmount and that's what we need we need to say hey react before you take this off i want to do some work and so we're going to say component did unmount and that accepts the that's component did update whoops opponent did unmount i guess i don't have an autocomplete that that's too bad okay component oh sorry that's component will unmount sorry excuse me um yeah and that doesn't accept any arguments that's what threw me off okay so component will unmount it's like hey react is like hey by the way this thing's about to go away uh do any of your cleanup work and all we really need to do is this clear interval and that will prevent a memory leak um really important um for stuff where you set up callbacks like if you're subscribing to a store or you're subscribing to some thirdparty service like a socket or something like that then you're going to want to use component to down mount to clean up those subscriptions okay so there's a ton more stuff in here like we had this really cool thing to interact with the whoops go interact with the dom and a fun um vanilla tilt library um also using forms submit that's um yeah and then like low lows uh so like validation also check this out apple and all those things are synced together and stuff so all of these things i show you how to do i i show you some of the pitfalls with rendering arrays um and then making http requests so i don't have time to show you all that stuff right now because i'm going to go hang out with my wife but if you want to see some of this stuff then you can go to kcdim beginner react and this is a totally free course available on egghead i o um called the beginner's guide to react and it has like all of this same content um i don't go quite as deep into stuff and it's a little bit faster pace you can slow down the video if you want i guess um but um yeah it's actually just about an hour um and yeah hopefully that kind of fills in some of the gaps uh if some of this was a little like more confusing here at the end but um yeah i think that's pretty much it if you uh want to get to my sites there are those and uh definitely feel free to ping me on twitter and also my ama if you have any questions um i've got lots and lots of stuff on um on my ama like 400 questions already so you can peruse those too i'm going to check really quick if anybody has lastminute questions and then we'll wrap this up so um let's see doesn't look like it's a complete list on the github um i'm not sure what you're suggesting or saying there um that but i yeah i should mention that the um this content here the learn react repo is actually not entirely finished uh so the exercises final are done but not all of the tests are done it's i think it's just like the last one um number 11 here yeah this is a to do but all the other ones are done and um this should be done here before too long i'm going to be doing this eventually um do you need arrow notation for the oh oh i'm so glad you asked this um uh press enough yeah okay so really quick um and if you look at my dev tips how does this work in javascript you'll understand why i'm using this syntax normally you'll want to use this syntax so this is a member property every single instance of the component this um this stopwatch component is going to get a its own copy of the handle clear click function um component will unmount render uh lifecycle hooks like this these will be a single function that's assigned to the prototype of stopwatch and so all the instances of stopwatch will have access to it through its prototype so um yeah the pretty much the kind of the rule is if you're passing a function to as a prop um where you don't control where it's called then you're probably going to want to use this uh syntax to make it work so that you can use this inside um yeah that also only applies if you're actually using this if you're not using this dot then you don't need to worry about it either uh so yeah definitely watch this that'll probably give you a better idea of uh of y but yeah if you can try to use the method because um it's less memory intensive but um if you can't then this is acceptable also um i think that's it so i'm gonna jump off i'm um yeah i hope that you're all uh like found this hopefully um sort of useful and i will see you all later here i'm just gonna do a goodbye see ya oh i don't have a i have a b right back i have just the screen just me me and the screen a starting and then i've got my sweet dev tips intro so i'll just play that for you until they they turn me off bye you