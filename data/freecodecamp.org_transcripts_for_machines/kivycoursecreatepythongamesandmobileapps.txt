jonathan rue has created many popular and bestselling software courses in this free course he will teach you how to use the kivy library to create games with python you already learned the python programming language you have the basics and you are able to create your own programs with python but now what are the next steps how to improve your skills to the next level and be able to create more powerful applications with a graphical user interface that can run on any platforms ios android mac windows yes it's possible to create games desktop and mobile applications with one single longwait python and for that we are going to use the tv library tv lets you create games desktop and mobile applications by sharing the same source code in python for every platform that's very powerful in this tutorial i will teach you everything you need to know about tv step by step you will learn about the widgets to create user interfaces with buttons labels images and so on you will use all kinds of layouts for placement strategies and ui that can automatically adapt to every screen sizes mobile desktop and tablets and you will also learn about the canvas so you can draw anything you want on the screen lines rectangle circles at 60 frames per second and finally you will practice your new skills with a real world project that we will create from a to z the galaxy project galaxy galaxy is a perspective game where you need to keep your spaceship on the track you will learn how to display everything in perspective how to create an algorithm to generate the land how to manage screen touch keypress and how to play sounds and all of this runs on mac windows ios and android so are you ready let's start hi i'm jonathan with python you can create graphical user interfaces with many different libraries you have tick inter which automatically comes with the installation of python it's easy but not very powerful you have qt which is good to make featurerich interfaces with many kind of widgets but it comes with a commercial license there is also pygame which is more specific to 2d games for windows and mac and finally there is kv it's based on opengl so the graphics are fast and it supports all the platforms linux windows mac os android ios and even raspberry that's the library i choose to teach you here because it's easy versatile and powerful this tutorial is made up of two parts part one you will learn the kiwi library with the lab project that will be our programming laboratory part two you will practice your skills with the galaxy project in the lab project you are going to learn how to use the layouts the widgets and the canvas for the galaxy project we will progress with three versions version one we will manage the perspective the movements and the key press version two we will generate the land display the spaceship and manage the collisions and version three we will finalize the project with a menu add the game over state manage the score display images and play sounds but just before i will show you the installation and setup of qv for your project so that you will have a basic structure that you can always reuse for any project also you can follow this tutorial for pc windows or mac to follow this tutorial you have to know the basics of python the variables the functions the conditions the classes the loops and also you have to be familiar with a programming environment like visual studio code or pycharm if that's not the case i invite you to look at my python beginner tutorial on my youtube channel code with jonathan you will find the link in the description or you can find also some python tutorials here on freecodecamp ok let's start with the project creation and installation of tv let's do it i am going to show you how to create your project and how to install kivy in this course i will use pycharm but i will also show you with visual studio code and you can follow the same steps on mac or pc windows if you are on visual studio code you create a new file you create a new folder lab ok and you will name your file main dot py for every project you will name your file main dot py okay with pycharm you will click on new project then we will call it qv the lab i advise you to use the virtual environment but if you are on pc windows it's better to use an interpreter directly because it was some issues with the virtual off and of course you need to select a version of python python 3 dot something minimal version 3.7 you can use 3.7 3.8 3.9 3.10 if you have no interpreter here you can click on this button system interpreter and then you select your version of python of course if python is not installed on your machine i advise you to go on my youtube channel called with jonathan there is a tutorial here that will explain you all the steps to set up your machine and to install python okay in my case i will select the virtual environment and i will take a version of python 3.9 create you will get this interface so in some case it will create a main.py directly if it's not the case you can right click here on your project and make a new python file that you will call main.py in our case we are just going to remove the breakpoint here and to remove all the code okay now we are going to install the kivy library i will show you first on pycharm and then on visual studio code you will click here on terminal and then you will type ice on minus minus version in my case it's 3.9.2 that's correct we need to be sure we use a python 3 version and then i will type pip install qv enter when it's complete you will type pip lists enter and then you can see on the list that kivi has been installed on visual studio code you will click here on terminal new terminal and you will have this interface here you will type python minus minus version and as you can see i have a version of python 2.7 as a default because i am on mac on pc windows normally you should have installed python version 3 something but if you are on mac you will need to type python 3 minus minus version ok in my case it displays python 3.9.2 so take care here you will need to make sure that visual studio code is using the same version here on the lower left part here i need to select a python 3.9.2 so if i scroll down you can see i have two versions of python 3.9.2 i need to use the right one to do that i will type which python3 and i can see the right path here python.framework so this is this version that i will select here if you are on pc windows which does not exist but you can type where python to get the pass of your python interpreter also in visual studio code make sure that you have installed the python extension here else you will not have the possibility to play the file again i explain you all of that in my python tutorial on my youtube channel ok now we are going to write some code that is going to be the basic structure that you will always use with any project with tv i will write it on pycharm if you are on visual studio code you just write the same lines of code the first thing is to create a class and that will be the base class of our application and we are going to call it the lab and for every applications with kv you need to add app at the end so it's going to be the lab app okay take care of the upper case then we will inherit from the app class define in kivy i add semicolon and this class is going to be empty at the beginning okay you can see that we have to include the app it's not referenced yet so for this either you click here import qv up app but if you are on visual studio code you will need to write this manually take care because this is kv.app lowercase import app with an uppercase and then we are going to start our empty application so we will have an empty screen we will do this so that we can test if our application can initialize properly so what you will do is that you will take zlab app and you will add some parenthesis dot run parenthesis take care because if you forget the parenthesis here and if you write this it's not going to work you need to instantiate the class create an object and on this object you will run it okay on visual studio code you do exactly the same thing and then you will click on the play if you don't have the play here at the first time you will do a right click and click run okay and in my case i have a black screen that means everything is working fine on visual studio code you do the exact same thing and then you click on the play and if it says no module name kivy that means you forgot to install kivy in that case you need to type pip install remember that on the mac you need to type pip3 install tv okay and then i can click on the play and i get this black screen which means everything is okay at this stage if you cannot get the black screen and if you get an error that says cannot get a window provider that means you have a problem with your graphic display first you have to know that you cannot start tv in a virtual machine it's not going to work and sometimes you cannot start tv on an external display and also if it's not working on windows you can upgrade your graphic card drivers okay just before we continue we are going to define the main interface of our program and we are going to call it the main widget you will write class main widget and it will inherit from the widget class semicolon pass and you need to include kv dot uix dot widget dot widget again take care here it's an upper case and if you are on visual studio code you will need to write this line here we still need to complete a few steps you are going to create a new file you will right click on the name of your project don't right click on vrv but create your new file here it's not going to be a python file it's a file and you will call it with the exact same name of your application the lab but you don't put app after you will just put dot kv like kivy this file make sure that this file is in the same directory as the main python file this file will be the definition of our graphical interface it's inside that file that we will explain what we want to display it's also possible to create our graphical interface and directly from the code but you will see that it's more easy to do it directly from the kv file and it's also interesting because you will make a separation between your graphical definitions and the logic of your code inside this kv file we are going to explain what is the main interface and for us the main interface is this main widget in the next video i will show you how to add buttons and labels inside our main widget but for now we are going to keep it empty so i will just take main widget and i will put it here at the beginning of the file and put a semicolon so this says that the main interface is the main widget if you start your program you can still see an empty screen this is normal because we did not define anything to display that's all for the base structure of your kv project if you look at some code on internet you will see some differences for example we don't need to call it main widget and also we can use some layouts directly here instead of the widget i will show you how to do that later and also it's not mandatory to use a kv file you can do everything inside the code and in that case you will need to use a function that is called build and that will return directly the main widget however i recommend you to do exactly what we did here and to use a kv file and that's all for the configuration of our project let's continue everything is okay for the installation of tv at this stage if you had any issues first try to search for your error on google and if you don't find any information write a comment just below this video with your exact error message and i will reply you okay just before we continue let's download the resources pack for this tutorial you will find the link in the description or you can directly go to my website code with jonathan.net resources tv in this zip file you will find some images sounds and fonts that we will need later and also all the source code of the project so that it can also help if you are getting some errors because you can compare your source code and mine and spot any differences okay let's move to part number one in the lab project i will first tell you more about that project and then we will go straight into the code let's do it the lab project layout version this is a beginner project i'm going to show you a demo of this project right now first we will learn how to display some widget on the screen like buttons and labels and to change some properties like the colors the position and the size then we will create some examples on how to organize our content stacking vertically stacking horizontally using some grids and embedding previous content and also generating items by writing some codes and to use a scroll view the objective is to start your practice about kivy you will learn about the base structure of a kv project and you will learn how to use kv files where we can describe our user interface then i will show you how to use some basic widgets like the button and the label and to modify some of their properties but the most important is to learn how to create interface that can adapt to every screen size desktop mobile and tablet and that's where we are going to learn and focus mainly about the layouts also as a good practice we will use size and position that use only density independent pixels i will explain you how to do that the steps first create the project and learn about the base structure of qv project then i will show you how to display some widgets and then we will focus on placement strategies layouts concerning the layout we will progress in six steps step number one box layout box layout makes it possible to stack the elements vertically or horizontally second step onshore layout you can put your content in every corner of the screen or in the center third step grid layout you organize your content with a number of columns or a number of rows step number four stack layout stack layout is another way of stacking the items but you will go to a next line and it can also stack items of different size step number five i will show you how to use a scroll view to be able to scroll when the content is bigger than the window size we can scroll vertically or horizontally and step number six page layout i will show you how to reuse some of the previous examples that we have created and to show them like a book we will be able to slide from one side to another to display all different layouts other layouts exist in kivy you have the float layout the relative layout and the scatter layout concerning the front layout it's quite close to what we are going to see in the first part by using the widget so i did not reuse it here in the examples the relative layout has only an interest when using with a canvas so we will use that layout in the canvas section of this project and the scatter layout is very specific to particular use that is not relevant here so i did not use it in my list are you ready to start with this project let's do it now we are going to see how to display something in the screen we have our black screen and now we want to add some content i will show you how to add a button and also a label and we are going to add that inside our main widget because our main widget is our main interface so now i'm going to show you how to define the main widget and how to explain what we want to display inside our widget to do this we are going to use this syntax to explain this is the definition of our main widget and inside i'm going to use the tab and then i will say we have a button so you will use button with a b uppercase semicolon and inside the button again you use the tabs you can use some properties for example text semicolon and then we put a value for the text for example hello take care because in the kv file we never use the equal sign we don't write that we use only the semicolon okay let's start this you can see that in our window we have our hello button at the bottom here and we can click on it we don't have any action on the click button yet i will show you later how to manage the click of the button just a small thing before i comment on the button sometimes with spy charm you will see that when you start your program your window will not be selected it's going to be greyed here and it's not going to be possible to click on the button if this happens you just select pycharm again and select your window again and it will be okay this is only related to pycharm and this does not affect the fact that your program is working correctly okay let's go back to the button you can see the button is displayed on the lower left part of the screen and even if i resize my window it's always the case that's because the default coordinates are 0 0 0 for the x and 0 for the y when you increase the y you will go upper and when you increase the x you will go on the right the default size for the button is 100 pixels and 100 pixels so let's change that for example i can use the size property and i can give 400 pixels width and 200 pixels height let's try it you can see that this time my button is bigger okay and we can also move the button by using position position for example 100 for the x and 200 for the y okay so we change 100 here and 200 here perfect let me show you something important all the dimensions here the size and the positions are in pixels but because we are going to work on multiple platforms computers mobile phones tablets you will see that the screens have different pixels density and for example 400 pixels will be displayed very big in some screens or very small in other screens depending on the pixel density and we don't want such difference between every display we want something more homogeneous so you are not going to use the pixels but always the mdp done ct independent pixels to use the dp you are going to use this syntax dp 400dp dp okay and for the position it's going to be the same 100 p 200 dp so 400 dp is a lot and i'm going to show you 40 by 40. the size ndp corresponds to a physical size for example if i use 40 by 40 dp for my button and if i start this it's going to be the size of a finger you see this my window is like deactivated so if it happens to you you click on pycharm window and then you click again on your window and now it's working and now i can click on my button that's what i told you previously so to go back to the dp 40 dp by 40 dp is the size of a finger touch okay and it's going to be the exact same size on every device if we start this on a mobile phone on the tablet it's going to be always the same physical size okay let's have a bigger size here 100 and for example 80. and let's add another button to do this i'm just going to copy paste this button and i will say text hello to if i restart my program you can see that we only see hello to button and that's because it is at the same position and the same size of the first hello button it's just on top of the previous button and this is because you first draw this button and then this second button on top so we need to change the position for example for position 200 and 300 and let's see what it gives so now my second button is displayed here let's continue so now we use only the button widget i'm going to show you how to use a label for example i'm going to change this button by a label the label only displayed text on the screen and it used the same properties as the button so we can reuse text property and the size and the position and if i start this you can see that now i display a label the label does not have any interaction with the user it's just a display on the screen we can use also some other properties like the color color is going to be rgb a g b red green blue and a alpha so you need to separate with a comma and for each component you are going to give a value between 0 and 100 so it's going to be between 0 and 1. and if you want to be halfway it's going to be 0.5 for example here i want to display a right color so i'm going to give 100 red zero percent green and zero percent blue and for the alpha i will say that it's 100 percent visible if i do this you can see that my label is displayed in red i can also apply this property for the button so i can copy paste this and let's say that for the button we want something blue so i will put blue here red green blue okay and you can see that the text of my button is blue for the background of the button i will show you later in this course how to change the color or how to display an image in the button that's all for now for the display of these first controls i will show you later how to use other widgets and also how to use other properties but now let's focus on the layouts because you can see that if i resize my window then the controls size and positions are not adapted to the window and that maybe i cannot see everything that i want to display with the layouts we are going to have a placement strategy to have a display that adapts to every screen size let's start with the layout first i will show you how to use a box layout and i will show you how to use it by writing the code in python and also by using the kv file so you will see the two syntax let's go back to the project previously we have created our main widget it's our main interface here and we have displayed a button and a label so now we are going to create a new class that is going to be our box layout example which is not a widget but its box layout okay and i can write pass for now we need to import box layout in key ui x and box i would import box layout okay how can i change my main interface if i start my program i can still see my button and my label coming from the main widget so i need to replace my main interface by the box layout example the main interface can be either a widget or either a layout if i restart this time i have an empty screen so now we are going to add some buttons inside our box layout i will first show you how to do this with the code and then with the kv file usually we only use the kv file but here i want to show you the two syntax and you will see that in some case it's useful because later with the stack layout for example i will show you how to add 100 button and we will use a loop inside the code so for some specific case it's useful to know the syntax in the code first let's create the init function def init our constructor take care because with kv the constructor takes also another argument star star key w args we are not going to use this argument but it is for the internal working of kiwi so it's like this when you use super but init and you also pass star star kw arcs okay here in the init i will create a first button for example i can use b1 variable it is going to be a button and button we need to import it in tv uix button so this line also i can pass some properties to my button i can pass them directly in the constructor of the button for example text equal a you remember previously that we created button in the kv file this way we use a text property but we use semicolon to give the value here in the code we use the equal sign the names of the widgets and the name of the properties are the same with the kv file okay so let's create also a second button button number two with the text b how can i add these buttons inside my layout so myself self this class is a box layout so we can do self dot add widget i want to add a widget inside my layout i add the button one and also i can add the button too let's restart our program and see what it give you can see we have our two buttons button a and button b and they are very big that's because in fact the layout will use all the space of the window because and that's our main interface here it will take all the window space the box rear root is going to stack the different elements first we gave the button one with a and then we gave the button b so it's going to stack the different elements horizontally as a default behavior but we can also change the orientation i will show you how to do that for example if i add a third button button c that is the number three okay you can see that this next button has been stacked on the right and you can also see that if i resize my window everything is adapted correctly also as a default for the size of the different buttons the size will be equal between all the buttons but we will see how to change that later also the order of the add widget is important for example if i do add widget at the end you will see that the button a is on the right because first i added button b then the c and then the a okay let's go back to this configuration and i'm going to show you how to use the orientation property if i want to change the orientation of my box layout i can do a self dot orientation as a default it's horizontal but if i put vertical you can see that now i'm stacking vertically my different elements okay let's comment all this code and let's do the equivalent of this inside the kv file so i will comment using this syntax okay and because i have removed all the code i need to put pass to say that it's normal that we don't have any code here okay so now if i restart i have an empty screen in the kv file how can i add buttons to my box iot example i'm going to copy this and i'm going to define my box layout example and i will say that inside i have a button button a okay if i restart you can see we have one button taking all the screen then i can add button b and button c and you can see it stacking my three buttons okay and i can also use the orientation property orientation to vertical if i want to stack vertically okay so here we only used buttons in the layout but you can use also other widgets for example i can use label here instead i can use any widget in my layout but i will mostly use the button because it has a background and we can really see where it is located also it's possible to embed other layouts inside a layout instead of putting a button b here i can put another box layout or i can put another kind of layout here we will do that in the next lecture also how can i resize a button you can see that the layout is taking care of the position of the elements and of the size of the element but can i change that previously we saw how to use the size for example so if i say that my button a has a size of 40 dp width and 40dp height is it going to work let's try and you can see that it's not working at all it totally ignored this property it was working in the widget in the widget we could use the size and the post properties and it was working fine that's because a widget is not taking care of the position and the size of the element the layout does so it will as a default ignore post and size properties but you may say yes but we still want to control the size for example we want this button to be smaller than the other button and we may want to change also its position we can do that and that's what we are going to do in the next lecture previously we saw how to use a box layout by adding some widget inside it and you also learned that the layout is responsible for the position and the size of the different widgets and also we saw that we could not use the size property it was not working inside the layout because the layout is controlling the size here i'm going to show you how to use new properties so we can control the size and the position of the elements inside a layout and for this you are not going to use size and position but you are going to use size hint first you can see that i can use the hash sign to do some commands in the kv file size hint is going to be a proportion for example i'm going to give 80 percent for the width and 50 for the height so what do we have you can see that for my a button i get eighty percent of the original reads and i get also 50 compared to the other controls so the percentage is a proportion with the other controls b has a height that is twice the height of a as a default you will have one and one if i go back to one and one i get the normal behavior and for example let's say that i'm going to get only 50 percent height like i just did previously okay and now i'm going to say that b will have twice the height and you can see that now b is twice the height of c height of c is one height of b is two and height of a is 0 5 these size are proportions and you can see that the proportions are kept if i resize the window is it possible to use fixed value for the size you can do that but you need to say you go in manual mode that means you say to the layout you don't want him to manage the size and to do this you are going to use none so i'm going to put none for the reads and for the hate and that way i can use the size property is going to take it into account now if i restart you can see my button is 40 by 40 or for example i can use 160 for example and you can see that the size is fixed for example if i resize the window it's not changing the size also i want to show you that we can write this line a different way and i will comment it okay if i restart my program i will have the default size 100 per 100 okay i can specify separately the width and the height i can write widths 100 dp and i can write the height 60 dp okay let's try it and you can see i get the size that we get previously but now let's say i want to have 100 weeds and only have a fixed height so i can mix between the two i will keep my fixed height of 60 dp but for the width i will keep 100 okay let's try it you can see i have one hundred percent width and i have fixed height now i'm going to show you that we can also change the position for example if i put a width of 50 you can see that my button is display on the left how can i move it to the right i can use plus hint pause hint is also a percentage but it's going to be a different syntax it's a dictionary you will use some components x center x and right for the horizontal and y center y and top for the vertical for horizontal or vertical you need to pick only one you cannot specify x and also the right at the same time and for the vertical you can also pick only one of the three in my case i want to control the horizontal position for these components you need to give a percentage between 0 and 100 it's going to be a value between 0 and 1. for example if i use x and i say x is equal to 0 then my button is displayed on the left like we have previously because the x is the left part of the button and we say it is equal to zero now i say that x is for example ten percent you can see that my button moved to ten percent of the width of the window now i can move to fifty percent now my button is on the right because the width of my button is 50 and because i gave the position of the x to be the center of the window 50 the button is displayed here if i give 75 percent for example you can see my button begins to be drawn at 75 percent and it's a little bit out of the window and of course if i give one 100 percent the button is totally out of the window because the left part of the button is just here at 100 the same way i can use right and right is not the left part of the button but the right part of the button and if i give 100 for the right part my button is displayed here because the right part is here it's at 100 percent and if i give it to 50 you can see my button is here because the right part is at 50 percent of the screen okay i can use also center x to 50 percent now the button is centered because the center x is the center of the button and we say that the center of the button is at 50 percent of the window and it's going to work the same way for the vertical part so for example if i stack horizontally i can just command this or i can write horizontal okay i will remove this property and i will just comment everything here so we get for example just 50 and 50 okay we have something like this and i'm going to say i want to draw my button at the top of the window i can use a post hint and put top to one so the top of my button is at the top of the window 100 i can also use center y equal 0.5 for example okay so it's the same logic for the vertical part that's all concerning the size hint and the pause hint remember that you need to use these properties to control the position and the size inside the layout and if you want to use a fixed size you use a nonvalue and then you can use size property let's continue on the project you will see that the kv syntax is a good way to build up your interface very quickly and it's also possible to create widgets and layouts directly from the code i will show you that in a bit later you might ask me but what can we do with is it only for games or can we make a full application and also is it possible to customize all the interface yes i will show you a bit later how to customize the colors the fonts and the styles of any widget but let me show you first some of the projects that i did with kivy i already told you about the galaxy project that we will do together in this tutorial it mainly uses canvas for drawing the game and some layouts and widgets for the menu another project that i created is mr beat it's a software bitbox that uses realtime audio so that you can play any resumes with any sounds that you want this project is from my python full course if you are interested you can find the link in the description and it will also appear here it uses more widgets and more layouts also the interface is totally styled and polished we have this lcd effect here you can light the buttons it also uses a scroll view for the tracks and it perfectly adapts to any screen sizes the ui is made from a combination of kv syntax and python code it's a good project if you want to go a step further with the tv library also i have published the galaxy and mrbit project on the ios and android store so you can download them and try them right now okay let me show you a last project the pizza project it looks more simple but it is more focused on the data management the pizza menu that you see comes from a web server developed with django so the app is not static it will display the updated data if you add a new pizza or if you change the price of a pizza for example the complete project jungle server plus the tv app is also part of my full python course ok let's go back to our code i will show you how to combine multiple layouts i am going to show you how to embed a layout inside a layout for example here we are going to replace the b button with a box layout containing four buttons stacked vertically how we can do that you remember that our main layout here is stacking three elements button a button b and label c button b we want to replace it and we are going to stack a box layout here instead inside this box layout we are going to put a button b1 a button b2 b3 and b4 and we are going to stack them vertically so i'm going to use orientation in this box layout to vertical if i start it you can see i have my a button first then i stack this box layout containing four buttons and then i stack my c label for this box layout it's only stacking three elements in this button this box layout and this label and inside this box layout we stack all different elements here i have used a box layout inside the box layout but of course you can mix and use different kinds of layouts and also you can embed at different levels inside this box layout i can also put another layout inside and inside so you can have multiple levels of embedding one last thing i want to show you is that we can use a spacing property to space the different items for example here for the box i hoot i can type spacing and give 10 dp so let's see what it gives and you can see i have some space between my different elements and that's all for the embedding of the layout let's continue we have completed the first step with the box tryout and we move to the second step onshore layout so we are going to create a new class class that we are going to call onshore layout example that come from an onshore layout and you will need to import it import qvuix onto our layout onshore layout okay and i will write pass then i will go back to my kv file and i will say that it's going to be the main interface of course if i restart now i don't have anything in my window and of course we are not losing what we did previously if i want to see my main widget i can just replace my main interface here and i can see the previous examples that we did previously okay and later in this course i will show you how to create a menu with multiple screens and we will be able to navigate inside the application to all our different examples but for now we just do it manually okay i'm going to start on the onshore layout let's define it inside it i'm going to put a button with a text that is a okay let's try it you can see that my onshore layout took all the space that will be the case every time for the layout and inside it i put a button that also took all the space so it's not interesting here because i want to change the position of that button inside the screen so we need to give a size to this a button how can i do that i will need to use size hint and i will say i give 10 percent reads and 10 percent hate okay let's try it you see that as a default on the button is at the center of the layout now i'm going to show you new properties that we are going to use only for the onshore layout it's unsure x and unsure y and these properties can get different values for example right left and center for the x and bottom top center for the y as a default it's center and center so let's say that for the x for example i give right and that i don't define the answer y what is it going to give you can see that now my button is on the right and as a default we are still in the center of the wire take care because the onshore layout takes all the space and this just defines where he will place the child elements the widget we put inside but of course if we use two buttons for example button a and button b they are going to occupy the same space it's no stacking here it's not like a box layout the behavior of this layout is different so button b is just above the button a you can see that if i use two and two here my button a is just below okay but for now let's just go back to the previous positions so i'm just going to comment on the button b okay so my button a is on the right center of the screen how can i display it to the top left corner for example in the x i will use left and then i will activate onshore y and i will give top okay so it's top left good okay i can use for example the bottom here and the center for the x bottom center okay so let's keep for example the top and center horizontally this one so i previously show you that the difference elements are not stacked so how can i display two buttons then i can stack my two buttons in a box layout okay and this box layout is going to be displayed at the top center of course i need to give a size to my box layout so i'm going to give size hand to this box layout and to remove size hint in the buttons okay let's try that you see i have my box layout taking 20 percent and 20 of the screen size and inside it i have my two buttons that's all that i wanted to show you for the onshore layout we have completed the step 2 onshore layout and we move to the grid layout with the grid layout you can organize content with columns and rows so let's create our new example grid layout example that comes from a grid layout ok so again you will need to import it import import kv uix grid layout okay so now let's change the main interface with the grid layout and let's define our grid layout example first i want to show you something new we are not obliged to do this we did this to explain that our grid layout example is a grid layout and we need that in the kv file else he will not know about our grid layout example but we can use a small shortcut if we don't want to use the coding python and that's the case here because we will keep it with pass we can just command that and give the parent class directly here in the definition by using the add sign and put the parent class directly that's exactly the same so this time we don't need to use that and of course we could do that with our other example previously except with the box layout example because we wanted to use some code here so finally if you change your miner if you want to implement some code you will go you will need to revert and to remove that and to uncommand this code and write your code here but in this case we will keep it like this grid layout let's add some content button text a and we are going to add a few buttons b and c okay if i start like this it's not really working you can see that the buttons are displayed here because this layout needs two mandatory properties it's rows number of rows or number of columns you must specify one of these two properties for example we say that we have two columns in that case i have a b and then c we have two columns of course if i say only one colon it's going to behave like a box layout we have only one column and if i say we have three columns it's also going to be the same as a box layout except that we stack horizontally so i'm going to put more buttons inside d e and f okay i keep the three columns and in that case i get a grid like this and i can also use the rows it's going to work the same way so i can use rows and say for example we have two rows and i'm going to get this result okay that's fine now let's say that we want to change the size of this first column how can i do that i can resize the a button with a size hint and i'm going to give 50 horizontally and 100 vertically if i restart you see that it's not working because the d button still have a 100 percent so the colon will still use 100 but if i copy this to the d button then because i have the a and the d button to 50 the colon can resize to 50 percent so it's still a proportion but we can have a fixed value if i use none instead and if i use a reads for example 16dp and i copy paste that on the d button let's try it you can see that this time it's fixed value on the left the last thing i want to show you is that again we can embed a layout inside the gray layout and for example we are going to replace the b button so we already know that we can replace that by a box layout for example but we can do even better than that if i go back to my previous examples and for example if i get the box layout example box layout example is also a box layout so i can pick it directly and put it in my grid layout instead of the button b i will put my box layout example and if i restart this you can see that in this cell i have my box i wrote example stacking the a button this second box diode and the c label and this second box layout that stacks the elements vertically so you can see that this is very easy and very powerful that's all that i wanted to show you with the grid layout let's continue on the project we have completed the third step on the grid layout and we move on to the stack layout i will create my new stack layout example and this time i will also create it in the code because we are going to use a kv file but also we are going to write some code so i will do stack layout from stack layout and of course you need to import it okay then i will change my main interface and i will define my stack layout example the stack layout is stacking the elements but not the same way as a box layout the box layout is only in one line and it will make all the elements fit in this one line or one row but the stack layout will stack the items on multiple lines and you need to give the size of each item and each item can have a different size and also i will show you how to change the orientation so let's start by putting a button text and it's going to be a button okay so if i start you can see that here i have an error and why do i have an error can you see it says it cannot parse this line because you should never use uppercase on properties so it's text with a small t okay let's restart you can see that my button is taking all the space because the stack layout does not manage the size of the items so we need to specify a size with size hint and let's say that this button will take only 20 percent horizontally and vertically let's try it so i have my a button at the top left corner and we are going to add some more buttons b and c b c you can see it's stacking the elements this way and if i resize the window the buttons are always 20 of the size of the window so what happens if i add three more buttons d e and f you can see he was able to stack five button of twenty percent because it makes one hundred percent and then he went to the next line perfect so now let's continue and let's add some more buttons but i want to add them with the code because for example i want to add 10 button or 100 buttons so we are going to use a loop so i will keep all my buttons here in the kv file but i will also begin to write some code here def init with also the star star kw x and you have to call super init by passing the kwx okay this is a basic structure for the constructor then i can begin to write my code how to create a button and to add it in my stack layout and we saw that previously i can create a button b button and i can give some properties here so text for example is going to be z and i want to add it in my layout so i can do self dot add widget and i add this b button if i start that you can see that the z button is taking all the space because as a default he will use a size hand of 1 n1 so we need to change that and i can use a comma and size hint equal to tuple that is 20 and 20 let's try again what's interesting here is that you can see that the z button was the first one i did in the layout then i had the abcd and that's because init is called at first so first you will do that and after he will do what is in the kv file okay so just to make it more simple here i will delete what i have in the kv file and i will keep only my z button okay now i want to create multiple buttons so i will use a loop i will loop here for i in range let's say we want to create 10 buttons 0 to 10 and inside my loop for each time we loop we will create a button and we will add it in the layout of course for the text i want to change and i want to display the value of i and because i don't want to start with 0 i'm going to display i plus one to start from one so let's try again you can see i have ten buttons and i can resize my window perfect now our buttons use twenty percent width and twenty percent height what happens if i use a fixed value for the size i'm going to do that so i'm going to put none and none for the size hint and i'm going to give a size property equal to a tuple and it's going to be for example 100 dp in the code you need to use ndp parenthesis 100 and you need to import that import from qv.matrix okay and then i will use a comma for the height and use dp of 100 okay let's try it i restart my program and i have my 10 buttons but if i resize the window you can see that the elements are stacked differently because it's a fixed size of the elements actually i don't need to stack elements of the same size and for example if i change the size here and let's say we use a size variable that is going to be dp of 100 plus we are going to use the value of i multiplied by 10 for example so we have different size for our buttons so i'm going to change that here and you will see that it every button has a different size and we have something like this okay anyway let's go back to a fixed size so i'm going to put back size equal dp 100 size is not the property here it's just a local variable okay i can use any name for this variable so i want to show you a few more things the orientation you can see that we begin to stack from the left to the right and from the top to the bottom but we can change that behavior with orientation property so i can use the orientation property from the code directly or from the kv file on my stack layout i will start with the kv file orientation orientation is not only horizontal or vertical for the stack layout it's a little bit more complex than that you can select two stack you can select to stack from left to right and also from top to bottom and you are going to give a string that is a contraction of that that is left to right and top to bottom this is the default orientation but if i want to start from right to left i can change that and it's going to stack from right to left and top to bottom okay if i change here to bottom to top you can see that it's taking from right to left and from bottom to top and of course i can do the last one from left to right and from bottom to top left to right and bottom to top okay and it's also possible to use this in the code so i'm going to show you the equivalent of that you will do here in your init self dot orientation equal and you put the same value that we did previously okay next thing i want to show you is that we can use a padding value a padding is an internal margin so we can use padding and you will give 4 value the top padding 20 dp the left padding 20 dp then the top padding 40 dp is going to be a clockwise from left top right bottom okay but usually we put the same values for the different area so i'm going to put 20 dp all around and we're going to try that now you can see in this padding effect this internal margin okay so i'm going to remove it and i'm going to show you a last thing we saw previously the spacing with the box layout to put some space between the different elements and i can give a spacing horizontally and vertically for example 20 dp horizontally and 20 dp vertically okay let's try it and you can see i have a margin between all my different elements okay one last thing for example i will go back to the default orientation so i will command that and i will also comment the spacing so we go back to our 10 buttons like this and what happens if i decide to put 100 buttons let's try it you can see i don't have enough space in my window i can expand the window to display more items but i cannot display the 100 items to solve that we are going to use what we call a scroll view that will make the possibility to scroll in the window and that's what we are going to do in the next lecture we have completed the step number four with the stack layout and now we move to the scroll view previously we have created a stack layout and we have 100 items that we cannot display in the window so we are going to add a scroll view so we are able to scroll and see all the items i will go to the kv file and i'm going to create my scroll view example that comes from a scroll view okay inside the scroll view i'm going to put my stack layout example you can see that scroll view does not have a name of layout that's because it's a bit different because it can take only one child in our case the child is stuck layout example so let's move to this interface scroll view example and restart our program we can still see our stack layout but we can still not scroll and that's because we need to explain to the scroll view what is the size of the content so the scroll view can compute how much it has to scroll how can we give the size of the content we need to give a size hint to our stack layout example as a default it has the same size of the window so the scroll view thinks that the content is the size of the window so it does not scroll so we are going to change that and here we want to scroll vertically only so for horizontal i will keep 100 and for the vertical i'm going to say none and i'm going to give a value for example i can give a very big height i'm going to give 4000 pixel as you hate and let's see what it gives so you can see that now i can scroll okay but i'm scrolling too much because in reality the height of my content is smaller than four thousand but it's even worse than that because if i resize my window this way you can see that now the height of my content is more than four thousand so i can still not see all the content what we are missing is to get the height of the content of the stack layout and this height change when we change the size of the window in kivy this height is computed in the stack layout as the minimum height we can use it by doing self dot me minimum height this value is computed in the stack layout and it corresponds to the actual height of the content in the stack layout let's try it again and you can see that this time my scroll is correct and it's just stopping at the end and if i resize my window i can still scroll to the end of the content also the scroll view can work with any kind of layouts but you have to make sure that you specify the size so it can scroll properly and you can choose to scroll vertically like we did or also to scroll horizontally that's all that i wanted to show you with the scroll view let's continue on the project we have finished on the scroll view and we move to the page layout the page layout makes it possible to go from a layout to another one just like a book so we can go from the right to left to go to the next one or to go back by sliding on the other side i'm going to show you that so we are going to create a page layout example which is a page layout and it's going to be our main interface inside we just put a different layout that are going to be displayed as a page so for example we first display the main widget it's not a layout it's a widget but it's going to work also main widget and then we can go with our box layout example and then for example we can go with the onshore layout example and then we will put a last one maybe the grid layout example okay so let's try this you can see that we get some kind of weird animation at the start and i will explain you why we have some strange display with this page layout so first we have our main widget with the hello button and the hello to label okay and you can see that we have something on this side that we can just slide and then we move to the next one which is the box layout example but we can still see that something is displayed on the background especially if i move it here that's because the black parts that you see here it's not black color in fact it's transparent and because we don't have any color in the background of our layouts then it makes some strange display it's something we are going to solve when we will see the canvas section of this project then you can see i can go back by sliding from this side or i can move to the next one and the next one is the onshore layout so once again all of this part is transparent so we can still see the previous layout which is a box the hot example but i cannot click on them anymore and then we can move to the next one so i will show you in this course how to improve the display of this page layout by adding some background colors and also in this course we will see how to create different screens in our applications that's not really the case here here is just a special layout that takes other layouts inside but i will show you how to really make different screen and how to navigate between these different screens and that's all for the page layout let's conclude on the first part of this project so we saw many examples about the layouts it may be a lot of information that we saw here but you don't need to remember everything what is the most important is to understand how works a box layout for example and then i advise you to practice on your site to recreate a new project and to use a box layout to put some elements to change the size to experiment on your side it's very important the syntax of the kv file is the most important also we learn about the syntax in the python code it's something that we will use in some other project but it's something that is less common that using directly the kv file and you can see that the syntax is very efficient and that in a few lines we can display some content of course here the content that will display is not very graphical not very beautiful but that was not the objective the objective was to learn how to place the different content and with all that layout strategies we will know later how to create a screen from a graphical design and that's what we will do inside this project later when we will create the menu for example so practice on your site and also if you want to have more informations you can type on google tv layout and you will find this first link and then you can search in the official documentation if you want to get more details or to see more properties like for example if i go to the box layout they have some examples in python code or they have some examples in the kv file so you may find some extra informations but all the most important information is what i already show you in this section we will continue to practice with the layouts inside this project and also in other project but next we are going to focus on the widgets because now we only use the button and the label widget but many other widgets are available like the image the slider and so on and that's what we are going to see in the next section everything is complete for the layouts but just before jumping to the widgets let me show you a practical example if we look at the mrbits screen how do you think i have created this layout in fact this screen is mostly a combination of box layouts and relative layouts first we have a vertical box layout that allows us to stack what i call the top layout and the bottom layout the top layout is a relative layout so we can use the post hint property to center or to align on the side on the left we have the logo image then for the play and stop buttons we have a box layout centered horizontally and for the bpm it's a box layout aligned to the right for the bottom layout we stack vertically a play indicator widget it's a widget that we create in this project and that uses a horizontal unboxing yield the play indicator shows where you are currently playing and then we have a scroll view it only scrolls vertically and it includes a vertical box layout so that we can insert all the different tracks each track reject is dynamically built from the code so that we can easily change the number of steps that's the buttons you see here and it will stack them horizontally with the mrbit project you will practice your skills both on the kivy library and on the python language we will develop some algorithms to manage the audio part we will create a realtime audio engine we will mix all the sounds and all will be perfectly synchronized at the sample precision we will also analyze our code and rework it to optimize the performances of our program and you will see that it will make a huge difference i already told you this project is only available on my python full course okay let's continue on our project with the widgets section let's do it zola project widget version let me show you a demo of that project you will learn how to use toggle buttons to enable or disable other controls then you will learn how to manage the click of a button and interact with other controls here in this label we use a custom font and then you will learn about the switch and the slider the progress bar and also text input after that i will show you how to add some image and how to control the display the objective is to continue learning about kivy and we are going to practice around the widget how to manage the click of a button we are going to learn how to use new widgets like the toggle button the switch on the slider and how to display images i will show you new things about the kv file syntax like using the properties and the use of the id property to connect different controls we are going to progress with four steps first step is to implement a counter you will see how to manage the click of a button how to use a custom font i will also show you the toggle button and the disable state step number two i will show you the id syntax in the kv file and you will also learn about the switch the slider and the progress bar step number three we will see how to input some text and step number four we will display some images let's start with the step number one let's start to practice with the widgets and the first thing you are going to learn is how to manage the click of a button so we are going to create a layout to put our different widgets for now we are just going to use a button and a label but when we will click on the button we will be able to change the text of the label so let's start and we are going to call this widgets example and we are going to use a grid layout so it's going to be easy to put many widgets inside the grid okay let's say that we have three columns and i will add a button with a text so i need to put the semicolon here with the text click here and we are going to put a label with the text hello and i will change the main interface with my widgets example let's try it you see i have my button click here and i have my text hello now we are going to see how to manage the click of the button and at first we are just going to print a trace here and after i will show you how to change the text of the label when we click on the button on the button you have a property called on press so we are going to add that on press and here we can give some python code so we will call a function here but first we are going to create that function for that i will need to define the class of widgets example so i go back to my main py and i will create that class class with that example it's a grid layout okay so i can remove this from the kv file because the class is defined so shall i define the init function i don't really need the init function because we don't want to create some graphics inside that class we are just using the kv file for the graphic but we want to create a function to manage the click of the button so let's create this function def and we can use the name that we want for example on button click ok inside this function i will just print button clicked and i will use this function name in my kv file on the on press on the on place i want to say that i want to call this on button click function and i need to use a parenthesis here because it's like python code we don't give the name of the function we give the python code that we want to execute when we click on the button the on button click function is defined inside the widgets example inside this one so should i use self no not really because self concern the button if i want to speak about widgets example i need to use root okay let's try it and you can see that if i click on the button i have my button click trace that is displayed here okay we can try multiple times perfect so now let's change the text of the label when we click on the button and for this you are going to use a custom property so let's say that in the widgets example we have a property called my text and that is equal to a string property you need to import that import kiwi properties from qv properties import string property a string property is working like a string so we can give a default value for example hello and i will add an exclamation sign okay so now let's say that my text is used by the label so the label text is going to be my text and again we need to put root.mytext we say that we have a binding that means that the text of the label will always be the content of my text property even if my text property is changed even if you change the content of my text property it's going to be automatically linked here and that's why this kv syntax is very easy and very powerful if i restart you can see that now i have hello with exclamation sign but when i click on my button i will change my text so take care because you need to use self dot my text if you forget to yourself it's going to be a local variable and it's not going to work save my text we can use it like we can use it like a standard string i can do equal to something and i will say you clicked okay let's try it and you can see that if i click on my button i can see you clicked it's as simple as this so remember that this is a binding when i update the content it's going to be automatically updated on the property of my control and also remember the on press property on the button and that you have to give some python code here so don't forget to put the parenthesis that's all for the click of the button let's continue on the project for this exercise you are going to change the code that we have developed here so that we can count when we click on the button so at first it will be displayed one and when you click then it will be two and then three four five okay what you need to do is only to change the code here in the python file you will not change anything in the kv file we don't change the graphics here in your python code you will need to add a new variable count that you will initialize to the value 1 when you click on the button you will increment this variable and you have to make sure that you display the content of your int variable in my text property it's your time it's your time to practice and after i will show you the solution first thing to do is to create our variable so i'm going to create the count variable that i will initialize to 1. then for the text we are also going to display one at first when we click on the button we are going to increment this variable so for example i can use count plus equal one and take care you need to put self to use this variable okay how can i display the content of this variable in self my text i can say it's equal to self dot count how can i convert a hint to a string i can use the str function okay so let's try it you can see i have one when i click on the button i still have one so we have a little bug here but when i click again it begins to count two three four five can you see where is the bug in reality count is equal to one so when i click for the first time i will still display one and i will increment the variable after so i need to increment it before so it's going to be two and then i will display two at the first click let's try it one more time you can see i have one two three so my counter is working great i'm just going to change a little bit text here and i will say count ok so everything is complete for this exercise let's move on to the next lecture i am going to show you a few things about the label and we are going to use a custom font you have access to the download link of this resource folder where you have the fonts directory and this file lcd.ttf you will need to copy that inside your project here in pycharm you can use the main file and do a right click and you will see that option reveal in finder on pc windows it's show in explorer ok so i will open my folder reveal in finder and here i will copy this fonts directory inside my project ok when it's done you will see this fonts directory appearing here inside your project if you are on visual studio code you just go to the folder of your project and you copy paste this folder inside your project folder you will not see this folder appearing in your project but if you have copied the files correctly it's going to work anyway so now let's use a property on the label to use this custom font i'm going to use font name and the name of the file is lcd.ttf with an uppercase here but we also need to give the name of the directory font so i'm going to write fonts slash lcd dot ttf okay let's try it you can see that now my label is displayed a bit and differently but it's very small so let's increase the size of the text font size and let's say we want something quite big so 80 dp for example let's try it so now we have our lcd font displayed on the label okay and i can still continue to change the color for example if i want to use a different color i can say 100 red half green and 100 percent blue and totally visible okay and it's still working well that's all that i wanted to show you about the label and the font let's continue on the project i am going to show you how to use a new widget which is the toggle button the toggle button is like a button but it has a state like a switch on and off let's add this toggle button as the first element toggle button and we are just going to put a text that is going to be toggled so let's see how this button behaves you can see that from the display perspective it's exactly like a button but if i click on it you can see it has a state it's activated and deactivated okay and the standard button is just a click button but it has no state so how can we manage the state of the button to manage the state of the button we are not going to use onpress but we are going to use on state when the state of the button changed we are going to call a function for example root dot on toggle button states ok and i will need to create this new function inside my widget example dev on toggle button state and i will print toggle state let's try it you can see that now when i click on my toggle button i have this toggle state print that is displayed okay but how can i get the state of the button how can i know that it is activated or deactivated inside the toggle button there is a property called state and we want to get that value inside our function so how can i get that i'm going to do something that we are going to use again and again it's to pass the self argument here i'm going to pass the toggle button itself in my function if you go to my function we have self here but self here is for the object oriented programming it's concerning the widget example but the argument itself is going to be the toggle button so i can write toggle button for example or i can rename it to widget and you will see that we will often do that passing the self and getting the widget here so now i can use my widget dot state the state is a string of characters so i can just display it and let's see what we have so you can see that when i click on it when it's activated we have the state down and when it's deactivated we have the state normal so it's not activated deactivated it's normal and down okay so for example let's change the text of the button to on and off how can i do that i can test if with jet dot state is equal to normal then it's going to be the off case else it's going to be the on case how can i change the text of my button previously we saw how to do that with a custom property but look here we already have the widget so we can use widget dot text and change the text property to off directly and i will do the same for on here if i retry you can see that when i click on it i have on then off on and off okay so now i'm going to improve a little bit my display i want to initialize directly the text to off and also to change the size to be 100 dp reads so let's do that at first i will display off and i'm going to have a fixed width of 100 dp so i can use size hint and use none for the width and one for the height 100 percent and for the width i will give 100 dp okay let's try that it's initialized to off and then on and then off okay perfect in the next video we are going to continue to practice on the toggle button with an exercise for this exercise you will use the toggle button on or off to activate or deactivate the counter in every case it will be possible to click on the com button even if it is off but in the case it's off when you will click on it it will not increment the counter it should only be possible to increment it when the toggle button is on i'll let you practice on this exercise it's time to practice on your side when we click on the button we need to know the state of the toggle button because if the toggle button is in normal mode displaying off we should not increment the count and not update the text of the label so we can use a new variable for example count enabled that is going to be false as a default and when we click on the toggle button self dot count enabled is going to be true and it's going to be false again if we switch to off false and then only if count is enabled i will do these lines so i add a condition if self dot count if self dot count enabled then i will increment and i will update the text let's try it you can see that as a default it's off i can click on the button but it's not incrementing now i activate the counter and now it's working i can switch it back to off at any time and on again everything is okay for this exercise let's go a little bit further on what we did previously you can see that you can see that when the toggle is off we can still click on the button i am going to show you how to disable this button so it's not going to be possible anymore to click on it when we are in the off state if i go back to the kv file and if i go to my button i can use the disabled property as a default disable is false that means the button is enabled but if i put disable to true then in this case it's no more possible to click on the button so we are going to change that disabled state depending on the state of the toggle button how can we do that we already have a variable that says if the count is enabled or not so we want to use this inside the kv file for this disabled property to do that i need to have a property so we can use a boolean property and we need to import that so it's kv properties boolean property now that we have a property we can use it in the kv file i will take count enabled and i will use it in the disable here root dot count enable when the count is enabled it's going to be true it means the button is going to be disabled so that's not what we want to do we will need to do the opposite when the count is enabled we want to put false in disable to enable the button but let's just try it like this you can see that in the off state my button is enabled and in the on state my button is disabled how can i do the opposite as this i can use not in front of the property to invert the boolean if it's true it's going to be false and if it's false it's going to be true okay if i retry you can see that in the off state i cannot click on the button and in the on state i can click on it and i can count and also you can use this disabled property on other widgets that has user interaction that's all for the disabled property let's move on to the next lecture we have completed the step number one and we move to the step number two let's continue and i'm going to show you how to use a new widget the switch the switch is working a bit like the toggle button it's going to switch between on and off it will have a different display and also it will use in different properties let's add the switch in our layout i will write switch and then we start to see what we have we have our switch displayed here and we can see we can change it from on to off okay perfect now we have a small display problem here you remember that we gave 100 dp for this button so i will need to give 100 gp for this switch so that the column can have a width of 100 db so let's do that i will copy this size hint and the width and paste it inside the switch let's try it okay so this time my colon is 100 dp and now we want to get the state of that switch it's not going to be your own state it's going to be on active so i will use on active and i will call a function on the widget example that we will call on switch active and i will create that function inside the code here at the bottom def on switch active and because we pass the self which is the switch itself we will get this widget parameter and then i will print the active property print switch plus widget dot active the active property is a boolean so i will convert it to a string with str okay let's try that you can see that if i click on my switch it's going to be true and then false so i can get the state of my switch perfect in the next lecture we are going to use this switch to enable or disable some other controls the same way that we did for the count button that's all for the switch let's continue i am going to show you how to use the slider widget slider widget can be a horizontal bar to select a value between a minimum generally 0 and a maximum 100 or it can be also a vertical bar so let's use the slider i will put it just after the switch slider and we are going to give minimum zero also i need to put semicolon here okay maximum 100 these are the default values okay and let's try it like this so if i restart here we can see that the slider is here i will show you how to get the value but before you can see that at first the position was totally on the left so totally on the left means zero and totally on the right means 100 what happens if i put a default value value to 50 for example then you can see that the position of the slider is on 50. and also i can change the orientation or orientation to vertical okay so now let's get the value of the slider we can use the on value and we are going to call a new function in our class so i will call it on slider value and i will pass the slider here again inside the widgets example class we are going to go totally at the bottom and to use def on slider value self widget and i will print slider and we are going to print the value widget dot value the value of course is not a string it's a number so i need to convert it with str let's try this if i change the value you can see i get the value displayed here so it's 0 at the bottom and it's 100 at the top and we can also see that it's a float value how can i convert it to a hint i can use int here just before the conversion to the string and then if i restart again this time i get an int value okay that's all for now let's continue for this exercise you are going to add a label here and to display the value of the slider so when we will change the slider you will display the int value of the slider that we currently print and you will display it here you will need to add a label in the kv file and you will need to use a new property string property that you will call slider value txt it's your time to practice first thing i will do is to create the new label label and i will put text slider value okay if i restart we can see that we have our label here and we need to display the value to do that we are going to create a new property slider value text which is going to be equal to default value of value for example and we are going to use that in the label text root dot slider value text of course i need to update my slider value text when we change the value it's on the slider value i will do self dot slider value text equal to str int of the widget value okay let's try it we can see that if i change the slider i can see the value of my slider that was the objective of the exercise but now i'm going to go further and i'm going to show you a new syntax that is more efficient and that will avoid using this new property so i will just go backward and comment this also comment this slide and i will use a fixed value in my label for example value okay i start again and you can see that value is displayed and it's no more working ok i am going to use something new it's called id id makes it possible to use a kind of variable inside the kv file and i will say that slider is my slider then i can directly use my slider inside the text property of the label and i can say that i want to bind my slider dot value and of course i need to convert it to a string as simple as this let's try it and you can see that i can change the value of my slider and i can see the value here of course i can convert it to hint if i want it's going to work okay let's try again okay it's working fine and also you can see that we don't need anymore the on value here i will just comment it we are just using it for the print but i'm going to comment it and you can see that it is still working perfect so what we did is to use id and to put a name you can put the name that you want here like a variable and inside my label when i do this we do a binding so automatically when the value of my slider is changing the text of the label will be updated that's a very simple and very efficient syntax that's all for this exercise you are now going to use the switch to enable or disable the slider and you are going to do this only in the kv file for this exercise i don't want any modifications in the python file you will need to use id syntax like we did previously you will need to use disable property and also to use active property of the switch also i want the switch to be activated as a default when we start the program it's your time to practice i want to enable or disable the slider so i will use the disabled property we need to put something here what do we need to put we need to put something depending on the active property of the switch you remember that we use previously this active property which is a boolean and so i will need to use an id on the switch my switch for example okay so here in the slider disabled i will use my switch dot active if the switch is active it will be true so it means disable is true that means the slider will be disabled that's not what we want so we will do not before to have the opposite let's try that okay you can see that the switch is off i cannot use the slider it's disabled when the switch is on i can use it perfect so now i want the switch to be on the on position as as a default so we are going to use active and put it to true and because it's a binding when i will start the program the slider is going to be also activated that's all for this exercise i will show you how to display and use a progress bar and this progress bar we are going to link it to the value of the slider so i want to display it just under the label how we can do that we can stack the label and the progress bar inside a box layout and this box layout is going to be vertical so i will use orientation vertical okay below the label i'm going to add a progress bar for now i don't use any properties let's have a look okay you can see my progress bar is displayed here for now it's just a line but if i use some properties like for example the maximum value to 100 the minimum value in the progress bar is always zero you cannot customize it okay but for the max i give 100 and for example i can use value and give 25 so if i start you can see that the progress bar is at 25 percent now i want to use the value of the slider to be displayed in the progress bar how can i do that i can just copy my slider dot value and paste that in the value of the progress bar let's try it now you can see that we start at 50 and that the value is changing with the slider and that's all for the progress bar we have completed step number two we go to step number three text input we are going to use the text input so that the user can input some text in the interface and we are going to use that just below the box layout i will write text input okay and we are going to start it just like this so we can see this box here where i can enter some text and because we want to keep this column of 100 dp i'm going to resize my text input i will copy size hint and the reads just here ok so i have my text input here and you can see i can type some text i will show you how to put a default text and also how to get the text and display it on a label so let's do that for example the default text is going to be fu so if i restart you can see that the default text is displayed here and i can also change it okay and when i press enter i can change the lines so it's a multiple line as a default i will show you later how to change that but first let's use a label so here i will add a label how can i display the text of my text input inside my label i will use text and here i will use an id my text input and i will use this id my text input not text and if i do that you see that i have a binding that means i display foo and when i change the text input it's automatically updated even if i use multiple lines perfect now let's say that we want to change the behavior and that we want to use only one line in the text input but i will update and i will also update the label only when i will press enter here to confirm the line so let's do that i can use the property multiline and set it to false as a default the text input is multiline if i do this you can see that now if i change the content here and if i press enter the color is changing a little bit i don't go to a next line but the text has been validated but i want to change a bit this behavior because you can see that when i update the text the label is automatically updated i want to update the label only when i will press enter for this we are going to use on text validate this on text validate and we are going to define a new function that is going to be called only when we validate the text that means when we press enter on the line root dot on text validate and i will give the text input with the self and i will create this new function at the end of the widget example class and f on text validate with widget okay i am going to change this binding so i'm going to remove that and we are going to create a new string property in the code so i will copy paste that and i will call it text input str as a default we are going to put foo okay text input str is what i'm going to display in my label so i'm going to write root dot text input str okay so now text input str i'm going to update it only when i validate my text when i press enter so here i will have self text input str is going to take the new text of the widget equal widget dot equal widget dot text okay let's try it so now you can see i have full if i update some content here it's not updating the label but if i press enter it's updated and also what we can do is for example in the text i can add another string here i can concatenate with a string and i can say your name is okay so if i do that your name is fu if i write brian enter your name is brian that's all for the text input we have completed the step number three and we move to the images first thing you will copy the image folder to your project like we did previously you will find that folder inside the resource folder that you have downloaded when it's complete you will see image folder appearing inside your project we are going to start with a new example because previously we have added many things inside the screen so i want to go back from an empty screen we are going to create a new example image example and it's going to be a great layout i'm going to reuse the same thing with three columns and it's going to be my main interface so if i restart and we have an empty screen okay inside i will add an image and to select the image file you will use the source property we are going to display the cake you will first need to put the folder name slash cake dot jpeg okay let's start this you can see that the cake is displayed if i resize the window the image is resized and you can also see that the ratio aspect of the image is preserved so if i reduce the width it's reduced and also if i reduce the height it's also resized but you can see that when i expand the window it's going to be resized of its original size in the file it's not going to expand i am going to show you how to do that by using some new properties so first let's copy this image three times okay so we have something like this and i'm going to use a new property and that is hello stretch and i'm going to give true okay let's see what happens you can see that the second image is now able to straight that means to expand to a bigger size than the original size and why it's not stretching to the first image it's because the three elements have the same size here so it's actually expanding to the size that the layout give to the image okay let's continue with some other properties and i'm going to show you how to use keep ratio as a default keep ratio is true now we are going to give false to say that we don't need to keep the aspect ratio of that image and we apply this to the third image if i restart you can see that strangely it's no effect on that image and that's because this property can only be used with a low straight so you need to specify a low stretch to true and also combine it with the keep ratio to false and let's retry and this time you can see that the ratio is not preserved but the image will take all the allocated space so it's not really rendering well for that kind of image but it's going to be useful for background image like gradients if you look at the files here you see we have this jpeg file and we have also png files and that we will use later in this project the difference between png and jpeg is that png can have transparency jpeg cannot have transparency but it can compress better than the png and that's all concerning the images that's all for the widgets you might ask me is it possible to create an application with multiple screens and how can we go from one screen to another yes it's possible and that's what we call the navigation in qv there is a class named the screen manager you can search on google for screen manager tv and you will find some examples in my python full course i will cover the navigation you will learn how to create multiple screens how to manage navigation stack so you can push new screens and also pop to go back to the previous screen we will also use the action bar and all of this works for every platforms including ios and android okay let's go back to our project and we move to the canvas section you will learn how to draw lines and shapes on the screen let's do it the la project canvas version let me show you a demonstration of that project you can see a new button here canvas and we can access to all the canvas examples that we are going to create together canvas makes it possible to draw some shapes on the screen for example here an ellipse rectangle and also a spring that can adapt to the window widths you will see how to center items how to change the colors and also how to move some shapes on the screen the objective is to learn how to display graphical instructions on the screen like a line rectangles circles and so on you will understand the interaction of the canvas with the widgets you will see how to move instructions on the screen like we will do for the ball and also you will see how to call a function at a regular interval of time we will create an update function that we will call 60 times per second concerning the instructions you will learn how to draw a rectangle by giving a position and a size same for the ellipse position and size and also you will learn how to use the line instructions to draw lines from multiple points and also to draw rectangle and to draw ellipse then you will see the color instruction and give the three components red green blue we are going to add instructions in the kv file but also in the code concerning the kv file you have a sample here you can see that we add the graphical instructions inside a canvas and the canvas is inside a widget it can be any widget like a layout or it can be a button what is important is to remember that the instructions is like a list the order of the instructions are important for example here we have a red color and here we have a blue color on the screen you can see that the circle and the ellipse are red but the rectangle is blue here i have the width which is here the circle is drawn at 200 x and 200 y and 100 radius the width is the thickness of the line in the code it's going to be the same principle but the syntax is different for example here we are going to draw an ellipse at a position and the size and what is important is that we can remember the instruction inside a variable here the ball variable and it's possible to update the instruction for example here we can update the position of the instruction so at the start the ball is drawn at 100 100 but then by just changing the position property on the ball the ball is going to move at 200 100 we don't need to call again ellipse ellipse is already in the screen but the instruction automatically knows that it needs to be redrawn when we change the properties we are going to go forward in multiple steps first step i'm going to show you how to use the instructions in the kv file like the rectangle the ellipse the line and the color then we are going to do that inside the code then i will show you how to do movement like the poll and i will explain you the coordinates system we will see the exception with the relative layout and finally we will improve the page layout by adding backgrounds to the different pages and also we will create the menu for the different canvas examples are you ready to start let's do it okay let's start with the canvas section first thing we will do is to define a canvas example number one so in your main.py you will add a new class class canvas example1 and it's going to be a widget ok and i will add pass inside this class in the kv file you are going to create this example canvas example one okay and inside i will do tab canvas semicolon and i will define this new canvas example as the main interface okay so take care because this first line here is very important that is what we call the main interface so when we will do some other examples like canvas example 2 canvas example 3 you will need to replace it on this first line here to change your main interface okay now have a look because for the remaining of this tutorial the list of files is going to be different it's because the videos are extracted from my full python course however i did not include the navigation part in these tutorials so the list of files is going to be different but it will be very simple because instead of working in canvas example.kv and canvasexample.py you will always work in the main.py and the lab.kv so for example here in canvasexample.kv you will not create new file you will not create this file but you will do this in your thelab.kv file just like we did previously and for the canvas example.py also you will not create this file and you will not use vsi but you will just put your class inside your main.py let's continue and you can see that canvas example1 is a widget that means that for every widget or every layout it's possible to add a canvas section even inside the button a button is a widget so we can add canvas inside a button if you want inside canvas you are going to write the graphical instructions for example rectangle if we start this you can see a white rectangle on the lower left of your screen as a default the color is white and also as a default the size is 100 pixels per 100 pixels we can change the position and the size by using post property and here i will put the position in dp dp of 100 ndp of 200 for the y and for the size i can give dp 150 and also ndp 150 to get a square so let's try it okay we have our rectangle here 100 dp 200 dp and 150 for the size of course we can use pixels directly and sometimes in the examples i will use only pixels but as a good practice use always in dp but as a good practice use always in dp in your programs also take care because the syntax inside the canvas is different than the syntax directly inside the widget let's continue how can i display my rectangle at the center of the screen i can change the position and use self dot center but you can see that if i do that in fact my rectangle is not centered because the position corresponds to the lower left point so i will need to subtract the half of the width and the half of the height so let's do that but before i want to show you something new it's possible in the kv file to define some variables and the syntax is hash semicolon set and then the name of the variable for us it's going to be the size so we can say s and we give the value dp of 150 so here i can replace by s and s so if i restart you can see we still have the same thing concerning the center i can use center x and self dot center y still i will have the same thing here but now it's going to be easy to subtract the values x i'm going to subtract the half s divided by 2 and the same for the y let's try it you can see that this time my square is centered in the window and because you are in the kv file its bindings so when i resize the window my position is automatically updated i show you another instruction which is the ellipse with the ellipse you can draw circle or ellipse and it's working the same way you give the position and also the size for the position for example i will give 200 pixels and 500 for the y and for the size i can give for the width s and for the height s divided by two let's try it you can see the ellipse is displayed here that's all for this first part let's continue i am going to show you how to draw lines with the line instruction the line instruction use different properties we are going to define some points with points and it's going to be a tuple of x and y and x2 y2 to define the different points so let's start from 0 to 0 and go to second point which is located to x equal 100 and y equal 100 let's try this you see that we have a line here starting from 0 0 lower left and going to 100 100 but then we can add some other points for example i can write 200 0. so we have here another segment located at 200 okay and we can also say we want to go to the width of the window self not reads to be totally on the right and go at 100 okay let's try that you can see that we have a last segment that will depend on the window width we can go further in this example and draw a spring that will adapt on the window widths let's do that for example i'm going to create points at every quarter of the window so i will use self width divided by 4 and go to 100 then i will have self width divided by 2 going to 0 then self width multiply by 3 divided by 4 and go to 100 and finally width going to 0 let's try it and you can see we have the spring that adapts to the window width perfect we can also use another property to change the width of the line and i can use here grids and i can say two and you can see that the line is thicker that's all for this example concerning the line let's do an exercise first we are going to create the canvas example 2 so we are going to define this in the kv file with canvas inside ok in the python file we are going to create canvas example two okay let's start the program you can see that we have an empty screen for this exercise you will need to draw a cross you will have a vertical line centered in the screen and you will have a horizontal line centered in the screen and of course if you resize the window it has to adapt always to the center of the screen it's time to practice on your side inside canvas example.kv i'm going to write the lines instruction first line is going to be for example the horizontal line so i'm going to give the points and we are going to start on the left of the window for the x i'm going to have 0 and for the y i'm going to have self dot heights divided by 2. to get the point on the right i use self dot width and also height divided by two okay and we can keep the width to two so the line is more visible let's try that you can see we have the horizontal line and when i resize the window it's always centered vertically perfect let's add the vertical line i'm going to copy this instruction i will delete all the points for the vertical line i start in the middle of the screen so it's going to be self dot reads divided by two if we start from the bottom y is going to be equal to zero then we go to several tweets divided by two and to the point totally at the top of the screen self dot 8 so we have the vertical line and the horizontal line we have the cross that's all for the exercise we continue on the examples you are going to create canvas example number three and i'm going to show you how to draw a rectangle circle and ellipse by using the line previously we already saw how to draw rectangle and ellipse but it was filled of colors now we are going to draw only the line so let's create a canvas example tree and i will go to the python file to create example number three inside canvas example tree i will write canvas and then i will use the line instruction in the line instruction we are not going to use the points but we are going to use new properties like circle circle is a tuple and you will give center x center y and the radius for example i give 200 and 200 for the position and 100 for the radius and i can use the width property let's try that so you can see i have the circle here and i can continue with an ellipse so i will copy that for the ellipse it's almost the same but it's going to be radius x and radius y so here for example you are going to change the position to 500 and 300 and for the radius let's say 100 for the x and 200 for the y and for example we can change the width let's try that we can see the ellipse here okay 100 radius for the x and 200 for the y and also i can draw a rectangle for the rectangle it's going to be the x y width and height so let's try 800 and 100 for the position and for the size 300 width and 208 okay i will keep with two let's try that and we have a rectangle just here perfect now i want to show you how to use the colors color is an instruction i can add my color here inside the canvas color and i will specify air gb red green blue if you want a red color we will give 100 red 0 and 0 for the blue okay if i start this you can see that all the shapes are red and that's because we change the color here and all the graphical instructions after the coloring section that's because the color instructions was before all the other graphical instructions but if i move this one just after the circle then you can see that the circle is white default color and only the ellipse and the rectangle are red okay i will put it back at the beginning and i will show you something more i can use also rgb a with alpha component as a default it's 100 visible but i can use for example 30 and we have something like this also if i want to change only the color of the rectangle i can use another color instruction and let's say that we want to display the rectangle in blue so i will use 0 for red and 100 blue and also 100 visible okay so this time the rectangle is blue previously we use color as a property on the widget but inside the canva color is an instruction it's not a property that you will apply to your circle or your ellipse directly it's a global color property and all the other graphical instructions after it will take this color that's all for this example let's continue i'm going to show you how to use the canvas inside the python code we are going to create a new example canvas example four okay why do we want to use the canvas inside the code for example in some cases you will want to use a loop to display many shapes in the canvas i am going to show you how to use it and we are going to do similar instructions that we did previously inside the kv file we are going to create the init function f init and we are going to call super super init with kw args okay if you want to use the canvas you write with safe canvas and you write the canvas instructions inside this code block for example line instruction with points property and we give the tuple of points 100 for x and y of the first point and 400 500 for the second point also you need to import the line instruction kvgraphics vertex instruction ok let's try that you can see we have the line here and also it's possible to add other properties like the widths equal to okay let's try this we have width equal to perfect i can also continue and use a color instruction color here i will use a green color 0 red 100 grid and 0 blue you need to import color from kv graphics this one okay and i'm going to draw a circle line you remember that for circle we need to use center x for example 400 200 and the radius 80 and i'm going to keep reads equal to okay let's try this here i have an error because circle is a property so you need to use circle equal the tuple with information let's try again okay i have the circle here in green perfect and we can continue we can draw a rectangle the same way that we did previously rectangle it's really the equivalent that we did here if you look at circle it's the same name of the property and it's the same logic concerning the different values for the rectangle it's going to be the same x y width and height so for example 700 for the x 500 for the y and 150 widths and 100 height and we can change the width for example to five and i get a rectangle here okay if we want to draw a rectangle filled with some colors we need to use the rectangle instruction like we did in the kv file at the beginning and we have to give both and size properties so i will give both equal the position for example 700 and 200 and size property equal 150 100 and you need to import rectangle okay let's try that you can see the field rectangle displayed here that's all for this first part concerning the use of the canvas inside the code we are able to draw some instructions on the screen now i will show you how to update the instructions to move them and for example we are going to move this rectangle on the right so let's do that we will add a button on the interface and every time we will click on that button the rectangle will move from 10 db on the right first thing we are going to do is to add the button in the interface i will define the canvas example in the kv file canvas example 4 and i will add a button position for example 100 and 400 and for the text i will say a okay let's try that so now we have a button on the interface and we will need to manage the click of the button by using the on press property we have to create a new function in canvas example four for example on button a click ok so let's create this function i go back to the python file inside canvas example four i'm going to write dev on button a click let's just see if it works so i'm going to add a print foo okay let's try that and you can see that if i click on the button we have foo appearing here so the click of the button is working let's continue now i want to update the position of this rectangle to do this we need to remember the instruction inside a variable for example wrecked variable and it's going to be an instance variable so i can use it in another function here on the button click to update the instruction i have to update the properties on it here it's the position so i will write self.track.pos equal something it needs to be a tuple with x and y and for our first example i will put 100 100. let's try that you see that if i click on the button the rectangle moves to the 100 and 100 position when you update properties on instructions the canva detects that he has to redraw the instruction let's improve that so we can move the rectangle on the right with x and y i can do this get the x and y from the current position and i want to update the value of the x x plus equal for example 10 db and you need to import dp from the matrix okay and now i will build a new tuple with x and y of course it's not possible to do something like this to access to the first item of the tuple and to increment it why because the tuple is immutable you cannot change the tuple so the only way to do this is to assign the property a new tuple here i will give same value of the y but i will update the x to be 10 db more on the right so let's try this when i click on the button you see the rectangle is moving and i can click again and again that's all for this step we are able to move the rectangle on the side but you can see that the rectangle can also go out of the window and we want to avoid that we want that at most it's going to be aligned to the right of the screen and that's what you are going to do as an exercise i'm going to add some variables here we are going to add w for the width and the height of the rectangle and it's going to be right dot size okay also i will add an increment variable that is as a default dp of 10 and that we will use to change the x value and you will need to add a condition to modify the content of this variable so sometimes it's only 5dp if you have only 5dp remaining on the right and it will be 0dp if you are already aligned on the right for the computation you will use self dot reads which is the reads of the window and you will use also x which is the left part of the rectangle and w which is the width of the rectangle so for the right border of the rectangle it's x plus w it's time for you to practice on this exercise i will compute the remaining space with a new variable diff so diff is going to be safe not to it minus the position of the right border the position of the right border is x plus w so let's write this diff equal self dot width minus x plus w the right position of the border and the window width okay if div is less than what we want to increment so it means we don't have much space left we are just going to increment by what we have remaining and maybe it's already zero so in the case this is zero we are not going to move our position it means we are already on the right but if we have only five dp remaining we are just going to move to five more dp to be aligned on the right of the window and if we have enough space we will not go inside this condition and we will move of 10 db let's try this you can see that the rectangle can move and when it reaches the right of the window it just stay here okay if i resize the window it's going to work because self.width is updated okay and if i get a smaller window and if i click on the button we will compute also the right position and that's all for this exercise we saw how to move a rectangle by objecting the position property and now i'm going to show you how to move a shape automatically we are going to call a function with a time interval in this new example canvas example 5 we are going to draw a ball that will move in the screen and that will rebound on the borders canvas example 5 i'm going to take the first lines of the canvas example 4 with the init function and with canvas ok we are going to draw the ball to draw the ball we use ellipse and we use the position for example 100 100 and also the size for example 50 dp and 50db perfect you need to import ellipse here okay so if i start this we can see the ball on the screen i am going to improve the code here i want to define a variable that will be the size of the ball so i will write self dot ball size equal dp 50 perfect and i will replace this inside my code self ball size now i want to display my ball in the center of the window i can use position equal self dot center but you can see that if i use this it's not going to work and that's because in the init function we don't have the size of the window already it's too early in the initialization of the graphics so as a default the window size is only 100 per 100 pixels at that time so we get only 50 and 50 position here and if i resize the window it's not going to change because it's not a binding here it's not like in the kv file it's not going to update automatically it's just a line of code and it has been executed only one time in the init function so we will need to use another function and there is a function that is called on size and that it is called when we change the size of the window so i will write this def on size and it use arg ok and we are going to add a print to print the size of the window on size and i will add width str of self dot reads and the height str 7.8 okay let's try that you can see that when we started the program we get on size with the right size of the window because on size is called later after the init and when i change the size of the window we get the print that is called with the new size of the window so how can i update my code to make the ball displayed at the center of the window i can use an instance variable self dot ball and i will update the position of the ball when we change the size of the window self.ball dot position equal self dot center let's try this you can see it is working but that the ball is not totally in the center of the window because the position is the lowest left point so we will need to subtract the half of the size of the ball so let's do that ball position is a tuple with self center x and self center y and we are going to subtract self ball size divided by 2 and do the same for the y and if i restart this you can see that the ball is totally centered now how can i move the ball we are going to use something new to call a function regularly with an amount of time at the end of the init function we are going to add a new line clock dot schedule interval and we will need to create a new function that we will call update function self.update and we give the time interval if i put one it's going to be called every one second you need to import clock take care here it's not kv clock it's kv properties clock from kv dot properties import clock okay and we need to create the new function def update you can use the name that you want for this function but take care because every function call with schedule needs to have a parameter which is dt delta time i will explain you how to use this parameter in the galaxy project here i will add a print and i will say update if i start the program you can see that the print update is called every second how can i speed up this i can say for example 0.5 so it's going to be called every half second or two times per second if i restart you can see that it is more frequent here so let's change the position of the ball in this update function self ball position equal so i have x and y here and i will say x plus 10 and y okay if i restart you can see the ball is changing but this is quite slow so how can we update that that's because we call it only two times per second and you know that for games we usually refresh 60 times per second 60 frames per second so here i will write 1 divided by 60 and i have my ball moving quite quickly also you can change the speed of the ball by changing the amount that you increment every time for example 4 and you see the ball is moving in the screen that's all for this step the ball can move but now we want that the ball does not goes out of the window that the ball can rebound and that's what we are going to do here the ball is going to move on the x and on the y and has to rebound on the four sides of the screen but first i'm going to define the speed of the ball self.velocity x equal 3dp and for the y it's going to be 4dp and of course every time we call the update function here i will remove the plus 4. the x will be plus equal to v self.vx and the y plus equal to self dot v y and you can see that this time the ball is moving on the x and the y axis perfect for this exercise you will need to add some conditions and you will need to test if the ball is going out of the window remember that x and y are the lower left part of the ball if you want to get the right part and the top part of the ball you will need to use the self dot ball size and you will need to test with self reads the width of the window and self hate the height of the window when you want to rebound we are going to say that the speed is going to be the opposite okay so for example if your ball goes out of the screen on the right you are going to invert the speed so that every time you go to the update function you are going to increment with something negative so you will go to the left side and you are going to do the same principle with the v y it's your time to practice on this exercise if i start the program you can see that first and the ball goes out of the screen on the top so we are going to add this first condition if the y of the ball and i want to get the top of the ball so it's y plus self ball size it's greater than the height of the window 7.8 then we are going to go on the other direction self dot v y equal minus seven v y also the maximum value of the y for the ball is going to be self dot height minus the ball size so if you are above this value i just put the limit on the y and we go to the other side and we rebound let's try this you can see that the ball rebounds and then goes out of the screen on the right so i will add this condition if x plus the right part of the ball so x plus ball size is greater than self dot width then again the maximum value for the x is several tweets minus the ball size and i'm going to invert the v x okay let's try this so now we rebound on the top and we rebound on the right we need to add the two more conditions for the bottom if y is less than zero then y equal 0 and we rebound on the y axis same thing for the x if x is less than 0 then x equals 0 and we rebound on the x axis let's try that okay we rebound also on the bottom again on the top and on the left and if i resize my window we kept the ball position equal center of the window but if i release it's moving again everything is complete for this exercise we are going to create a new example canvas example 6 and i'm going to do some experiments with the coordinates of the canvas and also using the canvas with some other widgets that we use previously like the button and we are also going to use the relative layout so let's do that canvas example 6 pass and then i go to the kv file and i create canvas example 6. we are going to start with a button so i will write button with text a ok i start and i have a button on the lower left of the window button is a widget so i can add a canvas inside my button canvas and i will display a rectangle if we try this we can see that the rectangle is displayed on top of the button and that the rectangle is displayed at the coordinate 0 0. this is because the order of the instructions matters first the button has been drawn and after we have added the instruction of the rectangle we can change the order of the instructions i can use canvas b4 to move this instruction before the instructions of the button in that case the button is displayed on top of the rectangle and also you have canvas dot after i will go back with canvas if i move the button with position for example position 100 100 you can see that only the button moved and not the rectangle however the rectangle is inside the canvas of the button but you need to understand something important here the canvas is always drawn at position 0 0 always it's going to be one exception with a relative layout and i'm going to show you that but first you can see that this is not related to the button if i use a box layout for example i will comment this property you can see that the canvas of the box iot even if we change the position to 100 100 is always at zero zero the only difference will be for the relative layout in that case you can see that the rectangle moved and actually it's not exactly what you think the canvas position is still at 0 0 but the relative layout moved the canvas space to its position the relative layout is the only exception that does this i show you another example if here i use a box layout and i add two button button with text a and button with text b if i restart you can see that strangely the box layout has a small size here of 100 per 100 that's because canvas example is a widget it's not a layout a widget does not takes care about the position or the size of the children so he will give a default size for the box i would which is 100 per 100 if you want to occupy all the window widths we have to do explicitly size equal to the root dot size in the previous layout examples that we did we did not have to do that because it was directly a layout and it was not a layout inside a widget okay but here if i take the size of the widget explicitly my box layout takes all the size of the window perfect now i want to draw a rectangle instead of the a button i can use an empty widget if i replace button by widget i have an empty widget here and i can use a canvas on this widget canvas and i will draw a rectangle okay let's try it we have the rectangle at 0 0 in the canvas and i can use size on the rectangle to get the size of the widget self dot size take care it's not root note size because root is canvas example six root size will be all the size of the window but we want to use only self.size because we want to use only the size of this widget if i restart you see that we have a white rectangle and i can change the color by using a color instruction inside the canvas rgb for example green color zero one zero okay i have a green rectangle how can i do the same for the b button i want to draw a blue rectangle i'm going to copy all this section and replace button by a widget with a rectangle that is blue and you will see that this time the blue rectangle is displayed on the left because the canvas always starts at 0 zero so if you want to move the rectangle we need to give a position to the rectangle and we are going to give self.position to get the position of the widget this time it's working i have the green rectangle on the left and the blue rectangle on the right also we can do the same thing with a relative layout for example if i replace widget by relative layout i can remove the position here because the relative layout will move its canvas to its position you can see that the blue rectangle is still here it's drawn at 0 0 but because of the relative layout it moved to its position that's all that i wanted to show you concerning the coordinates and the relative layout for this exercise i'm going to ask you to draw 3 rectangle blue white and red like the french flag you will create a new example canvas example 7 but this example is going to be directly a box layout and not a widget so i will write box layout here canvas example 7 take care because you need to import box layout ok so you will do this exercise remember that for the white color you need to use one one and one it's your time to practice okay i will add the first rectangle i will copy this relative layout that i will put in the box layout and it's blue then i will use a white one with one and one also you can see that if i add only this one it's going to take all the space of the window automatically because we start with a box layout and not with a widget okay then i add the white one and also the red one everything is okay for this exercise you have completed the lab project congratulations you are now able to create user interfaces in python with the tv library but let's go a bit further with kivy by creating a realworld project part number two the galaxy project version one let's start welcome to the galaxy project it is an advanced project that means you had to follow the previous video of this course and also be able to do all the exercise if that's not the case practice a little bit more and when you are ready you can start on this project what is galaxy it's a game in three dimension or in perspective mode and the player has to move the spaceship on the left and on the right to stay on the track if you go out of the track you will have a game over let me show you a demo of the project so you can see we have a menu we have also sound that says galaxy and when i press start the game is starting with some background music i can go on the left on the right and follow the land i also have the score which is updated and if i go out of the track i go into the game over and i can also restart the program again and again the objectives of the project is to create a desktop windows linux or mac os or mobile game ios and android from a to z you will practice on apps development with kivy especially on the canvas you will learn how to structure your code and to organize it you will improve your debugging skills especially on the errors but also when we want to improve some behaviors of the game so you will need to do some investigation we will need to create some algorithm so you will practice on the land generation but also on the perspective display you will also need to create and implement all the game elements like the land and the ship and you will code all the game logic user actions what we have to do when the user press left when the user goes out of the track you will display the score and trigger the different sounds at the right moment we will progress on three steps first version you will display the grid in two dimensions and then you will transform the display to display it in perspective and finally we will also add the movement to go forward into the level and also to be able to go on the left and on the right step number two we will generate the land i mean the track that we have to follow we will also display the ship and we will manage the collisions that mean we will observe if the ship is still on the track or if it is out of the track and in that case we will just print game over on the v3 we will finalize our project to display the menu trigger the different sounds display the background image and manage the score why did i choose to create this game i did not want it to create another pong or a flappy bird or a classic snake i wanted to create something new i started from this concept of a car game in twodimension with a land generation and i like this idea to practice on the land generation algorithm so i kept this id but i was thinking of something using a grid so we can have different algorithm concerning the land but then i also thought about the visual aspect and i was thinking why not transforming this 2d aspect to a perspective mode then i change my concept of the car to a spaceship and have something in the space and have a kind of different levels where you need to reach a planet something like that so this choice is to avoid the classics like the pongs the snakes to have this learned generation algorithm which is very interesting to learn and to practice on to have an interesting visual aspect and also i don't mean that i created a new game concept it's other games like this that already exist but i never saw any existing tutorials about it so it's something new and exclusive that you will learn into that course how does it works in fact we are going to work in a 2d mode with a grid and then we are going to transform that into a perspective mode we will implement this function later transform perspective do you need to be good at math to do this in fact not really i simplified everything so you just need to understand the compute of proportions for example if i tell you that one us dollar equals 90 of euro how much is one euro in us dollar in that case is 1 divided by 0.9 1.111 if you understand this concept you can follow the mathematics behind the perspective transform else if you really cannot follow mathematic concepts you will be able to follow these tutorials in 2d mode because all of the logic of the game is done in 2d and the perspective is only to change the coordinates for the display how does we have this movement of going forward into the game in reality we are just going to offset the grid vertically so for example if we start with this grid i put two lines in color we will shift it downstairs so we have this impression to go forward into the game again and again and when we will reach this point at the base we will just loop to go back at the initial position so that we have this illusion that the game is always going forward i will explain you that in more details later concerning the ship movement on the left and on the right in fact the ship will be always displayed in the center of the screen and for example if the user press the right key we are going to move the land on the left so that we have this illusion that the ship moves on the right and this principle is going to work also when we press on the left concerning the land generation i have prepared a simple algorithm you will be able to go forward to go on the right or to go on the left and it's going to be random so we will have three patterns just going forward going on the right and going on the left so that we can generate a random and also infinite because when we go forward into the game we have some part of the pass that will go out of the screen so we will recycle it to generate new elements at the top and this is going to be displayed perfectly in perspective so that the player will have to move on the left and on the right to stay on the track we are going to start right now with the v1 you are going to create the project to define the coordinates of the perspective point to generate the grid with the vertical and horizontal lines we will also create the transformation of the coordinates that we can go from the 2d grid to the perspective mode finally we will also implement the forward movement and also the movement on the left and on the right when the user press the keyboard keys on computer or press the screen on mobile are you ready to start let's do it let's create our new project i put the name galaxy and i will use the same options as usual i will click on the create button when it's ready we will add the new python file main and i will begin to write some code class galaxy app coming from the app class and i will put nothing inside i need to import the tv.app not app okay and i will add my main widget class main widget coming from widget and i will put pass inside and import this import kv uix widget ok and of course i need to instantiate my application so i need to use parenthesis dot run okay and i will also add my kv file so i need to add not in the vf but put it here new file galaxy dot kv with the same name as app without app okay galaxy dot kv make sure it is in the same directory as the main.py and my main interface is going to be my main widget so i'm going to put main widget semicolon okay i save it and i can start my application by using the right click run and i have a black screen everything is ready for the creation of the project i want to define the coordinates of our perspective points and the perspective point will be at the center horizontally and at 75 percent of the head here and of course when we will resize the window it will automatically update the coordinates of our perspective points so let's begin by creating some variables perspective point x and let's say it's a numeric property so we'll be able to also modify it from the kv file why not let's see if we need that numeric property 0 and i'm going to copy paste this with y and import numeric property okay so we need to get the size of the window can we get the size of the window from the init let's try def in it and i'm going to call super main widget self dot init okay and i will add a trace print in it i will put my reads it's going to be str from the self dot width okay and the same thing for the height plus str self 8 okay let's try it you see that if i start my program i have init function that is called but we have a width and a height of 100 because it is a default size but of course it does not match the size of my window and also if i resize my window it's not going to work is it going to work from the on parent let's try we get parent on parent is called when we just attach the widget to the app in our case so i'm going to call the same thing here the trace and i'm going to put on parent okay let's try it you can see that i still don't have the size of my window here but anyway let's keep this function because we will need to use them in the project i'm just going to comment in the print and because i have no code here i need to add pass in this function okay it's another function called the on size with star arcs okay and let's try it on on size function on size here you see that i get a size of 1600 and 1200 which matches the size of my window and if i resize it i have the new size and that is appearing here okay so this is a good candidate to compute our perspective point i can say that on size self dot perspective points don't forget to use self here okay equal self dot reads that i'm going to divide by two i want to be at center horizontally and i'm going to use perspective point y is going to be self dot 8 at 75 percent so i multiply by 0 dot 75 and how can i observe when the property change i can use a function name that will be automatically called because it's a property and that is on the name of the property on perspective point x when the value of this property change is automatically called and we need to provide widget and value parameters so value is going to be the new value i can add a print and i will say perspective x and i will print the value the new value okay and i will do the same for on the y okay p y equal this new value let's try it so you can see 1600 1200 and i have 800 for x which is correct and 900 for the y which is also correct so my point is here and it's going to automatically adapt when i change the size of the window is it possible to do it in a different way yes we can do that from the kv file so i'm going to comment these two lines and i will use the equivalent on the kv file here we have our main interface which is the main widget and i'm going also to define my main widget inside my main widget i have these properties so i can use them perspective point x directly in my kv file and i'm going to give a value which is self dot width divided by 2 and perspective point y which is going to be 7.8 multiplied by 0 75 and if i start again my program you can see that it's still going to work you see that the values of my perspective point are automatically updated how is it possible because here we give the value of the width on the head it's because it's a binding when you write something like this in the kv file it will automatically update the value of the property when saved.reads and self.hate will be modified and of course these two functions are going to be called whether the value of the property is changed from the python file or from the kv file so that's all for the perspective point i'm going just to comment the prints and we need to put pass because we have no code inside functions okay and then we can move to the next video now we want to display our vertical line so we are going to display the vertical lines into two dimension first and then we will apply a transform to have the perspective and we will display your line totally from the bottom zero to the height of the window we will have a line at the center and we will have other vertical lines spaced by the same amount that we will compute by a percentage on the width of the window we want our game to adapt to the size of the window so let's do this but first we are going to display only one line to make a first test so i'm going to create a function in it vertical lines that i'm going to call from the init function self not init vertical lines okay i'm going to add a line instruction in the canvas with self.canvas and all the lines will be displayed in white so i will put a color instruction with one one one for white i need to import this tv graphics context instructions don't take this one okay and i will add a line instruction with points take care it's an s at points equal and we are going to give a list of points i need to import this line instruction kv graphics vertex instructions first to make a test we want to make a vertical line that will be at x with 100 so we are going to give x1 100 y1 0 x2 100 y2 100 okay let's save and try this so you can see we have our vertical line at the good coordinates okay i can resize my window it's still display here let's do something more let's display this line always at the center of the window so even when we resize the window it's going to be updated to the right position depending on the window reads how can i do that i have to save this line instruction and i need to create a new variable line equal node and i will do self not line equal line and from that this line instruction is already in the canvas i will just update my line so i'm going to create a function update vertical lines and what i want to do is to give my lines new points points equal my new points and i want to display it at the center of the window so you may say why i don't put the center here like for example self dot weights divided by two yeah why not so let's try that and see what it gave and you can see that my line is displayed here and not in the center of the window why because it took the value 100 divided by 250 that is available at the init here because we call it from because we call it from here or you may say we need to call this function on the on size no we should not do that because if we do that it's going to create over and over new instructions in the canvas and that's not what we want to do we want to create only one instructions so i'm going to remove that from here we want to call it from the init that's correct we create our instruction and then we will just update the coordinates but never call that anymore so i'm just going to update the coordinates in the update vertical lines and this function yes i will call it from the unsize function self dot update vertical lines so what i give x1 i want to give the width here i can go back to 100 for example and here i will compute the center x which is simpler to it divided by two and you need to give hints coordinates else if you have some decimals in the coordinates and the line will be drawn but not totally well so you have to take care about that x1 it's the center x and 0 for the y and then we go to the same x but 100 in our example let's see if it's working well you see that it's at the center of the window and if i resize my window i can see the line is moving and always align to the center of the window so we can just by assigning new points to this line you can see that the display is updated and you may say okay but why we did not update it only the y here and do like points of zero equals something because if you do that it will not trigger the update of the display so what you need to do is to give a new value to this points property okay so now that we have one line working and adapting to the size of the window we want to have our multiple vertical lines and we are going to start from the center line but we will have lines on the left and lines on the right we are going to define the total number of lines and we are going to define also the spacing between the different lines and it's going to be in our case 10 percent of the total width of the window okay let's do this i can delete my line because we will now manage multiple vertical lines it's going to be a list of lines and i'm going to create different numbers that we want vertical and b lines for example seven lights of course we will be able to change that numbers laters if we want and vertical lines spacing that's space between the different lines and why i don't give a value in dp are in pixels because imagine if you're on an ipad or phone it's going to be different display size so we need to adapt the size of our game depending on the size of the window so i have to give a percentage on the width of the window i will say that it's going to be 10 0.1 percentage in screen widths okay perfect in the init i will initialize my different lines so here i don't want to do that anymore but i will just add the different instructions in the canva i will not give any points i just want to create my lines and later in the updates i will reassign the points to each line so here i just want to do a new line and in a loop of course for i in range 0 2 and b vertical and b lines i will create a line that i will add in my vertical lines up and i put self so in my vertical lines i will have seven lines in our case now when i go to the update function i want to reassign my points to each line so i'm going to command that and of course i will loop same loop for every lines i need to assign the points of this vertical line of the index dot points equal something how can we compute that what we can compute is the x of the central line we can rename that to central line x and what's going to happen for example is that we are going to have this central line here but we need to draw also lines on the left and lines on the right and we will have three lines on the left plus this one four and three lines on the right to go to seven okay so what we can do is to have an offset that will be negative at the beginning and that will be the half of nb lines so we can do divided by two in our case if i do int of this it's going to be three so i'm going to start on the left and in my loop i will increment this offset so i have a kind of index of the number of the line it's going to be the negative 3 line totally on the left negative 2 negative 1 then 0 1 2 3 and i will then compute the x of the line from the central line and the offset so i can compute it here line x is equal to central line x plus the offset the offset is negative first so it's going to be on the left first multiply by the spacing between the different lines so it's going to be self dot v lines spacing but line spacing is a percentage on the window width so we first need to compute the spacing i'm going to write it here spacing is equal to self dot v line spacing multiply by self dot width okay and i will multiply my spacing here okay so first in the first loop i get my offset minus three i get central line x plus minus three the spacing so it's going to be the line totally on the left then i increment my offset so from minus three i go to minus 2 so it's going to be the next vertical line then minus 1. then the center is going to be 0 in the offset so it's going to be at the central line and then we have plus 1 spacing plus 2 plus 3. of course now i need to give my points so x is a line x and i give a 0 for the y then again line x and i'm going to give the self dot 8 so we can draw the line totally to the top let's try that okay you can see i have my different lines something i'm missing you can see that the drawing of the line is a bit weird like we have some lines that are more visible than others is because we need to put the hint here in the coordinates it's important not to have floating numbers okay let's try again so now you see it's better and we have our lines that are displayed and that adapts to the width of the window it's perfect of course we can change these numbers for example i can put less here zero four let's say and we have more lines okay so why do i put a odd number here for example if i put four lines and i go back to my zero one what's going to happen it's because it's not going to be balanced from the center line we have two lines on the left and only one here to make four lines so for this to work we need to have an odd number like 5 7 11 for example so let's keep these values that's all for the vertical lines and let's continue on the project we were able to display our vertical lines in a two dimensional space we use the vertical lines spacing to define the equal space between the different lines and we also defined the vertical number of lines for example here 5 our vertical lines start from a y of 0 to the height of the screen how can we transform that display to a perspective display we already have our perspective point perspective x and perspective y and we want to display our vertical lines this way on the axis when y equals zero we are going to keep the same value of the v line spacing but the more we go closer to the vertical points the more the horizontal axis is going to be smaller to do this we are going to implement a function that we will call transform perspective it will take the 2d coordinates as an input and it will return the transform coordinates for example if i take this line which is going to be displayed here in the perspective i have two points i have this point here point number one and point number two you can see that my point number one is going to be displayed here at the same position but the point number two will be displayed at the same position as a perspective point to go from here to here is what i call the version number one of our transformation function because it's going to evolve in the project we will see that later so how are we going to go from here to here it's going to be mathematical computation of linear proportions if i go back to my perspective representation i have my x and y axis starting from 0 and going to the maximum y of height and maximum x of width this is my display this represents my window i have my perspective x here for this line and perspective y here for the example we are going to take this blue line it has two points point number one here x one x1 y1 this line in the twodimensional space is display as this red line so the other point is here point x2 y2 these 2d coordinates is what i will give to my transformation function as an input first thing we can compute is about the y transformation i want that when the y is at the maximum value which is 8 and which is the case for my point 2 i want it to be at a maximum of perspective y so i'm going to make a proportion here if it is 0 we keep 0 if it is 8 we divide by the height and we multiply by perspective y to be here so my transformation y equal point y divided by the maximum height and multiply by the perspective y also in the chord we will add some condition to avoid going above the perspective y even if you are above the height so if i apply this transform y my point 2 is here now we want to compute the x and you can see that the x is going to be closer and closer to the perspective x here i have my div x and here i have my diff y d x is the same value for point one and point two it's going to be the point x minus the perspective x concerning d f y i'm going to use the transform y so for the point one it's going to be perspective y minus zero so we have the maximum value here which is perspective y for the point two my point two with the transform y is already here so it's going to be zero perspective y minus perspective y d f y equal perspective y minus the transform y how can i compute my x to compute the value of the x you need to understand that the delta of x depends on the y the more we go closer to the perspective points vertically the more my d x will be smaller and if i go halfway vertically my div x will have a value of 50 percent so what we want to have is a proportion variable that is one when diff y is the maximum value perspective y and that is 50 percent when my d5 is at halfway and we are going to apply this vertical proportion to the difference of x and we will call that as a factor y factor y equals the difference y divided by the maximum value perspective y factor y equals 1 in the case of the point number 1 and it equal zero in the case of point number two because we have zero in factor y for the point number two so transform x will not have any difference with the perspective x transform x equal perspective x plus the d x at the proportion of the factor y so multiply by factor y that means that the x for point number one will be here perspective x plus the full and difference because we have a full factor y then for this point in the middle we are going to be starting from perspective x plus the half of the diff x and for the point number two we are going to be here plus zero because of factor y is equal to zero and of course for the points on the left we are going to have a d x and that is a negative so we will add this negative value for the left part this is correct and finally we will return that transform coordinates take the time on your site to look about this and maybe watch again this video and when you are ready we are going to move to the next video to implement this transformation function we have our vertical lines and we have our perspective point and now we want to display the lines in perspective so how can we do that you may say we can take this coordinate here and then we take the coordinate of the perspective point and that's it we trace our lines okay but that's not what i want to do because we will need to trace also the horizontal lines and other elements on the display so i choose to have another approach which is to have a transform function we are going to have a function that will take the input coordinates x and y so we will give the two dimension coordinates in the input and on the output we will get the coordinates in perspective that means if you give this coordinate for example you will have the same in the output but if we give this coordinate here with which correspond to where we trace our 2d line then you will get this coordinate in the output tracing the line like this and by using a transform function we will be able to use multiple transform function that will makes it possible to have a standard 2d transform that will not transform the coordinates and another function to transform in perspective so it's going to be easy to change the display from 2d to perspective very easily i will show you concretely how it works so first what we are going to do is to define a new function that is going to be transform and we will give x and y and this is going to return something and this something is the result of a transform function so we will have transform 2d that will also take x and y and this one does not change anything so it just returns x and y okay so our transform function does not do anything for now but the interest is that we can have another one which is going to be the transform perspective and this we need to implement it okay that's what we're going to do in this video and why do i do this of course the transform function we will need to call it before we display the light we are going to do that but why i do this because we can use either our 2d transform or transform perspective so we can go easily from perspective or from twodimension okay so of course here i return the same coordinate so if i just use the transform perspective it's not going to change anything so interest is what is that we will compute all the coordinates in 2d but just before going to the display we are going to transform the coordinates and how can we do that we are going to compute x1 and y1 that is going to be a self dot transform and it will take the 2d coordinates line x and 0 in our case okay and here we will display x1 and y1 and for x2 and y2 we are going to take the same input so align x for x and save that 8 for the y okay so i can put x 2 and y 2. ok so if i start my program again of course it's going to be the same thing because we don't change the coordinates here perfect so let's begin to write this function and what we want to do is this instead of drawing until the top we want to draw until the perspective x and y first let's compute the y so for the y if we give 0 we will still stay here but if we give the window height it's going to have a result of the perspective y okay so we need to make a proportion to go to this maximum value that means here i will write transform y that is equal to my value of the y that i'm going to divide by the self dot hate self hate is the height of the window okay so when the y equals the maximum value which is the height of the window it's going to be a value of 1 here 7.8 divided by 7.8 equal one and this value of one i want to multiply it by the self not perspective point y so when i reach the maximum of the window in fact the return coordinates in fact the return y of the transform function will be here and if i go above then i'm going to be stuck here okay so if the transform y is greater than the self perspective point y is going to be equal to that we cannot go after the perspective point okay so i can begin to return this new coordinate here in my transform perspective make sure that you use this transform perspective function and if i try it you can see that this time i'm stuck here okay it's no more going to the top of the window but to 75 percent perfect also i'm going always to return inch coordinates in the 2d and in the transform perspective so we are sure we use nonfloating coordinates ok it will not change much in my case perfect now let's compute for the x position what do we want to do for the x position for example if we take this line you can see that the more we go to the right to reach this x point of the perspective point and how can we compute that what we will look is at this x coordinate of the perspective point and we will compute the difference here it's what we will call the d x is going to be 100 percent when the diff y because the d5 is going to be perspective y minus the current y coordinate is going to be equal to the maximum value which is perspective y so when we have 100 percent difference and the more we decrease the percentage of hate proportionally the more we are going to decrease the difference of the if x so let's write the diff x and diff y d f x it's going to be the value of my x for example this value here that is greater than the x of the perspective points so it's going to be x minus first minus f dot perspective point x but if y is going to be perspective point y because this is a greater value here and our y is smaller minus r t l y not the y because the y can go to the window height but we want to have the proportion until the perspective point y so that's why we need to use the tier y what is the proportion why proportional will be equal to 1 when we are at the bottom when d f y equal to perspective point y okay and it's going to be equal to zero when if y equals zero so it's a proportion we want to compute for a y here on this axis how much proportion we have here is going to be 100 percent here is going to be 50 percent and here it's going to be 75 percent and 0 the more we go to the perspective point we must we decrease this proportion because we are going to multiply the different x by this proportion here on the y axis so this proportion y is equal to my coordinate try that i'm going to divide is going to be my diff y that i'm going to divide by perspective point y and you can see that when my div y is zero my proportion is zero but when my diff y is maximum is going to have this value perspective point y so it's going to have a value of 1 okay so my proportion is correct here how can i compute my transformation x we are going to start from perspective point x and we are going to add the difference but the difference is going to be a factor of this y proportion okay so let's try that okay so we agree that we start from here perspective point x and we will add the difference which is the compute here of the difference multiply by the factor of the heights that means if i'm at 50 percent my difference here is only 50 which makes a point here okay so let's try that and you can see that this time it's working well so i can resize my window in every dimensions it's working well i can also change the number of lines and the spacing between the line if i put for example 25 percent between the different lines i have something like this which is more interesting and i can also add more lines for example 15 okay so we have something good and what is interesting of course is that we can change the transformation here i just can uncomment transform 2d and command the perspective so i go back to my 2d display and it's going to be useful when we want to do the development because all the logic of the program will be in 2d and at the very last moment we will transform the coordinates to the perspective so it's going to be far more easy to work like that i just go back to perspective and back to the previous numbers here 7 and 10 percent and that's it for the perspective transform and we move on to the next video we have our perspective line okay i want to do a slight modification i don't want to have a line here i want to have a way here i want this to be centered because for our game we will have our spaceship on the way and not on the line so what you will do for this exercise is that you will shift the x coordinates so that not a line is centered but away first i suggest you that you go back to the 2d transforms so you go to transform and you uncomment the 2d and you go back here and for example you are going to reduce the number of lines of course it's going to work not with a nod number of lines this time but with an even number of lines so i'm going to put four you can see that this line is centered but i wanted to shift everything to the right of the half of the spacing i let you do the exercise and i will show you after the solution so i want this part this way to be centered and not this line so we need to shift by the half of a line spacing to the right how can we do that of course it's not going to be in the transform all the logic of the game is going to be transformed at the end just for the display but we need to modify the coordinates of the lines that we draw in the update vertical lines and for example we can turn the central line x coordinate that's possible to add a half of the spacing here okay or we can just change the offset and to say that the offset is a plus 0.5 plus a half of line because the offset is going to be multiplied by the spacing so in case of starting at minus 2 because in our case we have 4 here it's going to be minus 1.5 then minus 0 5 then plus 0 5 and plus 1.5 okay so you may say yes but i say that we don't use a floating point in the coordinates yes but it's okay here because we are going to multiply by the spacing and after that we are going to remove the floating points so at that stage it's going to be multiplied first by a spacing that is going to be a quite high number here okay so let's try that this time we have a way centered in the window okay it's perfect and we can go back to the perspective mode and this time you can see that we are centered with a way in the middle it's perfect let's add more lines for example 10 lines and a little bit more of spacing and this time you can understand that it's far better concerning our game so we will put spaceship here and we will be able to move it horizontally i will show you that later that's all for the exercise and we continue on the project we have our vertical lines we can display them in perspective it's nice and now we want to display also the horizontal lines i'm going to go back to the 2d display so i will comment that okay and i will reduce the number of lines just so that it's more clear what we are doing here i'm going to go back to four lines and 10 percent spacing so we have this and what we want to do is to display some horizontal lines we are going to have the same logic as the vertical lines we are going to have a number of lines we will start from y equal zero from here and then we will define the spacing for the horizontal lines we will not start from zero to the reads but we will need to compute the x min and x max which will depend on the vertical lines and we will display our different lines with the same spacing so let's do that i'm going to copy paste what we did for the vertical lines and it's going to be h horizontal number of lines i'm going to keep this value 4 and horizontal lines spacing for example 0.2 20 percentage in screen height and i'm going to call that horizontal lines okay and i will have the same logic init function and update function so i'm just going to copy paste that and it's going to be horizontal and the same here for the update function oh re horizontal okay and i will go to take this init and update function and i just copy paste in this code that we will of course change so first the name of the function horizontal okay and the same for the update function in the init it's going to be quite straightforward because it's going to be almost the same thing we are going to loop on the number of horizontal lines and we are going to add in our whole re horizontal lines list the different lines okay that's done for the init function for the update function it's going to be different so i'm going just to remove all this code update horizontal lines i want to loop on the number of horizontal line and what is going to be the line y and the line y is going to start from zero plus something from the index that we are going to multiply what do we need to multiply by the spacing h line spacing which is twenty percent self dot h spacing twenty percent of the screen height yes it's called horizontal but it's for the horizontal line but this spacing is vertical so it depends so it's twenty percent of the height of the window it depends on the height okay i don't need to put a zero plus here i can just delete it so we will need to compute the x min and the x max for now we just put some values in it x mean zero x max equal self dot reads okay we will change that later so here i can put my coordinates we start from the point one is at x min and the line y for both of them and the point two is at x max okay i don't have any offset in this case and that's it so let's try it and see what it gives i don't have my vertical lines anymore and this is maybe because i have replaced some code here update vertical lines update horizontal lines and that's correct it's because i forgot to change here the points of my horizontal lines okay so i was raising my vertical lines make sure you don't have v here and that it's horizontal lines in the horizontal function okay let's try it one more time and now you can see we have our horizontal lines and it's adapting to the height of the window that's good what we need to do now is to compute the x min and the x max because i don't want this part here i want to stop here and this depends on the vertical lines if you look at the code for the update vertical lines you will see that we first compute this offset so we know the position of the x of the line totally on the left so we can reuse that and we are going to keep this computation for the minimum x and the line totally on the left and we will put a minus for the opposite direction of the offset for the maximum for the x max so i'm going to copy these three lines and to paste them here of course in the same logic here i can define a spacing y variable that is going to be my horizontal line spacing multiplied by the height of the window okay i can do that it's the same thing but to go back to the computation of xmen and xmax i'm going to use the central line x plus the offset which is negative it's good because we go to the left it's xmin multiply by the spacing and for the max i'm going to do the same but i'm going to go to the other direction for the maximum offset you may think it's strange because x minions on the left so why i add something we add something because the offset is negative you can change the logic if you want we can change the size and put plus and minus here and to invert the signs here if you want it's going to be the same thing let's start it and see what it gives so now you can see we have the good result we display the vertical lines and it's stopping at the right position it's correct let's try it in the perspective mode i go back to my transformation function and i'm going to and comment the perspective mode we have something like that which is quite good but you may see that it's a bit strange what we have here so let's add some more lines to better see what is the problem that we have put 15 okay let's try that so it's quite nice but you may think why this style is smaller this one seems to be longer yes so we will need to solve that that's one of the problems that we have it's because we have a constant spacing between the different lines here you may think that this spacing is higher than this one but in fact that's not the case if you put your finger on the screen you can see that the spacing is constant here for example i can show you i can measure the height between these two points is going to be 60 58 pixels and if i go between these two points it's also 58 pixels but to have a good perspective impression we will need to change that we will need to update our transform function so we don't have that phenomenon and we will need to change the spacing between the different tiles so that the spacing is not constant i'm going to explain you that in the next videos we have defined a spacing between the different lines and the number of horizontal lines and then we use our transformation function to display it in the perspective space but we have this phenomenon that is we think that the tiles at the front are shorter than the deeper tiles and this is because we kept a constant spacing between the horizontal lines we are going to change that to get another result to get something like this on the right so we have a kind of attraction to the perspective the more we go closer to it the more we get attracted so the spacing is bigger on the front and it gets smaller and smaller between the different slides we previously spoke about the factor y factor y is a proportional vertical factor that means 100 percent of distance from the perspective point and the more we go closer to the perspective point the more the factor will decrease eighty percent from it sixty percent from it forty percent how can we get something like we have on the right the idea is to get a factor why that is smaller than expected that means it's going to go faster to the perspective point so you may say yeah we can multiply it by something that is less than one for example 0.5 so instead of 0.8 we get 0.4 but if we do that and if we multiply 1 by 0.5 we are going to start at 0.5 so it's only going to make the display smaller it's not going to make something like this we want to keep factor 1 for the maximum but we want it to decrease faster than linearly so i had the idea to make the factor multiply so i had the idea to multiply the factor by himself for example instead of having 0.8 here for this line we are going to have 0.8 multiply by 0.8 and it's going to be smaller than 0.8 and this is called the factor squared factor y multiplied by itself so if i take this first value i get 0 64. so it's going to be displayed here 0 6 multiplied by 0 6 equals 0 36 we are going to go faster to the perspective point it's a kind of attraction behavior for this formula this formula makes a kind of attraction behavior and we are going to apply this to our transformation function this is a compute number 2. how does it works so we agree that we have perspective y here this is the maximum value that we can have for the vertical spacing and it's going to be a factor of one i put in yellow the modifications in the transform function i just rename this variable because we will use it as an intermediate value so before i call it the try but now it's a linear y lean y because that's the linear proportion of the y value from the screen head to the perspective y okay so we just use it as an intermediate value but most important is this new line the factor y is multiplied by himself then i get my trx which is the same thing as before perspective x plus the difference multiplied by the factor but the compute is going to be different because the factor has changed okay and most important this new line to compute the try we start from perspective y and we are going to subtract because this is the biggest value we are going to subtract the factor y multiplied by the perspective y that means if we are here with a factor of 1 we are going to start from perspective y minus 1 multiplied by perspective y which is 0. concerning this second line i will start from here perspective y multiply by the factor of 0 64 on this total height so it's going to be here and then we will return these new coordinates let's implement that in the code right now i go back to the project and we previously saw that we had this strange behavior of smaller tiles here okay let's change the transform perspective function it's not going to change anything for the 2d display of course because we are inside our perspective function so i'm just going to rename this value a linear y okay and i'm going to use it here we have a factor y in fact where is our factor y it's what we called previously proportion y so i'm going just to rename this also factor y okay now the new line is going to be factor y equal factor y multiply by factor y okay and i'm also going to compute my t r y which is self perspective y minus is a factor multiplied by the maximum height so yes of course here you may say we can put 1 minus factor and the total multiplied by this is going to be the same thing okay anyway i want to keep like i put on the slide but it's going to give the same results and let's try that so you can see that this time we have this perspective effect we don't have this previous problem but also i want to show you something we can accentuate the attraction because here what we did is to multiply two times factor y but we can also multiply it three times or four times if we want or we can also use a power function paul power function takes the value and we give how many times we want to multiply it for example by two times is what we did before that means this is the same as doing factor y multiplied by factor y two times and we can put for example four times to accentuate the attraction let's try this so the problem is that the spacing is very high between the horizontal lines so we can just change it a bit horizontal line spacing let's put zero one for example okay so we have something like that and we can also have more spacing on the vertical lines for example.25 okay so we have something like this we have a real effect of perspective which is really nice we are going to keep it like this and we continue on the project now we want to have this animation of moving forward into the game how are we going to do that we are going to change the display of all horizontal lines and we are going to shift them downstairs that means we are going to subtract on the y coordinate when we begin to move forward then we shift everything and down you can see that this yellow line goes here and that this blue line goes out of the display and then we continue like this but you can see that if we continue and continue to shift the line after a moment we will have no more lines to display because all the lines will be out of the display that's why we will need to implement a kind of looping mechanism that means when we shift more than the spacing than the vertical spacing between two lines then we go back to the original position to make this shifting possible we are going to implement a new variable that we are going to call current offset y and we are going to apply this offset to all the y coordinates of the horizontal lines we will also need to have an update function that will be called regularly 60 times per second this is our number of frames 60 frames per second and every time our update function is called we will update the offset to increment it and to have the condition also of the loop of course we can also control the speed of the movement for example we can increment per one at every update or increment per two or three so we are going also to define a speed variable are you ready so let's do that right now i go back to the code and i'm going to create my update function so i go totally at the bottom here in the main widget and i will create a new function update function it's a function that we will call in a clock schedule so it's going to give us a delta time variable i'm just going to add a print update okay now we need to call this function regularly so i'm going to go to the init function here and after the init of my lines i'm going to add a clock not schedule interval and i'm going to call my update function with the time interval if i put 1 it's going to be called one time per second if i put 10 it's going to be called every 10 seconds so i want it to be called 60 times per second so i need to divide the time of one second by 60. you have to import cloud from tv properties take care of not taking this one but from qv properties okay if i start my program i can see that the update function is called regularly okay so now what are we going to do in the update function we are going to call the update vertical and horizontal lines in case we want to change the coordinates of these lines we need to update the coordinates so we will do that in the update functions we don't need to do this in the on size anymore take care of putting the pass here because we don't have code anymore why we can do that because even if you resize the window the update function is going to be called anyway so it's going to be refreshed here okay i'm going to comment on the print let's just start the program and see that we did not broke anything okay the behavior is working fine i can still resize my window and it's working so now i want to shift my horizontal lines in the update horizontal line which is called regularly now i'm going to add something so i go to this function update horizontal lines and you see that we compute the coordinates and we have the line y and in the line y i want to add or subtract something because we will go downstairs so i'm going to subtract my self current offset y we need to define this variable and the value of this variable is going to evolve in the update function so each time we will call this update horizontal lines it's going to have different coordinates so let's initialize our current offset y i'm going to give the value of zero here and in the update function i'm going to increment by one this value i need to use self here okay so if i start my program what's happening you can see that it's working okay i go back to the 2d mode okay you can see that we have our lines going down it's nice but what's happening if i put just a little bit lines here for example only five lines you can see that it's going down and after a moment i have nothing more to display because all the lines are out of the screen so i need to do something like a kind of looping but also the speed is quite low so i want to change the speed let's put eight lines for example so we have something like that okay and i want to increase the speed how can i do that instead of adding plus one i'm going to add something else here and it's going to be a value that i will define as the speed and let's say we give four okay then i will increment by self dot speed and it's going to be faster okay and if i go back to the perspective mode you can see that it's also working well and after a moment i have nothing more to display okay so i go back to the 2d mode and we have to implement this looping mechanism i want to go back in the past when my offset is greater or equal than the vertical spacing between two horizontal lines if i go to my update horizontal lines you can see that the spacing is here between two lines okay so i'm going to get this value and if i'm just using an offset with this value of the spacing i can just go back upstairs to that value and it's going to make the illusion of the loop for example i can test if offset is greater or equal than the spacing it's working because the spacing between two lines is always the same and you may think yes but in perspective it's no more the case yes of course but the perspective function is called at the end so we don't care about that we always do all the compute in two dimension and the perspective will be called at the end so for us the spacing between two horizontal line is always constant and always this value if the offset is greater than the spacing what do we do we go back and it's like we shift from one level okay and now if i start my program again you can see that when i go down it's putting a line again here so from this point of view it's always looping and if i add more lines and going above the top of the screen i will not see this phenomenon so here if i do for example 15 lines you see that i have the illusion that it's always looping and it's going to work also in perspective mode of course okay let's try it okay so it's working well my screen recording is in 15 frames per second so it may not look very freed on the video but on my computer it looks very freed at 60 frames per second the behavior is good that's all for this video and let's continue on the project our program is working fine okay we can move forward in the level that's nice but we need to change something very important look in the update function we have this parameter the dt delta time and i did not explain you why we have this in delta time here and how we can use it in fact you remember we said that we want to call this function update 60 times per second in fact it's 1 16 in fact it's going to be called one time every 1 16 of second but it's not going to be as precise as this because maybe your computer or your smartphone will be busy to do something else and when he will trigger the call to the update function maybe it's not going to be as precise as this timing and so you may go from 60 frames per second to a little bit less than that 50 or 30 frames on old machines for example but the problem is that in that case because the update function will be called less regularly the game especially in the speed at which we go forward in the level is going to go slower and so the game is going to be far more easy to play on older machines and we don't want that we want the game to have the same speed in the level even if we don't have the exact number of frames per second how are we going to manage that we are going to use this delta time which is a precise value and of course if finally we spend twice the time that we expected between two calls of the update function we should go forward twice in the time so this is proportional to the delta time let's print the delta time value and see what we have delta time and let's print str of delta time and also i want to print the expected value which is 1 divided by 60 str 1.0 divided by 60.0 okay let's run this and see what we have so i expand the window here okay i stop the program and i go upstairs and i see i get different value of delta time the reference value is 0.016 okay so here we can see that it's almost the right value that's correct so the delta time is a time difference with the previous call of the update function so you can see that it's quite irregular sometimes it's a little bit more sometimes a little bit less sometimes more sometimes less so it's not totally perfect but anyway we want to take this factor into account you see that if i multiply by 60 especially 1 divided by 60 if i multiply it by 60 it's going to be 1 it's going to be around 1 for the delta time so we can try that delta time multiplied by 60 and i'm going to remove the remaining here okay let's try again okay i stopped my program and you see that we have something around 1 sometime a bit above and as i told you for example if you have 1.5 it's like we spend 50 percent more time than expected so instead of using this value saved speed we are going to multiply it by the time factor and for us the time factor is delta time multiplied by 60. okay i'm going to comment on the print you agree that normally time factor should be always 1. but in reality if we spend more time between two update calls for example twice the time let's say 30 frames per second the time factor is going to be equal to two so we are going to add twice the value of the speed because we are twice slower on the machine so at the end per unit of time that means after one second we will make the same progression whatever the frame per second so we need to take this time factor into account even if i think on your machine you will not really see the difference here in fact it's far better to manage the time to have a consistent game on every devices that's perfect and let's move on to the next lecture for this exercise i'm going to ask you to add movement on the horizontal position that means in the same way of using an offset y you will need to use also an offset x to get something that looks like this so we are going to move on the left or on the right up to you okay you will add this movement on the update function and you will need to create these variables speed x for example 3 and current offset x equals zero you need to use this variable in the code of course you will not use it in the transform function but you need to apply it to the vertical lines and also to the horizontal lines you will not need to have a loop mechanism because when we will go at the end of the track it's okay we'll go out of the track that's not a problem we do this exercise because later we will manage the press of the keys so that we can move on the left or on the right i let you do this exercise on your side and after that i will show you the solution so i'm going to define these two variables speed x and current offset x of course if i go to my update function i need to upgrade my offset so i'm going to do self dot current offset x plus equal to the same thing here except that it's going to be speed x so we have our vertical speed which is speed and or horizontal speed okay now where should i use that i should use it to offset the vertical lines so if i go to update vertical lines you can see that we compute the line x so i can also use that to make a plus and put a current offset x in here is not mandatory because we already do that in the transform function okay so let's try that it's almost good you can see that we have this good behavior but we also have a problem for the horizontal lines you see that they are not aligned with the vertical lines anymore and that's because we need to use also this offset in the compute of the x min and x max in the update horizontal lines function so i'm going also to add this offset here and this time you can see that if i start my program again i have the right behavior so you also see that every time i need to resize my window so it's a little bit thing i want to add here you are going to type on google tv window size and you will find this first link on stack overflow and you will see that you have this config set graphic width and hate so you will copy these three lines from kvconfig import config you copy these three lines and you put it at the very top of the file here before any other kv import and that's important so graphic weeds we are going to put 900 and 400 for the height okay let's try that now i start my project this is working and the window size is good that's all for the exercise and let's move on to the next video for this exercise we are going to control the horizontal movement by pressing on the screen on the left or on the right of course it's going to be useful for mobile's phone but for the computer we want to manage the keyboard key press on the left and on the right but we will do that later for now it's just going to be pressing on the screen just before doing the exercise i'm going to prepare some code first i'm going to comment this line of code so we start without any movement when you will press on the left you will go on the left of the land and on the right you will go on the right so i'm going to write some functions here to manage the touch on the screen def on touch down then i will not do anything yet def on touch up when i release the finger okay so here on touchdown you need to know if you pressed on the left or on the right of the screen and what you can do you can look at touch.x which is less than self width divided by two for example if that's the case we go on the left so i'm just going to add a print okay with an arrow and else we go on the right if i do a touch up i'm also going to add a trace up okay let's try that you can see that if i press on the left i see left then up when i release my button and on the right i can see right then up when i release so of course when you keep the button pressed on the left you will move to the left direction until you release your button and on the right it's going to be the same and when you release your button you have no movement on the horizontal axis that means this line that we commented will sometimes add zero or sometime add a value or sometime decrease the value depending on what you are doing here and for that you will need to use an intermediate variable that is going to be the current speed x and it's going to be in zero as a default and on the update function you are going to increment this current speed x self okay so i let you do the exercise right now you need to give the right value for this variable depending on what you are doing here with a touch do the exercise and then i will show you the solution so we need to give a value to the current speed x of course if we release the button we don't want any movement anymore so it's going to be a speed of zero but if we press on the left we are going to give a value here it's going to be the self speed x and on the opposite direction is going to be minus self speed x let's see if it is working correctly okay i press on the left i go to the left in reality the land is moving to the right so i have this impression that i'm moving to the left because the spaceship will be always at the middle of the window okay if i press on the right i go on the right and if i release i have no movement but it's a little bit slow so what we can do is to improve this speed x by 20 by 12 for example okay so i have a speed on the left and on the right this is correct but on the computer we also want to manage the keyboard the left key and the right key so we are going to do that in the next video that's all for this exercise and let's continue let's add the keyboard management in our project on computer we want to be able to press the left and the right key on the keyboard to move in the game in the same way when we press on the screen if you go to google and you type tv keyboard key you will find the first link here how do you check for keyboard events in kivy and then you will see an example that we can use so you can see we get keyboard here with a window request keyboard and then we bind the on key drawn that is in this function and we also give a function when the keyboard is closed because on mobile the keyboard can be open and close but we will add something after so that we only use the keyboard configuration on computer and not on mobile this is because on mobile the keyboard will be displayed on the screen and that's something we don't want so i will show you how to do that first we are going to copy these lines of codes okay and we are going to adapt this so i copy this and i go back to my init function here i'm going to paste at the end of my init function okay but we are going to move the clock schedule at the end of the function i want the clock schedule to start the update when everything has been initialized the window we need to import a window from tv core window okay i don't like this underscore before the function name so i'm just going to change that here and here we need to register the on key up also so i'm going to duplicate this line and put on key up because we need to know when we release the key on keyboard up prototype of the function i'm going to copy paste the on keyboard on is almost the same as the on keyboard on except we don't have the last two parameters on keyboard up and i'm going to put pass inside i don't want to manage this key but i want the left key and the right key and inside we will need to write our own code of course that we will replace in a moment so i'm just going to remove these okay and i have to return true to say okay i have manage and this keypress we are going to do the same on the on keyboard app okay also something i need to add is the unbind of the on key up here okay perfect so what do i want to do in this function the same thing that we do when we press on the screen so i'm just going to cut these to function and to paste it close to the on touchdown and untouch up on keyboard down when we press left we are going to do this current speed equal speed x and also i will comment the prints here we don't use them anymore okay so i'm going to do the same thing here and i will do the opposite here with a minus like we do here and on the on touch up i'm going to put the speed to zero in the on keyboard up okay so let's try it i'm going to start my program first thing i can see is that my window size is not the one we have specified so it's something that has been broken here we are going to have a look at that but if i press on the left arrow key on my keyboard on the left it's working and on the right it's working too and i can still click on the window and it's also still working that's fine so why do i have a problem with the windowwidth if i go totally up in my file i can see that this line has been inserted automatically when i wanted to import the window and i told you we need to do this before any other kv import so i need to move this line just below and i will keep this if i restart you can see that this time my window size is correct okay one more thing i want to add is i don't want to configure the keyboard in the case we are on mobile so we need to define a function that will say if we are on desktop computer or if we are on mobile dev is desktop and for this we are going to use something that is called platform so we can do if platform and you can see that i can import this from kv dot platform okay of course we will check that this is going to be after the kv config here okay perfect platform will contain the name of the platform we are running the program that means it can be linux windows mac os ios android so we will check if platform in linux or windows or mac os x then we will return true we will say yes it's a desktop computer and in every other case it's going to be false okay so i'm going to call this function here if self dot sorry i need to add a tab okay is desktop and in that case we are going to configure the keyboard we don't want to do that in the case of mobile okay and also i will add a breakpoint here so we will analyze what do we have in the platform here i will press on the debugging mode okay so if i put my mouse over here i have the mac os x value so if i step it's going to be true in my case okay this is correct i just restart my program to see if it is still working correctly and i can press my left and right arrow on the keyboard it's working well and also when i touch the screen everything is working perfectly that's all for this video galaxy project version number two at the end of this version two the project will look like this so you can see we have a pass generation i can also move and when we detect that the ship is out of the pass you can see this in game over but the game is still continuing also the speed is very slow here but it's on purpose for this version 2 we will first organize and structure our code we will be able to display the path first we will display one tile then we will be able to display multiple tiles and after that we will generate our pass with the land generation algorithm we will also display the spaceship and check if the spaceship is still on the track if that's not the case we will display game over but the game will still continue at that stage are you ready to start let's do it before starting let's clean and organize our code a little bit because on the main widget we have a lot of functions and a lot of code so i want to separate a bit some functions in some other python files and for example we can move all these transform functions to another file so you are going to create a new python file and you will call it transforms okay now when i go back here i will take transform 2d and transform perspective and i will cut that and i will paste it directly in the transform.py and now you can see that if you try to start the program it's not working anymore because it says main widget has no attribute transform so we need to tell the main widget that it has to include these functions so we need to go inside as a main widget so you can go anywhere inside the class but not outside and we'll just write the code here at the first line inside the main widget and we will write from transforms that's the name of the file import and the name of the functions transform2d and transform perspective okay now i can start my program it's working fine what else can we move i want to move all the user interactions all the keyboards and touch functions so if i go a little bit downstairs i have on keyboard down on keyboard app on touchdown and touch up i want to move these functions on a new file that we will call user actions and i will paste that inside the same way i have to import this from the main widget so from user actions import keyboard up on keyboard down and onto chop on touchdown i can also move the keyboard close function okay and i will paste it at the beginning of the file i also need to import it so i go back here and i will add import keyboard closed perfect let's start again to see if it is still working okay perfect and before we finish on this video i want to clean a bit my code so i will remove some functions that we don't use for example on parent on size and on perspective point x and y we don't use them so let's delete all these functions now that our code is more organized and clean we can continue on the project we want to be able to display the tiles in our games so how are we going to do that here i display the vertical lines for example four vertical lines and four horizontal lines let's say that if i want to display this style we will say that this one is a tile zero and the one just on the right will be the tile one zero it's going to be a coordinate system with x and y for the tiles so this one will be zero one this one minus one 0 2 and this is what i call the tile index t i x t i y and it will be useful to have a function and get tile coordinates that takes this index and that will return the actual x and y coordinates of this lower and left point because if we have this lower left point we can also have the upper right point if we give the plus one x index and plus one y index here so from these two coordinates it will be easy to draw the tile on the screen to implement this function we need to get the coordinates of the different lines and for that we are going to assign some index to the different lines for example on this line we will say that it is a line zero this one the line minus one this one the plus one and the plus two of course if we have more lines we will have the minus two minus three plus four etc concerning the vertical lines it's going to be the same line index 0 line index 1 index 2 ok first we will get the x coordinates of the different vertical lines and we will write this function get line x from index for example if i give index 0 i'm going to get the x coordinate of this line if i give index 2 i will get the x coordinate of this line and after we will also implement the get line y from index for the horizontal lines and this will makes it far more easy to implement get tile coordinates and also we will use this new function to rework the code inside update vertical lines and update horizontal lines so how can we implement this new function here you can see we have the central line x and we have the spacing between two different lines the spacing is the v line's spacing multiplied by the self width if i have an index of 0 you can see that i'm not aligned in the center of the screen but i'm halfway on the left so we will compute an offset that will be index minus 0.5 so the line x will be the central line x plus the offset multiplied by the spacing if i have the index of 0 i have the offset of minus 0.5 so i start from my central line x and then i go left 0.5 times of the spacing and i arrive here if my index is minus 1 i will have the offset of minus 1.5 and that if i start from the central line x i am at minus 1.5 the spacing okay and we also need to add the current offset x which is a global offset when we press on the left and right keys let's go back to the project and let's implement this new function i'm going to write this new function just above this update vertical lines def get a line x from index and so we have this index parameter i will take what we did here okay we have our central line x that we compute from the center of the screen finally i think it would be better to take the perspective x because perspective x is also at the middle of the screen but it will allow us maybe later to change the position of the perspective point so it will be better to write here self dot perspective point x okay we have the spacing and for the offset it's going to be different it's going to be index minus 0.5 when the index is 0 i want to be halfway on the left so my line x will be central line x plus the offset multiplied by the spacing and also plus the current of set x so we have our offset when we want to go to the left and the right when we press the keys okay and i will return this line x of course i can rework my function here so i can delete all of that and i will get the line x from the get line x from index here okay so i don't need to use offset anymore here so what is the index i have to pass here you can see that we have to rework this and the minimum index should not be zero else we will see lines only on the right but it should start halfway of the number of lines for example if we have four lines we'll have minus one zero one and two so we can compute this start index which will be here okay start index is going to be the half of number of lines i'm just going to put int okay so if i have 4 i'm going to get 2 for the start index so i will put minus two but in that case you see that we don't start at minus two we start at minus one so i need to put plus one for my start index and what is my end index and the index is going to be the start index plus the number of lines so for example here the start index is minus one the number of lines is four minus one equals three so i will get three for this value here but that's correct because in the range we will never reach 3 for the i we will reach 2. so we will have this it's going to work if we give from index i let's try it ok so it is still working fine i just want to simplify a bit the program here i want to go to the transform and enable the 2d transform so we can really see what we are doing here and also we are going to disable any movement so i'm going to comment the offset y and the offset x in the update function just for the time that we are working on the coordinates for the tiles and also i will put less vertical lines i will put four vertical lines and zero dot one for the spacing okay so now i have something like this it's correct and also i can update the update horizontal lines because we copy paste what we did previously on the update vertical lines so we can delete that and we are going to compute x min and x max from the new function self dot get line x from index okay the start index we have it it's this value the line totally on the left okay so i can put start index here and for the end index and index it's going to be the start index plus number of lines so for example i have number of lines four start index is minus one so it's going to be three but the maximum index i want here is two so i need to put minus one in this case so i have my end index here okay i can restart my program and everything is working fine for this exercise you are going to implement this function get line y from index so if i give index 0 is going to return 0 if i give index 1 is going to be spacing y and then index 2 is going to be the y value for this line etc okay and so on don't forget to use the current offset y and also you will need to rework the update horizontal line function to use your new function i let you practice on your side and then i will show you the solution just below this function i'm going to implement the new function get line y from index okay if i go to update horizontal lines you can see that we have here's spacing y and that we have already this computation of the line y so i'm just going to copy these lines and that i'm going to paste that okay spacing y equal h line spacing set the distance between two horizontal lines that's correct multiply by the height okay i'm going to delete four and then the line y is the index multiplied by the spacing okay if we have index zero we will start from 0 minus the current of set y you remember that this is offset that we use so that we have this illusion that we go forward into the game and then i return a line y now i'm going to use this function from the update horizontal lines i will replace this line of code with self dot get line wind and i will pass the index i don't need the spacing y anymore so i can just clean it from the code let's start the program to see if it is working well everything is correct and that's all for the exercise let's display our first tile how can we do that for example if you want to display the tile 0 we need to first implement this and get tile coordinates function so we can get lower left coordinate x min and y min if we pass to this function plus one and plus one you are going to get the x max and y max so it's going to be easy to be able to display this tile concerning the canvas are we going to display this with a rectangle not really because in the perspective mode we will need to display something like this so we will need to give four coordinates and for that we are going to use the quad it's not possible with a rectangle because the rectangle use a width and a height only here with the quad we will give 4 points how does the quad works so we have our x mean y min that we get from the get type coordinates zero in that case if you want to get the x max y max we get it from plus one and plus one okay you can see that we have also two other points x min and y max and x max and y min we need to give the four points to the quad so the quad will get a points list in which orders we need to give the points that's up to us but we need to rotate in a way or in the other way but we cannot go from that point to this one or something like this we need to take a point and rotate so in our case this will be point number one number two number three and number four so at first we will put x min y min then this one and then x max y min of course we will need to call our transform function at the last moment that means we will need to use intermediate variable like x1 and y1 so x1 y1 will be the transformation of xmin and ymin and so on let's implement this and display our first style so first thing i'm going to do is to implement this get tile coordinates function so if i go just below that i'm going to write def get tile coordinate and it will take the tile index x and tile index y i need to return the x and y of the tile so x is going to be finally the get line x from the index t i x and the y it's going to be the get line y from the tile index y and we need to return this okay for this first example we are going to display only one tile but of course in the game we will need to display multiple tiles so let's just define only one tile for now so i'm just going to write tile equal none and we are going to give the coordinates here t i x equals zero of course we will change that later so we can check if the different positions are working well okay then i will do the same principle as a vertical and horizontal line i will have a init function so self init tiles and i will have an update function for initials i'm going to copy paste the init vertical lines function so it's going to be init tiles and i don't need to do that okay i will display it as white it's correct and here i will do my self tile it's going to be the quad so i just write quad and i need to import it okay then i will do my update function so i go a little bit downstairs update tiles of course i will need to call this function in the update function so i will just do it right now self not update tiles okay i go back here i want first to get my x min and y min how can i get this i can call self dot and get tile coordinates and i can give the coordinates of my tile t i x and t i y ok also i can get the x max and y max by putting a plus 1 and plus one in the index now i want to give the points to my tile to my quad so it's going to be points equal and i'm going to give the list of points i'm going to have here x1 y1 then x2 y2 then x3 y3 and 4 okay so i need to compute all of this x1 y1 it's self dot transform and you remember that the first point i'm going to put a command here is going to be the one at the bottom left and then the second one is at top left and then we get third point and the fourth point so this one it's x min and y min i'm going to copy paste this line for three times so we have two two three and four okay point number two x min y max it's upstairs point number three x max y max and point number four x max y min okay so i will give all of this let's try it and see what it gives okay my tile at 0 is displayed here that's correct let's change the coordinates so if i go here i will give x equal 1 for example okay we can see it's correct it's displayed at one and zero and i'm going to display at one two okay one two it's correct let's go in the perspective mode to see if it is still good okay i can see it's still one two everything is correct and we move on to the next lecture we are able to display our tile correctly now if i enable the animation again is it still working correctly so let's try it i go back to my update function and here i will enable the y current of set y and here i will uncomment this line with a current offset y okay we can keep this line commented for now but here we will go forward into the level and also i will change a bit the speed here i want to have a speed only of one so we can see what's really happening let's try it you can see that my tile is going back after a moment every time we loop every time the line is coming here at the bottom of the screen we have this loop effect and this is because you remember in the update function we have this looping mechanism so the horizontal lines of the level are always displayed when we reach the spacing between two lines we go back to the initial position and in fact the position of my tile is always correct it's always 0 x and 2 for the y so how can we make the tile going forward every time we loop we need to remember that we loop so we will have a loop index that we will call the current y loop and it's going to be plus equal one i'm going to declare this variable so here current while loop equal zero okay so you can see that if i add a print loop and i can display the value of this loop and i can put it on the screen okay so you see every time we loop the tile go back in the screen so what we are going to do is every time we loop we are going to change the index of the tile on the y axis initially our tile is on index 2 for the y but then when we will first look it's going to go to index 1 then index 0 and so on so we need to subtract the index of our tile from the current loop we already have a function that returns the coordinates of the tile it's get tile coordinates so i can look at this variable inside this function and we will use it to offset the index of the tile t i y equal t i y minus the current y loop so the first time we will loop with the loop we'll have a value of one then we offset the index so here we do the index minus one so the tile will not jump again but we'll go to the next line let's start the program again and you can see that this time every time i loop my tile is evolving in the level and it's working perfectly let's write some code to display multiple tiles how can we do that we need to change this part of code because here we manage only one tile and we put some coordinates here so we are going to change that and to have a collection of tiles with a list here so tiles is going to be the list of the quads and we also need to have the number of tiles for example four tiles and also we need to remove these coordinates because the different types will have different coordinates so we need to have a list of coordinates tiles coordinates okay we will write a new function to generate the tile coordinates but at first it's going to be a very simple generation i want to generate the tiles in the middle of the screen so the first tile will be at 0 then the second one will be at 0 1 0 2 and so on it's going to be a straight line in the middle and of course later we will change that generation function so that we can generate the length of the game okay so let's write the code first i need to change my init function because i need to loop on n beta tiles to initialize the different quads so i go to inside any tiles i need to loop here so for i in range zero to self ambitize i will create quad but i will add it in my tiles list tiles append quad okay and i need to be inside the loop of course we will need to rework the update function because we need to use the tile coordinates but first let's generate the tile coordinates i will write a new function f g narrate tiles coordinates i will use the same loop on the number of tiles and inside the tile coordinates i will append some coordinates inside this list i need to append some tuples so inside the parenthesis i'm going to add more parenthesis for this first generation it's going to be very simple all the x index is 0 and the y index is going to be i so the first tile will be at 0 then the next one at 0 1 0 2 ok to build this straight line of course i need to call this function at the beginning so i'm going to copy that and to paste it here self dot generate tiles coordinates okay just below initials next thing we need to do is to adapt the update function update tiles previously we use this variable t i x and t i y now we need to loop and update the points for every tile so again i need to loop on i in range 0 to nb tiles okay and i will put everything inside the loop my coordinates are in self tie coordinates of i and you remember what we did we put a tuple for each tile that means for each coordinate the index 0 is x and the index 1 is a y index t i x t i y so in my tuple here i will call it tile coordinate local variable and here i will get the x from the index 0 of my tuple and the y from the index 1 of my tuple and to get the x max and y max i will do the same plus one okay now i need to update the tile so it's going to be in the tiles i can do the same as here i will say that my tile is a self dot tiles at index okay so tile dot points equal all the points let's try it okay so you can see i have four tiles displayed in a straight line and of course i can change the number of tiles for example i can put eight and it's going to generate more tiles everything is working correctly and let's move on to the next video let's improve this function to generate infinite tiles so now we are just going to keep the straight line but you can see that after a moment the straight line disappears because we have a limited number of ties so what we are going to do is that all the tiles that are no more visible that are out of the screen we are going to clean them from the tile coordinates and that will make new space to add new coordinates that we will add after so we will make a mechanism to generate new tiles on the fly for example here if i reduce the number of tiles to 4 and when we will implement this solution you will see that new tiles will appear after each loop so we will generate this straight line an infinite way how can we do that you remember that in the update function we have this loop indicator so we will compare does the tie index y is less than this loop then we will clean it from the coordinates and of course we will need to call our generation function each time we change this variable now the generation function has been done in a way we should only call it at one time in the init but we will change it so we can call it in the update function every time we increment the loop so first thing we are going to do is to clean the coordinates that are out of the screen and the condition is at the tile index y so this is what we have in the tile coordinates at one and the condition is that the tile index y is going to be less than the self current y loop okay when i increment this variable it means that the tile that was at 0 is already out of the screen so at the next call of this function we are going to clean it let's implement that and then we will debug to see if it is working correctly so we are going to loop on this style coordinates and because we are going to delete some elements inside this list we are going to start from the end so i will write 4 i in range what is the end is the number of elements in the list minus 1 else we will be out of the list okay and then i will put 1 here because i want to decrement i will start from the maximum value and go to the minimum value but for the minimum value we also want to go to the zero index and because in the range we will never reach the zero here we need to put a minus one so that we can reach zero okay the condition is that if tile coordinates at the index and we select the y it's less than the current y loop then it disappears it's out of the screen so in that case we will just delete it okay and because we will call this function again and again we should not start from zero every time and happen many coordinates we should look how much space we have left in the tile coordinate so we are going to start not from zero but from the number of elements okay of course the first time it will be zero so first time we will fill everything and i'm going to put a print full so we can have a breakpoint here and we will see what happens of course this function we need to call it again every time the current while loop change so it's going to be called one time at the beginning to generate the first four coordinates here this code will not do anything because at first current while loop is zero and of course we don't have any elements in tile coordinates so we are not going to do anything here but here the length of type coordinate is zero so we will happen all the elements at the first call then for the next call we will see what happens so i will need to call it in the update function just after we have updated the current while loop generate tile coordinates okay let's have a look and let's put a break point i will have foo one and four two through one just after the deletion of the elements and foot okay so let's have a look at what we have in self tile coordinates at the beginning we don't have anything okay if i press continue then we generate the elements and we have our four elements zero one zero two zero three it's correct and we have the current while loop which is zero then i will continue the execution we enter the function again we did our clean with current while loop equal to one so now what we have in the list is only three elements because we remove the zero in the y is less than current while loop which is now one okay but now what's happening we want to generate a new element because we have one space so we want to add a zero four and look what will happen here if i step i'm going to add one element because i have the space to add one element but i'm going to add the element at the index i which is not the right value which is 3. so here i will add again the same tile and what i need to do is to have another variable which is going to be the last y so we are going to look in the list what was the last element and we are going to take its y which is 3 in that case and add a plus one and then we will add the zero four and every time we'll take the last one and make a plus one so we can continue the generation this way so let's do that let's say that at first the last y is zero when we start and when we don't have any elements it's going to be zero that's what i'm going to use here instead of the index and of course i need to use last y plus equal one okay but that's not enough for the first time it's going to work and when we remove one element and in that case it means in that case we want to take the last element and takes its y value plus one so let's do that if we have some elements if the length of tile coordinates isn't greater than zero then we are going to take the last coordinates which is in python at the index minus one okay and last coordinate is going to have the x value and the y value and we are going to take its y value in the last y but of course we need to add a plus one so that we can generate next tile okay let's put again the breakpoints and try it okay again the first time we did not generate anything yet tile coordinate has nothing i press continue then i generate my first tiles okay let's continue this time i clean the first one and i got the last y which is four because i took the value three plus one so i get four and now if i step i'm going to add the zero four and then next time it will be the zero five zero six so i will have an infinite line let's continue the execution and you can see that the way is generated automatically and infinitely let's generate the land for our game and we want to generate a random path now we just generate a straight line but we want something that goes on the left or that goes on the right so how can we do that for example if i get a random number and if i say okay we always get a x of zero but if you want to go on the left we'll get x of minus one or plus one so let's try to get a random number that is between minus one and plus one if i type r like random equal random dot round int you need to import random this one we will put the minimum value of minus one and the maximum of plus one both value can be returned in the result it's included okay so i will put this value as a r and let's see what it gives you can see that i have a kind of land generation but we don't get really a pass so it's not going to work well with a ship because for example we cannot go from here to here it's going to be a game over and of course we need to share more than just a corner between some tiles so we will need to add some more tiles to make a real pass so for example what we can do is to choose what we want to do for example go forward it's going to be this first choice just to add the tile and that's what we are doing here if we go on the right it's going to be this style that we use to go for one the same one then a next style on the right and then a next style forward so it's going to be this pattern okay and then we can continue and if you want to go on the left we generate one tile forward as usual and then one tile on the left and then one tile forward so we will have also this pattern what we are going to do is to get a random number 0 1 or 2 and depending on the value of this random number we will generate a different pattern in the coordinates but you can see that for every pattern we still need to generate the next tile the one that goes forward it is common to all patterns in the case we go on the right we'll generate this style on the x and y then on the x plus one and y and then on the x plus one and y plus one okay and so on so let's do it let's say that when we go forward it will be zero when we go on the right it will be one and on the left it will be two so let's implement this solution i'm going to get a random number between 0 and 2. in all case i will need to generate and that one of course it's not r it's the last x we need to manage the last value of the x to continue the pass so in the same way that we have the last y i'm going to have my last x equal 0 and we will also get it from the last tile last x is going to be we don't need to use plus one for this one because we keep the same x and we put zero to get the x coordinate okay now i want to test if r equal one i will go on the right let's put a command here so let's say that 0 is straight that 1 is on the right and that 2 is the left so if r equal 1 then we need to generate a next tile and that will be just on its right you remember the pattern it's like this we have the tile then we have this next style close to it and on top of that we will have the next one so i need to get the last x plus equal one and then i will need to generate the one that goes forward so i will need to have the last y plus equal one and generate my tile okay in the case of r equal to i do a last x is minus one and i will do the same thing so let's start let's try it okay i have a land generation it's quite slow and also what i want to say is that previously is that in this loop we look how much space we have in this tile coordinate for example if we already have three coordinates and we have a maximum number of tile of four we will have only one space but before we used to only open one tile in every loop now it can happen we add three tiles and that we go above the number of tiles but it's okay we will just have more coordinates here than the number of tiles but anyway when the old coordinates the one out of the screen will be cleaned we will make more space and because we check the length of tile coordinates yes it will happen that this value will be sometime greater than the number of tiles but it's okay because on the update function we just loop on the number of tiles and we will just ignore the extra coordinates so we can do that but we need to speed up a bit the game and let's say we put four and also because we need to display more tiles i'm going to put for example eight here okay so now we have really a land generation which is interesting because we have a pass of course we have this effect of generation so if you don't want this effect you add more tiles for example 16 and this time you will not see the generation because it's going to be done very far so we have two issues because you can see that the land generation can go totally out of the track so we need to solve that and also when we just start the program it will be nice to have first a straight line and after begin the land generation else it's going to be too difficult for the player also i want to try by enabling again the keys so i'm going to uncomment this line to be able to go on the left and on the right to see if everything is working well okay i can go on the left and on the right we really have a beginning of game here that's all for this video and let's continue on the project you can see that the land generation can go out of the grid here and i'm going to ask you for this exercise to make it impossible but first let's change a bit the parameters because the grid with only four vertical lines is not interesting for the game so we'll put eight and we will put more spacing dot okay let's try it again so you can see that sometimes the land generation goes here out of the grid and i want you to solve this problem how to solve this you remember that in a function on the update horizontal lines we have this start index variable and end index it gives the index of the line totally on the left and the line totally on the right so you will take these two lines you will copy that in the land generation and you will compare to your last x if your last x is already less or equal to the start index then you will need to go on the right because you are already too much on the left and to go on the right you will force the value of the random value you will not take the random value but you will override it to go on the right and here you will do the same to go on the left i let you do the exercise and then i will show you the solution so first thing i will do is to take these two lines and go back to the land generation in the generate tiles coordinates when i get the random value here i will first have a look okay does my last x is less or equal than the start index that means i'm already totally on the left and in that case i will not take this random value but i will say go on the right so i will force the value of one on the other side if my last x is greater or equal than the end index that means i'm too much on the right i will go back on the left so i will give value two let's try it okay you can see that here i reached the maximum but i did not go over and you will see that even if you wait for a while you will never go out of the grid and that's all for this exercise we are going to improve our game by adding first a straight line and after a moment we will really begin the generation of the pass as it's going to be too difficult for the player if we start directly with a pattern so you will add this straight line of 10 tiles and after that you will begin the generation for this you are going to create a new function that i will call pre fill tiles coordinate okay you will implement this function and you will add 10 tiles in a straight line of course i need to call this function we will call this function only one time in the init and just before the generate tiles coordinate i let you do the exercise and then i will show you the solution so here i will loop for i in range 0 to 10 and i will add some coordinates in self tile coordinates at the beginning this list is empty so i will just append some coordinates inside i need to put my tuple so it's going to be parenthesis inside parentheses because it's a straight line in the center we use 0 for x and we use i for the range and we use i for the y so here i will get 0 1 until 0 9 straight line and after that we will get some code to generate tile coordinates at first it will not generate anything because we already have too much coordinates we are already over the number of tiles but after a moment it will remove some coordinates that are no more displayed on the screen and when we will have more space then we will begin to generate new tiles let's try it you can see i have my straight line and after moment i can begin to play everything is correct for this exercise and let's continue on the project let's display our spaceship on the screen the spaceship is going to be a triangle and we will place it at the bottom and center horizontally of the screen self.width divided by two we will define new variables to define the width of the ship in a percentage of the screen width also the height and also the base y so that it is not totally at the bottom of the screen concerning the canvas we are going to use the triangle instruction we will need three points point number one number two and number three for this exercise you are going to implement the coordinates of these three points for the ship and to add it in the new ship variable that will be our triangle instruction first we will write some code together and then you will do the exercise i'm going to define the new variables so i go at the top of the main widget and here i will create the new ship variable that is unknown and that will contain the triangle instructions so we will need to create an init ship function also i will define the ship width that is going to be 10 percent of the screen so i give you some values that i tested previously that makes the display nice but you can change them of course ship hate which is 0.035 and chip base y equal 0.04 okay let's create the init ship function in it ship we want to use the canvas and this time we are not going to use a white color because the ship will be displayed in black so we will put zero and of course we want to create our triangle instruction and this is going to be saved in our ship variable and we need to import that okay now we need also to create the update function so you may say yes but the ship is not moving it's in the land which is moving yes but the ship is displayed at the middle of the screen because we can resize the window the middle of the screen may change so we need to update the coordinates of the ship dev update ship and this is what you will need to do for this exercise you will need to compute the coordinates and at the end you will do self.ship not points equal x1 y1 x2 y2 x3 y3 and you need to give this different value x1 equal something from the slide you remember that point number one is lowest left and point number two is here at the center and then we have point number three don't forget to use the transform function because here we display on the screen so you will need to call this self transform to help you i'm going to give you some intermediate variable center x is a self dot width divided by two base y which is a y coordinate for the point one and point three it's going to be self dot ship base y multiplied by seven hate and again we don't give pixel dimensions for the ship because if the screen is bigger then the ship will look very small so we need to give percentage on the width and the height of the screen you can also have the ship widths which is going to be self dot sheep weeds multiply by self width but in fact what is going to be interesting for you here is to have the half of the weeds so we will write ship half width and we are going to divide this by two it's time for you to do this exercise and then i will show you the solution so we may write x1 equal center x minus the half width of the ship okay and then we will have y1 equal the base y but take care because we need to call the transform function so what we need to do here is to call it from here transform and so i'm going to give the x coordinate and the y coordinate okay so i can do the same for the other points i'm going to copy paste this x2 y2 x3 y3 for x2 it is at the center x and for the height we take base y and we need to compute the height of the ship so it's going to be ship height equal self ship height multiply by self hate so it's going to be base y plus ship height and for the last one it's going to be the same as the first one but we do a plus on the half width let's try it we see it's not displayed and why it is not displayed because we did not call our functions and let's call the init function should we call our init ship function before the initials or afters initialize in fact it is very important because if we call it before the ship is going to be displayed under the path because the order of instructions matters here so we need to display the ship after any tiles so the ship is above the pass self not in it ship also we need to call the update function update ship that we will call in the update function here just after update tiles self dot update ship okay let's try it you see that this time it's working we have the ship displayed of course we will need to adjust all the speed of the game because now it's not really playable but that's it for the exercise and let's continue maybe you saw that we have a big issue in our game look if i start it if i resize the window especially if the window is very small the game is faster and if i get the window bigger the game is very slow so why do we have this problem for this exercise i'm going to ask you to investigate and fix this issue i give you one hint it's not a problem of performance it's really a problem in our code so try to investigate and at least try to find where does it come from and then try to fix this problem so that the speed is constant when we resize the window practice on your side and then i will show you the solution so clearly why do we have a difference when we change the size of the window and what defines the speed of our game the speed of the game is defined by this variable speed which is the speed on the y axis and also the speed x on the x axis so for example here we have a speed of 4 where do we use it we use it every time in the update function here it means that every time we display a frame of the game we increment our y by this constant value and also we multiply it by the time factor but this is okay so why is there a problem here because we have a constant value for the speed of 4 in this case and 4 is a very big value for a small screen that means for a small screen we increment the y of 4 every time but 4 is a very small value for a big screen so that's why we have a difference here it's because the speed does not depends on the size of the window and that's what we are going to change we need to make the speed depend on the size of the window because we see the speed on the yaxis we need to multiply it by the height of the window so let's do that we are going to define a new variable speed y equal to the speed multiplied by self hate and you may say yes but 4 multiplied by the height of the screen it's a big value yes of course we need to adjust the value of the speed variable and we will need to put something very small so let's take this and multiply by time factor okay we have to do the same for the x so speed x is going to be the current speed x and you remember that current speed x is in fact speed x but it depends sometime it's speed x or sometimes it's zero depending on if we press on a key or not so it's going to be current speed x multiplied by self width okay so now i go back upstairs and i'm going to put a very small value here and see what it gives okay so for the y it's going quite quickly and for the x it's a bit small also what we can do here is that we can multiply by 100 so we will have 1 and 1. it's going to be more relevant value so what we can do in the formula downstairs is to divide by 100 speed y divided by 100 and speed x divided by 100 that means my value here has to be multiplied by 100 so i have one dot zero i said that the speed on the y axis is a bit high so i'm going to put a smaller value dot 8 and for the x we need more speed 3 for example let's try it and let's expand a bit the width of the tiles dot 4. okay so we have something like this you can see i can clearly play in the game it's a bit difficult but i can't play it can i still play it if the window is smaller you can see that the speed is still the same and i can continue to play my game okay if i expand the window it's going to be also the same speed so we fixed our problem and that's all for the exercise let's detect that the ship is still on the track and if that's not the case it will be game over at first we will just print game over to know that the ship is still on the track we will say that at least one of the three points of the triangle is going to collide with one of the tiles i'm just going to put a very small speed for x and y and to show you what it gives in 2d so let's go back in two dimension and let's start the program okay we'll also reduce spacing here between the vertical lines okay we have something like this and what we want to do is to look at the three points of the triangle if at least one point is still on the track it's okay but if the three points are out of the track it's going to be a game over but now we are going to print in a loop game over and later we will implement a proper game over so do we need to test all the tile no we just need to test the tiles that are at the bottom of the screen because the spaceship is always at the bottom of the screen so we will just test the first two ranks here that are defined by the current y loop so we'll test current while loop plus one and of course if at least one of the tile makes a collision what i call a collision is when one of the three points is contained on a tile at least only one tile is needed to say it's okay we are still on the track so let's do that and first we will implement a function to test if the spaceship is colliding with one tile and after that we will make another function to make the test for different tiles okay so i will just write my function just under the update chip and it's going to be def check ship collision with tile and i will give the tile index x and tile index y you remember that we can get the tile coordinates from this function self get tile coordinates and i give the i x and t i y and i will get so x min and y min and if i want to get the max i can just add plus one so i'm going to do like this plus one and plus one okay so now i want to get the coordinates of the spaceship and we have three points so i need to get a new variable to store the different points of the ship and we are going to call that ship coordinates equal and it's going to be a list of three points that i will initialize here first point second point and third point ship coordinates where do we have the ship coordinates in the update function here so we are going to change the bit what we do here to store the different coordinates and of course we want to get the coordinates before the transform after the transform is just for the display but before the transform is for the logic and of course the coordinate we get for the tile are before the transform very important so here what we will do is save that ship coordinates for the first point we want this tuple containing this value for the y and because we don't want to do a copy paste of the same code i'm going to use this value here now if i copy that it's not going to work like that because the transform function needs two arguments x and y and this is seen as only one argument containing a tuple as one argument which is a tuple so we need to expand the tuple so i will put a star and this is going to put directly this first argument and this second argument okay let's do the same for the two other points one and two this one is center x and base y plus the height and the last one is the same but just a plus on the x okay so let's copy paste all of this and we do one and two so check that your index are correct here okay so now we have all three points in ship coordinates and i'm going to loop for these different points for i in range 0 to 3 i will loop on ship coordinates of index and i will get the point x and point y now i need to see does my point is inside this tile so i can check if it is contained and if that's the case i will return true and i will say okay we are colliding i just need at least one point that is colliding when it's the case i will just exit the function and return true but if we loop for all the points and we did not collide with anything we will return false so how can i test that my x must be contained between x min and x max so i'm going to write my point x must be greater than the x mean and it should be lower or equal than the x max also i can simplify this expression to write it like this my point x is between x min and x max included and we are going to have the same for the py is contained in y min and y max if that's the case we return true yes we are inside this style and we are not going to continue the loop even if that's the case for the first point the function returns true and we exit the function here okay if that was not the case we continue to the next point and the next point and if that was not the case for every point we will return false okay now we want to do that but for all the tiles that are on the two first rank so we can write our function check ship call lesia ok this function will return true if the ship is on the track and it will return false if that's not the case in that case we will say game over where are the tile coordinates it's in self tile coordinates okay so what i can do is to loop on these coordinates in range 0 to length of this but i told you we are not going to test all the tiles it's not necessary so we will add an exit condition here but first let's get our tile index x and tile index y from the tile coordinates at index okay i get my tile what is the exit condition if my tile index y is greater than the current while loop plus one it means i don't need to test the tiles that are above the first two ranks because the ship is always at the bottom of the screen anyway so this will avoid that we do unnecessary tests if my tile index y is greater than the self current while loop plus one because i want to test the first two ranks of ties if that's the case i will say that i return false i could not return 1 because i did not return true because it means i did not return true on the previous tiles the types that are in the first two ranks now i will check my tile if check ship collision with the tile that we want to test here if we have a collision then it's okay everything is finished we return true that's okay we are still on the track but if we loop and we test all the tiles and we go after the first two ranks and then the story is finished or if we go at the end of the function it means we did not collide and that's a return false let's call this function on the update function so we go to the bottom of the code in the update function and then i will call this rdn self check ship collision if not if we return false in this function that means we are in a game over conditions so for now we will just print game over okay let's try it okay you can see i'm on the track everything is fine here i am still on the track because i have two points colliding still here i have still one point colliding but if i go totally out we can see game over okay if i go back it's still working fine so let's go back in perspective mode to see that everything is okay transform i go in perspective mode and i'm going to put back some better value here so line spacing 0.4 and speed x little bit greater for example 3 let's try that it's far too slow i'm going to have point 8 so now you can see it's good and when i go out of the track we can see in game over here okay everything is correct and let's move on to the next lecture galaxy project version number three our project will look like this we will have a menu we will be able to start the project to play and to go into the game over also we have the score that is displayed here in this version we will first manage the game states the game will not start by itself but we will press the button to start the game and also when we will have a game over the game will stop we will display this menu that will be displayed when we start the game and also when we get into the game over and we will finalize by displaying the background image by playing the different sounds and also displaying the score and i will finish on that project by sharing with you my different ideas and how to improve this game are you ready to start let's do it let's add a game over state to our game now we detect the game over but we still continue to play for example here we display game over in the trace but we can still continue we want to stop the game when we get a game over so we are going to add a new variable that i call the state game over and as a default our game is not in game over but when i will have no collision with the tiles i will go in game over mod self not stay game over equal to also i want to print this trace only one time so i will test if no collisions okay and we were not in a game over already okay so this will be executed only one time also i want to stop the game so if we are in a game over mode we are going to stop doing few things in the update function for example here we continue to go forward in the game so we are going to do that if not game over if you are in game over we will stop going forward into the game also i want to stop doing the loop because anyway we don't move into the game anymore and also i want to remove the possibility to go on the left and on the right so all of this block is under this condition when we are in game over all of this will be disabled let's try it so you can see i can play but as soon as i go out of the track the game is freezed and i can see game over so it seems it's working well but i'm going to show you a small case where it's not really working well it's especially if we put very high speed here for example two and you will see what happened here i just start the game you can see i'm not in a game over but you can see that the game is freezed already and if i look you can see i got a game over so why does i have a game over while i'm not in a game over condition this is because when we start our game here we go in the init and we prepare many things we initialize all of this and at the end we do the clock schedule to call the update function in fact kivy did not finish to initialize everything he need to initialize the screen and many other things so the call to the update function is going to take more time than expected at the beginning and so for the first calls we are going to have a big delta time here look if i enable again the trace of the delta time you can see here in the trace that normally we should have something around 1 and that's mostly the case except at the beginning if you look the first delta time is very high 29 it's because kv was starting so it took more time than expected but in our case what happened we took that delta time and then we compute our time factor from the time factor we used it in the computation of the current of set y so we made a big step in one time and because of this we were a bit ahead of the computation of the loop because in the condition we check if this current offset y is greater than the spacing y and in that case yes we increment the loop and we remove spacing y but what happened here is that because of the big value that we put at once we were far greater than the spacing y even greater than two times or three times the spacing y and so normally we should be in the current while loop of maybe three or four but we just increment by one and so in the computation of the check ship collision we are going to compare the collision with tiles that are already out of the screen and that's why we don't get any collision and that we get a game over directly so the bug is here in this condition in fact we should do that as much as we need and that's why you should replace it with a while current offset is greater than spacing y we will subtract it and we will increment the loop okay let's start the program again you could see i got a game over but it is a real game over this time because it was very quick so i'm going to comment this trace and i'm going to reduce a bit and the speed to 0.8 okay so this time everything is working fine we want to improve our game by adding a menu so that we have a button to start the game and not having this behavior of the game that is starting automatically okay so we will click to start the game and when we will have a menu again to restart the game the menu widget will be very simple it's going to be a title a button and have another lay that is going to be a dark overlay and we are going to use the same menu for the start of the game and for the game over the difference will be the title and the text of the button that will be modified so let's just create this menu we need to create a new python file that we will call menu and we will need also to create the kv file menu dot kv make sure that all the files are here in the same directory in the menu python file i will create my menu widget and because you are going to use all the screen size let's make a relative layout so i don't need to specify manually the size that would be the case if it was a widget so i just use a relative layout so i will also change the main widget and take it from a relative layout okay so now that we have this we can define the menu widget in rkv file so menu widget it's a relative layout but i still call it widget that's okay so what do we have inside we have a label and we have a button for the label i'm going to put a text for the text we will do that later so now i put title and for the button i will put ok concerning the position i want to put it in the center of the screen so i will put center x dot 5 and center y i'm not going to put dot 5 because i want to put the button just below so i put it just a bit upstairs so i'm going to put it at 60 0.6 and the button i will put it a little bit downstairs at 1.4 okay so now let's take this menu widget and let's put it in our galaxy.kv i put it inside my main widget here but you will see that if i want to start my program right now i have an error because you don't know my new widget i am missing an import statement here import menu okay so now you can see the menu is not displayed and that is because we have the menu.kv file i need to say to kivy to take this file into account so in the main just before the main widget i will write builder dot load file and it's going to be menu dot kv okay i need to import this kv long builder let's try it so you see the menu is appearing and the button is very big so it's because we did not specify any size for the button so let's do that back to the menu.kv i'm going to give a size hint to my button and i will put twenty percent horizontally and ten percent vertically let's have a look so you can see i have my title so the title is in white so we cannot see it here but we could show it a little bit and i have my button another thing we want to do is to put a black overlay almost black overlay like 80 so we can still see the game but have this darkened background when we have the menu so we can do that in our menu.kv in the canvas so i'm going to write canvas and i want to use this as the first instruction so i will use canvas before i will use color that is going to be rgba so we have a black color zero and for the alpha we are going to use eighty percent this color i will use it with a rectangle and it will take all the size self.size okay let's try it so now you can see that we have our menu with a dark overlay in the next video we will add the state to our game to avoid starting the game directly and we will also use the action on the button to start the game and when we will have a game over we will display the menu again we are going to implement the first part of the menu so we will start our game only when we click on the ok button and we will need also to hide the menu in that case and of course we will need to show the menu again when we are in game over so let's add a new state so that the game is not started directly we will have state game has started and we are going to put false so when the game is not started we are not going to do everything in the update function like we do in the game over if not game over we do that and self started and we should do it only if the game has started that means if the game has not started we are not going to do anything here so if i start again you can see that this time the game is not starting automatically now i need to manage the click on the button for the button i can go to my menu and i can add on press event and i will create a function on menu button pressed okay we need to put the parenthesis here because it's a call is it going to be root dot on menu button pressed not really because in that case we want to define this function not in the menu widget but inside the parent inside the main widget directly so it's going to be root dot parent dot on menu button pressed and i'm going to define this function in the main widget so i'm going to go totally at the end of the main widget and i will create this function i will just put a print button okay so now is it working if i start when i click the button i should see my trace and you see that the button is not working i don't see any button trace and i don't see any lightning on the button it's like the button doesn't get any touch and why so it's because if you look what we did in the main widget in the user action we have this function will manage the touch and if we put a breakpoint here and if i restart even when i click on the button we will go into this function and the problem that we have here is that this function overrides the default behavior but will not transmit the touch to the other widget and this is because we did not call the super and we need to call super with the type main widget in our case self dot and untouched down and giving the touch okay i'm just going to clean some traces okay so now you will see that we are going to have one issue because we need main widgets you see but if we import it user actions will need main widget but main widget already needs user action so we have a problem of mutual inclusions so what we can do here is to give the parent class of the main widget is relative layout so you see here the import from user actions is here okay so we can take relative layout and put it instead here in the super and i will import the relative layout you will see that this time when i start the program i can click on the button and when i click on the button i want to start the game and to hide the menu so let's do that back in the main widget in my button click i will start the game so i put my self state has started to true but i also need to hide the menu how can i hide the menu i can use opacity equal zero the menu is inside the main widget here and i need to assign a property to it so i will use id menu widget and i will need to create a new property in the main widget okay i assign this new property so we will need to define it menu widget okay so now in the main widget i go back to the top and i will need to create i will go here with other properties my menu widget which is an object property okay i need to import object property so now that i have my menu widget i can just use it in the click of the button and i will do self dot menu widget dot opacity equals zero let's try it so you can see that if i click the game is starting but also you see it moved my player and okay after a while i get the game over and so we have two issues first when i click on the button also the main widget is taking the click on the window to move on the right or on the left so we need to change that and when we have the game over we need to display the menu again so why we have this first issue it's because on the user actions on touchdown we should do that only when we are in the right state and if you remember we have two states here game over and game has started that means we want to do that only when we are not in game over i'm going to comment that so if i'm not in game over i can allow to do the touch actions and also that the game has started i can do that okay first thing second thing we need to change is from the game over so but before that i want to show you the other thing we need to change is to display the menu again when we have the game over but i want to show you another issue that we have so this time you see that i can start and it's not moving okay it's correct and okay i will lose so now i'm in the game over but you see that if i still click here even if the menu is not displayed i still get my button action and this is going to be a problem on mobile when we are playing and pressing the screen it may trigger the action of the button and why is this because we just use opacity on the menu but the menu is still here and the button is still here but not visible so we need to handle that and what we can do is that in the untouched buttons on the on touchdown so i'm going to copy this function and i'm going to manage that on the menu and i will say to the menu so i'm going to delete all of this i will say that when we touch something on the menu and if the menu if self opacity is equal to zero we are not going to do anything with the touch so i'm just going to return false okay if the menu is not visible we ignore the touch else we transmit the touch okay let's try that again okay i start here i click again on the button but you see that we don't have this button trace so this is correct now i need to manage the game over when we are in a game over i want to show the menu again so i will put opacity to one i copy this and here in the game over state i'm also going to put my menu back visible okay so let's see i start okay and i'm going to lose and then i have the menu again and the next step we need to implement is to be able to restart the game from the top when we click on the button and that's what we are going to do next we would like to be able to reset our game here when we start our game okay and when we have a game over when we click it's not restarting the game correctly so we need to develop something to restart from zero and it's going to be a reset function so i'm going to add this reset game function so we need to define it so we will reset the game to zero and we will put the right state and remove the menu let's define this new function so i'm going to go just below the init here of the main widget and i will put def reset game in a reset game of course we need to reset the state of the main widget so it will concern all the variables that we have here and of course i will need to put game over to false game self.gameover equal false but you will do that at the end of the function because you remember that clock schedule interval is running so the fact that we are in game over equal to our game has not started it will prevent from executing this part of code so let's keep this part of code disabled and we will enable it again at the end by putting game over equal false because here we will reset different variables so let's do that what do we need to reset ship coordinates it's okay because it's going to be recomputed in the update the ship has been initialized so we don't touch it style coordinates we need to reset tile coordinates because we need to start with a straight line so we want to put self tile coordinates equal an empty list and we will need to call the prefill tile coordinates so we will restart from a straight line and also we will need to generate the tile coordinates at the beginning okay i continue so tiles it's okay has been initialized so we keep it but concerning the speed here current offset y current offset one is our y position so we need to reset it to go back at the beginning of the game and current while loop also and it's going to be the same for the x variables here we need to start with a speed of zero and to be in the center of the screen so let's copy all of this and i will put a zero for all these variables okay self current while loop i will remove this one and i put everything to zero what else do we have horizontal line okay it has been initialized we don't need to touch it vertical lines also and perspective point and menu widget okay so all of this we don't touch it so we reset everything and we put back the tiles to zero and because we put our current while loop to zero before regenerating it's going to regenerate coordinates starting at zero so let's try it and also you see that because we call these two functions we can also replace these two lines by reset game so we can do that it's not going to change anything but we can change the code like this let's try it i start the game i lose and i can click again and the game is restarting from the top okay everything is working fine and let's continue let's finalize our menu first thing we want to do is to put the right title and the right text for the button so when we will start we want to display galaxy for the title and start for the button and also when we will be in game over we will change the title by game over and the text button by restart so how can we do that if i go back to the menu we have our label with default text and the button with the text so you may say i can put galaxy here as a default text and then put an id on this label and get a property to change the text of my label but we can do something easier than this we can directly put a string property here for the title and that's what we are going to do i'm going to write menu title and it's a property we are going to define in the main widget so it's going to be root not parent dot menu title and we are going to do the same for the button it's going to be menu button title so i have to define that in my main widget here i will say menu title is a string property so i need to import that and i will do the same for the menu button title i can give a default value here so the default value is going to be galaxy and it's going to be start for the button also for the title we want to expand a bit the different letters so i'm going to put three spaces between every letters let's try it so i have galaxy and start button but when i'm in game over i want to display game over and restart so let's do that i have to change the value of menu title and menu button title when we get the game over at the end of the update function here so i'm going to make self dot menu title equal game over and self dot menu button title equal restart and for the game over i'm going to expand the letters but only by two spaces this time because this word is longer in the middle i put four and two okay let's try start and game over restart okay it's working well so now let's add some style to our menu and you will need to use the file i gave you in the resource folder that you can download you will find three folders audio with the different sounds that we will add later now we will use the fonts so it's going to be this font for the title and euro still for the button and also you will get the background image so let's copy these three folders at the root of your project you can use a right click on a file and this option reveal in finder and then you just copy your three folders here it will appear in the project okay so let's use this font for the title how can we use a custom font for the label we use font name and we need to give the directory which is fonts slash and this name of file suckers go tick std light dot ttf okay and also we are going to make bigger letters so it's going to be a font size and let's put 60 dp okay let's try it so that looks nice for the title let's style the button for the button i'm going to use also these two properties font size that you are going to put half 30 and for the font name i'm going to use the other font your row still okay so what do we have this time we have something that looks great i want to expand a bit the height of the button and also to position it a bit lower and we will add some color to this button so first thing the size is ten percent height i'm going to give 15 percent and i want to display it a bit lower so i'm going to put it at 30 percent of the screen now i want to add a background color so i can use a background color and i prepare the color code for something quite red so it's going to be 100 red and 30 percent green 40 percent blue and i put it at 85 percent opacity so let's try that and you can see that my color is not really vivid it's because it is multiplied by the default button column which is a gray so to remove this texture we need to use background normal and to reset the texture and this time it's going to look nice ok perfect i can start my game and then i get game over everything is good concerning the menu for this exercise i'm going to ask you to display the background image this one bg1.jpg in the background of the main widget so we just place the game above all of this you will need to add this image in the main widget but you are going to add that in the kv file here i don't give you more instructions it's your turn to do the exercise and then i will show you the solution can we display this image can we use an image here not really because the image is going to be drawn over the canva so we need to display it in the background and what we can use is a canvas before and inside we will use a rectangle that will use this file as a texture so we will use the source property on a rectangle that will take all the window and because we are in canvas before it's the first thing we are going to draw on the screen and we will draw everything else on top and that's what we want to do so i'm going to put a rectangle that will take all the space so it's going to be a size of self dot size and i will use the source image images slash vg1 dot jpeg let's try it you can see that the image is displayed and i can start the game okay everything is correct let's continue on the project let's display the score in our game what is the score and what will be the score in our case i have decided that the score will be the number of loop defines how long we could go into the pass so it's going to increment and it's going to be finally the value of the score so where can we display the score i want to display the score in the game window at the top left and we are going to add it directly in the main widget so first we will write some code together and after you will do an exercise so i go to the galaxy.kv and i want to add a label should i add the score label before the menu widget or after it it's going to be an important choice but i'm going to start by putting it before the menu widget label for the text i'm just going to try with a placeholder text it's going to be score 120 for example and also i'm going to put a style so for the style i'm going to copy paste these two lines from the button of the menu and i'm going to paste it here i'm going to use a font size of 20 and to keep this font name er still so what does it makes right now if i start it i cannot see it but if i start the game you can see that the score is displayed in the middle of the screen because it takes all the space so we need to define the size hint for example 20 and 20 okay so what do we have we have something here but i want to display it at the top left so i'm going to use a pos hint that will be x 0 so that one was implicit that was already here but most important is to have the top to one totally at the top so let's see yes it's displayed here so that's correct and i just want to reduce a bit of margins here so i will reduce a little bit the size to 18 okay so we have something good and when we start the game we will display the score so it's going to be your exercise you need to display the real score here and you will use a property for the text that we will call score txt okay because we are in the main widget we are going to use root dot directly we don't use root parent we needed to use parent from the menu because the parent of the menu is the main widget but since we are in the main widget directly it's going to be root score txt for this exercise you will define this new property and in this property you will need to use the value of the current loop to display the actual score do this exercise on your side and when it's done i will show you the solution so what we need to do is to define this score property i go to the main widget at the top and here i will define string property because we need to display score and then the value of the score score text is going to change when we change the value of the loop so i go back in the update function here when we increment the current while loop and we are going to do the score equal to score and then the value of this current while okay let's try that so you can see that at the beginning i don't see the score because we did not give a default value for the property okay but when i start it i get one two three four five and we begin to see the score and when i have a game over i can still see the score but not really well because of the overlay of the menu and also if i click on restart you can see i still see 23 and then one two three four five so i want to display score zero and display score zero we are going to put this line also in the reset function so it's going to be more clean here i can put score zero directly and remove that part or i can keep that part and because current while loop is reset to zero it's going to make the same thing okay let's try it so this time you can see i see score zero when i start i have zero one two three and when i lose i have again 0 1 2 3. it's more clean now i want to change something i want to see the score correctly because here we cannot see it much because of the overlay how can we solve that finally in the galaxy.kb we need to display the label on top of the menu and not the opposite so if i do that this way i'm going to display the score on top of the menu so it's always displayed correctly okay that's all for this exercise let's play the sounds in our game you see in the audio folder that we have many wave sounds so we are going to play these sounds in our game and at first i'm going to write some code with you and for the exercise you will trigger the sounds at the right moment so let's initialize the sounds we will create a new function init audio and we will use the sound loader dot load and give the name of the function sound loader you need to import it from tv core audio sound loader here we need to give the name of the different files so i will start with the first one begin dot wave and i need to provide the directory name so it's going to be audio slash begin.wave and this sound we need to save it in a variable so we can use play or stop on this variable later so it's going to be a self dot sound begin equal this i will need to define all my different variables here none okay so i need to copy paste this line for every sound that we have so we have still one two three four five other sounds okay and i will copy paste and i will write down the name of the different files you can see i have a completion here game over impact game over voice music one why i call it music one because maybe you will want to add some more music in the game later so i just call it music one instead of music and restart okay so let's rename the variables galaxy game over impact game over voice music one and restart and i will copy all of this so i can create the different variables equal none so begin we have it galaxy equal none impact voice music and restart okay and i will remove the self in the front perfect so now my init audio function i need to call it from the init of the game so i will call it at first init audio okay and i'm going to add something we can control the volume of the different sounds so for the music sound music 1 we can do dot volume equal 1 is the maximum it's 100 percent for all the voices like begin galaxy and and the other ones you are going to give a volume of 25 percent so i will copy paste that and for the sound galaxy i'm going to do the same this is an impact song and this one is a voice sound and restart also okay for the sound of impact we are going to give 60 so you can adjust the volume of the different sounds for me i will keep these values now it's your turn you have to do an exercise you need to trigger the different sounds at the right moment so you will need to call the play function and also sometimes the stop function the galaxy voice is called totally at the beginning when we start the game it will say galaxy and when we will press start it will say begin okay and it will also start the music then later when you will get a game over you will play the impact of the sound and you will also need to stop the music and you will also play the game over voice but then the button now is not start it's restart so when the user will click on the restart button you will need to play restart sound it's your turn to practice and when it's done i will show you the solution so first thing i will do is i will use this begin sound the begging sound is when we click on the button on menu button pressed okay i can play my sound when i click on the button let's try it here i press start and it says begin but i have a problem in the game over i'm going to click on the same button and i want to say restart but it says begin because here we need to test the state if we are in state game over then we will play the restart sound else i'm in the first case and i will play sound begin let's try that okay begin game over begin so it's not working and why it's not working because you remember that we already reset the state game over in the reset function so we don't have that information anymore we need to move this part of code before the reset function so we have still this state game over let's try it begin okay restart okay that's correct now let's start the music when we click on this button we are going to start the music so i'm going to do sound music one dot play okay and i'm going to group all the sounds together so i'm going to play it here so whether we are in the first case or in the game over we are going to play the music when we click in the button in every case okay it's working but in the game over i want to stop playing the music so when we get the game over we have multiple things to do we need to stop the music stop but we also need to play some other sounds because we have the sound of impact game over impact that we are going to play and we have also the voice sound game of our voice that we need to play so let's see what it gives and i got to crash let's see why float object has no attribute play and we get a problem on that sound game over impact it says it's a float object why i think i know why it's when we put the volume i think i forgot to put volume in front let's see init audio and here you see sound game over impact dot volume is equal to zero six okay let's try again and then you could hear the music stop i get the impact sound and we also hear the game over that was quite low and we are going to improve that later i'm going to show you how to delay the sound but just to finish the exercise i need also to play the galaxy sound at the beginning so i'm going to take that and on the init of the game after init audio i will put it at the end of the init function i will play the galaxy sound so when i start the game we can hear galaxy then we can start and then i get the game of restart game over okay so that's all for the exercise and now i'm going to show you how to improve it a little bit i want to have the impact sound on the game over immediately but a few seconds later like three seconds later i want to play the sound game over so let's do that when i get my game over i'm in the update function here so when i play game of voice that's voice on i want to delay it so i'm going to define a new function play game over voice sound okay so we are going to play the sound and this function we need to delay it from here so i'm going to use clock dot schedule once we want to start it only one time this function self dot play game over voice sound okay and i will specify the delay for example three seconds and because this function is used inside the schedule function i need to give the delta time parameter so let's try it so you could hear i got the impact and then a few seconds later we could hear game over but in fact we have a small look for example if i restart you can hear game over while i'm playing the game and this is because when we get the game over we trigger that function that will happen three seconds later okay so we trigger that but before it happens i click quickly on the button here so i had time to restart the game and when i'm playing then after a few seconds this is going to play so i will hear game over while i'm playing so this is clearly a bug so what we can do is to test here if we are still in a game of our state if self dot state game over then only in that case i will play the game of the song let's try it again and you can hear that this time i didn't hear the game of her song i will only hear it when i wait this one so everything is good for our game you have completed the galaxy project and you have reached the end of this tutorial congratulations you might ask me so now where do i go from here what's next i advise you to practice by doing some personal projects let me share with you some ideas why not creating a simple game or a simple application like a currency converter or a password generator or why not trying to add some features to the galaxy game for example store and display the best score or manage multiple levels or increase the speed over time or other difficulty choice easy medium hard and also we can stay in touch you can subscribe to my youtube channel code with jonathan so that you will know when i post new tutorials and if you like to learn from me you can check out my full python course that includes more than 300 videos and 27 hours of content thanks again and see you soon