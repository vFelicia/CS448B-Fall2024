hi everyone and welcome to this javascript tutorial to create the 1979 atari game asteroids or our version of it at least in this first part of the tutorial we're going to create the ship and make it move around the screen and everything so you can go around go ahead and download this template if you'd like update the title to whatever you like asteroids we're going to use html canvas to achieve our graphical display so give it an id game canvas or similar give it a width width will equal say 700 height you can change this to whatever you like height will equal 500 first of all we need to grab that canvas uh just from experience i know that we need to give this a jar a js dock so at type just so that it recognizes it as a canvas element so at type curly braces html canvas element close the js dock and move to then we can create the variable ken and that will equal the document get element by id and just type in the string that we had up there the id came canvas great get rid of this uh we need to get the context from the canvas so the con text will equal the canvas dot get context and it's going to be of type 2d good we also need to set up the game loop to achieve our animation we can just use the inbuilt function set interval for that it requires a handler so that's just the function name update and a timeout in milliseconds so 1000 divided by our frame rate so we'll set up a constant called fps const fps equals 30 frames per second say so that'll be well let's leave a note frames per second so that means it'll call this update function once every thirtieth one thirtieth of a second so let's go ahead and create that function update function update um what will we do first in this well we need to draw let's plot out what we're going to do in this tutorial so we'll draw the background or draw space we will draw our ship we will what else um we will move the ship move or rotate the ship first doesn't really matter the order here we'll move the ship move the ship draw ship draw space good okay so first of all we need to draw space how do we do that well we can just set up the fill style basically we'll just paint the background in black so fill style will equal black and we'll draw a rectangle draw so fill rectangle is to draw a filled rectangle obviously it requires the origin which is going to be 0 0 and the width will which will be the canvas width canvas.width and the height is the canvas.height let's just run that make sure that it's working okay there we go that's the background great next we want to draw a ship now how are we going to represent our ship probably the best way is just by using a we can just create a variable ship using an object javascript object all that is is a fancy array really so ship will equal curly braces now we can put all our properties in here so what do we need to know about our ship we need to know the x coordinate so let's start it in the center of the page center of the ship center of the ship center of the screen so that'll be canvas width divide by two the y component will be the canvas height divide by two what else do we need to know um the ship's size so have a radius r that represents radius uh it'll be based on how about we set up a constant here constant chip size which will equal let's put it in pixels say 30 ship size or ship height maybe ship height in pixels you could make this a percentage of screen width if you wanted to or screen height but we'll just keep it as a fixed number so the radius will be half of that minute ship size divided by two we also need to know the direction of the ship the heading as such we'll call that a for angle um now if you know your trigonometry and the unit circle 0 degrees is facing right facing upwards is 90 degrees so we'll put it 90 degrees but all the math functions don't work in degrees they work in radians so we have to convert this to convert this to radians by doing divide by 180 and multiplying by math pi divided by any times i say don't need that convert to radians okay so we have an angle to draw that ship well we need to set up our context first set up the colors and so on so we'll have it as a stroke a stroke style we'll just make it white we will um maybe set the line width we'll set the line width how about we put that as a percentage of the ship size so that will be say ship size say divide by 20. good um now the actual ship to draw a triangle so this is going to be draw triangular triangular ship draw a triangular ship so to draw a triangle we need to use the path so we can do a begin path just call that function begin path and we need to move the cursor to where we want to start so we use we use the function move to it just takes an x and y component x and y coordinate so the x coordinate will be the x of the ship won't it well that'll the x of the ship represents the center of the ship so we want to add something to that now what do we add again some trigonometry we just need to add the radius sorry the ship radius ship radius multiplied by the cosine because cosine represents the horizontal of the ship's angle whatever that angle might be right similarly we the y component will be the radius times the sine so that's the vertical of the ship's angle we can test this out oh actually we'll have to draw a line first so that's the tip of the ship so that's the tip the nose i guess and then nose of the ship now we'd like to move to the the rear left of the ship so remember it's a triangle so context will do a line too so it'll draw a line from the original point from the two where well the rear of the ship we could use that to represent the rear of the ship just with one minor change instead of oh sorry i just made a mistake here ship y should be minus the ship minus the root that because um negative represents upwards on the screen right now to get this um to get the rear of the ship we would change the sign so change the plus to a minus and the minus to a plus so this will be the rear left of the ship now that's the rear center that we currently have so we need to modify this i just grabbed out a scrap piece of paper before and worked all this out using trigonometry so you can either do it yourself or just trust me we need to add the sine of the ship's angle here right and here we just need to subtract the cosine of the ship's angle i'm not going to explain the maths here i don't really want to do a math lesson um all right so that should draw the real left now to test this we can just use context stroke that means it'll draw the path let's have a look what that looks like that's looking good do something similar so copy and paste this this is going to be the rear right so we're going to draw a line to the rear right now in order to do that it's the same thing except all we have to do is change the sign in here pretty simple let's have a look at that yep it's drawn the rear of the triangle and finally we want to finish off we want to close this so there is an inbuilt command i think it's called close close path there we go and that should complete the triangle for us great we need to test the angle so don't we so go back up to the ship's angle change instead of 90 change it to say 55 so it should be facing right on an angle cool how about 155 that should be facing the other direction looking good and we'll go back to our original looks like it's working well great i'm just thinking we should probably put the center of the triangle in just for our testing purposes so we're down here center dot we can do that just by setting up a context fill style which will be say red doesn't matter what color and we'll draw a rectangle so fill rectangle the origin will be the center of the ship so ship dot x minus one say let's make it say two pixels wide the ship dot y minus one and the size will be two to two pixels by two pixels let's just see if that's there okay yeah so that's exactly how we've programmed but the center will be exactly one radius from the peak and one radius from the bottom but that's not really the center of a triangle when we rotate this ship it might not look very nice so we could the actual centroid of a triangle is a bit below that it's two thirds from its peak i think so we can fix that up pretty simply uh so two thirds we just need that the nose of the ship would be one third ahead so we'll go four time four divide by three times that so four thirds times that and this will be four thirds times that i think yeah remembering this is all in the right this is the radius of the ship so that's why we're using four thirds here uh the rear um we just need to multiply the first component by two thirds to get this working i think two thirds yep so this first component of each of these just multiplied by two this it'll shift it upwards basically let's try it there we go and that's actually the centroid of uh so if you draw a line from this vertex to the center of that side that's how you work out anyway you don't need to know the math that's where the center of the triangle would be a much nicer experience good so how do we go about rotating this ship well we've got an angle we need to update the angle when they push a button say push the left arrow key so we'll need to set up some uh what do they call them event handlers set up event handlers so we can do that just by going document dot add is it add event listener add event listener it requires a type so the type is one of these here it's actually the one we're looking for is key down so when that means it'll detect when one of the keyboard keys are pressed and the listener well that'll be the function we call so we'll just call that key down the same thing really when we push the left key we want to rotate left when we unpush the key that means when we release the key i guess we also need to capture that event so we can just duplicate that and use the key up okay up so it detects when the key has come up and we'll make a function called key up right so let's do that function key down it will take an event as a parameter so we can just use our js dock again just to make sure it's very clear that it's an event um at type i think it's of keyboard yeah keyboard event it is there keyboard event keyboard event oops we need that in braces and then we just can look at that again they just call it ev so we can do the same thing ev right now we don't want any key to do something do we don't want them to push the six or the question mark and something happens unless you want to program it that way but we just want to detect arrow keys so to do that we can make a switch statement switch oops i didn't close this there we go switch event dot key code so that'll detect the key code the actual code of the key that's pressed the arrow keys are what we're interested in so they're actually they start at number 37 i believe so it's 37 for left 38 for up 39 for right that's all we need to know i think so we can go case 37 i don't want to add event listener we'll break that and repeat this for each of the key codes that we'll be using so we'll be using 38 we'll be using 39 and just probably the right note here so this is the left arrow and in brackets what do we want it to do we want it to rotate ship left okay similarly we want 39 37 38 29 is it the right numbers i think so rotate ship right we'll soon work out whether it's right or not this will be the right arrow 38 that's the app the up arrow and what will that do that will what's the term for shooting at thrust thrust the ship forward okay let's we'll do that later so first of all how are we going to handle this so we push the left arrow something happens how about we set the rotation of the ship so in order to do that we'll have to give another property we can just call it rot for rotation it's currently equal to zero we don't want any rotation we should probably set up a rotation speed here for return speed whatever you want to call it constant turn speed and we'll set it in say degrees per second so i'll set it to say 360. and this is turn speed in degrees per second okay so when the left hour is pushed we want to update the ship's rotation it will equal the turn speed now that's in degrees so we have to divide to get radians we have to divide by 180 times by math pi and this will be we want to get the per frame speed don't we so what to divide by the frame rate otherwise it'll be rotating way too fast similarly just copy and paste that put that in the right there we go this will just be the negative of that won't it so we can set the rotation when the right arrow is pushed we'll set the rotation to the negative of that um now that won't do anything yet because we need to do something with this rotation so down where we've marked rotate ship all we have to do is ship dot angle um plus equals should this be okay it should be ship angle plus equals the row the ship's rotation ship dot rotation i think that should do it let's give it a go something's gone wrong ships the road plus equals the ship's rotation probably we can open up a a console here to see the error what does it say uh reference key up is not defined ah okay so we it wants to see all these um functions written first so function key up it doesn't do anything yet although actually let's try we may as well put this in now just copy and paste the same thing um so 37 left arrow we want to stop rotating so when the key is released we want to stop rotating left and this will be stop thrust we'll stop thrusting and this will be row stop stop rotating right okay now all we have to do here is instead of setting a speed we just set it to zero so there will be no rotation right now let's try that again just put that down reload there we go now if i push the left arrow yeah it okay something's not it's rotating the correct direction so when i push left it's rotating i might push right it's rotating that's fine but it's not stopping so something's going wrong here i see we in our key up we haven't uh put the event silly isn't it there we go so the key up will detect an event now let's try that so left release the key right release the key yep our rotation is working well but nothing else is happening we can't thrust at this point so how about we work on that can you see the uh the center of the triangle is more accurate if you put it at the front of the ship how we had it would look a bit funny so we've used the centroid so thrusting how are we going to handle that well we'll have to give you some more parameters some more properties to our ship so how about we say we'll just put a flag in here called thrusting so that's just a true false a boolean and we'll say it's not thrusting to begin with and then we'll also have the thrust magnitude so it can be simply it can have its own component the x component which will be zero to begin with and the y component which will also be 0. so we can set the thrust magnitude this allows us to when we thrust in one direction and we release the key the ship will continue in that direction even if we rotate it will continue in that direction okay so up arrow thrust the ship thrust the ship forward so first all we want to do in this actually when they push the up arrow all it will do is set that thrusting to true that's all it will do similarly when they release the arrow it will set the thrusting to false great but we're going to thrust this ship well fix it we'll put the thrust here before drawing it because we'll probably want to put a little graphical display as well that'll be behind the ship not trust the ship we want to thrust the ship okay so to do that we just need to set up a if um ship thrusting so if the ship is thrusting we want to do something don't we we want to increase the thrust so to do that we can just go ship dot thrust now the x component we want to add to it as long as we're thrusting we're going to add the thrust so we'll probably need a base thrust up here so how about the let's call it ship thrust um we'll set it to something say five we'll make this an acceleration so this is uh acceleration of the ship in pixels per second per second a little bit of physics for you so the ship thrust equals five so that means in the first second it'll go five pixels in the second second it'll go 10 pixels the third second 15 pixels and so on so it'll get faster and faster as long as you're holding that key so the ship thrust will equal the ship sorry the ship thrust x component will equal the ship thrust right multiplied by the cosine because it's going to be the x component the cosine of the ship's angle similarly the y will just be the sine component let's see if that works oh hang on we haven't moved the ship yet so it's updating the thrust component but we have to use that thrust in order to move the ship so what we need to do is the ship dot x will plus equals the ship's thrust x and the y component will plus equal the ship's thrust wire component so this will means it'll keep moving as long as we're thrusting that way or as even if when we release the key it should keep moving let's try it i'm pushing the up key i know what i've done wrong first of all we got the wrong direction right so in this shift thrust that'll be minus equals minus equals the x no the y component sorry because it's going the y component should be minus equals and we haven't accounted for the frame rate so just divide all this by the frame rate frames per second frames per second okay let's try that pushing up yep so i've pushed up now i can't pull back i don't want you have to turn the ship in order to thrust it backwards so turn the ship that way to stop going that way after thrust that way thrust that way probably will want some sort of frictional component i know depending where you are in space there's not much friction but let's for this game i think we should have some friction otherwise you'll forever zoom that way and never slow down so um to do that what do we need to do let's add a friction constant constant friction friction now usually friction coefficients in physics or whatever a value between zero and one so we'll set it up to say be point seven and we'll define that as friction coefficient of space where zero equals no friction one equals lots of friction you can have technically you can have a frictional a friction coefficient above one but we'll just stick to this uh so 0.7 now how do we apply that so somewhere in our thrust so thrusters ship somewhere in here we need to apply the friction node so when it's thrusting we want it to go forward otherwise that means that if they're not pushing the thrust key they're not pushing upwards when it's when it's not thrusting the friction will take hold so to do that we can just ship dot thrust x now we just want to reduce this by a factor of itself so we can just do friction times remember it's a value between zero and one so it'll get smaller times the ship's thrust so by itself the x component of the thrust and we need to divide that by the frame rate right um do the same thing for the y component except change that to a y i think that should do it so it should apply this frictional component every frame and slowly slow down the ship let's try it so i'll push forward a little bit let go and it's slowing down go that way let go yeah that seems about right so i can turn around i'm holding the arrow key while i'm turning here then i'll release it when i'm going on an angle say and it's slowing down great the friction is working well now in the actual game i think you can fly off the screen so if i fly off the top of the stream i'll pop back on to the bottom so how are we going to do that so we can handle the edge of the screen just after it's handle edge of screen so we need to detect when that happens first so if the ship's x component if the ship x is less than zero minus the ship's radius either way we want to set the ship's x to where we want to set it to the right of screen don't we so it'll be the canvas width plus the ship's radius right else if the ship's x is greater than basically greater than this here so it's greater than the width of the screen plus the radius of the ship we want to set it to this part 0 minus the radius right that's for the x component for the y component just need to change all of this to y y y y and use height instead height instead let's give it a go so thrusting thrusting upwards turning a little bit yeah pop back into the screen there will it go this way yes going back the reverse direction zooming that way yep well i'm going a bit fast slow down a bit seems to be working well great okay that's our i was just thinking when we're thrusting the ship maybe we want to add a bit of a graphic like a bit of a thruster like a bit of flame or something so to do that uh where we're thrusting the ship we'll just need to draw something here so draw the thruster right so the thruster will be a triangle um so we'll just copy and paste this one just get that indenting indentation there we go what stroke style are we going to have well i'm thinking yellow and we'll probably have a fill style as well i've got a comma there that's not right let's change that it's amazing it's working okay though we'll have a fill style as well so that'll be the interior the flame as such uh fill style will equal red you can customize these colors how you like the line width probably a bit thicker so we'll make it one tenth so the ship size divided by ten be in path um the nose of the ship it's not we we don't want to we want to thrust behind the ship so to do that we need to change this to a negative change this to a positive now that'll be the center of the ship actually copy and paste this second pass we'll start at the rear left first so we'll start at the rear left paste that in there so move to so this will be the rear left we want a line to the rear center which is behind the ship so this will be behind the ship behind the ship okay so that's all correct except that we want to do it behind so to do it behind we just need to multiply we'll times that by two we'll make it four thirds we don't need this here because it's the center so we need to get rid of that so lots of confusing maths i know so it'll just be the cos and the sign and four thirds of it to be behind the ship so maybe times two we'll make it eight thirds there you go that'll be twice as the length of the ship behind so near center behind the ship rear center behind the ship now the rear left that's correct except that we want we'll see what that looks like first now we need to also draw the fill here so the context fill let's try it now when i thrust whoa it's huge isn't it maybe it's a bit too huge let's bring the triangle in a little bit so to do that we can okay first of all it's too far behind it so we'll change it to six thirds say now to get it a bit thinner we could just put a multiply in here say 0.5 multiplier in each of these the left component the rear left and the rear right so hopefully that'll bring in the let's try yeah that's looking pretty good you can make your own sound effects we probably will add sound effects later that looks pretty cool you can adjust the size of it however you wish maybe you could just go with four thirds here what will that look like a bit too small isn't it depends what you like i'll put it back to six thirds sounds good great that's the thruster is there anything else we need to do here i think we're pretty much now reload that i think we're done for this tutorial you can turn off the center dot just need to where's the center dot here we go just stop drawing this and we have our asteroids ship that can go around and around thrusting along we're going to create the asteroids themselves that float around the ship in space so currently this is what our game does we have a little ship that flies around the screen wouldn't it be nice to have some asteroids floating around it so here's our code you can go ahead and download this from the link below so the first step would be to set up our asteroids uh variable so just underneath where we set up our ship we can create oh how about we set up asteroids so that'll just be a variable we'll call it roids just to keep it short roids equals a blank array and how about we create a function called create asteroid belt because during the game we'll probably have to call this a couple of times as we reset the screen and so on create asteroid belt that'll do so go down and create set that up somewhere here we go function create asteroid belt now what does it do probably the first step is to clear our uh clear hour of roy's array roids will equal that so i'm just clearing it because it may be populated during game secondly uh we want to loop over the number of asteroids that we'll be creating don't we so we could use a loop for that for so for i equals zero i is less than less than what how about we create a constant so up the top just create a constant we'll prefix all these by roids yeah roids num and we'll say there's three of them so this is the starting number of asteroids i say starting because as the difficulty increases we'll probably be increasing this as the level goes up roid's numb so i is less than roid's num i plus plus so that'll loop over all the asteroids now we want to add roids push that'll add something to our array how about we create a function called new asteroid again we'll probably need this for later on new asteroid um yeah we'll try that so we'll go make that down here function new asteroid we can create a variable called roid it's going to be an object and we'll return that object return roid now what do we need to know for each asteroid well we need to know an x y coordinate i think we should pass the x and y components because later on in the game we'll need to know the exact location so x will equal x y will equal y we'll need to know an x velocity which is going to be some random random velocity uh how about we set up a constant soon called roid's speed and we'll have to divide that by the frame rate we also want a random direction not only do we want a random magnitude we want a random direction so to achieve that we can go math random if math random is less than 0.5 then multiply by 1 so it'll go in a positive direction else multiply by 1 it'll go in a negative direction we can just copy and paste that for the y component as well we'll also want to know the radius of each asteroid it will change as we shoot them later on and that'll just be based on some roids size divided by two and we'll also want to know in a random angle so this has to be in this has to be in radians so math random times math pi times 2 which is the same as 360 degrees so this will be in radians so let's go ahead and create these size and speed roid size and speed up here so roid's size will be let's say 100 so this will be the start maximum starting size now we'll say the starting size of asteroids in pixels okay android speed i'm just taking some guesses here about what sort of speed we want put in pixels per second so this will be the max starting speed not paid speed of asteroids in pixels per second okay so the starting size of asteroids in pixels is 100 and the star the max starting speed of asteroids in pixels per second which is 50 pixels per second that looks good because we're passing x and y we'll have to go and modify our call up here so there'll be some x and y value that we'll put through there now what's that going to be we can just create two variables here var x and y how about we just create two random positions on the on the screen so that'll just be math random times by canvas width canvas.width we'll probably want to round that down math floor and do a similar thing for the y direction except that we'll be using height i can think of one problem here we're potentially going to have asteroids landing on the ship we'll handle that soon right now let's go down to the update function so where we draw our ship let's after that we'll draw the asteroids so we'll have to loop through each of the asteroids in order to achieve this so va i equals zero i is less than the roids length is just a property i think and i plus plus first of all let's set up the color of the asteroids stroke style equal i looked this color up before slate gray just to get them a bit of a different color from the ship and we also need to set the line width line width will equal we can base it off ship size i think ship size divided by 20. now let's plot out what we're going to do here how are we going to draw these things well i think we need to draw a path through a path what shape are they going to be probably a polygon would be suited so draw the polygon we'll work out these details soon and we also want to move the asteroid move the asteroid and handle uh handle edge of screen so we don't want them floating off into space do we edge of screen good now let's go back up to our where we create our asteroids so we want to create a random number of sides so we can achieve that by we'll make a property called uh vert short for vertex or vertices so it'll be math random times we'll make a constant called say math roidsvert now in order to achieve what we want we want a random number of sides but we don't want sides equal to zero or something do we so let's first of all add one to this to increase our maximum to what we expect so that will be just have roid's verticals 10 so that'll give us a number between 0 and 10. as i said 0's zero sided polygon is no good so we have to add something to this how about we add half the roid's vert so that'll be five for example we'll need to find the floor of the list to make it an integer floor we don't want 3.5 sides for example so that'll if roid's vertical's 10 that'll give us a random number between 0 and 10 plus half of 10 which is 5. so a random number between 5 and 15 centered around this number sounds good don't need the semicolon again so let's go recruit go ahead and create that roids vert will equal 10 and this will be the average number of vertices vertices on each asteroid okay so head down to our update function so each asteroid will have a random number of vertices all the way down here right there we go draw a path right so to draw the path we need to context begin path and then we want to move to the first point so move to move to the first x y location i'm thinking to save us a little bit of time we should probably get the properties grab all the properties and put them into a variables here so get the asteroid properties just to save us a little bit of typing i think so we'll set up some variables here x y the radius the angle and the number of vertices so x will equal roids i dot x and then we can go ahead and do the same for all our other things so y will be the roid's eye right roids y i should say the radius will be dot r the angle will be dot a and the number of vertices will be dot vert okay so our initial point will be the x location the center of the asteroid plus the radius multiplied by the cosine the cosine of the angle similarly the y component will be the sine radius times the sine of the angle now to draw the polygon we'll have to loop over the number of vertices so we can set up a new variable to say j will equal zero j is less than the number of vertices j plus plus and we want to draw a line to each corner of the polygon so context line two line two so in a similar way to what we've done above so x plus the radius times the cosine of the angle but we'll have to modify it based on which vertices which vertex we're currently at so we could do that by modifying this by j times 360 degrees math pi times 2 but we'll have to divide that by the number of vertices right so that'll for example if there was 10 vertices then this will modify the angle by 36 degrees each time which is what we want do the same thing for y except that we need to change it to sine after that we'll have to close the path and draw it by just going context dot stroke stroke right uh just quick review of our code just make sure there's no glaring mistakes um so we're going to create the asteroid belt and that should be a zero not an o divide by that math for random times can that should probably be canv not canvas right and they'll push some new asteroids set up some properties i think that's pretty good and then we'll draw them down in the uh update function down here let's try it there we go so we've got some randomly positioned randomly positioned polygons from size five so five sides to 15 sides i guess let's even get a fivesided one there's a seven just to make there we go there's a pentagon awesome but as i said mentioned earlier probably is that we don't want the asteroids to appear on the player like that so let's go ahead and fix that up now we can do that up in our create asteroids method create asteroid belt here we'll have to do something here we can handle this using a do while loop so do all of that while some condition now what is the condition we want a buffer don't we between the asteroid and the ship so how about we create a function called distance or dist between points distance between points and we're going to pass each of the coordinates so the ships location ship x ship y and the potential asteroid location x y now as long as that is less than some buffer so we'll just say the roids base it on the void size say times two plus the radius of the ship as long as it's less than that if it's less than that we'll keep creating new random points until it's not less than that so let's go ahead and create this function distance between points now what are we passing we're passing the points so x1 y1 x2 y2 alright so we're going to return now if you know your cartesian coordinate system it's the square root of the square so math power the square of x2 minus x1 x2 minus x1 squared plus similar thing with the y component y power y2 minus y1 squared that should be okay let's try it it's hard to tell because there's only three there's only three roids how about we bump this up to say 300. ah there we go see that buffer zone so they've been randomly placed but they're not being randomly placed within our buffer zone you could adjust that to suit your taste how pretty put that back to three great that's that handled okay so what about the shape of these asteroids so just have a look at them they're perfect polygons aren't they not exactly very asteroid looking so let's add some jaggedness to this so how about we go up and create a constant called roid's jag and let's define that to be a number between 0 and 0.1 so let's pick a number 0.4 this is the jaggedness of the asteroids and let's define that as zero equals none one equals lots okay now where we create our asteroids so in new asteroid let's create some variable some property which modifies the vertex location so each vertices will be one radius away from the center how about we create say an offset so offs that'll do offsets is just going to be an array and let's set up the array here so create the create the vertex offsets array okay so it'll be based on the size of the the number of vertices so var i will equal zero i is less than the roid dot vert i plus plus so we'll loop through for each vertex and create a random sort of multiplier to the radius okay so the maximum we'd want is the is so the minimum we want is zero and the maximum maybe say two two times the radius so that would be in the worst the most extreme situation so let's go roid dot offsets push we're going to push um a random number random number based off the jag so the roid's jaggedness and how we're going to handle it if it's so if it's zero we want nothing we just want it to be all of this to equal one if it's one it could potentially equal zero to two so how do we times this by two and add one minus the droid's jaggedness now does that work let's have a think about this so if it was zero zero times two is zero so it'll be zero plus one minus zero one okay that works fine so there'd be no jaggedness if it was maximum so if this equaled one we'd have 1 times 2 is 2 so 0 to 2 plus 1 minus 1 is 0. so b a random multiplier between 0 and 2. that sounds good how about in the middle 0.5 0.5 times 2 is 1 so 0 to 1 plus 1 minus 0.5 that would be a random number between 0.5 and 1.5 sounds good so we're populating this offset here great now how do we handle that let's go down to the asteroids here all we have to do is multiply this radius here by that offset so how about we create up here that should be vert doesn't really matter it's obviously declaring it anyway offs offs will equal roids i offs okay now the first point is going to be so this will be the radius times the off it'll be the first position won't it the office zero so whatever that random multiplier is it's going to multiply the radius by it and we're going to do a similar thing to here now how about here well it's not going to be zero it's going to be j isn't it it's going to be j in here but we've already done j equals zero up here so we don't how about we start one here so we'll start j at one yep that should work now let's have a look at see what that looks like hmm looking promising actually it's looking pretty good looking very good okay i think we solved it so let's go test different very different values of jaggedness say point let's do the extreme so one what will that look like yes you can see here they're very jagged okay now if it's zero there should be no jaggedness it should be a perfect polygon yep and then as you add more jaggedness so point one should be a little bit jagged yeah just a little bit depends what shapes you want in your uh i'm gonna go stick with point four that looks pretty good to me awesome now all we have to do now is move these things get them moving go down to where we had uh where are we draw the polygon close move the asteroid so that will just be roids i dot x plus equals roids i dot x v that's the velocity in the x direction similar for the y direction let's just oops this is probably one of the easier parts let's just check to make sure they're moving yeah so they're going at random speeds we could probably bump up the number of um bump up the number of roids to begin with just to see if say 10. yeah they're definitely going at different speeds different directions cool and the color is quite nice isn't it awesome let's put that back to three we also want to handle what happens when they go off the edge of the screen so currently if you look at these asteroids they go off the screen and then they disappear forever let's uh bring them back onto the other side of the screen handle the edge of the screen so if if roid's i dot x if that's less than zero minus roid's i dot radius if it's less than zero then it's gone off the left of the screen so we want to set roids i x to equal the canvas width plus the roid's i radius yeah um else it's not really an else it's probably more of an else if else if this situation roids roid's x is greater than the canvas of its plus plus its radius then we want to set to this roid's x will equal that that's for the x direction do a similar thing for the y direction so y y y y except it'll be based on height won't it height let's give that a go okay going off screen this right one here will it pop back on yep there it is over there there's one going off the bottom of the screen is it coming back on yep there it is so they're coming back on we can bump up the number of asteroids just to get a good feeling for it roids number ten there we go so one went off the top up there one's getting off the side here good i think that's looking good so that's the end of today's tutorial next time we'll focus on collision detection and making this making the ship blow up when it hits a when it hits an asteroid so in this tutorial we're going to allow the ship to crash into the asteroids by using collision detection so you can go ahead and download this code i'll have it in the link below so let's go ahead and create a flag called show bounding now this is just this show center dot i created off camera it's just a way for us to not delete code or not comment our code so we can always allow our development settings to stay there so for example show center dot if shows in a dot draw the center dot but we don't want that normally during game play so it's a nice convenient way to turn that off and we can do the same thing with our bounding boxes or our bounding circles to set that to true to begin with show or hide collision bounding so how are we going to represent our collision detection what shapes are we going to use for our bounding boxes well take a look at the game i'm thinking the simplest way is probably to just use a circle for everything so our ship would be represented with a circle and each asteroid would be represented with a circle it's not exact but it's a close approximation and i think it will do for such a high speed simple game so let's go ahead and use circles so let's draw our circle down in the update function where we draw our shear so draw the triangular ship just after we do that we will say if show bounding so if our bounding flag is on we want to set the color so the stroke style will equal say lime pick a color that u stands out uh we want to begin a path because that's how we do a circle and context dot arc now we need a center point which is going to be the center of the ship so ship dot x ship dot y and then we're going to use the ship's radius the start angle is zero the end angle is 360 degrees which is just math pi times 2 in radians and false for that final flag finally we just need to draw the stroke itself let's test that out yeah so we've got a bounding circle around our ship similarly we want to do the same thing for each asteroid so go down to where we draw the asteroids just after we draw it before we move it paste that in there but instead of ship dot x we just want x because we've already declared x to be the ship sec sorry the asteroids x y and r let's test that out yep so each asteroid's got a circle around it the only problem is that the color of the circle has gone through to the asteroid we can fix that up by just changing where we set the color of the asteroid so currently we're setting it before the for loop just paste that into the start at the start of the for loop so it'll do it every iteration give that a go great so what's our goal our goal is when the circle of the ship touches the circle of any of the asteroids the ship will blow up so first things first i think we'll need to take out the moving of the asteroid so how about we just stick to our drawing so in our update function we're drawing the ship and we're drawing the asteroids let's take out the movement and put it elsewhere so here we're rotating the ship and moving the ship so we'll place the asteroid stuff after that so move the asteroids we'll have to do another for loop here four bar i equals zero i is less than roid's dot length i plus plus and just encapsulate that and test it to make sure that we haven't broken anything yep it's still working so the asteroids are still moving next we want to check for collisions for asteroid collisions so just copy this first line of the for loop now before we start moving everything so before we start rotating the ship let's check for asteroid collisions right so we're going to cycle through every asteroid and check whether the distance between so this is a function we made before distance between points uh so the ship's x value the ship's y value and the asteroid so roids i dot x and the roids i dot y so if the distance between the individual asteroid and the ship is greater sorry is less than the ship's radius plus the roid's radius so the asteroid's radius that means the circles have overlapped what will we do there how about we just call a function called explode ship which we haven't made at the moment so if we if we run this now it should try to call this function and break it should stop working so let's try it right so we've got the ship let's try to crash into an asteroid yeah it's broken so as soon as those two circles met the it's tried to call that function and broken good that means it's working okay let's create that function explode ship first of all just copy this text sorry this code here to create a circle so up in this function so function explode ship let's just create a circle let's create a filled circle so it's an obvious sort of graphical indication that the collision detection is working so create a fill style the same color lime the x and y coordinate will be the x and y of the ship as well as the radius of the ship and we'll also call the fill method so we'll call it be calling a fill and a stroke let's test that so when we collide into a asteroid come on asteroids where are you there's one down there we should change to a field circle awesome and when we leave we're no longer filled good that means our detection our collision detection is working very well great okay what do we ultimately want to do here i'm thinking we should set so i'll just cut this i'm thinking we should set some property of the ship let's call it say explode time explode time and that will equal we'll say it's equivalent to the number of frames left in the explosion so that'll equal some constant say ship explode say duration multiplied by so that'll be in seconds multiplied by the frame rate to get the number of frames uh because we want an integer we should probably find the so let's say seal we'll find the we'll round up in effect okay so let's create this ship explode duration constant ship explode duration and it'll be in seconds so just choose a number 0.3 so this will be the duration of the ship's explosion right where we set up the ship initially we'll have to give that an explode what do we call it explode time and initially it'll be zero won't it that means there'll be zero frames left of exploding and that's how we're going to detect whether the ship is exploding or not when explode time equals zero it's exploding so go down to the update function how about the first thing we do just create a variable so it's going to be a boolean called exploding and that'll equal ship dot explode time equals zero no greater than zero so if the ship's explode time is greater than zero that means the ship is exploding okay so where will we draw this explosion i'm thinking instead of drawing the ship we'll draw the explosion in its place so if not exploding so if not exploding we'll draw the ship else we'll draw the explosion what will the explosion look like well i'm thinking just some circles to keep it simple so here we'll copy and paste this code here but we'll use filled circles so fill style will equal red the ship's radius how about we try times by 1.5 say and we need to call the fill method and how about we work inwards so we'll start with the outer circle which is red and then we'll make say three more red orange yellow and say white for the middle we'll change these radius percentages how about we'll decrement it by 0.3 each time so 0.9 here and 0.6 for the inner circle let's take a look at that crash into a asteroid um it's looking okay maybe a bit bigger in the middle and maybe we need another ring on the outside i think and we'll get rid of that uh bounding so i'll turn that to false show bounding explosion where are you here we are so what did i say maybe make it a little bit less in the middle so reduce that by 0.1 so that'll be 1.1 that'll be 1.4 and we'll also do one more ring on the outside a bit of a darker red i assume dark red is a html color and change that to 1.7 let's see what that looks like so there's no bounding circles now let's crash yeah that's pretty good i reckon we'll stick with that one if you go back to our game just restart that you'll notice that when we crash into an asteroid we can continue moving and our thruster is still working that's not what we want we kind of want to stop in place and just explode okay so let's fix that now so let's go up to our thruster so just up here draw the thruster we don't want to do that when we're exploding so if exploding that should be if not exploding if we're not exploding then we're happy to draw the thruster okay let's try that out quickly yep so there's no thruster coming out the side or the rear of the explosion that's good also we don't want to be moving the ship so go down to where we move our ship here we go rotate the ship move the ship we also don't want to be checking for asteroid collisions so we can include that in here so if not exploding we don't want to rotate we don't want to move and we don't want to check for collisions let's test that so i'm pushing forward bang i'm still pushing forward trying to turn nothing's happening great so what happens when the ship is exploding well we can handle that here in and else so else the ship is exploding we want to take the duration of the explosion into consideration so we can do that by ship dot explode time minus minus so we'll reduce the amount of time left on the explosion now what happens when that reaches zero so if ship dot explode time equals zero that means we should end the explosion so how about we create a new ship so ship will equal new ship now new ship is just a method i'm just creating well we'll go create that now so new ship now all it will do is basically this so where we set up the initial space ship we'll just cut that we can change that to new ship go go down to where we just after new asteroid will create new ship function new ship and what does it do it just returns that thing that we had copied okay let's test that okay so we'll fly our ship into an asteroid bang and we're resetting now there is one issue with this what if the asteroid is coming towards our initial restart position like this bang bang bang bang bang that's no good is it how the original game handles this is by allowing the player to blink for a few seconds before they start the game and this prevents any explosions from occurring so like an invulnerability or an invincibility or something similar so let's implement something like that we'll need to go up the top and set some parameters here so how about we have an invisibility duration or invulnerability duration we'll set that to say three seconds duration of the ship's invisibility in seconds and we'll also want to know how long is each individual blink during that invisibility so we'll call that say ship blink duration and it can equal say 0.1 second so 0.1 second it will stay off 0.1 second will turn back on duration of the ships blink during invisibility in seconds okay go down to where we create our share well i need to set up a couple of properties here so we'll have one called say blink time that'll be the we'll round up so math seal it'll be equal to the ship blink duration times the frame rate so the frame rate's 30 right blink duration is 0.1 so there'll be three frames every third frame it'll blink on and off and we'll also want to have the blink number keep track of the blink number so that will be equal to the ship uh invisibility direction so that's three seconds divided by the ship's blink duration so that'll be a total of 3 divided by 0.1 so 30 blinks so there'll be 15 off and 15 on that sounds good so just down below in our update function let's create another variable called blink on say blink on and that will be equal to well let's say that when the blink number is even then we'll be blinking on when it's odd we'll be blinking off so we can handle that by using so ship dot blink num mod two when that equals zero so when the remainder of dividing that by two equals zero that means it's an even number else it's an odd number right so where we draw our ship so if not exploding inside there so if blink is on if blink on we want to draw the ship how about underneath that we handle the situation we'll just say handle blink handle blinking so we need to so if the ship blink number is greater than zero that means we have to do something here how about we reduce the blink time so that's what's keeping track of the blink duration so blink ship dot blink time minus minus and we also want to reduce the blink num blink num reduce the blink num ah so that's if ship dot blink time equals zero if that equals zero then we want to well we have to reset that don't we so reship dot blink time will equal math dot seal rounding up uh the ship's blink duration times the frame rate and we'll also decrement the blink num so ship dot blink num minus minus hopefully that should work okay it's a blink and it lasted a number of seconds let's see if that works after we smash one two three yep good it seems to be working the only thing we haven't done is that we haven't incorporated invulnerability yet have we we haven't changed the collision we haven't included blinking the collision control so let's deal with that now so let's go down to where we handle collision control move the asteroids here we go so check for asteroid collisions so we only want to do that if the ship's blink num equals zero so that means we're not currently blinking if the ship's blink num equals zero we'll handle collisions so if it doesn't equal zero it'll ignore collisions it'll make us invulnerable let's test that we'll probably need to uh bump up the number of asteroids a bit so as roid num let's make 30. okay so we're in invulnerable bang yep bang so invulnerable while we're blinking oops let's see if i can not hit one good so i'm not just blinking all the time bang now i'm invulnerable one thing i noticed is that our thruster is still not blinking we should probably make that blink let's go back and fix that so just reduce that back down to three head down to where we draw our thruster so draw the thruster if not exploding and blink on then we'll draw the thruster let's test it yep so our thruster is blinking as well let's crash into an asteroid bang are we still invulnerable yes just smashing it on yep everything looks to be good so that's the end of today's tutorial so we've looked at collision control and blowing up the ship next we'll focus on shooting so using the laser of the ship by pressing the space bar and blowing up asteroids currently our code allows us to fly ship around and smash into asteroids but apart from that we can't do anything else so in this tutorial we're going to create a laser effect so we'll be able to press the space bar and shoot these pesky asteroids so you can go ahead and download this code if you don't already have it first of all let's create some constants how about we create one called laser max so that'll be the maximum number of lasers on screen at once we'll set that to say 10 to begin with so that'll be maximum number of lasers on screen at once and we'll also have say the laser speed because we'll need to know how fast these little things travel we'll put that in say pixels per second uh speed of lasers in pixels per second so how will we detect when the space bar is pressed well we can go down to where we detect our other key presses so in the key down method just copy and paste one of those cases there the key code for spacebar is 32 so let's label that space bar and what will it do it will shoot the laser so let's just create a function name here shoot laser there we go we'll implement that after now in the key up method so when the spacebar is released what should we do well i'm thinking when we press the spacebar we should lock the shooting so you can only shoot once per press so here we should allow shooting again so when when we release the spacebar let's allow shooting so we could probably handle that with a property on the ship called say can shoot and we'll set it to true here can shoot equals true let's go down and add that to the ship now so in the new ship method can shoot it should start off as true shouldn't it we want to allow shooting to begin with we'll also need to keep track of our lasers so they can be kept kept track of here in the ship and it's just an empty array to begin with so just below let's create our shoot laser function so function shoot laser in that we want to create the laser object and we also want to prevent further shooting that's fairly simple to manage just go ship dot can shoot equals false now before we add a new laser object we want to check a couple of things so if one the ship can shoot so if the ship can shoot and the ship dot lasers array the length of that is less than our laser max right if both of those conditions are true we can add we can safely add a new laser so to add a new laser we just go ship dot lasers push we'll want to put this in curly braces because it's an object that we'll be creating here we'll need to know the x coordinate and the y coordinate where we'll be shooting from i think we'll be shooting from the nose of the ship so from the nose of the ship and we have used that code before just need to go down to where we draw our ship uh where is it here it is nose of the ship so just copy both of those there the x and y coordinates paste them in there that'll be the y just need a comma there we'll also need to know the x velocity which will be based on the laser speed times by the cosine of the ship's angle lots of trigonometry in this divided by the frame rate to get pixels per frame and similarly for the y velocity except that it'll be the sine of the ship's angle so let's go down and draw our lasers we can do that after we've drawn our ship so just after the collision circles there in the center dot so draw the lasers so we'll have to use a for loop var i equals zero i is less than the ship dot lasers dot length i plus plus uh we'll have to set the context fill a fill style i'm thinking we'll draw small circles to represent the lasers now check some of these colors out before so i'm just going to use salmon for the laser color it's quite nice we'll need to begin the path to draw a small circle and we'll need to use the arc method arc and we need to know the x that'll be the ship dot lasers i dot x the ship dot lasers dot y the radius we'll base that off the size of the ship so we've got a ship size say divided by 15. the start angle is just zero the end angle is math pi times two which is effectively 360 degrees the final flag doesn't matter and we'll need to draw we'll need to call the context fill method to draw this let's just test that now they shouldn't move at this stage cool so they're appearing at the nose of the ship that's promising and we can only should only be able to do 10 of them yep great so let's go down and move the lasers so just after we move the ship move the lasers again we'll need to use a for loop so for i equals zero i is less than the ship lasers dot length i plus plus so what we'll need to do here is just go ship dot lasers i the x position plus equals ship dot lasers i xv which is the velocity in the x direction similarly for the y we just need to modify it by yv let's test that so shooting lasers oh not quite going in the direction we want i see the problem one of the i guess the y so back up where we shoot our lasers shoot shoot shoot lasers i see the yv needs to have a negative there because negative is upwards on the screen let's give that a go great now the only issue is that once we run out of those 10 shots there's no more they're forever flying off into space so let's fix that up now the first thing we can do is handle the edge of screen so just go down to where we move our laser draw the lasers move the lasers handle edge of screen so we've done this affair a few times with other objects so all we need to do is say if let's copy this make it easier for me if the ship sorry the laser's x position is less than zero then we just want to set it to equal the canvas width else if the laser's x position is greater than the canvas width then we want to set it to zero copy all that we'll do the same sort of thing for the y position the y position the y y y and instead of the width we'll use the height okay let's give that a go shooting some lasers yep i can only shoot 10 and as you can see they forever fly around and around the screen so what we'll probably need to do is set some maximum distance they can travel and then they kind of fizzle out or just dissipate or whatever so let's do that now firstly let's go all the way up the top and create a constant called say laser distance or just laser dist and let's make it a fraction of screen width so choosing a fraction i'm going to say 0.6 and we'll call we'll define this as max distance laser can travel as fraction of screen width we'll also need to set up a property on the laser so go down to shoot laser and just here we'll add a property called dist distance traveled and we'll set it started at zero so let's head on down to where we move our laser uh move the laser just after where we update its position let's calculate calculate the distance traveled so ship dot lasers i dot distance plus equals and we'll have to use a pythagoras theorem here so a squared plus b squared equals c squared so the square root of the square so math power of uh this here the x velocity component that's what we're adding each time so the power of that sorry the square of that plus math power the square of the y velocity all square rooted should give us the distance and what do we need to do with that distance well before we move our ship so this will be move the it's not the ship is it move the laser we'll want to check distance traveled and we want to delete the laser if this happens don't we so if ship dot laser dot distance is greater than the laser distance now that's as a percentage of as a fraction so times the canvas width if it's greater than that then that means it's gone far enough and we want to delete it there's a couple of ways we can delete from an array i'll be using the splice command so ship lasers splice and splice takes the start number which is going to be i and the delete count which is just one we just want to delete one thing now the issue with splice is that it permanently changes the size of this array meaning our for loop will have some problems so we can get around this but instead of going forwards in the loop we'll go backwards so var i will equal the length of the array minus one and we'll go until i is greater than or equal to zero and instead of incrementing we'll decrement so i minus minus uh so that'll be removed so we won't want to continue in this we won't want to try to move the laser because it won't be there so we'll hit we'll hit will write the continue command now all that does it skips over the rest of this and goes to the next iteration of the for loop so that should be okay let's give it a go shooting lasers yep they are not going on forever how about we change it to something a bit smaller so the laser distance will change to something a bit smaller say 0.2 just so we can get a real good feel for it shoot some lasers awesome so we can un unlimitedly shoot these lasers because they're destroying themselves after they reach point two of screen width let's just change that back to point six now we need to detect when the lasers actually strike the asteroids so head down to our update function just under where we draw our lasers draw the lasers so we'd like to detect laser hits on asteroids right i'm thinking we'll probably need to use some variables here just to make it a bit cleaner so we'll have the asteroid x the asteroid y the asteroid r the laser x and the laser y so we'll need to do a for loop backwards again because we'll be removing asteroids so we'll have i will equal roids dot length minus one i is greater than or equal to zero i minus minus right so we can grab the properties of the grab the asteroid properties so ax will equal roids roids i dot x similarly for the other one so a y the asteroids y will be that and the asteroid's radius will be that okay now we can loop over loop over the lasers yeah so we'll have to work go backwards with this one as well because we'll be removing the laser after it strikes the asteroid let's use a different variable j so j will equal the ship dot lasers dot length 1 j is greater than or equal to zero j minus minus let's grab the laser properties so l x will equal ship dot lasers j dot x and the l y the laser y will be just the dot y one so we've got all the properties now now we need to detect when detect hits or to say detect hits so what happens how can we determine that well let's use a condition so if the distance between points that's one of the functions we made earlier on so the x1 y1 is the asteroid x the asteroid y x2 is the laser x and the laser y now if the distance between the asteroid and the laser is less than the asteroid's radius then we've got ourselves a hit we don't need to worry about the radius of the laser it's too insignificant it's only small so that's a hit now what do we want to do here well we want to remove the laser so that will be done with a splice command so we can go ship dot lasers j sorry lasers dot splice and in brackets we can go j comma one and we also want to remove the asteroid well there's more we want to do but this is just a temporary placeholder so we'll go roid roids dot splice i comma 1 so that should remove the laser remove the asteroid and we don't need to continue cycling through this for loop once the laser one once we've detected a laser striking the asteroid and it's destroyed we can break this break let's give that a go right so there's some asteroids let's shoot one good it's disappearing there's another one bang bang now in the original game when you shoot one of these big asteroids it actually breaks into two mediumsized asteroids and then when you shoot a mediumsized asteroid it breaks into two smaller asteroids and then finally when you shoot a smaller asteroid it's dead it's completely dead so we'll do the same sort of functionality i'm thinking we should have a method call here say destroy asteroid now the reason being we'll pass its index the reason being is that there's also another situation that we can destroy an asteroid that's if we ram our ship into an asteroid it also gets destroyed like kamikaze pilot or something now if we go up to our new where we create the asteroid so new asteroid because we're going to have various sizes i'm thinking that we'll need to pass the radius in here right so we have to find out where we're calling this so far and update it it's a new asteroid we'll pass that instead i'd like to keep these as integers because we'll be using them as to compare what's to figure out what size the uh asteroids are so we'll just do a math seal there because this roid size is we don't know what that could be somebody could set it to 77 right so there could be a fraction there good now let's create the destroy asteroid function now it will take the index won't it that's what we passed earlier destroy asteroid let's grab some of the properties first so the x value will equal the roids index that's the index being passed dot x and we'll grab the y component and we'll also grab the what else do we need to know the radius i think so of course we need to know the radius because we need to split the asteroid into if necessary remembering only the bigger ones need to be split necessary so if the radius equals so if the radius of the asteroid being hit is equal to the basically this that means it's the original size the biggest size if it equals that we need to split it into two so what how we can do that is just go rides push new asteroid new asteroid and it requires x y and r so the x will be equal to the same we'll just set it to the same point so x the y will be the same the radius will be half the size so we'll divide by four instead of dividing by two okay and we want to do that twice because they split into two now naturally because we're calling this new asteroid method they'll also have random velocities and so on so that'll be fine else if r equals now if it equals this here that means it's a medium one that's been that's been hit if it equals that we want to do a similar sort of thing so we'll just copy all that but we want to break it into even smaller pieces so divide by eight at the same location and finally destroy the asteroid so the original asteroid that's been split that's just where we can go uh roids split uh splice roids splice now the start number is the index and we just want to remove one destroy index we also want to call this don't we elsewhere let's call that where our ship smashes into something uh draw the lasers hits on the asteroids check for asteroid collisions when not exploding yep so when we explode the ship we also want to destroy the asteroid now which number asteroid it'll be equal to i here i let's give it a go hopefully it'll work so first of all there's a asteroid there's one un shoot it great it's splitting into two the medium one's splitting into smaller ones now how about the smaller ones yep they're getting destroyed awesome amazing we got that right first time around so it seems to be working really well except we just need to test whether ramming one of them will destroy it bang it did now will this split the two if i ram it awesome try it with a bigger one cool that's just one issue that i've found is that sometimes when you smash into it you destroy more than one asteroid especially when you're invincible like that see that the reason for it is that it's because it's it's cycling through all of the asteroids so that's not right all we need to do to fix that though is break there so once our ship has exploded it no longer continues destroying asteroids try that one more time so when you're invincible in inside something yeah that's better that should only break that should break into two yep awesome great there's just one last thing i'd like to do in this tutorial and that's to create some graphical effect when the laser strikes an asteroid so go right at the top we'll set a duration for the laser explosion so probably similar to this here ship explode duration will have a laser explode duration and let's let's just say a bit smaller say 0.1 a second so duration of the lasers explosion in seconds right so we'll have to give our laser a property some called explode time so go down to where we shoot the laser we'll add a property called explode time and it'll start off at zero so that means it's not exploding there is no more explosion remaining now go down to where we draw the laser draw the lasers right so here we want to say if ship lasers i dot explode time if that equals zero that means we're not exploding and we'll just draw the normal laser beam laser ball else this is will draw the explosion draw the explosion so it's just going to be some concentric circles similar to what we did with our uh ship when it collides with an asteroid um how about well let's see what we can do here how about we based off the ship's radius times by say 0.75 we'll do this a few more times 0.5 and say 0.25 we'll just have two because it's going to be a smaller circle we'll just have three concentric circles and the colors well they'll be based off this one how about i look some of these up before orange red salmon and i think pink was a nice one then we'll have to go down and set the explosion time so where we're detecting the hits we don't want to remove the laser at this point so we can go ahead and delete that we want to destroy the asteroid and activate the laser explosion we can do that just by setting the property so ship lasers j isn't it yes j dot uh explode time that will equal the the ceiling so the rounding rounding up of the laser duration the explode duration times by the frame rate we also only want to run this if all of this if all of that equals zero that means we're not exploding and the distance meets that requirement then we'll destroy the asteroid and activate the laser explosion finally we need to decrement the explode time so go down to where we move the lasers we also don't want the laser to be moving when it's exploding so here we can handle the explosion so if ship dot lasers i if the explode time is greater than zero that means we're presently exploding doesn't it else we want to move the sh move the laser and calculate the distance we don't need to do these things when we're exploding so we'll decrement the explode time here so just minus minus exploded time minus minus and then we want to destroy the laser after the duration is up so if explode time equals zero then we will ship dot lasers dot splice i comma one so we'll just remove the i f laser and we'll just hit we'll just use the command continue here to prevent it from continuing sorry to prevent it from going over the remaining code it'll just jump back to the full the next iteration of the for loop hopefully that should work let's take a look cool so we've got ourselves a little blast radius it looks pretty nice it's working let's see if we can crash into an asteroid great bang bang bang looking pretty good so in this tutorial we're going to implement new levels a live system might give the player three lives and a game over screen right you can go ahead and download this code if you like from the link below first of all let's go down and create the skeleton of what we want to do today so just where we set up our ship and roids and so on how about we make it more generic set up the game parameters right so we'll declare our variables we'll need a level current game level we'll put our roids here as well as our ship and we'll create a method called say new game because we'll have to call that after our game over so all this stuff we'll put in another method so go down create the new game method new ship that'll do function new game and it will create our ship we don't need to set up the asteroids because there's they're created inside this create asteroids method we'll probably need a new level method because after each level we'll call that and inside the new level method we will call that create asteroid belt so it can just go straight after here function new level and all we want to do currently is create the asteroid belt just make sure we haven't broken anything yep that's looking fine so inside the new game method we want to set up our level our initial level so i can start at zero now what does level do well i'm thinking probably inside our new asteroid method we want to speed up we want to make it make the asteroids go incrementally faster so how about we create a variable called level multiplier and that will be equal to 1 initially plus say 0.1 times the level so as the level increases this will slowly go up this level multiplier and we just want to multiply our base roid speed by that level multiplier we will do that in both the x and y direction good and also where we create our asteroid belt up the top here we want to increase the number of asteroids so we can just go where it says i is less than roid num which is currently three we want to add the level each time so at level zero it won't affect it but at the next level it'll add one and so on currently it won't do anything it will not obvious so we can test it by changing that initial level back down in the new game set to say level 10. yeah you can see that there's more asteroids and they're faster so if we set that to level 20 there's lots and lots of asteroids going very fast good uh let's set that back to zero now we need to increment our level so when do we do that well it's when the final asteroid is destroyed isn't it so go up to our destroy asteroid method can you see that the final line is to remove it from the array so all we have to do is do a simple check there so new level when no when no more asteroids so we can just use if roids dot length equals zero then we want to increment our level level plus plus we also want to call a new level simple enough let's give it a go i'll just change the initial number of asteroids so i don't have to shoot so many uh roid numb we'll change it to one right so when we destroy this asteroid we'd expect it to go to a new level with two asteroids where's that asteroid so i'm not very good at this game there we go and there's two new asteroids awesome and we've destroyed both these asteroids there should be three on the next level and they'll be going slowly faster that'll be hard to notice but that's okay it's an incremental thing come on there we go and there's three asteroids awesome i'm thinking wouldn't it be nice if we had some text between levels showing the current level number just to give the player some indication and we probably want to make it fade out as the as time progresses so how about we create two variables down where we're setting up our game variables one called text and one called text alpha so alpha will be the transparency component of our text and we'll also need two constants how about we call the first one text fade time set that to something a couple of seconds 2.5 seconds say and that will be the text fade time in seconds and we'll also want one called say text size uh we'll put it in pixels choose a number say 40 pixels this will be the text font size in font size font height in pixels right now where are we going to set these up well probably at the start of the level so we'll go down to new level new game new level so text will equal what we want to show level plus the current level so it'll be level plus now remembering we're starting at level equals zero we don't want to display level zero so we'll add one to this so that'll be level plus one and the text alpha we want to start at full opacity so that'll equal 1.0 text alpha takes a number between zero transparent and one op opaque so to draw the text we want to go down to our update function how about we draw the text last so that it appears on top of everything so after we draw our lasers i believe draw the lasers just after that we'll say draw the game text now we only want to draw this when the text alpha is greater than zero so text it probably wouldn't matter if you didn't check for this but we will so if text alpha is greater or equal than 0 then we want to draw our text so how about we give it a color first so fill style sorry context dot fill style will be a color now we want whites but we also want to set the alpha component so to do that we can go rgba bracket now white's just two five five two five five two five five and after that we need that alpha component so we can just add to the string our text alpha and then we'll also have to close that the bracket the parenthesis okay we'll also want the font so the font will equal well here we can add a whole bunch of uh strings but you put the style how about we put just as an example put small caps uh we'll need the size of the font so we've already decided that so text size now that's in pixels so we'll have to put px after it and we need the the the type of font so deja we'll put deja vu sans mono i mean you can put ariel there or century new whatever your favorite font is right now we'll need to draw the text now so that'll be fill text the fill text command it requires a text string which is just text the x will say it's halfway across the screen so canvas canvas width divide by two and the y component we could put it in the middle of the screen but then that'll be over our space ship so that's probably not good how about we put it say three quarters of the way down the screen so canvas dot height times 0.75 and finally we need to decrement our alpha we want to slowly fade out so that'll textile for minus equals now it starts at 1.0 but we'll have to divide that by our duration so text fade time and we'll have to take into account the frame rate so divide by fps and we'll probably have to bracket all that so that it treats it as a single thing let's give that a go oops level one well it's appearing and it's disappearing just the location of it's not very good we just need to center it so we can do that by going context text is it text text align the align will be in the center and we can also align it vertically by saying text base to line equals middle i believe you can look all these up let's give that a go level one great so if we destroy this asteroid will we get to level two and will it show the text my shooting skills need improvement there we go level two good i think that's enough of a transition between levels next we'd like to deal with the game lives so we'll start with probably three lives so let's create a constant to represent that constant game lives will equal 3 that's the classic number but you could set it to 5 or 7 or whatever so starting number of lives and we'll also need a variable to keep track of current lives so l just call it lives inside our new game method we can initiate that so lives will equal game lives and we also want to draw some some graphical representation of these lives which is usually just the ship itself in the top left corner so go down to where we draw probably just after we draw the game text we'll draw the lives so we'll have to use a for loop here so var i equals zero i is less than current lives i plus plus and we'll need to we'll have to make a method here say draw ship because we already have drawn our ship we don't want to repeat the code here so we'll go ahead and make that method find out where we draw our ship first we draw it here we go so draw the triangular shape just this code here we'll cut that now we'll need to know separate x and y location because the ship moving around the screen isn't going to be the same x and y location as the lives and probably the angle is important too so we can go draw ship we haven't made this method so i'm just preparing it draw ship say ship dot x ship dot y and its angle so x y and the angle let's go ahead and create that method now so just after disk between points function draw ship now we need an x component a y component and an angle and inside there just paste what we had in on the clipboard i'll just have to update this to match the parameters there so the line width the style that's all good the x and y will just be the x and y we don't need ship prefixing it so just go ahead and delete all that x y x y and also our angle so it's just going to be a so we'll have to delete all the ships before the a's a little bit of a tedious process but well worth it it'll save us time in the end there we go and all we have to do now is update that new inside the lives we just need to update what x y and a are so that should be okay where we draw the actual ship now inside lives we need an x component well i'm thinking it's going to be it's going to start at the ship size so it'll it means we'll have some sort of margin but as we draw contin as we draw across the screen we'll have to multiply so we'll say i times we'll add i times the ship size and we want some space between each ship so probably just say times by 1.2 that's the x component now the y component will be i think just the ship size it doesn't have to be very much i don't think and the alpha well it's going to be 90 degrees now in radians 90 degrees is 0.5 times math pi hopefully that should work let's give it a go yeah that's looking pretty good so we can see our lives up there any issues that nothing happens if we crash if we crash oh i just want to crash nothing happens because we haven't implemented any code to decrement the lives how about we reduce our lives after the ship has exploded so just go down a little bit where we reset the ship after the explosion has finished and here we can decrement our lives so lives minus minus and we may as well handle the situation where lives equal zero so if lives equals zero so that means we'll be finished the game we can just call a function called game over game over man else we'll just do what was already there the ship equals new ship so let's go ahead and create an empty game over function so just after explode ship function game over and believe ourselves that to do here to do game over let's give that a go so if we crash into this asteroid we expect the ship to disappear yep after the explosion awesome to make that look really nice how about we change the color of the ship the life ship that is as we strike the asteroid just to give it a little bit of a graphical indication so to do that we can go down to where we draw our lives okay draw the lives how about we create a variable called say life color and we'll set that dependent on the situation so life color now when the ship is exploding that means we've struck an asteroid we want it to be a different color but only the last life the final life of this series so exploding and i will equal lives minus one that's that'll be the last one okay if all of that is true then let's set it to say red else we'll set it to our normal color white now how we're going to pass this we've already got this method drawship how about we give a fourth parameter called color so we'll just pass life color here now we're already calling this elsewhere we could go ahead and update you know the color for each single call or we can just set a default make it optional so go to our draw ship function declaration we can say the fourth parameter is a color and we can just go equals white and what that does if they don't provide a color it'll automatically assign it as white it'll be a default color and just down here we can go color so let's give that a go so hopefully we should get that first life turning red when we strike this asteroid great so it turns red and then disappears a few moments later awesome the last thing that we'd like to do in this tutorial is implement the game over function so how about we set a property on the ship something to indicate that it's no longer with us so how about ship dot dead equals true we'll also want to set some text to let the player know that the game is over so game over text equals game over to make that work we'll have to set the text alpha text alpha will equal 1.0 full opacity so we'll go down to the new ship method and put in that dead property so dead it'll start the game as false we don't want them to be dead to begin with let's give that a go so if we crash our ship three times hopefully it'll show a game over a game over message come on this is there we go okay i'm over the only thing is that we can still move our ship around so that's no good is it so to handle that we can go up to our event listeners so key down in the key down method we want to say if ship dead just return so that means it won't access any of the code below it won't allow the user to do anything with the keys and similarly in the key up method just paste that in there right also we don't really want to draw the ship do we it should be dead so it shouldn't be there anymore so down in our update function where we draw so the asteroids are okay thrust the ship we don't want to do that so if ship thrusting and not ship dead so the ship is alive we'll thrust and draw the thruster draw the triangular ship so if blink on and not ship dead we'll draw the ship now the lasers are okay the game text and all that's okay draw the lives probably we don't want to detect uh asteroid collisions anymore so if ship link number equals zero and not ship dead will detect asteroid hits right let's give that a go so crash your ship three times bang bang and final one game over and i can't control the ship there is no ship good finally we'd like to reset the game after some period of time how about where we we're checking for text alpha so that game over that game over message will appear how about when that finishes so we'll say else if uh ship is dead so that means only when the text disappears and the ship is dead so they'll be at the end of game definitely we will say new game new game let's give that a go so smash into the asteroid bang smash into the asteroid again bang and one last time let's see what happens game over the text disappears and we start again at level one i think that's pretty good and that'll do us for today's tutorial so today we implemented lives and resetting the game and level up and so on increasing the difficulty so wouldn't it be nice if we had a scoring system so first of all let's create some constants to represent how many points each of our asteroids are worth so roid points large now in the original game the large asteroids were worth 20 points so we'll do the same thing so this is the points scored for a large asteroid so go ahead and copy that a couple of times we also have medium asteroids worth 50 points medium and we also have small asteroids worth 100 points because they're the hardest to hit we'll also need a variable so go down to where we declare our variables called score that'll be our current score and in this new game method we'll want to reset that to zero so put that in there score equals zero now where will we increment our score well that occurs when we destroy an asteroid doesn't it so go up to our destroy asteroid method here we go and in where we deal with our large asteroids we can simply go score plus equals roid roid points large we'll do a similar thing inside the medium part of this statement there we go score plus equal roids points medium and to handle small we can just simply put an else in here else if it's not medium or not large we'll add the small points now let's go down and draw the score how about we put the score in the top right hand corner of the screen so just after we draw the lives we can draw the score and let's copy and paste some of this code up here to draw text okay so the text to line because we're on the top right hand corner we'll change that to right the baseline can be middle that's fine the fill style we just need plain white we don't need to change the transparency the font we don't really need small caps because it's only going to be numbers uh the text size pixels deja vus mono is fine fill text will be filling the score the position will be the canvas width but we do want a slight margin so let's base it off our lives margin so this is ship size so we'll have ship size divided by two because the ship is the center of the chip chip size divided by two and the y position will be the same exactly the same as our ship so ship size let's test that great we have a zero in the top right hand corner that's promising let's shoot one of these big ones we get 20 points that's good now a medium one oops i shot another big one mini one was worth 50 and a small one should be worth that should bring us to 190 uh 340 yep that's working well now how about in the middle the top middle of the screen we put a high score so let's go ahead and create a high score variable so head back up the top and declare that variable so just next to where we declare the score we can also say score high and inside our new game function how about we initialize that score high now ultimately we'd like to grab this from somewhere like a saved location or something but just to begin with let's just set that to say 100 just to make sure that it works uh where do we where will we handle the high score well up in our destroy asteroid method where we're incrementing the score just after we do that how about we do a check check high score and that's simply going to be condition so if the score is greater than the high score then we want to set the high score to equal the score so score high will equal score of course we'll need to draw that so head back down to where we draw our score draw the score we're going to do a very similar thing with the highest score draw the high score the text line is going to be the center because we want it in the top middle of the screen text baseline is fine the field style is white the font is how about we set this to a bit of a smaller font so it doesn't take away from the current score so we'll say times by 0.75 just put that in brackets otherwise the font is the same the fill text will be the score high the position will be the middle of the screen so it'll be the canvas width divide by two and it'll be the same y the same y component let's test that okay the 100 it's not exactly in the center of the screen is it ah that's a spelling i've got the australian spelling not the american spelling so center with an er let's just double check that good i'm thinking we'll probably need some sort of text before that so maybe say i'm going to use the word best but you could use hi or top or whatever best plus the score high let's see if that looks okay yeah that looks okay now let's test to see if it works so we'll be trying to get more than 100 there we go so it's updating to match the highest score obviously the biggest issue is that when we reset this it goes back to 100 we'll want it to persist between browser sessions and indefinitely basically so how can we do that in the past we would have used cookies but with html5 we can use local storage local web storage so zoom back up to our new game method where we set the high score we can just write local storage dot get item now this get item function requires a key which is a string like this is like a save key now this only has to be unique within our code it doesn't have to be unique across all our software or whatever i believe it's based on the url so let's create a constant prefix it with uh save key save key score so it's just a string we can call it for example high score and this will be the save key for local storage of score of high score good go back down to new game put that in there save key score let's see what that does right so when we haven't set it we haven't set it yet it comes back null so we'll have to check for that how about we pull that down just underneath we do where we do all this ship equals new ship get the high score from local storage so how about we create a storage string so score string will equal all of that so that's our string now if that string if score string equals null then we want to set the score to so set the high score to equal zero that means they haven't set a high score yet else we want to set this high score to equal the score string but because it's a string we'll have to pass in so pass int uh requires a string which is just the score string hopefully that will work let's give it a go best is zero now although the score is going up if we reset this it's not storing it is it so we'll have to store it somewhere so up where we increment our score and test for the highest score inside our destroy asteroids method so check high score here we can just set it here so we can go local storage set item we need the key so the save key save key score and the value will be the highest score score high and hopefully that should be everything all right so we've currently got the best score of zero now we put the best of 20. that's reset yep it's persisting so that should persist between browser sessions between games between everything so let's try again 190 reset good and let's just to make sure it's really working how about we destroy our ship so we should have a high score let's get a high score first to 310 410 let's smash the ship a few times 460 560 and one more life left 610 so this should reset yep the score's reset but our best score is still 610 great so in this tutorial we're going to learn how to add sound effects to our game and music to some extent first of all go ahead and download the sound files from the link below i'll link to a zip file it's important that you extract the sounds directory to the same location as the html file so i've just created a folder called asteroids here put in both the code and the sounds folder that's important because we'll be referencing this this directory inside our code so inside the sounds directory there'll be six sounds explode hit laser music high music low and thrust i just used the program audacity to create those but i won't show you that here we can save that for another tutorial so go ahead and open our code so head down to where we set up our variables so just before we just after we set up the canvas let's set up sound effects so it's a pretty simple process we just need to create a variable let's prefix all our variables with fx just to make it clear so fx laser will equal new audio and just inside there we'll need a string for the source so that that'll be the directory name sounds forward slash the name of our file so laser.m4a now where do we want to call that where do you want to play that sound well in the laser method don't we so just head down to where we press the space bar there should be a shoot laser method now within that if condition all we have to do is go fx laser dot play and because it's a function call we'll need the parenthesis let's give that a go okay couple of problems first of all it's quite loud so we can fix that up in code and secondly when i push the spacebar continuously it's not playing every shot so watch again so although i fired about 10 shots it only played it about three or four times that's because when the sound is playing and i call another play method it won't play it until it's finished so that's a problem we can fix that up though so head back up to where we create our audio currently we're using this inbuilt object or inbuilt class called audio how about we create our own custom object called sound it will behave exactly the same way we'll make sure that it does go down and create that let's create it just before our update function so function sound the first parameter will be the source now the second parameter how about we create a parameter that handles multiple concurrent plays of our of our file so let's call that max streams and set its default to one that's currently the behavior we're experiencing now so when we push the space bar multiple times it will only play one sound at a time and we'll also want to set the volume here now volume takes a value between zero and one so how about we give it the default value of one which is maximum volume or normal volume so we'll have to create we'll have to keep track of which stream we're currently playing so we can go this dot stream num equals zero and we'll also need to keep track of each stream so that could be handled by an array for example so this dot streams will equal an empty array now to populate that array we can just use a for loop so for var i equals zero i is less than max streams i plus plus so we can push to that array so this dot streams we'll have to use we'll have to prefix all our variables here with this so that it's referring to the objects variable so this dot streams dot push now all we have to push is a new audio object so new audio and it takes the source as an argument and we might as well set the volume here so this dot streams i dot volume volume will equal vol that's what we're passing up here that should set that up okay next we need to implement the play function so we can handle that by going this dot play will equal function now we'll need to increment the stream number so that we cycle through each of the streams so we can do that by going this dot stream num will equal put this in brackets this dot stream num plus one incrementing it and find the modulus of the max streams i'll explain that soon so then we'll call the so we'll find that uh element so this dot streams the element number will be this dot stream num this dot stream num dot play so that's just the inbuilt play function so for example if max streams equals two right so this stream number zero plus one is one one modulus two is one so that will play the second element of our streams array when this function is called again so stream number is currently one plus one is two two modulus two is zero it'll play the first element of that array so in essence it will cycle through it will cycle through playing each of those elements each of the arrays elements as the play function is called which is what we want so let's test that so currently it's max streams equals one it behaves exactly the same way so let's head back up to where we call our initial laser sound here we go and give it some arguments so the number of streams let's try two and the volume let's turn it down a bit to say 0.5 right so the volume is okay now if i play if i push the space bar as fast as i can can you hear that it's only playing two of them that's because our max streams is two so what's a realistic number we could set here how about five that's probably fast enough so the player wouldn't notice let's try it i think that's pretty good it looks pretty realistic to me awesome next it's just a matter of implementing our other sounds so let's copy that and implement fx explode so that's where our ship crashes into an asteroid just update the source to sound slash explode dot m4a we'll delete we won't use any arguments here we'll just use the default ones now where will we call fx explode well explode ship comes to mind where are we draw explode ship so just after that fx explode dot play let's give that a go so if we crash yeah that sounds pretty good it's not too loud i don't think great head back up to our audio let's create another one called uh fx hit so this is where our laser strikes a asteroid an asteroid i should say sounds hit again we'll just leave the default sound make sure that actually we'll probably need to increase the max streams the reason being is that we could in theory hit a lot of asteroids at the same time because we're firing out lasers in quick succession so how about we give that the same number of max streams as the fx laser and where will we call that well probably when we destroy our asteroid that's probably the right time to do it so how about destroy the asteroid fx hit dot play sorry that was just the background uh astro uh the ship blowing up let's give that a go so when we shoot an asteroid yeah that sounds alright so we're shooting out a lot of lasers and we can hear some simultaneous hit sounds cool that sounds alright i'm just thinking to stop us hearing background explosions all the time let's create a global uh flag called for example sound on and we'll only allow sound when that flag is set through so there's an explosion for example so if sound on then we will play the sound if sound on then we will play this sound let's go and create that flag now so just under where we show for example sentence so create a constant sound on and that will be equal to false so let's just run that make sure it's working yeah so no sounds will be heard while we're programming next let's implement the thruster sound so just where we're creating the other sounds here let's go fx thrust will equal sound slash thrust we probably don't need any uh parameters here now where will we call that where will we play that probably down in the update method in the update method we thrust here we go thrust the ship so just up near the top there fx thrust dot play and when we release the thruster key when we release the forward arrow we'll probably need to stop that thrust sound as well we don't want it to continue onwards so how about we in the else uh part of the condition we go fx thrust dot stop so we'll have to implement this method so fxthrust.stop so go to our sound function and create a new method called this dot stop will equal function and all we'll do there is call is call the inbuilt pause function so this streams this stream dot pause and we'll want to reset back to the start of that stream so we can do that by going this streams this dot stream num dot current time equals zero so that'll set the cursor or whatever it is called back to the start of that stream let's give that a go oh we'll have to turn on our sound first to test this so sound on will equal true see that's working and our thruster is working cool good that's all our sound effects done next let's create some music just set the sound on back to false so that we don't have to listen to explosions in the background okay uh now music i use the word music very loosely uh so just under where we set up the sound effects set up the music now the music in asteroids the original game was very pretty much just two tones it was going something like that it's just kind of two different tones so why don't we create a variable called music and that will equal we'll have to create a new object it's called music for example and it will take the two sounds so we'll have sounds music low and the second parameter will be similar sounds music hi so just the two sound files that we have one's a low sort of tone and one's a high tone let's go down and create that object just near where we create our sound uh objects new shoot laser so just here function music so we'll have source low and source high so first of all let's declare our variables so we'll have two sounds so this dot sound low which will equal new audio source low right similarly we'll have this sound high which will equal new audio source high and we'll also need to keep track of which sound are we currently playing so we can just use a boolean for that so this dot low will equal true that means we'll set we'll start with the low sound and we'll also need the speed of the music the reason being is that as the game progresses the speed of the music increases so this dot say tempo will equal 1.0 say and we'll define that as uh seconds per beat we'll also need to somehow count down that tempo so we can have a create a variable called this dot beat time we'll set it to zero to begin with and that's basically defined as the frames left until next beat right we'll have to create our play function so this dot play equals function and what will it do well if this if this dot low we want to play the low sound so sound sorry this dot sound this dot sound low dot play right and otherwise so else we want to play the high sound this dot sound high dot play okay and we also want to switch between those two so we can handle that by going this dot low will equal not this dot low so we're just switching true to false and false to true okay good we'll also need some way to count down this uh tempo as such the beat time so how about we create a function called this dot tick this dot tick equals function and this will be called every frame so knowing that we can say if the so if this dot beat time equals zero that means it's counted down which it will have immediately we want to play the current sound so this dot play we also want to reset the beat the beat time so this dot beat time will equal the ceiling so we want to keep it as a integer math.seal of the tempo so this dot tempo multiplied by the frame rate so for example if the so the current tempo is 1 the frame rate is 30 so we'll have 30 ticks until the sound is played so that's one second that sounds good now else so it doesn't equal zero we want to decrement it so this dot beat time minus minus now where do we call this tick well we need to call it in the update function so just go down to the update function up near the top tick the music so we can just go music dot tick now hopefully that will play our music let's try okay it's not playing let's see what's let's head up to the top and see if everything's okay where we uh create our music musicals new music sound music low okay i forgot to add the extension to each of these music files which is important but luckily the game didn't break so i'd say our code is all correct let's give it a go great that seems to be working oh that reminds me we should probably put in a global variable a global constant music on and we can just go down to our music uh method and in our play we can just say if music on then we'll do all of that good so we've turned our music off now how will we make the music go incrementally faster as the game progresses well let's head up to where we declare our music variable and create a couple more variables one called roids left and one called roids total and we'll find a ratio of how many there are left to the total and use that as a guide so just in our create asteroid belt how about we set up the roids total roid's total will equal the roid num but remember each of those big asteroids can be broken down into two mediums and each of those mediums can be broken down into two smalls so we'll have four smalls plus two mediums is six plus the original big one is seven so roid num times seven will be the total and we'll want to make roids left equal to that roid's left will equal the roid's total actually that should be the roid num plus the level shouldn't it because you see down here the number of asteroids is dependent on the level so all of that times seven right that should be okay so head down to our destroy asteroid method and just after we play the sound let's calculate the ratio of remaining asteroids to determine uh music tempo so first thing we'll need to do is roid's left minus minus we'll decrement that and then we'll we want to call a function on music for example called set asteroid ratio and then in there we can calculate the ratio the only thing i can think of is if the roy's left equals zero then so roid's left equals zero if that's true well the ratio is going to be one we want to reset the ratio to just one else we will uh find the actual ratio so roid's left so head down to our music object music and we want to create that method this dot set asteroid ratio equals function we'll need to have an argument have a parameter here called ratio and this will modify our tempo so this dot tempo will equal the starting tempo minus one point zero minus the ratio because when the ratio is for example point nine one minus point nine is point one 1 minus 0.1 is 0.9 yes that's fine the only thing i can see the only problem i can see here is that this is going to get very small so it'll become too small where we'll be playing hundreds of beats per minute we don't want that per second i should say so let's multiply by that by some factor 0.75 times that right so that means when the ratio is zero one minus zero is one point seven times 0.75 times 1 is 0.75 1 minus 0.75 is 0.25 the fastest rate that we can go is 0.25 that's 4 beats per second okay we'll just need to go turn on this music on function sorry music on flag set that to true and let's give it a go okay so that's one beat per second let's destroy some of these asteroids yeah it's getting faster let's just play until we get to the next level great it's reset perfect let's just turn on the sound to have one final play great that's working well and that's the end of this tutorial series i hope you've enjoyed it just as much as i've enjoyed making it so we've created a little triangle that can fly around space using the arrow keys we can press the space bar to shoot a laser we've created randomly generated asteroids that float through space we've added a scoring system with a high score that saves to the local storage and we've added sound in this tutorial i'll post a link to the final code in the description below feel free to download it and have a play with it yourself you can for example change some of these parameters or maybe you can add some new functionality like powerups that float across the screen that your ship can collect things like invincibility or an extra life maybe a split laser that shoots out multiple laser blasts at once the only limit is your imagination and that's what programming is for me to learn something new to create something wonderful and to have a lot of fun along the way until next time talk to you then cheers