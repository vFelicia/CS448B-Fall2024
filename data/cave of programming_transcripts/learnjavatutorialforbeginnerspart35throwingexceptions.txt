00:01 - hello this is John from Cave of
00:03 - programming. comom and in this tutorial
00:06 - we're going to look at throwing
00:08 - exceptions in
00:10 - Java so we've still got some more stuff
00:12 - to look at in the realm of handling
00:15 - exceptions but I thought First We Take a
00:18 - look at how to throw them so I'm going
00:20 - to create a new class here let's create
00:23 - a new
00:24 - class and I don't really know what to
00:26 - call it so I'll just call it test or
00:29 - something something like that and I'll
00:32 - give test a method I don't want a main
00:35 - method but I'll give it some kind of
00:37 - method let's say public void I don't
00:41 - know run or something like
00:43 - that this is just stuff that I'm making
00:45 - up off the top of my
00:47 - head and I'm going to Let's assume that
00:50 - we want a COR run in the main program
00:53 - here so we could say let's say
00:57 - test test equals new test
01:00 - test and then we want to call run so we
01:03 - say test. run and in test. run let's
01:06 - just put assis out so that it does
01:10 - something I'll just
01:13 - say
01:15 - running
01:20 - successfully and let's let's just run
01:22 - this and check that it works which is
01:23 - always a good idea there we go now let's
01:26 - suppose that run actually has to do
01:28 - something that could go wrong
01:30 - so I I don't know what but um let's
01:33 - imagine that it could go wrong
01:35 - somehow so let's say um in value
01:40 - equals um
01:42 - n and let's imagine that this is some
01:46 - kind of but let's not call it value
01:50 - let's call it code and let's imagine
01:52 - that this
01:53 - is um some kind of return
01:57 - value from some
02:00 - complex
02:01 - [Music]
02:02 - process and U we'll imagine that zero
02:06 - means
02:08 - success so0 equals
02:14 - success and any anything else like
02:18 - um anything else is um you know like one
02:21 - 2 3 is going to mean failure so let's
02:23 - say anything else equals um error
02:28 - code now you throw an exception when
02:31 - something goes wrong in your code so I
02:35 - mean there there are kind of slightly
02:37 - different schools of thought on when you
02:38 - should throw an exception because uh
02:42 - back in the days when I was learning C++
02:45 - I always read that you should only throw
02:47 - an exception if something goes wrong
02:50 - that shouldn't happen and in Java the
02:53 - same philosophy is kind of followed but
02:56 - not really so rigorously because for
02:59 - example if you have some code that looks
03:02 - for a file and then you throw a file
03:04 - file not found exception and imagine
03:07 - that that happens whenever the file
03:09 - happens to not be there but it's just a
03:11 - random file which could be there or
03:13 - could not be there then throwing and
03:16 - catching a file not found exception
03:18 - becomes part of the normal operation of
03:20 - the program and arguably that's bad
03:23 - coding but different people seem to have
03:26 - a different opinion on that but the
03:27 - bottom line is an exception for when
03:30 - something goes wrong and some people say
03:33 - that this should be something which is
03:35 - not expected to happen during the normal
03:38 - running of the program but people do
03:40 - differ about
03:41 - that so we'll assume something's gone
03:43 - wrong and we'll say that if code is not
03:48 - equal to
03:49 - zero then this means something's gone
03:52 - wrong
03:54 - so something's wrong and we're going to
03:57 - throw an
03:58 - exception and the way we do that is
04:01 - firstly in the method header here we
04:04 - have to say what kind of exception the
04:06 - method might
04:08 - throw and so you need to pick kind of a
04:11 - suitable type of exception and if you go
04:14 - to Google and you search for Java
04:16 - possibly your version of java let's say
04:19 - seven and
04:21 - exception and then go to the API DOC for
04:24 - for the class exception you can see a
04:27 - massive range of
04:30 - subclasses here which you could
04:33 - throw and some particularly common ones
04:35 - are for example file not found
04:37 - exception and IO exception so you could
04:42 - pick an existing exception to throw from
04:45 - one of
04:46 - these and you could also throw exception
04:49 - itself you could just throw exception
04:51 - although that's considered kind of bad
04:53 - practice let's imagine that you've
04:55 - looked at all these different exceptions
04:57 - and you decided that IO exception is the
05:01 - one you want IO exception IO exception
05:05 - um means input output exception so you
05:08 - could throw this if something goes wrong
05:10 - with the input or output of the program
05:13 - so let's say here
05:15 - throws IO
05:19 - exception and let's let's throws with a
05:22 - lowercase T CU this is a keyword and the
05:23 - keywords have lowercase letters and IO
05:26 - exception uppercase i cuz this this is
05:28 - an actual class
05:30 - exceptions are
05:32 - classes and now here where where the
05:35 - thing actually goes wrong in your code
05:37 - if it goes wrong you can say
05:40 - Throw new IO
05:43 - exception and exception classes they all
05:47 - allow you to specify a message here so
05:50 - we could say
05:51 - [Music]
05:52 - here something uh went
05:56 - wrong actually that's a terrible error
05:59 - message how about
06:02 - um could not connect to server something
06:08 - like
06:10 - that and now you you'll see that I now
06:12 - that I've saved that I've I've got an
06:15 - error in Main and notice I'm not
06:18 - throwing that exception at the moment
06:19 - because the code is equal to zero so
06:22 - this won't run all that will happen is
06:24 - it says running successfully but the
06:27 - point is that this this is could be
06:29 - return code and here we're checking has
06:32 - has something gone wrong and if it has
06:34 - only then will we throw an exception and
06:37 - if we throw an exception it will leave
06:38 - this method at that point and bolt
06:40 - straight out of it and we're now forced
06:43 - to handle this here so I'll use what um
06:46 - the stuff we saw in the last tutorial
06:48 - I'll click the error message and
06:50 - Surround with try catch and here we
06:53 - could say e print start trace or we
06:56 - could present some kind of error message
06:58 - to the user or or I could do something
07:00 - like sisal e. getet message and get
07:04 - message will return that me that message
07:07 - that I supplied to the Constructor right
07:09 - here so if I save that the error goes
07:12 - away and if I run it well it says
07:14 - running successfully but if I now
07:16 - changed this to be one let's say and now
07:19 - I run it it's going to say could not
07:21 - connect to
07:22 - server there just one more thing that I
07:24 - want to show you in this tutorial
07:27 - although there's going to be a bit more
07:28 - to say about exceptions which is what if
07:31 - you don't find an exception that you
07:33 - like the look of you don't find an
07:34 - appropriate one you can create one of
07:37 - your own so I might create a package
07:40 - here called exceptions actually but for
07:42 - the moment let's just bunk it in this
07:44 - default package so I'll right click and
07:47 - I'll go to new
07:49 - class and let's call This Server
07:53 - exception I don't think there's already
07:54 - a server
07:56 - exception and I don't want the main
07:58 - method and and I want this to extend
08:01 - exception so I'll type here for the
08:03 - super class exception I'll click browse
08:06 - and I'll browse to java. line exception
08:10 - and click finish so we've got a class
08:12 - server exception which extends exception
08:16 - and I'll also give it a Constructor so
08:17 - I'll right click and go to
08:20 - source and generate Constructors from
08:23 - superclass and I'll just use the
08:25 - Constructor I'll say deselect all and
08:27 - then I'll select just the one that takes
08:29 - a string as its
08:32 - um as its uh sole parameter and you can
08:36 - also
08:37 - Supply other exceptions that are the
08:39 - root cause of this exception but we'll
08:41 - just stick with a message for the moment
08:43 - so I click
08:45 - okay and uh I'll just let that go to
08:49 - super um invoke the super class
08:52 - Constructor here so this doesn't
08:54 - actually do anything new and you could
08:57 - make it do stuff new stuff if you want
08:59 - you could give it new Fields New methods
09:02 - that allow you to provide new
09:04 - information about the nature of the
09:06 - exception but for the moment I'll just
09:08 - leave it as it is and I'll change this I
09:11 - exception to server exception in fact
09:14 - what I'll do is I'll
09:15 - just comment this
09:18 - out
09:21 - and let's just paste this down here and
09:26 - I'll change this now to server ET
09:31 - and I click save and let's look at the
09:35 - error and I'll now I will change this
09:40 - here to server exception as well so it
09:42 - throws a server
09:44 - exception and here I'll also change this
09:48 - to catch server exception and we could
09:51 - we could have made um server exception a
09:55 - subass of IA exception if we think that
09:57 - server exception is a type of IO
10:00 - exception then we could have made it
10:02 - extend IO exception but here I'll just
10:04 - create a brand new exception with the
10:07 - exception class as it's parent and we'll
10:08 - save that and I'll just run that and
10:12 - it's the same result as before if the
10:14 - exceptions thrown it catches my server
10:16 - exception and in this case it's printing
10:19 - the message and we could also say
10:20 - something like e. print stack Trace if
10:24 - we want and then if I run that we'll
10:27 - also get this kind of error message and
10:29 - we can find out where the exception
10:31 - occurred and I can even click um a bit
10:35 - further up the stat Trace here and find
10:37 - out precisely where it originated
10:41 - from and notice that we if we throw the
10:43 - exception we don't run this line because
10:46 - as soon as you say Throw new exception
10:49 - it leaves the method that you're in so
10:52 - that's it for this tutorial and we'll
10:54 - look at exceptions a bit more shortly
10:57 - but until next time happy code in