00:17 - hello this is John from cave of
00:20 - programming calm in this tutorial we're
00:23 - gonna start working on creating
00:25 - simulated explosion effect so the moment
00:29 - our particles are all starting random
00:31 - positions and they're wandering around
00:33 - the screen randomly well actually they
00:36 - all have fixed speeds and directions and
00:40 - it bounced off the edges of the screen
00:42 - and just kind of wander around so what
00:45 - I'd like to grate here is an explosion
00:48 - effect where they all start from the
00:49 - middle and they all fire outwards in a
00:52 - sort of circle some jagged circle so
00:56 - let's start putting that together in
00:57 - this tutorial and what we want to get to
01:00 - start with is that circular kind of
01:02 - explosion pattern of the particles so if
01:06 - we look at particle dot CPP now we've
01:08 - got it that were initializing the X&Y
01:10 - coordinates of each particle to a random
01:13 - value when the particle is created let's
01:16 - get rid of that and instead put the
01:19 - particles using the constructor
01:20 - initialization list here let's put them
01:23 - right in the center of the screen which
01:25 - are now in our particle coordinates
01:27 - system is at 0 0 x equals 0 y equals 0
01:32 - and if we run this now they start from
01:36 - the center of the screen but you'll
01:37 - notice there's a rough rectangular
01:39 - pattern to the explosion that's because
01:42 - we're choosing the x and y values here
01:47 - randomly but using the rectangular
01:53 - coordinate system like that and choosing
01:56 - the x and y speeds of the particle
01:59 - separately is what leads to this
02:01 - rectangular pattern what we really want
02:04 - to do is we want to choose two things
02:07 - for each particle firstly a completely
02:10 - random Direction from naught to 360
02:13 - degrees and secondly a speed so that
02:17 - we're not introducing any kind of
02:19 - rectangular element
02:20 - in there and if you've done any
02:22 - mathematics you'll recognize this is
02:24 - basically changing from Cartesian
02:27 - coordinates which were using in the
02:29 - moment to polar coordinates but if you
02:32 - haven't done any mathematics don't worry
02:34 - about that because the formulas that I'm
02:36 - going to show you you don't really have
02:38 - to understand them unless you're going
02:39 - to do a lot of detail graphics work you
02:42 - can just use them so instead of having
02:46 - an X speed and Y speed for our particle
02:49 - I'm going to go to particle 2h here get
02:51 - rid of those and instead of those I'm
02:53 - gonna have a double em underscore speed
02:56 - which will just speak how fast the
02:58 - particle is moving in whatever direction
03:00 - it's moving in and a double and on the
03:03 - score direction which will be the angle
03:05 - from north 360 degrees that the particle
03:08 - moves in and then in particle dot cpp
03:11 - let's get rid of the update method
03:14 - because that's now not in the u s--
03:16 - anymore
03:17 - and let's get rid of this stuff that
03:19 - initializes the x speed and y speed
03:21 - because we're not using that anymore
03:22 - let's start by picking a random
03:25 - direction for the particle so again
03:30 - we'll use our old friends runs and ran
03:33 - max here we divide rat ran returns a
03:36 - random number from naught to whatever
03:38 - ran maxes which is a big number so if we
03:42 - do this we'll get a number from naught
03:44 - to one point naught except that we have
03:45 - to make sure that either run max or and
03:48 - is converted to a double first or else
03:50 - we'll get integer division which we just
03:52 - give us nor discarding the floating
03:54 - point there and in fact in mathematics
03:58 - in general and in programming as well
04:00 - angles are not measured using degrees
04:03 - but using radians or some people say
04:05 - radians and the Radian measures a full
04:09 - rotation not in 360 degrees blowing two
04:13 - times pi radians so like pi is 3.14159
04:20 - two roughly so
04:24 - two times pi is going to be something
04:26 - like I suppose 6.3 roughly so we measure
04:32 - the full circle of rotation from as as
04:35 - being not for naught 360 but from north
04:38 - to 6.3 roughly and that has various
04:41 - mathematical advantages so you want to
04:44 - pick an angle here from naught to 2
04:47 - times pi which is about 6.3 I think
04:51 - radians and we can use a constant pi
04:55 - constant from math page so let's let's
05:02 - use that let's say here two times and
05:07 - the constants called an underscore pie
05:09 - and it's about 3.141592 x runs here you
05:14 - might need to might need to include
05:17 - using namespace standard here but it
05:21 - seems like I I don't need it
05:23 - and so I'll go and put it in seems seems
05:28 - to be fine that we don't need to use the
05:30 - standard namespace to get this M on the
05:32 - scope I at least on this system anyway
05:34 - let's put this in brackets to make sure
05:36 - that we have a double here we're
05:37 - dividing it that numerator is definitely
05:39 - a double before we divide by the integer
05:43 - denominator because we have to have
05:44 - either the top bit numerator or the
05:46 - bottom day of the fraction denominator
05:48 - as a double in order to make c++ do
05:52 - floating point division this is choosing
05:55 - our handle and then we're going to
05:58 - choose the speed so M underscore the
06:01 - speed and again R and divided by R and
06:06 - underscore Max will give us a random
06:09 - number from nought to one point naught
06:10 - and we can multiply that by some
06:15 - constant let's let's try some number so
06:18 - I'm just going to experiment with some
06:20 - some number here
06:22 - and again it's floating-point number of
06:25 - course it's very important I tried
06:27 - different bayous I just experimented
06:28 - with different values and fine find
06:31 - found some that the work for one I'm I'm
06:35 - gonna do here so you can experiment too
06:38 - and see what results you get so we've
06:40 - got a direction speed and in updates now
06:42 - I can calculate how much to move the x
06:46 - and y coordinates by let's have a double
06:49 - Evans score Allison I am on score sorry
06:52 - let's call it have a double X speed
06:55 - equals and a formula yeah which you'll
06:59 - recognize if you've done any mathematics
07:01 - but if you haven't don't worry is if
07:03 - you've got a direction and speed like
07:05 - this and you want to calculate a X speed
07:08 - and a wife speed the X speed is the
07:11 - speed times the cosine of the direction
07:16 - and we're using kasam sign from master
07:20 - age and the wife speed here is gonna be
07:23 - an underscore speed times the sine of a
07:27 - an underscore direction these are just
07:29 - functions that basically give us the
07:31 - right values projecting onto the x and y
07:34 - coordinates so now we can add those on
07:38 - to an underscore X plus equals x speed
07:43 - and an underscore y plus equals y speed
07:48 - let's run this and see how it looks
07:54 - so this is very very slow as quitter and
07:56 - that's made this constant smaller for
08:00 - the speed so a bigger speed now it's
08:03 - quite fast actually I want to slow it
08:05 - down a bit try that and we'll also maybe
08:09 - have more particles let's go to screened
08:11 - age
08:12 - no sorry swarm rage and let's strike
08:16 - 5,000 particles which this computer at
08:19 - least can cope with and if yours calm
08:22 - you might want to stick with a lower
08:23 - number of particles but this this looks
08:26 - good on this computer at least go back
08:29 - to particle at CPP and let's run this
08:32 - now we've got an explosion and but it's
08:38 - beginning to look like an explosion but
08:40 - you'll notice is oval and not circle
08:43 - circular so let's at least fix that in
08:46 - this tutorial now that the speed by the
08:48 - way will at the moment it's going to
08:49 - depend on the speed of your system it's
08:52 - gonna the speed that these particles
08:54 - move up is just going to depend on how
08:56 - quickly this loop can iterate in main
08:59 - dot CPP and that's not desirable either
09:02 - would like like it to run the same kind
09:04 - of speed on any system so we need to fix
09:06 - that as well
09:07 - but the last thing I'm going to fix in
09:09 - this tutorial it's just to stop it
09:11 - looking oval the reason it looks oval is
09:15 - because of where we're taking a particle
09:19 - space and mapping it to screen space
09:22 - here in Maine dot CPP but the screen is
09:25 - wider than it is high and because we're
09:30 - trying to fit that minus one to plus one
09:34 - onyx and why kind of box neatly into the
09:37 - screen and because the screens wider
09:39 - than it is high we end up with it with
09:41 - oval we've mapped the particle space in
09:43 - such a way that gives us this oval the
09:46 - key to not having an oval there is to
09:48 - make sure that whatever the coordinate
09:52 - of the particle is we always multiply it
09:58 - by the same value both for x and y so
10:01 - the the range of the particle which is
10:04 - two
10:05 - that's from minus one to plus one is a
10:07 - range of two we then multiply it by half
10:11 - of the screen whipped for example two to
10:14 - get a range of the screen width if a lot
10:17 - gives us a different range for the width
10:20 - and height because we're using the
10:21 - height to multiply the range of particle
10:23 - range of two from minus one to plus one
10:27 - two to map that to the height so let's
10:30 - let's change these so that instead of
10:32 - using screen height here we're using
10:35 - screen width screen width now this is a
10:40 - step in the right direction
10:41 - so this means that the X&Y range of the
10:46 - particle is gonna be the same but the
10:51 - exposures now starts from it's not the
10:53 - center of the screen anymore but you can
10:54 - see that it is circular because the
10:57 - range of it is the same in both the X
10:59 - and y directions to fix that we're gonna
11:02 - have to rethink the height calculation a
11:05 - bit what we'll do is first we'll take
11:08 - the s get rid of some of this first
11:10 - we'll take the y coordinate and multiply
11:13 - it by by this the screen width divided
11:17 - by two because that will extend the
11:20 - range in a particle it will change it
11:22 - from two minus one to plus one
11:24 - that's range of two to the screen width
11:29 - which is which is fine particles are
11:32 - going to go off the edge of the screen
11:33 - off the top and a bottom but it doesn't
11:37 - matter because you know because the
11:39 - width is is bigger than the height but
11:41 - if they go off the top or the bottom it
11:43 - doesn't matter because we've made sure
11:44 - on a set pixel that were we aren't we
11:48 - aren't going to plot any particles that
11:49 - are off the edge of the screen so we can
11:51 - safely do this we don't have to worry
11:53 - about exactly where they are now we need
11:57 - to if once we've got the range right
12:00 - here this the moment if the particle is
12:04 - at position zero that will mean that it
12:07 - will be at zero on the screen which will
12:10 - be right at the top of the screen
12:12 - because I have sorry y starts numbering
12:16 - downwards so
12:17 - there's zero of why's at the top of the
12:19 - screen if we run this now week Atlas is
12:22 - right at the top here what we want to do
12:24 - is add to that half of the height so if
12:28 - we add to this screen colon columns
12:33 - scream Espace screen height let's use
12:37 - the autocomplete that divided by two
12:40 - now if we run this we get get it in the
12:45 - right position because if you think
12:46 - about it when it particles at the zero
12:48 - zero times screen width over two is
12:52 - still zero add half of the screen height
12:55 - and that puts the zero right half way
12:58 - down the screen which is what we want so
13:03 - I think I'm gonna leave it there for
13:07 - this tutorial this is a little bit any
13:09 - fishing because we're recap we're doing
13:11 - this division by two every time we go
13:12 - around this loop and if you want you can
13:16 - you could define a constant above the
13:19 - loop equal to the screen width over to
13:22 - and use that here to avoid having this
13:25 - calculation the division by two to avoid
13:28 - doing it every time you go around a loop
13:30 - which might be a good idea the compiler
13:33 - might optimized stuff anyway but best
13:38 - not to rely on it but I'm just going to
13:39 - leave it as it is for the moment so
13:41 - we'll continue to work on this explosion
13:43 - in the next tutorial we've got a few
13:45 - things to fix here because it's still
13:48 - not what we wanted to be it also looks
13:50 - very rubbish because while we're
13:53 - changing the colors of all the particles
13:55 - at the same time and we haven't more
13:57 - importantly as well we haven't got a
13:59 - blur on the screen we just sing
14:01 - individual pixels and it looks a lot
14:02 - cooler if you blur the screen so we've
14:05 - still got to tackle that but I'll leave
14:07 - it there for this time
14:08 - and until next time happy coding
14:18 - you