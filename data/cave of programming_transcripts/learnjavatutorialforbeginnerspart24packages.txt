00:00 - [Music]
00:12 - [Music]
00:18 - hello this is John from Cave of
00:20 - programming. comom and this is a
00:22 - tutorial on packages in Java so packages
00:26 - perform two functions one is that they
00:28 - enable you to organize your code in a
00:31 - sensible fashion that enables you to
00:33 - find the files that you need quickly and
00:36 - the other is that they um stop you
00:38 - having conflicts between Class names so
00:42 - um if you um have two classes called for
00:45 - example fish then as long as they are in
00:48 - different packages then that's okay but
00:51 - you can't have two classes with the same
00:53 - name in a same package because that
00:55 - would be a conflict so let's take a look
00:57 - at an example here I'm going to create
00:59 - an got Eclipse running and I've got my
01:01 - main method here as usual and I'm going
01:03 - to go to file new uh class and I'm going
01:09 - to create a class called
01:11 - fish and up here you see I can specify a
01:14 - package Now package names um by
01:17 - convention are usually all lowercase and
01:20 - they can't have any spaces or um they
01:23 - can't have spaces in them and you don't
01:25 - usually put underscores in them or
01:27 - anything like that um usually a uh
01:30 - package name is something um very simple
01:32 - so let's call this ocean so I'm going to
01:35 - put the fish class in the ocean package
01:39 - and I click
01:40 - finish and in app now let's say I want
01:43 - to use the fish class oh actually before
01:46 - I do that I need to tell you that um
01:49 - you'll see that fish now has a statement
01:51 - at the beginning saying package ocean
01:54 - that says it's in the ocean package and
01:57 - if you have a package statement um in
01:59 - your file your class file it should be
02:02 - the first um statement in the file so
02:06 - it's got to come first before your other
02:08 - statements and if you look at your disk
02:10 - so let's rightclick the um project
02:13 - folder go to properties go to the
02:16 - resource um section here here's my um
02:20 - the actual folder that my um my project
02:24 - is physically in on a disk so if I right
02:26 - click that and just copy it cancel that
02:29 - and if I let's go to that on in
02:32 - Explorer uh I'm already there I think
02:34 - actually here we go um so um the
02:37 - convention in Java and Eclipse creates
02:40 - this automatically for you is that
02:41 - usually you have a source SLC folder
02:45 - that contains your Java files and a bin
02:47 - folder that contains your generated
02:49 - class files and if I go into the source
02:52 - folder now you can see that um app. Java
02:55 - which contains my main method um that's
02:58 - in the default package
03:00 - and it's in kind of the root of the
03:02 - source folder but I put fish in the
03:04 - ocean package and anything in the ocean
03:07 - package is going to be in this ocean
03:09 - folder subfolder so there's my fish.
03:12 - Java and that structure is also
03:14 - reflected in the output folder the bin
03:17 - folder here's the generated app. class
03:20 - file and there's the ocean folder with
03:23 - fish. class in it so um now let's
03:27 - actually use the fish class I'll say
03:29 - fish fish equals new
03:33 - fish and um I'll get an error initially
03:37 - but what I have to do is um after any
03:40 - package statements that might be here
03:42 - and um excuse me so actually in this in
03:45 - this case here um because app is in the
03:48 - default
03:49 - package um I haven't got a package
03:51 - statement but if there was one um I have
03:53 - to type other statements after that and
03:57 - um in order to use things from the ocean
04:00 - package I need to type
04:02 - import uh ocean and I'm going to say
04:06 - ocean do fish because I want to use the
04:08 - fish class from the ocean package and
04:12 - now my error is gone and we're
04:15 - fine let's create another um class in
04:19 - this package so I'll right click the
04:21 - package folder here and I'll go to new
04:24 - class and you see that the package is
04:26 - now filled in for me because I right
04:28 - click the package
04:30 - and let's create here um something like
04:34 - I don't know seaweed so
04:38 - seaweed and if I now want to use the
04:41 - seaweed
04:42 - class uh so I want to say something like
04:45 - seaweed weed equals new
04:49 - cweed I'll just do
04:51 - control uh space there and in fact if I
04:54 - do this Eclipse I think will add the
04:56 - import statement for me there we go and
04:59 - so you see Eclipse has added um another
05:02 - input statement or I could have just
05:04 - typed that by
05:05 - hand now an alternative that you should
05:08 - know about to having a different import
05:10 - statement for each class is you can type
05:14 - you can import everything from one
05:15 - package by just saying import uh in this
05:19 - case ocean. star and star um is a wild
05:23 - card that means import any class from
05:26 - that
05:27 - package um so now I can use use both of
05:30 - these classes uh but the great thing
05:33 - about using modern IDE like eclipse is
05:36 - that you actually never have to worry
05:38 - about
05:40 - typing ah sorry that was my doorbell
05:42 - going there I was going to say you never
05:44 - have to worry about typing import
05:47 - statements
05:48 - yourself um because you can use a
05:51 - shortcut and your IDE will handle it for
05:53 - you so um if you right click and go to
05:57 - Source um and go to organize
06:01 - Imports um and you can see the shortcut
06:03 - for that is control shift and
06:05 - O um Eclipse will automatically add any
06:09 - import statements that you need and it
06:11 - will remove any that you don't need so
06:13 - if I select that you can see it's added
06:16 - um all the inputs that I need here um as
06:19 - long as it can find the class files
06:21 - somewhere like either they've got to be
06:23 - defined in your project or they've got
06:24 - to be defined in a jar file that you've
06:27 - included into your project then it will
06:30 - deal with adding the actual import
06:31 - statements
06:33 - automatically so if I remove that again
06:35 - and I could do control shift and O So
06:38 - you need contrl and shift at the same
06:40 - time and then press O then again it's uh
06:44 - that's organized my inputs for me and
06:46 - added the ones that I
06:48 - need now um packages are hierarchical in
06:53 - Java uh so you can have packages within
06:56 - packages um and if that sounds
06:58 - mysterious uh you only have to think
07:00 - that well you have folders within
07:01 - folders on your disk um and it's pretty
07:04 - straightforward and the packages just
07:06 - mapped to those
07:07 - folders the difference is that um
07:11 - whereas uh with folders if you specify a
07:13 - folder name you you usually use slashes
07:16 - to separate the different subfolders
07:18 - with packages you use dots so let's see
07:21 - how that will work supposing I've got an
07:22 - ocean package and I want to create a
07:25 - subpackage within that called um plants
07:28 - let's say so um I'm going to go to file
07:34 - new and um new class and let's have a
07:39 - plant like
07:42 - [Music]
07:43 - um uh I don't really know let's say um
07:47 - algae which uh algae or however you
07:50 - pronounce it I guess is a type of plant
07:52 - or is it an animal I'm not really sure
07:55 - um anyway that'll do uh it doesn't
07:57 - matter and I'm going to type here I'm
08:00 - going to say that I want this to be in
08:01 - the ocean package and then I want it to
08:03 - be in a subpackage of ocean called
08:07 - plants I think I'll GE creatures
08:09 - actually uh but yeah not important I'll
08:11 - leave that okay um so if I click finish
08:14 - now um you see that I've got this
08:16 - package here ocean. plants with this
08:19 - class algae in it and if I look on my
08:23 - dis then um in if I if I go to let's say
08:28 - the um Source folder and I go to Ocean
08:33 - um and there's so now in my ocean folder
08:35 - corresponding to my ocean package and
08:38 - that's now got a subfolder in it called
08:40 - plants which has my algae in it um and I
08:44 - could like take my seaweed in Eclipse if
08:46 - I want and drag it into the ocean
08:51 - package like this so click okay and now
08:55 - seaweed is in the subpackage plants of
08:58 - ocean
09:00 - and if I look at seaweed um now at the
09:02 - top it says package ocean. plants
09:04 - Eclipse has updated that for me and in
09:07 - my app here if I want to use seaweed I
09:11 - have to say import ocean. plants.
09:14 - seaweed so this is saying um import the
09:17 - seaweed class from the plants package
09:21 - and plants is a sub package of
09:25 - ocean and uh you separate the different
09:28 - subpackages by Dot
09:30 - so that's um that's I guess more or less
09:34 - the really all is to packages it's it's
09:36 - not that complex although it seems a
09:38 - little bit baffling when you first see
09:40 - it um and there's there's just one thing
09:43 - that I think I should mention which is
09:46 - that if you want to um distribute your
09:49 - code so that other people can use it um
09:51 - which would usually be in a jar file
09:54 - then um you want to make sure that your
09:56 - package name that you put your stuff in
09:59 - um is unique in the whole world so that
10:03 - um people can use your packages and it
10:05 - doesn't matter even if someone someone
10:07 - that uses your code might already have a
10:09 - package called ocean themselves um and
10:13 - then if you have a a package called
10:15 - ocean um it could conflict with their
10:17 - package or at least um they might have a
10:21 - class called fish in a package called
10:23 - ocean and if you give them a jar file
10:26 - that also has a package called ocean
10:28 - with a class called fishing it then they
10:30 - can't use it cuz there's a conflict
10:32 - there and for that reason um there's a
10:34 - convention in Java for creating
10:37 - worldwide unique package
10:39 - names and the way it works is um let's
10:43 - say I wanted to distribute a class
10:47 - called um let's say um I don't know
10:51 - let's say I've create I've created some
10:53 - game and my game's called aquarium so
10:56 - I'll give this class a name called
11:00 - aquarium and I want other people to be
11:02 - able to use this code um what I what you
11:05 - do is you reverse the um you could use
11:09 - the like the name of your company or
11:11 - your own name or something like that but
11:13 - it's a convention that if you've got a
11:14 - website you reverse the name of your
11:16 - website so uh my website is Cave of
11:20 - programming. comom so i' put this in a
11:23 - package called
11:25 - com. Cave of
11:28 - programming um and then I'd probably
11:30 - give this um a specific package just for
11:33 - this particular project so this could be
11:36 - called um I don't know like
11:40 - um ocean uh sorry it's got to be
11:43 - lowercase ocean game or something like
11:46 - that and then um so now um my if I look
11:51 - on a dis so my aquarium here is in this
11:55 - package com. programming.
11:57 - oame um and my website is Cav
12:01 - programming. comom and this particular
12:03 - project is called ocean game at least as
12:06 - far as the package goes and if I look on
12:08 - a dis of course I'm going to see um a
12:11 - com folder in the source folder um with
12:14 - a C programming subfolder with an ocean
12:17 - game subfolder in it and there I'm going
12:20 - to put more sub packages for my game
12:23 - just as I need them for organizational
12:27 - purposes and um wow it's really noisy
12:30 - here there's dog baring now and uh also
12:33 - that's going to be the same in your
12:35 - you're going to have a bin folder that
12:36 - has the same subfolders and if you put
12:40 - those into a jar for distribution your
12:42 - jar file will maintain that package
12:45 - hierarchy within it so if you look at um
12:49 - if you look at code in Java or you look
12:52 - at um a source like the contents of a
12:54 - jar file you'll often be perplexed
12:56 - because you see stuff like com and or
12:59 - and you kind of think what what's common
13:01 - or what do they mean but it's really
13:03 - very simple it's just a reversed website
13:05 - name and that's all it is just basically
13:07 - just a folder um and that's all there is
13:10 - to it uh so that's it for this tutorial
13:13 - uh we got through it in spite of
13:14 - doorbells and dog sparking and in the
13:17 - next tutorial um I'm going to show you
13:20 - the basics of using generics in Java
13:24 - which uh there's something that you
13:26 - don't need to use for your own classes
13:28 - very often but you often need them to
13:30 - use existing classes so uh we'll look at
13:33 - that in the next tutorial and you can
13:35 - find the source code for this tutorial
13:37 - on Cave of programming. comom so until
13:42 - next time happy coding
13:49 - [Music]