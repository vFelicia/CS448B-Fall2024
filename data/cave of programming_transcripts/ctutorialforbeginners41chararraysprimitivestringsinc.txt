00:01 - [Music]
00:13 - [Music]
00:17 - hello this is John from Cave of
00:19 - programming. comom in this tutorial
00:22 - we're going to look at Char rays in C++
00:25 - this is something that I really should
00:26 - have mentioned earlier in the course and
00:28 - I was kind of reminded to mention here
00:30 - because we can do some interesting stuff
00:32 - with pointers and Char arrays but first
00:35 - I need to show you what a Char array is
00:37 - and this is quite important in
00:39 - C++ uh so we've seen that before you can
00:43 - um Define strings of text in C++ like
00:46 - this let's say string text equals
00:49 - hello and we can output it with seal
00:52 - like this text
00:55 - endler let's run that so we've seen this
00:59 - previously um in this tutorial series
01:02 - C++ for complete beginners um but we can
01:05 - also actually um store text in an array
01:08 - of chars so we've seen the Char type
01:10 - before it's um it's one by long and it's
01:13 - often used for storing characters from
01:16 - the asy character set we've seen that
01:18 - previously um but we can have an array
01:20 - of chars let's call it text
01:24 - array and we've seen as we've seen
01:26 - before you could initialize that using
01:29 - this kind of syntax and we put the
01:32 - characters that we want to put in there
01:34 - in single quotes like
01:38 - this might as well add on the o now I've
01:41 - come this far so let's let's run that
01:43 - that also works and see how it we'll
01:46 - output it as you'd hope that it
01:49 - would um but there's a shortcut here
01:52 - because instead of doing this we can
01:53 - just put the text in double
01:55 - quotes and C++ then will happily put
01:59 - these separate characters into the Char
02:02 - array so that also works and it's it's
02:04 - actually very common to do this in
02:07 - C++ sometimes it's more useful to store
02:10 - characters in in a Char array like this
02:14 - um in a in a what you could call A
02:16 - Primitive string than it is to use the
02:18 - string class which um which I've showed
02:22 - you
02:23 - previously now let's let's iterate
02:25 - through this with a four Loop because
02:26 - there's a bit of a surprise here let's
02:28 - say 4 in I equals not I less than and
02:33 - we'll use size of to get the size of the
02:35 - array size of
02:38 - text and
02:42 - i++ and let's output the characters one
02:44 - by one so C
02:46 - out and
02:49 - text I and then I'll have a flush
02:53 - there so if we run
02:56 - this um what we get is well this this
02:59 - looks like would expect but um what
03:03 - about if we output the index as well cuz
03:05 - actually that's going to make it clearer
03:07 - let's try
03:09 - that so I'll put some punctuation in
03:11 - here we'll have each character on a
03:12 - separate line and now if we run
03:16 - it yeah if I get the syntax right as
03:19 - well so I need this put to operator
03:22 - there okay let's try
03:25 - that so we see that um I is run from 0
03:30 - to 5 that must mean that size of is
03:32 - returning six so that we've iterated
03:35 - from I uh starting at nor all the way up
03:38 - to five and then when it gets to six it
03:40 - says okay I is no longer less than um
03:44 - six is no longer less than size of text
03:48 - and it stops so size of text is actually
03:51 - returning six even though there's only
03:54 - five characters in the string and we can
03:56 - see that the six character here at
03:59 - position in index 5 remember we start
04:01 - the indexes at zero so that's why the
04:03 - six index is five is it appears to be
04:07 - blank nothing's PR printing there but we
04:09 - can find out what it is if we put a cast
04:11 - to an INT in front of this character so
04:15 - if we run this now we actually find that
04:18 - the last character in the strings are
04:20 - zero and we call this the null
04:22 - Terminator um null string
04:25 - Terminator um and the the reason it's
04:28 - there is it's just so so that it's a way
04:31 - of letting um it's a way of allowing a
04:34 - program to know where the string
04:36 - actually ends so um there's an invisible
04:40 - character in the string and that was
04:42 - created just by virtue of the fact that
04:44 - we' put this in double quotes the double
04:46 - quotes append this zero value to the
04:49 - string which doesn't print with see out
04:52 - but it's there and C++ can use it your
04:55 - program can use it to find out where the
04:58 - string actually stops so the length of
05:00 - this string array is actually six even
05:03 - though there's only five visible
05:06 - characters let's um let's maybe put this
05:10 - back out it was to start
05:13 - with um and that means that we could
05:16 - Loop through the string with a while
05:18 - loop if we wanted to not that that's
05:21 - necessarily a useful thing to do but
05:22 - actually sometimes it is uh occasionally
05:25 - so let's let's try that let's say um are
05:29 - use let's say int k equals
05:33 - not and I'm going to Loop while true so
05:36 - let's create an infinite Loop here and
05:39 - let's do c
05:43 - out
05:46 - K in fact let's let's just start put
05:48 - everything on one line cuz it's going to
05:50 - be it'll look a bit nicer let's say see
05:52 - out
05:54 - text and in Brackets here I'm going to
05:56 - put
05:57 - K and flush like that now how do we know
06:02 - when to stop this Loop let's increment K
06:07 - down here so we could do k = k + 1 but
06:12 - you might remember that to increment an
06:14 - integer we can also do k++ and that will
06:17 - just add one to the value of
06:20 - K and now we need to stop the loop when
06:23 - we reach that n Terminator so let's put
06:26 - up here if K is equal to zero sorry if
06:32 - um
06:33 - text
06:36 - k equals zero then we need to stop the
06:40 - loop we can do that with a break I like
06:42 - to write it like this so I like to put
06:44 - the brackets into the if and put
06:48 - break but just so you know if you've
06:51 - only got one line in your if you can
06:54 - miss out the brackets I think that's
06:56 - quite confusing especially since if you
06:58 - get the indentation and you type more
07:00 - stuff down here you know like this you
07:03 - can end up thinking that this is part of
07:04 - the if but it's not the if only applies
07:07 - to the first line so I like to put the
07:09 - brackets in but you can write it like
07:12 - that and that will work let's leave it
07:14 - like this for the moment although I I
07:16 - wouldn't I don't normally like to do
07:17 - that uh so we're going to start k at not
07:20 - we're going to loot while true if um the
07:25 - the character at position K in the in
07:27 - the Char string is zero we're going to
07:30 - break from the loop that means we'll
07:31 - stop the loop and we won't execute this
07:35 - but if it isn't zero then we'll carry on
07:37 - we'll output the character and then
07:39 - we'll increment K let's run
07:43 - this and we find we've got hello down
07:47 - here so it works so to practice this um
07:51 - I'd recommend doing these things first
07:53 - um create a um Char string and output it
08:01 - then output all the chars with a for
08:06 - Loop then output all the chars with a um
08:13 - while true
08:15 - Loop and uh just to kind of try to fix
08:18 - that in your mind about how this
08:21 - works uh one thing I'll say which I'll
08:23 - repeat later on is that um if you do all
08:25 - the exercises in these videos you'll
08:28 - you'll sort of have a lot of stuff in
08:30 - your memory that will be there even if
08:32 - you can't instantly recall it but it
08:34 - will be there somewhere and uh you won't
08:37 - actually feel completely easy with C++
08:39 - until you've written lots of programs of
08:41 - your own and we're going to finish this
08:43 - course by writing one little complete
08:46 - program but um you'll need to invent
08:49 - programs of your own to write and uh
08:51 - have a go at writing them to really fix
08:53 - to really feel easy with this
08:55 - nevertheless if you do do the exercises
08:57 - it will help tremendously because when
08:59 - you come to writing your own programs at
09:02 - the very least you'll kind of know what
09:04 - kind of thing you need in there even if
09:06 - you have to Google for the exact syntax
09:08 - so I'll leave it there for this tutorial
09:10 - and until next time happy coding
09:20 - [Music]