00:00 - [Music]
00:17 - hello this is John from Cave of
00:20 - programming. comom this is the fifth
00:23 - tutorial in our series of beginner Java
00:28 - tutorials and in this Tut we're going to
00:30 - look at for
00:32 - Loops um I'm going to create a new Java
00:36 - project in Eclipse as
00:38 - usual and I'm going to call this
00:40 - tutorial
00:42 - five click next um yes and
00:46 - finish and I'm going to create a new
00:49 - class I'll call this application doesn't
00:53 - really matter as long as it's got um a
00:55 - capital letter um at the start there
00:58 - click finish I will create a main method
01:02 - here by typing main control space and
01:04 - hitting return and I didn't really
01:07 - explain this properly last time but um
01:11 - if you've got badly formatted code like
01:14 - this if you just press control shift and
01:17 - f that will automatically format your
01:20 - code for you or if you if you forget the
01:23 - shortcut you can also just go to just
01:26 - right click and go to source and go to
01:29 - format
01:31 - okay so this is a runnable
01:35 - application and I'm going to type here
01:38 - the keyword
01:40 - for and uh I'm going to have opening and
01:43 - closing round
01:45 - brackets um which are going to um
01:47 - contain the conditions that control how
01:50 - many times the loop will execute for and
01:53 - then I'll have opening and closing curly
01:56 - brackets which will
01:58 - control uh well which is where we will
02:00 - put the code that we want to
02:03 - execute um the reason I'm getting an
02:05 - error here is because um inside the
02:08 - round brackets I need at
02:11 - least two semicolons like
02:15 - this um why you'll see in a minute and
02:19 - I'm going to type
02:21 - system.out.println
02:23 - and I'll just put hello in there so that
02:28 - we've got some code to execute
02:31 - and if I execute this it's just an
02:34 - infinite Loop that will go on until I
02:36 - stop it with the terminate button
02:39 - here now what this actually is is um
02:43 - these semicolons
02:45 - divide um the stuff in here into three
02:48 - sections and in the first section I can
02:52 - um the first section contains code that
02:55 - executes before the loop starts so
02:58 - before this when actually be printed in
03:01 - this case and in there I can declare and
03:04 - initialize a loop counter variable I can
03:07 - say
03:08 - int um I uh is
03:12 - traditional equals
03:15 - zero and then in the second the second
03:18 - Clause here is um a condition and as
03:24 - long as this condition is true the loop
03:27 - will execute so I could say for example
03:30 - I less than five and as long as I is
03:34 - less than
03:35 - five um this Loop will run and here this
03:40 - is a condition that will be executed
03:43 - once after every iteration of the loop
03:47 - um so I could put I
03:50 - equals yeah equals I + one so I'm saying
03:55 - um take the value of I add one to it and
03:59 - then stuff it back in I itself so that
04:02 - with every repeat of the loop I will be
04:05 - incremented and a Shor hand way of
04:08 - increasing I by One Is to type I
04:13 - ++ which is very handy um so now we've
04:17 - got kind of a standard for Loop and if I
04:20 - run that it will execute five times so
04:24 - the first time I is zero and then uh the
04:28 - conditions checked I is less than five
04:30 - yes so this is printed out and then this
04:33 - is executed so now I is
04:36 - one um this is not executed again this
04:39 - is only executed before the loop starts
04:42 - for the first time so what happens next
04:45 - is this is checked I is less than five
04:48 - yes because it's one so this is printed
04:50 - again I is
04:52 - incremented um I is checked again this
04:54 - is printed out and so on until I is
04:56 - equal to five and then this is no longer
04:58 - true and the loop then will stop and it
05:02 - will not go into here it will just um
05:06 - stop
05:08 - um there's um there's one other
05:12 - interesting thing that I'd like to show
05:15 - you here um that we'll maybe get into a
05:17 - bit more later on um if I want to print
05:20 - out the value of I here I can say well I
05:24 - could say for example um I the value of
05:28 - I
05:30 - is and just add concatenate I to it and
05:35 - I will be
05:36 - automatically changed into a string in
05:38 - effect and uh appended to this string
05:42 - and we'll get this but there's another
05:44 - way of doing this um that you will
05:46 - definitely come
05:48 - across um instead of print Ln I can use
05:51 - print
05:53 - F
05:55 - and this is a method that
05:58 - requires I have to pass two what we call
06:01 - arguments to it and the first argument
06:04 - is a string a format specifier and the
06:07 - second argument
06:09 - is um is a value um to to fill in the
06:14 - format specifier I know this is sounding
06:16 - like gobbley go in fact there can be
06:19 - there might be many
06:20 - arguments um but what is a format
06:24 - specifier well so the format specifier
06:27 - is a string that can contain special
06:30 - characters special symbols actually that
06:32 - will then be replaced by the numbers or
06:37 - variables that you have here and I'm
06:39 - just going to show you one for this
06:41 - tutorial so the format specifies begin
06:44 - with percent and they end in a letter
06:47 - and the letter for an integer that you
06:49 - need is D so percent d means okay print
06:55 - this string but replace percent d with
06:59 - the value of the integer specified here
07:02 - after the comma every time and if I run
07:06 - this um you get this output and why is
07:10 - it all on one line well because unlike
07:13 - print Ln print F does not print out a
07:18 - invisible new line character by default
07:21 - so it doesn't make the output go onto a
07:24 - new line and that's sometimes very
07:26 - useful um but other times it's not and
07:30 - if you actually want to print a new line
07:32 - here there's two ways you can do it one
07:34 - one way is you can have a just a blank
07:36 - sis out here so I could type sis out
07:39 - control
07:40 - space and that will have the desired
07:42 - effect or I'll get rid of that with
07:44 - control
07:46 - D I can type another special character
07:49 - well special special character sequence
07:51 - here back sln which means new
07:56 - line um this is a lot to digest but um
08:00 - try it in your own program see if you
08:02 - can get this to work um remember percent
08:05 - D just gets replaced with the value of
08:07 - the variable you specify here and sln
08:11 - just means print a new line I could
08:13 - print I could actually put um sln
08:16 - anywhere if I want it I could have a sln
08:18 - here or whatever doesn't matter doesn't
08:20 - have to be at the
08:22 - end so um that's it for this tutorial
08:28 - um uh uh I hope um you can get your head
08:31 - around full loops and as always I advise
08:35 - not pondering about it for too long but
08:39 - just try typing it out and see if you
08:41 - can get it to work and see what errors
08:44 - come up and fix them and get your Loops
08:47 - working and because programming is like
08:50 - learning a language as I keep saying
08:53 - so until next time um enjoy uh using for
08:59 - loops and I hope you'll join me again
09:02 - for the next tutorial uh when we will be
09:05 - looking at conditionals a bit more and
09:08 - the if statement and until then Happy
09:10 - [Music]
09:27 - coding