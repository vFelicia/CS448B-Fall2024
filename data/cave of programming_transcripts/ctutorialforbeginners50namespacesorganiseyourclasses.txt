00:01 - [Music]
00:13 - [Music]
00:16 - hello this is John from Cave of
00:19 - programming. comom in this tutorial
00:20 - we're going to take a look at Nam spaces
00:23 - in C++ namespaces are a way of um
00:27 - avoiding conflicts between classes or
00:31 - even variables uh Global variables that
00:33 - have the same name we'll take a look at
00:36 - how that works here so I've got my Hello
00:38 - World project set up here I'm going to
00:40 - right click it and go to new
00:43 - class and uh I won't put this in the Nam
00:46 - space let's get rid of this this one I
00:47 - typed earlier let's create it without a
00:49 - name space and I'm going to create a
00:51 - class called
00:53 - cat so um oh yeah I should have typed up
00:56 - here actually first then it will fill in
00:59 - header and source for me but anyway
01:01 - let's create that class and uh I'll just
01:04 - give it one method just to kind of have
01:07 - it do something so let's say void speak
01:12 - here and of course the implementation
01:14 - goes in the CPP file so we can say void
01:19 - cat cat colum colum
01:22 - speak and let's have just like a see out
01:25 - in there
01:27 - meow which is what
01:30 - cats uh usually say although if you
01:33 - listen to my sister they have entire
01:36 - conversations in English but I I
01:38 - disagree with her there let's include
01:40 - the um let's include the uh header
01:45 - include iio stream and we've already
01:48 - seen uh examples of using a namespace
01:51 - because after including I stream I think
01:53 - in most modern C++ uh implementations
01:57 - you now have to type using name space
02:00 - standard name spaces were quite a late
02:02 - addition to C++ so it's possible you
02:05 - could have a compiler that doesn't
02:07 - require this but um in all the C++
02:11 - compilers I've seen in the past few
02:12 - years you now have to do this after
02:15 - including I stream I
02:17 - stream so that that should work and in
02:20 - our um main function here we can now
02:24 - include the cat header let's say include
02:30 - cat. H and now we can say cat cat and
02:36 - cat. spe so we've seen all this before
02:38 - let's just check that that is working
02:40 - because I like to make sure before I
02:43 - proceed any
02:46 - further um because I make mistakes so
02:50 - easily um I should have put double
02:53 - quotes here on some compilers it won't
02:55 - make any difference uh on some compilers
02:58 - um angle brackets and double quotes are
03:00 - the same for your includes but on others
03:02 - like apparently this one the double
03:04 - quotes means a local include like this
03:07 - and the angle brackets as we've seen
03:09 - before means an include from a standard
03:11 - location let's try that again hopefully
03:13 - this will work and I'll run it there we
03:16 - go so it says
03:18 - meow um now what if you want to have
03:22 - another class with the same name that
03:24 - might occur for example because uh let's
03:27 - say you might have your own
03:28 - implementation of string which already
03:30 - exists in the standard libraries or uh
03:34 - you might um you might want to implement
03:38 - something that already exists in include
03:41 - files that you've already got in your
03:43 - project so whatever the reason sometimes
03:47 - you get a clash between Class names and
03:49 - name spaces will help you avoid that so
03:51 - let's see how that works I'm going to
03:54 - rightclick my
03:56 - project and let's create a new let's
04:00 - create a new class and I'm going to call
04:03 - it cat again but I'm going to put it in
04:06 - a different file so that we don't at
04:08 - least we don't have a clash with the
04:09 - file names in because I'm putting all my
04:11 - um files in one folder here which you
04:13 - don't have to do but I am doing let's
04:16 - call this animals. H and the source file
04:20 - CPP can be animals. CPP but again it's a
04:23 - class called cat and I'm going to it
04:26 - says class already exists so it won't
04:28 - even let me Define it
04:30 - but we can get around that by using a
04:33 - namespace uh your IDE will probably
04:35 - provide you with a way of doing this but
04:37 - we're also going to look at typing out
04:38 - the namespace by hand so the fact that
04:41 - I've already got a class called CAP
04:42 - means I can't have another one but what
04:44 - if I do want one what if I just happen
04:46 - to include some stuff that has a C class
04:49 - in it and I want another one I want my
04:50 - own one let's tick namespace here and
04:54 - let's type in here well we we need to
04:56 - give our name space a name and it can be
04:59 - what you want um I'm going to just give
05:03 - it my initials here so like if you're
05:05 - just creating a load of classes for your
05:07 - own use you're not going to distribute
05:10 - them then uh giving your name space your
05:14 - own name or um like uh your initials or
05:18 - something makes perfect sense if you're
05:19 - going to distribute your classes you
05:21 - might want to give it some better name
05:24 - space like it could be the name of a
05:25 - company or it could be um uh something
05:29 - that describes what's in the namespace
05:31 - like you could call it Graphics or
05:33 - something like that but the things it
05:35 - mustn't have any spaces in it and uh I
05:38 - like to follow the convention that it's
05:40 - going to be lowercase and usually just
05:42 - one word but if there's multiple words
05:44 - I'll capitalize the first letter of each
05:46 - subsequent word like we do with
05:48 - variables so let's put this in a names
05:50 - space called jwp click finish there and
05:53 - we can see what's actually happened is
05:55 - my new cat class here it's got in the
05:59 - header file here we've got namespace
06:01 - keyword then the name that we gave to
06:03 - the namespace and curly brackets which
06:06 - entirely enclos the cat the the cat
06:08 - entirely enclos the
06:10 - class and usually between curly brackets
06:13 - you indent stuff that goes between them
06:15 - but because then everything's going to
06:18 - be in a name space and there's only
06:19 - going to be one name space in the file
06:21 - usually although you can have multiple
06:23 - in this case the auto format has not
06:25 - indented the stuff between these curly
06:28 - brackets and that's purely uh just
06:30 - because otherwise everything in the file
06:32 - would be indented if we look at the
06:34 - implementation we've got the same thing
06:35 - here so animals. CPP again name space
06:39 - and the name and curly brackets which
06:40 - enclose everything in the
06:42 - file we can put our other cat in a name
06:45 - space as well uh let's first let's first
06:49 - go to this cat that I just defined give
06:51 - that a speak method as well let's say um
06:55 - void speak again
07:00 - and in animals. CPP I'm going to say
07:04 - here void cat call and call and
07:07 - speak let's give this let's make this do
07:09 - something different to the other speak
07:11 - in the other cat class I'm just going to
07:13 - make it say like an aggressive cat noise
07:18 - and we also need to include up here
07:21 - somewhere we need to
07:23 - include I
07:26 - stream and we need using name space
07:31 - standard which is an example of using a
07:33 - nam space so far we've just been typing
07:36 - without going into what it actually is
07:39 - um but we'll get on to that in just a
07:40 - second so now we've got two cat objects
07:44 - if um let's yeah let's put this cat in a
07:47 - namespace so in cat. h I'm also going to
07:50 - put this in a
07:51 - namespace so um if we go back to our
07:54 - main project I think this still compiles
07:56 - let's just run it make sure so this is
07:58 - still working but what I'm going to do
08:00 - is I'm going to go to C.H and around the
08:03 - class here not around these
08:05 - pre-processor directives we want to
08:07 - leave those alone but around the class
08:10 - and any other classes that are defined
08:12 - in this file usually you have one class
08:15 - in a header file and the implementation
08:17 - for one class in a CPP file but you can
08:20 - Define lots of classes in a header file
08:23 - it's possible and you do see it um so
08:26 - whatever you define in this headit file
08:27 - whatever you want to be in the namespace
08:29 - you can surround with name space let's
08:33 - put it in a name space called I've got
08:36 - one called jwp let's call this um I
08:41 - don't know let's call
08:43 - it cats so just just for a silly example
08:47 - here and I'm going to close the
08:50 - namespace there and we'll have the name
08:52 - the same Nam space also needs to be
08:54 - around the
08:55 - implementation so around the
08:57 - implementation here not around includes
09:00 - again this is a pre-processed directive
09:03 - uh we've got two of them here and we
09:05 - don't want to put it around this using
09:06 - namespace standard but around the
09:09 - implementation I'm going to put um this
09:12 - namespace declaration here let's save
09:15 - all that now if I try to compile the
09:18 - program we're going to get um an error
09:20 - so if I do build these little warning
09:23 - icons will turn into
09:25 - errors that's because to use this cat
09:27 - now we have to say what namespace we
09:29 - want to use um what namespace we want to
09:32 - use like what Nam space do we get this
09:34 - cat from uh so to do that I've got two
09:37 - namespaces remember now namespace cats
09:40 - with a cat class in it and namespace jwp
09:44 - with another cat class in it you can
09:46 - have whatever you want in a namespace
09:48 - but I'm I'm giving these classes the
09:50 - same names just just to underline the
09:53 - fact that Nam spaces are designed to
09:55 - avoid conflicts between identically
09:58 - named classes but that doesn't that of
09:59 - course doesn't mean that you've got to
10:01 - have identically named Cass classes in
10:03 - different Nam spaces that will be crazy
10:05 - it's just that it can happen and
10:07 - namespaces help sort that out so let's
10:10 - say um let's say we're going to use the
10:13 - cat's namespace here then we can say
10:17 - using at the top of the program using
10:20 - namespace cats
10:23 - semicolon and now let's try to build
10:26 - this project hopefully it will work
10:29 - so the error goes away and if we run
10:31 - this it says meow our other name space
10:34 - is called jwp my initials so let's
10:38 - change this to using space j namespace
10:42 - jwp and let's run
10:44 - this and now whoops got some sort of
10:48 - error there let's not run it um let's
10:51 - see what the problem is here so it says
10:54 - um error expected namespace name oh yeah
10:57 - um well I haven't included the header
11:00 - file so uh without the header file it
11:03 - doesn't know the namespace exists so
11:04 - let's also include
11:06 - here let's include the header file in
11:09 - which we Define that namespace which is
11:11 - animals. H so let's put that in animals.
11:15 - h now we should be good to go let's run
11:20 - it and it says because this time it's
11:23 - getting the cut class from the jwp
11:27 - namespace instead of the cat's namespace
11:30 - so two identically named classes in
11:33 - different namespaces and we can select
11:35 - which one we want by saying which
11:37 - namespace we want up
11:39 - here what would we do if um if we want
11:42 - to use both classes which again could
11:44 - occur because let's say you have your
11:46 - own implementation of string but you
11:48 - also use the string from the standard
11:51 - namespace in your program so you want to
11:53 - differentiate between the two instead of
11:56 - or or also in addition to if you prefer
11:58 - these use using namespace statements you
12:01 - can say you can do stuff like this we
12:03 - can say um
12:06 - jwp cat cat
12:09 - 2 and let's say cat. speake or if we
12:13 - want the cat from the other namespace
12:15 - sorry we've got to have a double colon
12:16 - there actually double the name space
12:19 - name followed by a double colon and then
12:20 - the class or we could say um cats colon
12:27 - colon cat cat 3 let's
12:31 - say and Cat 3 dope also I meant to make
12:35 - this cat 2
12:36 - Dope okay so um besides importing all
12:40 - the classes in a namespace using using a
12:44 - using statement you can also explicitly
12:47 - pick out classes from particular
12:49 - namespaces using this kind of syntax the
12:52 - namespace name followed by a double
12:54 - column let's run this check it works so
12:57 - we've got
12:59 - coming from this cat and then the jwp
13:01 - namespace cat also says so that's this
13:04 - one because we say using namespace
13:07 - jwp up here and meow is is coming from
13:11 - this because that's the cat from the
13:14 - cat's name space different
13:16 - object so if we've got a using statement
13:19 - in here and you use your class without
13:21 - any qualification it's going to pick up
13:24 - the class from uh whatever you specified
13:27 - in or using namespace but if you don't
13:29 - have that um then you need to pick out
13:34 - your classes using this syntax here so
13:37 - like if if I didn't have this in here
13:40 - now only our first C is going to give us
13:43 - an
13:44 - error because here we haven't specified
13:46 - a namespace and uh C++ doesn't know what
13:50 - default to use CU we haven't said using
13:53 - namespace such and such here let's put
13:55 - that back
13:56 - in uh you can Define very in your
13:59 - namespace if you want we haven't really
14:01 - looked at Global variables actually but
14:06 - um in fact I'm not sure that this is
14:09 - really a good place to look at it here
14:10 - let's take a look at a constant because
14:12 - that's a bit simpler so in cat. h we
14:15 - could have a global constant like
14:18 - const um let's
14:22 - say cat I don't know cat name
14:27 - equals uh Freddy this is a ridiculous
14:30 - example let's say con string cat name
14:32 - equals Freddy this is a ridiculous
14:35 - example of a constant but just to
14:38 - illustrate the point and we we're also
14:40 - going to need this we're also going to
14:42 - need to use um IR stream in here but
14:44 - actually what we could do is go to cat.
14:47 - CPP and if we cut this out
14:50 - here and put it in
14:53 - C.H below the defines
14:56 - here then that's good for for the string
15:00 - in here and it's also good for SE out in
15:03 - here because remember when a program is
15:06 - compiled C.H is going to be literally
15:08 - included in this file in a copy of it
15:10 - before it's compiled so it doesn't
15:13 - matter whether we put um include I
15:15 - stream up here in the CPP or in the
15:18 - corresponding Ed file which the CPP
15:21 - includes let's try that and um I need
15:24 - the semicolon there
15:27 - whoops I'm also going to declare another
15:31 - constant um let's give it the same name
15:33 - um just cuz we can in animals. h let's
15:37 - put a constant in here as well and let's
15:40 - call this titles and again um I'll take
15:44 - the IR
15:46 - stream from animals. CPP put it at
15:49 - animals. H and we need there using
15:52 - namespace standard as
15:57 - well so I think that I think that all
15:59 - looks good let's save everything and try
16:02 - to run it so it builds we're fine now in
16:06 - our our main file here we could refer to
16:10 - the to these constants via their name
16:12 - spaces so we could say um what I call it
16:16 - cat name we could say uh jwp colon colon
16:20 - cat name
16:24 - endler and we can also say of course if
16:27 - we want
16:30 - um animals. cat name that's our other
16:33 - Nam space I
16:36 - think we've got J no we've got jwp and
16:38 - cats getting confused myself those are
16:40 - our two name spaces
16:43 - yeah okay and if we refer to cat name
16:46 - without any namespace in here well
16:49 - because we've got a using namespace
16:52 - jwp if we don't specify the namespace
16:55 - it's going to default to this let's run
16:58 - this
16:59 - and we can see that we've got titles
17:02 - frdy and the default is titles because
17:05 - of
17:06 - this okay that's that's it for this
17:08 - tutorial uh so to practice this um I
17:12 - would recommend got got errors down here
17:15 - which is a bit annoying but I don't
17:16 - think they're real cuz it actually
17:18 - builds without errors yeah that it's
17:20 - just Eclipse being weird okay so um to
17:24 - practice this um I'd recommend just
17:27 - doing what I've done there um you don't
17:29 - have to Define classes of the same name
17:31 - because um I just did that to
17:33 - demonstrate that name spaces avoid
17:35 - collisions but create let's say two
17:38 - classes put one in one name space and
17:41 - the other in in another name space and
17:44 - then try to do two different ways of
17:46 - referring to the namespace in your main
17:49 - function try using and try try this kind
17:53 - of syntax as well with a double column
17:55 - and remember the to define the namespace
17:57 - it is really simple you just need name
18:00 - space such and such and curly brackets
18:03 - surrounding your class definition and
18:06 - also your class
18:08 - implementation so I hope you'll have a
18:10 - good at that we're almost at the point
18:12 - now where we can start putting together
18:15 - like an example complete program uh the
18:18 - program that I have in mind is not going
18:19 - to use everything that we've seen but
18:21 - it's going to use uh a first selection
18:24 - of everything but we've still got some
18:26 - more stuff to cover before we get to
18:28 - that that point um so we'll carry on for
18:31 - a few more videos before we get into
18:34 - trying to create an actual program but
18:37 - we will get on to that you know an
18:39 - actual program that does something we
18:40 - will get on to that in time so until
18:43 - next time happy coding
18:54 - [Music]