00:04 - [Music]
00:17 - hello this is John from cave of
00:20 - Programming TOCOM and this is a tutorial
00:22 - on string builder string buffer and
00:25 - string formatting in Java and we're
00:29 - gonna need these concepts before we look
00:31 - at things like the dot equals and the
00:35 - two string methods in future tutorials
00:39 - so I've got a main method in Eclipse
00:41 - here and I want to start by remark that
00:45 - in Java it's common to do things like
00:48 - this I create a string I call it info
00:51 - let's say and I set that equal to an
00:54 - empty string and I'll say info plus
00:59 - equals my name is Bob and then let's
01:07 - have info plus equals and then just an
01:14 - empty space just a space and then info
01:17 - plus equals plus equals I a builder so
01:26 - if I output this text now it's about the
01:29 - semicolon there with a sis out info it's
01:33 - gonna say my name is Bob space I am a
01:36 - builder now this is actually quite
01:40 - inefficient and the reason for that is
01:42 - that in Java strings are immutable once
01:47 - you've created a string you can never
01:50 - change it and it looks here as though
01:54 - you're changing the string you start off
01:56 - here with a string that's equal to just
01:59 - nothing and here it seems that you're
02:03 - appending to it some text and some more
02:07 - text and more text and outputting it but
02:09 - in fact what is happening is info is
02:13 - initially set to an empty string and
02:16 - it's and this empty string is it's going
02:20 - to be a empty string for the rest of its
02:22 - life in this program what's something
02:24 - here is we're creating a new string made
02:29 - from this empty string
02:30 - Plus this text and we're reassigning the
02:34 - info variable to it and here we are
02:37 - creating a new string made from all the
02:39 - previous text this and this where we are
02:43 - and this space and then we're
02:47 - reassigning that to info so basically
02:50 - every time you do this you're not
02:52 - changing the original string you are
02:55 - creating a new string which is somewhat
02:58 - inefficient and if you've just got a
03:01 - little program and there's just a little
03:03 - bit of this going on it doesn't matter
03:04 - but if it's a big program or you're
03:06 - doing this in a in a loop let's say well
03:09 - you're doing it in lots and lots of
03:11 - different places then this could slow
03:15 - down your program or maybe use a lot of
03:16 - memory so to get around that we've got
03:19 - the string builder class and the way
03:23 - string builder works is let's first put
03:27 - a comment on the air saying in there
03:30 - ficient it's only fishing got one N or
03:34 - two ends in it I think one okay now the
03:38 - proper way to do this is we create a
03:40 - string builder object I'll call it SB
03:42 - set that equal to a new string builder
03:47 - and you don't have to supply an initial
03:52 - value for it but you can if you want in
03:54 - the constructor here so this string
03:57 - builder is going to be initialized with
03:59 - this string and now to add text to it I
04:03 - can say SP dot append and that stuff my
04:08 - name is su and SB dot append space like
04:21 - this SP dot append I am a lion tamer and
04:30 - what I'm doing here is this string
04:33 - builder is having text appended to it
04:35 - but in doing the append we're not
04:39 - creating a new string builder were just
04:42 - literally modifying the contents
04:44 - the existing stringbuilder which is more
04:47 - efficient than doing this while we
04:50 - create a new string every time and
04:52 - finally to get my text back I can do SB
04:55 - dot two strings so if I do let's say sis
04:58 - out SB dot two string that will get me
05:03 - the text that this string builder now
05:06 - contains so if I run that it's pretty
05:09 - much the same as you get from doing this
05:11 - except that it's more efficient that's
05:13 - about a comment here more efficient
05:17 - efficient and that's really the whole
05:20 - point of string builder it's really just
05:22 - to give you a more memory efficient way
05:24 - of appending text and there's nothing
05:27 - really more complicated to it than that
05:29 - there is however a kind of shortcut you
05:33 - can use because the append method
05:35 - returns a reference to the stringbuilder
05:39 - object itself meaning you can use method
05:43 - chaining and what that looks like is I
05:45 - can say string builder just call this s
05:49 - equals new string builder and you can do
05:55 - stuff like s dot append my name is I
06:04 - don't know Roger and then you can say
06:09 - dot append space or you could put string
06:16 - variables in here in this and these are
06:18 - pens of course and depends I a sky diver
06:28 - exciting professions and again it's just
06:31 - the same so if I lose this out now I
06:33 - could say s not to string to actually
06:36 - get the string and if I run that the
06:40 - same again so I've formatted this in a
06:45 - way to kind of make it look nice on the
06:47 - screen but really all I'm doing is just
06:50 - chaining methods because append is
06:52 - returning a reference to
06:54 - so I can call append on it again like
06:57 - that and that's basically yet there's
07:01 - also a class called string buffer and
07:05 - string buffer is just a thread safe
07:08 - version of string builder so if you're
07:11 - doing if you're creating multi-threaded
07:13 - versions and you need a string builder
07:16 - that's safe to access from multiple
07:18 - threads well I can't say I've ever done
07:20 - this myself but apparently what you
07:23 - would need to use would be string buffer
07:26 - and string builder is historically more
07:28 - its newer than string buffer so in order
07:32 - code you'll see reference just a string
07:35 - buffer rod and string builder but they
07:37 - are exactly the same it's just that this
07:38 - is more lightweight because it's not
07:40 - thread safe so that's that and what I
07:44 - also want to show you in this tutorial
07:45 - is some stuff about advanced string
07:49 - formatting so we've already seen that in
07:52 - strings let's put a comment here
07:56 - formatting in strings you can do stuff
08:00 - like I could embed tabs and backslash n
08:06 - init newline characters by just using
08:10 - back slashes well so for example I can
08:15 - say here is a is some text and I could
08:24 - say backslash where are we I've got a
08:29 - new keyboard which is I'm still not used
08:31 - to backslash n so that's the tab that
08:36 - was a tab and let's have a new line here
08:43 - /n that was a new line so if we've
08:47 - already seen in previous tutorials I
08:49 - think that backslash T and backslash n
08:52 - which are quite handy but /t is the tab
08:54 - character backslash n a newline
08:56 - character and you can also control new
08:59 - lines of course by println will output a
09:03 - new line after the end of
09:05 - text while print without the L end won't
09:09 - so if I run that if there is some text
09:13 - after this sis out more more text then
09:21 - if I just do print I'm going to get this
09:24 - text on the same line
09:26 - whereas with Ln it would be on the next
09:30 - line like this so that's pretty simple
09:37 - but you can also use there are some
09:41 - methods that take a string format and an
09:46 - example of that would be if I do sis out
09:49 - here then I can change this from print
09:54 - Ln print line to print F print format
09:58 - and the way that works is you can have a
10:01 - string here and you can embed in it
10:06 - special formatting characters and the
10:10 - most they're two most useful maybe three
10:14 - most useful are firstly if you want to
10:17 - format a integer here in say percent D
10:21 - and I can put a I can pass this an extra
10:26 - argument with a value it could be a
10:28 - variable or just a literal value is in
10:30 - this case let's say five and what's
10:33 - going to happen is printf is going to
10:35 - look for formatting characters here and
10:38 - then for each format in character
10:40 - it's going to look for an argument here
10:42 - and it's going to put this value in here
10:47 - X so it's going to replace this percent
10:49 - D with this so D stands for
10:53 - actually I don't know but it means
10:55 - number so there's some another one in
10:59 - here total cost is such-and-such and
11:02 - then number well I say quantity is
11:10 - percent D now I've got to formatting
11:14 - fields in here two percent DS so I need
11:17 - to pass two arguments here
11:18 - let's say five and 120 and if I run that
11:25 - it says total cost five quantities 120
11:29 - and you might be wondering what the
11:31 - point of doing that is rather than using
11:32 - you know concatenation while these
11:36 - formatting characters allow you more
11:38 - control than mere concatenation would do
11:42 - so I sort of put a new line on the end
11:45 - of there because printf doesn't unlike
11:47 - println printf doesn't output a new line
11:50 - on the end and it's important to kind of
11:53 - separate this mentally so here I've got
11:55 - three characters in a ropes end D
11:56 - semicolon but the percent D is this a
11:59 - kind of self-contained formatting
12:01 - character and for every % D you've got
12:05 - in your format string this is the format
12:07 - string you're gonna have to have an or
12:10 - an argument here to replace it with so %
12:16 - D the main most useful thing you can do
12:20 - is you can if you want specify a width
12:22 - to about policin so I could say here 10
12:28 - or maybe that's this of it here and
12:31 - that's gonna mean that this this kind of
12:39 - value is out put in a field that's 10
12:42 - characters wide so if I pull out you can
12:45 - see it looks like this and you can if
12:48 - you want you can left-aligned it in that
12:50 - field by making it minus 10 like that so
12:55 - let's say you've got a loop for int I
12:58 - equals naught I less than less than 20 I
13:09 - plus plus
13:12 - and he could output here hey sis
13:16 - taste this out and I change this to her
13:18 - for a print line to a print format and
13:21 - I'll say here
13:25 - that's outputs sent to D and then a
13:33 - colon and I have some text here I don't
13:39 - really know what but some text here
13:42 - let's say and then let's just output I
13:45 - now if I run that oh yeah and this also
13:50 - put a new line here but /n if I run this
13:57 - the great thing about it is you can see
14:01 - down here that it all lines up so that
14:06 - if if I'd use concatenation here because
14:08 - single digits obviously take up less
14:11 - width and double digits this text will
14:14 - become misaligned when I got to 10 but
14:17 - here because I've said okay print them
14:19 - or using a width of 2 it's gonna all be
14:22 - nicely aligned and that's kind of what
14:25 - it's useful I could also of course put a
14:27 - negative in there and then get the
14:30 - numbers to align to the left if I want
14:32 - there we go
14:35 - so the way to read this is there's
14:38 - always a percent and at the end there's
14:40 - a single carrot so that specifies what
14:42 - kind of thing you're formatting here on
14:45 - formatting integers represented by D for
14:47 - some reason and in the middle you can
14:49 - have extra kind of Flags specify other
14:52 - things about how to format it now
14:57 - another really useful one is if you just
15:00 - want to put strings in there you can use
15:03 - percent less so sent s and then I've got
15:06 - a supply another argument here here is
15:09 - some text so if I run that it's gonna
15:13 - say here is some sex down here you've
15:15 - got to make sure you have as many
15:17 - arguments as you've got formatting
15:19 - characters formatting fields and
15:22 - probably the most useful of all
15:25 - is the floating-point format so if I say
15:29 - yes this out
15:32 - let see total value let's say percent F
15:40 - now % f means floating point so I can
15:43 - part for example five point six here
15:48 - let's have a new line there as well part
15:52 - /n and I'm going to put some comments on
15:58 - here so formatting integers and here
16:05 - let's say formatting formatting floating
16:10 - point values and if I run that so I've
16:17 - got an error here cuz I forgot to change
16:20 - that to print F so if I run that it's
16:25 - gonna output my my floating point value
16:28 - here with a default number with like a
16:31 - default precision but the floating point
16:34 - format is really flex port because if I
16:37 - say between the percent and the F I can
16:40 - give it the number of decimal places I
16:42 - want to use so let's say point two so
16:45 - you need a dot and a two and A two or
16:48 - however many decimal places you want and
16:50 - if I run that it's now got two decimal
16:54 - places and just really straight out if I
16:57 - have more values here makes no
16:59 - difference it's still gonna say it's
17:02 - just gonna give me two decimal places
17:03 - and you can see actually it's also
17:07 - rounding off my value so I've got five
17:10 - point six eight seven and it's because
17:13 - it's I've said output two decimal places
17:17 - it's rounding it to five point six nine
17:19 - which is really handy and you can
17:22 - combine that with a width if you want so
17:26 - there's some another one here and let's
17:29 - say just give it a value here and I'll
17:33 - have it too
17:35 - one decimal place and before the decimal
17:39 - point here I can have a separate
17:41 - whitfill that specifies how many
17:44 - characters to use to output iron so it's
17:46 - a ten and if I run that actually maybe
17:50 - I'll spit much let's say what if I've
17:54 - got one decimal place and I've got a
17:56 - three digits here in total that's going
17:58 - to take up five characters including the
18:03 - point so if I say five there it's gonna
18:07 - output with no extra space around it but
18:09 - if I have six here then and it's gonna
18:14 - write a line in this space here so the
18:17 - six the width here includes all the
18:20 - characters that are outputting so the
18:22 - ones before the decimal point the space
18:24 - of a decimal point itself and the
18:27 - characters after I've just got one value
18:30 - after the decimal point here and it's
18:33 - right aligning within that field
18:35 - and it's left putting it with spaces and
18:37 - if I want it to align it to the left
18:39 - I could put a negative there and now in
18:43 - wall the output space after so I hope
18:49 - that's reasonably clear I'm going to put
18:52 - this code on cave of programming calm so
18:55 - you can take a look at your leisure and
18:59 - in the next tutorial we're gonna start
19:03 - looking at the methods of the object
19:08 - object the object class I should say
19:11 - like for example e dot equals into
19:14 - string as I say she kind of standard
19:16 - method so you need to know about and
19:17 - after that we'll go on to the Curt stuff
19:19 - like inheritance so join me again next
19:22 - time and until then
19:25 - [Music]
19:34 - you
19:35 - [Music]