00:16 - hello this is John from king of
00:19 - programming comm in this tutorial and
00:22 - C++ for complete beginners I'm going to
00:24 - look at classes in C++
00:27 - I've actually been taking a lot tamo to
00:30 - see more C++ would need to learn in this
00:33 - course before we can make for example a
00:36 - simple graphics program and the answer
00:38 - is still quite a bit so I'm going to try
00:40 - to work through everything that we need
00:42 - before we can make something a little
00:44 - bit more interesting hopefully then a
00:45 - console mode program so I'm going to
00:49 - start from scratch here I'm going to
00:51 - create a new project I'll go to file new
00:53 - C++ project
00:55 - let's select hello world C++ project
00:59 - here and I'll call this classes and
01:04 - we'll click finish so classes are there
01:12 - a way of combining or kind of packaging
01:15 - together data and subroutines and you
01:19 - can think of them as a way of defining
01:21 - your own variable types if you like and
01:25 - these coming definitions are not going
01:27 - to make much sense just yet because and
01:30 - what class really is is kind of
01:32 - contained in how you use it so we need
01:34 - to see really how to use it and what you
01:36 - can do with it
01:38 - so let's go ahead and create a simple
01:41 - class I'm going to start by
01:42 - right-clicking a project let's actually
01:44 - just build it first and check it works
01:46 - because I always like to make sure that
01:49 - we're definitely starting with a working
01:50 - project it says hello world that's good
01:52 - and I'm going to right-click the project
01:54 - and go to new of that and I'm going to
01:58 - select I'm going to select header file
02:02 - here
02:05 - yeah let's start with the header file in
02:07 - fact the stuff I'm about to show you
02:09 - this is a quick way of doing it which
02:11 - involves selecting class here but I'm
02:13 - going to do this kind of more by hand
02:15 - than is strictly necessary in order to
02:18 - show you what's involved and I'd
02:20 - recommend it to start with you do it
02:22 - this way too so we'll select header file
02:24 - click Next and I'm going to create a
02:27 - class to represent a cat like the animal
02:30 - a cat it's going to be an extremely
02:32 - simplified model of a car needless to
02:34 - say
02:35 - but it is going to be a model of a cat
02:38 - so I need to choose a file name here for
02:40 - my header file and it's important to
02:43 - follow some kind of convention with your
02:46 - your source files and I'm going to
02:48 - follow the Java type convention here
02:51 - which is that if I create a class called
02:54 - cut I'm going to give the header file
02:56 - than they cut with a uppercase first
02:59 - letter so I'm going to say cut age
03:02 - because header files have the dot H
03:04 - extension so I'm going to start it with
03:07 - an uppercase first letter and I'm going
03:10 - to give it the same name as the class by
03:11 - intent to define let's click finish
03:14 - there so this looks
03:18 - woofs we've seen all this before this is
03:20 - just stuff that's aimed at preventing
03:22 - multiple inclusion of the same code if
03:26 - you have multiple include state includes
03:28 - directives and different files in your
03:31 - project let's also create a matching dot
03:35 - CPP file so far we've been working with
03:38 - just one dot CPP file in our projects we
03:41 - got one here called classes dot CPP that
03:44 - contains our main function
03:46 - but let's create another one now because
03:48 - we can have multiple ones in our C++
03:51 - project I'm going to right-click the
03:52 - project or the source folder it doesn't
03:54 - matter and go to new author in fact that
04:00 - option was already available in the menu
04:01 - but and that's something cuz I've
04:04 - previously selected this let's go to new
04:06 - source file under the c++ section here
04:10 - click Next and I'm going to call this
04:12 - cat again with an uppercase C dot CPP
04:16 - so let's click finish now after the
04:20 - comment here we can expand the comment
04:22 - this bonus is just a comment we could
04:24 - delete it doesn't matter I am going to
04:28 - include let's just get rid of actually
04:31 - so that we want it I'm going to include
04:33 - the header file so I'm going to say hash
04:37 - include double quotes and with op Casey
04:42 - cap dot H so we've got two files here
04:45 - we've got a header file with the usual
04:47 - if not death stuff in it that we saw
04:49 - last time we've got a CPP file that
04:52 - includes the header file in the CPP
04:57 - source file I'm going to start by
04:59 - defining a function here let's call it
05:02 - meow something save or speak let's say
05:05 - speed for each speak an empty round
05:09 - bracket sir it accepts no parameters and
05:11 - I'm just going to put the curly brackets
05:14 - in and I'm going to put a C out and meow
05:18 - which is the noise cat makes in English
05:22 - anyway so I'm using C out here but I
05:26 - can't use C out at the moment
05:28 - because I haven't included iostream so
05:31 - let's let's do that let's put that right
05:33 - at the top since it's a standard header
05:36 - will put the standard headers right at
05:39 - the top of the file before any new
05:41 - headers that we've invented and I'm
05:44 - going to say here include angle brackets
05:48 - this time because it's in a standard
05:49 - location this header file hi your stream
05:52 - and underneath the headers I'm going to
05:55 - type using namespace standard we'll take
05:59 - a look at namespaces in due course but
06:01 - we haven't seen them yet so for the
06:04 - moment just know that you need to type
06:06 - this namespaces is just a way of
06:08 - dividing up different bits of code
06:11 - basically so now we've got that in this
06:15 - speech should work now supposing I want
06:18 - to call that in my main function here if
06:22 - I was supposing I want to call speak
06:24 - let's get rid of the C out here
06:27 - I can't just call speak like this
06:31 - because the compiler hasn't seen speak
06:34 - at this point let's save it all go to
06:36 - project build project I expect to get an
06:39 - error because it doesn't know what speak
06:42 - is we need to somehow allow the compiler
06:45 - to access this speak function that's
06:48 - defined in this separate CPP file how
06:53 - can we do that well you might guess we
06:55 - can go to cut H here and we can put void
07:01 - speak in there in fact we could now that
07:06 - I think of it's certainly possible that
07:08 - we could just type void speak here we
07:10 - could do that let's say that and see if
07:13 - it builds let's build project here and
07:17 - we'll run that and it says Meowth
07:19 - so that works but you're gonna you're
07:24 - going to want to use functions that are
07:26 - defined by other people and you're not
07:28 - always going to know what the prototype
07:31 - should look like so for that reason
07:34 - we've got the prototypes and related
07:35 - functions in particular header files
07:38 - like iostream let's cut that from here
07:41 - put it in cat age so now we've got this
07:45 - kind of self-contained thing going on
07:47 - we've got a cat CPP containing some
07:50 - functions just one in this case but it
07:52 - could be lots of them and we've got a
07:55 - captor age containing the prototype for
07:57 - that function now all we have to do in
08:01 - this in this main function here is above
08:05 - there
08:05 - let's put below our include iostream
08:09 - let's just put include cat h remember
08:15 - it's got an uppercase first letter and
08:18 - let's build that project build and run
08:24 - it
08:25 - and says now so we just put the
08:29 - prototype of this function here in the
08:32 - header file and then we can include that
08:34 - wherever you want to use it and we can
08:37 - call we can call that function here in
08:42 - the main function we also included
08:45 - cutoff age here in cattle CPP and that's
08:49 - not actually necessary at the moment
08:52 - let's just delete a save everything go
08:56 - to project builds it's going to work
08:58 - fine without it but we need that for
09:00 - we're going to do in just a minute
09:03 - now C++ is a language that's built on a
09:08 - language called C I I imagine I don't
09:13 - know they're probably long discord a and
09:14 - B but C is one really took off and C++
09:19 - have extra extensions to make it what we
09:21 - call object oriented oriented object
09:24 - orientated or object oriented yeah I
09:27 - think usually you say object orientated
09:29 - actually so anyway it was common in C
09:34 - and you also still see it in C++ to
09:38 - define functions in files like they say
09:41 - you get all your kind of related
09:43 - functions for example all your functions
09:45 - connected to user input or all your
09:48 - functions connected to graphics or
09:50 - whatever and you put them all in one
09:52 - file and then you'd have a header file
09:54 - where you put all the prototypes and
09:56 - then you'd include that wherever you
09:59 - want it to use it wherever you wanted to
10:01 - use those functions that was a common
10:03 - way of organizing code in C and it's
10:07 - still often used in C++ let's just
10:09 - define another function here just to
10:11 - underline the point let's say void jump
10:18 - let's say here these are very minimal
10:21 - dummy functions of course let's say
10:25 - jumping to top of bug case and ler
10:32 - semicolon and we can just put in the
10:35 - include file here we can say for you to
10:37 - jump let's let's run that well that's
10:44 - not going to be any different from
10:45 - before but we can go to classic CPP we
10:48 - can call it if we want jump save it and
10:53 - run it and it should say here jumping to
10:58 - top of book case so this was a typical
11:00 - way to organize C programs and still
11:02 - used in C++ but a kind of disadvantage
11:05 - here is that if you think about what a
11:08 - cat is and here we're trying to write
11:10 - functions to represent the cat it's not
11:13 - just stuff that it can do a cat doesn't
11:16 - just jump and make meowing sounds and so
11:19 - on it also has a state like the cut has
11:23 - a it has a position it has a mood it has
11:27 - you know a level of hungriness and so on
11:30 - as state to it and we want to represent
11:32 - the state by variables and that's why
11:36 - classes were invented to bundle data it
11:40 - represents the state of a thing together
11:42 - with subroutines that represent what it
11:44 - can do so let's let's see and in this
11:48 - tutorial just how we can bundle these
11:51 - functions together into a into a class
11:55 - into a what we call a a cat class now we
11:58 - can create particular instances of cats
12:01 - that can then do stuff so the changes we
12:04 - have to make now they're fairly minimal
12:05 - what we do is let's go to capital H
12:08 - firstly and above these functions I'm
12:11 - going to type class cut
12:14 - I'll give it a capital C you don't have
12:16 - to but it is important to have some
12:18 - convention for how you name classes and
12:21 - stick to it so I'm going to follow a
12:23 - Java type convention and start my
12:26 - classes with a capital letter here and
12:28 - then it's opening
12:29 - close kin brackets here and I'm going to
12:34 - move these function prototypes into this
12:39 - class here so it's this is pretty
12:42 - simpler we've seen this pattern a lot
12:43 - before it's just a keyword and a name
12:46 - and then open and close curly brackets
12:49 - and we've seen similar patterns for sure
12:53 - anyway and above these two functions
12:56 - which notice must be within these curly
12:58 - brackets following class katia above
13:02 - that I'm going to type public and a
13:04 - colon not a semi colon a colon and when
13:09 - I hit return there when I finished
13:11 - typing it the auto formats are
13:13 - automatically moved it backwards like
13:15 - that and that is correct I can run a
13:17 - formatter again just to be sure what yet
13:18 - doesn't do anything so we just we just
13:23 - group these functions within this class
13:26 - within the brackets of this class and we
13:28 - put a public keyword above them and
13:30 - we'll get onto all that means in more
13:32 - detail later on in this course but
13:34 - basically it makes those functions
13:36 - accessible outside of the files that are
13:40 - purely associated with this class so
13:42 - that we can use these functions for
13:44 - example in our main function now we're
13:47 - going to go to capital CPP and just
13:50 - before the function name here and of
13:53 - speak let's start with that one I'm
13:55 - going to prefix it with cat that's the
13:58 - class name it's decía and cold on : so
14:04 - two colons
14:05 - and I'm going to do the same with John
14:08 - so this is saying these functions belong
14:12 - to this cut class
14:17 - and what this is is it's kind of like a
14:21 - blueprint for a cat at the moment it's
14:24 - very simple it hasn't got any data
14:26 - hasn't got any stain we've just used it
14:28 - to bundle our two functions together but
14:31 - it's kind of like a blueprint we call it
14:33 - a class and the specific instance is the
14:36 - actual cats that are made from this
14:37 - blueprint we call them objects so let's
14:40 - see how we can create a cat object from
14:43 - this class so I'll go back to my go back
14:47 - to my classes cpp we've already included
14:50 - cat dot H here now we've got errors
14:53 - because we can't just call speak and
14:54 - John like we did before but I'm going to
14:58 - type and this looks like defining a
14:59 - variable which it is I'm going to type
15:02 - cat that's the name of my class which
15:05 - again is here it's not the name of the
15:07 - file of its own I just gave the file the
15:09 - same name as the class but it's
15:11 - important to realize it's not the file
15:13 - name it's the class name that I'm typing
15:15 - now so cat and then I'll give it a
15:18 - variable a variable name and my
15:20 - convention man using this variable names
15:22 - start with lowercase first letters so
15:25 - let's just call this cut I could call it
15:29 - L just cut is is good really and then a
15:31 - semicolon
15:32 - so that's like saying int value or
15:35 - something like that some people think
15:38 - it's confusing if you have a class name
15:40 - the variable name that are exactly the
15:43 - same except that the class name has an
15:44 - uppercase first letter C++ is case
15:48 - sensitive so if you feel like you could
15:50 - give this some other name like you could
15:51 - call it cat one if you like let's call
15:54 - it cat one but I quite like often where
15:58 - possible giving my variables the same
16:00 - names classes and I can tell them apart
16:02 - because I'm giving the classes uppercase
16:05 - first letters but is it's a matter of
16:07 - opinion certainly now to call it
16:09 - functions which are now bundled into
16:12 - this cat class we can say cat one dot
16:15 - and the autocompletes helping us here
16:17 - let's select speak
16:19 - and it's also say cat one jump so this
16:23 - dot notation let's try to use control
16:27 - space autocomplete actually works so
16:29 - just holding down control and pressing
16:31 - space info the autocomplete there I'll
16:34 - type semicolon and this will now run as
16:37 - before so if I run this it runs those
16:40 - two functions but we bundled them into
16:45 - this cat and we have to access them via
16:47 - this cat variable so this is the class
16:51 - this is like a template for a car this
16:53 - is a particular cat we call it an object
16:56 - that's we say it's instantiated from the
16:59 - class so it's like having a blueprint
17:01 - making a cap from the blueprint you call
17:03 - that instantiation and we call the
17:05 - finished actual particular cat we call
17:09 - it an object in the lingo here so we're
17:12 - going to be seeing a lot more of this in
17:14 - future tutorials but this is already
17:16 - very long so I'll leave it there for now
17:18 - it's it's important to practice this
17:21 - yourself try to define your own claps
17:23 - doesn't matter what it does try to
17:25 - define it and whenever you get stuck you
17:28 - can refer back to this code study this
17:30 - code and make sure that you've got
17:31 - everything that you need to have just as
17:34 - I have here to make it work we're try to
17:37 - get your program to build and run try to
17:40 - have two or three methods in your class
17:43 - that you can call in your main program
17:45 - and once you've succeeded doing that
17:47 - especially if you manage to do it all
17:49 - from memory which would take quite a bit
17:51 - of practice I think in this stage then
17:54 - you definitely mastered everything you
17:56 - need to know so far so until next time
18:09 - you