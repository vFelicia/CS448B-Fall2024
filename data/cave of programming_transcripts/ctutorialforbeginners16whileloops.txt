00:16 - hello this is John from cave of
00:19 - programming calm in this tutorial in
00:21 - sleep as possible beginners we're gonna
00:23 - learn on my own so I'll create a new C++
00:26 - project here I'll use the hello world
00:28 - project template and another of the
00:32 - basic building blocks of computer
00:34 - programs are loops because the computer
00:37 - program that just execute the load of
00:39 - statements and then finishes usually
00:41 - isn't much use often you want to do
00:43 - things repeatedly in programs and the
00:47 - simplest way to do that is to use a
00:50 - while loop well it is simplest when
00:52 - you're starting out which is why I
00:54 - wanted to show you this although we're
00:56 - going to see nicer ways to do loops
00:58 - later on so supposing we want to repeat
01:03 - some code to use a while loop we need a
01:08 - keyword while and then round brackets
01:11 - and Oakland close curly bracket so this
01:15 - pattern is the same as for if and just
01:17 - like with if we need a condition in here
01:21 - so let's take the simplest example to
01:23 - start with of an infinite loop I'm going
01:26 - to write while true here and what's
01:29 - going to happen here is is the code that
01:31 - I type in here however many lines this
01:33 - is come in multiple lines it's going to
01:37 - execute as long as the condition in wild
01:41 - is true which is always going to be true
01:44 - because the condition is literally the
01:46 - keyword true
01:47 - so this is what I call an infinite loop
01:49 - let's let's run this and normally in
01:51 - your programs you want to avoid infinite
01:55 - loops but I'm just going to show you
01:56 - this as demo so I'm going to click run
01:58 - and let's hit this stop button here but
02:03 - we can see we've got hello coming up
02:05 - over and over again it's going to keep
02:06 - doing that until there
02:07 - forever or until it crashes or something
02:11 - so this isn't very useful
02:15 - what's more useful is to be able to out
02:18 - and output your lines of code in here
02:21 - some particular number of times until
02:24 - something changes or until some limit is
02:28 - reached or something like that so let's
02:30 - take a look at a simple example but that
02:32 - in the rest of this tutorial so how can
02:36 - we have a condition that's going to
02:38 - change well let's suppose we want to
02:42 - output hello I don't know like five
02:44 - times let's let's have a counter here
02:49 - I'm going to say int I equals nought now
02:55 - I've said before that you shouldn't give
02:57 - variables single letter names in general
02:59 - but we'll make an exception for loop
03:02 - counters because often when you have a
03:06 - loop you need you need a counter that
03:09 - will count the number of times the loop
03:10 - executes and it's very common in this
03:15 - case just to use a single letter usually
03:17 - I as your loop counter but in general
03:22 - you should give your variables more
03:23 - explicit names and even in the loop if
03:26 - you can give a loop counter or a more
03:28 - explicit name then this is probably a
03:31 - good idea to do so I'm going to say
03:33 - while I is less than 6 or we could say
03:38 - while I is less than or equal to 5 if we
03:41 - want this to execute 5 times now at the
03:44 - moment this is still an infinite loop so
03:46 - if I run this it's just going to say
03:49 - hello hello hello over and over again
03:51 - but what I can do is I can change the
03:53 - value of I within the loop so after I've
03:58 - output this line here I'm going to say I
04:00 - equals I plus 1 so remember statements
04:06 - are evaluated
04:07 - from the right to the left so it's going
04:10 - to take one and add it to I and store it
04:13 - back in I that means every time this
04:15 - code executes the value of I increases
04:18 - by one and what's going to happen is and
04:22 - so that the program will will start from
04:25 - the top down and it's going to get to
04:27 - the while and it's going to say is this
04:29 - condition true and well is I less than
04:32 - or equal to five yes so it's going to
04:34 - execute the code within the brackets and
04:36 - then it's going to come back to here
04:38 - again and it's going to say is I less
04:42 - than or equal to five and it's still
04:44 - going to be true so it's going to
04:45 - execute the code in the brackets again
04:47 - eventually is going to be equal to six
04:51 - and then it's going to say here is I
04:55 - less than or equal to five no so then
04:57 - the loop is going to stop and it's going
04:59 - to execute whatever is down here so
05:01 - let's output here and program quitting
05:06 - just so that we can see some stuff after
05:09 - the loop here and now let's run this now
05:14 - is that right in fact this is going to
05:15 - execute six times right so let's let's
05:21 - run this so we've got one two three four
05:25 - five six first time it executes I is
05:28 - zero and then it adds one to I so I is
05:31 - one and then we run through zero one two
05:34 - three four five so we've got six
05:36 - iterations here and for that reason you
05:41 - often see in loops something like this
05:43 - so you start I and zero and you say
05:45 - while I is less than the the limit that
05:48 - you want to reach but less than it
05:51 - because remember you're going to execute
05:53 - it once when I is 0 is less let's run
05:56 - that so now we've got 5 iterations of
06:00 - the loop here so if you want your loop
06:05 - to execute five times you start your new
06:07 - country 0
06:08 - and you say while I is less than five
06:11 - that's the number of times you wanted to
06:13 - iterate to make it a little bit more
06:16 - clear what's happening here let's also
06:17 - output the value of I here let's say I
06:21 - put space there and here upper I and I
06:25 - need another pot too and let's run that
06:28 - see what that looks like so here we can
06:33 - see that I was zero to start with when
06:36 - it's first executed this code and then
06:39 - we added one to it here and then then
06:42 - the next time I excuses one finally it
06:45 - ends up being four and then when the
06:49 - loop executes again so we execute this
06:55 - when the value of I is for down here and
06:58 - then we're adding 1 to it so now it's 5
07:00 - and we check the condition again and now
07:04 - this is false I is not less than 5 so it
07:06 - doesn't execute anymore so we get 0
07:08 - through 2 for executing again something
07:12 - that can be a little bit puzzling when
07:14 - you first see it but you just need to
07:16 - type it out yourself a little bit play
07:18 - around with it a little bit to fully
07:21 - comprehend what's going on here I think
07:27 - I think that's all I want to show you in
07:28 - this tutorial is this one there's one
07:30 - more little thing which is very very
07:32 - useful instead of writing pi equals I
07:35 - plus 1 there's a short time for this we
07:38 - can just write I plus plus and what that
07:42 - does is it increment I by 1 the spot
07:45 - common increment I by 1 and that will do
07:50 - exactly the same thing but it's just a
07:52 - little bit shorter than typing I equals
07:55 - I plus 1 and it's very common to see
07:58 - this plus plus operator when you're
08:01 - working with loops so let's let's run
08:02 - that we get exactly the same results so
08:05 - to practice this writer program if you
08:09 - want to that that out that does
08:12 - thing a fixed number of times that you
08:14 - decided on and make sure it actually
08:16 - does whatever you tell it to do the
08:18 - exact number of times that you told it
08:21 - to execute and also don't forget to
08:24 - indent stuff here within the eye when
08:28 - within the curly brackets of their of
08:29 - the while by an extra tab that's really
08:32 - important and you don't have to have a
08:34 - space there I've put one in because I
08:36 - don't know maybe it looks nicer but
08:39 - that's kind of a question of taste so
08:42 - you can put that line in or not but as I
08:45 - mentioned before it's if you have lots
08:46 - of stuff within your loop then it's good
08:49 - to to kind of split stuff up into
08:52 - logical blocks to help you read it so
08:54 - that's it for this tutorial
08:56 - in the next tutorial and we will
08:59 - probably look at do-while I think and
09:04 - possibly at nesting stuff within loops
09:06 - nesting if statements within loops or
09:09 - certainly we're going to get on site in
09:11 - the next tutorials
09:12 - now the next few tutorials so until next
09:15 - time happy coding
09:28 - you