00:00 - hello in this video we're just going to
00:02 - take a little bit of a look and the
00:05 - error message that we produced in the
00:07 - last video so hopefully by now you've at
00:10 - the very least typed out this code
00:12 - yourself and I would strongly suggest at
00:16 - the very least experimenting with this
00:18 - see what you can change you know to make
00:22 - you do something slightly different see
00:23 - if it works as you expect
00:25 - and ideally you've written some program
00:27 - that Kanta gets user input and converts
00:29 - one number in one unit of measurement to
00:32 - some unit some other number in some
00:34 - other unit of measurement or you've
00:36 - invented some exercise for yourself
00:38 - that's similar hopefully you've had a go
00:40 - at that maybe compare 2 miles to
00:41 - kilometers and you shouldn't really
00:43 - encounter any great problems with that
00:45 - miles to kilometers would be basically
00:47 - the same program as far as I can see
00:50 - except that we don't need to subtract
00:53 - anything would just be multiplying it by
00:56 - something I think it was one point six
00:58 - zero nine okay so I just want to show
01:01 - you this thing that's appeared in in a
01:04 - console if I run this and I enter
01:07 - something that isn't a number hit return
01:12 - then we get this error trace this is
01:15 - actually called a stuck trace and the
01:18 - stack is basically how Java keeps track
01:22 - of one method calling another method in
01:26 - other words one method runs and it uses
01:29 - other methods so other subroutines and
01:33 - they sort of all make each other execute
01:36 - in a kind of a well kind of a tree type
01:40 - thing really but let's not worry about
01:43 - that for the moment because we're
01:45 - getting a bit ahead of ahead of
01:47 - ourselves really I just want to begin to
01:50 - familiarize you with this because you're
01:51 - gonna see a lot of these and it looks
01:53 - very intimidating to start with when you
01:56 - get errors in Java they can look quite
02:00 - disturbing so one thing to say is
02:05 - regarding this program I don't think
02:08 - there's any there's not really any way
02:09 - we can fix it at the moment using what
02:11 - we already know at this point
02:13 - so that it can handle in pot that's not
02:17 - a number in a way that's more elegant we
02:19 - totally can fix that just not with what
02:21 - we know so far as far as I can see or
02:24 - not easily so we're not going to worry
02:27 - about it for the moment we'll look at it
02:29 - later on how we would fix this sort of
02:31 - thing but when you see a error message
02:33 - like this very often the first and the
02:37 - last lines are the most important so if
02:42 - we look at the top it tells us what the
02:44 - basic problem is the problem is we've
02:46 - got a Java util dot input mismatch
02:50 - exception now this is a input mismatch
02:53 - exception is actually a class and what
02:57 - we have here is this is showing you that
02:58 - we say that an exception has been thrown
03:01 - and we'll be looking at that later on
03:03 - but you could guess from the name of it
03:06 - input mismatch exception that there's
03:09 - some sort of mismatch with the input
03:11 - that we've entered which is of course
03:12 - the case we entered letters when it was
03:15 - expecting a floating-point number the
03:19 - last line in this case actually gives us
03:22 - the error it gives us the line and the
03:25 - file where the error occurred so with
03:30 - really big stuck trace is something that
03:32 - you can end up doing is sort of looking
03:34 - down them for the first line that it
03:37 - mentions this actually in your own code
03:40 - that you've actually written you know so
03:42 - you end up starting from the top and
03:44 - you're looking down it and you're
03:45 - looking at files that you haven't
03:47 - written yourself and eventually you come
03:48 - to one that you have written yourself
03:50 - and that's where you can start
03:52 - investigating the error in this case
03:54 - there's only one line referring to our
03:57 - own code and it's right at the bottom
03:59 - and it's here at Java line 13 so if I
04:05 - click on that it will actually take me
04:06 - to the line there we go is highlighted
04:09 - it and that is where the error occurred
04:10 - so we did scanner dot next float and
04:13 - that was expecting the user to it to
04:15 - input a float but the user me in this
04:18 - case inputted some letters so it threw a
04:21 - wobbly you threw an exception in fact
04:23 - technically speaking
04:25 - wobbly is not a tactic
04:27 - or term okay we've also got a warning
04:32 - here in this program and if we click on
04:34 - it it says resource leak scanner is
04:37 - never closed now that's not a big
04:39 - problem but we shouldn't leave warnings
04:41 - in our programs what it what it means is
04:44 - well it wants me to all it wants me to
04:47 - do is what I'm about to show you which
04:49 - is this let's create a new line in our
04:54 - program in fact I can do this
04:57 - immediately after I've used the scanner
04:59 - since I'm not going to use it again for
05:01 - anything by this point in a program line
05:05 - 14 here I've I've just create a new
05:08 - blank line of course but I'm not using
05:10 - the scanner anymore so I can write
05:12 - scanner dot closed and then the warning
05:18 - goes away and that makes it happy so
05:20 - what scanner dot closed does precisely
05:22 - I'm not completely sure but I don't
05:25 - think it's important that important but
05:28 - it will make the warning go away so I
05:31 - advise you to do it closing things that
05:34 - we've opened in general ease in general
05:37 - is very important in programming in this
05:41 - particular case perhaps not so important
05:43 - but in general it's a good thing to do
05:44 - and what we're closing I suppose is is
05:48 - where we've got something that scanning
05:50 - user input trying to get user input and
05:53 - scanning it and trying to find out
05:54 - what's in it that's what scanner does it
05:57 - in this case it's scanning system dot in
05:59 - trying to get stuff from sister-in
06:01 - system not in and it's trying to turn it
06:04 - it's looking for a number in that user
06:06 - input basically and it didn't find one
06:08 - and by closing it I suppose we're
06:11 - closing
06:11 - I guess system dot n I'm not really sure
06:14 - but it doesn't matter okay so we know
06:20 - where the error is we can't fix it at
06:21 - the moment we know that if you enter
06:23 - letters instead of a number it throws an
06:25 - exception and we're going to be looking
06:27 - at exceptions later on but for now we'll
06:31 - just leave it as is let's try it again
06:34 - now and check that it works there we go
06:37 - still working okay
06:39 - so until next time
06:40 - happy coding