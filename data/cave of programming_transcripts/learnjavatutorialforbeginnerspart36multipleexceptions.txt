00:00 - hello this is John from cave of
00:03 - programming calm and in this tutorial
00:05 - we're going to look at dealing with
00:07 - multiple exceptions so we're going to
00:09 - look at throwing multiple exceptions
00:11 - from a method and we'll also look at
00:14 - handling them as well so I've got a
00:16 - basic program set up in Eclipse and I'm
00:19 - going to also create a new class here
00:21 - and let's call this test and I'll click
00:26 - finish and I'll create just a dummy
00:28 - method here and I'll give it a name
00:30 - let's make it public void and let's just
00:34 - call it run just to pluck a name out of
00:36 - the air unless imagine that run throws
00:40 - some exception or it could throw an
00:42 - exception because you are very rarely
00:45 - going to have a method that
00:46 - automatically throws a exception on this
00:50 - is some sort of not implemented
00:52 - exception but let's just imagine that
00:54 - we've detected some error and then we
00:56 - want to throw a new let's say I owe
00:59 - exception now I'm going to have to add a
01:04 - throws Clause here so let's just click
01:07 - the error and import IO exception click
01:09 - it again and then add throws declaration
01:12 - so if you throw an exception or you
01:15 - think you might want to then you're
01:17 - going to have to have this throws an
01:19 - exception name there but what if you
01:22 - want to throw another exception because
01:24 - it may be that this exception doesn't
01:28 - get thrown in your code because this
01:30 - particular thing doesn't go wrong but it
01:33 - could be that something else goes wrong
01:34 - somewhere in your code so that's coming
01:36 - out so maybe we've got to the
01:39 - input-output stage and we didn't throw
01:41 - IO exception but now another error
01:43 - occurs in the same block of code and we
01:46 - want to throw a new let's say for
01:48 - example pass exception so we want to say
01:52 - error at line error or maybe just error
01:58 - in commands list or something like that
02:00 - I'm just kind of making this up this
02:03 - could be a line number let's say so you
02:05 - might throw pass exception if for
02:08 - example you're passing some kind of list
02:10 - of commands or something
02:12 - and they don't conform to the kind of
02:16 - formatting you expected and I've got one
02:21 - handled exception let's click on the
02:24 - error and go to add throws exception and
02:27 - what this is done is now we've got a
02:30 - comma separated list of exceptions here
02:33 - and this is not a list of exceptions
02:35 - that we're going to throw because you
02:36 - can only throw one exception at a time
02:38 - and of course you might not throw any
02:40 - exceptions hopefully if the code is
02:42 - successful and that will you expel out
02:44 - to be normally be the case that you
02:46 - won't throw an exception but what this
02:49 - is saying is that you could throw either
02:51 - one of these two exceptions if something
02:54 - goes wrong in the code so these are two
02:57 - seven things that could go wrong and
02:59 - you'll throw an exception as appropriate
03:01 - so this is not obviously not working
03:03 - code because I've just come into this
03:06 - out but you imagine a detected an error
03:08 - and you've decided to throw one of these
03:11 - exceptions so this is basically a comma
03:13 - separated list and your particular
03:16 - method it might throw any number of
03:19 - possible exceptions so let's have a look
03:23 - now how you'd actually handle that I'll
03:26 - create a object here a tight test so
03:30 - test test equals new test and so we want
03:34 - to call test op run and now I'm forced
03:38 - to handle those exceptions because test
03:41 - op run could throw either of two
03:43 - exceptions although it might not throw
03:45 - any for it if we're in luck and it runs
03:46 - smoothly so we've got a bunch of
03:50 - different options for handling that and
03:52 - we've already seen the add throws
03:54 - declaration option which would throw
03:56 - this out a main in this case it throws
03:59 - it up the stack to the next method in
04:01 - the in the kind of hierarchy of method
04:04 - calls and here we're in that we're in
04:07 - the main method so we're not within a
04:09 - sub kind of method and here we'll be
04:11 - throwing it directly out of the main
04:13 - method which would produce some kind of
04:15 - stat trace of that error gets thrown
04:19 - now let's assume that you don't want to
04:22 - throw out Maine you want to handle it
04:23 - you got two choices while I see this
04:28 - there's more than two choices really
04:29 - which we'll get into and the first thing
04:32 - you could do is surround with try-catch
04:36 - because although you've only got one try
04:39 - block in your try-catch block you can
04:41 - have multiple catch blocks and depending
04:43 - on what errors thrown you'll get into
04:46 - one of these blocks so in this case I'm
04:50 - actually throwing a pass exception at a
04:52 - moment so I could say yes SL couldn't
04:58 - pass command file or something I'm just
05:03 - making up text here this has no
05:05 - relevance to this program and if you run
05:09 - this then we get the error because we
05:13 - throw an exception and we've got this
05:14 - this specific catch block has run rather
05:18 - than this one because the catch block
05:21 - will match its argument here to the
05:24 - actual exception that's thrown so this
05:27 - cut is i/o exceptions and this cut
05:29 - catches pass exceptions and we've thrown
05:34 - a pass exceptions so we've run this code
05:36 - here that's that's one possibility
05:39 - let's comment this out and you can
05:41 - you'll find this code on cave of
05:44 - programming comm so I'll comment this
05:47 - out in case you want to have a look at
05:48 - it and let's let's try that again
05:52 - let's do tests on run because there's
05:53 - another way that we can deal with that
05:55 - and this second way was introduced in
05:58 - Java 7 and it's called a tri multi catch
06:00 - so if I click the error here I can say
06:04 - surround with tri multi catch and now
06:07 - we've got a single catch block but it
06:09 - lists two possible exceptions and it's a
06:12 - pipe in the middle of them and as far as
06:15 - I know you can have multiple exceptions
06:16 - there although I don't actually use this
06:18 - much myself and there's the actual
06:21 - variable which is the actual exception
06:23 - that we could use if we want to print a
06:25 - stack trace or get the error message
06:27 - from the exception
06:28 - so this can handle multiple exceptions
06:30 - in one catch block and that's the try
06:32 - multi catch there is something else you
06:36 - can do however because let's just close
06:41 - that and say test on run again because
06:48 - and we've seen this concept of
06:50 - polymorphism which means that you can
06:52 - always pass a child a child class
06:55 - wherever a pairing class is is expected
06:58 - and that means that surround with a
07:01 - try/catch and let's get rid of one of
07:05 - the catch blocks here now because all
07:08 - exceptions derive from the parent class
07:11 - exception if I change this to exception
07:16 - it can now catch any any kind of
07:20 - exception because this is a parent class
07:22 - and this would we could use any child
07:25 - class here while a parent class has
07:27 - expected an i/o exception and pass
07:29 - exception or child classes of exception
07:32 - so just like with passing methods to a
07:34 - parameter for exam and to a method for
07:36 - example do I say that right just sly
07:39 - with passing parameters to a method
07:41 - weekers we could catch any exception by
07:45 - using a parent class here whichever
07:48 - exceptions thrown this catch block is
07:51 - going to say okay the exception that we
07:54 - want to look at catching is a kind of
07:57 - exception therefore we can catch it with
07:59 - this block and that brings me to a
08:02 - little complication here because
08:05 - supposing I've got a method here public
08:09 - void let's call this something like um I
08:12 - don't know input and now let's say that
08:18 - input throws ioexception and it also
08:24 - throws well what you want to do is I
08:29 - want to make it throw them an exception
08:31 - that's a child of IO exception and there
08:34 - are a lot of them so let's go to a
08:36 - browser here and let's look at exception
08:39 - and I'll look for IO exception in here
08:43 - click I'll click on IO exception in put
08:46 - out by exception and we've got a lot of
08:48 - more specific exceptions here like for
08:51 - example file not found exception so
08:55 - let's imagine that this can throw IO
08:58 - exception for some reason but it could
09:00 - also throw a file not found exception
09:06 - and I'll just add the import bear for
09:10 - that so I won't implement this because
09:12 - there's no need for this example but now
09:16 - if you think about how to handle that
09:18 - and so I go to app here imagine that
09:23 - where we are we're running test dots
09:27 - input which throws file not found
09:30 - exception or in my throw IO exception
09:33 - and imagine that I put in here a try a
09:36 - surround with try catch we have to have
09:43 - file not found exception first and the
09:47 - reason for that is that if we had IO
09:49 - exception first here then IO exception
09:54 - would catch file not found exception as
09:57 - well so what happens is Java works down
10:00 - the catch blocks and says does this
10:02 - match the exception if yes we'll run
10:04 - this code if it doesn't let's look at
10:07 - this catch block does this match the
10:08 - exception if yes then we'll run this
10:11 - blog and if we if we were to have by Oh
10:14 - exception here and file not found
10:15 - exception here then it would say okay
10:18 - this is even if it throws that the file
10:21 - not found exception it would say okay
10:23 - file not found exception is an IO
10:26 - exception it's a child class of it and
10:27 - it would run this and we would never
10:30 - reach this and for that reason I think
10:34 - if we were to say here
10:36 - farm at found exception I were to put IO
10:38 - exception here I think it won't even
10:42 - compile so I'd save that and it will say
10:45 - here unreachable catch blog and that's
10:48 - because we've handled them in the wrong
10:49 - order and although this might seem like
10:53 - a nitpicking point being as let's just
10:57 - read allows them want to delete it we do
11:00 - being is you won't the compiler won't
11:03 - even let you type it the thing is they
11:06 - ask you this on exams and in interviews
11:09 - all the time so it's if you're gonna if
11:12 - you think it might sit an example take
11:13 - an interview it's worth understanding
11:15 - that if you've got a child exception
11:19 - you've got to handle that first before
11:20 - the pairing because otherwise the parent
11:22 - would catch it due to polymorphism and I
11:27 - think in fact with try multi catch if we
11:30 - say test on input and we say here
11:35 - surround with try multi catch I think it
11:40 - won't even let you do it one more shock
11:43 - certainly use as much and it's saying
11:45 - now here that far not funny set file not
11:48 - found exception is already caught by
11:49 - piyo exception so it won't even let you
11:53 - handle it with a try multi catch
11:55 - apparently so that's it for this
11:58 - tutorial and we're going to look at
12:00 - exceptions a bit more because there's
12:02 - still a bit more to learn but not too
12:04 - much fortunately so join me again next
12:07 - time and until next time happy coding