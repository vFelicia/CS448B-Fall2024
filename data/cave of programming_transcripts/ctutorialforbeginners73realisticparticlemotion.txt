00:17 - hello
00:17 - this is john from cave of
00:20 - programming.com
00:21 - in this tutorial we're going to be
00:22 - tweaking the motion
00:24 - of our particles in our particle
00:26 - simulation here that we
00:28 - were working on in the last tutorial
00:30 - just to make it look
00:31 - um rather more interesting so
00:35 - um let's let's go to particle.cpp here
00:42 - uh so if we look at this at the moment
00:43 - one of the problems with this
00:45 - is um the explosion looks too uniform
00:49 - especially in the early stages um
00:52 - although
00:52 - the particles have a speed that's sort
00:55 - of uniformly distributed
00:58 - or somewhat too uniformly between the
01:00 - middle of the circle and the outer edge
01:03 - and that means that it has a rather sort
01:05 - of blocky
01:07 - circular appearance especially when it
01:10 - starts out
01:12 - now one one thing we can do to change
01:14 - that is
01:16 - in the particle constructor here we're
01:18 - assigning speed to the particles
01:20 - and we're giving that speed a uniform
01:24 - random distribution
01:25 - between naught and some figure that
01:28 - we've decided on here
01:30 - what we can actually do is simply to
01:32 - square the speed
01:34 - so i could say m underscore speed equals
01:36 - m underscore speed
01:38 - times m underscore speed or
01:42 - more succinctly the same thing can be
01:44 - written as
01:45 - an underscore speed times equals m
01:48 - underscore speed
01:52 - now if if we look at that now it's gonna
01:55 - probably be much too fast
01:58 - we don't i think we've got a tiny
02:01 - glowing spot in the center which is
02:03 - um probably the remnants of the
02:04 - particles that haven't shot off the edge
02:07 - let's try changing this to a much bigger
02:10 - figure it's constant that we use in
02:11 - deciding
02:12 - speed see how that looks
02:17 - so i think it's still much too fast and
02:20 - what we're seeing now is just the
02:22 - remnants of the particle in the middle
02:23 - there
02:24 - let's add a naught so we need to
02:27 - experiment a bit to find
02:29 - a good volume now for speed and i think
02:31 - that looks
02:32 - quite a lot better so if you look at
02:35 - this explosion
02:36 - now you'll notice it's a lot more ragged
02:39 - and the reason for that is that by
02:41 - squaring the speed
02:42 - we've meant that the average distance
02:45 - between the particles
02:47 - increases as you go from the inner edge
02:50 - to the outer edge
02:51 - well this is putting it in a language
02:53 - it's a little bit loose mathematically
02:56 - but we get a basically a different
02:58 - distribution
03:00 - which exaggerates more the distance
03:02 - between the particles as you move
03:03 - towards the edge
03:04 - which i think looks quite a lot nicer
03:08 - now another thing we can do is give
03:12 - the particles a bit of
03:15 - curl so um let's
03:18 - let's go to the update method here
03:21 - and before we calculate the x and y
03:23 - components of the speed
03:25 - using uh yeah the speed using the speed
03:27 - and direction
03:29 - we can we can add something to the
03:32 - direction to make the particles curl
03:34 - around a bit let's say
03:35 - m on the score direction and we'll use
03:37 - the plus equals we'll use the
03:40 - interval in here to
03:43 - ensure that this happens in a similar
03:47 - rate on all different systems
03:50 - so interval times and we need to put in
03:53 - some sort of constant here
03:55 - which i don't really know what it should
03:57 - be
03:58 - let's try some figure like this which
04:02 - might be good or might not be let's try
04:05 - running this and see what happens
04:09 - so now the particles are curling rapidly
04:11 - and indeed
04:12 - this thing is imploding a bit
04:17 - let's try something a lot smaller
04:20 - i put another zero in there after the
04:22 - decimal point
04:24 - and still very rapid
04:28 - let's try another zero
04:32 - see how that looks we want something a
04:34 - little bit subtle
04:35 - so they still seem to be sparring very
04:37 - very rapidly
04:39 - oh yeah because i've written four
04:42 - instead of north point north north
04:43 - apologies let's try something more
04:46 - sensible like this
04:47 - okay let's try this so yes now we've got
04:51 - a subtle um curl there
04:55 - relatively subtle the part the
04:58 - explosion is still sort of um imploding
05:00 - in on itself
05:02 - um and we need to do something about
05:05 - that one thing we can do is
05:06 - try slightly smaller values still
05:10 - but we're going to have to fix something
05:11 - else here i think
05:15 - yeah so now the curl is so subtle that
05:17 - you don't even
05:18 - really see it so i quite like this
05:22 - sort of a value i think but we want to
05:26 - change something here um
05:29 - to make this a bit more interesting so
05:32 - there's
05:33 - um there's a couple more things that we
05:35 - could
05:36 - change here actually there's sort of an
05:38 - infinite array of things that we could
05:40 - change
05:41 - but what i'm going to do is i'm going to
05:44 - check
05:44 - in this update method if the particle
05:47 - goes off the edge of the screen
05:49 - because if it does there's not much
05:51 - point still drawing it
05:53 - and it might spiral back to the center
05:55 - but who knows
05:57 - really what it will do it's going to be
05:58 - more interesting if
06:00 - this particle goes out of its um nominal
06:03 - kind of allotted particle space which we
06:05 - decided would run from minus one to plus
06:07 - one
06:08 - uh in the x and y directions then we can
06:11 - re-initialize the particle put it back
06:13 - at the center and choose
06:14 - new new random values for its um speed
06:17 - and direction
06:18 - so let's let's say here if m on score x
06:21 - is less than minus 1
06:23 - or it's greater than 1 or m underscore y
06:27 - is less than minus 1
06:31 - or m underscore y is
06:34 - greater than plus one
06:38 - now we want to um reinitialize the
06:40 - particle
06:41 - with some more random values let's
06:43 - create let's create a
06:45 - function up here called init
06:48 - or a method i should call it technically
06:50 - because this function is part of a class
06:52 - let's put the code from the
06:54 - initialization code from the structure
06:56 - from the constructor into init and also
07:00 - initialize the um
07:04 - the location initial location of the
07:06 - particle in there
07:08 - and then in the constructor we can just
07:09 - call init
07:11 - we need to add the prototype to that in
07:14 - particle
07:14 - for that in particle.h as well i notice
07:17 - here i've got a public section for my
07:19 - functions but sort of superfluous really
07:22 - and it's
07:22 - it just because in a structure
07:25 - rather than a class everything's
07:27 - probably by default anyway
07:29 - but it does sort of help to separate
07:30 - visually the methods
07:32 - from the variables there
07:36 - what we can do is have a private section
07:39 - in here to put the speed and direction
07:41 - in
07:42 - and i'm going to make my init
07:45 - method private as well let's have
07:47 - another section for this because it's a
07:48 - function just to visually separate it
07:51 - from the variables so that's void init
07:56 - and let's let's try running that and see
07:58 - how it looks now
08:03 - so now i i think this is rather more
08:05 - interesting
08:08 - and for some for some reason that i'm
08:11 - not
08:12 - sure about i was going to say that it
08:16 - reduces the
08:18 - tendency of the particles to implode but
08:20 - that seems not to be the case after all
08:22 - and so i don't really know why it was
08:25 - but it does look
08:26 - i think more interesting maybe even a
08:29 - bit
08:29 - less curl let's try um naught point
08:33 - naught
08:34 - naught naught before oh that would be
08:36 - more
08:37 - let's try two see how that looks oh i
08:40 - didn't even call
08:40 - knit okay
08:45 - well i i got to sleep at 7am last night
08:48 - for some reason oh that's my excuse okay
08:51 - let's try it now
08:54 - i mean in fact i think what happens is
08:56 - particles
08:57 - tend to go off the edge of the screen
08:58 - but then they reappear in the center
09:01 - and that does seem
09:05 - to somewhat reduce as far as i can see
09:08 - from looking at this now
09:10 - the tendency of the whole thing to
09:12 - implode
09:14 - yeah because particles that eventually
09:16 - go off the edge they
09:17 - start springing out the center again
09:18 - later don't know if it would implode
09:21 - shrink to a you know to a point in the
09:23 - center if we let it run
09:24 - long enough but one more one last thing
09:27 - i think
09:27 - we can do here is um
09:31 - we can take a
09:35 - portion of the particles at any given uh
09:37 - on any given refresh
09:39 - and um we just reinitialize those
09:43 - randomly
09:44 - so let's say if rand is less than
09:48 - rand underscore max
09:53 - divided by 100. so here we've run max as
09:56 - a large integer which we're dividing by
09:58 - a hundred
09:59 - and and randy's going to be an integer
10:01 - from nor up to rand max
10:03 - so if we say that it's got to be less
10:05 - than a hundredth of rand maps that means
10:08 - one in every time one in every 100 times
10:12 - this runs it's going to be true
10:15 - and then we can just do an emit which is
10:17 - going to re-initialize
10:19 - some of our particles randomly
10:22 - now actually this this program is not
10:24 - completely independent
10:25 - of the processing power of your computer
10:28 - because the
10:30 - the blur will is basically running as
10:32 - often as it can
10:34 - within our game game loop and also
10:38 - um this random reinitialization will
10:41 - happen uh kind of just as often as it
10:44 - can because we're not using
10:46 - the interval in any way in there but
10:50 - i don't that probably doesn't matter too
10:51 - much what we've got now is something
10:53 - that's
10:54 - that i think is much nicer i don't know
10:57 - how well it shows up
10:58 - in the in my screen recording here but
11:02 - uh what i can see here is um the
11:04 - particles around the edge of this thing
11:07 - really sort of look like they're
11:08 - seething in an in and out of sort of
11:10 - massive molten lava or something it's
11:13 - kind of like that
11:14 - the surface of the sun which i think is
11:16 - really interesting
11:17 - now i'm going to leave this program
11:21 - there now so we're finished with coding
11:23 - in this course
11:25 - you could do a lot more things to make
11:26 - this even more exciting this is my
11:28 - favorite bit by the way
11:30 - um you're getting you're getting some
11:32 - color variation here
11:34 - because the results of the blur are left
11:36 - behind after
11:37 - the new particles have changed color and
11:40 - it's this color variation that gives
11:41 - this a lot of its
11:43 - excitement but what you could do is you
11:45 - could in the update method of the
11:47 - particles
11:48 - you could alter the colors of the
11:51 - particles separately
11:53 - but hopefully in such a way that they're
11:55 - sort of harmonized with each other or
11:57 - particles that are
11:58 - close by each other maybe or have
12:01 - similar speeds or whatever
12:02 - have similar colors as well but you
12:05 - could try doing something like that to
12:06 - create
12:07 - more striking color effects by having
12:09 - more color variation
12:10 - among particles that could be
12:12 - interesting well in fact the great thing
12:14 - about this program
12:15 - if you like visual things if you're a
12:17 - visual person
12:19 - is that it really does inspire you to
12:21 - just tweak it
12:22 - and try all kinds of new different
12:24 - effects
12:25 - so that's it for that and for this
12:28 - tutorial and indeed that's it for the
12:29 - coding part of this course
12:31 - i'm going to add probably i don't know
12:34 - one or two more videos
12:35 - i'm just explaining a couple more things
12:37 - here and we're going to take a look at
12:40 - the various kinds of c's that are on
12:43 - offer c sharp c plus plus objective c
12:46 - and so on um if if you've actually
12:49 - followed through this course
12:50 - well even if you've watched the videos
12:52 - congratulations if you've actually coded
12:54 - this stuff and got it working
12:56 - then seriously big congratulations uh
12:59 - hopefully this will have improved your c
13:01 - plus plus a lot
13:03 - if you were a beginner when you started
13:05 - the course then then this is an amazing
13:07 - achievement so we've got through
13:08 - all this um you're not going to be
13:12 - a completely fluent programmer yet to to
13:15 - be that you have to practice writing
13:18 - your own programs a lot you have to
13:19 - think about how to design those programs
13:22 - and experiment with different ways of
13:25 - coding different
13:26 - ways of designing find something that
13:28 - works for you
13:29 - and just practice it endlessly
13:32 - um but hopefully you are now in the
13:36 - position that you could go ahead and
13:37 - start writing
13:38 - programs of your own you'd have an idea
13:40 - of how to do that even quite complex
13:42 - programs
13:43 - like particle simulations so big
13:46 - congratulations most people who
13:48 - start a course like this the vast
13:50 - majority
13:51 - never get past the first few lectures i
13:53 - can tell you which i guess is the same
13:55 - with that
13:55 - a textbook okay so
13:59 - that's it for this tutorial and until
14:01 - next time happy coding
14:41 - you