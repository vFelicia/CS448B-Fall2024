00:16 - hello this is John from cave of
00:19 - programming calm in this tutorial we're
00:21 - gonna look at three more primitive types
00:23 - in C++ we've already seen a bunch of
00:26 - integer types and some floating-point
00:29 - types I'm going to finish off this
00:31 - little section by looking at three more
00:34 - very useful types well two more very
00:36 - useful types and one that you don't
00:38 - really use that often or at least I
00:40 - haven't but that you should know about
00:41 - anyway so the first type we're going to
00:44 - look at is bull bull is named after a
00:48 - guy who I think his name is George ball
00:50 - or something like that and he was a
00:52 - mathematician who did a lot of work with
00:54 - logic and the boolean type which has
00:58 - this keyword bull to represent it can't
01:01 - story the true or false let's type B
01:04 - value and we can set that either to true
01:07 - or to false and if we output it we get a
01:10 - little surprise let's try this we see
01:13 - out what we get is actually we get one
01:19 - and that's because in C++ zero is
01:22 - equivalent to false and one is
01:24 - equivalent to true so we can also set
01:26 - this to false let's run that and we get
01:31 - zero so zero is the same as false 1 is
01:35 - the same is true you can actually pop
01:37 - stuff like numbers in there and it will
01:39 - accept it and it will regard that as
01:41 - equivalent true so cell putting 1 but
01:45 - don't do that because it's really
01:47 - confusing so it's best not to do that
01:49 - it's best to stick to true and false but
01:52 - it is quite common in C++ to have
01:55 - something that evaluates to 0 or 1 and
01:58 - to regard that as being equivalent to
02:00 - true or false we're going to take a bit
02:02 - more of a lot that boolean values later
02:05 - on when we look at complex conditions in
02:08 - C++ but but for now I just wanted to
02:12 - mention this so ball is a type that you
02:15 - can set to true or false basically and
02:18 - by the way and it's possible in some
02:20 - compilers you might have to put
02:22 - and true and false all in capital
02:25 - letters to get to work that used to be
02:27 - the case in visual C++ but I don't think
02:30 - it's the case anymore as far as I know
02:33 - so another type I want to show you is
02:35 - char and char and is it takes up exactly
02:40 - one byte of computer memory so I miss
02:44 - often read it's often useful just for
02:46 - that reason if you want to allocate a
02:48 - specific number of bytes let's type C
02:51 - value equals and well let's let's set
02:56 - this 255 I want to show you something
02:59 - that first is totally perplexing here
03:02 - let's do C out C value endler and if we
03:09 - run this so we put 55 in it what we
03:12 - actually get is 7 now why why is that
03:15 - well char is and it's kind of partly
03:20 - intended to represent single characters
03:23 - from something called the ASCII
03:25 - character set so let's go to a browser
03:28 - here and let's type in us key and I
03:33 - should do it ASCII and we'll look up
03:34 - we'll go to this ASCII table link or we
03:37 - could go to Wikipedia it doesn't doesn't
03:38 - really matter let's see what's of this
03:39 - link here and we can see that well a
03:43 - byte can only represent 255 distinct
03:48 - values and we see here we've got a table
03:53 - of well this is a table of by looks
03:58 - great 127 different values so those are
04:03 - like the applet plus we've got another
04:05 - bunch of weird characters here up to 255
04:10 - so each each character that's commonly
04:13 - used in the Latin alphabet like in
04:17 - American English or something plus a
04:18 - bunch of other characters that are quite
04:21 - often used however have a position in
04:24 - this table and if you output a char we
04:28 - see out for example if we put the number
04:31 - 55 in a char we see
04:34 - fifty-five that is the number it's used
04:37 - to represent the character seven so not
04:40 - the number seven but the actual
04:42 - character seven so what's happening here
04:45 - is that we're putting 55 into the number
04:48 - 55 and it's outputting the character
04:52 - seven so it's it's very common to
04:58 - actually put characters directly in here
05:01 - although it is actually an integer type
05:03 - and two to get the actual ASCII value of
05:07 - a character in C++ the actual and the
05:11 - actual number of that character in the
05:13 - ASCII table not sure what ASCII stands
05:17 - for I can never remember American
05:20 - Standard Code for information exchange
05:21 - there you go then what you do is yeah so
05:25 - we put that the actual character in
05:27 - single quote so if I type two single
05:29 - quotes here and put and seven in there
05:32 - and then I run this program it's going
05:36 - to output seven so it's really important
05:39 - to realize here that a seven in single
05:42 - quotes is not the same as the number
05:44 - seven and this this number seven it is
05:47 - is literally a number if we put it in
05:50 - single quotes like this it's a character
05:52 - it's it's a symbol that has happens to
05:57 - have position 55 in that ASCII table if
06:01 - we actually want to see the and the
06:03 - actual number of the actual position of
06:08 - this character in the ASCII table we can
06:10 - we can put int here and see out just
06:13 - before this C value this is called
06:15 - casting we say they were casting a char
06:18 - here whoops
06:19 - to an int and that will cause the out to
06:25 - and to output this as though it wasn't
06:28 - an integer so if you run this now we'll
06:31 - get a 55 again
06:34 - so you can you can put any character
06:38 - that's in the ASCII table basically
06:40 - anything from you American alphabet plus
06:42 - a load of other characters let's put G
06:44 - in there into a char and you can store
06:49 - numbers in a char but you have to be
06:51 - aware let's just get rid of this int so
06:54 - that we can actually see the G because
06:56 - that's a bit less confusing and says G
06:58 - but a char you have to be a work only
07:02 - and can store a number and it can be
07:06 - minus 128 up to plus 127 that's 256
07:13 - different values if you include 0 so
07:18 - yeah 256 that's right isn't it I think
07:21 - so yeah okay so let's and let's hear
07:25 - this output the size of a char because
07:27 - as I say the size of char is
07:29 - particularly important because you often
07:31 - use it to allocate a certain number of
07:33 - bytes in memory size of char let's try
07:40 - this and run that so we're going to
07:44 - build
07:46 - we've got an error what'd I do wrong so
07:48 - I've said what I should have put Scout
07:52 - they're not child let's run this so when
07:56 - it when it builds the error goes away so
07:58 - size of char is one byte
08:00 - in other words eight bits so you can
08:02 - only represent quite small numbers in
08:04 - that from minus 128 plus 127 one other
08:10 - type that I want to just show you is W
08:15 - child score T which is very strange name
08:18 - and this is intended actually and for
08:22 - representing its intended for
08:25 - representing a greater range of
08:27 - characters V then you can represent in
08:29 - char so sometimes useful for that again
08:32 - you could put like you could assign it
08:35 - to a character like that let's now put
08:38 - this to see what we get
08:40 - endler so I've never had to use W charty
08:45 - much and but it exists if you need it so
08:50 - again we've got an error because of some
08:52 - reason tight the wrong thing that should
08:56 - we see out there we go so we're getting
08:58 - that again the position of I I guess
09:01 - within the ASCII table here but we could
09:05 - we could actually type cast by to a char
09:07 - we could cast it to a char and then
09:11 - we're actually go I but you can store
09:14 - more characters in W charty because it's
09:18 - the size of its bigger than a char then
09:22 - you could in a char so it's sometimes
09:24 - useful I guess if you're dealing with
09:26 - unicode much and stuff like that that's
09:29 - right yeah w CH r T so I'm going to run
09:33 - this and there we go is actually taking
09:37 - up four bytes in a computer's memory so
09:41 - to practice this I'd recommend declaring
09:43 - some boolean variables try setting them
09:45 - to true for 0 and 1 just because the act
09:48 - of typing out will help to fix that in
09:50 - your mind declare some char variables
09:52 - try setting them to numbers as well as
09:55 - characters
09:56 - and see what happens if you put try to
09:59 - put a large number in a charm more than
10:02 - 127 and you'll see what kind of problems
10:06 - you get there you'll get gobbledygook if
10:07 - you go over 127 or you have a number
10:10 - that's less than minus 128 and just
10:16 - declare w char t try outputting it try
10:20 - changing what see our displays with char
10:23 - or with W char T by adding that anti
10:28 - cast to a char or an INT in front of
10:31 - these values and see how that affects
10:33 - the output I'd recommend just just
10:35 - trying all these things and just because
10:38 - it will help to fix it in your memory
10:40 - and we're going to be using no down ball
10:42 - and char later on probably not W char T
10:47 - because it's just not so commonly used
10:49 - so that's it for this tutorial and until
10:52 - next time happy coding
11:03 - you
11:16 - you