00:16 - hello this is John from cave of
00:19 - programming calm in this tutorial we're
00:22 - going to look at something called the
00:23 - constructor initialization list in C++
00:26 - so I've got this code that I wrote in
00:29 - the last tutorial they said that I've
00:30 - stripped out stuff from the last
00:32 - tutorial involving memory locations so
00:36 - what we've got now is we've got a simple
00:38 - person class from a name and age that
00:41 - has two constructors ones a default
00:43 - constructor that just signs kind of
00:47 - default values for name and age one is a
00:50 - parameterised constructor that takes
00:52 - name and age and updates the instance
00:56 - variables with their values you supply
00:57 - we've also got a two string method that
01:01 - returns some information about our
01:03 - object as a string and we're using that
01:05 - in the main method to output information
01:07 - about these two objects I've got rid of
01:10 - person 1 here but I might put it back
01:13 - again so we've got person 2 person three
01:15 - and we're outputting some information
01:18 - about them using this two string method
01:20 - and the results look like this
01:22 - so we supply values to our constructor
01:26 - names and ages and then we're outputting
01:30 - information about the object in our main
01:31 - method using our two string method that
01:34 - we created now in the last tutorial we
01:38 - define this constructor here by we
01:43 - supply it with parameters and and we use
01:46 - those here and then were using this to
01:51 - disambiguate between our argument names
01:53 - and the instance variable names that
01:56 - were actually setting but there is
01:58 - another way to do this which is actually
02:01 - more efficient
02:02 - I suppose in terms of speed although
02:04 - it's not really going to make a
02:05 - difference to most programs and that is
02:08 - the constructor initialization this so
02:10 - what I showed you so far it's very very
02:13 - useful and sometimes you you need all
02:15 - this stuff it's also very useful to know
02:17 - about this but there's another way that
02:19 - I'm about to show you now which is the
02:21 - recommended way to do this where you
02:24 - were it's possible
02:25 - and in this case it's certainly possible
02:28 - so instead of initializing name and age
02:32 - here using these values using this
02:36 - pointer we can delete this and after the
02:40 - closing round bracket of the prototype
02:43 - of the constructor in the in the point
02:46 - where we actually implement it we can
02:48 - type a colon and then we type the name
02:52 - of a variable we want to initialize that
02:53 - same name so that's this up here and
02:57 - then we put round brackets after name
02:59 - and in there we supply the value that we
03:02 - want to initialize it with which here is
03:04 - gonna be the parameter that we pass in
03:06 - also called name so although this looks
03:10 - ambiguous it's not C++ knows that this
03:13 - means the actual instance variable name
03:18 - and it knows that this one in in the
03:21 - brackets is what we used to initialize
03:23 - that and it's gonna be the argument
03:25 - that's passed in we can do the same with
03:26 - H we can put a comment here age and pass
03:29 - in age like that and that will
03:32 - initialize these instance variables with
03:36 - the arguments that we passed to the
03:38 - constructor so let's run that now and we
03:42 - get the same results as before we can do
03:45 - the same with this kind of default
03:48 - constructor here we're not passing in
03:50 - parameters but we can type a colon here
03:52 - and then type name and initialize it
03:55 - with something so this time it's not a
03:57 - parameter it's just a literal value
03:59 - let's pop empty quotes or we can put
04:02 - unnamed or whatever we like in there
04:03 - then let's put comma in because we want
04:06 - to do age as well and set age to zero
04:08 - and now we can get rid of the easier
04:12 - let's go back to main dot CPP because I
04:15 - want to put in and person 1 again let's
04:18 - say person person 1 so this will use the
04:22 - default constructor we won't pass
04:23 - parameters to it so it will invoke this
04:27 - constructor here which is this one here
04:30 - and it's output that in CL as well
04:34 - so without persons one two and three
04:36 - yeah and let's run that and so the first
04:42 - one will have unnamed with eight set to
04:45 - zero and then the second to that the
04:49 - next that second and third wheel we will
04:52 - have the values that we passed in there
04:55 - now sometimes this is unwieldy like if
04:59 - you have a lot of different things to
05:01 - initialize in your constructor then
05:03 - sometimes it just sort of makes sense to
05:05 - type them out here rather than having a
05:07 - massive ugly list here and you can mix
05:11 - both of these is why you can initialize
05:13 - some things in the constructor
05:14 - initialization this and other things
05:16 - within the body the implementation of
05:18 - the constructor if you need to there's
05:21 - nothing wrong with mixing them but it's
05:23 - best to stick to one style and this is
05:26 - the best style to use where it's
05:28 - feasible to do so if you need to do any
05:30 - kind of complex initialization of these
05:32 - variables other than supplying their
05:35 - parameters like here or literal values
05:39 - then you're going to have to do it in
05:40 - the implementation if you've got more
05:42 - code that needs to run in order to
05:44 - figure out what to initialize them with
05:47 - you would have to do it in the
05:48 - implementation but for simple variable
05:51 - values that take either a parameter or a
05:53 - literal value you can initialize those
05:56 - instance variables in the constructor
05:58 - initialization list now because here
06:02 - we've got very little code actually it
06:04 - sort of makes sense just to put this in
06:06 - the header we don't really even need to
06:08 - have these implementations down here
06:10 - let's just move into the headers let's
06:12 - cut this stuff let's cut the
06:14 - initialization list fill it default
06:17 - constructor
06:18 - and just bunk it in here like that and
06:21 - I've got a saw a very low syntax error
06:24 - let's get rid of the implementation save
06:28 - this and hopefully this will work
06:32 - did I do something wrong yeah I think we
06:36 - need the curly brackets here that's why
06:38 - it's complaining yeah of course we do
06:39 - let's put them in so that's funky Indies
06:44 - so if we're putting the initialization
06:46 - list in we're going to have to supply an
06:49 - implementation even though it's an empty
06:52 - implementation so so that takes care of
06:54 - that
06:55 - and now we don't need the implementation
06:57 - in the CPP file let's do the same for
06:59 - the other constructor here let's copy
07:04 - this I'll cut it actually and we'll get
07:09 - rid of that save it go to person by age
07:12 - and boom this in here and again we're
07:15 - gonna have to put the implementation and
07:18 - so now if I run this should work as
07:21 - before there we go so again it's a small
07:27 - thing but familias is that I was
07:29 - actually doing C++ for a long time
07:31 - before I dared to use the initialization
07:33 - that's just because it's somehow look
07:35 - really complicated but it isn't at all
07:38 - as you can see it's actually very simple
07:39 - and if you just practice typing this a
07:41 - bit you'll quickly get the hang of it so
07:43 - as always I recommend create your own
07:46 - class give it two or three constructors
07:47 - and initialize your instance variables
07:50 - this time in the initialization list to
07:54 - see how that works and that will fix it
07:55 - in your memory try doing it in your CPP
07:59 - file and then also try doing it in a
08:01 - header file with that inline constructor
08:04 - syntax so you can use these on
08:06 - constructors you can't use them on set
08:08 - methods at least I'm pretty sure you can
08:11 - and this is purely a thing for
08:13 - constructors okay so that's it for this
08:16 - tutorial until next time
08:18 - decoding
08:30 - you