00:00 - [Music]
00:12 - [Music]
00:16 - hello this is John from cave art program
00:20 - calm man in this tutorial we're gonna
00:22 - look at how to use the wild card with
00:26 - generic part parameterize classes or
00:29 - parameterized however you say so
00:33 - this is a quite advanced topic which you
00:36 - can definitely skip if you just want to
00:39 - get to grips with really basic Java and
00:41 - future tutorials we're going to return
00:43 - to some more perhaps more important
00:46 - topics
00:47 - but nevertheless this is a useful thing
00:50 - to know and this seemed like a logical
00:52 - place to put it in this course so let's
00:57 - take a look and now for the purposes of
01:00 - this tutorial I'm going to create a
01:01 - couple of classes up here let's have a
01:03 - class machine which of course implicitly
01:08 - extends object because if you have a
01:11 - class that doesn't extend anything in
01:13 - fact it extends the object class that's
01:15 - object with a capital o and I'm also
01:18 - going to have a class as maybe some kind
01:21 - of machine so camera will do which is a
01:25 - kind of machine and that's a camera
01:28 - extends machine ok now we saw in the
01:34 - last tutorial some example examples of
01:38 - parameterised classes of generic classes
01:42 - that can work with any type of object
01:45 - and you have to specify the type of
01:47 - object when you instantiate the class so
01:51 - an example is a ray list but if you want
01:55 - to store strings in an in an ArrayList
01:57 - you have these there's these kind of
02:00 - diamond brackets and you put the type of
02:02 - thing that you want to store in the
02:04 - ArrayList here which is string in this
02:06 - case and let's call that list and set
02:10 - that equal to a new array
02:12 - list and before Java 7 I have to say
02:17 - string again here as well so let's just
02:20 - do that and I'll have the import for a
02:22 - realist
02:24 - now there's that's pretty simple but
02:27 - there's kind of something that tends to
02:31 - catch people out here regarding the
02:33 - passing of this to a method as a
02:37 - parameter so let's take an example there
02:40 - I'll create a public static void show
02:44 - list method here I mean I'm just making
02:49 - it static because we don't have an
02:50 - object of the class up so to be able to
02:55 - call this method without doing new map
02:57 - it's gonna have to be static and here
03:01 - I'm gonna say show list and I'm going to
03:04 - change the list so that it takes as its
03:07 - argument a an array list of strings just
03:13 - like this and it's called that list as
03:15 - well and now I can pass that my
03:20 - ArrayList of strings and show list code
03:24 - for example just iterate through the
03:26 - list and say for string string a safe
03:34 - value in list then I could just do this
03:38 - out on that value like this so that
03:44 - should all work and if I had some
03:48 - strings here list I had let's say one
03:52 - and
03:55 - - I should do the trick and I just run
04:00 - that and see what happens let's just
04:05 - save anti Java so it goes has one - so
04:10 - that's really straightforward actually
04:11 - if you've got an ArrayList holding
04:14 - strings or whatever and you want to pass
04:17 - it to a method it's really easy to do
04:19 - like you just stuff to remember that the
04:21 - type includes the type parameter there
04:25 - now there's a bit of a complication here
04:28 - let's take a slightly different example
04:30 - that's made this an ArrayList of
04:33 - machines so I've got a machine class up
04:37 - here and actually that's also good fat a
04:40 - I'm going to right-click a machine and
04:42 - I'm going to go to source generate -
04:46 - string and let's just create a two
04:50 - string method here and I'm just going to
04:55 - return something that lets us see that
04:57 - it is a machine I say buy a machine like
05:03 - that so now if I change this to machine
05:08 - as well I can now add machine objects in
05:11 - here it's a new machine and it's up two
05:15 - of them although they're going to be
05:16 - identical because machine doesn't have
05:18 - any doesn't have any instance variables
05:22 - at the moment but I was fine now as long
05:26 - as I change this to machine as well we
05:28 - have no problem I can run that and well
05:32 - once I fix the errors because yeah this
05:36 - has got to also be machine here and that
05:39 - should be fine so let's run that and
05:40 - there we go we're putting contents of
05:43 - the list
05:44 - and now supposing you have another
05:47 - ArrayList here which contains a subclass
05:51 - of machine like camera let's let's give
05:55 - camera a two string metal as well so we
05:57 - can distinguish camera from machine and
05:59 - I'll just say yeah ima camera and let's
06:05 - copy this stuff and I'll do ctrl shift
06:10 - after format that and it's call this
06:12 - list 1 and this this 2 and here I'm
06:15 - passing this one and now instead of new
06:19 - and this gotta be this one as well and
06:23 - whoops and that down here will cook
06:26 - Annapolis - so now I'm going to pass new
06:29 - camera to this list here like this and
06:35 - then I'm going to just carry on as
06:37 - before passing this one to this function
06:40 - so this actually this doesn't have to be
06:43 - list 1 so this is the same program as
06:46 - before it's just I've created another
06:47 - list and added cameras to it now that
06:50 - runs fine just as before but now the
06:54 - temptation is to thing here well what if
06:57 - I want to pass a list of cameras to this
07:00 - method because the temptation is to
07:02 - think that ok a because because camera
07:08 - already should be camera because camera
07:13 - is a subclass of machine then you sort
07:17 - of think well ArrayList of cameras must
07:21 - be a subclass of ArrayList of machines
07:24 - and anything well surely here I can pass
07:28 - this to to this method this method
07:30 - accepts an ArrayList of machines so I
07:33 - should be able to pass an ArrayList of
07:35 - cameras shouldn't I
07:37 - and that's where you were you had the
07:39 - problem because in fact an ArrayList of
07:41 - a child class type or any more broadly
07:45 - speaking any parameterised class which
07:48 - is past a type parameter of some child
07:51 - class type is not a subclass of a of the
07:56 - same parameterised class with the parent
08:00 - type of class as its type parameter so
08:04 - in this case here machine camera extends
08:07 - machine an ArrayList of cameras is not a
08:09 - subclass of ArrayList of machines so you
08:12 - can't pass it to this method but it
08:17 - would seem reasonable that we shall be
08:18 - able to somehow pass because I would
08:22 - polymorphism means I could I could
08:24 - happily add cameras to a list of
08:26 - machines and you think well surely I
08:28 - should there should be some way that I
08:29 - could pass an ArrayList of cameras here
08:32 - to this method and he further is not the
08:37 - simplest way to do this is to say here
08:41 - question mark and the question mark here
08:45 - is a wild card it's called the wild card
08:49 - and it's context and you read this as
08:52 - ArrayList of unknown type or more
08:55 - broadly speaking you notice it in such a
08:58 - class of unknown type and this this wild
09:03 - card means you can now pass an ArrayList
09:06 - with any kind of type parameter to this
09:10 - method so this line is final now the
09:12 - disadvantage is that then you can only
09:16 - treat the items in the list as of being
09:20 - a type object this object is the
09:23 - ultimate parent of all classes in Java
09:27 - as object to capital though so you can't
09:31 - now call any I can't call any camera or
09:35 - machine specific methods even if you
09:37 - pass in a list of cameras or machines
09:39 - but it does allow you to pass any kind
09:42 - of ArrayList in here so this code is
09:44 - going to
09:45 - since I am a camera because I'm passing
09:48 - him cameras here or of course if I
09:50 - passing machines I am a machine and this
09:55 - works because the objects superclass is
09:59 - the is a superclass of both camera and
10:01 - machine and it has a two string method
10:03 - that enables system dial to print an end
10:06 - to work so now the only way here you
10:13 - could call camera specific methods that
10:15 - say are machine specific methods is if
10:18 - you were to cast as we saw in it in the
10:22 - tutorial you could that then tutorial on
10:25 - down casting and on casting if you know
10:28 - that this is a list of cameras let's say
10:30 - you could down cast this object to a
10:33 - camera object and then you could call
10:35 - camera specific methods but when you get
10:38 - the objects directly out of the list
10:41 - they're going to be a type object
10:42 - because you use the wild card here and
10:44 - you don't know Java doesn't know what
10:47 - type of thing is going to be in our list
10:48 - it could be any kind of type of thing
10:52 - now if you still with me on this there's
10:56 - another couple of interesting things
10:58 - that you can do with these wild cards
10:59 - and one is you can specify an upper
11:02 - bound to the wild card and so let's say
11:05 - I want to pass to this method an
11:08 - ArrayList of machines or an ArrayList of
11:12 - any sub type of machine and that could
11:15 - be useful because let's say I've got a
11:16 - machine as a machine as a method here
11:19 - and say public lorry to start and it's
11:23 - just puts this out here and say machine
11:27 - starting so machine has a a method that
11:30 - we can call and supposing I want to say
11:34 - well whatever we pass to this method is
11:37 - going to be some kind of machine it's
11:40 - not necessarily going to be a machine it
11:42 - could be a camera or anything that
11:43 - extends machine you can use an upper
11:46 - bound on this wild card and syntax life
11:49 - is fairly intuitive you say question
11:51 - mark extends machine
11:54 - and of course I'm talking about the Rae
11:55 - list and machines and cameras here but
11:58 - the stuff I'm talking about here applies
11:59 - to any parametrized classes and any kind
12:03 - of child in parent classes now that's
12:07 - going to work just as before says I am a
12:09 - machine but now I can actually get
12:13 - machine type values from my list so if I
12:18 - say that there's no error and in fact if
12:21 - I do a get on this list my list I'll get
12:25 - I I can actually get machines from that
12:29 - list currently which is one doing in
12:32 - this loop actually so here I could say
12:34 - valued or valued stopped on the other
12:41 - hand if I pass in a list of cameras so
12:44 - that's going to work in same machine
12:46 - starting if I pass in a list of cameras
12:49 - that's going to work as well so it's
12:51 - calling the camera to string method and
12:53 - it's a machine starting because camera
12:55 - is inherited that's starting method from
12:58 - machine I didn't override it camera
13:01 - which is why it's a machine starting but
13:03 - let's say camera has a specific method a
13:06 - method is specific to cameras like
13:08 - public for either snap and let's say he
13:13 - SS out snap she's taking a photo now I
13:19 - can't in here core value double snap
13:25 - because all I can call of machine
13:29 - methods because the reasons clear if you
13:34 - think about it because for Java notice
13:36 - that this list that's passed in contains
13:39 - some kind of object that extends machine
13:41 - but doesn't know which object you know
13:43 - and a method object so extend machine
13:45 - here could have any kinds of methods and
13:48 - Java doesn't know this is got no way of
13:50 - checking what methods it has all it
13:52 - knows is it's some kind of machine so
13:54 - you can add for call machine methods
13:57 - and slightly slightly less useful but
14:02 - perhaps worth knowing about this you can
14:04 - specify a lower bound here I could say
14:07 - and say the wild-card
14:10 - I could say super camera let's say and
14:14 - that means that whatever I pass to this
14:15 - method let's call it show list to
14:20 - whatever I pass to this method now has
14:23 - to be camera or a superclass of camera
14:26 - and the trouble with that is super
14:31 - classes of camera codes have they don't
14:36 - necessarily have a camera methods in
14:37 - them so again when you would trade
14:39 - through the list you're really back to
14:43 - having to treat these as objects so the
14:47 - only value really suck on called camera
14:50 - or machine methods here but I can I can
14:53 - might use the two string method because
14:55 - leave an object has a two string method
14:58 - so let's pass in here I could pass me
15:00 - the list one all this to doesn't matter
15:02 - because this one is full of machines
15:06 - which are a super type of camera and
15:09 - this two is full of cameras which is is
15:13 - camera so that this is kind of an upper
15:16 - bounds of saying that this could be
15:18 - camera or a super type of camera and
15:21 - this could be machine or some type of
15:24 - machine so this is going to work as well
15:27 - so my second method that works fine
15:29 - saying I am a machine down here but
15:34 - again if you wanted to use specific
15:38 - methods of camera or machine then you
15:40 - would have to know yourself what kind of
15:43 - type of thing was in this there a list
15:45 - they need have to cast cast down down
15:49 - cast in this case to the appropriate
15:50 - type either that will use techniques
15:53 - like using you could use get class or
15:55 - instance off which we will probably look
15:58 - at in a future tutorial
15:59 - [Music]
16:00 - so that science is a pretty confusing
16:03 - topic and I think I got through I don't
16:08 - know how many years many years of being
16:10 - a professional to have a programmer both
16:14 - permanent guy in a contractor without
16:18 - actually knowing this stuff it's only
16:19 - recently that I have looked into this
16:21 - and this was only idea that I think him
16:22 - Java five or something like that so this
16:26 - is not a vital topic but if you want to
16:28 - know what a wild card does that's the
16:30 - answer and it's just just parentheses
16:33 - here let's just copy that and create a
16:37 - final version of that just use a wild
16:40 - card by itself so this code is going to
16:42 - be on cave or programmer cave of
16:45 - programming comm and you can take a look
16:48 - at this and I'm inspector your leisure
16:51 - if you want to so that should work as
16:55 - well okay and that's it for this
16:57 - tutorial and we covered so we covered
17:00 - like basic usage of generics in the last
17:02 - tutorial which is really vital knowledge
17:04 - and this stuff really is just the icing
17:06 - on the cake and in a future tutorial we
17:09 - will also cover creating around
17:11 - parametrized classes but since that's
17:14 - something that you very rarely have to
17:16 - do I'm going to leave that for a few
17:19 - tutorials down the line and we're going
17:21 - to return to looking in some more basic
17:24 - fundamental things in core Java so
17:28 - that's it for this tutorial
17:29 - join me again next time and
17:31 - next time
17:36 - [Music]
17:41 - you
17:41 - [Music]