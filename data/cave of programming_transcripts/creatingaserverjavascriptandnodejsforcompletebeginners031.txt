00:00 - hello this is john from cave of
00:02 - programming.com
00:04 - this is another video in our course on
00:06 - node.js
00:07 - and javascript for beginners and in this
00:10 - video we're going to look at creating
00:12 - a an http server
00:15 - with node.js and javascript so so far in
00:19 - the course we've looked
00:20 - at basic building blocks of programs
00:22 - essentially we've looked at things like
00:24 - loops
00:25 - and if statements and functions
00:29 - what we're going to do here is kind of
00:30 - jump ahead of ourselves a bit because
00:32 - i know that you're not learning
00:34 - javascript just so that you can write
00:37 - command line programs that say hello and
00:40 - that sort of thing
00:41 - so we're going to write a a server
00:44 - program
00:45 - that's actually going to be able to
00:46 - respond to web browser requests
00:49 - in other words we're going the output of
00:52 - our program is going to appear
00:54 - in a web browser instead of on the
00:56 - console
00:57 - and to do that we have to use various
01:00 - constructs
01:01 - that you haven't seen yet um but what
01:04 - i'm going to do is
01:04 - i'll try to explain a bit as i go along
01:08 - you're not going to fully understand it
01:10 - though yet if you follow if you follow
01:11 - the course from the beginning
01:13 - and you don't have other experience but
01:15 - as we progress through the course you
01:17 - will gradually
01:18 - understand um what we're actually doing
01:21 - here
01:22 - so um don't stress out about my
01:24 - explanations here they're just to kind
01:26 - of
01:27 - begin to introduce you to some new ideas
01:30 - but the point of this really is to write
01:32 - a little server app
01:33 - so you're going to want to either while
01:36 - you're watching this video or afterwards
01:38 - try this out for yourself type it out
01:40 - it's really important and get it working
01:42 - and experiment with it a little bit
01:44 - that's the only way that your fluency
01:46 - will increase
01:47 - okay so i've created a
01:50 - empty file called server.js and i'm
01:53 - going to write you
01:54 - strict at the top as usual
01:58 - now javascript
02:02 - code for node.js it can be
02:05 - packaged up into things we call modules
02:09 - and there are a bunch of standard
02:11 - modules
02:12 - that we can use in node.js
02:15 - javascript so if i go to the internet
02:18 - here
02:19 - and i search for something like node.js
02:21 - http
02:24 - we can find there's this node
02:27 - module and that's what we're going to be
02:30 - using here so there's a load of
02:31 - documentation here
02:33 - and in fact if you search for something
02:35 - like
02:38 - node.js create server
02:41 - then you can find example code for what
02:43 - we're going to do
02:44 - but what i'm going to do is i'm going to
02:46 - write this in a little bit
02:48 - of a kind of more verbose way
02:52 - than what you would normally see because
02:54 - it's going to be easier to explain it
02:56 - that way so essentially
02:59 - i mean the word server in software
03:02 - development
03:03 - is used in at least two different ways
03:07 - it's often used to mean an actual
03:09 - computer
03:10 - that is serving like web content of some
03:14 - sort
03:14 - so serving web pages or whatever so it's
03:17 - the actual computer that does that
03:20 - but it's also used to mean a piece of
03:22 - software
03:23 - that can serve content of some kind
03:27 - so in this case of course we're talking
03:29 - about a piece of software we're creating
03:31 - a little server program that can accept
03:34 - requests we call them from a browser
03:36 - and send back content that is displayed
03:39 - in the browser
03:42 - so the next thing that we're going to
03:43 - write after use strict is i'm going to
03:46 - declare a variable and i'm going to call
03:47 - it http
03:49 - http is actually what we call a protocol
03:52 - it's a specification for how data
03:55 - can be transferred one way of
03:57 - transferring data
03:59 - between let's say a browser and a server
04:02 - program
04:03 - in this case and the http
04:06 - module which is what we're using is
04:08 - named after that protocol
04:10 - so we're going to be using a standard
04:13 - built-in module
04:14 - in node.js that can help us implement
04:18 - a server which works via the http
04:21 - protocol the http specification
04:25 - for transferring data that stands for
04:27 - hypertext
04:28 - transfer protocol if i remember
04:30 - correctly
04:31 - so let's say now this variable could be
04:33 - called anything but i'm calling it http
04:36 - because that's the name of the module
04:37 - that it's going to refer to
04:39 - let's write let http equal require
04:43 - which we haven't seen yet but we'll look
04:45 - at later
04:46 - and round brackets on a semicolon and in
04:49 - there we're going to write
04:50 - well we're going to pass a string http
04:54 - so this basically enables us to get a
04:57 - reference to the http module
05:00 - now we can use it to create a server so
05:03 - i need another variable which
05:04 - it makes sense to call server in this
05:06 - case but again we could call it
05:08 - anything let's write let server
05:11 - equal http dot create server
05:15 - round brackets and a semicolon so we're
05:18 - calling
05:19 - a function here of the http http module
05:23 - now we need to pass a function to create
05:26 - server and so far in this course we've
05:28 - looked at passing strings and numbers to
05:31 - functions
05:32 - we haven't looked at passing functions
05:34 - to functions but sometimes you want to
05:35 - do that
05:37 - so let's say that you implemented a
05:39 - button
05:40 - that you could click somehow on your
05:42 - screen
05:43 - you want to pass code to that button
05:45 - which will be executed
05:48 - when the button is clicked so in that
05:50 - situation you want to pass a function
05:53 - to a function you want to pass
05:56 - a function containing code that you've
05:58 - written that will be executed when a
05:59 - button's clicked
06:00 - to the function to sorry to the button
06:03 - to some function attached to the button
06:06 - so that the button can then call your
06:08 - code when it's clicked
06:09 - and we're kind of doing a similar thing
06:11 - here so we've got a server
06:13 - and we want to tell it what code to run
06:16 - when someone
06:17 - requests data from the server by going
06:20 - to the appropriate
06:21 - url in a browser so we have to create a
06:25 - function now
06:26 - that will be called when a request is
06:29 - made from a browser to our little server
06:31 - program here
06:32 - so i'm going to use a function
06:33 - definition style here and write function
06:36 - let's call it request callback we could
06:39 - call it anything
06:41 - and that has to accept two arguments
06:45 - so we need two parameters here two
06:47 - arguments meaning two things are going
06:49 - to get passed to it
06:50 - which have to then appear in our
06:52 - parameters i'm gonna call the parameters
06:55 - again we can make up any name for them
06:57 - that we want
06:58 - but we should call them something
06:59 - appropriate so i'm gonna call them
07:01 - request
07:02 - and response
07:05 - and we're going to be using the response
07:07 - parameter here
07:09 - so we pass a reference to this request
07:14 - callback function to create server
07:17 - and then create server can actually
07:20 - call this function whenever we go to a
07:23 - url
07:24 - in our browser for the moment let's just
07:27 - put
07:28 - console.log
07:30 - hello in there hello
07:36 - and we won't do anything else now we can
07:38 - start the server up
07:40 - so let's write server
07:44 - dot listen round brackets and a
07:47 - semicolon
07:48 - again we're calling a function here
07:50 - that's
07:51 - attached to this server object
07:55 - so we need to specify a port to listen
07:58 - to so your computer has a bunch of
08:00 - different
08:01 - ports and um each one of them can be
08:04 - used for transferring
08:06 - data between a browser and a server app
08:09 - like this
08:10 - so we just need to pick um a port that's
08:13 - free and they're all numbered
08:15 - so let's pick 8 000 because that's
08:17 - usually
08:18 - free most of them are usually free but
08:22 - i'll just
08:23 - arbitrarily pick 8 000 here
08:26 - and we could also output some text here
08:28 - like console.log
08:32 - and let's say listening dot dot dot
08:37 - so this this function listen is gonna
08:40 - it's gonna return immediately in other
08:42 - words we're gonna
08:43 - after we call this we're gonna carry on
08:45 - executing stuff
08:46 - in our program but it's going to cause
08:50 - our server software to listen in the
08:52 - background essentially it's going
08:54 - to go into a loop that's going to listen
08:56 - for web requests from browsers
08:58 - and respond to them by calling this
08:59 - function
09:01 - now i know if you are a beginner this is
09:04 - all sounding complicated
09:05 - but all i'm trying to do here is kind of
09:08 - um
09:09 - give you an idea about what's going on
09:11 - and sort of get
09:12 - get you used to some ideas begin to get
09:15 - used to them but we're going to be
09:17 - analyzing um all this kind of stuff
09:19 - later on in the course in a lot more
09:21 - depth
09:23 - so let's now run this program i'm going
09:25 - to write node
09:26 - and then my script is server.js and we
09:30 - run it
09:31 - and it says listening so it's running
09:34 - and you notice
09:35 - i haven't got my prompt back to actually
09:37 - stop this program
09:39 - i have to do control c and then it stops
09:43 - let's run it again so the program's
09:45 - running
09:47 - and if we go to a web browser now let's
09:49 - try it
09:52 - and i need to go so unless that program
09:55 - is listening on port 8000
09:57 - so i need to type local
10:00 - local host which is essentially the name
10:04 - of my computer here colon
10:07 - eight thousand so eight
10:10 - and three naughts
10:14 - like this wait it's gone there we go
10:17 - like this if you can see that localhost
10:20 - colon 8000
10:21 - let's run it
10:25 - so nothing's nothing's happening but if
10:27 - we go back
10:28 - to my my web browser sort of hanging as
10:31 - though it's loading a page
10:32 - yours might respond differently somehow
10:34 - i don't know but we have actually made a
10:36 - request to our program if we look at the
10:38 - terminal
10:39 - it's actually output hello now what we
10:42 - really want to do
10:43 - is send some data to the browser rather
10:47 - than just having it
10:49 - trying to get data and just hanging like
10:50 - this so let's stop the program
10:54 - so let's go back here
10:57 - do control c how do we send data to the
11:01 - browser well we use our response object
11:04 - remember when we make a request in the
11:06 - browser
11:08 - we call it an http get request
11:11 - so it's like a request to get data from
11:14 - this server program
11:16 - when we do that this function will get
11:17 - called and the response
11:19 - object here allows us to respond to that
11:22 - request
11:24 - so what i can do is i can write response
11:28 - dot write
11:31 - and let's output hello world
11:37 - server or something semicolon
11:42 - and after that let's write let's do
11:44 - response dot end
11:45 - round brackets and this basically
11:49 - is going to tell our browser that that's
11:51 - it that's all the data that we're
11:53 - planning to send
11:55 - so now let's try this so i'm going to
11:57 - start up
11:59 - my program again node server.js
12:02 - go to a browser and go to localhost
12:05 - 8000
12:09 - and now it says hello world server
12:12 - hopefully it works for you i think
12:14 - actually um
12:15 - chrome is what i'm using here i i
12:18 - it hides the sort of full url from me i
12:21 - think it's actually
12:22 - http colon slash slash
12:25 - localhost colon8000 but
12:28 - it only shows the localhost 8000 bit of
12:31 - it in its version of chrome
12:33 - so what we've done here is we've written
12:35 - a program which
12:36 - if we go to a browser and we go to that
12:38 - url localhost colon 8000
12:41 - that's the port 8000 that actually makes
12:45 - a request to the server program we've
12:48 - written
12:48 - which is listing on that port and our
12:51 - server
12:52 - invokes this function to send data back
12:55 - to the browser and it just sends back
12:56 - some text
12:58 - which is usually going to be displayed
13:00 - in your browser it's possible
13:02 - another browser might ask you if you
13:04 - want to download a file and you're going
13:05 - to end up with a text file that says
13:07 - hello world server in it but i think
13:09 - most browsers these days will just
13:11 - display text data that are sent sent to
13:14 - them like this and certainly chrome does
13:16 - okay we'll leave it there for this video
13:18 - the thing to do with this if you're new
13:20 - to this
13:20 - is type it out for yourself and get it
13:23 - working
13:24 - hopefully you can get this working and
13:27 - experiment with it a bit
13:28 - if you encounter any error messages that
13:31 - you don't understand
13:32 - try to pick out the most important bits
13:34 - of those error messages
13:36 - paste them into the internet and see
13:37 - what the internet says about them
13:40 - but um you know you might need to add
13:42 - node.js
13:43 - onto the end of them or something as
13:44 - well but you should be able to get that
13:46 - working
13:47 - and it's really important to type it out
13:49 - for yourself you can see my
13:51 - code on github.com caver programming
13:54 - in my node.js public repository but
13:58 - it's no use copying and pasting this
13:59 - you've got to type it out
14:01 - to really begin to get familiar with it
14:04 - and
14:04 - get the thing working let's stop that
14:06 - with ctrl c again
14:08 - okay so we'll leave it there for this
14:10 - video and until next time
14:12 - happy coding