00:16 - hello this is John from cave of
00:20 - programming calm in this tutorial we're
00:22 - going to look at copy constructors in
00:25 - C++ so I've got this class here which I
00:30 - used in the last tutorial and very
00:33 - simply it's got it's got one instance
00:36 - member here
00:37 - string name it's got a method called set
00:41 - name sets that name and it's also got a
00:44 - method called speak which just uses C
00:47 - out to output the name of this object so
00:51 - I'm going to use this here let's create
00:53 - a animal object let's say animal animal
00:59 - one yeah I'll just do that and let's do
01:04 - animal one but set name Freddy and I'm
01:15 - going to declare another animal variable
01:18 - here let's say animal animal - I'm going
01:24 - to set that equal to animal one and
01:27 - let's do let's do animal one dot speak
01:33 - and animal two dot speak and let's see
01:37 - what we've got here so our second animal
01:39 - just uses the equals operator to assign
01:43 - animal one to animal too so if I run
01:46 - this we should see that we've got two
01:49 - animals named Freddy here and we do if I
01:54 - change the name of the second animal
01:56 - animal to dot set name two
02:01 - Bob and we run this then we find that we
02:09 - can set this the name of the second
02:11 - animal independently because this is a
02:15 - genuinely new animal let's let's add a
02:20 - constructor here to shed a bit more
02:22 - light on what's actually going on here
02:24 - in detail so if I add a constructor
02:26 - that's called an animal and let's
02:30 - implement it in line here just so we can
02:32 - easily see it I'm going to put in here
02:35 - just to see out see out animal created
02:43 - so if we run this then we get one animal
02:49 - created and yet as you can see here we
02:52 - do have two animals we are able to set
02:55 - name on the second animal it didn't
02:57 - affect the first animal so we genuinely
02:59 - have two separate animal objects here
03:01 - and yet constructors only being call for
03:04 - one of them and we saw that the
03:05 - constructor normally it's called
03:08 - whenever an object is is instantiated so
03:12 - why are we not getting the second
03:15 - constructor being called here and the
03:18 - answer to that is that were implicitly
03:20 - invoking a different constructor called
03:23 - the copy constructor when we assign this
03:27 - animal one - animal - so we do have two
03:30 - objects but this is using a different
03:32 - constructor and that constructor is
03:35 - actually setting the fields found in
03:37 - animal one at setting the fields in
03:40 - animal two - whatever is found in animal
03:42 - one or it's doing the best job it can so
03:45 - C++ has implicitly created a special
03:47 - constructor for it's called the copy
03:49 - constructor whose job is to copy the
03:52 - settings from one object to another but
03:55 - we can explicitly define that ourselves
03:57 - and if you're going to copy your objects
03:59 - you're going to assign them with equals
04:01 - like this that is a very good thing to
04:04 - do let's let's define a copy constructor
04:07 - explicitly so copy constructor looks
04:09 - like this we've got animal and then we
04:12 - have a
04:12 - Monst animal reference like this
04:17 - I need the ampersand the const animal
04:22 - reference and let's call this other and
04:27 - let's put in the implementation again
04:29 - here so this is our own copy constructor
04:33 - let's do see out here animal created by
04:41 - copying endler so now if we run this we
04:50 - find that we've got one animal created
04:53 - using this constructor and one animal
04:56 - created here using this constructor now
05:01 - the the purpose of this constructor is
05:03 - to copy the fields of this other animal
05:06 - which will actually be the one on the
05:08 - right hand side of this equals sign to
05:10 - the present animal here that were
05:12 - actually creating so now because I've
05:15 - created my own copy constructor the
05:17 - original one would no longer work so if
05:20 - I look at animal two now immediately
05:23 - after creating it if I call speak on it
05:26 - after I've created it by copying from
05:29 - animal one we say that it's got a blank
05:32 - my name is because we've overridden the
05:34 - default we've kind of blanked out if you
05:39 - like the default copy constructor and
05:42 - created our own but I knew one is in
05:44 - copying any fields so we can
05:47 - nevertheless some assured in our own
05:50 - copy constructor initialize the fields
05:53 - of the present object using this objects
05:56 - passed in this object here is going to
05:58 - be this one here on the right right hand
06:00 - side of the equals sign so we can do for
06:03 - example in this constructor something
06:05 - like name that's the name of the present
06:07 - object equals other name so even though
06:13 - name is private we can refer to it in
06:17 - the copy constructor because we're still
06:20 - in the same class and private means you
06:23 - can't access fields outside
06:24 - outside of the class but even though
06:27 - this is another object it's still at the
06:29 - same class and so we can access private
06:31 - fields here in the copy constructor
06:33 - let's check there this works and we hope
06:36 - to see that my name is will now be
06:38 - filled in with Freddy right here after
06:40 - we've created the second animal by
06:42 - copying at first so if we run this as my
06:45 - name is Freddy later we change it to
06:47 - bolt now a better way to deal with this
06:50 - is to use the constructor initialization
06:52 - list so let's do that let's put : here
06:56 - we've seen this before and let's say
06:58 - name and in round brackets we can supply
07:02 - other dot name and then we can get rid
07:04 - of this here that's a more efficient way
07:07 - of doing that and now if you run this we
07:10 - should see see the same thing again it
07:12 - was successfully copying name so however
07:15 - many fields you have in your in your
07:18 - class when you create the copy
07:21 - constructor you need to copy them all
07:23 - over to your to the new object that
07:26 - you'll be creating using this kind of
07:28 - syntax to create a copy of this other
07:31 - object which is this here and the syntax
07:36 - of the copy constructor you must have
07:38 - this constan amour reference so we pass
07:42 - in or there is a reference that means is
07:44 - it's not a pointer so we don't need
07:46 - special syntax to refer to its fields or
07:48 - methods which is good it's it's a
07:52 - reference so we can refer to it exactly
07:55 - as though we really got the object here
07:57 - but it's a Const reference and that
08:00 - actually means that we can't change this
08:03 - other object which is what we want it
08:05 - will be very strange if we if we did
08:08 - this and this which is invoking the copy
08:11 - constructor somehow changed this other
08:14 - animal on the right-hand side of equals
08:16 - that's not something that we would want
08:17 - to happen and that's why the copy
08:20 - constructor has to be particular can't
08:23 - slice otherwise I suppose it wouldn't
08:26 - work at all
08:28 - the Const here actually means that we
08:31 - can't call even any methods on this
08:35 - they're not declared Const because if
08:37 - you think about it you've seen the
08:39 - previous tutorials you'll know that if
08:41 - we could call non concerts on this other
08:46 - animal here then potentially those could
08:49 - modify this that our animal and again
08:51 - would end up with this kind of statement
08:53 - being able to modify that the object on
08:58 - the right hand side of the equals sign
08:59 - it's not what we want so just just to
09:03 - prove that point we can we can't call
09:07 - here other dot speak or we can't call
09:10 - any method that's not Const well this is
09:12 - cons that just get rid of Const and say
09:15 - there and that's do project build
09:18 - project and we get an error but if we
09:21 - put comps back in here we can call Const
09:25 - methods within the copy constructor even
09:29 - though the object is constant object is
09:32 - constant and that does allow us to still
09:35 - call Const methods so now we put that
09:37 - back in say this method is constant
09:39 - doesn't modify any of the instance
09:41 - variables now we can call speak because
09:45 - speak is the globe Const and the
09:47 - reference is to a Const object so now it
09:50 - works and if we run this and we've got
09:53 - animal other dot speak being called at
09:57 - at this point is getting a bit confusing
10:00 - to see what is which but that we can see
10:02 - that we can't call that now let's just
10:05 - delete that because because we we don't
10:08 - need it so I'll get rid of that and save
10:11 - this another way to explicitly invoke
10:16 - the copy constructor will be like this
10:18 - so animal animal animal 3 and that's
10:24 - passing animal 1 so again that's the
10:27 - valid way of calling the copy
10:31 - constructor let's just run this seal it
10:35 - works so there we go so fact when you
10:40 - use equals equals is it's an operator
10:44 - that is again it's implicitly defined
10:47 - for objects
10:48 - you get like a default implementation of
10:50 - equals it calls the copy constructor so
10:54 - here were in effect were calling equals
10:57 - which calls the copy constructor whereas
11:00 - here we're using the copy constructor
11:02 - directly so that I think is is it for
11:08 - this tutorial and and again to practice
11:11 - this define a class and give it let's
11:15 - say give it at least two fields and then
11:18 - try seeing what happens when you try
11:21 - playing around just with assigning your
11:24 - object to another object at the same
11:27 - type like that and then define the copy
11:30 - constructor and getting a copy
11:32 - constructor to work and put C out in it
11:35 - to cheder it is being vote when you
11:38 - expect it to be invoked so get this
11:40 - working using your own copy constructor
11:42 - and try this as well and also you can
11:46 - verify them you can't call non comps
11:50 - methods in your copy constructor because
11:52 - of this consti is worth actually
11:55 - checking that and checking that you do
11:56 - get an error if you try to call a non
11:59 - con smeb or flat matter modify and a
12:03 - field of other here we can't we can't do
12:06 - this either because again that violates
12:08 - the fact that we this references to a
12:12 - comp table J so if I put that in there
12:16 - that's also not going to work so have a
12:19 - go if you have a go yourself if you've
12:21 - got that energy inclination and
12:23 - motivation try defining your own copy
12:25 - constructor and again this is something
12:28 - that's used quite a lot in C++ and as
12:32 - always you won't feel comfortable with
12:34 - it until you've used it quite a bit in
12:36 - your own programs but if you even just
12:38 - go through this here typed it out and
12:40 - get it working then that's a really big
12:42 - important step forward so until next
12:45 - time happy coding
12:59 - you
13:12 - you