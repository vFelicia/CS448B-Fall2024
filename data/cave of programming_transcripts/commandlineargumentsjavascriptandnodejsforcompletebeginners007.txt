00:00 - hello this is John from cave of
00:02 - programming calm and in this video we're
00:05 - going to take a look at command line
00:07 - arguments in node J s so we've seen that
00:12 - you can write use strict like this at
00:15 - the top of your files I mean it just an
00:19 - empty file here which I've called
00:21 - command line J s and you can declare
00:25 - variables like this let that's right let
00:28 - greeting equals hello and you can output
00:36 - stuff you can print it on the console
00:37 - like this console dot log greeting so
00:43 - I've declared a variable called greeting
00:45 - I've assigned a value to it
00:48 - hello and I've printed the value in that
00:52 - variable and I can run this from the
00:56 - command line by writing node and the
01:00 - name of the script it says hello
01:03 - now you can actually output multiple
01:05 - variables or values with console dot log
01:08 - so let's supposing I want to output a
01:13 - name or some text here I can write comma
01:16 - and in single or double quotes a name so
01:22 - I'm going to say hello to myself here
01:23 - hello John if I run this let's try it
01:27 - it says hello John notice there's a
01:30 - space between them although there's no
01:34 - space here that you can see well there
01:37 - is a space there but the thing is
01:40 - JavaScript doesn't take notice of spaces
01:43 - in your code it would take notice of a
01:45 - like a space in your string this may be
01:48 - change this to single quotes for
01:49 - consistency it doesn't matter which you
01:53 - use though
01:57 - all right I like to keep things
01:58 - consistent but when you output multiple
02:03 - variables or values like this it will
02:07 - put it will helpfully separate them by
02:09 - spaces so that they're easier to read
02:11 - now do try this out for yourself and
02:16 - what I want to show you here is that
02:18 - there's a special kind of well it's
02:21 - actually what we call an array Arg V
02:23 - that contains various useful values so
02:27 - let's let's try outputting stuff with
02:30 - ography here so I'm going to write
02:33 - console.log and process don't worry
02:39 - about what processing console and stuff
02:41 - like this are just at the moment process
02:44 - dog V and then we have two square
02:48 - brackets like this an open opening and a
02:51 - closing square bracket and in there I'm
02:53 - going to write 0 right so we've got to
02:57 - consult logs let's run this program and
03:02 - see what it does so we've got we've got
03:08 - the hello John that's still there but
03:10 - what this console dot log processed that
03:15 - our v-0 did was it output actually the
03:18 - location of node the node program that
03:20 - we're using you'll probably get
03:22 - something different it just depends
03:23 - where you installed it and how you
03:25 - installed it you know but you get the
03:28 - location of node hopefully if we change
03:31 - this 0 to 1 there's something else in
03:35 - there
03:35 - that is sometimes potentially helpful
03:40 - and here we get what is this it's the is
03:44 - the location of the program that I'm
03:48 - running command-line doc j/s that's my
03:50 - that's the file that I'm actually
03:51 - running and there's another possibility
03:55 - process the arc v2 now if I run this
04:00 - it's just going to say
04:02 - undefined but here's what it actually
04:06 - does let's just clear this I'll say node
04:08 - command-line yes
04:10 - and I'm going to type something like
04:12 - giraffe and it outputs giraffe so you
04:18 - can see that this text here is actually
04:22 - outputting what I've typed on the
04:25 - command line here which in this case was
04:28 - giraffe now if you've been if you've
04:31 - done some programming before you'll
04:33 - recognize rgv as a array and if you
04:37 - haven't done any programming before this
04:40 - will be like completely cryptic as far
04:43 - as he'll concerned but that's alright
04:45 - that's alright for the moment you'll you
04:48 - come to understand this in time as we go
04:50 - through the course notice there are two
04:52 - places where I've written something dot
04:54 - something this console dot log and this
04:58 - process dog V those are what we call
05:00 - objects in JavaScript and if we search
05:03 - on the internet for nodejs
05:05 - global objects there are a bunch of
05:09 - these things let's go to this link here
05:12 - at nodejs dog and you can see in here
05:16 - there's console there's process there
05:19 - are a bunch of these global objects and
05:22 - there we can access never mind about
05:25 - what they are just know that there are
05:27 - several different ones and in fact log
05:30 - here is it's what we call a method it's
05:33 - essentially a subroutine it's some code
05:37 - that we can run some lines of code
05:39 - basically and ography is what we call an
05:42 - array and we're going to be going
05:44 - through all this in great detail but for
05:47 - a moment let's just make use of this and
05:49 - so this process ography let's let's get
05:54 - the value of it in a variable let's say
05:57 - let name equals that name equal process
06:03 - dog V so whatever the user enters after
06:06 - the program we will take that and we
06:09 - will put it in a variable name and then
06:12 - when I do consult log I'll write console
06:15 - dot log greeting and then name okay so
06:21 - it again if you've done program
06:23 - growing before in some language this
06:25 - will probably be very straightforward to
06:27 - you but in case you haven't it'll look a
06:30 - bit mystifying do type it out for
06:33 - yourself
06:34 - essentially we've got two variables here
06:36 - one I'm setting directly with us what we
06:39 - call a string literal an actual
06:41 - hard-coded value a value I've written
06:44 - directly into my program so greeting is
06:47 - is a sign this value we've got a
06:50 - variable called name which is assigned a
06:53 - value from this thing here and that
06:55 - thing there contains whatever you type
06:58 - after the name of your program when you
07:01 - run it and then we're outputting both of
07:03 - these variables one after the other
07:05 - let's try this and so I'm going to write
07:10 - node command line and some name like Joe
07:14 - or whatever you can write your name
07:16 - there hello Joe notice if I write two
07:21 - two things that's right a surname
07:26 - it only picks up the first one that's
07:29 - because it's considering this to be
07:32 - another what we call command-line
07:34 - argument so this is the first
07:36 - command-line argument and that's another
07:38 - command-line argument we could access
07:40 - that using the number three but we won't
07:43 - worry about that here and all I want to
07:46 - do is get some many more stuff off the
07:48 - command line and I'm happy just with one
07:51 - bit of text okay try all that out for
07:55 - yourself if if you are a beginner this
07:59 - stuff is confusing and there is this
08:01 - just initial feeling of confusion that's
08:04 - always associated with program with
08:07 - learning programming at the beginning
08:09 - and also if you have program programming
08:13 - experiencing you switch from one
08:15 - language or framework to another it
08:17 - doesn't persist as long but often you
08:19 - sort of recreate that feeling of
08:21 - confusion slightly and you just have to
08:23 - persist through it because the important
08:25 - thing at the moment is that you type
08:26 - stuff and you just see what it does an
08:28 - ideally experiment with it a bit
08:30 - yourself as well and gradually this will
08:33 - become second nature to you and as we go
08:35 - through this course
08:36 - be able to explain to you all of the
08:39 - stuff that's going on here so eventually
08:42 - it will lose its mystery but I can't
08:44 - just explain it all now because X the
08:48 - explanation would involve just too many
08:50 - different concepts and you would get
08:52 - lost so you need to practice this stuff
08:55 - that I'm showing you kind of just
08:57 - practice typing it and getting it
08:59 - working and you'll gradually get used to
09:02 - it one thing that I should do here is
09:06 - since we're using I'm using getting this
09:09 - course I should check this in to get but
09:13 - I can't I'll do that
09:15 - I've tried pause the video ok so until
09:18 - next time happy coding