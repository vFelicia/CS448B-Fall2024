00:00 - hello this is John from cave of
00:03 - programming and this is another video in
00:05 - my JavaScript and nodejs of for
00:09 - beginners tutorial and in this video I
00:13 - just want to talk a little bit about the
00:14 - history of JavaScript so I looked up
00:18 - when JavaScript was actually devised and
00:21 - created and apparently it was about 1995
00:25 - so I started as far as I remember I
00:29 - think the first web page that actually
00:31 - created would have been 1997 and I
00:36 - started looking at VB script at the time
00:41 - and JavaScript pretty soon after that so
00:43 - I think I started using javascript
00:45 - fairly soon after it was after I
00:48 - actually came out now in the last video
00:53 - we looked at this identity test operator
00:55 - and I don't remember that identity test
00:57 - operator being there in the early days
01:00 - of JavaScript I couldn't actually find
01:02 - out about the history of it in the 10
01:05 - minutes 5 10 minutes I spent searching I
01:08 - didn't manage to find out when it was
01:09 - added to JavaScript but I don't remember
01:13 - it being there if it was there I don't
01:15 - think many of us used it that's for sure
01:17 - but I think it was added to JavaScript
01:19 - quite late on now JavaScript when it
01:23 - first came out was a scripting language
01:25 - that was intended to add a little bit of
01:27 - functionality to webpages so you'd write
01:30 - a web page in HTML a kind of tag based
01:33 - language that we'll look at a little bit
01:35 - later later on in this course and that
01:38 - represents you know how your web page
01:41 - looks and then in the early days
01:43 - sometimes you wanted to do you wanted to
01:45 - add just a little bit of functionality
01:47 - to your website and typically you'd be
01:50 - either creating an image rollover which
01:53 - were popular in the past and that's
01:54 - where you moved your mouse over an image
01:56 - and it changed when your mouse moved
01:59 - over it or you'd be adding some
02:01 - validation to a web form see how a form
02:04 - people could enter information in and
02:06 - you wanted to make sure that they that
02:10 - they could only enter you know in from
02:13 - it was appropriate like that they didn't
02:14 - type he didn't tie letters into a
02:18 - telephone number field or whatever and
02:20 - of course that that's not ironclad
02:22 - validation a hacker could get around it
02:24 - but it was help it was it was and it is
02:27 - helpful for the average web user so
02:29 - javascript was at first used for that
02:32 - sort of thing
02:33 - and typically nothing much more
02:35 - complicated than that so it you know it
02:40 - would have been strange under the
02:42 - circumstances but if JavaScript
02:44 - continually forced you to convert one
02:46 - thing into another like the value that
02:48 - you get back from a form in a on a web
02:54 - page that's is that coming back as text
02:57 - or as a number probably text and then if
03:00 - you want to compare it to a number you
03:01 - don't have to convert it so the equals
03:04 - equals operator was implemented
03:06 - generally to be extremely flexible in
03:09 - JavaScript but what what's happen I
03:12 - think is that as JavaScript has moved
03:15 - towards being a general-purpose
03:17 - programming language then this equals
03:21 - equals operator equality test operator
03:24 - has just been felt to be too flexible
03:27 - too helpful and we we have this stricter
03:31 - identity test operator has been added to
03:34 - JavaScript and in fact I think it some
03:39 - people say that the equals equals
03:41 - operator is now the evil twin of the
03:45 - equals equals equals operator so they
03:47 - say that you shouldn't use it unless you
03:50 - really absolutely need it and I concur
03:53 - with that really I think now use the
03:58 - identity test operator with three equals
04:01 - signs wherever possible and generally
04:03 - avoid using the equals equals or their
04:05 - for that matter they're not equal
04:07 - preferred a version with more equal
04:09 - signs because it's a stricter test and
04:12 - it doesn't do unnecessary
04:14 - convert conversions and these
04:17 - conversions you might sometimes find
04:20 - them find it a bit hard to even predict
04:22 - what they're going to do you know it's
04:24 - letting the language get out of your
04:25 - control a little bit
04:26 - it's better to use something stricter so
04:29 - that you're sure of what's actually
04:30 - going on wherever possible now the path
04:33 - from a sort of lightweight silly little
04:38 - programming language used in browsers to
04:41 - a general powerful programming language
04:43 - has been a long and hard one for
04:45 - JavaScript the problem was that in the
04:48 - early days every browser had its had a
04:51 - different implementation of JavaScript
04:53 - and in fact things that worked in one
04:56 - browser didn't always work in another
04:57 - and that is still a little bit of a
05:00 - problem but much less of a problem than
05:02 - it was in the in the early days and
05:05 - often now we're not even writing
05:08 - JavaScript in a browser you know here
05:11 - I'm starting off this course I'm we're
05:13 - doing it on the command line to start
05:15 - with but that was an obstacle to
05:18 - improving JavaScript because if someone
05:21 - let's say the people who are in charge
05:24 - of Internet Explorer which was for a
05:27 - while a very popular web browser if they
05:29 - added some new innovation in JavaScript
05:32 - to their browser the people who were in
05:35 - charge of the netscape browser or
05:37 - whatever they you know they didn't
05:40 - necessarily had the same thing you know
05:42 - i so it was just a mess and what was
05:47 - what were one early attempts a kind of
05:49 - paper over the cracks was people created
05:52 - they created sort of javascript api Zoar
05:56 - libraries like jQuery which gives you a
05:59 - sort of common interface that papers
06:01 - over the cracks so you use jQuery it's
06:04 - still very useful today and it can do
06:06 - much more than just papering over cracks
06:08 - but one thing it does is it gives you a
06:11 - kind of standard interface that works
06:14 - the same on all browsers you know you
06:17 - work with jQuery and it kind of works
06:22 - with JavaScript behind the kind of
06:24 - scenes it is just an addition to
06:25 - JavaScript but it makes JavaScript a bit
06:28 - more seamless and there are also things
06:29 - like CoffeeScript that sort of compile
06:32 - to JavaScript and again give you a sort
06:36 - of uniform way of dealing with
06:38 - JavaScript but
06:39 - what was really needed was a kind of
06:43 - universal language standard for
06:45 - JavaScript and that developed in the
06:48 - form of this thing epimer script a comma
06:51 - stands for something like what does it
06:54 - stand for actually let's take a look I
06:57 - don't want to tell you the wrong thing
07:00 - here echo take a look here ECMO stands
07:07 - for just I'm going to tell me is it
07:14 - computer manufacturer something computer
07:19 - manufacturer all right
07:22 - let's just tie this into Google what
07:24 - does ECMO stand for Europe I thought it
07:29 - was European but I didn't like to say
07:31 - because I was thinking European really
07:34 - usually this stuff comes out of the
07:35 - states okay but European computer
07:38 - Manufacturers Association incredibly so
07:41 - this this ECMO script is a standard for
07:47 - JavaScript essentially it's not a
07:49 - language in itself it's a standard
07:51 - foreign language and we can see okay the
07:53 - fourth edition was abandoned but the
07:55 - fifth edition came out at some point and
08:00 - that kind of took and then you know we
08:04 - see major progress around you know sort
08:06 - of like 2011 2015 and so on you can see
08:12 - that yeah ad strictmode in 2009 so
08:17 - anyway now this has kind of changed the
08:22 - dynamic that's going on here because now
08:24 - people who implement JavaScript in a
08:26 - browser
08:27 - sort of are going to have to pay
08:29 - attention to this Xmas standard and
08:31 - hopefully they'll all implement the same
08:33 - thing so it's a big step forward to
08:35 - creating a unified coherent sense of
08:38 - what JavaScript is that will be
08:40 - supported by all major implementations
08:43 - and I guess it probably helps as well
08:45 - that at the moment the Chrome browser is
08:47 - dominating the scene so what chrome does
08:50 - other browsers are going to have to play
08:52 - catch-up way
08:53 - so now we've got this unified standard
08:55 - for JavaScript and a part of it I did I
08:58 - think in a maybe 2011 but I'm not sure
09:02 - don't take my word on that
09:04 - is this equals equals equals operator
09:06 - that helps make it a more strict sort of
09:09 - a language okay so I just wanted to talk
09:12 - about this a bit in case you wonder why
09:15 - three equal signs just to check equality
09:19 - and also it's important to know by this
09:23 - Xmas standard a single equal sign
09:27 - is used to assign values of course
09:29 - equals equals to equals signs that was
09:31 - used to check equality but I was felt
09:34 - unsatisfactory and now in the second
09:36 - script standard we have this identity
09:38 - test operated with three equal signs
09:40 - hopefully there's not going to be one
09:42 - with four equal signs that would just be
09:44 - too much all right
09:46 - so that's it for this video until next
09:48 - time happy coding