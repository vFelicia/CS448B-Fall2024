00:17 - this is john from cave of programming
00:20 - accom in this tutorial we're gonna
00:23 - refactor this basic STL program a bit
00:26 - and we're going to introduce a screen
00:29 - object that's gonna encapsulate some of
00:32 - this code I finally figured out what
00:34 - yellow is in red green and blue I really
00:38 - can't believe I actually forgot that but
00:40 - apparently is red and green combined if
00:43 - I can get this to actually run oh yeah I
00:47 - need to stop Eclipse being full screen
00:51 - here it's yellow I really I really don't
00:54 - know how I managed to forget that but
00:55 - anyway so in a moment we've put
00:59 - everything in one main function and I'd
01:02 - recommend you do that to get a demo
01:05 - program working that just demonstrates
01:08 - the basic things that you need to do
01:10 - with your program things that that
01:13 - you're not sure if you can actually get
01:15 - to work with your particular API on your
01:17 - system like pixel access or like
01:22 - creating us making a sound or whatever
01:25 - it is if there's anything you're not
01:26 - sure that your program is actually going
01:28 - to be able to do on your computer then
01:31 - test it by following a tutorial types to
01:34 - file yourself and get a main function
01:37 - working we're just some coding in a test
01:39 - the principle but now that we've done
01:41 - that we don't want to keep adding code
01:43 - to it because it would eventually by the
01:45 - time we finished the program be really
01:47 - hard to understand what's going on we'd
01:49 - have a huge amount in the main function
01:52 - you could split it up into multiple
01:54 - functions which is kind of the old C
01:57 - style C is the language C++ was based on
02:01 - and it doesn't have classes and objects
02:02 - but we're going to use an object here
02:05 - because after all this is C++ and
02:07 - objects are a nicer way of organizing
02:10 - your code than functions or at least
02:12 - many of us think so so let's right-click
02:15 - this project here well I should just
02:20 - explain actually and first
02:22 - if we just look at this code it's
02:25 - basically doing three things there are
02:28 - three things that are really important
02:29 - anyway at the moment there's the setup
02:31 - of STL which is quite a lot of code
02:34 - there's the game loop here and then
02:38 - there's tearing down STL we've also got
02:41 - some drawing code here as well so it one
02:49 - kind of candidate for parceling this
02:50 - into a into a class will be we could
02:53 - have a class that there's a setup and a
02:55 - teardown of STL and we could then think
02:57 - about where to put the other bits of
03:00 - code that don't quite fit into that idea
03:02 - but we could have some kind of class
03:05 - which you could call STL or something
03:06 - but to avoid confusion I'm going to call
03:08 - it screen because it's basically working
03:10 - with graphics and we're going to put the
03:13 - setup and teardown code in that and
03:16 - later on we'll think about moving all
03:18 - the code into there as well and for a
03:20 - moment I'm just going to concentrate on
03:22 - getting this into it into a class and
03:25 - later on we'll think about how to
03:27 - arrange bits like like this code for
03:29 - example so let's right-click the project
03:33 - here and go to new class and I'll create
03:37 - a class called
03:37 - screen and I'll put it in a package
03:39 - called cave of programming you can call
03:42 - the package whatever you want as long as
03:44 - it's not spaces in it and I'll click
03:46 - finish and here's our our class files
03:48 - the header and the CPP file you'll
03:52 - notice that this STL api that i've used
03:55 - just uses functions not at least this
03:59 - version anyway it doesn't use classes
04:01 - and they prefix the functions with STL
04:03 - underscore and that's because you want
04:07 - to avoid that you want to avoid name
04:08 - collisions your your end user the end
04:12 - user of STL which is us in this case
04:14 - might have another function court for
04:16 - example in it or create window or
04:19 - whatever so you don't want that name to
04:22 - come to conflict with the STL functions
04:25 - and for that reason the Craters of STL
04:28 - have prefix these functions with STL
04:31 - underscore it used to be common and
04:34 - perhaps still is in c++ to prefix the
04:36 - names of classes in the same way so you
04:39 - could have a class called c window or
04:41 - something and a prefix c is there just
04:44 - to disambiguate it from window which
04:47 - would otherwise be very very common name
04:49 - for a class that's not really necessary
04:52 - anymore now we've got namespaces
04:53 - namespaces allow us to avoid name
04:56 - collisions in a more elegant way so we
04:59 - can happily call a class window or
05:01 - screen knowing that our namespace will
05:04 - protect us from name collisions because
05:06 - we can select what namespace we use
05:09 - classes from so the first thing I'm
05:13 - going to do is I'm gonna I'm going to
05:18 - take out things like render a texture
05:20 - window and buffer in here and make them
05:23 - make them instance variables in screen
05:26 - door age so let's go ahead and do that
05:29 - so I could I could just copy this
05:31 - actually so that lets let's actually do
05:33 - it from the top I'm gonna get a steal
05:35 - window in here go to screen die so I'll
05:37 - just copy that I'm gonna create a
05:39 - private section here private and paste
05:45 - in that and we also want we also want
05:50 - the renderer
05:52 - sort of got a window the renderer
05:58 - we've got the texture
06:04 - and we've also got this buffer down here
06:09 - which I'm also gonna put into screen
06:12 - because it's pretty closely related to
06:14 - the other stuff that's being done here
06:16 - now a convention that a lot of people
06:18 - follow and that I'll follow as well is
06:20 - that if you have member variables
06:23 - you often prefix them with met and
06:25 - underscore just to make it clear that
06:27 - they are instance variables and not
06:29 - local variables so let let's do that as
06:31 - well I think I think that's that's all
06:37 - good
06:37 - we'll also take the screen width and
06:41 - height constants here and I'm gonna make
06:45 - those static constants public static
06:47 - constants in the screen class public
06:50 - because we might need to refer to them
06:51 - elsewhere static because because we only
06:57 - want one of them for the whole screen
06:59 - class we don't need different values for
07:03 - each different screen object and is
07:06 - there's no problem accessing constants
07:08 - really from for outside your class you
07:11 - can make constants public if it's
07:13 - necessary to do so and here I think
07:16 - we're gonna have to refer to screen
07:18 - width and screen height quite possibly
07:20 - outside of the screen class so will
07:22 - mainland public static constants here
07:26 - let's give screen some some methods so
07:31 - I'm gonna give it a constructor I'm
07:34 - going to give it a method called init
07:37 - which is going to return ball it's going
07:38 - to return true or false false if it
07:41 - fails truth it succeeds we're going to
07:43 - give it avoid close which is going to do
07:46 - the the kind of deallocation code that
07:49 - the closed down code and I'll also give
07:53 - it a method pool process events as well
07:58 - because we can put the event processing
08:00 - into this class as well so it kind of
08:03 - looks like magic and the way I'm just
08:05 - producing these at the moment but I
08:07 - thought about this quite a bit I tried a
08:09 - few different things out and this is a
08:11 - solution
08:12 - I settled on and you'll see how this
08:13 - works as I go along so let's copy these
08:16 - because we need to create the method
08:20 - implementations in the namespacing
08:22 - screen dot cpp here we need to prefix
08:25 - them all with screen colon colon to say
08:28 - what class they belong to that goes
08:31 - right before the method name and we need
08:34 - to get rid of this semicolon and put in
08:36 - the brackets that enclose the
08:39 - implementation so let's just copy those
08:43 - paste them into the right place and
08:44 - finally we'll use auto format to format
08:47 - that there we go so for the constructor
08:51 - I'm not going to make the constructor do
08:53 - the initialization because we can't
08:55 - return a value from the constructor to
08:59 - say whether it succeeded or not we could
09:02 - we could constructor could throw an
09:05 - exception but we haven't looked at
09:07 - exceptions in this course I'm going to
09:08 - save that for my next course
09:10 - intermediate course in C++ so we'll just
09:13 - have this init method that can return
09:15 - true or false to say where it succeeded
09:17 - or not but we will have the constructor
09:20 - initialize the instance variables let's
09:23 - copy them and for a minute I'll just
09:26 - paste them into a random space here
09:29 - because I need to get rid of all these
09:31 - types you'll see what I'm doing in a
09:33 - second but I'm just trying to
09:35 - efficiently edit these and to put them
09:38 - in the constructor initialization list
09:40 - I'm gonna initialize each of them to
09:42 - null and then we need to follow each
09:45 - with a comma so I'll do that with each
09:49 - of them I said the last one doesn't need
09:52 - a comma and then let's cut those so
09:55 - we'll put a colon after the closing
09:57 - round bracket at the constructor to form
09:59 - the initialization list here and paste
10:00 - them in and use the format and if you've
10:03 - got it right it should format it nicely
10:05 - we're getting an error here saying null
10:09 - is not defined let's go to screen dot
10:11 - age and that's because we need to
10:13 - include the SDL by age and if I include
10:17 - SDL dot eighteen screened age
10:19 - then it's because screen dot cpp
10:23 - includes screen dot age that's also
10:25 - going to include STL age in screen dot
10:28 - cpp as well so let's include up here
10:32 - let's include in screen door age will
10:36 - include STL by age and then hopefully
10:42 - yeah those some of those errors will go
10:45 - away so for remit let's put in return
10:47 - true we're gonna put the initialization
10:49 - code in a minute for process events
10:51 - that's part of support return false just
10:54 - so they will compile for a moment and
10:56 - close doesn't need to include anything
10:59 - there so now we can go back to main dot
11:03 - cpp look at all our initialization code
11:05 - and take it all out and I'll also take
11:08 - this stuff that sets the pixel colors
11:10 - just for the moment which isn't gonna
11:14 - stay in the init function but I'll put
11:17 - it in there for a moment because my
11:18 - object for the moment is just to get
11:20 - this comp to compile in a more
11:22 - object-oriented form and we can think
11:24 - about details afterwards let's cut all
11:27 - this and paste it into screen dot let's
11:35 - put it into screen darn it let's this up
11:39 - this render code in there as well for
11:42 - the moment that's also going to move
11:44 - later on but we're just trying to
11:46 - transfer everything in the simplest way
11:48 - possible to our screen class at the
11:51 - moment I just format that now if I say
11:54 - that we should get lots of errors
11:56 - because things like window are not
11:59 - defined we haven't included iostream so
12:02 - see how is not defined I'm going to get
12:03 - rid of all the C outs and instead of
12:06 - returning an error code return false
12:09 - from in it so that we can know that in
12:11 - there has not succeeded if it doesn't
12:14 - succeed then you want information more
12:16 - information on why remember you can
12:18 - always use STL guitarra to get that
12:20 - information I see as you've seen in a
12:23 - previous tutorial
12:25 - so let's get rid of let's change this
12:28 - defaults get rid of this see out this is
12:33 - false if it fails we return false
12:35 - and here's another see out this would
12:39 - have to return false and then finally if
12:41 - everything succeeds we would return true
12:43 - at the end so the next thing we need to
12:49 - do is change things like window 2m
12:51 - underscore window because we name those
12:54 - there and we need to we need to get rid
12:56 - of the variable declarations these local
12:58 - variable declarations one really common
13:01 - error in C++ or Java or lots of
13:03 - programming languages for that matter is
13:07 - that you create an instance variable
13:09 - like this one and then you try to
13:12 - initialize that in a constructor or I
13:15 - mean it's method and by accident you
13:17 - redefine it so you do something like
13:19 - this and this then masks the instance
13:22 - variable and doesn't do what you
13:23 - expected to do so when you try to use
13:26 - the instance variable later it doesn't
13:28 - work so you have to watch out for that
13:30 - don't accidentally read eclair instance
13:33 - variables as local variables we need to
13:36 - get rid of this type definition and just
13:39 - use the instance variable there so let's
13:41 - work through this
13:42 - adding the M underscore prefixes getting
13:45 - rid of the type declarations here so
13:50 - I've got her a window there here's a
13:54 - here's a renderer this texture needs to
13:57 - change to an underscore so we need to
14:00 - destroy the window there here's the
14:03 - texture he's the renderer again here's
14:06 - the window and now we here for update
14:12 - texture we've got M underscore texture
14:15 - we've got clear the renderer for the
14:18 - render copy we've got renderer and
14:20 - texture and underscore and here we
14:23 - present the renter and actually draw it
14:25 - on the screen so that that looks pretty
14:29 - good
14:31 - that might compile in itself but we've
14:33 - got an error in main dot CPP so we've
14:36 - got to do something about this teardown
14:39 - code now this D initialization code I
14:42 - think there's a word I'm searching for
14:44 - to describe you know closing everything
14:46 - down but for some reason it's not coming
14:48 - to my mind but anyway we need to cut
14:50 - this stuff here and put it into our
14:56 - screen dot close method and we need to
14:59 - change these so they all also have that
15:03 - ml underscore prefixes and they refer to
15:06 - our instance variables I'll just do it
15:08 - format on that and save that now I think
15:13 - this would actually compile
15:17 - let's put screen object in the air and
15:19 - let's say screen screen and let's say if
15:23 - screen dot in it equals false or we
15:28 - could say if not screening it C out
15:32 - aerial initializing STL that's not a
15:37 - pretty message for the user but as long
15:39 - as it's only something we're developing
15:42 - on our own machines and it's fine at
15:44 - least it tells us what's happening we
15:46 - need to include the screened a to the
15:47 - top of main dot CPP so we can use the
15:50 - screen class remember you need double
15:52 - quotes not angle brackets because it's a
15:54 - local include it's not in a standard
15:56 - directory say that hopefully these areas
16:00 - will go away very shortly and down here
16:04 - after the game loop we need screen dot
16:08 - close
16:10 - now let's save everything and see if it
16:14 - works I'll go to build project yes and
16:21 - another thing I've forgotten is I forgot
16:23 - to say what namespace I'm using here
16:25 - because we put the screen in the cave of
16:27 - programming namespace
16:29 - I'm not going to prefix screen with that
16:31 - namespace I could do but I don't need to
16:33 - because there's I don't think there's
16:34 - gonna be there's not going to be any
16:36 - other screen class in our program so I
16:38 - can just say yeah using name space cave
16:42 - of programming let's try that so build
16:48 - this hopefully the errors will go away
16:50 - seems to have built without any errors
16:52 - which is good let's run it and see if it
16:54 - works
16:57 - yes so it works that's really good and
17:00 - we could also put this event code
17:06 - somewhere into screen now I thought
17:09 - about putting all of this loop here
17:12 - while not quitting somewhere into screen
17:14 - but that's not really good because in
17:17 - this loop I want to draw particles and I
17:21 - I don't want my particles tied to my
17:24 - screen stuff what I want to do is create
17:26 - a screen class but I can reuse in other
17:28 - programs pot programs that have nothing
17:31 - to do with particles so I don't put the
17:34 - whole loop into screen but this bit is
17:38 - it's just the bit that basically closes
17:41 - the screen if you click the cross on the
17:43 - corner of it so why not put this into
17:45 - the screen class as well let's let's cut
17:48 - this
17:50 - and go to screen dot cpp and in-process
17:54 - events I'm going to paste that in format
17:57 - that and what I'll do is instead of st.
17:59 - quit equals true if we get that quit e
18:01 - then I'll return false from the function
18:04 - otherwise I'll return true so now we've
18:11 - got this loop which checks all the
18:14 - events and if any of them are type STL
18:17 - query returns false from this otherwise
18:20 - after after finishing checking all the
18:22 - events it will return true so let's go
18:26 - back to main that CP peeks we need this
18:28 - declaration of STL event in here I need
18:31 - to put that in there as well so now all
18:36 - we have to do is every time we go around
18:39 - our loop we call screen dart process
18:43 - events and we say that if this is if not
18:50 - screen process events or if screen
18:53 - process events is equal to false it
18:55 - doesn't matter
18:56 - that means that the quit van was
19:00 - received and that means that we can quit
19:04 - the loop so we can just say break now
19:06 - which will break this outer loop in
19:09 - other words it will stop it running and
19:12 - now we don't even need this quick thing
19:14 - really we can just say while true have
19:17 - an infinite loop and we'll use break to
19:20 - get out of the loop if process events
19:22 - tells us that the stl quit event has
19:25 - been received I'm going through this
19:26 - quite quickly but I made the code
19:28 - available for you to check on cave or
19:30 - programming comm or wherever you're
19:32 - watching this tutorial
19:35 - except on YouTube where I can't attach
19:37 - files to YouTube but everywhere else
19:39 - I'll ultimately attach the code to the
19:42 - lecture where possible let's run this
19:44 - now and see that it works and it does
19:46 - work
19:48 - so after this work we're gonna need to
19:51 - start thinking about rendering a bit
19:54 - more clearly how we're going to do the
19:56 - drawing how we're going to manage that
19:58 - exactly we've got another a few more
20:01 - puzzles to solve as well like how we're
20:03 - going to deal with colors and so on but
20:05 - I leave it there for this tutorial so
20:07 - until next time happy coding
20:17 - you
20:31 - you