00:04 - [Music]
00:17 - hello this is John from cave of
00:19 - programming calm and this is a tutorial
00:21 - on the static keyword in Java so I'm in
00:27 - eclipse and I've got my main program
00:28 - here and I'm gonna start by creating a
00:31 - class appear which I'll call thing and
00:34 - I'm gonna give thing to member variables
00:39 - I'll make them both public and let's
00:43 - give this a name variable of type string
00:46 - and I'll also give it a another variable
00:51 - of type string called description now
00:56 - description I'm going to make static so
01:00 - before the string type here I'm going to
01:03 - put the keyword static and we'll have a
01:06 - look at what the difference is between
01:08 - this and this so if I and by the way I
01:13 - should mention that usually if you have
01:15 - member variables most of the time you
01:18 - declare in private or protect it which
01:21 - we will look at later in this series of
01:23 - tutorials but just for this tutorial I'm
01:25 - going to main in public to keep things
01:28 - simpler so I'm going to declare a couple
01:32 - of thing objects here so let's have
01:35 - thing 1 equals new thing and I'll have a
01:41 - thing thing 2 equals new thing now with
01:48 - the name variable here each thing object
01:52 - has its own copy of name so I can set
01:55 - thing 1 dot name equal to Bob and thing
01:59 - 2 dot name equal to Sue and of course I
02:05 - can display those will assist out so
02:08 - that say thing one dot thing one name
02:12 - and
02:14 - this control space thing to dot name and
02:21 - of course if I run this it's gonna say
02:25 - Bob and Sue the difference with the
02:29 - static member variable here is that each
02:34 - object does not get its own copy static
02:37 - member variables also known as class
02:40 - variables belong to the class and there
02:43 - is only one copy because there's only
02:45 - one class so if I want to access
02:48 - description I access if I had a class I
02:52 - type the class name description equals I
02:56 - am a thing and I can do this out on that
03:02 - in the same way thing dot description so
03:07 - variables like this which aren't static
03:11 - are called instance variables because
03:13 - every separate instance for example our
03:17 - or in other words and every separate
03:18 - object of the type thing gets its own
03:21 - copy
03:22 - whereas static variables like this are
03:25 - often known as class variables because
03:29 - they are associated with the class so if
03:31 - I run this you'll see down here it says
03:35 - I am a thing and let's also have a look
03:40 - static methods versus instance methods
03:45 - because if I create here a public show
03:50 - name let's say I can do in here sysout
03:55 - name and so I'm just start putting the
03:58 - name using this instance method and I
04:02 - can replace my sis outs down here with a
04:06 - call to thing one show name and I should
04:12 - put the return type here for it and
04:15 - thing to dot show name like this so if I
04:21 - run that it's just going to do the same
04:23 - as before I'm just calling these methods
04:25 - to output the name for each object now
04:30 - as you might suspect with a static
04:34 - variable let's just maximize the Edit
04:37 - area control m in eclipse with a static
04:41 - method sorry you can access avoid a
04:44 - class so if I write public static for
04:48 - Eid let's say college showing show info
04:52 - then I just to assists out in here and I
04:57 - will put hello just for a moment so to
05:01 - run this show info I just say thing the
05:08 - class name in this case dot show info
05:11 - like that
05:13 - so I'm accessing it by the class let's
05:15 - get rid of this this out and if I run
05:18 - this now it's it's gonna output hello so
05:24 - I'm running this static method here via
05:26 - the class now there are a couple of
05:30 - things to bear in mind here one thing is
05:35 - that static methods can access static
05:40 - data because both belong to the class so
05:44 - if I say in here I want if I output
05:47 - description the static I'll put the
05:50 - static variable in my static method
05:52 - that's gonna work so this is gonna say I
05:56 - am a thing just from calling my static
05:59 - method here but I static methods can't
06:04 - output instance variables like name this
06:09 - gives me an error which says kind of
06:11 - make a static reference to a non-static
06:13 - field name and that makes sense if you
06:17 - think about it because the static data
06:20 - the static instance variables exist
06:24 - before you've even created any objects
06:27 - from your class so how can this know
06:29 - about the name which is associated with
06:33 - particular objects it can't so let's
06:37 - just pop won't
06:38 - work on the other hand the instance
06:43 - variables can access the static data
06:47 - because sorry the instance methods can
06:53 - access the static data because of course
06:57 - by the time you've got objects of course
06:59 - you already got the class so methods
07:02 - attached to the objects naturally can
07:05 - access data attached to the class so in
07:08 - this show name which is an instance
07:10 - method a normal sort of method I can I
07:14 - can output description here let's just
07:18 - pay plus in there and some punctuation
07:23 - and if I run this I'm gonna get so this
07:31 - is from the static method here I am a
07:34 - thing and the instance methods are
07:36 - outputting I'm a thing Bob I am a thing
07:38 - soup so the instance methods can access
07:41 - the static data now you might be
07:47 - wondering what you can use static for
07:50 - and there are several uses that spring
07:54 - to my mind and I'll I'll show you some
07:56 - of those here
07:57 - of course one one uses that if you've
08:01 - got a method that takes some arguments
08:05 - and outputs some data but never deals
08:08 - with the instance data of the class then
08:12 - you could make it static because you
08:16 - only need really instance methods if
08:19 - they somehow deal with the instance data
08:21 - at the class but there are a few other
08:26 - interesting uses as well so let's say
08:32 - let's have a look at one typical use of
08:38 - static which you can find in many places
08:42 - in Java but a good example is the maths
08:46 - class standard part of the Java library
08:51 - and the master class has constants
08:55 - attached to it for example pi so if I
08:59 - output math dot pi you can see that I'm
09:02 - accessing a variable here well a
09:05 - constant actually I'm accessing some
09:07 - data via the class math which might lead
09:12 - you to suspect correctly that it's
09:14 - static so if I run that here we get PI
09:17 - being output down here just from this so
09:23 - let's see how we can make our own
09:25 - constant in the same way so here if I
09:32 - want a constant I'm still a kind of
09:34 - thing I want to achieve is I want to be
09:38 - able to say something like the name of
09:41 - my class which is thing dot let's say I
09:45 - don't know thing got lucky number or
09:49 - this could be a string sorry lucky
09:52 - number or whatever you like now see pi
09:57 - is a constant which means I I can't
10:00 - reassign it I can't do math dot pi
10:03 - equals three if I save that it's let's
10:11 - comment this out as well so this will
10:15 - give me an error the final field master
10:17 - pi cannot be assigned its constant
10:20 - meaning it's unchangeable and constant
10:25 - values cannot by tradition or convention
10:29 - in Java are represented by uppercase
10:33 - letters and that's why I've written this
10:34 - in uppercase and just to give it make it
10:38 - more readable I've got an underscore in
10:40 - the middle there and to implement that
10:43 - so it's going to be a public variable
10:47 - public because it's accessed outside the
10:49 - class and we're going to look at public
10:51 - protected and private in future
10:54 - tutorials and I'm going to make it of
10:57 - type int although it could be anything
11:00 - you like int and I'm going to call it
11:04 - lucky
11:05 - number lucky number like this and I'm
11:15 - gonna make it I want to access it via
11:17 - the class thing got lucky number so it's
11:21 - going to be static
11:22 - so public static int and I'm also going
11:27 - to declare it final so I'm gonna put a
11:29 - final keyword in here and final is
11:32 - Chavez version of constant and that just
11:36 - ensures that you can't reassign a value
11:38 - to this and if you have a final field
11:41 - you've got a assign a value to it when
11:45 - you create it so here I need to write
11:46 - equals and then let's just set it equal
11:49 - to seven because after you've created
11:53 - the variable you will no longer be able
11:55 - to assign a new value to it because its
11:58 - final is constant so you can see that
12:02 - this will now work and if I run that
12:06 - it's gonna say seven down here so I've
12:12 - just got this constant value which as I
12:15 - say could be a string or whatever that's
12:17 - attached to my class and you see that
12:19 - all over the place in Java like in there
12:21 - the color class in string or jframe died
12:24 - exhale and close and you know math
12:26 - constants and it's a bliss absolutely
12:29 - all over the place another really good
12:33 - use of static is to count the number of
12:36 - objects that you are creating so let's
12:40 - create let's have in here a just for
12:45 - simplicity I'll make it public again but
12:47 - normally this would be private and you'd
12:48 - access it via a getter but I'll say
12:50 - public int count and right and yeah I'm
12:55 - gonna make that static so it's attached
12:58 - to the class not to the particular
12:59 - objects and I'm gonna initialize it to
13:02 - the value zero and I'll give thing a
13:07 - constructor source a public thing no
13:10 - return type for the constructor
13:13 - now this constructor will be run every
13:16 - time you create a in
13:18 - since a thing in other words whenever
13:22 - you do new thing it's gonna run whatever
13:24 - code I put in here so I could take that
13:27 - opportunity to increment count and
13:30 - because count is static it belongs to
13:34 - the class not to the objects and that
13:37 - means that there is only one count which
13:40 - is shared between all objects so any
13:44 - time an object increments count there's
13:47 - only going to be one copy of count and
13:48 - it's incremented for all objects in
13:51 - effect because as I say it's attached to
13:54 - the class
13:55 - so here I've done well let's first of
13:59 - all out put it up here I'll say suss out
14:02 - think count and as I say normally you
14:06 - have a getter called get count probably
14:09 - and and then let's let's say here I just
14:14 - put some text in and say before creating
14:19 - objects counts is like this and I'll put
14:26 - a plus in there and let's just copy that
14:32 - and I'll move it down here after I've
14:35 - created my objects so if I run this it's
14:42 - gonna say scroll up a bit before
14:46 - creating objects count is zero because
14:49 - when I output think count up here it's
14:56 - it's just at its initial value of zero
14:59 - but every time I create an object it
15:01 - runs the constructor and increments
15:02 - count so after I've created my objects
15:07 - here each one of those will increment
15:09 - count and then I'm outputting think
15:13 - count again and it's saying after
15:15 - creating objects countess - so this is
15:19 - handily counting the number of objects
15:21 - I've got and that brings me to one final
15:26 - interesting use of count which is
15:30 - assigning an ID to each of your objects
15:33 - the unique ID because supposing here I
15:36 - create a instance variable not not a
15:40 - class not a static variable but an
15:42 - instance variable and I'll call it
15:45 - public in ID and just repeat these
15:50 - shouldn't really all be public but they
15:51 - should be private or protected but this
15:54 - will do for this tutorial and I won't
15:57 - initialize ID here actually your
16:00 - instance variables in Java are
16:02 - initialized to default values this will
16:04 - be zero anyway to start with but I
16:06 - doesn't matter
16:07 - I want ID to be unique for each object
16:12 - so the first object should have ID let's
16:15 - say nought and the second object ID 1
16:19 - and so on and all I have to do to get
16:23 - that to work is I can I can assign the
16:27 - value of ID and every object has its own
16:30 - ID because it's not static it's an
16:32 - instance variable so I can assign that
16:34 - to the static variable count and the
16:39 - static variable count being shared
16:41 - between all objects is of course
16:43 - incremented every time you create an
16:45 - object but this will keep a kind of
16:48 - record of whatever count was at the time
16:52 - of constructor run for each object each
16:55 - object has its own ID but there's only
16:58 - one sure to count so that means that if
17:03 - I say down here let's say well I could
17:09 - change show name so yeah so in my show
17:15 - name method here I could say object ID
17:22 - and plus whoops plus and that sat on ID
17:29 - and yeah but I have some punch bration
17:33 - in here and a space and then I'll have
17:36 - the ID
17:37 - and then some more space or punctuation
17:44 - like this so show name now whoops I
17:51 - didn't mean to do that show name now
17:53 - it's outputting the id3 for each object
17:55 - as well as its name and if I run that so
18:00 - show name is running down here if I run
18:04 - this program it's saying object ID
18:08 - naught I am a thing there's the static
18:11 - description an instant state again Bob
18:14 - and the second object ID 1 again
18:18 - instance data I am thing static data and
18:21 - then the name su instance data so it's
18:28 - quite a lot to take in
18:29 - for one tutorial but I'm going to put
18:34 - this code on cave of programming comm
18:37 - which is all one word so you can take a
18:39 - look at your leisure if you want to and
18:42 - the approach I always take myself to
18:45 - learning this kind of stuff is just
18:47 - basically use it you know copy and paste
18:50 - it in and get it to work and after a
18:52 - while you sort of start to get a feel
18:54 - for it and if it seems at all obscure
18:58 - now after just using it and working with
19:01 - it a bit you'll start to see that it's
19:03 - it's pretty simple really it's not too
19:05 - bad so that's it for this tutorial
19:09 - in the next tutorial we're going to look
19:12 - at string builder string buffer and some
19:16 - advanced string formatting which we'll
19:19 - need before we go on to some more stuff
19:22 - to do with objects so join me again then
19:26 - [Music]
19:36 - you
19:38 - [Music]