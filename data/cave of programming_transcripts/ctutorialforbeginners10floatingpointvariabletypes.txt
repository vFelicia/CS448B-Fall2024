00:17 - hello this is John from cave of
00:19 - programming calm welcome back to C++ for
00:22 - complete beginners and in this tutorial
00:25 - we're going to look at floating-point
00:26 - and variable types in C++ so again I'm
00:32 - going to give you quite a lot of
00:33 - information in this tutorial and you
00:35 - don't have to memorize it all the
00:37 - important thing is just to try playing
00:41 - around with some floating point
00:42 - variables a bit just so it's so it's
00:44 - kind of in your head you don't really
00:46 - need to have all the exact details in
00:50 - your head all the time
00:51 - so we've already seen that you can write
00:53 - stuff like int value equals 6 and you
00:57 - can output that with C out like this
01:00 - value let's spawn and letter and
01:02 - semicolon very important so if I run
01:05 - that we should get 6 appearing down here
01:08 - but what if you want a decimal point in
01:11 - your number you can use the type called
01:15 - float so let's type float and I'll just
01:20 - I'll still call it value again I suppose
01:22 - equals if I let's call it f value
01:26 - because I'm going to have a different
01:28 - floating point type shortly let's say
01:30 - equals 76.4 or something then we can
01:35 - output it in exactly the same way that
01:37 - we did with an INT but the important
01:40 - things that flow can have a decimal
01:41 - point in it if you're in some part of
01:45 - the world other than the UK or the USA
01:48 - you may be used to using a comma instead
01:51 - of a decimal point but as far as I know
01:54 - in C++
01:55 - it always follows the American Kant
01:58 - standard of having a point here so let's
02:00 - let's run this and and let's change this
02:03 - to F value
02:05 - for float value and I'll run that and
02:09 - here we should be able to see 76.4 now
02:15 - there are a few things to note about
02:16 - this one thing is and that see out it
02:20 - can output numbers in one of two basic
02:23 - formats and one is coming the normal
02:28 - notation which we call fixed where you
02:31 - write all the digits out like this and
02:33 - the other is what we call scientific
02:35 - notation where you you have like a
02:40 - single digit number point something or
02:42 - other and in times of power of 10 and
02:45 - sometimes with big numbers see out can
02:47 - decide to switch to scientific notation
02:49 - and we don't want that and I want to
02:52 - stop it happening here so what I'm going
02:54 - to do and you'll see how this works in a
02:57 - minute is under where I put include
02:59 - iostream and before using namespace
03:01 - standard STD here I'm going to type hash
03:05 - whoops I was the wrong key hash includes
03:09 - and I oh man it like that that stands
03:16 - for input-output manipulation and now
03:19 - immediately have to see how I'm going to
03:21 - have one of these Chevron things the
03:24 - insertion operator and I'm going to type
03:27 - fixed like that and this is a value
03:30 - that's that's defined in in this file
03:34 - which we're including here but and we're
03:38 - going to look into includes later on so
03:40 - basically if you just type this stuff it
03:43 - should work and don't don't worry about
03:44 - it too much of this stage so let's run
03:46 - this and it will look pretty much the
03:48 - same as before
03:49 - really you'll notice we've got two on
03:52 - the end here and we'll talk about that
03:54 - in a minute but that the thing here I
03:58 - want to show you so you can also have
03:59 - this as cyan
04:02 - like that and if you run this now then
04:06 - we get this in scientific notation so
04:10 - this this actually means seven point six
04:13 - four times ten to the power of one in
04:20 - this case the NS right isn't it so we've
04:22 - got seven point six times ten
04:24 - that would be 76 so seven point six four
04:29 - and this e stands for exponential and it
04:32 - actually means 10 to the power of one
04:33 - here so sometimes it will display like
04:37 - this just anyway and if you've got a
04:39 - really long number but I won't I'm going
04:42 - to change this to fix so that we always
04:44 - get the numbers written now now now yeah
04:49 - let's run that again so we saw that we
04:51 - had we had a two here and the reason for
04:52 - that is you can only store a certain
04:54 - amount of information in a float or it
04:57 - were in any variable for that matter
04:59 - float allocates a fixed size of memory
05:02 - and if you want to see what that is you
05:05 - could do what we did I think in the last
05:07 - tutorial you could type size of float
05:10 - like that or you could also use size of
05:14 - on your variable so we were typing size
05:17 - of and in round brackets immediately
05:19 - after it and in that we're putting float
05:20 - or we could put F value in there who
05:23 - would also work and if you run that you
05:26 - will see that a float on this compiler
05:28 - at least on this system and has it takes
05:32 - up four bytes so there's only going to
05:36 - be a certain amount of information you
05:38 - can storing four bytes of course as a
05:39 - limit to it and it flows usually you
05:44 - reckon on getting something like maybe
05:48 - five or so I think it's about five how
05:51 - many we've got here one two three four
05:53 - five six seven yes something like five
05:56 - or seven and significant digits I think
06:01 - we've got seven here basically but after
06:03 - that you're just going to have garbage
06:05 - being output
06:07 - so you can only store like the number of
06:11 - actual digits that matter in here so
06:13 - starting from the beginning got seven
06:15 - six and the four and so on
06:17 - and then a bunch of zeros because it's
06:20 - exactly seventy six point four after
06:22 - that and you can't rely on your float
06:25 - for storing numbers you can only rely on
06:26 - it to store these like five six seven
06:29 - digits or so I think it's normally seven
06:31 - and so if you want more precision than a
06:35 - float you're going to have to use a
06:36 - different kind of variable and in fact
06:39 - this let's just turn out put even more
06:43 - digits here because you might wonder
06:45 - what why is that actually stopped at
06:48 - that the two here where the two is
06:50 - garbage anyway but why didn't we go on
06:52 - and output loads of garbage after that
06:54 - why have we only got this number of
06:56 - digits and the reason for that is see
06:59 - out actually has a number of digits that
07:02 - it will output by default a number of
07:04 - significant digits and again I think
07:06 - that's seven or eight let's see one two
07:09 - three four five six seven eight
07:12 - we'll go eight digits 8 significant
07:14 - digits here and this this code I presume
07:18 - vary on different platforms different
07:20 - compilers you don't have to carry this
07:22 - information around in your head and as
07:24 - you can tell I I really don't and
07:26 - although I've done C++ for many many
07:28 - years but we can alter the number of
07:31 - digits that we can output with C out by
07:34 - using sets precision so I'm going to put
07:38 - another like chevron here as I like to
07:39 - call it and I'm going to type set
07:42 - precision and in round brackets after
07:45 - that let's type 20 so that we get 20
07:48 - significant digits being output and I'm
07:50 - going to use set precision and twos
07:52 - fixed you've got to include this i/o
07:55 - minute here so you've got to type this
07:57 - stuff and near the top of your program
08:00 - let's run that and see how it looks this
08:02 - is even worse so now yeah we've got
08:05 - we've got the 7 1 2
08:07 - two three four five six seven got seven
08:10 - digits that are good so float has
08:12 - correctly stored seven digits but after
08:16 - light it's just garbage and we're
08:18 - telling C out to output a total of
08:19 - twenty digits here but most of them are
08:22 - just rubbish so let's try that with a
08:26 - different type if you want more
08:28 - precision in your program you can use
08:30 - double which should store something in
08:33 - the region of something like fifteen
08:38 - significant digits approximately
08:40 - something like that let's try double D
08:43 - value equals seventy six point four
08:48 - let's try that again actually same value
08:50 - and we'll output C out and let's just
08:54 - copy this because it's easier than
08:56 - typing here again paste it in here and
08:58 - I'm taking care to keep the indentation
09:01 - correct it's very important
09:03 - and let's output here D value and see
09:07 - how that looks so I'll run this program
09:10 - and you can see here that the double and
09:17 - it gets much more much much many more
09:20 - digits correct
09:21 - nice we've got a load of zeros here
09:23 - which should be there and then after a
09:25 - certain point it's garbage
09:27 - just as float was so we can make this a
09:30 - bit more complicated let's try typing I
09:33 - don't know one two three point four five
09:36 - six seven eight nine and let's try that
09:39 - same value with a float so I'll run this
09:44 - and we'll see that with float we've got
09:48 - one two three four five six seven eight
09:51 - and then it loses the plot but double is
09:53 - doing a lot better here one two three
09:55 - four five six seven eight nine and I
09:57 - know the zeros so we could put more
09:58 - decimal places or more digits before the
10:03 - decimal point than double
10:04 - if you really want a mega precise number
10:08 - here and you have to bear in mind that
10:10 - most of the time you really don't need
10:12 - to use that many significant digits not
10:15 - even in sort of scientific work people
10:18 - tend to go overboard with using
10:21 - significant digits with using numbers
10:25 - after the decimal point how you normally
10:29 - don't need that many for most purposes
10:31 - but if you're working with money or
10:32 - something you're doing lots of
10:34 - complicated transactions then you
10:38 - certainly do want as many decimal places
10:41 - as possible I suppose
10:42 - where the double will be enough for
10:44 - financial software I'm not really sure
10:45 - but if you want even more precision you
10:48 - can use long double long double and
10:52 - let's call this L value equals and
10:56 - that's up something like one two three
10:58 - four five six seven eight nine eight
11:01 - seven six five four three two one zero
11:03 - not sure how long you'll do with that
11:05 - and but how we will do with that but
11:08 - let's see let's let's copy this again
11:11 - and now let's try L value and let's run
11:17 - this
11:19 - so dumb pretty well one two three four
11:21 - five six seven eight nine eight seven
11:23 - six five four three two one and after
11:26 - that we've got some garbage instead of
11:29 - what we should Hubble two zeros so L
11:33 - value is a long double value it does
11:36 - pretty well with storing lots of
11:38 - significant digits and again you know if
11:41 - you're interested let's just change this
11:43 - here to say size of float this is a
11:48 - really good thing to do just type this
11:50 - out yourself get the size of these
11:53 - values that say size of long double and
11:57 - type in here we could just type L value
12:00 - you can use either the variable or the
12:02 - actual type let's try that and see how
12:06 - many bytes we are allocated for a long
12:08 - double so a long W double it's using 16
12:12 - bytes in a computer's memory just to
12:15 - represent one number so that's a lot of
12:17 - bytes just for one number and so that
12:22 - take-home message from this tutorial is
12:24 - just that you've got float which is fine
12:27 - if you don't need too much precision
12:28 - double which is very commonly used and
12:31 - long double which you don't see very
12:32 - often for like so mega precision and so
12:37 - that's that's all you really need to
12:39 - remember it it's handy also to remember
12:41 - this that you can do set precision and
12:43 - fixed if you need to change the way CL
12:46 - is outputting a number and of course
12:48 - there's other stuff you can do to format
12:49 - numbers but we won't we won't go into it
12:51 - here and there's no signed or unsigned
12:54 - double at least not with this compiler
12:56 - and don't think with any compiler as far
12:59 - as I know but yes you've got is
13:03 - basically these three types so that's it
13:06 - for this tutorial and what I strongly
13:08 - recommend and so that you just try
13:10 - defining some variables at these three
13:13 - types float double long W double also
13:16 - try size up on them to see how many
13:19 - bytes they occupy on your system you
13:21 - might get different results to me
13:24 - cuz it can potentially depends on your
13:26 - compiler and on your kind of computer
13:30 - you're using so and this isn't the
13:33 - number of bytes allocated to type is not
13:35 - necessarily fixed in C++ although you're
13:38 - probably usually going to find the same
13:40 - results as me here like for for a float
13:43 - 16 foot double and I think it's 8 for a
13:45 - sorry 16 for a long double I think it's
13:48 - 8 for normal double but try typing that
13:52 - out yourself just try using it there you
13:54 - could like add them together if you want
13:56 - see how that goes and and yeah and once
14:01 - you've done that it all sort of stick in
14:03 - your memory a bit so you don't have to
14:06 - remember everything that I've told you
14:07 - yet we're just practice using them a
14:08 - little bit in a little test program so
14:12 - that's it for this time and in the next
14:14 - tutorial we're going to look at the
14:16 - remaining primitive types in C++ and
14:18 - don't worry pretty soon we're going to
14:20 - get on some to something a bit more
14:21 - interesting so until next time happy
14:24 - code
14:33 - you