00:16 - hello this is John from cave of
00:19 - programming calm and in this tutorial
00:22 - we're going to look at polymorphism in
00:24 - Java so polymorphism is a
00:28 - object-oriented concept which has a big
00:32 - name meaning many shapes which tells you
00:35 - absolutely nothing at all but it's
00:37 - actually a pretty simple concept and
00:40 - just one or two tiny little gotchas
00:42 - which we're going to look at so let's
00:46 - create a new class here and I'm going to
00:51 - call it plant and I'm not going to give
00:57 - it any methods or anything I don't think
00:59 - it's not linear and I'm going to also
01:01 - create a new subclass a plan so let's
01:05 - create one called a tree and I'm gonna
01:10 - set the superclass here I'm going to
01:12 - click browse and go to plant and click
01:16 - OK and finish and so it's filled in
01:20 - extends plant for me so I've got one
01:22 - parent class plants and one child class
01:25 - tree and actually let's get rid of these
01:29 - files from my last project here says not
01:33 - to confuse things and I'm going to
01:36 - create a plant class so let's have a
01:40 - variable to refer to it and say plant
01:43 - plant equals new plant and tree tree
01:49 - equals new tree and now what polieville
01:55 - polymorphism means in a nutshell is that
01:57 - if you have a child class of some parent
02:01 - class you can always use the child class
02:04 - anywhere where you would normally use
02:06 - the parent class so let's let's take a
02:10 - look at some examples and if I let's say
02:14 - I have so got up here very poor called
02:18 - planet let's just call it plant one
02:22 - if I say plant plant - I could point
02:29 - that if I want that plant one and that's
02:33 - that's just because this reference here
02:36 - is referring to an object of type plant
02:39 - and now I'm saying this reference here
02:41 - refer to the same object at plant one
02:44 - refers to so now I've got two references
02:47 - here to the same object
02:49 - zoning wall natural plant object and but
02:53 - because of polymorphism since tree is a
02:57 - subclass or a child class of plant I'm
03:01 - guaranteed that I can always use a tree
03:04 - wherever I have a plan so here I can
03:06 - also say tree and this is polymorphism
03:10 - in action and let's let's say now that
03:16 - tree has a method as could tree a method
03:22 - let's get plant a method actually so all
03:25 - plants can grow so I'll say public for
03:28 - you to grow and I'll just leave it at
03:31 - that
03:32 - and if laptop is out and there and I'll
03:36 - say plant growing and let's give tree
03:45 - also grow method
03:47 - so I'll override the plant method entry
03:51 - I go to source override implement
03:54 - methods grow and here I'll say sis out
04:00 - tree growing
04:05 - now if here I've got okay I've got a
04:09 - reference pointing to a kind of plant
04:12 - because tree is a plant it's as a child
04:15 - lesser plant so it is a plant and if I
04:20 - say plant to now grow there's no prize
04:27 - for guessing which one which method will
04:30 - be called the one it plans for the one
04:31 - entry but by all means have a go see if
04:36 - you can guess and in fact the thing
04:38 - that's important here is that the object
04:42 - that plant 2 is pointing at is actually
04:44 - this tree so if I say plant to grow
04:48 - because plant 2 is pointing at a tree
04:50 - it's going to use this grow method from
04:53 - tree so if I click run now you see click
04:58 - run and says tree growing and because
05:01 - when you actually run the method what
05:03 - matters is not the variable it's not
05:06 - entitled a variable which every plant or
05:08 - tree or whatever and what matters is the
05:12 - actual type of object containing the
05:13 - actual code the actual variables the
05:16 - guts of the thing and it's going to run
05:19 - it's the object that matters and this
05:21 - object that this reference points out
05:24 - it's a tree which is a kind of plant and
05:29 - so and there's one more kind of
05:31 - complication I think I can think of
05:33 - which is that let's say we've got a
05:35 - method in a tree like say public void
05:40 - shed leaves so this method is and in
05:48 - autumn leaves shedding or fall as you
05:53 - call in America
05:55 - so now if I go back to app if I can say
06:00 - here like tree shed leaves and of course
06:04 - that will just call my shed leaves
06:06 - method I just added to treat so says
06:09 - leave shedding and but now we know that
06:11 - plant two is also a tree but if I look
06:16 - at the plant two and I try to do shed
06:20 - leaves I'm going to get an error and in
06:24 - fact the autocomplete would have told me
06:26 - that as well because there's no shed
06:29 - leaves in this list and the reason for
06:33 - that is that when you're trying to call
06:36 - a method what matters is the type of a
06:39 - variable the type of the reference
06:41 - because and this if you look at for
06:45 - example in isolation a variable of type
06:49 - plant let's call this plan three so this
06:53 - is just a this is just a null reference
06:54 - because I'm not pointed at any object
06:57 - that variable knows what methods it
07:02 - should be able to call if it is pointing
07:04 - in an object and even if you just do
07:07 - plant three dot you can see now down in
07:10 - here we're going to have a grow method
07:13 - and there's no shed leaves method
07:16 - because it's a plant not a tree so the
07:18 - variable knows what you should be able
07:20 - to do and this code incidentally is not
07:21 - going to actually work because I'm not
07:23 - initialized it and but my point is here
07:27 - that it's the variable the type of the
07:29 - variable that decides what methods you
07:31 - can call but as we see here it's when
07:35 - you actually call those methods you're
07:37 - going to the object the actual physical
07:39 - in a sense object that contains the
07:42 - actual code and it's that object that's
07:44 - going to run the relevant code so this
07:49 - is this is polymorphism for you and if
07:51 - you if you think about one of the common
07:53 - situation where you might want to use
07:57 - this is let's say you've got public yeah
07:59 - static void
08:02 - let's say to grow and that takes a plant
08:06 - call it plant and all that does is so
08:10 - this is a this argument is a plant type
08:14 - so I can definitely call the grow method
08:17 - since do grow there then of course
08:21 - I can do let's get rid of that and leave
08:26 - that in so this code is going to be on
08:29 - cave our programming calm and I put a
08:30 - few more comments in here later on to
08:33 - explain this but now I can do do grow
08:35 - and I can plat I can pass they're quite
08:38 - happily the treat because polymorphism
08:42 - guarantees me that wherever a parent
08:44 - class is expected I can use a child
08:47 - class of that poem by tree which extends
08:50 - plan so if I run that it's gonna say
08:55 - tree growing down here okay so that's
08:59 - that's it for this tutorial
09:00 - that's polymorphism uh says big word but
09:03 - it's and when you look at it it's quite
09:05 - enlightening it haven't really helps you
09:07 - learn a lot I think about how variable
09:10 - how variables work our references work
09:13 - versus how objects work but in essences
09:17 - is quite simple so that's it for this
09:20 - tutorial
09:20 - and in the next tutorial we're going to
09:23 - look at a topic which is very important
09:26 - and again will hugely bring on your
09:29 - understanding of references and objects
09:31 - although it's not that exciting at the
09:33 - same time we're going to look at
09:35 - podcasting and down casting so join me
09:38 - again then and this code will be on cave
09:40 - of programming calm and until next time
09:43 - happy coding
09:47 - you
09:55 - you