00:01 - hello this is John from cave of
00:03 - programming calm in this tutorial we're
00:05 - going to look at inner classes in Java
00:08 - so I've created a basic class in Eclipse
00:13 - that has a main method and I'm going to
00:16 - create a new class here and we're going
00:17 - to give this new class some inner
00:19 - classes so I'm going to right click my
00:22 - package here and go to new class and
00:27 - I'll call this class robot just to have
00:30 - some kind of an example to work with
00:32 - click finish
00:35 - I don't want the main method in it
00:36 - actually and I'm going to give robot
00:39 - some instance data and just just again
00:42 - it's just as an example I'm going to
00:43 - give it a private private static no not
00:49 - private not static sorry private int ID
00:52 - that'll do so every robot has an ID and
00:56 - I'm also going to implement a
00:57 - constructor so that we can set the ID
00:59 - and to do that I'm going to right click
01:03 - and go to source and generate
01:08 - constructor using fields tick ID and
01:11 - click OK so I could have just type this
01:13 - myself but I was quicker I got rid of
01:15 - soup here because that's not call to
01:17 - super is not needed so the constructor
01:19 - just takes an ID and sets this private
01:22 - field using the ID passed in so now of
01:26 - course we can create robots already
01:29 - let's give this one more method actually
01:32 - let's give it a public void start method
01:38 - and in start I'll just put a sisal and
01:41 - I'll say starting robot plus ID there so
01:51 - now I can use that by going to my main
01:55 - method here and creating a robot so they
02:00 - equal to a new robot our possibly ID
02:02 - seven and then click do robot start like
02:06 - that ok so that's all pretty
02:09 - straightforward starting robot seven
02:12 - now let's take a look at inner classes
02:15 - so there's this three main kind of cases
02:21 - here that I can think of we've we've
02:23 - already looked at anonymous classes in
02:26 - this series of tutorials and anonymous
02:29 - classes are a kind of inner class we're
02:31 - going to look at three more cases here
02:35 - so in Java you can declare classes
02:38 - actually pretty well anywhere and we've
02:41 - seen in previous tutorials that you
02:42 - could declare class here or here the
02:45 - only rule is that you can only have one
02:46 - public top-level class in each file and
02:51 - the name of this got matched the name of
02:52 - the file sis is robot in robot Java but
02:56 - I can create a I'm going to Claire a
02:58 - class within the robot class and let's
03:01 - look first at non static in their
03:05 - classes or nested classes they're also
03:08 - called so I can declare class here and
03:11 - say class let's say brain like this and
03:17 - this class will now have access to add
03:23 - the instance data of the robot class so
03:27 - let's give this maybe one method public
03:29 - void think sort of brain thinks and we
03:34 - could have a cyst out in here and say
03:37 - robot plus ID plus is thinking so I'm
03:49 - accessing here I could give class
03:52 - instance data itself but the point I'm
03:55 - trying to make is that I'm accessing
03:57 - non-static and accessing instance data
04:01 - of the outer robot class CA within this
04:04 - in a class and then I could do stuff
04:07 - like in my start method of robot I could
04:10 - say for example brain brain equals new
04:14 - brain and brain dot not Brian as my
04:20 - brother's name actually brain dots think
04:24 - now if I run this let's go to aperture
04:27 - and run it says robot seven is thinking
04:32 - so this this is a nested class row and
04:37 - in a class and classes like this what
04:40 - they're what they're probably most often
04:43 - used for is just logically grouping bits
04:46 - of outer classes like here the robot
04:48 - might be made a pervert you might have a
04:50 - brain and legs and heart and so on I
04:52 - don't know about heart but different
04:55 - parts of it anyway and we can we can
04:58 - group those different parts if we want
04:59 - to using inner classes and I can I can
05:02 - use the access modifiers like this
05:05 - probably should be private and that
05:07 - would work just fine now I actually you
05:10 - can also I'm going to show you something
05:12 - here that's a little bit weird but if
05:14 - you've understood what I'm saying so far
05:16 - basically that's that's the end of it
05:18 - really and in fact you can find a really
05:21 - good example of using an inner class if
05:24 - you look at in in this series of
05:28 - tutorials I've got a I've got a video on
05:32 - implementing the iterable interface in
05:35 - collections and if you're watching this
05:37 - on youtube you can find that by going to
05:40 - the cave of programming channel and
05:43 - looking for my collections videos if
05:45 - you're watching on udemy or somewhere
05:47 - else I think on udemy calm I've
05:49 - incorporated the collections videos as
05:51 - part of Java for beginners and you can
05:53 - find the link to the udemy course by
05:55 - going to WWE programming comm but in
05:59 - under the collections section of this
06:03 - series I've got a video on implementing
06:06 - iterable and that uses a inner class
06:09 - like this to implement an iterator which
06:12 - then can iterate through the data of the
06:15 - enclosing class the instance data of the
06:19 - enclosing class and that's a classic
06:21 - example of this and if you want to test
06:23 - your skills with this you could try
06:25 - implementing the iterable interface in
06:28 - Java
06:28 - maybe after watching that video now you
06:31 - might wonder if you can create separate
06:34 - classes of this brain here
06:37 - from outside the robot class and the
06:40 - answer is yes but I've I don't think
06:42 - I've ever seen anyone really do that the
06:45 - most common it is common to use in a
06:48 - classes like this outside of the class
06:51 - that they are declared in but then
06:53 - usually you'll have a method that would
06:55 - create a instance of your inner class
06:59 - and return it and you can see that if
07:02 - you implement iterable for example there
07:04 - isn't another weird syntax I'm just
07:06 - going to show you for the sake of
07:07 - completeness here which is that if we
07:09 - were to make this public like that in a
07:13 - table here we've got an instance of
07:15 - robot here and we could in fact do this
07:18 - we could say robot brain so robot brain
07:23 - is the type here we've got robot with
07:27 - the inner class brain let's let's call
07:30 - this variable brain equals and now we
07:33 - need an instance of the robot class
07:36 - robot dot and we say robot new brain I
07:42 - think I've got that right and I've never
07:45 - actually seen anyone do this so is you
07:48 - don't really I won't really worry about
07:49 - it I just wanted to show you for
07:51 - completeness and then we can use this
07:54 - brain outside of robot so I click run
07:57 - and it says robot seven is thinking
08:00 - again now once again you'll notice that
08:03 - when you create an instance of robot you
08:06 - do not automatically create an instance
08:08 - of the inner classes you have to do it
08:10 - explicitly somewhere and that's pretty
08:12 - much always done within the class itself
08:15 - within some method but you can as you
08:18 - can see do it outside the class with
08:20 - this weird syntax here and but I've just
08:23 - never seen anyone actually do that I
08:25 - don't really know why you'd need to do
08:27 - it and it's much more common to make the
08:31 - inner classes like private or just not
08:34 - give an access specifier in which case
08:36 - they'll default to a guest package level
08:39 - access so this is only going to work
08:44 - if the brain was declared public so
08:50 - let's save that and so yeah so that's
08:56 - that's inner classes and that they're
08:57 - normally used like this within the
09:00 - enclosing class and you might have a
09:02 - method that returns for example brain in
09:04 - this case this could return brain that
09:06 - would also be pretty typical now a
09:08 - second client kind of in a class are
09:11 - static in a classes which are pretty
09:14 - simple actually so we could have here
09:17 - for example let's say battery we could
09:21 - have a a static static class battery and
09:28 - that put brackets in and I could have a
09:33 - method that say public void charge it
09:36 - charges the battery and let's just say
09:38 - in here whoops get rid of that don't on
09:42 - that and that should be I do on that
09:46 - yeah there we go
09:47 - okay so probably void charge and it's
09:49 - just cuts this out in here and just say
09:51 - battery charging now because this is
09:56 - static we can't refer to this ID and by
10:01 - all means type this code up for yourself
10:03 - and and try out chapter that is the case
10:06 - but I could not do for example plus ID
10:08 - here
10:09 - that would give me an error unless they
10:12 - were to declare ID static and a static
10:14 - in a class can access static instance
10:16 - variables of and in closing out a class
10:19 - but what you usually use static in a
10:22 - classes for are it's just a it's just a
10:26 - way of grouping
10:27 - classes together so let's say in this
10:30 - case you've got robots and they can have
10:36 - interchangeable batteries so you might
10:37 - want to create a robot battery outside
10:40 - of this class and then pass it to
10:42 - whatever robots need that charge battery
10:45 - so we could do here outside and a robot
10:49 - class we could say robot battery battery
10:54 - equals new row
10:56 - battery and this syntax unlike this
11:00 - syntax this syntax is actually pretty
11:03 - typical and very common in Java or
11:05 - pretty pretty common and then we can
11:07 - save battery charge and then let's run
11:11 - this and it says battery charging so
11:16 - non-static inner classes are used where
11:19 - you need to group together some
11:20 - functionality and you need the class to
11:23 - have access to the instance variables of
11:26 - the enclosing outer class static inner
11:29 - classes are used let's make this public
11:32 - to be explicit static inner classes are
11:36 - used basically where you just want a
11:39 - normal class that isn't associated with
11:43 - instances of the enclosing outer class
11:45 - but you want for some reason you want to
11:48 - group it with the outer class so you
11:51 - could have robot battery robot dot CPU
11:55 - whatever you like but the point is it's
11:57 - grouped with robot and other than that
11:59 - apart from that it's really just a
12:01 - normal class so the static inner classes
12:04 - are like normal classes that just happen
12:06 - to be grouped with other classes and you
12:08 - use this kind of dot syntax now there is
12:13 - finally one last thing that should tell
12:16 - you about which is that you can declare
12:18 - classes even within methods and so I
12:21 - could say yeah like class temp I don't
12:23 - know maybe like that and this word have
12:30 - access to ID so let's give it a method
12:33 - public void do something like that and
12:40 - we could say here Sissel ID is plus ID
12:50 - it would also have access to stuff we
12:54 - declare in here so if I say a string
12:57 - name equals Robert Robert the robot and
13:03 - we could say yes it's out
13:06 - and my name is plus name save that and
13:17 - the error will surely go away what we're
13:21 - done oh yeah
13:26 - and but I forgot this will work but this
13:30 - this has to be final and this follows
13:32 - the same rules for like anonymous
13:35 - classes that if you have a method in an
13:39 - anonymous class and we've seen this
13:40 - before it can only refer to local data
13:43 - if it's final but it can refer to
13:45 - instance data absolutely fine and then
13:48 - so we haven't got an instance of this
13:50 - class yet but we could create one by
13:53 - saying ten attempt equals new ten that's
13:56 - creating instance and then we can say
13:59 - temp dot do something and when we run
14:05 - this start method of course now we are
14:09 - going to do all this we're going to
14:11 - create this temp type and declare an
14:15 - instance of it and run the do something
14:16 - method so I'll run this like this
14:19 - battery-charging there we go
14:21 - my name is Robert all that stuff so
14:25 - again this is sometimes useful it's not
14:29 - completely uncommon maybe it's most
14:34 - often useful if you need a instance of a
14:37 - class to pass to another method and and
14:41 - for some reason you don't want to use on
14:42 - an anonymous in a class which is which
14:45 - you could do I you just want to you just
14:48 - want to Matt you just want a class that
14:50 - you only want to use in this method
14:52 - crate instance of it only in this method
14:54 - because you can't refer to this now
14:56 - outside this method and you can't make
14:59 - it private or public or protected or
15:01 - anything either because the scope of
15:05 - this type as well as these of course the
15:08 - variables is between these brackets here
15:11 - is scoped to this method so that Sena
15:15 - classes in Java this is actually it's
15:18 - actually relatively
15:19 - simple and if it seems confusing that's
15:22 - just because you haven't practiced it
15:23 - and I'd recommend typing out some code
15:26 - and trying to think of some little
15:29 - scenario yourself and create create a
15:32 - class of each different type the nested
15:36 - class like this the static in a class
15:40 - like this and I kind of I'm not sure
15:43 - what to call this but kind of a local
15:44 - class as well and you'll soon get the
15:48 - hang of it and if you want some advanced
15:50 - practice try implementing iterable in
15:52 - Java and you can watch my video on that
15:54 - as I said before that's it for this
15:58 - tutorial and there's going to be more
16:01 - tutorials in this course of course of
16:04 - course it'll be more tutorials in this
16:06 - course certainly and I plan to tackle
16:09 - enum and serialization and stuff like
16:12 - that so stay tuned and you can always
16:15 - find out what my latest videos are by
16:19 - going to WWF of programming comm and
16:26 - you'll find all my latest stuff on there
16:29 - so let's save this time and until next
16:31 - time happy coding