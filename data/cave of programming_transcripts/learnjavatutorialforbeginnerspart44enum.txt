00:00 - hello this is John from cave of
00:03 - programming calm this is a tutorial on
00:05 - the anon type in Java and before I talk
00:09 - about enum I just want to show you what
00:11 - unum is intended to replace often in
00:15 - programming in general you'll have some
00:18 - kind of variable which can only take on
00:19 - certain specific values that represent
00:22 - certain things so let's let's take an
00:25 - example of that I'll type int animal now
00:29 - let's say this int animal can take on
00:32 - different values that represent
00:33 - different animals what I could do is I
00:36 - in my class here I could declare certain
00:40 - kinds certain particular integer values
00:43 - that this variable could then take so I
00:46 - could say public static final int dog
00:49 - equals nought let's say and public
00:54 - static final int cat equals one and so
00:59 - on let's have one more public static
01:02 - final int mouse equals two and you get
01:07 - you get the idea and then later on I'm
01:13 - not sure why suddenly I've got caps lock
01:15 - on there we go
01:16 - yeah and then later on I can set this
01:19 - integer value to one of these so I could
01:23 - say int animal equals
01:24 - cat and I can do stuff with that like
01:27 - switch animal switch anymore let's put
01:33 - the opening bracket there case well
01:37 - actually the quickest way to fill in
01:39 - this switch would be to I don't know why
01:45 - it's not coming up normally let's check
01:47 - that I've got a build automatically
01:50 - switched on normally you get a little
01:52 - warning by a switch statement and that
01:54 - enables you to fill in the case values
01:57 - automatically but I guess yeah I guess
01:59 - it's not working because in fact I'm
02:00 - using an integer not and in none as they
02:02 - should be doing but you can type here
02:04 - stuff like case dog do something sis al
02:09 - dog and stand a break and so on now
02:15 - there's a couple of problems with this
02:17 - at least a couple of problems and one
02:22 - problem is that int this animal I only
02:27 - want it to represent certain of a fixed
02:30 - set of values I've got only certain
02:32 - animals that it can represent in this
02:34 - scheme I've only defined three different
02:38 - possible animals there but it could be
02:40 - signed any value I could sign it any
02:43 - value saw like a hundred or something
02:45 - and it wouldn't be clear what that would
02:47 - mean in this case really I'd like to
02:50 - restrict animal here to just these
02:53 - particular values and if you think an
02:56 - animal is kind of an unrealistic example
02:59 - this is often used for example to
03:01 - represent different kinds of borders
03:03 - with swing components or different
03:06 - colors it's a good example and so on so
03:08 - it's very very common to have a variable
03:10 - that you want to represent different
03:12 - members of a fixed set of values let's
03:15 - just run this and check it doesn't fat
03:17 - where we've got cat another problem with
03:20 - it is you can't tell just by looking at
03:22 - this what you meant to set it equal to
03:24 - you have to know that this exists as
03:27 - well so if I was passing I said I had
03:31 - methods that took this int animal as an
03:34 - argument I might not know that these
03:36 - constants exist and I'm I'm going to be
03:40 - in the dark is taught to do about that
03:42 - really what we want is a special type
03:44 - that can be set to only represent
03:47 - certain members of a fixed set and
03:49 - that's what enum does enum stands
03:52 - remunerate it and if you enumerate
03:54 - something you kind of count through it
03:56 - like 1 2 3 and the enum type represents
04:01 - them fixed set as only particular
04:03 - certain fixed values although not in
04:06 - actually any particular order so let's
04:09 - take a look I'm going to enum is like
04:14 - the syntax for creating nuns in Java is
04:17 - like
04:19 - creates the syntax for creating classes
04:20 - or interfaces they're all similar so
04:25 - I could I don't know if he clips here
04:27 - will give me an option for crating yeah
04:29 - I can go to new anon and let's give this
04:33 - a name I'll call it animal and click
04:38 - finish
04:39 - I think that's all good and if we look
04:42 - at it here instead of having public
04:45 - class such as such we've got public enum
04:47 - such-and-such or we could have here
04:49 - interface instead only the keyword
04:52 - changes and apart from that this is like
04:54 - declaring a class and it's a lowercase
04:57 - keyword because all the keywords in Java
05:00 - are lowercase and now what we can do
05:02 - with this is I can type cat dog mouse
05:06 - like that just separated by commas and
05:09 - now if I go back to my main application
05:12 - here and I don't need these constants
05:15 - anymore and instead of having an int
05:19 - anymore I can say animal anymore
05:22 - so I've created this animal type just
05:26 - like a class really and I can declare
05:28 - variables at that type and to set the
05:31 - value of it I say animal for example dot
05:34 - cat like that and I can switch on it
05:40 - just as before and now let's garrotted
05:43 - these room for a minute yeah I'll just
05:46 - delete that and now in fact I'm here in
05:50 - Eclipse I can get eclipse I'm sure it's
05:52 - the same another integrated development
05:54 - environments in Java I can get Eclipse
05:56 - to fill in the possible switch-case
06:00 - values for me if I click the warning
06:03 - here and go to add missing Cape case
06:06 - statements there we go I've got case cat
06:09 - dog mouse and default which should never
06:12 - occur and let's put this out here sis
06:15 - out cats cats and sisal dog it up and
06:25 - let's run that and we've got cats here
06:29 - of course if I set it to dog will get
06:32 - dog and or Mouse won't do anything so
06:34 - I'm not persist out there let's from
06:36 - that
06:37 - so all that work this is because of this
06:39 - and this this is probably like 90% or
06:46 - 95% of what you do with enormous it's
06:49 - that simple and that's usually all there
06:51 - is to it
06:51 - notice by the way that normally if I
06:54 - refer to the enumerated type I've got to
06:57 - say animal dot cattle dog or mouse but
07:01 - if you use a user with a switch
07:03 - statement you just use cat dog or mouse
07:06 - by itself and Java infers because you're
07:09 - switching on this particular variable of
07:11 - this type Java infers that it means
07:14 - animal dog or animal cat
07:16 - I'm not even sure if it will even let
07:17 - you type animal cat here I think that
07:20 - will give me an error so you have to be
07:22 - aware of that I think that's quite
07:24 - confusing actually but you need to miss
07:26 - off this bit only if you're using it
07:29 - with a switch and now having having
07:32 - covered the most common case that's the
07:34 - can't look at some slightly more
07:36 - advanced uses every Nam and other things
07:38 - you can do with it in fact the thing
07:42 - with public static final in variables is
07:45 - very very common in Java you'll see it
07:48 - in programs everywhere in the java api
07:51 - absolutely everywhere and enum is not
07:53 - used nearly as much as it should be
07:56 - so you won't see it perhaps as often as
07:58 - you wait as you expect what you really
08:00 - should use it in your own code because
08:02 - you've got the type safety there you can
08:05 - check that and this this can now only be
08:08 - assigned from this fixed set of animals
08:10 - you can't give it random numbers and
08:12 - stuff like that so it's it's really much
08:14 - better it's just kind of underused in
08:17 - Java unfortunately and that the public
08:21 - final static thing we use final because
08:23 - that makes it a constant in Java and
08:25 - Static because that makes it belong to
08:28 - the class which saves memory rather than
08:30 - having instances of those constants for
08:31 - each object but enormous essays is
08:34 - better so if you look at this
08:38 - anon thing here you might wonder what
08:42 - cat dog and mouse actually are or are
08:44 - they something you know how does this
08:46 - work and in fact the way it works is cat
08:49 - dog and man
08:49 - are actually objects at least as far as
08:52 - I understand of the type animal
08:54 - strangely enough so you can see that for
08:58 - example by if I do well if you see if
09:04 - you do sis out on it on an UMP and I
09:07 - mean on type it doesn't really help you
09:10 - if I do sis our animal dog and run it it
09:13 - will just output like that as a string
09:16 - dog which which is certainly useful so
09:20 - it doesn't tell me anything about the
09:22 - class but let's do sis out animal dog
09:26 - dot get to class and see what we get and
09:31 - if I run that we can see that the class
09:33 - of these constants is animal so these
09:37 - are actually objects of the type anymore
09:40 - and although you can't see it here or
09:46 - normally classes in Java implicitly
09:49 - inherit from the object class of jelly
09:51 - capital o but free none they inherit the
09:55 - immediate ancestor at Lisa's java.lang
09:58 - genome and all the classes in the java
10:00 - dot lang package we don't need to import
10:03 - them with an importance import statement
10:05 - they're automatically available in your
10:07 - program so I could do Sissel animal dot
10:14 - dog let's say instance of anymore the
10:20 - instance of operator tells us whether
10:21 - it's an instance of a particular class
10:23 - or not in other words is the object
10:26 - created from a particular class and this
10:29 - should say true and it does but I can
10:32 - also say instance of you num or Java dot
10:36 - Lang you know and if I run that we also
10:38 - get true because because child classes
10:42 - are instances of their parent classes I
10:45 - should say the objects of child classes
10:47 - are instances of the parent classes like
10:52 - if you have a car a particular car is an
10:56 - instance of cars in general it's also an
11:00 - instance of a machine a car is ER
11:03 - a kind of machine which could be
11:05 - represented by a parent class so that's
11:10 - kind of how we known works and let's
11:11 - take a look at a few interesting things
11:13 - that you can do with lean on one thing
11:15 - is you can give the UNAM type a
11:18 - constructor and you can give it methods
11:22 - as well actually but you have to
11:24 - remember to finish this list here with a
11:27 - semicolon so let's let's type here
11:29 - public any more like that and see we get
11:37 - an error here save that and in fact I
11:40 - need to finish this with a semicolon
11:41 - like that and also I think I can't
11:46 - actually declare the construct to public
11:49 - come to think of it it can only be
11:51 - private or you can just miss it off and
11:54 - it'll have package level kind of
11:57 - validity now why would you want to do
12:00 - that given that you can't even make the
12:02 - constructive public and you can't do new
12:05 - on your enum type well the answer is I
12:07 - could supply parameters here so let's
12:10 - say for example a string name I could
12:14 - supply it whatever parameters I want and
12:17 - now each of these objects must be
12:21 - instantiated with a name because I've
12:24 - only got one constructor here and it
12:26 - expects a name and to do that I just
12:30 - supply it in round brackets here so I
12:33 - don't use new with enum but these are
12:36 - objects and you can supply values right
12:39 - here let's say for a cat
12:42 - furgus the cut and for a dog Fido and
12:48 - the mouse Gerry
12:52 - so whatever parameters you declare here
12:55 - you can end supply here and that's no
12:58 - use unless you do something with them so
13:00 - you can also give your unum type like
13:03 - instance data here let's say private
13:05 - string name and then just as you would
13:09 - normally do in a class I can say this
13:12 - dot name equals name so now my animals
13:15 - have got
13:16 - and of course there's not much point
13:19 - doing that unless I do something with it
13:21 - let's give it a actually let's right
13:25 - click here and go to source generate
13:28 - getters and setters and let's create a
13:30 - getter for name
13:32 - so public string get name returns name
13:36 - and now I can do stuff like let's do
13:41 - sisal animal dot mouse get name and run
13:49 - that and hey presto I'm getting the name
13:52 - of my animal you can also override to
13:58 - string here so I can lets I'm not sure
14:04 - if this will work for right click and go
14:05 - to source generate to string I think it
14:09 - might not work for none this operation
14:11 - is not applicable to nuns but in fact it
14:13 - is applicable and I can do public string
14:17 - to string you have to remember the right
14:20 - syntax to overwrite to string and I can
14:24 - do return name like that or return
14:28 - whatever string by like let's say this
14:33 - animal is called plus name let's do that
14:40 - and now if I do sis out on my animal I
14:44 - can doing sis out on this dog and I run
14:46 - this it's going to say this animal is
14:48 - called Fido
14:49 - so exactly is with normal objects you
14:52 - can override to string with within lumps
14:57 - and there's there are some special
15:01 - methods they're inherited from java.lang
15:04 - enum as well so now yeah if I do sis out
15:11 - on this e none I'm going to get there
15:13 - the to string version but often for
15:15 - programmatic purposes you want this as a
15:19 - string you want the actual enum value as
15:22 - a string and the question is if you've
15:25 - over if you've overridden two string how
15:27 - can you
15:27 - get at it any nom supplies you with a
15:30 - special method that gets you the
15:32 - enumerated constant as a string and to
15:35 - do that I can say let's house assists
15:38 - out again here and let's just say the
15:42 - enum constant or let's say num name as a
15:48 - string and I use a method that say
15:53 - animal dot dog again dot name so I learn
16:00 - to get name myself
16:01 - lissa this has nothing to do with that
16:03 - this is a special predefined method
16:05 - inherited from java.lang yuan called
16:07 - name and if I run that so this animals
16:10 - called Fido but the actual you know as a
16:15 - string the actual name of the UNAM is
16:20 - doggin uppercase and that gets me this
16:23 - value here and that here and that's very
16:26 - useful for example if you want to save
16:28 - any non-constant to a database you
16:32 - probably will want to do it by getting
16:35 - the and this as a string and saving that
16:39 - string to your database and you probably
16:41 - want to define any none set of possible
16:45 - strings in your database we fishin sea
16:47 - but at the setting away from the subject
16:51 - and you can also do the reverse with the
16:54 - value of method so I could do stuff like
16:57 - let's say anymore let's call it animal
17:02 - to equals anymore that's the class and
17:07 - I'm going to use a static method called
17:08 - value of and if I supply that with for
17:12 - example cat as a string then I can do
17:16 - sisal animal two and if I run this then
17:24 - you see here this animal is called
17:26 - Fergus why is it called Fergus because
17:29 - my cats are called Fergus here and here
17:33 - when I do value off and I supply a
17:35 - string corresponding to one of my enum
17:37 - constants then I get the appropriate
17:40 - none as an object it's really important
17:44 - to realize that that these are not
17:47 - strings these are special objects we
17:51 - think of them as a known constants but I
17:54 - can I can turn them into a string using
17:58 - name using the name method where did I
18:03 - use it here and I can get a string and
18:06 - turn it into any non-constant using
18:09 - value of and I can also override to
18:11 - string to create I'd like a
18:14 - user-friendly version of the UNAM for
18:18 - display purposes or for debugging or
18:21 - whatever I think that's pretty much it
18:24 - for in nums and you won't often need to
18:28 - use this stuff I could define whatever
18:30 - other methods I wanted here and give
18:32 - them more instance data but as a say
18:34 - like 95% of the time you just stick to
18:36 - the simple usage that we saw earlier
18:39 - where you you just define a bunch of
18:41 - constants and use them and even that is
18:43 - not used as much as it should be in Java
18:45 - so that's it for this tutorial there's
18:47 - going to be more videos in this course
18:49 - on serialization and other stuff and you
18:52 - can always find those by going to WWF of
18:56 - programming comm and I always put my
18:59 - latest videos on there so until next
19:03 - time oh yeah actually I'll put this
19:05 - source code on there as well you just
19:07 - need to go to the home page scroll down
19:09 - to the YouTube videos and find the right
19:13 - tutorial in that section and you'll find
19:15 - the source code for this in the page
19:17 - right there so until next time happy
19:19 - coding