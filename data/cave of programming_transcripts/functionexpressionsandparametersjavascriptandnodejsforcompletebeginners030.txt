00:00 - hello in this video we're going to take
00:02 - a look
00:03 - at working with parameters and return
00:06 - values
00:07 - with different ways of defining
00:08 - functions my name's
00:10 - john from the website
00:12 - caveoffprogramming.com
00:14 - and this con this is continuing my
00:16 - series on
00:17 - node.js and javascript for complete
00:19 - beginners
00:20 - so in the last video we took a look at
00:22 - function definitions and expressions
00:24 - different ways of creating functions in
00:26 - javascript
00:27 - if you've watched that video hopefully
00:29 - you practice this a bit
00:31 - so it's starting to seem familiar to you
00:34 - in this video we're going to do the same
00:35 - thing but we're going to bring in
00:37 - parameters
00:38 - and return values so let's
00:41 - maybe write functions that calculate
00:44 - factorials
00:45 - so the factorial of a number is defined
00:47 - like this let's say we have for example
00:51 - three factorial so we write we write it
00:54 - like this
00:55 - so that's three factorial
00:59 - what does it mean well it's equal to
01:03 - three times two times one
01:07 - so you can guess that for example five
01:10 - factorial
01:11 - equals 5 times 4 times 3
01:14 - times 2 times 1 not that it makes any
01:18 - difference
01:19 - multiplying by 1. this is a simple idea
01:22 - from mathematics
01:23 - can we write a function that calculates
01:25 - this and you might want to pause the
01:27 - video and have a go at it and see if you
01:28 - can do it
01:29 - because it's a good little exercise okay
01:32 - so
01:33 - let's start by creating a function using
01:36 - a function definition
01:39 - and the way we do that is we have
01:40 - function we have a name for it let's
01:42 - call it factorial
01:43 - one because i'm going to have more of
01:46 - these
01:46 - and we have round brackets and curly
01:48 - brackets
01:49 - we want to pass a single argument to
01:52 - this
01:53 - function and that's going to be the
01:54 - number that we calculate the factorial
01:56 - for
01:57 - like three or five or whatever so let's
02:00 - give that a name we could call it for
02:01 - example value
02:04 - and then we can write the function so
02:07 - we're going to have to
02:09 - um iterate over
02:12 - all the different values um
02:16 - sort of counting up to this actual value
02:18 - let's let's try it
02:20 - it's actually easier to do this by
02:22 - writing a function that calls itself
02:24 - but we won't look at that just yet
02:26 - that's called recursion
02:28 - let's do it using a loop so i'm going to
02:30 - have
02:31 - four let let's say
02:34 - let's call this maybe n because it's
02:38 - it's like a number n equals
02:42 - one although we don't really have to
02:44 - bother with one strictly speaking
02:48 - we keep going while n is less than or
02:51 - equal to
02:52 - value and then we increment n
02:56 - so we start off setting the value of n
02:58 - to one
02:59 - we're going to keep looping until it's
03:02 - um equal to the value that we pass in
03:07 - and we'll also loop for that but when
03:10 - it's more than the value will stop
03:13 - so when this condition is false and n is
03:15 - not less than or equal to the value then
03:18 - we don't loop anymore
03:19 - and then we increment n every time we go
03:22 - around the loop
03:24 - so for a start let's just do console.log
03:28 - n and see what values we get for n when
03:30 - we call this function
03:32 - and it's a really good thing to do to to
03:34 - build up your programs bit by bit
03:36 - and check them along the way use
03:38 - console.log to check
03:40 - that they're actually working as you
03:41 - expect at each particular step
03:44 - don't write a load of code and then just
03:45 - run it because that can get confusing
03:47 - write little bits
03:48 - and check that they're working so let's
03:51 - call factorial so we write the name of
03:53 - it factorial one
03:55 - and we pass in some value like three
03:59 - so we expect this to print out one two
04:01 - three let's see if it works
04:06 - so if i run this what do i actually call
04:09 - it let's write node function
04:11 - expression parameters.js and we get one
04:14 - two three so it seems like it's working
04:16 - okay
04:17 - let's try it for five we should have one
04:19 - two three four five
04:24 - and yeah i just
04:28 - altered the wrong thing there so i want
04:31 - to pass in
04:32 - five when i call the function
04:34 - unfortunately
04:35 - i have trouble seeing over my microphone
04:38 - okay
04:38 - one two three four five it's working
04:40 - what we have to do is multiply all those
04:42 - values
04:42 - by each other you know it doesn't matter
04:44 - what order we do them in so
04:46 - three times two times one is of course
04:48 - the same as one times two times three
04:51 - and we could start this at two it makes
04:52 - no difference but just to make it look a
04:54 - bit simpler i'll start it at one
04:57 - all right so let's have a variable let's
04:59 - write let
05:01 - and i'll call this factorial equal
05:05 - one maybe
05:09 - in fact let's change this to 2 because
05:11 - the thought of it being
05:12 - 1 pointlessly sort of annoys me and then
05:15 - what we have to do here is say
05:17 - so we want to say factorial equals
05:21 - factorial times n
05:26 - and then when we finish we can display
05:28 - it console
05:30 - dot log
05:33 - factorial
05:36 - let's see if it's what we expect so for
05:39 - five
05:40 - we get 120 which i think is correct
05:43 - let's try four four times three times
05:47 - two times one so four times three what's
05:49 - that it should be 24 i think um let's
05:52 - run it
05:52 - 24. let's try it for three
05:57 - three times two is six so it's it's
05:59 - working we've got the value that we want
06:01 - but we want to return it rather than
06:03 - display it so
06:05 - if we return it let's say return
06:08 - factorial
06:12 - and when we actually when we actually
06:15 - call the function we can now get a
06:16 - return value so let's say
06:18 - let result one i'll call it equal
06:21 - factorial one of three
06:25 - so notice the function is called
06:26 - factorial one i've got a variable here
06:29 - called factorial so those are two
06:31 - different names
06:32 - and let's do console.log
06:35 - result result one
06:40 - and i'll try it for four
06:44 - so if we run it we get 24.
06:48 - now there is a a bit of a twist here
06:50 - with factorial which is that
06:52 - by definition factorial of zero is
06:55 - supposed to be one
06:56 - and this isn't going to work with
06:58 - factorial zero or is it let's try it
07:01 - so if i say factorial zero
07:06 - we get one so i've started factorial at
07:09 - the value
07:10 - one and then the loop doesn't execute at
07:12 - all so it does actually work
07:15 - otherwise i would have put an if in here
07:18 - to check if value is zero
07:21 - at the start and then just returned one
07:23 - but this works anyway
07:25 - all right so let's look at doing this
07:29 - using function expressions
07:33 - and if you watch the last video and you
07:35 - think you can probably actually work out
07:37 - how to do it
07:37 - then do go ahead and have a go pause the
07:39 - video and try it
07:41 - so let's write let factorial
07:45 - 2 and this time i'll use a function
07:47 - expression
07:49 - so we write equals function
07:52 - we have round brackets and curly
07:54 - brackets in the round brackets we put
07:56 - our comma separated list of parameters
07:59 - in this case we just have one parameter
08:02 - and then we have to do these
08:03 - calculations so
08:05 - normally you try not to duplicate code
08:07 - in a program
08:08 - but here we're just doing the same thing
08:10 - three different ways just for
08:12 - demonstration purposes so i just copy
08:14 - this code it's going to be the same
08:18 - and don't forget the indentation and you
08:21 - should be able to run i think it's
08:23 - option shift f or alt shift f
08:28 - to run the auto formatter on my mac it's
08:31 - up option shift f i'm guessing windows
08:33 - alt shift
08:33 - f probably there's also a menu option
08:37 - here somewhere
08:39 - but you want to make sure you know look
08:41 - it up if you can't figure it out
08:43 - but you want to make sure that you can
08:44 - run auto format
08:46 - in your
08:50 - in in visual studio code make sure it
08:52 - works and use it a lot i recommend it
08:55 - but try to write well formatted code to
08:57 - start with this is incredibly important
09:00 - okay so now we've defined a function
09:03 - using a function expression
09:06 - and we can write let result to equal
09:09 - factorial to and let's pass in
09:13 - uh five should get 120
09:17 - and then we can write console.log 5.
09:25 - and something went wrong what'd i do
09:28 - wrong
09:29 - console.log five i meant result two okay
09:34 - there we go we've got 120. we could also
09:37 - do this
09:38 - like this so i could write console
09:43 - console.log and
09:46 - factorial let's call one of these
09:49 - functions like factorial two doesn't
09:50 - matter which one
09:52 - and pass in four or something so
09:56 - if i write this so this is actually
09:59 - calling the function and then passing
10:02 - the result
10:03 - immediately to console.log just without
10:05 - the intermediate variable that we have
10:07 - here
10:08 - so this also works if i run this
10:11 - we're getting 24 down there and finally
10:15 - using the other form of what is
10:17 - essentially a function expression again
10:19 - let's write let factorial three
10:24 - so i have to give it a different name so
10:25 - i'm just going one two three
10:27 - at the end of the function name here
10:30 - equals
10:30 - and this time we have round brackets an
10:33 - arrow
10:35 - and curly brackets so basically
10:39 - we've got an arrow instead of the
10:40 - keyword function is the difference
10:43 - and the order is slightly different but
10:45 - it's it's
10:46 - pretty much the same as this one and it
10:48 - is another kind of function expression
10:51 - so if i just copy the content of this
10:53 - and paste it in
10:55 - and let's call it and this time i won't
10:57 - bother with the intermediate
10:59 - variable to get the value i'll just
11:00 - write console.log
11:03 - factorial three and let's pass in
11:07 - uh six which should be
11:11 - six times 120 what is that 720
11:16 - let's try it
11:21 - okay so i did something wrong there what
11:23 - did i do wrong
11:25 - let's check i forgot to
11:29 - add value as a parameter so i want to be
11:32 - able to pass six to it
11:34 - got to have a parameter here let's try
11:37 - that
11:40 - yeah we get 720. all right so it's all
11:43 - working
11:44 - and as i say if you're a beginner
11:47 - and this is the first time you've seen
11:49 - this you really do need to practice this
11:51 - give yourself
11:53 - you know little challenges add up lists
11:56 - of
11:56 - numbers or whatever you can pass arrays
11:58 - to functions as well and return arrays
12:01 - you just pass in the name of the array
12:03 - and you can
12:04 - you know just return the array that
12:06 - works
12:07 - perfectly well but practice all of this
12:10 - make make some challenges up for
12:11 - yourselves practice all three styles
12:14 - with parameters you can have more than
12:15 - one parameter of course
12:17 - you could have a common separate
12:18 - separated list of parameters with
12:20 - various different names here
12:22 - try it all out and practice it or you
12:24 - will get lost pretty quickly
12:26 - so um we're going to look at some other
12:29 - concepts
12:30 - in this course and i want to get
12:33 - fairly soon to looking at
12:36 - what we can do with javascript in terms
12:38 - of
12:39 - um actually things like running web
12:41 - servers and
12:42 - you know just generally interacting with
12:45 - the world beyond the console
12:47 - uh on the computer essentially but
12:50 - we're probably gonna have to look at
12:52 - some more stuff first
12:53 - so the key to this is practice type it
12:56 - all out try it all out
12:58 - experiment with it a little bit and then
13:01 - you're hopefully not gonna get lost but
13:03 - you will if you just watch the videos
13:04 - okay so until next time happy coding