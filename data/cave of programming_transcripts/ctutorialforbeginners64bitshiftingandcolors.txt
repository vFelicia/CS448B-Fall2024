00:16 - hello this is John from cave of
00:19 - Programming to come in this tutorial
00:21 - we're going to take a look at the left
00:23 - bit shift operator and we're going to
00:26 - see how we can pack a bunch of color
00:28 - values into a 32 bit int so we want to
00:32 - be able to specify red green blue and
00:35 - alpha values as hexadecimal values in
00:39 - unsigned chars because their values the
00:42 - values are red green and blue range from
00:44 - naught to 255 which is naught to FF in
00:49 - hex but to actually set the values of
00:51 - pixels on the screen we need a unsigned
00:55 - integer color that's a 32-bit value on
00:59 - most platforms in other words 4 bytes
01:01 - and we want to put the Alpha value in
01:04 - one of those bytes the red in another
01:06 - bite
01:06 - blue in another and green in another so
01:09 - the exact order of these is going to it
01:11 - depends on what API you're using and
01:14 - that they can also be the other way
01:16 - around but just for a demonstration here
01:18 - let's let's imagine that we want to put
01:20 - the Alpha in the first the leftmost bite
01:23 - of this integer and that followed by red
01:28 - and followed by blue and green so if
01:32 - we've got values FF and 1 2 3 4 5 6 I've
01:35 - just given these easily distinguishable
01:37 - values we want the resulting hexadecimal
01:40 - value to look like this so because it's
01:42 - in hex and because two digits and X
01:46 - corresponds to one byte then we can
01:49 - easily see the these values in the final
01:53 - integer that's the advantage of using
01:54 - hex you call that one-to-one
01:56 - correspondence between two digits in hex
01:59 - and a byte so we want the Alpha value to
02:03 - be here and then a red value and then a
02:06 - green value and finally the blue value
02:08 - how can we accomplish that well we've
02:10 - got this sum unsigned in color here
02:12 - let's start by setting it initially
02:14 - equal to alpha we want to output this we
02:19 - want it to look something like that
02:20 - let's you see out here and color
02:24 - endler and if we if we run this the
02:29 - first problem we find is that I'm not
02:31 - sure what these those errors are but
02:34 - they sort of disappear and yeah we've
02:37 - got some unused unused variable warnings
02:39 - and that's fine I haven't used them yet
02:41 - so when we look at it it's in decimal so
02:45 - I'm going to use IOM in it let's include
02:48 - I oh man it and this allows us to
02:53 - manipulate the output a bit so one thing
02:55 - I can do is type X here and this this
03:01 - object or flag what whatever it is
03:03 - that's going to tell see out to display
03:06 - subsequent values in hex so if I run
03:08 - this now we get a hex value now I'd like
03:12 - to see the whole whole thing I'd like to
03:14 - see we've got an eight digit unsigned
03:17 - int here a eight digits corresponds to
03:20 - the 32 bits they digits in hacks
03:23 - corresponds to four bytes or 32 bits so
03:26 - I'd like to see this left padded with
03:28 - zeros because just just as in decimal we
03:31 - can left pad a number by zeros and it
03:33 - makes no difference to the value so to
03:36 - do that we can set the width here let's
03:39 - say set were set width and set it to
03:43 - eight actually that's yes the thing
03:49 - that's right so we want to set it at
03:50 - eight digits if we run this now now you
03:53 - can see that it's the width is set to
03:55 - eight digits but it's padded with blanks
03:59 - so what I'm also gonna do here is I'm
04:02 - gonna say set fill and set the filled
04:06 - character for the for the extra values
04:10 - in the width here to the to zero and if
04:13 - we run this now we see that we've got a
04:16 - hexadecimal integer formatted as we like
04:19 - so we can see that the these rightmost
04:22 - values the least significant bit here
04:25 - lately significant byte I should say are
04:27 - set to FF and the others are still see
04:30 - now what we can do is we can use the
04:32 - left bit shift operator let's say color
04:35 - equals color left shift by a bit so what
04:41 - this does is simply to move the bits to
04:43 - the left and right pad with zeros so by
04:47 - doing this we're gonna move all the
04:50 - values in the color left by eight bits
04:54 - which is one byte which remember
04:56 - corresponds to two digits in here if we
05:00 - use hexadecimal so any any values there
05:03 - were on the right here would simply drop
05:05 - up sorry on the left would simply drop
05:07 - off the end and with with PAD with zeros
05:11 - and the FF is gonna move along to two
05:15 - places which corresponds to one byte so
05:18 - let's run this save it first and now we
05:21 - can see that we've got the Alpha value
05:23 - there shifted a bit closer to where we
05:26 - want it
05:27 - let's move it by three bytes which is 24
05:33 - 24 bits so now we've got it into the
05:36 - right position there where but what we
05:39 - can actually do is we can build this up
05:41 - as we go along so let's add the Alpha
05:44 - and then shift it if in fact rather than
05:48 - use this syntax in the same way that we
05:51 - wouldn't want to say color equals color
05:54 - plus five or whatever we would want to
05:57 - say color plus equals five we can also
06:01 - do equal shift and that's that means the
06:06 - same as what we had previously so that's
06:12 - actually not right
06:13 - we want to say shift equals okay let's
06:16 - do that shift equals just like plus
06:19 - equals so if we run this now you can see
06:22 - we have the same result as before it's
06:24 - shifting the color left by eight bits
06:26 - and then storing it back in color we can
06:29 - then we can then let that set this equal
06:33 - to zero to start with and then let's say
06:36 - color plus equals alpha and then shift
06:40 - equals by a byte
06:42 - then we can say color and we can add on
06:44 - the the next value which is red here and
06:49 - when we add it it's gonna fill this
06:50 - empty space on there on the right let's
06:53 - say red let's take a look at how that
06:56 - looks so now we've got red and after the
07:02 - alpha value and of course we can shift
07:04 - it again by another byte and then add on
07:07 - green so now we should have the green
07:12 - value as well in the right place and
07:15 - finally we want to shift it again by
07:19 - another byte and add on the blue value
07:21 - so color plus equals blue so if we look
07:27 - at this now we've got exactly what we
07:30 - wanted which is which is this
07:33 - we've got FF 1 2 5 6 3 4 I think I've
07:39 - gotten slightly in the wrong color red
07:41 - blue green yeah we should have a red
07:44 - green blue so let's let's declare the
07:48 - money in the other order although it
07:49 - doesn't actually matter and let's set
07:52 - green 2 3 4 blue 2 5 6 and then we
08:01 - should have 1 2 3 4 5 6 FF 1 2 3 4 5 6
08:04 - which is exactly what we want so and the
08:08 - bit shift operator left bit shift is
08:11 - it's not used all the time in C++ but it
08:14 - is very useful for some tasks
08:16 - particularly because in C++ you often is
08:21 - kind of a low-level language where you
08:22 - often want to shift bits and bytes
08:24 - around like this and there's also a
08:27 - write bit shift operator that shifts the
08:29 - bits to the right as well so we'll leave
08:32 - it there for this tutorial and in the
08:34 - next tutorial we'll look at using this
08:37 - to set pixel values so until next time
08:40 - happy coding
08:48 - you