00:01 - hello this is John from Cave of
00:03 - programming. comom and in this tutorial
00:05 - we're going to look at reading files in
00:08 - Java using file reader and buffered
00:11 - reader and this is kind of the old way
00:13 - of reading files and you can read files
00:17 - using the scanner class which is a bit
00:20 - less cumbersome and there are also some
00:23 - new language features in Java 7 which
00:26 - we're probably going to look at in the
00:27 - next tutorial that make this a lot nicer
00:30 - ER but the stuff that I'm going to show
00:32 - you here at the moment is still really
00:33 - important to know partly because it will
00:36 - still work even if you're using Java 6
00:38 - as many people are and partly because
00:42 - this is at the beginning of 2013 anyway
00:45 - and partly because you can change the
00:47 - code that we've got here and adapt it so
00:50 - that it will read um files in all kinds
00:52 - of different formats like binary format
00:54 - or a different kind of text format to
00:57 - the the standard so what we're going to
00:59 - write now is is very flexible even
01:01 - though it's
01:04 - cumbersome so the first thing is we need
01:06 - some kind of text file to read and we're
01:08 - just going to look at text files here
01:10 - and I won't repeat um the remarks that I
01:12 - made in the tutorial on reading files
01:14 - with scanner about where to locate your
01:17 - file but I'll just create a file I'll
01:19 - right click the project and create a
01:21 - file here in the project folder called
01:25 - test. text which we're going to work
01:27 - with here rather than specif spe ifying
01:30 - a full file path I'm just going to put
01:32 - it where the program can find it easily
01:34 - and let's put in here first line Second
01:38 - Line third line and that'll do and I'll
01:42 - save that so it's just a text file and
01:45 - I'll create a file object that can read
01:47 - that file let's say file file equals new
01:51 - file and test.
01:54 - text so the file object is a platform
01:58 - independent way of representing pres in
02:00 - a file that doesn't pretend that doesn't
02:02 - depend on any
02:04 - particular um kind of path specification
02:08 - like it doesn't care whether it's
02:09 - forward slashes or back slashes in there
02:11 - or whatever it's uh it just represents
02:14 - your file on on any
02:17 - system and then we need to read that
02:19 - file so I'm going to use a file
02:21 - reader uh because the file represents
02:24 - the file but it doesn't provide you with
02:26 - convenient methods for reading it so I'm
02:28 - going to use the file reader and I'll
02:30 - call this F and usually I don't um
02:33 - usually it's bad practice to use two
02:36 - letters for a object in Java you should
02:40 - spell it out more than this but we're
02:42 - only going to refer to this really
02:44 - temporarily and this is such this has
02:47 - become such an kind of idiom uh in Java
02:50 - that it's not so bad just to use two
02:52 - letters in this particular instance and
02:54 - I'm going to pass the file to the
02:56 - Constructor of file reader and do
02:58 - control shift o to add the input for
03:00 - file
03:00 - reader and now file reader will try to
03:03 - open the file but it throws a file not
03:06 - found exception if it can't do it so
03:09 - let's handle that Exception by
03:11 - surrounding with TR catch I just click
03:13 - the error there and here let's say
03:18 - sisal
03:19 - file file not found because if you're
03:23 - going to distribute this to an end user
03:25 - they don't want to see a stat Trace they
03:27 - want to see file not found so that know
03:30 - what the problem is and it's also
03:31 - crucially
03:32 - important to to say what file has not
03:35 - been found so let's say file. two string
03:38 - to get the file name there so the user
03:40 - can see what file has not been found
03:43 - because if a program just says file not
03:45 - found it doesn't tell you which file
03:47 - from the end users point of view that's
03:49 - a total nightmare how how are they ever
03:51 - going to know what file that is so you
03:53 - should always tell on which file has not
03:55 - been
03:56 - found now file reader lets you read the
04:00 - file but only in a quite inconvenient
04:02 - way if you want if you want to read it
04:04 - line by line you also need another class
04:07 - because this only lets you read it um so
04:10 - many chars at a time let's say what we
04:13 - want to do is we want to save up um the
04:17 - chars that we read the characters that
04:19 - we read from the
04:21 - file and um we want to process them one
04:24 - line fold at a time and when you kind of
04:26 - save data up like that and process it in
04:29 - useful kind of bites then that that's
04:32 - called buffering so we want to do
04:34 - buffering and to do that we want to use
04:36 - buffered reader here so buffered
04:39 - reader let's call this BR equals new
04:43 - buffer buffered
04:45 - reader and we pass in F the file reader
04:49 - for it to work with so that's three
04:51 - classes there like a kind of Russian
04:53 - doll thing and I'll add the input there
04:55 - so we've got buffer reader on top and
04:58 - then underneath that file reader and
04:59 - underneath that we've got
05:02 - file and I'm going to declare a string
05:04 - here um and this is just a reference I'm
05:06 - not going to actually create a string
05:08 - and this reference is going to point to
05:10 - each line in the file in turn and to do
05:14 - that well I can do stuff like line
05:16 - equals Bufford reader. read
05:21 - line and that throws a another exception
05:25 - it throws I/O exception so let's click
05:27 - the error here and go to add C catch
05:31 - Clause to surrounding try to add another
05:34 - catch clause and then here I can say sis
05:37 - out unable to read
05:42 - file and file. two string so in the
05:46 - first case here it can't open the file
05:49 - and here it could open the file but for
05:51 - some reason it's just not able to read
05:53 - it it's corrupted or it's got the wrong
05:55 - permissions on it or something and if I
05:58 - now do cisal
06:00 - sis
06:02 - outline and I run that we're going to
06:06 - see here um I can't actually find the
06:09 - file what did I do wrong I called it
06:12 - test I called it text. text let's right
06:16 - click that and go to refactor rename and
06:21 - I want to actually call this
06:24 - um choose
06:26 - destination okay something's going
06:28 - horribly wrong what I'll do is I'll just
06:31 - copy that and close that and delete it
06:37 - and let's just recreate it with the
06:39 - right name so right click the project
06:42 - new file test. text is what I wanted to
06:47 - call it paste the stuff in there save it
06:52 - run the program and now we've read one
06:55 - line from the file we've read read the
06:57 - first line so when every time we call
07:00 - Buffer reader. read line we're going to
07:02 - read one line from the
07:04 - file and we want to actually read all
07:07 - the lines on the file and to do that we
07:09 - have to enclose this in a while loop and
07:13 - uh we want the while loop to stop when
07:15 - the line is equal to null and we can use
07:18 - a kind of slightly strange feature of
07:20 - the Java language to accomplish that we
07:23 - say
07:23 - while and there there's the opening
07:26 - bracket of the while
07:28 - loop and we we put this whole thing the
07:31 - actual reading of the line itself in
07:33 - round brackets and we say while that is
07:37 - not equal to null and then close the
07:41 - bracket of this W Loop here so if you
07:45 - put this whole thing in Brackets like
07:47 - that that evaluates to um whatever was
07:52 - assigned to line here and we're checking
07:54 - then that that is not equal to null so
07:56 - this is not really intuitive but it does
07:59 - trick and then finally we can put the
08:01 - brackets on the while loop and we can
08:03 - move this sis out into inside the while
08:07 - loop like that so now we're going to
08:08 - read the lines from the file one at a
08:11 - time and we run that and we see we've
08:13 - read the lines from the file and you
08:15 - could use um it would be inefficient to
08:17 - have like one big string and to do plus
08:20 - equals and concatenate these lines to a
08:22 - big string because once you create a
08:25 - string it's immutable and it never
08:27 - changes and when you use Plus calls with
08:29 - a string it's actually creating a brand
08:33 - new string every time so if you wanted
08:36 - to collect all your lines in one place
08:39 - and you have to be careful of memory
08:41 - considerations if it's a big file but
08:43 - you you should use a string Builder to
08:45 - do that rather than using plus equals
08:48 - with a string now the outstanding and
08:51 - remaining problem here is that we
08:53 - haven't closed this buffer reader and we
08:55 - we might get problems potentially with
08:59 - uh uh with um open file handles if we do
09:02 - this a lot I'm not sure if Java will
09:04 - actually close it
09:05 - automatically possibly but if you
09:08 - certainly if you reading a lot of files
09:09 - in your program then you need to close
09:11 - them to avoid memory leaks and stuff
09:14 - like that so if we see this warning here
09:17 - it says BR is never closed now the
09:21 - question is where do we close this um
09:25 - buffer reader if we close the buffer
09:27 - reader it will automatically close the
09:29 - file reader and I don't know if file
09:32 - technically needs closing but it will
09:34 - close everything up the chain above it
09:36 - so we only have to close this last one
09:38 - we have to close called the close method
09:41 - because this is opening the file and we
09:44 - want to close it again by calling buffer
09:46 - reader. close which closes this which
09:49 - also closes
09:51 - this but where do we call Buffer reader.
09:54 - close if you put it down here buffer
09:57 - reader. close br. close then we've got a
10:00 - problem and it's going to say that BR
10:02 - cannot be resolved and that's because
10:05 - when you declare a variable in Java the
10:07 - scope of it is limited to the curly
10:10 - brackets around it and this is declared
10:13 - Within These curly brackets so it
10:15 - doesn't exist down here what we need to
10:18 - do is declare this outside of those
10:21 - curly brackets so I'm just going to do
10:23 - contr X and I'll just put BR here so
10:26 - I've cut that to the clipboard and now I
10:28 - can p paste it up here and let's put the
10:31 - semicolon
10:33 - in and uh save it and now the error has
10:38 - changed if we look at this it says
10:40 - unhandled exception type IO exception
10:43 - because close can bizarrely fail and in
10:48 - that case it will throw an IO exception
10:49 - so let's click this surround with TR
10:53 - catch and um we're catching the io
10:56 - exception now there's still a problem
10:58 - let's have look at that and it's saying
11:00 - the local variable BR may not have been
11:02 - initialized so we haven't if we throw an
11:05 - error
11:06 - here this if this throws an exception we
11:11 - never execute this line because when you
11:12 - throw an exception it immediately goes
11:14 - into the catch block down here so then
11:17 - that wouldn't have any value and then
11:19 - we're trying to call close on something
11:21 - that has no value which we can't
11:23 - do so we can make it shut up by saying V
11:27 - equals null and then
11:30 - it goes quiet and it looks fine and if
11:34 - we run it then it's fine but supposing
11:37 - it can't open the file if I let's add
11:40 - another character to the file name and
11:41 - run that now it says null pointer
11:45 - exception and I click this error here
11:47 - and and this is throwing a null pointer
11:50 - exception that's
11:52 - because this is throwing an exception it
11:54 - can't open the file so this is still
11:57 - null and um it's
12:00 - what it's telling us what Java is
12:01 - telling us is that this is we're trying
12:05 - to call close on something that's null
12:07 - which gives us a null pointer exception
12:09 - which we're not forced to handle but we
12:11 - can handle it if we want to so let's
12:15 - handle it and we could add another catch
12:18 - Clause here to catch null pointer
12:20 - exception but perhaps the easiest thing
12:22 - to do
12:24 - is well is it the easiest it depends on
12:27 - your perspective we could put message in
12:29 - here saying can't close
12:32 - file although the user might not care
12:35 - about not being able to close files but
12:37 - let's put a message in here and let's
12:39 - say can't unable to close file and you
12:44 - you kind of have to decide whether it's
12:46 - worth telling your user about that
12:48 - because most users of
12:51 - software if they see a message saying
12:53 - can't close the file well they didn't
12:55 - even know that the file needed closing
12:58 - so to then that would be an obscure
13:00 - error message so you might you might not
13:02 - want to put in an error message there
13:04 - you might just want to write this to a
13:06 - log file or
13:07 - something and now we could change this
13:09 - to exception and because if we throw a
13:14 - null pointer exception it would here it
13:18 - would then be caught by if we had this
13:21 - just like this it would be caught by
13:22 - this as well but then it would be
13:24 - wrongly saying unable to close file when
13:26 - in fact the problem was the file could
13:28 - not be open happed so let's not do that
13:31 - let's just go here put another catch in
13:35 - catch null pointer exception
13:40 - X and let's just say here um well why
13:46 - should we say anything so let's not and
13:48 - usually you should put something in here
13:51 - when you handle an exception but in here
13:54 - it's it's likely that this is being
13:56 - thrown because the file was probably
13:59 - never
14:01 - opened I don't see how that could not be
14:03 - the case really so um yeah if if the
14:07 - file's not open this will throw a null
14:09 - pointer exception because it'll still be
14:12 - null but we'll catch it here and let's
14:15 - run that now and now we see it says file
14:17 - not found and there's no further errors
14:20 - which is very nice although of course if
14:22 - you put X do print stat Trace in here
14:25 - then you would see the error so um we
14:27 - haven't got any print stack Trace in
14:29 - here so we're not we're only seeing our
14:32 - own custom error output like these which
14:35 - is good so now this works and now if I
14:39 - delete this character here then we can
14:42 - run it now this is all good but if you
14:45 - follow a university course in Java or if
14:48 - you look at a lot of books they they
14:50 - will tell you to do it slightly
14:51 - differently just because here I'm
14:53 - assuming that you want to handle error
14:56 - and print stuff out here but you might
14:58 - actually want to rethrow the error this
15:01 - is probably not going to this code is
15:02 - probably not going to be in your main
15:04 - program and it might be in some method
15:07 - somewhere and you might want to throw
15:08 - the error again here rethrow the
15:10 - exception or even throw a different
15:12 - exception here to Signal further up the
15:15 - stack further up the the hierarchy of
15:18 - method calls that something has gone
15:20 - wrong and you could handle this
15:21 - somewhere else with a dialogue box or
15:24 - something so you don't always want to
15:27 - just catch this here and and then carry
15:29 - on to execute this you might want to
15:32 - exit your method with another throw here
15:35 - or something like that and what we can
15:38 - do is we can put a finally Block in here
15:40 - like this and finally is always
15:43 - guaranteed to be executed so whether
15:45 - this runs okay or whether one of these
15:48 - lines throws an exception the finally
15:50 - block at the end here at the end of the
15:52 - catch Clauses will always be executed
15:55 - every time the only way it won't be
15:57 - executed is if let's say there's a
15:59 - nuclear explosion which vaporizes your
16:02 - computer or more likely your computer
16:04 - stops working but if the program
16:06 - executes successfully this will be this
16:10 - will be run even if exceptions are
16:13 - thrown so let's just move this into the
16:17 - finally block and this is uh usually how
16:22 - you'll be told to do this on a
16:23 - university course it will usually look
16:25 - like this and now we've got the same
16:27 - thing as before and if the file's not
16:29 - found then it just gives us a nice error
16:33 - message so that's it for this time it's
16:36 - a hell of a lot to absorb but uh this is
16:39 - a very flexible way of reading a file
16:41 - and in the next tutorial I'm going to
16:43 - show you how you can use Java 7 to
16:47 - simplify this a lot and really make it a
16:49 - lot nicer because if you think this is
16:51 - clunky you're absolutely right it looks
16:54 - really like um well it looks like a
16:56 - pig's ear or a donkey's ass or Rat's
16:59 - Nest almost perhaps not A Rat's Nest but
17:01 - it is ugly and this is one of the worst
17:04 - things in Java the way that the
17:06 - exceptions tend to get nested and tend
17:08 - to build up and clutter your
17:10 - code so there is a language feature in
17:13 - Java 7 that we can use to simplify this
17:16 - and we'll look at that in the next
17:17 - tutorial but that's all for this time
17:20 - and this code will be on Cav
17:22 - programming. comom until next time happy
17:25 - coding