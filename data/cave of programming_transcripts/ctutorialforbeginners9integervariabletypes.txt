00:17 - hello this is John from cave of
00:20 - programming calm in this tutorial
00:21 - tutorial we're going to look I'm going
00:24 - to take a closer look at integers in C++
00:27 - and although this topic is not the most
00:30 - interesting and we're going to get on to
00:32 - more interesting stuff soon it's
00:34 - important to know so you don't have to
00:36 - memorize everything that I show you here
00:38 - but it's good if you at least see it and
00:40 - just play with it a little bit because
00:43 - it will stand you in good stead for the
00:45 - future so I kind of want to run this
00:47 - past you we've already seen it you can
00:50 - type stuff like int value equals 77 777
00:55 - or whatever and you can do see out value
00:59 - and endler and if we run this program
01:04 - then it's going to output 777 now
01:09 - there's there are limits to how big an
01:12 - integer you can fit into this value and
01:14 - that's because we're only allocating a
01:17 - certain amount of the computer's memory
01:20 - here and so the question is like how big
01:27 - an integer can you actually put in there
01:29 - and what happens if you put one in
01:30 - that's too big let's put a really big
01:32 - number in here just make something up
01:34 - like this that's not going to fit so
01:37 - let's run this program and we can see
01:40 - that the number we've got out is
01:41 - basically nonsense it bears no relation
01:43 - to the number that we tried to put in
01:45 - because we're trying to put too big a
01:47 - number into too little memory and we've
01:50 - also gotten a warning in Eclipse here
01:52 - overflow and implicit constant
01:54 - conversion so I guess this is a constant
01:57 - we're trying to convert it to a an int
01:59 - and it's just not going to go so I'll
02:01 - change you back to something sensible so
02:05 - how do you know like what value is too
02:09 - big to put in an int well we can explore
02:11 - this a bit further in two ways one thing
02:14 - we can do is here below the include
02:17 - iostream statement type
02:20 - in hash and include limits and if this
02:27 - doesn't work for your compiler you might
02:28 - have to do something slightly different
02:30 - like it might be limits to H or
02:32 - something like that and if that is the
02:34 - case well I'm sorry but you might have
02:37 - to Google limits for your particular
02:40 - compiler by fitness will work on
02:42 - hopefully most so tight include limits
02:46 - and that's got to go below this is
02:49 - stream included and before this using
02:51 - namespace standard and you can n do
02:53 - stuff like this see out int underscore
02:58 - max endler get rid of that stray bracket
03:04 - there and let's run this and that will
03:07 - show you the maximum value that you can
03:09 - store in an integer which is this so
03:13 - let's let's put in here max into value
03:17 - there's also like a I need another kind
03:22 - of chevron thing here insertion operator
03:24 - there's also a minimum value that you
03:27 - can store in an int so let's put that in
03:30 - and that's int min so if you run this we
03:35 - can see the minimum and maximum values
03:37 - in that in that we can store in an int
03:41 - and interestingly and notice that
03:44 - they're not the same ones ending in for
03:47 - a tier and maximum value is ending in
03:50 - for seven so that they're not just
03:52 - they're not just it's not one's just not
03:55 - positive any others negative they're
03:56 - actually slightly different values off
03:58 - by one and I think we're going into the
04:01 - reason for that in a video are to down
04:04 - the line because it's worth knowing but
04:07 - and you have to bear in mind that you
04:10 - can't fit all values into this int and
04:12 - if you want to know what else is in so
04:15 - this in max it's like a constant that's
04:18 - stored in this file that we've included
04:20 - in our program here we'll talk about it
04:23 - more later but if you want to know what
04:25 - other values you can use in there go to
04:28 - a browser and if you search for
04:30 - or limits limits H then you can easily
04:38 - find a reference to this that will show
04:40 - you so what so we're using like in min
04:42 - and in max bother others here that you
04:44 - can also use so what if you want a
04:48 - bigger integer well you can change in by
04:52 - typing long you can say long int let's
04:57 - call this L value equals and some huge
05:00 - value that would not fit in an integer
05:02 - and let's do C out and L value and
05:07 - endler and let's see if that works so if
05:11 - we run this now so we build it and run
05:15 - it and yes they these values match if we
05:19 - chosen in here I don't think they would
05:22 - match let's try it because would be
05:25 - overflowing the amount and storing it in
05:27 - so this is not the same as this but if
05:30 - you use long than it works it's also
05:33 - shortened short int let's call it s
05:37 - value and you can fit quite small values
05:39 - than this I'm not sure exactly what if
05:43 - we look at this file here limit stage
05:45 - we've got short max here so this is the
05:49 - maximum value that you can fit in a
05:52 - short and int so let's go back to
05:56 - eclipse and we should be able to fit
05:59 - that in there and let's just do a see
06:02 - out on that I'm going to copy this one
06:03 - and put s value and we'll compile it
06:08 - project builds go to that warning let's
06:10 - let's just run it kind of just hit the
06:13 - Run button actually so yeah that works
06:16 - so most of the time you can just use
06:19 - like int and you don't really have to
06:20 - worry but if you've got a really big
06:23 - number you have to worry and sometimes
06:25 - you want save memory if you've got like
06:27 - a whole load of intz and then you you
06:30 - want to use a short value or there might
06:31 - be some other reason why you want to use
06:33 - it another thing you can do here is you
06:37 - can use the sizeof operator to find out
06:40 - how much memory these types actually use
06:43 - so we could say here size C out and size
06:49 - of an int let's say and then I'm going
06:56 - to type size of and this is this is
06:59 - technically an operator like this is an
07:02 - operator I guess equals is an operator
07:05 - never really thought about it to be
07:06 - honest
07:07 - plus is certainly an operator and this
07:09 - is also an operator although it's got
07:11 - multiple characters in it it's not just
07:13 - one symbol we call these things
07:15 - operators they kind of operate on data
07:17 - somehow and this one requires two
07:19 - brackets like that or that's how you
07:21 - most often use it and then we type int
07:23 - in there
07:24 - or you can also type a variable name in
07:26 - there like value or s value or whatever
07:29 - let's try this though and end learn and
07:33 - if we run this it's going to say sizeof
07:38 - in four what's that for well it's four
07:40 - bytes or in other words it's four times
07:42 - eight bits which of course is 32 bits so
07:46 - the maximum value you can fit in an inn
07:48 - is going to be roughly not quite exactly
07:50 - for reasons that we will get into two to
07:53 - the power of 32 it's going to be in that
07:55 - region are actually a little bit less
07:59 - than that probably I don't know okay
08:01 - yeah so and probably half as much as
08:04 - that come to think of it
08:05 - because basically we need one bit to
08:08 - represent whether it's signed on sign
08:10 - it's negative or positive but we will
08:11 - talk about that more and future in the
08:14 - future so basically at is 4 bytes
08:16 - allocated here for an integer and we
08:18 - could do a similar sort of thing with
08:21 - let's try it with short int and it's
08:24 - type here short int and see how many
08:27 - bytes are allocated for that so we'll
08:31 - run this and we see that the short int
08:33 - is just 2 bytes so the maximum number
08:36 - that you could represent in this would
08:38 - actually be 2 times 1/8 well 2 times 8
08:42 - is 16 and because we need 1 bit for the
08:47 - sign it's going to be 2 to the power of
08:49 - 15 I suppose if I'm losing you here
08:52 - don't worry
08:53 - I'm almost losing myself but it's just
08:56 - important to know that there are sizes
08:58 - to these thumb to these types and you
09:01 - can't sometimes you need a different
09:03 - size type it's the basic gist here you
09:08 - also can have for example you can use
09:11 - signed and unsigned with these as well
09:13 - like I can type on signed int let's call
09:20 - it you value equals and then it can only
09:25 - be positive call me negative because we
09:27 - could put a negative value here this is
09:30 - a signed in meaning we can have negative
09:32 - or positive values in it as a default as
09:35 - the default is assigned int but if you
09:37 - type unsigned in front of it then you
09:40 - can only have positive values in and
09:42 - that means you can store a bigger number
09:45 - in it because you don't need to use one
09:48 - bit internally to represent a negative
09:51 - or positive sign
09:54 - so sometimes I was a useful as well
09:57 - that's just output that it's not going
10:00 - to do anything very interesting but
10:02 - let's just running so with a signed int
10:08 - here at the top we've successfully
10:11 - represented a negative value you can't
10:14 - have a negative value in an unsigned int
10:17 - it's going to get gobbledygook that's
10:19 - the whole point of it so that's not
10:21 - matching this so if it's unsigned it can
10:24 - only be positive but you can fit a bit
10:26 - more into it so sometimes that's useful
10:28 - and a lot of compilers let you type just
10:32 - long instead of long int like that the
10:35 - fact for all I know they all do so often
10:40 - you see this long or just short by
10:43 - itself and so yeah we've covered integer
10:47 - types and we've looked at limit stock we
10:50 - look at look to the limits dot H file
10:52 - here this is actually an on your hard
10:55 - drive this property file called limit
10:56 - stage that we're bringing in with this
10:59 - kind of include symbol but don't worry
11:01 - about that we've looked at the size of
11:03 - so and it's you know even if you just
11:07 - watch this video is better than nothing
11:09 - because you're going to kind of and come
11:12 - to understand these different types as
11:14 - we carry on programming stuff in this
11:16 - course but if you can't be bothered it's
11:19 - definitely really good if you just
11:23 - practice declaring long and short on int
11:26 - signed and unsigned int try putting
11:30 - values into them see what happens if you
11:31 - put a value in it's too big full of
11:33 - tight try using size of to get
11:36 - information about the type and maybe
11:40 - Google Limit stage and just have a look
11:43 - at what's what's in there and that's
11:45 - good for the moment so this this will
11:47 - feel probably like a lot of information
11:48 - but and take a message here is really
11:51 - just that we've got long it long int or
11:55 - the reinsurance and they can also be
11:57 - signed and unsigned
11:58 - so you often need to pick the
12:00 - appropriate type for your particular
12:03 - program but most often you just use int
12:06 - so practice that if you can be bothered
12:08 - and in the next tutorial
12:11 - we're going to look at some more types
12:13 - or actually I might get into the details
12:16 - of exactly why the negative value of an
12:22 - in maximum negative value is not this is
12:25 - not it's the same but negative as the
12:27 - maximum positive value if you see what I
12:29 - mean and yeah and as always I'd say if
12:35 - it kind of goes over your head
12:37 - don't worry because we're going to get
12:38 - on to more practical stuff very shortly
12:41 - so do keep watching so that's it for
12:43 - this video and until next time
12:54 - you