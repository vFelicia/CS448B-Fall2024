00:16 - hello this is John from cave of
00:19 - programming calm in this tutorial we're
00:22 - going to look at the disk keyword in C++
00:25 - this is something that beginners often
00:28 - find very confusing but as we'll see it
00:30 - it's not that confusing really although
00:35 - you won't understand everything about it
00:38 - until you understand pointers which
00:40 - we'll get onto in a later tutorial
00:42 - but this tutorial will give us actually
00:45 - our first glimpse of a pointer so for
00:50 - this tutorial I've created this person
00:52 - class and I've just given it a string
00:53 - name and an int age we've got a default
00:57 - constructor that I've created here which
01:00 - doesn't do anything in the moment and
01:03 - I've also given it a two string method
01:06 - that just outputs it just returns the
01:09 - string some information about the class
01:12 - so let's actually add to the to this
01:17 - constructor here the constructor that
01:19 - takes no parameters which is all we've
01:21 - got here at the moment let's add to this
01:23 - some initialization of age which are set
01:27 - to nought and name which are set to an
01:30 - empty string now in my main function
01:36 - I've declared an object of this class
01:39 - and I can you see out with by calling to
01:42 - string just to output the information
01:44 - that to string returns there's nothing
01:47 - standard in C++ about this to string
01:49 - method it's just what I've chosen to
01:51 - implement and it says name is is blank
01:55 - here an a20
01:57 - for this object
02:00 - so let's let's create a parameterised
02:03 - constructor a constructor that takes
02:05 - parameters or arguments you can call
02:07 - them let's go to person dot age and
02:09 - declare a new constructor person and
02:12 - this time I'm going to say string name
02:16 - and well yeah let's call it name story
02:21 - let's say string name and int age and
02:25 - now I'm going to copy this prototype and
02:28 - save that and go to person dot CPP and
02:31 - we'll define we'll implement our
02:33 - constructor so person : : that's the
02:36 - class name and here's the implementation
02:38 - of the constructor now we've got a
02:41 - problem here because I'm passing in
02:44 - arguments as name and age and in person
02:48 - that age the actual variables that we
02:51 - want to set are already called name and
02:53 - age so the question is how could we
02:56 - differentiate these variables which are
02:57 - in scope here between these brackets
03:01 - from the instance variables up here
03:05 - which are also in scope because they
03:08 - exist for any method that belongs to the
03:10 - class how can we differentiate the two
03:12 - names and the two ages here let's first
03:15 - of all write some code that actually
03:16 - uses this before we implement it so I
03:19 - could say here person person 1 well
03:23 - actually let's make this person one I
03:25 - made this person 2 and will supply the
03:29 - name Bob and an age 42
03:33 - and then we can do a C out on person 2
03:36 - as well so that constructor doesn't do
03:39 - anything at the moment so we won't see
03:41 - anything new here but the program should
03:43 - run and again with a bit of luck not
03:49 - seeing anything there we go and we've
03:51 - got age 17 why is that that's because if
03:56 - we look at this
03:57 - I've called this constructor here but
04:00 - that constructor doesn't set values for
04:03 - age and name so we just got garbage in
04:05 - them at a moment
04:07 - now to actually refer to the name that's
04:11 - a part of the class and so will be part
04:16 - of the individual objects we can do this
04:18 - we can type this arrow so it's a hyphen
04:21 - and a right angle bracket to form an
04:23 - arrow and autocomplete is helping here
04:26 - let's say name equals name so here if I
04:32 - refer to name without any kind of
04:34 - qualification without anything at the
04:36 - beginning of it it's going to assume
04:38 - that I mean the local parameter name
04:40 - here it's going to assume that I mean
04:42 - the name which is most closely defined
04:44 - that's what we get if we just refer to
04:46 - name without anything before it if I put
04:50 - this arrow before name then C++ will
04:55 - know that I mean this name up here so we
04:58 - can set this name so this arrow name
05:01 - equal to name which is this one here and
05:04 - that's that achieves the same as if I'd
05:06 - call this like you know new name or
05:09 - something like that and I'd written name
05:13 - equals new name so this is the same as
05:18 - that let's get rid of that and move this
05:21 - back to main and we can do the same for
05:24 - age this arrow age equals age this is a
05:29 - very very common and very useful way to
05:31 - define a constructor it it alleviates
05:36 - the need for you to think of new names
05:37 - for these variables which are after all
05:39 - are exactly the same they have the same
05:42 - purpose ultimately as these the meant to
05:44 - correspond to these so just use for
05:46 - setting these values so and normally you
05:50 - get into the habit of creating
05:51 - constructors and also set methods
05:54 - they're very useful there you can use
05:56 - this in set methods and you just say
05:59 - this this arrow name equals name this ro
06:01 - age equals age and so on let's just see
06:05 - that working so I'll just run this and
06:07 - we've got here name Bob age 42 that's
06:10 - coming from this object here where were
06:12 - provoking the constructor
06:14 - that we just used now what actually is
06:17 - this well actually is this well as I
06:21 - said earlier you won't fully understand
06:24 - it until you understand pointers but
06:27 - let's just investigate it a tiny little
06:29 - bit here what this is is yeah it's a
06:33 - variable that contains the memory
06:36 - location of each individual object that
06:40 - you create so we call that a pointer
06:44 - this is a pointer variable and we can
06:48 - actually output the value of that let's
06:50 - try that let's do C out this endler see
06:57 - what we get and let's run now so the
07:02 - constructor runs but back here when I
07:04 - create the object and you can see it
07:07 - it's outputting this here so I'll put on
07:09 - this stuff let's change that a bit so we
07:12 - can say memory memory location of object
07:23 - I should do the trick and if I run this
07:27 - so it says memory location of object o X
07:30 - and this long string so what this is is
07:34 - 0 X as a prefix on a number means it's
07:37 - going to be specified in hexadecimal so
07:40 - we know decimal decimal is but a number
07:43 - system where you have 9 digits from 0 to
07:45 - 9 in each possible in each possible
07:48 - position there are nine patan what you
07:51 - have a one in nine possible digits that
07:53 - you can use we've seen binary where you
07:56 - have one of two possible digits in each
07:59 - position either 0 or 1
08:00 - this is hexadecimal whereas there are
08:03 - sixteen digits to choose from you can
08:05 - use in each position and then because
08:08 - we've only got 0 to 9 in our normal
08:10 - number system we are the extra digits
08:14 - ABCDE and F into hexadecimal that's why
08:18 - they're F sania but you can use like
08:21 - Google or something quite easily to
08:22 - convert this to
08:25 - to a decimal number if you want to but
08:27 - it is just a number and the X is if the
08:31 - edge is telling you that this is in
08:33 - hexadecimal not decimal or something so
08:36 - it's just a number and it specifies the
08:39 - actual location in a computer's memory
08:41 - the whole memory is numbered somehow and
08:44 - this is specifying where that object
08:47 - what bit of memory was actually
08:48 - allocated to put the this object in
08:52 - because clearly we need some memory for
08:54 - it to store for example the values of
08:57 - variables so when we crane this person
09:01 - object here at that point memory is
09:03 - allocated in the computer's memory at
09:06 - this particular position and that's what
09:09 - is stored in this in this disk variable
09:11 - we could have put this probably in in an
09:15 - int I suppose why not but it's it is a
09:20 - special variable called this but at the
09:23 - end of the days it sort of just stores a
09:26 - number but it also knows that this is a
09:29 - memory address and not simply any number
09:33 - we can actually see that so so here when
09:38 - particular object is created it's going
09:40 - to output its location let's let's
09:42 - create a new object actually let's
09:45 - create a new one here and say su-35 or
09:50 - something
09:50 - 25 doesn't matter let's run this of
09:53 - course we'll get like a new object that
09:55 - we've instantiated does something wrong
09:58 - there what did I do
10:00 - let's take a look redefinition oh yeah
10:03 - I've called it the person to again okay
10:05 - that's a person 3 let's run that so that
10:09 - the next object will of course be stored
10:11 - in a different memory location so
10:13 - they're close to each other maybe the
10:16 - next to each other but this is at this
10:17 - ends in 98 this ends in 50 then so we
10:22 - could find the locations of these
10:24 - objects in memory here in the main
10:27 - program if we wanted to and to do that
10:30 - let's say person 1 dot 2 string and
10:33 - let's say
10:34 - some punctuation memo memory location
10:41 - and to get the actual memory location of
10:44 - a person or any object in C++ you just
10:47 - preface it with a an ampersand like that
10:51 - so let's say person absent person one
10:54 - and well I read that and often is a
10:59 - person one it's not actually in that
11:01 - sign but that's often how I read it
11:04 - maybe that's just me
11:05 - but anyway yes probably better to say
11:08 - address person long because it's the
11:10 - memory address of person one let's still
11:14 - have a person too as well so let's just
11:16 - copy all this and paste that in person
11:22 - to actually will be more interesting to
11:25 - do person to in person three because
11:27 - there were running constructors that
11:31 - that actually have that this statement
11:33 - in it that were outputting this so let's
11:35 - do that
11:36 - so we'll look at person to in person
11:38 - three and for those two objects we're
11:40 - running the Constructors that actually
11:43 - output the value of this so let's let's
11:47 - run this what we find is that we've got
11:52 - memory location of object that's coming
11:53 - from here the actual constructor we've
11:56 - got one says it ends in at 98 and we see
12:00 - here from our main function that the
12:03 - address of it was actually person to is
12:09 - 98 so when we created person to think
12:14 - the constructor ran for that object and
12:16 - at that time when this construct around
12:20 - for that particular object and that
12:21 - object resided in this memory location
12:25 - and that's why this I'll put that
12:27 - particular memory location when we
12:29 - created person - sorry person 3 here
12:33 - they construct a run again and when it
12:36 - run again
12:36 - this had a different
12:37 - a different memory location because of
12:40 - course the person 3 is not in the same
12:42 - location is person too so then we output
12:45 - this this stuff here and then we output
12:49 - the locations of those two objects which
12:52 - of course we already know because we
12:54 - output it using this but we can see the
12:56 - two locations again down here that has
12:58 - same two locations as these and now I
13:02 - just I wanted to run through this just
13:04 - because it'll kind of sort of soften the
13:06 - blow a bit when you encounter and
13:09 - pointers later on we're going to look at
13:11 - all of this later on we're going to be
13:13 - looking at the this ampersand thing and
13:16 - memory addresses and stuff like that a
13:18 - bit more later on as well as more stuff
13:20 - besides but the thing that I'd recommend
13:23 - practicing for this tutorial is very
13:25 - simply create some classes and give them
13:30 - constructors and also try giving them
13:32 - set methods and give the constructors
13:35 - and set methods and parameters that
13:37 - you've got defined in your for your
13:40 - particular object but then instead of
13:42 - giving them different names in in your
13:45 - actual parameters to your set methods of
13:48 - oil constructors give them the same
13:50 - names as the values that and they use to
13:53 - assign to and then use this to
13:56 - differentiate too so just practice doing
13:58 - what I've done here basically in a set
14:01 - method and in a constructor try typing
14:04 - stuff like this our own name equals name
14:06 - and that will help although it's a small
14:09 - thing that help fix it in your memory
14:10 - and it will also help a lot later on
14:13 - when you encounter pointers just just to
14:15 - already have some familiarity working
14:18 - with this arrow notation and ask for the
14:20 - rest if the stuff about memory locations
14:23 - went a bit over your head then don't
14:24 - worry about it because we're going to
14:26 - revisit this later on but it's good to
14:28 - already be acquainted with it at this
14:31 - stage so that's it for this tutorial
14:33 - and until next time
14:35 - Cody
14:47 - you