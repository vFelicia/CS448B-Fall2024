00:06 - [Music]
00:17 - hello this is John from Cave of
00:20 - programming. comom in this tutorial uh
00:23 - in C++ for complete beginners we're
00:25 - going to take a look at headers and
00:28 - prototypes so we've seen that you can
00:31 - define a function like this let's put it
00:34 - above the main function here and let's
00:36 - type main uh sorry void do
00:40 - something uh just to give it a name and
00:43 - we'll we'll output see
00:46 - out hello in
00:49 - there so this is just a normal function
00:51 - with just one line of code in it and in
00:54 - the main function here we can call that
00:57 - function here we've defined it we've imp
00:59 - implemented it and now we can call it to
01:02 - actually make it run let's type do
01:05 - something and we could call it as many
01:07 - times as we want in fact let's call it
01:09 - twice just um for no reason and if I run
01:13 - this now we should see a couple of Hells
01:16 - there so I've invoked this this function
01:19 - twice I've called it twice so it's run
01:22 - twice but we've seen that if you were to
01:26 - Define this function below main like
01:28 - this if we now try to build the
01:31 - project it doesn't work because the
01:35 - compiler reads this function down line
01:38 - by line from the top and when it gets to
01:41 - here it hasn't seen
01:44 - this now uh that's that's quite
01:46 - inconvenient and we can actually fix
01:48 - this by um by putting what we call the
01:52 - Prototype of the function above main so
01:56 - what that looks like is here we see that
01:58 - the the line of the function function
02:00 - that defines what parameters it accepts
02:03 - none in this case and what it returns
02:06 - which is nothing in this case and that's
02:09 - that information is all contained in
02:11 - this bit here and that's all the
02:13 - compiler really needs to know in order
02:15 - to allow you to call the function so
02:17 - what we can do is above main we can type
02:20 - void do something round brackets so
02:24 - start defining the function just as
02:26 - normal but then stop at this point where
02:29 - you would normally open open the curly
02:31 - brackets just put a semicolon instead
02:34 - and this this bit of the function is
02:36 - called the Prototype and it shows um
02:40 - what how the how the function operates
02:42 - uh it shows what it returns and what it
02:45 - accepts which is nothing in both cases
02:48 - with that information the compiler can
02:50 - then say okay you're allowed to call
02:51 - that function and I trust you that the
02:54 - implementation will be provided
02:56 - somewhere else in this case the
02:58 - implementation is down here
03:00 - so this line by adding a prototype here
03:04 - we can um this will actually make this
03:08 - main function compile now so let's do
03:10 - that let's go to build project and we
03:13 - see that now the errors go away so I I
03:15 - can now run
03:17 - this now we're going to as we're going
03:19 - to see later on it's common to Define
03:22 - functions in uh separate files all
03:25 - together in fact later on we're going to
03:26 - see that uh you often bundle function
03:30 - together with data in what we call a
03:32 - class but we haven't seen that yet and
03:35 - groups of related functions basically
03:38 - are typically put in their own
03:42 - file uh so what you need is to have all
03:46 - the um prototypes of related functions
03:49 - in some file which you can then include
03:52 - in this file so let's take a look at a
03:56 - simple example of that in this tutorial
03:58 - just to get started with this what I'm
04:00 - going to do is um let's click the source
04:04 - folder here in the project right click
04:07 - it and go to new and I'll go to in fact
04:11 - I'll go to new other and if we scroll
04:13 - down here under the C++ section we've
04:15 - got header file let's select that and
04:18 - I'm going to call this I'll just give
04:20 - this a name I'll call it utils
04:23 - Doh so the kind of file that I'm
04:25 - defining here should start should end
04:28 - with a h and we'll click finish and
04:31 - notice um we've got some stuff in here
04:35 - that has automatically been added by
04:38 - Eclipse so the file that we're actually
04:40 - typing in here you'll notice ends in CPP
04:44 - it's just a text file and this new kind
04:46 - of file that I'm showing you here ends
04:48 - in h but again it's just a text file
04:51 - what we can now do is take this void do
04:54 - something cut it out from here go to
04:57 - utils Doh and paste it
05:02 - in then I can save that so I'm actually
05:04 - pasting it you'll see there are lines
05:06 - here there's a line that says Define and
05:07 - there's a line that says end if and I'm
05:09 - pasting it between these two
05:12 - lines so now we go back to prototypes
05:15 - and includes. H and at the top of the
05:17 - file here let's put it um below the line
05:21 - that says include I stream but above the
05:24 - line that says using namespace standard
05:27 - let's put in another include and I'm
05:29 - going to type uh hash or I think this is
05:32 - called a pound sign in America
05:35 - include and then in double quotes I'm
05:38 - going to put utils Doh and I'm going to
05:42 - save that build the project and now
05:45 - you'll notice that it runs as before so
05:47 - I can run it and it says
05:49 - hello so the way this works is that um
05:54 - this this command actually says to get
05:58 - this file here
06:00 - and literally paste it in to this file
06:02 - here uh in a sort of copy of the file
06:05 - before it's compiled so what the
06:08 - compiler will actually see is this file
06:10 - but where you see
06:12 - include uh the something called the
06:14 - pre-processor will have gone away and
06:17 - found the files mentioned here and
06:19 - literally pasted them in to this file
06:22 - here so what this actually sees now uh
06:26 - what the compiler actually sees well
06:28 - instead of this line will be the same
06:32 - file but with this line in
06:35 - it so there there are a few things to
06:38 - mention here um one is that I've used
06:41 - double quotes here but here the include
06:43 - has angle brackets around it this is
06:45 - also a file uh just called iostream used
06:49 - to be called iostream Doh and on some
06:51 - platforms it still is but on on for
06:55 - various compilers it's just been renamed
06:57 - to miss off the. h just cuz I suppose it
07:00 - looks nicer basically the angle brackets
07:05 - uh well there's no absolutely certain
07:07 - and consistent meaning to the difference
07:10 - between double quotes for an include and
07:12 - angle
07:13 - brackets but uh in general the kind of
07:16 - idea is the angle brackets refer to a
07:19 - file that's in a standard location which
07:22 - you compiler will know about so this is
07:24 - going to be in some special location on
07:26 - your disc that the compiler will
07:28 - automatically look at double quotes uh
07:32 - are usually used for files that are
07:34 - actually included in your project like
07:36 - this utils Doh that I just
07:38 - defined so this this file is in some
07:41 - standard location this one in double
07:43 - quotes instead of angle brackets is
07:45 - actually in my project but in practice
07:49 - the angle brackets and double quotes May
07:50 - well be interchangeable for your
07:52 - compiler it actually doesn't matter too
07:54 - much A lot of the time uh nevertheless
07:57 - it's not bad to stick to the convention
08:00 - since at least the double quotes clue
08:01 - you in that this is a a file you've
08:04 - defined yourself in your project you'll
08:07 - also notice that in u.h here um we've
08:10 - got these if not def Define and end if
08:15 - statements now the way the way this
08:17 - works is when your program is built
08:19 - there are several stages to it and the
08:22 - very first stage is that something
08:23 - called the pre-processor runs and the
08:26 - pre-processor looks for statements
08:28 - beginning with these hash
08:31 - symbols and uh it follows whatever
08:33 - commands you specify in in these kind of
08:36 - hash um symbols and the most common hash
08:41 - pre-processor we call it a pre-processor
08:43 - directive the most common pre-processor
08:46 - directive are these include directives
08:49 - here so the pre-processor will run and
08:52 - it will process the files somehow uh in
08:55 - this case replacing these lines with
08:58 - this with the content of the specified
09:00 - files and that's why these lines don't
09:02 - end in semicolons because they're not
09:04 - C++ statements they're not statements in
09:07 - the C++ language to the C++ compiler
09:10 - they're actually uh statements to a a
09:13 - kind of separate bit of software that
09:15 - runs called the pre-processor which will
09:18 - run before the actual compilation the
09:21 - actual transformation of the text file
09:23 - into binary code before that occurs
09:26 - before that is actually actually happens
09:28 - the pre-processor
09:31 - runs and here and these are more
09:34 - pre-processor commands so again they
09:35 - don't end in
09:37 - semicolons and this is just saying
09:39 - Define this symbol in other words kind
09:41 - of memorize this symbol and uh this
09:44 - symbol it could be anything basically uh
09:47 - in this case it's utils uncore
09:50 - hore um that's that's purely to create
09:53 - some sort of unique symbol um for this
09:56 - file it could be you know anything at
09:58 - all really
09:59 - but um this is kind of a convention that
10:02 - you use the name of the file underscore
10:05 - H because it's utils Doh and then it's
10:08 - it's added another underscore on the end
10:10 - of it just to make it even more unique
10:13 - really so it's saying Define this symbol
10:15 - in other words take note of this symbol
10:17 - that's an instruction to the
10:20 - pre-processor uh sorry here yeah here
10:22 - it's saying if if not def so if this
10:24 - symbol is not defined then Define it and
10:28 - do all this stuff and then end
10:32 - if and uh what this is actually aimed at
10:36 - doing is often in your program you'll
10:38 - end up
10:40 - including uh the same file into multiple
10:44 - different files which will all be
10:45 - combined together when your program is
10:48 - actually
10:50 - compiled and you can end up with
10:52 - multiple includes for the same include
10:54 - file and that would cause you problems
10:56 - if you had that and this is is just a
10:59 - way of ensuring that the contents of
11:01 - this file cannot be included twice
11:04 - because the pre-processor runs it says
11:06 - okay the first time if this symbol is
11:08 - not defined Define it do all this and
11:12 - that's then the end of the if if this
11:15 - Pro if this symbol is defined it says
11:18 - okay I see this symbol is already
11:20 - defined and we're only supposed to be
11:22 - doing all this if it's not defined if
11:25 - not defined so therefore if this symbol
11:27 - is defined when when the utils Doh is
11:31 - included for the second time then we
11:34 - will not do any of this we only do this
11:36 - if it's not
11:38 - defined well uh don't worry if that
11:41 - loses you a bit we're going to be we're
11:43 - going to be getting used to this because
11:44 - we're going to be seeing more of it um
11:47 - but the thing to do for this tutorial is
11:48 - just practice first of all Define a
11:50 - function and just call it in your main
11:54 - function and then try moving it below
11:56 - your main function and uh try try
11:59 - putting the Prototype above so that your
12:01 - program then compiles as I did earlier
12:03 - in this video and if you like you can
12:05 - take one of the um projects from pre a
12:08 - previous tutorial where we Define
12:10 - multiple functions and then move the
12:14 - functions move the definitions of them
12:16 - below your main function and then add
12:18 - the prototypes up here to get it to
12:20 - compile see if you can get that to work
12:23 - and then finally move the prototypes to
12:25 - their own uh header file and if your ID
12:29 - e doesn't create these if not de things
12:32 - then Define them yourself so it it
12:35 - doesn't it's not as important at this
12:37 - stage to really thoroughly understand
12:40 - what these actually do as it is to get
12:42 - used to typing them um in fact you you
12:45 - will probably never really need to use
12:48 - these pre-processor directives a whole
12:50 - lot you'll only probably need to use
12:53 - them in this context so if you can
12:55 - memorize them and you just have a rough
12:57 - idea of what they're there for
12:59 - uh namely to prevent multiple includes
13:01 - of the same header file then that's
13:04 - that's good enough so try doing what I
13:07 - just did basically try using a header in
13:10 - your program and later on we're going to
13:12 - be using headers a lot more and we're
13:14 - going to be uh using multiple CPP files
13:18 - as well to separate out our code into
13:21 - multiple files which is going to make it
13:23 - a lot easier to work with so I'll I'll
13:26 - leave it there for this tutorial there's
13:27 - more to be said about this and we may
13:29 - well cover um this a bit more next time
13:33 - but I think that's enough for now so
13:35 - until next time happy
13:37 - [Music]
13:53 - coding