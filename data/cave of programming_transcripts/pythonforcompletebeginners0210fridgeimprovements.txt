00:00 - in this video we're going to look at a
00:02 - couple of improvements we can make to
00:03 - this program just using the syntax that
00:06 - we have already seen so one problem is
00:10 - that we've got output statements print
00:13 - statements kind of sprinkled throughout
00:15 - the program now incidentally when we
00:18 - read text from the console that the user
00:21 - has entered we say we're reading from
00:24 - standard in and when we write texts like
00:26 - this we say we're writing to standard
00:28 - out standard in and standard out or we
00:32 - call them input and output streams they
00:34 - kind of streams of data that deal with
00:37 - what happens on a console we're writing
00:39 - to standard out here in multiple places
00:42 - but supposing we wanted to change this
00:44 - program so that for example it wrote the
00:46 - output to a file instead of writing the
00:49 - output to standard out then we have to
00:52 - find all the print statements and change
00:54 - them so it's not a good idea in general
00:56 - to sprinkle print statements throughout
00:58 - your program now if I'm just writing a
01:00 - small program for myself I generally
01:03 - won't worry about that at all but if
01:06 - this was going to be quite a large
01:08 - program let's say or a program that I
01:10 - was Distributing to other people then I
01:13 - probably would think about what I could
01:15 - do and one thing we can do is create a
01:18 - new variable here let's call it
01:22 - status and I could set it initially
01:25 - equal to whatever the default value for
01:29 - status should be so we could set it
01:32 - equal to fridge okay we could say that's
01:35 - the default status of the
01:37 - fridge but if we look at what the
01:40 - default clause is in this if
01:44 - block the default is really fridge is
01:46 - broken so we try all the other
01:49 - conditions first and if none of them
01:52 - work out we say the fridge is broken so
01:55 - really we could say
01:58 - here fridge is is broken like this
02:01 - that's the default and then we're going
02:03 - to check and see if anything else is
02:08 - true which hopefully it
02:11 - is and then we can change these print
02:13 - statements so I can say status
02:17 - equals fridge is too cold and I'm going
02:20 - to do that with all the others I'll just
02:22 - copy that to make it a bit
02:24 - easier let's paste these
02:27 - in and get rid of the trailing bracket
02:31 - now and then finally we can put the
02:34 - print statement just in one place here I
02:37 - can say print
02:41 - status let's see how that
02:44 - works I'll run the
02:48 - program and enter the fridge temperature
02:50 - let's try seven fridge is broken so it
02:53 - works as before as you can
02:56 - see but the advantage is now we've only
02:59 - got got a print statement we've only got
03:01 - some kind of output statement in one
03:04 - place in general in programming we want
03:07 - to try to
03:08 - separate code that interacts with the
03:10 - user what we call the user
03:13 - interface with code that is just dealing
03:16 - with pure
03:17 - logic you can stress about that too much
03:20 - in a small program but in a larger
03:22 - program that becomes an important
03:24 - principle you try to keep the user
03:27 - interface code or code that interacts
03:29 - with the user separate from the other
03:31 - code as much as you can in a large
03:34 - program that code would be in its own
03:37 - set of files rather than being mixed up
03:40 - with the rest of the code but I'm not
03:43 - going to adhere to that in this course
03:45 - particularly because we are going to be
03:47 - dealing with relatively small programs
03:49 - here even so this is an improvement to
03:52 - have the printing to standard out just
03:55 - in one place another thing we could do
03:57 - is we could think about well what
03:59 - happens if for example we want to
04:01 - localize the program to a different
04:03 - local like we want
04:05 - to write a version of the program in
04:08 - Spanish then we've got this problem as
04:10 - before that we've got strings in English
04:12 - sprinkled throughout the code so we
04:15 - could create some constants to deal with
04:17 - that remember a constant is just a
04:20 - variable that we don't intend to change
04:23 - so it's not like temperature where we
04:26 - assign a value to it and then here we're
04:28 - assigning a different value to
04:29 - temperature with a constant we wouldn't
04:32 - do this we wouldn't ever change the
04:34 - value of it and to signal that it's
04:38 - constant we give it uppercase letters
04:41 - now to make it clear that these
04:42 - constants all belong to the same part of
04:46 - my program that they all perform a
04:48 - similar function let's give them some
04:50 - kind of common
04:52 - prefix so maybe f for fridge or s for
04:55 - status or something or even status
04:57 - underscore like that so let's say status
05:01 - uncore
05:04 - broken equals
05:09 - this and then we'll have
05:13 - status okay what else are we going to
05:17 - need here we're going to need
05:20 - status
05:22 - Cod and
05:25 - Status
05:27 - warm I think that's it okay Cold War
05:30 - broken okay so this is going to be set
05:34 - to
05:37 - this I put spaces in they're not
05:40 - necessary but they do make it easier to
05:42 - read if you use kind of nice and
05:44 - consistent
05:46 - spacing and Status cold so we set that
05:49 - equal to
05:52 - this status
05:55 - warm we set that equal to
05:58 - this
06:00 - now here we can use status
06:06 - broken and here so there we can use
06:11 - status
06:14 - C then we've got status
06:18 - okay and Status
06:21 - warm so I put the names of these
06:24 - variables in uppercase letters to
06:27 - indicate that they should be held
06:29 - constant they should be thought of as
06:32 - constants and we've also
06:34 - got status broken down here at the
06:37 - moment but we are going to fix that
06:41 - so if we run this now it's going to work
06:44 - just the same as
06:46 - before but the advantage is we've got
06:48 - all the strings in one place well apart
06:50 - from this one but at least we've got
06:53 - the strings that give fridge statuses
06:56 - all in one place so they're easy to
06:59 - change now if we look at this this else
07:01 - isn't really doing anything useful
07:03 - anymore because status by default is set
07:07 - to status broken right so if we don't do
07:11 - any of these it will still be set at
07:14 - status
07:15 - broken so we can actually get rid of
07:18 - this and it will work just the same as
07:22 - before let's try
07:25 - it so three we get fridge okay minus one
07:31 - fridge is too cold let's try
07:35 - five too
07:37 - warm and seven fridg is broken so from a
07:42 - point of view of maintaining the code
07:45 - this is something of an improvement I
07:48 - would
07:49 - say and if it seems more
07:52 - confusing and even if it doesn't it's
07:54 - worth typing it out writing it out in
07:57 - this form yourself and checking that it
08:00 - does work for yourself so as we go along
08:03 - I want to give you some tips on how to
08:05 - structure your programs and you know
08:08 - what's considered best practice in
08:09 - software engineering and so on but I
08:11 - won't always adhere to them just because
08:14 - we're often writing small demonstration
08:17 - programs here and in a really big
08:19 - Serious Program we could put these
08:21 - constants in their own file so that they
08:24 - really are all in one place and there
08:27 - are other ways of dealing with them
08:30 - other than just setting constants to all
08:31 - of these values as well but we'll look
08:33 - at that sort of thing later
08:36 - on hello you've been watching a free
08:39 - sample from my Python and machine
08:41 - learning for complete beginners course
08:44 - I'm uploading enough videos from the
08:46 - start of the course to get you started
08:48 - with python and machine learning the
08:50 - full course is absolutely massive if
08:52 - you're interested in it please click the
08:54 - link in the description the complete
08:57 - course covers not only basic p python
08:59 - but also some fairly Advanced python
09:02 - even some desktop programming stuff and
09:04 - then goes on to machine learning and
09:07 - artificial intelligence until next time
09:10 - happy coding