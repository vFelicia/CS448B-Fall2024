00:17 - hello this is John from cave of
00:20 - programming calm in this tutorial we're
00:22 - going to look at do-while so let's take
00:25 - a look at what I do while loop is and
00:27 - does I'm going to declare a variable
00:30 - here let's say int value equals seven
00:34 - and I'm going to type du and then open
00:37 - angle open curly bracket and after the
00:40 - closing curly bracket that Eclipse just
00:41 - added here I'm going to type while
00:44 - keyword while round brackets and
00:47 - semicolon and in the round brackets I'm
00:50 - going to put a condition so let's say
00:52 - while value is less than eight and let's
00:56 - put C out in here let's say C out hello
01:00 - I'll do and now the difference between a
01:04 - while loop and a do-while loop is that
01:06 - the do-while loop and always executes
01:09 - the stuff in between the curly brackets
01:11 - at least once because it doesn't check
01:13 - the condition until the end so if we run
01:16 - this it's going to be like an infinite
01:18 - loop so it's just going to output hello
01:21 - over and over again if we change this
01:23 - condition so that it's false that's a
01:25 - value less than 5 which is false we're
01:29 - still going to get one hello when I run
01:31 - this so we get one hello because it
01:34 - executes this code then it checks the
01:35 - condition and it will do the loop again
01:37 - if the condition is true but if the
01:39 - condition is false then you're still
01:42 - going to get that first iteration of the
01:44 - loop because it's not checking the
01:46 - condition until the end let's see how we
01:49 - can use this in a new little program I'm
01:52 - going to declare but I'm going to create
01:54 - a program here that asks the user to
01:56 - enter their password over and over again
01:58 - until they enter the right password
02:00 - let's say here's string password equals
02:04 - hello
02:07 - and now this is actually a value that I
02:10 - don't want to change ever in my program
02:12 - so I'm going to type Const in front of
02:15 - string here and what that does is it
02:18 - means that later in the program the
02:20 - value can't be reassigned so I can't do
02:23 - this later on without Const I could do
02:26 - this I could change the value later on
02:27 - but with Const I can't compile it if I
02:32 - try to reassign it it won't compile so
02:34 - let's build this and you see we get an
02:37 - error so if you have a value it's not
02:40 - going to change in your variable in your
02:42 - program
02:43 - make it Const because then it can't it
02:48 - can't be changed later on in the program
02:49 - and with big programs that can really
02:51 - help get the bugs out of them and
02:53 - because then you you know that this
02:55 - value is definitely not going to change
02:57 - anywhere you're not going to change it
02:58 - by accident and although I said that
03:01 - variables should be declared as close as
03:04 - possible to where you use them with cons
03:06 - you often declare them somewhere near
03:09 - the top of the file or near the top of
03:13 - the subroutine or whatever just because
03:15 - it's then you see all your constants in
03:17 - one place and you can change them easily
03:20 - okay so we've got our password and let's
03:24 - say C out enter your password let's put
03:30 - a little and arrow thing in a little
03:33 - lerm actually a greater than sign just
03:35 - to make it look like a prompt and learn
03:38 - and then I'll declare a string together
03:41 - user inputs let's call that input and
03:43 - let's just do a C and get from input
03:47 - and we'll have an if to check that so
03:49 - I'll say if if input equals password
03:56 - then we can say something else we can
04:00 - say something else let's just copy this
04:03 - C out save a bit of time paste it in
04:06 - here and here and so if the passwords
04:08 - right our save password accepted and if
04:13 - it's wrong I'll say access denied din ID
04:20 - so let's run this and check that it
04:22 - works before we introduce the loop here
04:24 - so I'm going to build it build project
04:27 - check it builds ok and run it and enter
04:32 - your password so if I type garbage
04:33 - access denied and if I type below
04:37 - password accepted maybe I'll just change
04:40 - that to a flush because then we can type
04:43 - on same line in the console as so if we
04:48 - use the while loop to try it we want to
04:50 - ask for the password over and over again
04:52 - until the user gets the right password
04:53 - if I used a while loop to do that let's
04:56 - let's see how that would look so I'm
04:58 - going to say while input is not equal to
05:01 - password like this I want to say
05:08 - access denied if it's not equal to the
05:10 - password if they haven't entered the
05:12 - right password and then after that I'm
05:15 - going to have to ask them for their
05:16 - password again and get them to enter it
05:22 - again so like this and now I want here
05:27 - and I don't want to declare another
05:29 - string inside here sit C++ so let me do
05:31 - this normally you can't have two
05:33 - variables at the same name but if one of
05:36 - the variables is inside another pair of
05:38 - brackets like this this variable will
05:41 - actually be different to this one we say
05:42 - that this is masking this one and this
05:47 - sorry this only exists within these
05:50 - brackets while this will exist within
05:52 - these brackets but here we can't
05:56 - actually access this anymore because
05:58 - it's masked by
05:59 - anyway that's a little diversion I just
06:01 - wanted to kind of mention that we say
06:03 - that scope of this variable is these
06:05 - brackets and the scope of this variable
06:07 - is these brackets that's where these
06:09 - variables existing can be used but we
06:11 - don't want to do that really anyway so
06:12 - I'm just going to get rid of string
06:14 - import here because we can just use this
06:16 - one variable to get the input every time
06:18 - once we declared it so we're going to
06:22 - ask for the password and we're going to
06:24 - check it and say password accepted or
06:27 - access denied and then well while the
06:30 - password is still not correct we're
06:33 - going to ask them to enter it again and
06:34 - that's let's put yeah we can get rid of
06:40 - access denied here I suppose so we've
06:43 - already set out sis denied there but
06:44 - then again probably probably the best
06:47 - thing to do here is just get rid of that
06:48 - else so yeah so we asked for the
06:50 - password we get a password if it's
06:53 - correct we can say accepted otherwise we
06:56 - go into the loop the loop says access
06:58 - denied
06:58 - ask for the password again and if then
07:02 - if they enter it correctly we'll go on
07:04 - to the rest of the program if they don't
07:06 - answer it correctly then we're going to
07:08 - do this loop again because this
07:10 - condition will be true so one one thing
07:14 - we could do actually here is just to
07:15 - move this to the end of the loop here so
07:19 - we could get rid of that because this
07:23 - loop isn't going to finish until the
07:24 - password is correct and when the
07:26 - password is correct then we can just
07:28 - output password accepted so just by
07:30 - thinking about it a little bit we can
07:32 - make it look a bit cleaner and go to
07:34 - five let's let's check if that works so
07:37 - I'm going to run this I think I got that
07:39 - right
07:39 - and that's type some garbage access
07:42 - denied
07:43 - more garbage access denied etc and if
07:45 - it's I hello then it works it's worth
07:49 - checking that it works when you just
07:50 - enter the right password immediately as
07:52 - well let's try that and immediately
07:54 - enter hello password accepted
07:59 - so this this program works but it's it
08:03 - doesn't look that good because we've got
08:04 - some repeated code here we've got enter
08:07 - your password twice we've got them we're
08:10 - getting the input in two different
08:12 - places here as well
08:14 - and that's that's not really healthy
08:18 - would like to avoid repeated code and we
08:21 - can do that what it'd do while the the
08:23 - key thing here is that while it's only
08:25 - going to execute if the password is not
08:27 - correct but we want we want the loop to
08:30 - execute once anyway to get the password
08:32 - in the first place we need the loop to
08:34 - execute once without checking the
08:37 - condition so that the user has a chance
08:39 - to enter the password and then would be
08:41 - able to do away with this stuff let's
08:43 - see how that would work so we'll change
08:45 - this to a do-while will say do open the
08:49 - curly bracket close the curly bracket
08:51 - the condition I'm just going to copy
08:54 - from there and that goes after to do
08:56 - here and then within here so I need them
09:00 - I need the wild keyword as well before
09:03 - the condition at the end and within
09:05 - these brackets we're going to say enter
09:08 - your password and we're going to get the
09:10 - input let's copy this and paste it in
09:15 - just do format there auto format and
09:19 - then then we're going to have to check
09:23 - to see if the input is incorrect I'm
09:27 - going to have to check again because we
09:29 - want to output a message if it's not
09:31 - karelis a while in if input it's not
09:34 - equal to password I'm kind of going
09:36 - through this fully rapidly but I'm going
09:38 - to just go over again in a minute then
09:40 - we can say access denied
09:42 - so it's a bit of a mess at the moment
09:44 - but now we can get rid of all this stuff
09:46 - and we can get rid of this now the
09:52 - string we actually have to declare up
09:55 - here because if we declare it in here we
09:58 - couldn't access it here so let's let's
10:02 - get rid of this one and I think this
10:05 - looks like a good program let's go to
10:07 - project build project
10:09 - and run in chatter that works so now
10:15 - well I'm not seeing any output here but
10:22 - I should do right it looks good oh yeah
10:26 - I've got to get rid of this as well
10:28 - apologize yeah that's sorry the CN let's
10:31 - get rid of that and I'm just using
10:35 - command D or I think it's ctrl D in
10:37 - Windows to delete a blank line they're
10:39 - just quiet and you shortcut okay let's
10:41 - let's run this see if this works
10:43 - yes and I'm going to enter
10:48 - let's try entering the right password
10:49 - immediately so it works and let's try
10:52 - giving it some bad passwords access
10:55 - denied access denied access denied
10:58 - hello password accepted so by using the
11:03 - do-while loop we've we've avoided
11:05 - duplicating some code and so just just
11:09 - to quickly take this on the top so we've
11:10 - got our password constant here then we
11:13 - declare a string which we're going to
11:15 - use to get input and then we enter the
11:17 - do-while block so this is going to
11:19 - execute at least once and first thing
11:23 - does it say enter your password then it
11:25 - gets the password then it checks to see
11:29 - if the password is wrong and the reason
11:30 - for that is I don't see how we can avoid
11:34 - having an extra little check in here
11:35 - because we just need to output this
11:37 - message saying access denied if the
11:39 - password is wrong if the password is
11:42 - wrong then this condition is true input
11:45 - is not equal to password and then we'll
11:47 - good we're going to do the loop again
11:48 - we're going to keep doing that as long
11:50 - as this condition is not true if the
11:52 - condition is false then it would only
11:55 - execute the loop once if it's
11:58 - immediately false if the password is
12:00 - correct after that after we've output
12:02 - this the first time then we wouldn't
12:06 - repeat the loop but every time that this
12:08 - is it's true we are going to do that
12:11 - loop again and when we finally get the
12:13 - right password we will then leave the
12:16 - loop so if we do all this stuff under
12:18 - these of final types the right
12:20 - password and this is then false input
12:24 - not equal to password is false because
12:26 - it is equal then finally we say password
12:29 - accepted so to practice this I'd
12:33 - recommend doing pretty much what I've
12:35 - done in the video because that's really
12:37 - good practice first just create a really
12:40 - simple do-while loop make up an example
12:42 - with an integer or whatever and just
12:43 - chatter you can get that to work you
12:45 - might finally forget the semicolon or
12:48 - you get something in the wrong place so
12:50 - get it working and then I'd recommend
12:52 - trying to write this program just using
12:58 - a while loop and see how that works it's
13:01 - really good practice write a program
13:02 - that asks for the user's password and
13:05 - keeps asking until they finally give
13:07 - give give you the right one and do that
13:09 - using a normal while loop then change it
13:12 - to do while and see how much of that
13:14 - extra code you can get rid of so that's
13:18 - it for this tutorial I'm not sure what
13:19 - we're going to look at in the next one
13:21 - there's loads still to do possibly the
13:23 - switch statement or something but but
13:26 - we'll see okay so join me again next
13:28 - time and until then happy coding
13:36 - you