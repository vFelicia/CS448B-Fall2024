00:00 - in this video we're going to take a look
00:01 - at the ID built-in function in Python
00:05 - and I want to go over function arguments
00:08 - a little bit more because it's a really
00:10 - important topic so let's create a main
00:14 - function we'll have def Main and then I
00:17 - want to call Main down
00:20 - here now notice I've got an error here
00:23 - I've got an error because I've not
00:24 - filled in any body for main yet but I
00:27 - don't actually know what I want to write
00:29 - yet well I know it but it depends on
00:32 - stuff that I haven't yet written so to
00:35 - get rid of that error I can just write
00:37 - pass here pass is a keyword which
00:40 - basically says look this thing that I've
00:43 - created whether it's a for Loop or an if
00:45 - or a function or whatever it does have a
00:47 - body the body just doesn't do anything
00:50 - so the pass keyword actually doesn't do
00:52 - anything but in situations like this it
00:54 - can allow you to get rid of Errors by
00:57 - allowing you to fill in the body of some
01:00 - statement now let's create a function
01:03 - called greet which
01:06 - accepts some string
01:09 - name and then in here I'm going to say
01:12 - hello and then plus
01:16 - name now in main I can get rid of this
01:19 - pass and I can call greet let's say
01:23 - greet John or whatever your name happens
01:27 - to be so if I run this
01:32 - it says hello John now if we look at
01:34 - this function we know that it expects
01:37 - one argument because there's just one
01:41 - variable listed here and it's not
01:43 - obvious from looking at this but in fact
01:47 - this argument has to be of type
01:50 - string because here we're concatenating
01:52 - it to another string so it has to be a
01:54 - string but you can't tell that from
01:56 - looking at the definition here so what
01:59 - I've done is I passed in a string
02:01 - literal so we call this a function
02:03 - argument as I've said
02:06 - previously this we actually call a
02:09 - function parameter if you think about
02:12 - for example a synthesizer a musical
02:15 - instrument that makes sounds
02:17 - electronically that will have typically
02:19 - loads of dials on it and those dials we
02:22 - say they're adjusting parameters they're
02:24 - changing things that alter the sound
02:28 - that the instrument makes and in the
02:30 - same way function parameters alter what
02:33 - the function does so we have one or more
02:35 - parameters in the function header here
02:38 - in this case it's just one they are
02:40 - simply variables and then we pass
02:42 - arguments to supply values to those
02:45 - parameters when we call the function so
02:48 - in a nutshell this is an argument and
02:51 - this is a parameter now we've seen that
02:53 - this can itself be a variable so let's
02:55 - create a variable down here name equals
02:59 - some name
03:00 - and then pass that
03:03 - instead this does the same thing as
03:05 - before it says hello John in this case
03:07 - but this variable is not the same as
03:10 - this variable as we've seen the scope of
03:13 - this variable is the function body here
03:16 - that's where it exists the scope of this
03:19 - variable a different variable that just
03:22 - happens to have the same name is the
03:24 - body of this function here but they are
03:26 - two different
03:28 - variables how however they are both
03:30 - referring to the same string and we can
03:33 - prove that using the ID
03:35 - function let's do here print ID round
03:41 - brackets name what does this do well
03:44 - every object in Python has a unique ID
03:48 - which identifies it and so this is
03:51 - giving us the unique ID of this string
03:55 - object here which this name variable
03:58 - here refers to
04:00 - let's run this and we get this ID now
04:03 - here I could do the same thing let's
04:05 - copy this and do print ID of
04:10 - name and we see it's the same ID why is
04:13 - it the same ID because both of these
04:16 - variables refer to the same string
04:19 - object string objects in Python are
04:22 - actually what we call
04:24 - immutable that is you can't change a
04:27 - string once it's been created you could
04:30 - replace it with another string but you
04:33 - can't change the actual string object we
04:35 - call that immutability and at this point
04:38 - this name variable refers to this string
04:41 - object and we use this to pass this
04:45 - string to this function it appears here
04:48 - and when we do this that basically
04:53 - assigns this variable here a different
04:55 - variable to refer to this same string
04:59 - which is why it has the same ID it's the
05:01 - same string object even though these are
05:05 - actually two different variables which
05:07 - could have different names if you want
05:09 - an analogy I like to make is imagine you
05:12 - have a house you could write down the
05:15 - address of that house on a piece of
05:16 - paper and you could give it to a friend
05:19 - of yours that friend of yours could even
05:21 - copy the address and give that to other
05:24 - people but there's only ever one
05:27 - house so the variables here are like the
05:30 - piece of paper that has the address of
05:32 - the house written on it and the house is
05:35 - like this string object here there's
05:37 - only ever one house but you can have
05:41 - multiple copies of the address that
05:43 - refer to it and there's only ever one
05:45 - string object but you can have multiple
05:47 - variables referring to that same string
05:50 - object try out the ID function for
05:52 - yourself it's not something that we'll
05:54 - use a lot but I just wanted to go
05:56 - through this to
05:58 - hopefully make what's what's happening a
06:00 - little bit clearer here and also to
06:02 - mention that we call this a
06:06 - parameter but here this is an argument a
06:09 - thing that you pass to a function is an
06:11 - argument whereas the variables that you
06:13 - list in the function header just name
06:15 - here they're called
06:18 - parameters you've been watching a free
06:20 - sample from my Python and machine
06:23 - learning for complete beginners course
06:25 - I'm uploading enough videos from the
06:27 - start of the course to get you started
06:30 - with python and machine learning the
06:31 - full course is absolutely massive if
06:33 - you're interested in it please click the
06:36 - link in the description the complete
06:38 - course covers not only basic python but
06:41 - also some fairly Advanced python even
06:44 - some desktop programming stuff and then
06:46 - goes on to machine learning and
06:48 - artificial intelligence until next time
06:51 - happy coding