00:01 - [Music]
00:13 - [Music]
00:17 - hello this is John from Cave of
00:19 - programming. comom in this tutorial
00:21 - we're going to take a look at
00:23 - encapsulation before we move on to look
00:26 - at more
00:27 - inheritance uh so I'll I'll declare a
00:30 - little class up here to demonstrate this
00:32 - in Eclipse let's create a class called
00:36 - frog and we've seen that it's it's very
00:38 - common to give our classes private
00:41 - instance
00:42 - variables um so let's give this a
00:44 - private string name and let's give it
00:47 - some public methods as
00:50 - well well let's have a Constructor that
00:53 - sets the name so that in our main
00:55 - function here we'll be able to do stuff
00:58 - like frog frog
01:02 - Freddy so when when you do this you're
01:05 - implicitly calling the Constructor so
01:08 - this isn't going to work at the moment
01:10 - but uh because we're implicitly calling
01:12 - a Constructor when we construct the
01:14 - object and because we're calling this
01:16 - Constructor from outside the class the
01:18 - Constructor will have to be public so
01:22 - let's say here uh
01:24 - frog frog string name and let's use the
01:30 - initialization list to initialize name
01:33 - with whatever's passed in and we'll
01:35 - provide a dummy implementation to make
01:38 - the compiler
01:41 - happy so um this is kind of an an
01:45 - example of encapsulation at work
01:47 - encapsulation means that we encapsulate
01:50 - we hide away the um the instance
01:53 - variables and we only provide some
01:56 - public methods that are going to be
01:58 - documented which the user of the class
02:00 - which may be
02:02 - yourself is going to is going to call in
02:05 - order to um do stuff with the class so
02:08 - we we declare the methods public that
02:10 - means we can call them outside of the
02:12 - class like this Constructor is being
02:15 - called uh
02:17 - implicitly and we
02:19 - encapsulate all the instance variables
02:21 - hide them away so no one can mess with
02:23 - them if we didn't do that uh we could
02:26 - end up with Excuse me a bunch of
02:29 - different objects
02:30 - that are all setting each other's um
02:33 - instance data and what would end up with
02:36 - would be a likely a kind of Tangled
02:38 - Rat's Nest of different objects all
02:41 - directly accessing each other's data
02:44 - which makes for very hard to
02:46 - maintain difficult to read code and
02:48 - that's why we restrict as much as
02:51 - possible access to the class and just
02:54 - have these publicly documented methods
02:57 - that we allow the user to use to do
02:59 - things with the class so we could have
03:01 - another example here let's have a um a
03:04 - public string get
03:07 - name and let's just return name in
03:13 - there so again we're making we're making
03:16 - this uh we're making it public and if we
03:21 - write up documentation for this class we
03:24 - document that get name exists and that
03:27 - it's a public method let's say here frog
03:29 - do get
03:31 - name and let's just check that this
03:34 - works because I'm never completely sure
03:37 - until it's actually um built and running
03:40 - and ideally tested quite thoroughly as
03:42 - well so we've got Freddy
03:45 - there um now it's it's common that it's
03:50 - common to have methods in your object
03:53 - that require some other method um to
03:57 - make them work so so you might have uh
04:01 - some kind of method let's say it's a
04:04 - public method in your object which um
04:07 - which needs some other block of reusable
04:10 - code in order to do its thing but that
04:14 - um so block of reusable code is going to
04:16 - go in a in a method in the class but we
04:19 - don't want users to be able to do stuff
04:23 - with that with that method so just to
04:26 - give you an example here let's say here
04:29 - that we've got a frog
04:31 - void um let's let's call it
04:35 - info and info is just to take a really
04:40 - simple kind of slightly too simple
04:43 - example let's say that info um outputs
04:46 - information about the Frog my name is
04:49 - let's say we've decided that the end
04:51 - user of this class doesn't shouldn't
04:55 - ever need get name for some reason but
04:58 - they they do need
05:00 - info then uh we can call get name here
05:04 - if we need it of course in in this
05:07 - simple example we could just put name
05:08 - there
05:09 - directly uh you can just of course you
05:12 - can refer directly to uh instance
05:14 - variables within the methods of your
05:16 - class but imagine something more
05:18 - complicated is going on here and this
05:20 - info needs to have some method
05:23 - containing some reusable block of code
05:25 - like get name but imagine that we we
05:28 - don't want to make get name public we we
05:32 - can actually make get name private so
05:35 - let's say here see out or not see out
05:38 - anymore but let's say frog.
05:41 - info
05:43 - info let's check that this works so I'll
05:45 - just save it and run it it says my name
05:48 - is Freddy but now um the idea behind
05:52 - encapsulation is besides uh hiding away
05:55 - your instance variables you want to also
05:58 - make private it absolutely anything that
06:01 - you can including
06:03 - functions so if we don't need the user
06:05 - to call get name outside of the class we
06:09 - can put this in the private section up
06:12 - here so this still
06:14 - works uh info can happily call get name
06:18 - even though it's private because get
06:20 - name is part of the class and private
06:22 - means that only the class can use this
06:24 - stuff directly so Within These brackets
06:27 - of the class our methods can call
06:31 - Private methods and can access private
06:34 - data but now that we've made get name
06:36 - private we can't do stuff like frog.
06:40 - getet
06:41 - name here outside of the class let's
06:44 - just prove that so I'm going to build
06:47 - this and we see that we've got an
06:50 - error and again this is encapsulation at
06:53 - work you should make anything that you
06:56 - can whether it's data or functions make
06:59 - it private make as much of your class
07:02 - private as you possibly can encapsulate
07:05 - it within the class uh hide it away from
07:09 - the end user in order to reduce the
07:11 - possibility of the user of the class
07:14 - even if that's yourself creating some
07:15 - sort of Tangled Rat's Nest if the end
07:19 - user doesn't need this make it private
07:22 - if it's only needed within your class
07:24 - and a common thing to do is to declare
07:27 - your private methods in a separate
07:30 - private section to the instance data
07:32 - just so that visually you're not mixing
07:34 - up a load of methods with instance data
07:38 - so you can have as many of these public
07:40 - and private sections as you want in
07:41 - whatever order you like and a common
07:44 - order is that you declare the instance
07:47 - data private at the top first and then
07:50 - you might have um a section with private
07:52 - methods and at the end you might have
07:54 - public methods but that's not the only
07:56 - order because uh some some uh um
07:59 - programmers reason that public methods
08:01 - should be declared at the top so that
08:03 - the the user of the class sees those if
08:06 - they look at the class definition here
08:10 - and then the private data which after
08:12 - all is hidden away is placed at the
08:14 - bottom um because you don't want to draw
08:17 - people's attention to that uh but I I
08:21 - like this form which I think is more
08:22 - common where you um declare your private
08:25 - data at the top and um any public
08:29 - methods are going to follow that and
08:31 - probably your private methods they're
08:34 - probably going to go after the data but
08:36 - it it's a question of whatever you feel
08:38 - is most legible really the order of
08:41 - these private public
08:42 - sections so we don't need to repeat this
08:45 - key word the only reason I've done it is
08:47 - to visually um put the private methods
08:50 - in a separate section to the private
08:53 - instance data just to make this easier
08:55 - to understand what's going
08:57 - on uh so I think that's all I'm going to
09:01 - say about encapsulation here and the end
09:06 - uh message is just make anything private
09:09 - that you can in your class uh so if you
09:13 - want to practice this um try creating a
09:16 - class with some private data and private
09:18 - methods and try calling those private
09:21 - methods within your public methods
09:23 - remember that the public ones are the
09:25 - only ones that you would uh document for
09:27 - the end user they're the only ones that
09:30 - the end user can called can call and
09:32 - everything else is private and you can
09:34 - also experiment with you know having
09:36 - private and public sections in different
09:39 - orders if you want have a go at that and
09:41 - just check that you understand the
09:44 - syntax here but it's pretty simple and
09:45 - we've seen a lot of it before so
09:48 - hopefully that won't give you too much
09:49 - of a a headache so that's it for this
09:52 - tutorial and until next time happy
09:58 - coding
10:05 - [Music]