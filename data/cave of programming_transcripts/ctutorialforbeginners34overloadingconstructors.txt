00:18 - hello this is John from cave of
00:21 - programming calm in this tutorial we're
00:23 - going to learn constructor parameters in
00:27 - C++ and we're going to take a look at
00:29 - method overloading as well or at least
00:32 - we're going to get a first look at it so
00:35 - I've got a hello world project here
00:36 - which I'm just going to build and let's
00:39 - just check that it runs and I'm going to
00:42 - define a new class here I'm going to
00:45 - right click the project and go to new
00:47 - class because I thought I'd create a new
00:49 - one
00:50 - rather than using previous tutorials
00:52 - code from previous tutorials which is
00:55 - getting a bit confusing let's give it
00:57 - one constructor and I'll call it person
00:59 - let's imagine that we're modeling a
01:02 - person with this class so we could be
01:05 - creating an employee database or
01:07 - something like that and let's give it
01:09 - some private variables we'll have string
01:12 - name and int age and I need to include
01:19 - the iostream header here string which as
01:23 - I mentioned previously could be
01:26 - different on your platform and we need
01:28 - using namespace standard so let's and
01:35 - there's also set values for this in a
01:38 - constructor so in person dot cpp here
01:42 - let's say that name equals undefined by
01:46 - default and age equals 0 by default so
01:50 - just to give it give them some values of
01:53 - some sort to start off with I also want
01:56 - to give this a method that enables us to
01:58 - see what's in the class so let's give it
02:02 - a method which I'll call to string so
02:05 - that can return the string that
02:07 - represents the class's data and if we go
02:10 - to person dot CPP I can implement that
02:13 - so let's say string person
02:15 - : : - string and I'll use the string
02:22 - stream class that I showed you in
02:24 - previous tutorial just to build up some
02:27 - information about this about this class
02:31 - and we need to include some where the
02:34 - string stream header list is just do it
02:36 - here in the CPP file so include and we
02:41 - need sir stream we're alright we've
02:46 - already got a statement saying using
02:48 - namespace standard in person dot age so
02:51 - we probably don't need to repeat it here
02:54 - we're already using that namespace let's
02:58 - write to the string stream persons well
03:02 - let's just say name :
03:05 - and we can put SS name and SS I'll have
03:12 - some punctuation age and then it's a SS
03:16 - age and then finally we can we return
03:20 - ssstop stroke to convert it to a string
03:24 - then in the main function here let's go
03:30 - to here and let's change this C out so
03:32 - that it outputs
03:34 - well I'll create a person class first a
03:37 - person will call it person one and let's
03:42 - spell that person dot - string person
03:47 - 1.2 string I should say get rid of this
03:51 - comment here as well because we don't
03:52 - need it
03:55 - I think that looks good let's save that
03:56 - got a little error here
03:59 - syntax error got a semicolon that I
04:01 - don't need shouldn't have let's just run
04:04 - that check that it works so it doesn't
04:07 - work what led you wrong I've got to
04:09 - include the person header as well so
04:12 - let's do that include
04:14 - by age so using double quotes because
04:16 - it's a header in my actual program
04:19 - rather than being standard header and
04:22 - now I think if we save everything and
04:24 - make it build
04:25 - we've got named undefined age zero so
04:31 - one common way of supplying initial
04:35 - parameters to an object is actually to
04:38 - create a constructor that allows you to
04:40 - pass parameters so what we can do is
04:44 - when we actually instantiate our object
04:47 - like here we can pass it the name in the
04:50 - age that we wanted to have which is
04:52 - obviously more more useful than having
04:54 - them all and kind of predefined so we
04:57 - can't do much with that and we could use
04:59 - set methods to achieve what what I'm
05:02 - about to show you but it's just more
05:04 - convenient to do it with a constructor
05:06 - it requires less lines of code let's go
05:08 - to person dot age and in here I'm going
05:12 - to say let's create one new constructor
05:16 - so person and I'm going to say that the
05:20 - constructor takes parameters let's start
05:23 - off with just the name so string name
05:27 - now you can actually implement
05:30 - constructors exactly here you can fight
05:33 - you can do that with any method this is
05:35 - called like an an inline implementation
05:39 - where you just define the implementation
05:43 - of your method directly here where you
05:45 - already declare the prototypes let's put
05:48 - opening closing curly brackets here and
05:51 - I call this new name actually new name
05:54 - because we've already got a name here we
05:57 - don't want it to conflict and let's just
05:59 - say that name equals new name so there's
06:05 - we don't have to do this here we could
06:07 - define the implementation of a
06:09 - constructor down here but because we've
06:10 - only got a very small amount of code in
06:12 - the constructor I'm just choosing to do
06:15 - it here
06:17 - and all we're doing is assigning name of
06:19 - the person to whatever we pass into the
06:21 - constructor how do you actually pass
06:23 - that in well let's go back to the main
06:25 - function here well actually let's just
06:28 - check to see what it says age was not
06:30 - initialized in this constructor well
06:32 - that's true
06:33 - it's not also got a missing semicolon
06:35 - there well let's give age and that's
06:38 - just set it equal to zero here as well
06:41 - so that's our complete constructor now
06:44 - if we go to the main function let's
06:48 - create another person let's say person
06:50 - person two and this time I'm going to
06:53 - put round brackets after the variable
06:55 - name and in there I'm going to supply a
06:57 - name chopped up but I put Bob for that
07:00 - so the reason we can do this is because
07:04 - we've said there's a constructor here
07:06 - that takes a string as a parameter
07:08 - single string when C++ compiles this
07:12 - program it's for this it's going to say
07:15 - for this person one it's going to say
07:17 - okay we need a constructor that takes no
07:22 - parameters so it looks at the person
07:25 - class and says okay this constructor
07:27 - here takes no parameters so it's going
07:29 - to run that when it sees this when it
07:33 - sees this it's going to say okay we need
07:35 - a constructor that takes one string and
07:37 - it looks in the person class and it says
07:39 - yeah okay this constructor takes one
07:41 - string therefore I'll run this
07:43 - constructor instead of running this
07:45 - constructor so it's going to pick the
07:49 - constructor depending on and the
07:52 - parameters that that constructor uses
07:54 - it's going to pick the right one
07:55 - depending on what you put here or don't
07:58 - put let's output person two as well
08:01 - so person 2.2 string and if I run that
08:07 - we're going to see hopefully that we've
08:10 - got a person to here with named Bob the
08:14 - age is still zero we can have as many
08:17 - constructors as we like as long as they
08:19 - have different parameter
08:20 - and this business of supplying methods
08:24 - that have the same name so the
08:27 - constructor although it's a special kind
08:29 - of method that runs when we when the
08:31 - object is instantiated nevertheless it
08:34 - is still just a method and it also
08:37 - applies to any method that you can add
08:38 - different versions of that method with
08:40 - same net with the same name as long as
08:43 - they have different parameters you can't
08:45 - have two methods with the same name that
08:47 - only differ in the return type and
08:50 - they've got it differ in that and the
08:53 - parameters the type or the number of
08:55 - parameters that they expect let's have
08:58 - another one here let's say person string
09:02 - name string new name that's a and int
09:06 - age and for this one again I could
09:09 - easily define it here but just to show
09:11 - you that we're not forced to I'll create
09:14 - the implementation of this down down in
09:18 - the person dot CPP let's copy the
09:21 - prototype here go to person dot CPP and
09:25 - I'll put it below this constructor
09:27 - person : common person well I can now
09:32 - just use my paste paste that in and we
09:35 - can say name equals new name and age
09:41 - equals I better rename this new age
09:44 - really new a new age new age okay and
09:51 - I've changed that also in the header
09:53 - this new age because just for
09:55 - consistency although it probably doesn't
09:57 - actually matter as long as the type is
10:00 - correct in the prototype so let's let's
10:03 - try that one as well go to my main
10:05 - function and let's just copy this and
10:07 - now we'll have su and 3035 and we'll
10:13 - call that person 3 and let us have
10:18 - person 3.2 string now if we save that
10:21 - and run it then we've got another person
10:28 - down here and it's kind of under
10:30 - underlines the fact that once you've got
10:32 - your class you can crane as many
10:35 - different objects of that class as you
10:38 - want you can instantiate this many times
10:40 - this you want and have different objects
10:42 - each with their own unique data so every
10:44 - object gets its own separate copy of
10:47 - whatever data you specify here this
10:49 - class is purely a blueprint for the
10:51 - different objects that you create and
10:54 - creating an object is called
10:56 - instantiation when you create an object
10:58 - from the class you say we instantiate
11:00 - the class so like the idea is that the
11:03 - class is like an abstract thing and
11:06 - instantiating the class it means kind of
11:08 - making a definite particular version of
11:11 - that class a particular object in other
11:13 - words so again to practice this and just
11:18 - create your own class and give it let's
11:21 - say three or even four different
11:24 - constructors that can do different
11:26 - things if you want you can even put and
11:29 - you can put like C out statements in the
11:32 - constructors so you can see very clearly
11:34 - which one runs and you only will run one
11:39 - constructor when you instantiate the
11:40 - object and a particular construct
11:42 - earlier on just depends on the
11:44 - parameters that you've supplied to it
11:45 - and it's also worth besides creating
11:47 - multiple constructors it's worth
11:49 - practicing and defining some of them in
11:52 - line like this just to fix it in your
11:54 - mind that you can indeed define methods
11:57 - here if you want to you can have in-line
12:00 - implementations of your methods
12:02 - constructors or whatever actually here
12:05 - in the class and file itself
12:07 - sometimes you see classes were even that
12:11 - even have lots of code in the header
12:14 - here and don't even have a CPP file but
12:17 - I or they have a minimal one but I
12:21 - prefer putting any serious
12:23 - implementation myself in a CPP file
12:26 - which is
12:26 - is a more common way of doing it and
12:28 - that has the advantage that you can
12:30 - easily just look at the class header
12:31 - file and see what functions are
12:34 - available for you to use rather than
12:36 - having to trawl through lots of code
12:37 - looking for how the class interacts with
12:41 - the other code in your program so that's
12:44 - it for this tutorial hope you try that
12:48 - exercise there try this for yourself and
12:50 - until next time happy coding
13:00 - you