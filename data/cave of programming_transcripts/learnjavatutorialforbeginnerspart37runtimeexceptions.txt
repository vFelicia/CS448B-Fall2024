00:01 - hello this is John from Cave of
00:03 - programming. comom and in this tutorial
00:06 - we're going to look at runtime
00:07 - exceptions in
00:09 - Java so so far we've looked
00:12 - at checked exceptions and there are two
00:16 - kinds of exceptions in Java two kind of
00:19 - basic kinds and this is a question that
00:24 - people like to ask on interviews and
00:26 - exams quite a lot what kinds of
00:28 - exceptions are in j
00:31 - there are two basic kinds and checked
00:34 - exceptions are the kind that you're
00:36 - forced to handle and we've we've seen
00:38 - examples of those so far like if you
00:41 - call thread do sleep for
00:44 - example
00:45 - then this throws an exception which is a
00:49 - checked exception so you have to handle
00:53 - it but there are also exceptions that
00:57 - you don't have to handle that you're not
01:00 - forced to handle and these are called
01:02 - unchecked exceptions or runtime
01:06 - exceptions and an example would be
01:08 - division by zero so let's say you've got
01:12 - a integer here let's say int value
01:14 - equals
01:16 - 7 and let's say I say that value
01:20 - equals value / by
01:24 - 0 this compiles so I'm not forced to
01:28 - handle handle an exception here but this
01:31 - does still throw an exception so if I
01:33 - run this it's going to give me some kind
01:37 - of in this case an arithmetic exception
01:40 - divide by
01:42 - zero and this is called a runtime
01:46 - exception and in fact if we look at
01:49 - arithmetic exception let's go to a
01:53 - browser here it is we find that it's a
01:55 - child class of runtime exception and
02:00 - runtime exception like all exceptions is
02:03 - a child class of java. lang. exception
02:07 - but the thing is that runtime exception
02:10 - and any of its child
02:12 - classes Don't force you to handle them
02:15 - which is why we don't have to put a TR
02:17 - catch in
02:18 - here and the idea is that runtime
02:21 - exceptions are things that are really
02:24 - serious basic fundamental errors in your
02:28 - program so if you've got a run time
02:30 - exception it's something that your
02:32 - program is unlikely to be able to
02:34 - recover from and for that reason it
02:37 - doesn't even force you to catch it if
02:40 - your program is throwing runtime
02:42 - exceptions then there's something really
02:45 - seriously wrong with it which you should
02:47 - have
02:48 - addressed another good example would be
02:50 - a n pointer
02:52 - exception like I could say string
02:56 - text and then without saying text equals
03:00 - new string or textt equals some kind of
03:03 - text I could try using a method of
03:06 - string like
03:09 - text. length something like
03:12 - that I could put in let's say C
03:15 - out text. length now
03:20 - this probably isn't going to compile
03:24 - just because it's going to tell me if I
03:25 - say this it's going to say that text may
03:28 - not have been initialized but if I set
03:30 - text equal to
03:33 - null now the compiler says okay you have
03:37 - initialize text with
03:39 - something but I still can't call a
03:42 - method on it because all I've got here
03:43 - is a reference that points to nowhere I
03:46 - haven't got an object containing actual
03:48 - code I haven't got an object that
03:50 - contains actual implementation for this
03:53 - length method so if I run this I'll get
03:55 - a null pointer
03:58 - exception and although null pointer
04:01 - exceptions are something that you tend
04:03 - to see a lot as a beginner because you
04:05 - sort of kind of tend to lose track of
04:08 - the difference between a reference and
04:10 - an actual having an actual object there
04:13 - in a way they're they're kind of one of
04:15 - my favorite errors because you can
04:17 - usually fix them pretty quickly because
04:19 - if you see a null pointer exception
04:21 - you've literally got some variable
04:22 - that's not referencing anything and
04:24 - that's usually pretty simple to fix most
04:26 - of the time
04:30 - and uh one more example that I want to
04:32 - show you before we look at something uh
04:35 - kind of something else in connection
04:36 - with this is the array array out of
04:39 - bounds exception let's say you have an
04:42 - array of
04:43 - strings let's call this
04:45 - Texs equals new well I could use the
04:48 - kind of shortcut for initializing an
04:51 - array and initialize this to 1 2
04:57 - 3 now there are three strings in this
05:01 - array and we start numbering the
05:04 - different values with index zero so what
05:08 - would happen if I did sis out
05:11 - texts and I tried to
05:14 - access item number three so this is item
05:18 - zero this is item one and this is item
05:21 - two and again if I try to access text 3
05:26 - and I run that then I get this array
05:29 - index out to bounds exception which
05:31 - again is a runtime exception I'm not
05:33 - forced to handle it but nevertheless it
05:36 - occurs and again this is just like the
05:39 - null pointer exception and then divide
05:42 - by zero the arithmetic exception this is
05:45 - pointing to a really fundamental problem
05:47 - in my program which my program is not
05:50 - going to be able to recover from now
05:53 - having said all that about not being
05:55 - forced to check these exceptions you can
05:58 - still check runtime EX exeptions if you
06:00 - want to but usually you don't want to
06:02 - because usually what you're going to
06:04 - want to do probably most of the time is
06:07 - you're going to want to fix the
06:09 - underlying problem but if you do want to
06:12 - catch a runtime exception you can so I
06:16 - could put a try in here and I could
06:20 - enclose
06:21 - this in a tri block and I could say
06:25 - catch and if I if I were to catch
06:28 - exception then then that will catch any
06:30 - exception that this code throws so
06:34 - sometimes that could be useful and I
06:36 - could do sisile e. get message let's say
06:40 - and maybe that will tell us something
06:41 - useful so if I run this actually the
06:44 - message isn't useful at all in that
06:47 - case but
06:50 - um yeah we I'm sure we could figure out
06:52 - something something useful to do like
06:55 - maybe I don't know I don't know what um
06:57 - two string looks like on um
07:00 - yeah that's kind of more informative on
07:01 - array index out of bounds exception so
07:04 - two string looks kind of more useful or
07:07 - of course I could do e print stat trace
07:10 - and if I wanted I can catch the specific
07:14 - exception so to be more specific I could
07:17 - catch all runtime exceptions by typing
07:19 - runtime exception
07:22 - here and that's going to catch any
07:24 - runtime exception or I could catch the
07:28 - exact specific exception if I'm
07:30 - expecting it like array index out of
07:34 - bounds
07:36 - exception like
07:38 - this so you can still catch R time
07:41 - exceptions but it's less common to do so
07:44 - partly because you're not forced to and
07:46 - partly because they do generally point
07:48 - to fundamental flaws in your program
07:51 - which you really need to fix so that's
07:53 - it for this tutorial and I think we've
07:55 - covered everything that's really
07:57 - important about exceptions for the
08:00 - moment and there's still um some quite
08:02 - fundamental things in Java that we still
08:05 - haven't covered in these tutorials so my
08:07 - intention now is to carry on to fill in
08:11 - a few fundamental concepts and later on
08:16 - probably I'll make some videos uh in
08:21 - which you can which you can use to test
08:23 - your knowledge or Java but we've still
08:25 - got a few basic things to cover although
08:27 - we've we've certainly covered the
08:29 - majority of probably basic core Java by
08:32 - now so that's it for this tutorial and
08:35 - you can find um this code and I'll
08:38 - probably type out a little bit more of
08:40 - what I just wrote again on Cave of
08:43 - programming. comom and until next time
08:46 - happy coding