00:00 - [Music]
00:12 - [Music]
00:17 - hello this is John from Cave of
00:19 - programming. comom and in this tutorial
00:22 - we're going to look at reading text
00:24 - files in
00:25 - Java and in fact I'm going to show you
00:27 - the simplest possible way to read a text
00:29 - file line by line in this tutorial and
00:32 - in a future tutorial we'll look at um a
00:34 - more complex but perhaps more flexible
00:38 - way of doing this so um I'm first the
00:43 - first thing I need is some file that I
00:45 - want to read and I've created this file
00:47 - here and it's got a bunch of um lines in
00:51 - it just random text basically and I need
00:54 - to find that file on my disk for start
00:57 - so that I know to tell Java where to
00:58 - read it from and I've saved this file on
01:01 - my desktop so if I look at my desktop
01:03 - here here's my file and I'm just going
01:06 - to rightclick it and on Windows you go
01:08 - to properties and I think on the Mac
01:10 - there's a info get info option or
01:13 - something like that and I'm just going
01:15 - to copy this path to the file
01:19 - here and now in Eclipse I'm going
01:22 - to create a string string and I'll call
01:26 - it file name and I'll set that equal to
01:29 - the path of this file followed by the
01:31 - name of the file which is example. text
01:35 - like
01:36 - that now if you're on Windows here
01:38 - you'll have a little problem at this
01:40 - stage whoops because um the uh within
01:45 - double quotes in Java if you have a
01:48 - slash a backs slash like that this is
01:50 - called then uh a backs slash followed by
01:52 - a letter indicates a special um often
01:56 - non-printing character within double
01:59 - quotes with back sln means new line so
02:03 - um this is um complaining because it
02:05 - thinks that this for example that back
02:07 - SL e should be some kind of special
02:09 - control sequence and to get around that
02:12 - you can either backslash The backslashes
02:16 - by
02:17 - saying uh by just having two backs
02:20 - slashes where you'd normally use one
02:22 - just put an extra back slash in and then
02:24 - this will be interpreted um as if it
02:27 - really was a backs slash or the other
02:30 - option which is um also a good option if
02:33 - you're not working on Windows but
02:34 - another system that uses forward slashes
02:37 - is just use forward slashes instead of
02:39 - back slashes there and that will work
02:42 - just fine on Windows as well or at least
02:44 - it does on my system so let's replace
02:46 - all these back slashes with forward
02:49 - slashes and um now the next step here is
02:54 - to create a file object which will
02:57 - actually be a kind of java
02:58 - representation of your file so I'll say
03:01 - file let's call it uh text file equals
03:06 - new file and I'll pass it the file name
03:08 - that I want it to work with like
03:12 - this and I'll add the input with control
03:14 - shift o and just save that and once
03:17 - you've got your file object um now the
03:20 - kind of more traditional way of reading
03:22 - a file in object uh reading a file in
03:24 - Java involves uh classes like buffer um
03:29 - reader and file reader and that sort of
03:31 - thing but a slightly simpler way to do
03:33 - it is to use the scanner class so I'm
03:36 - going to say scanner let's call this
03:39 - I'll just call it in actually equals new
03:42 - scanner and I'll pass that the file
03:45 - object that I want to
03:47 - read and let's add the input for Scanner
03:49 - with control shift o and this will give
03:52 - me a error because it throws an
03:53 - exception and if I just click this I
03:56 - could surround it with TR catch and I
03:58 - could put all my code in this try and
04:01 - then if this file not found exception is
04:03 - thrown here I can put sis out can't find
04:07 - file plus file name something like that
04:09 - can't file not found or something like
04:11 - that but instead of doing that here um
04:15 - just to keep this code a bit cleaner I'm
04:16 - just going to throw this
04:18 - declaration I'm going to throw the um
04:21 - exception out of my main method so if I
04:23 - do that if it can't find the file my
04:26 - main program will just kind of stop with
04:28 - a file not found
04:31 - exception um and just to demonstrate
04:33 - that let's just change the name of the
04:36 - file and just run it and here I've got a
04:38 - file not found exception being thrown
04:39 - from my main
04:41 - program okay so um I change that back
04:44 - and then once when you open the scanner
04:48 - by doing this um you should always
04:50 - remember to close it and that's what
04:51 - that warning there is about it says uh
04:54 - the value of the local variable oh is
04:56 - not used that's one thing but then
04:57 - resourcly in is never closed so um I'm
05:01 - just going to close the scanner I'm
05:02 - going to say in. close and I'm saying in
05:05 - because that's what I happen to call my
05:07 - scanner and that will close the
05:09 - underlying file on your system and now
05:12 - we can read this line by line and you
05:14 - can read data from your file using um a
05:18 - variety of methods from the scanner
05:19 - object if I type in. next here you can
05:23 - read you can read integers and um floats
05:26 - and all kinds of things from your file
05:29 - but what I'm going to do here for the
05:30 - moment is just have a loop that will
05:32 - read the whole file line by line and I'm
05:36 - going to say while in which is my
05:38 - scanner has next line so in other words
05:43 - while there isn't another line to read
05:46 - then I'm going to say String
05:51 - Line equals in do next
05:55 - line next line like that and uh no no
05:59 - matter what you're planning to do with
06:00 - this text from your file it's a good
06:03 - idea at this point to just do a sis out
06:06 - and output the line to check that your
06:07 - file actually can be read so I'm just
06:09 - going to run this and here in the
06:11 - console down here you can see the
06:13 - contents of my
06:15 - file now if you work with if you want to
06:17 - work with the other methods of scanner
06:19 - and read integers from your file for
06:21 - example a common thing to do would be
06:23 - like the first line in your file um
06:26 - would be let's say a
06:28 - number um like for example it might be
06:31 - three and that might indicate that you
06:33 - have to read three lines from your file
06:36 - let's just save
06:37 - this and if you have something like that
06:39 - you want to read the number and then you
06:41 - want to use a for Loop to read three
06:43 - lines so here instead of while you'd
06:45 - have four and um you'd read next line
06:49 - three times to read the next three lines
06:51 - for example and the next three lines
06:54 - could be um you know they could be the
06:56 - names of um books or something like that
07:00 - you know some kind of data but let's
07:03 - suppose that we want to read the number
07:04 - just for the moment and um you would do
07:07 - that by saying int value equals and your
07:10 - scanner variable and thenex
07:13 - int and now if I do us this out I can
07:17 - say uh
07:19 - red value and let's output value here so
07:24 - if I run that here is my value as an
07:27 - integer that I read from the top of the
07:29 - file and then I'm going on to read all
07:31 - the lines from the
07:33 - file now there's a there's a little
07:35 - complication here which um you you
07:40 - couldn't easily notice here but notice
07:41 - that there's a blank line here and the
07:44 - the problem will become more apparent if
07:46 - I number the lines so let's say int
07:48 - count and I'll say count equals 2
07:51 - because um the first line in my file
07:53 - here um the first line that I'm reading
07:56 - with next line is going to be this the
07:58 - second line here's the first line here's
08:00 - the second line and I'm reading this
08:02 - integer and then in my while loop I'm
08:04 - reading the lines one by one so this is
08:07 - line two and let's just say here let's
08:11 - say uh Red
08:15 - Line um in fact let's just give it a
08:17 - number let's say
08:19 - count plus and I'll have a colon and
08:23 - then a plus so I'm just numbering the
08:25 - lines here and I'll increment count
08:28 - every time I read line and now if I if I
08:31 - run this you can see if you look at the
08:34 - console here you read we read the number
08:36 - successfully and we read the rest of the
08:38 - line successfully but the problem is
08:40 - that we read apparently a blank line in
08:42 - between the two and yet if I look at my
08:44 - file there isn't a blank line there not
08:47 - at that point anyway and the reason for
08:50 - that is that um there's actually an
08:53 - invisible character here which next int
08:56 - doesn't read and next line does read
09:00 - and uh that character is um well it
09:04 - depends on your system but it's um You
09:06 - can call it the new line character and
09:09 - on Windows actually it consists of two
09:11 - invisible characters two bites in your
09:15 - um in their underlying code the
09:16 - underlying bites that this file is made
09:19 - up of and in Windows those characters
09:21 - are called the courage return and Line
09:23 - Feed and that's because um on old style
09:27 - typewriters um there was like a movable
09:29 - Carriage that move backwards and
09:31 - forwards to print out your text and when
09:34 - you got to the end of of the of the line
09:36 - you'd physically move the carriage back
09:38 - to the left so that was called a
09:40 - carriage return moving the carriage back
09:42 - to the left and then you'd turn it to
09:45 - scroll the line and that was called a
09:47 - Line Feed and now in Windows we have uh
09:50 - invisible characters the carriage return
09:52 - and Line Feed and when you call next
09:55 - in um whether you've got two invisible
09:57 - characters or one this will not read it
10:00 - it only reads purely the actual integer
10:02 - itself so it's reading this integer but
10:05 - it's not reading the invisible character
10:07 - that actually causes the new line to
10:09 - appear
10:11 - here um so what we need to do to make
10:13 - this work is I just need to read that
10:15 - character and discard it now I need to
10:17 - say after reading an integer I need to
10:18 - say in dot next line and that will read
10:24 - my um carriage return and Line Feed it
10:28 - will read my new line Carri
10:30 - and now if I run this um everything
10:33 - looks great and I've got red value three
10:36 - and then I've got the the lines being
10:38 - numbered starting at line
10:40 - two uh I think there's just one more
10:42 - thing that I want to show you in this
10:43 - tutorial and that's um sometimes you
10:45 - don't want to read a file from an
10:47 - absolute path sometimes you want to put
10:50 - like a file actually in your project
10:53 - folder and you can do that so if I um go
10:57 - to uh my desktop here where I created
10:59 - the file I can drag it into my project
11:03 - folder here and say copy files and let's
11:06 - just maximize Eclipse again and it's
11:08 - important that this file should be in
11:10 - the root directory of your project
11:12 - because that's actually the working
11:14 - directory of your Java program when you
11:16 - click the Run button here and that's
11:19 - where it will read files from if you
11:20 - don't specify an absolute path and I'm
11:22 - going to just comment this out
11:25 - here and let's just copy that and
11:28 - instead of the full path I'll just have
11:31 - the name of the file and it will now
11:33 - read from
11:35 - here so uh just to prove it's reading
11:37 - this file let's double click this open
11:39 - it in eclipse and let's add zebra on the
11:41 - bottom here so I'll change it a little
11:43 - bit and now if I run this it will read
11:47 - from the working directory and you can
11:49 - see there is zebra line 11 down there
11:52 - okay so that's it for this tutorial and
11:55 - um this code is going to be on kof
11:57 - programming. comom and you can also find
11:59 - uh more courses on um that's a free
12:02 - course on
12:03 - multi-threading and uh stuff on Java
12:06 - Collections and Android programming uh
12:10 - web Java web programming and also a big
12:13 - course on swing programming and there's
12:16 - some paid some of these are paid courses
12:18 - but uh most of them have um free videos
12:21 - that you can also see for free in any
12:22 - case even if they are paid courses so
12:25 - take a look at uh
12:27 - www.of programming.
12:30 - and until next time happy coding
12:34 - [Music]
12:40 - [Music]