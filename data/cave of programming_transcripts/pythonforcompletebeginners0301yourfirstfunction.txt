00:00 - in this video we're going to take a look
00:01 - at defining a function in Python and in
00:05 - this section of the course in general
00:07 - we'll be taking a good look at functions
00:09 - and what they are and how to use them in
00:13 - programming in general there are three
00:15 - basic paradigms let's say for
00:18 - structuring your code you can write
00:21 - procedural
00:24 - code and an example of a procedural
00:27 - programming language might be
00:30 - C this means that you structure your
00:34 - code into functions which call each
00:36 - other and that's what what we're going
00:37 - to be looking at in this section of the
00:40 - course we have so far been basically
00:43 - writing procedural code we just haven't
00:45 - defined our own functions yet we can
00:47 - also have
00:49 - objectoriented programming
00:51 - languages an example of one of those
00:53 - will be
00:54 - Java and this means that your program
00:57 - consists of objects which interact with
01:00 - each
01:01 - other and in fact in Python almost
01:04 - everything is actually an object even a
01:07 - number is an object we can also have
01:10 - functional programming languages I'm
01:13 - only aware of one pure functional
01:16 - programming language and that's
01:18 - hascal and this means that basically you
01:21 - pass functions to each other and in
01:23 - functional programming in general you
01:25 - avoid things like loops and various
01:28 - other things that we haven't really
01:30 - discussed yet in favor of functional
01:33 - programming techniques so where does
01:36 - python actually fit into this what kind
01:38 - of programming language is it well like
01:41 - many other programming
01:43 - languages you can do elements of all of
01:46 - these in Python so python is basically
01:49 - an object-oriented language but we can
01:51 - also do procedural programming in it and
01:54 - we can do functional programming and
01:56 - we'll be looking at all three of these
01:58 - in this course
02:00 - in this section we'll focus on
02:01 - procedural programming let's start by
02:04 - writing a simple program I'll say
02:07 - response here just a variable I've made
02:09 - up equals input how
02:13 - are
02:16 - you then the user is going to enter
02:18 - something and we'll check the response
02:20 - let's say if
02:22 - response equals okay and let's check for
02:26 - the lowercase version as well or
02:29 - response
02:31 - equals
02:33 - okay then in that case I'm going to
02:36 - print
02:40 - excellent now we could check for other
02:42 - responses but I'll just have an else
02:44 - here and say
02:45 - print oh
02:47 - no so notice here that when I have this
02:51 - or I have to repeat response so here I'm
02:56 - checking is response okay uppercase
02:58 - letters and here I'm checking is
03:00 - response okay lowercase letters I can't
03:03 - just write if response equals okay or
03:07 - okay I've got to repeat the response
03:10 - variable this is something that
03:12 - sometimes confuses beginners because in
03:15 - everyday speech we would
03:17 - say if response is okay or okay but here
03:20 - we have to explicitly say what we're
03:23 - comparing both times is response okay or
03:28 - is response okay with lowcase letters
03:31 - now let's try this program
03:33 - out so I'm going to say
03:36 - Python and the name of the file how are
03:39 - you let's say okay it says excellent I'm
03:43 - going to put
03:44 - a some punctuation there in a
03:48 - space let's run it again so okay
03:51 - lowercase letters that works as
03:53 - well how are you let's say I'm bad and
03:57 - it says oh no now we might want to use
04:00 - this code multiple times within our
04:03 - program or it might be part of a library
04:05 - of code that we're building up it might
04:08 - be just one thing that we can do and we
04:10 - have to do this quite often when we're
04:12 - writing programs so we want to sort of
04:14 - package it up somehow and one thing we
04:17 - can do is put this in a function how do
04:20 - we do that well let's go up here to
04:22 - above where we've written the code and
04:26 - I'm going to say defa and this is short
04:28 - for Define
04:29 - and I'm going to make up a name just
04:31 - like I do with variables and just like
04:33 - with variables I'm going to use
04:35 - lowercase letters and I'm going to
04:37 - separate them with underscores if I have
04:39 - more than one word and if I want to use
04:42 - numbers that's fine but a number can't
04:45 - be the first thing in the name so let's
04:48 - call this maybe ask user
04:53 - status now unlike when I'm creating a
04:56 - variable I need round brackets here and
04:59 - open and close round bracket and then I
05:02 - need a
05:04 - colon just like we have when we're
05:06 - creating an if statement or a for Loop
05:08 - or something now I've got an error here
05:10 - now and that's because this stuff now
05:12 - needs to be indented to say it's part of
05:16 - this ask user status
05:18 - function let's just select all of this
05:21 - and hit the Tab Key and I might as well
05:23 - get rid of this blank line here not that
05:26 - it makes any difference to the program
05:28 - when it's running
05:31 - now what does this do well if we run
05:33 - this now nothing happens at all what
05:37 - we've done here is we've defined a
05:41 - function a function is just a block of
05:44 - code which you can run whenever you need
05:48 - it to actually make the function run I
05:51 - have to call the
05:53 - function so let's go down here and get
05:56 - rid of all of the indent and then just
05:59 - type ask user
06:03 - status and the round
06:05 - brackets the round brackets are what
06:08 - clue you in to the fact that it is
06:11 - actually a
06:13 - function and notice I'm not going to
06:15 - repeat the defa keyword here here I'm
06:18 - not trying to define a function I'm just
06:21 - trying to make this function run I'm
06:23 - just trying to call this function so if
06:26 - I run this now let's see what happens
06:31 - how are you so it's actually running the
06:34 - code and you can see that it works so I
06:37 - can now run this block of
06:40 - code whenever I want it in my
06:43 - program I could run it again immediately
06:46 - if I wanted to I could even run it in a
06:48 - loop let's try this how are you okay and
06:51 - it just asks me again how are you okay
06:54 - but I'll delete the second invocation
06:56 - for the moment so try this out for
06:59 - yourself
07:00 - type out some code that does something
07:03 - and then put it in a function by adding
07:05 - def a function name open and close round
07:09 - brackets and the colon above that code
07:12 - and you have to indent the code to say
07:14 - that it's part of this function and then
07:17 - you can call the function within your
07:19 - program you've been watching a free
07:21 - sample from my Python and machine
07:24 - learning for complete beginners course
07:26 - I'm uploading enough videos from the
07:28 - start of the course to get you started
07:30 - with python and machine learning the
07:32 - full course is absolutely massive if
07:34 - you're interested in it please click the
07:37 - link in the description the complete
07:39 - course covers not only basic python but
07:42 - also some fairly Advanced python even
07:44 - some desktop programming stuff and then
07:47 - goes on to machine learning and
07:49 - artificial intelligence until next time
07:52 - happy coding