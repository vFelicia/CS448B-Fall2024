00:00 - [Music]
00:12 - [Music]
00:17 - hello this is John from Cave of
00:20 - programming. comom in this tutorial
00:22 - we're going to take our um very minimal
00:25 - sdl application here and we're going to
00:28 - set it up so that it produces a window
00:31 - um just a blank empty window on the
00:32 - screen which you can close by clicking
00:35 - the cross in the
00:37 - corner so the way the way I put this
00:40 - together originally was by searching for
00:41 - sample code on Google I searched for
00:44 - stuff like sdl tutorial and I found a
00:48 - tutorial that did the beginnings of what
00:51 - I want I found several tutorials
00:53 - actually which was to create an sdl
00:55 - program that runs in a window and does
00:58 - uh pixel a um actually accesses the
01:02 - pixels does pixel manipulation pixel
01:06 - access and uh then I I took out the the
01:09 - basic bits of that tutorial bit by bit
01:12 - so first I worked on getting a window on
01:15 - the screen and then I worked on um
01:17 - setting pixels on that window and so on
01:19 - and I proceeded from there so uh that's
01:22 - the strategy I'd recommend to you and
01:25 - especially uh if you've got if you got
01:27 - if you want to create a program that
01:28 - does something that you're not sure if
01:30 - you're going to be able to do like
01:31 - create a sound for example then it's
01:34 - it's really good to look at some
01:35 - tutorials some first put together and
01:37 - really minimal tutorial that makes a
01:40 - sound so let's let's get started with
01:43 - this the first thing I need to do here
01:46 - once I've initialized my program
01:48 - correctly is um use a a function called
01:52 - sdl create window to create a window
01:55 - let's get rid of this init succeeded
01:56 - thing so um I'm going to type here uh we
02:00 - need a an object of Type sdl window
02:05 - pointer which I'll call window and we're
02:08 - going to create that by using a function
02:10 - called sdl uncore create window paying
02:14 - careful attention to the capitalization
02:16 - there now the first argument to this by
02:20 - the way if you're using a newer version
02:21 - of stdl this could have changed but you
02:24 - can easily look up information about
02:26 - these functions or flat matter look for
02:28 - more recent tutorials for example um if
02:31 - I hover over this uh we actually get
02:33 - some documentation at least in this
02:35 - version of eclipse about the function uh
02:38 - we get we get more if we actually don't
02:40 - have a syntax error there um and you can
02:43 - also just paste it into Google and
02:45 - you'll find the official sdl
02:47 - documentation plus a load of tutorials
02:50 - as well so um it's it's really handy to
02:52 - do that so the first the first argument
02:56 - here is um it's the string it's just the
02:59 - title of the window so let's call this
03:01 - particle fire
03:04 - explosion second argument um if I
03:07 - remember rightly the second and third
03:09 - arguments enable you to position the
03:11 - window and I'm going to use a special
03:13 - constant from stlh called sdl window PA
03:21 - undefined so hopefully I've remembered
03:23 - that correctly and if not I'm going to
03:25 - have to check when we failed to compile
03:28 - this let see if I can format that now
03:31 - the next arguments are the screen width
03:33 - and the screen height and I'm going to
03:36 - have to refer refer to those again later
03:38 - in my program so I'm going to create
03:40 - constants with those values let's put
03:42 - these at the top of main variables you
03:44 - try to declare as close as possible to
03:46 - where you need them but often with
03:49 - constants um you'll put them uh
03:51 - somewhere near the top of a function or
03:54 - perhaps more often you'll make them um
03:57 - static public me of a class because you
04:02 - need to use them in multiple
04:04 - places uh so let's let's say
04:06 - here um const int screen width I'll set
04:12 - that equal to 600 this is actually going
04:15 - to be the size of the window actually
04:17 - let's make it
04:18 - 800 um but I'm calling it screen width
04:20 - and Screen
04:22 - height just because um I may well change
04:25 - this at some point in the future to run
04:27 - full
04:28 - screen uh but it will will in this
04:30 - program actually be the the window size
04:33 - so I'm going to paste that in here uh
04:35 - I've chosen
04:37 - 8600 um because well it probably doesn't
04:40 - matter what size we create the window
04:43 - but um there are certain standard screen
04:46 - resolutions that computers used to use
04:49 - historically and that modern computers
04:51 - are usually capable of switching into if
04:54 - you do decide to create a full screen
04:56 - program you've actually got to get your
04:58 - computer to switch it's Graphics mode
05:00 - and there's only certain modes that it
05:02 - can switch into and those are um things
05:06 - like 800 by 600 which is a standard sort
05:09 - of
05:10 - mode um so I'm going to I'm going to
05:13 - just pick that just CU it's kind of
05:15 - traditional and because if we made this
05:16 - run full screen it's likely that our
05:19 - computer could support this particular
05:22 - resolution and the final uh the final um
05:27 - argument that we have to supply here to
05:28 - s sdl window is going to be
05:33 - sdl window
05:37 - shown and this is um at this point in
05:42 - crate window if we hover over it here we
05:44 - can see that we can supply various flags
05:46 - for the last item that um that alter the
05:50 - window in various ways and although it
05:53 - doesn't seem to say here as far as I can
05:55 - see if you look at the oh it does
05:57 - actually yeah no it doesn't if you look
05:59 - at the um API document which I just
06:02 - searched for uh you can actually find
06:05 - the STL window
06:07 - shown basically means don't alter the
06:10 - window just create a normal sort of
06:12 - window so that's that's what I want here
06:14 - so I didn't put this together I didn't
06:16 - figure this out by looking at the API
06:17 - document I I figured it out by looking
06:19 - at tutorials but the API document will
06:22 - often help you it'll help you to
06:24 - understand what you're typing and it's
06:26 - really really useful when you do this um
06:29 - if you look at tutorials to type line
06:31 - lines out by yourself cuz even if you
06:33 - don't completely understand what you're
06:35 - typing it really helps hugely to um to
06:39 - get it into your mind and it's it's kind
06:41 - of a way of um pushing yourself to
06:45 - gradually understand the code if you
06:47 - actually type it out yourself so that's
06:49 - why I always type stuff out myself
06:52 - rather than just copy and paste it whale
06:54 - from tutorials especially like the
06:57 - second or third time I do it first time
06:59 - I may be tempted to copy and paste but
07:01 - typing out is really good so now uh we
07:04 - need to check to see if that window is
07:06 - null or not because if sdl window can't
07:09 - create a window for some reason it will
07:12 - return null so I'm going to say if
07:16 - window is equal to null null is a
07:19 - constant which is often used in C++ it's
07:21 - defined in uh standard libh stdlib.h
07:25 - which sd. probably includes or else
07:30 - if not um then uh it probably defines it
07:34 - um itself but it's common to use this um
07:37 - with a lot of different apis so let's
07:40 - say if the window is null we're going to
07:43 - call
07:45 - sdl
07:48 - quit and we're going to return let's say
07:51 - two so usually if your program runs okay
07:54 - you return n and otherwise you usually
07:57 - return an like a positive integer to
08:00 - indicate sort of what's happened and you
08:02 - will only see this return code if you if
08:05 - you run your program in some fancy way
08:08 - in your operating system that enables
08:10 - you to get the return code from the
08:12 - program so it's not really that useful
08:14 - but um the main thing is just um it's
08:18 - just kind of traditional to return a
08:19 - nonzero integer if your program fails
08:22 - but it would still work if you just did
08:24 - return n and we're probably never going
08:26 - to you're probably never going to
08:28 - actually examine that Eric but you could
08:31 - um now if you look at the API document
08:34 - you find that you can get more
08:36 - information about what went wrong if STL
08:39 - doesn't initialize properly using stdl
08:41 - get error so we could output that using
08:44 - seal this I presume returns a string
08:48 - here it's being output using print F
08:51 - print f is a stands for print format and
08:54 - that's actually an old C function but um
08:57 - old habits die hard and C++ plus
08:59 - programmers often use print F when they
09:03 - probably should be using SE out in some
09:05 - ways print f is nicer than SE out I have
09:08 - to say um SE out can sometimes be a
09:12 - little bit
09:13 - cumbersome so um this is actually worth
09:15 - learning about but you can just copy
09:18 - this line and paste it in to your
09:20 - program um if you want to and you have
09:22 - to include uh STD
09:26 - stdio.h standard input output. as well
09:29 - if you want to use print F or you could
09:31 - just use C out with sdl get error but if
09:34 - your program isn't created that will
09:36 - enable you to get more information about
09:37 - what what went wrong and potentially you
09:40 - can type that information into Google
09:42 - and try to find other people who've got
09:44 - that same
09:46 - problem so if we initialize the window
09:48 - correctly before we quit a program we
09:50 - have to call
09:52 - sdore destroy
09:54 - window um paying close attention as
09:57 - always to capitalization because C++ is
10:00 - case sensitive and we Supply it with the
10:02 - pointer to the window object and we
10:05 - should call that as well actually yeah
10:07 - if if we I was going to say we should
10:09 - call it here but that's wrong if we
10:10 - can't create the window of course we
10:12 - don't need to destroy it that would be
10:15 - um a very bad idea probably um it may
10:18 - even crash if you try to if you pass a
10:21 - null pointer to this function I don't
10:22 - know but if the window is created
10:24 - successfully and we don't return here we
10:26 - want to destroy it which I guess close
10:29 - closes it and cleans up maybe cleans up
10:31 - some resources and call stdl quit which
10:34 - again will clean up any resources that
10:37 - um the stdl is
10:40 - using now uh this isn't quite enough to
10:43 - put a window on our screen uh because at
10:46 - the
10:48 - moment um we just we will just be
10:50 - creating the window and immediately
10:52 - destroying it immediately going on to
10:54 - end the program so I doubt that we'd see
10:56 - a window if we run this what we need now
10:59 - next is we need our game
11:02 - Loop um so in games and you have a a
11:06 - similar Concept in graphical user
11:08 - interface goey programs as well in games
11:11 - you have a thing called a game Loop uh
11:13 - which will be a a loop that will run for
11:18 - as long as the the game is running and
11:21 - it it will do stuff like um well in in a
11:24 - case of this program where we're going
11:25 - to deal with a load of particles we're
11:27 - going to update the position i s or
11:30 - states of particles the color or
11:32 - whatever we're going to draw our
11:35 - particles and we're going to check for
11:39 - um messages or events you could say what
11:43 - messages and events are are um if the
11:46 - user clicks a window or presses a button
11:49 - when a window program is active or does
11:51 - anything involving the window clicks a
11:53 - button on the window or something we say
11:55 - that raises an event and uh some sort of
11:58 - data structure will be filled in with
12:00 - information about what's happened we
12:02 - need to call some sort of function that
12:05 - checks if any events are waiting to be
12:07 - processed and we can then examine those
12:09 - events and see what they are so an event
12:12 - is something that we say is raised by
12:14 - the user doing something uh most of the
12:17 - time or by something happening involving
12:19 - a window we'll see how that works in a
12:22 - minute in um GUI programs uh you have a
12:25 - similar idea called the event Loop which
12:27 - again has to it has to run a loop which
12:31 - processes your events things that are
12:33 - happening in the window as well as give
12:35 - the the kind of subsystem a chance to
12:38 - update the window if it's like hidden by
12:40 - another window or something it has to be
12:42 - re redrawn appropriately and so
12:46 - on um now this is an infinite Loop the
12:50 - way I've written this at the moment uh
12:52 - what I'm actually going to do is create
12:53 - a Boolean variable which I'll call quit
12:56 - and I'll set that equal to uh fults
12:59 - and I'm going to do this Loop while quit
13:03 - is false in other words while not quit
13:06 - or I could say while quit equals equals
13:08 - false or while quit equals equal uh
13:12 - while quit is not equal to true and that
13:15 - those are all kind of the same thing so
13:17 - while not quit while quit is false I'll
13:19 - do the loop and that means that if I set
13:21 - quit to True anywhere in this Loop then
13:25 - that's going to make the loop quit which
13:28 - is what I want because the next thing I
13:30 - have to do is um this is going to
13:34 - execute as rapidly as possible because
13:36 - we want to be able to update the
13:38 - positions of particles and redraw them
13:40 - as quickly as possible to create a
13:43 - smooth
13:44 - animation uh so um what I need to do
13:48 - every time the loop runs is is not only
13:51 - update the positions of particles and
13:53 - redraw them I also need to process the
13:56 - event queue so in between one on
13:59 - iteration of this Loop and the next it's
14:02 - possible uh even though it's going to
14:04 - hopefully execute really quickly like 30
14:06 - times a second or something um it's
14:09 - possible that multiple things could have
14:10 - happened and sdl provides us with a way
14:14 - of checking multiple events uh one after
14:18 - the other and we're going to do that in
14:19 - a loop which is going to be nested
14:21 - within the game Loop what we're going to
14:23 - do here is we're going to say while sdl
14:26 - uncore pole events
14:33 - so Paul events here um it's not it's not
14:36 - being resolved at the moment because
14:37 - this is actually going to fetch the
14:39 - latest event or um I guess it fetches
14:44 - the first event in the Quee of possible
14:46 - events that have built up since the last
14:48 - time we called it and it fills in
14:51 - information uh in a in an object of type
14:55 - sdl event let's declare that so normally
14:58 - if I want to use something here which I
15:00 - do um if I want to supply an argument to
15:03 - sdl pole events which has to be a the
15:05 - address of a
15:07 - variable normally I would declare it as
15:09 - close as possible to this Loop but
15:11 - because I don't want to be um constantly
15:15 - redeclaring this variable in effect when
15:17 - the loop executes I'm going to declare
15:19 - it outside of this Loop uh just because
15:22 - I suspect although I'm not sure that
15:25 - that make may make my program more
15:27 - efficient rather than if I declared this
15:29 - within the loop um and uh and C++ will
15:33 - be forced to constantly like destroy
15:36 - this variable and recreate it every time
15:38 - Loop
15:40 - iterated so we need to supply the
15:43 - address of this whatever it is to sdl
15:46 - pole events um so sdl pole events will
15:49 - fill in information about what events
15:51 - have happened since last time it was
15:52 - called into this variable uh so for that
15:56 - reason it needs its address so we're
15:58 - going to say addess event
16:01 - there um I'm getting an error here it's
16:03 - possible it's called poll event there we
16:06 - go now see it may appear like I have an
16:10 - encyclopedic U knowledge of stdl but I
16:13 - really don't the only reason I can
16:15 - remember this is because I've typed it
16:16 - over and over again um in the course of
16:20 - writing programs recently especially and
16:23 - in the course of uh making these
16:25 - tutorials I think this is the fourth
16:27 - time I've recorded this video something
16:28 - something went horribly wrong each
16:30 - previous time this time I'm keeping my
16:32 - fingers crossed so now it's like stuck
16:34 - in my head but um as a as a programmer
16:37 - you're not expected to remember an a
16:40 - particular API unless you're working
16:41 - with it day in day out for months or
16:43 - years or something and indeed I don't
16:45 - remember STL that well but I've somehow
16:48 - got this in my head now without even
16:50 - meaning to cuz I've typed it so many
16:52 - times okay
16:54 - so this is going to this Loop is going
16:57 - to is going to keep iterating waiting as
16:59 - long as sdl Paul event returns true and
17:02 - it's going to do that as long as there's
17:04 - an event um waiting to be
17:08 - processed uh so um when it finds an
17:11 - event that um can be processed it
17:14 - returns true which keeps the loop going
17:17 - and it fills in information about that
17:19 - event and this event
17:21 - variable so every time we do the main
17:24 - game Loop game Loop which we hope will
17:26 - execute something like 30 times a second
17:28 - or even more we're going to also Loop
17:31 - through all the waiting events and
17:33 - process them but the only one we're
17:35 - actually going to use in this
17:37 - tutorial is um we're going to um well
17:41 - we're going to access the type member
17:45 - which is some sort of public um member
17:47 - variable of this
17:49 - event um uh I think it's technically a
17:52 - union which we haven't looked at um uh
17:55 - but we can think of this as a struct we
17:58 - haven't looked to structs either but a
18:00 - struct is the same as a class it's just
18:02 - that in a struct it's member variables
18:06 - are public by default whereas if you
18:09 - don't if you don't um specify public or
18:11 - private in a class the member variables
18:14 - or methods are private by default but
18:17 - sometimes for the sake of efficiency you
18:19 - want to be able to access directly
18:22 - member variables of a class or struct um
18:26 - even though that breaks encapsulations
18:29 - sometimes especially in games this is
18:31 - something that you do for the sake of
18:32 - efficiency and that's what we're doing
18:34 - here um I meant to type EV I meant to
18:37 - put event. type here actually and we're
18:40 - going to see if that's equal to s
18:43 - dlore
18:45 - quit now the the quit event is raised if
18:50 - you click whatever decoration on your
18:53 - window closes the window so when Windows
18:56 - um if you click the cross in the corner
18:58 - of the window that raises an sdl quit
19:00 - event which we put into the event queue
19:03 - which this will then retrieve and we can
19:06 - then check and see oh yeah we've got an
19:08 - sdl quit event it's time to quit the
19:10 - program and we'll do that just by
19:11 - setting quit equals true which will then
19:15 - terminate at alter Loop and then we'll
19:17 - go through to um to wind down the
19:21 - program let's see if this works so let's
19:24 - build
19:26 - this and um I've done something
19:28 - something slightly wrong here what did I
19:31 - do
19:32 - redefinition of um screen width oh yeah
19:38 - I didn't spot that I should have put
19:40 - screen height here apologies if you
19:44 - spotted that and we wondering what on
19:45 - Earth I was
19:48 - doing well it's hard to get through this
19:51 - without making some mistake but
19:53 - hopefully I'll get there in the end
19:54 - sorry about that um yes so I meant to um
19:58 - I have this um 600 by um 800 by 600
20:03 - pixels okay this window now let's check
20:06 - if this finally runs so I'm going to
20:08 - click run
20:11 - here and it doesn't seem to like that
20:15 - let's make sure I built
20:17 - it and we can run
20:21 - it wow so that's a little strange one
20:25 - thing you can do um if your bill gets
20:27 - into a tangle is go to Project Clean
20:30 - that will delete your final program and
20:31 - all of your compiled object files and
20:35 - sometimes that helps and then you can
20:37 - build it
20:40 - again let's go to build
20:44 - all just to make sure it really is
20:46 - building
20:48 - everything and
20:50 - let's just to be doubly sure we we're
20:53 - trying to run the right project let's
20:54 - right click it and go to run as local
20:57 - C++ application
20:59 - and now finally we've got our window so
21:01 - I don't know what the problem was there
21:03 - but um it's good that it came up because
21:05 - I meant to show you this um clean build
21:08 - thing so it's just a blank screen which
21:10 - I actually find quite exciting because
21:12 - it's full of potential now now we can
21:14 - begin to manipulate the pixels in this
21:17 - window um and you may hear my computer
21:21 - working a bit that's because unlike a
21:23 - normal graphical user interface program
21:26 - which will spend a lot of time honestly
21:29 - idling uh so not using up CPU a game
21:32 - like this let's click the cross in the
21:35 - corner of the window here so it quits a
21:38 - game like this will will as I say it
21:40 - will try to update everything as often
21:42 - as possible so we've got this Loop
21:44 - executing frantically in here and that's
21:46 - why even though we're not doing anything
21:49 - you hear the perhaps my computer's fan
21:51 - struggling a
21:53 - bit so um I think that's it for this
21:57 - tutorial
21:59 - uh yeah as I say that Project Clean we
22:02 - talk about cleaning a build or doing a
22:05 - clean build and that means deleting all
22:07 - your compiled objects and your final
22:09 - program youro files and then recompiling
22:13 - so you need to clean it and then go to
22:14 - build project and sometimes that will
22:15 - help you get out of various Tangles so
22:19 - that's it for this tutorial and uh in
22:21 - the next tutorial we'll look we
22:23 - hopefully we'll get actually something
22:25 - drawn on this window like uh at least
22:27 - some pixels or maybe solid a solid block
22:29 - of color or something like that so until
22:32 - next time happy
22:33 - [Music]
22:49 - coding