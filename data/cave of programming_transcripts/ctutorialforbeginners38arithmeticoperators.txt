00:16 - hello this is John from cave of
00:20 - programming calm in this tutorial we're
00:22 - going to take a look at arithmetic in
00:25 - C++ we've seen a lot but not all of this
00:29 - before we're going to take a bit of a
00:31 - closer look here before we get on later
00:33 - it's looking at pointer arithmetic so
00:38 - plus/minus and multiplication don't
00:41 - really need any more explanation I don't
00:43 - really think that we've already gone
00:44 - through but it's a bit of a gotcha with
00:46 - division which is that let's say do int
00:50 - value 1 equals 6 divided by 2 and then
00:56 - do see out value on this does what you'd
01:01 - expect so if we run this then we should
01:04 - get 3 but look what happens if we do an
01:08 - 7 divided by 2 we still get 3 even if we
01:14 - change this to double double value 1
01:17 - equals 7/2 and we run this still going
01:21 - to get 3 the reason for that is whenever
01:23 - you divide an integer by an integer in
01:26 - C++ it will always discard the remainder
01:30 - it won't do floating point division it
01:32 - will do integer division and just throw
01:34 - away 2 remainder if you want this to be
01:37 - a floating point division one of these
01:41 - has to be a floating point number so
01:44 - like if we had 7 point nor divided by 2
01:46 - that would work and sometimes you can't
01:51 - do that for example because this could
01:56 - be a variable it could both be variables
01:58 - or but like an easier way to tackle this
02:01 - it's just a cast one of them to a double
02:03 - or a float so we can type and doubling
02:07 - round brackets before 7 and we call that
02:09 - casting 7 in this case to a double and
02:13 - then we get true floating point division
02:17 - and we get 3.5
02:20 - casting is is something that's soft and
02:23 - useful we can use it to come to convert
02:27 - certain kinds of types into certain
02:29 - kinds of similar types you can also cast
02:32 - a double to an int so let's say we have
02:35 - int value two equals seven point three
02:40 - we can actually do that but the compiler
02:44 - will issue a warning it's possible some
02:48 - compiler might even throw an error my
02:50 - compiler just gives a warning with this
02:51 - I'm using a new here to get we got a
02:54 - warning there it seems to have now
02:57 - vanished for some reason but it did
02:59 - actually run and we get seven so it's
03:02 - just it's just thrown away the remainder
03:05 - because we had a double here and we're
03:06 - trying to put it into an int but to get
03:09 - rid of the compiler warning we can cast
03:11 - this explicitly to an int and then and
03:15 - we will still throw away two remainder I
03:17 - will throw away the stuff after there
03:19 - sorry after there after the decimal
03:21 - point and we'll get an integer so this
03:24 - gives us seven and there's no compiler
03:26 - warning when it compiles us we've got
03:30 - this here yeah that's just saying us
03:33 - from something earlier by looks about
03:35 - this different project okay so there's
03:37 - no warning here so this won't do
03:40 - rounding you won't Rand up or down all
03:42 - it does is throw away two stuff after
03:44 - that after the decimal point if you want
03:47 - to do rounding you'll have to use a
03:48 - special maths function to do that
03:54 - and we've also got a bunch of operators
03:56 - like this plus equals minus equals
03:59 - divide equals x equals and also mod
04:02 - equals and we'll look at mod shortly but
04:05 - let's take the simplest version of this
04:08 - let's say we've got int value 3 equals
04:12 - let's say 8 if we do value 3 plus equals
04:18 - 1 that's the same as doing value 3
04:22 - equals value 3 plus 1 or is the same as
04:28 - value 3 plus plus all of these three
04:31 - things are equivalent so if we do see
04:34 - out now value 3 what we get is it's
04:40 - going to be 9 so let's run this and it
04:44 - says 9 so the value in this lies in
04:49 - there the reason this normally if we
04:53 - wanted to actually do this would do this
04:54 - because it's a shortest syntax value 3
04:57 - plus plus but we can add all the stuff
04:59 - on here and we can also use this with
05:01 - different arithmetic operators so let's
05:04 - take another example int value 4 equals
05:08 - 8
05:09 - again sale maybe 10 and value 4 divide
05:14 - equals 5 that's the same as doing value
05:19 - 4 equals value 4/5 so these divide
05:27 - equals x equals negative equals that are
05:31 - the same as these expressions these
05:34 - kinds of expressions they just avoid you
05:36 - having to repeat the variable so we're
05:39 - just assigning we just with here we're
05:42 - doing the division value 4/5 and then
05:45 - signing into value 4 so that is often
05:49 - quite handy just because it's a bit
05:51 - quicker
05:52 - type really so let's let's just run this
05:56 - and we'll see that it's going to be
05:57 - equal to two and the mod operator is
06:01 - another thing I want to show you again
06:03 - this is very very useful for various
06:06 - reasons and some of which we'll probably
06:09 - see later on in these in this tutorial
06:11 - series what mod does is it does integer
06:14 - division and then gives you just the
06:15 - remainder so let's say we have int value
06:19 - 5 equals 12 mod 5 so this is called
06:26 - modulus modulo which is mod 4 short then
06:29 - what we get there is 2 so let's do value
06:33 - 5 here so it's 12 divided by 5 and then
06:38 - just take the remainder and store in
06:40 - value 5 that's what mod does this % so
06:45 - here we get 2 of course if it was 13 it
06:48 - would be 3 and so on let's just let's
06:53 - just have long as we've got 3 their
06:58 - operators they have they have always a
07:02 - precedence excuse me so if you write out
07:06 - you can write out complicated
07:08 - expressions like say double double and I
07:16 - don't know I'll just call it equation
07:19 - equals 5.3 5.3 divided by 4 plus 2 times
07:29 - 6
07:30 - I hope we can do see out on that
07:34 - equation and C++ will figure out the
07:40 - meaning of this and because certain
07:44 - operators have higher precedence some
07:46 - others so in this case division and
07:50 - multiplication have a higher precedence
07:53 - than plus which means that they will be
07:55 - done first so that's the same as if we
07:58 - if we put round brackets around these
08:01 - bears that makes it clear that first
08:06 - we're doing these and then we're doing
08:08 - the plots so we expect the same as all
08:10 - now 13.3 if I've got my operator
08:13 - precedence correct here there we go it's
08:18 - yeah it's basically the same more or
08:21 - less but this is bad to write
08:28 - expressions that don't have brackets
08:31 - around them and to rely on operator
08:33 - precedence because it's just not easy to
08:38 - remember always which order the
08:40 - operators will be applied in and in
08:43 - general most of the time it's much
08:45 - better if you have a complicated
08:46 - expression like this to put and round
08:48 - brackets around relevant bits so that
08:51 - this this could be even more complex we
08:54 - might want to do I don't know and mod 2
08:58 - and we might want to do all of this
09:00 - stuff first so here we're saying divide
09:04 - 5.3 by 4 then do mod 2 on it and so get
09:10 - a remainder after we divide by 2 and
09:13 - then add to that and do 2 times 6 and
09:18 - then add 2 times 6 to it so and but it's
09:22 - a lot clearer we've got a problem there
09:26 - because we're playing mod to a floating
09:28 - point let's do something like + 5
09:33 - and I'll change this to a double just so
09:35 - that we have a double result let's try
09:38 - building that as if that works build
09:40 - project and run so it's always much bad
09:46 - better to put brackets in even if they
09:48 - have to be nested nested brackets are
09:50 - not very readable but they're a lot more
09:52 - readable than if we had the same
09:53 - expression without the brackets so with
09:56 - the brackets we can see okay first we
09:58 - got to do that then we're going to do
10:00 - that and we've also got to do this and
10:02 - then we can add those two things
10:04 - together but if we had that without the
10:07 - brackets it would look like this which
10:14 - yeah for me is is getting to be really
10:18 - quite unreadable because I'm not really
10:19 - sure which has precedence division or
10:23 - mod and I know that multiplication and
10:27 - division have precedence over plus but
10:29 - is getting ridiculous now so don't do
10:32 - this always put round brackets in to
10:35 - make your expressions more readable so I
10:39 - think that's everything that I want to
10:41 - cover in this tutorial I'm going to give
10:42 - you a couple of exercises to help you to
10:45 - get this into your mind one is take a
10:50 - large number of seconds like more than
10:53 - several hours and convert it to hours
10:58 - minutes and seconds so you can do that
11:01 - in various ways using a combination of
11:04 - arithmetic 'el operators used
11:07 - judiciously try to do it in the most
11:09 - efficient where you can but if you can
11:11 - get the right result at the end of the
11:13 - day and then you've succeeded and you
11:15 - can always check it by multiplying
11:17 - seconds by 60 adding it to minutes times
11:22 - sorry multiplying minutes by 60 added to
11:25 - the number of seconds and multiplied
11:27 - hours by 3600 and add that add them all
11:31 - together to get the number of seconds
11:32 - back again and chetley you get the
11:34 - number of seconds that you originally
11:36 - had when you convert it back into
11:38 - seconds if you see what I mean so that's
11:41 - that's a good
11:42 - that's a good little exercise and
11:44 - another exercise is write a for loop
11:47 - that iterates let's say 10,000 times
11:53 - I'll put a dot on the same line on the
11:57 - same line so a bunch of dots one after
11:59 - the other on the same line every
12:02 - hundreds iterations so for example you
12:08 - might want to process a bunch of XML
12:10 - records you might have let's say 100,000
12:13 - XML records and you want to process them
12:15 - with a program that your ROM and command
12:18 - line and you want to show progress but
12:20 - you don't output a dot for every single
12:21 - record because you'll have a massive
12:23 - console full of huge numbers of dots
12:25 - it's better to output a dawn
12:27 - every time you processed a hundred
12:30 - records and then the dots appear at a
12:32 - more manageable rate and to do that you
12:35 - can use the mod operator so so to do
12:42 - this to output something only every
12:45 - certain number of loop iterations you
12:48 - can do that using the percent the mod
12:50 - operator so and have a go at that and
12:53 - see if you can get it to work I'll leave
12:56 - you with those two exercises for this
12:58 - time so until next time happy coding
13:13 - you