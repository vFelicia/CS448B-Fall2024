00:00 - hello this is John from cave of
00:03 - programming comm and this is a tutorial
00:05 - on serialization in Java to tackle this
00:10 - tutorial it's good if you already know
00:13 - not only lots of basic Java but also how
00:18 - to read and write text files in Java
00:20 - because we're going to kind of build on
00:22 - that here so if you've seen my previous
00:25 - tutorials we've already covered reading
00:27 - or writing text files another thing that
00:29 - I'm going to use here is I'm going to
00:31 - use the try with resources syntax that
00:34 - was introduced in Java 7 so I'm going to
00:38 - read and write files in this tutorial
00:41 - using a Java 7 syntax which I've also
00:45 - covered in a previous tutorial and if
00:47 - you're using Java 6 you'll need to use a
00:49 - slightly different form of exception
00:52 - handling a kind of old version which you
00:54 - can find again in previous tutorials
00:56 - that I've created on reading and writing
00:59 - files
01:00 - so with those caveats let's proceed now
01:05 - I've already created a project in
01:06 - Eclipse here and I've created a few
01:08 - files serialization I should say what it
01:13 - is is if you take an object and you
01:15 - Syria serialize it it means turning that
01:18 - object into a kind of binary form into
01:22 - binary data and if you deserialize an
01:26 - object it means taking binary data and
01:28 - turning it back into an object and what
01:31 - we're going to look at here is
01:33 - serializing two files so which is often
01:36 - what people mean when they say
01:37 - serializing in java so we're going to
01:41 - take objects of this person class i've
01:44 - created and we're going to write them to
01:46 - a file and then we're going to see how
01:48 - we can read them back from that file so
01:51 - taking the objects out of the file and
01:53 - turning them back into objects in a java
01:55 - program now normally this would be both
01:59 - of those reading or writing will be part
02:00 - of the same program so if you have a
02:02 - program with let's say a open facility
02:05 - and a save facility then you could
02:08 - implement those if you wanted using
02:10 - serial serialization but rather than
02:13 - create a whole massive GUI program or
02:16 - some kind of menu system here to
02:18 - demonstrate serialization I've got two
02:20 - separate programs I've got one main
02:23 - method here in this read objects class
02:25 - and I've got a different main method in
02:28 - a write objects class so what I'm going
02:31 - to do is I'm going to create one little
02:33 - program that writes objects to a file
02:35 - and another program that reads them from
02:37 - the file but but bear in mind that
02:39 - normally reading and writing will be
02:41 - part of the same program and of course
02:45 - in Java you can happily have more than
02:47 - one main method in your program even
02:50 - though you then got to pick one main
02:52 - method as a starting point for your
02:54 - program when you actually run it but
02:56 - you're allowed to define as many main
02:57 - methods as you want and it's not
02:59 - uncommon to have a Java program that
03:02 - will have more than one main method
03:05 - because you might for example have your
03:07 - normal entry point of your program and
03:09 - you might have like a test main method
03:11 - that tests stuff as well for example so
03:14 - we're going to make use of that here and
03:17 - what I've got here is firstly I've got
03:20 - this person class that I've created and
03:22 - it's just a really simple class again
03:25 - building on previous knowledge though I
03:27 - hope you've observed absorbed by now
03:30 - we've got a simple person class with
03:33 - just some simple data a an ID and a name
03:35 - we've got a constructor that allows us
03:38 - to set that data and I've given it a two
03:40 - string method so that if we call system
03:43 - dot out dot println and pass it a person
03:46 - object of this class it will display in
03:49 - a kind of nice way I've got a right
03:53 - objects program here and what this is
03:55 - doing at the moment is it just says
03:57 - writing objects it creates an object
03:59 - what it creates two objects of the
04:02 - person class with different IDs and
04:05 - different names and then it's just using
04:07 - sysout to display those objects so if I
04:10 - run that we get this down here and I've
04:14 - got this read objects program and all
04:16 - this is doing at the moment is it just
04:18 - displays the text reading objects but
04:20 - doesn't do anything more so first let's
04:23 - concentrate on writing our objects to a
04:25 - file so I'm going to take these two
04:26 - object
04:27 - cr2 little simple objects with some data
04:30 - in them and write them out to a file now
04:34 - to do that I'm going to use a class Corp
04:37 - called file output stream let's call
04:42 - that FS and set that equal to a new file
04:46 - output stream and this class that's a
04:50 - stream data to a file as you might
04:52 - expect streaming just means kind of
04:54 - sending data sequentially to a file so
04:58 - we need to supply an argument to the
05:01 - constructor here which is the name of
05:02 - the file to stream to and I could supply
05:05 - full file path here but what I'll do is
05:07 - I'll just give it a simple name let's
05:09 - call it people bin the extension doesn't
05:12 - matter you can call it what you what you
05:14 - want but bin or data are typical for
05:17 - binary files it could be anything and
05:20 - although and if I just give a name
05:23 - without a full path then we'll write
05:25 - that to the working directory of this
05:27 - program and the working directory if I
05:29 - run it in Eclipse here will be the
05:31 - project folder here so I'll be able to
05:33 - see it down here in fact here's one I
05:35 - created whoops is one I created earlier
05:38 - let's go back to eclipse and I'm just
05:41 - going to delete that now because I wanna
05:43 - create it from scratch
05:45 - okay so let's import file output stream
05:49 - so I'll click this warning this error
05:51 - here and go to import file output stream
05:53 - now the second thing we've got to do is
05:55 - handle the exceptions and at this point
05:57 - you could go to surround with try-catch
06:00 - or even add throws declaration and throw
06:03 - the exception out of your main method
06:04 - what I'm going to do is use Java 7
06:07 - syntax that try with resources that I
06:10 - described in a previous tutorial I'm
06:11 - going to type try here and surround the
06:14 - whole thing getting rid of the semicolon
06:16 - with brackets and then put the curly
06:19 - brackets in and then if I click the
06:21 - warning I can go to add catch Clause and
06:24 - we can catch the exceptions that this
06:26 - throws and the advantage as I described
06:30 - previously in a previous tutorial of try
06:33 - with resources is that this syntax will
06:36 - automatically call the close method at
06:39 - this
06:39 - object so it's going to call FS closed
06:43 - if you use a kind of Java six or before
06:47 - type try-catch block you need to
06:50 - remember to call FS closed later on in
06:53 - your program it's really important but
06:55 - here it will be called automatically if
06:58 - I put it all in a try block like that
07:00 - it's just that this is only possible in
07:02 - Java 7 or later okay so now this will
07:07 - cut a file not found exception which I
07:08 - guess will be called if we can't create
07:12 - this file and i/o exception can be
07:15 - thrown as well and that is going to be
07:17 - thrown if we can't write to this file
07:20 - for some reason so if you're going to
07:22 - write a robust program to distribute to
07:24 - end-users you need to of course handle
07:26 - these exceptions gracefully by popping
07:29 - up an alert or about putting a message
07:31 - or something but here I'll just leave
07:33 - the stack trace in because I just want
07:35 - to demonstrate the principle here so
07:37 - we've got a file output stream and the
07:39 - next thing we need is object output
07:42 - stream which are called OS I'll set that
07:46 - equal to a new object output stream and
07:49 - we need to pass to the constructor of
07:52 - that the file output stream object that
07:55 - we're going to use to allow this object
07:57 - output stream to stream data to our file
08:00 - here let's add the import by clicking
08:04 - the arrow I'm going to import up your
08:05 - stream now here I need to call a closed
08:09 - method myself say OS close of this
08:13 - object output stream otherwise I'll get
08:15 - a warning there I feel that there must
08:19 - be a more elegant way of dealing with
08:21 - this dealing with the exceptions here
08:23 - and closing things but this is the most
08:28 - elegant way that I can figure out so
08:30 - we'll stick with it here at least it it
08:32 - works but it's just kind of annoys me
08:34 - that this is being closed automatically
08:36 - and this isn't but I don't want to start
08:38 - nesting exceptions I personally really
08:42 - hate that looks so ugly so at least
08:45 - we've not got any nested exceptions here
08:48 - we just have to call closed ourselves on
08:50 - this even though the close method is
08:52 - being called automatically for this one
08:55 - but anyway so pretty simple and if you
08:58 - if you're used to writing text files
08:59 - you'll recognize this syntax we're just
09:01 - kind of taking some kind of output
09:04 - stream and passing it some kind of file
09:07 - output stream and using that to write to
09:10 - a file kind of a Russian doll type thing
09:12 - with one object being passed to another
09:14 - now we can use this object output stream
09:17 - to write these objects to a file so in
09:20 - between
09:21 - obviously in between opening and closing
09:23 - it so here we can say OS dot right and
09:27 - if I type right you can see in the
09:29 - autocomplete that we've got methods for
09:32 - writing all kinds of stuff here all
09:33 - kinds of data like right char and right
09:36 - double and so on you can write whatever
09:39 - data and objects you like to your file
09:42 - you can serialize whatever date you want
09:44 - you just do it sequentially and here
09:47 - what I'm going to do is I'm just going
09:49 - to serialize these two objects one after
09:51 - the other but there's no problem in
09:53 - mixing different objects or you could
09:55 - write objects and your own custom
09:57 - objects and write integers or strings or
09:59 - whatever you like you just do it one
10:01 - after the other so you can serialize
10:04 - whatever you like here let's say because
10:07 - I want to write an object of a type I've
10:09 - declared I'm going to use the right
10:11 - object method here and I'm going to pass
10:15 - it one of my objects so I got this
10:17 - object the variables called Mike and it
10:20 - contains the data this ID and this name
10:24 - and and once we've written that let's
10:26 - write another one let's say OS dot right
10:28 - object and let's write my sous object so
10:33 - this one here and that is enough to
10:37 - serialize the object to a file except
10:39 - for one important thing if I run this
10:42 - now what we'll get is a not serializable
10:46 - exception and it's mentioning my class
10:49 - here which I call person now there's
10:52 - this kind of classic interview question
10:55 - or
10:57 - job interview question or exam question
10:59 - how do you make a class serializable in
11:03 - java and the answer is very simple in a
11:07 - way so I'll go to my class here I want
11:09 - to make this class serializable in other
11:11 - words I want to make it possible to
11:13 - serialize this class just like I can
11:15 - serialize strings and doubles and all
11:17 - that sort of thing all I have to do is
11:19 - implement this serializable interface so
11:23 - how do you make an object how do you
11:24 - make a class serializable implement the
11:27 - serializable interface so I just need to
11:29 - type here implements serial is double
11:33 - and whoops I need either and I need to
11:37 - import serializable capital S because
11:40 - it's the name of an interface and
11:42 - interfaces in classes always start with
11:44 - a capital letter in Java and now hey
11:48 - presto we can hopefully do this let's
11:50 - run it so notice the interface doesn't
11:52 - have any methods in it all we've got to
11:55 - do is just say that we implement it and
11:57 - we don't have to do anything else there
11:58 - and if I run this let's select write
12:02 - objects and click run and now hopefully
12:06 - well we haven't got an error so
12:08 - hopefully we've written that file and
12:10 - because I wrote it to my working
12:13 - directory of my program just with a
12:14 - simple file name now if I click on a
12:17 - project right click and go to refresh in
12:19 - Eclipse it should appear down here he's
12:23 - peopled up in don't know what that is I
12:25 - think that's something that was created
12:28 - earlier maybe I'm not really sure but
12:30 - I'll delete it anyway because this is
12:32 - what we're interested in so we've
12:36 - written that file we've written two
12:37 - objects to that file and now let's write
12:40 - some code that can read those objects so
12:41 - I'll go to this read objects little
12:44 - program here and now we want to file
12:47 - input stream instead of a file output
12:50 - stream so file input stream I'll call it
12:54 - f I equals new file input stream so
13:01 - again I need to pass it the name of the
13:02 - file that I want to read from now which
13:04 - is again people dot bin and that's
13:07 - surround with
13:09 - try again using this Java 7 try with
13:13 - resources syntax which will close this
13:15 - automatically and I'll import the class
13:19 - and add the catch clauses here we go so
13:23 - again the file not found if the file
13:25 - isn't found an IO exception input-output
13:28 - exception for if there's a problem
13:31 - reading from the file and again if you
13:34 - do if you use a different exception
13:36 - handling syntax an older-style
13:39 - you must call fi dot close don't forget
13:41 - to do that and now I'm going to create a
13:45 - object input stream as you might guess
13:49 - object input stream instead of object
13:51 - output stream like we have previously
13:53 - let's call that OS and set that equal to
13:56 - a new object input stream and pass in
14:02 - the file input stream there don't forget
14:04 - to call OS close like that and let's add
14:09 - the import and let's save that so this
14:13 - this looks fine and now I can read from
14:19 - my file so let's we're going to have a
14:21 - purse we know that we wrote two people
14:23 - objects so we're going to read to two
14:26 - person objects one after the other let's
14:28 - say person person 1 equals OS stop read
14:33 - object and because this returns a object
14:38 - the kind of grunt parent object class I
14:41 - need to cast this to the actual
14:44 - particular object that it is a
14:45 - particular type of object which is
14:47 - person and this also if we look at this
14:51 - error now this throws another exception
14:53 - let's click on that and go to add catch
14:56 - Clause so we'll catch another exception
14:58 - down here and what this is is as you can
15:03 - see you can read your object in a
15:05 - different program to the one that talked
15:07 - to the one that wrote it if you want to
15:09 - although that's not typical but we are
15:12 - doing here and that means that read
15:15 - object might read a object of a class
15:18 - that doesn't even exist in this program
15:21 - and if that happens it's going to throw
15:23 - class not found exception as it happens
15:25 - here we do have the person class defined
15:28 - in this program it's sir it's I've got
15:31 - my main methods all in the same default
15:33 - package here so there's no problem but
15:36 - this will be thrown if you try to read
15:38 - something from a file and you don't even
15:41 - have that class defined in your program
15:44 - let's read our second object so person
15:47 - person to equals but the typecasting and
15:51 - n OS read object and save that and to
15:57 - show that we've read those correctly
15:59 - let's go down here and put into this out
16:02 - person 1 and this out person 2 and say
16:10 - this and let's run it so let's go to
16:13 - make sure on read objects and click run
16:16 - and now we can see it says reading
16:19 - objects and then we've displayed our
16:22 - people and we've got the objects that we
16:24 - wrote might consume and of course we've
16:26 - got them we've read them in the same
16:28 - order that we originally wrote them in
16:31 - here so you can use this to implement
16:34 - saving and loading functionality in your
16:37 - in your programs which is which is quite
16:41 - handy I'm just going to I want to show
16:44 - you one other little thing you may have
16:47 - noticed if you've been doing some lot of
16:50 - programming in Java
16:51 - sometimes you get this warning in
16:53 - Eclipse and I'm not sure whether this is
16:56 - coming from Eclipse or from the Java
16:58 - compiler but it says the serializable
17:01 - class person in this case does not
17:04 - declare a static final serial version
17:06 - UID field of type long and to get that
17:09 - warning to go away and click on it and
17:11 - you could go to our default serial
17:14 - version UID but let's go to our
17:16 - generated serial version UID and what it
17:19 - does is it just adds this static long
17:23 - field is set to basically some random
17:27 - number and if you just want at wanting
17:31 - to go away then you can just do that and
17:32 - forget about it but
17:34 - what actually is this well let's let's
17:38 - take a look if I go to write objects and
17:42 - we'll run it so I'm writing objects and
17:45 - writing my person objects to this file
17:48 - actually I'm overwriting the original
17:51 - objects now so I'm writing them again
17:52 - and they've got this serial version UID
17:56 - now let's change this serial version UID
17:59 - to like I just changed it for two or
18:01 - three at the beginning say there and
18:03 - let's run read objects here
18:05 - so I run this and it says gives me an
18:09 - error it says invalid class exception
18:12 - and we've got some stuff complaining
18:14 - about how we try to read with this
18:17 - serial version UID but they were written
18:19 - with this serial version UID
18:21 - and indeed if I change this back to a
18:23 - for now and run my read program again
18:26 - read objects then it reads fine so all
18:31 - this is is it's an ID that in order to
18:36 - deserialize objects that you've
18:38 - previously serialized in order in other
18:41 - words in order to read objects from a
18:43 - file that you've previously written to
18:45 - the file if they've got this defined
18:47 - then it must match the class that you
18:50 - wrote with must match the class that you
18:52 - read with or vice versa I should say you
18:55 - must read with a class as the same
18:57 - serial version UID if it was defined to
19:00 - start with and all that is is a way of
19:03 - checking that you're reading with the
19:05 - exact same class that you wrote with so
19:08 - you could write to a file and then years
19:12 - later you try to use a different version
19:14 - of the program to read from that file
19:17 - and if the class has changed a lot if
19:19 - it's changed significantly at all in
19:21 - fact since since the last version you
19:25 - would change this serial version UID and
19:27 - that's one way of saying that this class
19:30 - is different you can't read this file
19:33 - with this version of the program anymore
19:36 - so by changing that you mean it means
19:40 - that you can no longer use the new
19:42 - version of the class to read from the
19:44 - file because it's just changed too much
19:45 - so if you added more ID
19:47 - or deleted these or something you could
19:50 - change this to stop people trying to
19:53 - read with that new version of your class
19:55 - as far as I know that's really all it's
19:57 - for maybe not a tremendous lot of use
20:00 - but it gives you a way of checking that
20:03 - your reading with the same class that
20:05 - you wrote with and that's all there is
20:07 - to it so I'll leave it out for this
20:10 - tutorial a lot of stuff in one tutorial
20:12 - and if you're a bit lost then you might
20:14 - want to go back and check some other
20:16 - basics like this try with resources
20:18 - reading and writing files and possibly
20:21 - defining classes and stuff like that but
20:24 - if you followed it congratulations and
20:26 - this is one of the most complicated
20:28 - things that you'll find in like the
20:31 - really sort of core of Java and it's a
20:34 - popular topic on exams and job
20:38 - interviews as well you can find more
20:41 - videos from me on wwk the program comm
20:46 - so if you go to WWE of programming comm
20:51 - you can find more free courses there as
20:53 - well as premium courses which include
20:56 - free videos that you can also view for
20:59 - free on Android and jsps Java swing and
21:04 - Perl as well at the moment actually
21:06 - spring I'm working on now so that's in
21:09 - the pipeline and yes so check that out
21:13 - and until next time happy coding