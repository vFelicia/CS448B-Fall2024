00:00 - [Music]
00:18 - hello this is John from Cave of
00:21 - programming. comom um welcome to another
00:24 - video from uh C++ for complete beginners
00:28 - in this tutorial we're going to look at
00:30 - outputting text in C++ so we're going to
00:32 - edit this uh hello world. CPP file and
00:36 - we're going to see how we can output
00:38 - text in it um so what I'm going to do
00:41 - actually is I'm going to start a new
00:42 - project let's go to file
00:45 - new C++ project and select hello world
00:48 - C++ project and let's call this out
00:53 - outputting
00:55 - [Music]
00:57 - text now at this point you're you're
01:00 - probably kind of feeling that um the the
01:03 - main program looks really crazy and um a
01:06 - really good thing to do is type it out
01:08 - yourself from scratch let's in fact
01:09 - delete all that and I'm going to type
01:12 - just the kind of essential basic program
01:16 - myself so whoops what did I do then I'm
01:19 - not sure so you need to start with um a
01:23 - hash sign like this I think in um
01:26 - America this is called a pound sign but
01:28 - um in Britain anyway we call the hash
01:30 - symbol so you need a hash symbol and the
01:33 - word
01:34 - include and then a open um curly sorry
01:38 - an open angle bracket and when I type
01:41 - the open angle bracket Eclipse
01:43 - automatically puts in the closing angle
01:45 - bracket and in the middle of that I'm
01:48 - going to type iOS
01:51 - stream um so iOS stream actually stands
01:55 - for input output stream and by the way
01:58 - don't worry too much about the stuff I'm
02:00 - telling you here what I'm trying to do
02:01 - is get you familiar with this main
02:04 - program little by little but uh the
02:07 - important thing here is just to be able
02:10 - to complete the tasks that I'm going to
02:11 - give you in this tutorial
02:13 - later so um what this is it's actually a
02:16 - file that we're literally taking from
02:19 - somewhere else and we're pting it into
02:21 - our main file before the build is run um
02:25 - that's what's happening behind the
02:26 - scenes and that's what include does but
02:28 - don't worry about that so you need that
02:31 - and then we need to say using name space
02:35 - standard and you finish this line with a
02:38 - semicolon and very often um you'll need
02:42 - to finish lines with semicolons in
02:46 - C++ that's something that you gradually
02:48 - get used to when you start you always
02:49 - forget them and you miss them off uh but
02:53 - um with practice you'll just learn to
02:55 - automatically put the semicolon at the
02:56 - end of lines where they are needed and
02:59 - after after this you can type int space
03:03 - Main and um an opening and closing round
03:07 - bracket so again Eclipse put the closing
03:09 - round bracket in for me and then we put
03:12 - in an opening and
03:13 - closing curly bracket like this so I'm
03:16 - going to type the opening one on the
03:18 - same line as Main and then hit return
03:21 - and you can see Eclipse has put the
03:23 - closing one in for me uh some C++
03:26 - programmers prefer a style where um this
03:29 - bracket open the opening one would go
03:31 - underneath main like this instead of on
03:34 - the same
03:35 - line um but I I think this this style is
03:39 - you know it's definitely gaining
03:41 - popularity more and more I think so I'm
03:43 - going to follow this style and PE people
03:46 - who like brackets on the same line as um
03:50 - as the function name here they get very
03:53 - annoyed with people who liting them
03:54 - underneath and the people who Li them
03:55 - underneath get annoyed with the people
03:57 - who liting them on the same line but
03:58 - anyway let's let's just forget about
04:00 - that now once I've done that I'm going
04:02 - to type in here
04:04 - return0 semicolon so this is a a
04:07 - statement in C++ we call this a
04:10 - statement and statements have to finish
04:12 - with a semicolon and again this isn't
04:14 - going to mean much to you at the moment
04:16 - uh the important thing at the moment is
04:17 - just to type this out
04:21 - yourself and just to start gaining a
04:23 - little bit of familiar familiarity with
04:25 - it and that's actually a legitimate C++
04:28 - program but ites doesn't do anything so
04:30 - once you've got this far you can um go
04:33 - to project build project and it should
04:36 - build without any errors it should just
04:38 - say build finished it's in blue here and
04:41 - it should be
04:42 - fine now to Output text we use something
04:46 - called C out we're going to type c out
04:51 - space and then
04:53 - two sort of um uh well they are kind of
04:57 - angle brackets they're the same as this
04:59 - symbol here but in this context we're
05:02 - we're using them not as a bracket but as
05:04 - a sort of Chevron so following that we
05:08 - leave a space and in in double quotes
05:11 - and Eclipse has put the closing double
05:12 - quote in for me and it must be double
05:14 - quote not single quote you can type
05:16 - something like this is some text we'll
05:20 - stop so between the double quotes you
05:22 - just got ordinary text whatever you like
05:24 - and after that we're going to put in um
05:27 - another Chevron
05:30 - space and then
05:32 - endler and then semicolon so endler
05:35 - stands for end line and see out well
05:39 - um I'm not sure what the C stands for
05:42 - C++ for all I know but uh this this
05:45 - means the out refers to the fact that
05:47 - we're going to Output text so you think
05:50 - of this this Chevron as sort of sending
05:53 - this text to this thing
05:58 - here um and um this is sending this end
06:04 - line end L also to this object here and
06:08 - end L it actually um puts like um a
06:12 - blank new line after your text and it
06:16 - also flushes the buffer and what that
06:19 - means is um text can actually accumulate
06:24 - kind of in your program without
06:26 - appearing on the console and uh this end
06:29 - L one thing it does is it flushes the
06:32 - output so that whatever saved output um
06:36 - It's actually kind of saved up by your
06:38 - operating system this will tell your
06:40 - operating system that it should output
06:42 - all the text that's waiting to be output
06:45 - so if you didn't have that there
06:46 - technically it's possible that um this
06:49 - text might not appear at all okay so and
06:52 - you'll notice the SE out it must go
06:54 - before this return statement and it must
06:57 - be within these curly brackets here and
07:01 - this this thing here is actually sub
07:03 - routine it's a function it's a block of
07:06 - code that's going to do
07:08 - something so don't worry if any of that
07:10 - went over your head like I say type out
07:13 - the main program yourself from scratch
07:15 - and try to get your version working and
07:18 - you will probably miss things out and
07:19 - you'll have to go back and look at the
07:22 - automatically generated version and by
07:25 - the way I think the automatically
07:26 - generated version it has this stuff at
07:28 - the beginning here which we can expand
07:30 - with a plus sign it has that stuff but
07:33 - these are just comments you don't need
07:34 - these you can you can leave them off
07:36 - let's get rid of that so I haven't put
07:39 - them you don't need that stuff and in in
07:41 - my Eclipse um the comments appear as
07:44 - green uh so they're not vital to the
07:46 - program at all let's now build this
07:48 - let's go to project build
07:50 - project and um let's let's run
07:54 - it actually I've already built it so
07:56 - that didn't really matter let's select
07:58 - the actual project
08:00 - um yeah you need to make sure you've got
08:01 - the right one selected and click the Run
08:04 - button and yes I want to save it and it
08:08 - runs and it says this is some
08:10 - text so again it's it's a big
08:13 - achievement to get to this point um so
08:15 - um don't think that you're wasting time
08:17 - typing this out yourself it's really not
08:19 - a waste of time you've got to become
08:21 - familiar bit by bit with this main
08:24 - program um we're going to let's let's
08:25 - have a look at what else we can do
08:27 - without putting text which so we can put
08:29 - more of these C out statements in here
08:31 - and what's going to happen is that um
08:35 - C++ it's going to um it's going to
08:39 - execute all the statements so this is a
08:42 - statement it ends in the semicolon this
08:45 - is a statement ends in a semicolon as
08:47 - well and it's going to execute all the
08:49 - statements one after the other within
08:52 - this main program so Within These within
08:54 - this main function uh so between this
08:57 - bracket and this bracket it um so this
09:01 - is where your program will all start and
09:03 - it's going to go through line by line
09:05 - here and execute everything you type
09:07 - here between these brackets so let's put
09:10 - another SE out statement in let's say SE
09:12 - out
09:14 - Chevron this is some more
09:18 - text um full stop of course what what
09:21 - you actually type here doesn't really
09:22 - matter as long as there are no weird
09:24 - symbols in that will confuse C++ somehow
09:28 - like another speech mark or something
09:30 - like that then you can type whatever you
09:32 - want in here basically try typing
09:34 - different stuff let's put in another
09:36 - Chevron and
09:38 - endler and let's run that and yes save
09:42 - it and so there we've got a program with
09:45 - two lines of
09:47 - text and the the thing that's creating
09:49 - the um uh we call it a carriage return
09:53 - the thing that turns the next line into
09:56 - a new line um so after to this line
09:59 - there's a carriage return uh we call it
10:02 - a carriage return because um when we
10:04 - used to have typewriters to to create a
10:07 - new line you had to roll the kind of
10:11 - thing with the paper on and then move it
10:13 - back all the way to the left and that's
10:15 - called a Line Feed and a courage return
10:18 - so here technically we've got a Line
10:20 - Feed and a courage return after this
10:23 - sentence um but we we can actually
10:26 - output text without um without the Line
10:30 - Feed encourage return so to do that
10:34 - let's let's put some um some text let's
10:37 - put it at the top
10:39 - here let's let's type SE out Chevron
10:44 - just two kind of um left pointing angle
10:48 - brackets and let's type um starting
10:52 - program dot dot dot and then let's type
10:55 - another Chevron and end and semicolon
11:00 - so um sorry not end
11:03 - flush yes
11:06 - okay so what flush does is it um tells
11:10 - your operating system to Output this
11:13 - text but it doesn't create a um it
11:17 - doesn't create a line
11:20 - feed um I think I was thinking end I
11:22 - think in visual C++ it used to be end
11:25 - and not flush but I might be wrong about
11:26 - that um but in any case flush works
11:29 - so it's going to flush the text it's
11:31 - going to tell the operating system I've
11:32 - output some text please um clean out
11:36 - your memory and actually output the text
11:39 - from it don't say that up um but it's
11:42 - not going to create a line feed or
11:45 - carriage return so it's not going to go
11:47 - to the next line so to see the effect of
11:49 - that let's run this click the Run button
11:52 - and you can see you've got we've got
11:53 - starting program and then immediately it
11:56 - says this is some text so so because
11:59 - there's no
12:00 - endler here we didn't go to a new line
12:04 - before outputting
12:07 - this um excuse me so try that try that
12:10 - for yourself try flush and try putting
12:14 - multi try creating a program with
12:15 - multiple lines of text in like this you
12:18 - can mix lines ending in flush with lines
12:20 - ending in endler it's absolutely fine
12:24 - and one more thing that I'm going to
12:25 - show you here is um you can also
12:29 - output multiple bits of text with one C
12:33 - out and and at the moment that's going
12:35 - to sound like it's pretty useless but
12:37 - you're going to see later on that that's
12:39 - actually extremely useful so let's go
12:42 - here maybe and let's type another C out
12:45 - another Chevron and let's type
12:48 - um uh I don't know actually let's type
12:54 - banana and then we'll put another
12:57 - Chevron and then in double quotes again
13:00 - we'll we'll um type
13:04 - Apple full stop and then we'll have
13:07 - another
13:07 - Chevron and then let's type orange and
13:11 - then
13:12 - finally let's type Chevron and
13:17 - endler so we'll save that and run it and
13:20 - what what what do you think is going to
13:22 - be the result of running this and you're
13:25 - probably going to guess that it's going
13:26 - to type Banana full stop Apple full stop
13:29 - orange might have a full stop there as
13:32 - well but um there's something not quite
13:35 - right with this and we'll see that so
13:37 - let's yeah select the project click run
13:40 - and you'll see that there's no space
13:42 - after banana apple or orange and that's
13:44 - because we didn't tell it to Output a
13:46 - space so um to do that well we could do
13:49 - something like putting another Chef on
13:53 - and literally have a pair of empty
13:55 - quotes with a space between them and
13:57 - then we get a space
13:59 - after banana if you look at that
14:01 - carefully it all makes sense says banana
14:04 - and then we're outputting the space and
14:06 - then apple and orange so we're
14:09 - outputting that then we're outputting
14:10 - this then apple and orange but let's
14:13 - let's get rid of that put it back how it
14:15 - was before the easiest thing to do is
14:18 - just put a space after that full stop
14:20 - within the double quotes cuz um normally
14:23 - in C++ blank space is ignored the blank
14:26 - space is there and to help you make the
14:30 - program visually appealing and Visually
14:33 - understandable so that you can easily
14:35 - see how it
14:37 - works and um we'll put one after the
14:40 - full stop of apple and after the full
14:42 - stop of orange as
14:45 - well and uh let's try running that so it
14:48 - should look pretty good and there we go
14:50 - apple banana apple
14:53 - orange you might wonder what would
14:55 - happen if you didn't have this flush St
14:56 - would it still work uh or we or if we
14:58 - didn't have the sendler there let's try
15:01 - it and it probably will work let's see
15:05 - save it and click
15:08 - run yeah so this text is actually still
15:11 - coming out but um there's no real
15:15 - guarantee that it will come out unless
15:17 - you have either endler or flush after it
15:20 - somewhere um because especially if
15:23 - you've got a big program that's
15:25 - producing a lot of text if you want the
15:27 - text to appear immediately you need
15:30 - endler or
15:31 - flush we say it's flushing the buffer
15:34 - because otherwise the operating system
15:36 - might save up a big wodge of text and
15:39 - then output it only when it's got a huge
15:41 - big wge of it but this forces the
15:43 - operating system to Output all the text
15:45 - straight away it's flushing its buffer
15:48 - the buffer is like an area of memory
15:50 - where it's saving your text and uh we
15:52 - say flushing the buffer like cleaning
15:55 - out the the buffer the memory and
15:57 - outputting everything that's in it
16:00 - okay so have a go at that and before you
16:02 - do there's there's one more really
16:05 - really really vital thing that I'm going
16:07 - to mention here and that is formatting
16:12 - because you'll notice that um in my main
16:16 - program here I've I've actually got a
16:19 - tab before each of these SE
16:22 - outs so um between these brackets here
16:27 - between these two brackets all the
16:29 - statements are indented with a tab and
16:35 - um you if you've typed it without that
16:37 - tab still works so if I run
16:40 - this yeah it still works but um this
16:43 - isn't right it shouldn't be considered
16:45 - right yes it's a working program but uh
16:49 - indentation correct indentation in C++
16:52 - or any programming language helps
16:54 - massively for you to be able to
16:57 - understand the program and one of the
16:59 - key things that beginners tend to do
17:01 - wrong is they is they get the
17:03 - indentation wrong and then they can
17:06 - spend hours even days trying to figure
17:09 - out what's wrong with a program when if
17:11 - the indentation was right they would
17:13 - have seen instantly what was wrong with
17:15 - it so it's vital that you get the
17:18 - indentation right absolutely vital just
17:20 - as important as remembering these
17:22 - semicolons and stuff even though in bad
17:25 - indentation won't stop it compiling it's
17:28 - still going to be a rubbish program if
17:30 - you don't get the indentation right so
17:32 - between curly brackets like this you
17:35 - indent everything with a
17:38 - tab and one thing you can do is if you
17:41 - right click your program you can go to
17:44 - um let's
17:45 - see uh it's here somewhere we've got a
17:49 - source format there it is so if you go
17:53 - to Source format and there'll be a
17:54 - shortcut key for that as well um and
17:57 - select that it automatically formats
18:01 - your source so on my Mac um I think it's
18:04 - command shift F let's just get rid of
18:07 - some of that and do command shift F and
18:10 - it's something like control shift F on
18:12 - windows so there's no excuse for bad
18:15 - formatting because even if you get it
18:16 - wrong yourself you should make an effort
18:18 - to get it right when you type it but
18:20 - even if you get it wrong you can
18:22 - automatically format your source and
18:25 - boring that though that may sound you
18:27 - may think I'm going on about
18:28 - unnecessarily it's vital it's absolutely
18:31 - vital so use the auto formatting
18:34 - whenever you've written your program and
18:36 - try to write it with scrupulous for
18:38 - formatting in the first place pay
18:41 - attention to how it looks visually try
18:43 - to make it look nice try to make it
18:45 - break down into logical blocks and get
18:48 - tabs where you need tabs so between
18:51 - these curly brackets indent everything
18:53 - one
18:54 - tab okay that's it for this tutorial and
18:58 - uh until next time happy
19:00 - [Music]
19:16 - coding