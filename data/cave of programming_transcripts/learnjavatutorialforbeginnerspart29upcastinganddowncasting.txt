00:00 - [Music]
00:12 - [Music]
00:18 - hello this is John from cave of
00:20 - programming calm and in this tutorial
00:23 - we're going to look at not casting and
00:26 - down casting in Java so I'm going to
00:29 - start by creating a couple of classes
00:31 - here I'm going to create a class called
00:34 - machine and I'm going to give this one
00:39 - method public void start and I'm going
00:44 - to put some implementation in there I'm
00:46 - just going to put this out with machine
00:49 - started like that and then I'm going to
00:54 - create a child class class camera and
00:59 - I'm going to say camera extends machine
01:03 - because the camera is a kind of machine
01:05 - and I'm going to override this method
01:08 - such as copy it and paste it in here and
01:12 - change this to camera started and I'll
01:15 - get camera another method of its own
01:18 - public void snap and let's say yes I
01:22 - sell photo taken now let's let's create
01:30 - a couple of objects of the type camera
01:33 - and machine so machine I can say machine
01:39 - one equals new machine and I can say
01:45 - camera camera 1 equals new camera
01:50 - and of course I can call the methods on
01:53 - the second say machine one dot start and
01:57 - camera one dot start and camera 1 dot
02:05 - snap let's just run all that stuff and
02:08 - make sure it works as expected which is
02:10 - always good so there we go
02:12 - and now let's take a look first at hop
02:16 - casting which is the simpler case in
02:20 - some ways so I'll put a comment here
02:23 - about casting now up casting and down
02:26 - casting or custody in general it's a
02:29 - thing to do with variables basically
02:30 - once you've created an object like an
02:33 - object of sight machine or camera in
02:35 - this case those objects are always going
02:37 - to be whatever they are to start with
02:40 - and the machine will always be a machine
02:41 - the camera will always be a camera but
02:44 - you can change the variables that refer
02:47 - to them from one side to another so as
02:51 - an example we saw in there the tutorial
02:54 - on polymorphism that you can always use
02:57 - an object of a child class type where
03:01 - you would expect a object of a parent
03:05 - class type so machine is the parent
03:08 - class and if I say machine machine - I
03:11 - could set that equal to a new camera
03:13 - quite happily and this is polymorphism
03:16 - and we know that's going to work but
03:19 - what I could also do more subtly is we
03:22 - see here that camera 1 points at a
03:25 - camera so I could set in a machine to
03:28 - variable to refer to the same object
03:30 - that the camera 1 variable variable
03:33 - refers to which is this object here so I
03:37 - could say machine 2 equals camera 1
03:42 - and what I've done here in effect is
03:45 - well I've taken a variable of type
03:47 - camera that refers to a camera object
03:51 - and I've made this variable of time
03:54 - machine refer to that object so then we
03:58 - say that I've upper castes or I custard
04:02 - this reference this variable to this
04:05 - variable type and it's up because we've
04:09 - got up the class hierarchy from camera
04:11 - to machine so this this was this is
04:15 - referring to a camera and I've taken a
04:18 - camera object that made the variable of
04:19 - type machine further up the class
04:21 - hierarchy refer to it and now I can say
04:24 - machine to not start and if I do that
04:29 - which start method is going to be
04:32 - invoked well the answer is it depends on
04:36 - whatever object that Machine 2 refers to
04:38 - because the methods and the
04:40 - implementation the guts of the actual
04:44 - code actually does stuff is not stored
04:47 - in the variable it's stored in the
04:49 - object and the variable the reference
04:51 - variable mainly refers to our object so
04:56 - if I thought that this was going to call
05:00 - the start method in machine it would be
05:01 - like having a label that I've stuck on
05:06 - my car that says my car and then
05:09 - expecting to be able to drive the label
05:11 - because if the card actually does stuff
05:14 - it's the object actually does stuff so
05:16 - when I call machine to dot star then
05:18 - it's gonna call this camera method
05:22 - because the actual object referred to by
05:25 - machine 2 is a camera object so if I run
05:31 - that now we can see here it says camera
05:34 - started
05:36 - that's up casting and now you notice her
05:38 - okay camera has this method snap
05:40 - but I can't say machine to snap so the
05:45 - autocomplete isn't helping me and now
05:47 - I'm getting an error here and it's
05:49 - saying the method snap is undefined for
05:52 - the time machine and the reason for that
05:55 - is that it's the actual variable that
06:00 - decides what methods you can call the
06:03 - variable knows what methods are
06:04 - available further for that variable type
06:07 - and the variable here a machine - is a
06:11 - type machine and a machine only has a
06:13 - star method so this variable will only
06:16 - let me call the star method it won't let
06:20 - me call camera methods even though it is
06:22 - referring to a camera but we'll see in a
06:27 - minute that there's a way around that
06:29 - and it's the important thing to remember
06:33 - here is that the variable declares the
06:35 - type of the variable determines what
06:39 - methods you can call what's the type of
06:41 - the object that that variable refers to
06:43 - that determines which actual methods
06:46 - like what which actually implementations
06:48 - will actually be called when you call
06:50 - that method so let's take a look now at
06:53 - the converse of this down casting top
06:58 - are common here down casting and let's
07:02 - again have a variable of type machine
07:07 - let's call this machine 3 and again
07:10 - let's make it refer to a camera like
07:12 - this so I can't call machine 3 dots now
07:18 - that won't work but I know that machine
07:22 - 3 is referring to a camera and that
07:25 - camera does have a method called snap so
07:28 - of course I could think well there must
07:30 - be a way of calling that snap method and
07:32 - there is because I can say here I can
07:35 - declare a variable of type camera
07:37 - let's call it camera
07:39 - - now and I can set that equal to
07:43 - machine 3 in other words I can set that
07:46 - equal except camera 2 to refer to
07:49 - whatever object machine 3 refers to
07:53 - which is this camera object here and now
07:57 - I'm getting an error here and spam it's
07:59 - saying cannot convert from machine to
08:02 - camera and the reason for that is when
08:04 - you downcast Jarboe wants confirmation
08:07 - that you actually know what you're doing
08:09 - for reasons that we'll see in a minute
08:10 - and to give it at confirmation you need
08:13 - to put the type of the variable you're
08:15 - casting to in brackets before the
08:18 - variable that you're casting from so I'm
08:21 - casting a variable of time machine to a
08:24 - variable of type camera and so I have to
08:27 - put camera here in front of machine to
08:29 - match this and now I can say camera to
08:34 - dots now like that and of course if I
08:38 - say camera two darts start of course
08:41 - that's going to call the method in
08:42 - camera because the object all along was
08:45 - a camera so they've got photo taken and
08:47 - camera started now the reason that Java
08:53 - wants this conformation here is because
08:55 - unlike pod casting down casting is
08:58 - inherently unsafe because I could say
09:02 - here machine machine machine 4 equals
09:09 - new machine ok that's fine I could think
09:13 - okay I could forget that that's a
09:15 - machine object and I could say camera
09:18 - camera 3 equals and I could try to cast
09:24 - this to a camera let's put some brackets
09:26 - in that camera and I'll put machine for
09:30 - here
09:31 - and now I'm not going to get syntax
09:34 - error there
09:35 - I'm skipping me an unused variable
09:37 - warning let's try to use it
09:38 - camera three dot star and that what's
09:44 - going to happen when I actually run this
09:45 - code so I run it and I've got an
09:48 - exception and it's saying class cast
09:51 - exception machine cannot be cuts to
09:53 - camera and if I click on the error line
09:56 - here you should always read exceptions
09:59 - from top down and the first line if I
10:01 - the only line that the line number on
10:04 - here is this and here's where the
10:06 - problem occurred so I can't do that
10:08 - because this is this is like saying
10:12 - basically I could also have tried this
10:14 - court camera three dot start and I would
10:16 - work either
10:17 - I'm sorry not not start with snap and
10:20 - the reason for that fallacy is that that
10:25 - the actual objects here is a machine so
10:28 - I can't just change the Machine objects
10:31 - or camera objects all one they are they
10:33 - don't change and when I start trying to
10:35 - call the camera version of starts using
10:39 - a machine object or when I start trying
10:41 - to call camera methods which machine
10:44 - doesn't have then I've got a problem and
10:47 - you only see the problem at runtime so
10:50 - this doesn't work say run time error and
10:58 - just come in this out so that if you
11:02 - look at this code on cave on programming
11:04 - comm you'll find that there the program
11:07 - at least runs well I don't need to
11:11 - comment this out as well that's where it
11:13 - is there we go so you can't do this
11:16 - and so here I've seen podcasting is safe
11:20 - that's guaranteed by polymorphism and
11:23 - you don't need a caster but you don't
11:26 - need an explicit cast in brackets but
11:28 - down casting is inherently unsafe and
11:30 - you have to really think when you're
11:31 - doing down casting and you want to be
11:33 - really sure that the variable you're
11:35 - down casting really does refer to an
11:38 - object of the
11:39 - pipe down casting - and by the way you
11:43 - can't dunk us between unrelated types
11:46 - again for the same reason that you can't
11:48 - down cast a machine object to her to a
11:52 - camera because you can't change one
11:55 - object to another object or you can do
11:57 - is change the references and the
12:00 - references that depend on the underlying
12:03 - object which doesn't change to invoke
12:06 - the correct code so that's up casting
12:09 - and down casting it's a tricky subject
12:11 - they can take a little while to get your
12:13 - head around but it's really important to
12:15 - know especially since you often find
12:18 - methods that return an object there have
12:22 - a return type of object but the real
12:26 - object underneath is some specific child
12:31 - object and then you need to cast that
12:33 - object into the right type to actually
12:37 - use it but I don't if it's really worth
12:42 - looking at that here probably not so
12:47 - I'll leave that but be aware of since
12:49 - this is quite common in Java to cast an
12:51 - object which is a parent of all objects
12:55 - in Java or the grandparents or whatever
12:58 - it's really common to cast objects to
13:00 - objects further down the hierarchy but
13:02 - you have to be sure that the object
13:06 - variable that you're casting really does
13:08 - refer to the kind of object that you're
13:11 - trying to down cast to otherwise you
13:12 - will get an error at runtime so that's
13:15 - up casting and down casting and as far
13:19 - as I can think we've now covered
13:21 - everything that we need to look at using
13:24 - generics so probably in the next
13:25 - tutorial we're gonna look at generics in
13:29 - Java so join me again then and you'll
13:31 - find this code on cave of Programming
13:34 - and to next
13:41 - [Music]
13:44 - you
13:46 - [Music]