00:18 - hello this is John from Cave of
00:20 - programming. comom in this tutorial in
00:23 - uh C++ 4 complete beginners we're going
00:25 - to take a look at getting input from the
00:28 - user so we've seen that you can declare
00:31 - a string variable like this we can say
00:34 - string text
00:36 - equals
00:37 - hello semicolon and we can output that
00:41 - text by saying see out and text and
00:46 - endler for a new line and to flush the
00:49 - buffer so if we run this now we get
00:55 - hello um you can also get input from the
00:58 - user which of course is is really useful
01:00 - although we don't know enough uh C++
01:03 - syntax yet to really do much with input
01:05 - from the user but let's see how you
01:07 - you'd actually do
01:08 - it uh so this this CL is um we call it
01:13 - an object and it's a special object for
01:15 - outputting text and this is called the
01:19 - insertion operator these two Chevrons
01:22 - they're actually um performing an
01:25 - operation uh like um a plus sign is also
01:29 - an operator or equals I suppose is an
01:32 - operator and they're um inserting data
01:35 - into this SE out object you can you can
01:37 - think of it like that so it's the uh
01:40 - insertion operator and um and that
01:42 - object is then displaying stuff down
01:44 - here on the
01:46 - console to actually get um text from the
01:50 - user we can use something called C in
01:52 - and the extraction operator so it's
01:55 - sounding very technical but the
01:56 - important thing is just try out what I'm
01:58 - about to show you and your get the hang
02:00 - of it so let's output some text for a
02:03 - start let's say here enter your name for
02:07 - example we'll put a semicolon and a
02:09 - space there inside the string and then
02:11 - let's put um the insertion operator and
02:16 - flush because I don't want there to be a
02:18 - new line at the end of this we'll see
02:20 - how this works in a
02:21 - minute then well let's get rid of this
02:24 - stuff and um I'm going to get the user
02:27 - input into an empty string so I need to
02:31 - declare an empty string to get the user
02:35 - input into that string so if I type
02:37 - string let's call it input and then a
02:40 - semicolon so I'm declaring a string here
02:42 - this is a string variable it's um it's a
02:45 - kind of object for holding user input
02:49 - never mind about what an object is
02:51 - exactly but that's what it is and uh
02:54 - we're not giving it a value we're not
02:55 - saying equals such and such we're just
02:58 - this is called declaring it we're just
02:59 - saying what the type of this variable is
03:02 - it's a
03:03 - string and now we can type c in and
03:07 - instead of um left pointing Chevrons we
03:10 - type two right pointing like diamond
03:13 - brackets Chevrons whatever you like to
03:14 - call them and this is called This is
03:17 - called the extraction operator it's as
03:20 - if we're extracting information from
03:22 - this C in object which represents um
03:26 - user input on the console I'm firing a
03:29 - lot of Ling at you but don't worry about
03:31 - that um so uh what we can do now is put
03:34 - the string here where where we want to
03:37 - put the user input so we've got our
03:39 - string we've created our string and now
03:41 - we're using C in to get user
03:44 - input so let's see how that works and
03:47 - actually before I do before I run it
03:49 - let's use C out let's say C
03:51 - out and then a string you entered colon
03:56 - and then another um insertion operator
04:01 - and input and that's the string that the
04:03 - user is going to enter and then we'll
04:04 - have a new line character cuz that'll
04:07 - look nice at the end of it so we'll run
04:10 - this let's run it and it says down here
04:12 - on the console enter your name I'm going
04:14 - to click in the console enter my name
04:17 - hit return and it says you entered John
04:21 - so we're getting we're getting the input
04:23 - here at this line in this string when
04:25 - the user hits hits return that input is
04:29 - kind of sent into this string you can
04:31 - think of this um in uh extraction
04:35 - operator as kind of sending stuff into
04:38 - this string extracting it from the user
04:41 - input and then we're we're writing out
04:44 - on the console printing in in the lingo
04:47 - we say printing on the console what the
04:50 - user has actually entered down here so
04:54 - that is
04:56 - this this is going to seem quite
04:59 - complicated when you first see it just
05:01 - now but you PR practice it a few times
05:03 - yourself and you will see how it works
05:06 - it's really not so bad when you've done
05:07 - it a few times it's just you need
05:09 - practice of course let's let's try it
05:11 - with an integer as well because we can
05:13 - also do this with integers let's say int
05:15 - value and I won't give it a value I'm
05:17 - just declaring a variable of type
05:21 - integer here that could hold an integer
05:23 - number and then let's say here C in and
05:29 - the extraction
05:31 - operator and uh value so we're expecting
05:35 - an integer value here and let's type
05:37 - above that c out I'll get rid of this
05:41 - blank line up here so I'm trying to keep
05:43 - this program somehow in logical blocks
05:46 - so we have we can have two blocks of
05:47 - stuff here one for the string one for
05:49 - the integer let's say C
05:52 - out um wrong one there we go see out you
05:57 - entered and
06:01 - volue
06:07 - andler except that should go down here
06:09 - what am I doing let's put that down here
06:12 - and let's put a prompt before it let's
06:15 - say enter a number a
06:20 - number okay so now this and this look
06:24 - the same it's just that I'm using an
06:26 - integer with C in instead of and with
06:30 - see out instead of some
06:34 - text so let's try that so it's going to
06:37 - ask me to enter a enter my name um and
06:40 - then it's going to get the name in this
06:43 - string that I entered then it's going to
06:45 - Echo it back to me then it's going to
06:46 - say enter a number and I've declared a
06:49 - number variable here an integer variable
06:52 - and it's going to get that number from
06:54 - the user input and it's going to repeat
06:57 - it back to me so let's try it so I'm
06:58 - going to hit return
07:00 - sorry I'm going to hit run and it says
07:03 - enter your name so I'll click in the
07:04 - console and enter I'll enter something
07:06 - different just for the hell of it
07:07 - Mike and now it says enter a number I'm
07:10 - going to click here this this console is
07:12 - a little bit flaky um it doesn't work
07:15 - quite like it would work if you actually
07:16 - run the program in Windows console or um
07:20 - in a in a terminal on a Unix system or
07:23 - something but it it just about does the
07:26 - trick for testing so I'm going to click
07:28 - here and enter a number that's say 77
07:30 - hit return and it says you entered
07:34 - 77 um now this this whole system is not
07:37 - really perfect uh what happens if they
07:39 - enter some text instead of a number
07:41 - that'll screw things up a bit so I'm
07:43 - going to write John and instead of
07:45 - entering a number here I'm going to just
07:47 - put some text says you enter
07:50 - zero and there are there are ways of
07:52 - dealing with that and finding out what
07:53 - they actually have entered whether they
07:55 - entered something suitable or not but we
07:58 - haven't progressed to that point where
07:59 - we can really make use of those
08:01 - techniques but we will do in time so for
08:05 - now the thing to do is practice doing
08:06 - this practice getting some user input
08:08 - from the user um numbers and strings and
08:12 - echoing it back and see if you can make
08:14 - it look nice like this so it's saying
08:16 - enter such and such then telling you
08:18 - what you
08:19 - entered and uh you can make use of flush
08:22 - which remember doesn't create a new line
08:24 - character after this so when we run this
08:27 - program says enter your name and we can
08:29 - ENT enter the um the name on the same
08:33 - line here if I'd used endler there then
08:36 - we would have to enter it on the next
08:38 - line it wouldn't look as nice so by
08:40 - carefully using flush and endler in the
08:42 - right places you can make your program
08:45 - um kind of run in a in a way that looks
08:47 - a bit more appealing for the user so
08:49 - have a go at that it's really important
08:51 - that you try it and in the next tutorial
08:54 - I think what we'll do is we'll look at
08:56 - um we'll have an overview probably of
08:59 - the C++ types different primitive types
09:01 - you can use which isn't so interesting
09:04 - but we really need it it's vital
09:05 - knowledge and after that we can get on
09:07 - to looking at more interesting things
09:10 - like uh control structures conditionals
09:12 - and um loops and that kind of thing so
09:15 - join me again next time and until then
09:18 - Happy
09:28 - coding