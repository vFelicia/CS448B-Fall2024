00:00 - before we go even further with if else I
00:04 - want to tell you about a concept that is
00:06 - fairly simple but quite important as
00:10 - well especially in larger programs or if
00:14 - you're working on some commercial
00:16 - software in a professional environment
00:19 - and that is the idea of constants so the
00:22 - reason variables are called variables is
00:25 - because you can change them so there's
00:28 - nothing stopping me changing this name
00:30 - variable later on and setting it equal
00:32 - to whatever I want that's perfectly
00:35 - legitimate let's get rid of
00:37 - that but sometimes we want a variable
00:41 - that doesn't change so it's not really a
00:45 - variable we call it a constant we want
00:48 - to store some kind of value in our
00:51 - program that we can then use in our
00:53 - program but we want to make sure that
00:55 - value never
00:57 - changes now most programming languages
01:00 - have a way of enforcing that within the
01:03 - language they have a way of declaring a
01:05 - constant python at the moment doesn't
01:08 - have any such notion it doesn't have
01:12 - constants basically but we can fake them
01:15 - and the fact is that most of the time a
01:18 - fake constant is as good as a real one
01:21 - if you use some coding conventions to
01:24 - highlight what is supposed to be
01:26 - constant so if we take a look at this
01:28 - program it's got various strings in it
01:31 - right like this this and so on all of
01:35 - these strings but what would you do if
01:39 - you were Distributing this maybe selling
01:41 - it to end
01:42 - users and you wanted to create let's say
01:46 - a Spanish version what you would
01:48 - probably want to do is give that to
01:50 - someone who speaks Spanish and they can
01:53 - create localized versions of all of
01:55 - these strings so Spanish versions of all
01:57 - the text strings here but but that
02:00 - person typically wouldn't be a
02:01 - programmer why hire a programmer when
02:04 - what you need is basically a Spanish
02:07 - speaker you don't need a Spanish
02:09 - programmer you just need someone who
02:11 - speaks Spanish and can spell correctly
02:13 - and all that sort of thing so you would
02:16 - probably want all of these
02:18 - strings at least in their own file so
02:22 - you don't want them sprinkled throughout
02:24 - your program ideally and that's a common
02:27 - thing to do with software that you you
02:30 - create files containing only the text
02:33 - that you're going to use in your program
02:35 - so you can easily localize your programs
02:37 - you can easily change those texts now
02:41 - here I'm not going to go to such length
02:43 - but we could take a step in that
02:45 - direction so it's checking for the name
02:47 - John if the idea here is to check login
02:51 - credentials let's say again you probably
02:54 - wouldn't want to hard code this name
02:56 - right here hardcoding means typing stuff
03:00 - literally into your program so we would
03:03 - say these are hardcoded strings they're
03:05 - coded directly into the program
03:07 - hardcoding strings is generally a bad
03:11 - thing I'm going to be doing it a lot for
03:13 - demonstration purposes but in a really
03:16 - serious program you should try to avoid
03:18 - it so one thing that we could do is we
03:21 - could create a variable up here and I'm
03:23 - going to use all capital letters I'm
03:25 - going to say name equals and whatever
03:29 - you want it to equal I'm going to put
03:30 - John since that's my name and we can use
03:34 - this variable in place of the
03:37 - text so what we've accomplished is we've
03:41 - got rid of one of the bits of text that
03:44 - were just sprinkled throughout our
03:47 - program and we've at least put it in one
03:50 - area of the
03:51 - program if we did that with all the bits
03:54 - of text they could even be all put in a
03:57 - single file so in a real program we
03:59 - might fetch this from a database or
04:00 - something but instead here in this
04:03 - little program I'm at least using a
04:06 - variable that's set to that text rather
04:09 - than just sprinkling this bit of text
04:12 - into my code now why have I put it in
04:14 - uppercase letters because in programming
04:16 - in general it's a common convention to
04:19 - put
04:20 - constants in uppercase letters that is
04:24 - if you've got a variable that is not
04:26 - intended to be changed as your program
04:29 - progresses then it's a good idea to
04:32 - create the name of it all in capital
04:36 - letters now I won't always adere to this
04:39 - convention I mean in this particular
04:41 - program you could say well name is
04:44 - actually not changed once it's
04:47 - assigned but I'm not making name a
04:50 - constant here this particular
04:53 - name so I'm not going to adhere to this
04:55 - rigidly but I wanted to show you
04:57 - this so the bottom line here is that if
05:01 - you got a variable that you don't want
05:04 - to change in your program you can give
05:06 - it a name that has all uppercase letters
05:11 - and that's a signal to you as a
05:13 - programmer that it shouldn't be changed
05:16 - it's just referring to some value that
05:18 - you need to read in your program but you
05:20 - don't want to write it you don't want to
05:22 - change it and notice that I can have two
05:26 - variables called name if the case is
05:28 - different some people would say that was
05:31 - confusing I'm personally fine with
05:34 - it but these two are completely
05:38 - different variables because they have a
05:40 - different case and python is case
05:42 - sensitive this is lowercase that's upper
05:47 - case of course you don't want to go too
05:49 - far with that I wouldn't normally want
05:51 - to have two variables that have the same
05:53 - name but just one letter was uppercase
05:55 - in one and lower case in the other that
05:58 - could get confusing but here I don't
06:00 - think this is too confusing this is a
06:02 - completely separate variable to
06:05 - this you could call it correct uncore
06:09 - name or something else if you wanted to
06:12 - also by the way this comparison here is
06:15 - also case sensitive so let's just try
06:18 - this out if I run it and I enter John
06:21 - with a lowercase j it says your name is
06:24 - not John which isn't true so you have to
06:27 - enter the right case here well look at
06:30 - ways to get around that later on but in
06:32 - general in programming you have to be
06:34 - aware of case sensitivity a lot of
06:37 - things that we're going to be doing are
06:39 - going to be case sensitive you've got to
06:41 - get the right uppercase or lowercase
06:44 - letters in there and python as a whole
06:46 - is a case sensitive language as most
06:49 - programming languages are hello you've
06:51 - been watching a free sample from my
06:54 - Python and machine learning for complete
06:56 - beginners course I'm uploading enough
06:59 - video from the start of the course to
07:01 - get you started with python and machine
07:03 - learning the full course is absolutely
07:05 - massive if you're interested in it
07:07 - please click the link in the description
07:10 - the complete course covers not only
07:12 - basic python but also some fairly
07:14 - Advanced python even some desktop
07:17 - programming stuff and then goes on to
07:19 - machine learning and artificial
07:21 - intelligence until next time happy
07:24 - coding