00:00 - in this video we're going to take a look
00:02 - at returning values from functions in
00:05 - Python let's start from this program we
00:07 - had before but I'm going to get rid of
00:09 - all these lines that I put in just to
00:12 - elucidate What's Happening Here exactly
00:15 - let's just delete all of
00:18 - these so this function greet clearly get
00:22 - rid of that as
00:24 - well it accepts a name and then it
00:26 - prints a greeting but another
00:29 - possibility would be to have a function
00:32 - creating a greeting and then returning
00:34 - it so you can use it however you want
00:37 - I'll show you what I mean let's create
00:39 - another function I'll call this create
00:43 - greeting and that will also accept a
00:46 - name let's put pass in for the
00:49 - moment because I like my code to always
00:54 - be syntactically correct while I'm
00:56 - typing it so if I create some kind of
01:00 - statement like this that has a
01:02 - body but I don't know what I want to put
01:04 - in it yet I use the pass keyword so that
01:07 - it is syntactically correct while I'm
01:10 - writing the rest of the code and by the
01:12 - way you can't have two functions with
01:16 - the same name in python or better said
01:19 - more accurately you can't have two
01:21 - functions with the same name in the same
01:23 - scope because just like variables have a
01:27 - scope functions also have a scope they
01:30 - have a region in which they exist that's
01:33 - like physically a region of your
01:36 - code So within this file here I can't
01:40 - create two functions called greet for
01:44 - example some programming lounges let you
01:46 - do that as long as functions have
01:48 - different parameters so you could have a
01:52 - greet that accepts a name and a greet
01:54 - that doesn't accept a name some
01:56 - programming languages let you do that
01:58 - but python doesn't in python you can't
02:01 - have two functions with the same name
02:03 - you can't have two greet functions in
02:05 - this file for
02:07 - example okay
02:10 - so this greet function clearly it
02:13 - creates a greeting that's creating one
02:16 - string actually using the name in this
02:18 - case and then it's printing it but we
02:21 - could instead have a function which
02:23 - creates the greeting and then just gives
02:26 - it back to us so we can do what we want
02:28 - with it so we create the greeting like
02:30 - this let's say I'll actually use
02:33 - different text just to make it a bit
02:35 - clearer let's say
02:36 - Hi and then plus
02:39 - name that's creating a single string
02:42 - from two separate strings so this string
02:45 - and this string but what I want to do is
02:49 - write return here and then a space so
02:52 - we've got return and then we've got some
02:55 - value that we want to return to
02:58 - whichever function calls this and I'll
03:00 - show you how we use this so here we can
03:04 - say
03:05 - greeting equals create
03:08 - greeting and then we have to pass this
03:10 - function a name because it has a
03:13 - parameter here then I can print that
03:16 - let's print
03:17 - greeting let's see what this
03:22 - does so we get hi John this hi John is
03:26 - coming out from here so what this return
03:29 - does
03:30 - is it means you can then use a construct
03:33 - like this so I can create a variable and
03:38 - assign it to the return value of the
03:41 - function which is this this is the thing
03:43 - that's returned from the function
03:46 - returning in this context it just means
03:49 - giving back to whichever function called
03:54 - this and that's the main function so we
03:56 - get something back here in the main
03:58 - function from create
04:02 - greeting this can be confusing to
04:04 - beginners because it looks as though we
04:07 - are assigning some value to the function
04:11 - like we're setting this equal to a
04:13 - function that's not what we're
04:15 - doing we've already seen the same thing
04:19 - when we use the input function we're
04:21 - actually assigning this variable to the
04:25 - return value of this function and the
04:27 - return value is defined by this return
04:30 - keyword here which returns this we don't
04:33 - have to pass parameters to a function
04:36 - that has a return value so I could do
04:38 - this let's say def create simple
04:43 - greeting no parameters there's a colon
04:47 - and I could just say return hi
04:51 - there and that works in the same kind of
04:53 - a way so let's say here simple
04:57 - greeting that's just a variable that I
05:00 - just made up equals create simple
05:02 - greeting and then print simple greeting
05:06 - so if you run this we're going to get hi
05:10 - there and another thing that sometimes
05:13 - confuses beginners is notice that just
05:15 - because you return something that
05:17 - doesn't print it we have to print it
05:19 - ourselves we all do whatever we like
05:22 - with it we can do whatever we like with
05:24 - the return value of a function and you
05:26 - can see that you can think of
05:28 - functions in computer programming or for
05:31 - that matter also in mathematics is kind
05:33 - of like a sort of black box you can pass
05:37 - some data into the box although you
05:39 - don't have to it just depends what the
05:41 - box does and the box then processes the
05:44 - data somehow or does something and it
05:46 - can give you some data
05:48 - back it doesn't necessarily give you
05:51 - data back doesn't necessarily return
05:53 - anything but it can do so in this case
05:56 - here it's as though we've taken some
05:59 - data passed it to this create greeting
06:02 - machine or box or whatever you want to
06:04 - call it course it's a
06:05 - function and that then processes the
06:08 - data somehow like this and it returns it
06:11 - so you end up with this but notice at no
06:15 - stage here is the original variable name
06:18 - actually changed this is simply creating
06:21 - some new
06:22 - data and returning
06:25 - it so try out these examples for
06:29 - yourself and I think you will see how
06:31 - this is working you definitely want to
06:33 - type out this code and see what it
06:36 - actually does some people feel this is
06:38 - fairly clear fairly early on but other
06:42 - people are definitely confused by this
06:45 - so it's definitely worth typing it out
06:47 - and verifying that this does work how
06:50 - you expect it to work you've been
06:52 - watching a free sample from my Python
06:55 - and machine learning for complete
06:57 - beginners course I'm uploading enough
06:59 - videos from the start of the course to
07:02 - get you started with python and machine
07:04 - learning the full course is absolutely
07:06 - massive if you're interested in it
07:08 - please click the link in the description
07:11 - the complete course covers not only
07:13 - basic python but also some fairly
07:15 - Advanced python even some desktop
07:17 - programming stuff and then goes on to
07:20 - machine learning and artificial
07:22 - intelligence until next time happy
07:25 - coding