00:17 - hello this is John from kof programming.
00:21 - comom in this tutorial we're going to
00:23 - look at static class members in C++ now
00:28 - at the moment this is the last really
00:31 - important topic that we need to cover
00:34 - before we can go ahead and uh start
00:36 - coding a real program so unless I think
00:39 - of something else which I might in the
00:41 - next tutorial we can get on to real
00:44 - programs so um let's let's take a an
00:47 - example here I'm going to create a
00:49 - class and um I'll call it test and I'll
00:53 - I'll just Define it here in the same
00:55 - file as um as the main function although
00:59 - normally you put class in their own
01:00 - header and CPP source file but for
01:04 - convenience in this tutorial I'll just
01:06 - Define it right here uh the the actual
01:10 - Eclipse has put in uh a semicolon after
01:13 - the class definition for me as well as
01:15 - the closing bracket there which is which
01:16 - is very
01:18 - handy so we've seen that if if we gave
01:21 - this uh Class A an instance variable um
01:24 - like
01:25 - int um let's call I'm going to call it
01:29 - count for reasons that we'll see later
01:31 - on then every every in every particular
01:35 - object we create from this class in
01:38 - other words every time we instantiate
01:40 - the class every time we create an object
01:41 - from it because the class is just a kind
01:43 - of like a template a
01:46 - blueprint every single object would have
01:48 - its own count so every object would have
01:50 - it its own version of that count
01:52 - variable which can be set separately for
01:55 - every object and we've covered that so
01:56 - far in these tutorials
02:00 - but if you declare a variable static it
02:03 - means that um there's one version of
02:06 - that variable that's shared for all the
02:09 - objects so so the variable becomes
02:12 - associated with the class not the object
02:16 - so to to see that um let's let's make
02:18 - this public so normally you don't make
02:22 - most of the time you don't make
02:23 - variables public but to make this
02:25 - clearer let's make this public and I'm
02:27 - going to declare it static to mean that
02:30 - shared with all objects of this class
02:33 - It's associated with the class not with
02:35 - particular objects now when we create a
02:38 - static variable like this we have to
02:41 - initialize it somewhere because remember
02:44 - normally this variable will be um memory
02:48 - will be allocated for it and a value
02:50 - will be probably given to it as well
02:52 - when we create particular objects but
02:55 - because it's static we need to do that
02:57 - separately somewhere else so see
02:59 - normally this this will be in the H
03:01 - header
03:02 - file and then we'd have a cppp file and
03:07 - um we would normally initialize the
03:09 - static member variables in that CPP file
03:14 - so I'll normally you put this in the CPP
03:16 - file a bit that
03:18 - follows and what would what would type
03:21 - is U we need the type of the variable
03:24 - and we need to specify the class that
03:26 - associated with we put two colons like
03:29 - that and then the variable name and here
03:33 - we should assign a value so let's set it
03:35 - equal to
03:38 - seven now we don't need an object to
03:42 - access this variable because it's not
03:45 - associated with objects it's shared for
03:47 - all objects and associated with the
03:49 - class so we could do stuff like see out
03:52 - test and again we need double colons now
03:54 - to access it
03:56 - count and endler
03:59 - so we're using the class here not an
04:01 - object of this class let's run
04:05 - this and we find that we we get
04:09 - seven now you can you can also create uh
04:14 - static
04:15 - methods and um most often you would
04:18 - access static variables in static
04:20 - methods and again static methods are
04:22 - associated with the class not with
04:25 - particular objects so um let's let's
04:29 - create a public section here and let's
04:32 - make this
04:34 - private let's call this static void show
04:41 - info so static methods are access via
04:45 - the class and they can only access
04:48 - static variables uh if you think about
04:51 - it you can't access a instance variable
04:54 - a non-static variable from a static
04:57 - method because the um the static methods
05:01 - as well as the static variables are
05:02 - associated with the class so there's not
05:05 - necessarily um it's not necessarily true
05:07 - that any instance variables are actually
05:09 - in existence there's not necessarily any
05:11 - objects of this class there could be but
05:14 - in this case there aren't they don't
05:16 - have to be so because this is static we
05:19 - can access it in a static method and we
05:21 - can say see
05:23 - out count so we don't need any pref
05:26 - prefix referring to either static or
05:28 - non-static
05:31 - variables um when we're actually within
05:33 - the class
05:34 - itself so now we can call that method
05:37 - via the class because it's static the
05:40 - actual method is static so we say test
05:43 - colon colon and I can use the autoc
05:46 - complete control space here show
05:49 - info let's take a look at
05:51 - that and we'll run
05:56 - that and we get seven so St static um
06:01 - static methods are great um for example
06:05 - for um if you've just got some um some
06:09 - function that needs to take in some data
06:11 - and return some data but doesn't
06:13 - actually do anything with any instance
06:14 - variables then you might choose to make
06:17 - it
06:18 - static a classic or I show I'll show you
06:21 - a couple of classic uses of um static
06:24 - variables here so one use is you can you
06:29 - can Define constants with them so let's
06:32 - say that we want to Define um a constant
06:36 - called Max for some reason whatever Max
06:38 - is or it could be Pi or something you
06:41 - know uh we can say static int and now
06:44 - it's it's traditional with constants to
06:47 - put them in uppercase you don't have to
06:49 - but it's a traditional thing to do to
06:51 - make it clear it's a constant let's
06:53 - create a constant called Max and I'm
06:55 - going to make that cons so I need the
06:57 - cons keyword in there as well and
06:59 - because it's const we can now assign a
07:02 - value to it directly so we don't have to
07:05 - um do this initialization here for
07:09 - constants you have to give them a value
07:11 - when they're actually declared and then
07:13 - you don't need to do this bit down here
07:16 - so now we could say for example see out
07:19 - well let's make this public because um
07:22 - if we want to access it from outside the
07:24 - class and it is it is um quite common to
07:27 - Define
07:29 - um static constants that are public
07:33 - that's that's not a problem they can't
07:35 - be changed anyway because they're
07:36 - constant so there's no there's no
07:39 - drawback to making them public uh and
07:42 - well often you should make them private
07:45 - if they're only going to be used within
07:46 - the class but often you declare a static
07:49 - constant specifically because you want a
07:51 - constant that you want to be able to
07:53 - access uh just via the class um so let's
07:57 - take a look at this we can say test
07:58 - colum column
08:00 - Max and
08:04 - endler and with a bit of luck that
08:07 - should work so we get now
08:12 - 99 let's just put a note here um
08:16 - initialization
08:19 - initialization of con can be done well
08:23 - must be done must be done right here
08:31 - now um one um one use of a static
08:36 - variable there are lots and lots of uses
08:38 - that they are commonly used but one kind
08:40 - of classic use that you see for example
08:42 - on exams is to count the number of
08:45 - objects you're creating because remember
08:48 - static
08:49 - variables are um static variables not
08:52 - static constants but static variables um
08:55 - are not only shared between all the
08:57 - objects of that class but they can be
08:59 - accessed accessed via all the objects of
09:01 - that class and because they're not
09:02 - constant they can be changed by those
09:04 - objects as well static constants are
09:08 - again can be accessed from all the
09:09 - objects um but um they can't be changed
09:12 - because they're constant so let's look
09:14 - at this static ink count and let's
09:15 - initialize it to zero and let's create a
09:18 - Constructor here so let's say um test
09:23 - it's the
09:25 - Constructor and now we can increment
09:28 - count in that
09:32 - Constructor so um let's let's create
09:35 - some objects from this class so now if I
09:39 - run the show info method so what's
09:41 - happening is um we we're not running the
09:45 - Constructor here because we're not
09:47 - creating any objects we're just using
09:49 - show info with the class and outputting
09:52 - its value and the value that's output is
09:54 - the value we initialize it initialized
09:56 - it to to start with but look at how that
09:58 - Chang is if we create an object let's
10:01 - say test test one that will cause the
10:04 - Constructor to run because Constructors
10:07 - run when you instantiate a class when
10:09 - you create an object from it in other
10:10 - words that will increment count and then
10:13 - when we do show info afterwards we'll
10:16 - get um count equal to
10:18 - one let's run
10:20 - that so we see that um we've um The
10:25 - Constructor incremented this shared
10:28 - shared uh static count remember there's
10:30 - only one static count variable shared
10:32 - between all objects of this class
10:34 - because it's static that's the point of
10:36 - static let's create another one here
10:39 - let's have test
10:41 - two now if you run
10:44 - this we're going to see that now the
10:47 - count is
10:49 - two so we're effectively counting how
10:52 - many objects we're creating which is
10:54 - useful and uh quite a common thing to do
10:57 - is to use that count to initialize ID
11:00 - for your objects so let's create a
11:02 - non-static field so in ID so this is
11:06 - going to be perir object it's not static
11:09 - what we can do is we can say ID
11:12 - equals count
11:15 - Plus+ so um we've actually got two kinds
11:18 - of Plus+ operators in
11:22 - C++ if we put Plus+ after the variable
11:25 - its value will be used first so in this
11:28 - case a assigned to ID and then
11:31 - incremented if we put Plus+ at the
11:34 - start it will be incremented first and
11:37 - then used so this version is called the
11:40 - prefix increment operator the version we
11:43 - had before is the postfix increment
11:45 - operator let's let's see that working so
11:48 - I'm going to create a non-static method
11:51 - here so um let's say public
11:55 - int get
11:57 - ID and that's going to return the ID of
12:01 - the object which we created by using
12:04 - this count so it's going to be unique
12:06 - because every time we create an object
12:08 - we increment count and we assign the ID
12:11 - based on that oops thinking of java here
12:15 - typing public twice okay yeah we need it
12:19 - like this public is just a kind of a
12:21 - section in
12:22 - C++ right so now we can say here we've
12:25 - got test one let's say um see out test
12:30 - 1.g
12:33 - ID and let's do that after test two as
12:39 - well so if we run this
12:42 - now we see that the the test one object
12:46 - whoops I need to also put in um endler
12:54 - there I think I've got everything right
12:56 - here let's let's try it see if it works
13:00 - whoops did something wrong there um yeah
13:03 - I've got the wrong kind of um put to
13:08 - operator okay so um what we're getting
13:11 - now I I should put some text in to make
13:13 - that clearer um object one
13:18 - ID and let's put that down here as well
13:21 - so down
13:23 - here object 2
13:26 - ID so if we run this now we see that
13:29 - object one has id1 object two has
13:34 - id2 so what's happening is when the when
13:36 - the class is defined we initialize count
13:39 - to zero when we create an object from
13:43 - the class which we we do here what
13:47 - happens is um count is first
13:50 - incremented from 0 to one and it's
13:53 - assigned to ID so that object will have
13:57 - always have ID of one and that's what
14:00 - we're seeing here when we create the
14:02 - second object count is incremented again
14:05 - to two and then assigned to um the ID of
14:09 - the second object so the second object's
14:11 - ID is going to be
14:14 - two if we use the postfix increment
14:18 - operator that would first assign the
14:20 - value of count and then increment it so
14:23 - count would be zero and the first time
14:25 - it's used it would be signed to ID then
14:27 - incremented and now our IDs would go
14:30 - from zero upwards so the ID of object
14:33 - one is zero ID of object object two is
14:38 - one so as always uh this seems very
14:41 - complicated when you just watch a video
14:43 - on it but if you try it yourself you'll
14:45 - see it's it's not that bad um and at the
14:48 - very least even if even if you feel that
14:50 - you don't fully understand it if you
14:53 - after coding this yourself you'll
14:55 - definitely increase your understanding
14:57 - of this a lot it's not rock ET science
14:59 - but it does take a bit of practice to
15:01 - get it into your head so what I'd
15:04 - recommend um is first try defining an
15:07 - object and give it a public static um
15:11 - constant variable and check that you can
15:13 - access that via the class and when
15:16 - you've done
15:17 - that try to implement the stuff that
15:20 - I've done here and I'd suggest going
15:23 - through it the way I've gone through it
15:25 - um give it give your class a static in
15:27 - count and then check that you can output
15:31 - count make it public to start with try
15:33 - defining a static method that accesses
15:35 - count and access the count via the
15:38 - static method then try incrementing it
15:41 - in a
15:42 - Constructor and then try defining an ID
15:45 - and give assign the value of that ID
15:47 - based on count also try to postfix and
15:51 - prefix increment operators as I've done
15:53 - in this
15:55 - video so if you if you try all those
15:57 - things and you get them work
15:59 - then you'll be well on your way to
16:00 - having a really good understanding of
16:02 - this so just just for a really quick um
16:05 - summary of that so um let's let's say ex
16:11 - exercises so Define and output a public
16:17 - static
16:19 - constant try
16:20 - that Define and output a
16:25 - nonstatic
16:27 - field um output a static field with a
16:32 - static
16:33 - method um try
16:36 - incrementing um static int field with
16:42 - postfix and prefix
16:45 - operators increment
16:50 - operators so that's that's like um e do
16:53 - e e dog dot that's like count postfix is
16:59 - Plus+ and prefix is Plus+ at the
17:04 - beginning and also try
17:07 - assigning
17:09 - object ID based on count let's say
17:14 - static
17:15 - count incremented in Constructor so
17:20 - that'll give you a pretty good um
17:21 - workout to get you going with this and
17:24 - of course if you feel like experimenting
17:27 - that's even better so don't forget that
17:29 - normally you put your class in a header
17:30 - file so it's it's worth doing that and
17:34 - um put the definition of the methods in
17:37 - a source file as I showed you to do
17:39 - earlier in this course if you just do it
17:41 - like this it does work but it's just not
17:44 - um not the usual way to do it let's say
17:46 - and don't forget that your
17:48 - non-static U sorry don't forget that
17:51 - your static non-constant variables in
17:54 - other words your your static variables
17:56 - they have to be initialized somewhere
17:59 - usually in your CPP source file like
18:02 - this okay so that's it for this tutorial
18:05 - we're going to go on to look at a
18:06 - particle explosion program starting in
18:08 - the next tutorial so until next time
18:11 - happy coding