00:01 - [Music]
00:13 - [Music]
00:16 - hello this is John from Cave of
00:19 - programming. comom in this tutorial
00:21 - we're going to look at const in C++
00:25 - which is a very important key word um
00:28 - believe me I I'm aware that in this in
00:31 - this course we've gone through a lot of
00:32 - quite dry Concepts uh but um we are
00:36 - going through kind of the minimal
00:38 - Concepts really that we need to do any
00:40 - useful code and const although it might
00:43 - not sound very important uh because all
00:45 - it does is keep things from changing
00:47 - basically it is actually very important
00:50 - and we can't really progress further
00:52 - without it so we better look at it here
00:55 - so um let's declare an INT here let's
00:58 - say int value
01:00 - equal
01:02 - 7 and of course a variable the whole
01:05 - point of it is that it can vary so we
01:06 - can change value to 10 or whatever and
01:10 - let's just do a c out here on value why
01:13 - not and let's just run this by the way
01:16 - I've created a little class up here and
01:18 - I'll go through that in a minute don't
01:20 - worry about that for now let's run this
01:22 - so we get 10 now if I type cons before
01:27 - int then that means that we've now got
01:29 - um a int that is Con in other words it's
01:33 - no longer a variable it's actually a
01:35 - constant it can't change so this line is
01:38 - not going to compile let's just build
01:40 - that and prove
01:42 - it and that's very very useful because
01:45 - sometimes you have got values that don't
01:48 - change and you don't want them to change
01:50 - and if you've got a value that you don't
01:52 - want to change you should always declare
01:54 - it Con so that it can't be changed like
01:57 - this uh it's also quite common practice
01:59 - practice to um make your constants
02:02 - uppercase we could say like Pi let's
02:05 - maybe make this a double cuz Pi is going
02:06 - to be a double and um
02:10 - 3
02:12 - uh 4 1 5 92 I think that's Pi I always
02:19 - remember it with how I wish I could
02:22 - calculate pi it's the number of letters
02:24 - in each of those words but anyway that's
02:26 - irrelevant so I put this in upper case
02:28 - to SC the fact that it is a constant and
02:31 - not a variable and that's a very common
02:33 - thing to do let's just run that there we
02:37 - go now you can also declare methods
02:40 - constants let's take a look at this
02:42 - animal class that I've created um maybe
02:45 - the easiest way to explain this is to
02:46 - show it you so I'll create an animal
02:49 - here like this and I've given it a
02:52 - method called set name so we can do
02:53 - animal do set name let's set it to
02:57 - Freddy and I've also given it a method
03:00 - called speak so we can do animal dope
03:03 - and that outputs the name so let's just
03:06 - run this and it says my name is Freddy
03:10 - usually most often we declare a class in
03:13 - a header file and we put the
03:15 - implementations of the methods of that
03:17 - class in a separate CPP file separate
03:21 - source file but in this case I put the
03:23 - class here because we can do that and
03:25 - it's easier to read for this
03:27 - tutorial and uh I put the with the
03:30 - implementation right here as well so
03:32 - we've uh we've got inline method
03:35 - implementation here meaning it's
03:37 - declared uh right where we create the
03:39 - class rather than being in a separate
03:41 - file and that's useful for very small
03:43 - methods usually in your class here I'm
03:46 - just doing it for the convenience of
03:48 - this
03:49 - tutorial so um this this method here set
03:53 - name
03:54 - changes um instance variables of the
03:57 - class of of each object in other words
03:59 - changes the name of the
04:01 - objects um but speed doesn't change
04:04 - anything and if we've got a method that
04:07 - doesn't change any instance data of the
04:10 - class uh in other words well strictly
04:13 - speaking a class can't have instance
04:15 - data the objects have instance data but
04:18 - this is like a template for saying that
04:19 - each object is going to have an instance
04:21 - variable called name so each object will
04:24 - have its own separate name variable and
04:27 - if you've got um a method like this that
04:29 - does doesn't change an instance uh any
04:32 - instance data you can declare it const
04:36 - and that will prevent you from changing
04:38 - the instance variables of the objects
04:41 - here in that method and I've typed const
04:44 - after the round brackets of the that
04:46 - follow the method name and before the
04:49 - implementation so now this this is still
04:51 - going to work if I run this it will work
04:53 - just as before my name is Freddy but if
04:56 - I did something in here like I try to
04:58 - change name to something like
05:01 - that then that is now not going to work
05:04 - it's not going to build let's build that
05:07 - and we'll see so we get errors and if
05:09 - you look at the error we'll get
05:11 - something like um well it's a bit
05:15 - cryptic um as um C++ errors tend to be
05:19 - saying no viable overload equals but
05:22 - it's telling us that we there's there's
05:24 - no form of equals that makes any sense
05:26 - here in this context because this is a
05:29 - con method if that wasn't there we'll be
05:31 - able to do that absolutely fine so if I
05:34 - can build
05:35 - this but because we don't want this to
05:37 - be here we don't want this method to
05:40 - change anything it's good practice to
05:42 - declare it Con I and many other
05:45 - programmers are a bit slipshod in
05:48 - declaring things const sometimes
05:50 - especially methods but if you've got a
05:52 - method that you know doesn't change the
05:53 - instance data really you should declare
05:56 - it cons just to reduce bugs to reduce
05:59 - accidentally changing something which is
06:02 - far easier than you might
06:04 - suspect so um now we can't accidentally
06:07 - change anything in this
06:10 - method uh con can get a little bit
06:13 - tricky as can type declarations in
06:15 - general in C++ let's take an example of
06:17 - um a kind of
06:20 - typical uh example of such trickiness so
06:23 - let's create an INT here int
06:26 - value equals um
06:31 - 8 we can declare a pointer to that value
06:34 - by saying
06:36 - int pointer P value and we we can set we
06:41 - can initialize it here if we want
06:42 - already and say it's equal to the
06:45 - address of value then of course we can
06:48 - output that like this we can say see out
06:51 - thing pointed to by P value and that
06:54 - will give us eight this is D referencing
06:57 - the pointer getting the thing that it's
06:58 - pointing at which is going to be the
07:00 - value eight
07:01 - ultimately so we run this and we've got
07:05 - eight there of course if we change this
07:07 - at this point then we get something
07:10 - different here because the pointer is
07:13 - just referring to the memory
07:15 - location of that variable it's a lot
07:19 - like a reference so there we've got nine
07:22 - let's get rid of that now what what I
07:25 - want to show you is if we um we we can
07:28 - do two things things here to actually
07:30 - change this uh let's do it after that c
07:34 - out um we can change the kind of pointer
07:37 - variable in two ways one way is um let's
07:40 - say we have another value let's call it
07:43 - int I don't know I'll just call it
07:45 - number and I I'll set it equal to
07:48 - something um just why not really um so
07:52 - in number equals 11 I can say P value
07:57 - equals address of number Nothing Stops
08:01 - me pointing that
08:03 - value at pointing this pointer at a
08:06 - different int it's fine let's output P
08:10 - value again down here now it's going to
08:13 - say 11 and we got 11 and we can also use
08:17 - the pointer to change the thing that the
08:20 - pointer points at so this is actually
08:22 - changing the pointer itself to point
08:24 - somewhere else but we can use the
08:26 - pointer to change whatever it points at
08:28 - we can say thing. 2x P value equal
08:32 - 12 and we're also allowed to do that so
08:36 - we can change the let's not do that what
08:40 - did I do yeah I've got capital P by
08:42 - mistake so we can change two things
08:45 - associator with the pointer we can
08:46 - change where the pointer points and we
08:49 - can change the value that the pointer
08:51 - points
08:52 - too so now here um sorry here where I
08:56 - where I declare the pointer I can say
08:58 - cont before the int and we can read this
09:02 - backwards so this is now a pointer to an
09:05 - INT that is
09:07 - constant so that means that we can't
09:10 - change the int that the pointer points
09:13 - at using this pointer it's a pointer
09:16 - this is a pointer to an INT that's
09:19 - constant the int is constant as far as
09:23 - this pointer is concerned and we can't
09:24 - change it so that means if we compile
09:27 - this program we're going to get an error
09:31 - here here we're trying to change the int
09:34 - and it and the int is constant so we
09:37 - can't do
09:38 - that so um this gives us an error
09:44 - there const int value let's let's maybe
09:47 - copy
09:48 - that um let's say um error with
09:56 - this what if the const was actually here
10:02 - now if we read it backwards now we've
10:05 - got a constant pointer to an INT and
10:10 - that means um the int isn't constant
10:12 - anymore the pointer is constant we've
10:15 - got a constant pointer to an INT so we
10:18 - can't reassign the pointer to point
10:21 - somewhere else now we get an error on
10:22 - this line let's build this and we'll see
10:27 - so we'll build this and now we've got an
10:29 - error here because we can't reassign
10:31 - this
10:31 - pointer so let's let's copy this and
10:35 - say error with
10:41 - this so if I delete that we're allowed
10:43 - to do
10:45 - both as
10:47 - before let's just run
10:49 - this there we go and you can use both
10:53 - together so if we say this and
10:57 - this now we've got a um constant pointer
11:02 - to an INT that's constant so we can't we
11:06 - can't point the pointer somewhere else
11:09 - and we can't change the int that it
11:10 - points at we could change it using the
11:12 - original variable but we can't change it
11:14 - using the pointer cuz the pointer as far
11:17 - as the pointer is concerned the int is
11:19 - constant so that that's kind of um a
11:22 - good trick there if if we build this
11:24 - we're going to get errors with both of
11:26 - those
11:26 - lines so um let's maybe comment this out
11:31 - cuz I like to leave my programs in a
11:33 - working State and let's get rid of this
11:37 - const and that const so we can so we can
11:41 - build
11:42 - this so that's a kind of a neat trick
11:45 - for interpreting um conss and um
11:48 - interpreting types in general in C++ is
11:51 - to read them
11:52 - backwards because um that gives you a a
11:56 - true reflection of what they mean
11:58 - reading them forwards pointer to an in
12:00 - that's
12:01 - constant okay so I'm going to leave it
12:03 - there for this tutorial um and as always
12:06 - I'd recommend practicing this start with
12:09 - declaring your own constants and verify
12:11 - that you can't then change them try
12:13 - creating a constant method and verify
12:15 - that you can't change instance variables
12:18 - of your class using that method and
12:21 - finally uh experiment with pointers try
12:24 - to declare a pointer to something that's
12:26 - constant and try to declare a constant
12:28 - poter
12:30 - and also try to declare a constant
12:32 - pointer to something that's constant so
12:34 - try all the possibilities that I've gone
12:36 - through in this tutorial and again
12:38 - although you won't feel fluent after
12:40 - doing this it will help fix that in your
12:42 - mind so that when you use it later on um
12:45 - it's going to you're going to understand
12:47 - it much more readily than if you don't
12:49 - do these exercises but of course it's up
12:52 - to you if you just want to watch these
12:53 - videos and try to write programs that's
12:55 - probably what i' do myself if I'm honest
12:57 - cuz I'm so lazy it's just that they
13:00 - they're bound to get very confusing if
13:02 - you don't do any exercises so I'll leave
13:04 - it there and until next time happy
13:06 - coding
13:17 - [Music]