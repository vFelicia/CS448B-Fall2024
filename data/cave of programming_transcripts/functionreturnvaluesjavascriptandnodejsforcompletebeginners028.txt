00:00 - hello this is John from cave of
00:02 - programming calm in this video we're
00:05 - going to look at function return values
00:07 - continuing my course on JavaScript and
00:10 - no js' for complete beginners so in the
00:14 - last video we took a lot about function
00:17 - parameters and passing arguments to
00:19 - functions now we're going to look at
00:21 - getting values out of functions with
00:24 - return values let's create a new file
00:26 - here and call it function I don't know I
00:30 - just call it return a s actually for the
00:33 - moment okay so start with you strict
00:38 - supposing we want to create a function
00:42 - that lets us pass a value in and get a
00:45 - value out of it so we've seen that
00:48 - functions are basically collections of
00:50 - statements which we can call or in other
00:53 - words call to X caused to execute
00:56 - whenever we want but we can also pass
00:59 - values to them whether those are strings
01:02 - arrays whatever they are numbers and
01:05 - here we're going to look at getting
01:08 - values out of functions again there's
01:10 - create a function I'm going to call this
01:13 - square so if I just put for the moment
01:18 - console dot log square that does that
01:25 - defines a function and to actually make
01:27 - the function run we have to write Square
01:30 - and we can run it wherever you want here
01:34 - in our program now let's write node
01:37 - return is to actually run the program
01:40 - and it says square so we can pass a
01:44 - value to it if we want let's let's
01:46 - create a function that allows us to pass
01:48 - in a single argument I'm going to call
01:51 - this number and we're going to pass in 7
01:56 - as the argument this is a parameter
01:58 - remember it's a function parameter and
02:01 - we're going to pass 7 as an as an
02:05 - argument to the function so 7 is going
02:07 - to end up in this parameter and we can
02:09 - output if we want that's right number
02:13 - there this is like a variable basically
02:16 - and if I run this we see it says square
02:20 - seven now we will what happen there
02:25 - let's just close that I don't know what
02:27 - happen so now we can also get values out
02:30 - of functions you might in that we want
02:33 - this function to square this number in
02:37 - other words multiply it by itself we can
02:42 - do that like this so let's get rid of
02:45 - this console dot log and write return so
02:49 - we need we need the return keyword here
02:51 - and then we type what we're going to
02:54 - return so actually let's calculate that
02:57 - first let's write let Square equal
03:02 - number times number so just squaring the
03:05 - number multiplying it by itself in other
03:08 - words and then to actually return a
03:12 - value we rights right the value that we
03:14 - want to return this could be a string or
03:17 - a number or anything and how do we
03:19 - actually get that well when we call the
03:22 - function it effectively it kind of
03:26 - returns a variable so we write let let's
03:30 - call it value value equal square seven
03:33 - and then our output here value and if we
03:41 - run that it says 49 which is 7 times 7
03:46 - we could write this more succinctly
03:48 - because we don't we don't really need to
03:51 - have two statements here we could just
03:54 - say return number times number we could
03:58 - put here we turn number times number and
04:01 - that would do the trick but I've just
04:03 - written out a bit more and a bit more of
04:05 - a complicated way here just to kind of
04:07 - highlight the fact that we could we
04:10 - could have all sorts of calculations or
04:12 - all kinds of processing here we could be
04:14 - doing all kinds of things who knows
04:15 - opening files reading them who knows but
04:18 - at some point in the function well at
04:22 - the end in this case we return
04:25 - some results of all our processing or
04:28 - calculations and we can get it like this
04:31 - so it's as if this this function is sort
04:34 - of you know to go back to my sort of
04:38 - shoot analogy from them from the last
04:40 - video sort of throwing seven down a
04:42 - chute here and it's emerging here and
04:45 - it's getting put into this variable and
04:48 - here were kind of don't really know how
04:52 - this fits with my analogy but were we're
04:56 - kind of returning or spitting out this
05:00 - value square and when we actually call
05:06 - the function when we actually execute it
05:09 - we can say let value equals square or
05:12 - let whatever we want equals Square and
05:14 - then we get the actual value that we've
05:16 - returned so this can look confusing
05:20 - because it looks as though we're getting
05:23 - a variable and we're setting it equal to
05:25 - a function and that's not what is
05:27 - happening what is happening here is that
05:30 - we are declaring a variable and setting
05:33 - equal to the return value of a function
05:36 - which happens to be in this case a
05:39 - number so as always the thing to do is
05:42 - type this out practice it a bit yourself
05:46 - let's take another example here or maybe
05:49 - get rid of this blank line let's go down
05:52 - and create another function so supposing
05:56 - we want to create a function that
05:58 - returns a greeting let's write function
06:02 - I'll call it greet do we want to pass it
06:05 - any arguments well we could pass in for
06:08 - example a name so let's just write name
06:11 - there and and again this is just like
06:15 - value and like yeah like value and like
06:21 - number this is just a variable name that
06:24 - I've made up could be anything within
06:26 - reason and let's create a string here
06:29 - let's say let greeting we don't want to
06:35 - we wouldn't want to say here let greet
06:37 - equal we don't want to
06:38 - get confused by using the function name
06:40 - for a variable give it a different name
06:42 - let's say let greeting equal and we'll
06:46 - have a string hello and let's add on to
06:51 - that name this is an idea that we'll see
06:58 - in a second
06:59 - but we'll leave it for that for a minute
07:02 - and then what should what should we
07:04 - return from the function
07:05 - let's return this greeting so I'm going
07:08 - to say here return greeting let's call
07:13 - this function so I need to say if I just
07:18 - write greet and then pass it a name like
07:22 - Neptune perfectly reasonable name and
07:26 - run this it doesn't do anything apart
07:30 - from what I've already told it to do
07:32 - above but I can now get the return value
07:37 - of the function so this function it's
07:39 - not outputting anything directly it's is
07:43 - only returning something so when we talk
07:46 - about returning a value in programming
07:49 - we mean a very specific thing we don't
07:51 - mean that were for example printing the
07:55 - value like displaying it on the console
07:56 - we mean we've got this return keyword
07:58 - and we're actually returning a value
08:00 - from a function so to access that value
08:03 - I need a variable well we could actually
08:06 - just write conte well I don't mean to do
08:09 - that
08:09 - let's do control said undo undo there we
08:13 - go right we could actually do this
08:14 - console dot log and this would this
08:19 - would actually use console dot log to
08:22 - output the return value of this function
08:24 - let's try it
08:27 - so it says hello Neptune you can see
08:29 - that this is not ideal because Hello is
08:31 - run together with Neptune what we need
08:34 - to do is is have a space after hello so
08:37 - I can put that inside the quotes like
08:39 - that and then it looks a lot better so
08:43 - now we've got hello Neptune
08:47 - but perhaps more often we would be
08:51 - storing the return value of a function
08:54 - in a variable and then using it further
08:55 - in our program so that's right let I'll
09:00 - call this greeting again let greeting
09:05 - equals greet and we passed the argument
09:07 - Neptune and that's right console dot log
09:13 - greeting and I run that and it outputs
09:20 - hello Neptune now in this case the
09:23 - variable name happens to have the same
09:25 - name is what we were what we were as the
09:28 - variable we were returning but this is
09:31 - an entirely different variable to this
09:34 - one here this variable because it's
09:38 - declared inside these curly brackets is
09:41 - we can only access it actually within
09:45 - the curly brackets this is an entirely
09:47 - different variable so I couldn't write -
09:50 - lots of let greeting here let's set that
09:56 - equal to something let's see what that
10:00 - does that gives us an error it tells me
10:04 - that identifier greeting has already
10:06 - been declared but here we say that the
10:13 - scope of this variable is restricted to
10:17 - this code block it's not visible outside
10:20 - this code block that's why I'm able to
10:22 - declare another variable with the name
10:24 - greeting here outside the code block
10:26 - where this one is no longer visible and
10:30 - there's no reason why this has to have
10:32 - the same name as this there's no
10:34 - connection between them other than that
10:36 - this is being used to get a return value
10:38 - of this function so I could call it
10:40 - something else let's write message and
10:46 - we'll run this and if any of this seems
10:49 - unclear to you it will become clearer
10:51 - with practice you do just need to
10:53 - practice this it's like learning a
10:55 - musical instrument watching videos is
10:57 - not enough you've got to actually do it
10:59 - yourself the video is only
11:00 - a source of information to guide your
11:02 - practice so it says hello Neptune okay
11:06 - we'll leave it there for this video I
11:08 - think maybe one last thing by the way if
11:14 - you've got a function that returns a
11:16 - value you don't have to pass it any
11:17 - arguments you could happily have a
11:20 - function that accepts no arguments and
11:23 - returns a value those are two separate
11:25 - things all together if you wanted to
11:27 - really quickly square a number you don't
11:29 - actually need a function to do it so you
11:32 - could just write let's write console dot
11:34 - log and math dot Pao short for power 7 ^
11:45 - - in other words 7 squared and that
11:48 - would give us 49 again let's maybe pick
11:51 - a different number like 8 there should
11:53 - be 64 there we go so if you look at this
11:59 - this is actually calling a function and
12:02 - passing it to arguments in this case the
12:05 - function is part of what we call the
12:07 - math class we haven't looked at classes
12:10 - yet we'll be looking at them later on
12:12 - but by looking at functions we've taken
12:15 - a step big step towards actually
12:17 - understanding what's going on here ok so
12:20 - do try this out for yourself don't
12:22 - forget you can find my git repository by
12:26 - going to github.com slash cave of
12:29 - programming that's all one word
12:30 - lowercase and until next time happy
12:34 - coding