00:00 - [Music]
00:17 - hello this is John from Cave of
00:20 - programming. comom and this is a another
00:23 - beginners tutorial on C++ and in this
00:26 - tutorial we're going to create a basic
00:28 - hello world C C++ program and run it so
00:33 - I'm going to explain um a lot of kind of
00:36 - things to you in this tutorial but
00:38 - there's no need to memorize everything
00:39 - I'm saying here I'm just going to kind
00:41 - of uh begin to introduce you to some
00:44 - ideas and the important thing here is
00:46 - after this tutorial to go away and
00:48 - create your own hello world C++ program
00:52 - so hopefully by this point you've got an
00:54 - IDE installed uh preferably Eclipse but
00:57 - another one's good too and you've got a
00:59 - compiler in so and um if if the two are
01:02 - not talking to each other properly then
01:05 - this is the point at which you'll
01:06 - probably find that out and you'll have
01:08 - to go away do some Googling and figure
01:10 - out how to tell your IDE where the
01:13 - compiler is so um let's let's take a
01:17 - look so here's eclipse and I'm going to
01:19 - go to file new C++
01:23 - project and if you're using like uh
01:25 - another IDE like visual uh C++ or
01:29 - something then you might have to use a
01:31 - different menu option but usually with
01:34 - C++ uh in your IDE you create a project
01:38 - first and that's not a C++ concept
01:41 - that's to do with your IDE it's a way of
01:43 - organizing your files so you create a
01:47 - C++ project in your IDE and then you can
01:50 - add C++ files to it let's give this
01:54 - project a name and I'm going to call it
01:56 - hello
01:57 - world and in Eclipse here I'm going to
01:59 - select hello world C++ project as as
02:03 - this option here and um all idees as far
02:07 - as I know um uh they will provide you
02:10 - with a way of creating a hello world
02:13 - project uh
02:15 - automatically which um is good because
02:18 - believe believe me just getting a basic
02:21 - C++ program running is a huge
02:23 - achievement and when you've done this uh
02:26 - in my opinion it's sort of if anything
02:28 - gets slightly easier
02:30 - from here on in so um I'm going to
02:33 - create Hello World C++ project and I'm
02:35 - just just going to click next here you
02:36 - can go through all these screens if you
02:38 - want let's just step through them or you
02:40 - can just click finish straight away
02:42 - let's go next and uh here we've got uh
02:46 - debug and release targets which I'm
02:47 - going to talk about in a little while
02:49 - and I'm just going to click
02:53 - finish so here's here's the project and
02:56 - uh we can already run this and to
02:58 - actually run it um in some IDs you can
03:02 - just click the Run button straight away
03:04 - in this version of eclipse uh we've got
03:07 - to go to project and build
03:10 - project so when you create a C++ uh
03:15 - project you need to build it building it
03:17 - basically means doing all the steps that
03:20 - are involved uh in taking your text file
03:23 - and turning it into a program that's
03:25 - called building it so and there are
03:28 - several steps involved but your IDE will
03:31 - do those automatically for you so we
03:33 - need to build the project and we can
03:35 - then run it so I can now click run um
03:38 - this Green Run button here in eclipse
03:41 - and we can see it says hello world down
03:44 - here so we've actually run a C++ program
03:48 - and that text is actually coming from
03:51 - here you can see there are two double
03:52 - quotes here and a good thing to do is
03:56 - replace the text between the double
03:57 - quotes with something else else let's
04:00 - say hello the
04:05 - world so between the double quotes it's
04:08 - just ordinary English text you can use
04:10 - most characters there with a few
04:12 - exceptions uh like um if you put a I
04:16 - don't know maybe um like a back slash in
04:18 - you could have problems because there's
04:20 - some special characters that have a
04:22 - special meaning within strings in
04:24 - C++ but uh basically you can put pretty
04:27 - much anything in there maybe even just
04:29 - the back slash actually just to come
04:31 - come to think of it that might be the
04:33 - only problem let's run that again now
04:35 - it's already built Eclipse will let me
04:36 - run this program uh by just clicking the
04:39 - Run button and it asks me if I want to
04:41 - save it so I say yes and it's just going
04:43 - to build it automatically rebuild it and
04:45 - run it and it says hello there world
04:49 - again now if if you're using a different
04:52 - compiler this could look slightly
04:55 - different the return zero could be
04:58 - missing um
05:00 - this might say void instead of int there
05:02 - might be stuff between these two
05:04 - brackets uh iOS stream here that stands
05:08 - for input output stream it might be
05:10 - iostream Doh it's possible that even
05:13 - this might be missing so it might look a
05:16 - little different and uh that's that's a
05:19 - great thing about getting your your IDE
05:21 - to generate it automatically that it's
05:23 - going to generate one appropriate for
05:25 - your compiler and the main program this
05:27 - is this is the um the main function we
05:30 - call it uh is one of the areas in which
05:35 - there's some diversity from compiler to
05:37 - compiler in
05:38 - C++ uh this would probably work with
05:41 - most compilers if not all but um yeah
05:44 - it's not it's not completely
05:47 - short so um so having done that let's
05:50 - let's take a little bit of a look at
05:52 - this and uh as I say that the take-home
05:55 - thing for this tutorial is to get your
05:58 - compiler to generate this um this
06:01 - program and then run it figure out how
06:03 - to do that and if it doesn't work at
06:05 - this point if you get some weird
06:06 - messages uh make sure you've got your
06:09 - compiler installed and then just Google
06:11 - for how to um how to get your IDE to
06:15 - link to that compiler that you've
06:17 - installed and that's going to be a
06:18 - little different depending on what
06:20 - platform you're on and what compiler and
06:23 - IDE you're using for me it was very
06:25 - simple I didn't have to do any
06:27 - configuration as far as I can recall I
06:29 - just um installed the uh the G new C++
06:34 - compiler on the Mac and I just unzipped
06:37 - Eclipse downloaded it and unzipped it
06:39 - and somehow it found it but that's not
06:42 - necessarily going to be the case on
06:43 - other platforms so I can't give Specific
06:46 - Instructions but it's it's really
06:48 - important to get into the habit of
06:49 - Googling stuff like
06:51 - this so one one really good thing to do
06:54 - is to type this out yourself from
06:57 - scratch and at that point uh if if
06:59 - you're anything like me you will make uh
07:02 - some terrible mistakes and it won't work
07:05 - and you'll have to refer back to you
07:07 - know you can take a copy of this put it
07:09 - in notepad or something and refer back
07:11 - to that copy and then you can see what
07:14 - you've missed out what you've done wrong
07:16 - which is a very very valuable thing to
07:19 - do so let's let's see if we can
07:20 - reconstruct this from scratch um so the
07:23 - first thing that was in there was just a
07:25 - comment and I don't know exactly what it
07:27 - said but in C++ if you type two forward
07:30 - slashes like this these are forward
07:32 - slashes uh then you can type whatever
07:34 - you like on the same line after it so I
07:37 - could put hello world it's just a
07:38 - comment to
07:40 - yourself and people always say uh
07:42 - programmers that uh commenting your code
07:45 - is very very important and it is but um
07:48 - almost every programmer I I've known was
07:51 - lazy about it uh to be honest with you
07:55 - and also sometimes you end up writing
07:56 - comments changing the code and you
07:58 - forget to change a comment and then the
08:00 - comment is nothing but a confusion so uh
08:04 - I I don't know I'm not a big commenter
08:05 - but I try to make comments if I type
08:08 - some code that I'm then going to look at
08:10 - later and think what the hell is that
08:12 - supposed to do it's really helpful to
08:14 - type some comments before so you could
08:16 - have um you know more comments there a
08:19 - basic program you can put them wherever
08:20 - you like as long as they start with
08:22 - these uh forward slashes but don't worry
08:25 - about memorizing this we'll be we'll be
08:27 - looking at it again and you could just
08:29 - miss those out of course as well and the
08:31 - next line was a started with a hash sign
08:34 - and it said then include immediately
08:37 - after the hash sign and then we had a
08:40 - open um and
08:42 - close uh like diamond
08:44 - bracket and these uh uh brackets in C++
08:48 - they always come in purs pretty much
08:50 - always so whenever you type an opening
08:53 - bracket you should always put the
08:55 - closing bracket in immediately and your
08:57 - IDE will usually do that for you uh and
09:01 - it's if it doesn't it's really important
09:02 - to make sure that you start off with a
09:04 - pair of brackets and then inside these
09:07 - brackets we're going to type I stream
09:09 - lowercase again C++ is case sensitive so
09:13 - you need to get the case of things
09:16 - correct and what this is actually doing
09:18 - um you won't understand most of what's
09:21 - in this basic program uh until you've
09:24 - been doing C++ for a while we're going
09:27 - to have to look at more Concepts before
09:28 - you can understand the the basic hello
09:31 - world program but I'm going to just make
09:33 - some remarks just to begin to get you
09:35 - used to it and what this is actually
09:37 - doing is it's actually an instruction to
09:39 - take a file uh called
09:42 - iostream and actually literally put it
09:45 - in the um this file or like a some copy
09:49 - of this file before compiling it before
09:52 - turning it into an actual program so you
09:55 - don't see that happening it happens
09:56 - behind the scenes but we're actually
09:58 - picking up another file
09:59 - and bunging it in here um almost
10:03 - literally and then we're going to say
10:05 - using
10:06 - name
10:08 - space standard it's actually STD and
10:12 - then
10:13 - semicolon uh and in C+ plus uh a lot of
10:17 - what well what you're typing will
10:19 - consist of statements and a statement
10:21 - has to finish in a
10:23 - semicolon uh not everything is is a
10:26 - complete statement though but basically
10:28 - in C++ you have to get into the Habit as
10:31 - in Java of typing semicolons at the end
10:34 - of most lines so there isn't one here
10:37 - this for some reason is not considered a
10:39 - statement sorry this one but this is and
10:42 - it has to have a semicolon at the end of
10:44 - it and uh often when you start out you
10:47 - you'll just miss out the semicolons by
10:49 - mistake but um gradually you get used to
10:52 - putting them in um because you need them
10:55 - and then following that we had
10:57 - int and uh uh main in is uh a type
11:03 - declaration we'll talk about that very
11:05 - shortly main is the name of a function a
11:07 - sub routine and then we're going to have
11:09 - two round brackets so again I put the
11:12 - opening and closing one in at the same
11:14 - time even if you're going to type stuff
11:16 - between the brackets put the closing one
11:18 - in where you have the opening one sorry
11:21 - put the immediately put the closing
11:23 - bracket in after typing the opening one
11:25 - and then again another illustration of
11:27 - this is we now have two curly brackets
11:29 - so an open curly bracket and if I hit
11:32 - return Eclipse here is pulling the
11:34 - closing curly bracket in for me uh
11:37 - immediately and if it doesn't if you're
11:39 - using an IDE that doesn't do that well
11:42 - probably get another IDE but uh type it
11:45 - yourself always have pairs of
11:48 - brackets then the next line was like
11:50 - this it said see out uh which is
11:53 - technically an object but again we'll
11:55 - get on to that and then two um this is
11:57 - actually called these to um here
12:01 - although it's the same symbol AS this
12:03 - here this is not cons these are not
12:05 - considered brackets the these are what
12:07 - we call an operator this is actually the
12:10 - um in the insertion operator I think
12:14 - it's called or sometimes put two I just
12:18 - like to call them Chevrons because they
12:19 - look like Chevrons uh so it's the um
12:22 - insertion
12:24 - operator and uh after that two double
12:27 - quotes and again when you when you type
12:29 - type A a double quote or a single quote
12:32 - put the other closing quote in
12:33 - immediately CU they they almost always
12:36 - have to be in
12:37 - purs and um here we can type some text
12:40 - whatever we like so we'll put hello
12:42 - world hello world and then after that
12:45 - another insertion operator and then
12:48 - endler and which stands for end line and
12:51 - then a
12:53 - semicolon uh so you can you think of
12:55 - this these um insertion operators you
12:58 - think of them inserting this stuff kind
13:01 - of into this object the syntax of this
13:04 - thing here C out is uh is a is a little
13:08 - bit weird so um again this this isn't
13:11 - something that uh as a programmer you'd
13:13 - really even think about that much you
13:15 - just get used to typing this with
13:17 - practice with doing it over and over
13:19 - again so you don't have to worry about
13:20 - it too much and this end L it's actually
13:23 - um creating um a blank line at the end
13:26 - of hello world so if we output more text
13:29 - after this we we get more lines of stuff
13:32 - and then finally after that I'm going to
13:34 - type return Z semicolon so it's another
13:37 - statement ending in a semicolon and the
13:40 - zero is actually a code that's uh we say
13:43 - it's returned in this case to your
13:45 - operating system and zero by convention
13:48 - means everything's okay so uh it's not
13:51 - an error code um like we could say one
13:53 - two or three we could say that those are
13:55 - error codes you know in our program but
13:57 - it's a zero to say everything's
14:00 - fine and then uh let's run this again so
14:03 - I'll click the Run button uh yeah I want
14:05 - to save it and it says hello world so
14:09 - this is a complete C++ program you can
14:11 - experiment with this a little bit if you
14:12 - want but we're going to look at that
14:14 - more in um in a future tutorial and
14:18 - probably at the moment any change you
14:19 - make will probably break it because at
14:22 - the moment if you if you're new to this
14:23 - you don't know what you're doing and
14:24 - that's normal it's also normal to have
14:26 - great difficulty remembering all this
14:28 - because
14:29 - when you first see it it just looks like
14:31 - nothing on Earth um and that's why I'm
14:34 - I'm taking it so slowly here so yeah
14:37 - just just try to get this try to get
14:38 - your IDE to generate this and if you can
14:40 - be bothered type it out yourself and see
14:43 - where you go wrong because that's very
14:45 - useful to
14:46 - do um one one last thing that I want to
14:49 - do in this tutorial is just we're just
14:50 - going to look a little bit at the
14:52 - structure of the folders and the files
14:54 - uh that the IDE has actually generated
14:58 - for us and again you don't need to
15:00 - memorize this I'm just kind of
15:01 - mentioning it to begin to get you
15:04 - familiar with it if we expand hello
15:06 - world here um we can see there's a debug
15:11 - folder and um by default most compilers
15:14 - will generate a um a debug actually I'm
15:19 - not sure if it is the default but
15:21 - certainly in this case we developed a
15:23 - debug version of the program so the
15:25 - program we've created is not intended to
15:28 - be given to people it's intended for
15:30 - developing programs and it's got special
15:33 - symbols in it that can help us uh find
15:36 - the bugs and the program but what we can
15:38 - do is we can go to um let's see project
15:43 - build
15:44 - configurations and I go to set active
15:47 - and release and again this differs
15:50 - depending on your IDE but usually you
15:52 - can find that pretty simple way maybe in
15:55 - visual C++ it's just a drop- down box on
15:57 - a toolbar or something I I don't know um
15:59 - cuz I haven't used it recently but I'm
16:01 - going to go to build configuration set
16:03 - Active Release and we say here that
16:05 - we've configured it to build a release
16:08 - Target the Target is the program we're
16:10 - creating so we're talking about creating
16:12 - a release Target that we can actually
16:14 - release to people give to people and I
16:16 - click let's click project build project
16:20 - we've now got another folder called
16:22 - release and if I expand that uh this is
16:25 - actually our program and I can run the
16:26 - release version as well and it's says
16:29 - hello
16:30 - World um let's let's now um oh yeah so
16:33 - here's a source folder with hello world.
16:35 - CPP let's just go to the console and
16:38 - take a look at this so I'm going to show
16:40 - you console instructions um while here
16:43 - on my Mac which is uh a Unix like system
16:48 - very very common to jeta to create C++
16:51 - in a Unix like system for example Unix
16:55 - or the or the Mac OS or uh Linux
16:59 - but um if you're using so if you're
17:01 - using
17:02 - Windows uh then the commands you'd have
17:05 - to type would be a bit different here
17:07 - and I'm not going to get into a tutorial
17:09 - on um console commands but I'll explain
17:11 - a little
17:12 - bit and uh yeah is if you don't know how
17:17 - to use a console for your system it is
17:20 - worth learning uh because that's
17:22 - probably something that you will need
17:23 - later on as a if you're going to be a
17:25 - C++ developer uh so let's go to um let's
17:29 - go to the terminal here in the mac and
17:31 - in Windows it's called um the I think
17:35 - the windows console and you you used to
17:38 - be able to start it by going to the
17:39 - start menu and then there's a in one of
17:41 - the submenus there was something called
17:43 - command CMD or you could go run command
17:47 - CMD uh but anyway so uh I'm just going
17:50 - to go to this program here I'm going to
17:52 - click on the program folder root folder
17:55 - go and right click and go to
17:57 - properties and and uh resource here and
18:00 - there you can see where the the
18:02 - Project's actually created so I'll just
18:04 - copy
18:05 - that copy this
18:08 - path and I'm going to go to the
18:11 - terminal and I'm going to type CD and in
18:14 - double quotes let's paste in that path
18:16 - so this will look a little different on
18:17 - Windows but on Windows it's also CD I
18:20 - think change directory and hit return
18:23 - and then I'm going to do LS on Windows
18:25 - it will be dur uh Di and here we can see
18:29 - the contents of my project folder if I
18:32 - do LS
18:34 - Source uh that's SLC um we call this
18:37 - source code the stuff we're actually
18:39 - typing and I can see what's in it
18:42 - probably dare di Source would work on
18:45 - Windows I think and um or you might have
18:49 - to CD into the actual Source
18:51 - folder I don't know it also works but
18:54 - here here's my actual code and uh yeah
18:57 - in a Unix system I can do cat type h and
19:02 - um uh I'm using the bash shell here so I
19:05 - can type um tab to complete the file
19:08 - name but don't worry about these details
19:10 - um I just want to kind of begin to get
19:13 - you familiar with this and so there's my
19:15 - program let's go back CD CD space dot
19:18 - dot I think on Windows there's no space
19:21 - after CD but anyway so we're in the root
19:23 - folder and let's take a look at the
19:25 - release folder so I'll say CD space
19:29 - release and um LS and we can see in here
19:35 - uh we've got this is actually the
19:37 - program it's not really good to have
19:39 - spaces in the name of a program so if
19:42 - you release that you might want to
19:43 - rename it to get rid of the spaces but I
19:45 - can run it uh on Windows you probably
19:47 - just type the name of it possibly in
19:49 - double quotes if it's got spaces um on
19:52 - on Unix type systems we need slash and
19:56 - hello world usually and it's actually
19:59 - yes it's prefix the space with a
20:00 - backslash to escape it but anyway and if
20:03 - I hit return there it actually runs so
20:06 - you um I I probably could just copy this
20:09 - program here this binary file and give
20:12 - it to someone else who has a Mac and
20:14 - they could probably just run it but it's
20:17 - normal with C++ to create
20:19 - installers uh that put all the right
20:21 - files that you need in the right place
20:23 - and this program it's it's going to be
20:25 - using some shared libraries like it's
20:28 - going to be using Code uh that are in
20:31 - libraries located Elsewhere on my system
20:34 - and uh the the end user might not have
20:36 - those libraries I don't know so uh for
20:39 - that reason it's it's common to um to
20:43 - create installers that make sure
20:45 - everything's in the right place but
20:46 - installers are outside the scope of of
20:49 - this this tutorial and that's a separate
20:51 - thing unfortunately that you have to
20:53 - learn if you want to get seriously into
20:55 - Distributing C++ programs to um to end
21:00 - users
21:01 - yourself uh We've also gotten here um a
21:04 - make file and again I'm probably not
21:06 - going to go into make files uh our our
21:09 - IDE has generated it automatically for
21:11 - us and we if we look at it it looks
21:13 - quite cryptic first uh it it's possible
21:16 - to have a whole career in C++ without
21:19 - understanding mate files but on the
21:21 - other hand many companies use make files
21:24 - to build C++ programs and um so it's
21:29 - probably worth learning if you're going
21:30 - to get seriously into this as a career
21:33 - but uh if you just want to write
21:35 - programs yourself you can probably just
21:37 - let your IDE deal with it and and not
21:39 - worry about
21:40 - it and we've also got um that so the
21:45 - structure the exact structure of these
21:47 - folders depends on your IDE but let's
21:49 - let's take a look at this Source folder
21:51 - here if we go into SLC there's like a
21:53 - sub Source folder within uh this release
21:57 - folder I don't really know why
21:59 - um and that that's probably going to be
22:01 - different if you're using a different
22:03 - compiler or IDE uh but one thing to
22:07 - notice is that there's probably going to
22:08 - be somewhere a hello
22:10 - world. that's called an object file it's
22:13 - a it's a binary
22:15 - file um but later on we say that we link
22:18 - it we link it with the appropriate
22:20 - libraries to create the final program
22:23 - and that's just something that I wanted
22:25 - to make you aware of at the moment okay
22:27 - so so that's it for this tutorial uh
22:29 - don't feel intimidated by all those
22:31 - details uh you can count this as a you
22:34 - can count your progress here as being
22:36 - totally
22:37 - successful when you can just get your
22:39 - IDE to generate a program and run it
22:41 - like I say type it in as well if if you
22:43 - can be bothered to but first get your ID
22:45 - to generate it and run it and we're
22:48 - going to go over all the important
22:50 - Concepts uh again later
22:53 - on so that's it from me this time and uh
22:56 - until next time happy coding
23:01 - [Music]