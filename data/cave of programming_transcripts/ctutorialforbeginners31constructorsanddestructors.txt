00:16 - hello this is John from cave of
00:20 - programming calm in this tutorial we're
00:22 - going to look at constructors and
00:24 - destructors in C++ a constructor is a
00:28 - special method that runs when your
00:30 - object is instantiated and the
00:34 - destructor is a special method that runs
00:35 - when your object is destroyed so when
00:38 - you create an object when you create a
00:40 - specific cat in the example I've been
00:42 - working with from your cat class that's
00:44 - when it constructor runs and when the
00:47 - memory for that object is D allocated
00:49 - when the cat is destroyed that's when
00:51 - the destructor runs so let's take a look
00:54 - at that I've created a main function
00:57 - here and I've put two C outs in it so
01:01 - once right at the start it says starting
01:03 - program and one's right at the end just
01:05 - before a return and says ending program
01:09 - so if I just run that now it's just
01:12 - going to say starting program ending
01:13 - program I've also created a cap class
01:16 - like we had in the last tutorial I've
01:19 - given it a private eye i've been calling
01:23 - this a data member it's actually a
01:25 - specific kind of data member it's an
01:27 - instance variable because as we'll see
01:30 - in future tutorials this happy thing
01:32 - here every single cat that we create
01:35 - from that every particular card every
01:37 - particular object that we create from
01:39 - the class will have its own version of
01:42 - this happy variable so every cat could
01:45 - either be happy or sad or get on to the
01:47 - future so this is an instance variable
01:50 - of type baltar called happy and we've
01:53 - given it a method called speak like in
01:55 - the last tutorial and all that does is
01:59 - speak just looks at happy and says if
02:02 - happy is true i'll put me out otherwise
02:04 - if happy is false output like a
02:08 - distressed cat Nori's angry cat noise
02:13 - and you'll notice here that in the last
02:16 - tutorial I actually initialized happy I
02:19 - set it to true or false and here I've
02:22 - removed that initialization so we're not
02:24 - setting happy to anything and it's an
02:26 - interesting question just to start off
02:28 - with and this is relevant to what we
02:31 - will talk about in a minute
02:32 - what's going to happen if we run this
02:34 - program what value will happy have let's
02:37 - go to the main function here and I'm
02:40 - going to create a cat cat let's call it
02:43 - Bob so this is called instantiating
02:46 - we're instantiating a cat from the class
02:49 - in other words we're creating a
02:51 - particular cat object to represent a
02:54 - particular cut from this blueprint the
02:57 - cat class
02:58 - let's call Bob speaks of a time just dot
03:01 - s and do control space the autocomplete
03:04 - just completes it for me I was just
03:08 - holding down ctrl pressing space after
03:10 - typing the first few letters there let's
03:13 - run this and actually says well we've
03:16 - got an error here yeah I've got to body
03:20 - include file in I always forget that
03:22 - fortunately a compiler cut is this kind
03:24 - of error so let's do include cat stage
03:29 - because we need we need to include
03:31 - counter H in any file any CPP file or
03:35 - even a header file where we refer to the
03:37 - cat class
03:38 - so in this canva age we're defining the
03:40 - cap class so obviously we don't need to
03:43 - include capital H in capital H that
03:45 - would be a recursive you know your
03:49 - program would never compile even if it
03:52 - allowed you to try to build it which you
03:55 - might ago I don't know I've never tried
03:57 - it but in can't dot CPP where we're
03:59 - supplying the implementation of the cap
04:03 - class the actual guts of it actual code
04:05 - that does stuff there we need to include
04:07 - capital H and also because I'm using
04:10 - that cut class in the main function I
04:13 - need to include cut H there as well
04:15 - otherwise that compiler just won't know
04:17 - what it is okay let's build that I use a
04:20 - shortcut and in on a map it's control B
04:23 - to build or project
04:26 - actually that's a bit lengthy maybe I
04:29 - should just build a particular one
04:30 - anyway let's let's run that now and it
04:32 - says so it seems and if you look at the
04:37 - implementation here
04:38 - I suggest that happy is false because
04:40 - otherwise it would have said meow and in
04:43 - actual fact in C++ the like instance
04:47 - variables like this bool happy are not
04:49 - initialized automatically you have to
04:52 - give it a value and if you don't do that
04:54 - it's just going to have whatever garbage
04:56 - happened to be in the bit of memory that
04:59 - was allocated for this boolean variable
05:02 - so for whatever reason in the bit of
05:05 - computer memory that this is using the
05:08 - happen to be like a zero or the
05:11 - equivalent of a zero for a boolean and
05:15 - that's why it's false but it could just
05:18 - as well have been it could be could have
05:21 - been the equivalent of true that could
05:23 - mean a one in there and that might
05:25 - change depending on what programs you
05:27 - run and what happens with your operating
05:28 - system so you must initialize variables
05:30 - but as we saw in the last tutorial at
05:33 - least in Eclipse CDT here if I set this
05:36 - equal to true and we actually get
05:39 - warning let's just save that and build
05:42 - air is probably not going to appear now
05:44 - I've actually upgraded my Eclipse here
05:47 - to the latest version which is Luna at
05:49 - the moment if we look at I says
05:52 - initialization non static data member in
05:56 - class initialization so basically we're
05:59 - going to look at static data members
06:01 - later on this is a non static data
06:02 - members and also known as an instance
06:05 - variable and we should be initializing
06:07 - it in the classes while it's telling us
06:09 - although that will run and it will
06:11 - compile and it will save me out as we
06:14 - should expect if the cut is happy so
06:17 - where should we initialize data members
06:19 - then well good place to do it is the
06:22 - constructor
06:23 - so to create a constructor which is a
06:26 - method that will run when that when we
06:28 - instantiate the class let's go to this
06:31 - public session now that usually the
06:35 - convention I'm following I've chosen to
06:36 - follow is that I start my variables and
06:39 - my function names my methods because we
06:43 - call remember a function and method it
06:44 - is part of a class I start them with a
06:47 - lowercase letter but I have to make an
06:49 - exception for constructors and
06:51 - destructors because they must have the
06:54 - same name as the class and that's cat
06:56 - with a capital C C++ is case sensitive
07:00 - so I'm going to type cat ta round
07:03 - bracket semicolon and another thing
07:05 - about constructors and destructors and
07:07 - this is a constructor is that they don't
07:10 - have a return type so all of the
07:13 - functions have a return type even if
07:15 - it's void which means that it doesn't
07:17 - return anything that's still a return
07:19 - type
07:20 - it just says this returns nothing
07:23 - constructors and destructors can't
07:25 - return a value so they don't have any
07:28 - return type not even void they have
07:30 - nothing there so all you need is some
07:33 - name of the class and round brackets
07:35 - like that with a semicolon
07:37 - let's define this constructor let's
07:39 - implement it I'll go to cap dot CPP put
07:43 - this above my other functions just
07:45 - because it's a logical place to do it
07:47 - but you can put them in any order
07:49 - actually so let's say here capped
07:52 - remember no return type colon colon
07:54 - because we need this to associate the
07:57 - function with the actual cat class and
07:59 - cat which is the name of the functions
08:02 - the constructor so in this case it's the
08:05 - same name as the class round brackets
08:07 - open and close curly brackets let's have
08:11 - a see out and let's say here cout
08:16 - created
08:18 - and underneath I'm also going to set
08:20 - happy equal to true rather than setting
08:25 - it when we actually declared the
08:27 - variable because that was as we'll see
08:29 - later on that's kind of a bit of a
08:32 - useless thing to do and a proper place
08:34 - to do this is in the constructor so
08:38 - we've set happy to true and that's going
08:40 - to run if we look at the main function
08:42 - it's going to run at this point here
08:44 - when when the actual object is
08:46 - instantiated when the cut is created
08:49 - from a class let's run this particular
08:51 - cap called Bob is being instantiated
08:53 - from from the class so it says starting
08:57 - program that comes out here then we we
09:00 - instantiate the object and it actually
09:03 - says cat crated because the constructor
09:05 - automatically runs at that point then it
09:08 - says meow because we're running the cat
09:11 - speed Bob does speak here then it says
09:14 - ending program like that we can also
09:18 - define a destructor which will run when
09:21 - the object is destroyed so let's take a
09:23 - look at that we'll go to cut to H and a
09:26 - destructor it's exactly the same as that
09:28 - constructor like that same name as the
09:31 - class must be in the public section and
09:35 - except that it has a tilde at the start
09:38 - so I'm going to put a tilde here like
09:39 - that and then we need to define that
09:43 - let's go to capital CPP and I'll put
09:46 - this below the constructor and above
09:48 - other functions just because again it's
09:49 - a logical place to do it doesn't have to
09:51 - be that and again we need the name in a
09:53 - class colon colon then the name of the
09:56 - particular function which in this case
09:58 - is tilde cat because it's the destructor
10:03 - and it has to have the same name as the
10:05 - class and it has to have a tilde in
10:06 - front of it and it's just put in there
10:10 - cut destroyed their stride so I'll run
10:16 - this and it will build automatically and
10:18 - what's something now is compare the
10:20 - output with the main function here so it
10:24 - says starting program cap created that's
10:26 - at this point then now then ending
10:29 - program and then it says cut destroyed
10:32 - now the reason for this is that if we
10:35 - declare a variable like this we
10:38 - instantiate an object we say the scope
10:40 - of this variable is the nearest pair of
10:43 - enclosing curly parenthesis curly
10:45 - brackets which are these so that's the
10:49 - scope is the region in which this object
10:51 - exists and in which we can actually use
10:53 - the variable and so when we hit this
11:00 - closing curly bracket here at that point
11:02 - the object will be destroyed the memory
11:05 - associated with it will be given back to
11:08 - the operating system so that other
11:10 - programs can use it and so your own
11:12 - program could use that memory for
11:14 - something else potentially and at that
11:17 - point the destructor is called and
11:19 - that's why it's coming out just here
11:21 - after the last lines of the program we
11:28 - can actually change that so usually
11:31 - curly brackets are associated with a
11:33 - statement like a function statement like
11:36 - here or an if statement or a loop or
11:39 - something like that but we can't just
11:41 - graduate ously use curly brackets and a
11:43 - program if we want to and that's not
11:46 - very common to do but sometimes it's
11:48 - done just to specifically deallocate
11:52 - memory at a specific point in your
11:54 - program so I'm going to put curly
11:56 - brackets before and after before where
11:59 - we actually declare the cut object the
12:02 - cut variable before we instantiate a cut
12:04 - in other words and after the last point
12:08 - where we use it which is when we call
12:09 - speak on it here and let's just use the
12:11 - formatter shortcut so it's command shift
12:14 - F on a Mac or ctrl shift F on on Windows
12:17 - I think to actually automatically format
12:19 - this remember we've got to in
12:21 - between curly brackets and these are no
12:25 - exception so this looks a bit strange
12:28 - and it's not very common but we can't do
12:30 - it and now what effect this is going to
12:33 - have it's it's going to mean that cat
12:34 - only exists between these curly brackets
12:36 - so after the closing curly bracket
12:39 - because we declared it within these
12:42 - curly brackets we can't now do stuff
12:44 - with barb we can't call dots Bob speak
12:46 - again down here because it's F is
12:49 - outside the scope of this variable which
12:52 - is just here can't do that
12:54 - and also and the memory associated with
12:58 - this object is going to be D allocated
13:00 - in other words the object is going to be
13:02 - destroyed the particular cat will be
13:04 - destroyed when we hit this closing curly
13:08 - brackets I don't like to talk about cats
13:10 - being destroyed but it's not a real cut
13:11 - so so let's just run that see what
13:14 - happens and remember in the last version
13:16 - out of the program it said cat destroyed
13:19 - after ending program because the cat was
13:22 - destroyed army hid disclosing curly
13:24 - braket that's where the object is
13:27 - destroyed the memory is D allocated
13:29 - associated with it let's run it now and
13:31 - see how that changes so now everything
13:34 - is is as before starting program cap
13:36 - created now but then it says cat
13:39 - destroyed it says that before ending
13:41 - program because the object is destroyed
13:44 - when we hit this closing curly bracket
13:46 - here before we hit this line here so I'm
13:52 - going to leave it there for this
13:53 - tutorial and to practice this what I'd
13:56 - recommend is define a class of your own
13:58 - give it at least one function give it at
14:03 - least one data member like that then add
14:06 - in a constructor and actually type it
14:09 - out yourself
14:10 - because when you create a class if I go
14:13 - to the file right click project and go
14:15 - to new class you can just tick these two
14:18 - automatically generated constructors and
14:20 - destructors and if you have a lot of
14:22 - trouble getting them working it's worth
14:24 - just trying that so you can see them
14:27 - working
14:28 - but it's really really important to
14:30 - tighten them out yourself when you're
14:31 - first starting because that will really
14:34 - help you memorize and what they look
14:37 - like and if you don't do that you'll see
14:39 - you'll sort of tend to forget things
14:40 - like and exact you know formatting
14:44 - you'll forget it is case-sensitive a
14:45 - linear tilde or a semicolon or you'll
14:47 - put it in a wrong place or something so
14:50 - it's very important to type the
14:51 - constructor and destructor out yourself
14:54 - when you've done that I'd recommend yeah
14:58 - initialize any variables that you've got
15:00 - in the constructor and actually use them
15:02 - in in a function that you define use
15:05 - them to do something so you can see that
15:07 - their value is what you expect it to be
15:10 - at the very least to start problem in
15:12 - some method I put the value of them and
15:14 - also put statements in your constructor
15:17 - and destructor just so you can see when
15:19 - they're run build that program and try
15:22 - putting curly parenthesis around the
15:28 - instantiation of your object around you
15:32 - know limit the scope of your variable a
15:34 - bit more with curly parenthesis and see
15:36 - what the effect that has and that the
15:39 - great thing about doing all this
15:40 - yourself
15:41 - even if you have to keep referring back
15:43 - to example program like this one which
15:46 - is normal but the great thing is that
15:48 - you do uncover any weak spots in your
15:51 - understanding and you might end up kind
15:54 - of scratching a head for some time but
15:56 - eventually you'll see what you're doing
15:59 - wrong and the longer you puzzle over it
16:01 - actually the better is that ultimately
16:04 - sticks in your mind so it's really good
16:08 - thing to do even if it's a little bit
16:09 - frustrating to type all that stuff out
16:11 - at first it's well worth doing so that's
16:15 - it for this tutorial and until next time
16:18 - counting
16:29 - you