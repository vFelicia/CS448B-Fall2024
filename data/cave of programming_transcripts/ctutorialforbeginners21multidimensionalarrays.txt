00:00 - [Music]
00:12 - [Music]
00:18 - hello this is John from Cave of
00:21 - programming. comom in this tutorial
00:23 - we're going to look at
00:24 - multi-dimensional arrays in C++ we're
00:27 - going to take a look at two-dimensional
00:29 - arrays
00:31 - specifically uh so sometimes um you
00:34 - haven't got a list of values you've got
00:36 - a table of values and uh to deal with
00:39 - that you need a two-dimensional array
00:42 - let's take an example we we'll create a
00:44 - two-dimensional array of strings so I'm
00:47 - going to type uh the type here let's
00:51 - give this a name um I'll call it
00:54 - animals and um I'm going to put uh
00:58 - square brackets here on the end end and
01:01 - I'm going to have in fact two sets of
01:02 - square brackets and I'm going to create
01:04 - a table of animals so we're going to
01:06 - have let let's make it I don't know 3x 2
01:09 - or something like that uh so I'll have
01:12 - two rows here so the first um for the
01:15 - first um size here I'm going to put two
01:19 - and then I'm going to have each each of
01:21 - those two rows is going to have three
01:23 - columns in it so I'm going to put three
01:25 - here for the second
01:27 - index and let's initialize that and see
01:30 - how it looks so again as with um one
01:34 - dimensional arrays which we saw in the
01:35 - last tutorial you don't have to
01:38 - initialize the values when you declare
01:40 - the array here here we're declaring it
01:42 - we don't have to initialize it here we
01:43 - could just put a semicolon and um set
01:46 - the values later but here let's actually
01:48 - initialize it to see what that looks
01:50 - like so I'm going to say equals and
01:52 - we're going to have um curly parentheses
01:56 - as we did for a one-dimensional array
01:58 - but now the deal with this is that
02:01 - each of the elements in the array is
02:05 - itself an array uh so with a
02:08 - two-dimensional array we're going to
02:09 - have it's going to look like a table so
02:12 - we're going to have two more curly
02:14 - brackets in
02:16 - here and then a comma and then following
02:20 - that another pair of Kelly brackets and
02:23 - no comma after the second one um because
02:26 - that's the last one so here we've got
02:29 - two rows um as we specified here and
02:32 - we're going to have three columns in
02:34 - each of those two rows so let's say here
02:37 - fox
02:39 - dog
02:41 - cat and in the second row let's have
02:45 - Mouse
02:48 - squirel
02:51 - parrot so this this is um this is a
02:55 - table and uh we can display the contents
02:58 - of this table using an nested for Loop
03:01 - this is one of those things that when
03:03 - you're beginning C++ and you've got to a
03:05 - certain point uh this is kind of like a
03:08 - thing that seems quite challenging uh
03:10 - but it's really useful and
03:12 - two-dimensional arrays for example are
03:14 - extremely important if you do any work
03:17 - with Graphics but they're important in a
03:19 - lot of different contexts as well
03:21 - wherever you need a table you're
03:23 - probably going to use a two-dimensional
03:25 - array or else um a vector which is
03:28 - something that we'll look at later in
03:30 - the course or possibly even in the next
03:32 - course which is going to be on Advance
03:35 - C++ so let's create a for Loop that can
03:38 - iterate over the inner loop here over
03:41 - over the um over the outer array I
03:45 - should say so this this here this thing
03:48 - here is the outer array it's an array
03:51 - with two elements and this is the first
03:53 - element and that's the second element so
03:56 - let's iterate over that just as we did
03:57 - in the last tutorial and let's say for
04:00 - in I equals
04:03 - n keep going um while I is less than two
04:07 - because we've got two rows in the in the
04:11 - outer array so that's going to be um
04:15 - we're going to look at the indices Z and
04:17 - one this is a in index zero and this is
04:20 - at index
04:21 - one and i++ to increase I by one and now
04:27 - we're going to have a loop within this
04:28 - Loop and we're going to pay scrupulous
04:30 - attention to indenting stuff with extra
04:33 - tabs whenever we put stuff within Kelly
04:36 - parentheses so let's say in here four
04:39 - and we can't use I again because we've
04:41 - already used it so let's use J int J
04:45 - equals not and this is a common thing to
04:48 - do use i j or k for um for in for Loop
04:52 - counters like this while um J is less
04:57 - than three because now we're going to
04:59 - iterate over the inner arrays J is less
05:02 - than
05:03 - three and
05:08 - j++ and now we can output um in here the
05:12 - elements of the array so we're going to
05:14 - be taking it row by row so for the first
05:17 - row here let's output C
05:20 - out and
05:22 - animals and now we need two Ines to
05:25 - specify the position of the element
05:27 - within the array first one is I
05:30 - this specifies the position within the
05:32 - outer array so um so this gets us um
05:37 - this array or when the index is one it
05:39 - will get as this
05:40 - array and then we need a second index to
05:44 - get the element in the particular column
05:47 - within the within these um inner arrays
05:50 - so here we're going to put
05:52 - J and I'm going to Output flush there
05:56 - and let's have a space after that as
05:58 - well to separate the individ idual
06:00 - elements like that and I'm going to put
06:02 - the new line after this inner for Loop
06:06 - but within the outer for Loop let's just
06:08 - have a new line see out endler because
06:12 - that will mean that every time we
06:14 - iterate through one of these
06:17 - arrays then we're going to put a new
06:19 - line after it so that we we get a sort
06:21 - of it it kind of looks like a table
06:25 - let's save that and let's run it so what
06:28 - we get
06:30 - is this that's um that's our
06:36 - table so this looks a little bit
06:38 - complicated and again some practice is
06:41 - needed before you can really um fully
06:43 - understand it and be comfortable with it
06:45 - one thing we can do here is we can miss
06:47 - out this the first index we can't miss
06:50 - out the second index because um C++ kind
06:54 - of sees this as just a bunch of values
06:57 - one after the other like six values in
07:00 - this case and we need to clue in C++ as
07:03 - to how the array is organized so we're
07:05 - saying here that the um the inner arrays
07:08 - have three elements each we also can't
07:11 - have inner arrays with different numbers
07:13 - of elements in they've got to have the
07:14 - same numbers of elements in
07:17 - C++ and a really common mistake that
07:20 - beginners often make is they confuse
07:23 - these indices so if you end up having
07:26 - like I there or you put I there for by
07:29 - accident or something like that then um
07:32 - then this isn't going to work so you
07:34 - need to have um I's there J's there and
07:37 - then you need to say i j and you need to
07:40 - be very very careful that this is the
07:43 - number of elements in the outer array so
07:45 - that's one and two and this the J value
07:51 - um goes up to the number of elements in
07:54 - the inner arrays 1 2 3 in both cases
08:00 - and um yeah so so this J is going to go
08:03 - not one and two it's not ever going to
08:05 - be equal to three CU that will be off
08:07 - the end of the array and I is going to
08:09 - be zero and
08:12 - one so that's basically it for this
08:16 - tutorial um this is called a
08:18 - two-dimensional array because we've got
08:21 - two Dimensions um each of the each of
08:24 - the um each of the subscripts um we
08:29 - think of as a dimension and um and we
08:32 - can go kind of across the array that's
08:34 - one dimension or we can go down it
08:37 - that's the second
08:38 - dimension or or you could say they're
08:41 - they're the other way around you know
08:42 - down is the first and across is the
08:44 - second or
08:45 - whatever um but that's that's why it's
08:47 - called a two-dimensional array and you
08:49 - can have threedimensional arrays and so
08:51 - on you can add more brackets here uh but
08:53 - then you're going to end up building
08:55 - some you know hyperdimensional structure
08:56 - that could take up a lot of memory and
08:59 - it's two two-dimensional arrays are by
09:02 - far the most common form of
09:04 - multi-dimensional array with three being
09:06 - less common I've never seen anyone use
09:09 - four or five but you could if if you
09:11 - want
09:12 - to so to practice this um what I'd
09:15 - suggest is that you create a
09:18 - two-dimensional array of
09:21 - integers and uh try to print out a
09:23 - multiplication table for the numbers 1
09:26 - to 10 and for each number
09:30 - um put the value in there that's um
09:33 - equal to its multiplication table up to
09:35 - 10 so so your first row in the array is
09:38 - going to be uh 1 2 3 4 5 and so on up to
09:42 - 10 the second row is going to be
09:46 - 246 and uh so on up to the final row
09:49 - which is going to be 10 20 30 40 try to
09:52 - print out a full multiplication table um
09:56 - 10 by 10 and see where you get
09:59 - uh so you're going to have to use use a
10:02 - a nested for Loop like this to
10:03 - initialize it and um You probably yeah
10:08 - if you start at one instead of zero
10:11 - instead of having 0 * 0 in the upper
10:15 - left corner here you're going to have
10:17 - one by one so you're going to have to
10:19 - carefully um think about your Loop
10:22 - indices or better still maybe just add
10:25 - one where necessary within the actual
10:28 - brackets here where you need
10:30 - it and then use a second nested for Loop
10:33 - to display the full multiplication table
10:36 - uh so see if you can see if you can do
10:39 - that you're going to end up with a table
10:40 - that's like 1 2 3 dot dot dot up to 10
10:43 - and then it's going to be 2 4 6 dot dot
10:45 - dot and then 3 6 9 all the way up to um
10:52 - 10 * 3 which is 30 and uh so on so H
10:57 - have a go at that it's a little bit of a
10:58 - challenge for you for you and until next
11:01 - time happy
11:04 - [Music]
11:27 - coding
11:42 - that