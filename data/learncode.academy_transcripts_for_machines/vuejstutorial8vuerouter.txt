in this video we're gonna look in a view router which is going to allow us to navigate from different states in the application and still stay on the same HTML page if you're new to single page applications this will probably be the strangest concept to you so I'll give a couple explanations along the way for people where this is maybe the first JavaScript application you're building you can see I've what I've done is I've generated another view application the only difference between the last video and this one is I said yes install view router so if you look at the app view components there's really only one difference were adding the router view here and we're not doing anything else main J s imports view router and then it adds this little thing right here router and that's basically how you configure view router to be on your application import the router and then add the router that's pretty much it you port the router add the router and the router that it's actually importing is this right here this file so we'll get back to that file in a little bit so even ported the file added it to our top level component and now let's actually look at that template we get to choose where the router components print out and you'll also notice that our app now has this little hash slash at the top of it this is gonna be one of my tiny little side trails for newer people so if you ever add hash and then some word here HTML will look for an ID on the page called some word and it will scroll to it so you can actually make a URL any any link on the page could link to hash tag some word and that would actually scroll to the some word ID when you click on it but then developers learned along the way hey since it doesn't navigate to a different page we can kind of hack HTML and add all this information here and then we can listen for when that changes and tell a JavaScript application to go to entirely different pages and States and stuff so that's basically what the concept of routing is is we're gonna add information up to that hash tag route and there's an html5 way to do it too but we won't cover that in this video but as we add stuff to that route JavaScript can pick up that and we can make the whole page change without navigating away so there you go that's routing for beginners so here's what that router view covers is we can define a set of routes and when you go to those routes it will actually load a different set of components so you can see here when you're on the slash route just the homepage route we're giving it a name or saying hey that's the hello world component so that's the hello world component right there so if you go to just slash it grabs the hello world component and it spits it out in place of a router view so that's kind of how routing works let's go ahead define maybe another route here let's say let's let's show you one thing here so if I go to a fake fake path then all you're getting is the toplevel application at this point you're getting apt view which is the div and the image and this is returning nothing because there is no router view for this this is basically returning no component at all and then anytime you go to something that the router view recognizes it's gonna return that component in which case this is the hello world so you use the app level view for a shell for your application whatever is gonna apply to your entire application goes in here every single view state and from there you break down different things into views that router view can then return so let's go and maybe uh you know let's say we were making that friends list let's do a contact we'll go friends so that's our friends path and then we could also makes a contact path and then maybe we can make an account path where you can manage your account or something like that contacts accounts just be the contact components and this will be the account components and you can get more complex than this there we are let's go ahead now just make some new components here contact view let's go ahead and make this and we'll just leave that as that let's go ahead save this also as the accounts and let's say this is friends so change a couple h1cr so now if we go back to that router file we can import those files we just made we can import accounts I'm gonna for contact and we can import friends everything should be working now so now if we go to accounts we get the account component there's our account h1 and we can go to friends whoops looks like friends is the wrong component yes we're importing friends from hello world let's change that there you go now hash friends hash slash friends goes to the friends components and contacts so there we go that's that's all of our pages now let's go ahead and create some links here so we can actually link around to these different pages if I go over to my app view now I can go ahead and create some links by using the router link tag router link and this is basically an a tag so I can go to the friends and all I have to do is add a two and then I can basically give it the path I want to go to I can go to friends and let's also do accounts and contact and I'm assigning these to the toplevel application so that way every view I go to will have this main level navigation so now I can go to friends account or contact excellent that works well I can also add extra details in here so I could go friends slash 1/2/3 let's go and save that so if I go to friends now you can see it goes friends slash 1/2/3 but there is no route that matches that what I can do is I can come over to my router index and I can go friends / ID age I don't know wait let's say the wait is particularly important so now this would be the ID the age and the weight that makes absolutely no sense that you would load a friend by ID and pass in an agent awaits but what ever at any at any rate we are passing this in and then we can then access those in the friends view we can come in here and we can do route params dot ID and you see there's ID one gets spit out and we can also access route params age and weight that is a very light twoyearold and there's another way you can do it if you want to validate that by adding props in here then I can actually require those this way instead I can add ID age and weight and you can also add validation to those so you can require those to be certain types which is pretty cool and then I can come over here to my routes and all I have to do is say props true and now those get passed in as props so those get passed in as props and now I can just call these age weight and ID you see this will render out exactly the same let's refresh yep so now if I go to a weight of five age of 25 maybe a weight of 150 something slightly more realistic all that information comes in from the route and gets passed automatically to the component so there's kind of the two ways that you can pull in those props and using view router you can pretty quickly again notice the common theme with view is fast fast fast if you need something fast and easy and the level of complexity is not super high choose view it makes it really easy you can just crank stuff out quickly and easily with low level of coding complexity so that's how you use view router in the basics it's a lot of fun to get an app going and and moving along and that's about it