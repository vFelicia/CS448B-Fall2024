so immutability and mutation is something that JavaScript developers have been talking about a lot recently it's not at all A New Concept in programming but in JavaScript and on the browser we've realized that even though JavaScript doesn't really handle immutability very well by default we can write immutable data and it really helps our programs a lot so let me kind of immutable basically means a piece of data that we don't ever want to change if it's immutable we don't ever want to change it we simply create a new piece of data based off of its values and we change the new piece of data uh you know so we were to go over a equals name Will let's say we want to a mutation would be just changing the name to will it's a Fred there we go I just mutated it now a has changed um a an immutable change would mean that a still is name equals will where B uh is now this new object with a change um to kind of show you why immutability is not kind of baked into JavaScript by default there's really two types in JavaScript there's primitive types and there's reference types primitive types would be the number one or they'd be a string trest or they would be true false AB Boolean so if I were to go ver a equals 1 and ver b equals a b took on the value of a but if I were to change B um a still equals one so they're their own variable they're their own piece of data whereas objects and arrays which are really just objects objects always create a reference so if I were to say ver a equals name Will ver b equals a well now they're both pointing to the same object so if B were to change then a changed as well A's name is Fred and B's name is Fred they're the exact same object so we actually want to be able to create a new object and if you're in a recent browser you're going to have object assign which is exactly what you use for this object assign is not really new Jake's had it forever which is extend or underscore or low Dash extend can't type extend um or it's actually called assign now in low Dash to match the new object assign so we'd simply say ver a equals name will uh let's actually give it another piece of information age 35 now let's say ver b equals we're actually going to go object assign and we're going to start with a brand new object then we're going to pass in a and anything else B C D and what it's going to do is it's going to start with this brand new object and that is B then it's going to take all the values of a and apply them overwriting values of B overwriting values of c overwriting values of D overwriting until you're left with your final object so if we basically want to change a we're going to make a brand new object so B is now pointing to this guy and then it's going to take all the values of a and then we're going to change something let's change name to Fred there we go now B has the name of Fred age 35 a is untouched we didn't change a at all we merely stole its values well what do you do for arrays arrays are very similar uh you just simply use concat and use filter uh so you're just going to go ver a equals 012 ver b equals a. concat we're going to add a new value so that's going to leave a untouched and we're going to add a new value onto the end a is there and B has an extra value and then for filter let's say we want to strip a out um well a is untouched so a is 012 ver b equals a. filter and then filter is going to go through each item put the value through and we're going to see if value is not equal to two we're going to keep it in what I mess up V there you go so now B has filtered out anything that's not equal to two we keep in there so that's kind of how Filter Works and that's how you'll change an array so a is still unchanged and B's got the new values excellent so that's kind of how we're going to work on stuff and let's say you've got an object that is has both data and an array ver a equals name and things is 0 1 2 well we might have to twostage this one then so we might have to go ver b equals object assign first thing we're going to do is get B pointing to a brand new object let's pull all the values of a and then let's do name equals Fred now we need to be careful right now because B do things is still pointing to the exact same thing as a. things because this is an object if we were to change B do things uh push so now b. things has that and a. things has it as well uh oh that doesn't work let's go back and try that again go away okay let's go back to a there we go a name Will things 012 ver b equals object assign a and then we're going to go name equals Fred so we've changed Fred we're still referencing a do things so then we're going to go b. things equals a. things concat add our new one in there so now a do things completely untouched B do things completely new object B is completely new ground up so that's kind of how you're going to do immutability in JavaScript uh again you're just using object assign and then you're using concat to add stuff to an array and you're using filter to pull stuff out of an array and there's other things you can do you can use map to change all the items in an array and return a new one what's great about filter and map and reduce is they're always going to return a brand new array object concat filter map reduce and object assign they're always going to return a brand new array object um because object assign is going to return a brand new object object uh and so that's how you do immutability and that's how you keep your data pristine that's you can keep a full record of history as data changes