hey there this is a tutorial on how to get started on nodejs I'm going to assume that you know little to nothing about nojos already and if you already do no worries it's still going to be a really quick straight to the point tutorial uh so I'm going to assume you do not have node.js installed if you don't have node.js installed and you have Homebrew on your Mac then you need to go Brew install node that's simple I already have node installed so I'm not going to run that it's my preferred way of installing node if that's not uh if you don't have Brew then you can go to node what is nodejs is nodejs.org I believe yeah you can go and download it there that also works I have had more success using home brew to install it uh it does install on Windows just fine I've used node on Windows for years as well uh I do prefer using it on Mac and Linux environments though okay once that is installed uh we're going to use expressjs framework which is the the the most popular hands down framework for node often times people say node and they mean Express because Express just gets used that much and it's really quick and easy to use um so we're going to install that with node package manager or npm node comes preinstalled with npm anymore so we're going to go npm install G which means Global which will make it an executable available everywhere or if it's an executable it has to be installed global if you run into errors here it's probably because you installed it with a method that requires administrator access for Global things so you'll have to run pseudo npm install G Express and do a password I've often found they may have changed it but when I install node with the package from nodejs.org it tends to require pseudo every time you're installing a global I prefer home brew for installing because it just works better okay so we have node installed and we have Express installed and now Express gives us a great app so you can just go Express and I'm just going to go Express test and that will generate an app oh apparently I already have something called Express test let me go Express test Express there we go there we go now it ran now you're telling me all it has to do is I might need to go CD test Express and npm install npm install will take the package file that it created for me and install all the dependencies that it needs right away let's look at that package file real quick I'm going to add the folder to my project let's go sandbox what was that called test Express I'm going to add this to my project when you generated your node app with express it created this package Json file uh which you can also manually do yourself but I really prefer for having Express generated for me it's it's instant and you can see we have two dependencies here Express which is the local one not the global one that we already installed and Jade which by default it's going to use Jade templates for the views I'm not the biggest fan of Jade uh maybe I've just developed an HTML too long to feel more comfortable and more quick with that uh but if you like Jade by default it's going to do Jade and it's going to give your public resources as CSS another thing you can do is you can do Express and I prefer ex Hogan as my templating so I'm going to go Das Das Hogan and I'm going to dash C for CSS and I'm going to go less there we go so now I'm going to get into Express Hogan let me drop that folder for my project and get into my Express Hogan project aha much better so here we go now my views are Hogan which I just feel more comfortable Hogan's basically mustache for those of you guys who are not familiar with it and in our public style sheets we have less going on so that's it and all you have to do at this point to run the app is go node app .js and it's running on Port 3000 so I can go local hosts Port 3000 there you go welcome to express so let's start diving into what actually you do actually let me just kind of recap that so you're going to install node with either Brew install node or go to node js and install it there you're going to install Express globally either going npm install G Express doesn't matter where you are in your file system to install it or pseudo npm install G Express if uh there's a problem with that and then you're going to go generate an app which is Express and then app name see you can also do uh stylus less you can't do SAS because I think it uh considers less and SAS to be about the same thing there might be scss or there might be a key for SAS I'm not aware of it Hogan you can do ejs for that you can do those as optional for the templating languages so that's kind of how you generate an app and then you do npm install and that will grab all your dependencies which is only two or if you did in this case we have less going on and we have hgs we're using Hogan now it'll install all your dependencies so the whole thing's there in the package um which is really nice and then you just run it run app node app.js there you go and now our app is running so let's look into this actual appjs file and see what's going on it's loading Express uh it's loading routes which is just our routes file uh it's loading the index by default and it's also loading a routes user they're just kind of these are kind of boilerplate things for you uh and HTTP and path are the things that it actually uses so I'm going to go com out on all the boilerplate stuff uh it's setting the port to 3000 you can change that if you want it's setting the default directory for our views so it knows where all the views come from and it's setting our view engine to Hogan this all happened in the general generation process using a facon uh We've turned on our logger since we're in the development environment I'm actually going to change that down here so only if we're in development environment use the logger uh it's using a lot of other things Express Json code URL so there it's going use app. router uh this tells it to initialize the router it's using less middleware so it'll automatically compile less as you go it can use it real time and then it's creating a static file to our public directory so we can actually grab public images JavaScript stylesheets uh so if I go 3000 stylesheets style. L well browser doesn't know what to do with it but I just downloaded that file so if that was a Javascript file I can real time access those you know through my HTML pages so that's kind of what it's set up there you really don't need to touch this ever unless you're going to add more things in different order you say I want to add something else in this order that's pretty much it here's your development environment so you can do different things if you're in a production environment and then here it's doing app get slash this is kind of the routes enabling so we've loaded in our routes we've loaded in our user and that's where it's using this here we're defining the routes so our local our our default base route goes to routes. index and our users goes to users. list and then it's spins up the server and it tells it to the console you're listening on Port 3000 so that's pretty much our whole application at this point let's take a look at the routes index file all it does is it does exports index kind of the deal with node.js is it uses the commonjs format so whatever a module exports you can either do module module exports and we can add a whole object here and that will be what happens when you require it that's will be that will be what the required gets so when we require routes we're getting whatever exports is so basically we require routes it's going to automatically look for the index file and it's going to look for whatever our module exports object is and that's what it gets so we have routes. Index this is the other notation you can use is just exports Dot and we are doing only this we are rendering the index file and we're passing it the parameters of title equals Express so let's go ahead and look at what this OB what's going on right here tell you what I'll actually go back into the app so it remains simple in our minds let's if you're feeling confused at this point I'm going to kill that code and I'm going to kill this code we're going to do everything in this file for right now so what you can do is you can do app.get that's going to look for a git request on this address just slash and we're going to go function Rec res next these are the three things that get passed to any get put delete post they're going to Auto always get wreck which is your request response which is what our response is going to be and next which is you can actually chain things if you hit next then it's going to look for the next thing that matches our current URL uh we're not going to use next right now so basically I can go really quickly I can just go res. send which if we use send then it's going to send whatever we put in there straight to the browser if we use res. render then it's going to use our current templating library and look for a template to Output so that's kind of the two things you'll use to spit stuff back out to the browser if we go res. send here's some text and say done I need to go ahead and respin up my server there you go here's some text and if I look here at my network you'll notice by default my type is text HTML it automatically set the text correctly so if I put a I can also put a Json object in here I got to cancel my server spin it up again there you go you'll notice now my type is application. Json so it is really really easy to generate web services and restful services with Express it is just Lightning Fast very very little code to be done I can do a res. render and then the path of my file index let me cancel that spin up again if you'll notice it's getting really old really fast to cancel and spin up my server I'll show you how to address that in just a second so that looked for index because if you'll remember up here we have set our views is right there apps set views and by default our uh we're going to be using views as our engine our view engine looks for views so it's pulling up this it's looking for a title pretty much just looking for a title so let's go back to app.js and make sure we're passing a object to our file here give it a title of my app now it's called my app the title gets my app and my app is everywhere my awesome app if I could spell my awesome app so that's pretty much Express right there it's not much more complicated than that let's go app.get API let's say we're making an API let's just make up some once again name ah I'm not 33 I'm 23 now let's be honest let's be honest with ourselves here so now I can close it spin it up and go to Local Host 3000 API there we go and now I've got my API response so it's quick and very very very easy now let's looking at what's going on here it's pretty bad development wise to Define your routes in your actual app file so what they've done here is they've broken out a routes require routes and they've actually put some stuff in here I usually won't Define any routes in the app unless it's a very small app like what their demo is giving you here so usually what I will do is something a little more along the lines of this I'll just go require routes and I'll put that at the bottom because I want to make sure the app gets fully booted we've already initialized the router before I start doing any routing action let's go to the routes index and then I will Define them here I will also go up to app and I will make sure I'll make sure that M that exports is uh getting I what I'll do is I'll make sure that my app which is the initialized express is getting passed to the exports so now down here I can require this app file even before it's all the way executed and I'll get the exports will be app basically I'll show you what that means here is I can go app equals so now I have app here and I can do app.get oh no method get I forgot I need to do module. exports there we go there you go and so now all I have to do is hit require routes and so now all my out routes are abstracted out to this index file I can do all my home stuffff here and then if I want to require stuff for my other I can go require user and that'll load in any routes that I've defined in this user file so that's kind of how I'll break out a larger app I won't do anything in the app.js file as far as routes concerned I'll just kind of load my routes index and I'll have that do everything if it starts getting to be a really big file with lots routes then I'll start breaking it out and just require different files and you're good to go so let's go and look into how can I make this workflow a lot better because this is getting really annoying to automatically be cancelling and restarting it kind of the reason we have to do that on node uh just in case you guys aren't familiar kind of with why node works the way it does is if you're working on something else when you make a request for the file your web server is running it's going to go grab those files real time run through them run through the compilation process every single time with node the big difference is is when you spinup node it grabs all the dependencies loads everything and sits there waiting for call backs on routes so we've Define these it's going to load up every file every dependency at load up and then it's just going to sit there and wait and as requests come in handles them all asynchronously without grabbing any dependencies without grabbing any file system stuff and that's kind of the beauty of node uh the only difference is is for development you don't want to be cancelling and rerunning your Express app every single time you change a single line of code just to be able to see it so we're going to use something called nodemon which is great for node monitor node monitoring and somehow I'm running into updates so we're just going to go npm install G for Global nodemon once again you might have to use pseudo on that all right that's installed we're still on our deal so I can go node Monon app.js and now it's automatically going to listen to any changes I have so if I go to my home it automatically restarts my server notice the file changed and now everything's good ah the workflow has been resolved um if you're doing anything other than backend and you want to add frontend stuff there's a great tool called yen. which will also do generators for apps and it'll also do live reload for you uh once again that's yen. maybe I'll do a tutorial on that sometime this is your boiler PL plate intro to express.js and node let let me know if you have any questions any uh further things that you'd like to see on this have a great day