all right by popular request I'm going to be talking about es6 yes that's JavaScript Harmony the next incarnation of JavaScript I've been using it uh for the better part of a year just day in day out on projects and I'm loving it I'm absolutely never going back I'm using it both in node um on back end and also in react and angular stuff on the front end and whatnot so it's it's tremendous and I would highly recommend anyone get into it so going to kind of cover first of all the features and also along the way just what I think the most useful aspects and maybe some patterns of using those features are if I feel like this video is getting longwinded we'll just break it up into two um so let's go ahead and get started here first of all if you're wondering how do I transpile or actually how do I write es6 and have es5 safely in the browsers um you're going to want to use babeljs doio um definitely is my favorite transpiler um and it's really seamless if you already have any kind of build system going on that's compiling SAS or minifying JavaScript it's pretty much effortless to add in Babel and then go um es6 down to five or es7 down to five Babel even supports some es7 features which are great um the other big players Google Tracer Trace schah whatever the French would say with that word um and that's also big I feel like Babel is you know really kind of become the main guy with transpiling javascripts es6 so babeljs is my recommendation go for it you'll like it let's get into it so uh kind of some great es6 features here my favorite the one that I hands down use day in day out is destructuring I actually added destructuring to my Mac dictionary because it didn't know what that word means and so basically let's say you've got an object called Foo and we've got bar is one BOS is two uh and then you can basically just destructure those out so instead of going there bar equals food bar and ver BOS equals f.b I can just go ver bar Bas equals Fu and that's basically the same thing so now I have two variables that have been created on my page I can do you know alert bar alert who uses alert anymore um and so that's very very cool I could just snatch out bar you know leave boss for later this is very useful for when you have large objects and you just want to snatch a value or two out of it or if you have objects with very large names very large name and you just do not want to call that all the time you can just snatch a value out of it uh create a local variable or something so very very nice you can also do this with um arrays tens let's see we're doing arrays here let's do first person second person third person tenses and so then I could go there first person equals uh what I call that tenses so then it's just basically going to snatch out uh the first argument of my array and when I'm destructuring I usually put a space on either side to kind of visually give you that cue that I'm not creating an array I'm destructuring an array that's kind of one thing I found helpful whether you're destructuring objects or destructuring um arrays it's helpful to have that space on either side because it kind of gives you brain this visual CU oh we're destructuring something here so this would automatically grab number one and this would automatically grab number two so first person is me second person is you and where this is really helpful uh is maybe if you're doing a promise.all so I'm giving it several promises promise one you know so that's going to give me some responses then I can do a then so I have all my results in an array so I can go there results one I can actually destructure that equals results and there's a better way of doing that which I'll get into later on because I can actually destructure these arguments as well which is very cool I can actually go I'll just do it now I can actually go results one results two uh and then I actually have results one and results two available here so it's going to destructure that array out out straight into the variable names I desire to be so it really saves a lot of code what you'll find out is most es6 features are not so much new features the most useful parts of es6 are not so much that they're new functionality they just really improve the daytoday coding experience uh they really make JavaScript a lot of what the language has been lacking for a long time um and so they just it's just much more enjoyable it's what coffee script tried to do a while back but became too much of its own Lang to to take complete mainstream adoptions so I won't get into that uh argument there but let's say you can also destructure objects this is actually very useful so let's say FU equals 2 I can actually go I'm building an object and let's say bar equals one and I could go Fu equals 2 well I don't have to do that if I want it to have the same name and the same value as Fu I just type in Fu and that's basically the same as going Foo two so it's going to say oh does the foo variable exist it does exist let's print it out and print its valuable uh value so that's really nice if you're calling functions let's say I'm calling some method um and want to give it an object of let say I've got name got my name and my age and I'm have to pass those in well I can just go name age and that's going to pass in that object uh I will I basically just made that object so it's much cleaner syntax uh for spitting out the exact same thing again just very helpful um and you can also go you can also generate your own keys so I could say name equals will I could go name plus with Plus name I I don't find this one very useful I think I've used it once or twice is some value so that's basically the same as going name Will which you really can't do U it's just it's really just one of those use cases you couldn't do it um unless you wanted to just create an object first it's kind of how you'd have to do it before es6 then you'd have to go object name so you have to kind of do this second step equals some value so now you can actually Define that when you're defining the object up here you can do that exact same um bracket notation so that's very helpful as well so you can destructure stuff um let's look at destructuring arguments because this is a very very useful feature let's say I have a function for let's calculate BMI here we need weight to do that we need height all right so there's my function and then BMI what is that weight divided by I think the square of your height and this all has to be metric or something like that but I'll just pretend it's metric already so there we go so that's my BMI uh some guy down here calls it Cal BMI say it already exists somewhere okay so that's going on let's say now we're going to add a call back feature so I can also call that back if call back Mei so that's going to pass in uh and then this guy is going to do the exact same thing but he's also going to give it a callback function that does something with that value uh then let's say at some point well now we want to enter in a Max here so you can also enter in a Max um and some of you guys are seeing where I'm going this guy needs to enter in a Max of 25 so if it's over the max if uh BMI is over Max then we're going to console log U that your weight is too high you're overweight so that of course then creates this problem because we're not passing in a Max here so we have to pass in null and you basically end up with these arguments that are these functions uh that are kind of hard coupled to the order of your arguments which can make S for some really frustrating situations sometimes so what we could do instead is we could pass in an object once again we're going to do that exact D structuring we've done we're basically going to create a new object we're just doing the object as a one thing which would commonly be called something like opts right so then all throughout your BMI you're going to say if ops. callback you know and stuff like that you're going to do ops. height ops. weight well now you don't have to do that you can just kind of destructure them coming in uh which my syntax is looking weird on this but that is correct we can totally do this uh we're actually pulling in weight height Max call back and I'm just going to say Max has a default of 25 I can do default arguments which is very nice so this Max is going to be 25 if it's undefined um so then call back's going to be there so this is very nice and then I can do this exact same thing here I don't have to worry about Max anymore I'm passing in Max as undefined and I'm passing in a call back right there uh so that's really nice basically it doesn't the order doesn't matter anymore I could totally move these orders around here uh weight height it doesn't matter I'm going to pull them all in correctly uh another thing that I can do is I can also kind of change the the naming of these so I want weight to come in as W I want height to come in as H so now you're going to come in as W you're going to come in as H um I going and then there's Max so that's fine so that's another cool thing is you you can destructure them you can destructure them with default values this also works when you're just destructuring objects somewhere else U more and more I find myself converting interfaces to destructuring objects when there's multiple arguments I feel like it's just cleaner it's less error prone um it's just really nice it makes for nice code uh so that's good let me show you one more thing and then we'll go ahead and stop this video and get into another one so you can kind of learn spend some time get comfortable with these move on and that's template strings love template strings uh so some something you find yourself doing all the time is uh my name is Will and then you have to say greet hi my name is and then plus name plus and I like to party then you're like oh well now party has to be something else so thing equals party now you have to do I like to and then you have to do thing and then you have to do plus and then you have to add your period it it's really a mess and then of course you find out ah I left my space out I got to add my space um and so that's the kind of thing that is really annoying and then of course multiline oh let's not even get into multiline cuz then I have to add that then if I want it to feel like multi line then I got to do all these tabs yuck so that's something we don't like to do um and of course template strings really fixes that I can just go cre equals you do a back tick instead which of course looks and feels very strange at first and my syntax highlighting has not picked this up let me see if I can let's see if JavaScript picks it ah my syntax highlighting doesn't have this Adam has much better es6 highlighting I usually use Adam when I'm doing ES six uh but oh well uh let's see so hi my name is and then I can go name which kind of coffee script dis if some of you guys have used coffee script before dollar sign in those brackets basically means look for that variable pop that variable in and I like to thing there we go it's done add your exclamations do whatever oh yeah and guess what you can also do multiple lines and I like to party so there you go that's awesome template strings are tremendous uh let's get into a few more features but I'll give you a breather so you can recap this section if you want and we'll get into some more extremely useful features in the next video