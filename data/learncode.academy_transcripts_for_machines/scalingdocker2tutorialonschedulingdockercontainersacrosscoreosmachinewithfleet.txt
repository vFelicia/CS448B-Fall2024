okay so phase one is done we've created our core os cluster and if these are pretty big machines we can actually run a lot of applications we have a decent bit of computing power i did the smaller machines uh your your choice on whether you want to do a lot of smaller machines or less large machines it's really up to you but we've got four machines running so the next thing we're going to do is we're going to run some instances of web apps now we don't want more than one web app running on each machine at least not at first depends on how powerful those machines are we might be able to run four of each web app on there and load balance between them but for redundancy sake you at least want different copies of web app running on different machines that way if they're all running on this machine and this machine goes down well that's a bad idea we want some running on different machines so let's go ahead and get to how to run fleet services now if you remember from my diagram here's kind of here's the holy grail this is what we're going for this whole core os cluster is hidden behind our private network nobody can access this from the outside world at all and then you want to have your one public facing your one public publicfacing server that outside world does have access to and he's also on the network and can proxy into all the ip addresses within your coreos cluster now in digitalocean you don't have true private networking because every one of these has a public ip address but you can set up iptables to block pretty much all access so that's if you want to research that it's very simple to do just look up you know coreos iptables uh digitalocean and you'll you'll have all the information on that amazon aws rackspace lots of these places will give you true private networking so we are ssh in that's excellent let's go ahead and exit out of that coreos machine and so now we just need to get fleet control installed on our com on our machine so we can actually talk to fleet the fleet cluster the coreos cluster from our computer so i'm on my computer now and you can just if you have homebrew you can just go brew install fleet control so that's going to get fleet control installed and then you just have to do one thing you have to snatch any one of these ip addresses and you need to create a fleet tunnel environment key so export fleet ctl tunnel equals um did that not copy okay let's copy and paste there we go so export fleet control tunnel equals and then one of those ip addresses they're all going to work and now i can go fleet control uh fleet control list of machines just like i did when i was on the coreos cluster there we go so there's all four of my machines so what fleet's gonna do for us is i don't want to have to think about which machine to run a service on i just want to say hey run three services and be done with it so fleet is going to all handle that so i'm going to say hey run three web services it's gonna go one two three and then it fleet's also gonna mail it manage failover so if this if this machine goes down fleet's gonna notice hey web 3's machine went down let's rerun web3 over here and if there's other things running on this machine it's also going to rerun them on different machines so the fleet is going to handle both scheduling and failover force which is great let me show you what a fleet service file actually looks like let's go some app ampersand dot service that's the name of my file and the ampersand means that i can run copies of it any service that you want to run multiple copies of you're going to want to put an ampersand at the end i know that's really small on my screen so you might not be able to see it well and so basically here you got your description and because it's an ampersand service i can run copies so every percentage i is going to get a number so when i want to run this service i'll say hey run some app web one two three four and five and they're all going to run this exact same file and then this will turn into 1 2 3 4 or 5. so that's kind of what that percent i is there so it has a description it's running after docker and this is pretty much my docker command i'm going to do docker run and then here's the name of my docker command my docker image so this should look pretty familiar if you're familiar with docker before we start the service we want to kill any existing version of some app one and then we want to remove some app one and we want to pull my image the latest of willstern node sample this is a basic node.js application and then we want to go ahead and run it and we want to inject the app name in there and stuff like that so uh and then also we want to stop our app whenever the service stops we're going to go ahead and stop our docker container so that's a service file it's very simple i'm in the folder with this service right now i can go ls you can see there's my some app at service so i want to actually push this up to fleet right now so i just go fleet control submit some app at or i could do at service it's smart enough to know that dot service is the default so there we go now it's in there so if i go fleet control list unit files so i have a unit called sum app that it's now aware of so now i can run this so i can go fleet control run or start some app at one sorry mr t in there fleet control starts sumap at one so there we go now it's running some app one somewhere on one of my core os nodes awesome uh let's go ahead and run two more let's go some app two actually let's do this 2.4 so i'm gonna run between two and four so now i'm going to actually boot up two three and four uh that's a way to do multiple things i can also go i mean every once in a while fleet gives you this error i need to look into what exactly that is let's go ahead and clear this out fleet control you can also do start some app at one some app at two some app you can do it like that as well so let's do list units now so you see that it's activating all four of them so what it activating means is that it's allocating the resources it's kind of figuring out hmm shall i put it here here here okay let's do one two three and four there and then it's going to start running uh there you go running start pre is where it's at so start pre means that it's killing that it's removing and then it's pulling that's probably what it's doing right now is doing that initial docker pull which you remember that first docker pull takes some time because it's get because it's getting all the base images that your docker image is built on so this will probably run for about i'd say 30 seconds total and then you're going to start noticing that some services have started i will keep doing this in an inpatient way and also shows you the ip addresses that it's going to be starting them on come on still activating still activating come on there we go got one active so i can actually ssh into this now i can either grab this ipad address in ssh in or i can use fleet control and let it ssh in for me fleet control ssh into some app 4's box so now i'm actually into the box that some app is on i can run docker ps and see there we go i've got some app for running so i could actually take that ip address what is it three two seven six eight and which one are we on there's my p address so let's go take this what is that again three two seven six eight let's go to three two seven six eight there you go i'm now viewing some app four okay another cool thing i can do is i can actually journal the logs of that so i can go fleet control journal some app add four that's going to give me some of that log output so you can see there we are i've there's my log output from my web app let's go ahead and hit up a few more i just refreshed a couple more times you can see there's all my latest log information i can change how much you know log how many entries i want to see here but that's really nice so i can get logs from any service real time so that's basically how fleet works and then in the next video let's go ahead and look into flannel and how these things are going to talk to each other