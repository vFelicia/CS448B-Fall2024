all right in this video we are going to be adding uh engine X as a front end to our node application which is running on Port 3000 and we're going to be setting it up as a load balancer so as our application grows and grows and grows we can add a second third fourth server and it will load balance between the four um and then we're also setting it up to where uh it will cash some static assets to imp increase performance so I've got my application server we'll call this the do two box uh the two box is running on Port 3000 like a normal uh node application would you can see as I load requests they're coming through I'm sshed in over here so you can see it um and here's a four box you can install engine X on the same box if you don't think your application's going to grow but I already know I'm planning on multiple boxes to come so I'm going to install engine X on its own box um you know to better handle the load so the four box currently does nothing this is where the domain will resolve is to this address and I'm sshed into the4 box let's go ahead and uh get engine X set up the first thing you're going to want to do is pseudo apt get update which I've already ran I don't need to do that um so then you're going to go pseudo aptg install engine X which I've already done it says it's at the newest version so now engine X is installed you can go CDC slh not not SL hosts sline X and then you can see here's my my engine X I've got a default engine X configuration file let's take a look at that um let's vim and look at this guy you can see by default it's started four worker processes you're going to want kind of as a rule one worker process per CPU that you're running that's kind of the most efficient way to run engine X um it's running 7 768 uh connections and all this other stuff and as you can see let's scroll down here these are all decent things to look into to get to know what they are um but what it's doing is it's also including any file in the sites enabled directory so that's we're going to add our that's where we're going to add our specific configuration so let's go into the sites enabled folder and then there might be a default file in here if not you're going to want to create it um default let's go ahead and create that I'm going to go over here here's a gist that I've created for you with the code that I'm going to be using so I'm going to copy the Upstream project let's paste that and I'm also going to copy the first portion of the server and I'm going to wrap that out so what I've done here is I've got three nodes I've got my2 node My3 node and my five node um let's go ahead and comment out the other two and save my file um what I'm also going to be doing here's the actual server that's going on is I'm listening to Port 80 which is your default port for your url and then I'm going to be forwarding that on to project which is up here and so any nodes I add will automatically get load Balan let's save this and then let's go pseudo service engine X start there we go starting engine X and now I should be able to refresh and it's automatically forwarding it to the two server you see as I load this then the requests are coming through to the2 server awesome let's say the load has increased um and we should now add some nodes I've got some more nodes going on here um let me drag one over here for now let's go ahead so we're getting a lot of traffic constantly we don't ever want to have to shut down engine X let's go back into our default file Let's uh uncomment these two servers save and quit nothing has changed if you notice I'm loading these it's still all the requests are going through to my2 server it's cuz I have to reload not start reload engine X so I'm going to go pseudo service engine X reload that's going to keep it going it's going to reload the configuration file and now let me go ahead and minimize you bring you over here all my requests are now getting load balanced between all three boxes which is awesome now let's have some fun and do some bench testing shall we um let's go ahead and I'm going to turn those back off turn your you off turn you off save and reload okay let's run some bench testing here let's run an a pachy bench pretty basic I'm going to run 40 concurrent requests going to run a th000 requests and we're going to hit the do four server which is all going to be coming through here right now running 100 200 300,000 requests you can see that took about 5 and a half seconds to complete let's go ahead and go back into defaults add my load balancing here reload my configuration file and let's start seeing this fly I'm going to make you take up a little different space here there we go let's run that exact same benchmarking now you can see the requests are flying through all of them and that's going way faster instead of 5 Seconds that took about 3 seconds to run great let's go ahead and add some static caching now I'm going to edit my default file again and let's cash static assets which is this little piece P of code right here we're basically going to take anything CSS JJs uh PNG any images and we're going to cash them they're not going to they're not going to reload to express for 168 hours so let's go ahead and add this in there we go uh let's reload that service and now let's go ahead and bench test Style sheets I think that's stylesheets style.css I believe that's it uh let's go Ahad and bench test that guy there we go so that flew through as you can see um almost no time whatsoever complete requests uh let's give that a bench actually before I'm kind of static caching that let me edit my default here and let's go ahead and comment this whole thing out I didn't give you a chance to see what it does without it let's save let's reload there we go you can see the stylesheets are all coming through here um our requests are coming in at a rate of 20 milliseconds to 194 milliseconds that took about 1.3 seconds let me edit that again reload boom that took almost no time at all we went down from 20 milliseconds to about 4 milliseconds which the highest is still around 210 but that went down to3 seconds so as you can see static caching your assets with engine X is way faster than serving them up with Express so that's kind of a little bit of fun with engine X um you can cash as I think I gave you some examples of how to cash some different you can cash specific API URLs uh which is nice to cut down the load on your servers have some fun with that and have a great day