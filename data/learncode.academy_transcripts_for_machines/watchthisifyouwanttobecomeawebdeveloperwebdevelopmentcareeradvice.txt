all right i'm really excited about this video this is a video that i did about a year ago um and it's been pretty much my most popular video or one of my most popular videos and so a lot of people have said hey give me some 2015 updates and so here you go this is what you need to learn if you are wanting to become a web developer now in 2015. we're going to start at the beginner level and we're going to work our way up to intermediate and advanced and i'm also kind of going to give you the order that you want to learn things and the the possible directions that you can take in your learning experience so let's just jump right into it you'll notice here i'll give you a link this is a koggle.itmindmap so this link will be in the description everything that's blue has a url that you can click on which means i've already got a video for it yay which is nice so we've got at least a lot of the basics covered and you'll be able to see as we move along what videos i have covered for you so if you want to be a web developer you're going to want to start with html css javascript and what these are is these are the languages that the browsers run these are the three languages that are very core to the internet because whether you're on an iphone google chrome a super old version of internet explorer your browser is going to be running it's going to be putting together an html page with css styles it's going to be adding javascript for any functionality on that so these are the kind of the first three languages you have to learn if you're going to get into web development and so how do you know when you're done with basic frontend i say when you can put together an html page style it somewhat decently do some basic javascript and i added jquery here because that's kind of that's kind of a basic get a lot done without a lot of code javascript library and so i actually have a whole series on jquery and i'm starting up a series about three or four maybe five lessons in javascript so far so once you've kind of got some basic jquery down you're good to move on you can either go up here to front end or down here to back end regardless of which route you take here's some things you're going to want to learn next in order top to bottom you're going to want to learn how to ftp up to a web host and set that web host up it's not as complicated as it sounds i got a video kind of walking it through the whole thing i recommend hostgator for that i keep some coupons and deals by the way down here on several things you want to check that out especially if you're learning um that's kind of where i keep any coupons that i come across you want to learn how to set that up again not as hard as it sounds you're going to want to learn some basic terminal usage the command line is terrifying to new developers because computers we tend to think in terms of point and click whereas the command line is commands that seems scary but there's only about 10 or 20 commands you have to learn to get started it's just kind of scary because we're not used to typing out commands we're used to clicking file open instead of typing file open it's not that big of a deal learn the command line you'll be really glad you did basic ssh is kind of the next thing so when you're starting off with web development you you start off by ftping all your stuff up to a server later on as you go you're gonna ftp less and less you're gonna ssh a lot more so get to know ssh next github which is actually a combination of git and github which is a website it's kind of the most common place for coders and companies to keep their code their source code so you'll definitely want to learn that that's going to be on so many jobs so so so many jobs require you to know github or will wonder why you don't know it if you're applying so that's the next thing to go as you can see i've got videos for all these which will hopefully help you out in your learning next thing you're going to learn how the client and server talk to each other i got two videos on that that really explain it and hopefully an easy way i got some kind of basic visuals for you and then lastly you're going to want to learn about restful web services this is get post put and delete requests i kind of have a video that provides a free service for you to learn that with javascript so that's kind of no matter which route you take you got to learn this stuff too and i would suggest learning this before you pick a hardcore route or at least make sure you learn it towards the beginning so kind of in between basic and wanting to end up here so let's say you've got basic front end down then there's two routes for you to go up here front end or back end you can learn both but you generally have to start with one or another um to stereotype things if you're if you're not sure which you pick if you like art creative graphics maybe come from a design background you'll probably feel more at home around front end if you like data accounting finance budgeting you know left brain side of stuff back in will probably be a more logical choice although either way you'll work great in both if you can do one you can totally do the other and so that just might give you an idea of what to try out or take a day trying out both and see which feels more natural to you so don't let this daunt you don't let this terrify you this is kind of the entire skill set of a front end developer these days and honestly some of these are a list of things you don't have to pick them all so don't get terrified if you if you feel like you learned a ton and then just now got under this branch you want to be a frontend developer here's the order that you're going to want to go the first thing you're going to do is learn about some css tools precompilers sas lesson styles this hasn't really changed over the last year these are kind of still the big guys and i think these are the order probably of popularity and all these are going to do is these are going to allow you to add some more functionality to your css you can create like css variables so you can define defined at the very top gutter equals 10 pixels and then from there on out you can reference gutter and it'll compile it out to normal css it's not very hard you can learn this in a day or less you're going to want to learn you're going to want to learn one or more css frameworks to start off we haven't really seen a lot of change with these over the last year bootstrap and foundation are definitely still the most popular css frameworks for building a responsive website bourbon with need is fun it's very light gumby skeleton these aren't even new these have been around for a while um there's there's so many css frameworks but still bootstrap and foundation are kind of the big ones the ones that keep staying popular so learn one or more of those what those will do is these will help you create a responsive website very easily a responsive website is basically the kind of website where as you shrink your window size down it displays it differently so maybe when you get your window really small like just this big it will look like a mobile website and then as you get it bigger it looks like a tablet website when you get your window full size it looks like a computer website that's a responsive website it's changing its layout depending on the size of your screen and so you can do that very easily with these frameworks but then you're going to want to learn how to do that by yourself as well at least be able to kind of get by you'll never be able to well it's going to take forever to hand code a bootstrap or foundation but you'll want to be able to kind of know what's going on behind the scenes so you can do some of your own custom work at some point if you need to so that's css not a ton going on this is not months and months of work it's really going to happen in a few days except for this might be a few weeks or a few months you know ongoing you don't have to dedicate yourself to this directly and ignore everything else for a season so moving on then next up i would actually say front end build tools would be next so i'm going to rearrange this okay front end build tools is next next thing you want to learn is build 2. i actually have a video called why you need a build system i can probably make a link to this i'll see if i can link this later and so i won't really explain too much of what that does except for basically build systems will do things like compile your sas less stylus for you they will take all your javascript files and com minify them all together into one javascript file that the browser loads these things really speed up your development process and clean up your code base and help your website be more efficient when a user loads it so the top two task runners gulp is definitely number one these days grunt is still really big because there's a ton of projects that were built on grunt so these are pretty much if you're starting new website pick gal gulp hands down i think the jury has spoken that gulp is just easier for developers just like it better um dependency management is kind of the next thing this is for javascript how do files require other files to be loaded in basic javascript like jquery work this is not necessary if you're just using jquery plugins lump them all into one file who cares but once you start getting a lot of code you're writing an actual frontend application in one of these frameworks down here you have to split up your files at this point because you can't have a 2000 line javascript file that's too much so you need to break it up into files that each do one thing well then you need a way for those files to require each other say i need to load the math component before i start doing math kind of things so browserify i think is kind of number one on this now require.js was number one for a while because it was kind of the first browserify came out and webpack is very quickly growing because the react community really likes webpack if i had to pick one today i'd pick browser fire webpack and honestly i can't decide between the two at this point i definitely wouldn't use require.js anymore not that it's bad still totally fine to use but these would be my two picks uh bower package management not as popular as it is as it used to be more people are using npm but bauer's still a very legitimate tool there's definitely a need for it in specific situations so bauer's something good to get to know yeoman is very cool for generating project folder structures and generating your initial gulp file grunt file with browserify and all that so i have a video on yeoman that kind of shows you more what that is it'll get you up and started very very quickly a very cool tool to get to know um and then you want to pick a javascript framework and this is really what you'll grow and be good at there are actually job descriptions for angular developer react developer backbone developer ember developer kind of things so these are the things where you want to find one that seems to make a lot of sense to you get really good at it now i put these in order of what i would learn i would definitely learn react this is the most popular one today is angular and then backbone was the most popular a year ago but angular is now the most popular i mean react is growing very very very quickly facebook backs react google backs angular and react just has some very cool methodologies behind it i will be doing react videos in the future i'm working on some reactive projects right now loving it it's so different but it's different for very good reasons um definitely learn react if you've been scared of it or been staying away from it it's gonna be a very significant player in the days to come flux is is the methodology that you will code react with it's not really a framework um it's it's more or less a way of coding react so definitely look into flux as well if you're looking into react like i said angular backbone still tons of backbone jobs out there because backbone was the javascript framework to use for a long time and honestly ember has hung around for a while it's been around for a while was not popular um but it's a it's a very good framework and it is it is grown in popularity slowly over time it's very good for for large scale apps it does have its frustrations but it you know it's not going away at least not any time yet so just not as many jobs out there so if you're learning i wouldn't necessarily recommend ember is your first pick even if you like it me thrill and reactive are kind of cool ones to look at i would not say learn them first reactive is kind of the simplest way if these are just way too confusing for you and you cannot seem to get it to click try looking at reactive reactive is very simple but accomplishes quite a bit um then you're going to learn how to unit test that framework of choice the framework you've chosen mocha and jasmine are pretty much the biggest ones out there what is there there's uh there's there's a lot of other ones but pretty much mocha and jasmine for javascript are the top two i prefer mocha no big real reason why these are very very similar anyway if you can do one you can definitely do the other and karma is a test runner which is kind of cool you don't have to learn that but that's noteworthy so there you go that's front of developer tons of front end developer jobs out there tons of demand for frontend developer jobs they're great great great jobs fun teams to be on so it's a great track to take let's say you're taking the back end track um lots of change in the back end track this year as well so uh first off you're going to want to pick a language and there are tons of languages for backend oh my goodness tons of languages for backend these are not in order because there's really no right or wrong um my personal favorites i just love node.js we're seeing a lot of companies like netflix paypal groupon uh the list keeps going and going uh switching from these monolithic ruby on rails applications to much smaller broken up node.js applications with express or happy or koa um so node.js is very fascinating to me php has not gone anywhere php um if you're gonna pick one i'd say pick one of these three here ruby on rails node.js with express or php with laravel let's say you're just a new learner say tell me one to learn i say look into these three languages find the one that seems to make most sense to you and go with that advantages to php tons of php jobs you don't have to be a rock star to get a php job because there's a lot of companies that don't require a lot out of their php developers because of that php has gotten a bad rap sometimes even though there are tremendous php developers out there so again you'll see the pay range is extremely broad for php developers because there's just such a range out there ruby on rails is much more specific it has a ruby on rails way so if you learn it you'll probably have a little more confidence that you know what to expect from a ruby on rails job whereas this could look a thousand different ways this is much more specific so if you're going to learn ruby definitely learn ruby on rails first sinatra is very cool it's a micro framework a lot more like express for node i personally if you just love javascript then learn node there's there's a growing number of node jobs node is becoming more and popular more and more popular every day uh other languages that there's still lots of opportunity lots of jobs for net which would most likely be c sharp if it's asp.net my recommendation is stay away python which generally will use the django framework although there are other python frameworks out there java is still tons and tons of java jobs people keep saying java is going to go away from web development but it's not done that yet and there's some great fun new frameworks out there like play these are kind of the top three java frameworks for the web spring grails play if i was new when i was starting off and i was going to learn one i would learn them in the reverse order i would learn play grail spring grails and play are kind of the newer more modern takes on web development and those are kind of duking it out for who's going to be the fun new guy and then there's just a lot of spring jobs because spring's been around for a while so that's kind of if you if you you know have any kind of java background you might want to look at those and then you'll want to learn how to do again unit functional testing for your chosen technology they're going to have different frameworks if you're if you're from javascript you can use mocha for your node but you're it's just going to be different based off the language you have some cool upcoming languages which they're not really upcoming they're already here um go or golang is very very cool i like go a lot it's a lot of fun um scala erlang also some cool languages just to kind of throw on that list for you there's probably a dozen more but those are three that i figured i'd throw on the list um and then you're going to want to learn in that language so you've chosen your language and if you're still daunted by which language to pick and you say well just tell me one language to pick i'm still going to say pick ruby on rails this year although i wouldn't be bummed out if you picked laravel or express js but those would kind of be the three frameworks that i'd say to pick from i'd you would say ruby on rails because i think you'd have the highest chance of getting a decent job as a junior developer with ruby on rails but that's my guess i haven't done that in a while so you're going to want to learn some things then with that language of choice you're going to want to learn how to build an api for say jquery to consume how do i build a restful web service that the jquery or the front end angular or whatever can consume can use you're going to want to learn some security um and that's going to be different based off of each framework so you know you'll want to do some research on it you know do some research on ruby on rails security you know how to secure a ruby on rails application you're going to want to learn authentication and authorization so that's two things but it's one concept authorization is how you verify a user so they log in with their username and password or they log in with their facebook which is called oauth2 and then that's basically authorization authentication then basically says i'm sorry i flipped these around so that's authentication authorization is whether or not they have access to things so basically once the user has authenticated can i allow them to post on somebody else's twitter feed well not if they're not authenticated as that ut user can i allow them to view your emails well only if you're authenticated as you and not somebody else so authorization kind of is a way of locking down your data so people can't see information delete information they shouldn't see and delete so then you're going to want to learn kind of maybe some architecture microservices or a service oriented architecture is kind of ways of getting around building one gigantic monolithic application so lots of companies start off with their one big application and then as they grow that becomes more and more of a pain because now they have 12 developers working in this one big application and so they have to break it up into services or even smaller into dozens of micro services so uh kind of gets a bad rap because there's this old school soa which is not kind of what i'm talking about i'm talking about just the concept of breaking your application up into smaller applications that deploy separately you're also going to want to learn of course how to deploy your server or you're going to want to learn how to deploy this to a place can you deploy your application to they're all up here on these web platforms we'll get into those in a little bit and you want to learn about caching caching is basically a way to store stuff so say you've tied that oh yes you want to tie it into some databases so let's make a ruby on rails application that connects to a mysql database and then let's make a ruby on rails application that connects to a mongodb database and then let's use redis for sessions or for some caching and then other two other cool databases to look into are postgres and cassandra and there are many many many other ones out there but these are you know some pretty popular ones my sequel and if you're just gonna pick two and then redis is also a very kind of very simplistic database that's good for certain things like sessions and caching as i mentioned so deeper into caching you're going to want to learn how to put nginx in front of your application uh you or app apache if you're on um you know say something like php apache might make more sense i'm a big fan of nginx um and then you'll want to possibly do some inmemory caching with memcache just what it used to be anyway so you want to learn how to add some caching layers so you don't always have to hit the database every time you know a certain email is looked at maybe we can cache that email for a while so next time the user looks for it boom we can just pull it right away out of redis or out of memory so that's kind of some thoughts on caching and if you're still with me right now and you're not bored and you're a backend developer you want to take this thing kick it up to a higher level then you're going to want to look at what's called dev ops and devops is this whole world of bridging the server administration world with the developer world and so it kind of bridges dev and operations ah i lost my connection no oh well well we'll see what happens um anyway so devops is basically this combination of several things we're going to automatically spin up servers and then we're going to automatically provision those servers and what provisioning means is we're getting them configured say we have a node.js application to deploy it we don't have to want to log in through ssh manually copy our files over that's a terrible idea there's so much human interaction developer number 13 who's a newbie is going to blow up your website every time so you want to try to take a lot of that risk out there and a lot of that manpower out of there and devops is basically the practice of building awesome workflows into all the things developers do every day so let's take that node application we want to add it to a server so from the command line we can provision a server boom digitalocean just spun up a new server and it installed node.js in the correct version we have and all the stuff that it needs and then from the command line we can actually deploy that thing straight out and then we can also monitor that thing so we know when that server might be getting overloaded so we can add another server and have that load balance between the two maybe having nginx uh balance the load between both the servers so that's kind of the concept of the world that devops lives in um you'll want to learn some web platforms so many out there no right web platform out there digitalocean is great for really small projects heroku is great for really small projects but can grow more expensive significantly more expensive as applications grow that's about all i have on that rackspace is very good amazon has of course all the services in the world my goodness so many to choose from these days no right or wrong you got to just kind of look into tons of them you're going to want to learn server management that's kind of what i talked about before server management or configuration management cm is actually kind of what it's referred to as is is the way of allowing servers to automatically get provisioned salt puppet chef and ansible linux is well you're going to probably be configuring linux servers so linux isn't really a language or a utility it's you know just got to get a little bit more comfortable with how the linux operating system works docker is a very very very cool thing for doing that i'm gonna actually get into some docker stuff over here um but look into docker that's a huge thing that's changed this year docker is is really revolutionizing a lot of both development and ops and in by containerized applications very very cool um so you're going to want to learn some workflows there's continuous integration continuous integration is basically code is always having tests unit tests run through github or travis ci jenkins lots of continuous integration tools code ship is another one that's kind of if you're starting with devops this is the first place i would start let's start with continuous integration and deployment those are kind of like your first big deals these are some things for devops workflows that are important vagrant is a great tool to learn because vagrant will help you set up a local development environment that is not your machine it runs on your machine but it's the exact same environment as your amazon server or your rackspace linux server is so that's a very smart i got a video i have a video on vagrant i will add that capistrano fabric flight plan these are deployment tools they're all great you can use any of them for most any application so you don't have to use capistrano for ruby i've deployed lots of node.js applications with capistrano fabric is a very simple npm based one it's very very lightweight probably the easiest to learn i mean you'll want to learn some deployment strategies and then lastly let's just kind of talk about some docker docker is a super fun cool new thing out here it's changing about every three days there's a new player out there for so who really knows where docker is going to end up but you do want to basically the concept of docker is is let's take this application we built let's turn it into a container and so then let's build let's kind of spin up 15 different servers from say digitalocean and make them act as one giant computer that we can now run 30 copies of our containers in so if we basically need more power to our website we just run four more web server containers if you need more database power you add three more database containers and that's kind of how that works um in a nutshell coreos and mesos these are kind of some great um operating systems that are working very well with docker containers docker itself gives us three really cool utilities docker machine for spinning up things docker machine allows you to just spin up a digital ocean or an amazon docker server docker swarm is very cool now it's not ready yet but it's very very close to being ready for production docker swarm will allow without installing coreos or mesos will allow you to create 10 different servers and talk to them as if they were one so that's very cool docker compose is also very cool kubernetes or kubernetes or however you do pronounce that mesosphere panamax these are very interesting ways of managing docker containers i'm gonna leave that at that because there's still a lot to be said about docker that i'm not going to get into in this video there you go that's web development in 2015. if you're new and i just freaked you out just just take a deep breath learn these learn these little things on this list here and pick up gosh what is going on and pick either a framework on front end or back end i mean that's really what it comes down to and so it doesn't have to be all that confusing these are just all the little steps along the way that you're going to want to learn hope this helped you out have an awesome day and what a great industry we're in yeah