okay so we're moving on with the docker lessons now if you have not seen my last one on how to run a docker image as a container you definitely want to catch that or you will feel lost but if you've watched that let's move on so if you're going to be building and running docker stuff on your machine and it's not linux you've got to install boot to docker the reason is so head over to boot to docker dot io and you can install that it's very simple and painless the reason is is docker sits on top of linux it's a linux tool it sits on top of the linux kernel and so all the docker containers you run have access to that those resources and so you really can't run it on mac os or windows what you can do is you can run the docker command on your mac terminal and then you can run a virtual machine which is a really lightweight linux machine if you remember from my little graphic i made here we can run a virtual machine and then when we type docker run it's going to actually run stuff inside of the virtual machine on mac it's going to build our images and run them there so that's kind of what boot to docker is that's how you use it go and install it and you can also if you use homebrew you can go brew install boot to docker and that'll get you going so you know it's going when if you can type boot to docker and you get a list of commands okay boot to docker is installed and so that installed the docker command as well but i can't go docker ps because i'm not connected to a docker daemon i'm not connected to a docker machine and it knows my mac is not a docker machine so what you do is you have two commands you go boot to docker up this is going to boot the docker virtual machine the boot to docker machine on my computer so you'll have to do this once every time you reboot your computer it's not really a big deal it's very lightweight i don't know what it takes just uh it doesn't take up a whole lot of ram um so now that that's running docker ps still doesn't work because docker the docker command does not know what vm that is so to get that pointing to your docker vm you go boot to docker shell init and that will you wrap it in parens and the dollar sign that's going to execute you know the output of boot to docker shell in it so there we go it's now pointing to my boot to docker vm i can go docker ps and i'm running nothing excellent i'm good to go and so you do have to run this for every new terminal window you open so i just copy this command and paste it at the end of my user's bash profile file i pasted at the end of that so every terminal i open it tries to connect to the boot to docker vm if the boot to docker vm is not running then it just you know errors out it doesn't it's no big deal so i kind of have that so it's automatic for me um there you go boot to docker's out of the way let's look at actually building our first docker image so for this i have a really simple presentation i think the easiest way to do or the easiest example of building a docker image is serving up static files with nginx so let's say we've got this static website here which i just downloaded html5 boilerplate that's their index html javascript css and i'm just going to use nginx to serve this up if you don't know what nginx is i have a video on it i'll put that in the description it's it's basically apache except for i like it better so i've got this nginx configuration file and it looks pretty complicated but here's all you actually don't even need that this is all the file has to be for my nginx configuration we're going to look for everything in the slash www folder and we're going to serve that as a static website now i added some other stuff i want to do that auto indexing so if i don't have an index.html then it's going to you know show a list of the files and then i also from html5 boilerplate server configs this url here i also copied a lot of caching so it'll cache jpegs and images and all this stuff so it'll speed up the web website significantly so here's my nginx configuration file so i want to actually build a docker image that runs nginx and serves up static files how do i do that i create a docker file and i'm going to say it's from nginx so nginx is basically they take i think it's built on ubuntu it might not even be ubuntu it might be a lighter operating system than that so it's it basically has nginx installed and it's exposing port 80. so that's what this base box is this base configuration so i'm choosing that as my base and i'm going to make a few changes to that for my image i'm going to add a few layers on top i'm going to make a directory called etsy nginx logs and i'm going to touch an empty file in there static.log i have to do this because my caching is going to log to that file so if that file doesn't exist my build will fail because nginx well my build will work but nginx will never run it will hang up because it's looking for that log file the add command i'm going to add nginx conf to etsy nginx this is the directory for all the configuration files i'm just going to call it default.conf i'm going to replace default.conf with my new configuration file and then i'm just going to add everything from source into slash www because if you remember my root is slash www so that's it that's literally all the lines you need i don't have to do expose 80 because that's already taken care of in my parent image i could do it again it'd be no problem and i also don't have to do command engine x because that's already happening up in my parent file so nginx is automatically running i can get rid of both the lines i could add the exposing command just you know for redundancy sake but i don't have to do it so let's go ahead now and build this so now i'm in my folder the command is just docker build and i'm going to tag this this is basically what my repository name is or what my image name is learn code academy static nginx is what i'll call this static engine x and then i need to show it where's the path to my docker file my docker files in the folder i'm in so i just do space dot build no errors it's successfully built now i can run it docker run uh d i want to run this in the background daemon um and then p let's expose port 80 out to port 80. uh and then let's go um what's the name of that it's learn code academy man that's a long username static nginx there we go it's running and so i can go docker ps and it's running so how do i get to it i can't go to localhost because my docker vm has its own ip so i actually have to go boot to docker ip there you go that's the ip address of my virtual machine i'm going to add this to my hosts file because i don't want to have to remember that every time let's come down here let's call this boot to docker dot me there we go so now boot to docker dot me is my virtual machine i should be able to go to boot to docker dot me and port 80 is default so there you go hello world this is html5 boilerplate awesome so kind of the workflow for a redeploy on this guy is let's say i tweet some changes hello world this is me let's save it beautiful love it let's go docker build i can actually just kind of tab up through my commands docker build let's retag it it built it and then let's go docker stop static did i name it i thought i named it yeah docker stop whoop i didn't name it so it's tender feinman stop you remove you and then let's run i'll go up through my commands run that i knew i forgot a flag there's always a flag we'll just call this guy static there we go so i'm running it again now for local workflow you don't want to do that there you go hello world this is me so my docker container is working it's beautiful i can deploy this guy um i wouldn't want to do that for a local workflow clearly because you don't want to have to go through all that every time you make a change especially for static html i'm just going to run something like live server which is an npm package i have a quick video on that and then i got live reloading and everything and only when i like this one i'm happy with um there you go this is me also me there we go that's live reloading much faster much easier workflow once i'm happy with my website that's when i build it that's when i deploy it so you're saying okay how do i deploy this guy i liked what i did let's build it again docker build let's build it well then all you do at that point is you just go docker push um and assuming you've done a login docker login assuming you're logged in with your credentials on your machine just push learn code academy static nginx there you go and that's going to send the image list um and this will take depending on how many how big your image is and what all changes you've made this might take 30 seconds it might take a minute there you go it's going pretty quickly and then once that's pushed on any other machine i can run it so i'm going to go ahead and log into let's go and log into ssh root docker dot me which is my production server if you'll remember uh let's go back over here okay there we go it pushed i skipped ahead about 20 seconds because i didn't want to make you all wait in silence so it has pushed and now i can go docker run p 8080 uh d name static learn code academy fight type static nginx man i hope i typed everything right okay there we go exact same thing and so it's going to pull all the images it's going to do it much faster because i'm not on my local machine i'm on digitalocean right now so it's going to pull these images really quick and i should have my first deployment running in just a matter of moments i didn't have to install nginx on my server i didn't have to install apache on my web server absolutely nothing is installed i'm just running my image as a container okay there we go let's see what docker dot me looks like docker dot me and there you go there's my fully deployed website i can run this image on staging production anywhere and everywhere and so that's kind of my first docker build it's not too much harder to build something for node.js app or for ruby on rails app it's it's all in that docker file and the next video will probably get into a node.js app or something so hope you have a great day