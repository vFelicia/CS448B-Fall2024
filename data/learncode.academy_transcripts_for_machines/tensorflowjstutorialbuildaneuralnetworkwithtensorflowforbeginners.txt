in this video we are going to solve the iris data set with tensorflow.js in node.js tensorflow is of course google's awesome machine learning neural network library and we are going to use this for javascript now because they are actively developing a really great version of that for javascript and it's still in development but it's very much usable today so here's the iris data set in json format if you're not familiar with it it has four measurements for a variety of iris flowers and then it determines from those what the species is so we're going to take this data set train a neural network on it and then we can give it any four measurements from any iris flower and ideally predict what the species is so i've gone ahead and broken out also a few pieces of testing data this is really important as well so i've taken three items out of the data set and they only exist in this testing data set so once we've trained our neural network we can run these values through and hopefully get some responses that are correct and show that our network is trained properly so let's go ahead and get started using tensorflow js to get started let's go ahead and define all of our imports okay you can see that we've imported tf that's our tensorflow library we've also just imported tfjs node that's going to set some node.js bindings that make it more performant and then we've imported our two data sets so now we can go ahead let's do some comments here so we can actually kind of mentally think through what we're going to do we're going to convert our data and then we are going to test our or build our network we're going to train that network and then we're going to test that network to make sure it actually performs well that is all we're going to do so let's start by converting our data real quick so our data as you can see here is in object format and we need to convert this from to input values and output values and that's pretty simple to do we basically want it to look like this our input values will be four arrays that have you know our numbers let's just say those are our four measurements right there and our output value will be a three dimension array because we have three different species uh in the iris data set we have setosa virginica and versacolor so this will say for setosa this will be one zero zero for virginica it will be zero one zero and so on so we're basically going to convert this to flat arrays and then we're going to wrap these in tf.tensor2d and that's going to convert that into a format that tensorflow loves so to do that let's go ahead and take our input data and we're gonna map that so we'll take our iris dot map we're gonna iterate over that let's get an item here and we're going to return an array here so there's all our items we're conv we're converting that item into a flat array passing that whole array of arrays to tf tensor2d so that's our training data let's go ahead and get our output data now our output data is the exact same thing except for we are going to just basically say hmm is this setosa let's make item one a one if it's virginica let's make the second item in the array a one and if it's versa color let's make the third item or in the array a one so we can do this by doing a simple ternary if it's setosa let's make item one a one otherwise let's make it a zero so let's copy and paste this three times if it's virginica then it's the second item is going to be one and if it's versa color the third item will be a one so there we go we've got our data set up and let's do the exact same thing on trading data for our testing data so our testing data will be in the exact same format except we're not going to loop over all of iris we're going to loop over iris testing so now we're going to have a how many items we're in testing three items we're in testing so this is a three item testing data array so there we go our data is completely set up now we can actually build this neural network it's slightly more handson than doing it in brain.js which we've done in our past videos which is extraordinarily simple but you also don't do any configuration in tensorflow it's a little bit more manual because you add all the layers yourself so let's start by creating our network our model so it's called tf.sequential we're basically creating our sequential neural network that is our model that's our network and now we can add layers to that and we're going to add a tf layers dense so we're going to add a dense layer this dense layer is going to have an input shape of four because our data set has four items in the input so those are our input dimensions so it's going to be an array of four that's how we define that uh let's give it a sigmoid activation function why sigmoid uh sigmoid is good for classification problems where it's going to be a one or a zero and it's classifying it into one of these three buckets uh classification again is when we have multiple output dimensions that are going to ideally be one or zero regression problems would be if we have a single output dimension that's like a score we're scoring from 0 to 100 other activation functions like relu are better for things like that sigmoid works really well for classification so we're going to do the sigmoid activation function and we're also going to say hey how many units are we putting out here um let's put out five so we're going to put out five i just kind of picked a number out of the hat there is our first layer let's add another layer now let's add a hidden layer input shape is going to be five because this one is kicking out to five this one is receiving five and then this one is going down to three units because our output is three units our output layer so then lastly let's go ahead and add a final shape it doesn't need uh input input can also be dynamically determined so you don't really need that to happen and there we go we're good to go we've added our three layers last thing we need to do is we need to add the error function and the error handling how is it going to compute the error there's multiple different functions and methods for back propagation so this is kind of a good standard for what we're going to do here let's go model dot compile here's two good standards we can do loss of mean squared error and you can do an optimizer function of atom you don't really have to understand how these are working these are just a good set of defaults for you and a good default for atom is 0.06 again don't have to fully understand that right now but that's a good standard compile configuration so now our network is complete we can go ahead and train our network which is called fitting in tensorflow so let's go and save our start time here so we can see how long this takes we got our start time saved and we can go model.fit let's fit our information data into the neural network and our output data and then how many times do we want to train it's called epochs let's train 100 times let's just start there so now we're going to receive a promise so we can go dot then that's going to train asynchronously or synchronously however you want to look at it then and we'll also get this history here let's console.log done and date now minus start time let's save this and see what happens here we've got this error that's no big deal it's training our network training our network done in four seconds there we go it's trained in about four seconds so now let's go ahead and actually see what this history object looks like let's look at this history object and see what that says here is all the errors that we're getting so if we scroll up you can see we have our loss history it starts up with a pretty big error number and that error number gets smaller and smaller and smaller and smaller a little bit of back and forth as it goes through all the iterations you can see that we're sitting at about a point 0 1 error level so that should give us some pretty good results let's go ahead and test this now so in this then function after it's been trained let's go and kill that console log there let's go model.predict we can do model.predict and we can give it our testing data and we can also then go dot print so it's going to train and then it's going to run our testing data through the prediction you can see that our first piece of data it thinks oh pretty strongly that it's a what are those setosa virginica and versacolor you can see that our our errors pretty small we have trained successfully against the iris data set this should be one zero zero this should be zero one zero and this should be zero zero one because our testing data is setosa virginica versacolor so there we go we have created a neural network we've added three layers to it we have trained it and then once we're done we have tested it to prove that it is working correctly so there you have it that is how you build a neural network in tensorflow.js train it solve the iris data set problem and prove that you actually solved that problem correctly i'm going to put this code on github in a gist and add the link to that in the description and that is all have yourself an excellent day you