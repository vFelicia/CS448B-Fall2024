okay in this video let's look at the second pattern for handling instantiation of modules and inheritance of modules in the last video we looked at the classical uh pattern for inheritance and instantiation and in this one we're going to look at the newer pattern which is prototypal some people actually say prototypal and they mean classical uh because they've not yet learned of this newer one I say newer it's been used for about the last 3 to 5 years um and it there's there's a few advantages there's not as many advantages as some people may say you still encounter classical inheritance a lot um you see it used a lot uh just because it was it was the way things were done for a long time but I personally think this is the better pattern uh so let's go ahead and look at prototypal inheritance so in the last example you would create a Constructor function and you'd instantiate it with new so you'd go uh function person and then you create a new person ver will equals new person okay so that's classical inheritance and there's a video on that I'll put in the description if you missed it uh and so prototypal inheritance does all the same things in a different way so let's go ahead and now let's create we'll we'll go hum then we'll do musician and then we'll create people so in this case you simply make objects human equals boom and you make an object and then you use object create to create a new type of thing so you can make a musician equals object create human and so what that's going to do is that's going to make a new object that inherits all of the properties of human and so let's go ahead and fill in a few of these so let's say this has a species and that's human human and then we've got let's say say species and this will console log this.s species so you still use the this uh keyword when you're referencing values that are on the object and let's also do say name there we go so if it has a name you can say the name uh so now we've created a musician and so adding new properties is or adding new methods is pretty simple you just simply do musician Dot and then you add on to it so musician. let's say play instrument this will be a function that's console logs plays plus your instrument there we go and so now to actually create a musician we simply do what we've done before with object create ver will equals object.create and we're going to create a musician and then will can have a name and will can have an instrument uh let's play drums today I'm not very good at drums and now I have all the methods from the human and I have all the methods from the musician because the musician inherited from the human so I can do things like will. say species tell what let's actually pull this into the console at this point I'm going to copy and I'm going to paste there we go so I've pasted it all in so now let's go ahead and look at just the will object so here see here's my will object and I've added two values to it and then I can also see my prototype this is the musician object I can play an instrument and then that prototype I can say names say species and I have a species so will. species is human will. say species works and then will. playay instruments all the way up to my level Works uh so then if I were to to go human dopes let's say we change that so then will. say species it's inherited I now say Homo sapiens I didn't change anything about will I change something about human and it's inherited down because it's all prototypal so that's basically what prototypal inheritance looks like um it's a lot simpler I think it's a lot cleaner for newer JavaScript developers cuz they don't have to worry about actually working with the Prototype objects I know newer developers tend to have a simpler time grasping how inheritance works with this because it just looks like code um we're going to create a musician object from human and then we're going to add some methods to it it's very straightforward and simple now if you don't like having to add all of these here which I don't like having to do a lot of people will add a create method here and so there's a create function and then um you can give it name say human can create um and so what we're going to do is we're going to create an instance right in here we're going to create this right there and then we're going to go instance. name equals name and then we're going to return that instance and then make sure I add my comma there so this would basically let go ahead and get rid of the inheritance for now now ver will would do human. creates and then I'll just say will so let's pull this in my console here there you go so now let's look at will I have a name of Will and then I have all those same methods and I can go over Bob equals human. create Bob so now Bob's another guy with his own name so that also works and if you want to make this even cooler uh you can actually just allow any object here so I could call this values so I pass in a object of values any amount of values and then I'm going to get all the keys out what that does is here if you do object. keys on any object A1 B2 then it's just going to give me the list of keys so I'm going to say okay what are all the values that got passed in I'm going to for each those and then key so I'm going to go through each key and I'm going to assign the value of that key to my instance so no matter how many values I give it I just give it an object and no matter what I give it it's going to assign that so instance. key equals values key so I'm basically just taking all these values putting them all on and what this is going to do is this is going to allow me to always have a create method let me go and copy this so now all my children will have this create method so I'm going to create that human and that human has this create method up top so now I can go ver musician equals human. create and then I can just give this all my stuff right here musician going to let's say type of musician actually musicians think they're their own species and then function not function play instrument I'll just say plays there we go so now I've created a musician type musician's got his own species he's got a method on there and then he's got all that other stuff so now I can do musician. create to create will because I'm inheriting that create method all the way up there from human and that create method will automatically apply anything that I add in now so I can go name is Will instrument uh let's play guitar I'm actually pretty good at guitar uh so now Will can go play instrument it's going to play guitar whoops forgot my space there will. say name will. say species and again let's look at that will object so I've got the will object who doesn't really have any methods and then I've got the music object that can play instrument and also has his own species and then uh I also have that so if I were to do will. say species it's going to be a musician because species here overrides species there so that's prototypal inheritance for you um basically you just use object create and then if you want to extend this a little bit more then you add a create method onto one of your root objects at the very very top level and then every other object can use create create create to continue creating their own objects uh the one caveat to it is object create is only IE8 newer so if you support really really really old browsers uh you're not going to want to do that so that's prototypal inheritance again it's a lot of fun it's really easy and uh enjoy