all right so we've been learning JavaScript and we've been learning computer programming at the same time so far we've covered variables IFL statements and comparison operators next up we're going to learn functions functions at first to a new programmer can feel a little tricky but I promise you they'll catch on a lot faster than it feels like at the very beginning so stick with it and do what we do in this exercise a couple days in a row and you're going to feel pretty confident with what functions are before we get into functions let's move job script into our web page because we don't want to be writing functions in the console it's too many lines it would be too annoying so here we go we're on our index.html file and if you're going to insert CSS on your page there's two ways to do it you can do a style tag and then anything within the style tags is treated as CSS or you can pull in an external stylesheet another file with a link tag JavaScript works the same way we can run a script tag and then anything within this script tag is treated as JavaScript I'm going to say alert um and I'm also going to hit save and I'm running what's called live reload so when I save my file this web browser is going to automatically reload my page if you're doing this on your on your own without live reload you're going to have to save and then hit refresh if you want to see how I'm doing live reload I'll put some links to that in the description but it might be a little over your head if you're a brand new user so there you go you can see that now my web page when it reloads has alerted a empty alert for me and there's a reason I put the script tag at the bottom of the page and let me show you why by moving it up towards the top I'm going to hit save again and you'll notice that now I get the alert before I see my web page I have an empty page and the alert fires this happens because javascripts happens in sequence as your web page is rendering all the elements what that means is is when your browser opens up your HTML file it's going to start going through line by line and adding in all the elements so when it gets to a script tag it's going to load all that JavaScript and then it's going to run it before it does anything else so in this case it runs my alert up here before it's rendered all these elements onto the page you know JavaScript is really pretty fast you're not really doing alerts a lot so all the user will normally notice if you put your script at the top of the page is the web page might feel like it appears a little bit slower if you put it down here at the bottom of the page right before the closing body tag then what's going to happen is is your web page will spit out all the content first so it looks like the web page is loaded and a split second later your script will be activated and web developers have learned over the years that this creates a much faster feeling web page and the user doesn't know any different so we recommend that always put your script tags at the bottom right before your closing body tag there's almost never a reason that your script needs to go in the top up in the header so the script tag is the first way of doing it and just like a link tag you can also give the script tag a file to pull in as well so in this case I'm going to delete the content and I'm just going to go Source SRC equals and then that basically is like the href is for CSS so instead of pulling in the Styles main.css I'm going to pull in the scripts main.js and now that file gets loaded in and execute it as soon as it's loaded the normal folder name for JavaScript is going to be called a JS folder or a scripts folder so here we have scripts JS is just fine either one works so now I'm loading in this main.js file so if I hit alert and save you see I get that alert as well and it's already rendered my web page first before it's executing my JavaScript so there's how you get JavaScript on a page if you have multiple JavaScript files you can do multiple script tags just like that and it will execute them in order it's going to run my main.js first then my main. two then my main do3 then my main4 so that's what's going to happen if you have multiple script tags if you want to break up your JavaScript into several files to make it easier to maintain so let's go ahead and learn about functions so functions are basically a piece of code that does one or more actions piece of code that does one or more actions so I'll just show you what a function is because it's a lot easier to see it than to hear about it you start off by typing function and we'll just call this function go you open and close your parentheses and then you open and close your curly braces so whatever I put in here is going to execute when the go function is called so let's just say alert high alerts hey there and so it's going to do two alerts I'm going to save my web page refreshes and guess what nothing happens because I defined my go function but I didn't call my G function I call it by saying go open close parenthesis and then a semicolon now when I refresh it's going to say hi and then it's going to say hey there I have my function a cool thing about functions is they can be called as many times as you want I can call go twice hi hey there hi hey there so that's kind of cool another thing about functions is they accept what are called AR arguments let me show you what arguments are I could say name age and then instead of alerting hi hey there I can alert name and I can alert age now in order for it to know what the name and the age are I pass them in when I'm calling my function so I can say my name is will and I'm 34 because I just had a birthday so now will gets passed in as the first argument which is name and 34 gets passed and is a second argument which is age so now it's going to alert will and then it's going to alert 34 let's save it there you go will there you go 34 once again these are called arguments and what arguments allow us to do is they allow us to make code reusable because at first you might think hm I could just stick to go I could go ver name equals will and then ver age equals 34 and then I could forget this whole arguments thing and I could just say alert name age well yep that's going to do the same thing it's going to alert will and it's going to alert 34 but if I code it with arguments it's reusable let me show you let's go back to name age let's go back to will 34 and now I can call it a second time with a different person let's say my wife Laura 28 there we go so now it's going to run one time with Will and 34 will 34 and then the next time it runs it's going to run with Laura 28 and so that's kind of a good way of coding it's it's called dry which is do not repeat yourself if I could spell do not repeat yourself Dr y do not repeat yourself or don't repeat yourself so dry code is a good thing we want to code as little as possible that makes it easy to maintain that makes for as few lines of code AS possible so that's kind of what a function does it accepts arguments and it runs multiple commands now a function also returns a value whatever you type in return will actually give you a value out let me show you what a return value does you might remember from prompt earlier in the first lesson we went ver name equals prompt and then prompt opened up a window well I'll just show you right there it opened up a window and then when I said will enter will got passed in from the prompt into my name variable so what actually happened was is prompt had a return value that name received you see that it executed this first and when prompt was done whatever prompt returned which was my name will went into name and so how you code a function like that is very simple let's make a function called add and let's make it first second we want to add two numbers together and so I'm going to go add let's say ver sum equals add one and two so we're going to add one and two together and so instead of just going first plus second I'm going to return first plus second so now nothing actually happens in this function like alerts or anything like that we are going to return the value value of first plus second which means it's going to run the function the function executes it returns kicks back out first plus second which means that it's going to add one and two and then that is going to get passed into sum so now I can alert sum and sum is going to be three there you go three because I added one and two it returned that back out so I could do something silly like this could pass in add one and two that's one that's two I'm just going to return will so now it's just going to say well Su equals will and I alerted to I basically ignored my arguments I returned whatever value I wanted to return which didn't make any sense and that value got passed into here so no now no matter what I pass into add function it's always going to return will of course again that's kind of silly I want to return 1 + 2 and now I have my ADD function another way that you can do this with a little bit less code is I could just alert add one and two so it's going to run this first because this is an inner function JavaScript is going to know I have to run this in order to know what to give to alert whatever this returns I'm going to pass into my alert function as the value so this will do the exact same thing it's going to run one and two one and two returns three and then as far as JavaScript is concerned it's just going to alert that returned value so I'm going to save that you see it alerts three let me show you what happens if you alert if you return a second time let's return will now it does absolutely nothing because as soon as the return happens this function is finished what happens after the return never fires JavaScript is done so I can say alerts hi there and you're never going to see alert high there it alerts three from down here and I never see the alert high there up here the function ran it returned and then the function was finished now you can have multiple returns you could do something like H let's go there name equals we say this um let's go alert add add is kind of a bad we'll call we'll go back to go since we're not going to be doing adding will and we'll go back to my my age of 34 so this is going to be now called go name age if age is less than 20 then we are going to return name plus an exclamation mark CU after all I'm less than 20 that's pretty cool else we are just going to return my name so now this will return a different thing if my age is less than 20 then I'm going to return name shouted else I'm going to return just my name so go now we'll check this out and it's just going to return my name because I'm older than 20 and then I'm going to alert that there you go just will so let's change my name to 19 and now it's going to shout my name because after all you shout at teenagers a lot more more than you do at adults um and what happens if I don't return anything at all let's say I say go name and age and I'm going to get undefined so this function has no return which means it's returning nothing which means it's returning undefined which brings us to one more of our types in JavaScript and that is the undefined type if I say ver a but I don't give it a value then I alert a it's going to alert undefined I defined a as a variable but I didn't Define the value of a so another type in JavaScript is undefined and it means simply well undefined so that's about all you need to know with that so by default every function is going to return undefined unless you give it a return value will again so there you go that's functions let's um let's leave it there for now so I'm going to say go ahead make an addition function make a subtraction function make a multiplication function make some functions play around with them and once you feel confident with that let's move on to our last lesson before we get into some actual useful things that we can use JavaScript for on our web page