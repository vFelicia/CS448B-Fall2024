okay so the next patterns that we're going to cover are patterns that allow instantiation and inheritance now those are some big words if you're not used to them instantiation just means we want to be able to make multiple copies of this object we want to create a module once and then make many copies of it you see things like this say pinterest every pin as you scroll down is probably using the same logic you don't have a billion revealing modules all with different names for each pin you've probably created one module that's a pin module and then you're creating multiple pins from that same kind of thing if you're scrolling through a list of friends on facebook you know you have a follow button for each friend you have an ignore or a you know block or an unfriend button and so you write all that functionality in one module and then you can create a bunch of different copies of that that's called instantiation because you're making a bunch of instances of one thing so instantiate instances and then also with this is inheritance and we'll cover that a little bit later so there's several patterns for instantiation and inheritance we'll cover those there's pretty much the two common ones are classical and prototypal there absolutely is the concept of classes in javascript it just looks a little different than you know class extends some other class like you'd see in most languages so that is in javascript and that's basically what we're going to be covering so lots of times people will call something prototypal and they're really meaning classical because this is its own kind of slightly tweaked way of doing classical inheritance but for this video we'll be covering classical in the next video i'll show you the difference so basically to do inheritance uh you'll do something like this let's say we'll take the facebook example let's go vera person and you're going to want to make it an upper case you know it's going to be a capitalized and the reason is it's a constructor this is not a actual running module this is the master module that will create all of our modules so the the absolutely normally standard usage is that you're going to capitalize the name of a constructor so this is going to be a function so this is basically our class if you want to think of it as this this is our class it's not an instance of a class but this is our class and then later on you can go where john equals a new person okay so there we go now we've made a class it's a function and then down here is a copy or a creation i can also then go where bobby equals new person so now i've created a john person and a bobby person with basically no functionality so let's actually add some features to this module now let's say when we create a new person well we got to give him a name so there's john and there's bobby and then this actually receives a name and so within this function so when you when you do new basically this function is going to run and then it's going to return an object and so within function the work the keyword this refers to the object that you're creating right now so when i'm doing new person this is equal to john that i'm about to make and then new person bobby this is equal to bobby so basically if i say this.name equals name well now john.name is john bobby.name is bobby so later down here if i say alerts got all of those alerts jaw.name well that's going to alert john so there we go that's how that works um and let's go ahead and now add some functionality to this so we go person so when i did this real quick basically when you create a constructor then it has it creates what's called a prototype for you so person.prototype and this is what always scared me this is this is the pattern that i stayed away from when i was learning javascript because they were just words that kind of freaked me out things like prototype okay that sounds really weird i'm going to stay away from this pattern for a while i'm going to stick to revealing modules for a while because it feels comfortable if you get over the weird word you'll actually find that this is just as easy as any other pattern so basically this got created automatically an empty object person prototype so nothing is really on it but that basically got created when you created a person so we can actually add new things to that now after we've created person i can go person.prototype nope that didn't fill in right personal prototype say name and let's make that a function so this is basically like it's a method so now say name let's say we're just going to console.log this.name and that's all that is so now john has access to say name and bobby has access to say name because they're on the prototype if you think of it like this here's the module up here this is where i'm defining the actual module and down here i'm creating all copies of the module so now i can go john.say name and that's going to console.log john let's actually do something like this i'm my name is there you go so now it's going to say hi my name is john i'm actually going to say it like that so let's make sure we add a space there we go and then if i say bobby dot say name then it's going to say hi my name is bobby and if i were to change john's name name then i could do john say name and say hi my name is johnny bobby remains completely unchanged so that now we've basically created some shared functionality uh now we can do let's do shout name hi my name is and now let's add an exclamation at the end there you go so then bobby can shout his name if he wants that's going to say hi my name is bobby so that's basically how you create your module so now let's go ahead and look at inheritance with this pattern so what does inheritance look like we've done instantiation this is how you create instances let's say we want to create a certain type of person now and that certain type of person we can create multiple kinds of those so say there's people on facebook but then there's also friends on facebook so let's say let's make a bear friend and that friend will have functionality that the person doesn't so once again uppercase because friend is the module friend is not the actual uh instance this is the module this is the constructor so now we're going to make friend and now we need some sort of inheritance function and i like to use to snatch nodes one if you were to look at i'll give you this link in the description node.js gives you one called inherits and so i just usually snatch this function right here let's go and steal that and so i'm going to where should i put this i'll just put it all the way at the top function inherits and you give it the child and they give it the parent and you can look in this and see if you understand it later on that's basically just going to allow our child to inherit all of the functionality from the parent so this is our very generic person module they can all say their name and shout their name and a friend can maybe i don't know unfriend you or something like you can unfriend them so we've created our friend function that's our first step and now we want to inherit all the people methods so i'm just going to go inherits and then which one was first okay there we go construct so friend is going to inherit from person there we go so now any friend can say name and shout name as well so if i were to say there julia then julia has say name she has that functionality however her name is not being saved right now so here's the other thing that kept me away as soon as the concept of inheritance came in that's where i really started avoiding the prototypal pattern for a while or the classical pattern any kind of instantiable inheritable patterns i didn't like those at this point because it just seemed kind of freaky to me basically what we want to do is we want to run this on our friend object that we're creating so we want to be able to you know usually a constructor does a little bit more than just a sign name we could easily just say you know friend gets a name and then this name is name but then what if you change what if you start doing something like this like name two lowercase we're gonna make sure name is always lowercase well now we have to remember everybody now we have to change that here too that's a bad pattern we don't want to have to do that especially if there's a lot of logic happening up here in this constructor we don't want to have to duplicate that anywhere that's a bad pattern so we want to run this person function against the new friend object that we are creating so how you do that is very simple you simply say person dot because remember person is a function we go person call this which is what we're building now and we pass in the name so that's going to now run this exact person thing but instead of running it against the new person object we're going to run it against our new friend object so there we go that runs our super so now name is associated and if you look it inherits it actually is going to add this super pointer right here so this is friend this is person so dot super underscore is actually person so i can run friend dot super call this so that's a little cleaner just so we don't have to remember that our you know we don't have to remember that we inherited from person so uh there we go and then we are going to also let's say a friend also gets um let's change friend to musician let's forget the whole friend module musician will be a little easy musician gets an instrument and julia will play trombone so there you go we're now allowing our super class our inherited class constructor to set the name and then we're setting the instrument and then we inherit and now we can go ahead and add some own methods some own some new functionality for our musician class so the musician class we want to be able to get the instrument musician dot get instruments equals and we'll just console.log again this dot instrument keep it simple so there we go now julia can say her name that's going to do julia julia can get instrument and then what we can also do is we can actually override the say name functionality say a musician we want to be able to say the name but we want to shout differently because musicians after all shout just a little more unusually so shout name equals prototype sorry there we go this will actually be dude my name is this dot name and then way too many exclamations there you go so now when i say shout name it's going to basically do what happens with scoping is it's going to look first of all in my own object which is musician that's the module julie is right now so it's going to say hey do i have a shout name like when julia says say name it looks first in julia for say name do we have a say name no we don't okay let's look up to the parent module do we have a say name yes okay let's run this one instead so that's what's happening there so when you say shout name exact same thing let's look for shout name okay we have it basically i i will never access person.shout name as long as musician shout name exists so when i say this julia's gonna go dude my name yeah yeah yeah she's gonna shout it so now later on in my program you usually don't want to do this but i could go musician i could go delete shout name i'm going to delete that function i'm going to delete that method altogether and now julia can shout name and instead of being undefined this is now gone poof it's going to look up the chain and see oh shout name and it's just going to do a normal shout name so that's kind of how inheritance works with javascript that's what you're going to do really all you need code wise is to either quickly learn how to type one of these yourself or just go copy paste one it's not that big of a deal it's very easy to get yourself i'm just showing you where this node one is so you can go grab it in case you forget what's going on here so that's classical inheritance in this next video let's look at prototypal inheritance