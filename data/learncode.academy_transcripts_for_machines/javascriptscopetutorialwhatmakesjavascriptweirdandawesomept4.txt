all right moving on with five things that make JavaScript weird and awesome we're going to be doing scope and context which are clearly some of the most complicated things to understand especially when you're new to JavaScript um and a lot of people have pointed out after watching some of the First videos they're saying hey these things exist in a lot of languages you don't know what you're talking about um absolutely they exist it's the the unique event driven environment of JavaScript that just means they're going to show up a lot more often as problems and they're going to be a lot more unique sometimes in the way that they show up that's what I mean by that let's get into scope uh and a lot of developers mistakenly think that scope and context um are the same thing uh and they are not scope means variable access variable ah access uh which is when a piece of code is running what variables do I have access to that's the scope context uh is the value of this whenever a piece of code is running the value of this is the context and and so you can remember that cuz context has a T and this has a t so context means this uh scope does not mean this uh it doesn't have a t so let's get into scope real quick um I'm going to Define ver a equals 1 and so by default when you're coding in JavaScript you're in What's called the root scope the the base scope which is the window object when I just created ver a it actually made window. a I can go window. a and that equals one I can also go a and a equals 1 I can also go window. a is exactly the same as a yes it says true so I'm on the window object right now the root scope and I made a variable called a let's make a function here and let's run it right away so now what I've done is I've created what's called a child scope um I can now create variables b equals 2 and after I run Fu I'm going to try to console.log B and it's going to to say that's undefined because B was created in the scope of this function it wasn't created in the root scope up here uh let me kind of show you how that works um we got the parent scope up here and we've got the child scope in here and it works just like parents and children when you're talking about cookies uh if I go parent if I'm a parent and I go out and buy a box of cookies by default my child gets access to the cookies because they're in the pantry and they're my child now if my child saves up his hard earned money and buys his own cookies there is no way on heaven or hell that he is going to allow me access to his cookies they're his cookies he's the child but if I put him in the pantry uh Lord knows that he gets access to them because I'm the parent and he's the child that is exactly how variable access how scope Works in JavaScript and in most programming languages uh maybe if not all programming languages uh and so when I create a child variable the parent does not have access to it but I have access 2 a in here I can go console.log a and it will work so it's going to console log a which is one then I'm going to try to console log B and it's going to say B is not defined I have access to a but the parent scope does not have access to B um let me go ahead and now show you let's go variable a equals 2 so now when I console.log a it's going to console log to what I've just done is I have created what's called a name conflict or a scope conflict I have defined a variable in my child's scope that is the exact same name as a variable in my parent scope it's not illegal but all that's happened is is now I have two a variables in existence I have window a and I have a within this child scope so now I have broken the connection I have no way of accessing a outside of I have no way of accessing this a anymore uh unless I happen to know how to get to its parent object which which is window. a so I can console log window. a cuz this is defined on window um and then I can go console log a so it's going to console log one which is window a and it's going to console log two which is my current scope a so it's created what's called a naming conflict uh let me go ahead and do one more thing here and after I run Fu I'm going to console log the value of a so I am console logging a from the root scope and it's going to console.log one which is the value of a in my scope I ran Fu it created a new variable called a but it did not touch the a in my scope a is still the value of one I can console log a in here and it would be two but console logging a out here is one it's very interesting something you definitely need to keep note of if you're using the same words over and over again like my element or my name or my value uh if I take off the V here's what javascript's going to do it's going to first look in the scope that I'm in and say has a variable a been created yet so if I do variable a equals 1 up here a equals 2 down here means first thing I'm going to do is look in my scope and see if a has been created okay it has been created so now this a changes this a or points to this a so now this a will be changed to a value of two console log a will still console log one down here if I remove if this never took place a equals 2 it's going to look in my scope find out that a has not been defined so it's going to look in my parent scope and say ah there's an A A now points to this a so now if I save and refresh it console logs to and if I do V and save and refresh it console logs one because this one has not been touched so I can actually modify the contents of a in my parent scope if I don't do V if this a had not been created created then it would keep looking up to the parent scope and look up to another parent scope another parent scope till it got all the way to the window object and if there was no window. a wh my battery's about to die if there was no window a then it would create it for you right there and give it a value of two so now if I console log a a equals 2 and window. a has been created and equals 2 if you hear about polluting the root scope or trying to keep the root scope clean that's what that means if you forget to do V you just created a root scope variable that every Everything across your application has access to and you do not want to pollute the root scope it just creates for a messy application one way around it which I will not def I will not describe in detail is if you use the use strict then it prevents you from cluttering the root scope and now says a is not defined cuz I never did ver a on the root scope uh console log a a does not exist so you can look up more on what UST strict actually does so that is scoping in JavaScript that's variable access I guess I'll just give you one more example ver a equals 1 function Fu says ver a equals 2 and console logs a not console di console logs a and let's make another function and this will go a equal 3 three console log a so now what I'm going to do if I run Fu and if I run bar and then I console log a it's going to run Foo fu is going to create an A and console log it so that's going to console log two then if I run bar a equals 3 it's going to look up in my parent scope it's going to look in this scope no a exists going to look up in the parent scope which is my root scope and it's going to find that a equals 1 it's going to change that to three and then it's going to conso log a so this will conso log three and then we will just run a console login a and this will look in the scope that I'm in find this guy which has now been Chang to three oh my goodness I feel like I'm even confusing myself it's going to console log 2 three three so there you go that is scope in JavaScript let's get into context the real kicker the real thing where people blow up their code all the time