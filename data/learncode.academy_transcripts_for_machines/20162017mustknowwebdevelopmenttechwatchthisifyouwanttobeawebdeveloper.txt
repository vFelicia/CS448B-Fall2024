alright everybody if you are a web developer in 20162017 or you are learning web development 20162017 there's so much noise out there on what technologies out there what do I learn what's the best stuff to learn and so every year I try to really process through all year long if I was going to learn all over again today or if I was going to level up in an area what would I tell people to learn what would I tell people to choose as a level up technology to learn so that's what this video is it's one of my favorite videos all year long I guess it's probably my most popular video as well and hopefully you'll learn some great stuff so starting from the very beginning and then we'll go to front end then we'll go to back end what do you want to learn if you're a learning and growing web developer in 20162017 let's go ahead start as at the very beginning you're starting off you need to learn basic frontend web development and that really is HTML CSS and basic JavaScript you'll pick a text editor the best text editors out there these days are a DeMeo sublime text and brackets dot IO brackets is great for beginners I feel like these are a little bit better as you get more comfortable sublime text is the only one on here that charges I think it's worth it but atom is also great so you start off learning basic HTML and very quickly you'll start adding CSS into that because they're kind of handinhand interlinked and then you'll learn your JavaScript fundamentals you'll learn with JavaScript how do I change HTML and CSS on the page in real time let's say a user clicks a button I'm going to go change HTML and I want to change the CSS that's really where JavaScript is used in a basic level and I used to say hey learn jQuery but notice it's a different color now I've done this new thing this year where I've changed things to a different color if you don't really necessarily need to know them anymore so jQuery is this interesting thing there's this world of developers who are really good at the design element the HTML and the CSS and then they use jQuery plugins to do some functionality and that still is in existence that is still around people make fine salaries on that support their families there's kind of a salary cap you will hit but it for people really like the design side of things that might be where people want to stay and so it's a legitimate skill set to just know HTML and CSS really well and know jQuery really well however you don't really have to know this is the first year I'm saying you don't really have to know jQuery if you're not going to go into that niche so basically do the JavaScript fundamentals course got a link there everything that's blue is a link to videos I have out there for you do the JavaScript is weird an awesome course and then possibly do the jQuery course it's certainly not going to hurt you tons of companies still use jQuery so you've got basic frontend down you're now officially hireable in the industry so if you want to level up you're going to go become a fullon frontend developer which is this orange road we're going to want to come down here to this green road and become a backend developer no matter which route you take here's a couple things I want to point out that you want to learn along the way these haven't changed since last year but you'll basically want to learn how you set up a web host and FTP files on there this is what you learn at first as a very very beginner you'll use FTP it's the easiest way to get your HTML and CSS files onto your website and then you want to learn basic terminal usage everybody's terrified of the terminal at first because it's black and you use commands that you type instead of commands that you click from a menu that's once you get over that fear you're fine it's not hard to use then you use that terminal to use basic SSH and that will be the new and improved way that you get your files onto the server over FTP but again start with FTP if you're new it is much easier then go SSH and that basic SSH you learn will be allowed to teach you github you'll use SSH to get your files to github as well github is where professional developers keep their code it's a source code repository it gives you full history and you can revise back to any point in history and fix merges from other developers all sorts of stuff github is a phenomenal tool it's pretty much the standard for where professional developers keep their code and then you want to learn how the client server talk to each other somewhere along the road again don't have to learn it all right away I did two videos in a series that really helped explain things that took me about ten year to put together just kind of to really figure out some things that nobody really talks about to people who are learning web development and then you want to learn about restful Web Services basically get post put and delete requests how do you send information back and forth in a standard way from the client which is the web browser to the server so these are not languages these are not going to be as hard as learning CSS or JavaScript these are little tiny skills you learn along the way that may take you everywhere from a couple hours to a day so no I don't want to zoom a page all right so you've you're kind of on the process you let's say you want to become a frontend developer you slowly start learning those things on the list I just went through here's kind of your level up list if you want to level up from a basic frontend or you're already frontend developer here's kind of where things have settled in 2016 so 2015 ish towards the beginning of 2016 saw a lot of craziness in just react world and JavaScript frameworks it was nuts there was a new thing every day and there's been a lot of settling that's really happened so what kind of this is actually a lot shorter of a list than it used to be a year ago so I'm really happy to bring the changes this year I'm really excited about where it is basically you want to learn es6 20s 2015 they're the same thing I mean you'll use babel as a standard to transpile that into es5 code because you probably still want to transpile it to es5 code that's a great thing to learn it's not that hard it's really not a lot it's almost all syntax differences but those syntax differences make a huge huge impact on the way you code that makes it much more enjoyable I highly recommend you start using es6 on your projects and then CSS tools they really haven't changed you'll you want to learn pre compiler to compile your CSS down sass is pretty much the most popular lesson stylist or hanging in there that really hasn't changed CSS frameworks there's still tons of them out there but bootstrap and foundation remain the kind of primary ones you learn if you learn bootstrap learn foundation and you go to any other company using any other CSS framework you'll be fine and then you want to hand code your your own responsive design CSS which is what these frameworks do for you but you kind of want to know what they do for you so responsive design is when you change the size of your web browser window then the website automatically resizes for you and changes the look of the website to match a mobile device or to match an iPad so that's what responsive is that's where bootstrap and foundation will save you a lot of time and on to the JavaScript world this is really where the change has happened so it used to be you need to learn gulp and grunt as your tap as your task runners I'm changing those to an odd color you don't really need to learn those these days you may come across a company that uses them that hires you so they're not a bad thing to be familiar with but you don't really need to use those if I learn one I would learn gulp over grunt and then you really are going to do a lot of things with web pack these days or even just no js' on your actual machine nodejs NPM scripts are just fine to get the job done in most scenarios so I'm really not using a task runner anymore I'm using NPM scripts with web pack for pretty much all my projects browserify again don't really need to learn it it's a really kind of standardized around web pack in a lot a lot of ways you really don't need to learn yeoman or Bower anymore they're cool technologies they're fine yeoman is good if you're doing a whole lot of spinning up new projects in which case yeoman will help you boilerplate those projects out with one command so it still has a use it's just not as useful as it used to be since that's not a thing a lot of people end up doing so here's where a lot of the settling has really happened in 2016 and even in just the last few months of 2016 is in the JavaScript frameworks Department for those you guys who don't know what these are all about it's when you start writing single page applications which involve a lot of JavaScript just hundreds and hundreds and thousands of lines you really need a framework to help you organize that code and so there's really four that you should be familiar with react angular ember view if you're going to pick one hands down pick react that's just the one to pick right now I don't even think I'm going to offend that many people by saying it because it's kind of a standard thing learn react and then learn everything else and there's other great frameworks that could totally be on this list but I just want to keep a lot of the noise out of the way for you polymers out there still is doing fine irelia is a great newer one a ure Li a I believe very very cool but again it's not one of the ones that I'd say you need to have in the core of your tool belt so on the angular side of things angular 2 is kind of out and honestly a lot of people aren't happy with how angular 2 is kind of made this massive shift from angular 1 is it actually better so many devs I know still using angular 1 it's just kind of weird it's it's one of the reasons react is kind of the one to pick right now so just unusual things going on in the angular world these days and then ember is really really good for massive apps it's got a really big footprint to it but that's expected on a big app and then view Jay s is really great for smaller lighter apps but also react is good for smaller lighter react react is good for smaller lighter apps as well but these are kind of the four to learn now if you're in the react world there was a massive amount of noise over the last year just stuff changing every other week very confusing for a lot of people here's where some settling has happened if you're going to build a smaller application use react in mob X if you're going to build a really small thing with just a module either don't use react at all or just use vanilla react but mob X uses the observable pattern super easy it's the easiest way to get started with building out a react framework with data and you want to learn flux either way you'll want to learn flux because that's where a lot of these concepts for all these things kind of stemmed from they all kind of come from flux I have a tutorial series on that that will really break it down for you Redux is great for an application that's grown and has some complex data interactions readex will really solve a lot of that by creating one giant store where the data all sits in it and well the Redux course kind of talks about that and then if you have really large applications like you're going to build Gmail and react I would use relay for that graph QL is also a really great facebook technology that you can implement into most any of these but relay is where you go to for huge applications that have a long life cycle you're going to be maintaining them for a long time and then also if you're going to just spin up a react application create react app is a really easy way to just spin up a react application in no time so that's the react world hopefully that'll help you kind of site decipher all of that and then if you want to take on something fun and something a little wacky and crazy try closure script or Elm these are both the framework and the language closure script looks terrifying at first because it is based off of closure in elm is kind of its own language as well and so they are both based on this functional programming concept which is super awesome but they will really pull you out of your box if you're looking for something to really shake things up on the front end close your script or Elm and then unit testing hasn't really changed mocha Jasmine karma enzyme is great library to use with any of those if you're testing react enzyme is really kind of I think the best react testing framework and that's kind of frontend so if that freaked you out here's what you do you basically you're coming into the frontend developer stream as a basic HTML CSS developer learn how to precompile sass that won't take you hardly any time at all learn a CSS framework and then when you're confident with those things start to learn a JavaScript framework you don't learn them all pick react and then just start learning more every year that's kind of how it is you don't have to freak out seeing all this stuff you don't have to learn it all so let's go back end what do you do on the back end I want to be a backend developer well I try to clean this up a lot since this there is so much more going on in the backend so much more happening that I try to kind of group stuff for you there's scripting languages functional languages and highperformance compiled languages and you basically if you're looking for something to learn as a beginner to backend learn a scripting language pick one of these these are kind of the best entry point and they're kind of some of the most popular as far as jobs go so if I'm going to recommend one I'm going to say no js' for several reasons one you probably already know some JavaScript and nodejs is just awesome it's getting more and more popular all the time used by every size of company across the board so no js' is great and then I also put in parentheses kind of the frameworks that you'll use with these languages because this is the language and the parentheses are the frameworks the most popular ones to pick anything with an a caret to mark that little up caret mark that means it's a micro framework micro frameworks are kind of the easiest ones to start with they're much simpler so no js' Python Ruby and PHP are definitely the scripting languages to choose from and then if you're looking to level up if you're looking to challenge yourself stretch yourself don't pick a second scripting language pick something that's of a different paradigm either a functional language or more of a highperformance slash compiled world so if you know node already don't go and move over to Python go to something over here on the functional languages it will completely challenge and stretch the way you think about coding and development and engineering so that's kind of my two cents on that if you're looking for a way to level up pick something of a different paradigm if I were to take absolutely my picks I go no js' I go Haskell and I would go going or rust and then I kind of did the odd color on Java and csharp and I get a lot of flack for this hey why wouldn't you tell me to learn Java there's tons of Java jobs why wouldn't you tell me to learn csharp net I think that they're going to put you maybe into a world that's not very good for beginners if you're coming out of this world there's no issue with being in there but believe me after having so many friend developers who have been in the Java C sharp C sharp world it's very enterprising there's tons of opportunity in those areas but I would just encourage new people to go with scripting language then add something else on top of that that's kind of my two cents on there that's mostly experience and experience with other developers and the stuff that's the horror stories I have heard is what's kind of driving that recommendation so what do you do once you pick that language I want to learn language how do you actually kind of absorb that language and become good at it well first off here's kind of the things you want to learn in a language no matter what language you pick how do you test it how do you do unit and functional tests how do you build an API for it how do you RESTful API in nodejs or in Python how do you handle security authorization how do I do dot JSON web token JWT authentication in Python how do i do Oh auth and these are basically the questions you're going to ask yourself is there a common deployment platform for that you know if you're doing Ruby Capistrano is the most popular thing you use to deploy a ruby app or you use flightplan or something like that for no js' or fabric for python so how do you deploy this application is there any popular ORM in the language Oh RM is basically how you manage your objects and the way they will save and fetch from the database so it kind of gives you a code representation of the database is there a popular ORM for your data and then you'll want to just learn how to tie that into different databases now there are oh my goodness dozens and dozens of databases so many good for so many different reasons at the end of the day start with a relational database if you're not comfortable with them you want to learn my sequel first then learn how Postgres is has better features than my sequel lots of people still use my sequel because they don't need those features but learn a relational database first the next thing I would learn would be to learn Redis for sessions and caching learn how to cache your queries to a database in Redis and then you know have fun learning document or know sequel database MongoDB is still the most popular one even though a lot of people gripe about it Couchbase and rethink DB are super cool ones and then learn a search engine database elasticsearch or solar you know super cool learn how you know to use a database tuned for search engines and then you also want to learn caching you know how do I cash in nginx how do I cache in Apache if I'm using that how do I do a database level caching which is of course Redis right here or an inmemory cache even is useful sometimes so that's kind of back end that's the recommendations I have for the backend world in 2016 and then if you have been in backend for a long time you're really looking to challenge yourself look DevOps DevOps is how you do supercool workflows with backend let me see if I can get rid of how can I get rid of this just second here to move backend over and pull DevOps in okay there we go so DevOps here's kind of the things you want to learn there's there used to have a ton of web platforms up here and I'm just kind of standardizing around the four most popular digitalocean is great for practicing things you can spin up servers and spin them down in no time they're extremely cheap although if I was going to do anything on professional scale I would pick AWS personally as your in Rackspace also totally cool I'm pretty much if you're going to learn to learn digitalocean in AWS Heroku it's its own animal it gets expensive as you scale it it works really good for small projects it's it's just its own animal it's it's a good thing for everyone to look at at some point in time just to know their paradigm and then to try to recreate that experience with your other stuff and then docker is something you're absolutely going to want to know this is docker right here if you're going to learn one technology to expand your DevOps stuff learn docker if you don't know it if you know it a little bit learn it well docker is where stuff is going container izing and containerization is really where stuff is going in docker is the technology to learn in that field right now so if you want to do docker on a big scale enterprise level kubernetes is the one that over and over again just keeps coming up kubernetes is not going away anytime soon it's a great technology mezzos is another really good just platform for running docker stuff if you're doing smaller scale docker you can either use docker swarm or Dockers new 1.12 version has its own swarming capabilities that don't offer a lot but for small scale stuff will keep things extremely simple for you and then if you're looking for a good UI if you want to really manage docker with a great you know graphical user interface rancher's my favorite lovelovelove deploying docker apps with rancher docker cloud is a very similar Rancher as a service type of thing you basically you know you use the docker cloud service it's very similar to Rancher although I do think Rancher is much more feature full docker datacenter Universal control plane that's the same product or two pieces of one product that's kind of if you're looking to do a local enterprise installation although ranch are you install on your own hardware is well that's kind of what I like about Rancher a lot you install it on your own machines on your own infrastructure doctor datacenter is really kind of docker cloud with enterprise level features that you also run on your own hardware so that's kind of if you're going to look at anything in the docker world look at this set of stuff Dockers awesome I did just come out with an O'Reilly course on docker called realworld docker where I kind of really take you if you know the basic basics you can take the course and it'll take you through a lot of kind of the fundamentals of docker and you'll be comfortable moving into most to any of these things because you kind of know the fundamentals again it's called real world docker it's a course with O'Reilly publishers the animal book people and then you'll also want to learn continuous testing and deployment Jenkins is a continuous testing platform that runs on your own hardware and then there's stuff like semaphore CI circle CI code ship what else is out there Travis there's just so many CI places that will get realtime testing and deployment on your stuff it is definitely to me oldschool feeling to have to run a deployment command to get your code to production merge it to master have it go to production as soon as you merge to master merge it to a staging branch to get it on staging let's see I take care of the rest of that for you if I had to take my pick semaphore CI is extremely fast you can get a build a test a deployment out in like 30 seconds semaphore is extremely fast extremely simple to use circle CIN code ship are also great so these are kind of my favorites these days vagrants I gave this the odd color because you really don't need to know vagrant anymore docker is really in my opinion the replacement for vagrant it's a good thing to be aware of in case you were to come across a legacy application that used vagrant but I think docker is the thing to learn and then if you do a 111 any kind of enterprise level configuration management learn ansible docker and of course you got to know linux to do that salt chef puppet I've made those the odd color because that type of thing is not as much where things are going everything's going containerization and docker is your provisioning server management configuration management for most situations so that's kind of the 20162017 web world in a nutshell that's what you got that's what you want to learn I hope you enjoyed this feel free to comment with any questions I'll try to answer everything I can especially during the first weeks of this video being live and have yourself a great web development year