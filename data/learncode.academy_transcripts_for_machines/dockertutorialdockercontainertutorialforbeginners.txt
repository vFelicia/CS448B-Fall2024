okay we're going to have some fun with Docker right now so we are going to spin up a Docker server and then we are going to run a web server application on it so first off I'm on digital ocean let's go a and create a droplet that we can use um this will be Docker test and let's get the cheapest one um if you've not used digital lotion it's a lot of fun and it's a cheap way to explore Docker um in a destroyable way um I'm going to go to Applications and I'm going to click on Docker so it's basically a buntu but it has docker preinstall um it's really easy to install Docker on a buntu but anyway that's easy enough add my SSH key and go um so there you go that's creating uh while that's creating let me show you some commands and once again I have a link for $10 of digital ocean credit that is a referral link that's down there in the description so if you want free credit to play around you can use that while that's going let me show you the docker commands that we're going to use today these are the basic commands if you look at all of them there's a lot and it can be little daunting but the the basic commands are pretty simple there's Docker run which will take any image it will create a new container from the image and then it will start that container um which is different from Docker start Docker start starts an existing container that is not running right now so when a container is run with Docker run you can stop it Docker stop give it a name or an ID and it'll stop it then if you want to restart that container again Docker starts will restart that container so if you were to run Docker run four times times you're going to create four new containers from that image um just important to know because that confuses a lot of new people Docker PS gives you a list of all your running containers if you do PS flag a then it's going to include all your stopped containers which is very useful because sometimes you want to see how many containers you've accidentally created over time and then Docker RM will remove a container delete a container by name or ID okay so that is probably created yeah sure why not let's go snatch that IP address out and I'm going to add an Etsy hosts um entry just to make it simple let's let's call it Docker domme so now Docker do me is my new Docker machine um and I can SSH root doer. me and do that on a second tab as well over here I might not need a second tag tab but yeah I'll do it okay so we are logged into our Docker uh virtual machine and you can see that I have the docker command yep there's all your Docker commands yep a little bit daunting so the first thing you want to do is Docker login um and Docker login will allow you to either create a new account or login with existing credentials on dockerhub now you can change this to point to qu. or some other Docker repository or maybe you have a private repository but by default it's going to be Docker Docker Hub I I've already logged in so I'm good to go so there we go let's clear that out so once you're logged in you can now run containers any public container that's been released just kind of like think of it as a GitHub repository so I can go Docker run um and then there's a company called tutm or tum that has this hello world that's just basically a hello world web app let's say this is my fullblown web application I've built it and I've put it up to the docker Hub repository I can now run it on any machine we will get into how to build this in the next tutorial but I feel like it's a lot easier on Docker to learn by just running existing containers so if I say Docker run the first thing it's going to do is it's going to pull all the layers um that it needs to run that and kind of this is one of the reasons I recommend using digital ocean because this is pretty fast they have a really great internet connection um or any VPS server for that matter um so all these layers are basically the changes that they've made on top of the file on top of the docker file system so maybe this layer right here was installing Apache maybe this layer here was adding a few files to the file system maybe this layer was configuring the Box a little bit so my box is running right now if I go over to my other window and I go Docker PS you'll see that I've got a container that is running right now it's got this ID um let me Zoom down a little bit cuz that seems kind of crunched up and now of course my screen's acting we okay here's my container ID um here's the image that it's running from uh that's the command that it ran and you can see that it's exposing Port 80 um and then it's got a name of tender Hawking um so let me go to Docker domme Port 80 and this will not work Docker me Port 80 does not work the reason that does not work is because it's exposing a port into the docker Damon but the docker Damon is not exposing that Port out to the rest of the world um and so if you want to expose a port you actually have to run it differently let me go Docker I can actually do like a contrl c over here um let me run that again Docker run and this time I'm going to give it a port to expose out to let's say 80 80 is 80 so I'm going to map the containers Port of 80 out to my server my web servers Port of 8080 so now I can access it and that's a great feature for Docker and the reason they do this is say you want to run five copies of your one web application well that web application exposes say Port 80 or Port 3000 but we want to run that as four different ports because we want to run different copies of it so it makes a lot of sense um that you have that that feature so there we go let's run it again and as you know from before I hit run so now I have two containers that I've created on my machine so let's go Docker me 8080 and there you go hello world I'm now seeing my Docker web application um let's go back here and you see that I'm seeing some logs um that everything's coming through and now let me go ahead contrl C and stop that so if I go Docker PS flag a I've created two copies of this uh of this web server so let me go ahead and I can let me just go a and delete both of these now I'm going to copy this container ID Docker RM kill you Docker RM kill you so now PSA I have no containers created no containers running so let's say in a standard scenario I'm going to run say four copies of my container and I'm going to load balance between them so I could do something like this Docker run um I'm going to give this one a name web one so I can refer to it by name Port you'll be 80 81 coming from Port 80 inside of to slash hello world I should just pronounce it differently every time I say it so there we go that one's going to run and I'm also going to run you as a Damon I'm going to do flag d uh which runs it in the background so you've noticed here I've got this run command with flag D flag name flag P that's the most daunting thing about Docker to me when I was learning this a while back is lots of flags it feels like is is there going to be an endless amount of flags here cuz honestly most command line applications you have one flag maybe two Docker you can have up to four or five and so if you if you in your mind just tell yourself hey going to be a lot of flags I just got to deal with it um then you'll be fine after a couple days there's only so many flags so let's run the exact same thing Web Two is going to be port 8082 and web 3 is going to be port 8083 and we'll stop with three webs so now if I go Docker PS I've got three three web instances running web one web 2 web 3 I can get to it Port 8081 Port 8082 Port 8083 and you notice each one of these has a different host name uh which is a Docker ID in this case so that's kind of cool um now I could add an engine X instance that would load balance between these three um and it would look to these different ports uh I could do a lot of different cool things I can also now start and stop them by name so Docker stop web 3 and now that's not going if I go Docker PS I only have two running if I go Docker ps a I've got three in existence but it exited a while ago so now I can start web 3 again Docker start web 3 so that's kind of the basics of Docker and in the next video let's get into running or building our first Docker application building our first image so we can push it up to the repository and run it from anywhere