okay our flux circle is almost complete we have a dispatcher that's dispatching actions to anyone that listens in this case that's our todos store and then our todo Store updates itself accordingly and dispatches a change event which components can listen to if they want to now this see may seem like a few too many steps just for a todo app but what we've done is we've created this setup to where as our app grows in complexity up to hundreds and thousands of different types of actions our stores only listen to the actions they care about they don't have to change our components only listen to the stores they care about and only fire off a handful of actions the ones that they need to so we've got this highly decoupled framework that's always going to rerender all the time and it's just really really stable flux apps are very very stable so all we need to do to finish this circle up is add in our actions and that's actually the simplest part uh let's go and just create an actions folder actions there we go and let's create a new file inside of there which all be our todos actions our todo actions JS so all we need to do in an action is we just have to dispatch something so let's import our dispatcher import our dispatcher and let's start exporting some stuff you could export an object like that you could do export defaults and then you could do stuff off this chain create Todo is going to be a function so you could export a uh object literal like that but the es6 way that's a little cleaner is going to be export create Todo just Define them like this so that way they'll automatically get a name and then if you create a todo with text we're simply going to dispatch and an event or an action we're going to dispatch this event and we're going to pass in the text that's it we've got our create Todo action um and so let's go ahead and maybe make a second one delete todo which we won't use right now and that'll have an ID and this one will be delete Todo and we're just going to pass in the ID so now we have two methods on that let's go to our todos component because you remember todos the component cares about the stores and the actions that's all it's connected to so let's go to our todos component here and let's import the actions we've already got the store in there and let's go Imports there we go todo actions are in and let's make a button that simply always creates a new todo so let's go ahead and make a button here create and then on click we're going to go this do creat too find this let's go ahead and make that now create Todo and then let's just always create something with a random Tim stamp so in this case oh I need actually we're going to import these Star as to do actions so that way we're basically going to import every single export and it's going to be just like we did in object literal you're going to end up with an object if you remember from our todo's actions if you import Star as todo's actions then you're going to end up with an object that looks like this you've got your create todo function and then you've got your delete todo function so that's what the import Star has it's a nice clean way of defining your functions it's a nice clean way of importing them all so now we have to do is go to do actions create to do and let's just pass in let's just go date now again so it'll be just a random timestamp string every time we hit that button let's go back to our page and let's click on that button there we go you can see every time I click it it's adding a new one to the list yippee and that new one will also have a random ID which will be pretty much the same thing so now we've created our actions and the circle is complete it's extremely simple for our todos list to handle things we could easily uh make this an input and whenever the button clicks we're going to grab the value out of the input and we're going to create it to do with that title as well very very simple we've made the actions in the next video let's look at how do we handle asynchronous actions like say when I click this button I want to load todos from my backend API and then I want to spit them out we're going to get into that in the next video