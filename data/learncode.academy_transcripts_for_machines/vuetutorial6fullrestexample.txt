now that we can fetch our friends from our restful api let's go ahead and add some more code so we can actually edit those friends delete those friends and learn some more about view along the way so the first thing we'll do it'll probably the easiest let's go and delete a friend now so instead of just spinning out the friend's name let's go ahead and actually had a button as well with an X on it and while we click that button we want to delete a friend we're going to delete friend and we can actually do is we can actually pass in that friend's ID which is going to be super helpful so we can delete that friend so let's go and make a method so we're going to delete that friend by ID we can use this fetch API just the same we're going to fetch friends / this time plus ID so we're gonna send a delete request to view five friends ID and we're gonna also pass over some headers and some more information here so let's actually the method will be delete and that's about all we need to pass and we're just sending a delete request over this object here with the second argument in the fetch API is configuration so we can pass in a method we can pass in headers and all that we won't need to parse that response at all basically we're just going to delete our friend and then console.log deleted so let's see load up our friends yep and delete it so he didn't go off the list we'll address this in a second but if i refresh will is now gone and if i refresh willis is now gone excellent so that made it pretty easy so let's go ahead and also we want to delete them from our friends list by index so let's say we have a friend here let me go ahead and post some friends back here we're going to want to actually pull them out of friends list when that delete is successful and we can easily do this by just splicing them out of that array so we'll splice out either 0 1 or 2 so what we can do is in this repeater we can just do comma I and we'll also get the I variable which is the index of that friend we can pass that in that makes it super easy to do we have their index and their ID I can just go this dot friends splice that and we're just gonna splice one person out and since it's all reactive when we splice that person out of the array the whole components going to reload and it's going to be super easy William gone willis gone william gone and if i refresh yep my friends are gone if I reload this endpoint yep my friends are gone so now that's working all we have to do is an edit feature and our friends adarand editor is 100% complete so an edit is going to be a slightly different scenario we're probably going to want an edit mode here to wear for editing we see an input field and a button to save and if we're not editing then we just see their name as is right now view gives us some directives that make that kind of logic really easy the V if and the VL so I can go a div here V if so if we're editing I'll address that in a minute then we display what's in that div the else then will display the I'm not editing mode so let's say if let's make something up here called edit friend edit friend up there so if edit friend equals friend ID so for editing our current friend's ID then we're going to display this stuff in here so we can do an input friend name and then a Save button and we'll make this V on click update friend we'll just passing the whole friend so if we're going to update a friend that'll be how we do it let's go ahead and now make an update friend method so if we want to update our friend this will actually be a put request we're gonna actually pass some information over so we need headers we're going to send over the application JSON content type and then we're also going to need some data so we're going to need to put over a request body which will be just our friend that's been json stringify so there we go our fetch requests got a little bit more complicated we are going to send a put request to friend plus ID and we're going to send over our friend's information and then we're also going to send over the content type that should be just fine and when that's done we're gonna say hey we're no longer attending our friend so we're no longer editing any friends one more thing we're going to need down here is we're going to need an edit button let's go ahead and make an edit button and there's no need to create a method and call a method we're just gonna go edit friend equals this or friend ID so we're just going to really quickly just run some logic right there in that button when you click on it edit friend equals friend ID let's check to make sure that works edit yep that goes into edit mode and that switches that it mode out nice let's go change it to will I am save it uhoh ID is not defined let's go check that out I know what I did wrong there there's no such thing as ID here I need to call it friend dot ID because I'm actually passing in the entire friend object there we should be good now let's check it out edit save it and it looks like it worked let's refresh and see if it worked it worked excellent so we can now delete friends we can edit friends that all we need to do is learn how to create friends before I do that it's getting a little annoying to have to click this button I want to be able to do a key press that button click is so circa 2005 so let's go ahead say V on key up and you can automatically do dot 13 here which is super awesome so key press 13 is obviously the enter key so whenever the enter key gets it update friend and now I can simply hit enter when I'm updating friends much much nicer so that's really easy view just makes things simple it just makes them fast little things like this dot 13 make it really easy to just get your job done and get home early in the day so all we need to do now is just make the ability to create a friend we simply would do a post request instead of a put request to that exact same endpoint but I'll leave that out of here cuz that's just information you don't need at this point have fun that's your homework add in here the ability to create a friend yourself and that's how easy it is to work with dynamic data in view