all right we're going to be learning GitHub branching merging and pull requests today if you're new to GitHub which I'm assuming you are CU you're learning this lesson definitely check out video one in the description if you haven't checked it out yet it's really going to be of help uh let's get into basically this is level two and it's about it for what you need to know to use GitHub day and and day out uh one of the common things that you use all the time with GitHub is branching and with that is if you picture a tree you've got the trunk and once you create a branch a branch comes out you'd make code changes on that branch and then you can merge that Branch back in with a trunk it becomes a part of the trunk and everybody else's branches can inherit from it but it's easier to show you than to tell you so let's just get into it ficticious example here we have an HTML page with one module on it and you get a work request to add module number two there's other people on the team you're not the only one so what you're you're going to do is you're going to create a branch for module 2 you're going to build it on that and you're going to create a pull request for other people to code review it but you don't know what those things are yet so let's just show you first thing you're going to do is you're going to do a get poll make sure you get the most recent version of Master we're on the master Branch right now I can see that because I'm using what's called bashet I'm going to add that to uh the description as well because you'll really like using that uh but do this command real quick and do get Branch you'll see I have one branch which is Master that's where all the code is sitting right now so if I go get Branch feature one let's say I'm adding feature one and then I hit get Branch again now I have feature one this is a complete copy of all my code from the master Branch so whatever Branch you're on at the time you type get Branch it will create a copy of that and call it whatever your new one is so now I have a complete copy of Master called feature one and now I can switch to it by going get checkouts feature one so now you'll notice I'm on feature one again you won't see this unless you're using bashet but now I can make code changes on feature one and it's not going to affect anything going on on master um so what I'm going to do is my work request is to do two things it's to delete these two items and it's to add a new module and so I'm just going to go div my awesome new module about news sure there we go module 2 is added Bingo and so now I'm going to get add I'll do get status so yep that's all I changed get add a to add all my changes get commit am to say added news module and ideally if I knew in advance that it was called the news module this would not have been called feature one it would have been called news module or news module Edition Branch so uh that way it makes more sense if you see the branches you don't just see feature one well who knows what feature one is um the branch for news module so now if I go get Branch there we go um I'm ready to create a p request now which pull request pushes your code up to GitHub for other people to see your changes and peer review them other people on the team uh possibly a team lead if you're new uh and it's a very common practice for uh companies to require a on your team to review every pull request that you make so you guys are kind of keeping each other accountable one thing you want to do before you create your pull request is you want to go back to the master Branch or whatever Branch you're merging this into um because you can have a branch of a branch of a branch of a branch we're going to go get get checkout master and we're going to do a poll to make sure that Master has not changed in the let's say 3 hours that we've been working on this and yep there were some changes it updated so let's go back to our feature now check out feature one man my brain is just not typing right today happens sometimes I'm going to get merge Master what this is going to do is it's going to take all the changes updates to master and it's going to try to merge them back into feature one branch it says there was a conflict on there merge fail which means that somewhere along the line somebody else touched the same lines that we are touching so I'm going to click on my file and yep you see that there's some conflicts here head wi is me ah you know what happened it sometimes is a little tricky to figure out what's going on here it says that I added this within module two and they added this with within module 2 which means we both added these exact same two lines but these ones were different so they tried to add a module two and I tried to add a module two so let's do this now I actually have to just kind of rewrite my code so there's I'm going to call there's module two sometimes it's a little tricky to figure out what happened in an actual ah can't do that there you go module three sometimes a little tricky to figure out what actually happens when you see all those merge conflicts I was able to just determine that okay we both tried to add a module two so it's saying there's no problems here that your lines are identical these ones is what's not making sense so there we go got that done I'm going to go get status again okay now was both modified now I hit get commit and if you'll remember from my last video whenever it shows you these big long commit messages you go escape colon WQ and that's going to save and commit your commit I know that's weird Escape colon WQ uh but that's what it is and now I can do get push and depending on what your push settings are on my M it warns me that it doesn't know where to push it to so it gives me the command push and set Upstream to origin feature one so now feature one has been pushed up to GitHub and if I go to GitHub I can see that there's actually and refresh I can see there's actually two GitHub branches here master and feature one feature one's got the new modules and if I go to master master has the new module that the other guy added that's another way you can figure out what the heck is going on if you actually go to GitHub look at the master branch and see what they are expecting the code to look like uh module 2 div my content that will help you in uh whenever you're dealing with merge conflicts I do that a lot if a merge conflict just doesn't make sense I'm going to look at master and see what they committed to master before it started causing problems so I'm on feature one again you'll notice that GitHub gives you this nice thing your recently pushed branch is feature one so I'm going you can either click there or in this case I'll just go to feature one and click this little green button that says compare review or pull request and so now it just shows in green the things I've changed I can create a pull request and you can add any comments there hey at somebody can you please check this out you can do it just like Twitter hey can you check this out send pull request um and there you go now I've got a pull request I can see what two commits went in I did an ADD and I did a merge the merge counted as a commit and then then you can have some conversation back and forth and then somebody can merge this for you it's usually a bad idea to merge your own po request but I can hit merge and confirm and there you go now it is into master so now if I go to master click on index I've got my modules two and three there because my feature was in and I should have when I was on the pull request deleted the branch cuz I don't know some people will like to delete branches so I can go and delete that Branch so now if I go back to master here and do a poll there you go I've got all three modules and I'm on the master Branch so that's the whole workflow you may have to watch this two or three times to get a feel but this is what you do day in and day out you get a feature request make a branch for it code in your feature commit it and then put it back up uh merge Master back into it and then push that up and make a pull request that pull request gets code reviewed gets merges one more thing that might not be bad to point out is is that if you have a pull request out there you can add more merges to it let me make another uh Branch here I'll just call this one news there you go let me make one change I don't know delete that stuff there you go so I'm just uh basically just doing some stuff here once again I like for whatever reason I like this git setting where it always makes me choose what branch it's going to lots of people that drives them nuts okay what I just did is I made a new feature made some changes committed those changes pushed him up I did not bother uh merging Master back in so now if I go back to wilster dummy test I can go to the news Branch let's make a pull request go on his news sure let's say somebody else looks at it says um ah there's some extra white space in there that you also need to delete you get an email that somebody wants you to clean up the white space yeah I guess I can clean up that white space so I saw his email I'm going to clean this code out save that and I'm going to do another push and you'll see that I'm going to have a second commit there you go gone is news remove whitespace you can add commits to your poll requests after you've made them so that's kind of how the back and forth dialogue goes uh you'll delete some stuff you can also go to these commits uh the files changed you can actually it would have been better if the guy would have commented on the actual line and so that's kind of how the dialogue takes place back and forth and then the pull requests are closed the branches are gone and master keeps living on there's the video hope you liked it and have a great day