in this video we're gonna use view components to break up our application into logical components that can also be reused throughout our application so in this case we're looking at this friend's logic here it really doesn't deserve to be on the application level the very top application level this really can be broken out into a separate friends module or in this case view would call it a separate friends component so let's go up here and ideally this would be in a different file but we can go view component and we can define a new component in this case we'll just call it friend and then it can get an object which is realistically almost identical to this view application object that we're creating here it can have a template let's give it a template it can have its own filters and its own methods so now what I'm gonna do is I'm gonna go ahead and take these filters out of here and I'm gonna put them up into our friend components since they really this is logic that has to do only with our friend our friend component and same with these methods there so actually I can completely remove those altogether and I can also remove all of this this is stuff that has to do with a single friend so all this information in the template here has to do with a single friend I'm going to do a single div here and then add all of that information wrapped inside of that single div so that is our friend component now all we have to do is instead of rendering an h2 for each friend we can render a friend and this name comes from the component name so when you register a component by name we can then spit that component out on any page as an HTML tag so then for each friend in our list we are going to spit out a friend now this will not work and the reason this will not work is this because it's not receiving any data if I look here my console you can see we have no prop friend nothing's defined here so we have to say I'm going to expect some data to be passed in here and this is called props I'm going to get a friend object because as you can see in here we're expecting friend age friend full name basically we're expecting an object called friend and then we can V bind this friend and it gets the value a friend so we're essentially saying take this item here called friend and let's pass it in and we will call it friend in our component so there we go that's coming in and now everything should work it would work if I had a comma right there there we go you can see everything works and everything upgrades we can change that to Bob change that to Johnny and now everything's completely abstracted this friend could be in a completely different file out there and our application would now look like this we have our main level application with our main level data only and then we're gonna spit out child components that get the data that relates to them passed down in and that's kind of the basis for how you would build an application in View you create a bunch of components register them all and then you can inject them as if they were HTML elements so it's extremely simple to work with view components and just to make completely certain where these names are coming from I'm gonna call this friend components and now it actually changed this to friend components so that's that name there and if we were to call this V item in friends then we would pass item in and we're binding that as if the component the component receives the value of item and the component receives that as the value called friend if that makes sense so this will still work everything is still good and so that's kind of where all those names are getting related to so that's how you use components to break up your view j/s application