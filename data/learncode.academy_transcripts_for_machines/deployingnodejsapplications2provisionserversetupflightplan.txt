so we are deploying this node.js app that I've spun up into production we're going to be doing an automated deployment on it so we can run one command and deploy to as many servers as we have if our application is huge and has 10 servers we can run one command and it'll send them off to all 10 so uh I've used digital ocean to spin up a server called test node app if you did not if you do not know about digital ocean and you didn't catch my first video go ahead and catch that now it's in the description and if you don't know about SSH you want to watch my SSH video that is also in the description and that will get you up to speed with what we're about to be doing so we've got an email here that's created our computer Force there's the IP address and there's our password so let's go ahead and SSH root at IP address let me grab that password I already logged in just so you know so it will ask you to change your password the first time you log in um and I've already changed my password so let's say I've logged in I've changed my password so now what we are going to do is we are going to install node that's already installed because I spun up a digital ocean image that has node installed so let's go ahead and install forever forever is going to be our node package that actually runs our app mpm install G forever there we go forever's installing and then once that's done the next thing we're going to do is add a user uh a deploy user there you go forever's installed let's create a deploy user so if you look at this I have for you it's got all the commands that I'm going to be running I've got this gist right here in the description and I've got a link uh I've got a link to how to create a deploy user so let's go ahead and just copy and paste this you can look at those commands later on and see what they actually are it's just going to ask for that user's new password there we go my user is updated there's now a deploy user who has pseudo Powers so you can kind of do some pseudo things you don't really want to do things as root it's a good idea to have a user that at least has you can apply restrictions to so now we can ssh in as this user so let me go exits we're going to SSH deploy at that IP address so we're going to log in as that user and we are going to Now set up password list SSH uh so that way that user can log in with an ID with an SSH key instead so the steps for doing that as you can see here we're going to make a directory for SSH and get out mkd r. SSH okay let's exit there we go I'm out um and now we have to do is copy our RSA key into the authorized keys so I'm assuming you already have an ID RSA key and now we are just going to copy that if you have it by a different name you'll want to change that I'm just going to copy that to oops I kept url.com it's not at url.com because I have an IP address here deploy at my IP address it will ask for my password I've copied the key over and now I can ssh in and it will not ask for a password there we go I'm in awesome so now almost done all we need to do is automate our deployment we already have a user setup who has uh permissions and so let's go ahead and audited made our deployment the tool we're going to be using for this is called Flight Plan it's a node.js library so it really kind of will feel very familiar if you're familiar with node.js Capistrano is also a great Tool uh it's a little more full featured which means it's a little more complicated to set up but you get more features out of it uh but flight plan is great for a lot of scenarios so we're going to install flight plan so we are on our machine right now we're just going to go npm install G flight plan that gives us the fly command everywhere on the machine there we go and then we are in our application right now we are going to install fly locally in mpm install and we're going to do save Dev fly just so you guys know too I'm popping in and out of my terminal because I'm using ierm 2 so I can hotkey in and out which is very nice so now you'll notice the reason I did save Dev that Dev flag uh for those you guys who don't know is it adds it to Dev dependencies instead of dependencies so when I push my repository to production I can just run npm install production and it will only install these guys whereas if I run npm install it will install the dev dependencies as well really all that does is it just speeds up my deployment a little bit if you have 10 Dev dependencies like Gulp and stuff then your deployment on production doesn't install any of those it makes it just a little bit faster you can install it here it doesn't really matter it's not going to blow anything up so flight plan is installed so now I can hit fly and it's going to say there's no flight plan. JS so all I need to do now is add a flight plan. JS file let's touch that there we go so now it's created and let's copy in so now I'm going to copy and paste this flight plan. JS code that I have for you in my gist it's a slight tweak on what they provide for you by default uh that's set up for forever so there we go that's my flight plan. JS here's what you're going to do you're going to give it an app name which you can make whatever you want this determines the folder that it deploys your app to the username which we made a user called deploy and then whatever your start file is so we run bin www to start our app some people call it server J server.js then the only other configuration you're going to do is you're going to set up your IP addresses for your staging and production servers so let me grab that IP address there's my IP address and that's my production server if you had a staging server you could also set that up so we could deploy to staging first and then deploy to production once that's successful and you can set this up as an object or you can set it up as an array and you can add multiple servers so when you do fly production it will deploy to I don't know 10 or 20 of these servers if you want I just have one right now so that's I have and that's it so now I can just run fly production and it will deploy to my production server fry fly production there we go it's sending it sending it over running my app with forever and we are good so now I can go to my IP address and I can go to Port 3000 and check it out there's my node application all I need to do at this point is buy a domain name and point it to this IP address and I'm good so that's basically how you deploy um and if I need to redeploy I just run fly production again or fly staging to run to the staging servers and it's done so let me show you kind of under the hood what this is doing for us what what fly is actually doing what flight plane is doing so when you run it the first thing it does is it gets all the files to copy it runs this command on your machine it runs all the local ones first so if you have like a gulp build or a grump a grunt build you can uncomment that and it will run that first and then it will do run get LS files and what that does is that gets a list of all the files that would be checked into your git repository so it will ignore node modules it will ignore anything that's in your git ignore file I can even show you what this command does uh G LS files it shows you right there there's all my files and they're full URLs so that's kind of nice um and then it copies all those files with one r sync command you can see what that rsync command is here it's a big old messy command that it does for you so it R syncs them all in and then it runs npm install production um it moves them to attempt directory runs npm install production and then it makes a Sim link uh to the application name folder which I'll show you what that is that doesn't probably doesn't make sense and then it stops your application with forever and then it restarts your application with forever let's go log into our server SSH deploy there we go and let me show you what I got here so we see that I have node app that's a folder and then I have two different folders for my two deployment so I have history of all my deployments and this is actually a Sim link so it deploys your deployment to a folder given gives it the Tim stamp that's a time stamp right there and then it says it makes a Sim link node app now points to this folder so if I were to make a new deployment it would create my new folder put all my new code in there and then it would change the Sim link so th node app points to here so then if I go CD space node app it thinks I'm in node app but I'm really in my deployment folder because it's a shortcut it's a Sim link and then it runs my my command which is forever starts um and then whatever I've set you know bin www and that's what flight plan's doing for you behind the scenes uh that's pretty much how you do an enjoyable deployment to any kind of environment you want we call these environments staging environment production environment and now we'll go into the next video where I'll show you how to enhance this uh by running our node app as a service and that will make it an even stronger deployment strategy