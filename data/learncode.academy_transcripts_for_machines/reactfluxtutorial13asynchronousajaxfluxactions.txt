one of the first questions you'll get when people are learning flux is with actions well this seems great for all these synchronous actions that happen inside of the application how do I handle asynchronous actions like let's say I want to load data from another page and then create an action when that's done that actually is a lot simpler than it may seem at first let's change this I've got this web app here with a create button that just creates a Tim stamp to do um you see every time I hit create create it creates a new one so let's change this button to load or reload let's say that's going to actually reload todos reload todos and we'll go todo actions reload todos and we don't really need to pass it any information so now we just need to create this reload Tod action so reload Tod do is would normally do something like say you know it's going to call axios or you know jQuery ajax if you're using that still um axios and we're just going to get some URL some url.com some data end point okay so it's going to do that and then data it's going to have all of our data here so we want this to kind of notify my app when all the data comes through how do we do that uh to fake this I can just use a set timeout and really all you do is you just dispatch multiple events so we're going to go dispatcher when we first start loading our event I'm going to say fetching or fetch todos so I'm going to fire off a fetch todos event just in case anybody cares about that maybe there's a loader that's going to start loading uh maybe my todos is going to listen to that and change todos this state. loading to true so then we can now spit out a loader on the page um like I said maybe maybe I can listen to more than uh just the todo store change event maybe I can listen to something else um so we're going to start off by firing a fetch todos event and then we're going to go ahead and start our Ajax operation which I'll just pretend by doing a set timeout and let's say a second later which is a long time but it helps to visually see it second later we've got our data awesome uh so now we just dispatch a second event type is receive Tod do and let me say there's some data in here so this will come with some data um maybe that you know Ajax returned some data for us let me go to that todo store and kind of snatch this out and we'll make this thing receive some new todos after one second so a second after you hit the button it's going to pull in some other mumbo jumbo let's create some fake IDs here and we're going to go shopping again we're going to hug your wife not your wife hug your own wife um and let's say that that one's true um because we should do that often good husband uh so there we go so we're going to dispatch the event that we fetched our todos and then we're going to fetch our other event when we receive todos let's say there was some sort of problem if something goes wrong then you can actually dispatch a receive todo's error and this will be like uh what goes wrong or fetch todo's error probably makes more sense so we didn't receive anything fetch todo's error so we could respond to the fetch todo error uh let's go and load this up todos save it all so again I'm going to hit this reload button and when reload button fires we're going to call todo actions reload todos at the very beginning we're going to fire fetch todos we're going to dispatch that and then one second later when we've loaded them up we're going to fire receive todos now the store doesn't have a receive todos method yet so we need to do something uh when receive todos comes through so receive todos we're going to rece reive todos and you could actually just go this todos I'll just hack this in here this todos equals action todos I think that's what I called it didn't I type I didn't give it a name there we go so I'm dispatching a type of receive todos and a todos value will be the array of new todos so there we go if you're if we're receiving todo let's just wipe the whole thing and let's fire this dot emit change got to make sure we emit that change so our component knows to update no errors that's good reload and a second later we've got new todos let's try that again let's refresh our page so we've got go shopping and pay water bill if you reload goes to the server and a second later we've got our updated todos so that's how you handle your async operations in flux