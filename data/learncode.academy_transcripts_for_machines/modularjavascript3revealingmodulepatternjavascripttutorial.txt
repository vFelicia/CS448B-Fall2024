so in the last video we covered modular js with the object literal pattern so once again that's that's called a design pattern that's kind of a way that you code and once again that was an object literal and again that's just making an object people equals an object and objects have properties name and then say name alerts will there we go and so one of the things that we don't like let's say we had set name and whenever the name got set we wanted to render the method so we had some rule that whenever this dot name equals a new name whenever this dot name equals the name we always want it to render at the same time so it's really bad if someone who doesn't maybe you're providing a library to be used as a thirdparty piece of software people shouldn't have access to this because you never want them to just automatically change people.name and just go i don't know what that's all about you never want them to go people.name equals bob because then it's not going to render bob is now just changed but nothing happened so they don't know how your program works they should only have access to say say name and set name they shouldn't be able to change this and so this is not necessarily always the pattern that you want to use there's also what's called a revealing module pattern so in this case instead of being an object it's actually a selfexecuting anonymous function and so for those you guys who are concerned or may have seen this before and and don't quite understand what that means i know i used this for i'd say a year when i started javascript but i never really understood exactly how it did what it did or what it was so let me take a slight little tangent and show you i can go ver a equals one and then i can go a dot to string and that's going to give me the string representation of my number one so that works but i cannot go 1.2 string that's going to fail because 1 is still just a number at this point it has not been evaluated when you say var a equals 1 1 gets evaluated it says oh ok that's a number type it actually gets converted into a number type and number types have methods i can go a dot see it's got two fixed to string to precision it's got all these methods to it now i can do this i can do in parentheses 1.2 string and so when you put in a parenthesis it forces javascript to evaluate it first and then treat it as the evaluated thing so this is basically doing the same thing it's just not getting assigned to a variable so this is going to work and i'm going to get 1. so same thing applies to a function i can create a function here say alert but i can't run it i can't run it right away because it's not been evaluated i can however wrap it in parentheses and now it gets evaluated and it's a function and then i can execute it and it alerts so that's basically all we're doing we're just writing out a function we're wrapping in parentheses here so that way it gets evaluated and then we can execute it right away we can even pass it variables i could say will and then up here i could receive a name and do something with my name in here so that's kind of cool we can actually pass this brand new function some variables so that's what that is if you're a little newer to that and you're not exactly sure what's going on and another cool thing happens is we create our own scope so i could go over name in here equals will and nobody outside of my function can access that i can't alert name this will fail because it's within the scope of this function it's not a global variable i could even have if i did very name equals bob up here then alerting name would alert bob even if i've already run this because their name inside of this function is will their name out here globally is bob so what that gives us the ability to do is create what are called private variables variables that only exist in our scope here any function inside of here can access it so if i have a function that says say name let's go function say name equal what am i doing and that alert name well that's going to have access to will so that alert will and right now if i run this this function is not returning anything so people won't have a value but what i can do is i can return an object and that could have a value of say name and then i just have to pass i don't know say name so i'm passing say name in as say name so i could also say i could call this say your name and it's still just gonna fire your say name um so let's go ahead and do this let me copy this let's just paste this straight in there we go there's my object literal and that's going to alert name why did that do that yeah because i don't want you go away let's just copy this in straight into my console and now i can go people let's look at what people is people is an object and it's got one thing on it i can run say name so i can go people. say name and that's going to alert will i cannot go people.what name equals will change that to bob it's going to say uh well it's going to set it but it's going to set it so now name equals bob but that's not the same as a variable that just added bob onto this object which doesn't do anything so name is still private name is still accessible if i run people.say name again it still says will awesome so will is really untouchable the only thing that can touch it is the function that i allow to be exposed so this is the revealing module pattern so let's kind of show you this people adder in a revealing module pattern i went ahead and coded it out for you vera people equals this function so with inside of this function i can now kind of do much more of that vanilla javascript kind of style i don't have to do all this i don't have to do all the methods that you saw previously i can go where people equals this and then i also don't need an init function this is my init function so it's automatically going to do anything i want it to do this executes right away so i just want to maybe add a comment just to kind of add my own separation of concerns here let's cache the dom let's bind some events and then let's render and then i'm going to create all my methods here and then i'm going to expose the ones that i want to expose out into people so you notice i have three functions i have render i have add person i have delete person uh but i'm not exposing render out i'm just exposing add person delete person so let's go ahead and save this let's restart this what did i call that i called it people okay still people so people let's see what i got i've got ad person and i've got delete person right pretty cool um so let's go ahead and do add person again let's let's do that thing there was one problem i had before so let's say i have value and let's say the name equals if value is type of string that's uh let's do it like this if i passed in a string then i want to use value as the name otherwise i'm going to get it out of the input the reason i have to do this is this is going to be an event if you click this button right here then it's going to listen to the button click and it's going to call ad person and there's going to be that click event right here so i don't always want to use the value i only want to use the value as the name if the str if if a string was passed in because if it's a javascript event then that's going to be an object if it came from up here if i'm firing add person from up here this will be an object so i don't always want to use that i only want to use that if it's a string so if i passed in a string then we'll use that as the name we'll use value otherwise we'll actually get the value out of the input and then we'll just push name there we go so now my api i should be able to go people.add person test there you go now i can add a personal i want i should be able to add a person here as well excellent so i should also be able to go people.delete person except for i don't know how to delete a person so let's just say that's an event um if event let's do the let's do this go there veri if event type of event equals a number if it's a number then i equals events else we have to get that eye by doing the index let's hope you watched the last video you have no idea what's going on there we go then we're going to splice it out and we're i gonna remove it so that's what's gonna go on there that should work as well so now i should have a public method for delete person let's delete person one nice steve is gone let's see if this one still works will is gone excellent so i should be able to add some people let's add test add test two let's delete person one let's delete person zero excellent so now we kind of have this api going on we can't control the rendering we can't mess with this people array but we do have control over exposing an ad person and a delete person function what's kind of cool is we can keep these internal methods whatever we want to call them here's a very common thing is if something's private if it's internal you'll see an underscore there so let me go find everywhere that render is called and give it an underscore underscore usually means it's private we're we're storing this internally we're never exposing it uh so that's kind of an uh an indicator that this is not ever going anywhere we use it and then these are the ones that actually get used out that'll still work make sure i didn't blow anything up yep we're good so i'll just put the code up there in codepen and let you look at this and that's a revealing module pattern and so then if we have some other module that other module can consume it as an api it can talk to person.ad person person.delete person and it can't blow anything up it's a safe module