hey there so in some upcoming videos I'm going to be showing some node server Administration we're going to set up an engine X load balancer um we're going to deploy some nodejs applications into the wild uh but to do that you got to be comfortable with SSH um and so this video is going to kind of cover that if you're comfortable with SSH this video is not really for you uh but a lot of devs have not really gone further than GitHub when it comes to SSH so this video is going to get into it and show you how fun and uh just powerful it is so basically SSH just opens up a secure shell to another machine usually it's going to be a Linux machine uh and it just basically gets you into the terminal of that machine so I can go SSH will which is my username at um superc cars.com which is a fake uh machine but uh that I've created but basically superc cars.com is going to point to an IP address of an actual real machine sitting somewhere uh so if I SSH into that I'm basically logging into that machine as the will User it's going to ask for my password um and there you go I'm now will at supercars so I'm actually on that machine um logged into the will user directory uh so I can do everything on this machine just as if I was actually there um I can install things let's say git is not currently installed so I can do pseudo appg install get um apt git is basically linux's npm or node package manager or Homebrew it allows you to install programs from the command line um so I can just do this and now get is installed so I can now let me find a gist I can now get clone there you go I can now clone a gist that I wrote the other day and there we go I have uh get repository on my machine so it's actually great for deployments if you want to clone your directory and pull your master branch and this is your actual web server there you go let's say you want to install MySQL PHP whatever uh you're on the machine you can configure and administrate your machine um all through SSH it's really great um you can also copy files um using rsync so let me show you what I have here I exited by the way exit is the command to get out of you'll notice when I hit exit I left that machine and I'm back on my machine now which has my kind of custom bash script here um so you can use rsync let me show you I have these three files in my directory um and I can rsync uh AV is the one and by the way all these commands I'm going to put them in a gist uh and put it in the description so I don't just show you a bunch of stuff and then leave you hanging but I can rsync AV dot is my current directory so I'm going to do all the files in this directory will atup cars.com and then colon because I'm going to actually give it a path to do that I'm going to go home directory slne app it's going to ask for my password that's kind of annoying I'm going to show you how to do password list um SSH here in a second but you see I created the directory home will new app and I copied all these files there let's actually ssh in and see if that did it and need's my password again there we go we have new app so I can go CD space new app and do directory listing and there you go there's my files so that's kind of actually a quick and dirty way to do it a deployment if you want to you can just rsync all your files straight to your server and now your web server is updated with your new files it sure beats FTP it's pretty dirty it'd be better to actually do push it to a GitHub repo log in and do a poll from that repo or even better use a deployment software like Capistrano which we'll get into in the future uh in some videos there's definitely better deployment strategy but R sync sure beats uh FTP um let me actually RM I'm going to delete main.css here let's get out and I'm going to rsync again and then you'll notice all it did was copy main.css because rsync is actually going to sync up it's going to find out what it needs to do it's only going to move the files it needs to move the files that were changed once again super beats FTP so if you're looking for a quick and dirty deployment there you go uh just rsync that thing uh but we'll get into better things later on let's show you real quick how to do a password list SSH uh you probably had to do this when you got setup on GitHub is you had to make an SSH key um what a key pair is is you've got your public key and you've got your private key when you generate it it will create both like say you Cate create a key called ID RSA which is standard um it's going to do ID RSA which is your private key and it's going to do ID RSA Pub you're going to copy the contents of this to the server and the pub and you're going to move it to the authorized Keys file and then the server knows that this ID RSA key is accepted in place of a password so this is the one you want to protect with your life uh because anybody with this file can access your server that has this file installed so what we're going to do is we're going to install this right here onto our server and then anytime we have this key we can connect without a password uh so to do that we just go to our user folder and go to SSH directory if that's not there you're going to have to create it um and then whoops I just made one called SSH without the dot so you're going to make a directory called SSH which it says um it's already there so um and then if you don't see an ID RSA file which I just deleted mine you're going to want to generate one that's easy SSH key gen and then the only thing you're going to want to do is capital c and you're going to want to give it a comment that kind of differentiates it to you usually just do your email address there we go um and then it's going to say you want to make it this file ID RSA sure hit enter uh passphrase I'm going to do no passphrase so if I hit LS now I have ID RSA and IDs a.ub you're going to open this and you're going to copy the contents to your clipboard or if you want to do it the quick way you can go cat ID rs. Pub pipe PB copy so I'm going to copy that to my clipboard and now I'm going to SSH will at superc cars.com again I'm getting tired of type in my password so now we are going to go into my SSH folder it doesn't exist so I'm going to actually make it and then I'm going to get into it and I'm going to use Nano which is kind of like a command line text editor there's Nano emac and Vim which are kind of the three popular ones my favorite is vim although it's the most complicated uh Nano is the easiest so if you're not used to it use Nano I'm going to Nano a file called authorized unor Keys uh which it may already exist if it already exists this will open it if it doesn't exist Nano will create it I can now paste in my key Contents I can exit and I can save um which by the way let me show you what I was doing here I did crl X to exit one thing that's nice about Nano is it gives you like kind of a menu at the bottom uh crl X and then y to save and it says hit enter yep so now if I hit LS I have a file called authorized keys and in that is my ID RSA Pub you can add 30 different keys if you want so 30 different people can all s H into your uh machine without a password I can now hit exit and now let me go back to my folder that I was in code sandbox I think it was just SSH there we go so now let me pull up that rsync command again there we go and now it does not ask for a password I can also go SSH will at superc cars.com and it didn't ask for a password so now I can create Like A bash script that did 50 different things on my server and it wouldn't need a password for it I could run one command that runs the script and it does this whole server script so when you've seen bash scripting that's pretty much a lot of times along the lines of the things you're looking at doing uh but that's pretty much ssh in a nutshell it allows you to securely connect to another server run some commands on it administrate that server um and in the next video we're going to show you how to create your own Linux server on your machine using vagrant uh and virtual box and so you can mess with and get to know server Administration better without blowing up your actual live web server or someone else's live web server so let's get into that next video which is on vagrant