in this video we're going to start coding in redux now redux is extremely extremely simple what gets complicated about redux is when you start looking at all the pieces moving in say an example that you find on github some example code somewhere it actually looks very very complicated because it's hard to figure out what is actually making the thing work so we're going to start with really simple examples you're going to see the beautiful simplicity of redux and then we'll build out all the extra pieces to that full working example and you'll understand how everything works so i am in the source code repo that i have on github i'll put the link in the description and i'm in the for redux folder which at this point is a copy paste of the one basic react folder it's just a simple welcome and you can kind of change that title to whatever you want hello world so now let's go ahead and just install redux which i've already done so this will just kind of flip by quickly or it will do it all over again and now we can run npm run dev which will give us that dev server on localhost 8080. okay so i'm just going to open this client.js and we're going to scrap it all we're not going to use this application at all i'm actually just going to use the developer tools because we're just going to console log we're not going to use react at all because redux is not actually a part of react or plugin to react redux is its own way of managing application state you can use it on any application it just happens to work awesome with react because react is very functional and we'll see why that is in a little bit so we just have to import one thing to get rolling and that's create store from redux there you go create stores imported and to start up a redux store you really just need one thing you need a reducer so let's just make a generic function right now function there we go so we have a reducer function we'll fill that in a minute and now we can create our store create store and then all you need to do is pass it that reducer and then you give it any kind of initial state so we can just say the initial state is zero we'll just make this do an increment for now so our initial state is not an object i mean normally that would be an object that has all the values of your actual application state but for now we'll keep it really simple and just make it an integer so there we go that's our redux bootstrapping process you need a reducer you need a store and now we can listen to this store so we can subscribe and we'll just make a little function here so when anything changes to the store we can console.log hey store changed and then we can console log the store's current state there we go so when anything changes on the store we're just going to drop a little console log there and you see if i go ahead and save there i don't have any logs at all and then i can actually dispatch events to that store as well so store dispatch let's say our type will be increment and payload i will increment it by one there you go let's hit save you can see that the store changed and there's really no state nothing happened the state is undefined that's because it ran through the reducer and the reducer receives two things it receives the state and then it also receives an action and then whatever returns is the new state for the store so in this case we returned undefined so nothing happened if we return foo then the state will always be food no matter what action happens there you go store changed and the value is fuel so the reducer basically gets to change that state we make changes to this state based off of what the action tells us to do so to make this really simple we can just go if action dot type equals inc well then we're just gonna do something state equals state plus one and that will actually just return state plus one otherwise let's just return state so now we go store changed and the value is one let's do a few more increments here and you'll see store change one two three four awesome now we can add a decrement decrement there we go and then we could do this exact same thing if action type equals d e c let's return state minus one so there you go one two three four three and that is redux in a nutshell now obviously you don't want your state to be just this and we can actually do some more with this action let's say we want to increment this payload by one and let's increment it by two and then it's coming down by 22 let's increment it by a thousand then we can actually do state plus action.payload and state minus action.payload way we're actually using that payload there you go so it goes from one to three to 25 26 negative 974 it's completely unopinionated with what you pass in and how you pass it in with the exception of type so i can change type here to be command so i'm calling the command now an action.command and that's not going to work so the action does have to have a type value given to it now i could change payload to be anything else this could be value and that's still going to work or i could call it a number and that's going to work so you can completely change the other values in here you can pass two or three values in but as a standard you want to call it payload and if you have more than one value to pass into a payload then you just pass in an object instead of just a single value say a payload might have four or five different pieces of information to it then you still probably just want to pass in a payload and give it an object that's a standard way of doing things so there you go that's redux you create a reducer you create a store and then whenever you dispatch events the reducer or multiple reducers act upon that store so let's go ahead and take this thing a step further and let's combine multiple reducers into one so we can actually break these up into files that make sense