in this video we're going to move beyond a single component and we're going to build an entire layout made completely of react components so our client js really shouldn't and doesn't need to have our layout in it so let's go ahead and cut that out of the picture our first step is we're going to make it into its own component so i'm going to make a new folder in the js directory called components and in that components i'm going to make a new file paste that in and let's save this as layout.js and i'm actually going to capitalize it because as a standard rule of thumb you always want components to have a capital letter be capitalized again import react i don't need react dom and there we go let's go full screen for this so now i have my layout all i have to do is export my class that i've created so i can require it now into client js components layout and now this rest will work as intended i can probably clean up that space there don't need it anymore so now i've got importing layout i'm exporting layout let's save and make sure it still works yep everything still works as expected great so let's go ahead and create the rest of our page now so we have our layout and then let's go and create a header and a footer i'm going to go ahead and just save this as header.js there we go we have our header js so i'm going to change this name to header and we'll get rid of this whole constructor function and will return a header tag i'll just leave that there for now excellent that's in place let's go ahead and import that into our layout i'll get rid of this constructor mess as well and we're returning our one div we're printing header again it's capitalized and i can use it straight there in the html because it's a component components can render anywhere in the html that you want you can see i've got header going and again the reason we capitalize components as a standard is because they're a constructor the header is not a rendered dom element yet it's a it has the capacity to render out a dom element whenever we print it so i could do this and this and this and it's going to render out three completely different elements later on we'll get into showing you how you can pass unique details and information into each one of these and make them actually render into three different looking headers another option you have if you want to render multiple versions of something is i could call this a list i could do an array and i could make it an array of three dom elements which is very useful for something like a list full of lis and then i could just go list and jsx is smart enough to know that that is an array of three components so let's render each one as components so that's what you would do if say your main was an unordered list and each one of these was an li of sorts then that would be the way you'd want to handle that and each one could get passed in its own specific information so let's just go ahead and undo some undoing here to where we just have a header there we go now let's make our footer i'm just going to go ahead and save header as footer will be the footer tag and now my layout can import footer as well see i'm always having to run through the alphabet in my head to figure out which comes first you always want to keep those alphabetized we can print our header and our footer see what we got should render out excellent we're good to go and then you could create a body and so forth so this is kind of a standard layout here sometimes people will do a pages folder that has all of our very very toplevel components which in this case would be layout and then components would be everything that lives with inside of a page so that's an option you can have your layout living components or you could have a separate pages folder or sometimes that would be called routes and then inside of these like i said is your top level components and then if a component has a component within it standard ways you'll probably want to just create a new folder so let's say this header actually has a title in it let's go ahead and create a new folder we're going to call it header so any component within the header component is going to go into here i know that was mouthful so we'll put you in there and call you title so here's my title js we're going to call it title and we're going to return an h1 so there's my title and my header will now import that title and use it and it'll simply print title so now i should have a welcome that's a header with a title h1 inside of it and there's my footer let's go ahead and just look real quickly at the dom that was created from that here's my app and then there's an h1 getting printed and there's a footer getting printed so even though header is returning the title there's no extra dom elements that get added unless i want to wrap a div in there now there will be a div inside that's my header component and then that's my header div and that's how it all works out so i hope you enjoyed this lesson now let's get into some of the more meaty uh meat and potatoes portion of react and that's passing values into components there's multiple ways of doing it there's right ways and there's wrong ways so this is one of the next pieces that you really want to get right if you want to learn react properly so we'll get into data and passing around data in the next video