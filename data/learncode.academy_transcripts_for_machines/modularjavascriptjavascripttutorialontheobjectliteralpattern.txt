this video I'm going to cover modular JS so I made this really tiny little thing it's like a people name Adder I can go will and then I can add Jack and then I can add I don't know Frank and then I can also delete these people from my module so that's really all this thing does so we're going to be getting into kind of how you code modular JS let me show you what I wrote out now I call this spaghetti code so we're going to use jQuery as an example because you know many many JavaScript developers know jQuery um and so this is what I call Spaghetti code it basically plops out the function required to make the thing work uh we have two core actions going on when I click on the button then it's going to add the person to the list and then when I click on the delete button uh it's going to delete the person from the list uh but it's really it's really a mess for a lot of reasons so I'm going to kind of get into some concepts of what modular JavaScript looks like why you want to do it um and really the people that need to learn modular programming are kind of those developers that are sitting at this breaking point of I can make jQuery work I can code this um but I don't you don't necessarily think like a software developer so as soon as you start getting into large applications what what I'm looking for when I'm hiring a developer to work on a large application is someone who knows how to break up their code into logical components components that do one thing do it well how to have the components work together um and then CU that's really what working with a framework like backbone or angular is is all your pieces of code are in their own components doing their own things so what I'm going to show you today is kind of an in between step between just plunking out jQuery and using a framework like backbone or angular to start getting you thinking in terms of components uh separate pieces of functionality so let me go over some ground rules real quick on what a modular or what a JS module should be for one it's a selfcontained module uh so everything to do with my module is in my module so in this case my module will be this part of a web page if a web page has 20 different things on it this people Adder will be my module um there's going to be no Global variables see there's a problem with this JavaScript right here is that I have ver people and ver template so if any other module on the page also has a template they can't call it template uh because their code will break this code that's terrible terrible and it also if you have a huge JavaScript application you can't have a bunch of global things it's actually going to slow down your performance uh so no Global variables that's just kind of a given you really should never have any Global variables maybe one for your whole application that you share but that's about it um and then if a module manage is more than one thing it should be split up uh right now we have a module that manages people so there's this people Adder thing once again and then that's about it so I can keep this all in one module now if each person had more functionality like if I could edit this name or maybe I don't know send this a person an email from here then this each individual person should also be its own module but for now I can just do one module for this I'll explain a little bit more of that later on um separation of concerns in our code uh one terrible thing about this is every piece of code is doing every kind of task we're searching the Dom here uh we're binding a function to that we're binding a listener to that element and then we're searching here for another element and we're binding another listener in here we are updating our HTML with you know uh a new person and then down here we're actually removing something from our HTML there's just stuff all over the place it's just not very separated code at first this looks kind of simple uh but it the more you get into it your more it's really frustrating I can't exactly just quickly glance at this and know what's going on and I'll show you why once we modularize it um dry code don't repeat yourself uh you should never there's a lot repeating going on here I'm searching the Dom for people module a lot for one that's not very efficient I shouldn't have to search my HTML file for ID of people module but one time and I'm doing it here I'm doing it every time there's a click this function runs and I search for people module again and again and again that's terrible terrible um it's very slow JavaScript you're not going to notice it when it's just one thing on your page when you don't have a JavaScript application but as your application grow grows that is terrible practice um and so we're going to want to do what's called Dom caching which brings us to efficient Dom usage we want very few of these dollar selections we want very few of those we want to see some more find action going on but we ideally just want one of these per module um the Dom element which we can totally do this is my module which I'll get into the HTML a little later um I should be able to snatch this whole piece of code out by ID and then I don't ever have to search my dom again for this ID I can look within this for all the HTML I need so I just want to see kind of maybe one of those per module maybe a second one if you have a good reason for it but really just one of them um very few dollar selections and I want no memory leaks um I want all events which this is an event right here a click event we're binding this function to that event I want that to be able to be Unbound so what happens if we're on a single page module a single page application this is really where it comes into play is if you're on a single page application you can navigate to four or five different pages without ever actually navigating up here it's called a single page app um then this people thing actually has to go away for a time and then it has to come back it has to go away and it has to come back um and whenever it goes away I want all these events to go away with it otherwise I'm going to end up with a memory leak as long as there's an event bound to this people module even if the people module disappears it's not not going to take it out of memory because it says hey you still have something listening to it so I'm not going to take it out of memory and that's where you'll get a memory leak so the more someone uses your application say it's something like Gmail where you never navigate away but you might go to an email and then back to an email list and then to another email back to an email list if you have a memory leak even something as simple as one event listener that never goes away uh then it can keep piling up on top of itself for every email you've seen um and eventually your browser runs out of memory and crashes or gets very slow or your whole computer starts running slow so that's kind of what a memory leak is we'll get into that in a little bit as well so these are some ground rules um let's just actually start covering what is actual modular programming look like uh so let me just kind of comment out this code real quick uh the basis of modular programming we're going to be using a uh an object literal uh for this one it's a object literal pattern I'm going to actually put a link to an ebook from admani that's really good that covers a lot of design patterns lots of times it's just an object literal pattern um and all that is that's just you're using an object so we could call this my module equals and there's my object and then you can add values to this I could go name my name is Will age 34 and then I could put say name and this would be a function so it's called a method um um a function that lives on an object is called a method so this is the say name method and I could just go alert this.name and this refers to my module uh since this is the object that it's sitting on so that will alert will so now I have to do is go my module. say name there you go and so now if I save and refresh it shouts will excellent so I could do another thing to here I could go set name and then that would go uh this.name equals let's see new name so I could say set name give it a new name now this do name equals new name so that's kind of how a module works and so now you can see this whole will thing is now living on one object so I could go my module set name uh let's set it to Willis and then I'll say my name so it's just going to say Willis and so I have I have access to my module here do set name uh me oops I actually changed my frame on accident let's go back to that top frame I have ad block Pro running so let's go my module set name me my module say name and now it's going to say me so that's kind of how a module Works um and the methods that you expose to other modules the things that allow other modules to do actions are called um your API So currently my API has two methods it has say name and it has set name so that's kind of what I have here I'm using say name and I'm using set name now with the object literal pattern everything is accessible so I could actually hack this and just go my module. name equals me or I guess I could change it back to Will and then I could say name and it's going to say will that's really not the way you should interact with the module you should use methods that are provided for you and then in another pattern uh the revealing module pattern we're actually going to be able to hide some of these things away to where nobody else can access them only the module itself can access them so that's kind of the modular pattern uh so we'll end this video for now because you might need to rewatch it kind of get some of the concepts kind of understand what I'm talking about and then in the next video we're going to actually convert this spaghetti code into a beautiful little module