okay so i now have two revealing modules on my page i've got this people module right here and then i've got a stats module up here in the top now let me show you that stats module i basically i'm just exposing one method um that's a set people and so that's right here here's my api for that set people set people will fire set people and so basically you send it an amount of people and it's going to set that amount and then it's going to render and render is going to take that people value and it's going to spit it out on the page as you see here which is awesome so now this module automatically updates let me show you back in my people module here which is what we built in the last stats video set people so whenever we render whenever this module renders here i'm going to call stats.set people with the people length so which right now is zero let's add a test that's automatically one test one so now these are talking to each other great so this works very well but it doesn't scale to a large degree so if you have four five six modules on a page you're probably going to be good but what happens if you now let's say there's 10 modules that all need to know when people get added to this list so you have stats maybe say you have a header thing that's going to update and you have a footer let's say you know let's say there's 12 other things i'll delete those for now and you know let's say some other developer wrote headers so it's not called set people it's called uh update count and then this one's called something else change basically the problem of this pattern is is not only the is there now a lot of repeated code but this module this people module this guy right here this guy has to be aware of every other module that depends on it and it also has to be aware of their api so i've got to know that the header module needs to know when i render and the header module needs update count to be called and maybe update count is going to be called differently too maybe it's going to be called like that that's no good so now i'm basically just having to keep this huge list of stuff in my people module there should be a better way i should be able to fire off one command here and then every other module that depends on me automatically updates and i don't have to keep track of that it's called coupling if you picture railroad cars with their couplers on them basically the way we have it here is this is tightly coupled to all the other modules i have to know that they exist i have to know that they want to be updated when i render and i have to know how to tell them that i've updated so that's a bad pattern for a larger application so we're going to use the pub sub pattern to kind of scale this application a little cleaner let me kind of show you in visual terms what we have right now so this is using revealing module patterns to talk to each other my module let's call this people and then let's say this is my stats module my my people module updates so it has to tell the stats module hey i updated and then it also has to tell this guy hey i updated and then asked to tell this guy hey i updated now let's say the stats module let's say this module 3 here can also change the account of people so then i can actually say hey people change your account add a person okay that's fine and then he's got to go tell stats and then maybe module 4 also wants to know when stats are changed so then he's got to listen here and then this guy talks to here like it gets pretty messy pretty fast and i'm only doing adding people to a list there's no other events going on that's messy and pub sub will clean that up for us so with pub sub we have this like central guy and if you think of dom events like i have this button right here and when i click on it there is a click event that fires as many modules as we want to can subscribe to that click event and the button doesn't know the button doesn't care the button just sends off a click event all the other modules receive a click event because the dom the document object model handles all those events for them so we're now going to create a pub sub sometimes that's called a mediator some people use mediator to mean different things sometimes that's just called an events bus or an events system so that's what we're creating right here pub sub mediator events and can i stretch nope now that copied it okay so now this module will just send a changed event boom i'll send a changed event uh and anyone else that's listening for that changed event will receive that changed event so he's listening let's say he's listening i'm listening to that change event too people changed okay cool i'll update and then oh i'm listening to to that changed event awesome i will update as well so all these guys are going to update and all this guy did was send a change event so that can look something more like this let's delete that it will look more like pub sub dot emit sometimes it's called an emit or a publish let's publish people change and let's send it the list of the amount people.length there we go so now that's all the people tell you what let's actually just send off people in general so somebody else can count the length if they need to know about the length people changed and then i'm sending them all the people great that's it and then i want in my stats module to be able to subscribe to that event so let's go uh pub sub dot i'm going subscribe to people change and then i want set people to fire so i want set people to fire whenever people have changed excellent now i can actually completely remove my api and we'll move off of that so let's go and look at this pub sub now let's see what this pub sub actually looks like here's a the bare minimum pub sub that i wrote right now i wrote an events object i prefer events uh kind of the classical way is you have publish your module is a pub sub module and you can do pub sub dot subscribe you can do pub sub dot unsubscribe and you can do pub sub dot publish so that's where you get the name pub sub from you're subscribing and you're publishing your pub subbing but i kind of prefer terminology of events so my it's my events thing and you do events.on events.off and events.emit so that's kind of my preferred way of doing it feels a little bit more like the dom so events dot on and i can on to an event uh people changed when people change i want to run some handler some method uh and then you can publ you can trigger or emit are kind of the two ways i like to call it so events.trigger people change three people now or emit which is kind of angular's terminology for that an event emitter so here's the simple way of building it i'll i'll put this code up there and you can copy and paste this code but basically you have an events object that's currently empty because there are no events created by default and whenever you subscribe uh it basically takes that event name and it's gonna say oh if it doesn't if it doesn't exist let's go ahead and create that array so let's say someone down here subscribes let's say somebody does events dot on people again let's do people changed and we want some handler to fire so then this will say oh people change doesn't exist so let's create people change and let's make it just a blank array so no events yet and then it's going to push our function that we received which is some handler so now some handler gets added on there so let's say someone else subscribes to people changed as well uh somebody else this is going on in some other module they're gonna say when people changed let's do some other handler some other function okay well that's gonna get pushed on there and then when somebody emits let's say module number four down here goes events.emit people change let's say it just gives it a value of three the mid is simple if that event already exists let's do a 4 each let's loop through every item in that array and let's call that function with the data they gave us so the data in this case is the number 3. so we're going to fire some handler 3 we're gonna fire some other handler three and that's basically how that works so you can just copy and paste this code right here if you want an event emitter on your page and then you have an events module so let's go ahead and put this to some use here are we good we delete everything yes okay let's go back to our page pull up our console events.on let's just call it activate on activate let's just create a function here data and this will just alert the data great so now i can trigger that or emit let's submit that with three so now it alerts three cool let's uh go ahead and add another listener to it on activate we want to also console.log that data and let's emit there so it's going to alert 3 and then it's going to console log3 so this function fired first and then this function fired second so that's basically how that works and then you can also unsubscribe to where only one event is going on at that point so let's go ahead i'm going to stop this i'm going to put this code online so you can use it if you want there's also some great pub sub libraries out there if you were just to search javascript pub sub library or javascript events library they're ones that might have a lot more complex features so maybe you could subscribe to a namespaced event somebody could go events.on you know people and that will be all people changes will fire this function and then events dot on people.change so their name spaced so that way on peoplechange this will still fire because it's namespaced on any kind of people event this will fire and then this one will only fire on people.change so there's some other ones where you know you could people.change first and then that would be some first change handler so this guy would fire on any people change event this guy would only find on a people.change.first event and this guy would fire on any event from the people module so there are other libraries out there that add more features but this one works totally fine for most use cases let's go ahead and take this in the next video and incorporate it into our modular power revealing modules that we've been building