so next.js has been around for a while now and it's gotten really mature and it really should be the default go to react tool of choice if you're going to use react in any kind of web environment and i say that with a pretty strong opinion like that because it's true if i was going to build a social media network today i'd use next.js for the front end if i was going to build a large massive 20 000 page site like cnn.com that had to be server side rendered to have great seo i would use next.js maybe with headless wordpress or something in the back end if i was going to build a single page app i'd absolutely use next.js there's very few use cases i can even think of where i would not want to use nexjs if i'm using react so we're going to cover next.js in a way that that covers really what you're getting out of it and why i've noticed a lot of people still default to create react app and they're slowing themselves down they're getting less production readiness out of going that route and i think just causing more developer frustration so let's get into next js and and why i like it so much and how fast it is to get great things accomplished in next js so the first thing you got to do is you have to to install next react and react dom so let's do that great now that that's done we need to do a little bit of convention we're going to add a pages folder and i normally don't like products and tools that use convention over configuration i think it's a frustrating developer experience if you're not used to that tool and don't use it all day day in and day out but next js has so little convention and abstracts away just so much misery with that little convention that it really is a winwin it's it's the best way to go about it so one of the conventions is make a pages folder for your pages to go in so i'm going to add an index in here this will be my home page which is by default index.js which you would be assumed i'm also going to make a products page and so let's go ahead and start up our dev server which you get by running next dev you can also run next build and next start for a production environment but we're going to do dev for now so npx next dev and we have a server running on local host 3000 now so let's go there and you can say that hey we don't have a react component in index basically my index.js is a react component so all i have to do is add a react component here you can see that it automatically refreshed for me because i have hot reloading out of the box i can add exclamation marks hit save and everything just refreshes phenomenally so there we go i have my index page let's copy this over to a products page and now i can go to slash products and also get high so that's basically you've got this routing built in you don't really have to think about routing i can also use the routing so i can go let's go use router and import use router so i can actually now explicitly use this router and say hey what's the router query so you see there's no query there but if i go and foo equals bar then i automatically have foo bar and name equals will so you can automatically get your query params in there and you can also add params to the actual url path so make this a little bigger here you can see that i've got fubar and name equals will but i could also make products go products one two three or uh nine eight nine eight nine eight so that's going to be a url param like what you would use in express.js we can also do that let me go and create a product page and i'm going to just do brackets here i'm going to say productslash.id and then that's automatically visual studio code is going to make a folder called product my file name is actually called id.js and i can take this exact same thing here and you'll see that my router query if i go to product slash 123 it has id of one two three in there because that id right there is gonna get translated so you can instantly have your routes with your query set up uh it's really really great now for navigating back and forth between all these pages i could definitely use a tags in react standard html a tags but next also gives you this next link tag which gives you a lot of really cool prefetching magic right out of the box so i'm going to do a tag here let's import link from next slash link and i'm going to set up a link tag over to the products page so now if i go back home i've got my products tag here i can go back and forth you don't really see too much magic going on but what it's actually doing what next.js is doing behind the scenes is it's prefetching any link tags that are in the viewport so whenever a link scrolls into view it's going to prefetch that component which it does not automatically fetch and then when the user clicks on the link it automatically loads that page into view single page app no page refresh happens although it does update the url and the user gets a really really zippy experience let's go ahead and actually uh test this proof of concept here i'm going to write a console log outside of my react component so right this is going to log when this javascript code is loaded into the browser whether the home page is rendered or not i'm going to say hey home was loaded let's go and pull up my console here you see that it says that home was loaded and i'm going gonna also copy this into the products page and i'm gonna say products loaded all right i'm gonna refresh you see that home was loaded but products was not loaded so it did not do any prefetching because i'm in dev mode devmo does not do that let me go ahead and do npx builds and mpx next build and npx next start so i'm going to build and start i'm running in production mode now and we're going to see something pretty cool let's go to refresh my home page you can see that home was loaded and products was loaded because the products link is in the viewport and now i'm instantly going to see you can see there's zero latency at all it's just rendering the products page right there in the view we're not navigating and refreshing any pages and so if you want to you can actually change this and turn prefetch to false is by default true let's go ahead cancel my next and restart my next server let me go back to home and you can see that when i refresh home is loaded products did not load because prefetch is false but when i hover tada products is loaded just the act of hovering over it next js is going to prefetch the page that the user is about to click on and now we still have an instant render of that page when we click on it so a lot of cool stuff is going on there with next js also if i right click and view the page source here you can see that server side rendering is baked in that html link that we have going here right there nope where is it there we are that html a tag is prerendered so so the page is serverside prerendered and then bootstrapped automatically you don't have to do anything to have universal javascript ssr or whatever you want to call it out of the box so that's a really really great feature that you do nothing to get a very common thing is that you want to add environment variables to your application so you do that very simply by adding in dot n dot local file and then you can say things like uh i don't know api url that's something that's very common some url.com right so there's there's my api url now that i've added those environment variables or that environment variable i just have to stop and restart my dev server and it will pick up on that new and vocal you can see there we go load of the environment variables from dot n local and i can come over here and prove that we are automatically getting our environment variables let's go ahead and hit save let's load my page you can say hey console logged api url is some url.com but over here in the browser that was not defined one of the cool builtin features is that will only expose environment variables to the client that you choose to expose to the client this first render run happened on the server to render the page that got returned in the html response and then after it gets bootstrapped and it runs in the browser for the first time this environment variable is not defined we haven't exposed it yet all you have to do to expose it is simply say next public api url that was easy and then we can just have this look for next public rerunning our server and hitting refresh and you can see that now api url is defined in the client side as well as the server side so that's how you do environment variables and then on your production servers you don't need this end vocal file at all you literally just define your environment variables on whatever machine environment you're running that in and tada you can build once and run anywhere one more piece of convention that they add in that's extremely helpful is you can add a public folder let's create a folder called public and public now serves any static assets that we throw in there so let's reveal this in finder tada let's drag an image in here nice little smiley image and now i can go to my local server smiley or i can add that smiley image now in all my pages and it's going to automatically serve from that public folder another thing you can do is if you want to wrap all of the pages in all of your sites kind of like a site level wrapper maybe that maintains an app level store with the user's login status and profile status you can automatically create a new file called underscoreapp.js and then app is a single component and this will automatically get one prop the component prop and you can return the components so when i do this right here i've just wrapped every single page that i have with this app component so if i kill my dev server here and restart my dev server then the app component will now wrap everything i can console log that app ran you can see that every single page i go to is going to say hey app ran i could wrap this with a bunch of context providers i could make every single page on my website just be an h1 that's completely worthless i don't know why anybody would ever do that but anyway you can have persistent layouts that kind of always keep a menu in the top header as all the other pages load you can do a lot of great stuff with app.js the app.js file you can also go one level higher and you can make an underscore document.js which is going to actually manage the headers and everything on the page if you want i will often use app.js to on an application to automatically route to the login for any pages that shouldn't be public you can easily set in a rule here of routes hey if the route is allowed to be public great if not bump the user to login you can have a store that manages the user's profile login status and any high level app configurations like user configured themes things like that great way to dump stuff in here and then automatically your entire web app can take advantage of things that are wrapped at a higher level so that's a very very useful feature as well all right so now i'll wrap it up by talking about how you actually ship next js off to production you really have a couple ways to go about it again you can build up your docker file or whatever you're using to deploy your code you can throw your code in and then you just have to run next builds and next start and you have your production web server it's done it's ready to go and you're actually running a node.js server if you want to convert this to static html you can also do that you just do build and npx next export and what that's going to do is it's actually going to build flat html files for each one of your pages you'll get an out folder here which we should see in about there you go one second and you can see now we've got all our html files the one caveat here is i've got my id.html that's not going to go so good a user is not going to navigate to slash bracket id now you can actually configure next js to generate a static html page for every single product you have if you want to say pull all the products from wordpress or something like that headless wordpress and then spit them all out generate them all in html it can do that and it can do that very very quickly if you don't need that feature you can simply have it called product.html and use the html query param that i used earlier right id equals and then that page is going to work for everything and you don't have to worry about building out a thousand html pages so it really depends on what you're going after if there's seo value in your export or not deploying next js is effortless we are already production ready we have everything we need to go with next.js you can usually get some semblance of an app out the very first day you start working on it which is obviously impressive to people on the outside but feels phenomenal as a developer it's just one of those tools that maximizes the time you put in i hope you enjoyed learning about next js today if you have any questions leave them in the comments i always try to especially the day or the day or two after a video is released stay very very connected to the comments try to answer any questions and which is why it pays to subscribe hit the subscribe button and i will see you around you