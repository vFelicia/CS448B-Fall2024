okay we're going to be getting into some React videos which I'm very excited about react has really gotten to a great place uh throughout 2015 and now coming into 2016 it's it's very usable and I think people should be using it it's a great technology well worth the effort for both new developers uh which will have a bigger learning curve and for seasoned experience developers there's still a decent learning curve to it so um but before I do that for all the new developers or the the ones that were not used to module loaders uh I'm going to do a video here on module loaders what that's all about and webpack specifically um and webpack is definitely kind of the module loader of choice for the reacts community so if you're experienced with module loaders you probably don't need to watch this video um unless you're a little bit you know concerned about you know what do webpack look like so let's get into what exactly is a module loader now there's three kind of out there earlier on back in the day uh requirejs do. JS came out um a few years ago browserify can't talk and type browserify came out and kind of competed for a while and then browsery kind of started winning out and then webpack came out now it's kind of webpack and browsery duking it out so they're both great module loaders I'd pick one of these two for any project if you're doing react i' definitely pick webpack um it is more featureful and react kind of requires you to be a little more featureful in some ways um so let's get into it how do we do this I've got a very very basic HTML page right here um kind of show you kind of how things used to be we'll kind of Turn Back Time a little bit if I could turn back time then this is how we used to code JavaScript we'd have one scripts file that would have all of our modules in it module one two three um and then you'd load that right there into your HTML page one script call um if you had a lot of stuff then you had to start breaking it apart you had to put module one in here here boom let's put module one in there and let's put module two in there and then you had to do two separate ones you had to insert module one and then you had to insert a module two script tag so now you're making multiple requests and then if you wanted to enhance that you had to use some kind of build script that would concatenate module 1js and module 2js together and Minify them together um and those things basically invol evolved into module loading systems so we really can now code all our different modules separately and then we can use kind of an entry point which would be our scripts JS now to start the requiring path and to start the the dependency path if you will um so we know that our page right here has a dependency on module one and module two and they have to be loaded let's say in that order module one has to fire first module two has to fire second uh so in this case we simply go require uh we're actually going to go slm module 1js so the/ means we're starting in our directory right nowt do slash would be going up a directory or let's go up two directories or let's go up a directory and then into the JS folder which I'm already in which doesn't make sense so just module 1js so that's going to actually import that file into scripts.js at this point right here and then we're going to require module 2js for those of you guys of course who know your browser JavaScript you know that this will not run in the browser this is nodejs or commonjs code uh is technically the commonjs module system that node uses so this will not work what we have to actually do is use nodejs to convert this into a browser worthy format but believe me for any kind of web application where you have just tons and tons of files it is well worth the little effort putting into a build putting together a build system so for this we install no. JS if you don't know what node.js is at all you want to go check my intro to node.js video or you can just search YouTube nodejs at at the point of this it's number one or number two if you type node.js tutorial um so you'll basically install node.js I have node.js installed right now uh let's go npm and nit which this will be covered in that node.js video so let's get a package Json going and then let's go install webpack um and I'm also going to install webpack globally so I can just run the webpack command once this is done okay while it's going we'll come back to our file here real quick so at this point it's basically going to require module 1js completely run through everything in module one then it's going to move forward in a line so that's a synchronous operation then it's going to require module 2js and run through everything in module 2 now these can require their own stuff as well let's see if that's done excellent that's done I've also already run an mpm install G uh webpack weback so I can run the webpack command so I've already done that I'll save you guys the 10 seconds of having to watch it now all I need is I need a webpack doc config.js file which will tell webpack where to look and how to act so I'm going to touch that real quick uh webpack config.js sorry not Json um and I've actually got a gist here for you which I'll put the link to uh of a sample kind of very very basic startup web pack config these can get extremely complicated if you want to do a ton of stuff but here's basically what we have uh we're saying our context is currently the directory we're in you know if you had say an app directory that your app directory lived in then you could do this if your app lived in a directory called app or something like that but as far as the relationship from here all of our stuff is just in this folder there's no SRC folder or anything and then right here I'm I'm doing a quick determination is our node environment production if so we're going to run all these minification things and we're not going to do Source mapping if it's not production then we're going to consider that debug mode so then I'm saying if it's debug then we're going to inline Source Maps that'll help our our console logging and everything otherwise we're going to have no Dev tool at all our entry point is scripts.js so this is kind of where we're we're grabbing our this is where we're starting off and then here's our output we're going to the JS folder and we're going to build a scripts. min.js and then here's the plugins if we're in debug mode no plugins at all an empty array uh if we're in production then we're going to dup so we're going to actually strip out any duplicate code and then we're going to uh also run the uglifyjs which will get rid of source maps and comments and all that stuff and basically make it production ready so there we go let's say that let's go ahead and save scripts save module one save module 2 and run webpack there you go that was fast enough and you see that we have a scripts. min.js now clearly this is not minified because I didn't run it with node environment equals production you can say I got all these great source mappings here I'm defining some modules and then I'm bringing the modules in it did add a little bit of extra code in here which seems like an awful lot for two console logs but once you get a whole application this this actually makes the code a lot simpler and cleaner so it doesn't really add a lot of weight to your overall application um and so then if I wanted to go node EnV equals production webpack then it's going to run and you can see now it's all minified and everything's nice and teeny tiny and in one line and all that good stuff so there we go that's done let's go ahe and just run webpack again and let's open index all I need to change my index is now referencing scripts. min.js and let's open index.html there you go I've got my webpack page if I open my console log they're both in there excellent looking good you can see it takes me I need to get the uh Dev tool working right because that's not exactly how I want the dev tool to look but at any rate that's working let's go back to the console log uh and let's look at these modules here so now a really great thing is I can use node or npm to install some more stuff so let's say you're a jQuery guy everybody's somewhat familiar with jQuery still right let's say absolutely have to have jQuery on the page for some reason so there we go I've installed jQuery and let's also install low Dash install and save low Dash so let's say module one is a jQuery module it does something that only jQuery can do so now I can require jQuery let's go single quotes and then I can H1 H1 is going to get new HTML new text run webpack and refresh my page you can see now it runs jQuery on my page excellent uh a very cool thing is do I have jQuery on here nope jQuery does not exist in the global scope of my page which is very cool cuz jQuery now only exists where jQuery needs to exist if another module needed to require jQuery totally fine the code does not get duplicated I'm not going to double the size of my Javascript file by importing this twice it's just going to create a module called jQuery and make sure that that has loaded in the proper order where it needs to load so that's a great thing about module loaders is they do a lot of the smarts for you and let's say I needed to use low Dash here which is basically underscorejs for those of you guys who are not familiar with it low Dash let's require low Dash let's go ahe and get some data here I'm using macaroo let's make 20 rows of random data here let's go ahead snatch that paste that in ver people equals there's all my people and then let's alert let's see how many female people we have in here filter people where gender female length so we're going to alert female count there you go let's run webpack again and you'd use something like node Monon is a great tool for handling all your webpack there you go nine females and then it's also running my jQuery module so now my modules are completely broken up into uh just units that do one thing uh there's a little bit of jQuery code Happening Here If I had a lot of jQuery happening then I could easily make another module you know say I had a jQuery for form validation I can make a form validation. JS and simply require my form validation. JS and then that could that form validation JS would also require jQuery and do all of its jQuery stuff and webpack will make sure that jQuery exists where it has to and can be referenced where it needs to be referenced from so module loading super awesome thing webpack super cool great great great great utility it can do so many things um you just go to webpack's page and you'll get just a glimpse of all the things that it can do uh but there's webpack let's get into react using this basic kind of web pack configuration we have going on right now