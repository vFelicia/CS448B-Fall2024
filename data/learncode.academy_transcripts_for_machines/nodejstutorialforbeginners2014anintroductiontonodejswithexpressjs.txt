hey so this screencast is going to be shortcutting you into building a web application with node.js and we're going to be using the expressjs framework which is kind of the most popular framework and one of the easiest to learn uh it's really a tremendous combination and so we're going to be getting into it I've done a video on this before and a lot of people have done some great videos on this but Express really here mid 2014 made some changes t' be really difficult to follow along to previous videos cuz there just a few key things that are different so we're going to be getting into those right now um in this 2014 updated video on how to get started with node.js if it's not on your machine you're going to want to go to nodejs.org and install it um and you'll know that that is working if you go node DV and you've got a version I'm running 0.1.2 two looks like they're up to 10.26 so I need to upgrade um and then you should also be able to go npm DV and have a ver version of node package manager uh npm comes with node and that's basically how you install dependencies and you know do package management and all that stuff it's really really truly great so let's go ahead we have those both there so let's get into it let's install our first package we're going to go npm install DG for Global Express generator um this is going to get us building Express apps right really quick it's going to generate the scaffolding for us um and we have to do dasg uh because it's got to be a global cuzz we want to be able to execute it and it's G because it has nothing to do with our project we're installing this globally um and you may get an error there that you don't have read write permissions uh so you might have to do pseudo on that mpm install G uh and then enter your password but the way I've installed it I don't have to do that um so I can actually now run Express as a command and then give myself an app name I'll just call this XP 2014 so there we go I've actually generated an app now an expressjs application and you see all I have to do is go CD Space X X 2014 and do npm install before I do npm install though I want to show you what's actually taken place here let me open this in Sublime Text um show you what they've done for us they've built out the whole application uh but they haven't loaded all the dependencies yet instead they've just put a package.json file which is all that we're going to check into our GitHub repo anyway um and then it's just a list of the dependencies that we need uh you can see it's running Jade for templates which I'm not actually a huge fan of Jade templates so I'm going to redo this um and then once we run npm install you'll see that it starts adding all the dependencies into the node modules folder and now we're good to go it's installed Express for our application locally uh it's installed Jade it's installed all the stuff that we need so I'm I'm going to actually go up a level and go ahead and remove that and let's generate one again and this will be exp 2014 and I'm also going to go Hogan uh because I want to use Hogan templating which is basically mustache um and then I also want to go C for CSS and do less they support less and they also support stylus why they don't support SAS I have no idea but they support less than stylus so there we go now I can actually do it again CD space Express 2014 do npm install let's go ahead and do that and so now you can see that my package includes Hogan JS and less middleware yippe so now I'm going to scroll back up before I did that and it said if you want to run your app just run this command here debug my application and then you're going to run the bin www file you can run that and it says it's listening on Port 3000 so now I can go Local Host colon 3000 and there you go there's my Express and you can see as I'm refreshing it keeps loading up stuff so now I'm running a web server and I'm running a very very basic web application on my machine uh one of the cool things about Express is it runs as the web server itself so it's really different from PHP or any of these uh other Technologies and that it loads your whole application in memory and then it sits as the server waiting for HTTP HTTP requests to come through and then it responds to those it never touches your file system again unless you have to access new images or write images it sits in memory the whole time which is why it's so blazingly fast um I'm going and cancel this out real quick and show you this bin www file you can see that the my application it comes from right there so I'm actually going to simplify that I'm going to call call it debug equals app now which is a lot easier to remember bun there you go and so now I can well I forgot to hit save didn't I it runs just fine but you won't see any debugging because it's looking for a different debugging name so I've saved this file and now I can run that command again there we go I'm seeing app I'm debugging excellent good to go um so it runs the debugger and then it also requires my app.js file and then it starts up the web server listening on Port 3000 if I wanted to run multiple Express applications at once I could simply change this to Port 9,000 let me cancel this start it up again and now I can go Port 9,000 and there we go we're running on Port 9,000 uh you'll also notice whenever I make a change I have to cancel and reboot this application that's pretty annoying and it's going to get old really quick uh so there's this great utility called node mod that we can use uh you can go npm install G nodemon which is going to monitor your folder structure for changes and as you make file changes it's automatically going to cancel and reload your app which is great so now I can go node Monon and then bin www so there you go I'm going to listen any file changes if I hit save uh let me go ahead hit save here and you'll notice it started my server save save so if I had a console log here then it now is going to log whenever I hit file save so that's kind of nodon is really great for that so now we're running nodemon as we hit save it's going to automatically restart our app uh and that's going to be a lot nicer for us so let's get into building out our Express app it's scaffolded in it's working great uh let's actually look at this appjs once again www this is just the server has nothing to do with our application all it does is load the debugger and load in our app and now we're good to go so let's look at appjs here and see what all is going on uh the first thing we're doing is we're requiring some dependencies um into our file and then we're requiring some routes but we're not using those routings yet we're just kind of requiring them and then we're creating our app here by running Express so this is where our app actually gets started uh and then we're setting our def default views to the Views directory um there we go views directory and so all our views are in here you can see they look pretty much like HTML we're just using that Hogan templating and then we're setting our view engine to use hjs so then we also load our debugger and some other stuff and then we use our routes right here this is how we tell our routes to get used and then it awesome it also gives us our 404 handling and stuff like that so let's get into building our first routes I'm going to go ahead and N the users for now and I'm going to kill this users one for now as well so we've required routes index which is this file and then we are using it for all our request paths this slash just means we're going to use it on everything so let's look at this index file right now and so I don't confuse you I'll actually kill that and we're just going to start a new one we've required Express and then we've actually created our router file and then we've exported this file module exports is what the return value of this whole file is going to be so when I hit require route SL index I'm actually going to pass the module exports from this file into this variable so that's kind of what this module exports is the router here gets adjusted by all our routes and then I'm returning it as module exports if that makes sense if not you might want to just look into it a little bit more um but here's what we're going to do you're going to go router doget because we're going to be responding to a git request and then I'm going to do my uh my actual route which is just the index the root and then I'm going to give it a function with my request object my response object and then the function that I want to do when a user hits that that default pathway and I have two options here I can go re which is my response op object I can go res. send which is just going to send text or you can send a Json object um or you can send a number for an HTTP code that's just a 200 response let's actually start messing with res send or I can go res render which is going to actually do a templating I can find the file which this is going to look for my index file um and then I pass as my second argument a Json object of all the values that I want to send to that templating object uh so let's start with res send here let's pretend I'm making an API let's just say okay so now I can hit there and I've got okay and let me go and refresh it you'll notice that I'm getting an automatically it made my type text HTML um and then my status is automatically going to be a 200 code for the first time I save it and then a 304 if it's not modified so automatically it set my type text HTML so let's go ahead and make a 200 here now it's going to always give me a 200 status or I can go a 400 and that's going to give me a 400 status so that's always going to get a 400 there or once again 404 4 500 um if you just give it a first argument and it's a number then that's going to be your HTTP status if I want to start giving an ajon object there we go so now I can just do that and automatically I'm going to get Json and my type on my response is going to be application SL Json which is super great so it's as you can see it's really Nimble really light for doing um an API um and then I can also do res. render and let's look at our index file here and see we're getting a title looks like title is the only argument it's expecting or the only piece of data I'm expecting so there we go that will now render my index file with the my app let's go ahead and add a second value wh not sure what key I hit age 33 and let's put in here oh I can't type when I do these things man I'm the worst at it so there you go my app 33 years old CU I'm passing a title and age and you guys can figure out the rest as you go along so that's pretty much how you're going to render your templates and how you're going to send your responses um and so what we've done is we've we've kind of built our router we've added a get request let's say we wanted to respond to an API post I can do Post right there um and then I can access all the post variables by going rec. query. name let's say their name came in or um anything like that query will be the all the prams that came through um here let me actually do a get here so there we go let me uh console log see there my query object is showing age of 33 name equals will so that's how I access my Rec query object um another thing that I can do is I can go get users and so that will be users um not found because I didn't save my file um and if you don't do a respon send of any kind then it's just going to spin forever there is no response taking place so there we go 200 okay um let me go ahead and so that's responding to my users let's say I wanted to be able to get an ID off of here I can go ID and that's going to be request pams so now whatever my second Pam is going to be is going to show up as pam. ID so let me go users 33 and you can see that ID 33 is coming in right there I'll just send so I'm going to send a 200 request uh so it doesn't confuse it with my number um there you go so now it's going to say 33 34 and that's how we're going to do that routing um and so then that gets passed through nothing happens and now I'm using that on any and all routes on my page you can also namespace that and just go users um and then if I'm namespacing this to users then I don't have to add users I can just go slid and it will be the exact same thing so if I actually did Slash users here it would not work because it'd be looking for users slash users um and that would be what happens if I namespace it uh to a particular ular routing so that's pretty much your introduction to node.js if I flew through too quickly um then you might just want to rewatch the video I try to be as quick as possible um I do have another video that I will link to in the description on how to implement a mongod DB database using Mongoose um and I'll also add an annotation for that somewhere around here if you're not on mobile you'll see that and have yourself a great day