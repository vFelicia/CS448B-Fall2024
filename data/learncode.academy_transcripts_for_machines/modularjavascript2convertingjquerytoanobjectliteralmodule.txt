so this is the second video of a modular js tutorial series and you definitely will want to watch the first one if you are not familiar with the object literal pattern or what a javascript module is we're basically going to convert this jquery what i call spaghetti code into a module that makes more sense that you can look at and kind of really quickly see what's going on and it's going to work together a lot better with any future code we have this is not it's not like this is the end of the world but imagine if you had 50 times this and it's just jquery function after jquery function all just splattered onto a page that's just a pain or honestly even if it's just this file looking at it you can't immediately tell what's going on you have to actually read through to see what's happening and there's much better ways of organizing that code so let me show you what kind of module i got here this is that people adder let me show you the html for this let me add a couple people so i have a div with id of people this is kind of my wrapping div for the whole thing i have an h1 inside of it probably not necessary um i have an input i have a button and then i have a ul the ul is basically just has a bunch of lis in it for each person and so then here's an li for each person it has a span and a delete button in it that's it i'll show you my actual html in the code here's my input button ul now instead of a bunch of li's the allies have to be dynamic they have to be created so i created a script tag with a type of text template and when your browser sees this it does nothing it's not javascript it doesn't do anything with that so then i can code any html in there that i want and then i can get that out and it's basically a javascript string which is what i'm doing here template equals let's go find that element and get the html i could do this instead i could do all that mustache stuff here that that weird stuff that you're seeing that's mustache js so if you're not familiar with mustache or templating well you'll get an intro to that here so for each person in my people object or for each item in my people array i'm going to create an li and i'm just going to add the value of that in there so that's basically what's going on there and that's mustache so i could code it like this but it you're pretty limited you don't want to add much more than one element otherwise it gets a big messy string and you don't see the pretty syntax highlighting and then i'm putting html in my javascript that's just that's just not a very good practice you want to kind of avoid that as much as you can so here my html is still in my html i just have to get the template out that's a good way of going so i just had to at least mention that for people who were not familiar with what mustache was so let's go and convert this spaghetti code into a module so starting off let's just create we'll just call it people equals and we're just going to create our object and then our people array can live on the object so i could go people is an empty array and then my template can live here as well the template can live yeah let's just snatch it out for now there we go so now i've automatically just kind of incorporated my people and my template into my object and what's cool about that is i no longer have these two global variables yippee i can get rid of you now a simple way of getting rid of global variables would be to wrap this in a self executing anonymous function there we go so i just created a function and now i can have it execute itself so if i were to actually put this down here if i were to wrap this code in a selfexecuting anonymous function that's kind of one way to get around it let me move this down here now ver people is scoped to this function so it's not global anymore this isn't global anymore if i do ver template outside of that function blah blah blah then this is not overriding this so that's kind of one quick and dirty way that you can at least get rid of global variables it's kind of a module but it's a spaghetti code module still so we've got that so that's that gets rid of global variables but it doesn't really give us better coding practices and once again most times you're going to have more code than this so these are just my two functions that i'm using to illustrate module or javascript so then i'm going to go ahead and have an init function and it stands for initialize or initialization and it's kind of going to be how we kick off our module so what we're going to do is let me comment out all this code is we're going to define our people module and then we're going to run people.init and you know what i'm also going to do i'm also going to keep this people module wrapped in this anonymous function just so there's still no global variables we don't really need a global variable for people and so now this ver people is not global either yippee so we've got people our object defined and then we're going to run people in it and so that's going to run this function that kind of gets everything kicked off so let's kind of start addressing some of the issues in our ground rules uh let's take on this one efficient dom usage i do not like that there is dom getting searched here dom getting searched here i'm getting searched here so we're actually going to do is we're going to cache dom at the very beginning so let's make a cache dom method um we're actually going to find some things we'll go uh this dot el equals people module and so basically we're just uh finding people module and then we're saving it now it's on our object and whenever i store a jquery wrapped object then i always like to add a dollar to it instead of just calling it this el let's call it this dollar el so i know that that's a jquery search and i can do all the jquery things on it like show hide toggle slide you know all that stuff so let's see what else do we have to do we have to find that button so i can do this button equals this dot el see now i can reference this ell i don't have to search the dom again i've already saved it somewhere find button let's see what else are we doing in here we're finding an input so let's go and find an input let's use some multiple cursors to do that slick and fast there we go uh we're finding the inputs uh we're finding the ul let's do that there we go and i think that's it that should do it for now uh so now we've saved a lot of dom we only have one of these going on in our whole module that's a good sign i only want to see one of these green dollar signs so that's a really really good thing i've got a second one for my template so i guess since my template is inside of my people module i could actually forget template here and i could actually cache the template if i wanted to let's get rid of that and let's do this template equals that's not a dollar because this is just going to be an html string dot el find and then we're going to find that within it and get the html that do it right yeah that should have done it okay so this template is now set as well so the only thing i actually have going on up here is people so then let's actually create a render method render is the function and the method it's a very common name for let's take the current state of my module and let's let's commit it or let's translate that into my html dom so let's take that javascript module let's print it to this ul is basically what's going on so this is going to be the point in time where we take every person in our people array and we're going to create an li out of that it's basically what's going on here on this click fun on this click method so let's go ahead and what does this render method do i'm going to uncomment this it basically just takes all the people and it creates a data object and then it does an html dot html on our ul so let's go and do that mustache render here so we're going to go data equals this is going to be this dot people so i'm making a data object if you're not familiar with mustache here's what mustache does you just go mustache render and you give it a template so the template might be uh name or it's maybe it'll say hi name and then you give it an object so that object could be name will and it's basically just going to take oh it's looking for name let's find name in the object okay there's name so then it's going to just going to create a string that says hi will that's basically what mustache does it takes you know values and spits them into a string so in this case we're just going to take um our array of people is all we need and for each person we're going to spit that value dot is basically representation of the whole value of what's in the array so for each person we're going to spit out an entire li so that's what's going to go on and we can just go this dot ul we've cached that up here so we don't need to search the dom for that this ul html we're going to render this dot template since we've already stored this dot template and we're going to put the data in there so that should work so let's go ahead and maybe add a startup person maybe will and laura and let's say on init we're going to cache the dom and then we're going to render so we'll kind of render right away let's see if that worked yep we got two people will and laura button does absolutely nothing because we unprogrammed that in so i could also say will and steve and there we go we have will and we have steve excellent so our app is kind of working so far already it's a lot cleaner one thing that's great about modular javascript is you can look at it and each method has a name so you can see what's going on based off the name i know this is initializing the module i clearly know this is caching the dom and i clearly know this is rendering so ideally this is going to be the only thing that ever touches the dom itself everything else talks to this module maybe changes this people array but nothing else actually interacts with the html except for my render method this is very clean so far so i'm liking it so now let's make this render on click on click we want to take the value of our input push it onto this people array and render again so to do that we need to bind some events so let's bind events and if you're if you're new to modular javascript you're probably thinking oh my goodness this is way too much thinking i'm not used to thinking this much when i code yeah well if you're not thinking when you code then that's kind of probably the next step you've learned how to code now let's learn how to think about how we should code and it probably looks very foreign to you because this is new but if you write one or two modules then everyone's going to have a cash dom a bind events a render so this is not exactly crazy this is actually preparing you to learn backbone.js which is very very similar to what i'm doing today so let's do a bind events function i just want to like give you that warning i guess in case you thought i'm crazy and i'm going to make your life miserable and very complicated so as you guess the bind events method is for one thing and one thing only binding events so let's go ahead and see what do we do we're going to on the click on the buttons click event then we are going to add a person so let's go ahead and make this dot input a note button on click and we'll make an add person function that seems like the right name for it so add person there we are because i don't want to actually make a function in here because now this method has several things it's binding an event listener and it's adding a person ah i don't like that add person this is only responsible for binding events so whenever the click goes we're going to add the person over here this is also a very good pattern you usually don't want to write functions directly into an event binding it's just not a good pattern for a lot of reasons and i think that's all it has to happen for now yep so add person let's go ahead and go we need to get the value we're going to push that right there i'll just copy this in so this dot people we're going to push the input value this dot input dot value now there's gonna be a problem right here which i'll show you in a minute um uh this will not work correctly this will actually have some problems so let's go ahead and save this and test it out and we'll see what my problems are let's go to my console looking good let's add a test app error this is not uh it's giving me all these weird things something is not a function okay let's go ahead and find out what's going on here um here's one thing that you got to know with events whenever you're binding an event the context is going to change so this value of ad person is no longer going to be people so if you know everywhere i'm saying this this really refers to people this is people dot cash dom people dot bind events people dot render well when an event fires it sets the this value to be the item that the event was bound on so this will equal the stop button so this will be the value of button inside of add person i can get around that by simply binding it to this and if it's confusing basically just realize when you're doing modular js if you want a method to always run in the context where the this value points to its module then you have to bind it because as soon as it gets called from an event listener from a click event the context of this will change the value of this will change and in our case we don't want the value of this to ever change we want this to always mean the people module so in that case i'm binding it to this this this this i know that's a lot of saying so now it's going to work add person dot find is oh sorry this dot add person there we go test and okay so it's adding it's kind of working uh we are now adding a person to the array and then we want to render let's rerender again so add it to the array rerender let's go ahead check it make sure it works test and we got a new person test2 awesome excellent and you know what else i want to do is i also want to clear the value this dot input dot val equals nothing so once that renders i want to clear the value of my name excellent so that was very easy to do test two so now my name value clears out every time so next up we just gotta delete our stuff so you see we're getting a little bit more code we're definitely getting a few more functions going on but it's extremely clear if i if i know that there's a problem whenever my person gets added uh let's just take this back out i'm not going to clear this value let's say we've had our todo list working for a year and i have to come into it a year later i've forgotten most all the code but my manager says well now i hate how test stays in here this should always clear when i add a person it should be empty so then you just open this coding and say okay on add person oh there we go add person well that's really easy to do you can add in your line of code to add person and you know everything else is separated out and nothing's going to break so that's the biggest reason that modular code is a big win is because it separates out your code i don't have to worry about the module initializing i don't have to worry about the module caching the dom or binding events all that's happening i just want to add one feature to when the person gets added so i only have to worry about this piece of code i don't even have to worry about it rendering or any of that stuff so modular code big big big win so let's go ahead and get this delete event going on right here and then we're done so my delete event is a delegate event on the ul if you don't know about delegation i'm going to add a little bit to my jquery series in there so you can see what delegation really is so this ul is going to delegate to the i delete click so let's go we already have a bind events method going on let's just add one more event this dot ul delegate i delete click let's go ahead and call this delete person so when i class delete gets clicked we're gonna go up to that li we're gonna find out which number we are are we number three we're gonna delete number three from our people list and then we're gonna rerender it's pretty simple so once again let's go ahead and go this dot delete person and let's bind this same thing we gotta make sure we bind that so that was easy we were able to just add one more event and now this method is going to fire when we click on delete person let me see if that works make sure that's going delete hey always fires oh and look it also tells me people splice is not a function oh that's cause i was wondering how that was working all of a sudden that's because i uncommented my code so let me go ahead and comment that code back almost done here last method um so this is this is correct i want to keep this very move this is the one that i want to remove so i'm i'm going up to my closest li so when i click on here i'm going to go up and find my closest li okay that's this i want to remove that um except for i don't actually want to do it like this no no no no more html touching in the other methods this is the guy that touches html this guy does not touch html so you go away i'm just going to call you remove since uh you're still actually you're still a jquery selection so i'll keep you as the dollar signal and then i want to do let's see i want to in ul this dot ul i want to find the lis and i want to get the index of my current li so this is going to find out hey what number am i the guy that got clicked and my number three and my number two um so let's find that i that's the guy i want to remove and then this dot people let's splice it straight out and let's render again so basically everybody's just calling render the only boot up we're going to render when we add a person we're going to render when we delete a person we're going to render so here we go let's see if it works will goes away app e is not defined that's because i didn't add e in there that's my event so if i want to call it that it's a little clearer for people who are not sure exactly what's going on let's reload it there we go there we go all gone and my module is working so this is a module this is kind of how you do modular javascript and in the next video whenever that comes out i'll show you kind of how to do a revealing module pattern so we only have maybe a few things i don't really i don't really want to expose cache dom bind events i don't really want to expose all these to an api but it would be cool to do add person delete person let me go ahead and get rid of this let me make this global again this ver people so now i kind of have this api here i can go people.ad person so maybe another part of the program up here wants to add a person to my list well i can add a new person there we go i added a person to the list except for that didn't really work because i actually have to send it a value let's go and do something like this let's go value or so if a value is passed in we'll actually do that if not we'll look it up from the input that's pretty easy so i have this api going uh it's called people add person there we go we added laura and now laura can still go away so that's kind of cool i can add add a bunch of people so now a module up here could actually talk to my other module um but i don't want them to be able to call cash dom i don't want them to be able to call bind events i really just want them to be able to call i don't i don't want them to call render either i really just want them to be able to call these two events so in the next video we'll get into a revealing module pattern where we only allow people to have access to these two and all the rest is internal because once again people can hack this as well they could go people. people which is the array and they could push something on there themselves oh that's a bad pattern god uh but it didn't render oh crud so now what happens so now i delete lore and all of a sudden god shows up so that's that's not a good pattern uh for people to be able to automatically talk to to the pieces on my module so again next up revealing module pattern i'm gonna stop yapping for now