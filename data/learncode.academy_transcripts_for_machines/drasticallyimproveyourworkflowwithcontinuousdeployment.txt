in this video we are going to set up continuous deployment for our application which is an incredible way to improve development workflow and productivity to pretty much any app now what continuous deployment means is that whenever we merge to master or push code directly to master that's going to automatically get deployed out to production if we set up other branches like a staging branch whenever we force push something to staging or merge something to staging that will automatically go out to a staging environment automatically get deployed all the time it's a great way to manage your deployments you merge it to master it's out on production so masters always in sync with production and so to set this up will be pretty quick and easy we're going to use semaphore ci to do it which is very fast very easy to work with and you can follow along with the readme here now we're going to give you two examples in this video we're going to show you how to do static content which is html css in javascript so for that i have this sample index.html which just says hello world and when we make changes to this that will automatically go out and i'll also also show you how to do it for web applications like node.js or something else that requires kind of some startup commands when you actually push the code to your server so here we go let's go and get started our first step is we're going to create an ssh key that's going to allow semaphore to securely connect to our server and run some commands there so let's go ssh keygen c and you just give it some sort of identifier i'll just say semaphore and then we choose where the file is so i'm going to call that exactly this folder here that they want and then i'm just going to call it idrsa.semaphore oh it's a key and i'm not going to use a passphrase that's important so this created idrsa.sema4 and idrsasema4.pub so let's go ahead and copy the contents of that public key we can use cat for that id rsa.semaphore.pub we're going to pipe that to pb copy there we go now it's copied to our clipboard and now i'm going to go ahead paste that off screen so we have it and we can go ahead and ssh into our server root add and that is 45.55.153.229. so now we're in our server we just need to paste that pub key into authorized keys so we can do this really easily we can go echo and then paste it there's the pasted and i'm going to close those parentheses so i basically wrapped it in parentheses two arrows so i'm going to append it to the ssh authorize keys file so i now appended that in so if there were any authorized keys i didn't erase those or you could just edit this authorized keys folder in paste file and paste that in yourself however you like to do it so on this server right here let's go to the ip address you can see it says 404 not found i'm running nginx and it's set up for static html content which means that it's going to look in the usr user share nginx html folder of course i have a typo there so if there were an html folder here that would be my html website i could make that directory and i could echo a file in there let's say okay so let's make index.html whoops i save that in the wrong folder let's go at echo html let's put in the html folder there we go now we have an html file index.html and it says ok so any changes to that index.html will real time be changed on nginx so i'm going to do is i'm let's go to remove that html folder and let's clone our repository straight on in there now if you're doing this and this is a private repository you couldn't just get clone it you'd need access somehow so to get access you simply go to your settings and you add a personal access token you can generate a new token let's call it semaphoretoken give it access to our private repositories now that token can be used whenever we're cloning i could copy and paste that but i'm not going to use it because this is a public repository everyone has access to this i'll show you in a minute how you would use that token so now all i can do is i can go to the clone or download and you'll want to use not ssh you'll want to use https so that's important let's go and copy that and now i can get clone that into the html folder and if you had a token if this was a private repository you'd put that token there whatever that token is at github.com so token at github.com and you'll have access to your private repository so let's go to clone that boom that's done now if i refresh my site hey there's my hello world which is index dot html so now what semaphore ci will do is it will whenever changes happen on master it will ssh into this server it will tell get to force pull down the latest of master if any changes were made on the server at all it's going to automatically overwrite them and i have those commands right here in this one file called deploy.sh we're going to cd into this folder we're going to fetch all and we're going to reset hard to origin master simple enough so basically semaphore is just going to ssh into the server and run these three commands whatever's in deploy sh will get run so let's switch gears go over to semaphore and get that going and that'll be really really easy so let's go to add new project we'll pick our user and this is called example deployment example deployment we'll build off the master branch and this will take a minute to just analyze my project real fast there we are now notice the node.js code in there because if you remember i have a node.js project in at the same time that's okay all i have to do is say no we're not going to run npm install we're not going to do that setup now if there's a node.js project or project with dependencies this would be where you'd run the dependencies command which in this case is npm install i said cancel go away thank you and then npm test would normally be what you do to run test cases on node.js we're not going to do any of those so let's just go echo okay and save that since this is just an html file we don't need that but that's where you change your node.js settings we can go ahead and build with these settings and then there we go it's going to automatically run the build that's going to be simple enough that's going to build it's only going to take about 8 seconds because we don't have any test cases that we're running that's going to happen really fast while it's going let's go ahead set up deployment now so i'm back on my project and let's set up our deployment we're going to scroll down and do a generic deployment and we're going to do this automatically so every successful build if it's on master it's going to go out this is going to build on the master branch and what are our deploy commands we're going to paste these two which i have in the readme we're going to say hey allow us to ssh into this server which this will change to your ip address or your server name your domain name and same right here we're going to sh ssh in and we're going to run deploy sh so whatever changes in deploy sh we don't have to ever change our continuous deployment setup and then we just need our private ssh key which is that idrsa.semaphore.pub.semaphore so let's go ahead cat that we're going to pb copy that that's copied to the clipboard let's paste it in there we go that's our private key now it's semaphore we'll be able to ssh into our server let's just call this prod i'll just call it production create that server and let's go ahead deploy boom let's let's deploy index.html here or deploy all of that straight out it's setting up our environment and it's going to run our two commands and we will actually have a continuous deployment going there we go command one ran and command two ran and it worked but you notice there's no changes let's go ahead and make a change to index.html and see just how long it takes for this to actually end up in production here we go i'll just go edit it hack it in straight here in github's user interface let's add some exclamations let's say i'm feeling emotional today there we go i merged that let's go back to semaphore sema4ci and see what happens you can see there we go a build is already queued up that's going to start building here any second and then it's going to deploy once that build is successful while this is going on as well i think it's important to note that sem4ci gave me a coupon for you guys it's not a kickback coupon i don't really get anything from it but i told him i was doing a video and they said hey we'll give all your viewers a coupon so i'm going to throw that coupon down into the description so that way you can actually save some cash if you ever do need to use the more premium features of semaphore ci with your company again that's in the description thanks to them for that and there you go the deploy is already going out you can see that it's deploying and it's deployed do we have the exclamations absolutely yes we do that's excellent now one thing worth pointing out is if you're doing node.js let's go over to node.js there's a little bit more that you have to run you don't simply do a git pull you also have to start up your server i'll go to my editor here you don't just do a git pull you actually start up your node.js server probably run an npm install so the actual script looks something a little bit more like this for node.js application not much more complicated let's cd into whatever folder my app is in let's get fetch get reset everything let's maybe do an np nvm install if you use nvm to manage your node version let's run an npm install then and let's kick off the app whatever you use to start your app in this case i'm using pm2 so i'd stop the app and then start the app and that's the only difference this will totally work for a node.js application as well so as you can see continuous integration continuous deployment not a scary thing works really really well probably the biggest thing you have to get used to is when you're doing pull requests you merge them down to master they go out if you have a mistake and you have to roll back roll back normally you're like okay let's push out that code and trigger the deployment manually well in this case you just revert the pull request merge it to master and then you essentially just did a rollback you did it completely in github every pull request can be reverted with a click of a button in github and so that's kind of the mental process you go through with reverts and quick rollbacks when you accidentally blow stuff up that's usually the thing people are the most scared of with continuous deployment is uh what do i do when i have to roll back quickly well you just make another pull request and merge it to master it's really simple and it's awesome it's so nice to not think about having to manually trigger deployments anymore so that's continuous deployment in a nutshell hope you enjoy the video have a great day