okay these videos are going to be fun here because we're going to be moving beyond basic docker of how to create a container how to create an image and run a container and we're going to be talking about high availability and really scaling a production app with docker and that involves several new pieces of technology uh but it's really it's pretty simple um it's a lot of fun it takes a while to really wrap your head around it but once you do wrap your head around it it's pretty simple and a lot of fun so here's what we're going to be building and i'll give you this link and i'll give you a link to the gist where i have all the code that i'm going to be using here as well which is pretty much copy and paste code but we're going to be creating a core os cluster so coreos is our operating system that we're going to use instead of say ubuntu linux coreos is linux and we're going to run four core os machines that are going to cluster together and kind of act like one machine in a lot of ways and then we're going to start running docker containers on this cluster so we're going to run web app 1 and that will get assigned to a machine and we're going to run a copy of that web app too that'll get assigned to another machine and then we're going to say run engine x to load balance between the two and then we'll maybe even run a second engine x so that way in case this one fails over we've got a second engine x that automatically load balances between the two so multiple levels of fail over here and then just to make it really cool we're gonna put a publicfacing nginx proxy in front of them that automatically creates subdomains for these services so say we want to be access able to access this at someapp.mywebsite.com well these app this nginx instance will automatically register that a sub domain needs to be created to load balance between those two copies of nginx if i haven't confused you already you're in for a great time uh here's those links and let's go and get into it first part which we're going to cover in this video is what is a core os cluster and how do i start this thing up so we're going to do it with digitalocean it's very simple here's pretty much a visual of what core os is so again it's a linux operating system it basically boots up to docker doesn't really run a lot of services and the other big thing that they did so imagine all these blue boxes are capacity to run docker containers um and then the other thing they did is they took the configuration part out of the operating system so that etc folder that etsy folder really doesn't exist instead there's a service called a service called etsyd that they all share and so instead of looking for all the configuration that looks to the ncd service they're all going to look to the exact same service and all your configuration for all your apps and everything lives in here instead so whether you run a copy of web one here here here or here it knows how to look to etcd and find out where all the databases are that it should talk to so that's very cool it also means that your configuration for each computer is really really light here's a cloud config yaml this is all you need to create a core os machine is a cloud config yaml and this is as complicated as it gets really the minimum you need is you need to tell it how to access xcd which is this chunk right here and then we're also going to be running a few other services we're going to be running etcd when it starts we're going to be running fleet when it starts which is what we're going to use to schedule out all of our docker containers and we'll get into that later and we're also going to be running flannel which is what helps docker containers docker containers discover each other and talk to each other so let's go and get started to get started you basically you need your cloud config file and you can copy and paste this one this is the one in the gist the only thing you need to do is change this discovery url to be your discovery url and by your you just copy this url right here and this will generate one and so i'm going to go ahead and do this and it's going to be size equal three and you see every time i refresh it creates a new url for me so i'm just going to snatch that url i'm going to paste it in and now here's my cloud config file so every core os machine i create gets this cloud config file i'm going to go to digitalocean which is a very easy way to do this i'm going to create my first droplet call it coreos1 pick core os it's going to be let's pick the stable version you want to enable private networking because these things these guys need to be able to talk to each other you're going to click on user data and you're going to paste in that cloud config and it's very important that you have this comment right here there we go that's all i need i'm going to give it one of my ssh keys so i can ssh in and it's booting up coreos machine one now let's go ahead and create coreos 2. now if you haven't used digitalocean before i it's really my favorite cloud provider i'll put a link for ten dollars of free um i guess credit uh that you can do these referral things with digitalocean where you get you can give away ten dollars of free credit if you use that i get twenty five dollars of free credit but no worries you don't have to use it um make sure i spell it right i have plenty of credit as it is right now so so here's a third core os machine and we'll run a fourth one and then be done so i'm starting up four machines right now they'll all take roughly a minute to start coreos4 pick stable give it the cloud config give it my ssh key and we're good okay so these are all creating right now and so now remember this discovery url i generated the one that's in my cloud config i can copy that out and i can actually look at this and you'll see that now machines are starting to show up they're starting to register themselves to the cluster i'm going to keep refreshing here real quick i should see a second and a third appear here soon and you also notice that this is a private ip address this is an inhouse digitalocean private ip address so even if someone were to somehow maliciously access this url here they can't really do anything malicious with it because they don't have access to these ip addresses only your core os clusters can do this only your core os nodes can do this on your digital ocean machine so i should see three of these register but not the fourth and that's because when i generated my discovery token here i gave it a size equals three which means the first three that register are all going to run at cd any ones after that are not going to actually run at cd they're going to reference the existing etcd and the reason is is well it's like a clustering we don't need a hundred machines running etcd for failover we really only need three to five machines running fcd for failover and you do always want that to be a an odd number three five seven and you really don't need more than three five seven nine most of the time so here's kind of here's the two ways you'll go about running core os in production you'll either run this way which is i'm gonna run say five no a five node cluster and all five are gonna run at cd and they're also going so they're gonna be running xd for failover so if this machine goes down um xed still has all of its existing you know information and then also all five of these machines are going to run my docker applications so that's kind of your smaller way of doing it in production your bigger way of doing it in production is to run five dedicated sed machines in your cluster and then all the other ones in your cluster um do not run ncd at all they are just your workers and so really your procedure for spinning this up is about the same as what we just did your cloud config just looks slightly different for this guy it says only run at cd and your cloud config for these guys says we're not going to run ncd we're just going to you know talk to it so that's basically all you need to know about etcd core os they're running right now i've got three copies of ncd going and now i can ssh into any one of these machines let's go ahead and check it out um and i'm going to go ssh core at core is the default user that digitalozen uses i gave it my ssh key if you remember when i created the machines i gave it one of my ssh keys so i can automatically ssh in any box and then i have docker running so i can do docker ps nothing's running and then i can also look at etcd etcd xcd control i can list that i can see all the keys so right now there's just kind of some configuration information that they're all sharing right now this will look identical on any one of my four machines then i also have access to fleet if you remember in my cloud config i told it we also want to run fleet and flannel so i can also run fleet control list machines and there you go i see all four machines not just the three that are running at cd so all four of these machines are wired up to fleet and i can now use fleet to run services let's get into that in the next video