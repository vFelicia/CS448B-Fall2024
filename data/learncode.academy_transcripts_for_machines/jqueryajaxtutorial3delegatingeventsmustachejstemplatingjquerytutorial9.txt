all right here we go with our third and final jQuery ajax tutorial uh our our app is in the place where we can now load up all the orders When we arrive and we can add new orders Lauren wants a latte there we go so we can add new orders we can refresh our app and our orders exist because they're coming from the back end so what we need to do now is we need to add a delete button so we can remove orders and we also want to fix this right here this is kind of a messy hacky way of piecing together a string um in order for us to build out a template it works totally fine with something this small but if we want to add three or four elements and a lot more markup that's going to be messy really really fast so we've got to do a better way of doing that we're going to use the mustash JS templating engine uh so let's go and add mustache JS onto our page done that's easy uh and let's go ahead and create our template um all all a template is is a string and so we can go Li uh name and then what you'll do is double curly braces anytime you want to insert a value so instead of doing order name we're going to pass order into our template and we can do name right there so it's going to look in order for the value of name and spit it out right there and so that would be the same as order. drink so that's our template for what we have right now let me close that Li tag um and let's go ahead instead of doing this we're going to go mustache. render and you pass it two things you pass it your template and then your object of values so we're going to go order template and then we're going to go order which is our object right here which has all our values in it let's go ahead and refresh and it should look exactly the same excellent no change at all uh but what we've done now is we've given ourselves the ability to add a lot more complicated templating to this this um and so what you can actually do is a sneaky way if you have a template that's not too big and bad you can build it by adding you know a bunch of plus signs and as long as you start off with an empty string you can do new line breaks so I'm going to go Li I'm going to go strong I'll actually do a paragraph P strong name is my name there you go and I'll add some more do another paragraph strong let's capitalize those and I'm also going to add a remove button U and this is actually a pretty annoying way to do a template this big uh there are many there's run plugins there's a lot of ways to make a better template that's in an actual HTML file and import it in and use mush Das to render it but for now this will this will have to do for our example and let's do a button and we're going to go data ID we want to print the ID and I'll show you why in a little bit ID there we go so let's put an X here in this button we could style that a lot better with CSS but we don't have to for this video and let's give it a class of um remove let just call it remove so there we go let this should work fine now and now we have our larger order and we have our x button which CSS should put over there or something but whatever it's good for now and when we click this we want it to remove it so let's go ahead and look at our backend teams update and it says to delete an order just send a delete request to API orders SL and then your ID of your order that you're wanting to delete uh so that's why we're printing this ID here let's look at what HTML we're actually creating is we're adding a paragraph tag with name paragraph tag with that and then a button with the ID of three and a class of remove so now we can do click or we can do on click I like to do on click I feel like it's more consistent on our click function we simply want to do ajax type is delete and then our URL is going to be API orders and then plus now I can get the attribute out was that data ID I think I was calling yep data ID I can grab the data ID so this will be if I click here on ID number one it'll be API orders1 so that's grabbing that attribute out and this will not work and I'm going to tell you why so here we go I'm going to do this and uh oh something's broken I probably have something bad in my code somewhere unexpected token online 58 oh yeah there we go got that okay so this button will not fire any requests let me show you let's go to the network tab click this all I want and no requests are firing why are no requests firing this is one of the most complicated things to figure out if you're new to JavaScript and jQuery is I have the selector right I have this remove selector correct but when I'm firing this when I'm running this JavaScript there have not been any things added to my page yet cuz my page loads up with no orders my page loads up it starts a get request that's in process let's go get the orders remember I said it's asynchronous JavaScript and XML uh it's asynchronous meaning it doesn't block your code so it starts that git request and then it starts these other things going and then it looks for all the remove items and it tells to listen to those but there's no remove items added yet those are going to get added 3 or 4 milliseconds later on this success function so how do we make it listen to the remove items that aren't there yet what we do is we listen to a click on remove items within the parent container so my parent container is my orders ul and I've already cached that right here orders equals that so what I can do is instead of listening to remove I can listen to orders uh and I instead of on I'm going to go delegate delegate remove click so this is going to listen to any click events on the orders thing and it's going to only fire if it's a part of a remove class it's going to listen for any clicks on any remove elements to come both now or in the future and it's going to fire them all now our JavaScript will work if I refresh let's refresh there's my get request this should fire a delete request there we go a delete request to API orders1 and now this is still there but if I refresh my page my order is gone awesome so now we need to do is on success of that we need to remove that element okay so you'll notice a couple of my items are gone it's because I had a code error and I needed to fix it real quick uh but what we need to do now is we need to delete these items um from the list once our delete request is successful so we need to hit the X it makes the successful delete request to the back end and now we need to remove this from the list so we don't have to refresh our page to see our changes so what we need to do is we need to on success we need to get the parent Li from this button that was clicked so I can store that here uh this closest Li so that's going to start going up the chain till it finds An Li it's going to be this button it's going to go up and it's going to grab it really quick so I've stored that and now on success I can go li. remove let's see if that works refresh yay it's gone and it's gone let's add a new order let's add that let's add a few more whe coffees refresh make sure they're there make sure they all go away it's gone let's refresh it's still gone it's gone and it's gone let's actually make that a little cleaner let's go Li Fade Out 300 and then on call back to that fade out let's remove it there we go let's do that add some orders again ah the Fade Out ah the Fade Out much better so there we go we have built a complete application now a few things that I need to specify that are very very very important is you cannot use this inside of a success function uh let me tell you what I mean is see how I did this closest Li uh if I did this closest Li in here that would not do anything because this no longer refers to the remove button that was clicked this now refers to the Ajax operation that is in progress so what I actually have have to do here is I have to grab the LI up here I have to refer to this at when I'm inside of this function and now I can pull the Ali here if that made sense I I have no way of knowing which element I'm in when I'm inside of this when I'm inside of the success function I cannot use this to find out the element that was clicked I have to use this when I'm in here and now I can store it as a variable and then I can access it later on if you need to use this inside of success the way you do that is you go ver self equals this and so now I'm saving a reference to self calling it this and now I can do self so it's accessing a variable it's going to look up my scope and find a variable if it looks for this this already exists inside of the Ajax item so it's going to pull the wrong this um if I do self there's no such thing called self yet so it's going to start looking up my scope and it's going to find something called self which refers to this I know that was a tongue twister for you but that's why I did it the way I did it right there it's a scoping issue it's one of the trickier issues of JavaScript I really need to do a whole video on it but this is about Ajax so I'll leave you where we are have a great day and uh good luck Ajax thing