at this point we're going to start talking about how to scale a vue.js application into a full scale application now there are several pain points we would run into if we started taking those manual components that we were just creating inside of a main.js file it would be very frustrating so obviously we want to go towards a webpack build system and we also want to start defining our view components in a single file component structure i'll show you what that is and to help us get started let's go ahead and install the view cli which we can do by installing npm globally view cli i've already done that so i will not run that install so now we have the view command and if you do view list you'll see that there's a set of templates that we can pick and webpack is going to be the one that we want to start off with so we're going to want to go view in it webpack and then you can also give it a folder if you wanted it to create it into a different folder but we're going to say do it in the folder we're now and we're just going to say yes to almost all these defaults runtime plus compiler yes we do want that and let's say no to all the addons so no view router we will get to that in the next video and no to all the other editions so now we can just run npm install and npm run dev also open this in code so this will get us all going here so when this is done installing it's going to open up my project in visual studio code and then start npm run dev and we will be rolling all right so about a minute later and here's our application that we've created and we're just going to go ahead and you can see the index file is pretty much what we've been working with we just have an id of app and our entire application renders into there and then the rest is going to happen in the source if you want to look more at what's going on in the build you can see there's quite a few build files that you can kind of sort through but the short of it is is we're running webpack now and we are having webpack compile down what are called view files dot view files now you'll want to on your editor also install an extension that allows you to work with dot view files on visual studio code that's called v2r vetur i don't know why it's not called something more straightforward but vetur is the extension you want for visual studio code and this is basically the anatomy of a single file component you break out your template your script and your style into three separate tag based structures syntax highlighting works great this way for both your html and your javascript well also for your css so that's a lot cleaner and also things are broken out um you can see here that we can import a hello world component register that component and then we can spit it out in our template and you can arrange these however you want if you like your template down lower which is actually what i prefer or however you like it you can arrange it so let's go and look at this hello world component let's work with these uh single file components a little bit more here let's click in this whole world component you can see we're inserting all these links that we have here let's just erase some stuff and clean this up so here's our hello world component all we have to do is export default and object and that's our component configuration one important thing to note here in view is whenever you're using a child component the data cannot return just an object like you can do on the top level component on the top level component you say data you give it an object and that's all your values child components cannot do that there are some problems with pointers that you'll run into so if you don't really understand what those problems would be just know as a practice any child component anything that is not your very top level component when you define data run a function that returns an object of your data that's very very important so that's the pattern we're going to be using going forward so let's say we want to create two more components to add to this page i'm going to go ahead save here cleaned it out a little bit let's go ahead add two component files let's say new file we'll just call it module1.view and let's do a template and let's do a script tag and let's also do a style so our template is just going to spit out um h1 module one and then here's my script tag you can see when i have that feature set up then it automatically did the export default for me i'm going to leave that there that's all i need i'm not going to do anything smart with data for right now so there's my module 1 and let's save this as module 2 as well so now we have module 1 and module 2. we'll call that module 2. so now we want to run our hello world import those components let's go and import and now i can register those components components are going to be module one which is the same as doing module one since we're using es6 here make sure i add my comma so now i've registered module one and i can now use module one and i get that h1 that appears right there i can also pull in module two just the same let's pull in module two it's import module two and now we're scaling out our components pretty quickly and easily now we have to do is spit it out on the page so i can go module two now module one and module two are on our page nothing really magical happening there let's take a look at how the style works now so i can now define a style that has to do with my module i can go h1 color red and this is going to break i'm going to show you in a minute why so h1 is red for module 1 and h1 is pink for module 2. you'll notice that module 2 just overwrote module 1 and our app level module and that's because if you don't tell this to be scoped style it's going to be global style let's go and inspect this real quick you'll see what i mean you can see that we have h1 pink and h1 red they're overriding each other they're just standard styles so we do not want that uh instead what we want to do is we want to actually do a scoped style that's just for our component and all you do is add the scoped html attribute and so we're going to add that scoped there scoped there and now everything works exactly as we've expected so let's go ahead and look what's different now you can see that that rule is actually h1 for our object for just our module this module right here let's inspect this html you can see we have this data v and then some hash attribute which is being added so only h1s on our components get this style it's a really great rule so you can scope style very very easily and that's really really nice so don't forget about that scoped attribute and then again the other gotcha is you always want to make sure if you're defining data that you define data as a function that returns an object that's kind of your introduction to single file components one more thing to add and we can really start scaling out our application and that is how we handle routing with view router we'll do that next