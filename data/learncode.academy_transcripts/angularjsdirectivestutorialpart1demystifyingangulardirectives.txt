00:01 - okay so in my last video uh I gave an
00:04 - intro to angularjs and developing a
00:07 - single page application with it I'm
00:09 - going to throw a link here in the in the
00:11 - description and probably an annotation
00:13 - somewhere around here uh if you're not
00:15 - on mobile you'll see that and so in this
00:17 - one we're going to get into angular's
00:19 - most confusing yet most powerful feature
00:23 - and that is directives lots of people
00:26 - directives are kind of a black box to
00:27 - them like I kind of see it but it seems
00:29 - kind of confusing so we're going to just
00:31 - kind of in this is a lesson all to its
00:33 - own because directives are quite a quite
00:35 - a bit of stuff but at the end of the day
00:36 - you're going to find out they're not
00:37 - that confusing so let me kind of give
00:40 - you the premise of where it comes from
00:41 - let's say we've got this controller here
00:44 - and we're just kind of importing friends
00:45 - we got our friends list here and our
00:47 - friends
00:48 - Json so this is our friends uh HTML
00:52 - templating things so let's say for each
00:53 - friend we wanted to you know start
00:56 - adding some
00:58 - stuff
01:05 - and we're going to add our friend first
01:07 - name friend last name what else do we
01:08 - have in here friend age and tweets let's
01:11 - go
01:20 - span there we go so now we've kind of
01:22 - got that um and it's in an NG repeat uh
01:26 - but let's say we want to break this out
01:27 - into something more reusable that we
01:29 - don't have to it's reusable now cuz it's
01:32 - in an NG repeat but say we're going to
01:34 - use this thing all over the place might
01:36 - not be used in an NG repeat if I click
01:38 - on this friend then I want to reuse all
01:40 - the same code there just for the
01:43 - individual person uh what's actually
01:45 - going to make more sense is to make a
01:47 - directive in a lot of ways um or you can
01:50 - do an NG include template but in this
01:52 - case we'll just use a directive so we're
01:53 - going to make a directive called contact
01:56 - card um and so what I've done is I've
01:59 - Dei def defined an HTML 5 Element some
02:02 - of you guys really don't like calling
02:04 - things that so what you can do is you
02:06 - can just do a div like if you're not
02:08 - building a dedicated HTML 5 app you can
02:10 - do a div with an attribute of contact
02:14 - card and that will also work or if that
02:18 - if you guys are still wanting to be more
02:19 - compliant you can do data contact card
02:23 - um and support official HTML 5 data
02:26 - types since I like for it to feel cool
02:28 - I'm going to call it contact card there
02:30 - and we're going to move on and now you
02:31 - see we have nothing so let's go ahead
02:33 - and create our contact card directive
02:36 - going to create a new
02:39 - one and I'm going to call this one app.
02:44 - directives contact card this is just my
02:47 - module name this could be whatever you
02:48 - want it has no dependencies I'm going to
02:51 - go ahead and save you
02:55 - directives so now I've got my directives
02:57 - contact card let's go ahead and add that
02:59 - to to my build where all those things
03:02 - coming in right here add that to all my
03:05 - JavaScript build however you get it on
03:07 - the page is up to
03:12 - you okay so now it's in there and in my
03:14 - app I'm going to add this as a
03:16 - dependency uh for my app loading up and
03:19 - what did I call that I call that app.
03:21 - directives do contact card there we go
03:25 - so now it's going to require that to be
03:27 - loaded before the app boots up and still
03:30 - good don't think I have JavaScript
03:31 - errors nope we're good all right sweet
03:33 - so let's go ahead and build out this
03:35 - directive so when we have added contact
03:38 - card it is going to start looking for a
03:40 - directive called contact card except for
03:43 - it won't be looking for it hyphen space
03:45 - they be for it camel space so I'm going
03:47 - to go
03:49 - directive and I'm going to call it
03:51 - contact card like that so what angular
03:55 - is going to do is it's automatically
03:56 - smart enough to translate it from the
03:58 - hyphenated version to the camel cased
04:01 - version so I'm creating directive
04:03 - contact card and then I'm doing a
04:05 - function which is dependency injected so
04:07 - if I want to have this require any
04:09 - services or whatever this is a
04:11 - dependency injected function you know I
04:13 - can require my friend's
04:16 - Service uh which I did from my previous
04:19 - video uh you know I can require scope
04:21 - any of that stuff actually can't there's
04:23 - really no scope needed at this point um
04:25 - and what we're going to return is an
04:28 - object and that object is our directive
04:32 - the first thing we're going to get into
04:34 - is let's go
04:36 - restrict e so that way this thing can
04:40 - only be instantiated by using an element
04:43 - that's if I did restrict e that's this
04:45 - if I did restrict a that's attribute
04:48 - that's when I did
04:50 - div um contact
04:54 - card that will also work on data contact
04:58 - card so that's kind of what the restrict
05:00 - is about uh that's just so you can you
05:03 - know it's more or less for
05:05 - self-documenting purposes um I'm only
05:08 - going to call this thing as an element
05:09 - or as an attribute so you kind of know
05:11 - what to look for in your code I'm just
05:12 - going to say restrict e since I'm
05:14 - calling it as e
05:15 - here let's go on to our next thing and
05:18 - I'm going to go straight to
05:21 - controller controller is also dependency
05:24 - injected you can add whatever you want
05:26 - in here I can add in my scope um and I'm
05:30 - just going to have this thing do a
05:32 - alert so we know that this thing's
05:37 - firing there you go it alerts controller
05:40 - so we know that the controller is firing
05:41 - it fired twice because I'm doing an
05:43 - inine repeat for my two friends so the
05:46 - controller is already active I can have
05:48 - this do a console log
05:50 - of um
05:53 - controller there you go so it logged
05:55 - twice so our controller is working it's
05:58 - linking it's firing if you're not
06:00 - getting that to work either this name is
06:03 - not matching this name here um you're
06:06 - not defining it in the right way that
06:08 - it's restricting to or possibly you'll
06:10 - get an error here if you've not included
06:13 - the directive JavaScript on the page and
06:15 - the common thing that I do all the time
06:17 - is I forget to add my module my
06:20 - directive module as a dependency so it's
06:23 - loading but it's not loading in time uh
06:26 - or it's not requiring it to load before
06:28 - it goes in
06:30 - processes this templating that's usually
06:33 - the mistake that I make is I go ahead I
06:35 - I add the Javascript file I add the
06:37 - directive file uh but I forget to make
06:39 - it a dependency so you don't get any
06:41 - errors at that point because it's just
06:42 - saying hey we don't know what contact
06:44 - card is move
06:45 - on um so just make sure that you've
06:47 - added it in your app dependency whatever
06:49 - your module name is which is right there
06:53 - so just figured I'd reiterate that
06:55 - that's the kind of thing I did about 20
06:56 - times when I was first making directives
06:58 - because you just don't get error about
06:59 - it takes you a while to figure out
07:00 - what's going on so let's say I want to
07:02 - pass some information into this
07:05 - directive um how am I going to do that
07:08 - uh the biggest way you'll do that is
07:09 - through attributes I'm going to say data
07:12 - equals and I can pass it in any kind of
07:15 - anything in this case I'll just call it
07:16 - friend which is coming from up here so
07:19 - it's basically taking anything from my
07:21 - current scope and it's passing it in
07:23 - through an attribute and now we can
07:25 - access this through
07:27 - scope and the scope op object I can grab
07:31 - um
07:33 - data is and I do equal and that is going
07:36 - to look for an attribute called Data so
07:40 - that's going to say data is equal and I
07:42 - can go grab data so now scope data in my
07:46 - controller I can
07:50 - go will be my friend for each person let
07:53 - me just refollow that again just in case
07:56 - I didn't explain it super well I'm
07:58 - passing in the friend object to the data
08:01 - attribute data is looking for the data
08:04 - attribute let's say I wanted this to be
08:06 - called something else
08:08 - um my data but I still want to look to
08:11 - the data attribute I can do that and
08:14 - that didn't work why didn't that
08:17 - work I don't know I usually keep it
08:19 - named the same thing honestly because it
08:22 - just gets really confusing honestly if I
08:23 - was doing this I would call it
08:26 - friend and then I would call this thing
08:28 - friend cuz it really helps to keep the
08:31 - naming conventions always the same
08:32 - you'll get stuff really confused all the
08:35 - time oh that's what it is I'm console
08:37 - logging scope data I did it
08:40 - right my data
08:44 - data back to example number one so I'm
08:46 - still calling it data here now I'm going
08:49 - to call it my data in here for whatever
08:50 - reason because I want to confuse myself
08:52 - and everybody watching and it still
08:54 - works so bad way to do it but that's
08:57 - kind of how you can
08:59 - faga with the stuff I'm going to for the
09:01 - sake of Simplicity call it friend and
09:05 - I'm going to call it
09:08 - friend and we're just going to keep
09:11 - everything
09:12 - similar okay and there's a couple things
09:14 - equals means it's The Binding is going
09:16 - both ways um and there's some other
09:18 - binding characters you can pass in
09:20 - instead of equals uh you can make the
09:23 - binding just go one way or you can make
09:24 - the binding go two ways you can look at
09:26 - the angular docks for that uh the
09:29 - majority of time you're just going to
09:30 - want to go equals so that way if you go
09:32 - changing your friend here it's going to
09:34 - fly back up the chain and it's going to
09:36 - change it in the
09:37 - controller uh for your home controller
09:39 - usually that's what you want to do you
09:41 - want it to always be bound both ways
09:43 - still so so there's my controller now I
09:46 - can add my own
09:49 - template and I can
09:52 - go
09:55 - H1 friend. first
09:58 - name
10:03 - make sure I have my comma there you go
10:05 - so now I've got my own templating going
10:07 - on that's really we're going to want to
10:09 - use a template URL just like we do for
10:11 - everything else so I will go
10:14 - templates um
10:17 - directives and then this was what is
10:19 - this contact
10:22 - card contact card. HTML let's go make
10:25 - that
10:28 - directives
10:36 - contact card HTML so now I can take that
10:38 - templating that I had I think I already
10:40 - erased it didn't I yep okay we'll just
10:43 - go
10:46 - H1 and now we're working again so now
10:49 - I've kind of got this is my directive
10:52 - that matches up to my actual directive
10:54 - JS so now I can start building my
10:55 - reusable code we've kind of gone through
10:59 - the whole steps that we need to
11:06 - take so now this thing is completely
11:08 - reusable I've got my directive it's
11:11 - going through the controller uh let me
11:13 - kind of show you some other things and
11:15 - now my HTML looks super clean and
11:17 - actually it's super it really makes a
11:19 - lot of sense actually one thing that I
11:21 - like about if you're using an HTML 5
11:24 - only app uh being able to Define stuff
11:27 - like this really kind of makes it really
11:30 - clear and self-documenting you know
11:32 - exactly what's going on
11:34 - so that's kind of how that works let's
11:37 - go and go through some options that we
11:39 - can use here so let's say we want to add
11:41 - some HTML into our directive declaration
11:46 - uh let's say I want to add my own
11:48 - H1 and even do some scoping stuff
11:56 - here um you'll notice that doesn't show
11:59 - up if I had hyphens or whatever
12:01 - nothing's showing up because by default
12:04 - anything in this directive gets
12:06 - completely deleted so if you want to
12:08 - pull that in then you use the transclude
12:13 - true
12:15 - flag and it still doesn't get pulled in
12:17 - because it doesn't know where to
12:18 - transclude it because you already have
12:19 - your template so what you're going to do
12:21 - in your template is you're going to add
12:23 - any kind of element and you're going to
12:25 - add the NG
12:27 - transclude
12:29 - attribute and there you go now before my
12:32 - friend name gets printed and I'll change
12:34 - this to
12:37 - H2 uh now before my friend name gets
12:39 - printed it's going to transclude so I
12:41 - can put this at the bottom and that
12:43 - automatically gets put below now every
12:45 - time so that's kind of where that comes
12:48 - in uh if you want to be able to custom
12:52 - tweak some part of your contact card
12:55 - every time you declare it that's how you
12:58 - would do that that another way you can
13:00 - add custom
13:01 - tweaking is uh you can add your own
13:05 - attributes uh let's let's say that H1
13:08 - won't always be called contact
13:12 - card I can make sure that title's called
13:14 - Contact there and let's
13:19 - just that'll be called title and then
13:22 - I'm going to pull in title as well
13:27 - here
13:29 - so now scope. tile is going to be called
13:32 - and I need to make sure that this
13:35 - is a a defined as a string there we go
13:40 - because uh you'll notice all these
13:42 - attributes are getting looked at as
13:45 - evaluated objects so this isn't a string
13:47 - of friend anymore it's looking for an
13:49 - object called friend so this did not
13:51 - work at first because it was looking for
13:52 - an object object called capital c
13:54 - contact uh so I have to make sure I wrap
13:57 - it in string quotes and so now I can
13:59 - instantiate it with a different title
14:01 - every
14:02 - time um real time or I can pass it in
14:05 - you know an object so that's kind of
14:07 - where that comes in let's go back to my
14:10 - directive so we've got our restrict
14:12 - we've got our scope this is how we pull
14:14 - stuff in based off of attributes we got
14:16 - our transclude equals true that's if we
14:19 - want to pull some stuff in I don't
14:20 - really need that
14:22 - anymore we've got a replace option let's
14:25 - go look at the Dom element that's
14:27 - getting created here you'll notice our
14:29 - Dom element is still called contact card
14:32 - I don't really want that I want to call
14:34 - this thing I I want to make sure that
14:35 - this stays as a div keep it a little bit
14:38 - more
14:40 - compliant you can go replace true and
14:42 - this will
14:44 - fail should give me an error now yeah
14:47 - it's going to give me an error right now
14:48 - because you have to have at least one
14:50 - root element if you're going to do this
14:52 - so I'm going to go to my contact card
14:54 - HTML I'm going to make sure I wrap
14:56 - everything in a div and so now now
14:59 - instead of contact card being the
15:01 - element for that it's going to be called
15:04 - div there we go so now if I inspect this
15:06 - over here now instead of my element
15:09 - being called contact card it's called
15:11 - div so I usually do that just kind of as
15:13 - a safe measure um and that way I can
15:17 - still use my HTML 5 elements as much as
15:19 - I want uh for clarity uh and then
15:23 - they'll get substituted out for a more
15:25 - compliant div so that's something I'll
15:28 - do
15:29 - kind of always use replace and then
15:31 - honestly this is about as complicated as
15:34 - stuff gets once again this controller is
15:37 - dependency injected so you can insert
15:39 - anything you want
15:41 - to you can uh do an
15:57 - interval so you can pull in any of your
15:59 - dependency injected values and that'll
16:01 - all work this is dependency injected as
16:04 - well um and let's do the link function
16:07 - and that's probably about all you need
16:09 - to know to write a whole lot of
16:11 - directives uh there's also a compile
16:13 - function which you probably won't need
16:14 - to know unless you're doing some
16:15 - complicated stuff let's say that we
16:18 - wanted to do some stuff to this Dom
16:20 - element we wanted to bind and listen to
16:23 - Dom events at that point we'd add a link
16:26 - function Now link function is not
16:28 - dependency injected you're going to get
16:31 - three um you're going to get three
16:33 - arguments here you're going to get the
16:34 - scope so a common thing is to not add a
16:37 - dollar sign there so you know that this
16:39 - is actually just getting past as the
16:41 - first argument all the time you're not
16:42 - dependency injecting it second one is
16:45 - elements and the third one is
16:47 - attributes so if I go
16:52 - here I'm always going to get uh the
16:56 - scope I'm going to get my J query
16:58 - element if you're running jQuery it's
17:00 - automatically going to be wrapped as a
17:01 - jQuery element if not you're going to be
17:03 - getting the jQuery light angular version
17:06 - uh and then the attributes so what you
17:08 - can do here is I can
17:19 - go make sure I have this so now whenever
17:21 - I click my elements it's going to alert
17:23 - click and so that's kind of if you want
17:25 - to make your directive do some smarts
17:28 - stuff that's going to be where you do
17:30 - that um you can also get the ID of your
17:33 - element that way if you're not using
17:35 - jQuery it passes you your
17:37 - attributes um so I can automatically get
17:41 - my attribute ID attribute from here
17:44 - which is not
17:49 - defined I'll just make this the index
17:52 - since we're doing an NG
17:57 - repeat
18:00 - and that's always calling an index uh
18:02 - because it's a
18:06 - directive I don't exactly remember how
18:08 - to do that I haven't done it in a while
18:10 - but uh that's pretty much it that's how
18:12 - you use a link of if you need to do any
18:16 - Dom manipulation so hopefully that helps
18:19 - you understand directives let's kind of
18:20 - recap real quick uh restrict this is for
18:24 - how you're pulling it in scope this is
18:26 - for where stuff's coming from
18:29 - uh this is how you get all your data in
18:30 - these can be objects these can be values
18:33 - you define Real Time with strings uh
18:36 - they can be as complicated as you want
18:38 - them to be and then controller you're
18:40 - defining your own controller here uh you
18:42 - could give this its own controller name
18:45 - or it's usually you want to find the
18:47 - controller right here pull your
18:49 - templating url that's about it
18:50 - directives are not really that
18:51 - complicated once you get past building
18:53 - your first one or two hope you enjoyed
18:55 - this tutorial and have a great day