00:01 - okay so in this video we're going to be
00:02 - handling JavaScript async operations
00:05 - which is uh a really confusing to a lot
00:08 - of developers on how to do it in a good
00:09 - clean way and it can get pretty
00:11 - complicated you'll have to uh excuse me
00:14 - if I sound like I'm about to run out of
00:15 - breath at some point because I have a
00:18 - slightly bruised rib which means that I
00:20 - can't breathe in fully so uh but the
00:22 - code must go on so let's get into async
00:26 - JavaScript um and the two second
00:28 - description of that is for those of you
00:30 - are newer to JavaScript async is anytime
00:32 - you start something that completes later
00:34 - on JavaScript allows you to say hidden
00:37 - API and then not lock up your program
00:40 - you can actually say start the API and
00:42 - move on with my code and when the API
00:45 - returns our response say our tweets from
00:48 - the back end then we can continue
00:51 - processing code and we didn't lock up
00:53 - our application the users click events
00:55 - and drag events are all still going to
00:57 - get processed so that's what async means
00:59 - that's why JavaScript is awesome but it
01:01 - can also get complex so I'm going to
01:03 - give you four ways of handling this
01:05 - there's the good way the better way the
01:08 - best way and the awesome way which is
01:10 - the brand new way um and let's get into
01:13 - it this plunker address will be in the
01:15 - description so you guys can go look at
01:17 - this code later um and so here we go
01:20 - let's look at the first way of doing
01:21 - three async operations all in a row so
01:24 - I'm turning on the callbacks these are
01:26 - all all pieces these code are going to
01:27 - do the exact same thing you can see
01:30 - again when I run it it fires there you
01:32 - go got profile got tweets got friends so
01:35 - every time something comes back it says
01:37 - this and then spits out its information
01:39 - let's look at that code uh for this
01:41 - example we're going to use jQuery
01:42 - because everybody knows jQuery if you're
01:44 - on the back end doing no JS the exact
01:46 - same principles apply um and so let's
01:50 - get into it this code right here is the
01:53 - Callback way of doing it it's a mess
01:55 - just opening this makes you want to run
01:57 - for the ibuprofen cuz you feel the
01:58 - headache coming off and it's only three
02:01 - operations it's not this super complex
02:03 - thing going on we're just doing three
02:05 - things in a row we're F firing a get to
02:09 - the profile. Json since we don't have a
02:11 - backend we can't really hit a profile
02:13 - API so I just have a static Json file
02:16 - here that will give us the exact same
02:18 - response um so we're getting the profile
02:20 - Json on success of that we are you know
02:23 - doing the two things we need to do
02:25 - saying hey got profile and spitting that
02:26 - out and then we're moving on we're
02:28 - starting up the next a request which
02:30 - gets our tweets Json uh tweets passing
02:33 - it our ID um and so then success happens
02:37 - by the way this doesn't really do
02:38 - anything since we don't have a backend
02:40 - server but in theory the backend would
02:42 - take our ID and give us our tweets um
02:44 - but no matter what we do it's always
02:46 - going to give us this tweets Json um so
02:49 - then it fires this and then on the
02:51 - success of that we do our two things and
02:52 - we start up our third Ajax request and
02:55 - GH I just can't go on um it's bad for
02:58 - several reasons we've got the pure
02:59 - Pyramid of Doom uh wh don't want to Fork
03:02 - don't know why I hit the button we have
03:03 - the Pyramid of Doom going on right here
03:05 - as you can see Pyramid of Doom um and
03:08 - it's also called call back hell it's
03:09 - just a mess this is a very bad bad shape
03:12 - in JavaScript you don't want to see that
03:14 - um and then we're also having to handle
03:16 - our error here handles the error for
03:18 - this Ajax request here handles the error
03:21 - for this Ajax request and here we're
03:23 - having to handle errors at each step of
03:25 - the way this is terrible so let's look
03:27 - into how we can clean this up I'm going
03:30 - to kill this script turn this one on and
03:32 - the exact same thing just took place in
03:35 - the exact same way let's look at the
03:37 - code for this this code is called clean
03:39 - callbacks we can move a next step
03:41 - forward um by abstracting out the
03:44 - callbacks into their own function so
03:46 - here we fire up our first Ajax and then
03:48 - we're going to for success we're going
03:50 - to run the G tweets function and for
03:52 - error we're just running the handle
03:54 - error function right away you notice it
03:56 - looks a lot cleaner it goes top to
03:59 - bottom and instead top to inside to
04:02 - outside mess so here we're able to go
04:05 - fire our first one get tweets get tweets
04:07 - does its two things kicks up our next
04:10 - Ajax which we'll F we'll do get
04:12 - mentioned user um and then handle the in
04:15 - any errors so you'll notice we're able
04:17 - to reuse our handle error function
04:19 - that's a lot cleaner and also it kind of
04:22 - just goes in order do this then get our
04:25 - tweets then get mentioned user and on
04:28 - the success of get mentioned user I
04:29 - didn't abstract this function out into
04:31 - its own we're just going to do our two
04:33 - final things and be done it's still kind
04:36 - of messy I still don't like this in a
04:39 - lot of ways it's just a lot of repeated
04:41 - code it's a lot of code we don't need to
04:42 - do let's get into the best way of doing
04:45 - this that is better let's look at best
04:48 - going to kill you turn you on prove that
04:50 - this code does the exact same thing yep
04:52 - let's look at promises promises are
04:55 - things a lot of developers don't
04:56 - understand yet so I'm going to show you
04:57 - the code wow that looks a lot cleaner
04:59 - that looks a lot better and it's also
05:01 - confusing if you guys don't know it so
05:03 - let's look real quickly over to this
05:05 - file where I explain what promises are
05:08 - um so every a promise basically
05:11 - represents a future value it's a
05:13 - standard Syntax for anything that has a
05:17 - delayed response JavaScript uses
05:20 - promises pretty much every good Library
05:22 - every Library that's built correctly
05:24 - every every framework that's built
05:27 - correctly should use promises should
05:29 - return a promise for anything that is
05:31 - going to start an operation and give a
05:33 - value later so Ajax starts an operation
05:36 - starts talking to backend and if you
05:38 - actually return the value from J career
05:40 - Ajax say I do ver get profile then this
05:43 - is actually a promise or a deferred
05:46 - object get profile doesn't stand for
05:48 - anything yet it's just a promise it's a
05:51 - it remembers what the state of this Ajax
05:54 - request is so when the Ajax request
05:57 - moves on at some point that Ajax request
05:59 - is going to go um it's either going to
06:03 - resolve it say when the the get is
06:06 - successful it's going to resolve it with
06:08 - your profile um data and so then that
06:12 - gets fired to a then which we'll get
06:14 - into a second it's either going to
06:16 - resolve it or it's going to reject it if
06:17 - it fails it's going to reject it with
06:20 - your xhr objects your status your error
06:23 - everything you're used to seeing in
06:24 - jQuery so jQuery either resolves it or
06:27 - rejects it depending on what they do it
06:30 - will get passed to your then function
06:32 - basically if it's a promise it has a
06:35 - then function to it that's pretty much
06:37 - what you need to remember is so you can
06:39 - go get profile. thenen so thenen
06:42 - receives two things a success function
06:45 - and an error function if it was
06:47 - successful if it was resolved then it
06:49 - will run this with whatever it resolved
06:52 - it with as your argument right there if
06:54 - it was an error then it will run your
06:56 - error function with whatever the error
06:58 - arguments were so that's basically what
07:01 - a then or a Venable object is so when
07:04 - you run jQuery you can actually store
07:06 - that promise deferred Venable object as
07:10 - a name so there's some cool things that
07:13 - happen with this one is you notice as
07:15 - soon as you don't have to do success and
07:17 - error uh configuration you can use the
07:19 - simpler syntax of
07:28 - jquery.com ESS function my error
07:30 - function now you'll notice right away
07:33 - this is not necessarily any cleaner or
07:35 - better than doing a success and an error
07:39 - function in jQuery if you're only
07:41 - running one thing there's really not
07:43 - much of a difference past it success and
07:45 - error um in your object configuration up
07:48 - here and call it a day but where then
07:51 - really begin to shine where promises
07:53 - really begin to shine is when you have
07:54 - to chain things because uh the then
07:57 - object whatever you return from that
08:00 - gets passed to the next then you can do
08:03 - then do then do then and whatever this
08:06 - then function returns we'll get passed
08:08 - to the next then function and so on and
08:11 - so on the cool thing is is if you return
08:14 - another promise it's going to wait for
08:17 - that promise to fulfill before firing
08:19 - the next then function so we're going to
08:21 - run get profile Json it's going to wait
08:24 - even though we sent it a then uh do then
08:27 - it's going to wait until profile Json
08:29 - has been gotten then it'll fire the then
08:32 - function uh passing it the profile and
08:35 - then we're going to start up our next
08:36 - Json and we're going to return that
08:38 - promise so then it's going to wait on
08:40 - that promise once that promise succeeds
08:43 - it'll fire the next then function with
08:46 - our friend here and another thing you
08:48 - can do is the error Prof the error uh
08:52 - functions will also chain on down so we
08:55 - all we have to do is add one error
08:57 - function here at the end so if this
08:59 - first one errors it'll skip all the
09:02 - others and fire the last error function
09:05 - if this one errors then it'll skip down
09:07 - to the last error function basically no
09:09 - matter what you do the last error
09:11 - function gets the error now earlier
09:14 - earlier versions of jQuery I believe do
09:16 - not do this correctly but the latest
09:19 - version of jQuery does do this correctly
09:21 - so that's pretty much what A promise is
09:25 - uh you can see that I can also do
09:26 - something like this let's say what if
09:27 - you want to do several things at once
09:29 - every promise Library gives you methods
09:31 - to do multiple things at the same time
09:34 - so here we can say let's get profile
09:37 - let's fire that up let's also start the
09:39 - get friend process so they're both
09:41 - running right now and we can do a jQuery
09:44 - do when and put them both in so it's
09:46 - going to wait for both of these to
09:47 - succeed and then it's going to fire the
09:50 - function and you can see that it's
09:53 - giving us our profile and our friend
09:55 - right here and these are arrays of the
09:58 - arguments that would normally be passed
10:00 - to a success function so if you'll
10:02 - remember a successful jQuery thing
10:06 - passes gives it your data and then it
10:09 - gives it your status and then it gives
10:11 - it your xhr object your jQuery xhr
10:14 - object so for the data we just want to
10:16 - get profile. Z so when they've both
10:19 - completed then we can get our profile
10:22 - right here and we can get our friend
10:24 - right there and then handle any errors
10:26 - that were passed on from either of the
10:29 - if any of them fails then we consider it
10:31 - a failure so jy. when is awesome uh
10:36 - Bluebird has that Q has that when has it
10:39 - lots of times they're like they're
10:40 - considered doall I believe Bluebird is
10:43 - is promised. all when is
10:46 - when.all um and I believe Q is q. all um
10:50 - and so that's pretty much what that is
10:51 - let's so let's look back at our promises
10:54 - JS um so you see here we're getting our
10:56 - profile Json and then we're we're
10:59 - running this do the two things we need
11:00 - to do and return the get tweets Json
11:05 - it's going to wait on that it's going to
11:06 - fire this then uh and then it's going to
11:09 - do the two things we need to do and
11:12 - return the friend Json promise so then
11:15 - it's going to wait on that promise and
11:17 - fire the last thing which is to mention
11:19 - that our friend has been received and
11:22 - then as the last thing here I'm going to
11:24 - do the handle error function so if any
11:26 - of these errors anywhere along the way
11:29 - then the error will get handled it will
11:31 - fire this handle error function so there
11:33 - you go that's promises it's way nicer
11:37 - way less code way more stable um but if
11:40 - you look at it and you're honest with
11:42 - yourself it's still kind of messy um it
11:46 - still is just a lot of thenen return.
11:49 - thenen it still feels like programming
11:52 - should make more sense so let's look
11:54 - into a new thing which is coming in
11:57 - JavaScript 6 es6 Harmony which you can
12:00 - actually start using today using Google
12:03 - Tracer um which will convert your
12:06 - JavaScript to es6 Harmony um let's look
12:10 - at generators you can see I'm going to
12:11 - turn this on the only thing you have to
12:13 - do to start using Tracer is you have to
12:16 - include Tracer the Tracer JavaScript in
12:18 - your page and then whatever JavaScript
12:20 - you enter you just have to give it the
12:22 - type of module so your browser won't run
12:24 - it but Tracer will pick up on it Tracer
12:26 - will convert it and then it will run so
12:29 - let's look at generators. JS hold your
12:32 - breath CU this is going to be really
12:33 - cool here we go profile there's this
12:37 - funky yield word in here um we're
12:39 - basically getting the profile and then
12:41 - we're doing something with it and then
12:43 - ver tweets equals get tweets and then do
12:45 - something with it and then ver friend
12:48 - equals that and then do something with
12:50 - it and you're done I mean look at that
12:52 - that is clean that is readable that is
12:55 - beautiful the only thing that might look
12:58 - confusing using at first is this command
13:00 - cuz we're using a promis co-routine
13:02 - object we're using what's called
13:03 - generators es6 generators um and my next
13:07 - video is going to describe those in
13:09 - detail and show you how awesome those
13:12 - are and uh but basically you're able to
13:17 - yield this thing anytime you put yield
13:19 - it's going to wait on a promise so we
13:21 - can treat it just like a normal thing we
13:23 - can say their profile equals this and
13:26 - move on but it's actually going to wait
13:29 - for us to get the profile before moving
13:31 - on and then later on we can sa air
13:33 - tweets equals this and it's going to
13:35 - wait for the tweets to actually fulfill
13:37 - before we move on the beauty of it all
13:39 - is it's still happening asynchronously
13:41 - it's not blocking your code it just
13:44 - looks like it's blocking your code so it
13:46 - makes a lot of sense I'll leave you
13:48 - there for that let's go into generators
13:51 - in the next video which comes out
13:53 - tomorrow um and the generators video
13:56 - we're going to cover a lot of these the
13:57 - cool ways that these es6 generators are
14:00 - working behind the scenes hope this
14:02 - video made sense for you