00:00 - all right by popular request I'm going
00:02 - to be talking about es6 yes that's
00:04 - JavaScript Harmony the next incarnation
00:07 - of JavaScript I've been using it uh for
00:10 - the better part of a year just day in
00:11 - day out on projects and I'm loving it
00:13 - I'm absolutely never going back I'm
00:15 - using it both in node um on back end and
00:19 - also in react and angular stuff on the
00:21 - front end and whatnot so it's it's
00:23 - tremendous and I would highly recommend
00:25 - anyone get into it so going to kind of
00:27 - cover first of all the features and also
00:29 - along the way just what I think the most
00:32 - useful aspects and maybe some patterns
00:34 - of using those features are if I feel
00:36 - like this video is getting long-winded
00:38 - we'll just break it up into two um so
00:40 - let's go ahead and get started here
00:41 - first of all if you're wondering how do
00:43 - I transpile or actually how do I write
00:46 - es6 and have es5 safely in the browsers
00:49 - um you're going to want to use babeljs
00:52 - doio um definitely is my favorite
00:54 - transpiler um and it's really seamless
00:57 - if you already have any kind of build
00:59 - system going on that's compiling SAS or
01:01 - minifying JavaScript it's pretty much
01:03 - effortless to add in Babel and then go
01:06 - um es6 down to five or es7 down to five
01:09 - Babel even supports some es7 features
01:11 - which are great um the other big players
01:13 - Google Tracer Trace schah whatever the
01:17 - French would say with that word um and
01:19 - that's also big I feel like Babel is you
01:22 - know really kind of become the main guy
01:24 - with transpiling javascripts es6 so
01:27 - babeljs is my recommendation go for it
01:30 - you'll like it let's get into it so uh
01:32 - kind of some great es6 features here my
01:35 - favorite the one that I hands down use
01:37 - day in day out is
01:38 - destructuring I actually added
01:40 - destructuring to my Mac dictionary
01:43 - because it didn't know what that word
01:43 - means and so basically let's say you've
01:45 - got an object called
01:47 - Foo and we've got bar is one BOS is
01:53 - two uh and then you can basically just
01:55 - destructure those out so instead of
01:57 - going there bar equals food
02:00 - bar and ver BOS equals
02:03 - f.b I can just go ver bar
02:08 - Bas equals Fu and that's basically the
02:11 - same thing so now I have two variables
02:12 - that have been created on my page I can
02:14 - do you know alert bar alert who uses
02:18 - alert anymore um and so that's very very
02:21 - cool I could just snatch out bar you
02:23 - know leave boss for later this is very
02:25 - useful for when you have large objects
02:28 - and you just want to snatch a value or
02:29 - two out of it or if you have objects
02:31 - with very large names very large name
02:35 - and you just do not want to call that
02:37 - all the time you can just snatch a value
02:39 - out of it uh create a local variable or
02:42 - something so very very nice you can also
02:44 - do this with um
02:47 - arrays tens let's
02:51 - see we're doing arrays
02:54 - here let's do first person second person
02:56 - third person
02:58 - tenses and so then I could go there
03:00 - first
03:04 - person
03:05 - equals uh what I call that
03:08 - tenses so then it's just basically going
03:10 - to snatch out uh the first argument of
03:12 - my array and when I'm destructuring I
03:14 - usually put a space on either side to
03:16 - kind of visually give you that cue that
03:18 - I'm not creating an array I'm
03:19 - destructuring an array that's kind of
03:20 - one thing I found helpful whether you're
03:22 - destructuring objects or destructuring
03:25 - um arrays it's helpful to have that
03:27 - space on either side because it kind of
03:29 - gives you brain this visual CU oh we're
03:31 - destructuring something here so this
03:32 - would automatically grab number
03:35 - one and this would automatically grab
03:38 - number two so first person is me second
03:39 - person is you and where this is really
03:42 - helpful uh is maybe if you're doing a
03:45 - promise.all so I'm giving it several
03:47 - promises promise
03:53 - one you know so that's going to give me
03:55 - some responses then I can do a
03:58 - then so I have all my results in an
04:00 - array so I can go there results
04:04 - one I can actually destructure
04:09 - that equals results and there's a better
04:12 - way of doing that which I'll get into
04:13 - later on because I can actually
04:14 - destructure these arguments as well
04:17 - which is very cool I can actually go
04:18 - I'll just do it now I can actually go
04:21 - results one results
04:23 - two uh and then I actually have results
04:25 - one and results two available here so
04:27 - it's going to destructure that array out
04:29 - out straight into the variable names I
04:32 - desire to be so it really saves a lot of
04:34 - code what you'll find out is most es6
04:36 - features are not so much new features
04:38 - the most useful parts of es6 are not so
04:41 - much that they're new functionality they
04:43 - just really improve the day-to-day
04:45 - coding experience uh they really make
04:47 - JavaScript a lot of what the language
04:49 - has been lacking for a long time um and
04:53 - so they just it's just much more
04:54 - enjoyable it's what coffee script tried
04:56 - to do a while back but became too much
04:58 - of its own Lang to to take complete
05:01 - mainstream adoptions so I won't get into
05:03 - that uh argument there but let's say you
05:05 - can also destructure objects this is
05:07 - actually very useful so let's say FU
05:09 - equals
05:10 - 2 I can actually go I'm building an
05:13 - object and let's say bar equals one and
05:16 - I could go Fu equals 2 well I don't have
05:18 - to do that if I want it to have the same
05:20 - name and the same value as Fu I just
05:22 - type in Fu and that's basically the same
05:25 - as going Foo two so it's going to say oh
05:28 - does the foo variable exist it does
05:30 - exist let's print it out and print its
05:32 - valuable uh value so that's really nice
05:35 - if you're calling functions let's say
05:37 - I'm calling some
05:39 - method um and want to give it an object
05:42 - of let say I've got
05:49 - name got my name and my age and I'm have
05:52 - to pass those in well I can just go name
05:53 - age and that's going to pass in that
05:58 - object uh I
06:03 - will I basically just made that object
06:06 - so it's much cleaner syntax uh for
06:08 - spitting out the exact same thing again
06:10 - just very helpful um and you can also
06:14 - go you can also generate your own keys
06:18 - so I could
06:19 - say name equals
06:23 - will I could go
06:27 - name plus with Plus
06:32 - name I I don't find this one very useful
06:34 - I think I've used it once or twice is
06:38 - some value so that's basically the same
06:41 - as
06:42 - going name Will which you really can't
06:45 - do U it's just it's really just one of
06:47 - those use cases you couldn't do it um
06:51 - unless you wanted to just create an
06:52 - object first it's kind of how you'd have
06:55 - to do it before es6 then you'd have to
06:56 - go object name
07:00 - so you have to kind of do this second
07:03 - step equals some value so now you can
07:06 - actually Define that when you're
07:08 - defining the object up here you can do
07:10 - that exact same um bracket
07:13 - notation so that's very helpful as well
07:15 - so you can destructure stuff um let's
07:17 - look at destructuring arguments because
07:19 - this is a very very useful feature let's
07:22 - say I have a function for let's
07:24 - calculate BMI
07:26 - here we need weight to do that we need
07:29 - height
07:30 - all right so there's my function and
07:32 - then
07:34 - BMI what is that weight divided by I
07:38 - think the square of your height and this
07:39 - all has to be metric or something like
07:41 - that but I'll just pretend it's metric
07:44 - already so there we go so that's my BMI
07:47 - uh some guy down here calls it Cal
07:52 - BMI say it already exists somewhere okay
07:55 - so that's going on let's say now we're
07:56 - going to add a call back feature so I
07:58 - can also call that back
08:01 - if call
08:04 - back Mei so that's going to pass in uh
08:07 - and then this guy is going to do the
08:10 - exact same thing but he's also going to
08:11 - give it a callback function that does
08:14 - something with that value uh then let's
08:16 - say at some point well now we want to
08:18 - enter in a Max here so you can also
08:21 - enter in a Max um and some of you guys
08:23 - are seeing where I'm going this guy
08:25 - needs to enter in a Max of 25 so if it's
08:27 - over the max if uh BMI is over Max then
08:34 - we're going to console log U that your
08:36 - weight is too high you're
08:39 - overweight so that of course then
08:42 - creates this problem because we're not
08:43 - passing in a Max here so we have to pass
08:45 - in null and you basically end up with
08:48 - these arguments that are these functions
08:51 - uh that are kind of hard coupled to the
08:54 - order of your arguments which can make S
08:57 - for some really frustrating situations
08:59 - sometimes so what we could do instead is
09:01 - we could pass in an object once again
09:03 - we're going to do that exact D
09:04 - structuring we've done we're basically
09:06 - going to create a new object we're just
09:08 - doing the object as a one thing which
09:10 - would commonly be called something like
09:11 - opts right so then all throughout your
09:14 - BMI you're going to say if ops.
09:17 - callback you know and stuff like that
09:19 - you're going to do ops. height ops.
09:21 - weight well now you don't have to do
09:22 - that you can just kind of destructure
09:24 - them coming
09:26 - in uh which my syntax is looking weird
09:29 - on this but that is correct we can
09:31 - totally do this uh we're actually
09:33 - pulling in weight height Max call back
09:36 - and I'm just going to say Max has a
09:38 - default of 25 I can do default arguments
09:40 - which is very nice so this Max is going
09:43 - to be 25 if it's undefined um so then
09:47 - call back's going to be there so this is
09:49 - very nice and then I can do this exact
09:51 - same thing here I don't have to worry
09:52 - about Max anymore I'm passing in Max as
09:57 - undefined and I'm passing in a call back
09:59 - right there uh so that's really nice
10:02 - basically it doesn't the order doesn't
10:04 - matter anymore I could totally move
10:06 - these orders around
10:08 - here uh weight height it doesn't matter
10:11 - I'm going to pull them all in correctly
10:13 - uh another thing that I can do is I can
10:14 - also kind of change the the naming of
10:17 - these so I want weight to come in as W I
10:19 - want height to come in as H so now
10:21 - you're going to come in as W you're
10:23 - going to come in as H um I going and
10:26 - then there's Max so that's fine so
10:28 - that's another cool thing is you you can
10:29 - destructure them you can destructure
10:31 - them with default values this also works
10:33 - when you're just destructuring objects
10:34 - somewhere else U more and more I find
10:37 - myself converting interfaces to
10:40 - destructuring objects when there's
10:42 - multiple arguments I feel like it's just
10:44 - cleaner it's less error prone um it's
10:48 - just really nice it makes for nice code
10:50 - uh so that's good let me show you one
10:52 - more thing and then we'll go ahead and
10:54 - stop this video and get into another one
10:56 - so you can kind of learn spend some time
10:58 - get comfortable with these move on and
10:59 - that's template strings love template
11:02 - strings uh so some something you find
11:05 - yourself doing all the time is uh my
11:08 - name is Will and then you have to say
11:10 - greet hi my name is and then plus name
11:17 - plus and I like to party then you're
11:21 - like oh well now party has to be
11:23 - something else so thing
11:26 - equals
11:27 - party now you have to do I like
11:31 - to and then you have to do thing and
11:34 - then you have to do plus and then you
11:35 - have to add your period it it's really a
11:37 - mess and then of course you find out ah
11:39 - I left my space out I got to add my
11:40 - space um and so that's the kind of thing
11:44 - that is really annoying and then of
11:46 - course multi-line oh let's not even get
11:48 - into multi-line cuz then I have to add
11:51 - that then if I want it to feel like
11:52 - multi line then I got to do all these
11:55 - tabs yuck so that's something we don't
11:58 - like to do um and of course template
12:00 - strings really fixes that I can just
12:03 - go cre equals you do a back tick instead
12:06 - which of course looks and feels very
12:08 - strange at
12:10 - first and my syntax highlighting has not
12:13 - picked this up let me see if I
12:20 - can let's see if JavaScript picks it ah
12:22 - my syntax highlighting doesn't have this
12:24 - Adam has much better es6 highlighting I
12:27 - usually use Adam when I'm doing ES six
12:30 - uh but oh well uh let's see so hi my
12:32 - name is and then I can go name which
12:36 - kind of coffee script dis if some of you
12:38 - guys have used coffee script before
12:39 - dollar sign in those brackets basically
12:41 - means look for that variable pop that
12:43 - variable in and I like
12:46 - to
12:49 - thing there we go it's done add your
12:52 - exclamations do whatever oh yeah and
12:53 - guess what you can also do multiple
12:55 - lines and I like to party so there you
12:59 - go that's awesome template strings are
13:02 - tremendous uh let's get into a few more
13:05 - features but I'll give you a breather so
13:07 - you can recap this section if you want
13:09 - and we'll get into some more extremely
13:10 - useful features in the next video