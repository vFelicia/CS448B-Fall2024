00:01 - okay in this video let's look at the
00:02 - second pattern for handling
00:05 - instantiation of modules and inheritance
00:07 - of modules in the last video we looked
00:09 - at the
00:10 - classical uh pattern for inheritance and
00:13 - instantiation and in this one we're
00:15 - going to look at the newer pattern which
00:17 - is
00:18 - prototypal some people actually say
00:20 - prototypal and they mean classical uh
00:23 - because they've not yet learned of this
00:25 - newer one I say newer it's been used for
00:27 - about the last 3 to 5 years um and it
00:31 - there's there's a few advantages there's
00:33 - not as many advantages as some people
00:35 - may say you still encounter classical
00:38 - inheritance a lot um you see it used a
00:41 - lot uh just because it was it was the
00:43 - way things were done for a long time but
00:45 - I personally think this is the better
00:46 - pattern uh so let's go ahead and look at
00:47 - prototypal inheritance so in the last
00:50 - example you would create a Constructor
00:52 - function and you'd instantiate it with
00:54 - new so you'd go uh function
00:57 - [Music]
00:58 - person and then you create a new person
01:01 - ver will equals new person okay so
01:04 - that's classical inheritance and there's
01:06 - a video on that I'll put in the
01:07 - description if you missed it uh and so
01:09 - prototypal inheritance does all the same
01:11 - things in a different way so let's go
01:13 - ahead and now let's create we'll we'll
01:15 - go hum then we'll do musician and then
01:17 - we'll create people so in this case you
01:20 - simply make objects human equals boom
01:23 - and you make an object and then you use
01:26 - object create to create a new type of
01:29 - thing so you can make a
01:31 - musician equals object
01:34 - create human and so what that's going to
01:37 - do is that's going to make a new object
01:39 - that inherits all of the properties of
01:42 - human and so let's go ahead and fill in
01:44 - a few of these so let's say this has a
01:48 - species and that's
01:51 - human human and then we've got let's say
01:55 - say
01:58 - species
02:00 - and this will console log this.s species
02:03 - so you still use the this uh keyword
02:06 - when you're referencing values that are
02:08 - on the object and let's also do say
02:15 - name there we go so if it has a name you
02:17 - can say the name uh so now we've created
02:20 - a musician and so adding new properties
02:23 - is or adding new methods is pretty
02:25 - simple you just simply do musician Dot
02:28 - and then you add on to it so musician.
02:31 - let's say play
02:34 - instrument this will be a
02:36 - function that's console logs
02:40 - plays plus your
02:44 - instrument there we go and so now to
02:47 - actually create a musician we simply do
02:50 - what we've done before with object
02:51 - create ver will equals object.create
02:56 - and we're going to create a
02:58 - musician
03:01 - and then will can have a
03:04 - name and will can have an
03:08 - instrument uh let's play drums today I'm
03:11 - not very good at drums and now I have
03:13 - all the methods from the human and I
03:15 - have all the methods from the musician
03:17 - because the musician inherited from the
03:19 - human so I can do things like will. say
03:22 - species tell what let's actually pull
03:24 - this into the console at this point I'm
03:25 - going to copy and I'm going to paste
03:28 - there we go so I've pasted it all in so
03:31 - now let's go ahead and look at just the
03:32 - will object so here see here's my will
03:34 - object and I've added two values to it
03:37 - and then I can also see my prototype
03:39 - this is the musician object I can play
03:41 - an instrument and then that prototype I
03:44 - can say names say species and I have a
03:46 - species so will. species is human will.
03:50 - say species
03:53 - works and then will. playay instruments
03:56 - all the way up to my level Works uh so
03:59 - then if I were to to go human
04:02 - dopes let's say we change
04:05 - that so then will. say
04:09 - species it's inherited I now say Homo
04:12 - sapiens I didn't change anything about
04:14 - will I change something about human and
04:16 - it's inherited down because it's all
04:18 - prototypal so that's basically what
04:21 - prototypal inheritance looks like um
04:24 - it's a lot simpler I think it's a lot
04:26 - cleaner for newer JavaScript developers
04:28 - cuz they don't have to worry about
04:30 - actually working with the Prototype
04:32 - objects I know newer developers tend to
04:34 - have a simpler time grasping how
04:37 - inheritance works with this because it
04:38 - just looks like code um we're going to
04:41 - create a musician object from human and
04:43 - then we're going to add some methods to
04:45 - it it's very straightforward and simple
04:47 - now if you don't like having to add all
04:49 - of these here which I don't like having
04:51 - to do a lot of people will add a create
04:53 - method
04:55 - here and so there's a create function
04:57 - and then um you can give it name say
05:00 - human can create um and so what we're
05:02 - going to do is we're going to create an
05:03 - instance right in
05:06 - here we're going to create this right
05:09 - there and then we're going to go
05:11 - instance. name equals name and then
05:13 - we're going to return that
05:15 - instance and then make sure I add my
05:17 - comma there so this would basically let
05:20 - go ahead and get rid of the inheritance
05:21 - for
05:23 - now now ver will would do human.
05:28 - creates
05:30 - and then I'll just say
05:32 - will so let's pull this in my console
05:38 - here there you go so now let's look at
05:40 - will I have a name of Will and then I
05:42 - have all those same methods and I can go
05:44 - over Bob equals human.
05:47 - create Bob so now Bob's another guy with
05:51 - his own name so that also works and if
05:54 - you want to make this even cooler uh you
05:57 - can actually just allow any object here
06:00 - so I could call this values so I pass in
06:03 - a object of values any amount of values
06:06 - and then I'm going to get all the keys
06:10 - out what that does is here if you do
06:13 - object. keys on any object A1
06:18 - B2 then it's just going to give me the
06:20 - list of keys so I'm going to say okay
06:22 - what are all the values that got passed
06:23 - in I'm going to for each
06:27 - those and then key so I'm going to go
06:30 - through each key and I'm going to assign
06:32 - the value of that key to my instance so
06:34 - no matter how many values I give it I
06:36 - just give it an object and no matter
06:37 - what I give it it's going to assign that
06:39 - so instance. key equals values key so
06:45 - I'm basically just taking all these
06:46 - values putting them all on and what this
06:49 - is going to do is this is going to allow
06:51 - me to always have a create method let me
06:54 - go and copy this so now all my children
06:57 - will have this create method so I'm
06:58 - going to create that human
07:00 - and that human has this create method up
07:03 - top so now I can go ver
07:06 - musician equals human.
07:09 - create and then I can just give this all
07:12 - my stuff right here musician going to
07:15 - let's say type of
07:18 - musician actually musicians think
07:20 - they're their own
07:22 - species and then function not function
07:26 - play
07:28 - instrument
07:36 - I'll just say
07:41 - plays there we
07:44 - go so now I've created a musician
07:47 - type musician's got his own species he's
07:51 - got a method on there and then he's got
07:53 - all that other stuff so now I can do
07:56 - musician. create to create will
08:00 - because I'm inheriting that create
08:02 - method all the way up there from human
08:04 - and that create method will
08:05 - automatically apply anything that I add
08:07 - in now so I can go name is Will
08:12 - instrument uh let's play guitar I'm
08:14 - actually pretty good at guitar uh so now
08:17 - Will can go play
08:19 - instrument it's going to play guitar
08:21 - whoops forgot my space there will. say
08:25 - name will. say species and again let's
08:30 - look at that will object so I've got the
08:32 - will object who doesn't really have any
08:34 - methods and then I've got the music
08:37 - object that can play instrument and also
08:39 - has his own species and then uh I also
08:42 - have that so if I were to do will. say
08:46 - species it's going to be a musician
08:48 - because species here overrides species
08:52 - there so that's prototypal inheritance
08:55 - for you um basically you just use object
08:58 - create and then if you want to extend
09:00 - this a little bit more then you add a
09:03 - create method onto one of your root
09:05 - objects at the very very top level and
09:07 - then every other object can use create
09:09 - create create to continue creating their
09:11 - own objects uh the one caveat to it is
09:14 - object create is only IE8 newer so if
09:17 - you support really really really old
09:19 - browsers uh you're not going to want to
09:21 - do that so that's prototypal inheritance
09:23 - again it's a lot of fun it's really easy
09:26 - and uh enjoy