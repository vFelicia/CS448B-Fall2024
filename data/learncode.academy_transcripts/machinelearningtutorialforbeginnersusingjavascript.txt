00:01 - this video is going to get into the
00:02 - topic of machine learning and neural
00:04 - networks which sound a little
00:06 - intimidating to people so we're going to
00:07 - break it down make it really simple to
00:09 - get started in these concepts without
00:11 - feeling overwhelmed we're actually going
00:13 - to solve a common developer problem
00:16 - which i've had to face several times in
00:18 - over the years and we're going to solve
00:19 - it with machine learning
00:21 - in a couple lines of code so here's the
00:24 - problem which i've had to do several
00:25 - times is that as somebody's using a
00:27 - color picker to real time change their
00:29 - text
00:30 - or their background that text needs to
00:32 - change from white to black depending on
00:34 - whether that background is dark or light
00:37 - so we're going to make a machine
00:38 - learning program that determines whether
00:40 - any color a user picks is dark or light
00:44 - which when you get into kind of coding
00:46 - this
00:47 - programmatically with an algorithm the
00:48 - way you would normally do it
00:50 - it's not so straightforward because pure
00:53 - red needs light text pure green
00:56 - kind of needs dark text pure yellow
00:58 - definitely needs a dark text
01:00 - so these different hues actually are not
01:02 - so straightforward whether they need a
01:04 - light or dark uh piece of text so let's
01:06 - get into the machine learning piece of
01:08 - it and again it's not very intimidating
01:10 - uh we'll start by installing brain.js
01:13 - which is a very easy to use machine
01:15 - learning library for node so npm
01:20 - i already have it installed so this
01:21 - should be pretty quick here brain.js is
01:23 - installed again that's not brain it's
01:25 - brain dot js brain is an older
01:28 - deprecated no longer maintained version
01:30 - which there's a story behind that that
01:32 - you don't need to know
01:33 - so now we can kind of import that here
01:37 - again brain.js not brain
01:40 - and so what you want to do at this point
01:41 - is you just want to create a neural
01:43 - network and then run two commands
01:45 - against it so we're going to go network
01:47 - equals
01:48 - brain dot ner there we go we're actually
01:51 - going to do new brain.neural network
01:54 - and then we're going to network dot
01:57 - train we're going to give it some
01:58 - training data
02:00 - and then we're also going to go const
02:02 - results
02:03 - equals network dot run so once we've my
02:07 - goodness that autocorrect is failing me
02:09 - today so we're going to give it some
02:10 - training data so one of the differences
02:13 - between machine learning and traditional
02:14 - programming is traditionally if you
02:17 - wanted to determine if a color was light
02:19 - or dark you'd start by programming an
02:20 - algorithm you'd say hey let's take the
02:23 - rgb values and let's maybe i don't know
02:25 - add them together and if that number
02:27 - gets above a certain point let's say
02:28 - that that is a light background oh but
02:30 - then let's take the edge cases oh it's
02:32 - more of a yellow
02:33 - and we know that that needs to be dark
02:35 - so if it looks more yellow let's do this
02:37 - rule
02:38 - the neural network doesn't work that way
02:40 - at all you simply give it an array of
02:43 - values an array of inputs and each input
02:45 - has two things it has an input and an
02:48 - output
02:49 - so we give it historical data of hey for
02:52 - these values historically here's what
02:54 - the output has been think of it as like
02:56 - flash cards to teach a toddler the
02:58 - difference between cats and dogs you get
03:00 - a stack of flash cards of different cats
03:02 - and dogs and you show them this is a cat
03:05 - this is a dog this is a cat this is a
03:07 - dog and eventually their brain gets it
03:09 - and they can go see a new picture and
03:11 - know if that's a cat or a dog that's
03:13 - exactly what a neural network is going
03:15 - to do it simulates the behavior of a
03:16 - human brain so
03:18 - with brain.js it expects values between
03:21 - one and zero so an input can be one or
03:25 - more values and an output can be one or
03:27 - more values you know so we could say hey
03:30 - one equals one and train it a bunch of
03:32 - times and then we could train it to say
03:34 - hey when you give it a zero
03:36 - then that's an output of zero and then
03:38 - our neural network could tell the
03:40 - difference between ones and zeros okay
03:41 - that's kind of pointless
03:43 - something more useful might be hey let's
03:45 - try to tell the difference between
03:47 - children and adults so let's say we have
03:49 - a 60 inch 150 pound person the output
03:53 - will be one for positive for an adult
03:56 - let's say we have a 30 inch i don't know
03:58 - what a 30 inch person is 60 pounder
04:00 - maybe that's going to be a zero that's a
04:02 - child and then you give it a bunch of
04:04 - real world data
04:06 - and that's considered trained and then
04:08 - down here we could give it some other
04:10 - information let's say we got a 70 inch
04:12 - 200 pounder and that should tell us uh
04:15 - hey one that's an adult let's go ahead
04:17 - try actually running this here
04:21 - let's save that result there
04:23 - and let's go node app you can see hey we
04:26 - got a 31 chance that that's an adult now
04:30 - a 31 percent uh guesstimation or
04:33 - accuracy level that we're dealing with
04:34 - an adult that's not very good so let's
04:37 - say we gave it some more training data
04:38 - let's say we had a 73 incher 250 pounder
04:42 - and that was an adult let's let's see
04:44 - the difference here
04:46 - there we go now it's a 67 chance that
04:48 - we're dealing with an adult so our
04:50 - network became more accurate with the
04:52 - same data just because we gave it more
04:56 - historical data points so your network
04:58 - is only as good as you're able to create
05:00 - your data that's one very very important
05:03 - thing with machine learning most of the
05:05 - trick is coming up with data that can
05:08 - predict accurately what an output an
05:10 - outcome will be
05:12 - another thing here is we can also change
05:14 - this to objects which is a little more
05:16 - clear we could call this heights
05:18 - and we could call this weights
05:22 - and then your output here could be um we
05:25 - would say adults
05:26 - is one
05:28 - and so that's that's a little bit easier
05:29 - of a way uh to make it easy to read as
05:32 - you're doing these applications and they
05:34 - can pass heights and weight in
05:39 - and our result will look a little bit
05:40 - differently now it'll say adults 92
05:42 - confidence that we're dealing with an
05:44 - adult
05:45 - so that's that's brain js now let's use
05:48 - it to solve our problem of is this a
05:50 - light color or is this a dark color
05:52 - the way we're going to do that is we're
05:53 - going to change our inputs to be rgb
05:57 - and then we're going to say is the
05:58 - output light one or is it dark one
06:01 - and so all we have to do is give it some
06:03 - training data by picking some of our own
06:06 - colors looking at the rgb values and we
06:08 - can easily convert rgb into something
06:12 - between 0 and 1 by dividing it by 255
06:15 - because rgb colors are between 0 and
06:17 - 255. so if we divided by 255 255 becomes
06:21 - one zero stays zero and 120 is somewhere
06:24 - in between zero and one uh so i've gone
06:26 - ahead and done that i've made this rgb
06:28 - data set by just picking some colors and
06:31 - dividing all the numbers by 255 and
06:34 - saying is it a light color or a dark
06:36 - color so here's my data set now
06:39 - let's go ahead copy and paste this
06:41 - and i'll strip this last one off the
06:43 - list here so i know that this is light
06:46 - let's go ahead and
06:48 - comment that one out and let's go ahead
06:50 - and paste our
06:52 - new rgb value in here and let's see what
06:54 - we get node app it says hey 95 confident
06:58 - with just five training values 95
07:01 - confident that you are giving me a light
07:04 - color right here awesome so my neural
07:07 - network is working good and it can
07:08 - predict whether a color is light or dark
07:12 - so now we can go over to our little html
07:15 - and plug in our code and we should be
07:17 - working here so let's go ahead copy all
07:19 - this
07:20 - code right here
07:25 - and so here's my app right now i have an
07:27 - input and a div example
07:29 - and i have an event listener for that
07:31 - input to change and whenever it changes
07:33 - i'm changing the background so now i
07:34 - need to also change the text so let's
07:37 - kind of bring our stuff in here let's uh
07:39 - make a const
07:40 - rgb equals i have this little helper
07:42 - function here that i got off stack
07:44 - overflow for how to convert to rgb so
07:47 - it's going to convert hex to rgb and i'm
07:49 - also dividing them all
07:50 - by 255 and rounding them to two decimal
07:54 - places that's what this is right here so
07:55 - basically just getting an rgb value
07:58 - so git rgb
08:02 - e dot target dot value
08:06 - so whenever you change that input right
08:08 - there i'm going to get the value in the
08:09 - rgb numbers let's console log that
08:14 - let's go take a look
08:16 - yep there's my rgb values excellent and
08:19 - so now all i need to do is create that
08:21 - neural network train it give it this rgb
08:24 - value and whatever the output is i'll
08:26 - know if it's light or dark so let's uh
08:28 - come in with my brain neural network i'm
08:30 - also importing brain.js right here
08:33 - from unpackaged.com which is basically
08:36 - npm
08:46 - so i am creating a new neural network
08:48 - i'm training the neural network and
08:50 - let's go ahead get our results
08:53 - by running rgb which is our rgb values
08:57 - let's go ahead and console log that
09:01 - console log that results so now i'm
09:02 - console logging the result of whether
09:05 - the color's light or dark and you can
09:07 - see that i'm getting all my outputs here
09:09 - so i could either say hey if light is
09:11 - larger than dark then we know it's light
09:13 - but i can also have brain js do that for
09:16 - me by saying brain dot likely
09:21 - give it rgb
09:22 - and give it the network that i'm dealing
09:24 - with and that will do that exact same
09:26 - thing for me so now let's go ahead and
09:28 - pull this up and you see now it says
09:29 - dark light dark light dark light
09:31 - excellent so all i have to do at this
09:34 - point is say example dot style dot color
09:38 - is
09:39 - results is dark
09:43 - if the result is dark then we're going
09:44 - to return white text
09:47 - otherwise we're going to return black
09:49 - text
09:50 - so it's going to set the text color
09:52 - determining if it's a dark or light
09:54 - background let's see how it goes
09:57 - oh there we go we've got dark
09:59 - we've got light dark excellent it's
10:01 - toggling right how it needs to let's
10:02 - check out some of these weird edge cases
10:04 - okay yellow seems to be doing some
10:07 - tricky stuff here so i'm going to take a
10:08 - data point that is wrong
10:10 - let's take that data point here let's
10:12 - let's console log the rgb values here
10:19 - let's go find that wrong data point here
10:21 - and we'll have our program fine-tuned
10:23 - here within just a moment let's find
10:24 - that data point
10:26 - so instead of adding more
10:28 - algorithm more to the algorithm more
10:30 - math more stuff like that i just have to
10:32 - go in here and add another use case with
10:34 - an outcome
10:36 - and just train it a little bit better so
10:38 - i'm going to give it this
10:39 - i'm going to say that that is a light
10:41 - background we want dark text
10:44 - so now it's trained let's let's see what
10:46 - we have now
10:48 - there we go much more how i would expect
10:51 - it to work uh so instead of solving some
10:53 - strange edge cases you can see i got
10:55 - another kind of weird quirky area there
10:57 - instead of solving edge cases i just try
11:00 - to find quirky spots in the data and
11:02 - train my data better okay i have this
11:04 - little quirky flash of light here
11:07 - maybe i'll just say that this data point
11:09 - here
11:10 - is a
11:11 - dark background let's do make that a
11:13 - darker background
11:17 - and within moments we've basically been
11:19 - able to solve this problem that would
11:22 - have been pretty frustrating to solve in
11:24 - code there we go quirkiness is gone
11:26 - looks like all those quirky
11:28 - possibilities are gone let's see what it
11:30 - does when you start it's pulling out the
11:32 - hues yeah it definitely does what we
11:33 - expect it to do so there you go that's
11:35 - how to get involved in machine learning
11:37 - how to use it to solve some issues that
11:39 - that might not be quite as fun to solve
11:41 - using traditional programming methods so
11:43 - hope this helped you out hope it gave
11:44 - you the confidence to get into machine
11:46 - learning and have a good day