00:00 - in this video we're going to cover the
00:02 - fundamentals of how data gets managed
00:04 - within react we're also going to see one
00:06 - of the first great features that react
00:08 - provides
00:09 - so there's basically two ways that data
00:12 - gets handled and react it gets handled
00:14 - through state and it gets handled
00:15 - through props there's a third way
00:17 - context but it's a little bit more of an
00:19 - advanced feature and the api is not
00:21 - guaranteed stabilized as it's something
00:23 - newer to react so we're going to leave
00:24 - that out for now we'll touch it a little
00:26 - bit more later on in the course so let's
00:29 - look at state first
00:30 - and as you go you'll end up losing using
00:32 - props much much more but state is also
00:35 - used by a lot of people in some ways as
00:37 - well so state is basically available
00:40 - through this dot state
00:42 - which by default is null
00:45 - so by default state will be null
00:47 - and then you can set it so let's go
00:49 - ahead and make a constructor method
00:53 - and the only place you want to set state
00:56 - this way is in the constructor method
00:58 - you literally just set your initial
00:59 - state
01:00 - this state equals name
01:02 - will
01:05 - and then we can access this
01:07 - by entering this dot name state.name
01:11 - so you see it's kind of a similar
01:12 - concept to what i did earlier but this
01:14 - is the proper way to do it so you see
01:16 - that there you go my name will is
01:18 - printed on top
01:19 - now what's really cool about state is
01:21 - whenever state changes on a component
01:25 - the component will automatically
01:26 - re-render and update the dom if there
01:29 - are any changes if there are no changes
01:32 - the dom won't get touched at all that's
01:34 - the first big amazing thing that react
01:37 - brought to the world is it manages a
01:39 - virtual dom for you so whenever react
01:42 - renders out all the components the
01:44 - component tree is what it's called it
01:46 - renders the layout the header the footer
01:48 - everything
01:49 - then it looks for changes from the
01:51 - virtual dom to the actual dom if there
01:54 - are changes it will update only the
01:55 - affected nodes in the most efficient way
01:58 - if there's no changes at all it doesn't
02:00 - even touch the web page this is great
02:02 - because javascript is really really fast
02:05 - but the dom is really really slow
02:07 - whenever we have to actually go to the
02:09 - dom and update elements that's the slow
02:11 - part of any web page so by having a
02:14 - virtual dom where everything is updated
02:17 - behind the scenes and only changed in
02:19 - the real dom if there's differences that
02:22 - allows our applications to become
02:24 - extremely fast
02:26 - so let's go and look at how we change
02:28 - the state
02:29 - we could go ahead in this render method
02:31 - do a set timeout
02:36 - let's pretend after one second
02:38 - the user did some action and we want to
02:40 - change our state so we're going to go
02:42 - this set state that's the one method
02:44 - that you need to know with state
02:47 - and you just give it a new state in this
02:49 - case our name is now changed to bob
02:54 - and so when step set state gets fired it
02:57 - will update the state and then that will
02:59 - automatically re-render and again if
03:02 - there's any changes it will print out
03:04 - you see it went from will to bob let's
03:06 - actually show you what react is doing
03:08 - behind the scenes in my console on
03:10 - chrome i'm going to hit the escape key
03:12 - and that gives me these rendering
03:14 - options i can enable paint flashing so
03:16 - now the screen will flash green whenever
03:19 - a node gets changed you can see first
03:21 - the whole screen was green and one
03:23 - second later bob changed only bob
03:26 - nothing else even though we we did a
03:28 - complete new render
03:30 - of the header the footer the entire
03:34 - layout the only actual dom element that
03:37 - changed was the one that contains state
03:39 - name so that's all that react updated
03:42 - i'm going to go ahead and update this
03:43 - here or inspect this
03:45 - and you can see that it automatically
03:47 - made a span for bob that's the only
03:49 - thing that will change let's go to
03:50 - refresh again
03:52 - flash is green and the only thing that
03:54 - flashed changed was this span for bob
03:57 - excellent so react automatically manages
04:00 - the dom manipulation for us this is one
04:03 - of the best things in my opinion to
04:04 - react because if you've done backbone at
04:07 - all you understand that there's always
04:09 - this question of hmm
04:10 - at what point should i update the dom
04:12 - and when i do who should update that
04:15 - should the list component update the
04:17 - whole list and re-render the whole list
04:20 - or should just each list item manage
04:22 - rendering itself
04:23 - and basically react takes all of that
04:25 - out and says we're going to re-render
04:28 - everything all the time on any change
04:31 - but we're only going to do it in
04:32 - javascript and we're only going to touch
04:34 - the dom if something is actually changed
04:37 - that would reflect in a visual way so
04:40 - that's the great first thing about react
04:42 - i hope that made sense and that's how
04:44 - you'd manage state the header could have
04:47 - its own state as well
04:49 - so
04:50 - kind of mentality behind state is state
04:53 - only gets used if a component has an
04:55 - internal value that only affects that
04:59 - component and doesn't affect any of the
05:01 - rest of the app if there's something
05:04 - that affects layout and affects
05:05 - absolutely nothing else state may be
05:08 - appropriate aside from that you want to
05:10 - use props and props are injected into
05:14 - every other components let me show you
05:16 - how props work
05:18 - let's get rid of all this state
05:20 - get rid of the state name and we're
05:22 - going to now inject a prop into header
05:24 - let's say their title we'll do a const
05:27 - title equals
05:29 - welcome
05:31 - will
05:32 - and now my header i'm actually going to
05:35 - inject a title
05:38 - title equals
05:39 - title
05:40 - there we go so i've basically created a
05:43 - prop just like you would on an actual
05:46 - dom element you give it a prop
05:48 - so now if i go to my header js
05:51 - i can access this dot props
05:53 - let's do a console.log this.props and
05:56 - see what we're getting here
05:59 - let's look at my console you can see
06:01 - that i have a title
06:02 - of welcome will so it automatically gets
06:04 - converted into an object i could give
06:06 - this multiple props i could give it a
06:09 - let's see name equals
06:12 - something
06:14 - we'll just give it a brand new string
06:15 - right there
06:17 - you can see that our name is something
06:19 - and title is welcome will down here so
06:22 - that's how you inject props into things
06:24 - i could create a second header
06:26 - and i could give its title something
06:28 - else
06:31 - and again that's how we're gonna
06:32 - actually create multiple versions of a
06:34 - header that are different so let's make
06:35 - that header now
06:37 - use a different title so in header we're
06:40 - going to actually just continue props
06:42 - right on over to title
06:44 - we're going to go title equals
06:47 - this dot props
06:48 - title
06:50 - so we're just going to continue passing
06:52 - that straight on through to title
06:54 - and title will actually make use of it
07:00 - there we go so now we have welcome will
07:02 - and we have other title they've rendered
07:04 - through our layout has passed in a
07:06 - different title to each header
07:09 - our header is just transparently passing
07:11 - them through to the title
07:12 - only the title prop
07:14 - and then our title is actually receiving
07:17 - that and spitting it out so we have a
07:19 - completely different header and we have
07:21 - a completely different footer for each
07:22 - one
07:23 - and again let's go ahead and look at
07:24 - this and
07:26 - now what i can do is i could
07:28 - let's go ahead and change our layout
07:29 - here to use both state and title
07:36 - now let's do our super
07:38 - this state equals title
07:44 - so by default our title will be welcome
07:48 - and let's go and pass in this dot
07:50 - state.title
07:54 - and we'll leave that one there as well
07:56 - so then again our set timeout
08:02 - let's make this two seconds i felt like
08:04 - one was a little too fast to catch
08:06 - we're going to change our state
08:14 - so basically changing it from welcome to
08:17 - welcome will let's go and see what
08:18 - happens over here
08:22 - you can see that after two seconds our
08:24 - header component got updated let's go
08:26 - back to these elements and let's see if
08:28 - the header or the header and the title
08:30 - got updated so this is our header
08:31 - component
08:33 - this is our title component header
08:35 - component title component let's refresh
08:40 - you can see that two seconds in
08:41 - only the h1 changed that's because even
08:44 - though our header component received an
08:46 - update
08:48 - our header component received a new prop
08:50 - it rendered out the exact same div no
08:52 - changes so it didn't re-render this div
08:55 - to the dom
08:56 - then it rendered a child component of
08:58 - title
08:59 - that changed the dom looks different for
09:02 - the h1 that it renders so it updated the
09:04 - h1 and the h1 only again once you get
09:08 - this concept it's really monumentally
09:10 - huge no matter how many components
09:12 - change we're only going to update the
09:14 - dom with the actual element changes that
09:17 - got created when the entire tree
09:20 - rendered
09:21 - so there you go that's the basics on how
09:23 - we manage data within our components
09:26 - let's go ahead and move now and let's
09:28 - look at some events and how we'd handle
09:30 - events and have those events actually
09:32 - change real-time data for us