00:01 - okay everybody I need you to take a deep
00:02 - breath
00:04 - in okay we are about to cover context
00:07 - which is easily one of the most
00:09 - complicated Concepts to grasp with
00:11 - JavaScript it's not actually a difficult
00:14 - concept uh when you get it it makes
00:16 - sense uh but grasping it and grasping
00:19 - how it applies can be very difficult for
00:21 - JavaScript developers especially if
00:23 - you're starting off so I'm going to try
00:26 - to get into it going to try to make it
00:27 - as easy as possible but don't feel bad
00:29 - if you got rewatch this video multiple
00:32 - times it's just not that easy to get the
00:34 - first time around once again context is
00:37 - the is what the value of this is for
00:41 - your code that is running um I'll just
00:43 - let the code do the talking here let's
00:45 - go ahead and get this console log nice
00:48 - and big here um if I was to console log
00:51 - the value of this in my root scope by
00:54 - default this is the window object so if
00:57 - I was to console log does this equal
00:59 - window yes this equals window so I could
01:02 - actually go ver a equals 1 and console
01:05 - log this. a and it equals 1 I have no
01:08 - reason to do that in when I'm working in
01:10 - the root scope I could go window. a
01:13 - equals 1 I could also just go console
01:15 - log a that also equals one uh but that
01:18 - just shows you in the default the root
01:20 - scope the context is this um I could
01:24 - also
01:26 - go function
01:28 - fu log this and then let's run
01:33 - Fu and you'll see that that's also the
01:36 - window object if you remember from the
01:38 - scope video the scope has changed we now
01:41 - have a child scope but the context is
01:43 - still this now the reason why is because
01:47 - by default a a function runs within the
01:51 - scope of the object that it sits in so I
01:54 - can also run it as window Fu because if
01:56 - you remember when you create something
01:58 - in the root scope it's a part of the
02:00 - window object whenever I run FU by
02:02 - default it's going to run within the
02:04 - context of the object that it sits on
02:08 - that's why window is the default uh
02:11 - context let me show you how that context
02:13 - can be different if I go ver OB let's
02:16 - create an object now and let's create a
02:20 - method or a function on this
02:22 - fu is a function and this will just
02:25 - console log this so now I'm going to run
02:28 - ob. fu
02:31 - and now it's console logging the object
02:33 - as the value of this it's running OB I
02:36 - could also say does this equal
02:38 - obge yes true does this equal
02:42 - window no false by default and I keep
02:45 - saying by default uh by default it runs
02:48 - with a context of the this value is the
02:51 - object that that sits on now one of the
02:55 - tricky things about context is that this
02:57 - value can actually change depending on
02:59 - how how you call this Fu function
03:02 - depending on who runs it and by and how
03:04 - they're running it uh the value of this
03:06 - can actually change and at first that
03:08 - sounds stupid why would you want the
03:10 - exact same code for all the values to be
03:13 - different uh but the next example I'll
03:14 - show you uh shows you exactly why that's
03:17 - very useful real quick I'll show you the
03:19 - three JavaScript methods of changing
03:22 - context they are call apply and bind I
03:26 - won't go too deep into this but it's
03:28 - just important that you know these are
03:29 - the three that do that um so basically I
03:31 - can go call Fu call window and now it's
03:35 - going to run object. Fu but it's going
03:37 - to change the context to window so now
03:41 - does this equal window yes it does if I
03:44 - take that away and just run Foo does
03:47 - this equal window no it does not so what
03:49 - I've done with call is I've changed the
03:53 - context that this fires in and the next
03:56 - uh if you give call more than one
03:58 - argument uh say 1 2 3 then that's the
04:02 - arguments that you're passing up
04:05 - here so basically if I give it one one's
04:08 - going to go up there two's going to go
04:10 - up there three is going to go up there
04:12 - if I need to pass arguments to the
04:13 - function so you just go on and on and on
04:16 - with call call and apply are basically
04:18 - the exact same thing the only difference
04:21 - is is apply only takes two arguments it
04:24 - takes the new context and it takes an
04:27 - array which are going to be all the
04:28 - arguments up here so I give it an array
04:31 - and now the first of the array goes
04:33 - there the second of the array goes there
04:35 - and the third of the array goes there so
04:36 - call and apply are the exact same thing
04:39 - bind is a little different takes the one
04:41 - argument and what it does is it doesn't
04:43 - actually execute your Fu function like
04:46 - call and apply do it returns a bound
04:50 - function so I could go bear my bound
04:53 - Fu equals this and so now my bound fu is
04:57 - a function that always executes Foo with
05:01 - the context of window so now every time
05:05 - I run my bound Foo it will console log
05:09 - this equals window true so if I run my
05:11 - bound Fu true if I go obj Fu then it's
05:15 - going to say false so true when I run it
05:18 - here the context is window false when I
05:20 - run it normally the context is not
05:23 - window it's OB so that's kind of how you
05:26 - change it probably doesn't make sense as
05:28 - to why you need to change it uh all that
05:30 - need all that you need to know is that
05:32 - it can be changed let me let me show you
05:34 - now how uh an actual real world example
05:37 - of that being a different
05:40 - value uh let's go jQuery here body
05:44 - onclick function i instead of doing a
05:46 - function I'll just go obj Fu so now I'm
05:49 - going to run ob. Fu when the body is
05:52 - clicked so there you go and it says that
05:56 - the context is not window when I run Fu
06:00 - let me see what is the
06:03 - context click on the body and the
06:05 - context is the element that was clicked
06:07 - on uh with JavaScript Whenever you set
06:10 - up an event listener on the click
06:12 - element when I set up a click listener
06:14 - on the body element um and I run that
06:18 - then it's going to run with the context
06:20 - of the element that was clicked that way
06:23 - I have access to it so now whenever I
06:26 - run this I know which element was
06:27 - clicked by the this object this points
06:30 - to the body element in the Dom so let me
06:34 - show you how this is actually useful um
06:37 - down here I have an Li let me show you
06:40 - the code I have UL with Lis in it each
06:44 - Li has been clicked zero times and we
06:46 - want to increment this when you click on
06:47 - the LI pretty simple so I'm going to go
06:51 - Li on
06:54 - click
06:55 - function and now I'm going to go let's
06:59 - uh so right now whenever I click on An
07:01 - Li what I've done is I have set up an Li
07:05 - listener so this listener is on all L
07:07 - eyes and whenever I click on
07:10 - it um the this function the this value
07:14 - will not be all l i that this value will
07:17 - only be the element that was clicked so
07:19 - there we go I click and the first time
07:22 - you can see that it's that Li if I were
07:24 - to click this Li now the this is the
07:28 - third Li if I click here this is the
07:31 - second
07:32 - Li so what I can do is I can go Li
07:37 - span HTML um so let me I'm going to
07:40 - actually go there current
07:43 - times I'm going to grab the number of
07:45 - times it's been clicked I actually have
07:47 - to parse it as an integer CU by default
07:51 - in the HTML that zero is a zero string
07:55 - it's not a zero number so I have to
07:57 - parse it I have to get the HTML out of
07:59 - that span parse it into a number and
08:03 - then I'm going to go Li I span
08:08 - again is going to be current times + one
08:12 - so if I do this it's going to change all
08:15 - Li spans that's not the desired effect I
08:18 - want to only change the LI that got
08:21 - clicked on so now I can actually use
08:23 - this this points to the LI that got the
08:26 - click let's find a span inside of that
08:29 - Li which is where find is very useful
08:32 - and let's get that HTML so I'm getting
08:34 - the value when you click on this Li it's
08:37 - going to find a span inside it's going
08:39 - to grab that HTML value out of it parse
08:42 - it into an
08:43 - integer and now same thing right here
08:46 - and so then same thing I want to find
08:48 - that same span and I want to print the
08:50 - new incremented value in there so that
08:53 - will now only change the one I clicked
08:56 - on only change the one I clicked on only
08:59 - change the one I clicked on let me give
09:01 - you a common problem that people run
09:04 - into now that has to do with context uh
09:07 - let's go on to my second example
09:12 - code my second example code here is I've
09:15 - got a div with a bunch of nasty HTML
09:18 - that I printed in line I printed some
09:19 - Styles in line which of course is a
09:21 - terrible id idea um this div is hidden
09:24 - it's got a display none on it um and so
09:26 - I want to show that div
09:29 - um let's save that there we
09:32 - go and so now what I'm going to do is on
09:35 - I think that's called open
09:37 - div that's what this button is called
09:40 - open div on
09:45 - click I'm going to I'm going to do two
09:48 - things here the first thing I'm going to
09:49 - do is I'm going to grab this which is
09:52 - the button that got the click open div
09:54 - and I'm going to toggle the
09:57 - class to active
10:02 - there you go so there you go the class
10:05 - active is going to toggle off and on um
10:08 - so then what I want to do is I want to
10:10 - find what's the name of that div oh div
10:13 - one I'm now going to find div one and
10:16 - I'm going to slide toggle
10:20 - that there we go let's say some guy in
10:24 - the business department said absolutely
10:27 - I cannot toggle this class to Green
10:29 - until it slid out let's say there's
10:31 - something more going on here there's 10
10:33 - different animations and I had to wait
10:36 - until it had slid down to toggle this to
10:38 - Green so then what I have to do is I
10:40 - have to slide it to toggle and I have to
10:42 - run a call back and then after it slid
10:45 - then this call back functional fire and
10:47 - then I'm going to toggle this to active
10:50 - there we go save the code run it slides
10:52 - out fine but it doesn't toggle to active
10:54 - why doesn't that toggle to active
10:56 - because this is now pointing to div one
11:00 - this is a call back to this event
11:03 - listener and it's no longer firing in
11:05 - context to open div it's kind of like
11:08 - remember when we had that scope naming
11:10 - conflict if I do ver a equals 1 here and
11:13 - ver a equals 2 here I've now created a
11:16 - name conflict now I have no way of
11:18 - accessing this a um that just happened
11:22 - with this that just happened with my
11:24 - context um when this thing calls this
11:27 - it's going to look and see that my
11:29 - function already has a context that
11:31 - context is div one so I have no way of
11:33 - accessing at this uh there's there's two
11:35 - ways to get around it you can get around
11:37 - it uh with scope I do have access since
11:41 - this was this function was created in
11:43 - this scope here I have access to all the
11:46 - parent scope variables so I can go ver
11:48 - self equals this I can create a variable
11:52 - that variable all it does is point to
11:54 - this and now I have access to self if I
11:58 - look for s self it's going to look in
11:59 - this context okay self has not been
12:02 - created let's look in my parent scope ah
12:05 - self has been created it points to this
12:08 - which is the open div and now it's going
12:11 - to
12:12 - work there you go um You can call this
12:15 - anything you want some people call it
12:17 - underscore self some people call it
12:19 - underscore this uh some people will call
12:22 - it open div uh you can really call it
12:25 - whatever you want as long as it makes
12:27 - sense uh but that's kind of how you get
12:30 - around it using
12:32 - scoping creating a parent scope variable
12:34 - that you have access to uh the other way
12:37 - around it is you can actually bind this
12:41 - function right here to always run within
12:44 - the context of this so what you can do
12:47 - is when I create this function I can go
12:49 - bind this so that it creates the
12:52 - function it runs bind on the function
12:55 - and it returns that bound function to
12:58 - the second argument of slide toggle so
13:01 - now in this inside of this call back
13:05 - this will always equal open div so that
13:09 - will also work this that that this this
13:12 - that hopefully you're not too confused
13:14 - by that so that's the way you can do it
13:16 - with bind only disadvantage to using
13:19 - bind is it's a lot less code um but I
13:22 - have no way of accessing this as div one
13:26 - anymore because it has been bound to
13:28 - where this always equals open div uh you
13:32 - may have to watch this part again to
13:34 - really get what just happened but that's
13:35 - kind of your intro to context I'm going
13:37 - to create one more video on context
13:40 - where we get into the JavaScript modular
13:42 - pattern it's kind of something you want
13:44 - to know before you start learning
13:46 - backbone.js uh but let's go ahead and
13:48 - close this up for now that's context
13:51 - that's the weird and cool things about
13:53 - JavaScript hope you enjoyed the lesson
13:55 - have a great
13:57 - day