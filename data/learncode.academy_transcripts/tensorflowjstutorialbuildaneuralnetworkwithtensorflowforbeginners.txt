00:00 - in this video we are going to solve the
00:01 - iris data set with tensorflow.js in
00:04 - node.js tensorflow is of course google's
00:07 - awesome machine learning neural network
00:09 - library and we are going to use this for
00:12 - javascript now because they are actively
00:14 - developing a really great version of
00:16 - that for javascript and it's still in
00:18 - development but it's very much usable
00:19 - today so here's the iris data set in
00:22 - json format if you're not familiar with
00:24 - it it has four measurements for a
00:26 - variety of iris flowers and then it
00:29 - determines from those what the species
00:31 - is so we're going to take this data set
00:33 - train a neural network on it and then we
00:34 - can give it any four measurements from
00:36 - any iris flower and ideally predict what
00:38 - the species is
00:40 - so i've gone ahead and broken out also a
00:42 - few pieces of testing data this is
00:44 - really important as well so i've taken
00:46 - three items out of the data set and they
00:49 - only exist in this testing data set so
00:51 - once we've trained our neural network we
00:53 - can run these values through and
00:55 - hopefully get some responses that are
00:57 - correct and show that our network is
00:59 - trained properly
01:01 - so let's go ahead and get started using
01:03 - tensorflow js to get started let's go
01:06 - ahead and define all of our imports
01:15 - okay you can see that we've imported tf
01:17 - that's our tensorflow library we've also
01:19 - just imported tfjs node that's going to
01:22 - set some node.js bindings that make it
01:23 - more performant
01:25 - and then we've imported our two data
01:26 - sets
01:27 - so now we can go ahead let's do some
01:29 - comments here so we can actually kind of
01:31 - mentally think through what we're going
01:32 - to do we're going to convert our data
01:35 - and then we are going to test our or
01:38 - build our network
01:40 - we're going to train that network
01:43 - and then we're going to test that
01:44 - network to make sure it actually
01:45 - performs well
01:47 - that is all we're going to do so let's
01:49 - start by converting our data real quick
01:51 - so our data as you can see here is in
01:54 - object format and we need to convert
01:57 - this from to input values
01:59 - and output values and that's pretty
02:01 - simple to do we basically want it to
02:02 - look like this our input values will be
02:04 - four arrays
02:05 - that have you know our numbers let's
02:08 - just say those are our four measurements
02:09 - right there and our output value will be
02:11 - a three dimension array because we have
02:14 - three different species uh in the iris
02:16 - data set we have setosa virginica and
02:18 - versacolor so this will say for setosa
02:20 - this will be one zero zero
02:22 - for virginica it will be zero one zero
02:25 - and so on so we're basically going to
02:27 - convert this to flat arrays and then
02:29 - we're going to wrap these in
02:31 - tf.tensor2d
02:33 - and that's going to convert that into a
02:35 - format that tensorflow loves so to do
02:37 - that let's go ahead and take our input
02:39 - data and we're gonna map that
02:43 - so we'll take our iris dot map we're
02:46 - gonna iterate over that let's get an
02:48 - item here
02:50 - and we're going to return an array here
02:55 - so there's all our items we're conv
02:58 - we're converting that item into a flat
03:00 - array
03:01 - passing that whole array of arrays to tf
03:05 - tensor2d so that's our training data
03:08 - let's go ahead and get our output data
03:10 - now
03:12 - our output data is the exact same thing
03:15 - except for we are going to just
03:17 - basically say hmm is this setosa let's
03:20 - make item one a one if it's virginica
03:23 - let's make the second item in the array
03:25 - a one and if it's versa color let's make
03:27 - the third item or in the array a one so
03:30 - we can do this by doing a simple ternary
03:35 - if it's setosa let's make item one a one
03:38 - otherwise let's make it a zero so let's
03:40 - copy and paste this three times
03:44 - if it's virginica then it's the second
03:47 - item is going to be one
03:50 - and if it's versa color the third item
03:52 - will be a one so there we go we've got
03:54 - our data set up and let's do the exact
03:56 - same thing on trading data for our
03:58 - testing data so our testing data
04:02 - will be in the exact same format except
04:04 - we're not going to loop over all of iris
04:06 - we're going to loop over
04:07 - iris testing
04:10 - so now we're going to have a how many
04:11 - items we're in testing three items we're
04:13 - in testing so this is a three item
04:17 - testing data array so there we go our
04:19 - data is completely set up now we can
04:21 - actually build this neural network it's
04:23 - slightly more hands-on than doing it in
04:26 - brain.js which we've done in our past
04:28 - videos which is extraordinarily simple
04:30 - but you also don't do any configuration
04:33 - in tensorflow it's a little bit more
04:34 - manual because you add all the layers
04:36 - yourself so let's start by creating our
04:38 - network our model
04:41 - so it's called tf.sequential we're
04:43 - basically creating our sequential neural
04:45 - network that is our model that's our
04:47 - network and now we can add layers to
04:49 - that
04:51 - and we're going to add a tf layers dense
04:56 - so we're going to add a dense layer this
04:58 - dense layer is going to have an input
05:00 - shape
05:02 - of four
05:04 - because our data set has four items in
05:08 - the input so those are our input
05:09 - dimensions so it's going to be an array
05:11 - of four that's how we define that uh
05:13 - let's give it a sigmoid activation
05:15 - function
05:16 - why sigmoid uh sigmoid is good for
05:19 - classification problems where it's going
05:21 - to be a one or a zero and it's
05:23 - classifying it into one of these three
05:25 - buckets
05:26 - uh classification again is when we have
05:29 - multiple output dimensions that are
05:31 - going to ideally be one or zero
05:34 - regression problems would be if we have
05:36 - a single output dimension that's like a
05:38 - score
05:39 - we're scoring from 0 to 100
05:42 - other activation functions like relu are
05:44 - better for things like that sigmoid
05:45 - works really well for classification so
05:47 - we're going to do the sigmoid activation
05:50 - function and we're also going to say hey
05:52 - how many units are we putting out here
05:54 - um let's put out five
05:57 - so we're going to put out five i just
05:58 - kind of picked a number out of the hat
06:00 - there is our first
06:02 - layer let's add another layer now let's
06:04 - add a hidden layer input shape is going
06:06 - to be five because this one is kicking
06:08 - out to five this one is receiving five
06:12 - and then this one is going down to three
06:14 - units because our output is three units
06:18 - our output layer so then lastly
06:21 - let's go ahead and add a final shape it
06:23 - doesn't need uh input
06:26 - input can also be dynamically determined
06:28 - so you don't really need that to happen
06:31 - and
06:31 - there we go we're good to go we've added
06:34 - our three layers last thing we need to
06:36 - do is we need to add the error function
06:38 - and the error handling how is it going
06:40 - to compute the error there's multiple
06:42 - different functions and methods for back
06:44 - propagation so this is kind of a good
06:47 - standard for
06:48 - what we're going to do here let's go
06:49 - model dot compile
06:53 - here's two good standards we can do loss
06:55 - of mean squared error
06:58 - and you can do an optimizer function of
07:00 - atom you don't really have to understand
07:03 - how these are working these are just a
07:04 - good set of defaults for you
07:07 - and a good default for atom is 0.06
07:10 - again don't have to fully understand
07:12 - that right now
07:13 - but that's a good standard compile
07:16 - configuration so now our network is
07:18 - complete we can go ahead and train
07:20 - our network which is called fitting in
07:22 - tensorflow so let's go and save our
07:24 - start time here so we can see how long
07:26 - this takes
07:28 - we got our start time saved and we can
07:29 - go model.fit
07:31 - let's fit our information data into the
07:34 - neural network
07:36 - and our output data and then how many
07:39 - times do we want to train it's called
07:40 - epochs
07:42 - let's train 100 times let's just start
07:44 - there
07:46 - so now we're going to receive a promise
07:48 - so we can go dot then that's going to
07:50 - train asynchronously
07:52 - or synchronously however you want to
07:54 - look at it then and we'll also get this
07:56 - history here
07:59 - let's console.log done
08:02 - and date now
08:04 - minus start time
08:06 - let's save this and see what happens
08:08 - here
08:09 - we've got this error that's no big deal
08:11 - it's training our network training our
08:13 - network done in four seconds there we go
08:16 - it's trained in about four seconds so
08:19 - now let's go ahead and actually see what
08:20 - this history object looks like let's
08:22 - look at this history object
08:25 - and see what that says
08:28 - here is all the errors that we're
08:30 - getting so if we scroll up
08:33 - you can see we have our loss history it
08:35 - starts up with a pretty big error number
08:38 - and that error number gets smaller and
08:39 - smaller and smaller
08:41 - and smaller a little bit of back and
08:43 - forth as it goes through all the
08:44 - iterations you can see that we're
08:45 - sitting at about a point 0 1 error level
08:48 - so that should give us some pretty good
08:51 - results let's go ahead and test this now
08:53 - so in this then function after it's been
08:56 - trained let's go and kill that console
08:58 - log there
08:59 - let's go model.predict
09:03 - we can do model.predict and we can give
09:05 - it our testing data
09:08 - and we can also then go dot print
09:12 - so
09:13 - it's going to train and then it's going
09:14 - to run our testing data through the
09:16 - prediction you can see that our first
09:18 - piece of data it thinks oh pretty
09:21 - strongly that it's a what are those
09:23 - setosa
09:25 - virginica and versacolor you can see
09:27 - that our our errors pretty small we have
09:30 - trained successfully against the iris
09:33 - data set this should be one zero zero
09:35 - this should be zero one zero and this
09:38 - should be zero zero one because our
09:41 - testing data is setosa virginica
09:43 - versacolor so there we go we have
09:45 - created a neural network we've added
09:48 - three layers to it
09:50 - we have trained it
09:52 - and then once we're done we have tested
09:54 - it to prove that it is working correctly
09:56 - so there you have it that is how you
09:58 - build a neural network in tensorflow.js
10:00 - train it solve the iris data set problem
10:03 - and prove that you actually solved that
10:05 - problem correctly i'm going to put this
10:07 - code on github in a gist and add the
10:09 - link to that in the description and that
10:11 - is all have yourself an excellent day
10:19 - you