00:01 - hey there today we're going to be
00:02 - learning about GitHub and we're also
00:04 - going to be learning about Source
00:05 - control if you guys I'm pretty sure
00:07 - you're sitting in one of probably three
00:09 - boats right now one you have no idea
00:12 - what GitHub is no one's talked about it
00:14 - you've not heard about it and I'm here
00:16 - to talk about it because it's really
00:17 - important and pretty much any
00:19 - professional company is going to be
00:21 - using GitHub or something like it and
00:23 - we'll expect you to know it uh or you're
00:26 - sitting in boat number two uh you've
00:28 - heard about it you know about it but you
00:30 - haven't learned it yet it's kind of been
00:31 - a black box we're going to make that an
00:34 - easy thing to learn today and step three
00:37 - you person number three you've maybe
00:39 - used sub subversion or CVS you know what
00:42 - source control is you just want to learn
00:43 - GitHub this might not be the tutorial
00:46 - for you um because I'll be getting a
00:49 - little bit more ground level stuff here
00:51 - but you'll learn it all it just might be
00:53 - a little bit slower paced for you so
00:55 - let's get into real quick what is Source
00:57 - control why is it important why is every
01:00 - employer value it uh let's say there's
01:02 - two people right here pretend my screen
01:04 - is divided here and these are two guys
01:07 - uh up here we have John and down here we
01:10 - have Bobby so let's say this is the
01:12 - exact same file um open on John's
01:15 - computer open on Bobby's computer and
01:17 - John edits this thing and he adds an
01:19 - item in here he adds An Li and he adds
01:22 - um
01:23 - sand uh now how does Bobby get that
01:27 - change if Bobby's already made five
01:29 - changes added his own stuff down here
01:32 - now you've got to get together and get
01:33 - in a room you've got to open up both
01:35 - copies of the file it gets messy as you
01:38 - can imagine in a company of 10 people it
01:40 - gets messy almost instantly what do you
01:43 - do uh another common Pro problem is uh
01:47 - people overriding people's stuff
01:49 - deleting people's stuff having to check
01:51 - out files there's really no clean way to
01:53 - do it people have to be able to work on
01:56 - the same files at the same time without
01:59 - hours and hours hour of wasted work and
02:01 - unnecessary communication that's where
02:03 - Source control came in uh what GitHub
02:06 - will do or git will do for you is you
02:09 - open a git project and that keeps track
02:12 - of all the changes that you make so when
02:15 - I make this change it knows that I've
02:17 - made this change and then I can at any
02:20 - time connect and find out anyone else's
02:23 - changes so let's say Bobby's added uh I
02:27 - forget what it is rope I don't know why
02:28 - you use rope if you're building the
02:30 - brick wall at any time I can sync up to
02:33 - the repository and it will pull in the
02:35 - fact that Bobby made and saved this
02:37 - change and so then I won't lose any work
02:40 - it'll just automatically boom boom boom
02:43 - throw in everyone else's changes and at
02:45 - the same time he can do the same thing
02:47 - he can sync up to the repository and get
02:49 - my changes every once in a while you'll
02:51 - get what's called a merge conflict and
02:54 - that's when both I have edited this line
02:57 - I'm going to call it uh good mortar and
02:59 - he's going to call this more
03:02 - mortar and if he saves that and then I
03:05 - sync up to the repository it's not going
03:07 - to know who's right it's just going to
03:09 - know I changed it and Bobby changed it
03:12 - so I'll get something like this
03:14 - depending on what kind of source control
03:15 - I'm using I'll get your
03:25 - version something that looks an output
03:28 - like this and it'll say it's a conflict
03:33 - and all a sudden I have to go okay hm
03:36 - one of these is the right one which
03:37 - one's the right one Bobby changed this I
03:40 - change this um oh I know what I'll do
03:43 - I'll go more good
03:44 - mortar there we go and then I'll get rid
03:47 - of all this junk and I'll save my file
03:49 - and now I had to manually merge changes
03:52 - that will still happen sometimes but
03:55 - GitHub will flag for you everything that
03:58 - both people have done the way to
04:00 - minimize having to do that cuz that is
04:02 - kind of a pain in the rear and there's
04:03 - really no way around it is to make sure
04:05 - you have good communication on generally
04:08 - who's working on what tasks and that
04:10 - shouldn't happen very often and when it
04:12 - does it shouldn't be much bigger than
04:14 - what I just kind of showed you right
04:15 - there so let's get into GitHub let's get
04:17 - into an actual project and how we're
04:19 - going to set this up and manage this uh
04:23 - first thing you'll need to do is you'll
04:24 - need to get GitHub installed on your
04:26 - computer and you'll need to sign up for
04:27 - a GitHub account so go to github.com and
04:30 - sign up for an account it's free um and
04:32 - then also go to mac. github.com or
04:35 - windows. github.com and install the
04:37 - GitHub application that will take care
04:40 - of everything else you need for you
04:42 - right there and it will give you a
04:44 - visual application uh which I will tell
04:48 - you not to
04:49 - use so this is the visual application it
04:52 - will give you it's super easy really
04:54 - easy to get started but a lot of
04:56 - employers look down on it uh because
05:00 - lots of people use this as a crutch
05:02 - instead of actually learning the command
05:04 - line the command line is not hard it's
05:07 - about five commands uh a lot of people
05:09 - just avoid it like the play cuz seeing a
05:11 - black screen freaks them out but we're
05:14 - going to get past that fear today and
05:15 - have a great time with it so uh I'm
05:18 - going to go ahead now and create a new
05:20 - repository think of repository equals
05:23 - project
05:25 - whatever uh I already did one called get
05:28 - tutorial as a test so new git
05:32 - test so I'm making a repository called
05:34 - new git test and the only thing I'm
05:36 - going to check here is initialize this
05:38 - repository with a read me and that
05:41 - allows me to clone it right away I'll
05:43 - show you what that means so you see it
05:44 - made a new repository for me called new
05:46 - get test I already have my first file
05:48 - which is called readme and all the
05:50 - readme has is this uh what the readme is
05:53 - is it's kind of any instructions you're
05:55 - going to give to people who use this
05:56 - repository it's automatically displayed
05:59 - when you open up the
06:02 - repository so all I'm going to do here
06:04 - is I'm going to copy this clone URL this
06:08 - is what I will use to get it on my
06:09 - machine okay that's all I need to do for
06:11 - GitHub so now I'm going to use yes the
06:14 - dreaded command line lots of you guys
06:17 - have been avoiding this uh because
06:19 - you're terrified of it you don't know
06:20 - what to do with it and uh we're going to
06:22 - get into this today so uh if you're on
06:25 - Mac you only need to know like three
06:28 - commands to actually use this thing and
06:30 - then github's five commands uh and if
06:33 - you're on Windows same thing uh to open
06:35 - it with Mac you go to utilities
06:37 - applications utilities terminal and then
06:39 - to open it on Windows you're going to go
06:41 - run and type CMD and hit enter so
06:45 - basically
06:47 - CD uh is your change directory command
06:50 - so if I go CD dot dot I'm going to go up
06:53 - a directory I just went from documents
06:55 - into wheels so now I can go CD back into
06:58 - documents
06:59 - there we go I can also
07:02 - go CD dot dot now I'm in users I can go
07:05 - CD will
07:07 - documents and now that's basically CD
07:09 - that's your first command and the other
07:11 - one is going to be LS and that'll show
07:13 - you a listing of all the files in your
07:15 - directory if you're on Windows it's
07:17 - going to be dir unless you have fake
07:20 - Linux Mac commands installed so you can
07:23 - see I have a few files in my documents
07:25 - thing not much uh what I'm going to do
07:28 - is I want to put the repository in
07:31 - documents so I'm going to go get clone
07:33 - and I'm going to paste that URL that I
07:35 - copied clone is your first get command
07:38 - what that does is it takes that
07:40 - repository and it copies the whole thing
07:42 - down and puts it in a folder called its
07:44 - name by its name so now if I hit LS you
07:47 - can see that I have a folder called new
07:48 - get test so CD new get test and
07:53 - LS I've got readme.md that's my only
07:57 - file okay that's about all I'm going to
07:59 - do for for now let me go ahead and add
08:00 - that folder to my project
08:04 - here and new get test there we go so now
08:07 - I've got my folder and I can do away
08:10 - with you you're not necessary anymore
08:12 - actually I'll wait for a second and when
08:15 - I'm going to do down here is let's say
08:16 - John Bob does the same thing he's going
08:18 - to go get
08:20 - clone not readme
08:22 - MD this
08:25 - URL John is also working on our project
08:28 - so he also is going to clone it you
08:29 - notice I've cloned it into a different
08:31 - folder so you can actually have the same
08:34 - folder on your computer in 20 different
08:37 - places and this one's in my GitHub
08:39 - folder there we go so now we both have
08:42 - the repository here and I'm going to go
08:45 - ahead over here on the top and I'm going
08:47 - to make a new
08:48 - file I'm going to save it
08:51 - as new get test we'll call it
08:56 - index.html and let's make something here
08:58 - real quick
09:06 - let's make our first list here we'll
09:08 - just kind of recreate what we had
09:12 - bricks bricks and Mort let's just make
09:14 - it a list of two items I'll save it and
09:17 - you notice I got index.html there and
09:21 - John still doesn't have anything cuz
09:23 - he's not he's just working on his own
09:26 - let me go ahead and I'll make a new file
09:28 - here for John
09:30 - and we'll call
09:35 - it index
09:41 - 2html
09:43 - and we just make it we'll just do this
09:48 - UL we'll just leave it like that so
09:51 - John's got index to I've got index and
09:53 - we're both working on the project and
09:55 - that's all the progress we've made so
09:57 - here are you ready here's we've got our
09:59 - first get command which is get clone
10:01 - that's going to pull any repository in
10:03 - using its URL our next get command is
10:06 - get
10:07 - status so this is going to show us
10:09 - what's different between us and GitHub
10:12 - up in the sky right now so all that's
10:15 - different now is there's an untracked
10:16 - file we have created a file called
10:18 - index.html GitHub has no clue that this
10:21 - file exists so what I'm going to do
10:23 - right now is I'm going to do get add
10:26 - which means we're going to add any
10:28 - change or any new files or whatever by
10:31 - name so add
10:34 - index.html so now we've said okay put
10:37 - this guy into our project if I do get
10:39 - status again you'll notice that it's now
10:42 - a change to be committed we have a new
10:44 - file
10:45 - index.html so now all I have to do is
10:48 - I've added it I can go get
10:50 - commit which means I'm locking it in to
10:54 - the repository get commit m-m means I'm
10:58 - giving it a message message and the
11:00 - message is going to be in quotes
11:02 - added
11:04 - index.html there we go so now it's
11:06 - committed but it's still on my machine
11:09 - it's locked into the repository but it's
11:12 - not synced up to github.com yet so all
11:15 - we have to do to get it to do a sync is
11:18 - get push that's going to take anything
11:20 - on our machine and push it up to
11:22 - github.com so now if I go to github.com
11:25 - and I
11:26 - refresh you'll notice I have
11:29 - index.html so there we go now it's up
11:32 - there I'm go and hide this and so now if
11:37 - this guy here goes get pull which is so
11:41 - push pushes up to github.com and pull is
11:43 - going to pull down from github.com
11:46 - whoops I'm not in the right directory
11:48 - cdspace new G
11:51 - test get pull these commands will only
11:54 - work when you're in the directory of
11:57 - your GitHub repository because you can
12:00 - have a hundred different repositories on
12:02 - your computer so I did a get pull and
12:04 - you see it pulled in
12:06 - index.html now I've got them both so now
12:10 - what John's going to do is John's got
12:12 - this guy and I'm also going to add an
12:14 - item to my list
12:17 - here
12:19 - sand so now if I do get
12:21 - status I see two things I've modified
12:25 - index.html and I have an untracked file
12:28 - myself
12:29 - so I can do get add
12:34 - index.html and you'll see that now if I
12:36 - do get status the changes for commit are
12:40 - that I've modified this guy o sorry
12:43 - wrong one changes to be committed that
12:45 - I've modified this and I still have an
12:46 - untracked file that's not ready to be
12:48 - committed so I can do get add index
12:53 - 2 another thing you can do is you can do
12:56 - get add dot which is going to do
12:58 - everything in your directory or you can
13:00 - do GI add- capital A which is going to
13:04 - do get add all so I'm going to do get
13:06 - add
13:08 - a and now if I do get status you see
13:11 - that I've got two files ready to go one
13:13 - that's modified one that's brand
13:16 - new and I'm going to do a terribly
13:18 - generic get commit which is a bad idea
13:21 - made changes that's not useful to anyone
13:24 - but oh well so I've added committed I'm
13:28 - going to
13:32 - push and now over here I'm going to pull
13:35 - get pull but before I yeah so get pull
13:39 - there we
13:40 - go and so now I've noticed I've got
13:42 - index two and my index One automatically
13:45 - has all the updated changes if five
13:48 - different people were working on these
13:49 - files and I did a pull it'd get
13:50 - everybody's changes as long as they
13:52 - pushed them up so that's kind of how it
13:55 - works you'll notice the commands aren't
13:57 - too bad so far we've got get status get
14:00 - add get commit get push get pull and
14:05 - that's kind of your Basics into GitHub
14:08 - there's about 10 commands in total if I
14:10 - just type get it'll show me kind of all
14:13 - the commands that I can use and kind of
14:14 - what they do
14:17 - um and that's pretty much the beginning
14:21 - of GitHub so let's talk about a little
14:23 - bit about workflow how do you actually
14:25 - do this so one thing I'll do is when I
14:27 - come in at the beginning of each day I'm
14:29 - going to start off by doing a get poll
14:32 - want to make sure I get everybody's
14:33 - updates from all you know last night the
14:36 - rest of the day hey already up to date
14:38 - great I'm going to make my changes da da
14:41 - da da this isn't mortar anymore it's now
14:44 - called I don't
14:45 - know something else quick
14:48 - create I think that's how you spell it
14:51 - made that
14:53 - change um and so now I'm ready to push
14:56 - my changes up I'm going to add
14:57 - everything
15:03 - made Mt more
15:08 - specific got it got all my changes done
15:11 - I'm ready to sync up all my work to the
15:13 - repository I'll do this with every kind
15:16 - of incremental piece of work I do I will
15:19 - probably add commits all throughout the
15:22 - day and then every few hours in the day
15:25 - I'm going to make sure I'm in sync to
15:27 - make sure I don't get way far far off of
15:29 - stuff let's create what's called a merge
15:32 - conflict here instead of mortar I'm
15:34 - going to put I'm going to change this to
15:37 - more
15:38 - mortar I think we already went through
15:40 - that example
15:43 - so get add a get
15:50 - commit let's say down here at the bottom
15:53 - what's this guy's name again Bobby Bobby
15:56 - just made a change on a line that I made
15:58 - a change on um and so now when I do a
16:02 - get
16:05 - pull ah it says conflict merge conflict
16:08 - in
16:09 - index.html you have to fix the conflicts
16:12 - and then commit the result basically
16:14 - you've both changed these lines and at
16:17 - first this looks like crazy freaking out
16:19 - ah what the heck do I do with this all
16:21 - it's telling me is is head which is what
16:23 - I'm on we made this change to this line
16:27 - and somebody else made this change so
16:31 - what do we do about it I'm not smart
16:32 - enough to know you've got to figure this
16:34 - out it's not too bad I just look at the
16:36 - two lines and say ah okay he was adding
16:38 - more which is our company's way of
16:40 - saying we need to get more than one so
16:42 - I'm just going to do more quick CR I'm
16:44 - going to kind of manually merge those
16:46 - lines together or I'm going to just say
16:48 - no quick create is the right line he
16:51 - didn't really know what he was talking
16:52 - about we don't ever say more anyway I
16:54 - manually make the decision I delete all
16:57 - the helper things that it gave me save
17:00 - my file and now I just hit get commit
17:04 - with nothing in
17:07 - there whoops get add a get commit forgot
17:12 - to add it you notice it said okay now
17:14 - it's continuing my merge branch of
17:16 - Master and by the way if you ever
17:19 - accidentally hit commit without a
17:21 - message or anything you'll get this
17:22 - screen you won't figure out how to get
17:24 - out of it you hit Escape colon WQ to
17:30 - save it Escape colon WQ there you go
17:35 - merge Branch Master yes Escape colon WQ
17:38 - is the most complicated part of
17:40 - everything we're going to learn today
17:41 - just write that one down it takes a long
17:43 - time and I'm always forgetting it Escape
17:45 - colon WQ is how you get out of a
17:48 - full-blown commit I'll show you real
17:51 - quick just what that
17:53 - was so let's say I made a change now I
17:56 - can modified index get add a it's commit
18:00 - if you ever just hit commit without the
18:02 - dasm it's going to open up this same
18:04 - thing it's for a full-blown message is
18:07 - what it is it's for a multi-line
18:19 - message there you go so that's kind of
18:21 - what that was it was like a multi-line
18:23 - commit message once again Escape colon
18:26 - WQ enter
18:29 - and there you go get
18:33 - push and now he can do a get
18:37 - poll he can find find out that I've
18:40 - deleted that line there you go and that
18:43 - is your intro to GitHub once again get
18:45 - commit get add a get push get pull
18:50 - that's about it have a great
18:52 - day