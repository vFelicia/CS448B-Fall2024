00:00 - in this series we are going to be
00:01 - covering databases that every developer
00:03 - should try out and test run and have a
00:05 - little bit of experience with most
00:07 - developers these days have experience
00:08 - with mysql postgres perhaps mongodb and
00:11 - redis but there are some other ones that
00:13 - are really great that are out there and
00:15 - in this video we are going to cover a
00:17 - rongodb also called a rangodp depending
00:19 - on who you talk to for the rest of this
00:21 - video i'll probably call it a rongodb
00:23 - but from the best i can tell there is no
00:25 - right or wrong so orangodb is a really
00:28 - cool really unique database it's a
00:29 - multi-model database which means you can
00:32 - use it as a graph database which we'll
00:33 - cover a little bit more later about what
00:35 - graph databases mean for those of you
00:37 - guys who haven't used graph databases
00:38 - before it can also be a document
00:41 - database like replacing a mongodb type
00:44 - of database and it could also be a key
00:46 - value store database replacing something
00:48 - like redis all with one query language
00:50 - you can use any or all features at any
00:53 - point in time speaking of the query
00:55 - language the query language for orangutb
00:57 - is really nice usually when i hear of
00:59 - some new database with a new query
01:01 - language i have this knee-jerk reaction
01:03 - that i don't want to use it or learn it
01:05 - who needs to learn another query
01:07 - language but aramgdb their query
01:09 - language is really easy to pick up very
01:12 - enjoyable to use
01:14 - and it's based on coding it's based on
01:16 - how it feels when you're coding you take
01:18 - an array you filter you map you sort and
01:21 - that's kind of how it is we'll dive more
01:23 - into that later on you also get
01:24 - everything you expect uh out of a
01:26 - rangodb or rongodb uh that you'd expect
01:28 - out of a modern database it scales
01:30 - easily it clusters easily it runs
01:32 - seamlessly in docker it also has a
01:34 - really great ui right out of the box so
01:37 - you can start using it within seconds it
01:39 - also has some really cool features you
01:40 - might not expect to see it can be used
01:43 - for search in a really powerful way
01:45 - allowing it to operate kind of like as
01:46 - an elastic search replacement
01:49 - and it also has this built-in fox
01:51 - javascript framework so you can build
01:53 - node.js microservices straight onto the
01:56 - database layer itself which means you
01:58 - can get some really cool performance
02:00 - benefits it can allow you to do things
02:02 - like make a rest api that the database
02:04 - layer serves so you don't even need a
02:05 - backend for small apps so that feature
02:07 - alone is really really interesting and
02:10 - really cool and it can fulfill a lot of
02:12 - small scale use cases and some
02:14 - large-scale niche use cases
02:16 - that large companies may actually have
02:18 - it can also do geospatial searches so if
02:21 - you want to search for any items within
02:24 - a polygon shape it can natively do some
02:26 - searches like that which is really cool
02:29 - so enough talk let's get into this and
02:30 - actually have some fun with a rongodb
02:33 - we're going to start by spinning up an
02:35 - instance in docker so as long as docker
02:37 - is installed on your machine this will
02:39 - work really easy
02:40 - you just do docker run and then we're
02:42 - going to add a few arguments here e
02:45 - orango no office means we're going to
02:47 - disable authentication no usernames or
02:49 - password this is just local playing
02:50 - around
02:51 - we're going to expose port 8529 which is
02:54 - that port and we're going to call it
02:56 - test orangodb let's go ahead and run
02:58 - this guy and tada we are running so now
03:00 - i can actually go localhost port 8529
03:07 - and there we go we are instantly into
03:09 - their ui it's really nice we can see our
03:11 - collections views which are kind of
03:13 - elastic search search type of things
03:16 - graphs which are how we want to build
03:18 - any graphs we can natively build graphs
03:20 - on top of our data so let's go ahead now
03:22 - and add our first collection add some
03:24 - data in there and show you how the query
03:26 - language works let's create a collection
03:28 - called friends
03:29 - and you can see that we have two options
03:31 - for types document or edge we'll get
03:32 - into edge a little bit later because
03:33 - that's a graph database feature
03:36 - and there we go we have a friends
03:37 - collection now i can go over here to
03:38 - queries we can actually insert some
03:41 - records it's pretty simple
03:42 - just say insert add any json you want
03:45 - and then you can pick into which
03:47 - collection so i'm going to do name
03:50 - you notice i don't actually have to make
03:51 - it official json and wrap everything in
03:53 - quotes that's really nice because it's a
03:55 - lot more annoying to have to wrap every
03:58 - single key in quotes so i'm going to
03:59 - insert will into friends
04:03 - hit command and enter and i've run my
04:05 - query
04:06 - i can come back over here and i have my
04:08 - first friend named will which is me
04:11 - so let's insert some new people here
04:12 - bobby
04:14 - let's create john
04:17 - apparently all my friends are dudes
04:19 - that's fine
04:20 - jake
04:21 - so we just inserted a bunch of people we
04:23 - can go back to this collection and there
04:25 - we go we've got
04:26 - a bunch of people created already
04:29 - so now how do we actually return some of
04:31 - these documents let me look at some of
04:32 - these ids here
04:34 - if i go here i can see that their key
04:37 - each person got a unique key i did not
04:39 - specify a key so each person got a key
04:42 - key is basically like id would be in a
04:44 - relational database you can specify a
04:47 - key which gives you basically the
04:48 - ability for key value storage but when
04:50 - you do not specify a key one is randomly
04:52 - generated for you so we've got 501 we've
04:55 - got 514 so i can actually now return
04:58 - just a document
05:00 - 501.
05:02 - and you can see it pulled back document
05:04 - 501 i can view it in json there there is
05:06 - 501 i can also say what was it 514 is
05:09 - that correct yeah 514 i can also get
05:12 - 514. i can also do an array and get
05:14 - several
05:18 - i can return two documents super simple
05:21 - i can also iterate through if i want to
05:23 - actually do say like a where query
05:25 - friends where name is will that i can go
05:28 - for
05:30 - friend in friends
05:31 - and this is where it really starts
05:33 - feeling like code i can return friend
05:36 - which is going to give me basically
05:38 - every friend because i didn't really do
05:40 - anything i didn't do any filtering or
05:42 - anything like that
05:43 - but i can easily do some filtering
05:50 - where friend name is will and so now i'm
05:52 - just going to find will and so you can
05:54 - see where i could do where friend age is
05:56 - greater than
05:58 - 15 which i haven't put the age in there
06:01 - but you can easily do all the stuff you
06:03 - do and it just feels like code which is
06:05 - really really nice
06:07 - let's say we have a collection called
06:09 - states that has all the states in the
06:10 - country and i wanted to also join that i
06:14 - could go for state in states
06:17 - and then i could do filter where friend
06:19 - dot states this would be assuming that i
06:21 - actually set a state you know the state
06:23 - that the friend lived in equals states
06:26 - dot key and then there you go i can
06:28 - automatically that would be underscore
06:30 - key wouldn't it then i can filter
06:31 - wherever the state is and i can also
06:33 - return
06:34 - anything i want i can return a
06:36 - javascript object or friend.name
06:40 - i can just return a few values that i
06:42 - want or i can return say maybe the whole
06:44 - friend
06:46 - and also something else you can
06:47 - basically do it if you can think it in
06:49 - code you can take care of it here so let
06:52 - me actually do a little example of how
06:54 - that return object works if i just
06:56 - return friend
06:59 - then i'm going to see
07:01 - the entire json object of each person
07:04 - now if i actually create an object
07:07 - and add friend in there then it's going
07:08 - to treat it as if you're doing es6
07:11 - and then friend equals
07:14 - the entire friend object this is a
07:16 - little bit more nesting going on and i
07:17 - can add some
07:20 - actually just add my own pretend value
07:21 - if i want
07:23 - now each person gets both a friend
07:25 - and a foo bar value so you can really
07:28 - customize how that output works without
07:30 - having to mess with the application
07:32 - layer which is really really nice
07:34 - because lots of times this kind of
07:36 - decorating and laying out the data would
07:37 - happen at the application layer okay
07:40 - let's use this as a key value store now
07:42 - let's create a collection we'll call it
07:43 - sessions
07:46 - it's document as well let's say that
07:48 - we're collecting user sessions and we
07:50 - want to take care of that so i'm going
07:51 - to insert
07:53 - i don't know ip address or logins i
07:55 - don't really know what we'd want to do
07:57 - for sessions let's say logins one
08:00 - into sessions but we actually are
08:02 - tracking this with a session key so we
08:04 - can specify that key
08:06 - i'll just call it a b c d e let's
08:08 - pretend that's some big old long hash
08:12 - and there we go we've actually inserted
08:14 - a b c d e so now we can go fetch it
08:17 - whenever we want
08:24 - i can go get a b c d e whenever i want
08:27 - to and you can see that it has logins
08:29 - equals one so now i'm essentially using
08:31 - it like redis i'm setting keys
08:33 - explicitly
08:34 - and then i can fetch them knowing that
08:36 - they exist so this is how you would use
08:38 - it for a key value store simply just by
08:41 - specifying key that's all you have to do
08:43 - super nice let's look into the graph
08:45 - database features and i'll also cover
08:47 - just a little hint of how graph
08:48 - databases work and some of the cool
08:50 - things that you can do with graph
08:51 - databases that you just simply cannot do
08:55 - with relational databases okay so in a
08:57 - graph database you really have two types
09:00 - of data you have collections which are
09:02 - documents which we've been creating
09:04 - and then you have lines between those so
09:06 - picture them circles and lines all laid
09:08 - out in this huge graph each document is
09:10 - a circle and each line is like an event
09:13 - that connects one thing to another uh
09:16 - you could think of it in plain flights
09:17 - where flights connect one airport to
09:20 - another you can think of it as bitcoin
09:22 - where there's transactions that happen
09:23 - between one account in another account
09:26 - so those lines are called edges so let's
09:29 - go and create an edge collection here
09:31 - and we'll call it i don't know high
09:32 - fives
09:35 - dash fives so friends can now high five
09:38 - each other if we were to actually create
09:40 - something
09:41 - there's really two things that matter
09:43 - most if you're going to create a
09:44 - document i'm going to go ahead and
09:45 - manually create a document here you see
09:47 - we have this from
09:49 - and this to then optionally a key and
09:52 - then you can add any additional values
09:54 - that you want so the things that are
09:56 - hard required is it has to come from a
09:58 - document and go to another document
10:01 - i have to high five somebody i can't
10:03 - just high five nobody so as long as you
10:06 - specify that from in that two and you
10:08 - can add anything else you want you're
10:09 - creating an edge so i'm going to go into
10:11 - queries right now
10:12 - let's go insert
10:14 - from
10:16 - although i don't know anybody's ids let
10:17 - me go back here and look up some ids
10:19 - again
10:20 - uh 501 514 i should have remembered that
10:23 - by now let's have will high five bobby
10:25 - here
10:30 - so there we go um will is now
10:32 - high-fiving bobby but we can also add
10:34 - any other values we want so we can say
10:36 - maybe uh hand coverage right how good of
10:39 - a high five was this was this one of
10:40 - those awkward ones where we're not sure
10:42 - if we should high five again or not
10:44 - uh yep it was
10:46 - 0.3
10:52 - there we go we have now inserted a high
10:54 - five into the high fives collection
10:56 - let's go check it out there it is
10:59 - you can see that i've high fived from
11:01 - here to here and we have some really
11:03 - awkward level of hand coverage let's go
11:05 - insert some more high fives uh who else
11:08 - do we got here
11:10 - we've got 514 and 517 let's go and
11:13 - create that one let's have 5 14
11:16 - high 5 5
11:18 - 17.
11:20 - let's say this was a much better one of
11:22 - those less awkward ones ta-da and now
11:25 - we've actually created some things so
11:27 - you can actually go into this graphs
11:28 - view which is super useful you can
11:30 - actually visualize the data that's in
11:32 - your database
11:34 - we're going to look at all high fives
11:36 - from friends
11:38 - to friends
11:39 - and then edge definitions are going to
11:41 - be the high fives so we're gonna look up
11:43 - any high fives from friends to friends
11:46 - now this could be any product sales from
11:49 - a person to a certain product or from a
11:53 - person to a certain vendor or store if
11:55 - you think about it there's a lot of ways
11:57 - we might want to visualize data but in
11:59 - this case we only have high fives and
12:01 - friends so this will take just a second
12:04 - and there we go you can see that 501
12:06 - high five to 514 and 514 also high fived
12:10 - 517 so at this point we can actually
12:13 - start doing some pretty interesting
12:15 - searches i can say hey tell me anyone
12:17 - that 514 has high fived today i could
12:21 - also say hey tell me anyone that has
12:22 - high fived fort 514 today or i could
12:26 - also say hey tell me anyone that i've
12:28 - high-fived that has also high-fived
12:31 - someone else or is also high-fived 517
12:34 - you can go all the way down the train of
12:37 - things or you could say hey tell me
12:38 - anyone that is eventually high fived
12:41 - 517 in that chain let's go maybe maximum
12:44 - of five
12:45 - points of connection between me and that
12:47 - other person
12:49 - or if you have a whole lot of data sets
12:50 - you could query really easily
12:53 - tell me anybody that have high five
12:54 - today that has purchased a product on
12:56 - amazon.com and that product has gotten a
12:59 - rating of at least uh four stars and
13:01 - someone who rated it has also high-fived
13:04 - the president of ukraine and you can do
13:06 - queries like that and it's native in
13:08 - graph uh we'll show you just how easy
13:10 - stuff like that is
13:12 - so now let's actually do a query it's
13:14 - going to be really similar to what we've
13:16 - been doing we're going to go for
13:17 - friend
13:19 - in and then we're going to do this
13:20 - tricky thing 1.1 so only one degree of
13:23 - separation right somebody i have
13:25 - personally high fived
13:27 - in outbound
13:29 - so this means a
13:31 - high five that i have sent off right it
13:33 - comes from me
13:35 - to someone else
13:36 - that's gonna who do i actually want to
13:38 - see if i've we're actually looking
13:41 - outbound from me so let's find will here
13:43 - 501 shouldn't memorize that by now
13:47 - and then high fives and we'll return
13:50 - friend
13:52 - oh and i made a mistake i forgot that i
13:54 - shouldn't have named this high dash
13:57 - fives that's a big problem uh because
13:59 - it's gonna look at it like it's
14:01 - subtraction going on so let's just
14:03 - change this to high fives i'm going to
14:05 - rename my collection high fives no dash
14:07 - at all
14:08 - now i can come over here
14:10 - high fives return friend and tada we can
14:12 - see that i have high fived bobby so i
14:14 - have this one outbound high five to
14:17 - bobby now if i change this from one to
14:20 - two you'll see i actually have two
14:22 - results i high five bobby but bobby high
14:25 - fived john so with a chain of events
14:27 - that's two away i've essentially chain
14:30 - high-fived two people now
14:32 - bobby and john i've kind of got two
14:34 - degrees of separation from john one
14:36 - degree of separation from bobby i can
14:38 - also change this from two to two so
14:40 - anybody they've only chained high five
14:43 - man this this is so hard to say anybody
14:45 - that i've only chain high fived with two
14:48 - degrees of separation you can see only
14:50 - john i high fived bobby
14:52 - bobby high five john so bobby's not in
14:54 - this list because i'm only looking at
14:55 - two degrees of separation away not one
14:58 - to two degrees of separation so you can
15:00 - easily do some really interesting
15:03 - queries on the data i can also do
15:04 - inbound here
15:07 - and let's see who 517 has gotten any
15:10 - inbound high fives from
15:12 - he's gotten one inbound from bobby and
15:15 - he's two degrees of separation away
15:17 - gotten one inbound from will so you can
15:20 - also see if i change this from one to
15:22 - one then he's only going to get a high
15:24 - five from bobby it's native in graph
15:27 - databases to search on degrees of
15:29 - separation and things that would be
15:31 - really really complex with lots and lots
15:34 - and lots of joins take that example i
15:36 - said before anyone that i've high five
15:38 - that has bought an amazon product that
15:39 - has gotten five ratings that has a
15:41 - reviewer that is also whatever that's
15:44 - pretty complicated to do in a relational
15:46 - database that's extremely native to do
15:48 - in a graph database you just set up your
15:50 - objects
15:51 - which would be
15:52 - products and would be people
15:55 - and then you have some actions between
15:56 - them you have purchases you have reviews
15:59 - you have high fives
16:01 - and it's pretty simple to traverse all
16:03 - those actions and connect them to all
16:05 - those different objects graph databases
16:07 - are extremely cool for solving a lot of
16:10 - very tricky data set problems so that is
16:12 - your high level of how you use orangodb
16:15 - as a multi-model database working with
16:18 - documents working with key value stores
16:20 - and working with graphs so now let's
16:22 - look into some of its other awesome
16:24 - features let's go on to search i've gone
16:27 - ahead and i have added a movies
16:29 - collection and i have uploaded a json
16:31 - file of the movie lens database it's
16:34 - movie l-e-n-s if you want to google for
16:36 - this data set
16:38 - so i have the whole movie lens data set
16:39 - here which is many many movies
16:42 - and i want to actually search them i
16:43 - want to search their titles and i want
16:45 - to do it in a quick elastic search kind
16:47 - of way
16:48 - so the way that i can do this is i can
16:49 - actually create a view let's go and
16:51 - create a new view
16:53 - let's call it movies view
16:56 - and you can see that it's automatically
16:58 - created a few defaults for me um that's
17:02 - stuff that i shouldn't have to mess with
17:03 - at least not right away out of the box
17:06 - about the only thing we have to do is we
17:07 - have to add some data to the links the
17:10 - links are the collections that we want
17:11 - to be able to search on you can actually
17:13 - have this one search view search
17:15 - multiple collections or just one
17:18 - collection the multiple collections is
17:20 - obviously very very helpful as lots of
17:22 - times when people are searching they'd
17:23 - be searching movies or actors or genres
17:26 - or any of that stuff and they want to do
17:27 - it all with one search so we're going to
17:29 - add multiple links we're going to add
17:30 - movies and we're going to add friends
17:32 - there we go we've added the friends
17:34 - collection you can see for an analyzer
17:36 - we picked text english
17:38 - we've included all fields and then
17:40 - movies as well analyzer text english and
17:42 - included all fields so now we can go
17:45 - ahead hit save and it is going to then
17:47 - parse through our collections make sure
17:50 - that that is all ready to go ta-da and
17:52 - we are good to go now we can run queries
17:54 - against our view itself and search
17:57 - friends and movies at the same time we
17:59 - can simply go for results of course you
18:02 - can call result whatever you want in
18:04 - movies view
18:06 - let's go ahead and do a search
18:13 - so there we go we are searching uh
18:15 - whoops doc dot name
18:17 - so anything where the name contains this
18:20 - or any of these values let's return the
18:22 - results whoops not doc it's called
18:24 - results
18:28 - and ta-da you can see that it returned a
18:30 - friend
18:31 - so if i change this to title
18:34 - title includes will then i'm going to
18:35 - see all the movie titles that have the
18:37 - word will in them i can also do uh i can
18:41 - also copy and paste this search phrase
18:43 - and do an or so i can search where
18:45 - titles contain will or where names
18:47 - contain will
18:49 - and now you can see i'm going to get a
18:50 - friend and i'm going to get a whole
18:52 - bunch of movies in my results set so i
18:54 - can search either or and instantly with
18:56 - simple little queries could search
18:58 - dozens of results set so you can see
19:00 - with just a few little moments of setup
19:02 - i can have a lot of what you get out of
19:04 - elasticsearch right out of the box you
19:06 - can get a whole lot more complicated
19:08 - than this
19:09 - but this is a nice overview of what you
19:11 - can do with search features okay one
19:13 - more feature i want to cover on this
19:14 - high level overview is the ability to
19:16 - add node.js microservices straight onto
19:19 - the database layer i think it's a really
19:20 - cool feature let's go to services and
19:23 - let's go ahead and click upload but we
19:25 - don't have anything to upload we need to
19:26 - go and make our service and then zip it
19:28 - up and upload it so i'm going to go to
19:30 - my code editor and i'm going to create
19:32 - two files i'm going to make
19:33 - manifest.json
19:36 - and i'm also going to create
19:39 - index.js
19:40 - you can call it whatever you want and
19:42 - then in manifest.json let's just go
19:44 - ahead and add a couple things
19:51 - so that is all i need to add in the
19:52 - manifest.json which engines it should
19:54 - run on and what our main entry point is
19:57 - which is index.js the rest of it from
19:59 - here is doing some nodejs so i'm going
20:01 - to create really quickly a basic router
20:04 - for you and then we'll show you how that
20:05 - works okay here is a basic router for
20:08 - the fox framework and as you can see it
20:10 - looks a lot like express.js i've done a
20:12 - few imports here let's grab the database
20:15 - let's grab the friends collection
20:17 - and let's create our router and then i
20:18 - can just do this which is a lot like
20:20 - express really the biggest gotcha is you
20:23 - have to do synchronous operations you
20:25 - cannot do async operations there's good
20:27 - reasons why it's in the documentation
20:29 - but if i just do git friends you can see
20:32 - that i'm going to send all the friends
20:34 - back so now all i have to do is zip this
20:36 - up let's go select these two files
20:39 - compress these two items
20:42 - and now i can actually drag it
20:46 - and upload it
20:47 - and have my first service going
20:50 - my mount point will be friends
20:55 - we're good to go and now i can go to
20:57 - this url here i'm just going to copy db
20:59 - system
21:01 - up to db system
21:02 - and i can go friends
21:05 - and now i actually have an http endpoint
21:07 - that is going to access my microservice
21:10 - i can get friends i can post friends i
21:12 - can i can do about whatever i want in
21:14 - this microservice i can make it to where
21:15 - when you send me a document i can parse
21:18 - it and normalize it and do a whole bunch
21:19 - of stuff and then save it across five
21:21 - different collections the sky is really
21:23 - the limit it's a true node.js
21:24 - microservice that you can do just about
21:26 - whatever you want in here and off the
21:28 - top of my head the the two best use
21:30 - cases for these fox micro services would
21:32 - be small projects where you don't want
21:34 - to have to build out a server back end
21:36 - you want the database authentication to
21:38 - be able to work across your api
21:39 - authentication you just have a small
21:41 - thing you need a few rest end points you
21:43 - can add them straight on top of the
21:44 - database layer and call it a day
21:46 - also on these larger use cases graphql
21:50 - can actually be pretty networking
21:52 - expensive sometimes and so if you add
21:55 - the graphql layer to the database layer
21:58 - it can save a lot of networking with the
22:01 - joining and the normalizing of data so
22:03 - those are two use cases that pop onto my
22:05 - head right away for what you could use
22:07 - this fox microservices
22:09 - feature for but there's a whole lot of
22:11 - things i'm sure you could do
22:13 - with these micro services in orangodb so
22:16 - that pretty much covers it we've got
22:17 - this multi-model db that can handle
22:19 - documents it can handle key value store
22:22 - it can handle graph it can handle search
22:23 - it can handle custom services you even
22:26 - have some data visualization tools built
22:28 - in in the form of graphs it's almost
22:30 - like a swiss army knife database i mean
22:32 - you install this you can get a lot
22:35 - without installing any other databases
22:37 - it's pretty pretty cool
22:39 - i really enjoyed i think you guys should
22:41 - mess with it at least know the basics of
22:43 - it know how to use it so you know that
22:45 - it's a tool in your tool belt that you
22:46 - can go for hope you enjoy this tutorial
22:49 - and have a phenomenal day
23:01 - you