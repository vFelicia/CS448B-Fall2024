00:00 - in this video we're gonna use view
00:01 - components to break up our application
00:03 - into logical components that can also be
00:06 - reused throughout our application so in
00:09 - this case we're looking at this friend's
00:11 - logic here it really doesn't deserve to
00:14 - be on the application level the very top
00:17 - application level this really can be
00:20 - broken out into a separate friends
00:22 - module or in this case view would call
00:24 - it a separate friends component so let's
00:26 - go up here and ideally this would be in
00:28 - a different file but we can go view
00:31 - component and we can define a new
00:35 - component in this case we'll just call
00:36 - it friend and then it can get an object
00:40 - which is realistically almost identical
00:43 - to this view application object that
00:45 - we're creating here it can have a
00:47 - template let's give it a template it can
00:51 - have its own filters and its own methods
00:57 - so now what I'm gonna do is I'm gonna go
01:00 - ahead and take these filters out of here
01:02 - and I'm gonna put them up into our
01:03 - friend components since they really this
01:05 - is logic that has to do only with our
01:07 - friend our friend component and same
01:10 - with these methods there so actually I
01:12 - can completely remove those altogether
01:14 - and I can also remove all of this this
01:18 - is stuff that has to do with a single
01:20 - friend so all this information in the
01:22 - template here has to do with a single
01:24 - friend I'm going to do a single div here
01:27 - and then add all of that information
01:29 - wrapped inside of that single div so
01:33 - that is our friend component now all we
01:36 - have to do is instead of rendering an h2
01:39 - for each friend we can render a friend
01:42 - and this name comes from the component
01:46 - name so when you register a component by
01:48 - name we can then spit that component out
01:51 - on any page as an HTML tag so then for
01:55 - each friend in our list we are going to
02:00 - spit out a friend now this will not work
02:02 - and the reason this will not work is
02:05 - this because it's not receiving any data
02:06 - if I look here my console you can see we
02:09 - have no prop
02:10 - friend nothing's defined here so we have
02:13 - to say I'm going to expect some data to
02:16 - be passed in here and this is called
02:17 - props I'm going to get a friend object
02:25 - because as you can see in here we're
02:27 - expecting friend age friend full name
02:31 - basically we're expecting an object
02:33 - called friend and then we can V bind
02:35 - this friend and it gets the value a
02:42 - friend so we're essentially saying take
02:44 - this item here called friend and let's
02:47 - pass it in and we will call it friend in
02:51 - our component so there we go that's
02:53 - coming in and now everything should work
02:56 - it would work if I had a comma right
02:58 - there there we go you can see everything
03:01 - works and everything
03:02 - upgrades we can change that to Bob
03:05 - change that to Johnny and now
03:07 - everything's completely abstracted this
03:08 - friend could be in a completely
03:11 - different file out there and our
03:13 - application would now look like this
03:14 - we have our main level application with
03:17 - our main level data only and then we're
03:20 - gonna spit out child components that get
03:23 - the data that relates to them passed
03:25 - down in and that's kind of the basis for
03:27 - how you would build an application in
03:29 - View you create a bunch of components
03:32 - register them all and then you can
03:35 - inject them as if they were HTML
03:37 - elements so it's extremely simple to
03:39 - work with view components and just to
03:42 - make completely certain where these
03:44 - names are coming from I'm gonna call
03:46 - this friend components and now it
03:49 - actually changed this to friend
03:51 - components so that's that name there and
03:55 - if we were to call this V item in
03:57 - friends then we would pass item in and
04:01 - we're binding that as if the component
04:04 - the component receives the value of item
04:06 - and the component receives that as the
04:08 - value called friend if that makes sense
04:11 - so this will still work everything is
04:14 - still good and so that's kind of where
04:16 - all those names are getting related to
04:19 - so that's how you use components to
04:21 - break up your view j/s application