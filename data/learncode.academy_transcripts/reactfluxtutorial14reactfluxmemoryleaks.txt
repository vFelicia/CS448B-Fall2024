00:00 - I want to take a minute to talk about
00:02 - memory leaks before we move forward and
00:04 - add more features to our application now
00:06 - A Memory leak is whenever you unbind or
00:09 - you fail to unbind an event in
00:11 - JavaScript or a listener in JavaScript
00:14 - so JavaScript keeps your object in
00:16 - memory and it keeps building up in
00:18 - memory building up in memory till all of
00:20 - a sudden you're out of memory and your
00:21 - browser either crashes or starts running
00:23 - very bad memory leaks can actually cause
00:26 - your entire computer system to run
00:27 - poorly CU lots of these browsers can
00:30 - consume so much memory on your machine
00:32 - if you allow it to so I have a memory
00:34 - leak going on right now let me show you
00:36 - what happens I can hit reload and then
00:39 - my flux store goes ahead and updates now
00:41 - I can toggle away to a different page
00:43 - come back and my store still remembers
00:46 - all the changed information but if I hit
00:48 - reload a second time I get an error
00:49 - message hey you can't call set State on
00:52 - an unmounted component and your first
00:55 - thought is probably well clearly it's
00:57 - mounted I'm seeing it right here and let
00:59 - me you what's going on this is the
01:01 - offending code right here on component
01:03 - will Mount we're calling set state if
01:05 - the to-do store changes we're binding
01:07 - this listener right here however every
01:11 - time we change our route a brand new
01:13 - to-do component gets created and we can
01:16 - do this because virtual Dom is only
01:18 - going to update the Dom if this new
01:20 - to-do component changes the Dom renders
01:23 - out differently than the old to-do
01:24 - component did so we're creating a new
01:26 - to-do component we're injecting it with
01:27 - all our current props and if nothing's
01:30 - changed we don't update the Dom if
01:32 - something has changed uh then we update
01:35 - the Dom so every time we render we go
01:38 - through the render tree there's a brand
01:40 - new to-dos component getting created
01:42 - that means the first time around this
01:44 - guy is going to listen to the store and
01:47 - then when he goes away and the next guy
01:49 - comes along he listens to the store as
01:51 - well and when you hit that button or
01:54 - when to-do store changes both components
01:56 - are going to try to update their state
01:58 - except for the original component isn't
02:00 - at all connected to the Dom tree anymore
02:02 - let me kind of show you how we get
02:04 - around this first I want to prove to you
02:06 - that that's what's going
02:07 - on I'm going to oh what is the I forget
02:12 - what the event listener API is um
02:14 - listener
02:17 - counts let's go ahead and console log
02:23 - this so the count of my event listeners
02:26 - for change events let's go ahead and do
02:29 - this let's go ahead and reload so the
02:30 - first time in I'm getting one listener I
02:33 - come back now I have two event listeners
02:35 - on to-do store change events three event
02:37 - listeners four event listeners five so
02:39 - if I hit reload and that thing changes
02:42 - four times now components that shouldn't
02:44 - even exist anymore just tried to update
02:47 - their state so that's the problem this
02:50 - the way around it is very simple we just
02:52 - do a
02:53 - component will
02:56 - unmount method and they're just going to
02:59 - remove that event listener uh so to do
03:02 - that we basically just want to extract
03:03 - this out to its own
03:06 - function let's pull this out to its own
03:08 - function we'll call this get
03:13 - todos there we go get Todo is going to
03:16 - do that I'm going to automatically bind
03:18 - this guy to this so I don't have to bind
03:20 - it all over the place this get
03:23 - todos equals this get todos bind this
03:27 - there we go so now whenever I reference
03:29 - get todos it's automatically bound and I
03:31 - can go this get Tod do so there we go
03:34 - I've made my listener I'll leave that
03:37 - console log in
03:40 - there and that will be what was that
03:42 - to-do
03:44 - store
03:46 - listener count
03:49 - change and then our component will
03:52 - unmount going to unbind
03:57 - listener I believe that's the control
03:59 - the command for that I always forget
04:00 - what that command is because I feel like
04:02 - it should just be off if it's on so
04:04 - we're unbinding that listener now so
04:06 - let's go ahead and check that
04:08 - out let's remove yep unbind listener is
04:11 - not the function I always forget
04:16 - that go to event emitter node find out
04:19 - what that is remove listener goodness
04:22 - it's the thing you
04:23 - do once every
04:27 - month so there we go when component will
04:29 - unmount we're just going to remove that
04:31 - listener and look count stays one count
04:34 - remains one no matter how many times I
04:36 - rerender that and I hit reload and I
04:39 - don't get the error I leave I come back
04:41 - I hit reload I don't get the error so
04:43 - now no matter how many times I toggle
04:45 - back and forth toggle back and forth my
04:47 - browser is going to be able to get rid
04:49 - of all those old components that don't
04:50 - matter anymore it's going to release
04:52 - them from memory cuz there's no more
04:54 - event listeners associated with those my
04:57 - memory stays clean and I can move
04:59 - forward so it's very important that if
05:02 - you're listening to any events on Mount
05:05 - that you unlist to those events on
05:07 - unmount that's the gist of memory leaks
05:09 - anything you bind you really want to
05:11 - make sure that that gets Unbound