00:01 - all right i'm really excited about this
00:02 - series demystifying docker i'm doing it
00:04 - because i've had so many conversations
00:06 - with other developers people i meet at
00:08 - conferences um where the people will say
00:11 - i'm really excited about docker because
00:13 - everybody keeps saying docker is awesome
00:15 - but i can't seem to wrap my head around
00:17 - it and i can't seem to find any
00:18 - resources online that help me actually
00:20 - get started with docker and understand
00:22 - you know what it's actually good for so
00:24 - we're going to kind of cover that we're
00:26 - going to start off with a high level
00:27 - overview what is docker then we're gonna
00:29 - show you with really quick just a few
00:31 - lines of code how you can deploy
00:32 - applications and then some kind of
00:34 - various thoughts on it along the way so
00:36 - let's get into it demystifying docker
00:39 - first thing we're gonna do is we're
00:40 - gonna compare docker to
00:42 - vagrant or docker to a virtual machine
00:44 - since this seems to be the hang up that
00:46 - i keep hearing from people okay so i get
00:48 - vagrant but i don't get docker well
00:50 - that's because they're really different
00:52 - um here's kind of for you visual people
00:54 - a visual demonstration what vagrant is
00:57 - and i'm going to kind of show you real
00:58 - quickly vagrant for those of you guys
01:00 - who aren't familiar with it
01:01 - and i'm going to show you how it's not
01:02 - really a fair comparison
01:05 - so vagrant is the goal is to solve the
01:07 - problem of it works on my machine it
01:09 - doesn't work on production or it works
01:12 - on my machine it doesn't work on this
01:13 - other developer's machine that happens
01:15 - because somewhere along the road you
01:18 - might be on a different operating system
01:20 - say your machine is a mac or windows
01:22 - machine and you're pushing it out to a
01:24 - linux you know server
01:26 - that alone could cause problems
01:29 - you might be running wamp or mamp on
01:30 - your computer if it's a php application
01:33 - and these guys are actually running a
01:35 - full you know just native installation
01:37 - of an apache stack
01:38 - or you have a different tool set that
01:40 - you're using than another developer at
01:42 - any rate your environments are not the
01:44 - same so we solve that by spinning up a
01:47 - virtual machine in our computer
01:50 - that's the exact same thing we're going
01:51 - to be pushing to staging or production
01:53 - so we'll use virtual we'll use
01:55 - virtualbox and vagrant to spin up let's
01:58 - say an ubuntu 1404 machine which is
02:00 - exactly what we're using in staging and
02:02 - production so here that that is it's an
02:04 - empty machine
02:06 - and then you run your provisioning
02:07 - script against your virtual machine
02:09 - exactly as you would against staging a
02:11 - production so the provisioning script
02:13 - will install the correct version of
02:15 - node.js or rails or php it'll set up all
02:18 - the user permissions it'll it'll install
02:21 - any other software configure anything
02:23 - that needs to be configured so at the
02:25 - end of the day these are basically the
02:27 - same environment so now i know that if i
02:30 - dump my project code into here and run
02:32 - it in this machine and it works
02:34 - it's pretty much gonna work when i push
02:35 - it out to github and these servers pull
02:38 - it or i push it however you do your
02:39 - deployments um when the code gets dumped
02:42 - into these it's going to run the same so
02:44 - that's vagrant in a nutshell different
02:46 - boxes we dump our code into each box
02:50 - let's look at docker and see why docker
02:51 - is actually different
02:53 - so for docker we've got our machine
02:55 - and we've got our project code
02:58 - and docker runs off of containers so i
03:00 - use my docker file which is usually 5
03:03 - to maybe 30 line fired file docker files
03:06 - are really small
03:08 - the docker file builds what's called a
03:10 - docker image
03:12 - that docker image contains all my
03:14 - project code
03:15 - it contains you know say an installation
03:18 - of node.js if it's a node.js app it
03:20 - contains any um
03:22 - installments of programs that i need
03:25 - and so it's basically my complete
03:27 - application wrapped up in an image now
03:29 - it's not a full say ubuntu machine
03:32 - because i don't need that this image is
03:35 - designed to sit on top of a machine
03:38 - so from that image i can then run as
03:40 - many containers as i want until i run
03:42 - out of processing power and ram on my
03:45 - machine so this is the virtual machine
03:47 - on my mac again
03:49 - and i have my docker image on the
03:51 - machine and then i can run that docker
03:52 - image and it runs as a container and i
03:54 - can run many many containers in the
03:56 - machine once again until i run out of
03:58 - stuff so this image is my project code
04:02 - so instead of
04:04 - on vagrant where i put my project code
04:06 - into environments
04:09 - with docker you're going to actually
04:11 - build your environment and now i can run
04:13 - that environment anywhere if a machine
04:15 - has docker on it my container is going
04:18 - to run and it's going to work so then
04:21 - you push that docker image up to say
04:23 - docker hub or quay.io which are kind of
04:25 - like the github of docker images and
04:28 - there's a bunch out there you can have
04:29 - your own private repository
04:31 - the image goes out there that's like
04:33 - your github repository so to speak
04:35 - and now any other machine can run your
04:38 - image so let's say i call this image
04:40 - my username is will r stern let's say i
04:42 - did will r stern slash
04:45 - my new node app that's the name of it so
04:47 - now on any computer i can say docker run
04:49 - will r stern slash my new node app and
04:52 - this whole image source code and all
04:54 - will run with the complete environment i
04:56 - didn't install
04:58 - no js on this machine i didn't provision
05:00 - this machine at all because the image
05:03 - has everything it has a complete
05:05 - environment all contained into one
05:07 - so i could run
05:09 - a node.js image on this machine this
05:11 - container then has nodejs installed and
05:14 - has anything else installed npm and then
05:16 - i can also run a rails app on the same
05:18 - machine
05:19 - rails is installed on that container but
05:22 - rails is not installed in this container
05:24 - so they act like virtual machines but
05:26 - they're really self-contained
05:28 - processes so to speak
05:30 - let me kind of show you an image here
05:32 - that i found somewhere online i have no
05:34 - idea what this puppy dog is about but
05:36 - this is basically the anatomy of a
05:38 - docker container
05:40 - so this is your actual web server you've
05:42 - got your web server
05:44 - you have the host operating system which
05:46 - is ubuntu or even something lighter and
05:48 - it has docker installed that's all you
05:50 - need docker is installed and then all
05:52 - the apps run as docker containers
05:56 - and they all sit on top of your host
05:59 - operating systems resources so they all
06:02 - sit on top of the linux kernel they all
06:05 - access the same computers processor and
06:08 - ram and that's basically a docker
06:10 - container you build your image once push
06:13 - it out and now you can run it anywhere
06:15 - so
06:16 - kind of in a large scale production
06:19 - environment here's what that looks like
06:20 - i've got this big cloud cluster of say
06:24 - 10 computers they're all running either
06:26 - koros
06:28 - or mezzos these are kind of some of the
06:30 - big players
06:31 - basically what these two operating
06:33 - systems do
06:34 - is they allow all the computers to act
06:36 - as one they share all their resources
06:40 - and so now all you have to do is
06:42 - spin up containers and they all run
06:44 - within your cluster and then if you
06:46 - start running out of overall cluster
06:48 - memory or overall cluster computing you
06:51 - just add more nodes so let's say okay
06:53 - i'm just going to add 10 more
06:55 - computers to this cluster and now i can
06:58 - run 30 more containers so you can just
07:00 - say um let's once again let's say this
07:03 - image is called my node app i can run my
07:05 - node app four times boom boom boom boom
07:08 - and then i can spin up an nginx
07:10 - container and have it load balance these
07:12 - four and then expose a private port out
07:14 - to the real world so then the real world
07:16 - can access my app this is how docker
07:19 - works it's it's really awesome for cloud
07:21 - computing really awesome for cluster
07:24 - computing and that's where it really
07:26 - really starts to shine but actually i
07:27 - think docker is
07:29 - one of my favorite uses of docker is to
07:31 - just provision a single machine and
07:33 - deploy
07:34 - with no provisioning at all you just
07:35 - spin up a machine make sure docker is
07:37 - installed and then you can run your
07:39 - containers on it so that's kind of your
07:41 - brief overview if you're not a visual
07:43 - person this is probably confusing but if
07:45 - you're a visual person it probably
07:46 - helped let's just get into docker show
07:48 - me the code
07:49 - we'll do that in this next video