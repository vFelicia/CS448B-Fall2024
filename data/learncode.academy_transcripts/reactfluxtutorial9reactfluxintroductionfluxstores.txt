00:00 - if you've been watching my series on
00:02 - react if you've kept up this far you
00:04 - actually know quite a bit about react
00:06 - as far as the official react library
00:09 - goes so now we're going to learn flux
00:12 - react by default doesn't really give you
00:15 - any specific way to manage all the data
00:17 - for your application it just has the
00:19 - ability to receive props right you can
00:21 - inject props into a component
00:24 - and the component handles that but the
00:25 - the react library doesn't really tell
00:28 - you how to give it components where to
00:30 - store your data that's why it's called
00:32 - just a view layer react calls itself
00:34 - just a view layer
00:36 - whereas the actual framework
00:38 - uh as compared to say angular or
00:41 - backbone
00:42 - there really is no framework with react
00:44 - you get to create your own or use
00:46 - another framework and that's where flux
00:48 - comes in
00:49 - flux is not a framework it's a pattern
00:52 - that facebook has laid out a great
00:54 - pattern for building react frameworks so
00:57 - using flux you can build your own that's
01:00 - very stable very good
01:02 - or you can use another flux based
01:04 - framework that's out there there are
01:05 - quite a few
01:07 - some of them work differently than
01:08 - others but they generally stick to this
01:10 - flux pattern so what is the flux pattern
01:12 - well you have your react components
01:15 - and those are all your components
01:17 - and components do two things in a flux
01:19 - pattern they fire off actions
01:21 - and they listen to stores
01:23 - so they fire off actions saying hey
01:26 - maybe say it's a to-do list
01:29 - add a new to-do that's a action
01:31 - and then whenever the to-do list store
01:34 - updates it receives an event for that
01:37 - and it updates itself with all the new
01:39 - to-do's that's that's what the
01:40 - components are aware of components fire
01:42 - off actions they don't care what happens
01:44 - they just know that if i'm listening to
01:46 - the to-do list store and the to-do list
01:49 - store updates then i'm going to change
01:51 - if you're coming from a backbone.js
01:52 - world a store is a collection
01:55 - if you're coming from an angular world a
01:57 - store is maybe more like a service
01:59 - there's really no concept of stores in
02:01 - angular at this point
02:03 - so that's what the components do they
02:05 - listen to stores for changes
02:07 - and they can interact with stores they
02:08 - can say hey give me all to do's give me
02:10 - to-do's that match my filter
02:13 - etc so components can maybe query a
02:15 - store for information just like you
02:17 - would with a backbone.js collection
02:19 - and that's what components do actions
02:22 - are aware of one thing only they pipe an
02:25 - action to the dispatcher they don't care
02:26 - what happens after that but actions will
02:29 - pipe an action to a dispatcher now an
02:31 - action might create multiple actions i
02:33 - will get into that in a minute and then
02:36 - the dispatcher is basically a pub sub
02:39 - if you know what if you don't know what
02:40 - a pub sub is you'll want to watch my
02:42 - video on that it's a pattern of
02:44 - communicating events
02:46 - it's basically a pub sub with one major
02:48 - difference pub sub every module can
02:50 - subscribe to a specific event or a
02:53 - specific set of events and get notified
02:55 - when that event takes place
02:57 - whereas a flux dispatcher takes every
03:00 - single event that comes through and
03:02 - sends it to every single subscriber so
03:04 - if you have four stores that are
03:06 - registered to the dispatcher those four
03:09 - stores get every single event
03:11 - and so that's the biggest change is a
03:13 - store only reacts to the events it cares
03:16 - about it will receive every event
03:19 - and it only reacts to the ones it cares
03:21 - about and the reason this is a good idea
03:24 - with react
03:25 - is react is going to give everybody the
03:28 - chance to change re-render when anything
03:32 - changes about our application when
03:33 - there's any event at all any action
03:36 - everybody gets the chance to change or
03:38 - update if they want to because react can
03:40 - completely re-render with a virtual dom
03:42 - every time
03:43 - and the dom only gets update updated the
03:46 - web page only gets updated when it needs
03:48 - to
03:49 - change the way it appears
03:51 - since that's the slow part of a
03:53 - javascript application is updating the
03:55 - dom updating your web page
03:57 - so that's uh that's the react that this
04:00 - is the flux framework components fire
04:01 - actions
04:03 - actions are only aware the dispatcher
04:04 - the dispatcher's job is to be aware of
04:06 - everyone who needs to hear about actions
04:08 - every single store the dispatcher pipes
04:11 - that action to every single store
04:13 - the stores maybe ignore the action maybe
04:16 - update themselves
04:17 - they fire update events like hey the
04:20 - to-do's list has changed and then
04:23 - the components listening to those stores
04:26 - update themselves and re-render the
04:28 - application constants we'll get into a
04:30 - little later some frameworks use this
04:32 - some frameworks don't it's just a way of
04:34 - storing action names is all it is
04:36 - because
04:37 - a store might reference an action name
04:40 - and an action might reference an action
04:42 - name let me show you what an action
04:44 - actually looks like
04:47 - um an action in an action file will
04:49 - simply say hey dispatcher dispatch this
04:51 - event
04:52 - i've got an event type and the
04:54 - dispatcher doesn't really care what this
04:56 - object is it's just going to pass it
04:57 - through to everybody registered so some
05:00 - people will use type some people use
05:02 - action type
05:04 - um
05:04 - and so
05:05 - type is basically what your action is
05:08 - called
05:09 - create to do
05:10 - and then it might have some additional
05:12 - data to it so the create to do might
05:13 - have a title the delete to do might just
05:16 - have an id associated with it because
05:18 - that's all it takes to delete it to do
05:20 - and then if a store
05:22 - wants to react to the create to do type
05:24 - it can if it doesn't want to it doesn't
05:26 - have to so that's flux let's go and
05:29 - actually take our basic to-do list
05:31 - application and convert it to flux
05:34 - i've got what we've been working with i
05:35 - just changed it from articles to to-do's
05:37 - so
05:38 - we're going to build a to-do's list with
05:40 - the ability to favorite things
05:42 - and then the ability to change settings
05:44 - you know maybe show completed will be a
05:46 - setting
05:47 - and now let's go and look at our code
05:49 - base
05:50 - in this first video we're going to be
05:51 - working with two different components
05:53 - we're working with the to do's component
05:55 - which as you guessed is the entire to
05:58 - do's list
05:59 - and then a to do component which is a
06:01 - single to do
06:04 - and so you should be familiar with this
06:06 - if you've been following along the
06:07 - to-do's component starts off by setting
06:09 - a state which has an array of to-do's so
06:12 - this dot state dot to-do's is two
06:14 - to-do's
06:15 - um and then it pulls them in and it maps
06:17 - them out to an array of to do components
06:21 - and we're changing one thing we're using
06:22 - the id as a key which is a much better
06:24 - key than in the index in the array
06:27 - so then we're just spitting out those to
06:29 - do components that's all that's really
06:31 - going on we just want to make this
06:32 - dynamic so we need to pull this out into
06:35 - a store let's go and create our first
06:37 - flux store so i have my stores folder
06:39 - here
06:40 - let's just save this as to do store
06:43 - dot js
06:45 - i mean all a store really does is it
06:48 - just kind of exports an object uh the
06:51 - one thing we need to do is if you
06:53 - remember from flux let me go back over
06:54 - here
06:56 - components need to be able to listen to
06:58 - actions on the store like a component
06:59 - needs to be able to say on to do store
07:02 - change or to do store on change
07:09 - do something right
07:11 - i need to be able to react when the
07:13 - to-do store has a change event so to do
07:15 - this it's really simple you simply
07:17 - import events emitter which comes with
07:19 - node.js
07:24 - this events module is built into ojs and
07:27 - i can actually just import an event
07:29 - emitter and then extend it so my to do
07:31 - store
07:36 - there we go so now if i were to create a
07:38 - new to do store
07:43 - equals new to do
07:46 - then i can actually go to do store
07:49 - dot on
07:50 - change and then do some handler
07:55 - so that's good so now we've got our
07:56 - events done i can export defaults
08:00 - to do store so now i'm exporting that so
08:02 - whenever you import to do store
08:04 - you're going to get this created
08:06 - instance of to do store great so i've
08:08 - got events going and now let's actually
08:10 - just kind of create my to-do list
08:16 - we'll just go super
08:19 - this to-do's
08:20 - equals and we'll actually start it off
08:23 - with this fake data we got going on here
08:25 - let's just set it to be some fake data
08:28 - there we go my to-do's are by default
08:30 - two to-do's
08:32 - and that's it and maybe i'll do a get
08:34 - all method
08:36 - so somebody else can call to do's dot
08:38 - get all and this will just return
08:41 - this. excellent so that's in the to-do
08:44 - store now i can actually take this away
08:48 - and i can actually import my to-do's
08:51 - store import
08:58 - importing that and then my default state
09:00 - will be to do store
09:03 - get all
09:06 - so that's my initial state i'm going to
09:08 - start off with a get all and then
09:10 - everything should be working as it was
09:11 - before
09:12 - let's go ahead and re-render my page
09:15 - excellent it's working let's go ahead
09:16 - and change my to-do store and make sure
09:18 - that that still updates
09:20 - uh pay water bill
09:25 - it updated okay so my information is
09:27 - coming from the store excellent so now
09:30 - let's go ahead and import a dispatcher
09:32 - create a dispatcher in this next video
09:34 - so we can actually
09:36 - start dispatching events and changing
09:38 - this store