00:01 - all right we're going to be covering
00:02 - generators which are one of the most
00:04 - exciting yeah I'm just going to be
00:06 - honest they are hands down the most
00:07 - exciting and Powerful feature of the
00:10 - next version of JavaScript which is es6
00:13 - harmony you can start using it now using
00:15 - Google traceur I'm going to put the link
00:18 - or I guess the name right there you can
00:19 - figure it out it's so easy to use um but
00:23 - generators are hands down a game changer
00:25 - I know that that's a big statement to
00:28 - say but it is completely true
00:30 - it took me a while to realize that they
00:32 - were a game changer cuz when you look at
00:34 - the specs of what a generator
00:37 - technically is at first it doesn't
00:38 - really seem like that useful of a thing
00:41 - um and then you have a light bulb moment
00:43 - and everything starts changing for you
00:46 - so I'm going to show you technically
00:47 - what a generator is how to code with it
00:49 - how to use it and then what that light
00:51 - bulb moment is and why it's going to
00:53 - change so much of the way JavaScript is
00:56 - programmed so here's a basic generator
00:58 - basically the only is it's got the star
01:01 - which is how you define it as a
01:03 - generator and then you can yield things
01:06 - you can set yield points and basically
01:08 - what a generator is if you were to
01:10 - Define it very simply it's a pausable
01:13 - function or an iterable function you can
01:16 - start running the function and then when
01:18 - you get to your yield it will actually
01:20 - stop running the function while
01:22 - JavaScript continues doing everything
01:24 - it's it's doing this function has paused
01:27 - and yield sits between the value you
01:30 - yielded and what it's passing on to the
01:33 - variable basically yield sits between
01:36 - here and what the rest of JavaScript is
01:39 - going to do when you continue your
01:40 - function because you know JavaScript
01:42 - basically runs right to left uh right to
01:44 - left right to left so you yield one uh
01:48 - let's go ahead and move on to this
01:49 - example um I'm going to run my gen which
01:52 - is the name of my function and store it
01:55 - as gen when I run it nothing really
01:57 - happens it just gets it set up nothing
02:00 - has started firing yet in my function
02:02 - until I run gen. next and then it runs
02:05 - until the first value has been yielded
02:08 - so here you can see value one done false
02:12 - um and then it's going to wait at this
02:14 - yield point until I run gen next again
02:17 - and so then it's going to return value
02:19 - two see there you go I yielded the the
02:21 - number two and then next time it's going
02:22 - to yield the number three and then the
02:24 - next time it's going to yield undefined
02:27 - uh because it ran the next the rest of
02:29 - the function and there's no more yields
02:31 - and it's going to say done true so now
02:33 - I'm done if I were to foolishly try to
02:35 - run next again it would error because
02:37 - you can't call next on a Clos generator
02:40 - so that's basically what it is you can
02:43 - pause it and yield stuff and it doesn't
02:45 - seem very useful yet does it um and
02:47 - there's actually a problem with my code
02:49 - here is this is going to console log
02:52 - undefined undefined undefined undefined
02:56 - because these values weren't set to
02:58 - anything remember when I said Yi field
03:00 - sits between here and here well
03:03 - basically whatever it's going to wait
03:05 - for something to be passed to the next
03:08 - gen next function so right now I'm not
03:11 - passing it anything so I yielded one out
03:14 - but when you resumed the function you
03:15 - didn't give me anything to pass back in
03:18 - so one is now undefined so to make this
03:20 - code work I'd have to yield one so I
03:23 - pass one out here and then I'm passing
03:26 - one back in to so now one does equal one
03:30 - and then two and then three so now it
03:33 - will console log one 2 3 um and I could
03:37 - actually if I were to yield
03:40 - 45a so basically ignore what you passed
03:43 - me I'm just going to pass in random
03:45 - stuff then one is now going to equal
03:47 - four and two is going to equal five and
03:50 - three is going to equal a and so because
03:53 - that's what I passed into the next
03:54 - functions so that's a generator um see
03:58 - pointless it's it's not let's say and
04:02 - here was my Lio moment let's say there's
04:04 - smart code that wraps a generator uh
04:07 - let's say you pass a generator to a
04:09 - smarter function that looks for promises
04:12 - if you don't know what promises are you
04:14 - need to pause right now and watch a
04:16 - video um that I'm going to put in the
04:18 - description my previous video on
04:20 - JavaScript promises um and then come
04:23 - back to here so let's say we had a
04:25 - smarter piece of code here and you were
04:27 - to pass it to generator say my gen
04:30 - and it would run that and get it ready
04:33 - to run uh and then it would run gen next
04:36 - and it would get that yielded value if
04:38 - that yielded value was a promise which
04:40 - this is a this is really dumb smart code
04:43 - you wouldn't check this way but you I'm
04:45 - just kind of saying say yielded value
04:47 - had a then
04:48 - method then it would wait for that
04:51 - yielded value that promise to resolve
04:54 - and it would pass that resolved promise
04:56 - into your gen next function so so then
05:00 - you could write code that actually did
05:02 - something like
05:04 - this so you can actually run code that
05:06 - said API friends so run API friends
05:10 - yield is going to see oh that's a
05:12 - promise I'm actually going to wait till
05:13 - that promise resolves and then I'm going
05:15 - to actually pass the resolved value of
05:18 - that promise back on to one so if API
05:21 - friends returns something like uh John
05:25 - you know just I don't know let's just
05:27 - say it returned a string of John
05:30 - then one would equal John whenever This
05:33 - Promise resolved ah super cool so now I
05:37 - can actually do something like this get
05:40 - friends get profile get tweets and it's
05:44 - going to run this wait for it to
05:46 - complete pass it into here and then run
05:48 - the next thing and now my code looks
05:51 - like it's just normal synchronous code
05:54 - but it's actually asynchronous code
05:56 - happening over the span of I don't know
05:58 - 20 seconds 20 20 hours it doesn't really
06:01 - care it's just waiting for all these
06:03 - things to fire back as successful oh my
06:06 - goodness that's super cool so how do I
06:09 - actually get this smart wrapping code
06:12 - there's multiple libraries out there
06:14 - right now that already provide it for
06:15 - you Bluebird co Q um if you're working
06:20 - on the browser side client side I'm
06:22 - going to say go bluebird um if you're
06:24 - working on node.js the backside I'd say
06:27 - go with Co um Q is actually already
06:30 - provided in angular so if you're using
06:33 - angular Q is the promised library that's
06:35 - baked into that U but you can do this
06:37 - you can run promise if you're using
06:38 - Bluebird promise. Co routine so here we
06:41 - go tweets equals yield get tweets and
06:44 - then I'm going to console log it that's
06:45 - it I got the tweets and I console logged
06:48 - them uh let's say I needed to do three
06:50 - things in order I need to get the tweets
06:52 - then I need to get the profile then I
06:53 - need to get friends well here you go
06:55 - it's going to wait for this on the
06:57 - yields pass it in then it's going to
06:59 - wait for for this yield pass it in going
07:01 - to wait for this yield pass it in when
07:04 - all three are successful it's going to
07:06 - fire them into here oh my goodness that
07:08 - is so cool uh but you can do even cooler
07:12 - things you can configure Bluebird uh to
07:16 - be able to yield objects of promises or
07:20 - arrays of promises I have an array of
07:22 - promises here uh so I can do an object
07:25 - here I can yield tweets and profile and
07:28 - it's going to run them both simultaneous
07:29 - ly wait for them both to succeed um and
07:33 - then it's going to pass them both into
07:35 - Data as tweets and profile and then I
07:37 - can console log data. tweets and I can
07:39 - console log data. profile by the way all
07:42 - this code I'm going to put into a gist
07:45 - and put that link in the description so
07:47 - you can access this code and see it um
07:50 - but you can also using um the new
07:53 - destructured syntax and es6 since you're
07:56 - probably already using Tracer um tracer
07:59 - sure however the French would pronounce
08:01 - that word correctly um you can use
08:04 - destructured syntax which means you can
08:05 - go there a b
08:08 - equals um 10 11 and what that's going to
08:11 - do is variable a equals 10 variable b
08:14 - equals 11 coffee script does that if you
08:16 - guys have used coffee script so I can
08:19 - say variable tweets profile equals yield
08:22 - and give it an array of these two guys
08:25 - and then I can just console log tweets
08:26 - and profile it is so cool it is so
08:30 - useful um I hope you guys love
08:32 - generators as much as I do I'm already
08:34 - using these things in production on
08:36 - several little projects and am so
08:38 - excited about them hope you have a great
08:41 - day and enjoy the rest of your
08:42 - JavaScript
08:44 - life