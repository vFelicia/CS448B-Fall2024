00:01 - okay we're going to be getting into some
00:02 - React videos which I'm very excited
00:04 - about react has really gotten to a great
00:06 - place uh throughout 2015 and now coming
00:10 - into 2016 it's it's very usable and I
00:13 - think people should be using it it's a
00:14 - great technology well worth the effort
00:17 - for both new developers uh which will
00:19 - have a bigger learning curve and for
00:21 - seasoned experience developers there's
00:23 - still a decent learning curve to it so
00:25 - um but before I do that for all the new
00:27 - developers or the the ones that were not
00:29 - used to module loaders uh I'm going to
00:31 - do a video here on module loaders what
00:33 - that's all about and webpack
00:35 - specifically um and webpack is
00:37 - definitely kind of the module loader of
00:39 - choice for the reacts community so if
00:41 - you're experienced with module loaders
00:43 - you probably don't need to watch this
00:45 - video um unless you're a little bit you
00:47 - know concerned about you know what do
00:48 - webpack look like so let's get into what
00:51 - exactly is a module loader now there's
00:53 - three kind of out there earlier on back
00:56 - in the day uh requirejs do. JS came out
01:00 - um a few years ago
01:02 - browserify can't talk and type
01:04 - browserify came out and kind of competed
01:07 - for a while and then browsery kind of
01:08 - started winning out and then webpack
01:11 - came out now it's kind of webpack and
01:13 - browsery duking it out so they're both
01:16 - great module loaders I'd pick one of
01:18 - these two for any project if you're
01:20 - doing react i' definitely pick webpack
01:23 - um it is more featureful and react kind
01:25 - of requires you to be a little more
01:27 - featureful in some ways um so let's get
01:30 - into it how do we do this I've got a
01:31 - very very basic HTML page right here um
01:35 - kind of show you kind of how things used
01:36 - to be we'll kind of Turn Back Time a
01:38 - little bit if I could turn back time
01:42 - then this is how we used to code
01:43 - JavaScript we'd have one scripts file
01:45 - that would have all of our modules in it
01:48 - module one two three um and then you'd
01:50 - load that right there into your HTML
01:53 - page one script call um if you had a lot
01:56 - of stuff then you had to start breaking
01:57 - it apart you had to put module one in
01:59 - here here boom let's put module one in
02:02 - there and let's put module two in
02:04 - there and then you had to do two
02:06 - separate ones you had to insert module
02:08 - one and then you had to insert a module
02:10 - two script tag so now you're making
02:11 - multiple requests and then if you wanted
02:14 - to enhance that you had to use some kind
02:16 - of build script that would concatenate
02:19 - module 1js and module 2js together and
02:21 - Minify them together um and those things
02:24 - basically invol evolved into module
02:26 - loading systems so we really can now
02:29 - code all our different modules
02:31 - separately and then we can use kind of
02:34 - an entry point which would be our
02:36 - scripts JS now to start the requiring
02:39 - path and to start the the dependency
02:41 - path if you will um so we know that our
02:44 - page right here has a dependency on
02:45 - module one and module two and they have
02:48 - to be loaded let's say in that order
02:50 - module one has to fire first module two
02:53 - has to fire second uh so in this case we
02:55 - simply go
02:58 - require uh we're actually going to go
03:00 - slm module
03:02 - 1js so the/ means we're starting in our
03:06 - directory right nowt do slash would be
03:08 - going up a directory or let's go up two
03:10 - directories or let's go up a directory
03:13 - and then into the JS folder which I'm
03:15 - already in which doesn't make sense so
03:17 - just module 1js so that's going to
03:19 - actually import that file into
03:22 - scripts.js at this point right here and
03:25 - then we're going to require module 2js
03:27 - for those of you guys of course who know
03:29 - your browser JavaScript you know that
03:30 - this will not run in the browser this is
03:32 - nodejs or commonjs code uh is
03:36 - technically the commonjs module system
03:38 - that node uses so this will not work
03:41 - what we have to actually do is use
03:42 - nodejs to convert this into a browser
03:44 - worthy format but believe me for any
03:46 - kind of web application where you have
03:48 - just tons and tons of files it is well
03:51 - worth the little effort putting into a
03:53 - build putting together a build system so
03:55 - for this we install no. JS if you don't
03:57 - know what node.js is at all you want to
03:59 - go check my intro to node.js video or
04:02 - you can just search YouTube nodejs at at
04:05 - the point of this it's number one or
04:07 - number two if you type node.js tutorial
04:10 - um so you'll basically install node.js I
04:12 - have node.js installed right now uh
04:14 - let's go npm and nit which this will be
04:17 - covered in that node.js
04:18 - video so let's get a package Json going
04:21 - and then let's go
04:23 - install
04:25 - webpack um and I'm also going to install
04:28 - webpack globally so I can just run the
04:30 - webpack
04:31 - command once this is
04:36 - done okay while it's going we'll come
04:39 - back to our file here real quick so at
04:40 - this point it's basically going to
04:42 - require module 1js completely run
04:45 - through everything in module one then
04:48 - it's going to move forward in a line so
04:50 - that's a synchronous operation then it's
04:52 - going to require module 2js and run
04:55 - through everything in module 2 now these
04:57 - can require their own stuff as well
04:59 - let's see if that's done excellent
05:00 - that's done I've also already run an mpm
05:02 - install G uh
05:06 - webpack weback so I can run the webpack
05:09 - command so I've already done that I'll
05:11 - save you guys the 10 seconds of having
05:13 - to watch it now all I need is I need a
05:16 - webpack doc config.js file which will
05:18 - tell webpack where to look and how to
05:20 - act so I'm going to touch that real
05:24 - quick uh webpack config.js sorry not
05:28 - Json um and I've actually got a gist
05:30 - here for you which I'll put the link to
05:33 - uh of a sample kind of very very basic
05:36 - startup web pack config these can get
05:39 - extremely complicated if you want to do
05:41 - a ton of stuff but here's basically what
05:43 - we have uh we're saying our context is
05:46 - currently the directory we're in you
05:48 - know if you had say an app directory
05:50 - that your app directory lived in then
05:52 - you could do this if your app lived in a
05:55 - directory called app or something like
05:56 - that but as far as the relationship from
05:59 - here all of our stuff is just in this
06:01 - folder there's no SRC folder or anything
06:04 - and then right here I'm I'm doing a
06:05 - quick determination is our node
06:07 - environment production if so we're going
06:09 - to run all these minification things and
06:11 - we're not going to do Source mapping if
06:13 - it's not production then we're going to
06:15 - consider that debug mode so then I'm
06:17 - saying if it's debug then we're going to
06:19 - inline Source Maps that'll help our our
06:22 - console logging and everything otherwise
06:24 - we're going to have no Dev tool at all
06:27 - our entry point is scripts.js so this is
06:29 - kind of where we're we're grabbing our
06:31 - this is where we're starting off and
06:33 - then here's our output we're going to
06:35 - the JS folder and we're going to build a
06:37 - scripts.
06:38 - min.js and then here's the plugins if
06:40 - we're in debug mode no plugins at all an
06:42 - empty array uh if we're in production
06:45 - then we're going to dup so we're going
06:46 - to actually strip out any duplicate code
06:49 - and then we're going to uh also run the
06:52 - uglifyjs which will get rid of source
06:55 - maps and comments and all that stuff and
06:56 - basically make it production ready so
06:58 - there we go let's say that let's go
07:00 - ahead and save scripts save module one
07:02 - save module 2 and run
07:06 - webpack there you go that was fast
07:08 - enough and you see that we have a
07:09 - scripts. min.js now clearly this is not
07:12 - minified because I didn't run it with
07:14 - node environment equals production you
07:16 - can say I got all these great source
07:17 - mappings here I'm defining some modules
07:20 - and then I'm bringing the modules in it
07:22 - did add a little bit of extra code in
07:24 - here which seems like an awful lot for
07:26 - two console logs but once you get a
07:28 - whole application this this actually
07:30 - makes the code a lot simpler and cleaner
07:33 - so it doesn't really add a lot of weight
07:35 - to your overall application um and so
07:38 - then if I wanted to go node EnV
07:40 - equals production
07:44 - webpack then it's going to run and you
07:46 - can see now it's all minified and
07:48 - everything's nice and teeny tiny and in
07:50 - one line and all that good stuff so
07:53 - there we go that's done let's go ahe and
07:55 - just run webpack again and let's open
07:58 - index all I need to change my index is
08:02 - now referencing scripts.
08:04 - min.js and let's
08:06 - open index.html there you go I've got my
08:09 - webpack page if I open my console log
08:12 - they're both in there excellent looking
08:15 - good you can see it takes me I need to
08:17 - get the uh Dev tool working right
08:19 - because that's not exactly how I want
08:20 - the dev tool to
08:22 - look but at any rate that's working
08:25 - let's go back to the console log uh and
08:28 - let's look at these modules here so now
08:29 - a really great thing is I can use node
08:32 - or npm to install some more stuff so
08:35 - let's say you're a jQuery guy
08:37 - everybody's somewhat familiar with
08:39 - jQuery still
08:41 - right let's say absolutely have to have
08:44 - jQuery on the page for some reason so
08:46 - there we go I've installed jQuery and
08:48 - let's also install low
08:50 - Dash install and save low
08:53 - Dash so let's say module one is a jQuery
08:56 - module it does something that only
08:58 - jQuery can do
09:02 - so now I can require
09:05 - jQuery let's go single quotes and then I
09:09 - can H1 H1 is going to get new HTML new
09:17 - text run
09:19 - webpack and refresh my page you can see
09:22 - now it runs jQuery on my page excellent
09:25 - uh a very cool thing is do I have jQuery
09:27 - on here nope jQuery does not exist in
09:31 - the global scope of my page which is
09:33 - very cool cuz jQuery now only exists
09:36 - where jQuery needs to exist if another
09:39 - module needed to require jQuery totally
09:42 - fine the code does not get duplicated
09:44 - I'm not going to double the size of my
09:46 - Javascript file by importing this twice
09:49 - it's just going to create a module
09:51 - called jQuery and make sure that that
09:54 - has loaded in the proper order where it
09:56 - needs to load so that's a great thing
09:57 - about module loaders is they do a lot of
09:59 - the smarts for you and let's say I
10:01 - needed to use low Dash here which is
10:04 - basically underscorejs for those of you
10:06 - guys who are not familiar with
10:10 - it low
10:12 - Dash let's require low Dash let's go ahe
10:14 - and get some data here I'm using macaroo
10:17 - let's make 20 rows of random data
10:21 - here let's go ahead snatch
10:24 - that paste that in ver people equals
10:29 - there's all my people and then let's
10:32 - alert let's see how many female people
10:34 - we have in
10:40 - here filter people where
10:45 - gender
10:49 - female
10:50 - length so we're going to
10:53 - alert female
10:58 - count
11:00 - there you go let's run webpack again and
11:02 - you'd use something like node Monon is a
11:05 - great tool for handling all your webpack
11:08 - there you go nine
11:09 - females and then it's also running my
11:11 - jQuery module so now my modules are
11:14 - completely broken up into uh just units
11:18 - that do one thing uh there's a little
11:21 - bit of jQuery code Happening Here If I
11:23 - had a lot of jQuery happening then I
11:25 - could easily make another module you
11:27 - know say I had a jQuery for form
11:29 - validation I can make a form validation.
11:31 - JS and simply require my form
11:34 - validation.
11:38 - JS and then that could that form
11:40 - validation JS would also require jQuery
11:43 - and do all of its jQuery stuff and
11:45 - webpack will make sure that jQuery
11:47 - exists where it has to and can be
11:49 - referenced where it needs to be
11:50 - referenced from so module loading super
11:53 - awesome thing webpack super cool great
11:58 - great great great utility it can do so
12:01 - many things um you just go to webpack's
12:03 - page and you'll get just a glimpse of
12:05 - all the things that it can do uh but
12:07 - there's webpack let's get into react
12:09 - using this basic kind of web pack
12:12 - configuration we have going on right
12:15 - now