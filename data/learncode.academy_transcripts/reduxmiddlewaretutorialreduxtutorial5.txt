00:00 - so there's one more feature about Redux
00:02 - that we need to cover before we start
00:03 - tying it into a react application and
00:06 - that's Redux middleware if you're
00:08 - familiar with expressjs at all if you've
00:10 - ever built a node.js application with
00:11 - Express Redux middleware works a lot
00:13 - like that a piece of Redux middleware
00:16 - will intercept every single action that
00:18 - comes through and then it can either
00:20 - modify that action or it can actually
00:23 - cancel that action by simply not calling
00:25 - any of the next things any of the next
00:27 - middleware so we're going to go ahead
00:29 - and make a basic middleware here and
00:31 - then in the next video we're going to
00:32 - cover how middleware is also the
00:34 - solution for async actions in Redux like
00:37 - Ajax XR requests so what I did is I
00:40 - rolled back the code to back when we had
00:41 - a really simple store with just a single
00:43 - digit value since we're not going to
00:45 - really mess with reducers I can even
00:47 - minimize that reducer code and I can
00:49 - even get rid of this store subscribe
00:51 - code right here so let's get rid of that
00:53 - so we're simply creating a store we have
00:55 - some actions that we're firing off so to
00:57 - add middleware it's very simple you
00:58 - simply add a third argument to the
01:01 - create store
01:02 - command I have middleware right there of
01:04 - course I haven't made it yet so let's
01:06 - pull in apply
01:08 - middleware from redex and then we'll go
01:12 - const middleware
01:15 - equals apply middleware so then any
01:17 - middleware we want to add in we simply
01:19 - add into this function as arguments so
01:21 - let's go and create our first middleware
01:23 - here and we'll go with a very basic
01:26 - logger and then here's the Syntax for
01:29 - Crea creating middleware now you're
01:31 - probably not going to need to create
01:32 - middleware but here's how you do it if
01:33 - you want to most middleware you can
01:35 - actually pull in as an npm package and
01:37 - just to use it by just throwing it into
01:39 - apply middleware we're going to create a
01:41 - simple middleware here for a logger so
01:44 - it goes store you basically do a chain
01:46 - of thunks next and then
01:52 - action and then this is actually our
01:54 - middleware function that will fire every
01:56 - single time so I can just console log
01:58 - action fired
02:01 - and then the action so there you go I'll
02:03 - save it it'll
02:05 - reload and then I didn't add it in so
02:07 - let's add that in
02:10 - logger there we go forgot to add the
02:12 - logger there we go action fired action
02:14 - fired and it's showing me the type of
02:15 - action and also it's no longer let me go
02:18 - and get that store listener in there
02:20 - again so you can see if it's actually
02:22 - firing uh store subscribe
02:30 - store
02:35 - change you'll notice right now this
02:37 - state is not ever changing the actions
02:39 - are firing but we're never calling the
02:41 - next middleware so we're essentially
02:43 - terminating every action before anything
02:45 - takes place so to call the next we
02:47 - simply fire next and give it the action
02:49 - that was passed in there you go next
02:52 - action and now the reducer is actually
02:54 - firing we're calling the next action
02:56 - there's no more middleware so it's going
02:58 - to go ahead and run the reducer so then
03:00 - we're seeing that we're actually
03:01 - changing the store after the action
03:03 - fires we could also modify this action
03:05 - if we wanted to let's say action
03:07 - type let's make sure it's
03:10 - always decrement ah if I could type
03:13 - there we go so now though it says ink
03:16 - because up here it's ink then down here
03:18 - it's actually 0ga 1 -23 we're actually
03:22 - firing a decrement every single time so
03:25 - there we go we can actually modify
03:27 - things I'll get rid of that we'll keep
03:28 - ink and let's go ahe and create a second
03:31 - type of middleware this time we'll
03:32 - create an error
03:35 - Handler let's create error let's add
03:38 - error to the
03:40 - list and then in this case we'll just
03:42 - try the next action if that fails then
03:45 - we'll actually
03:47 - log there we
03:56 - go and then we'll actually pass the
03:59 - error in there so let's go ahead and
04:00 - make something here that's going to
04:01 - error let's make a reducer here let's go
04:04 - else if action
04:06 - type equals
04:09 - e then we're going to throw a new
04:17 - error there we go and let's go then at
04:19 - the very end let's dispatch an
04:25 - e is that capital E yes it was so I'm
04:28 - basically creating an error here and
04:30 - there we go ah the error caught it uh so
04:33 - there we go the action fired of Type e
04:35 - this is my logger middleware this is my
04:38 - error Handler middleware and then the
04:40 - actual error never fired we tried to
04:43 - fire it but nothing happened so all the
04:45 - other ones went through just fine and
04:47 - that's how you create an error Handler
04:48 - middleware now of course these would all
04:50 - live in their own files and whatnot so
04:52 - in the next video we're going to
04:53 - actually get into handling asynchronous
04:55 - actions with middleware