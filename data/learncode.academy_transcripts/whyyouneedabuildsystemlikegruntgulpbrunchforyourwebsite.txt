00:00 - I'm going to cover in this video why you
00:02 - need a build system now I can remember
00:04 - the first time as a earlier web
00:06 - developer somebody said run a build
00:08 - system or run a build on your JavaScript
00:11 - and it totally freaked me out I was like
00:13 - what do you think I am I'm sort of
00:14 - full-on programmer here um and so I'm
00:16 - going to demystify that in this video
00:18 - talk about kind of what a build system
00:20 - is it's not a scary thing um what it
00:22 - does for you and you'll hopefully see
00:24 - why professional web developers all use
00:26 - build systems or should use build
00:28 - systems and kind of the advantage that
00:30 - it will give you so why you need a build
00:33 - system let's just look into what should
00:34 - a build system do first off it's going
00:36 - to do repetitive tasks uh things such as
00:39 - concatenating JavaScript say you don't
00:41 - want your browser to release a billion
00:44 - JavaScript files like this this is a bad
00:47 - idea uh because when your user wants to
00:50 - load your web page this is going to
00:52 - request this file from your server and
00:53 - this file from your server and this file
00:55 - it's going to open 20 requests to your
00:58 - server and your server has to go hit the
01:00 - hard drive 20 different times to return
01:03 - 20 different files that is not an
01:05 - efficient way it's so much faster to
01:08 - return one file where they're all just
01:10 - backtack added into each other as if you
01:12 - were to copy paste of course copy paste
01:14 - and save is a terrible way of doing it
01:17 - and you do not want to deploy a gigantic
01:19 - piece of code um so concatenating
01:22 - JavaScript um also CSS concatenating any
01:26 - kind of files that should go together
01:28 - into one file uh prefixing CSS you know
01:31 - like border
01:33 - radius uh border radius then Mo's border
01:37 - radius you don't have to do near as much
01:39 - of this stuff as you used to have to do
01:42 - uh but it that's something you shouldn't
01:44 - have to do day in in day out when you're
01:46 - writing code uh you can just write
01:49 - border radius and that should be Auto
01:50 - prefixed for you uh let's see we should
01:53 - run some utilities on our code like JS
01:55 - hint so when we save a JS file if
01:57 - there's a coding error in there
02:00 - JS hint can catch it for us a lot of
02:02 - times and we shouldn't have to put that
02:03 - into production or sniff it out in our
02:06 - console to find out that there's an
02:08 - error there when it's clearly a coding
02:10 - error so we should be able to run JS
02:11 - hint on our code we should be able to
02:13 - uglify it which is compress and Minify
02:15 - it and what that is is is here's like
02:18 - say I wrote this main JS I have a say
02:20 - name function and a say age function um
02:24 - I could put this file up there and
02:26 - that's I don't know how many bytes of
02:28 - data it is uh but but if I Minify it I
02:30 - run say uglifyjs on it that can Minify
02:34 - down let me turn word wrap on here that
02:37 - can Minify down to this piece of code
02:38 - which is literally half the file size uh
02:41 - this file will load twice as fast if I
02:44 - deploy this file uh because you'll
02:46 - notice what it did is instead of being
02:47 - called function say name it kind of
02:50 - crunched it down to function a and then
02:52 - later on it calls it as function a it
02:57 - says a right there wh
03:00 - come back to me and there you are so
03:03 - it'll run function a and it'll run
03:04 - function B because it renamed them the
03:06 - smallest possible things that they can
03:08 - be called and so that's minifi
03:10 - JavaScript we can also Minify CSS kind
03:13 - of the same way here's CSS it can be
03:15 - minifi minified down like this into a
03:18 - very ugly form uh the problem is you
03:20 - don't want to have to maintain this CSS
03:22 - that's that's a headache waiting to
03:24 - happen so we just want to deploy this we
03:26 - don't ever want to code this or even
03:28 - look at it with our physical I uh so
03:32 - there's utilities to do that we also
03:34 - want to run a local server in a lot of
03:35 - instances so that way we don't have to
03:38 - open this file by doing file opening
03:40 - Chrome that's an annoying way of doing
03:43 - it uh we want to be able to go to Local
03:45 - Host and just view it as if it was on
03:47 - the web without actually putting it up
03:49 - to the web so we know that if it works
03:51 - on our computer it's pretty much going
03:52 - to work when we push it to our website
03:55 - and then we also want to run live
03:56 - reloads whenever we save our file
04:00 - uh it'll automatically refresh our um
04:03 - not only our browser but also any
04:05 - devices like any iPhones or whatever
04:08 - that are connected to our server and so
04:10 - this all these things are done by a
04:11 - build system now common build systems
04:13 - are grunts grunt is probably the most
04:16 - popular still it was kind of like almost
04:19 - exclusively the most popular um gulp is
04:22 - the new guy on the Block and is very
04:24 - very popular um I'd say they're about
04:26 - equal right now uh brunch is a much more
04:29 - simplified one that's also out there as
04:31 - well but if you're going to learn one
04:33 - I'd say learn grunt first cuz it's still
04:35 - kind of the one that most companies are
04:37 - using gulp is the one that most
04:39 - companies starting up new projects are
04:41 - going to be using so gulp's going to be
04:43 - an important one to learn here very soon
04:45 - uh but start with grunt then go Gulp and
04:48 - then why is this good for you I kind of
04:50 - always mention already mentioned page
04:53 - speed is huge if you're loading if
04:56 - you're making 20 requests to the server
04:58 - just for your Javascript file
05:00 - that's going to slow things down um also
05:02 - if these things are not minified it's
05:04 - literally each one is taking twice as
05:06 - long to load as it has to so that's not
05:09 - a good thing you want to be able to load
05:11 - one or two maybe three JavaScript files
05:15 - that are compressed they're very small
05:17 - um and they have all the code that you
05:19 - need uh usually good idea is you're you
05:22 - want to load maybe one Javascript file
05:24 - for your they're called
05:26 - vendor vendor files that would be like
05:28 - jQuery bootstrap any code that you're
05:31 - not writing it's called vendor code so
05:33 - maybe a compressed vendor one and then
05:36 - another one that's your actual
05:38 - application code so whatever is for your
05:42 - website deploy one for that now if you
05:44 - have this massive application and
05:46 - there's a hundred different pages and
05:48 - you know maybe all the user profile
05:50 - Pages need code that the rest of the
05:52 - website doesn't need well then you can
05:54 - load another one that's just you know
05:56 - user uh and that would have all the
05:58 - stuff for you know that when the user's
06:00 - logged in and that stuff so but you
06:02 - don't want to deploy anything you don't
06:04 - have to deploy you don't want to make
06:06 - any requests you don't need to to make
06:09 - um and this is very common you look at a
06:11 - lot of web pages and you'll see just
06:13 - dozens of requests happening and their
06:15 - page is terribly slow compared to what
06:17 - it could be um and they don't actually
06:20 - have to change their code they just have
06:21 - to change the way their code is being
06:23 - deployed uh so page speed is huge a
06:27 - development workflow is really the big
06:29 - wi to me though um you can use cool
06:31 - Technologies like SAS um you know
06:34 - instead of having to write your CSS well
06:37 - if you don't know SAS SAS is a much more
06:39 - fun way uh for developers to write CSS
06:42 - you can break your code into multiple
06:44 - files uh back in the day we used to
06:46 - write CSS files that were gigantic and
06:49 - it would be such a pain you're scrolling
06:51 - and scrolling through literally
06:53 - thousands of lines and and that kind of
06:55 - code breaks easy that kind of code is
06:57 - terrible to maintain so now you can
06:59 - break break your code into a lot of
07:00 - little files that each have a name based
07:02 - off of what they do uh and you can just
07:04 - kind of concat concatenate them all
07:06 - together and then spit them all out as
07:08 - one file and that's also easier to avoid
07:11 - code conflicts uh if you have a team of
07:13 - multiple people working on the
07:14 - JavaScript files I touched this file uh
07:17 - there's a lot lower odds that somebody
07:19 - else touched this file they probably
07:22 - touched a different file if they're
07:23 - working on a different task um and once
07:25 - again you can avoid annoying repetitive
07:28 - tasks like PR fixing your CSS and stuff
07:31 - like that so that's what a build system
07:34 - is hopefully that makes sense to you and
07:37 - in the next videos we're going to get
07:38 - into building our first build system
07:40 - with Grunt and it is not as scary as you
07:42 - think the only thing you're going to
07:44 - want to do is watch my intro to nodejs
07:46 - to get a very very basic understanding
07:49 - of what nodejs is and if you've seen
07:52 - that or if you're kind of comfortable
07:53 - with running node on your machine then
07:55 - we're going to get into grunt here we
07:58 - go