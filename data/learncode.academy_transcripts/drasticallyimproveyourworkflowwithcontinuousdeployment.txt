00:00 - in this video we are going to set up
00:02 - continuous deployment for our
00:03 - application which is an incredible way
00:05 - to improve development workflow and
00:07 - productivity
00:09 - to pretty much any app now what
00:10 - continuous deployment means is that
00:13 - whenever we merge to master or push code
00:16 - directly to master that's going to
00:17 - automatically get deployed out to
00:19 - production if we set up other branches
00:21 - like a staging branch whenever we force
00:24 - push something to staging or merge
00:26 - something to staging that will
00:27 - automatically go out to a staging
00:28 - environment automatically get deployed
00:30 - all the time it's a great way to manage
00:33 - your deployments you merge it to master
00:35 - it's out on production so masters always
00:37 - in sync with production and so to set
00:39 - this up will be pretty quick and easy
00:41 - we're going to use semaphore ci to do it
00:43 - which is very fast very easy to work
00:45 - with and you can follow along with the
00:47 - readme here now we're going to give you
00:49 - two examples in this video we're going
00:50 - to show you how to do static content
00:52 - which is html css in javascript so for
00:55 - that i have this sample index.html which
00:58 - just says hello world and when we make
01:00 - changes to this that will automatically
01:02 - go out and i'll also also show you how
01:04 - to do it
01:05 - for web applications like node.js or
01:08 - something else that requires kind of
01:10 - some startup commands when you actually
01:12 - push the code to your server so here we
01:14 - go let's go and get started our first
01:16 - step is we're going to create an ssh key
01:19 - that's going to allow semaphore to
01:21 - securely connect to our server and run
01:23 - some commands there so let's go ssh
01:25 - keygen
01:27 - c and you just give it some sort of
01:29 - identifier i'll just say semaphore
01:32 - and then we choose where the file is so
01:34 - i'm going to call that exactly this
01:36 - folder here that they want
01:39 - and then i'm just going to call it
01:40 - idrsa.semaphore
01:43 - oh it's a key and i'm not going to use a
01:45 - passphrase that's important so this
01:47 - created
01:48 - idrsa.sema4 and
01:50 - idrsasema4.pub so let's go ahead and
01:52 - copy the contents of that public key we
01:56 - can use cat for that
01:58 - id rsa.semaphore.pub
02:02 - we're going to pipe that to pb copy
02:05 - there we go now it's copied to our
02:07 - clipboard and now i'm going to go ahead
02:09 - paste that off screen so we have it
02:12 - and we can go ahead and ssh into our
02:14 - server
02:16 - root add and that is 45.55.153.229.
02:23 - so now we're in our server we just need
02:25 - to paste that pub key into authorized
02:28 - keys so we can do this really easily we
02:30 - can go echo
02:32 - and then paste it there's the pasted and
02:35 - i'm going to close those parentheses so
02:37 - i basically wrapped it in parentheses
02:39 - two arrows so i'm going to append it to
02:42 - the ssh
02:43 - authorize
02:46 - keys file so i now appended that in so
02:49 - if there were any authorized keys i
02:50 - didn't erase those or you could just
02:53 - edit this authorized keys folder in
02:55 - paste file and paste that in yourself
02:57 - however you like to do it so on this
02:59 - server right here let's go to the ip
03:00 - address you can see it says 404 not
03:02 - found i'm running nginx
03:04 - and it's set up for static html content
03:07 - which means that it's going to look in
03:09 - the
03:10 - usr user share
03:12 - nginx html folder of course i have a
03:15 - typo there
03:18 - so if there were an html folder here
03:20 - that would be my html website i could
03:22 - make that directory
03:25 - and i could echo a file in there let's
03:27 - say okay
03:29 - so let's make index.html whoops i save
03:32 - that in the wrong folder let's go at
03:34 - echo
03:36 - html let's put in the html folder there
03:39 - we go now we have an html file
03:41 - index.html and it says ok so any changes
03:44 - to that index.html will real time be
03:47 - changed on nginx so i'm going to do is
03:49 - i'm let's go to remove that html folder
03:52 - and let's clone our repository straight
03:55 - on in there now if you're doing this and
03:58 - this is a private repository you
03:59 - couldn't just get clone it you'd need
04:01 - access somehow so to get access you
04:04 - simply go to your settings
04:07 - and you add a personal access token you
04:09 - can generate a new token let's call it
04:11 - semaphoretoken give it access to our
04:13 - private repositories now that token can
04:16 - be used whenever we're cloning i could
04:18 - copy and paste that
04:19 - but i'm not going to use it because this
04:20 - is a public repository everyone has
04:23 - access to this
04:24 - i'll show you in a minute how you would
04:26 - use that token so now all i can do is i
04:29 - can go to the clone or download and
04:30 - you'll want to use not ssh you'll want
04:33 - to use https so that's important let's
04:35 - go and copy that
04:37 - and now i can get clone
04:40 - that into the html folder and if you had
04:43 - a token if this was a private repository
04:46 - you'd put that token there whatever that
04:47 - token is at
04:49 - github.com so token at github.com and
04:52 - you'll have access to your private
04:54 - repository so let's go to clone that
04:56 - boom that's done
04:58 - now if i refresh my site hey there's my
05:00 - hello world which is index
05:02 - dot html so now what semaphore ci will
05:06 - do is it will whenever changes happen on
05:09 - master it will ssh into this server it
05:12 - will tell get to force pull down the
05:15 - latest of master if any changes were
05:18 - made on the server at all it's going to
05:19 - automatically overwrite them and i have
05:21 - those commands right here in this one
05:23 - file called deploy.sh
05:25 - we're going to cd into this folder we're
05:27 - going to fetch all and we're going to
05:29 - reset hard to origin master simple
05:31 - enough so basically semaphore is just
05:33 - going to ssh into the server and run
05:36 - these three commands whatever's in
05:37 - deploy sh will get run so let's switch
05:40 - gears go over to semaphore and get that
05:43 - going and that'll be really really easy
05:44 - so let's go to add new project
05:46 - we'll pick our user
05:49 - and this is called example deployment
05:53 - example deployment
05:55 - we'll build off the master branch
05:58 - and this will take a minute to just
06:00 - analyze my project real fast
06:03 - there we are now notice the node.js code
06:06 - in there because if you remember i have
06:08 - a node.js project in at the same time
06:10 - that's okay all i have to do is say no
06:12 - we're not going to run npm install we're
06:14 - not going to do that setup now if
06:15 - there's a node.js project or project
06:17 - with dependencies this would be where
06:19 - you'd run the dependencies command
06:21 - which in this case is npm install i said
06:23 - cancel go away thank you
06:26 - and then npm test would normally be what
06:28 - you do to run test cases on node.js
06:30 - we're not going to do any of those so
06:32 - let's just go echo okay
06:34 - and save that since this is just an html
06:37 - file we don't need that but that's where
06:38 - you change your node.js settings
06:41 - we can go ahead and build with these
06:42 - settings
06:43 - and then there we go it's going to
06:45 - automatically run the build that's going
06:47 - to be simple enough that's going to
06:48 - build it's only going to take about 8
06:50 - seconds because we don't have any test
06:52 - cases that we're running that's going to
06:54 - happen really fast
06:55 - while it's going let's go ahead set up
06:57 - deployment now so i'm back on my project
07:00 - and let's set up our deployment we're
07:02 - going to scroll down and do a generic
07:03 - deployment
07:04 - and we're going to do this automatically
07:06 - so every successful build if it's on
07:08 - master it's going to go out
07:10 - this is going to build on the master
07:11 - branch
07:12 - and what are our deploy commands we're
07:14 - going to paste these two which i have in
07:16 - the readme
07:17 - we're going to say hey allow us to ssh
07:19 - into this server which this will change
07:21 - to your ip address or your server name
07:23 - your domain name
07:25 - and same right here we're going to sh
07:27 - ssh in and we're going to run deploy sh
07:30 - so whatever changes in deploy sh we
07:33 - don't have to ever change our continuous
07:35 - deployment setup and then we just need
07:37 - our private ssh key which is that
07:42 - idrsa.semaphore.pub.semaphore so let's
07:44 - go ahead cat that
07:49 - we're going to pb copy that
07:53 - that's copied to the clipboard let's
07:55 - paste it in there we go that's our
07:56 - private key now it's semaphore we'll be
07:59 - able to ssh into our server let's just
08:01 - call this prod
08:03 - i'll just call it production
08:07 - create that server and let's go ahead
08:09 - deploy boom let's let's deploy
08:11 - index.html here
08:13 - or deploy all of that
08:15 - straight out
08:21 - it's setting up our environment and it's
08:23 - going to run our two commands and we
08:25 - will actually have a continuous
08:27 - deployment going there we go command one
08:29 - ran and command two ran and it worked
08:32 - but you notice there's no changes let's
08:34 - go ahead and make a change to index.html
08:36 - and see just how long it takes for this
08:38 - to actually end up in production
08:40 - here we go i'll just go edit it hack it
08:42 - in straight here in github's user
08:44 - interface let's add some exclamations
08:47 - let's say i'm feeling
08:49 - emotional today there we go i merged
08:51 - that let's go back to semaphore sema4ci
08:53 - and see what happens
08:55 - you can see there we go a build is
08:56 - already queued up that's going to start
08:58 - building here any second
09:00 - and then it's going to deploy once that
09:01 - build is successful
09:03 - while this is going on as well i think
09:05 - it's important to note that sem4ci gave
09:07 - me a coupon for you guys it's not a
09:08 - kickback coupon i don't really get
09:10 - anything from it
09:11 - but i told him i was doing a video and
09:13 - they said hey we'll give all your
09:14 - viewers a coupon so i'm going to throw
09:15 - that coupon down into the description so
09:18 - that way you can actually save some cash
09:20 - if you ever do need to use the more
09:22 - premium features of semaphore ci with
09:25 - your company again that's in the
09:27 - description thanks to them for that
09:29 - and there you go the deploy is already
09:30 - going out you can see that it's
09:32 - deploying and it's deployed do we have
09:34 - the exclamations absolutely yes we do
09:37 - that's excellent now one thing worth
09:39 - pointing out is if you're doing node.js
09:42 - let's go over to node.js there's a
09:45 - little bit more that you have to run you
09:47 - don't simply do a git pull you also have
09:50 - to start up your server i'll go to my
09:52 - editor here you don't just do a git pull
09:54 - you actually start up your node.js
09:56 - server probably run an npm install so
09:59 - the actual script looks something a
10:01 - little bit more like this for node.js
10:03 - application not much more complicated
10:06 - let's cd into whatever folder my app is
10:08 - in
10:09 - let's get fetch
10:11 - get reset everything let's maybe
10:14 - do an np nvm install if you use nvm to
10:16 - manage your node version
10:18 - let's run an npm install then and let's
10:21 - kick off the app whatever you use to
10:22 - start your app in this case i'm using
10:24 - pm2 so i'd stop the app and then start
10:27 - the app and that's the only difference
10:29 - this will totally work for a node.js
10:31 - application as well so as you can see
10:34 - continuous integration continuous
10:36 - deployment not a scary thing works
10:38 - really really well
10:40 - probably the biggest thing you have to
10:41 - get used to is when you're doing pull
10:44 - requests you merge them down to master
10:45 - they go out
10:47 - if you have a mistake and you have to
10:49 - roll back roll back
10:51 - normally you're like okay let's push out
10:53 - that code and
10:54 - trigger the deployment manually well in
10:56 - this case you just revert the pull
10:58 - request merge it to master and then you
11:01 - essentially just did a rollback you did
11:03 - it completely in github every pull
11:05 - request can be reverted with a click of
11:06 - a button in github and so that's kind of
11:09 - the mental process you go through with
11:11 - reverts and quick rollbacks when you
11:13 - accidentally blow stuff up that's
11:15 - usually the thing people are the most
11:16 - scared of with continuous deployment is
11:19 - uh what do i do when i have to roll back
11:22 - quickly well you just make another pull
11:23 - request and merge it to master it's
11:25 - really simple and it's awesome it's so
11:27 - nice to not think about having to
11:29 - manually trigger deployments anymore so
11:32 - that's continuous deployment in a
11:33 - nutshell hope you enjoy the video have a
11:35 - great day