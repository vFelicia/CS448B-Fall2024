00:01 - so right now we have a basic basic basic
00:03 - redux application we have a really
00:06 - simple reducer and a store with just one
00:08 - value for data but that's not really a
00:10 - real world example because an
00:12 - application has much more than one piece
00:14 - of data for its values you'll have an
00:16 - object that has much more information to
00:19 - it so say you have a user
00:21 - my name is will
00:25 - my age is 35 getting up there
00:28 - and then tweets will be an array of
00:31 - tweets and so
00:33 - you'll want to now at this point act off
00:35 - of multiple pieces of information and
00:37 - you absolutely don't want one gigantic
00:39 - reducer because that'll be just a mess
00:41 - to maintain so we're going to actually
00:43 - combine multiple reducers that can be
00:45 - broken up into their own files so let's
00:47 - pull in combine reducers
00:51 - from redux and then let's actually
00:53 - create multiple reducers here so let's
00:55 - create
00:56 - user reducer let's pretend this is in
00:58 - its own file
01:03 - and then this will receive state in
01:05 - actions
01:08 - and we can make this an arrow function
01:12 - there we go so there's my user reducer
01:14 - and then let's create a tweets reducer
01:16 - as well
01:20 - so that's in its own file now we can
01:22 - combine those let's say then there's a
01:24 - third file index.js or something and
01:26 - that imports both of them and creates a
01:29 - reducer constant reducer
01:31 - equal combine reducers
01:34 - and then we're going to pass that in
01:36 - object and the object is going to
01:37 - basically say what piece of data are we
01:40 - modifying in this case user and which
01:43 - reducer function is going to handle that
01:45 - the user reducer
01:47 - so now what something really cool is
01:49 - going to happen when the user reducer
01:50 - file fires
01:52 - state right here will be this user
01:55 - object so it will only be able to act on
01:58 - that user object whatever it returns
02:00 - gets set as the new value for the user
02:03 - piece of the state when the tweets
02:05 - reduce or fires it receives whatever is
02:07 - set in tweets as state and whatever
02:09 - returns gets set as state again
02:12 - and so when you move to combined
02:14 - reducers make sure actually changes to
02:16 - reducers
02:18 - then you don't set your default values
02:20 - in here anymore you set your default
02:22 - values in here which is also nice nice
02:25 - so your default values are now set using
02:28 - es6 default values or however you want
02:30 - to handle it
02:32 - the user reducer right there state
02:34 - equals let's go
02:36 - name
02:37 - you know i just want i just won't pass
02:39 - anything by default that's just going to
02:40 - be an empty object
02:42 - you can set a lot of default values here
02:45 - or you can set some kind of default
02:47 - values
02:50 - up here and then you just make sure you
02:52 - return defaults or modify defaults at
02:54 - any rate you always have to return
02:56 - something in these functions so we're
02:58 - going to return state by default
03:00 - so at the very least we're going to
03:02 - return empty brackets if no state gets
03:04 - passed in the first time
03:06 - i hope that made sense you'll basically
03:08 - get errors if a reducer ever returns
03:11 - nothing that's going to cause problems
03:13 - so we've got our user reducer and then
03:15 - tweets
03:16 - is going to fire the tweets reducer
03:21 - and there's our setup now for multiple
03:22 - pieces let's go and save
03:24 - and then we got a bunch of store change
03:26 - but nothing happened
03:28 - you can see
03:30 - tweets is an empty object and users an
03:32 - empty object and tweets actually needs
03:34 - to be an empty array
03:36 - there we go tweets is an empty array
03:39 - so now let's make sure that's right yep
03:42 - tweets is an empty array user is an
03:43 - empty object so now we can actually fire
03:45 - some things off we can change user
03:48 - change user
03:50 - and the payload will be will
03:53 - make that change name
03:57 - change
03:58 - name and change age
04:06 - we'll change the h235
04:09 - and now the user reducer can do a switch
04:10 - statement or if else statements whatever
04:12 - it wants to do to modify that state
04:14 - we'll do a switch this time i think it's
04:16 - cleaner
04:28 - and then let's do a change age as well
04:31 - so we got change name change age
04:39 - i accidentally made that actions didn't
04:41 - i let's make that just action
04:43 - fix that there as well
04:46 - so the name is going to be the action
04:47 - payload if the action type is changed
04:50 - name this should look pretty familiar
04:52 - now if you've done flux of any kind
04:54 - and then state age there we go so now we
04:57 - should be able to set our name and our
04:58 - age
04:59 - let's look at this and see what we got
05:01 - we got a user age is 35 name is will
05:04 - excellent but we got a problem here
05:06 - let's look back at this previous
05:08 - modification we made and the user's age
05:11 - is still 35 now wait a minute we did not
05:13 - set the age yet how come the age is set
05:15 - here
05:16 - because what we're actually doing is bad
05:19 - we are changing this we are mutating the
05:22 - state object and returning the exact
05:24 - same state object instead we want to
05:28 - never ever ever ever mutate the state
05:30 - object instead we always return a new
05:33 - state object now you could do this in a
05:36 - couple ways you could go new state
05:42 - equals
05:43 - states and then we modify that object
05:45 - and we always return new state
05:49 - this approach definitely works but i
05:51 - think the better approach is to make
05:52 - sure that where you're modifying the
05:54 - values you simply make sure to do it in
05:56 - an immutable fashion so let's go and
05:58 - change this to state
06:00 - and then i would do this instead i'd say
06:02 - state equals so we're going to
06:04 - completely overwrite our state object
06:07 - we're going to pull in all the values
06:09 - from state as it is and then name is
06:11 - going to be action.payload
06:14 - that will work now if you put dot dot
06:16 - state afterwards that will not work
06:18 - because we're going to set the name and
06:20 - then we're going to overwrite the name
06:21 - with what it's currently so you always
06:22 - want to make sure your destructuring
06:24 - happens at the beginning so you can
06:26 - overwrite the name value
06:29 - so there we go and let's go ahead and do
06:30 - the exact same thing with
06:32 - age there we are and so this will work
06:36 - so we can go ahead store changed
06:38 - let's look at our user age 35 and our
06:41 - previous one
06:43 - no age at all excellent so the next year
06:46 - when i change my age to 36
06:51 - we have 34
06:54 - nope nothing sorry 35
06:57 - and 36
06:59 - and what's excellent about this again
07:01 - is this user reducer is not aware of the
07:04 - tweets portion of the data it can't
07:06 - change the tweets portion of the data
07:08 - absolutely nothing can happen
07:10 - now the tweets portion of the data could
07:13 - act on the change name event this change
07:16 - name event might have consequences for
07:19 - both the user state and the tweet state
07:22 - maybe we have to go through every tweet
07:24 - and change the username totally fine we
07:26 - can do that we can also switch based off
07:29 - of change name
07:30 - and modify the tweets portion of the
07:32 - state so one action can trigger multiple
07:34 - multiple side effects that are all
07:36 - completely decoupled from each other so
07:39 - that's how you break stuff apart and if
07:41 - you were to actually move this into
07:42 - files
07:43 - this would become a file for user
07:45 - reducers
07:46 - this would become a file for tweets
07:47 - reducers and then where you bootstrap
07:50 - your store this would all happen in one
07:52 - file as well so that's how you combine
07:56 - multiple reducers into one let's look at
07:58 - the next big piece of redux and that's
08:00 - middleware