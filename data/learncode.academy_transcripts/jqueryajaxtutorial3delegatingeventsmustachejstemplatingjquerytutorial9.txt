00:01 - all right here we go with our third and
00:03 - final jQuery ajax tutorial uh our our
00:06 - app is in the place where we can now
00:08 - load up all the orders When we arrive
00:10 - and we can add new orders
00:13 - Lauren wants a
00:15 - latte there we go so we can add new
00:17 - orders we can refresh our app and our
00:19 - orders exist because they're coming from
00:21 - the back end so what we need to do now
00:22 - is we need to add a delete button so we
00:24 - can remove orders and we also want to
00:26 - fix this right here this is kind of a
00:29 - messy hacky way of piecing together a
00:32 - string um in order for us to build out a
00:34 - template it works totally fine with
00:36 - something this small but if we want to
00:38 - add three or four elements and a lot
00:40 - more markup that's going to be messy
00:41 - really really fast so we've got to do a
00:43 - better way of doing that we're going to
00:45 - use the mustash JS templating engine uh
00:48 - so let's go and add mustache JS onto our
00:50 - page done that's easy uh and let's go
00:53 - ahead and create our template
00:56 - um all all a template is is a string
01:01 - and so we can go
01:04 - Li uh name and then what you'll do is
01:07 - double curly braces anytime you want to
01:10 - insert a value so instead of doing
01:12 - order- name we're going to pass order
01:15 - into our template and we can do name
01:17 - right there so it's going to look in
01:19 - order for the value of name and spit it
01:21 - out right
01:23 - there and so that would be the same as
01:26 - order. drink so that's our template for
01:28 - what we have right now let me close that
01:30 - Li
01:31 - tag um and let's go ahead instead of
01:34 - doing this we're going to go
01:36 - mustache. render and you pass it two
01:39 - things you pass it your template and
01:40 - then your object of values so we're
01:42 - going to go order template and then
01:45 - we're going to go order which is our
01:47 - object right here which has all our
01:49 - values in it let's go ahead and refresh
01:50 - and it should look exactly the same
01:52 - excellent no change at all uh but what
01:55 - we've done now is we've given ourselves
01:56 - the ability to add a lot more
01:58 - complicated templating to this this um
02:01 - and so what you can actually do is a
02:02 - sneaky way if you have a template that's
02:04 - not too big and bad you can build it by
02:07 - adding you know a bunch of plus signs
02:08 - and as long as you start off with an
02:09 - empty string you can do new line breaks
02:12 - so I'm going to go
02:14 - Li I'm going to go strong I'll actually
02:18 - do a paragraph
02:18 - [Music]
02:21 - P
02:23 - strong
02:26 - name is my
02:28 - name
02:32 - there you
02:33 - go and I'll add some more do another
02:40 - paragraph strong let's capitalize
02:48 - those and I'm also going to add a remove
02:53 - button U and this is actually a pretty
02:55 - annoying way to do a template this big
02:58 - uh there are many there's run plugins
03:00 - there's a lot of ways to make a better
03:03 - template that's in an actual HTML file
03:06 - and import it in and use mush Das to
03:07 - render it but for now this will this
03:10 - will have to do for our example and
03:12 - let's do a
03:14 - button and we're going to go data ID we
03:17 - want to print the ID and I'll show you
03:19 - why in a little
03:21 - bit
03:27 - ID there we go so let's put an X here in
03:30 - this button we could style that a lot
03:32 - better with CSS but we don't have to for
03:34 - this video and let's give it a class of
03:38 - um
03:38 - remove let just call it remove so there
03:41 - we go let this should work fine now and
03:44 - now we have our larger order and we have
03:47 - our x button which CSS should put over
03:49 - there or something but whatever it's
03:50 - good for now and when we click this we
03:52 - want it to remove it so let's go ahead
03:54 - and look at our backend teams update and
03:57 - it says to delete an order just send a
03:58 - delete request to API orders SL and then
04:02 - your ID of your order that you're
04:04 - wanting to delete uh so that's why we're
04:06 - printing this ID here let's look at what
04:08 - HTML we're actually creating
04:11 - is we're adding a paragraph tag with
04:14 - name paragraph tag with that and then a
04:16 - button with the ID of three and a class
04:19 - of remove so now we can
04:28 - do click or we can do on click I like to
04:30 - do on click I feel like it's more
04:35 - consistent on our click
04:38 - function we simply want to do
04:43 - ajax type is
04:46 - delete and then our URL is going to
04:49 - be API
04:53 - orders and then
04:55 - plus now I can get the attribute out
05:00 - was that data ID I think I was calling
05:02 - yep data ID I can grab the data ID so
05:04 - this will be if I click here on ID
05:06 - number one it'll be API
05:10 - orders1 so that's grabbing that
05:12 - attribute out and this will not work and
05:15 - I'm going to tell you why so here we go
05:17 - I'm going to do this and uh oh
05:19 - something's broken I probably have
05:20 - something bad in my code
05:22 - somewhere unexpected token online 58 oh
05:26 - yeah there we
05:27 - go got that
05:30 - okay so this button will not fire any
05:33 - requests let me show you let's go to the
05:35 - network tab click this all I want and no
05:38 - requests are firing why are no requests
05:40 - firing this is one of the most
05:42 - complicated things to figure out if
05:44 - you're new to JavaScript and jQuery is I
05:46 - have the selector right I have this
05:49 - remove selector correct but when I'm
05:51 - firing this when I'm running this
05:53 - JavaScript there have not been any
05:55 - things added to my page yet cuz my page
05:57 - loads up with no orders
06:00 - my page loads up it starts a get request
06:04 - that's in process let's go get the
06:06 - orders remember I said it's asynchronous
06:08 - JavaScript and XML uh it's asynchronous
06:11 - meaning it doesn't block your code so it
06:13 - starts that git request and then it
06:15 - starts these other things going and then
06:18 - it looks for all the remove items and it
06:22 - tells to listen to those but there's no
06:24 - remove items added yet those are going
06:26 - to get added 3 or 4 milliseconds later
06:29 - on this success function so how do we
06:31 - make it listen to the remove items that
06:34 - aren't there yet what we do is we listen
06:37 - to a click on remove items within the
06:39 - parent container so my parent container
06:42 - is my orders
06:44 - ul and I've already cached that right
06:46 - here orders equals that so what I can do
06:49 - is instead of listening to remove I can
06:52 - listen to
06:53 - orders uh and I instead of on I'm going
06:56 - to go
06:58 - delegate
07:00 - delegate
07:02 - remove click so this is going to listen
07:05 - to any click events on the orders thing
07:08 - and it's going to only fire if it's a
07:11 - part of a remove class it's going to
07:13 - listen for any clicks on any remove
07:15 - elements to come both now or in the
07:17 - future and it's going to fire them all
07:20 - now our JavaScript will work if I
07:22 - refresh let's refresh there's my get
07:25 - request this should fire a delete
07:27 - request there we go a delete request to
07:30 - API
07:31 - orders1 and now this is still there but
07:35 - if I refresh my page my order is gone
07:38 - awesome so now we need to do is on
07:41 - success of that we need to remove that
07:47 - element okay so you'll notice a couple
07:49 - of my items are gone it's because I had
07:51 - a code error and I needed to fix it real
07:52 - quick uh but what we need to do now is
07:54 - we need to delete these items um from
07:57 - the list once our delete request is
08:00 - successful so we need to hit the X it
08:02 - makes the successful delete request to
08:04 - the back end and now we need to remove
08:06 - this from the list so we don't have to
08:08 - refresh our page to see our changes so
08:11 - what we need to do is we need to on
08:13 - success we need to get the parent Li
08:16 - from this button that was clicked so I
08:18 - can store that
08:23 - here uh this
08:26 - closest Li so that's going to start
08:28 - going up the chain till it finds An Li
08:31 - it's going to be this button it's going
08:33 - to go up and it's going to grab it
08:35 - really quick so I've stored that and now
08:40 - on success I can go li.
08:43 - remove let's see if that works refresh
08:46 - yay it's gone and it's gone let's add a
08:49 - new
08:51 - order let's add that let's add a few
08:53 - more whe coffees refresh make sure
08:55 - they're there make sure they all go away
08:57 - it's gone let's refresh it's still gone
09:00 - it's gone and it's gone let's actually
09:02 - make that a little cleaner let's go Li
09:04 - Fade
09:05 - Out
09:07 - 300 and then on call back to that fade
09:10 - out let's remove
09:16 - it there we go let's do that add some
09:19 - orders
09:20 - [Music]
09:24 - again ah the Fade Out ah the Fade Out
09:28 - much better so there we go we have built
09:30 - a complete application now a few things
09:32 - that I need to specify that are very
09:34 - very very important is you cannot use
09:38 - this inside of a success function uh let
09:40 - me tell you what I mean is see how I did
09:42 - this closest Li uh if I did this closest
09:45 - Li in here that would not do anything
09:48 - because this no longer refers to the
09:51 - remove button that was clicked this now
09:53 - refers to the Ajax operation that is in
09:57 - progress so what I actually have have to
09:59 - do here is I have to grab the LI up here
10:02 - I have to refer to this at when I'm
10:04 - inside of this function and now I can
10:08 - pull the Ali here if that made sense I I
10:11 - have no way of knowing which element I'm
10:14 - in when I'm inside of this when I'm
10:16 - inside of the success function I cannot
10:19 - use this to find out the element that
10:20 - was clicked I have to use this when I'm
10:23 - in here and now I can store it as a
10:26 - variable and then I can access it later
10:29 - on if you need to use this inside of
10:31 - success the way you do that is you go
10:33 - ver
10:34 - self equals this and so now I'm saving a
10:38 - reference to self calling it this and
10:41 - now I can do
10:44 - self so it's accessing a variable it's
10:46 - going to look up my scope and find a
10:48 - variable if it looks for this this
10:51 - already exists inside of the Ajax item
10:53 - so it's going to pull the wrong this um
10:55 - if I do self there's no such thing
10:57 - called self yet so it's going to start
10:58 - looking up my scope and it's going to
11:00 - find something called self which refers
11:03 - to this I know that was a tongue twister
11:06 - for you but that's why I did it the way
11:08 - I did it right there it's a scoping
11:11 - issue it's one of the trickier issues of
11:13 - JavaScript I really need to do a whole
11:14 - video on it but this is about Ajax so
11:17 - I'll leave you where we are have a great
11:19 - day and uh good luck Ajax
11:22 - thing