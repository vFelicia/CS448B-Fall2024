00:01 - okay so we're going to have a lot of fun
00:02 - in this video we are going to be rapidly
00:05 - building an e-commerce platform with
00:08 - angular um and molten we're actually
00:11 - going to be using the yman angular
00:13 - generator because that's going to
00:15 - automatically scaffold out routes and
00:17 - stuff for us and then we're also going
00:19 - to be using Molt's e-commerce API which
00:21 - I covered in another video super cool
00:23 - tool that's going to let us build any
00:25 - kind of app we want in just a matter of
00:27 - seconds um so go ahead and download
00:29 - those two tools if you're going to
00:30 - follow along and here we go we're going
00:33 - to start by I've already done an npm
00:35 - install G yo for Yan um I also have
00:39 - grunt installed globally and I have
00:42 - Bower installed yo globally yally and
00:45 - then I've also installed uh an
00:48 - generator
00:50 - angular uh because that's our angular
00:52 - generator so those three are installed
00:54 - and so now I can make a
00:57 - directory that's going to be let's just
00:59 - call this
01:02 - storefronts and so now I just go yo
01:07 - angular what I like to use SAS with
01:09 - compass yes I like SAS yes I like
01:11 - bootstrap yes I like SAS with bootstrap
01:15 - I'm just going to say yes to all those
01:17 - and now it's going to install everything
01:18 - for me I'm going to be right back
01:20 - because I'm not going to make you watch
01:21 - my
01:23 - install okay there we go that took about
01:26 - a minute and the install finished so
01:28 - let's go ahead and go
01:30 - Sublime into this folder and see what we
01:33 - got so it's scaffolded out oh one more
01:35 - thing we have to do is we have to go bow
01:37 - install now that it scaffolded all that
01:40 - out for us so that's going to install
01:42 - all the bower modules that were in our
01:45 - where is that in our bower.json so it
01:48 - installed all those so it's given us an
01:50 - app here's our index.html that it built
01:53 - out for
01:54 - us and you see that we basically just
01:56 - have an about controller and a main
01:58 - controller uh so let's let's go ahead
02:00 - and use that generator to now scaffold
02:03 - out some routes for us we can go yo
02:05 - angular route let's build a store
02:10 - Route there you go let's also build a
02:13 - let's say the store is going to be all
02:15 - categories so then they click on a
02:17 - category let's build a category
02:20 - route then they click on a product so
02:22 - let's click on a
02:24 - product product route and then let's do
02:27 - a cart route let's see if we can get
02:30 - that far I don't want to take an
02:30 - incredible amount of your time but I
02:32 - know we can at least get to cart here in
02:33 - just a few minutes so there we go now we
02:36 - have a lot more files we've included
02:38 - we've included our store JS our category
02:40 - JS product
02:42 - cart I'm just going to add I'm going to
02:44 - go these top links and I'm just going to
02:47 - make change about to
02:51 - store delete contact who needs to
02:54 - contact the store okay so there we go
02:57 - now all I have to do is go grunt serve
03:00 - that's going to open up a live reloading
03:02 - web page for us in
03:07 - Chrome uh should be any second now cool
03:10 - all right there we go so home and store
03:12 - this is the store view so if you look at
03:14 - app scripts um app also has now all of
03:18 - our routes this is what our generator
03:20 - did when we did our route generation we
03:22 - created a store a category product it
03:26 - Maps them to the controller create our
03:28 - controllers for us and created our views
03:30 - for us so we basically have a full app
03:34 - now we just have to connect it to Molten
03:36 - I love the angular generator one thing
03:38 - I've learned about yman generators take
03:40 - the time to find the generators you like
03:42 - take the time to learn them and you're
03:44 - going to get that time back 100 fold uh
03:47 - so if you remember from the molten video
03:49 - you have to authenticate first before
03:51 - you make API calls so this is a little
03:53 - bit tricky in angular what we have to do
03:55 - is we have to now make a service there's
03:58 - probably three or four ways you could do
04:00 - this in angular but I'm going to do it
04:01 - with the service I think it's the
04:03 - simplest
04:04 - way you can't see but I'm making a
04:06 - folder called Services down here when
04:08 - the font's zoomed in you can't see in
04:11 - Sublime what's going on down there and
04:13 - let me go ahead and make a new file in
04:15 - here and let's save this as mol.
04:18 - JS uh so now I'm just going to make a
04:20 - service module here
04:23 - angular let uh let's not call it molon
04:26 - let's see with this app it's called
04:27 - storefront app so let's go ahead and go
04:30 - storefront app. Molton I like this stuff
04:33 - that's not 100% about just my app to be
04:36 - its own module name uh so no
04:40 - dependencies on
04:42 - you and let's do a
04:46 - factory and let's call this molten off
04:49 - maybe yeah there you go so there we go
04:53 - and what I'm going to do here is I'm
04:56 - going to if you remember I have to
04:58 - basically do I'm going to copy this I
05:01 - have this copied over here the molten
05:02 - stuff I need to do you create a new
05:04 - molten
05:05 - object then molten do
05:10 - off
05:12 - authenticate and there you go what that
05:15 - does is that authenticates and then you
05:18 - can do any molten stuff within here uh
05:21 - so what I'm actually going to do is I
05:22 - need to kind of wait for that to
05:24 - authenticate and then return an
05:27 - authenticated object so I'm going to use
05:29 - CU for that and I'm going to create a
05:31 - promise if you don't know about promises
05:33 - I do have a video on promises um and so
05:36 - I'll put the link to that I think I have
05:39 - a video on promises um so we're going to
05:41 - go ver
05:43 - deferred equals q. defer so what I've
05:47 - done is I've kind of made a promised
05:48 - object right here a deferred object and
05:50 - so that's going to be what I
05:53 - return defer do promise I'm going to
05:56 - return the promise of that now you're
05:58 - you might feel confused here for about 2
06:00 - minutes stick with me till we get this
06:02 - first route done and it's all going to
06:04 - make a lot of sense and then we get to
06:05 - copy paste so I'm going to do is I'm
06:08 - going to authenticate first I'm
06:10 - returning instantly This Promise the
06:13 - promise is not resolved with anything so
06:15 - when molten authenticates then I'm going
06:18 - to
06:20 - resolve with the molten object that's
06:22 - been authenticated this object right
06:24 - here so this is what's ultimately going
06:27 - to get returned when people require
06:29 - molten off so there's my
06:32 - Factory uh one thing I have to do is I
06:35 - have to now add since I did not generate
06:37 - that factory I have to add that in
06:39 - myself let's go
06:41 - Services mol. JS and I also have to add
06:44 - that molten API
06:47 - Library js. mol.com
06:50 - V1 so I'm going to go ahead and save
06:53 - this uh file save as save page as let's
06:58 - go code
07:00 - what's that called storefront app
07:03 - scripts let's make a folder called
07:05 - vendor and let's call this
07:08 - molon
07:10 - min.js yes use JS I'm not a
07:14 - fool and then let's add this maybe right
07:17 - here after
07:18 - angular so
07:21 - scripts
07:24 - vendor what I call it Molton do min.js
07:27 - so now Molt's on my page and that molten
07:30 - service is on my page let's save this
07:33 - see if I have any errors here okay I
07:35 - still am seeing the store view so that's
07:37 - good um I'm not seeing a m molten Min
07:41 - app looks like they have Source mapping
07:43 - on that I'm just going to drop that off
07:45 - because I don't want to see Source
07:47 - mapping error that error is not a
07:49 - problem but I don't want to see it um so
07:52 - there we go now I'm loading my store
07:53 - view so now I can make in my app you see
07:57 - I've got these routes created I can now
08:00 - make molten API calls here in my app so
08:04 - let's go to the store view this will be
08:06 - where we view all categories we're going
08:09 - to do a resolve so before we load our
08:11 - store view we need to resolve a few
08:14 - promises we'll call this one
08:19 - categories um and then this will will
08:23 - require molten
08:25 - o wh molten o I believe let's see if
08:28 - that's what it was called molten o yeah
08:31 - so now once again so our Factory molten
08:33 - o is going to return a promise that gets
08:36 - resolved with a good molten object so
08:39 - let's also load in Q so we're going to
08:41 - do is q. when molten O So when molten O
08:47 - resolves
08:49 - then we're going to be able to do stuff
08:51 - in here so that resolves with the Molton
08:54 - objects if you remember we resolved
08:57 - right here we passed in Molten so molten
09:00 - is what gets passed into our function
09:02 - now we can make our molten
09:05 - calls molten category list and this
09:08 - seems like a lot of code but once we get
09:10 - this in we get to copy paste so it's
09:12 - really not a lot once we get this first
09:14 - one done we're going to be able to do a
09:17 - lot of stuff really fast so we're going
09:19 - to list our
09:21 - categories
09:22 - categories and then I actually want to
09:25 - do another resolve here don't
09:27 - I so what I'm I'm going to have to do
09:30 - here is Q let's make
09:33 - a exact same thing we did for our o q.
09:39 - defer and then I'm going to go
09:42 - deferred do resolve
09:45 - categories and then I'm going to return
09:48 - that deferred
09:51 - promise okay so once again I'm making a
09:54 - deferred and I'm returning that so I'm
09:56 - returning this as categories and angular
09:58 - is going going to wait until this
10:00 - promise resolves with our categories so
10:03 - there we go we're going to have all our
10:04 - categories in uh let's go to the
10:07 - controller that it generated for us what
10:09 - are we calling this store yep we're on
10:12 - store let's require
10:16 - categories so categories is going to
10:19 - require this guy right here which is our
10:22 - whole categories process we just
10:25 - did scope.
10:27 - categories equals
10:30 - categories and let's console log
10:32 - categories as well so we can see
10:36 - that uh let's go ahead and refresh here
10:38 - and go to
10:39 - store unknown provider categories uhoh I
10:44 - hate it when you get these things ah I
10:46 - know what I did wrong I did not
10:49 - add since I made a new module I did not
10:52 - make my app require that module yet
10:55 - angular I do that a lot that's that's
10:58 - something I do a lot when I'm doing
10:59 - angular stuff I'll add a module I'll add
11:02 - it to my HTML and I'll for forget to
11:04 - make my app require it so now we're good
11:07 - you can see my object is right here boom
11:10 - I've got one
11:11 - uncategorized I've got one category
11:14 - called
11:15 - uncategorized so let's go ahead and make
11:18 - that spit it out on the page now let's
11:21 - go to our views our store view so if you
11:24 - remember I made scope categories
11:27 - categories um what do we actually want
11:29 - to print out here the ID is that and the
11:33 - title is what we're looking at so let's
11:35 - go back to our story
11:39 - HTML categories I'll just do a list for
11:42 - now don't want to bore you
11:44 - guys this will be an NG
11:48 - repeat let's go cat in
11:55 - categories so this will be cat. tile
11:59 - Some people prefer the spaces here some
12:00 - people don't I don't really care and
12:03 - this hrf will
12:05 - be uh what is it actually this is ngre
12:09 - because we're going to do some
12:10 - templating in
12:12 - here pound
12:15 - SL
12:19 - category and then it'll be cat. ID I
12:23 - kind of prefer spaces when it's there
12:25 - and I don't like spaces when it's here
12:26 - in a URL because it makes it feel m
12:28 - passive so let's see if that worked here
12:30 - there we go uncategorized and that takes
12:33 - us to a URL that's not working yet so
12:35 - there we go category cat ID let's go and
12:38 - build out our categories now actually
12:40 - let's make sure this works so I go to
12:42 - store categories let me go to my
12:45 - Forge
12:52 - molon let's go ahead and log in to will
12:55 - store add a category make sure this is
12:59 - working here
13:00 - inventory
13:05 - categories create a
13:07 - category no parent
13:10 - category awesome
13:14 - category oh I need a description
13:17 - St awesome
13:25 - category there we go so there's my
13:27 - categories and now if I load up here I
13:29 - should see two awesome category and
13:31 - uncategorized awesome it is real time
13:34 - connecting to my store so let's go ahead
13:35 - and build out that category
13:38 - route it's going to be really simple I
13:41 - just copy and paste that whole
13:45 - resolve and instead of categories this
13:47 - will be
13:51 - products um when molon off then product
13:57 - list
13:59 - category equals and then this will be
14:01 - the ID of our category uh so what we
14:04 - need to do here is we need to do route
14:07 - we need to get that route Pam off there
14:10 - route current I think it's
14:13 - pams do ID so we're going to make this
14:16 - category slash ID so we just want to go
14:19 - to slash category we need to go to a
14:21 - specific category every time so
14:24 - categoryid that will be route. current.
14:27 - prams doid
14:29 - we're going to list that this should
14:32 - work let's go ahead and re refresh this
14:36 - guy so there we go that worked and let's
14:38 - go into our
14:40 - category
14:43 - controller
14:49 - products products you know what I also
14:51 - want to get the
14:57 - category
14:59 - so let's go back to that and we're going
15:03 - to also do the
15:07 - category love those Sublime Text
15:09 - multiple cursors Apple D um let's go
15:13 - category I believe it's
15:16 - doget I think I can just go ID like
15:21 - that so that should work let's see if
15:25 - that all works for us okay it's not
15:27 - resolving
15:29 - um it's not instantiating okay so let's
15:32 - try up unexpected identifier got a
15:35 - problem
15:36 - here ah no
15:43 - comma so there we go category view is
15:45 - resolving so that's good we should have
15:49 - a
15:50 - category and a products in there so
15:53 - let's go to our view and add
15:57 - them
15:59 - and this is category.
16:01 - tile since our category object is in
16:04 - there and again we'll just do an Li yeah
16:07 - I'm actually going to go over to store
16:09 - copy and
16:16 - paste prod in
16:18 - products and this will go to
16:22 - products prod.
16:25 - ID prod. tile let's see if this works
16:30 - hey we got our three products sweet see
16:32 - how it's going a lot faster so far our
16:34 - uncategorized category and then we've
16:37 - got our products I'm not messing with
16:39 - any design yet let's go to a single
16:42 - product and then maybe we'll do an add
16:44 - cart and a cart for those of you guys
16:46 - who totally want to keep following along
16:49 - um any you guys at this point you can
16:51 - probably realize wow you're going to be
16:53 - able to build out a whole shopping cart
16:54 - in a day um so definitely go just get
16:57 - the free to your molten thing Try It Out
17:01 - Try building an angular app or a
17:02 - Javascript app with just HTML you're
17:04 - going to like it I'm going to go ahead
17:06 - and add a product and an add to cart and
17:08 - then we'll call it because we're
17:09 - probably looking at about 20 minutes 30
17:11 - minutes by
17:12 - then let's go ahead we're on the product
17:15 - view so I'm going to copy the category
17:17 - resolve seems the most likely
17:21 - one um products we want the
17:27 - products and then this one will also
17:29 - have an ID
17:31 - required that one's got the route
17:33 - injected then we're going to do product.
17:36 - get we're getting that product yep
17:39 - that's all we need copy paste so let's
17:42 - go do that
17:43 - uh product controller requires
17:47 - product scope. product equals product
17:52 - it's a lot of product and so now we
17:54 - should be able to
17:55 - [Music]
17:57 - go
18:03 - and then let's let's console log this so
18:05 - we can kind of get a look at what look
18:07 - at what that product object looks
18:14 - like bearded man Strikes Back like it um
18:19 - let's see it looks like I got a problem
18:21 - in here somewhere unknown provider
18:24 - products product control I must have
18:26 - made a typo in there
18:29 - let me look at this
18:30 - guy oh I know what the problem is this
18:33 - is not in a resolve ah hate it when it's
18:36 - something it's always something silly
18:38 - like that isn't
18:48 - it there we go that's going to work cuz
18:52 - it
18:52 - works unexpected token well now there's
18:55 - unexpected token somewhere where is that
18:59 - okay accidentally typed
19:05 - you and there we go we've got our
19:07 - product bearded man Strikes Back uh
19:10 - we've got our description your beards
19:11 - will grow twice as long listening to
19:14 - these Homeless looking guys rock your
19:15 - face off with a banjo okay so we want to
19:18 - print that
19:19 - description maybe want we want to print
19:22 - pricing. formatted do without tax okay
19:27 - let's go a and just print those two
19:29 - then do an add to cart
19:30 - [Music]
19:32 - button so let's
19:34 - go
19:38 - P we're going to go NG bind HTML because
19:41 - with this is HTML in the description
19:44 - that it's really cool that you actually
19:46 - have the ability to add basic HTML tags
19:48 - to the product description which is
19:50 - really nice so the front end or the code
19:52 - has no we don't care what the
19:55 - description is we're just going to print
19:56 - it
19:57 - out
20:01 - which means I probably want that to be
20:02 - in a div not a P
20:07 - tag there we go so there's the
20:10 - description let's do a
20:19 - price what was that that was product
20:23 - dot pricing dot formatted do without
20:35 - tax there we go $10 even let's make an
20:39 - add cart
20:45 - button add to
20:48 - carts and then this will go NG
20:54 - click head
20:56 - cart and let's let's make this class
20:59 - equals
21:01 - BTN BTN success so there we go we're
21:05 - going to add that one to card let's go
21:06 - back to product JS and get that not
21:08 - product J yep that's
21:15 - it so this will basically pull in that
21:19 - now we need to get that
21:21 - molten we need to get that molten object
21:24 - in here uh so what we can do is go back
21:26 - to appjs
21:30 - and then this can
21:32 - just be
21:33 - [Music]
21:35 - molten and we will just
21:38 - [Music]
21:43 - return return molten o we can actually
21:46 - just return I think we just return
21:49 - molten o since that's a
21:57 - promise
21:58 - let's find out if we can do
22:01 - that let me console log that real
22:15 - quick yeah there we go so we've got our
22:17 - whole molten thing there uh so let's go
22:20 - ahead then we're going to go Molton do
22:23 - cart. insert and then we are going to go
22:27 - product.
22:28 - ID quantity will always be one we could
22:31 - add a field there but we're not going to
22:32 - do that uh for now and then that third
22:35 - pram again is null not sure why it's
22:37 - always
22:39 - null um let's uh do something a little
22:42 - funky here let's
22:46 - go let's make we we want to show status
22:49 - that we're adding that so let's make
22:52 - this an
22:54 - ngf um add
22:56 - status if there's no ad status we're
22:59 - going to show this if there is an ad
23:03 - status we are not going to make it
23:06 - clickable and this will be
23:09 - warning and this will be
23:14 - adding so there we go that'll be adding
23:17 - to cart
23:22 - so add status is null by
23:26 - default
23:30 - add status will be I don't know
23:35 - true actually I'm going to do I'm going
23:37 - to actually make
23:39 - that I'm actually take the status from
23:42 - in here is what I'm going to
23:48 - do so there we go adding to cart I'm
23:52 - going to do scope.apply
24:00 - I might not need to do that there um and
24:03 - then once it's
24:07 - complete scope. add status equals
24:12 - success and then let's bring timeout
24:17 - in so then we're going to do a
24:22 - timeout maybe of 1
24:25 - second and then we're going to make
24:27 - scope add status is null
24:31 - again so there we go we should add it to
24:33 - the cart uh what I did here is we're
24:36 - going to insert it to the cart uh we're
24:39 - going to we're going to change ad status
24:41 - so the button is going to not be clicked
24:43 - that's going away and this guy's showing
24:45 - up and then when it's successful we
24:47 - should say success for about a second
24:49 - and then click back to null so they can
24:51 - add another one to the cart let's see if
24:53 - this works here adding to cart apply is
24:56 - already in progress yeah I figured that
24:57 - was the case
24:59 - we don't need
25:00 - you we do need you I believe let's try
25:06 - that live reload refresh add to cart
25:08 - adding to
25:10 - cart success and now we can add it to
25:13 - cart again great add to cart adding to
25:16 - cart success all right so that's
25:19 - basically how we're going to do it we'll
25:20 - leave cart out for now maybe we'll do
25:22 - another video on it maybe we won't it's
25:25 - not that magical you just have to add a
25:27 - customer loog
25:28 - and then post up your address and your
25:30 - credit card information but that's a
25:31 - little bit more time intensive so hope
25:34 - you enjoyed looking at Molton with me
25:36 - today and uh give them a trial run sign
25:39 - up look at it it's a cool API and it's
25:43 - one that I'm very very glad I took the
25:45 - time to look into have a great
25:48 - day