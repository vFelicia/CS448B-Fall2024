00:00 - okay we're going to have some fun with
00:01 - Docker right now so we are going to spin
00:03 - up a Docker server and then we are going
00:06 - to run a web server application on it so
00:09 - first off I'm on digital ocean let's go
00:10 - a and create a droplet that we can use
00:13 - um this will be Docker test and let's
00:15 - get the cheapest one um if you've not
00:17 - used digital lotion it's a lot of fun
00:19 - and it's a cheap way to explore Docker
00:22 - um in a destroyable way um I'm going to
00:24 - go to Applications and I'm going to
00:26 - click on Docker so it's basically a
00:28 - buntu but it has docker pre-install
00:30 - um it's really easy to install Docker on
00:32 - a buntu but anyway that's easy enough
00:35 - add my SSH key and go um so there you go
00:38 - that's creating uh while that's creating
00:40 - let me show you some commands and once
00:42 - again I have a link for $10 of digital
00:44 - ocean credit that is a referral link
00:47 - that's down there in the description so
00:49 - if you want free credit to play around
00:51 - you can use that while that's going let
00:53 - me show you the docker commands that
00:55 - we're going to use today these are the
00:56 - basic commands if you look at all of
00:58 - them there's a lot and it can be little
01:00 - daunting but the the basic commands are
01:02 - pretty simple there's Docker run which
01:04 - will take any image it will create a new
01:07 - container from the image and then it
01:08 - will start that container um which is
01:11 - different from Docker start Docker start
01:13 - starts an existing container that is not
01:15 - running right now so when a container is
01:18 - run with Docker run you can stop it
01:20 - Docker stop give it a name or an ID and
01:23 - it'll stop it then if you want to
01:24 - restart that container again Docker
01:26 - starts will restart that container so if
01:28 - you were to run Docker run four times
01:30 - times you're going to create four new
01:32 - containers from that image um just
01:34 - important to know because that confuses
01:35 - a lot of new people Docker PS gives you
01:38 - a list of all your running containers if
01:40 - you do PS flag a then it's going to
01:42 - include all your stopped containers
01:43 - which is very useful because sometimes
01:45 - you want to see how many containers
01:46 - you've accidentally created over time
01:49 - and then Docker RM will remove a
01:51 - container delete a container by name or
01:53 - ID okay so that is probably created yeah
01:56 - sure why not let's go snatch that IP
01:59 - address out
02:00 - and I'm going to add an Etsy
02:03 - hosts um entry just to make it simple
02:11 - let's let's call it Docker domme so now
02:14 - Docker do me is my new Docker machine um
02:17 - and I can SSH root doer.
02:21 - me and do that on a second tab as well
02:24 - over
02:26 - here I might not need a second tag tab
02:30 - but yeah I'll do
02:32 - it okay so we are logged into our Docker
02:35 - uh virtual machine and you can see that
02:37 - I have the docker command yep there's
02:39 - all your Docker commands yep a little
02:41 - bit daunting so the first thing you want
02:43 - to do is Docker login um and Docker
02:45 - login will allow you to either create a
02:47 - new account or login with existing
02:49 - credentials on dockerhub now you can
02:51 - change this to point to qu. or some
02:54 - other Docker repository or maybe you
02:56 - have a private repository but by default
02:57 - it's going to be Docker Docker Hub I
02:59 - I've already logged in so I'm good to go
03:02 - so there we go let's clear that out so
03:04 - once you're logged in you can now run
03:05 - containers any public container that's
03:08 - been released just kind of like think of
03:09 - it as a GitHub repository so I can go
03:12 - Docker run um and then there's a company
03:15 - called tutm or tum that has this hello
03:18 - world that's just basically a hello
03:20 - world web app let's say this is my
03:22 - full-blown web application I've built it
03:25 - and I've put it up to the docker Hub
03:27 - repository I can now run it on any
03:28 - machine we will get into how to build
03:30 - this in the next tutorial but I feel
03:32 - like it's a lot easier on Docker to
03:35 - learn by just running existing
03:36 - containers so if I say Docker run the
03:38 - first thing it's going to do is it's
03:39 - going to pull all the layers um that it
03:42 - needs to run that and kind of this is
03:44 - one of the reasons I recommend using
03:46 - digital ocean because this is pretty
03:47 - fast they have a really great internet
03:49 - connection um or any VPS server for that
03:52 - matter um so all these layers are
03:54 - basically the changes that they've made
03:56 - on top of the file on top of the docker
04:01 - file system so maybe this layer right
04:03 - here was installing Apache maybe this
04:05 - layer here was adding a few files to the
04:07 - file system maybe this layer was
04:10 - configuring the Box a little bit so my
04:12 - box is running right now if I go over to
04:15 - my other window and I go Docker PS
04:18 - you'll see that I've got a container
04:19 - that is running right now it's got this
04:21 - ID um let me Zoom down a little bit cuz
04:24 - that seems kind of crunched
04:27 - up and now of course my screen's acting
04:29 - we okay here's my container ID um here's
04:32 - the image that it's running from uh
04:34 - that's the command that it ran and you
04:36 - can see that it's exposing Port 80 um
04:39 - and then it's got a name of tender
04:41 - Hawking um so let me go to Docker domme
04:44 - Port 80 and this will not
04:48 - work Docker me Port 80 does not work the
04:51 - reason that does not work is because
04:53 - it's exposing a port into the docker
04:57 - Damon but the docker Damon is not
04:59 - exposing that Port out to the rest of
05:00 - the world um and so if you want to
05:03 - expose a port you actually have to run
05:05 - it differently let me go Docker I can
05:07 - actually do like a contrl c over
05:10 - here um let me run that again Docker run
05:15 - and this time I'm going to give it a
05:16 - port to expose out to let's say 80 80 is
05:19 - 80 so I'm going to map the containers
05:21 - Port of 80 out to my server my web
05:25 - servers Port of 8080 so now I can access
05:28 - it and that's a great feature for Docker
05:30 - and the reason they do this is say you
05:32 - want to run five copies of your one web
05:36 - application well that web application
05:37 - exposes say Port 80 or Port 3000 but we
05:40 - want to run that as four different ports
05:42 - because we want to run different copies
05:44 - of it so it makes a lot of sense um that
05:47 - you have that that
05:49 - feature so there we go let's run it
05:51 - again and as you know from before I hit
05:54 - run so now I have two containers that
05:55 - I've created on my machine so let's go
05:57 - Docker me 8080
06:00 - and there you go hello world I'm now
06:01 - seeing my Docker web application um
06:04 - let's go back here and you see that I'm
06:05 - seeing some logs um that everything's
06:08 - coming through and now let me go ahead
06:10 - contrl C and stop that so if I go Docker
06:12 - PS flag a I've created two copies of
06:17 - this uh of this web server so let me go
06:20 - ahead and I can let me just go a and
06:23 - delete both of these now I'm going to
06:24 - copy this container ID Docker RM kill
06:27 - you
06:29 - Docker RM kill you so now PSA I have no
06:34 - containers created no containers running
06:37 - so let's say in a standard scenario I'm
06:39 - going to run say four copies of my
06:41 - container and I'm going to load balance
06:43 - between them so I could do something
06:45 - like this Docker run um I'm going to
06:47 - give this one a name web one so I can
06:50 - refer to it by name Port you'll be 80 81
06:56 - coming from Port 80 inside of to slash
07:00 - hello world I should just pronounce it
07:02 - differently every time I say it so there
07:04 - we go that one's going to run and I'm
07:06 - also going to run you as a Damon I'm
07:08 - going to do flag
07:10 - d uh which runs it in the background so
07:14 - you've noticed here I've got this run
07:15 - command with flag D flag name flag P
07:18 - that's the most daunting thing about
07:20 - Docker to me when I was learning this a
07:22 - while back is lots of flags it feels
07:25 - like is is there going to be an endless
07:26 - amount of flags here cuz honestly most
07:29 - command line applications you have one
07:31 - flag maybe two Docker you can have up to
07:34 - four or five and so if you if you in
07:36 - your mind just tell yourself hey going
07:38 - to be a lot of flags I just got to deal
07:40 - with it um then you'll be fine after a
07:42 - couple days there's only so many flags
07:44 - so let's run the exact same thing Web
07:46 - Two is going to be port
07:48 - 8082 and web 3 is going to be port 8083
07:53 - and we'll stop with three webs so now if
07:55 - I go Docker PS I've got three three web
07:57 - instances running web one web 2 web 3 I
08:01 - can get to it Port 8081 Port
08:04 - 8082 Port 8083 and you notice each one
08:07 - of these has a different host name uh
08:09 - which is a Docker ID in this case so
08:12 - that's kind of cool um now I could add
08:14 - an engine X instance that would load
08:16 - balance between these three um and it
08:19 - would look to these different ports uh I
08:21 - could do a lot of different cool things
08:22 - I can also now start and stop them by
08:24 - name so Docker stop web
08:26 - 3 and now that's not going if I go
08:29 - Docker PS I only have two running if I
08:31 - go Docker ps- a I've got three in
08:34 - existence but it exited a while ago so
08:37 - now I can start web 3 again Docker start
08:40 - web
08:41 - 3 so that's kind of the basics of Docker
08:44 - and in the next video let's get into
08:46 - running or building our first Docker
08:49 - application building our first image so
08:51 - we can push it up to the repository and
08:53 - run it from anywhere