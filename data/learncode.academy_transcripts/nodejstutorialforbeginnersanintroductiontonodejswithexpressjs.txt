00:02 - hey there this is a tutorial on how to
00:04 - get started on nodejs I'm going to
00:07 - assume that you know little to nothing
00:09 - about nojos already and if you already
00:11 - do no worries it's still going to be a
00:13 - really quick straight to the point
00:14 - tutorial uh so I'm going to assume you
00:17 - do not have node.js installed if you
00:19 - don't have node.js installed and you
00:21 - have Homebrew on your Mac then you need
00:23 - to go Brew install node that's simple I
00:27 - already have node installed so I'm not
00:29 - going to run that it's my preferred way
00:31 - of installing node if that's not uh if
00:34 - you don't have Brew then you can go to
00:35 - node what is nodejs is nodejs.org I
00:39 - believe yeah you can go and download it
00:40 - there that also works I have had more
00:43 - success using home brew to install it uh
00:46 - it does install on Windows just fine
00:48 - I've used node on Windows for years as
00:49 - well uh I do prefer using it on Mac and
00:52 - Linux environments though okay once that
00:55 - is installed uh we're going to use
00:57 - expressjs framework which is the the the
01:00 - most popular hands down framework for
01:03 - node often times people say node and
01:05 - they mean Express because Express just
01:08 - gets used that much and it's really
01:10 - quick and easy to use um so we're going
01:12 - to install that with node package
01:13 - manager or npm node comes pre-installed
01:17 - with npm anymore so we're going to go
01:18 - npm install G which means Global which
01:23 - will make it an executable available
01:25 - everywhere or if it's an executable it
01:27 - has to be installed global if you run
01:30 - into errors here it's probably because
01:33 - you installed it with a method that
01:35 - requires administrator access for Global
01:38 - things so you'll have to run pseudo npm
01:40 - install G Express and do a password I've
01:44 - often found they may have changed it but
01:46 - when I install node with the package
01:48 - from nodejs.org it tends to require
01:51 - pseudo every time you're installing a
01:53 - global I prefer home brew for installing
01:55 - because it just works better okay so we
01:57 - have node installed and we have Express
02:01 - installed and now Express gives us a
02:03 - great app so you can just go
02:06 - Express and I'm just going to go Express
02:09 - test and that will generate an app oh
02:12 - apparently I already have something
02:14 - called Express test let me go
02:17 - Express
02:19 - test Express there we go there we go now
02:22 - it ran now you're telling me all it has
02:24 - to do is I might need to go CD test
02:28 - Express
02:30 - and npm install npm install will take
02:34 - the package file that it created for me
02:36 - and install all the dependencies that it
02:38 - needs right away let's look at that
02:40 - package file real quick I'm going to add
02:42 - the folder to my project let's go
02:45 - sandbox what was that called test
02:47 - Express I'm going to add this to my
02:49 - project when you generated your node app
02:53 - with express it created this package
02:55 - Json file uh which you can also manually
02:58 - do yourself but I really prefer for
02:59 - having Express generated for me it's
03:01 - it's instant and you can see we have two
03:04 - dependencies here Express which is the
03:06 - local one not the global one that we
03:07 - already installed and Jade which by
03:10 - default it's going to use Jade templates
03:12 - for the views I'm not the biggest fan of
03:14 - Jade uh maybe I've just developed an
03:17 - HTML too long to feel more comfortable
03:19 - and more quick with that uh but if you
03:21 - like Jade by default it's going to do
03:23 - Jade and it's going to give your public
03:25 - resources as
03:27 - CSS another thing you can do
03:30 - is you can do
03:33 - Express and I prefer ex Hogan as my
03:39 - templating so I'm going to go Das Das
03:41 - Hogan and I'm going to dash C for CSS
03:45 - and I'm going to go
03:46 - less there we
03:54 - go so now I'm going to get into Express
03:57 - Hogan let me drop that folder for my
04:02 - project and get into my Express
04:06 - Hogan project aha much better so here we
04:11 - go now my views are Hogan which I just
04:13 - feel more comfortable Hogan's basically
04:15 - mustache for those of you guys who are
04:16 - not familiar with it and in our public
04:20 - style sheets we have less going on so
04:23 - that's it and all you have to do at this
04:26 - point to run the app is go node app
04:30 - .js and it's running on Port 3000 so I
04:33 - can go local
04:35 - hosts Port 3000 there you go welcome to
04:37 - express so let's start diving into what
04:40 - actually you do actually let me just
04:43 - kind of recap that so you're going to
04:45 - install
04:47 - node with either Brew install
04:51 - node or go to node
04:54 - js and install it there you're going to
04:57 - install Express globally
05:03 - either going npm install G Express
05:07 - doesn't matter where you are in your
05:08 - file system to install it or pseudo npm
05:11 - install G Express if uh there's a
05:15 - problem with that and then you're going
05:17 - to go generate an
05:21 - app which is
05:24 - Express and then app
05:28 - name see you can also do uh
05:33 - stylus less you can't do SAS because I
05:36 - think it uh considers less and SAS to be
05:39 - about the same thing there might be scss
05:41 - or there might be a key for SAS I'm not
05:43 - aware of it Hogan you can do
05:46 - ejs for that you can do those as
05:49 - optional for the templating languages so
05:52 - that's kind of how you generate an app
05:53 - and then you do npm install and that
05:56 - will grab all your dependencies which is
05:59 - only two or if you did in this case we
06:02 - have less going on and we have hgs we're
06:04 - using Hogan now it'll install all your
06:06 - dependencies so the whole thing's there
06:07 - in the package um which is really nice
06:11 - and then you just run it run
06:15 - app node app.js there you go and now our
06:19 - app is running so let's look into this
06:21 - actual appjs file and see what's going
06:23 - on it's loading Express uh it's loading
06:27 - routes which is just our routes file
06:30 - uh it's loading the index by default and
06:33 - it's also loading a routes user they're
06:35 - just kind of these are kind of
06:36 - boilerplate things for you uh and HTTP
06:39 - and path are the things that it actually
06:41 - uses so I'm going to go com out on all
06:42 - the boilerplate
06:45 - stuff uh it's setting the port to 3000
06:47 - you can change that if you
06:49 - want it's setting the default directory
06:52 - for our views so it knows where all the
06:54 - views come from and it's setting our
06:56 - view engine to Hogan this all happened
06:58 - in the general generation process using
07:01 - a
07:02 - facon uh We've turned on our logger
07:04 - since we're in the development
07:06 - environment I'm actually going to change
07:08 - that down here so only if we're in
07:10 - development environment use the
07:13 - logger uh it's using a lot of other
07:15 - things Express Json code URL so there
07:18 - it's going use app.
07:21 - router uh this tells it to initialize
07:24 - the router it's using less middleware so
07:27 - it'll automatically compile less as you
07:29 - go it can use it real time and then it's
07:32 - creating a static file to our public
07:34 - directory so we can actually grab public
07:36 - images JavaScript stylesheets uh so if I
07:40 - go 3000
07:45 - stylesheets style. L well browser
07:47 - doesn't know what to do with it but I
07:48 - just downloaded that file so if that was
07:50 - a Javascript file I can real time access
07:53 - those you know through my HTML pages so
07:57 - that's kind of what it's set up there
07:58 - you really don't need to touch this ever
08:00 - unless you're going to add more things
08:02 - in different order you say I want to add
08:05 - something else in this order that's
08:07 - pretty much it here's your development
08:09 - environment so you can do different
08:10 - things if you're in a production
08:12 - environment and then here it's doing app
08:15 - get slash this is kind of the routes
08:20 - enabling so we've loaded in our routes
08:23 - we've loaded in our user and that's
08:24 - where it's using this here we're
08:26 - defining the routes so our local our our
08:29 - default base route goes to routes.
08:32 - index and our users goes to users. list
08:36 - and then it's spins up the server and it
08:39 - tells it to the console you're listening
08:42 - on Port 3000 so that's pretty much our
08:45 - whole application at this point let's
08:47 - take a look at the routes index file all
08:49 - it does is it does exports index kind of
08:53 - the deal with node.js is it uses the
08:56 - commonjs format so whatever a module
09:00 - exports you can either do
09:03 - module module exports and we can add a
09:07 - whole object here and that will be what
09:10 - happens when you require it that's will
09:12 - be that will be what the required gets
09:15 - so when we require routes we're getting
09:18 - whatever exports is so basically we
09:20 - require routes it's going to
09:22 - automatically look for the index file
09:24 - and it's going to look for whatever our
09:25 - module exports object is and that's what
09:28 - it gets so we have routes. Index this is
09:31 - the other notation you can use is just
09:33 - exports
09:34 - Dot and we are doing only this we are
09:38 - rendering the index file and we're
09:41 - passing it the parameters of title
09:43 - equals
09:44 - Express so let's go ahead and look at
09:47 - what this OB what's going on right here
09:50 - tell you what I'll actually go back into
09:51 - the app so it remains simple in our
09:53 - minds let's if you're feeling confused
09:56 - at this point I'm going to kill that
09:57 - code and I'm going to kill this code
10:00 - we're going to do everything in this
10:01 - file for right now so what you can do is
10:04 - you can do app.get that's going to look
10:06 - for a git request on this address just
10:09 - slash and we're going to go function Rec
10:14 - res next these are the three things that
10:16 - get passed to any get put delete post
10:21 - they're going to Auto always get wreck
10:24 - which is your
10:25 - request response which is what our
10:27 - response is going to be and next which
10:29 - is you can actually chain things if you
10:31 - hit next then it's going to look for the
10:33 - next thing that matches our current URL
10:36 - uh we're not going to use next right now
10:38 - so basically I can go really quickly I
10:41 - can just go res. send which if we use
10:44 - send then it's going to send whatever we
10:46 - put in there straight to the browser if
10:48 - we use res. render then it's going to
10:51 - use our current templating library and
10:53 - look for a template to Output so that's
10:56 - kind of the two things you'll use to
10:58 - spit stuff back out to the browser if we
11:00 - go res. send here's some
11:05 - text and say
11:07 - done I need to go ahead and respin up my
11:10 - server there you go here's some text and
11:13 - if I look here at my network you'll
11:16 - notice by default my type is text HTML
11:19 - it automatically set the text correctly
11:22 - so if I put a I can also put a Json
11:24 - object in
11:27 - here
11:30 - I got to cancel my server spin it up
11:32 - again there you go you'll notice now my
11:35 - type is application. Json so it is
11:38 - really really easy to generate web
11:41 - services and restful services with
11:43 - Express it is just Lightning Fast very
11:47 - very little code to be done I can do a
11:49 - res.
11:52 - render and then the path of my file
11:57 - index let me cancel that spin up again
12:00 - if you'll notice it's getting really old
12:03 - really fast to cancel and spin up my
12:05 - server I'll show you how to address that
12:07 - in just a
12:08 - second so that looked for index because
12:12 - if you'll remember up here we have set
12:16 - our views is right there apps set views
12:21 - and by default our uh we're going to be
12:24 - using views as our engine our view
12:27 - engine looks for views so it's pulling
12:30 - up this it's looking for a title pretty
12:33 - much just looking for a title so let's
12:36 - go back to app.js and make sure we're
12:38 - passing a object to
12:41 - our file here give it a title of my
12:49 - app now it's called my app the title
12:52 - gets my app and my app is
12:56 - everywhere my awesome app if I could
13:03 - spell my awesome app so that's pretty
13:07 - much Express right there it's not much
13:10 - more complicated than that let's go
13:17 - app.get API let's say we're making an
13:26 - API let's just make up some once again
13:32 - name ah I'm not 33 I'm 23 now let's be
13:36 - honest let's be honest with ourselves
13:39 - here so now I can close it spin it up
13:42 - and go to Local Host 3000
13:45 - API there we go and now I've got my API
13:48 - response so it's quick and very very
13:51 - very easy now let's looking at what's
13:53 - going on here it's pretty bad
13:56 - development wise to Define your routes
13:59 - in your actual app file so what they've
14:01 - done here is they've broken out a
14:04 - routes require routes and they've
14:07 - actually put some stuff in here I
14:09 - usually won't Define any routes in the
14:12 - app unless it's a very small app like
14:14 - what their demo is giving you here so
14:16 - usually what I will
14:18 - do is something a little more along the
14:20 - lines of this I'll just go require
14:27 - routes
14:32 - and I'll put that at the bottom because
14:33 - I want to make sure the app gets fully
14:35 - booted we've already initialized the
14:36 - router before I start doing any routing
14:39 - action let's go to the routes
14:41 - index and then I will Define them here I
14:45 - will also go up to
14:47 - app and I will make
14:53 - sure I'll make sure that M that
14:56 - exports is uh getting I what I'll do is
15:01 - I'll make sure that my app which is the
15:02 - initialized express is getting passed to
15:05 - the exports so now down here I can
15:07 - require this app file even before it's
15:10 - all the way executed and I'll get the
15:12 - exports will be app basically I'll show
15:15 - you what that means here is I can go app
15:22 - equals so now I have app here and I can
15:25 - do
15:27 - app.get
15:39 - oh no method get I forgot I need to do
15:42 - module.
15:47 - exports there we
15:50 - go there you go and so now all I have to
15:53 - do is hit require routes and so now all
15:55 - my out routes are abstracted out to this
15:58 - index file I can do all my home stuffff
16:01 - here and then if I want to require stuff
16:03 - for my other I can go
16:06 - require
16:08 - user and that'll load in any routes that
16:11 - I've defined in this user file so that's
16:13 - kind of how I'll break out a larger app
16:17 - I won't do anything in the app.js file
16:19 - as far as routes concerned I'll just
16:21 - kind of load my routes index and I'll
16:23 - have that do everything if it starts
16:26 - getting to be a really big file with
16:28 - lots routes then I'll start breaking it
16:30 - out and just require different files and
16:32 - you're good to go so let's go and look
16:35 - into how can I make this workflow a lot
16:37 - better because this is getting really
16:39 - annoying to automatically be cancelling
16:42 - and restarting it kind of the reason we
16:45 - have to do that on node uh just in case
16:48 - you guys aren't familiar kind of with
16:49 - why node works the way it does is if
16:52 - you're working on something else when
16:53 - you make a request for the file your web
16:56 - server is running it's going to go grab
16:57 - those files real time run through them
17:00 - run through the compilation process
17:02 - every single time with node the big
17:04 - difference is is when you spinup node it
17:07 - grabs all the dependencies loads
17:09 - everything and sits there waiting for
17:11 - call backs on routes so we've Define
17:14 - these it's going to load up every file
17:16 - every dependency at load up and then
17:19 - it's just going to sit there and wait
17:21 - and as requests come in handles them all
17:24 - asynchronously without grabbing any
17:26 - dependencies without grabbing any file
17:28 - system stuff and that's kind of the
17:30 - beauty of node uh the only difference is
17:33 - is for development you don't want to be
17:35 - cancelling and
17:37 - rerunning your Express app every single
17:40 - time you change a single line of code
17:42 - just to be able to see it so we're going
17:44 - to use something called nodemon which is
17:47 - great for node monitor node monitoring
17:50 - and somehow I'm running into updates so
17:52 - we're just going to go npm install G for
17:55 - Global
17:57 - nodemon
18:02 - once again you might have to use pseudo
18:04 - on
18:09 - that all right that's installed we're
18:11 - still on our deal so I can go node
18:14 - Monon
18:16 - app.js and now it's automatically going
18:18 - to listen to any changes I have so if I
18:21 - go
18:22 - to my home it automatically restarts my
18:26 - server notice the file changed and now
18:28 - everything's good ah the workflow has
18:31 - been resolved um if you're doing
18:34 - anything other than backend and you want
18:35 - to add frontend stuff there's a great
18:37 - tool called
18:39 - yen. which will also do generators for
18:42 - apps and it'll also do live reload for
18:44 - you uh once again that's
18:50 - yen. maybe I'll do a tutorial on that
18:52 - sometime this is your boiler PL plate
18:54 - intro to
18:56 - express.js and node let let me know if
18:58 - you have any questions any uh further
19:01 - things that you'd like to see on this
19:03 - have a great
19:04 - day