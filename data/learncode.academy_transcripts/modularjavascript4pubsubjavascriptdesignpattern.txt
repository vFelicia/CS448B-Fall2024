00:00 - okay so i now have two revealing modules
00:03 - on my page i've got this people module
00:06 - right here and then i've got a stats
00:08 - module up here in the top now let me
00:10 - show you that stats module i basically
00:11 - i'm just exposing one method
00:13 - um that's a set people
00:15 - and so that's right here here's my api
00:18 - for that set people set people will fire
00:20 - set people
00:22 - and so basically you send it an amount
00:24 - of people and it's going to set that
00:26 - amount and then it's going to render and
00:28 - render is going to take that people
00:30 - value and it's going to spit it out on
00:31 - the page as you see here which is
00:33 - awesome so now this module automatically
00:35 - updates
00:36 - let me show you back in my people module
00:38 - here
00:39 - which is what we built in the last
00:43 - stats video
00:43 - set people so whenever we render
00:45 - whenever this module renders here
00:47 - i'm going to call stats.set people with
00:49 - the people length so which right now is
00:51 - zero
00:52 - let's add a test that's automatically
00:53 - one test one so now these are talking to
00:56 - each other great so this works very well
00:58 - but it doesn't scale to a large degree
01:01 - so if you have four five six modules on
01:04 - a page you're probably going to be good
01:06 - but what happens if you now let's say
01:08 - there's 10 modules that all need to know
01:11 - when people get added to this list so
01:13 - you have stats maybe say you have a
01:15 - header thing
01:16 - that's going to update and you have a
01:18 - footer
01:19 - let's say you know let's say there's 12
01:21 - other things i'll delete those for now
01:23 - and you know let's say some other
01:25 - developer wrote headers so it's not
01:26 - called set people it's called uh update
01:29 - count
01:30 - and then this one's called something
01:32 - else
01:33 - change
01:35 - basically the problem of this pattern is
01:38 - is not only the is there now a lot of
01:40 - repeated code but this module this
01:43 - people module this guy right here this
01:45 - guy has to be aware of every other
01:47 - module that depends on it and it also
01:50 - has to be aware of their api so i've got
01:53 - to know that the header module needs to
01:55 - know when i render and the header module
01:57 - needs update count to be called and
01:59 - maybe update count is going to be called
02:00 - differently too maybe it's going to be
02:02 - called like that
02:04 - that's no good so now i'm basically just
02:07 - having to keep this huge list
02:09 - of stuff in my people module there
02:12 - should be a better way i should be able
02:13 - to fire off one command here and then
02:15 - every other module that depends on me
02:17 - automatically updates and i don't have
02:19 - to keep track of that it's called
02:21 - coupling if you picture railroad cars
02:24 - with their couplers on them
02:26 - basically the way we have it here is
02:27 - this is tightly coupled to all the other
02:30 - modules i have to know that they exist i
02:33 - have to know that they want to be
02:34 - updated when i render and i have to know
02:36 - how to tell them that i've updated so
02:38 - that's a bad pattern for a larger
02:40 - application so we're going to use the
02:42 - pub sub pattern to kind of scale this
02:44 - application a little cleaner let me kind
02:46 - of show you in visual terms what we have
02:49 - right now so this is using revealing
02:51 - module patterns to talk to each other my
02:54 - module let's call this people
02:57 - and then let's say this is my stats
02:59 - module
03:01 - my my people module updates so it has to
03:03 - tell the stats module hey i updated and
03:05 - then it also has to tell this guy hey i
03:07 - updated and then asked to tell this guy
03:09 - hey i updated now let's say the stats
03:12 - module let's say this module 3 here can
03:14 - also change the account of people
03:16 - so then i can actually say
03:19 - hey people change your account add a
03:21 - person okay that's fine and then he's
03:23 - got to go tell stats
03:25 - and then maybe module 4 also wants to
03:27 - know when stats are changed
03:29 - so then he's got to listen here and then
03:32 - this guy talks to here like it gets
03:34 - pretty messy pretty fast and i'm only
03:35 - doing
03:37 - adding people to a list there's no other
03:39 - events going on that's messy
03:42 - and pub sub will clean that up for us so
03:43 - with pub sub we have this like central
03:45 - guy
03:46 - and if you think of dom events like
03:49 - i have this button right here and when i
03:51 - click on it there is a click event that
03:53 - fires as many modules as we want to can
03:57 - subscribe to that click event and the
03:59 - button doesn't know the button doesn't
04:00 - care the button just sends off a click
04:02 - event all the other modules receive a
04:05 - click event because the dom the document
04:07 - object model
04:08 - handles all those events for them so
04:10 - we're now going to create a pub sub
04:12 - sometimes that's called a mediator
04:17 - some people use mediator to mean
04:18 - different things sometimes that's just
04:20 - called an events bus or an events system
04:23 - so that's what we're creating right here
04:25 - pub sub mediator events and can i
04:27 - stretch nope now that copied it okay so
04:30 - now this module will just send a changed
04:32 - event boom i'll send a changed event
04:35 - uh and anyone else that's listening for
04:37 - that changed event will receive that
04:39 - changed event so he's listening
04:42 - let's say he's listening i'm listening
04:44 - to that change event too people changed
04:46 - okay cool i'll update
04:49 - and then oh i'm listening to to that
04:51 - changed event awesome i will update as
04:53 - well so all these guys are going to
04:54 - update and all this guy did was send a
04:57 - change event so that can look something
04:59 - more like this
05:02 - let's delete that it will look more like
05:03 - pub sub
05:05 - dot emit sometimes it's called an emit
05:08 - or a publish
05:11 - let's publish people change
05:14 - and let's send it the list of the amount
05:16 - people.length
05:18 - there we go so now that's all the people
05:20 - tell you what let's actually just send
05:21 - off people in general so somebody else
05:23 - can count the length if they need to
05:24 - know about the length people changed and
05:27 - then i'm sending them all the people
05:29 - great that's it and then i want in my
05:32 - stats module to be able to subscribe to
05:34 - that event so let's go
05:37 - uh pub sub
05:39 - dot
05:40 - i'm going subscribe
05:43 - to people change
05:46 - and then i want set people to fire
05:48 - so i want set people to fire whenever
05:50 - people have changed excellent now i can
05:52 - actually completely remove my api
05:54 - and we'll move off of that so let's go
05:55 - and look at this pub sub now let's see
05:57 - what this pub sub actually looks like
06:00 - here's a the bare minimum pub sub that i
06:02 - wrote right now i wrote an events object
06:05 - i prefer
06:06 - events uh kind of the classical way is
06:09 - you have publish
06:11 - your module is a pub sub module
06:14 - and you can do pub sub
06:17 - dot
06:18 - subscribe
06:20 - you can do pub sub
06:22 - dot
06:23 - unsubscribe
06:25 - and you can do pub sub dot publish
06:28 - so that's where you get the name pub sub
06:30 - from you're subscribing and you're
06:31 - publishing your pub subbing
06:33 - but i kind of prefer terminology of
06:35 - events so my it's my events thing and
06:38 - you do events.on events.off and
06:41 - events.emit so that's kind of my
06:43 - preferred way of doing it feels a little
06:45 - bit more like the dom
06:47 - so events dot on
06:49 - and i can on to an event
06:51 - uh people changed
06:54 - when people change i want to run some
06:55 - handler
06:57 - some method
06:58 - uh and then you can publ you can trigger
07:01 - or emit are kind of the two ways i like
07:03 - to call it so events.trigger
07:06 - people change
07:09 - three people now or emit which is kind
07:11 - of angular's terminology for that
07:13 - an event emitter so here's the simple
07:16 - way of building it i'll i'll put this
07:18 - code up there and you can copy and paste
07:19 - this code
07:22 - but basically you have an events object
07:24 - that's currently empty because there are
07:26 - no events created by default and
07:28 - whenever you subscribe uh it basically
07:30 - takes that event name and it's gonna say
07:32 - oh if it doesn't
07:33 - if it doesn't exist let's go ahead and
07:35 - create that array
07:37 - so let's say
07:38 - someone down here
07:40 - subscribes let's say somebody does
07:42 - events dot on
07:44 - people again let's do people changed
07:49 - and we want some handler to fire
07:52 - so then this will say oh people change
07:54 - doesn't exist so let's create people
07:56 - change
07:58 - and let's make it just a blank array so
08:00 - no events yet
08:02 - and then it's going to push our function
08:04 - that we received which is some handler
08:06 - so now some handler gets added on there
08:10 - so let's say someone else subscribes to
08:12 - people changed as well
08:14 - uh somebody else this is going on in
08:16 - some other module they're gonna say when
08:18 - people changed let's do some other
08:20 - handler some other function
08:22 - okay well that's gonna get pushed on
08:24 - there
08:27 - and then when somebody emits let's say
08:29 - module number four down here goes
08:31 - events.emit
08:32 - people change
08:35 - let's say it just gives it a value of
08:37 - three
08:39 - the mid is simple if that event already
08:41 - exists let's do a 4 each let's loop
08:43 - through every item in that array and
08:45 - let's call that function with the data
08:46 - they gave us so the data in this case is
08:48 - the number 3. so we're going to fire
08:50 - some handler 3
08:52 - we're gonna fire some other handler
08:54 - three
08:55 - and that's basically how that works
08:57 - so you can just copy and paste this code
08:59 - right here if you want an event emitter
09:01 - on your page and then you have an events
09:03 - module so let's go ahead and put this to
09:05 - some use here
09:09 - are we good we delete everything yes
09:11 - okay let's go back to our page
09:13 - pull up our console
09:18 - events.on
09:20 - let's just call it
09:21 - activate
09:24 - on activate let's just create a function
09:27 - here
09:28 - data
09:31 - and this will just alert the data
09:36 - great so now i can trigger that
09:39 - or emit
09:43 - let's submit that with three so now it
09:44 - alerts three cool let's uh go ahead and
09:46 - add another listener to it on activate
09:49 - we want to also console.log that data
09:55 - and let's emit there so it's going to
09:57 - alert 3 and then it's going to console
09:59 - log3 so this function fired first and
10:02 - then this function fired second so
10:04 - that's basically how that works and then
10:06 - you can also unsubscribe to where only
10:08 - one event is going on at that point so
10:11 - let's go ahead i'm going to stop this
10:12 - i'm going to put this code online so you
10:14 - can use it if you want there's also some
10:16 - great pub sub libraries out there
10:18 - if you were just to search javascript
10:20 - pub sub library or javascript events
10:22 - library they're ones that might have
10:25 - a lot more
10:26 - complex features so maybe you could
10:28 - subscribe to a namespaced event
10:31 - somebody could go
10:33 - events.on
10:35 - you know people and that will be all
10:38 - people changes will fire this function
10:43 - and then
10:44 - events dot on people.change
10:48 - so their name spaced
10:53 - so that way on peoplechange this will
10:55 - still fire because it's namespaced
10:57 - on any kind of people event this will
11:00 - fire and then this one will only fire on
11:02 - people.change so there's some other ones
11:05 - where you know you could
11:07 - people.change first
11:10 - and then that would be some first change
11:11 - handler
11:13 - so this guy would fire on any people
11:14 - change event this guy would only find on
11:17 - a people.change.first event and this guy
11:19 - would fire on any event from the people
11:20 - module so there are other libraries out
11:22 - there that add more features
11:25 - but this one works totally fine for most
11:28 - use cases let's go ahead and take this
11:30 - in the next video and incorporate it
11:31 - into our modular power revealing modules
11:34 - that we've been building