00:00 - check it out I cleaned up my HTML page
00:02 - if you'll remember I had a lot of static
00:04 - content and now 100% of it is in the
00:06 - react app so I'm just going to kind of
00:08 - walk you through rather than have you
00:10 - watch a 30 minute video where I copy did
00:13 - not cut and I paste and I moved it
00:14 - around I've pushed all the code to
00:17 - github and now you can just kind of walk
00:19 - through it this is going to show you
00:20 - just kind of a little explanation on a
00:21 - couple react tricks that I took along
00:23 - the way and then we'll get into flux
00:25 - this is the last video now we're going
00:27 - to get into some of the more complicated
00:28 - data handling but this is it this is my
00:31 - whole app right here I've got the ID of
00:33 - app and I've got my client Minjae s I
00:35 - guess I've got some bootstrap Styles I
00:37 - also got rid of bootstrap without jQuery
00:40 - J s so that's the only change that's
00:43 - happening to client man I'll show you
00:44 - how I was able to get rid of that here
00:45 - in a second but that's it I've got my
00:49 - routing going on if the path is just
00:51 - root if the hashtag path is just slash
00:56 - then it's going to load my featured
00:58 - component which is the default index
01:01 - route if the hashtag goes to archives in
01:04 - any article past that which I'll
01:06 - probably want to make a change to I'll
01:09 - probably want to make a dedicated our
01:11 - article route of and a way you can go to
01:13 - archives and it loads that you can go to
01:15 - settings and it's going to load the
01:17 - settings component so that hasn't
01:18 - changed
01:18 - let me show you the layout here and this
01:22 - is where our first react trick will take
01:24 - place so I'm loading a nav component
01:25 - which I made and a footer component
01:27 - which I made and then I'm rendering the
01:29 - children out in the middle that's it
01:31 - that's my whole layout everything else
01:34 - will take place within one of those
01:35 - top-level page components and so I had
01:39 - one style and that was that this
01:41 - container had a margin top of 60 that
01:44 - way this container would come down below
01:45 - that nav if you'll remember and so the
01:48 - way you'll do style in react if you
01:51 - don't have a lot of styles that need to
01:52 - go into their own stylesheet is you'll
01:55 - just do them inline which sounds really
01:56 - bad to a lot of people but it's a really
01:59 - clean way of doing it so you simply
02:01 - create an object like this you can't go
02:03 - style equals margin top you can't do it
02:07 - like this if that will not work in JSX
02:10 - so what you have to do instead is give
02:12 - it a style object
02:13 - there we go just give it a style object
02:16 - and you can either put in quotes and
02:19 - then actually put your style like that
02:22 - or react is smart enough to - case it if
02:26 - you have it camel cased so you can just
02:30 - do margin top sixty pixels and then
02:32 - print it out there and you're good to go
02:33 - this will work great if you have up to
02:35 - maybe ten rules if you start getting
02:37 - more like fifty rules you want to break
02:39 - it out into its own style sheet which
02:40 - we'll cover later but that gets it
02:43 - working just fine
02:44 - and then let me show you my nav here and
02:47 - how we were able to get rid of that
02:48 - bootstrap without jQuery j/s
02:50 - I'm simply printing off my bootstrap nav
02:54 - which this is just straight-up bootstrap
02:56 - nav code and then I have the UL with the
02:59 - Allies of the links and I'm also
03:01 - printing a couple classes here I'm
03:02 - printing that active class if you
03:04 - remember bootstrap if you want it to be
03:07 - active you had a class active right
03:09 - there see class active take it away now
03:12 - it's not active makes the class active
03:15 - again excellent so that works and then I
03:19 - also want the archives to go active on
03:22 - archives and I also wanted to go active
03:24 - if I were to say archives slash some
03:26 - article I still want that to match my
03:29 - archives are out so what I did is I just
03:31 - looked at location path name if location
03:33 - path name is just root just slash then
03:37 - I'm going to say featured class is
03:39 - active and then I'm printing out feature
03:42 - class here and then if look if the
03:45 - location path name starts with slash
03:48 - archives no matter what it ends with if
03:50 - it starts with slash archives that I'm
03:52 - calling that archived active and if it
03:55 - starts with settings that I'm calling
03:57 - the settings class active and that's
03:58 - kind of how they're printing out now I
04:00 - had a couple people ask how can you use
04:02 - class here in react you're supposed to
04:05 - use class name technically because class
04:09 - is actually a JavaScript reserved word
04:10 - because we use that up here
04:12 - so JavaScript technically doesn't want
04:14 - you using class elsewhere and if you're
04:16 - remembering the web pack config we load
04:18 - it in a couple plugins that's what this
04:20 - guy does this react HTML attributes
04:23 - plug-in will automatically transpile any
04:26 - of these class
04:27 - attributes here to be class name which
04:29 - is awesome because now I was able to
04:31 - copy and paste this bootstrap code and I
04:34 - didn't have to go find all the class
04:36 - attributes and changing the class name
04:37 - so that's really good and then I also
04:42 - for the navbar toggle the only the only
04:44 - thing I needed that bootstrap js4 was on
04:47 - this little view right here when you hit
04:50 - this it's going to add collapsed it's
04:52 - going to toggle the collapsed class
04:54 - right here this navbar header I'm sorry
04:57 - now navbar collapse zoom in a little bit
05:01 - for you if you add collapse to it then
05:05 - it collapses take away that collapse and
05:09 - it's gone so I was able to toggle that
05:12 - there we go
05:13 - collapse is gone and it opens up I was
05:16 - able to toggle that by just saying hey
05:18 - let's make this state collapsed true by
05:20 - default in our constructor let's make a
05:22 - toggle collapse method that just toggles
05:25 - that and sets our state to whatever our
05:27 - new toggle is and then I simply made my
05:30 - button fire toggle collapse on click so
05:35 - there we go on click this this state
05:37 - collapsed is just going to invert and
05:38 - then I just print that out right here so
05:40 - I'm adding that nav class in that nav
05:43 - class gets created right here if this
05:47 - state collapsed which I'm pulling out if
05:49 - we're collapsed print off collapse if
05:52 - not print off nothing so then I was able
05:54 - to remove bootstrap without jQuery now
05:56 - this is 100% react no jquery on the page
05:58 - no bootstrap code on the page nothing
06:01 - else on the page a really nice clean way
06:03 - to get things done and that's pretty
06:06 - much it I'll show you one more trick
06:08 - here let's go to this featured page here
06:10 - these are semi dynamic right now all
06:14 - these articles they're being populated
06:16 - by react now it's got a featured what
06:20 - the code looks like for this is I have a
06:23 - random add text string right here and
06:25 - I'm going to print out a row with a
06:27 - bunch of articles in it so I haven't I
06:30 - made an article component here which is
06:32 - just going to spit out my bootstrap div
06:34 - and the only thing that's dynamic about
06:36 - this article component is it can accept
06:38 - a props title
06:40 - and so one of the things people run into
06:42 - and react is how do I spit out an array
06:44 - of components how do I spit out multiple
06:47 - copies of a component like for a list
06:49 - and in this case where was I featured
06:53 - yep
06:53 - you simply create an array of components
06:56 - let me show you since this might look
06:58 - confusing to people aren't familiar with
06:59 - map
07:00 - I could go Const articles equals an
07:05 - array and then this could simply be
07:09 - article like this article title equals
07:15 - some title and then I could just do an
07:21 - array of articles like that and then if
07:27 - I were just go ahead save and that's
07:29 - going to refresh and these will all say
07:31 - some article up not running Deb there
07:37 - you go should work here there you go now
07:41 - they all say some title some title some
07:43 - title let's make that some other title
07:46 - some other title excellent but you
07:49 - notice that react is also going to kind
07:51 - of give me an error says every child in
07:53 - array or iterator should have a unique
07:56 - key prop this helps it render a little
07:58 - bit faster so each key should be one
08:03 - they need a unique key prop this could
08:05 - be the title this could be text this
08:07 - could be anything but that should be
08:09 - unique so one two three four that way
08:13 - since these are all just an array react
08:16 - needs to know something unique about
08:18 - each guy so now that warning is gone so
08:21 - an easy way to get this taken care of
08:23 - when it's dynamic data say I have an
08:25 - array of objects is simply take that
08:29 - array of data here's my array of data
08:31 - say I got this from the back end and I'm
08:33 - going to map that and so I'm going to
08:35 - basically every map gets these two
08:37 - things and it's going to return
08:38 - something so I'm going to return in
08:40 - article components where I spit out the
08:42 - title and the key is going to be the
08:44 - index so 0 1 2 3 4 and now this dynamic
08:47 - information is automatically coming out
08:50 - on my page so now once we get into flux
08:53 - all we have to do is kind of
08:54 - port this information and we can spit it
08:57 - all out into articles and bootstrap does
08:59 - a really good job automatically kind of
09:01 - laying that out I could copy this and
09:04 - make 20 of those bootstrap does a pretty
09:08 - good job with the masonry of things so
09:10 - even though it's a row that technically
09:13 - has 12 columns across it wraps around
09:15 - really really nicely so that's good and
09:17 - now they're all using an article
09:19 - component so if I want to give this more
09:20 - info some functionality then the article
09:23 - component will know what to do across
09:26 - the board
09:27 - archives is also using the exact same
09:29 - article component which is really nice
09:32 - so that article component can contain a
09:34 - lot of smarts to it or I can update the
09:36 - design very easily by just changing the
09:39 - article component say I want this to be
09:40 - an h4 now across the board my whole site
09:44 - uses h4 s for all the articles very cool
09:48 - so that's pretty much it that's how I
09:51 - did my layout you can snoop around the
09:53 - code and if you have any more questions
09:56 - on where we are to date make sure you're
09:57 - confident with routing with all the
10:00 - class methods we're using with all the
10:02 - all the component theology methodologies
10:06 - I'm using so far once you're confident
10:08 - with this with react layouts let's go
10:11 - ahead and move into the flux stuff
10:12 - that's going to be these next videos