00:01 - all right so we've been learning
00:02 - JavaScript and we've been learning
00:03 - computer programming at the same time so
00:05 - far we've covered variables IFL
00:08 - statements and comparison operators next
00:10 - up we're going to learn functions
00:12 - functions at first to a new programmer
00:14 - can feel a little tricky but I promise
00:16 - you they'll catch on a lot faster than
00:18 - it feels like at the very beginning so
00:20 - stick with it and do what we do in this
00:23 - exercise a couple days in a row and
00:25 - you're going to feel pretty confident
00:26 - with what functions are before we get
00:28 - into functions let's move job script
00:30 - into our web page because we don't want
00:33 - to be writing functions in the console
00:35 - it's too many lines it would be too
00:37 - annoying so here we go we're on our
00:39 - index.html file and if you're going to
00:42 - insert CSS on your page there's two ways
00:44 - to do it you can do a style
00:46 - tag and then anything within the style
00:49 - tags is treated as CSS or you can pull
00:52 - in an external stylesheet another file
00:54 - with a link tag JavaScript works the
00:57 - same way we can run a script tag
01:02 - and then anything within this script tag
01:04 - is treated as JavaScript I'm going to
01:05 - say alert um and I'm also going to hit
01:08 - save and I'm running what's called live
01:09 - reload so when I save my file this web
01:12 - browser is going to automatically reload
01:14 - my page if you're doing this on your on
01:17 - your own without live reload you're
01:18 - going to have to save and then hit
01:20 - refresh if you want to see how I'm doing
01:22 - live reload I'll put some links to that
01:24 - in the description but it might be a
01:25 - little over your head if you're a brand
01:27 - new user so there you go you can see
01:29 - that now my web page when it reloads has
01:31 - alerted a empty alert for me and there's
01:34 - a reason I put the script tag at the
01:35 - bottom of the page and let me show you
01:37 - why by moving it up towards the top I'm
01:39 - going to hit save again and you'll
01:41 - notice that now I get the alert before I
01:43 - see my web page I have an empty page and
01:46 - the alert fires this happens because
01:49 - javascripts happens in sequence as your
01:52 - web page is rendering all the elements
01:55 - what that means is is when your browser
01:57 - opens up your HTML file it's going to
01:59 - start going through line by line and
02:01 - adding in all the elements so when it
02:03 - gets to a script tag it's going to load
02:05 - all that JavaScript and then it's going
02:06 - to run it before it does anything else
02:09 - so in this case it runs my alert up here
02:12 - before it's rendered all these elements
02:14 - onto the page you know JavaScript is
02:17 - really pretty fast you're not really
02:19 - doing alerts a lot so all the user will
02:21 - normally notice if you put your script
02:23 - at the top of the page is the web page
02:26 - might feel like it appears a little bit
02:27 - slower if you put it down here at the
02:30 - bottom of the page right before the
02:32 - closing body tag then what's going to
02:34 - happen is is your web page will spit out
02:36 - all the content first so it looks like
02:39 - the web page is loaded and a split
02:41 - second later your script will be
02:43 - activated and web developers have
02:45 - learned over the years that this creates
02:46 - a much faster feeling web page and the
02:49 - user doesn't know any different so we
02:51 - recommend that always put your script
02:53 - tags at the bottom right before your
02:55 - closing body tag there's almost never a
02:58 - reason that your script needs to go in
03:00 - the top up in the header so the script
03:03 - tag is the first way of doing it and
03:05 - just like a link tag you can also give
03:07 - the script tag a file to pull in as well
03:10 - so in this case I'm going to delete the
03:11 - content and I'm just going to go Source
03:13 - SRC equals and then that basically is
03:16 - like the href is for CSS so instead of
03:19 - pulling in the Styles main.css I'm going
03:22 - to pull in the scripts
03:26 - main.js and now that file gets loaded in
03:30 - and execute it as soon as it's loaded
03:32 - the normal folder name for JavaScript is
03:34 - going to be called a JS folder or a
03:37 - scripts folder so here we have scripts
03:39 - JS is just fine either one works so now
03:42 - I'm loading in this main.js file so if I
03:44 - hit alert and save you see I get that
03:47 - alert as well and it's already rendered
03:49 - my web page first before it's executing
03:51 - my JavaScript so there's how you get
03:54 - JavaScript on a page if you have
03:56 - multiple JavaScript files you can do
03:58 - multiple script tags just like that and
04:00 - it will execute them in order it's going
04:03 - to run my main.js first then my main.
04:06 - two then my main do3 then my main4 so
04:09 - that's what's going to happen if you
04:10 - have multiple script tags if you want to
04:12 - break up your JavaScript into several
04:14 - files to make it easier to maintain so
04:17 - let's go ahead and learn about functions
04:19 - so functions are basically a piece of
04:21 - code that does one or more actions piece
04:25 - of code that does one or more actions
04:30 - so I'll just show you what a function is
04:32 - because it's a lot easier to see it than
04:34 - to hear about it you start off by typing
04:37 - function and we'll just call this
04:38 - function go you open and close your
04:41 - parentheses and then you open and close
04:43 - your curly braces so whatever I put in
04:46 - here is going to execute when the go
04:49 - function is called so let's just say
04:51 - alert
04:52 - high alerts hey
04:55 - there and so it's going to do two alerts
04:58 - I'm going to save my web page refreshes
05:01 - and guess what nothing happens because I
05:03 - defined my go function but I didn't call
05:05 - my G function I call it by saying go
05:09 - open close parenthesis and then a
05:11 - semicolon now when I refresh it's going
05:13 - to say hi and then it's going to say hey
05:15 - there I have my function a cool thing
05:17 - about functions is they can be called as
05:19 - many times as you want I can call go
05:21 - twice hi hey there hi hey there so
05:25 - that's kind of cool another thing about
05:27 - functions is they accept what are called
05:29 - AR arguments let me show you what
05:30 - arguments are I could say name age and
05:33 - then instead of alerting hi hey there I
05:35 - can alert name and I can alert age now
05:38 - in order for it to know what the name
05:39 - and the age are I pass them in when I'm
05:42 - calling my function so I can say my name
05:44 - is will and I'm 34 because I just had a
05:47 - birthday so now will gets passed in as
05:50 - the first argument which is name and 34
05:54 - gets passed and is a second argument
05:56 - which is age so now it's going to alert
05:58 - will and then it's going to alert 34
06:00 - let's save it there you go will there
06:03 - you go 34 once again these are called
06:05 - arguments and what arguments allow us to
06:07 - do is they allow us to make code
06:10 - reusable because at first you might
06:13 - think hm I could just stick to go I
06:16 - could go ver name equals
06:18 - will and then ver age equals
06:22 - 34 and then I could forget this whole
06:24 - arguments thing and I could just say
06:26 - alert name age well yep that's going to
06:29 - do the same thing it's going to alert
06:30 - will and it's going to alert 34 but if I
06:34 - code it with arguments it's reusable let
06:36 - me show you let's go back to name
06:39 - age let's go back to will 34 and now I
06:43 - can call it a second time with a
06:44 - different
06:45 - person let's say my wife
06:48 - Laura 28 there we go so now it's going
06:52 - to run one time with Will and 34 will 34
06:58 - and then the next time it runs it's
06:59 - going to run with Laura 28 and so that's
07:02 - kind of a good way of coding it's it's
07:05 - called dry which is do not repeat
07:11 - yourself if I could
07:13 - spell do not repeat yourself Dr y do not
07:17 - repeat yourself or don't repeat yourself
07:20 - so dry code is a good thing we want to
07:24 - code as little as possible that makes it
07:26 - easy to maintain that makes for as few
07:28 - lines of code AS possible so that's kind
07:31 - of what a function does it accepts
07:33 - arguments and it runs multiple commands
07:36 - now a function also returns a value
07:39 - whatever you type in return will
07:42 - actually give you a value out let me
07:44 - show you what a return value does you
07:46 - might remember from prompt earlier in
07:49 - the first lesson we went ver name equals
07:51 - prompt and then prompt opened up a
07:54 - window well I'll just show you right
07:56 - there it opened up a window and then
07:58 - when I said will enter will got passed
08:01 - in from the prompt into my name variable
08:04 - so what actually happened was is prompt
08:07 - had a return value that name received
08:11 - you see that it executed this first and
08:13 - when prompt was done whatever prompt
08:16 - returned which was my name will went
08:18 - into name and so how you code a function
08:21 - like that is very
08:23 - simple let's make a function called add
08:26 - and let's make it first second we want
08:29 - to add two numbers together and so I'm
08:32 - going to go add let's say ver sum equals
08:37 - add one and two so we're going to add
08:40 - one and two together and so instead of
08:43 - just going first plus
08:47 - second I'm going to return first plus
08:50 - second so now nothing actually happens
08:53 - in this function like alerts or anything
08:56 - like that we are going to return the
08:59 - value value of first plus second which
09:01 - means it's going to run the function the
09:04 - function executes it returns kicks back
09:07 - out first plus second which means that
09:09 - it's going to add one and two and then
09:12 - that is going to get passed into sum so
09:15 - now I can alert
09:17 - sum and sum is going to be three there
09:20 - you go three because I added one and two
09:23 - it returned that back out so I could do
09:27 - something silly like this could pass in
09:30 - add one and two that's one that's two
09:34 - I'm just going to return will so now
09:36 - it's just going to say well Su equals
09:37 - will and I alerted to I basically
09:40 - ignored my arguments I returned whatever
09:42 - value I wanted to return which didn't
09:44 - make any sense and that value got passed
09:46 - into here so no now no matter what I
09:49 - pass into add function it's always going
09:51 - to return will of course again that's
09:54 - kind of silly I want to return 1 + 2
09:59 - and now I have my ADD function another
10:01 - way that you can do this with a little
10:03 - bit less code is I could just
10:07 - alert add one and two so it's going to
10:10 - run this first because this is an inner
10:12 - function JavaScript is going to know I
10:14 - have to run this in order to know what
10:15 - to give to alert whatever this returns
10:19 - I'm going to pass into my alert function
10:22 - as the value so this will do the exact
10:24 - same thing it's going to run one and two
10:26 - one and two returns three
10:29 - and then as far as JavaScript is
10:31 - concerned it's just going to alert that
10:33 - returned value so I'm going to save that
10:36 - you see it alerts three let me show you
10:39 - what happens if you alert if you return
10:40 - a second time let's return will
10:44 - now it does absolutely nothing because
10:47 - as soon as the return happens this
10:50 - function is finished what happens after
10:52 - the return never fires JavaScript is
10:55 - done so I can say
10:57 - alerts hi there and you're never going
11:00 - to see alert high there it alerts three
11:02 - from down here and I never see the alert
11:05 - high there up here the function ran it
11:08 - returned and then the function was
11:10 - finished now you can have multiple
11:12 - returns you could do something like
11:16 - H let's go there name
11:19 - equals we say this um let's go
11:26 - alert add
11:29 - add is kind of a bad we'll call we'll go
11:31 - back to go since we're not going to be
11:32 - doing adding will and we'll go back to
11:35 - my my age of
11:38 - 34 so this is going to be now called go
11:41 - name
11:43 - age
11:45 - if age is less than
11:50 - 20 then we are going to
11:54 - return name plus an exclamation mark CU
11:57 - after all I'm less than 20 that's pretty
12:00 - cool else we are just going to return my
12:03 - name so now this will return a different
12:06 - thing if my age is less than 20 then I'm
12:09 - going to return name shouted else I'm
12:12 - going to return just my name so go now
12:15 - we'll check this out and it's just going
12:17 - to return my name because I'm older than
12:18 - 20 and then I'm going to alert that
12:21 - there you go just will so let's change
12:23 - my name to
12:24 - 19 and now it's going to shout my name
12:27 - because after all you shout at teenagers
12:28 - a lot more more than you do at adults um
12:31 - and what happens if I don't return
12:33 - anything at all let's say I say go name
12:36 - and age and I'm going to get undefined
12:40 - so this function has no return which
12:42 - means it's returning nothing which means
12:45 - it's returning undefined which brings us
12:48 - to one more of our types in JavaScript
12:50 - and that is the undefined
12:53 - type if I say ver a but I don't give it
12:57 - a value then I alert a it's going to
13:00 - alert undefined I defined a as a
13:02 - variable but I didn't Define the value
13:05 - of a so another type in JavaScript is
13:08 - undefined and it means simply well
13:11 - undefined so that's about all you need
13:13 - to know with that so by default every
13:16 - function is going to return undefined
13:19 - unless you give it a return
13:22 - value will again so there you go that's
13:25 - functions let's um let's leave it there
13:28 - for now so I'm going to say go ahead
13:30 - make an addition function make a
13:32 - subtraction function make a
13:34 - multiplication function make some
13:36 - functions play around with them and once
13:38 - you feel confident with that let's move
13:40 - on to our last lesson before we get into
13:42 - some actual useful things that we can
13:44 - use JavaScript for on our web page