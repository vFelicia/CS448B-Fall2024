00:01 - all right so in this video we're going
00:02 - to try to shortcut you through how to
00:04 - connect to a mongodb database with no.
00:07 - JS uh using expressjs and Mongoose uh
00:11 - which are two of the most popular
00:13 - Frameworks for doing this thing so
00:16 - that's what we're going to do uh if you
00:17 - missed my intro to node.js and expressjs
00:19 - I'll put that in the description uh and
00:21 - so what I've done is I've generated an
00:23 - expressjs app here pretty much straight
00:25 - up just has one route so far which says
00:28 - okay uh so let's go ahead and install
00:30 - Mongoose so npm install s because we
00:33 - want to save it to our package
00:37 - Mongoose there we go and Mongoose is
00:39 - kind of like your most popular om for uh
00:42 -  so that's good Mongoose is
00:44 - installed I'm going to go nodon
00:47 - app.js uh so now it's going to be
00:50 - rebooting my appjs and should be good
00:52 - yep great okay so no Mongoose is
00:55 - installed in node modules saving it to
00:58 - the package awesome okay let's go ahead
01:00 - and then require
01:04 - Mongoose equals
01:07 - require there we go so now Mongoose is
01:10 - in the first thing we're going to do is
01:11 - create our connection I'm going to do
01:12 - this in development only since I'm just
01:15 - connecting to my development server here
01:18 - uh because you'll probably have a
01:19 - different database for different
01:20 - environments if not then just you know
01:23 - do it you don't have to do it in
01:24 - development here so doc connect
01:28 - very simple
01:31 - and my server is running locally at
01:33 - 55.55
01:35 - 55.5 and my DB is called
01:38 -  probably could have come up with a
01:41 - better DB name but oh well I decided my
01:43 - test DB would be called so let's
01:45 - save that and I'm running no issues
01:48 - nothing broke excellent let's go ahead
01:51 - and move on now and actually create our
01:53 - first thing uh what we're going to do is
01:56 - we're going to create models kind of
01:57 - like you would with backbone JS if
01:58 - you're from a front end background you
02:00 - create a model and then you use that
02:03 - model the model also kind of doubles as
02:05 - a collection in a lot of ways so we're
02:07 - going to go
02:09 -  we're defining a model right now
02:11 - as what we're doing so users and then
02:13 - here's where you give it your schema you
02:15 - can either give it an object right here
02:17 - you can actually create a new user
02:19 - schema for right now we're just going to
02:20 - go object so basically all we have is
02:24 - name and that's a
02:26 - string there you go and so now I've
02:29 - defined a model called users and what
02:32 - that's actually going to do is look for
02:33 - the users collection so if I go app doet
02:36 - users this kind of makes a little more
02:38 - sense
02:39 - here then I can go mongus model I can
02:44 - now access that model so even if this
02:45 - was defined in a different file I can
02:47 - access
02:49 - it find and then my function is going to
02:53 - have error and users if the users indeed
02:56 - are correct so once that's found them
02:59 - then I can res. send
03:02 - users let's see if that works oops cuz
03:05 - we're not going to
03:07 - users there you go and now I've got my
03:09 - three users me my wife and John Travolta
03:12 - so let's go ahead and make one for posts
03:15 - I have two schemas going on right now
03:17 - two collections I have a users and a
03:18 - posts which has completely basic posts
03:22 - going on uh so let's go ahead and Define
03:24 - our second model here which would be
03:27 - posts and this one has content
03:30 - and content is also a string so there we
03:32 - go and this will be Mongoose model posts
03:35 - now it's basically the exact same thing
03:37 - as you can see so now if I do get posts
03:40 - I'm going to access the model posts
03:42 - which I defined up there and on
03:45 - successful find we are going to send the
03:47 - posts so here we go let's check it
03:50 - out and I didn't save my
03:52 - file there you go so now I've got my two
03:55 - posts oh I also have a user on there so
03:58 - user um well let's
04:00 - before we go any further with the schema
04:02 - we'll go ahead and look at how to redo
04:04 - our app uh you'll notice I'm I'm doing
04:07 - all these routes right here in the appjs
04:09 - I'm just doing that for the Simplicity
04:11 - of the tutorial it's definitely a better
04:13 - idea to have your routes in their own
04:15 - routes file SL routes files uh same
04:19 - thing with models we do not want to be
04:20 - doing all this logic here in the app.js
04:23 - file so let's go ahead make a new folder
04:26 - we'll call this
04:28 - models
04:30 - everybody wants to work with models for
04:31 - a living uh let's see okay so this will
04:33 - be called users nope how about we just
04:36 - save
04:38 - it users. JS there we go so let's go
04:42 - ahead and take this out of
04:44 - here and let's
04:51 - go there we go and we're also going to
04:53 - go
04:54 - schema which we already loaded in with
04:57 - Mongoose there you go that'll help let
04:59 - generate a new schema so now we can do
05:01 - this we can go users
05:07 - schema new
05:09 - schema and then we just do the object
05:11 - exactly like we would have done and we
05:14 - go do model we're going to Define
05:18 - this and we're going to give it user
05:20 - schema so that's all we're going to do
05:22 - in the users model now and so the schema
05:24 - will be name
05:27 - String and then
05:30 - that's pretty much all we got for now
05:31 - name ha there you go so that's the users
05:34 - one and let's go ahead and copy and
05:36 - paste this create a new file and this
05:38 - one will be called what was that other
05:40 - one
05:43 - posts posts and then we'll call this
05:45 - post
05:48 - schema and so we have content which is a
05:50 - string and then we also in our posts we
05:53 - have a user field which is the user ID
05:56 - so this is going to go and we actually
05:59 - this type is not a string it's a object
06:02 - ID but you can't do object ID because
06:04 - JavaScript doesn't have that as a type
06:07 - but schema object has it as a type so
06:09 - we're going to go schema. object ID and
06:11 - that's how we can access that so this is
06:14 - our schema for our content right now
06:16 - literally all we have is the body and
06:18 - the user that wrote it so there we go
06:20 - that's our post file and now these
06:23 - aren't getting required anywhere I can
06:25 - dump
06:27 - those so now what we're going to want to
06:28 - do is we're going to want to write some
06:30 - sort of basic little file thing uh that
06:33 - helps us require in everything in the
06:36 - models folder so we're going to load in
06:38 - the fs which is the file system
06:43 - Library uh and we're just going to go
06:45 - down
06:50 - here fs. read drr
06:55 - sync it's okay to do sync because this
06:57 - is happening you know on the startup of
06:59 - our app it's only going to happen once
07:01 - durame is our current
07:04 - directory and then so that's loading the
07:06 - directory and then we're going to go
07:07 - Loop through
07:12 - it and that's going to grab our file
07:14 - name and so we're going to go
07:20 - if if it's a JS file probably Overkill
07:24 - but oh well we'll do it
07:28 - anyway
07:33 - have capital
07:38 - okay and there you go so that's loaded
07:40 - in um and then so that should go through
07:44 - our entire directory and load them all
07:46 - up let's make sure we don't have any
07:47 - errors here everything's still working
07:49 - awesome great so what we're going to do
07:52 - is if I flew through that too fast we're
07:54 - going to load up every model that's in
07:56 - our models directory when we load up our
07:59 - app
08:00 - um and now we can just access them
08:01 - because they're already registered in
08:03 - Mongoose so we can go posts and get our
08:05 - posts we can go users and get our users
08:08 - uh and so another thing you can do is
08:11 - you can access posts by ID I'm not going
08:14 - to go too much into how to use
08:16 - because that's definitely its own
08:18 - tutorial but let's say user ID here post
08:21 - by user ID we can do this
08:26 - instead user is
08:29 - [Music]
08:34 - uh user ID so let's see what's a user ID
08:38 - here uh there we go I can grab my user
08:43 - ID and then let's make sure I save this
08:46 - so now I can go
08:48 - posts by that ID and so I only have one
08:51 - post um I can't let me go back to users
08:53 - and grab Laura Stern's ID I think I made
08:56 - a fake post for her didn't make any F
08:59 - posts for John folta though did I
09:01 - missing out on that one okay another
09:03 - cool thing that we can do is we can
09:04 - actually attach uh with the entire
09:07 - user object here if we want to so say
09:09 - we're grabbing the posts and you know
09:11 - let's just trim it down let's also grab
09:13 - the user object on there well that's
09:15 - easily done um we can grab the user
09:18 - object by just
09:20 - going I will keep the post by user
09:23 - ID um there we go and so what I will do
09:27 - here is once we're done
09:30 - getting the posts Okay so we've gotten
09:32 - the posts I'm going to get this model
09:37 - again and I'm going to do do a
09:41 - populate and I'm going to give it the
09:43 - posts I'm populating which it comes from
09:45 - here I'm going to go full screen here
09:46 - for a second so you can see it so once
09:49 - my post finds once my posts are all
09:52 - found they're called posts right here
09:54 - then I'm going to actually populate my
09:57 - posts and the path I want to populate is
09:59 - called user and there we go and then
10:01 - same thing this is going to get into uh
10:04 - another call
10:05 - back you guys are probably noticing that
10:08 - there's a lot of callbacks starting to
10:10 - happen two levels of callbacks is about
10:12 - as far as I want to go because then you
10:13 - start getting what they call call back
10:16 - hell um and there's ways around that
10:18 - I'll probably do that in the next video
10:20 - here so now I'm grabbing posts and once
10:23 - I've have grabbed the posts I'm going to
10:25 - populate the user path as well let's
10:27 - save that see if it worked see if I made
10:29 - any
10:30 - mistakes and it says the user is null uh
10:34 - probably because I did not handle that
10:37 - schema
10:39 - correctly user is schema. object
10:44 - ID yeah I want to figure out what's up
10:46 - with that oh yeah I know what I know I
10:48 - did wrong here um user is actually an
10:50 - object sorry about that schemas aren't
10:53 - the things you write every day so every
10:54 - once in a while you forget what to do so
10:56 - the type is an object ID when you're
10:58 - doing an actual object and the ref you
11:01 - have to give it a ref there we go that
11:03 - should work there we are so I'll make
11:06 - sure uh I put this code on something and
11:09 - put it in the uh description so you guys
11:11 - can actually get a link to this so you
11:13 - can't forget it so there we go I've now
11:16 - grabbed my related user and that's about
11:19 - it so that's pretty much how you connect
11:21 - to a mongod DB database with Mongoose
11:24 - and thanks for
11:28 - watching