00:00 - all right we're continuing with es6 so
00:02 - this is video two if you missed a video
00:04 - one you know you want to watch that
00:05 - first but doesn't really matter because
00:07 - this is new stuff so another great
00:10 - feature with es6 is block scoping at
00:12 - first it doesn't seem all that useful
00:14 - but then the more you use it the more
00:16 - you appreciate it so kind of us how
00:19 - scoping works now miniature scoping
00:22 - lesson where I equals one if I were to
00:24 - make a function here and go there B
00:28 - equals one well now this variable is in
00:30 - its own scope so after that function
00:34 - you know console.log B nothing happens
00:37 - because B was not finding scope so but
00:40 - if you were to do a block so this is
00:42 - function scoping then block scoping is
00:46 - like an if statement so there's no
00:49 - function going on this is within the
00:50 - block so if I define ver B equals two
00:53 - well now B is going to console.log to B
00:55 - has been defined basically it hoists it
00:59 - and then down here sets B equals to two
01:03 - that's exactly what's happening right
01:05 - now it's defining a variable in the
01:07 - scope and then changing that so what
01:10 - block scoping does is it allows us to
01:12 - use let and let define something within
01:15 - a block is really all there is to that
01:18 - so the two places you pretty much use
01:20 - blocks are if statements if else
01:22 - statements and loops you know for loops
01:25 - you know I don't know I'll just say 20
01:27 - we're looping 20 times I'll say the the
01:29 - time of that so we're looping through 20
01:33 - times each time we can now create a new
01:35 - B variable that is new for that loop and
01:38 - gets destroyed after that loop so it's
01:40 - only used within this block so that's
01:44 - that's actually really nice as a general
01:47 - rule when you're coding es6 it's just
01:49 - simple to remember let is the new there
01:53 - you really don't need to use ver most of
01:57 - the time unless for some strange reason
01:59 - you want to define a variable in this
02:02 - block in this if block that needs to now
02:06 - be accessible outside of this block
02:09 - which is pretty much a bad idea anyway
02:11 - because you probably should be defining
02:13 - there be up there if you're going to do
02:15 - that and then changing b22 that's kind
02:18 - of more the correct way of coding that
02:21 - so start using let instead of air that
02:24 - gets you 80% of the way and then there's
02:26 - also this new Const foo equals one
02:30 - constant is exactly the same as let so
02:34 - allow shouldn'ts it's exactly the same
02:36 - it's the same as let in that it's block
02:38 - scope so bar equals two and I try to log
02:43 - bar nope get an error bar is not defined
02:47 - because it's outside now if I change
02:49 - this to vert bar
02:50 - well now bar is going to be two because
02:52 - there is function scoped but changing
02:56 - this to constant is again block scoped
02:59 - and constants cannot be overwritten so
03:02 - if I were to and then try to change bar
03:04 - to bar equals three and get an error
03:08 - that doesn't work now if it's an object
03:11 - you can't change it to a different thing
03:14 - but you can't change that object so if I
03:17 - say bar a equals one and that's got a
03:19 - one left that I said to then I can
03:24 - change that so I can mutate bar somewhat
03:28 - as an object still I choose to call all
03:32 - my objects constants because you know
03:35 - anymore we're really starting to realize
03:38 - as JavaScript developers that mutating a
03:40 - value most of the time is something you
03:42 - don't want to do you want to define most
03:45 - values as constants actually so I'm
03:47 - starting to use Const as my default and
03:50 - then should there be some reason where I
03:53 - need to mutate a value
03:54 - well then I'll change it to let so it's
03:57 - kind of like this visual indicator oh
03:58 - that's let this value is going to get
04:01 - changed later on so that's actually kind
04:04 - of a really good practice that me and my
04:06 - team have found is use constants for
04:08 - everything
04:09 - absolutely everything everything is a
04:10 - constant and then you shouldn't usually
04:13 - have to change values of things and if
04:16 - you do have to change value well then
04:18 - you see let and when you see let it's
04:20 - kind of like this little pop in your eye
04:22 - okay this value is going to change for
04:24 - some reason I need to be aware of the
04:25 - fact that this is going to change
04:27 - that's kind of a good practice we found
04:29 - there let's see next let's talk let's do
04:32 - classes can't believe in and mention
04:34 - this yet so classes are a huge deal for
04:36 - JavaScript to have now it's not
04:39 - necessarily huge functionality it's just
04:40 - that every other language pretty much
04:42 - speaks in terms of classes so you know
04:45 - for those you guys you may not know it
04:47 - which shouldn't be most developers but
04:49 - you know you could do function parents
04:52 - and so this is your constructor and then
04:55 - you'd have to go parents dot prototype
04:58 - dot foo equals function you know so
05:01 - adding you're adding your functions that
05:03 - way just really not that bad but now you
05:06 - can actually go class parents and then I
05:11 - can go constructor and then I can
05:16 - actually go foo bar then I can go over
05:25 - parents equals new parents parent foo do
05:33 - some things and then also with ex7 which
05:36 - so if you're using babel you can
05:37 - transpile es7 just find I'm not sure if
05:40 - tracer does it or not you can also
05:42 - define some static class properties
05:44 - which is me a seven thing I can go age
05:47 - equals 34 and then parent age equals 34
05:55 - so that's also nice you can add some
05:57 - static properties that was not a part of
05:59 - the initial es6 spec to have properties
06:02 - or static properties I can also go
06:04 - static foo and then parent is actually
06:09 - going to that's going to be parents dot
06:11 - foo is going to be that method so that's
06:14 - also kind of nice which again capital P
06:16 - parent that is foo going on here not
06:19 - lowercase P parent which is this so the
06:22 - reason I call that parent is because
06:24 - then you can extend things which is nice
06:25 - you don't have to have some sort of
06:27 - little utility method that you write
06:29 - yourself child e extends parents just as
06:36 - you'd expect it to be I get my own
06:38 - constructor
06:40 - can't call super which is going of
06:44 - course call that guy and then I can add
06:47 - my own fubar Bozz so I can go a new
06:53 - child and then child can do Bozz
07:01 - or child can do foo because I've
07:03 - inherited all them actually child can't
07:04 - do food because that static child can do
07:06 - Bar there we go and so that's kind of
07:09 - your es6 classes and then let's go ahead
07:14 - and look at let's go look at arrow
07:18 - functions I like arrow functions
07:20 - there's also generator functions which
07:24 - are the huge new functionality so this
07:27 - adds a lot of new power to JavaScript a
07:31 - lot of new powers especially in how you
07:33 - handle async I have a video that's
07:35 - dedicated to generator functions I'll
07:37 - put the links to that in the description
07:38 - because they're a little complicated to
07:41 - understand the first time around they're
07:43 - simple but they're complex so I'll leave
07:46 - you those links let's look at arrow
07:48 - functions arrow functions arrow
07:51 - functions at first seem just like a new
07:53 - syntax for writing functions but the
07:55 - more you use them the more you very much
07:57 - enjoy them and the more you understand
07:59 - some of their intricacies so if I was to
08:02 - say very few equals a function and then
08:06 - we're just going to return a plus B
08:10 - there we go so you can write this as an
08:12 - arrow function and you can go very foo
08:15 - equals a B arrow and then I can return a
08:21 - plus B so at first it doesn't seem like
08:24 - that big of a deal if I want to convert
08:25 - this function to an error function I
08:27 - just delete function add an arrow
08:29 - okay well that's kind of ground-level it
08:31 - looks a little bit cleaner a little less
08:34 - typing but then there's actually some
08:36 - more things that they add for you
08:39 - so it's it's mostly found very helpful
08:43 - when you're passing functions as
08:44 - arguments so do something with a and B
08:49 - as a callback right so we're going to do
08:51 - something there well that definitely
08:53 - clean
08:53 - sup I call back their return a plus B so
08:59 - if I was to convert this to an arrow
09:00 - function I could really make this a
09:03 - one-liner and it gets a lot cleaner
09:06 - so that's nicer now it's a little bit
09:07 - more visual CoffeeScript did a good deal
09:10 - with this this seems to be a cue that
09:11 - they took from CoffeeScript which was
09:13 - nice and then there's also what's called
09:15 - implicit returns and this is only
09:17 - applies to one-liner so if there's a
09:20 - one-liner I'm able to drop these curly
09:22 - braces and whatever is here
09:26 - automatically gets returned so I can
09:28 - just do a plus B so this is the exact
09:30 - same as what I had going on there ah now
09:32 - we're starting to really see some clean
09:34 - stuff so again I can do with brackets
09:37 - return a plus B or if I'm dropping those
09:40 - brackets I if I'm keeping it to one line
09:42 - I can drop those brackets and drop that
09:44 - semicolon and it's just going to
09:48 - automatically return a plus B so that's
09:50 - very cool also if you're on a one-liner
09:52 - and you only have one argument I can
09:54 - drop these parentheses and I can just
09:57 - return a plus one or a plus plus so now
10:01 - it's gotten a lot cleaner so if I just
10:03 - want to make a function that increments
10:05 - things like say I want to map something
10:08 - 0 1 2 I don't want to increment all
10:10 - these I can map these as Val there you
10:17 - go so now that's going to give me 1 2 3
10:21 - so that's really nice
10:23 - it really is useful for things like
10:25 - mapping for filtering sorting lots of
10:28 - those underscore j/s methods very very
10:31 - useful to do arrow functions in there
10:33 - and then there's one more thing that's
10:36 - very very it can be tricky you can
10:40 - forget that it does this and that is
10:42 - it's a it automatically binds context to
10:46 - this it's called lexical context binding
10:48 - and so kind of how this would work is if
10:52 - you ever do a function you want to bind
10:54 - it to this let's see I just actually do
10:59 - it code out an example you're very
11:00 - module equals my age is 30 I just
11:05 - actually 34 but whatever
11:07 - then Fu's some function and this is
11:10 - going to console.log this dot H okay
11:13 - that's going to work just fine it's
11:15 - going to say you know console.log 30 so
11:19 - if I run module foo it's going to
11:21 - automatically log 30 but then let's say
11:23 - I do a set timeout I want to time that
11:25 - out and one second later console.log
11:32 - this dot age well that's not going to
11:34 - work because now this is a completely
11:37 - different anonymous context and I no
11:40 - longer have access to this that age so
11:42 - you know you used to have to fix that by
11:44 - then binding this which just really
11:47 - feels janky but that's kind of how you'd
11:51 - have to do that or you'd have to code
11:53 - the function out somewhere else and find
11:54 - the function so that arrow functions
11:56 - automatically do bind this so that right
12:01 - there is the exact same thing so now
12:03 - this within this function automatically
12:06 - points to module it points to the
12:08 - context that you're in so that's
12:10 - something that's very important to be
12:12 - aware of because if you're say I'll use
12:15 - jQuery as an example I'm doing some
12:19 - thing with jQuery and you give it an
12:27 - arrow function well now you have
12:30 - overridden jquery's value of this so you
12:33 - can't do this anymore because normally
12:36 - jQuery would set the value of this to be
12:39 - you know your event handler or if you're
12:41 - using an event binder an event listener
12:44 - that's something you got to be aware of
12:46 - you probably would want to use function
12:47 - instead because you need jquery's this
12:50 - value or you really need that Dom event
12:53 - listeners value you do not want this to
12:56 - be whatever the value of this is so
13:03 - whatever the value of this is here is
13:05 - going to be the value of this for an
13:07 - arrow function in here so that's
13:09 - something that's very very important so
13:11 - lexical binding so that's a very
13:14 - important thing that goes on with arrow
13:16 - functions let's look into but once again
13:19 - that's that's extremely
13:21 - helpful the vast majority of the time it
13:23 - is extremely helpful for this to be
13:26 - bound to whatever is outside of it so
13:28 - most of the time I feel like that's what
13:31 - you want to happen last but not least
13:34 - let's look into es6 modules so module
13:38 - systems you know you're probably using
13:39 - require my module there you go and so
13:47 - how my modules defined inside is going
13:50 - to be module exports dot two equals
13:55 - function you know there's that and then
13:58 - of course you're going to export bar and
14:02 - then to import these later you know in
14:05 - another file you've got to go over my
14:09 - module equals require my module and then
14:14 - you've got to go there foo equals my
14:17 - module dot foo blah blah blah and so to
14:24 - do this now you could just change this
14:26 - to imports foo or
14:31 - import my module may I can't type this
14:36 - one import my module from my module so
14:40 - that's what you would do in node or if
14:42 - you're using require.js browser fire web
14:44 - pack so that's actually a lot cleaner
14:46 - these really stand out as I'm not your
14:50 - code I'm an import so these at the top
14:52 - of the file they do have to be at the
14:53 - very top of the file so way down in the
14:56 - file you cannot do an import these have
14:57 - to be at the top but it's nice this
15:00 - syntax really stands out as just it just
15:04 - feels correct at the top and you can
15:06 - also do structure this so I could I
15:08 - could go foo bar from my module so now
15:11 - I'm not actually importing the my module
15:14 - variable I'm just defining two variables
15:16 - in my scope foo in bar so that's really
15:18 - nice I'm finding this very useful for
15:21 - libraries like lodash so I could load in
15:24 - each and I can load an omit from lodash
15:27 - and that really helps with more
15:29 - functional programming styles I can then
15:32 - somewhere in my code just omit
15:37 - omit some key so that's really really
15:40 - nice if you're using a library like
15:42 - lodash just pulling the things you need
15:44 - right up front feels very very cool and
15:48 - then you can also in your code how you
15:50 - would actually write your module
15:52 - different if you wanted to is you could
15:54 - just do I guess your third way of
15:56 - exporting things is you could actually
15:59 - just replace module exports with a
16:01 - function itself so so then all of module
16:05 - exports is replaced with this function
16:07 - so how you would recode this with es6
16:10 - modules is you would actually just go
16:13 - exports export default function or you
16:19 - can actually just export any any
16:22 - variable as its name so export function
16:25 - foo so that's actually kind of exporting
16:27 - foo which can be imported as foo and
16:34 - then you can also export bar or I could
16:39 - export their foo equals three which is
16:41 - very nice so I'm defining this variable
16:43 - in here and I'm also exporting that
16:45 - variable so then I can import food which
16:48 - would be three here I can import bar
16:50 - which is method you can also do some add
16:52 - stuff as foolish so that's going to
17:00 - console.log three because I'm exporting
17:02 - foo and I'm importing food as foolish
17:05 - and console logging foolish so this just
17:08 - really cleans things up it's it's a
17:10 - syntax that I feel like JavaScript needs
17:12 - now that it's more modular at first I
17:15 - didn't really care about the export
17:17 - default oh yeah then if you want just to
17:18 - do my module say my module needs to be
17:23 - you know the whole thing then I can just
17:26 - do export I already showed you that
17:27 - export defaults that can be some whole
17:30 - module that you export there but I
17:32 - already showed you that so you don't
17:33 - need to see it again and I like this
17:36 - syntax a lot like I said I really like
17:39 - this really like being able to D
17:41 - structure out what you need from the
17:43 - very top so that's kind of my take on
17:47 - es6
17:48 - so far I'm loving it love and love and
17:50 - loving it love and using it and I guess
17:52 - one more useful thing if you had a
17:55 - chance to look at the generators video
17:57 - this will make sense if you didn't look
17:59 - at the generators video yet this will
18:01 - not make any sense at all but you can do
18:03 - what's called async functions especially
18:04 - if you're using Babel j/s to transpile
18:07 - then they do what's a called async
18:10 - functions so you could do a sinc
18:12 - function and that's basically a
18:15 - generator function so whenever you
18:17 - define an async function it's a
18:20 - generator function and anywhere inside
18:22 - instead of doing yield you can do awaits
18:26 - so it's called the async await syntax so
18:29 - I can await some some promise
18:32 - like say jQuery dot gets since everybody
18:35 - knows jQuery they're friends equals
18:46 - some sicom slash friends so we're going
18:49 - to go ahead and get that I only have one
18:52 - friend and then I can console.log that
18:55 - as if it's already been received so
18:57 - async functions are basically converts
19:00 - them into generator promises generator
19:01 - functions that return a promise so then
19:05 - I can actually this whole function now
19:08 - returns one promise that is then able
19:11 - that's kind of the short of it but if
19:13 - you look into Babel j/s async functions
19:15 - are very very cool especially if you're
19:18 - doing a whole lot of async stuff like a
19:21 - node or something like that
19:22 - very useful so that's es6 in a nutshell
19:25 - hope you enjoy the videos have a great
19:27 - day