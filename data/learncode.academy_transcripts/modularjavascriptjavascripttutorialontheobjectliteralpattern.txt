00:00 - this video I'm going to cover modular JS
00:03 - so I made this really tiny little thing
00:05 - it's like a people name Adder I can go
00:08 - will and then I can add Jack and then I
00:11 - can add I don't know Frank and then I
00:14 - can also delete these people from my
00:16 - module so that's really all this thing
00:17 - does so we're going to be getting into
00:19 - kind of how you code modular JS let me
00:21 - show you what I wrote out now I call
00:22 - this spaghetti code so we're going to
00:24 - use jQuery as an example because you
00:26 - know many many JavaScript developers
00:28 - know jQuery um
00:30 - and so this is what I call Spaghetti
00:32 - code it basically plops out the function
00:35 - required to make the thing work uh we
00:37 - have two core actions going on when I
00:40 - click on the button then it's going to
00:42 - add the person to the list and then when
00:44 - I click on the delete button uh it's
00:46 - going to delete the person from the list
00:49 - uh but it's really it's really a mess
00:50 - for a lot of reasons so I'm going to
00:51 - kind of get into some concepts of what
00:53 - modular JavaScript looks like why you
00:56 - want to do it um and really the people
00:59 - that need to learn modular programming
01:01 - are kind of those developers that are
01:02 - sitting at this breaking point of I can
01:04 - make jQuery work I can code this um but
01:08 - I don't you don't necessarily think like
01:10 - a software developer so as soon as you
01:13 - start getting into large applications
01:15 - what what I'm looking for when I'm
01:16 - hiring a developer to work on a large
01:18 - application is someone who knows how to
01:20 - break up their code into logical
01:22 - components components that do one thing
01:24 - do it well how to have the components
01:26 - work together um and then CU that's
01:29 - really what working with a framework
01:30 - like backbone or angular is is all your
01:32 - pieces of code are in their own
01:34 - components doing their own things so
01:36 - what I'm going to show you today is kind
01:37 - of an in between step between just
01:39 - plunking out jQuery and using a
01:42 - framework like backbone or angular to
01:44 - start getting you thinking in terms of
01:46 - components uh separate pieces of
01:48 - functionality so let me go over some
01:50 - ground rules real quick on what a
01:53 - modular or what a JS module should be
01:56 - for one it's a self-contained module uh
01:58 - so everything to do with my module is in
02:00 - my module so in this case my module will
02:02 - be this part of a web page if a web page
02:04 - has 20 different things on it this
02:06 - people Adder will be my module um
02:09 - there's going to be no Global variables
02:11 - see there's a problem with this
02:12 - JavaScript right here is that I have ver
02:14 - people and ver template so if any other
02:17 - module on the page also has a template
02:20 - they can't call it template uh because
02:22 - their code will break this code that's
02:24 - terrible terrible and it also if you
02:26 - have a huge JavaScript application you
02:28 - can't have a bunch of global things it's
02:29 - actually going to slow down your
02:31 - performance uh so no Global variables
02:33 - that's just kind of a given you really
02:35 - should never have any Global variables
02:36 - maybe one for your whole application
02:39 - that you share but that's about it um
02:42 - and then if a module manage is more than
02:44 - one thing it should be split up uh right
02:46 - now we have a module that manages people
02:49 - so there's this people Adder thing once
02:50 - again and then that's about it so I can
02:53 - keep this all in one module now if each
02:55 - person had more functionality like if I
02:58 - could edit this name or maybe I don't
03:01 - know send this a person an email from
03:03 - here then this each individual person
03:05 - should also be its own module but for
03:07 - now I can just do one module for this
03:09 - I'll explain a little bit more of that
03:11 - later on um separation of concerns in
03:14 - our code uh one terrible thing about
03:16 - this is every piece of code is doing
03:19 - every kind of task we're searching the
03:22 - Dom here uh we're binding a function to
03:25 - that we're binding a listener to that
03:26 - element and then we're searching here
03:29 - for another element and we're binding
03:30 - another listener in here we are updating
03:33 - our HTML with you know uh a new person
03:37 - and then down here we're actually
03:38 - removing something from our HTML there's
03:39 - just stuff all over the place it's just
03:42 - not very separated code at first this
03:44 - looks kind of simple uh but it the more
03:47 - you get into it your more it's really
03:49 - frustrating I can't exactly just quickly
03:51 - glance at this and know what's going on
03:52 - and I'll show you why once we modularize
03:54 - it um dry code don't repeat yourself uh
03:58 - you should never there's a lot repeating
04:00 - going on here I'm searching the Dom for
04:02 - people module a lot for one that's not
04:04 - very efficient I shouldn't have to
04:06 - search my HTML file for ID of people
04:09 - module but one time and I'm doing it
04:11 - here I'm doing it every time there's a
04:14 - click this function runs and I search
04:16 - for people module again and again and
04:19 - again that's terrible terrible um it's
04:21 - very slow JavaScript you're not going to
04:23 - notice it when it's just one thing on
04:25 - your page when you don't have a
04:27 - JavaScript application but as your
04:29 - application grow grows that is terrible
04:31 - practice um and so we're going to want
04:33 - to do what's called Dom caching which
04:35 - brings us to efficient Dom usage we want
04:37 - very few of these dollar selections we
04:40 - want very few of those we want to see
04:41 - some more find action going on but we
04:44 - ideally just want one of these per
04:46 - module um the Dom element which we can
04:48 - totally do this is my module which I'll
04:50 - get into the HTML a little later um I
04:52 - should be able to snatch this whole
04:54 - piece of code out by ID and then I don't
04:57 - ever have to search my dom again for
04:59 - this ID I can look within this for all
05:01 - the HTML I need so I just want to see
05:04 - kind of maybe one of those per module
05:08 - maybe a second one if you have a good
05:10 - reason for it but really just one of
05:12 - them um very few dollar selections and I
05:15 - want no memory leaks um I want all
05:17 - events which this is an event right here
05:19 - a click event we're binding this
05:21 - function to that event I want that to be
05:24 - able to be Unbound so what happens if
05:27 - we're on a single page module a single
05:29 - page application this is really where it
05:30 - comes into play is if you're on a single
05:32 - page application you can navigate to
05:34 - four or five different pages without
05:36 - ever actually navigating up here it's
05:38 - called a single page app um then this
05:40 - people thing actually has to go away for
05:42 - a time and then it has to come back it
05:44 - has to go away and it has to come back
05:46 - um and whenever it goes away I want all
05:48 - these events to go away with it
05:50 - otherwise I'm going to end up with a
05:51 - memory leak as long as there's an event
05:54 - bound to this people module even if the
05:57 - people module disappears it's not not
05:59 - going to take it out of memory because
06:01 - it says hey you still have something
06:02 - listening to it so I'm not going to take
06:04 - it out of memory and that's where you'll
06:06 - get a memory leak so the more someone
06:08 - uses your application say it's something
06:10 - like Gmail where you never navigate away
06:13 - but you might go to an email and then
06:14 - back to an email list and then to
06:16 - another email back to an email list if
06:18 - you have a memory leak even something as
06:20 - simple as one event listener that never
06:24 - goes away uh then it can keep piling up
06:26 - on top of itself for every email you've
06:29 - seen
06:30 - um and eventually your browser runs out
06:32 - of memory and crashes or gets very slow
06:34 - or your whole computer starts running
06:35 - slow so that's kind of what a memory
06:37 - leak is we'll get into that in a little
06:39 - bit as well so these are some ground
06:41 - rules um let's just actually start
06:44 - covering what is actual modular
06:46 - programming look like uh so let me just
06:49 - kind of comment out this code real quick
06:52 - uh the basis of modular programming
06:54 - we're going to be using a uh an object
06:57 - literal uh for this one it's a object
07:00 - literal pattern I'm going to actually
07:01 - put a link to an ebook from admani
07:04 - that's really good that covers a lot of
07:06 - design patterns lots of times it's just
07:08 - an object literal pattern um and all
07:10 - that is that's just you're using an
07:12 - object so we could call this my module
07:15 - equals and there's my object and then
07:17 - you can add values to this I could go
07:19 - name my name is Will
07:22 - age 34 and then I could put say name and
07:27 - this would be a function so it's called
07:28 - a method
07:30 - um um a function that lives on an object
07:32 - is called a method so this is the say
07:33 - name method and I could just go alert
07:36 - this.name and this refers to my module
07:41 - uh since this is the object that it's
07:43 - sitting on so that will alert will so
07:45 - now I have to do is go my
07:47 - module. say name there you go and so now
07:51 - if I save and refresh it shouts will
07:54 - excellent so I could do another thing to
07:55 - here I could go set
07:58 - name and then that would go uh this.name
08:01 - equals let's see new name so I could say
08:05 - set name give it a new name now this do
08:07 - name equals new name so that's kind of
08:09 - how a module works and so now you can
08:11 - see this whole will thing is now living
08:14 - on one object so I could go my module
08:17 - set
08:18 - name uh let's set it to
08:21 - Willis and then I'll say my name so it's
08:24 - just going to say Willis and so I have I
08:26 - have access to my module here
08:29 - do set
08:31 - name uh
08:33 - me oops I actually changed my frame on
08:35 - accident let's go back to that top frame
08:37 - I have ad block Pro running so let's go
08:39 - my module set name me my module say name
08:44 - and now it's going to say me so that's
08:46 - kind of how a module Works um and the
08:49 - methods that you expose to other modules
08:52 - the things that allow other modules to
08:54 - do actions are called um your API So
08:58 - currently my API has two methods it has
09:00 - say name and it has set name so that's
09:03 - kind of what I have here I'm using say
09:05 - name and I'm using set name now with the
09:07 - object literal pattern everything is
09:09 - accessible so I could actually hack this
09:11 - and just go my
09:13 - module. name equals me or I guess I
09:16 - could change it back to Will and then I
09:18 - could say name and it's going to say
09:20 - will that's really not the way you
09:21 - should interact with the module you
09:23 - should use methods that are provided for
09:25 - you and then in another pattern uh the
09:28 - revealing module pattern we're actually
09:29 - going to be able to hide some of these
09:31 - things away to where nobody else can
09:33 - access them only the module itself can
09:36 - access them so that's kind of the
09:38 - modular pattern uh so we'll end this
09:41 - video for now because you might need to
09:43 - rewatch it kind of get some of the
09:44 - concepts kind of understand what I'm
09:46 - talking about and then in the next video
09:48 - we're going to actually convert this
09:50 - spaghetti code into a beautiful little
09:51 - module