00:01 - all right moving on with five things
00:02 - that make JavaScript weird and awesome
00:05 - we're going to be doing scope and
00:06 - context which are clearly some of the
00:07 - most complicated things to understand
00:10 - especially when you're new to JavaScript
00:12 - um and a lot of people have pointed out
00:13 - after watching some of the First videos
00:14 - they're saying hey these things exist in
00:16 - a lot of languages you don't know what
00:18 - you're talking about um absolutely they
00:20 - exist it's the the unique event driven
00:22 - environment of JavaScript that just
00:25 - means they're going to show up a lot
00:26 - more often as problems and they're going
00:28 - to be a lot more unique sometimes in the
00:30 - way that they show up that's what I mean
00:32 - by that let's get into scope uh and a
00:35 - lot of developers mistakenly think that
00:37 - scope and context um are the same thing
00:41 - uh and they are not scope means variable
00:43 - access variable ah access uh which is
00:48 - when a piece of code is running what
00:50 - variables do I have access to that's the
00:52 - scope context uh is the value of this
00:55 - whenever a piece of code is running the
00:57 - value of this is the context and and so
01:00 - you can remember that cuz context has a
01:02 - T and this has a t so context means this
01:05 - uh scope does not mean this uh it
01:08 - doesn't have a t so let's get into scope
01:10 - real quick um I'm going to Define ver a
01:13 - equals 1 and so by default when you're
01:16 - coding in JavaScript you're in What's
01:18 - called the root scope the the base scope
01:20 - which is the window object when I just
01:23 - created ver a it actually made window. a
01:27 - I can go window. a and that equals one I
01:29 - can also go a and a equals 1 I can also
01:32 - go window. a is exactly the same as a
01:35 - yes it says true so I'm on the window
01:38 - object right now the root scope and I
01:39 - made a variable called a let's make a
01:42 - function here and let's run it right
01:46 - away so now what I've done is I've
01:48 - created what's called a child scope um I
01:51 - can now create variables b equals 2 and
01:55 - after I run Fu I'm going to try to
01:57 - console.log B and it's going to to say
02:00 - that's undefined because B was created
02:02 - in the scope of this function it wasn't
02:04 - created in the root scope up here uh let
02:07 - me kind of show you how that works um we
02:09 - got the parent scope up here and we've
02:12 - got the child scope in here and it works
02:14 - just like parents and children when
02:16 - you're talking about cookies uh if I go
02:18 - parent if I'm a parent and I go out and
02:20 - buy a box of cookies by default my child
02:23 - gets access to the cookies because
02:25 - they're in the pantry and they're my
02:26 - child now if my child saves up his hard
02:29 - earned money and buys his own cookies
02:31 - there is no way on heaven or hell that
02:33 - he is going to allow me access to his
02:35 - cookies they're his cookies he's the
02:38 - child but if I put him in the pantry uh
02:40 - Lord knows that he gets access to them
02:42 - because I'm the parent and he's the
02:44 - child that is exactly how variable
02:46 - access how scope Works in JavaScript and
02:49 - in most programming languages uh maybe
02:51 - if not all programming languages uh and
02:53 - so when I create a child variable the
02:56 - parent does not have access to it but I
02:59 - have access 2 a in here I can go
03:02 - console.log a and it will work so it's
03:05 - going to console log a which is one then
03:07 - I'm going to try to console log B and
03:09 - it's going to say B is not defined I
03:11 - have access to a but the parent scope
03:13 - does not have access to B um let me go
03:16 - ahead and now show you let's go variable
03:18 - a equals 2 so now when I console.log a
03:23 - it's going to console log to what I've
03:25 - just done is I have created what's
03:27 - called a name conflict or a scope
03:29 - conflict I have defined a variable in my
03:32 - child's scope that is the exact same
03:35 - name as a variable in my parent scope
03:37 - it's not illegal but all that's happened
03:39 - is is now I have two a variables in
03:41 - existence I have window a and I have a
03:45 - within this child scope so now I have
03:47 - broken the connection I have no way of
03:49 - accessing a outside of I have no way of
03:53 - accessing this a anymore uh unless I
03:56 - happen to know how to get to its parent
03:59 - object which which is window. a so I can
04:01 - console log window. a cuz this is
04:04 - defined on window um and then I can go
04:07 - console log a so it's going to console
04:08 - log one which is window a and it's going
04:11 - to console log two which is my current
04:14 - scope a so it's created what's called a
04:16 - naming conflict uh let me go ahead and
04:18 - do one more thing here and after I run
04:22 - Fu I'm going to console log the value of
04:25 - a so I am console logging a from the
04:28 - root scope and it's going to console.log
04:30 - one which is the value of a in my scope
04:34 - I ran Fu it created a new variable
04:36 - called a but it did not touch the a in
04:39 - my scope a is still the value of one I
04:43 - can console log a in here and it would
04:45 - be two but console logging a out here is
04:47 - one it's very interesting something you
04:49 - definitely need to keep note of if
04:51 - you're using the same words over and
04:53 - over again like my element or my name or
04:57 - my value uh if I take off the V here's
05:01 - what javascript's going to do it's going
05:03 - to first look in the scope that I'm in
05:05 - and say has a variable a been created
05:08 - yet so if I do variable a equals 1 up
05:11 - here a equals 2 down here means first
05:13 - thing I'm going to do is look in my
05:14 - scope and see if a has been created okay
05:16 - it has been created so now this a
05:19 - changes this a or points to this a so
05:22 - now this a will be changed to a value of
05:24 - two console log a will still console log
05:28 - one down here if I remove if this never
05:31 - took place a equals 2 it's going to look
05:34 - in my scope find out that a has not been
05:36 - defined so it's going to look in my
05:38 - parent scope and say ah there's an A A
05:41 - now points to this a so now if I save
05:43 - and refresh it console logs to and if I
05:46 - do V and save and refresh it console
05:50 - logs one because this one has not been
05:52 - touched so I can actually modify the
05:54 - contents of a in my parent scope if I
05:56 - don't do V if this a had not been
05:59 - created created then it would keep
06:01 - looking up to the parent scope and look
06:03 - up to another parent scope another
06:04 - parent scope till it got all the way to
06:06 - the window object and if there was no
06:09 - window. a wh my battery's about to die
06:11 - if there was no window a then it would
06:13 - create it for you right there and give
06:14 - it a value of two so now if I console
06:17 - log a a equals 2 and window. a has been
06:22 - created and equals 2 if you hear about
06:24 - polluting the root scope or trying to
06:26 - keep the root scope clean that's what
06:28 - that means if you forget to do V you
06:31 - just created a root scope variable that
06:34 - every Everything across your application
06:36 - has access to and you do not want to
06:38 - pollute the root scope it just creates
06:40 - for a messy application one way around
06:42 - it which I will not def I will not
06:44 - describe in detail is if you use the use
06:49 - strict then it prevents you from
06:51 - cluttering the root scope and now says a
06:54 - is not defined cuz I never did ver a on
06:57 - the root scope uh console log a a does
07:00 - not exist so you can look up more on
07:03 - what UST strict actually does so that is
07:06 - scoping in JavaScript that's variable
07:09 - access I guess I'll just give you one
07:10 - more example ver a equals 1 function Fu
07:15 - says ver a equals 2 and console logs a
07:19 - not console di console logs a and let's
07:22 - make another
07:25 - function and this will go a equal 3
07:29 - three console log a so now what I'm
07:32 - going to do if I run Fu and if I run bar
07:35 - and then I console log a it's going to
07:37 - run Foo fu is going to create an A and
07:40 - console log it so that's going to
07:42 - console log two then if I run bar a
07:45 - equals 3 it's going to look up in my
07:46 - parent scope it's going to look in this
07:48 - scope no a exists going to look up in
07:50 - the parent scope which is my root scope
07:53 - and it's going to find that a equals 1
07:54 - it's going to change that to three and
07:56 - then it's going to conso log a so this
07:58 - will conso log three and then we will
08:01 - just run a console login a and this will
08:03 - look in the scope that I'm in find this
08:06 - guy which has now been Chang to three oh
08:08 - my goodness I feel like I'm even
08:10 - confusing myself it's going to console
08:12 - log 2 three three so there you go that
08:14 - is scope in JavaScript let's get into
08:16 - context the real kicker the real thing
08:19 - where people blow up their code all the
08:21 - time