00:00 - okay so we're moving on with the docker
00:02 - lessons now if you have not seen my last
00:04 - one on how to run a docker image as a
00:06 - container you definitely want to catch
00:08 - that or you will feel lost but if you've
00:10 - watched that let's move on so if you're
00:12 - going to be building and running docker
00:15 - stuff on your machine
00:17 - and it's not linux you've got to install
00:19 - boot to docker the reason is so head
00:20 - over to boot to docker dot io and you
00:22 - can install that it's very simple and
00:24 - painless
00:25 - the reason is is docker sits on top of
00:28 - linux it's a linux tool it sits on top
00:30 - of the linux kernel and so all the
00:32 - docker containers you run have access to
00:35 - that those resources
00:36 - and so
00:37 - you really can't run it on mac os or
00:39 - windows what you can do is you can run
00:41 - the docker command on your mac terminal
00:43 - and then you can run a virtual machine
00:45 - which is a really lightweight linux
00:46 - machine if you remember from my little
00:49 - graphic i made here
00:51 - we can run a virtual machine and then
00:52 - when we type docker run it's going to
00:55 - actually run stuff inside of the virtual
00:57 - machine on mac it's going to build our
00:59 - images and run them there so that's kind
01:01 - of what boot to docker is that's how you
01:02 - use it go and install it
01:05 - and you can also if you use homebrew you
01:06 - can go brew install
01:08 - boot to docker and that'll get you going
01:10 - so you know it's going when if you can
01:12 - type boot to docker
01:14 - and you get a list of commands okay boot
01:16 - to docker is installed and so that
01:17 - installed the docker command as well
01:20 - but i can't go docker ps because i'm not
01:23 - connected to a docker daemon i'm not
01:25 - connected to a docker machine and it
01:27 - knows my mac is not a docker machine
01:29 - so what you do is you have two commands
01:31 - you go boot to docker up this is going
01:32 - to boot the docker
01:34 - virtual machine the boot to docker
01:36 - machine on my computer
01:38 - so you'll have to do this once every
01:39 - time you reboot your computer it's not
01:41 - really a big deal it's very lightweight
01:44 - i don't know what it takes just uh it
01:45 - doesn't take up a whole lot of ram um so
01:48 - now that that's running docker ps still
01:50 - doesn't work because docker the docker
01:52 - command does not know what vm that is so
01:55 - to get that pointing to your docker vm
01:57 - you go boot to docker
01:59 - shell init
02:01 - and that will you wrap it in parens and
02:03 - the dollar sign that's going to execute
02:05 - you know the output of boot to docker
02:06 - shell in it so there we go it's now
02:09 - pointing to my boot to docker vm i can
02:11 - go docker ps and i'm running nothing
02:14 - excellent i'm good to go and so you do
02:16 - have to run this for every new terminal
02:18 - window you open so i just copy this
02:21 - command and paste it at the end of my
02:23 - user's bash profile
02:26 - file
02:28 - i pasted at the end of that so every
02:30 - terminal i open it tries to connect to
02:32 - the boot to docker
02:33 - vm if the boot to docker vm is not
02:36 - running then it just you know errors out
02:38 - it doesn't it's no big deal so i kind of
02:40 - have that so it's automatic for me um
02:42 - there you go boot to docker's out of the
02:44 - way let's look at actually building our
02:46 - first
02:47 - docker image so for this i have a really
02:51 - simple
02:52 - presentation i think the easiest way to
02:54 - do or the easiest example of building a
02:56 - docker image is serving up static files
02:59 - with nginx so
03:01 - let's say we've got this static website
03:02 - here which i just downloaded html5
03:04 - boilerplate that's their index html
03:08 - javascript css and i'm just going to use
03:10 - nginx to serve this up if you don't know
03:12 - what nginx is i have a video on it i'll
03:14 - put that in the description it's it's
03:15 - basically apache except for i like it
03:18 - better
03:19 - so i've got this nginx configuration
03:21 - file and it looks pretty complicated but
03:24 - here's all you actually don't even need
03:26 - that this is all the file has to be for
03:29 - my nginx configuration we're going to
03:31 - look for everything in the slash www
03:33 - folder and we're going to serve that as
03:35 - a static website now i added some other
03:37 - stuff i want to do that auto indexing so
03:39 - if i don't have an index.html
03:41 - then it's going to you know show a list
03:43 - of the files
03:44 - and then i also from html5 boilerplate
03:47 - server configs this url here
03:49 - i also copied a lot of caching so it'll
03:52 - cache jpegs and images and all this
03:54 - stuff so it'll speed up the web website
03:57 - significantly so here's my nginx
03:59 - configuration file so i want to actually
04:01 - build a docker image that runs nginx and
04:04 - serves up static files how do i do that
04:07 - i create a docker file
04:09 - and i'm going to say it's from nginx so
04:12 - nginx is basically they take i think
04:14 - it's built on ubuntu it might not even
04:16 - be ubuntu it might be a lighter
04:18 - operating system than that so it's it
04:20 - basically has nginx installed and it's
04:23 - exposing port 80. so that's what this
04:26 - base box is this base configuration
04:29 - so i'm choosing that as my base and i'm
04:31 - going to make a few changes to that for
04:33 - my image i'm going to add a few layers
04:35 - on top i'm going to make a directory
04:38 - called etsy nginx logs and i'm going to
04:40 - touch an empty file in there
04:43 - static.log i have to do this
04:45 - because my caching is going to log to
04:48 - that file so if that file doesn't exist
04:50 - my build will fail because nginx well my
04:53 - build will work but nginx will never run
04:55 - it will hang up because it's looking for
04:56 - that log file
04:58 - the add command
05:00 - i'm going to add nginx conf to etsy
05:03 - nginx this is the directory for all the
05:05 - configuration files i'm just going to
05:07 - call it default.conf i'm going to
05:08 - replace
05:10 - default.conf with my new configuration
05:12 - file
05:13 - and then i'm just going to add
05:15 - everything from source into slash www
05:17 - because if you remember
05:19 - my root is slash www so that's it that's
05:23 - literally all the lines you need i don't
05:25 - have to do expose
05:27 - 80 because that's already taken care of
05:29 - in my parent image i could do it again
05:31 - it'd be no problem
05:33 - and i also don't have to do command
05:34 - engine x because that's already
05:36 - happening up in my parent file so nginx
05:39 - is automatically running
05:41 - i can get rid of both the lines i could
05:44 - add the exposing command just you know
05:46 - for redundancy sake but i don't have to
05:48 - do it
05:49 - so let's go ahead now and build this so
05:51 - now i'm in my folder
05:53 - the command is just docker build and i'm
05:55 - going to tag this this is basically what
05:57 - my repository name is or what my image
05:59 - name is
06:00 - learn code academy static nginx is what
06:04 - i'll call this
06:06 - static engine x and then i need to show
06:08 - it where's the path to my docker file my
06:10 - docker files in the folder i'm in so i
06:11 - just do space dot
06:13 - build no errors it's successfully built
06:16 - now i can run it
06:17 - docker run uh d i want to run this in
06:20 - the background daemon
06:22 - um and then p let's expose port 80 out
06:24 - to port 80.
06:26 - uh and then let's go
06:28 - um
06:29 - what's the name of that it's learn code
06:32 - academy man that's a long username
06:36 - static nginx
06:38 - there we go it's running and so i can go
06:40 - docker ps
06:42 - and it's running so how do i get to it i
06:44 - can't go to localhost because my docker
06:46 - vm has its own ip so i actually have to
06:48 - go boot to docker
06:50 - ip there you go that's the ip address of
06:53 - my virtual machine i'm going to add this
06:56 - to my hosts file because i don't want to
06:59 - have to remember that every time
07:01 - let's come down here
07:04 - let's call this boot to docker dot me
07:07 - there we go so now boot to docker dot me
07:09 - is my virtual machine i should be able
07:11 - to go to boot to docker
07:14 - dot me
07:15 - and port 80 is default so there you go
07:17 - hello world this is html5 boilerplate
07:20 - awesome so kind of the workflow for a
07:23 - redeploy on this guy
07:24 - is let's say i tweet some changes hello
07:27 - world this is
07:28 - me let's save it beautiful love it let's
07:32 - go docker build i can actually just kind
07:34 - of tab up through my commands docker
07:36 - build let's retag it
07:39 - it built it and then let's go docker
07:41 - stop static did i name it i thought i
07:44 - named it yeah docker stop whoop
07:47 - i didn't name it so it's tender feinman
07:52 - stop you
07:53 - remove you
07:55 - and then let's run i'll go up through my
07:58 - commands run that i knew i forgot a flag
08:01 - there's always a flag
08:03 - we'll just call this guy static
08:05 - there we go so i'm running it again now
08:08 - for local workflow you don't want to do
08:09 - that there you go hello world this is me
08:11 - so my docker container is working it's
08:12 - beautiful i can deploy this guy
08:14 - um i wouldn't want to do that for a
08:16 - local workflow clearly because you don't
08:19 - want to have to go through all that
08:20 - every time you make a change especially
08:22 - for static html i'm just going to run
08:24 - something like live server
08:26 - which is an npm package i have a quick
08:28 - video on that
08:30 - and then i got live reloading and
08:31 - everything and only when i like this one
08:34 - i'm happy with um there you go this is
08:36 - me
08:37 - also me
08:39 - there we go that's live reloading much
08:41 - faster much easier workflow
08:43 - once i'm happy with my website that's
08:45 - when i build it that's when i deploy it
08:46 - so you're saying okay how do i deploy
08:48 - this guy i liked what i did let's build
08:50 - it again
08:52 - docker build
08:53 - let's build it well then all you do at
08:55 - that point is you just go docker push
08:57 - um and assuming you've done a login
09:00 - docker login assuming you're logged in
09:02 - with your credentials on your machine
09:04 - just push learn code academy
09:08 - static nginx
09:10 - there you go and that's going to send
09:12 - the image list
09:13 - um and this will take depending on how
09:15 - many how big your image is and what all
09:17 - changes you've made this might take 30
09:19 - seconds it might take a minute
09:22 - there you go it's going pretty quickly
09:25 - and then once that's pushed on any other
09:27 - machine i can run it so i'm going to go
09:28 - ahead and log into
09:30 - let's go and log into ssh
09:32 - root docker dot me which is my
09:34 - production server if you'll remember
09:38 - uh let's go back over here
09:40 - okay there we go it pushed i skipped
09:42 - ahead about 20 seconds because i didn't
09:44 - want to make you all wait in silence
09:46 - so it has pushed and now i can go docker
09:48 - run p
09:50 - 8080
09:52 - uh d
09:54 - name static
09:56 - learn code
09:58 - academy
10:00 - fight type
10:02 - static
10:04 - nginx man i hope i typed everything
10:06 - right okay there we go exact same
10:09 - thing and so it's going to pull all the
10:10 - images it's going to do it much faster
10:12 - because i'm not on my local machine i'm
10:13 - on digitalocean right now so it's going
10:16 - to pull these images really quick
10:18 - and i should have my first deployment
10:20 - running in just a matter of moments
10:23 - i didn't have to install nginx on my
10:25 - server i didn't have to install apache
10:27 - on my web server absolutely nothing is
10:28 - installed i'm just running my image as a
10:31 - container okay there we go let's see
10:33 - what docker dot me looks like
10:35 - docker dot me
10:36 - and there you go there's my fully
10:38 - deployed website i can run this image on
10:40 - staging production anywhere and
10:42 - everywhere and so that's kind of my
10:44 - first docker build it's not too much
10:46 - harder to build something for node.js
10:48 - app or for ruby on rails app it's it's
10:50 - all in that docker file and the next
10:53 - video will probably get into a node.js
10:54 - app or something so hope you have a
10:56 - great day