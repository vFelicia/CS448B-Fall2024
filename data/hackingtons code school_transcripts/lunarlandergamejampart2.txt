00:00 - so now it's time to actually put
00:01 - something in here that we can play
00:03 - let's create the player now let's do
00:05 - something that we haven't done yet
00:07 - which is to modify
00:10 - the project settings in what we call the
00:14 - input manager axes
00:16 - it's a list of 30 different already
00:18 - existing
00:19 - inputs that trigger on certain buttons
00:22 - a lot of debug options but in this case
00:25 - some important ones like
00:26 - moving horizontally so this includes
00:28 - left and right keys
00:30 - as well as a and d moving vertically up
00:33 - and down
00:35 - but since we're in space we don't want
00:37 - to jump so let's just go ahead and
00:39 - change this from jump
00:41 - to thrust this is the one that has
00:44 - positive button in other words when you
00:46 - press the space button
00:47 - let's exit out of the input manager and
00:50 - go ahead and
00:51 - let's create our new player so i like to
00:53 - put it in the center
00:55 - called the player and just out of habit
00:58 - i add the tagged player
01:00 - let's move it up here just so that way
01:02 - we can see a little bit
01:07 - we're going to go ahead and do the same
01:08 - thing that we did before
01:10 - this time we're going to add a sprite
01:11 - renderer
01:14 - from here sprite renderer
01:19 - we want to change the sprite to
01:22 - our ui sprite and we want to make this
01:25 - look a little bit
01:26 - more like a lunar lander so make it a
01:28 - little tall like a little wide but this
01:30 - is entirely up to you
01:32 - i'm also going to make it kind of like
01:36 - green means player green means land
01:39 - again a design decision
01:44 - we need to have something that allows
01:46 - for it to interact with physics in other
01:47 - words a rigid body
01:48 - since we're working in only two
01:49 - dimensions we'll make it a rigid body 2d
01:54 - this gives us the ability to actually
01:56 - change things about its mass
01:58 - and its gravity scale well let's go
02:00 - ahead and give it some mass of 5
02:04 - and let's change the gravity scale to
02:06 - 0.167
02:08 - that is if you look it up the gravity of
02:10 - the moon
02:16 - in other words it's 16 almost 17 percent
02:20 - of the same gravity that we have on
02:22 - earth
02:25 - okay let's go ahead and add a box
02:28 - collider 2d
02:32 - that looks a little too big if you look
02:35 - at the green
02:36 - outline it's a little too big so let's
02:38 - go ahead and click this button to edit
02:40 - the collider
02:44 - and drag it a little bit yeah that looks
02:46 - better so that'll be
02:47 - actually how it stands
02:51 - okay
02:56 - and one other thing that we want to do
02:58 - for our lunar lander is we
03:00 - always want to basically understand how
03:01 - it interacts with other materials
03:05 - and so way we can do that is we can
03:06 - create our own
03:08 - sort of friction controller so
03:11 - in this create menu there's two physic
03:14 - materials
03:15 - one is for three dimensions one is for
03:16 - two dimensions so let's make a physics
03:18 - material 2d
03:21 - uh let's just call it the lander
03:25 - and let's adjust the friction a little
03:26 - bit higher because we don't want it to
03:27 - be sliding over everything
03:29 - let's go back to our layer
03:36 - and we attach this lander material to
03:38 - the
03:40 - rigid body now if you were to forget the
03:42 - step nothing really would change it
03:44 - would just change the feel
03:45 - so you should play around with this if
03:47 - you add bounciness you're going to
03:48 - bounce when you hit the ground you
03:49 - should play around with it and see how
03:50 - it works
03:54 - all right so let's figure out a way to
03:56 - actually
03:57 - make this lander do something so let's
04:00 - add some
04:01 - logic to it add a new component let's
04:04 - call it
04:05 - a lander script new script create an add
04:10 - and after moment we'll be able to open
04:13 - it in visual studio
04:14 - let's go ahead and do that
04:18 - all right
04:23 - all right so what do we want our script
04:26 - to be able to do
04:27 - like what do we want our liner to be
04:28 - able to do it should be able to thrust
04:31 - it should be able to rotate clockwise to
04:34 - the right
04:35 - should be able to rotate
04:36 - counterclockwise
04:38 - and it should be able to crash all very
04:41 - important
04:42 - things
04:46 - so what do we need to know in order to
04:47 - thrust um so let's open up some
04:49 - variables in the inspector
04:51 - i'm making them public and we'll have a
04:53 - thrust force
04:54 - set that equal to 30 by default let's
04:57 - also have
04:58 - our current fuel let's set our
05:03 - maximum fuel and that can be 3 000.
05:07 - we also need to know in private whether
05:11 - or not
05:11 - in other words a boolean if we are
05:13 - thrusting
05:15 - and we'll set that to false until it's
05:16 - otherwise proved true
05:18 - we also need to know what our
05:22 - turn speed is and we can set that to 50
05:26 - for now
05:28 - and we also need to be able to cache a
05:29 - reference to our rigid body which we're
05:31 - going to control
05:32 - so our rigid body 2d we'll just call it
05:34 - rb
05:36 - so in start first things first let's get
05:38 - a reference to our rigid body so rb
05:41 - equals get component rigid body
05:44 - 2d
05:47 - and let's set our current fuel equal to
05:49 - our maximum fuel in other words let's
05:51 - refuel every time we start
05:53 - and so in order to rotate clockwise um
05:57 - what we'll need to do is be able to
05:58 - control the
06:00 - rigid body so let's create a method that
06:02 - does that so public
06:04 - method that returns nothing void
06:10 - rotate clockwise whoa
06:13 - rotate clockwise and we do
06:17 - rb dot move rotation
06:21 - which is our current rotation
06:25 - minus our turn speed
06:28 - times time dot fixed delta time since
06:32 - this
06:33 - calculation is occurring in a physics
06:36 - loop
06:36 - we want to make certain to use fixed
06:37 - delta time for our smoothing in other
06:39 - words a portion of the turn speed
06:41 - every calculation now for rotating
06:46 - counterclockwise
06:48 - let's do the same thing public void
06:51 - rotate counter clockwise
06:57 - rb dot move rotation rb
07:00 - dot rotation plus the turn speed
07:04 - times time dot fixed delta time
07:09 - all right and when we're going to thrust
07:14 - let's do this we'll create a method
07:17 - called thrust
07:19 - that sets our variable
07:22 - is thrusting to the true
07:25 - all right so let's actually figure out a
07:27 - way to make
07:29 - the thrust work so thrusting is going to
07:31 - happen every frame where we're thrusting
07:33 - so we need to create that in a loop
07:35 - so let's go ahead and use void fixed
07:38 - update
07:39 - our physics loop and we'll check to see
07:42 - if
07:42 - we're thrusting and
07:47 - current fuel is greater than zero
07:50 - if both of these conditions are true
07:52 - then we can
07:54 - tell the rigid body to add force in the
07:57 - up direction we multiply that by our
08:01 - thrust force let's go ahead and reduce
08:05 - our fuel minus equals
08:09 - by our thrust force as well so in other
08:11 - words more thrust
08:12 - takes up more fuel and after we've
08:15 - performed that thrust
08:17 - we're going to set his thrusting to
08:18 - false
08:20 - all right so if we save this and go back
08:24 - to unity
08:29 - and we hit play
08:34 - we fall and roll and
08:38 - nothing happens that's because we have
08:40 - no control over our player
08:43 - so we've been able to actually create
08:45 - some functionality here but we can't
08:47 - actually call that functionality
08:50 - yet so
08:53 - let's actually build what i like to call
08:55 - a player controller
08:58 - so let's add a new script to our lander
09:01 - call the playercontroller go ahead and
09:04 - create and add that
09:10 - and when it's on we can open up in unity
09:17 - and so first of all we're going to need
09:19 - to get a reference to our landing what
09:20 - we're trying to control we
09:22 - just created this class so we know know
09:24 - what it's called
09:26 - and in the start method we can set our
09:28 - lander reference to
09:30 - getting the component called the lander
09:32 - on this game object
09:35 - and now update is going to be our way to
09:37 - capture input
09:38 - so first let's check to see if our
09:41 - input get button are they pushing
09:46 - what we call thrust now remember we
09:48 - renamed thrust
09:51 - from jump so that's going to be our
09:53 - space button in other words
09:56 - we tell the lander to thrust
10:03 - and if our input
10:06 - dot get axis raw
10:10 - this is an interesting way access raw
10:12 - means it returns
10:13 - a number from negative one to one
10:16 - based on whatever access that we're
10:18 - choosing and we want the horizontal axis
10:20 - which will capture wasd in other words
10:23 - the a and d
10:24 - of the wsd it'll capture the left and
10:26 - right
10:27 - and it will also capture gamepad
10:29 - movement movement as well
10:31 - in the horizontal direction so at any
10:33 - rate if the
10:34 - horizontal input is greater than zero
10:37 - are they pushing right
10:38 - then you tell the lander to rotate
10:40 - clockwise
10:44 - else if the input
10:48 - in the get axis raw
10:52 - horizontal direction
10:56 - is less than zero
11:00 - we tell the lander to rotate
11:02 - counterclockwise
11:05 - all right now we've actually hooked up a
11:08 - player controller
11:10 - we don't care if horizontal is equal to
11:11 - zero because that means
11:13 - they're not trying to turn so let's save
11:16 - it
11:17 - and go back to unity and at this point
11:20 - now
11:20 - when it loads we should be able to play
11:23 - and actually
11:25 - do everything we want to rotate and push
11:28 - the thrust button
11:29 - and well there we go we ran out of fuel
11:33 - so it stopped thrusting
11:34 - but now we're off the screen and who
11:37 - knows what else to do
11:40 - nice so next let's actually figure out
11:43 - the game functionality