hey guys in today's video we're going to be going over cs50 problem set to readability and before we jump into that i see that 78 of you guys are actually not subscribed so please subscribe to the channel if you want videos like this every week i'm going to be proposing all the problem sets for cs50 so make sure you do that and let's just jump straight into it okay so first things first as usual uh let's just copy and paste everything we need to get our file ready and this is from cs50's official website again i will leave the link down below so let's just copy and paste exactly what they tell us to do unzip again all i'm doing here is copying and pasting and following their instructions precisely as we've done before now it says cd readability okay change directory readability okay now execute ls okay and finally code readability okay so it gives us a blank file there's no distribution code this time that's fine so what is this program actually about what do we need to do in readability well so first we need to get some text from the user okay so the user has to input some text and then our program should tell the user the reading level of the text okay so the the reading level is calculated based on this formula which cs50 gives to us we don't come up in the formula ourselves so they tell us the formula and this formula will will calculate the reading level right so over here in this formula l is the number of letters per 100 words and again all this information is already given to us right and s is the number of sentences per 100 words so from this formula we will need to calculate the grade level this formula gives us the grade level but in order to get the inputs for this formula we can see here we need the number of letters the number of words and the number of sentences right so just to recap real quick the user inputs some text and from that we need to calculate the grade level but to calculate the grade level we need to know the number of letters words and sentences in the text okay and after we count the words letters and sentences we need to calculate the grade level like we said through this formula and after we calculate the grade level we need to finally print that and that's what the program needs to do okay so it seems pretty okay seems pretty simple so far let's get into the code so first things first as usual let's include our standard io.h as well as our cs50.h and now let's start our program into main void as usual okay so the first thing we need to do here is get some input from the user right so we need to ask for some text so let's just say string text equals to remember how we get some input from the user using cs50 function called getstring so getstring and we need to prompt them for some text okay and once we get the text we need to calculate the number of letters words and sentences in that text so how do we go about doing that let's take it one by one how do we calculate the number of letters in the whole text well if you remember we we're getting a string from them and recall that a string is just an array of characters right so a string is just an array of characters so to find out how many letters are in the text we simply need to loop through each character and check whether or not it's a letter and if it's a letter we need to add one to our counter right so loop through the entire text one by one one index at a time in the array and check is it a letter yes add one is it a letter yes add one okay and that's go on goes on and on and on so first things first we need to make a for loop right because we need a loop through every character in the text and if you've done scrabble this is very simple so i highly highly recommend you go you go to the scrabble first the lab2 scrabble and i already have the solution for that so you can check out that video uh but that makes this problem set a whole lot easier okay so we need to make a for loop here and let's set an index let's call it i initialize it to zero and again here we need to make the for loop keep going on and on and on according to the length of the string right so as long as i is less than the string length and we use a function there called sterlin text i plus plus okay so what this for loop here is saying that certain index initialize it to zero keep on going as long as it's less than the length of the string context i plus plus which means go one by one okay so now what do we need to do we need to say if it's a letter if it's a letter then add a letter but how do we calculate whether it's a letter or not well if you recall from scrabble right again it's all going back to scrabble so make sure you do that first according to the ascii table every letter has its own position in the ascii table right so here we can see the letters for uppercase letters it's between 65 and 90. that's their position according to ascii and for lowercase letters is between 97 and 122. so unlike scrabble we don't need to distinguish between uppercase and lowercase letters right and all we cares about is is it a letter or not right so if it's a letter we need to add one to our letters uh function actually before we even do this we know that we need to calculate the number of letters words and sentences so let's just go ahead and do that first let's say int letters equals to zero initialize it to zero of course and let's do the same for words into words equal to zero and int sentences equal to zero because we know we need to calculate the number of letters words and sentences right so we call them ends and we initialize them all to zero and now back to our for loop if it's a letter right so we need to check um we need to check the ascii value of whatever the user puts in is it between the numbers is it between the ascii position between 65 and 90 or 97 or 122. so if it comes in between any of those that means it's a letter and we need to add one to our letter count right and if you remember how to do that again if you know if you've done scrabble this will be on the tip of your fingers here it's very simple so if the text index is greater than 65 and and remember how we say end and this function is with that two ampersands and it's less than 90 so this means if this means if it's an uppercase letter right but we also want to account for lowercase letters so when you say if it's between 65 and 90 or it's between 97 and 122 then we need to increase the letters right so let's do it here and remember how we say or this condition it's with the two lines like this or the index is greater than what is it 97 which is the ascii number ascii position of the lowercase a and the index is less than 122 which is the lowercase z then we need to add the letters okay let's see the brackets here okay so if this condition is true then we need to do letters plus plus right which basically means if it's either an uppercase letter or it's a lowercase letter we want to count it as a letter and do letters plus plus okay so that's how we count the number of letters pretty simple but again if you've done scrabble you'll notice something here we don't actually need to do all this there's actually a very simple function that tells us whether or not something's a letter and if you check the cs50 manual here okay so i didn't open it up but there's actually a function called is alpha and you wouldn't know this unless you've gone through the manual so don't worry there's not like general knowledge or something so is alpha actually tells you whether it's a letter or not so rather than doing this whole expression here all we can say is if is alpha text if the index of text is an alphanumeric character then add letters plus plus okay so both ways are correct right we can we can do it the ascii way or like uh through the numbers or to simplify our life a bit we can simply do if is alpha right it leads to the same result so nothing fishy there and again uh we view this is alpha function which is in the c type.h at header so we need to include that i'm just gonna copy and paste it here okay and also if you recall this sterling function that goes through the length of the string is actually under a different header and that's string.h so we need to include that as well right i forgot to do it in the beginning but again you have to go through it if you're using a function you need to make sure that you have the header file for the function right where that function is stored okay so sterling is under string.h and is alpha is under c type of h and again we don't have to use this we can do the ascii way if we want to it's just simpler so i'm going to do it this way and next we need to see if it's a word right we've calculated the number of letters now if it's a word well is there any programmatic way we can use to check whether or not something is a word uh i don't know of any way maybe you do um maybe there is a way but personally i don't know anyway so i'm just gonna resort to logic here okay is there any way to count the number of words in c we don't know so let's just use logic instead words are separated by words are separated by spaces so we can simply count the number of spaces in the text right and they'll tell us how many words there are so let's consider this sentence david is my friend so we can see here there is one two three spaces right and there are four words so we can say that assume that um whatever the number of spaces is there's going to be always one more word then there is a space because the spaces are between the words right and this is speaking logically there's no there's no programming here nothing like that just logically three spaces four words right it's gonna be like that in every single sentence because spaces are between words right so here we know that the number of words is just the number of spaces plus one right so what we can do is actually rather than make a formula again we can simply here initialize words to one why are we doing that because let's count the number of spaces in the text instead that's why we're doing that so if else if the text is a space and all i'm doing here is putting the space bar words plus plus so here this is why we need we need to initialize it to one because we're counting the number of spaces in the text and then adding a word every time there is a space so we initialize it to one because there's always one more word that there is a space right so again we've just used logic here not much of programming and it makes sense right it works so it makes sense so we've completed the number of letters using this function and we've filtered the number of words by counting the number of spaces and then adding one to it so we initialize words to one so now what we need to do is count the number of sentences and again with sentences is there a way to do it programmatically i don't think so so let's instead resort to logic right a sentence ends when there is a full stop right a period so we can count the number of full stops and that will tell us how many sentences there are but it doesn't only end in full stops there are also question marks and exclamation marks that define the end of a sentence right so what we can say is if there's either a full stop or a question mark or an exclamation mark we can count that as a sentence right and again this is full using logic here so all we need to do is write it else if text contains right if the array call text has a full stop right or if the text contains a question mark right this denotes the end of a sentence or the third thing is if the text contains an exclamation mark what do we need to do we need to say sentences plus plus which basically means if the text contains a full stop or a question mark or exclamation mark add the number of sentences right because it's equal if there's one full stop it means there's one sentence right and so on and so forth with these other characters as well okay so it all makes sense here we've calculated the number of letters the number of words and the number of sentences but we don't actually want to print out the number of letters in sentences we need to use this to instead calculate the grade level right and the grade level we were given this formula here by cs50 so let's just copy and paste that into our program okay and index here obviously will be an int because we can't have a grade 5.4 or 4.8 no it's going to be an end so int index equals to this formula whatever it is and l here l is this is again this is what they told us they told us that l is the number of letters per 100 words okay so what we can do simply and here we can see that it's definitely going to be a decimal right because here it's full of decimals and the letter of number of letters per 100 words is definitely going to be a decimal so we have to call it a float right not an int so float l equals number of letters per 100 words right so letters divided by words times a hundred okay float l equals letters divided by words times hundred and s remember here this s is the number of sentences per hundred words so again that's going to be a decimal we call it float so sentences divided by words times 100 okay because it's per 100 words okay so we've calculated everything here it's using all decimals here right zero point zero five eight eight and again l is a float and again s is a float so how is it going to give us an int it'll give us uh it does not give us an it'll give us a float right so we want to do is whatever we get whatever result we get from here we want to round it off okay and how we do that is there's actually a function called round okay and again you wouldn't know this this is not general knowledge this is something you would only know by reading through the cs50 manual okay this function called round and it's under the header file called math.h so let's first include that okay and now let's go back here so what we need to do is we need to round off this expression so we simply do round and put that in the rounds brackets okay so into index equals to round whatever this formula is right the formula given to us whatever whatever result it gives we need to round it off and that'll be the index or the greater level right okay um so it may not seem obvious there is actually an issue here okay and i got this wrong the first time as well so be attracted to this so letters is actually an end right and words is an int as well so even though when you divide two ins it can give us a float right but since here we can't we count them both as ins the result according to c will give us an int as well but over here we don't want it end we actually want a float right so when you divide two ins c is going to give us an int okay that's just the way c works even though the answer is actually a decimal so what we can do here is we can actually just cast words discussed anything here as a float okay just so that it gives us an answer as a float right so what we do here is how we cast something so casting is basically like you're just on the computer temporarily count words as a float okay so here we can do that by doing this so float words even though even the words is an end we know that we just want the computer to give us a float over here so we need to cast words as a float over here and um we can also cast letters as a float that uh makes no difference so we can do it for both or we can do it for either one as long as at least one variable over here is a float the computer can give us a float okay so we can do it for both we don't have to do it for both you can do it actually for either one but let's just do it for both or in this case okay so we've calculated the index but now what we finally need to do is we need to print the index right and what grade levels do they want us to give let's just take a look real quick this is the official cs50 uh guide so if the index is 16 or higher if the result is 16 or higher right from the formula we need to do grade we output 16 plus grade 16 plus is what it needs to print and if the index number is less than one so if it gives us a number less than one our program should output before grade one okay and if it's between grade 1 and 16 then we need to actually calculate we need to print whatever grade it actually is so grade 2 or grade 8 or whatever it is okay so now comes the simple part we just need to print so if the index is less than one what do we need to do we need to print they wanted us to print before grade 1 okay and what if it's greater than 16 right if index now is greater than 16 we need to print grade 16 plus and this is what they tell us to print right and finally if it's between grade 1 and 16 sorry we need to else if here else print what do we need to print we need to print whatever grade it actually is right so grade and we want to print whatever the index answers from here so we use a placeholder first right percent i that's a placeholder for an integer comma index so it tells us here that over here in the percent i we print the value of index which is calculated over here and again so if it's if the index is less than one print before grade one if the index is greater than 16 pre print create 16 plus else and again over here we can actually write if index is between 1 and 16 but we don't actually have to because if it's not less than 1 and it's not greater than 16 it's obviously in between 1 and 16. so we didn't we don't need to write that again the computer already understands that okay and everything looks good so far over here let's just make sure that it is so let's try to make readability try to compile it oh errors errors okay um i've got the semicolon over here and over here okay and again guys make sure you do all this like small errors like that can stop the program from running and again i forgot another semicolon it's very important guys it's going to give you errors so let's try that again make readability okay and now it runs so let's try to run it it has compiled does slash readability and ask me for some text okay so let's see what examples they want us to put here let's just try a random one let's copy this in my younger and more vulnerable years okay so it's supposed to print out grade seven if everything's correct that's my text just copy and pasted it grade seven okay um so it printed out the correct grade but again um not very pretty because the command again starts on the same line so let's print a new line and we use that by doing backslash n to create a new line and let's do that for all outcomes okay and let's recompile make readability again okay dot slash readability to run it and let's try another random example here let's try let's see this one a large class of computational problems involve the determination blah blah blah blah blah let's copy and paste that grade 16 plus okay so our program seems to be working well okay so guys i'm going to be posting videos every single week so please make sure to subscribe to the channel with notifications on to be updated every time i post where to get through this course together make sure to leave a like on this video if it helped and thank you so much for watching guys bye david