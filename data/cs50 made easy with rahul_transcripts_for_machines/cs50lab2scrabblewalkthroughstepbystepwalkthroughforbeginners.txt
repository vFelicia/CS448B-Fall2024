hey guys in today's video we're going to be going over cs50 lab 2 scrabble and this is going to be a stepbystep walkthrough for beginners so let's just jump straight into it so i have this tab open here and this is cs50s explanation on how to do scrabble okay so let's just follow the instructions step by step so first it says to type cd and this is just my vs code here empty cd okay and then it tells us to copy this okay it's going to do exactly what they say and then it says to unzip okay i'm just going to copy and paste what they tell me to do and rm and then type y okay and then type y enter okay finally they say to do cd scrabble okay again i'm just copying and pasting step by step what they tell me to do and finally they say okay type ls ls okay and scrabble.c shows up so that's a good sign and then we do code scrabble.c okay and now lots of distribution code comes up um so this is the code that they give us when we just follow the instructions on their page so this distribution code or code that cs50 gives to us okay um but before we jump into that let's first uh let's first understand what scrabble is actually about what the program is so here's how it works every letter is given a score so letter a is worth one point b is worth three points c is where three points and so on and so forth so how it works is both players player 1 and player 2 will input a word and the player whose word scores more points wins the game okay so let me just give a quick example here so let's say player 1 puts in the word bad so here bad b is worth three points a is worth one point and d is worth two points that gives player one a total of six points player two puts in the word def so d is where two points e is worth one point a is worth one point and f is worth four points so the total score is eight points so here we can see player two has more points than player one so the computer should print out player two wins okay so this is a very basic explanation and that's what we have so far that's what we have to do now let's take a look at the distribution code that they give us so first things first we see here an array called points which has ins okay and here we can see that this is the points assigned to each letter of the alphabet okay so here in the zeroth index points zero is one which means that a is worth one point and in points one the first index is three which means b is worth three points so these are the points assigned to each letter so a is one b is three c is three and so on and so forth right as we said earlier in this talk okay so this is the array that they give us and next up we have a prototype here a function called compute score that takes in a string called word and outputs an integer okay and so far this makes sense because the player is going to give us a word so that's the input and it's going to output an int which is the score right okay so let's go i'm just going through the code step by step by the way uh we don't have to write this code this is the code already given to us so next thing you do is get input from both players okay and how we do that is using the get string function if you remember from earlier problem sets so string word one equals to get string getting some input from the user and the same thing for word two so we're getting two inputs one from player one and one from player two and that's where they type in the word and next thing we have to do is score both words right so in score one equals compute score word one and this is the prototype we saw earlier right so we have to write this function so they don't tell us how to compute the score we have write the program that completes the score right and finally we have to print the winner okay so first thing we have to do here is let's actually write the function so how do we go about that when the player inputs a word we need a specific score to be given to that word right so let's take a look here we should remember that every string is just an array of characters right if you remember from the lecture every string is just an array of characters so let's take an example here the word code so code is a string right the word code is a string but it's actually just an array of characters so let's just say this is an array called word and in the zeroth index will be the letter c and the first index will be the letter o and the second index will be the letter d and the third index will be the letter e which makes up the word code right so every character has its own index here so every character is an index in the array and every string is just an array of characters as we can see here okay so how do we go about calculating the score then of each word well it will make sense that we loop through every character in the word every every index in the array to find out the score of each letter right so we go through them one by one again and again until the end of the word so it sounds like we need to use some sort of loop to do this to go over each character one by one and let's go ahead and do that so let's code here and here we know we can use a for loop so for let's just set an index let's call it zero i let's initialize it to zero i equals to zero and i equals to zero and we need to keep on going along the length of the word and if you remember there is actually a function that lets us do this sterlin right so let's use this function which is under string.h which tells us the length of the string okay so if you remember how a for loop is is arranged it's first you initialize it to something right and then we give it a condition keep on going as long as so we want to keep on going as long as i is less than the length of the string called word right so i is less than sterling of words so keep on going keep on going as long as i is less than the string length of word and we want to keep on going one by one so we do i plus plus so what it says here is at i equals to zero we initialize it to zero keep on going as long as there's still letters in that word and we want to go one by one so i plus plus so it's initialize condition and then the increment okay so for this what we want to do we want to compute the score right so first things first we know we need to have a variable called score to keep track of the score so let's have an integer of course score can either be 0 1 2 3 so on and so forth it's not going to be a decimal right so let's do in score and let's initialize it to zero so it starts with zero right so here when someone types a letter in the computer what happens so actually if you remember from the lecture every letter has its own position on the ascii table right so we can see here that capital a is 65 capital b is 66 c is 67 and so on and so forth and this is according to the ascii table which the computer uses but uh now we can see that actually capital a uppercase a is in the 65th position according to ascii but lowercase a is in the 97th position so uppercase and lowercase a have different positions in the ascii table but when we compare it to the array here the points array it doesn't matter whether it's capital or lowercase points uh a still needs to be in the zeroth index of points right and b whether it's uppercase or lowercase doesn't matter in scrabble we still need it to be in the first index of points right so a needs to be in the zeroth index and b needs to be in the first index and so on and so forth but according to ascii uh it's different right a is 65 and uppercase is 65 and lowercase is 97. so already immediately just like that we know that we need to treat uppercase and lowercase letters differently right so how do we go about doing this we need to convert it from ascii from its position and ascii to its position in the points array okay i hope everything makes sense so far because the computer when we type a letter understands ascii but here we need to make it equal to the we need to make it equal to the position in the points array so how do we go about doing this well we know that uppercase a its position ascii 65 its position in points is zero right you can see here a is in the zeroth index of points b is 66 in ascii but in points it's in the first index c 67th in ascii and second in the points array so the difference here is always 65 right so it actually is just ascii minus 65 is where it is in the points array so in the 65th position of ascii is the same thing as the zeroth index of the array points okay so that makes sense so let's try to let's try to make a formula here for the score so score equals what is it we need to update it every time so score plus now which uh which position in the points array should it be so points which array should be here it should be whatever the index is an ascii which is word right minus 65 okay and i hope that makes sense and i'll just explain it once again so um here what the index of points that it takes is whatever index it actually is from the word minus 65 because this is according to ascii the index of the word is according to ascii right so here uh right like we said it should be an ascii 65 but in points it's zero so that's why we need to do whatever it is whatever the index of the word is minus 65. so index and ascii minus 65 will give us the index in the points array okay i hope that makes sense so far but here we can see that this 65 is actually only applicable for the uppercase letters because for the lowercase letters we need to treat them differently right so how do we tell the computer that this only applies this only applies if it's an uppercase letter it sounds like we need to use a condition here which is the if condition right so if sorry just put that within the if condition here so if something is true then this so if it's an uppercase letter then we need to subtract 65. so how do we say it's an uppercase letter well we see the position here it's six uppercase letters in the ascii are 65 to 90 right uppercase is 65 to 90. okay so we can simply say if the index of word is greater than 65 and and how how do we say and in the in the this condition it's double ampersands okay so if it's less than 65 so if it's greater than 65 and it's less than 90 right so this is the way you tell the computer that hey if it's between 65 and 90 then do this which makes sense right everything makes sense so far hopefully but now we need to treat lowercase letters separately again because here it's 97 a is 97 whereas in our points array a is still zero whether it's uppercase or lowercase doesn't matter at all so again now we need to tell the computer if it's lowercase then we need to do the same thing but instead of subtracting 65 how much do you think we should subtract well we should subtract we should subtract 97 right that makes sense and here here's how it works so lowercase a in ascii is 97 but in points it's zero so the difference is 97. same goes with b b is 98 and ascii but in the points area it's one so the difference here is always going to be 97. so for lowercase letters we need to subtract 97. okay so hopefully that makes sense so now we do if sorry if the index is greater than 97 and it's less than whatever capital z is let's check real quick whatever lowercase z is a lowercase e is one two two okay so one two two then so if it's greater than 97 and less than one to two which is basically saying if it's an upper case letter then we need to do score equals score that's the way to update the score plus points and the index it should take in the points array is whatever the index is in ascii minus 97 right because lowercase is 97. but here it just it feels a little bit complicated here we're saying like greater than 65 less than 90 and this is completely correct so far logically it's correct but what if there was a simpler way to say if it was uppercase and if it was lowercase rather than checking the ascii values and doing all that well it turns out there is a way to do that and the way we do that is using this function right here so it's called is upper and it's under the header c type dot h and you wouldn't know this unless you actually went through the entire cs50 manual so don't worry at all so but it turns out there is a function called is upper which checks whether or not the function is uh whether or not the letter is uppercase so rather than doing this whole long thing rather than saying between 65 and 90 greater than 65 less than 90 doing all this what we can simply do is replace it with the function is upper if is upper word so it checks whether the index is upper case or not whether the character in that index uppercase or not and if it is it'll execute this so it's it's the exact same thing functionally but just it's simpler right if we can use a function why do we have to reinvent the wheel and do it all over again so we can do the same thing here if is lower for this one that's the name of the function word i right if you do it the previous way it's correct as well if you did this way it's correct as well this is just simpler right so we've done all this so far but uh actually we don't just want to return the score uh we don't just want to print the score we need to we calculate the score and then we need to print out the winner right so what you need to do here is return score right um okay i hope everything's clear so far if you don't understand anything please rewind or if anything's unclear at this point please leave a comment down below and i'll be sure to answer every single comment right but hopefully everything's clear here we've calculated the number of points but we don't want to print the score here we want to return the score and we want to print the winner instead so here it's very simple right so what we do is simply print f sorry we need conditions right so if score one is greater than score two we need to print what do we need to print player one wins right player one wins and these are according to the instructions on uh cs50 themselves right so if player if player one's word has more points print player one wins if player two has more points print player two wins and if player one and player two have the same number of points print i okay this is what they tell us to do so this is the way to do it write in code right if score 1 is greater than score 2 print player 1 wins just make lot just makes logical sense else if score two is greater than score one what do we do what do we need to print here print player two wins player two wins okay and there's a third scenario here right if it's a tie so else print tie right and here we can write the condition if score 2 is equal to score 1 but we don't have to write it because if it's not this if it's if 1 is not greater than 2 and 2 is not greater than 1 it's understood that one is equal to two so they have the same player one and player two at the same number of points so we can write it we can write here else if um score one is equal to score two but we don't have to because it's understood logically right so everything here makes sense so far and let's just go ahead and compile the program see if we did anything wrong make scrabble dot c sorry make scrabble not make sure this how you compile make scrabble oh one error generator here oh okay so in line 27 there is an error and here the problem is okay so we can see here that the variable is defined as score two whereas here i accidentally put a space so that's not gonna count that as it um as the variable so it needs to be exactly what you do what the variable is you need to write it exactly we can't accidentally put a space here space there completely changes the meaning and as you can see it gave us an error there so that was just a silly mistake on my part so let's try to compile again make scrabble okay let's try dots less scrabble to run it okay it asks me player one and let's just go back to our earlier example here bad right player one says bad and player two says def player two wins okay oh one small thing here is that um the problem starts on the same line so let's just make a new line here we do that by doing backslash n so every time we print something we want it to always move to the new line after that it's just it's still correct the code itself is correct it's just that uh for neatness sake you know for style sake so let's see what they tell us to check here what cs50 themselves want us to check okay so let's check the word computer player one says the word computer in all caps and remember we've already accounted for the uppercase and lowercase over here if is upper then minus 65 is if lower than minus 97. so we've already accounted for that so it shouldn't be a problem here that they tell us to check computer with all caps and science with all lowercase so let's make scrabble let's run it scrabble player one puts in the word computer and player two puts in the word science and player one wins and as it should print player one wins okay everything's correct so far let's just go ahead and check just copying and pasting this code here to check whether or not it's correct and this is um from the from the original file itself right this is the link i'll put in the description it's a it's cs50s official link to explain what scrabble is i'm just going to go ahead and check here and while we're doing that guys always remember to check the manual wrong tab screen um right so we use some functions here that are part of the manual right but they didn't explicitly explain it in the lecture so um in your free time just like go over the function right it can save us a lot of time like we did the is upper we had to do a whole bunch of things from ascii and less than 97 greater than one two two all that stuff it could have been saved if we simply knew about the function called is upper right so it's worth it to go through the whole thing go through everything and kind of get a feel for all the functions and everything so that we can save time in the future and we can see here it's done checking and everything is green which means everything is good right everything's correct and if you want to maximize your points you can also put in this code to check the style of your code right how good is your style and okay we have a few errors here okay one one small thing which i forgot to put the space here okay let's run style once again just make sure okay looks good everything's good so please please please after you watch this video don't don't copy this step by step try doing it yourself right everything here is explained logically for you for you to understand please don't copy the solution guys and with that said thank you so much for watching i'm going to be posting i'm going to be posting psats every single week so make sure to subscribe to the channel with notifications on so to be updated and never miss a video let's get through cs50 together guys thanks for watching bye david