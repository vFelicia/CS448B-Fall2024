in this video we're going to be going over a cs50 practice problem called Prime and this one's a little more difficult and a little more involved than the others so make sure you watch all the way to the end and don't skip any part of the video if you want to fully understand it now let's jump straight into Prime so the program should do this it should ask the user for a range minimum and maximum value and then give the user all prime numbers within that range so let's say the user inputs a minimum of 2 and a maximum of 10. our program should output all prime numbers between 2 and 10 which in this case is 2 3 5 and 7. so I guess the next natural question becomes how do we know if something is a prime number or not well a prime number is something that can only be divided by one and itself in other words when you divide a prime number by any other whole number you will always have a remainder let's do a quick example of that so 4 divided by 2 which is another whole number does not have a remainder 4 divided by 2 is 2 not 2 point something just two so we can say that 4 is not prime okay because it does doesn't have a remainder when you divide it by a whole number what about five five divided by 2 has a remainder it's 2.5 5 divided by 3 is also one point something so it does have a remainder and 5 divided by 4 is also one point something and it does have a remainder right so we can say that 5 is prime so just to make this concept very clear let's take an example of nine so 9 divided by 2 has a remainder right it's 4.5 but that doesn't mean it's Prime because for it to be prime it would need to not have a remainder when dividing 9 by all numbers between 1 to 9. so let's take the next step now from two to three nine divided by 3 we see here does not have a remainder because 9 divided by 3 is 3 which means that 9 is not prime so would you divide a number by all whole numbers between 1 and itself and it does not have a remainder that means that it's Prime and even if divided by one of the whole numbers result in a remainder of 0 that means that the number is not prime as we see in this example of 9 here so we understand the concept of Prime versus not prime but how do we actually implement this into code well let's first take a look at the distribution code that they give us specially include the standard header files and then they have a function called Prime which takes in an integer called number as input and gives out a boo or true or false value and on the main function we can see that they're prompting the user for a minimum value and a maximum value using the get in functions and the conditions over here we see that the minimum needs to be greater than one at least and the maximum obviously needs to be greater than the minimum right so this is just prompting the user for input of the range and then over here we have a for Loop so let's dig into this so four and I gets Min okay which means start Loop and it initializes at the minimum value go all the way up until it's less than or equal to Max right and go one by one step by step I plus plus so what this is doing is let's say the user inputs a range of 1 till 10 or 2 till 10 well it's gonna go from 2 all the way up till 10 it's going to go one by one so it's going to go through two three four five six seven and so on and if it's Prime then we want to print it out it's not prime that we don't want to print it out right so if the user inputs a minimum value of 2 and a maximum value of 10 our program should print out two three five and seven just as we discussed earlier so our job now is to write this function called Prime to check whether the number in the user's given range is prime or not okay how do you go about doing that in code well let's take a look here so it's pretty obvious that we're going to need two main loops the first Loop is to go through all the numbers within the range given by the user so if the user input the range between 2 to 10 this first Loop will go over 2 3 4 5 and so on and so forth all the way up until 10 right to go through all the numbers within the user's given range and the second Loop is to check whether or not the number is prime okay and how do we do that well over here remember earlier we said we go through all the numbers from 2 until that number minus one right so if you want to check whether 5 is prime we guess divided by 2 see if it has a remainder divided by three see if it has remainder divided by four let's see if it has a remainder so all the numbers from 2 until the number itself minus one so the nested Loop checks each number from 2 to that number to see whether it's prime or not so just as a quick example we see that 9 divided by 2 has a remainder and now we go to the next number 9 divided by 3 we can see that it does not have a remainder so our function should return false it's not a prime number because when you divide it by another number it does not have a remainder or the remainder is zero so whenever the remainder is 0 that means that function is not prime so the logic is sound but how do we do this remainder stuff in code well it turns out that there is something called a modulo function which gives us the remainder after dividing whole numbers okay and this may seem a little confusing at first because it wasn't thought in the lectures but this is just something we have to know and something of research on your own but basically the modular function is the remainder you get after dividing whole numbers so how does it work well we know that 7 divided by 2 is 3.5 right it has a remainder but 7 mod 2 is 1 because that's the remainder so how do you think about this logically well let's say you have seven apples and your basket can fit exactly two and this is a representation of 7 mod 2. your mod is a basket size and seven is the number of apples you have so we have seven in the first basket we put two and now we have five left and now we have five apples we put two in the basket and now we have three apples left and then we take another basket and we put another two apples and now we have one lap now this one apple can't fit in that basket because the basket can fit exactly two it can't fit anymore it can't fit any less get fit exactly two apples so over here we'll fill three baskets right we fill three baskets and then we'll have one apple remaining which can't fit in any basket so this means that seven mod two is one that's the number of apples we have remaining okay just go through another quick example let's say now you have seven apples and your basket can fit exactly three this is seven mod three so in the first basket we'll put three and then we're gonna have four apples remaining from those four we take three apples and put them into the basket and now we'll have one apple remaining so in this case we're gonna fill two baskets and then we're gonna have one apple remaining which means seven mod three is one we're getting the gist of it by now so basically the rule for prime number is is over any point the number mod a whole number is zero that means it's not Prime and you can see why right let's say you have four apples and your basket size is two So You're Gonna Fill two baskets and have exactly zero apples remaining so we can conclude the that 4 is not a prime number it's that simple so basically this modulo function it might seem a little complicated at first but it's just something you need to understand once and then you're going to understand it forever so think about it in terms of apples and baskets and it's denoted by the percentage sign that's what you need to know now that we understand the concept remainders and the modular function it sounds like now we will be able to write this function called Prime so let's take a look at the distribution code again and over here we can see that the first Loop they've already given us right this Loop goes through all the numbers from the minimum till the maximum and if it's Prime then print out the prime numbers so this Loop is already within the loop that goes through all the numbers so we need to make the second Loop which is the nested Loop to check whether or not the number is prime and now we have a pretty good idea on how to do that with the modulo function so let's take a look at that okay so that has to do and return false Let's ignore the return false for now so let's make a for Loop right and how much do we want to initialize this to well we know that we want to start at 2 and go all the way up until that number and we want to go one by one so let's just make a variable let's call it J and how much do we want to initialize it to 2 right so for NJ gets two and so what's the maximum value you want to go up to you want to go up till the number itself right so J less than numbered so keep on going until it reaches the actual number itself and J plus plus which just means go one at a time so this Loop is basically initializing it to 2 going all the way up till the number right as we said here what we want to do it for five we said that okay we started two five by two as remainder now because then next we go to three we go to four and if all of them have a remainder that means it's not prime but if even one of them doesn't have a remainder that means it's not prime so this is the for Loop so now if the number mod the whole number which is J in this case is equal to zero that means it's not prime right so we want to return false otherwise you want to return true which means it is Prime and this what we've written here is nothing more than what we've done with 5 at the beginning so we initialize it two right we check 5 divided by 2 5 divided by 3 5 divided by 4 so it's going to keep on going and the moment it reaches something with a remainder of 0 that means we return false it's not a prime number and we don't want to print it okay so let's check our code now let's try to compile see if we made any mistake okay we didn't make any mistakes let's go to compiles let's run it let's even move to maximum of 10 and it prints out 2 3 5 7 Square Factor seems to be all correct but just to double check let's use the check 50 function here and while we're waiting for that I know this problem set was a little bit complicated because we got introduced to a lot of new Concepts right like defining a prime number and then modulo but I promise it all gets easier with time if there's anything you didn't understand please make sure to rewatch the video first and focus and if you still don't understand something make sure to leave a comment down below I'll do my best to get to it and in case you need private tutoring feel free to email me at Rahul cs50madeeasy.com that's gonna be private one one two three four you if you need it and now we can see that it's all green which means it's all good and if you enjoyed this video please make sure to like the video subscribe to the Channel with notifications on for weekly cs50 videos and that's all for this one thanks for watching guys bye David