00:00 - hello everyone welcome back to show code
00:02 - today I'm going to be teaching you how
00:04 - to make use and alter sets in Python I
00:07 - have lots of experience in Python and by
00:09 - the end of this video you will have a
00:11 - really good understanding of what sets
00:12 - are and how to use them okay so a set is
00:16 - another collection type in the previous
00:18 - few videos we covered lists tuples and
00:21 - strings lists and tuples a collection
00:24 - types and so assess a set is a
00:27 - collection which is unordered and
00:29 - unindexed and contains unique items if
00:32 - you don't care about it being ordered
00:34 - then you shouldn't use a list or a tuple
00:36 - sets there allow for duplicates because
00:39 - all of the items are unique you usually
00:42 - use sets when you are working with large
00:44 - databases because they are changeable
00:46 - and unordered and they are also
00:48 - optimized to checking whether a specific
00:50 - item is in the set we don't have
00:52 - duplicates so we're faster okay I've
00:55 - just got open a new file in idle so
00:59 - let's create a set so my set equals to
01:05 - curly brackets
01:07 - hello there yes and then you can print
01:15 - out by set say that and then if we were
01:20 - in it as you can see it's not printed
01:23 - out in the order that we set it in and
01:24 - also if we wrote yes once more and
01:29 - printed it we'd still get the same thing
01:32 - because they only have unique items so
01:34 - you cannot have two of the exact same
01:36 - thing so it's only printed out one yes
01:38 - here so what we can learn from this is
01:42 - that they are unordered and each item is
01:45 - unique now let's talk about accessing
01:47 - items because sets are unordered there's
01:50 - no way like lists or tuples to access
01:52 - them through their indexes because sets
01:55 - don't have indexes so we can use it in
01:57 - operator to check if an item is in the
01:59 - set so if we do if hello
02:07 - inset in my set print hello is in my set
02:17 - and then obviously as you probably
02:23 - guessed it printed out hello is in my
02:26 - set because hello hello is in my set
02:29 - let's change this to something random
02:32 - it's not gonna print out because this
02:34 - random string isn't in there
02:37 - okay now onto modifying sets because
02:40 - they are unordered there is no way to
02:42 - change the items with their index that
02:44 - you can add or remove items so to add
02:47 - items we used to add method like this my
02:51 - set dot add one two three print my set
03:00 - and we get one two three to add more
03:05 - than one item at once we need to use the
03:07 - update method so update and then we need
03:11 - to use some square brackets though we do
03:16 - one two three four five six hello four
03:23 - five six one two three to remove items
03:25 - we can either use the remove method like
03:29 - this we could use a remove method or you
03:32 - can use something called the discard
03:34 - method and varies a difference between
03:36 - the two but I will show you so if we run
03:38 - repeller as you can see there is no
03:43 - longer hello in beset if we decide to do
03:48 - that it will give us an error because it
03:52 - can't find this string of text but if we
03:56 - use discard with a random string of text
04:02 - we don't get an error because what
04:05 - discard does is discarded doesn't raise
04:08 - an error if it can't find it item where
04:11 - as removed rate gives us an error if it
04:14 - can't find V item so you should only use
04:16 - the remove method if you are sure that
04:19 - the item is in
04:20 - sir we could also use the pop method if
04:24 - you remember back in the West video we
04:26 - learned about the pop method and that
04:29 - usually removes an item depending on its
04:31 - index but we do not actually have
04:33 - indexes of sets so what we have to do is
04:36 - leave it blank my set that pop and just
04:39 - leave it blank and what this does is it
04:45 - will just remove the final item of the
04:46 - set so as you can see it's removed yes
04:48 - so it's a short way of removing vast
04:50 - buy-in from beset then we can use the
04:53 - clear method completely empty set and
04:58 - then what we can we could even do Dell
05:01 - my set and then as as you can see we get
05:06 - an error because my set doesn't exist
05:09 - anymore it's being deleted by this Dell
05:11 - keyword right here as you probably
05:14 - guessed we can also get the length of a
05:15 - set using the length function so if we
05:18 - just do print Len my set it's gonna
05:25 - print out free because one two three
05:28 - it doesn't say four because yes and yes
05:31 - very exactly the same thing it just
05:32 - removes one of them because every item
05:35 - has to be unique as a quick side note
05:37 - make sure you give this video a like if
05:39 - you are enjoying it so far it really
05:41 - does help me out it only takes two
05:43 - seconds and it doesn't cost anything
05:44 - so to merge multiple sets together we
05:47 - should use a union method which returns
05:49 - a new set from the original two sets so
05:52 - if we just make another set called set
05:54 - to calls
05:57 - one two three four or five six and then
06:04 - we do a new set equals my set Union set
06:10 - two and then if we print a new set
06:17 - my certain set to have been mixed
06:20 - together all into one set another way of
06:24 - doing this is for update method so we
06:26 - could just do my set update my set to
06:31 - update set to and then we need to print
06:33 - this out so print my set one single set
06:40 - with both the original set and Ben and
06:43 - the second set mixed together okay to
06:46 - recap on on all the set methods we have
06:49 - add adds an element of a set clay
06:51 - removes all the elements of the set
06:53 - discard removes a specified element with
06:55 - no error remove removes a specified
06:57 - element and will raise in error fee the
06:59 - element doesn't exist
07:01 - pop removes the last element from the
07:03 - set Union returns new set containing
07:06 - four values from two of the sets
07:07 - update as the content of one set to
07:10 - another set and these aren't all the set
07:13 - methods and there are too many to cover
07:15 - in this video so you should look up a
07:17 - list of set methods on the internet make
07:20 - sure you leave a comment with the set
07:22 - method you found elsewhere but we didn't
07:24 - cover in this video but where you are
07:26 - helping other people to learn okay
07:29 - that's all for today guys next video we
07:31 - will be learning about dictionaries they
07:33 - are the last cochin type to cover and
07:35 - they are quite complex but you should be
07:37 - able to pick them up pretty easily if
07:39 - you have any questions or comments make
07:41 - sure to leave them down below also give
07:43 - the video a thumbs up if you found it
07:45 - useful it would really make my day also
07:47 - consider subscribing I post quality
07:49 - Python content almost every day that's
07:52 - it from me Cheers and goodbye