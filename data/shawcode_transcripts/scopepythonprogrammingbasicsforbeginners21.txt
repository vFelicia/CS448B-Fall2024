00:00 - hello everyone welcome back to show code
00:02 - in this video I will be teaching you
00:04 - about scope I have lots of experience in
00:07 - Python and by the end of this video
00:08 - you'll know what scope is and how to use
00:10 - it properly so a variable is only
00:13 - available from inside the region is
00:15 - created this is called scope what I mean
00:18 - by this is for example if you have a
00:19 - variable inside a function you can only
00:22 - access that variable from inside the
00:24 - function and variable is local to that
00:27 - function so if we have a function just
00:32 - define my func
00:33 - X equals 5 print X my phone and run it
00:41 - you can see we get 5 but what happens if
00:44 - we were to move this print statement
00:45 - from inside the function to outside the
00:48 - function X is not defined because this X
00:52 - variable inside this function only
00:55 - exists inside of this function it's a
00:57 - local variable belonging to this
00:59 - function this is what we call a local
01:01 - scope if we wanted to get this value
01:03 - from the function we could just return
01:05 - it return X and then we could do x
01:12 - equals my phone which print X and there
01:15 - we go now let's make a nested function
01:17 - so define my night func - yeah we can
01:24 - have functions inside of functions and
01:26 - we can print x y equals to print Y then
01:37 - let's call my phone - then my funk
01:49 - run de and we get 5 and 2 so the inner
01:52 - function can access variables that
01:54 - belong to the outer function and it can
01:56 - also access its own variables but then
01:59 - if we were to print Y you can see Y is
02:01 - not defined this is because Y only
02:04 - exists in this function now let's talk
02:06 - about global scope if variable is
02:09 - created in the main part of the Python
02:11 - code it is called a global variable and
02:13 - belongs
02:13 - a global scope and visa available from
02:16 - within any scope global and local so if
02:20 - we just do X equals seven define my
02:25 - phone for its X my code we get seven
02:36 - because this function can access the
02:38 - global variable if you are enjoying the
02:41 - video or are finding it useful please do
02:43 - drop a like it really does help me out
02:44 - anyway naming variables alright let's
02:47 - just make a equal to seven then define
02:54 - my phone a equals to print a print a my
03:07 - what do you think's going to happen will
03:11 - get seven and two because we're printing
03:13 - out a appear which is seven and phone
03:17 - we're printing out a here so as far as
03:20 - this print statement is concerned a
03:22 - doesn't exist because this is part of
03:25 - the global scope and this is local scope
03:27 - but we can still print a here because a
03:30 - is defined inside this function so these
03:33 - just don't override each other
03:35 - cassettes in separate scopes alright
03:37 - let's now talk about a global keyword if
03:39 - you need to create a global variable but
03:42 - you're in the local scope you can use
03:43 - the global keyword and this makes the
03:46 - variable global so let's just get rid of
03:49 - this let's do define F equals 20 if we
03:56 - print F we get an error because F isn't
04:01 - defined if we do global F so we've made
04:05 - this global but now we need to call the
04:07 - function so it exists and then we get 20
04:11 - because if we don't have a function it
04:15 - doesn't exist but if we do a function it
04:20 - does exist so you can also use a global
04:23 - keyword if you want to make a change to
04:25 - a global variable inside the function
04:27 - so if we have like F equals 30 print F
04:36 - we get 30 and then 20 this global
04:40 - keyword and this F equals 20 over our
04:42 - disk global variable here and then
04:45 - changes it to 20 however I wouldn't
04:47 - recommend using for global keyword if
04:49 - you just want to give a functional
04:51 - global variable you should just pass it
04:53 - in as an argument like this if we wanted
04:55 - to give it if we wanted to give it F we
04:57 - could just bunk F okay you know it's
05:04 - just a lot easier that way
05:05 - and if you wanted to get a local
05:07 - variable back from the function you
05:09 - should just return it so we could modify
05:11 - a key close equals 10 return yeah and
05:14 - then you could do far away we get 40 so
05:21 - this way using arguments and returning
05:24 - it doesn't get really confusing because
05:26 - when you start mixing up local and
05:28 - global variables it does get quite
05:30 - complicated so one recommend it ok
05:33 - that's pretty much it for scope if you
05:35 - have any questions or comments about
05:36 - this belief it in the comment section
05:38 - I'll be sure to apply if you would like
05:40 - to support me all you have to do is give
05:42 - this video I like it really does help me
05:44 - out also consider subscribing I'm a
05:47 - blood Python tehn almost every day
05:48 - that's it from me Cheers and goodbye