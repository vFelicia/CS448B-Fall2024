00:04 - Hi my name is India Irish. I'm a master's student in the human-centered design and engineering program
00:09 - at the University of Washington.
00:11 - I'm all about making people feel comfortable in their environment,
00:15 - and that's what computer science does.
00:18 - It's not just guys hanging out in a dungeon coding! That's not what I'm doing.
00:29 - When lists were first introduced, we used an example list of contacts, represented by a string.
00:33 - A more useful list stores a lot more information, like last name, email, phone number, and birthday.
00:41 - To make a contact app, with tools you have now, you may be inclined to make separate lists of each property
00:49 - that a contact can have, like this:
00:54 - Where the same number index in each array, corresponds to  the same contact.
01:01 - This is possible, but it's a lot to keep in sync for any operation.
01:07 - If you want to delete anyone's contact info, you will have to perform 5 different delete operations,
01:13 - one on each array.
01:16 - Instead, it's ideal to keep all information related to a single person together in one place.
01:23 - javaScript can do this by using an Object: a group of related properties with assigned values.
01:31 - In this example, each object is a contact with related properties,
01:37 - like first name, last name, email,  phone number and birthday.
01:41 - You can see each property has a corresponding value.
01:46 - Anything that has a group of related properties can be modeled as an object in code.
01:53 - For example, apps like Instagram store a bunch of related properties about a single photo, as an object.
02:01 - Let's create a single photo object, that
just stores values for these properties.
02:07 - First, create a new variable, and assign it an empty object. as represented by a pair of curly braces.
02:15 - At this point, the photo is an object, but it doesn't hold any data.
02:21 - To add properties to your object, you can use that notation, where the name of the object
02:25 - and the properties are connected with a dot.
02:29 - We can use this notation to create and assign new properties in our object,
02:33 - much like we would assign values to a variable.
02:38 - Once we've added properties, we can display its contents using console.log.
02:45 - Notice when the object is printed out, all at once, each property is paired with its corresponding value.
02:53 - Lets go back to our contact example from the beginning.
02:57 - Since we're trying to build the contact list of multiple people each with related properties,
03:02 - we can make a list of contact objects.
03:05 - Here we're making two contact objects. Both have the same related properties: name and phone number.
03:12 - We can then put them, and any future
friends, in a contact list.
03:17 - To access individual objects in our lists, we can use bracket notation.
03:23 - Here, we're displaying that object stored at Index 1.
03:27 - If we want to access individual properties of that object,
03:30 - we can combine bracket notation and dot notation.
03:34 - Here we are displaying only the name of the contact.
03:37 - As we start creating apps that store and process greater amount of data,
03:42 - Objects will be increasingly important tools for keeping the data organized,
03:48 - and making relationships within the data clear.
03:52 - Fortunately, we can intuitive names to create and access properties,
03:57 - to keep our code understandable.