00:05 - ﻿My name is Jerome Holman, and I work in 
the Windows devices group at Microsoft.  
00:09 - It’s basically a team where we 
build cool stuff: tablets, phones,  
00:13 - things like Hololens that hopefully 
will excite and delight customers. 
 
00:17 - Computers are not infinitely fast, but they are 
much faster than human beings at many tasks.  
00:24 - In 2014 the fastest computer in the world was 
clocked in at an astounding 33 quadrillion  
00:31 - calculations per second. Now, for some tasks, like 
composing a song, we generally think human beings  
00:37 - still do a better job. For highly repetitive 
tasks that can be automated, computers are much,  
00:44 - much better. Programming languages usually 
have a few different ways to define  
00:50 - and control behavior that should repeat. These are 
usually called loops. They go by different names  
00:57 - in different languages, like For-Loop, 
While-Loop, Do-While-Loop, For-Each-Loop,  
01:05 - Repeat-Loop, and so on and so forth. These types 
of loops have small differences, but all of them  
01:12 - are just different ways to get the computer 
to execute some lines of code repeatedly. 
 
01:17 - The generic term for looping is iteration. 
Iteration is just a fancy word that means  
01:24 - “repeat.” It usually is in reference to the 
repetition of a process or a procedure. This  
01:30 - is why iteration is a good generic term. Often 
in programming, we have an algorithm that just  
01:36 - needs to repeat a specific number of times or 
be repeated while some condition holds true.  
01:43 - We’re going to show you how to use a looping 
structure called a For-Loop in JavaScript. You  
01:48 - can find For-Loops in the control section of the 
toolbox. It looks like this when you drag it out.  
01:56 - A For-Loop in JavaScript like this one  
01:59 - is just a type of counter loop. It counts 
up from zero to the number you type in.  
02:07 - Why does this simple For-Loop look so 
complicated? JavaScript, unlike some languages,  
02:14 - doesn’t provide a simple repeat loop structure. 
The For-Loop is a very powerful and versatile  
02:20 - looping structure for both advanced and simple 
tasks. We’re just keeping it simple for now. 
 
02:26 - Let’s do a little experimentation. You can drag 
any commands you like inside the For-Loop block.  
02:34 - These commands will be executed over and over 
for however many times you specify in the loop.  
02:41 - When you run the loop, notice the app 
lab highlights each line as it executes.  
02:49 - Now why does the For-Loop block highlight after 
each iteration of the loop? That’s because the  
02:55 - For-Loop needs to check its counter every time to 
see if it should stop or run the commands inside  
03:02 - the loop one more time. Well, that’s not terribly 
exciting, but it’s because we’re not really  
03:09 - using the computing power that looping gives us. 
Instead of looping this piece of code four times,  
03:16 - let’s loop it—I don’t know—200 times and see 
what happens. Now that’s more interesting. 
 
03:25 - One thing to note about loops is that your 
code will still execute from top to bottom,  
03:31 - as before. You can put lines of code before the 
loop if you need to get something set up before  
03:37 - the loop starts. Likewise, after the loop is done 
executing, it will pick up on the line right after  
03:43 - the loop. For example, if you want to move the 
turtle before drawing this figure, I could use a  
03:50 - moveTo command before the loop. And if I want to 
draw a red dot to see where the turtle ends up,  
03:56 - I could add lines after the loop. 
You will use the same top-down design  
04:04 - in many of your projects. These problem solving 
techniques will help you identify where loops  
04:10 - belong in your code. You still might want to write 
a function to do a small part of your program  
04:15 - and then write a loop to call that function. Take, 
for example, the problem of trying to draw this.  
04:23 - You might recognize that this is just a bunch 
of squares, each one rotated slightly before  
04:29 - being drawn. Previously, we would have 
had to make a function to draw a square;  
04:36 - to get the ten rotating squares. we would have had 
to call this function ten times, turning a little  
04:42 - each time after we called the function. This 
would have involved a lot of copying and pasting.  
04:48 - This code works—it does, but it’s very repetitive. 
Let’s just see if we can simplify our code with a  
04:54 - loop. We already have a working function 
that does a piece of the problem once.  
04:59 - We can easily stick the function call 
into a loop to do it multiple times. 
 
05:07 - Clarity and readability are important 
considerations when programming.  
05:11 - As we can see this code is now much more readable.  
05:15 - It’s obvious just from looking at the loop that 
the intent is to draw a square a bunch of times.  
05:22 - Loops are a powerful programming construct 
that use the computer’s primary advantage  
05:27 - over humans, that being their amazing speed. 
By repeating commands as many times as we wish,  
05:34 - loops allow us to solve new problems at a scale 
that would be impossible without computers.  
05:41 - There is still much to learn about 
the loop, but the concept is simple.  
05:46 - Loops repeat commands as many times as we 
need. Now you know how to use a simple loop.  
05:54 - You can use them in your programs and take 
advantage of your computer’s power and speed.