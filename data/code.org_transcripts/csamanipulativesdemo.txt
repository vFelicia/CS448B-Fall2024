00:05 - hi
00:05 - my name is jamila and i write curriculum
00:08 - for code.org
00:10 - in this video i'm going to demo the
00:12 - manipulatives that are used in the
00:13 - curriculum
00:15 - as well as kind of provide some
00:17 - ideas for how you can use these
00:19 - manipulatives to help students create
00:22 - a mental model of the way that data
00:24 - types and objects and variables operate
00:26 - in java
00:29 - manipulatives are a really helpful way
00:32 - to help students kind of create a mental
00:34 - model of the way that variables and
00:37 - objects and different data types
00:40 - function
00:41 - so they can kind of visualize and
00:43 - manipulate physically manipulate with
00:45 - how variables are storing information
00:48 - and kind of that transfer of data back
00:51 - and forth between different variables so
00:53 - in this particular code segment just to
00:55 - kind of demonstrate different ways these
00:57 - manipulatives can be used
00:59 - here we have this code segment where we
01:01 - are creating a couple variables
01:04 - so we have
01:06 - a double
01:08 - for example
01:09 - and you could use envelopes instead of
01:13 - cutting out these manipulatives um that
01:15 - would do the same job you could just
01:17 - kind of get different sized envelopes so
01:19 - that way you can still model
01:20 - the size difference um with the
01:22 - different variables
01:24 - but we do this with the the
01:26 - manipulatives um i have this double
01:29 - variable so
01:31 - uh and then it's gonna store the value
01:34 - 2.5 so i'm going to take a scrap piece
01:36 - of paper
01:38 - and write 250
01:41 - and this is going to get stored
01:44 - inside of our variable so i'm going to
01:46 - put this inside of here and close it up
01:54 - and i'm giving this variable the name
01:57 - price
01:59 - so i'm going to use a little sticky note
02:01 - here
02:04 - called price
02:08 - so
02:10 - price
02:11 - is now a double variable
02:14 - and inside of it
02:16 - we have the value 250.
02:19 - um on the next line of code i have um an
02:23 - int variable
02:24 - i'm going to take this int
02:26 - and this is going to store
02:28 - the value 10.
02:31 - i need to get another scrap piece of
02:32 - paper
02:33 - write the value 10.
02:36 - put this
02:37 - inside
02:43 - of our end
02:48 - close that up so now i have an n
02:50 - variable
02:51 - and i want it to be called
02:54 - first
03:00 - all right
03:01 - then on our next line i see that now i'm
03:04 - setting price equal to whatever the
03:06 - value is of price plus 0.5
03:10 - so
03:11 - i don't know where the value is i'm
03:12 - going to have to take it out
03:16 - to get this value and i see it's 2.5
03:20 - so i need to add 0.5 to it so that's
03:22 - going to be 3. now once it comes out of
03:25 - the variable it's gone in memory
03:28 - so i end up throwing that off to the
03:30 - side and i'm putting the new value of 3
03:35 - and storing that inside
03:37 - the variable so that is the equals part
03:41 - of it to store it back inside the
03:44 - variable
03:46 - then on my next line i see that i'm
03:48 - creating another variable called second
03:51 - which is also an end
03:54 - and it's going to get the value that's
03:56 - in first well i don't know what's in
03:58 - first i have to take a peek
04:00 - i have 10.
04:02 - so
04:03 - close that back up
04:06 - get a
04:07 - another scrap of paper and copy
04:10 - that value down
04:12 - so that way i can put it inside
04:16 - my other end variable
04:19 - and
04:20 - call this
04:22 - second
04:26 - so
04:28 - i have
04:29 - double price
04:31 - and first is int second so this is also
04:34 - helpful like if you're trying to
04:36 - help students understand
04:38 - swapping values and variables for
04:40 - example maybe i need to
04:42 - swap the values that's in second and
04:44 - first
04:45 - but again reinforcing the fact that once
04:47 - i take the value out it's gone in memory
04:49 - so i can't just flip it over i'd have to
04:51 - create another variable to copy the
04:53 - value and then switch it over so
04:56 - these are helpful to kind of model
04:58 - different types of
05:00 - algorithms and problems that students
05:01 - can solve
05:03 - um
05:04 - we can also
05:08 - setting these off to the side um
05:10 - represent classes
05:13 - um so this other manipulative this
05:15 - little foldable
05:17 - folds in half of the class name on the
05:19 - outside
05:21 - and what i have here is a class that i'm
05:24 - going to this is going to represent a
05:26 - blueprint and i'm going to represent
05:28 - this shape
05:29 - class
05:30 - on my blueprint
05:32 - so i have shape is the name of the class
05:36 - i have some instance variables that are
05:38 - private so since they're private they're
05:40 - going to go on the inside
05:42 - um so that way they can't be accessed or
05:45 - seen from outside
05:48 - you can only access and see the things
05:50 - that are public or on the outside
05:52 - if it's private it goes on the inside
05:55 - so i have
05:57 - um
05:59 - int
06:00 - sites
06:03 - private
06:04 - boolean
06:07 - is filled
06:10 - so those are there for my um instance
06:12 - variables that represent my state
06:15 - then i see i have a constructor
06:18 - and i know i see that it's public so
06:20 - since it's public and since it's a
06:21 - constructor and i want other classes to
06:23 - be able to access and use it to create
06:25 - my object um i'm going to write that on
06:28 - the outside and i see i have state a
06:30 - state section on the other side i have
06:32 - behavior for methods
06:35 - and i'm going to write this constructor
06:37 - here
06:39 - shape
06:41 - and
06:42 - new sides
06:46 - boolean new
06:49 - filled
06:52 - and according to this we set our sides
06:55 - variable equal to whatever new size is
06:59 - and our is filled
07:03 - to
07:03 - [Music]
07:05 - whatever new field is our parameters
07:12 - so
07:13 - now i have my blueprint so i can create
07:16 - my object using my blueprint
07:19 - so now and i see in my console my main
07:23 - method i'm creating a new shape
07:25 - called
07:26 - triangle
07:28 - that's going to pass the values three
07:30 - and false to that constructor
07:33 - so first i need to create that variable
07:36 - shape triangle and since it's an object
07:39 - i need to use a reference variable
07:42 - and declare the type just like i did
07:45 - with the double and ends so this is
07:47 - going to be a type
07:49 - shape
07:52 - and
07:54 - it's going to be a
07:56 - the variable name is going to be
07:57 - triangle
08:04 - all right
08:06 - so now i have to create the shape this
08:08 - is i'm calling
08:10 - new shape with three falls
08:12 - so
08:14 - this
08:14 - larger
08:16 - shape
08:17 - um blank shape at that is going to
08:19 - represent objects so i can decide what
08:23 - kind of
08:25 - data is going to get stored in here so
08:26 - in this case it's going to be a shape
08:28 - object
08:30 - and every object that we create gets its
08:32 - own
08:33 - uh copy of the instance variables so i
08:36 - need to use my blueprint
08:39 - so i know how i'm supposed to create
08:41 - this object so i see that the three
08:44 - corresponds with the first
08:47 - parameter new sides so sides is going to
08:50 - equal three
08:52 - so that is an int
08:55 - so i'm going to get an end variable
09:01 - i've got my end here
09:03 - and it's going to get the value
09:06 - three
09:10 - so i'm putting three
09:12 - inside of an end
09:15 - and this is supposed to be for my
09:19 - sides
09:28 - now that i have that i'm gonna set this
09:29 - off to the side for just a second
09:31 - and then the false corresponds with the
09:34 - second value that i have or the second
09:36 - parameter that i have new filled which
09:39 - is used to set my is filled instance
09:41 - variable
09:42 - and according to that
09:45 - according to my code segment it's gonna
09:46 - get set to false so i have this little
09:48 - true false
09:49 - thing right here
09:50 - i'm gonna fold it in half
09:52 - and just to make sure we don't get
09:54 - confused
09:56 - i'm gonna
09:57 - fold this side over
09:59 - just to make sure that i can't see the
10:00 - other side
10:02 - so i have false and this is going to get
10:05 - set for
10:06 - our new is filled
10:10 - instance variable
10:15 - it is filled
10:17 - and both of those will go inside my
10:20 - shape because those are the instance
10:22 - variables
10:23 - that a shape object gets
10:25 - and every time i create a shape object
10:29 - it gets its own copy
10:32 - of these instance variables
10:35 - so i've created my shape object but now
10:38 - my shape variable triangle needs to
10:40 - point to that shape object so that equal
10:43 - sign part
10:44 - i'm just going to use some tape
10:49 - and
10:50 - i have a rubber band here that's cut in
10:51 - half you could also use
10:53 - a piece of yarn
10:55 - and
10:56 - tape one end to the shape object
11:00 - and the other end
11:02 - to my reference variable
11:05 - that is storing or is pointing to my
11:09 - shape object
11:10 - so that is how we could demonstrate how
11:13 - objects are stored and worked with with
11:16 - um in java and also could be used to
11:18 - kind of talk about like well now that we
11:20 - have these instance variables inside of
11:22 - the shape object how do i get to those
11:24 - values so it brings up the conversation
11:26 - about accessory mutator methods later on
11:29 - as well as even
11:32 - different ways like we can create
11:33 - different objects that can point to our
11:35 - different reference variables that can
11:37 - point to new objects or even the same
11:39 - objects that have already been created