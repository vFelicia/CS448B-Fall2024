00:04 - hi my name is jamila and i write
00:07 - curriculumprocode.org
00:09 - in this video i'm going to demo the
00:12 - manipulatives that are used in the unit
00:14 - 2 lesson 3
00:16 - attributes lesson
00:19 - for these manipulatives we have a
00:23 - main method
00:24 - which we see off to the side
00:26 - we have a
00:28 - class blueprint that we're going to use
00:31 - um this just gets folded in half
00:36 - with
00:37 - the class name
00:39 - on the outside
00:43 - so
00:44 - and then state and paper on the inside
00:47 - we also have
00:49 - a
00:50 - double
00:52 - uh an empty
00:55 - little shape here to represent an object
00:59 - we have an ent
01:01 - we have
01:04 - these little type
01:05 - these will represent our reference
01:07 - variables
01:09 - we have a true false thing that will
01:12 - fold in half to do true or false
01:16 - i also have some scrap pieces of paper
01:20 - some sticky notes
01:22 - some tape
01:24 - and you can use either yarn or i just
01:28 - cut some rubber bands in half
01:30 - either is fine
01:32 - even in addition to that
01:34 - you could even use envelopes
01:37 - instead of using these shapes and just
01:39 - making sure that they're all different
01:40 - sized
01:42 - to represent these instead of using
01:45 - these cutouts
01:47 - so either is fine either works
01:50 - so in this particular lesson we are
01:55 - modeling
01:56 - creating a class
01:58 - so
01:59 - we're
02:00 - modeling creating a profile class a
02:02 - social media profile
02:05 - and
02:05 - in this lesson you can either walk
02:07 - through it in the slides you could demo
02:09 - it with the actual manipulatives
02:12 - for the class or you could have the
02:15 - students follow along with you
02:17 - doing it with their set of manipulatives
02:19 - so we're going to design a profile class
02:22 - that's going to represent a user's
02:23 - profile on social media service
02:26 - for this particular class we're going to
02:27 - have attributes for the number of
02:29 - friends
02:30 - which will be represented as an int
02:32 - and whether or not the profile is
02:34 - private which will be represented as a
02:36 - boolean
02:38 - we also are going to add behaviors for
02:41 - adding a friend removing a friend and
02:43 - making their profile public
02:46 - so these will be the methods that will
02:47 - list
02:49 - so we start off by
02:52 - of course representing or writing in the
02:56 - instance variables that's going to
02:57 - represent these attributes so on the
02:59 - inside of our class blueprint
03:03 - we have state for private variables it's
03:06 - private and it's represented because of
03:08 - the fact that it's on the inside of this
03:10 - foldable so
03:11 - you know anything that's public is on
03:13 - the outside
03:15 - and anything that's private is on the
03:16 - inside so this any information that's on
03:19 - the inside of this is hidden from other
03:21 - classes
03:23 - that will try to access this information
03:24 - so our instance variables are private so
03:26 - we're going to list them
03:28 - in here
03:29 - so we'll have
03:31 - private
03:33 - and
03:35 - numb
03:36 - friends
03:39 - and private
03:41 - bullying
03:44 - is
03:45 - private
03:47 - so again our num friends attribute
03:49 - represents um the number of friends that
03:51 - our profile has and our is private
03:54 - attribute represents whether or not the
03:56 - profile
03:57 - on our social media platform is private
04:01 - um so again other classes can't see
04:04 - these instance variables
04:07 - a class can also have methods that can't
04:08 - be accessed from outside the class or
04:10 - private methods but we're not covering
04:13 - that in this particular lesson we'll be
04:14 - covering that in another lesson so it is
04:17 - uh helpful to point out to students that
04:20 - that behaviors can also be private and
04:22 - we'll learn more about those later
04:25 - uh on the outside we'll specify our
04:27 - class name
04:29 - and any
04:31 - variables or constructors that need to
04:32 - be accessed from outside of the profile
04:34 - class so we'll start off by first
04:36 - writing
04:38 - profile
04:40 - and then we'll fill in our constructor
04:42 - so our constructor is supposed to set
04:44 - the initial state of our variables so in
04:47 - this case we want to set initial values
04:50 - for our attributes so
04:52 - um we'll write our constructor
04:54 - public profile
04:58 - and then
05:00 - we'll say that when we create a new
05:02 - profile we start off with zero friends
05:05 - and when we create a new profile
05:09 - our profile page
05:12 - is not private so we'll set is private
05:14 - to false
05:16 - so this is on the outside of our
05:18 - foldable so that means it can be
05:20 - accessed from outside um the profile
05:23 - class and that's
05:25 - important because if we need to create
05:27 - call the constructor from our main that
05:28 - we'll do in a minute it needs to be
05:30 - visible
05:31 - outside
05:34 - so
05:34 - then on the other side
05:37 - we also see we have
05:39 - public methods or behaviors so we can
05:41 - write any methods that need to be
05:43 - accessed from outside the profile class
05:45 - so earlier we named that we wanted to
05:47 - have behaviors to add a friend
05:53 - uh remove friend
05:58 - and
05:59 - make public
06:03 - so these methods
06:05 - are on the outside of our foldable again
06:07 - so we can make sure that we can access
06:10 - it
06:11 - from other classes
06:13 - and be able to use these particular
06:15 - behaviors
06:17 - now when we go to instantiate objects in
06:20 - main
06:22 - we have to start off by first declaring
06:23 - a variable with the type of object that
06:25 - we want to create
06:27 - so
06:28 - that's where this comes in so this is
06:30 - our reference variable
06:32 - so we want it to be of type
06:35 - profile
06:39 - and
06:40 - just like any other
06:42 - variable
06:44 - we want to
06:46 - give our variables a name so
06:49 - we'll name
06:50 - our variable
06:52 - my profile
06:59 - so i have a
07:01 - my profile variable
07:03 - of type profile
07:05 - and that way this is going to store that
07:08 - pointer to the object that we create
07:12 - so this is going to be the same as
07:14 - us just writing profile my profile this
07:17 - is just declaring that we have a
07:19 - variable called my profile that's of
07:21 - type profile
07:23 - now when we go to instantiate
07:26 - an object
07:27 - every object is going to get its own
07:29 - copy of the instance variables with the
07:31 - actual values that we're creating so
07:33 - that's where this is going to come in
07:35 - this is our blank object that's why it
07:37 - has nothing on it
07:38 - um and it's going to store the instance
07:41 - variables on the inside we're going to
07:42 - fold that up to show that again you
07:45 - could use like a larger envelope
07:47 - and then that way you could put the the
07:49 - values and variables on the inside of
07:51 - that
07:52 - so
07:53 - when we go to create
07:55 - our
07:57 - object we have to follow according to
07:59 - what the constructor said to do
08:01 - so the constructor said that we're going
08:03 - to create
08:04 - num friends
08:06 - um
08:07 - with zero a value of zero so that's and
08:10 - this is an int instance variable
08:13 - so we can
08:14 - get an end
08:17 - then we'll put
08:18 - the value zero
08:20 - on
08:21 - a scrap piece of paper
08:28 - and then
08:29 - we'll put that
08:31 - inside our end variable so
08:35 - this
08:36 - folds up inside of here because it's
08:39 - going to store
08:40 - this value
08:41 - again you can do this with envelopes so
08:44 - that way you could just slip it inside
08:46 - of there so we have our end
08:49 - and this is supposed to represent our uh
08:53 - for our num friends
08:56 - instance variable
09:03 - so
09:04 - i've got that
09:06 - so this is going to go inside of here in
09:08 - a moment so i'm just going to set it off
09:10 - to the side here then i need to set is
09:12 - private
09:13 - to false
09:15 - so that means that this is a boolean
09:16 - value
09:18 - so i'm going to take my little boolean
09:19 - flipper here
09:21 - and fold it to where false is on the
09:24 - outside just to make sure we don't get
09:26 - confused i'm going to fold
09:28 - the other part so that way i can't
09:30 - really see the truth
09:33 - and
09:34 - now i have false now this is supposed to
09:37 - be for my is private instance variable
09:41 - so
09:43 - we'll set is private
09:48 - so that way this object gets it is
09:51 - private instance variable
09:54 - and all of that
09:56 - will go inside of our object
09:59 - so
10:03 - we'll fold that up
10:05 - inside of our object
10:13 - okay so the object
10:16 - has its own copy inside of this
10:19 - um
10:20 - little envelope thing
10:22 - um of these instance variables and this
10:25 - is now a
10:27 - profile
10:28 - object
10:31 - so
10:32 - and i want
10:34 - my my profile variable that's of type
10:37 - profile to point to this profile
10:40 - object
10:41 - so i can create or simulate that
10:45 - pointing
10:46 - nature
10:48 - using
10:50 - tape
10:51 - and yarn or
10:54 - oops
10:57 - whatever you choose
11:02 - so
11:04 - now
11:06 - my my profile
11:07 - variable
11:09 - points to
11:10 - this profile
11:11 - object which has its own copies of those
11:14 - instance variables so if i were to
11:16 - create another profile then i could
11:18 - create another variable that then
11:21 - contains its own values and have it
11:23 - point to it i could even
11:26 - create
11:27 - another variable
11:28 - that also points to the same object
11:32 - but that gets into
11:34 - some things that we'll be learning in
11:35 - another lesson so like if i
11:37 - call this another
11:40 - and this is profile
11:43 - i can have
11:46 - another variable and then i would go
11:48 - through the same process of creating
11:49 - another profile object
11:51 - or i could even just demonstrate the
11:53 - fact that i could have this profile also
11:56 - point to that same one or i could create
11:58 - another one
11:59 - that it points to
12:02 - so now this particular line my my
12:06 - profile reference variable
12:08 - um of type profile points to
12:11 - and calls that profile constructor which
12:14 - is why that we just put all those um
12:16 - envelopes on the inside and it points to
12:19 - that profile object
12:27 - you