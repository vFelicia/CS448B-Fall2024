00:00 - [music]
00:05 - Chris: One of the most important concepts in computer science
00:07 - is how to define new commands, how to add your own words to a computer language.
00:13 - Most computer languages have only about 100 words, or commands,
00:18 - and really the art and magic is in defining your own new words out of these building blocks.
00:23 - We do this all the time in sports.
00:25 - For example, in basketball, you start by learning how to dribble,
00:29 - how to do a layup, how to rebound.
00:32 - Once you've learned these really basic moves, you learn new moves
00:35 - and put together these building blocks, like a pick and roll or a give and go.
00:39 - And you can then go from there to do more complex plays.
00:43 - And once you learn that play, and give it a name,
00:45 - everybody on the team knows how to do it.
00:48 - Similarly, once you've taught a computer how to do an action once
00:52 - using these sequence of commands, you can make up your own name for that action.
00:56 - So it's easy to repeat it later.
00:59 - When you define your own command and give it a name, that's called a function.
01:06 - Jasmine: There are two steps to using functions in JavaScript.
01:09 - First, we need to define our function and then we need to call it.
01:14 - When you define a new function, you are simply giving a single name
01:18 - to a set of actions you want the computer to perform.
01:21 - To call a function, you just type the name of the function followed by a parentheses.
01:26 - This is actually telling the computer to perform or execute
01:30 - the set of actions you gave a name to.
01:33 - You've already been calling functions
01:35 - when you use the turtle commands.
01:37 - The only difference is that someone else defined them for you.
01:41 - Notice in AppLab, the toolbox now has a tab called Functions.
01:46 - There are two blocks in there, one for defining a new function
01:49 - and one for calling a function.
01:52 - Let's make a function that moves the turtle forward twice.
01:55 - We'll call it move twice.
01:58 - Drag a new function block out and type in the name you want to give the function.
02:03 - Now, add the code that you want to run when the function is called.
02:07 - We'll add two move forward commands and then run our program.
02:13 - Hey! We defined a function, but nothing happened!
02:17 - The reason is, we forgot step 2.
02:19 - We need to call the function.
02:22 - To call the function, we drag out the other block in the functions tab
02:25 - and add in the name of our function.
02:28 - Now that we have both defined and called our function,
02:31 - the code will actually run and the turtle will move.
02:35 - Notice that if I also call the function before its definition, it still works.
02:39 - It just calls the function twice.
02:43 - Defining a function simply gives a name to a block of code without actually running it.
02:48 - The definition can actually be anywhere in your program.
02:52 - The rest of the code will execute line by line, just as before.
02:57 - Calling a function executes the lines of code inside the function,
03:01 - and afterwards, the program returns to where it left off when the function call was made.
03:07 - The fact that the function definition can be placed anywhere
03:09 - means that your code can get messy and really hard to read.
03:13 - So we typically put our function definitions at the end of our programs,
03:18 - to help keep things organized.
03:20 - In JavaScript, we call them functions. But the generic term is procedure.
03:25 - All programming languages have a way to define and use new procedures
03:29 - and it's just another example of how computer scientists
03:33 - use abstraction to solve problems.
03:36 - Once you have written a procedural function that you know works as intended,
03:40 - you can call the function as often as you wish,
03:42 - without worrying about the details or problems you had to solve to get it working.
03:48 - And in defining a function to perform a certain task,
03:51 - you've essentially increased the capabilities of the programming language
03:54 - and can now use that function on its own
03:57 - or as a part of even more complex actions.
04:01 - You can also see why it's important to give your function
04:03 - a meaningful and descriptive name.
04:05 - If you call this something like "do stuff",
04:08 - it would be unclear what the function was supposed to do
04:12 - and make it hard to use in your own code.
04:15 - By referencing a large and complex block of code by a single name,
04:19 - it makes it much easier to understand what a program is doing by reading the code
04:24 - and also easier to locate and fix problems or errors.