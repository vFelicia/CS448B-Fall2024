00:00 - python decorator is a function that
00:01 - takes in another function
00:03 - adds some functionality to it and then
00:05 - returns it in this video
00:06 - you will learn how to create decorators
00:08 - and why you should use them
00:14 - but before we learn about decorators we
00:16 - must first understand a few basic things
00:18 - in python
00:18 - we must be comfortable with the fact
00:20 - that everything in python is an
00:22 - object including classes as well as
00:24 - functions
00:25 - variables are simply identifiers bound
00:28 - to these objects
00:29 - if you want to learn more we already
00:30 - have a video on this topic
00:32 - you can refer to that video since
00:34 - functions are also objects
00:35 - we can also pass functions as arguments
00:38 - to other functions
00:39 - let me demonstrate this to you i'll go
00:41 - to my code editor
00:42 - and here i'll say def inc
00:45 - x so i'm defining a function that
00:48 - returns
00:49 - x plus 1 or whatever is passed in plus 1
00:52 - now i'll create another function which
00:54 - takes a function as an argument
00:56 - so here i'll say def operate
01:00 - and func x
01:03 - this will save result equals
01:06 - func x and then return the result
01:11 - here the operate function takes two
01:13 - arguments
01:14 - the first is a function and the second
01:17 - is a regular argument
01:18 - x let me call operate with the ink
01:21 - function as the first
01:22 - argument so here i'll say operate
01:26 - ink and i'll pass 3 as the parameter
01:30 - now let me print this so here i'll say
01:33 - print
01:35 - and when i press run then you can see
01:38 - that 4 is printed
01:40 - here's how this code works first we have
01:43 - called the operate function
01:45 - with the ink function as the first
01:47 - argument
01:48 - and 3 as the second argument this
01:51 - ink function is then assigned to the
01:53 - func parameter
01:55 - inside the operate function
01:58 - then we have called the func function
02:00 - and assigned the return value of this
02:02 - func
02:03 - to the result variable and in the next
02:05 - line we have returned whatever result
02:07 - was stored in the result variable
02:10 - in this case since we have passed 3 and
02:13 - inc returns x plus 1 or 3 plus 1
02:17 - this whole function returns 4 and that
02:20 - is what gets printed to the screen
02:22 - the main takeaway from this example is
02:24 - that a function can take another
02:26 - function as an argument
02:28 - in python we can also define a function
02:30 - inside a function
02:31 - let me show you an example so here let
02:34 - me remove this old code and here
02:36 - i'll say def print underscore
02:39 - message and then let me pass the message
02:42 - as the
02:42 - argument inside this function i'll say
02:46 - greeting equals hello and then let me
02:50 - define another function inside
02:52 - so here i'll say def printer
02:55 - now this does not need any arguments and
02:57 - here i'll say print
02:59 - greeting and then the message now let me
03:03 - call printer from inside the print
03:05 - underscore msg
03:06 - function so here i'll say printer
03:09 - and then from outside the function i can
03:12 - say print
03:12 - underscore msg python
03:16 - is awesome here i have defined
03:20 - an inner printer function inside the
03:22 - scope of the print underscore msc
03:24 - function
03:25 - here's how this code works first we
03:28 - called the print underscore msg function
03:30 - with python is awesome as the parameter
03:34 - inside the print under msg function we
03:37 - have called the inner printer function
03:39 - which prints the greeting and message
03:41 - variables
03:43 - let me run this code and you can see
03:47 - that hello which was the value of the
03:50 - greeting variable
03:51 - and python is awesome which was sent as
03:53 - a parameter to print underscore message
03:55 - are both printed
03:58 - the main takeaway from this example is
04:00 - that we can define a function inside
04:02 - another function
04:04 - another thing we need to understand
04:05 - about functions is that they can also
04:07 - return
04:07 - a function as a value now let me modify
04:10 - this code a bit
04:11 - instead of calling the printer function
04:13 - from inside the print underscore msg
04:15 - function
04:15 - i will return the printer function
04:17 - itself we already know that if there are
04:19 - parentheses after a function
04:21 - that function gets called in this case i
04:24 - don't want to call the function but
04:25 - return the function itself
04:27 - so let me remove this parenthesis and
04:29 - here i'll say return
04:31 - printer now i'll assign the return value
04:33 - to a variable named
04:34 - funk now outside the print message
04:37 - function here i can say
04:38 - func equals print underscore
04:42 - msg python is
04:46 - awesome let me run the func function so
04:49 - fu and c
04:50 - and parenthesis let me run this code
04:55 - and you can see i get the same output as
04:58 - before
04:58 - but do you notice something weird here
05:01 - we can see that the outer function
05:03 - print underscore msg is done executing
05:06 - on this line
05:08 - this should mean that all its local
05:10 - scope variables are destroyed after it
05:12 - finishes executing
05:14 - however when we call the func function
05:17 - we still have access to message and
05:19 - greeting variables
05:20 - in the inner printer function such a
05:23 - function
05:24 - is called a closure a closure is simply
05:26 - an inner function that remembers the
05:28 - values and variables
05:30 - in its enclosing scope even if the outer
05:32 - function is done executing
05:34 - python decorators make extensive use of
05:36 - closures
05:37 - now we are finally ready to learn about
05:39 - python decorators
05:42 - a python decorator is a function that
05:44 - takes in a function
05:45 - adds some functionality to it and
05:47 - returns the original function
05:49 - let's try to build a decorator function
05:51 - that prints out some information
05:53 - before and after executing another
05:55 - function i'll go to my code editor
05:57 - and first define a normal function
05:59 - called printer so let me remove this old
06:01 - code
06:02 - and here i'll say def printer
06:06 - this will just print hello
06:09 - world now i'll define a decorator
06:12 - function that takes in a function
06:14 - so outside this i'll say def display
06:18 - underscore info and then i'll pass func
06:21 - or function as a argument now i'll add
06:24 - an inner function that prints out some
06:26 - information
06:27 - before and after executing the function
06:30 - so here i'll say
06:31 - def inner now i'll use the underscore
06:35 - underscore name or dunder name
06:37 - attribute of the function to access its
06:39 - name
06:40 - so here i'll say print
06:43 - executing and i can say funk dot
06:47 - underscore underscore name underscore
06:48 - underscore and then i can say
06:50 - function then i'll call this function so
06:54 - here i'll say
06:54 - func and after the function is executed
06:58 - i can say finished executing so here
07:01 - print
07:02 - finished execution
07:06 - now inside this outer display underscore
07:08 - info function
07:09 - i'll return the inner function so here i
07:12 - can say return
07:14 - inner now let me run the printer
07:16 - function normally first
07:18 - so i'll go outside and i'll say printer
07:21 - let me run this
07:22 - and you can see that hello world is
07:24 - printed nothing fancy
07:26 - now here comes the magic i'll use the
07:29 - decorator function to run the same
07:31 - printer function this time
07:32 - let me remove this code now i'll call
07:34 - the display info function with the
07:36 - printer function as the argument
07:38 - and store the returned value so i can
07:40 - say
07:41 - decorated underscore func equals
07:45 - display underscore info and this will
07:48 - take in the printer function as an
07:50 - argument
07:51 - now let me call this decorated
07:52 - underscore func function
07:54 - so i'll say decorated underscore func
07:56 - with parenthesis
07:58 - and when i run this code
08:01 - you can see that executing printf
08:03 - function and finished execution
08:05 - are printed before and after our hello
08:07 - world
08:08 - here's how this code works when this
08:10 - line of code is executed
08:12 - the display underscore info decorator
08:14 - function gets called
08:16 - with the printer function which gets
08:19 - converted into the func
08:20 - argument inside this display underscore
08:23 - info function
08:25 - there is an inner function this inner
08:27 - function
08:28 - prints out executing the funct name
08:30 - function
08:31 - calls the func parameter or calls the
08:33 - function that is passed as a parameter
08:36 - and then prints finished execution
08:39 - as you can see the decorator function
08:41 - acts as a wrapper
08:43 - it allowed us to add some functionality
08:45 - to the past function
08:46 - without changing the code of the
08:47 - original function in python
08:49 - we have a much more elegant way of
08:52 - writing these lines
08:54 - implicitly using the add symbol let me
08:56 - show you how
08:57 - i'll first remove these lines and
08:59 - rearrange these functions
09:00 - so let me remove these i'll copy this
09:03 - code
09:04 - and put this before printer you will see
09:06 - why i am doing this
09:08 - soon now comes the magic
09:11 - instead of calling the display info
09:13 - function before the printer function
09:15 - i'll say at display underscore
09:18 - info this code is equivalent to our
09:22 - previous code
09:23 - as you can see adding the add symbol on
09:25 - top of a function definition
09:27 - means that we are passing that function
09:29 - as an argument to the decorator function
09:31 - and reassigning the function to the
09:33 - return function
09:34 - we passed the printer function to
09:36 - display underscore info decorator
09:38 - and reassign the printer function to the
09:41 - returned inner function
09:43 - as you can see adding the ad symbol is a
09:46 - sweeter way to do the same thing
09:48 - it also avoids creating one more extra
09:50 - variable
09:51 - we pass the printer function to the
09:53 - display info decorator
09:56 - using the add symbol makes our code much
09:58 - more cleaner and we can now call the
10:00 - printer function directly without
10:01 - assigning the decorated function
10:03 - to another variable so in my code editor
10:06 - i'll directly call the printer function
10:08 - this time
10:09 - i can just say printer and when i press
10:12 - run
10:14 - then you can see that i got the same
10:16 - output as before
10:18 - while writing a lot lesser code and also
10:20 - making it much sweeter or you know much
10:22 - more synthetically pleasing to see
10:27 - by the way if you're finding this video
10:28 - useful a sub to the channel would be
10:30 - awesome
10:31 - before moving to the next section of the
10:33 - video the programmers team has created
10:35 - an app that allows you to learn python
10:36 - from your phone
10:37 - the app contains bit size lessons that
10:39 - are easier to understand
10:40 - a built-in interpreter so that you can
10:42 - run python on your phone quizzes
10:44 - and many more features the app is
10:46 - available on both ios and android
10:47 - the links are in the video description
10:52 - the decorator we created in the previous
10:54 - section was simple and it only worked
10:56 - with functions that did not have any
10:58 - parameters
10:59 - now let's discuss how we can create
11:00 - decorators for functions with parameters
11:03 - suppose we have a simple divide function
11:05 - so i'll go to my code editor
11:07 - remove this old code and say def
11:10 - divide a comma b so it's a function with
11:13 - two parameters
11:14 - and it says return a divided by b
11:18 - at this point we already know this code
11:20 - will throw an exception if we pass the
11:22 - value for b
11:23 - as zero now let's make a decorator
11:25 - function called smart underscore divide
11:27 - to prevent this
11:28 - so on top of this function i'll say diff
11:32 - smart underscore divide now smart
11:34 - underscore divide will take a function
11:37 - as an argument since the inner function
11:39 - will replace our original function
11:41 - the parameters should be added to the
11:43 - inner function
11:45 - so here i'll say diff inner
11:48 - a comma b i'll print out some
11:52 - information before dividing
11:53 - so here i'll say print dividing
12:00 - a by
12:03 - b i will then check if b is 0
12:06 - and if so i'll print a message and use
12:09 - return to stop for the execution
12:11 - so here i can say if b equals equals
12:15 - 0 print cannot
12:19 - divide by 0
12:22 - and then i can say return
12:25 - else i just return the function so i'll
12:27 - say return
12:28 - func a comma b and then
12:32 - on outside i can say return inner
12:36 - now let's add this decorator to our
12:38 - original function
12:39 - so here you must have already guessed
12:40 - what i'm going to do now i'll say add
12:43 - smart underscore divide
12:46 - now let me call the divide function so
12:48 - here i'll say
12:50 - divide first i'll call it with nonzero
12:52 - arguments and then i'll call it again
12:54 - with the zero denominator
12:56 - so divide 15 by 3
12:59 - let me put this in a variable so i'll
13:02 - say value 1
13:03 - equals divide 15 3 and let me print
13:07 - value 1 similarly value 2
13:10 - equals divide and this time i'll say
13:13 - divide 5 by 0
13:15 - let me put a space here and here i'll
13:18 - say print
13:21 - value 2 let me run this code
13:26 - as you can see in the first call the
13:28 - denominator was a non-zero element
13:30 - so the value after division is returned
13:32 - and it gets printed to the screen
13:34 - in the second call the division was
13:36 - halted and no value was returned
13:38 - that is why none gets printed here
13:43 - in python a function can be decorated
13:45 - multiple times
13:46 - with different or the same decorator let
13:49 - me show you what i mean
13:50 - here i have a simple printer function
13:53 - that prints whatever message
13:54 - is sent to it as a parameter i also have
13:57 - two decorator function
13:59 - star and percent these functions print a
14:02 - series of star and percentage symbols
14:04 - before and after executing the function
14:07 - let's now decorate the printer function
14:09 - with the star and percent decorators
14:11 - and call the function so here i'll say
14:13 - at
14:14 - percent and similarly i can go to the
14:16 - next line
14:17 - and i can say star let me call this
14:20 - printer function
14:21 - so i can say printer decorators
14:25 - are wonderful let me run this code
14:32 - as you can see these decorators are
14:34 - chained and they wrap the original
14:36 - function
14:37 - here we have first added the star
14:39 - decorator and then the percent decorator
14:42 - so the star function wraps the percent
14:45 - function
14:45 - and the percent function wraps the
14:47 - printer function
14:49 - at this point we have covered the basics
14:51 - of python decorators
14:52 - if you want to learn more about
14:53 - decorators you can check our article on
14:55 - our website programming.com
14:57 - the link will be in the video
14:58 - description that's it for this video
15:00 - if you want to revise these concepts you
15:02 - can find all these programs in our
15:03 - github repository
15:04 - i'll also put this link in the video
15:06 - description and if you like this video
15:08 - hit that like button and subscribe to
15:09 - our channel and i'll see you in the next
15:11 - one happy programming