00:00 - hey guys this is vimpam from programmies
00:02 - and welcome back to this series on c
00:04 - programming in this video we will learn
00:06 - about dynamic memory allocation in c
00:09 - programming more specifically we will
00:11 - learn to allocate and destroy memory
00:13 - addresses while running the c program so
00:16 - let's get started
00:20 - in c programming dynamic memory
00:22 - allocation allow us to allocate memory
00:25 - dynamically that is after we run the
00:27 - program before we learn about dynamic
00:29 - memory allocation let's first revise the
00:32 - concept of pointers here we have created
00:34 - a pointer variable ptr this pointer
00:37 - variable stores the memory addresses of
00:39 - the var variable
00:41 - in the print statement we have used the
00:43 - pointer variable to access the value
00:45 - pointed by it
00:46 - when i run this code
00:48 - i'll get the output 32
00:51 - we have already discussed pointers in
00:53 - our earlier videos if you are confused
00:55 - how this program works i highly
00:57 - recommend you to watch earlier videos
00:59 - you can find the link somewhere on the
01:01 - screen now let's get back to our video c
01:04 - provides three major functions to
01:05 - perform dynamic memory allocation malloc
01:08 - reallock and free we will now learn
01:11 - about them one by one
01:14 - the malloc function stands for memory
01:16 - allocation is used to reserve a block of
01:18 - memory of the specified size for example
01:21 - suppose we need to allocate memory to
01:23 - store n variables of double type
01:25 - variable then we can use the malloc
01:27 - function now let's see how we can use
01:30 - the malloc function
01:32 - i want to allocate memory for n
01:34 - variables so let me create the n
01:36 - variable int
01:38 - and
01:39 - now let's create a pointer variable to
01:42 - store the address of allocated memory
01:44 - int
01:46 - asterix
01:47 - ptr
01:50 - now let's use the malloc function i'll
01:52 - write here
01:53 - ptr
01:54 - equals to parenthesis int asterisk
01:59 - malloc
02:00 - and
02:02 - into
02:04 - sizeof
02:05 - int
02:09 - here and into size of int is the memory
02:11 - required to store n number of integer
02:13 - values suppose the value of n is hundred
02:17 - so let's change this to n equals to
02:20 - hundred
02:21 - now we know the size of int is usually 4
02:24 - bytes so total space needed to store 100
02:27 - double values is 100 into 4 that is 400
02:30 - bytes
02:31 - now malloc function allocates 400 bytes
02:34 - of memory
02:35 - finally we have used the typecasting so
02:38 - that the allocated memory is used to
02:40 - store integer type data
02:42 - here we have assigned the allocated
02:44 - memory to the ptr variable in this case
02:47 - the ptr variable stores the address of
02:50 - the first byte of the allocated memory
02:52 - and we can use the ptr variable to
02:54 - access the remaining bytes as well
02:57 - once the work of allocated memory is
03:00 - completed we use the free function to
03:02 - release the dynamically allocated memory
03:04 - here is the syntax to use the free
03:06 - function here the ptr is the pointer
03:08 - variable that stores the address of the
03:10 - memory allocated using malloc now that
03:12 - we know how malloc and free works let's
03:15 - use them together in a program but
03:17 - before that let's get some engagement in
03:20 - the video so that we can keep these
03:21 - types of content free for all users
03:24 - youtube really likes engagement on the
03:25 - video so leave a comment below press
03:27 - that like button and hit subscribe if
03:29 - you haven't already let's get the
03:31 - engagement score higher so that more
03:33 - people can discover and enjoy these
03:34 - courses
03:35 - here we have our code from our earlier
03:37 - program now let's complete this program
03:39 - first so i'll add here has include
03:45 - stdio.h
03:48 - and int
03:49 - main
03:51 - inside the curly braces
03:54 - return zero
03:58 - now i'll cut this and put it there
04:04 - and let's
04:05 - clean this up
04:08 - now it's ready okay
04:11 - so we have our complete code
04:13 - now first i'll change the value of n
04:16 - from hundred to four
04:18 - for simplicity now let's provide four
04:20 - input values to store in the allocated
04:22 - memory so
04:24 - i'll use
04:26 - printf so print f
04:30 - and here i'll write
04:32 - enter
04:33 - input
04:34 - values
04:42 - and i'll use for loop
04:46 - so end
04:48 - i is equals to 0
04:50 - i is less than
04:52 - n
04:54 - plus plus i
04:56 - and inside the curly braces i'll
05:00 - use scanf function
05:02 - and inside quotation percent d
05:05 - comma
05:06 - ptr
05:07 - plus
05:08 - i
05:10 - here we have allocated spaces for four
05:12 - element and ptr stores the address of
05:15 - the first element so we can treat ptr as
05:18 - an array
05:20 - and ptr plus i gives the ith element of
05:22 - the array which we have already
05:24 - discussed in the pointer and add a video
05:27 - now let's print the input values i'll
05:29 - use the print statement first to print
05:31 - the message input
05:33 - values
05:36 - and
05:38 - i'll use for loop again
05:41 - and i is equals to 0 i is less than
05:47 - n
05:48 - and plus plus i
05:50 - inside the for loop i'll print
05:54 - percent
05:55 - d
05:58 - and comma
06:01 - asterisk
06:02 - ptr
06:04 - plus i
06:06 - so asterisk parenthesis ptr plus i gives
06:10 - the value pointed by the ptr plus i
06:12 - pointer while working with malloc there
06:14 - might be situation where the memory
06:16 - allocation fails in such situation the
06:18 - malloc function returns null so let's
06:21 - create a condition to end the main
06:22 - function if the function cannot memory
06:25 - in our code i'll add if condition
06:29 - if
06:30 - pti
06:32 - equals to null then
06:36 - then we'll print
06:40 - memory
06:41 - memory cannot
06:43 - be allocated
06:48 - and
06:50 - return
06:52 - zero
06:54 - here if the malloc function returns null
06:56 - the condition becomes true and this line
06:59 - memory cannot be allocated will be
07:01 - printed and finally return 0 terminates
07:04 - the main function now finally let's use
07:07 - the free function to release the
07:09 - allocated memory so i'll add here
07:14 - free function
07:18 - now
07:19 - let's run this code
07:22 - i'll enter here 12 21
07:25 - 13
07:26 - and
07:28 - 9.
07:30 - as you can see we have allocated the
07:32 - memory using the malloc function
07:34 - by the way do you want to take your
07:36 - programming journey to the next level
07:38 - watching tutorials is fine but it has
07:40 - one limitation it's hard to learn and
07:42 - practice together at the same time lucky
07:44 - for you we have recently launched
07:46 - programmies pro that provides tutorials
07:49 - along with quizzes and challenges which
07:51 - will help you practice and test your
07:52 - learning in the real time also the
07:54 - course includes projects to give you an
07:56 - experience of how programming works in
07:58 - the real world and for our youtube
08:00 - subscriber we are giving 50 off on the
08:03 - yearly plan sign up by scanning this qr
08:06 - code or use the link in the video
08:07 - description to claim your discount
08:11 - in our previous example we have
08:13 - allocated 400 bytes of memory to store
08:15 - four integer values now suppose we need
08:18 - to store two more integer data in this
08:20 - case we use the realog function to
08:23 - change the size of dynamically allocated
08:26 - memory now let's see the syntax to use
08:29 - really function
08:30 - here six into size of int is the new
08:33 - size allocated using the real look
08:35 - function let's see an example now
08:37 - here i have the earlier code for
08:40 - simplicity i'll remove this section to
08:42 - take input values so i'll remove this
08:45 - and here i'll print the memory addresses
08:48 - directly
08:50 - so here i'll use printf inside quotation
08:53 - allocated
08:56 - memory
09:00 - and i'll use for loop
09:03 - for
09:04 - and inside for
09:06 - int i is equals to 0 i is less than
09:11 - n
09:12 - and
09:13 - plus plus i
09:15 - inside the curly braces
09:18 - inside the for loop i'll print the
09:20 - memory addresses
09:22 - so
09:23 - percent p
09:26 - comma
09:28 - ptr
09:29 - plus i
09:33 - now suppose i need two more memory
09:35 - spaces so i'll add a new value of n with
09:38 - value six
09:39 - so i'll add here n is equals to six
09:42 - then we will use realloc function to
09:45 - allocate two more spaces so here ptr is
09:48 - equals to reallock
09:51 - function
09:52 - and ptr
09:54 - comma
09:55 - and into
09:57 - size of
09:59 - int
10:02 - finally let's print the memory addresses
10:05 - of new allocated spaces so printf
10:09 - and newly allocated
10:13 - sorry
10:14 - allocated
10:16 - memory
10:18 - backslash n
10:22 - and
10:23 - we'll use for loop again
10:25 - and i is equals to zero i is less than
10:30 - n and here plus plus i
10:35 - inside for loop i'll print the newly
10:37 - allocated memory addresses so printf
10:40 - percent
10:41 - p
10:43 - comma
10:45 - ptr
10:46 - plus i
10:49 - i'll run this code
10:51 - you can see the output here
10:53 - initially four spaces were allocated
10:55 - using the malloc
10:57 - and then we increased the size from 4 to
11:00 - 6 using real lock
11:04 - now to revise what you have learned in
11:06 - this program here is a programming task
11:08 - for you create a program that
11:09 - dynamically change the size of an array
11:12 - create a pointer array like this
11:14 - int astrix aces and then allocate four
11:17 - spaces for the array using the malloc
11:19 - function get four input values for the
11:21 - array print the array element using the
11:24 - pointer resize the array to store six
11:26 - element using reallock assign 32 and 59
11:30 - as the fifth and sixth element you can
11:32 - see the hint on your screen
11:34 - then finally print all six arrays
11:36 - elements now you will find the answer to
11:39 - this question in our github repository
11:41 - and also if you want to revise this
11:43 - concept all this program will be there
11:45 - as well i'll put the link in the video
11:46 - description below now that we have
11:48 - reached the end of this video it's time
11:50 - for programming squeeze what is the
11:52 - correct way to allocate memory to store
11:54 - 12 double data
11:58 - comment your answer below i'll see you
11:59 - in the next one happy programming
12:05 - [Music]
12:11 - you