00:00 - what's up guys welcome back to this
00:02 - series on c programming in this video
00:04 - we'll learn about pointers in c more
00:06 - specifically we'll learn to work
00:08 - directly with computer memory address
00:10 - with the help of pointers so let's get
00:13 - started
00:18 - pointer is one of the main features that
00:20 - make c programming so powerful it allow
00:23 - us to work directly with the computer
00:25 - memory before we learn about pointers
00:28 - let's first learn about addresses
00:30 - in c programming whenever we declare a
00:33 - variable a space will be located in the
00:35 - memory for the variable and c allow us
00:38 - to access the address of the variable we
00:41 - use the ampersand symbol with the
00:43 - variable name to access the memory
00:44 - address let's see an example you might
00:47 - be familiar with the basic structure of
00:49 - c program
00:51 - now i'll create an integer variable is
00:54 - so int is and i'll assign value 25 to
00:58 - this
00:59 - now
01:00 - let's use ampersand symbol to access the
01:03 - address where the is variable is stored
01:06 - so printf
01:08 - percent p
01:10 - comma
01:11 - ampersand
01:12 - is
01:14 - here i have used person p format
01:17 - specified to print the address
01:19 - now let me run this code
01:22 - here you can see we get this output
01:25 - which is the memory address where 25 is
01:28 - located
01:29 - when you copy and run the exact same
01:31 - code you may get different output
01:33 - because the output is based on the
01:35 - location where the variable is stored
01:37 - and it varies device to device
01:40 - if you remember we have used ampersand
01:43 - symbol with scanf
01:46 - like this
01:48 - like ampersand is
01:52 - so usually we use this ampersand is with
01:56 - scanf
01:57 - while taking input from the user
02:00 - this is because with scanf we are
02:02 - instructing the compiler to store the
02:04 - input value at the memory address
02:06 - specified by this ampersand is
02:11 - now that you know about memory addresses
02:13 - let's get back to pointers just like a
02:16 - regular variable a pointer is also a
02:18 - variable however a pointer variable
02:21 - stores the memory addresses of the
02:23 - variable not the actual value let's now
02:25 - see how we can create pointers so i'll
02:28 - create pointer int
02:31 - asterix ptr here ptr is a pointer
02:36 - variable let me create a regular
02:38 - variable and compare these two so i'll
02:41 - create
02:42 - int
02:42 - var
02:44 - when comparing these two you can see the
02:47 - only difference between
02:48 - these two is this asterisk symbol
02:53 - now let's see how we can assign value to
02:55 - a pointer variable
02:57 - here is our code from our earlier
02:58 - program now let me create a pointer
03:01 - variable
03:02 - int astrix
03:04 - ptr
03:05 - as we know a pointer variable stores a
03:08 - memory address of a variable and we also
03:11 - know that ampersand is gives the memory
03:13 - address so when we assign ampersand is
03:16 - to the pointer variable the pointer
03:18 - variable should store the memory address
03:20 - of the a's variable so let's do that
03:24 - now i'll assign this pointer
03:26 - to
03:27 - the address of a's variable
03:31 - and i'll print this using printf
03:34 - statement
03:41 - comma
03:42 - ptr
03:45 - now let me run this code
03:47 - here you can see we get the same result
03:50 - for both ampersand is and ptr
03:55 - by the way if you are watching this
03:57 - there is a good chance you want to
03:58 - improve your skills in c programming
04:01 - lucky for you we have a mobile app that
04:03 - provides a well-structured c programming
04:05 - course with certification at the end and
04:08 - you can use the app alongside the video
04:10 - to practice on the building compiler our
04:12 - course is free so download now by
04:14 - scanning this qr code or click the link
04:16 - in the video description
04:21 - we can also access the value of a
04:23 - variable using the pointer let's see an
04:26 - example in our code from our earlier
04:28 - example
04:30 - i'll remove this print statement
04:35 - and i'll modify this print statement
04:37 - here
04:39 - address
04:40 - colon
04:44 - express n
04:46 - now let's print the value using ptr
04:48 - pointer i'll use printf statement
04:51 - printf
04:54 - value
04:56 - colon percent d comma
05:00 - asterisk ptr
05:02 - here asterix pti gives the value stored
05:05 - in the ptr address and since the value
05:07 - is in integer i have used percent d
05:10 - format specifier now let me run this
05:12 - code
05:13 - as you can see we have successfully
05:15 - accessed the value using the pointer
05:17 - variable
05:18 - remember ptr is a pointer that stores
05:21 - the memory address and asterix pti gives
05:24 - the value stored in the memory address
05:27 - pointed by this ptr
05:31 - in our last example we saw that we can
05:34 - access value of a variable using pointer
05:37 - variable similarly we can also change
05:39 - the value of a variable using pointer
05:41 - variable let's see an example here we
05:43 - have our code from our earlier program
05:46 - here in this program i'll remove these
05:48 - two print statements
05:50 - now let's use pointer variable to change
05:53 - the value from is 25 to 31 so i'll use
05:58 - pointer
06:01 - and assign value 31.
06:05 - since we know astrix pti gives the value
06:08 - pointed by the ptr address so this code
06:11 - assigns a new value to the memory
06:14 - address pointed by the ptr variable
06:18 - now let's print the value of the a's
06:20 - variable
06:21 - i'll use printf statement
06:24 - percent d
06:26 - comma
06:27 - is
06:29 - and i'll run this
06:31 - here you can see the value of ace
06:33 - variable is changed to 31.
06:37 - this is because the ptr pointer points
06:40 - to the address of is variable and we
06:42 - have changed the value pointed by ptr
06:44 - pointer from 25
06:47 - to 31
06:49 - so ultimately we have changed the value
06:52 - of the ace variable okay guys we need
06:54 - your support to keep these types of
06:56 - content free for all users youtube
06:58 - really likes engagement on the video so
07:00 - leave a comment below press that like
07:02 - button and hit subscribe if you haven't
07:04 - already let's get the engagement score
07:06 - higher so that more people can discover
07:09 - and enjoy these courses
07:13 - while working with pointers you might
07:15 - encounter these two syntax of creating
07:18 - pointers while both are the valid ways
07:20 - to create pointers you should try to
07:23 - avoid the first one because this syntax
07:25 - sometimes creates a lot of confusion
07:28 - let's try to understand this with the
07:30 - help of an example here we have created
07:32 - a pointer that stores the memory address
07:35 - of the a's variable in this syntax this
07:38 - asterisk symbol is attached to ptr so
07:41 - many things that this asterisk ptr is
07:44 - the pointer and try to print the address
07:47 - using asterisk ptr which is wrong this
07:50 - is because asterisk ptr gives the value
07:52 - pointed by the pointer not the memory
07:55 - address let me show you i'll use printf
07:58 - statement
07:59 - here percent d comma
08:03 - asterix ptr
08:05 - and
08:06 - i'll run this
08:08 - as you can see we get the value of the
08:10 - a's variable not the memory address so
08:13 - to avoid this confusion i highly
08:16 - recommend you to create pointer
08:20 - like this
08:23 - now you can visualize ptr separately as
08:26 - pointer
08:27 - and asterisk as the part of syntax to
08:31 - create a pointer now let's revise
08:33 - pointers here we have a regular variable
08:36 - number and pointer ptr
08:39 - then
08:40 - ptr is equals to number
08:44 - is wrong
08:46 - this is because ptr is pointer which can
08:48 - only store memory address but
08:51 - number is not a memory address so
08:55 - so this is invalid
08:59 - asterisk ptr
09:02 - equals to ampersand
09:04 - number
09:06 - is also wrong this is because asterix
09:10 - pti gives the value stored in the ptr
09:12 - location however ampersand number gives
09:15 - the memory address so
09:18 - so this is also invalid
09:23 - ptr equals to ampersand number
09:28 - is a valid code because
09:31 - both ptr and ampersand number represent
09:34 - the memory address
09:36 - so
09:37 - this is a valid code
09:41 - and asterix ptr is equals to number this
09:45 - is also valid because
09:47 - both asterisk pti and number represent
09:50 - the value stored in the memory location
09:54 - so this is also a valid code
10:00 - now to revise what we have learned in
10:02 - this program here is a programming tax
10:04 - for you create a program to change the
10:06 - value of a variable using a pointer here
10:09 - is how the programs would work get input
10:12 - value for a double variable salary
10:14 - assign the address of salary to a double
10:17 - pointer now use the pointer to print the
10:20 - value of a salary and increase the
10:23 - salary by two times and print the new
10:25 - salary
10:26 - you will find the answer to this
10:27 - question in our github repository and
10:30 - also if you want to revise this concept
10:32 - all this program will be in there i'll
10:35 - also put the link in the video
10:36 - description below now that we have
10:38 - reached the end of this video it's time
10:41 - for programming squeeze
10:43 - which of the following is valid for
10:45 - variable a and pointer p
10:48 - comment or answer below see you in the
10:49 - next video happy programming
10:55 - [Music]
11:00 - you