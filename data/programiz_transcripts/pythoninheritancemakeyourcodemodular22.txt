00:00 - before we learn about python inheritance
00:02 - let's see an example of
00:03 - why it is used and what problem it
00:05 - solves
00:06 - suppose we are creating a racing game
00:09 - that will have cars and motorcycles
00:11 - to solve this problem we can create two
00:13 - separate classes to handle each of their
00:15 - functionalities
00:16 - however both cars and motorcycles are
00:19 - vehicles
00:20 - and they will share some common
00:21 - attributes and methods
00:23 - so instead of creating two independent
00:25 - classes what we can do
00:26 - is create a vehicle class that shares
00:29 - the common features of both cars and
00:31 - motorcycles
00:32 - we can then derive a car class from the
00:35 - vehicle class
00:36 - in doing so the car class will inherit
00:38 - all the attributes
00:39 - and methods of the vehicle class and we
00:42 - can later add car specific features to
00:44 - the car class
00:45 - we can also create a motorcycle class
00:48 - that inherits from vehicle in a similar
00:50 - way
00:51 - this is the basic concept of inheritance
00:53 - it allows us to inherit
00:55 - attributes and methods from a parent
00:57 - class to a child class
00:59 - in this example vehicle is our parent or
01:01 - base class
01:02 - while car and motorcycle are our child
01:05 - or derived classes
01:06 - by writing programs in this way we can
01:09 - reuse code that is common for different
01:11 - classes
01:12 - and also makes our code easier to use
01:14 - and maintain
01:16 - now that we know about inheritance let's
01:18 - learn how to implement it in python with
01:20 - the help of
01:24 - examples
01:26 - in the upcoming example we will derive a
01:29 - dot class
01:29 - from an animal class and get a feel of
01:32 - how inheritance works
01:34 - then we will move on to create a more
01:36 - practical example
01:38 - so i'll say class animal
01:42 - let's define a method named eat inside
01:44 - it
01:45 - so here i'll say def eat
01:49 - self and inside i'll say print
01:53 - i can eat this is our base or parent
01:58 - class
01:59 - now let's derive the dog class from this
02:02 - class
02:02 - so here i'll say
02:06 - class dog and before parenthesis
02:09 - i'll add animal inside braces
02:15 - inside this class i will create the bark
02:18 - method which is specific to the doc
02:19 - class so here i'll say def
02:22 - bark self
02:26 - and inside the function definition i'll
02:28 - say print
02:30 - i can bark this door class
02:34 - inherits all the attributes and methods
02:36 - of the animal class
02:37 - this means objects of dog can also
02:40 - access
02:40 - attributes and methods of animal let's
02:43 - see how
02:44 - so here i'll say i'll create a new
02:46 - object called dog1
02:48 - and i'll say dog one equals dog
02:52 - now i can call this bark method on the
02:55 - dog
02:55 - one object so i'll say dog one
02:58 - dot bark now when i run this code you
03:01 - must have imagined the output already
03:03 - it says i can bark since our dog class
03:07 - is
03:07 - inherited from the animal class
03:10 - dog one can also call the eat method
03:12 - defined in animal
03:14 - so i can say dog one
03:18 - dot eat and now when i press run
03:21 - then i can eat is also printed because
03:25 - dog one has access to the eat method of
03:28 - the animal class
03:30 - let's see from the very beginning what's
03:32 - happening here
03:33 - we derived the dog class from the animal
03:36 - class
03:37 - so the dog class inherits all the
03:39 - features of the animal class
03:42 - now this object of the animal class can
03:45 - access attributes and methods of
03:47 - both the dot class and the animal class
03:50 - similarly
03:50 - if we want we can derive another class
03:53 - called cat from the animal class like
03:54 - this
03:55 - so here i can say class
03:59 - cat and inside braces i'll say animal
04:03 - so inside this class i'll define a
04:05 - method called get grumpy
04:07 - so i'll say def get underscore
04:11 - grumpy self
04:15 - and inside this i'll say print i
04:18 - am getting grumpy
04:23 - now let me create an object of the cat
04:26 - class
04:27 - cat one equals cat and let's call
04:31 - the eat method to see if it is
04:33 - accessible to cat
04:35 - so here i'll say cat1 dot eat
04:38 - and when i press run then as you can see
04:41 - i can eat
04:42 - is printed from the cat1 object as well
04:47 - as we just saw cat objects can also use
04:49 - the eat method defined in the parent
04:51 - class
04:52 - even from this very simple example we
04:54 - can see that inheritance makes our code
04:57 - more organized and reusable
04:59 - and if you're finding this video useful
05:01 - a sub to the channel would be tremendous
05:04 - before moving to the next section of the
05:05 - video the programmers team has created
05:07 - an app that allows you to learn python
05:09 - from your
05:10 - phone the app contains bit size lessons
05:12 - that are easier to understand
05:13 - a built-in interpreter so that you can
05:15 - run python on your phone quizzes
05:17 - and many more features the app is
05:19 - available on both ios
05:20 - and android the links are in the
05:22 - description below
05:25 - let's now look at a more practical
05:26 - example of inheritance
05:28 - and we will also cover the concept of
05:30 - method overriding in our example
05:32 - we are going to implement a program to
05:33 - calculate the perimeter of different
05:35 - polygons
05:36 - like triangles and quadrilaterals using
05:39 - inheritance
05:40 - here's what we will do we will first
05:42 - create a polygon class
05:43 - that has an init method a method to
05:46 - calculate perimeter
05:47 - and a method to display the definition
05:49 - of a polygon
05:50 - we will then derive two classes triangle
05:53 - and quadrilateral from it
05:54 - in these classes we will add methods
05:57 - specific to them
05:58 - let me first create a base class called
06:01 - polygon
06:02 - so in my code editor i'll remove the old
06:04 - code and i'll say
06:05 - class polygon
06:09 - and inside it i'll create an init
06:11 - function
06:12 - def underscore underscore init
06:14 - underscore underscore
06:15 - and pass in self and i'll pass in the
06:18 - sides
06:18 - as the second argument so here i'll say
06:21 - self dot sides
06:23 - equals sides
06:26 - to make things easier we will make the
06:28 - sides attribute a list that will contain
06:31 - all the sides of a polygon now
06:34 - let me add a display info method to
06:36 - display information about this polygon
06:39 - so here i'll say def display
06:42 - underscore info it will also take the
06:44 - self parameter by default
06:46 - and inside i'll say print a polygon
06:51 - is a two dimensional
06:55 - shape with straight
06:59 - lines let me also add a perimeter method
07:03 - that will find the perimeter of this
07:04 - polygon
07:05 - remember that perimeter is the sum of
07:07 - all sides of a polygon
07:09 - so in my code editor i'll define the
07:11 - perimeter method as
07:13 - i'll say def get underscore
07:17 - perimeter self
07:21 - perimeter perimeter
07:26 - equals self
07:29 - sorry sum self dot sides
07:33 - sum is a function that can act on a list
07:36 - and provide the sum of the elements of
07:38 - that list
07:39 - so then i'll say return
07:42 - perimeter this will be our base class
07:47 - all polygons like triangles and
07:49 - quadrilaterals
07:50 - will derive these features now that we
07:53 - are done creating the base class
07:54 - let's create a triangle class that will
07:56 - inherit from the polygon
07:58 - class so i'll go here and i'll say class
08:02 - triangle and then because we want to
08:04 - inherit from the polygon class
08:06 - inside parenthesis i will say polygon
08:10 - and i have my regular colon
08:13 - inside the triangle class i'll define a
08:15 - function called display underscore info
08:17 - so i'll say
08:18 - def display underscore info
08:21 - self and the definition of a triangle is
08:25 - print a triangle is a
08:28 - polygon with three edges
08:32 - i'll also define the new quadrilateral
08:34 - class
08:36 - so i'll say class quadri
08:40 - lateral and also again derived from
08:44 - polygon
08:45 - and inside it i'll say def display
08:48 - underscore info
08:50 - self now let me define a quadrilateral
08:53 - as
08:53 - a print a quadri lateral
08:58 - is a polygon
09:01 - with four edges
09:04 - here in each of these cases we have
09:06 - defined a child class from the parent
09:08 - polygon class
09:09 - that will inherit all the attributes and
09:11 - methods of the polygon class
09:13 - now let's find the perimeter of a
09:15 - triangle first i'll create an object of
09:17 - a triangle class
09:19 - so i'll say t1 equals
09:22 - triangle let me pass in the sides of the
09:25 - triangle
09:27 - when we create the t1 object the init
09:30 - method of the polygon class
09:32 - is called automatically now let's find
09:35 - its parameter
09:37 - so here i'll say
09:40 - perimeter equals
09:43 - t1 dot get underscore
09:46 - perimeter this code
09:50 - calls the get parameter method in that
09:53 - is defined inside the polygon class
09:57 - and returns the perimeter of the t1
09:58 - triangle let's print parameter and run
10:01 - the code to see if our program is
10:03 - working correctly
10:04 - so i'll go back down and i'll say print
10:08 - the perimeter is
10:11 - and i'll say perimeter
10:15 - now when i press run then there seems to
10:18 - be an
10:18 - error okay triangle object has no
10:20 - attribute get parameter
10:22 - so i have forget underscore parameter
10:24 - correctly
10:25 - oh i'm i am i've misspelled parameter
10:28 - here
10:29 - now when i press run then it says the
10:31 - perimeter is 18
10:33 - so 5 plus 6 plus 7 is 18 that means my
10:35 - answer is correct
10:37 - as we can see we get the perimeter as
10:39 - expected
10:45 - if you've noticed we have this display
10:47 - underscore info method
10:49 - in both the polygon class and the two
10:52 - derived classes as well
10:56 - let's see what will happen if we call
10:58 - the display info method for the t1
11:00 - triangle
11:01 - so here i'll say t1
11:04 - dot display underscore
11:07 - info and when i run the code we can see
11:10 - that the display info
11:12 - method of the triangle class is called
11:15 - instead
11:15 - of the display info method of the parent
11:18 - class
11:18 - this is called method overriding if the
11:21 - same method is defined in
11:22 - both the base and the derived class then
11:25 - the method of the derived class
11:27 - overrides the method of the base class
11:29 - let's see from the very beginning what's
11:31 - happening here
11:33 - we defined a polygon class and created
11:36 - three methods inside it the init method
11:38 - the display info method and the get
11:40 - parameter method
11:43 - then we derive two classes triangle
11:46 - and quadrilateral where we again define
11:50 - the display underscore info method
11:53 - inside the display method of the
11:55 - triangle and the quadrilateral classes
11:58 - we defined specific details of both
12:00 - triangles and quadrilaterals
12:03 - this is called method overriding due to
12:05 - this when we call display info using
12:07 - triangle objects
12:09 - it doesn't use display info of polygon
12:11 - rather its own display method is called
12:15 - by the way if we need we can call the
12:17 - display info method of our parent
12:18 - polygon class
12:19 - from inside its child classes like this
12:22 - here inside the display info method of
12:25 - the triangle class
12:26 - i can say polygon
12:29 - dot display underscore
12:32 - info and self
12:36 - when i run the code then
12:39 - it also prints a polygon is a two
12:41 - dimensional shape which means
12:43 - the display underscore info method of
12:44 - the polygon class was called correctly
12:48 - as you can see the print function inside
12:51 - the display
12:52 - info of the triangle method was called
12:53 - first and then
12:55 - only after that the polygon classes
12:58 - display info function or method was
12:59 - called
13:01 - here polygon is the name of the parent
13:03 - class
13:04 - since we are calling the method using
13:06 - the class rather than an object
13:08 - we need to pass self explicitly here
13:12 - this code is a bit more unorthodox than
13:14 - what we have been using
13:15 - there is a more elegant way to achieve
13:18 - the same task by using the super
13:20 - function like this so here instead of
13:22 - polygon
13:23 - i'll say super and when i press run
13:27 - it says display info takes one
13:29 - positional argument but two were given
13:31 - this means i don't need to pass self
13:33 - when i press run
13:34 - then i get the same output the super
13:37 - function
13:38 - returns a temporary object of the
13:41 - superclass for a subclass
13:43 - simply speaking super is an object of
13:46 - polygon in this example
13:48 - and we are using it to call display info
13:49 - of the polygon class
13:51 - that is why it through an error when i
13:52 - add herself here because
13:54 - super is an object and not the class
13:57 - name
13:59 - we can use this to access the method and
14:01 - attributes of a parent class from inside
14:03 - a child class
14:05 - at this point we have covered all the
14:08 - fundamentals of python inheritance
14:10 - by the way we haven't used this
14:12 - quadrilateral class in our example yet
14:14 - if you want feel free to create objects
14:16 - of the quadrilateral class
14:18 - and try accessing the available methods
14:20 - as you please
14:21 - it will help you understand these
14:22 - concepts much better and get a feel of
14:25 - how things work in object oriented
14:26 - programming
14:28 - by the way you can find all the source
14:30 - code mentioned in this video in our
14:31 - github repository
14:32 - the link is in the description below
14:34 - that's it for this video
14:36 - if you like this video hit that like
14:37 - button and subscribe to our channel
14:39 - and i'll see you in the next one happy
14:42 - programming
14:51 - you