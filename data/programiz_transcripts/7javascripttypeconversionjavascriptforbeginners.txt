00:00 - what's up guys i'm puneet from
00:01 - programmers and welcome back to this
00:02 - series on javascript in today's video we
00:05 - will learn about type conversion in
00:06 - javascript we will learn to convert one
00:09 - data type to another so let's get
00:11 - started
00:15 - before we talk about what type
00:16 - conversion is let's quickly see an
00:18 - example
00:20 - in the video about operators we learnt
00:22 - about arithmetic operators let me use
00:24 - the plus operator i will create a
00:26 - program that will simply add two numbers
00:29 - so on my code editor i'll say const x
00:32 - equals eight
00:33 - similarly let me create another variable
00:35 - const y equals four
00:38 - now i'll create a result variable that
00:40 - stores the sum of x and y and let me
00:44 - console log the result
00:48 - here the variable x has the value 8 and
00:51 - the variable y has the value 4.
00:54 - now when i use the plus operator between
00:56 - two operands x and y the two values are
00:59 - added and stored in the result variable
01:02 - let's run this code
01:05 - and as expected i get the output 12
01:08 - which is 8 plus 4.
01:10 - now let me change the value of the y
01:11 - variable from the number 8 to string 8
01:14 - by adding quotation marks before and
01:17 - after
01:18 - what do you think would be the output of
01:19 - this program
01:21 - let me run this code and confirm your
01:23 - suspicion
01:24 - so when i press run i get 84 instead of
01:28 - 12. quite fascinating isn't it let me
01:31 - explain what's happening here
01:33 - here we are adding a string value 8 to a
01:36 - numeric value 4.
01:39 - in such cases javascript automatically
01:41 - converts the numeric value into a string
01:44 - and concatenates the two strings that's
01:46 - why the values 8 and 4 are joined
01:49 - together
01:50 - this is one of the behaviors in
01:51 - javascript which you'll get used to and
01:53 - it's called type conversion you can
01:55 - verify the type conversion by checking
01:57 - the type of the result using the type of
02:00 - operator let me add a print statement
02:02 - that checks the type of the result so
02:05 - i'll say console.log
02:07 - type of
02:08 - result
02:10 - when i press run
02:11 - i get not only the output 84 but it
02:14 - confirms that 84 or result variable is
02:17 - indeed a string
02:19 - here the type conversion is happening
02:21 - automatically this is called implicit
02:24 - type conversion
02:25 - now let's see what happens if i pass a
02:27 - textual string instead of a numeric
02:29 - string i will simply replace it with
02:33 - hello
02:36 - let me run this program
02:38 - and you must have expected this by now
02:40 - the output is a join string hello4
02:45 - so getting back to type conversion type
02:47 - conversion is the process of converting
02:49 - one data type to another data type
02:51 - let's see a few more examples instead of
02:54 - the plus or the addition operator let's
02:56 - try some other operators
02:58 - i'll go back to my code editor and i'll
03:00 - say const result
03:03 - 1
03:03 - equals
03:04 - string 5
03:06 - minus string 2.
03:08 - similarly let me try something else so i
03:11 - can say const
03:12 - result 2 equals
03:14 - string 5
03:16 - minus numeric two
03:19 - now let's also try multiplication i can
03:21 - say const result three
03:24 - equals
03:25 - string five
03:27 - asterisk or times
03:29 - two
03:30 - similarly the last one will be division
03:33 - result four equals string five
03:36 - divided by two
03:39 - let me console log the results so i can
03:41 - say console log result one
03:45 - console log
03:47 - result 2
03:49 - console log
03:50 - result 3 and similarly
03:53 - console.log
03:54 - result 4.
03:57 - let's run this program and see the
03:58 - output
04:01 - here unlike the plus operator the actual
04:03 - operation of subtraction multiplication
04:06 - and division is performed that is string
04:09 - 5 minus string 2
04:11 - gave me 3
04:13 - similarly string 5 minus numeric 2 gave
04:16 - me 3 again
04:18 - string 5 times numeric 2 gave me 5 times
04:21 - 2 10
04:22 - and string 5 divided by numeric 2 gave
04:25 - me 2.5 which is 5 divided by 2
04:27 - instead of 52
04:29 - this is because when a numeric string is
04:31 - used with arithmetic operators such as
04:33 - subtraction multiplication and division
04:36 - javascript converts the numeric string
04:37 - to the number data type instead of the
04:40 - other way around like with addition
04:42 - you can verify this by checking the data
04:44 - type of all results using the type of
04:46 - operator so i'll go back to my code
04:48 - editor and then let me also add console
04:51 - log
04:54 - type of result one
04:57 - console log
05:00 - type of result to
05:02 - console.log
05:04 - type of result 3
05:07 - console log
05:10 - type of result 4
05:14 - now when i press run
05:15 - i can see that all 4 results result 1
05:18 - result 2 result 3 and result 4 are
05:20 - numbers
05:22 - you must be wondering by now what will
05:24 - happen if we use non-numeric strings
05:26 - with subtraction division and
05:27 - multiplication operators well what
05:30 - happens is we get something called nan
05:32 - as a result nan means not a number
05:35 - let's see this in action i will use the
05:37 - minus operator with a non-numeric string
05:39 - so let me remove this old code and i'll
05:41 - say const result equals
05:45 - 4
05:46 - minus
05:48 - hello
05:49 - now let me console log the result so
05:51 - console
05:52 - log result
05:55 - let's see the output of this program
05:56 - when i press run
05:58 - you can see that i get n capital n small
06:01 - a and capital n which is a special data
06:04 - type in javascript that means not a
06:06 - number
06:07 - if you're enjoying this video please
06:09 - also check out programs pro where we
06:10 - provide tutorials along with quizzes and
06:13 - challenges which will help you practice
06:14 - and test your learning in real time also
06:16 - the course includes projects to give you
06:18 - an awesome experience of how programming
06:20 - works in the real world and for our
06:22 - youtube subscribers we are giving 50 off
06:24 - on the yearly plan sign up by scanning
06:26 - this qr code or use the link in the
06:27 - video description to claim your discount
06:29 - so far we saw that a number value when
06:32 - added to a string is automatically
06:33 - converted to a string we also saw
06:35 - something completely different a numeric
06:38 - string is automatically converted to a
06:40 - number while performing subtraction
06:42 - multiplication and division with a
06:43 - number
06:44 - now let's see what will happen when we
06:46 - use addition and subtraction operators
06:48 - with boolean values i'll remove this old
06:50 - code and i'll say const result 1 equals
06:55 - string 4
06:57 - minus
06:58 - true
06:59 - and let me console log this result
07:03 - result one
07:04 - similarly let me try const
07:07 - result to equals string four
07:11 - plus true
07:12 - and i'll console log this as well get
07:16 - used to a lot of console logging if you
07:18 - want to become a good programmer
07:19 - similarly cons result 3
07:22 - equals
07:24 - the numeric 4 plus false this time
07:28 - and i'll console log result 3 as well
07:33 - before i run the program i would like
07:35 - you to create a mental picture of what
07:37 - the output might be
07:40 - let's see if you guessed it correctly
07:41 - i'll run the code
07:44 - and you can see that i got three four
07:46 - true and four
07:47 - let's see what's happening here
07:49 - javascript considers boolean values true
07:52 - as one and false as zero
07:55 - here in the first statement when i said
07:58 - 4 minus true
08:00 - the numeric string 4 subtracts 1 which
08:02 - is the value of true so we get 3 as
08:05 - output
08:07 - in the second statement when i try to
08:09 - add 4 with true
08:12 - we are using numeric string 4 with plus
08:14 - operator
08:15 - hence it converts the true to a string
08:18 - true and joins the two strings so we get
08:21 - photo as output
08:23 - and in the third statement we are using
08:25 - a number with the plus operator hence it
08:27 - simply performs addition between 4 and
08:29 - false and since false is 0 we get 4 as
08:33 - output
08:38 - all the type conversion seen in the
08:39 - previous section of this video is
08:41 - implicit conversion implicit conversion
08:43 - is done by javascript automatically
08:45 - however we can also convert certain data
08:48 - types into another as per our needs
08:50 - imagine you're fetching some data from
08:52 - the server and the data you get is in
08:54 - string format
08:55 - however you need the data in number type
08:58 - to perform some calculations then you
09:00 - can manually convert the string data
09:02 - type to number and this is called
09:04 - explicit conversion explicit type
09:06 - conversion is done using built-in
09:08 - methods available in javascript let's
09:10 - see a few examples
09:14 - in order to convert numeric strings and
09:16 - boolean values to numbers we can use the
09:19 - number function for example i'll remove
09:21 - this whole code and i can say const
09:24 - result
09:25 - equals
09:26 - number and the string three to four
09:30 - now let me console log the result
09:33 - oops console.log result and also the
09:36 - type of the result so i can say
09:37 - console.log
09:41 - type of
09:42 - result
09:44 - here we are passing the numeric string
09:47 - 324
09:48 - to the number function
09:50 - the result is then assigned to the
09:52 - result variable and we are printing the
09:54 - result variable
09:55 - also to check the data type of result we
09:57 - are using the type of operator on the
09:59 - result variable
10:00 - now let me press run and see the output
10:04 - as you can see the numeric string three
10:05 - to four is converted to number three to
10:08 - four
10:09 - and we verified this by checking the
10:10 - data type which is a number
10:13 - now let's see what happens if we pass a
10:15 - boolean value to the number function
10:17 - so here i'll replace this 3 to 4
10:19 - by true
10:22 - let me run this code
10:24 - and we just verified that javascript
10:26 - treats true as 1.
10:29 - let me go ahead and change true to false
10:33 - and press run
10:34 - and you can see that javascript reads
10:36 - false as zero while converting it to a
10:39 - number
10:40 - okay guys we need your support to keep
10:41 - these kinds of content free for all
10:43 - users youtube really likes engagement on
10:45 - the video so leave a comment below click
10:47 - that like button and hit subscribe if
10:49 - you haven't already let's get the
10:51 - engagement score high up so that more
10:52 - people can discover and enjoy these
10:54 - courses
10:58 - now let's see how we can convert other
10:59 - data types into string explicitly in
11:02 - order to convert a data type to string
11:04 - we have two functions they are string
11:06 - and two strings
11:08 - let's start with the string function
11:10 - first i'll go to my code editor and i'll
11:12 - say const result equals string 257
11:18 - exactly just like before but instead of
11:19 - number i use string let me console log
11:22 - the result
11:25 - and also console log the type of the
11:27 - result
11:31 - here i passed a number 257 into the
11:34 - string function and stored the value in
11:36 - a result variable then i printed the
11:38 - result and also the type of the result
11:40 - to verify that this is indeed being
11:42 - converted to a string
11:44 - let me go ahead and run this program
11:47 - and you can see we get 257 and string
11:51 - that means the result variable now
11:54 - contains a string
11:56 - similarly let's now pass a boolean value
11:58 - instead of a number i'll go ahead and
12:00 - modify the code and here i'll put true
12:04 - let me also try for false so i'll copy
12:06 - paste this code
12:08 - and instead of true i'll say false let
12:10 - me make this result 1
12:14 - and when i press run
12:16 - you can see that true and false were
12:18 - both converted to strings
12:22 - now that we know how to use the string
12:23 - function to convert any data type to a
12:25 - string let's also try the other
12:27 - alternative that javascript provides
12:29 - which is the tostring method i'll remove
12:31 - the old code from my code editor and
12:33 - i'll say const result equals
12:36 - the number 257
12:39 - dot
12:40 - tostring
12:41 - you must have noticed the parenthesis in
12:44 - front at the end of 257 i'll explain
12:47 - more about it later
12:49 - then i can say console.log result
12:52 - similarly
12:53 - console.log
12:55 - type of
12:56 - result
12:58 - this format might look strange to you
13:00 - because you've never seen it before so
13:02 - instead of wrapping 257 with a string
13:04 - function i am using this tostring method
13:08 - on 257 and i'm printing the result and
13:11 - the type of the result
13:13 - let me run this code
13:15 - and you can see that i got 257 and
13:17 - string which is the data type of the
13:19 - result variable as before
13:22 - as you can see we have successfully
13:23 - converted the number to string using
13:25 - tostring you can go ahead and try this
13:27 - for the boolean values true and false
13:29 - yourselves
13:30 - now that we have reached the end of this
13:32 - video it's time for the programming
13:34 - squares
13:35 - what's the output of the following code
13:39 - comment to answer below and if you want
13:41 - to revise these concepts you can find
13:43 - all the programs in our github
13:44 - repository i'll put the link in the
13:46 - video description below happy
13:47 - programming
13:48 - [Music]