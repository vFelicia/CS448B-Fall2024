00:00 - iterators are everywhere in python they
00:02 - are elegantly implemented within for
00:04 - loops
00:05 - list and dictionary comprehensions but
00:07 - they are hidden in plain sight
00:08 - in this video we will learn about
00:10 - iterables and iterators in python with
00:12 - the help of examples
00:14 - we will also create our own custom
00:15 - iterator and see how the for loop
00:18 - actually works
00:19 - we've got a lot to cover so let's get
00:20 - started
00:25 - before we learn about iterators let's
00:27 - first understand what an iterable is
00:30 - basically anything that you can loop
00:31 - over in python is called an iterable
00:34 - for example a list is an iterable for an
00:37 - object to be considered an iterable
00:38 - it must have the iter or iter method
00:42 - let's check if lists have this special
00:43 - method to check this
00:45 - i will use the dir function which
00:47 - returns all the methods of an object
00:49 - so here on my code editor i'll say print
00:52 - dir numbers now let me run this code
00:58 - and here among all these methods you can
01:01 - see the dunder itr method
01:04 - let's call this method on this numbers
01:06 - list to see what it does
01:08 - so here i'll say value
01:11 - equals numbers dot
01:15 - dunder or double underscore iter double
01:18 - underscore
01:20 - and let me print the value when i press
01:24 - run
01:26 - then you can see that we got a list
01:29 - iterator object
01:30 - and this is the memory location of that
01:32 - object next we will see what iterator
01:34 - objects are
01:37 - iterator in python is simply an object
01:39 - that can return data one at a time
01:41 - while iterating over it for an object to
01:44 - be an iterator
01:44 - it must implement two methods iter or
01:47 - iter and next
01:49 - these are collectively called the
01:50 - iterator protocol now we'll look into
01:52 - the next method in detail
01:56 - suppose we have a list like this so i'll
01:58 - say numbers equals
01:59 - 1 comma 4 comma 9. now i'll get an
02:03 - iterator from this list
02:04 - using the iter method so here i'll say
02:08 - value equals numbers
02:12 - dot dunder or double underscore under
02:16 - iter and next here
02:19 - this variable value is an iterator and
02:22 - we can get each element of this iterator
02:24 - by using the next method the next method
02:27 - returns the next value in the iteration
02:30 - so here i can say
02:31 - item 1 equals value dot
02:34 - double underscore or dunder next
02:38 - and then i can print item one when i run
02:40 - this code
02:42 - then one which is the first element of
02:44 - this list is printed
02:46 - now if i run the next method again it
02:48 - should return the next item
02:50 - which is four it's because the next
02:52 - method also updates the state of the
02:54 - iterator
02:55 - and here i'll say item two
02:58 - equals value dot done next
03:02 - print item 2 and then item 3
03:06 - equals value.next
03:10 - and then i'll say print item 3. now let
03:13 - me run this code
03:16 - as you can see first one was printed
03:18 - then four
03:19 - then nine by the way instead of calling
03:21 - these special methods with an underscore
03:24 - python has an elegant way to call
03:26 - underscore underscore iter simply with
03:28 - the iter function
03:29 - and underscore underscore next
03:30 - underscore underscore with the next
03:32 - function i'll make these changes to my
03:34 - previous code
03:35 - so here instead of calling numbers dot
03:38 - underscore underscore iter i can say
03:40 - iter numbers and instead of calling
03:43 - value dot
03:44 - underscore underscore next underscore
03:45 - underscore i can say next
03:48 - value here to i can say next
03:52 - value and here as well next
03:55 - value when i run this code i get the
03:58 - same output as before but my code looks
04:00 - a lot cleaner than before
04:03 - by the time i get to the third element
04:05 - we have already reached the end of our
04:07 - list
04:07 - now let's see what happens if we further
04:09 - try to get the next value
04:12 - so here i'll say item 4 equals
04:15 - next value and let me try to print
04:19 - item 4. now when i run the code
04:22 - then you can see that the stop iteration
04:25 - exception has been raised
04:28 - since our list had only three elements
04:30 - the call to the fourth next method
04:32 - raised the stop iteration exception
04:36 - did you know that for loops internally
04:38 - use the while loop to iterate through
04:40 - sequences
04:41 - to demonstrate this let me first look
04:43 - through a list using the while loop
04:45 - so i'll go to my code editor and create
04:47 - a new list i'll say num
04:49 - underscore list equals 1 comma 4
04:53 - comma 9 and now let me create an
04:56 - iterator object
04:57 - so here i'll say iter underscore obj
05:00 - or iterator object equals iter
05:04 - num underscore list here the iter object
05:08 - is an iterator we can now use an
05:10 - infinite while loop to get the next
05:12 - element
05:12 - using the next method and in case of
05:14 - stop iteration exception occurs
05:16 - we will break out of this loop so here
05:18 - i'll say
05:19 - while true
05:24 - and then i can say try try to get the
05:26 - next next element
05:28 - so next item underscore obj
05:31 - and then if i get the element print that
05:33 - element
05:35 - now if there is an exception then i can
05:39 - say
05:40 - or if there's more specifically i'll say
05:42 - if there's
05:43 - an stop iteration exception then
05:47 - break the code
05:50 - here's how this code works first we have
05:53 - created an iterator object
05:54 - from a list using the iter function
05:57 - then we have created an infinite while
05:59 - loop inside the loop
06:01 - we have used the next method to get the
06:04 - next element in the sequence
06:06 - in the next line we have printed that
06:08 - element we have put all this code inside
06:11 - a try block
06:12 - and when all the items of the iterator
06:14 - are iterated
06:15 - the try block raises the stop iteration
06:18 - exception
06:18 - and we break out of the loop let me run
06:20 - this code
06:22 - and you can see that 1 4 and 9 have been
06:25 - printed
06:26 - in fact this is exactly how for loops
06:28 - work behind the scenes
06:29 - a for loop internally creates an
06:31 - iterator object and iterates over it
06:33 - calling the next
06:34 - method until the stop iteration
06:35 - exception is encountered
06:38 - by the way if you're finding this video
06:40 - useful a sub to the channel would be
06:41 - much
06:42 - appreciated before moving to the next
06:44 - section of the video the programming
06:45 - team has created an
06:46 - app that allows you to learn python from
06:48 - your phone the app contains bit size
06:50 - lessons that are easier to understand
06:52 - a built-in interpreter so that you can
06:53 - run python on your phone quizzes and
06:55 - many more
06:56 - the app is available on both ios and
06:58 - android the links are in the video
07:00 - description
07:03 - as we have already seen iterators are
07:05 - simply objects that implement the item
07:07 - method
07:08 - and the next method let's try to make
07:10 - our own iterator object
07:12 - here we'll create a program that will
07:14 - generate a sequence of even numbers such
07:16 - as 2
07:16 - 4 6 8 and so on for this i'll create a
07:20 - class with the init method
07:21 - so let me remove this old code and here
07:24 - i'll say class
07:25 - even and inside this let me start by
07:28 - creating the init method
07:29 - so i'll say def underscore underscore
07:31 - init underscore underscore
07:33 - self and max
07:36 - and then let me initialize self dot n
07:39 - equals 2 so that's the first value which
07:41 - is always 2
07:42 - and self.max is the value that we
07:45 - provide
07:46 - by now we already know that iterators
07:48 - must implement an item method
07:50 - which returns an iterator so i'll simply
07:52 - create an item method that returns the
07:54 - object itself
07:55 - so here i'll say def underscore
07:58 - underscore iter
07:59 - underscore underscore self and here i'll
08:02 - say return
08:03 - self now let's implement the next method
08:07 - this method should give the next element
08:08 - in the stream if it exists
08:10 - if the next element is not available it
08:12 - should raise the stop iteration
08:14 - exception
08:15 - so here i'll say def underscore
08:18 - underscore next
08:19 - underscore underscore oops i forgot a
08:21 - bracket here
08:24 - self and here inside this method
08:27 - we want to generate a sequence up to the
08:29 - max number
08:31 - and if the next element exceeds max we
08:33 - will raise an exception
08:35 - so let me first start with the framework
08:37 - of the code here
08:38 - if self dot n as long as it is
08:43 - less than self.max then we need to do
08:45 - one thing
08:46 - and else we need to raise
08:51 - the stop iteration exception
08:55 - now inside this if i need to generate
08:57 - the next number in the sequence
09:00 - so here i'll say result equals
09:04 - self dot n i am temporarily saving the
09:07 - current
09:08 - value of n in the result variable now i
09:11 - want to
09:12 - increase the value of n by 2
09:15 - so here i'll say self dot n plus equals
09:17 - 2
09:18 - and then return result because i want to
09:22 - return the old value of n not the new
09:24 - one
09:26 - now our class is finally complete let's
09:28 - create an object from this class which
09:30 - is an iterator
09:31 - because it implements both the iter and
09:34 - the next methods
09:36 - so here outside the class i'll say
09:40 - numbers equals even 10.
09:44 - now when i call the next method i should
09:46 - get even numbers one after another
09:49 - let me print three even numbers i'll say
09:51 - print
09:52 - next numbers print
09:57 - next numbers and print
10:01 - next numbers again now when i press run
10:06 - then you can see that 2 4 and 6 are
10:09 - printed
10:11 - if we use the next method three more
10:12 - times the stop iteration exception is
10:15 - raised as of sequence can only have
10:16 - numbers up to 10
10:18 - because of this limit here
10:22 - at this point we have covered all the
10:24 - basics of iterators in python
10:25 - but you might be wondering why it is
10:27 - used iterators
10:29 - are powerful tools when dealing with the
10:30 - last stream of data if you use regular
10:33 - list to store these values
10:34 - our computer would run out of memory
10:36 - quickly with iterators however
10:38 - we can save resources as they return
10:40 - only one element at a time
10:42 - so in theory we can deal with infinite
10:44 - data in finite memory
10:46 - generally iterators are implemented in
10:48 - python using something called generators
10:50 - that make it much easier to use them we
10:53 - will cover python generators in detail
10:55 - in our next video
10:56 - that's it for this video if you want to
10:58 - revise these concepts
10:59 - you can find all these programs in our
11:01 - github repository i'll also put this
11:03 - link in the video description
11:04 - and if you like this video hit that like
11:06 - button and subscribe to the channel
11:08 - and i'll see you in the next one happy
11:12 - programming
11:20 - you