00:00 - what's up guys i'm punit from
00:01 - programmers and welcome back to this
00:03 - series on python
00:04 - in this video we'll be learning about
00:06 - data types more specifically we will
00:08 - learn about textual data
00:09 - and numbers we will also learn how to
00:12 - store these data
00:13 - so that you can use them later in the
00:14 - program let's get started
00:22 - if you haven't watched the previous
00:23 - video from this series i highly
00:25 - recommend you watch that first
00:27 - click on the info button if you would
00:28 - like to watch the previous lesson
00:30 - on my screen i have the program from the
00:32 - last video
00:33 - i'll go ahead and run it first as you
00:36 - can see
00:36 - hello world is printed this program is
00:39 - using the print function
00:41 - to print whatever is in between the
00:42 - parentheses
00:44 - in this case hello world is a string a
00:46 - string
00:47 - is simply a sequence of characters
00:49 - either one or many and is always wrapped
00:51 - inside quotation marks
00:53 - now let me take this upper notch and
00:55 - print another string
00:56 - this time i'll use double quotes instead
00:58 - of single quotes so i'll say print
01:01 - oops print python 3
01:04 - is awesome and this time when i press
01:07 - run then as you can see both hello world
01:10 - and python 3 is awesome are printed
01:13 - now you can use either single or double
01:15 - quotes for strings they're basically the
01:16 - same
01:17 - however you cannot do something like
01:19 - this so i'll change this to single quote
01:21 - and when i press run
01:23 - this time python shows me an error you
01:25 - cannot mix and match single and double
01:27 - quotes
01:28 - so i'll change this back and make this
01:30 - double quote when i press run then you
01:31 - can see the same output as before
01:34 - another data type that's heavily used in
01:36 - python is the numeric data
01:38 - and there are two commonly used numeric
01:40 - data in python integers
01:41 - and floats the difference between
01:43 - integer and float is that
01:45 - integer is a whole number and float is a
01:47 - decimal
01:48 - we can use the print function to print
01:50 - integers and floats as well
01:52 - let me give you an example quickly so
01:54 - i'll say i'll remove this old code
01:56 - and i'll say print 5 and i'll also write
02:00 - print 34.5
02:03 - when you run the code the integer 5 and
02:05 - 34.5 and the floating point number 34.5
02:08 - are printed
02:09 - one thing to remember is that if you use
02:11 - a number with quotations
02:13 - it's technically a string so if i
02:15 - surround
02:16 - five by quotes five here is a string and
02:19 - not a number
02:20 - i'll go back and remove this quotation
02:22 - marks for now
02:24 - till now we learned about strings and
02:26 - numeric data and how to print them
02:28 - in the real world scenarios we may need
02:30 - to store and use this data in our
02:31 - program
02:32 - and not just print them before moving to
02:35 - the next section of the video
02:36 - i'd like to mention that the program is
02:37 - team has created an app that allows you
02:40 - to learn python from your phone
02:41 - the app contains bit size lessons that
02:43 - are easy to understand
02:45 - a built-in interpreter so that you can
02:46 - run python on your phone
02:48 - quizzes and many more features the app
02:50 - is available on both ios and android
02:52 - the links are in the video description
02:54 - below
02:56 - in order to store data and use them
02:57 - later in our program we use something
02:59 - called variables
03:00 - before explaining more about variables
03:02 - let me give you an example
03:04 - so i'll remove the old code and i'll say
03:07 - city
03:08 - equals kathmandu
03:12 - here i've created the variable city
03:15 - and this variable stores a string data
03:18 - kathmandu
03:19 - to store the data in a variable we are
03:22 - using the equals operator
03:24 - now instead of printing the string
03:26 - directly i'll print the city variable
03:28 - and see what we'll get so i'll say print
03:33 - city and this time when i press run then
03:36 - kathmandu is printed to the screen again
03:40 - this is because the city variable stores
03:42 - the string data kathmandu
03:44 - now technically speaking the city
03:46 - variable does not hold the kathmandu
03:47 - string
03:48 - when we write city equals kathmandu city
03:51 - is actually referring to the string
03:52 - kathmandu
03:53 - now storing data and referring to the
03:55 - data may seem like similar concepts but
03:57 - they are very different in python
03:59 - we will learn more about what referring
04:01 - actually means in detail
04:02 - in the future videos for now we'll
04:04 - continue to say that city stores
04:06 - kathmandu for simplicity
04:08 - now let me modify this program and
04:10 - instead of city i'll print city inside
04:12 - quotation marks and see what we get
04:15 - so i'll say city and this time when i
04:18 - press run
04:19 - then instead of kathmandu the string
04:21 - city is printed
04:23 - if i replace the quotes again and press
04:26 - run
04:26 - then this time again kathmandu is
04:28 - printed we can also change the data of
04:30 - variable holds
04:31 - after we print the city let me change
04:33 - the city to new york and print it again
04:36 - so i'll say city equals new york
04:40 - and i'll say print city now this time
04:44 - when i press run then it prints both
04:47 - kathmandu and new york
04:49 - let's try to understand what's happening
04:50 - here on line 1
04:52 - when i say city equals kathmandu then
04:54 - city holds the
04:56 - string kathmandu on line 2 when i say
04:59 - print city
05:00 - then since the current value of city is
05:01 - kathmandu that's what gets printed
05:04 - on line 4 i change the value that the
05:07 - variable city is holding
05:08 - to new york on line 5 when i print city
05:12 - then since the current value of city is
05:13 - new york that's what got printed
05:15 - on the screen as you can see we can
05:18 - change the value of a variable
05:20 - which is why they are called variables i
05:22 - hope that makes sense
05:23 - it is also possible to assign a value of
05:26 - one variable to another
05:27 - let me give you an example so i'll
05:30 - remove this code
05:30 - and i'll add another variable called
05:33 - destination
05:34 - underscore city equals
05:37 - new york now let me try something
05:40 - different
05:41 - i'll say city equals destination
05:44 - underscore city and when i print city
05:48 - then you must have guessed by now when i
05:50 - press run
05:51 - then it prints new york not kathmandu
05:54 - this is because
05:55 - the value of now city is now the value
05:57 - of destination city
05:58 - which was new york we can also assign
06:02 - numeric data to variables in a similar
06:04 - way we assign strings to variables
06:06 - let's take a look at it so i'll remove
06:08 - this code and i'll say
06:10 - my favorite
06:14 - number equals 5. now let me print this
06:17 - quickly
06:17 - so i'll say my favorite number
06:21 - i'll print that now let me create
06:23 - another variable called pi
06:25 - and i'll say pi equals 3.14 and let me
06:28 - print pi
06:30 - and now let me do the same thing i did
06:32 - before with strings so i'll change
06:35 - my favorite number
06:38 - to pi and then i'll print my
06:43 - favorite number now this time when i
06:45 - press run
06:46 - then i get 5 3.14 and 3.14 again
06:50 - this is because on line 2 the value of 5
06:53 - my favorite number was 5 on line 5 the
06:57 - value of pi
06:57 - was 3.14 and on line 8 when i print my
07:01 - favorite number
07:02 - its value has been changed to the value
07:03 - of pi which is 3.14
07:07 - if you need to print more than one
07:08 - variable and data in a single print
07:10 - statement
07:11 - we can separate them by commas let's
07:13 - take an example
07:15 - so i can say print city
07:19 - and i can put a comma here and i can say
07:21 - kathmandu
07:23 - here we are printing two strings city
07:25 - and kathmandu in a single statement
07:27 - one thing to notice here is that when we
07:30 - print objects separate by commas
07:32 - python adds a space in between them by
07:34 - default so when i press
07:35 - run then as you can see it prints city
07:38 - and kathmandu
07:39 - but you can also see that there's a
07:41 - space in between
07:42 - which was not there here and here we can
07:45 - also print variables
07:46 - and strings in a single statement i'll
07:48 - show you an example
07:50 - so i'll say city equals
07:54 - kathmandu and i can say something like
07:57 - print
07:58 - city and instead of string kathmandu i
08:01 - can do the variable
08:02 - city when i press run then i get the
08:05 - same output as before
08:06 - because the value of the variable city
08:08 - which was kathmandu is replaced in the
08:10 - print
08:12 - let's try one last example so i'll add
08:14 - another variable
08:15 - called kfc underscore locations the
08:18 - value of which is 3
08:20 - and then i can say print
08:24 - city the variable city
08:27 - and then kfc locations
08:32 - comma kfc underscore locations
08:35 - here the city string the city variable
08:38 - the kfc location string and the kfc
08:41 - underscore locations variable are
08:43 - printed in one print statement
08:45 - i'll press run and as you can see all
08:48 - four are printed one by one
08:49 - and separated by space that means
08:53 - the comma operator can be used to
08:55 - separate not just 2
08:56 - but any number of objects and python
08:58 - will print them all
09:00 - at this point we have covered all the
09:02 - basics of variables
09:04 - before ending this video let's talk
09:06 - about how to choose a good variable
09:08 - name if you have noticed in our programs
09:10 - we have used
09:11 - simple and descriptive variable names
09:13 - like city
09:14 - kfc underscore locations and destination
09:17 - underscore city
09:18 - we can give variables like c instead of
09:20 - city it works just fine
09:22 - however it is hard to understand what c
09:25 - means just by looking at the code
09:27 - so i can replace city by c here and here
09:29 - as well
09:30 - and i can run the program and i'll get
09:32 - the same output but here you can
09:34 - see for yourself that it is very
09:36 - confusing to know what c really means
09:39 - when we use good descriptive variable
09:41 - names it becomes easier to understand
09:43 - the code
09:44 - to make variable names descriptive we
09:46 - may need to use names having more than
09:48 - one word
09:49 - in that case you can separate the
09:51 - variable name by an underscore like
09:53 - destination underscore city in our
09:54 - program
09:55 - by the way there are some rules you need
09:57 - to know while creating a variable
09:59 - rule number one you cannot create a
10:01 - variable name with space in between like
10:04 - this
10:05 - you also cannot start a variable name
10:07 - with a number
10:09 - rule number three you cannot use certain
10:11 - words as a variable name
10:14 - you cannot use else as a variable name
10:16 - because else is a keyword
10:18 - these keywords have special meaning in
10:20 - python and are part of the python syntax
10:23 - we will learn more about these keywords
10:25 - as we progress through the course
10:27 - before we end this video here's a recap
10:29 - of what we learned
10:30 - we learned about three most common data
10:32 - types in python strings
10:34 - integers and floats a string is a
10:36 - textual data surrounded by codes
10:39 - integers and floats are numeric data
10:42 - integers are whole numbers
10:43 - and floats are decimals we also learned
10:46 - about variables
10:48 - variables allow us to store data so that
10:50 - we can use them later in the program
10:53 - it's possible to change the value a
10:55 - variable can hold
10:57 - and last but not the least we learned to
10:59 - give good descriptive names to variables
11:02 - that's it for this video i hope you
11:04 - learned something if you are just
11:05 - watching the video without writing any
11:07 - code
11:07 - i highly encourage you to try the
11:09 - programs in this video on your own
11:11 - the only way you can be a good
11:13 - programmer is by trying
11:15 - by the way you can find all the programs
11:17 - from this video on github
11:18 - i've provided the link in the
11:19 - description below feel free to copy the
11:21 - programs and edit them as you please
11:23 - and if you have any questions and
11:25 - feedback use the comment section below
11:27 - join me in this video series and let's
11:29 - explore the exciting world of
11:30 - programming together
11:31 - in the next video we will learn how to
11:33 - take data input from the user
11:35 - and how to print them if you like this
11:37 - video hit the like button now
11:39 - and also don't forget to subscribe to
11:40 - our channel and ring that bell icon so
11:42 - that you don't miss the next video
11:44 - thanks for watching and i'll see you in
11:45 - the next one happy programming