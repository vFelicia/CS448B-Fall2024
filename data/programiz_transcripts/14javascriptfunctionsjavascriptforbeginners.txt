00:00 - what's up guys i'm puny from programmers
00:02 - and welcome back to this series on
00:03 - javascript in this video we will learn
00:05 - about functions how we can create them
00:07 - and why they are used in programming so
00:09 - let's get started
00:14 - in programming a function is a block of
00:16 - code that performs a specific task
00:18 - functions help us to divide a complex
00:20 - program into smaller tasks which make
00:22 - our program easy to understand and
00:24 - reusable suppose you need to create a
00:26 - program that draws a circle and
00:27 - rectangle of different colors based on
00:29 - user input now instead of creating one
00:32 - big chunk of statements to create this
00:33 - program we can create three different
00:36 - functions to solve this a function to
00:38 - draw a circle a function to draw a
00:40 - rectangle and another function to color
00:43 - the circle or rectangle doing so helps
00:45 - us focus on the specific task one
00:47 - problem at a time
00:49 - now that you know why functions are used
00:51 - let's learn to create a function in
00:52 - javascript first we need to declare a
00:55 - function
00:56 - so a function is declared by the keyword
00:59 - function and then the name of the
01:01 - function so let me just call it function
01:03 - name followed by parenthesis
01:05 - and inside curly braces we have the
01:08 - function body now this structure must be
01:10 - familiar if you have already done while
01:12 - loops and for loops now that we know
01:14 - about the structure of a function let's
01:16 - directly go to an example but before
01:18 - that i want to remind you that the same
01:20 - rules of naming of variables applies to
01:22 - the naming of functions as well
01:25 - let's go to the example i'll remove this
01:27 - old code and i will call a function or
01:29 - create a function called greet
01:33 - now inside the greet function i want to
01:35 - print hello there so i'll say
01:37 - console.log
01:39 - hello
01:40 - there
01:42 - let me run this program
01:44 - you must have noticed that we didn't get
01:45 - anything
01:47 - this is because in order to run a
01:48 - function we need to call the function to
01:51 - call the function we use the function
01:53 - name with parenthesis so outside the
01:55 - function i will say greet and
01:57 - parentheses and my trusty semicolon let
02:00 - me run this code
02:02 - and you can see that this time i got
02:04 - hello there let's see how this works
02:07 - when we call the function the control of
02:09 - the program goes to the inside of the
02:11 - function and the statements are executed
02:13 - in this case we only have console.hello
02:16 - there and that's what got executed and
02:18 - that's why we got hello there in the
02:20 - output
02:21 - when this task is completed or we reach
02:24 - the end of the function then the control
02:26 - of the program goes back to the function
02:28 - call and the statements after that are
02:30 - executed in this case there are no more
02:32 - statements and that's why we ended at
02:35 - hello there
02:36 - we can verify this by adding a print
02:38 - statement after the function call so
02:40 - here i'll say console.log
02:43 - and then after
02:45 - function call
02:47 - now let me run the program
02:49 - and you can see that after hello there i
02:51 - got after function call because after
02:53 - the control of the program got
02:55 - transferred back to the greet function
02:57 - the console log was executed the useful
02:59 - thing about functions is that once we
03:01 - create a function we can call it any
03:03 - number of times let me call the greed
03:05 - function two more times to show you
03:07 - so i'll remove this code
03:09 - and i'll say greet
03:12 - and greet one more time
03:14 - now when i run this you must have
03:16 - guessed it by now
03:17 - i will get hello there three times
03:20 - so if we need to perform any repetitive
03:22 - task we can wrap the codes inside a
03:24 - function and use the function any number
03:26 - of times we just need to call the
03:28 - function again and again
03:30 - now little tip for you it's better to
03:32 - write a descriptive name for your
03:33 - function for example if a function is
03:35 - used to greet a user you can name the
03:37 - function greet or say hello if you're
03:40 - enjoying this video please also check
03:42 - out program is pro where we provide
03:43 - tutorials along with quizzes and
03:45 - challenges which will help you practice
03:47 - and test your learning in real time also
03:49 - the course includes projects to give you
03:51 - an awesome experience of how programming
03:52 - works in the real world and for our
03:54 - youtube subscribers we are giving 50 off
03:56 - on the yearly plan sign up by scanning
03:58 - this qr code or use the link in the
04:00 - video description to claim your discount
04:03 - in the past example we've created a
04:05 - function that simply displays a message
04:06 - hello there however that's kind of
04:08 - boring we can create a function that can
04:11 - accept some value for example instead of
04:13 - printing hello there we might want our
04:15 - function to accept our name and print
04:17 - our name let me show you how we can do
04:19 - that i'll use the previous code and
04:21 - inside the parentheses first let me
04:23 - remove this extra to greets
04:26 - and in the function definition inside
04:28 - the parenthesis i will add name
04:31 - now i can use the name parameter inside
04:33 - the function as a variable so instead of
04:36 - hello there let me say hello
04:39 - plus
04:41 - name
04:42 - now let me run this program
04:44 - when i press run
04:47 - oops i got hello undefined this is
04:50 - because we have defined the function to
04:52 - accept a parameter name
04:54 - however while calling the function we
04:56 - haven't passed any values so the
04:59 - function uses the default value of name
05:01 - which is undefined
05:03 - in this case we need to pass a value
05:05 - during the function call so when i call
05:07 - the function let me simply pass the
05:09 - string jude
05:10 - to the function now this value we passed
05:13 - will be assigned to the argument name
05:16 - when the function is called
05:18 - this time when i run the code
05:21 - you can see that i got hello jude now i
05:24 - can call the greet function again with
05:26 - another
05:27 - argument let's say john
05:30 - and you must have guessed the output by
05:31 - now when i press run
05:34 - i get hello jude and hello john my
05:36 - program is now much more dynamic than
05:38 - before
05:41 - it's possible to pass multiple arguments
05:43 - to a function as per our needs if we
05:45 - need to pass multiple arguments to a
05:46 - function we can separate them by commas
05:49 - let me create a new function that will
05:50 - add two numbers i'll create a function
05:54 - called add numbers
05:56 - and inside the parenthesis i'll write n1
05:59 - comma n2
06:02 - now inside the body of the function
06:04 - i can create a result variable that will
06:07 - store the sum of n1 and n2
06:10 - and let me print the result so i can say
06:12 - console.log
06:13 - the sum
06:15 - is
06:16 - and i can say result
06:19 - now i'll create two variables number one
06:20 - and number two
06:22 - with values
06:23 - say number one
06:25 - equals
06:26 - let me find a random number let's say
06:29 - 6.6
06:30 - and
06:31 - number two
06:33 - i will say
06:34 - 2.5 for example
06:37 - and finally i need to call the function
06:39 - by passing the arguments number one and
06:41 - number two
06:42 - so
06:45 - oops this should be number two now i'll
06:47 - call the function add numbers
06:50 - and the parameters will be number one
06:53 - number two
06:55 - in this program we are passing variables
06:57 - number one and number two as function
06:59 - arguments in such a case the value of
07:01 - these variables will be assigned to the
07:03 - parameters of the function n1 and n2
07:06 - respectively
07:07 - so inside the function n1 will be 6.6
07:10 - and n2 will be 2.5 let me run this code
07:16 - and you can see that i got 9.1 which is
07:19 - in fact the sum of 6.6 and 2.5
07:25 - in the previous program we added two
07:27 - numbers and printed the result inside
07:29 - the function however instead of printing
07:31 - the result it will make more sense if
07:33 - you can get back the sum from the
07:35 - function and use it somewhere else in a
07:36 - program
07:37 - we can achieve this by using a return
07:39 - statement let me show you i'll remove
07:42 - this print statement
07:44 - and instead of console.log let me say
07:45 - return
07:47 - result
07:48 - when we return a value it comes back to
07:50 - the function call and we can assign this
07:52 - return value to a variable like this
07:54 - so i'll say let let me declare a
07:57 - variable called output and i can say let
08:00 - output equals add numbers number one and
08:02 - number two here the output variable will
08:05 - store whatever is returned from the add
08:07 - numbers function call
08:09 - and in this case since it is the result
08:11 - variable which has n1 plus n2 i will get
08:13 - the sum of 6.6 and 2.5 inside the output
08:17 - variable so let me verify this by
08:19 - printing the output i can say
08:21 - console.log the sum
08:23 - is
08:24 - and print the output variable
08:26 - now when i press run
08:29 - you can see that i got the same result
08:31 - as before but this code is more dynamic
08:34 - because i can say let output 1 equals
08:38 - add numbers and i can give this 43 and
08:41 - 56
08:43 - and now i can say the sum
08:46 - the second oops
08:49 - the second sum is
08:52 - and i can say output
08:55 - 2
08:56 - or output 1
08:58 - when i press run
09:01 - as you can see the i got the two sums
09:04 - stored in two different variables
09:07 - because i was returning the value
09:08 - instead of printing the value inside the
09:10 - function
09:12 - now there's something very interesting
09:13 - about the return statement as soon as a
09:15 - return statement is encountered inside a
09:17 - function the control of the program
09:18 - immediately moves to the place from
09:20 - where the function is called so in a way
09:22 - the return statement also terminates the
09:24 - function any statement after return are
09:27 - ignored by the function we can verify
09:29 - this by adding a print statement after
09:31 - the return statement so here i'll say
09:33 - console.log
09:34 - and i can say after
09:36 - return statement now let me run the code
09:39 - to verify
09:40 - and you can see that i did not get after
09:42 - return statement printed anywhere that's
09:45 - because the return immediately
09:47 - terminated the function as soon as it
09:48 - was encountered
09:51 - okay guys we need a support to keep
09:52 - these kinds of content free for all
09:54 - users youtube really likes engagement on
09:56 - the video so leave a comment below press
09:58 - that like button and hit subscribe if
10:00 - you haven't already let's get the
10:01 - engagement score high up so that more
10:03 - people can discover and enjoy these
10:05 - courses
10:08 - at this point we've covered all the
10:09 - basics of how to create your own
10:11 - function these functions we create
10:13 - ourselves are known as user defined
10:15 - functions now there's another type of
10:17 - function that i've not told you about
10:19 - and they are called built-in functions
10:21 - this kind of function is already defined
10:23 - by the language and we can directly use
10:25 - them in our program for example sqrt is
10:28 - a built-in function that computes the
10:30 - square root of a number we can directly
10:32 - use this function in our program let me
10:34 - show you how
10:35 - i'll start by removing my old code and
10:38 - then let me create a variable say num
10:41 - and assign it a value of 9.
10:44 - now i'll use the sqrt function the sqrt
10:47 - function is defined inside the math
10:49 - object so instead of just sqrt i'll have
10:52 - to say
10:54 - math dot sqrt
10:56 - and i can pass any value or variable so
10:59 - in this case i'll pass num now because
11:01 - the square root is returned i can say
11:04 - let
11:06 - square root
11:07 - equals math.sqrt num and let me print it
11:11 - so i can say console.log
11:13 - the
11:14 - square root of
11:17 - say
11:18 - num
11:19 - is
11:21 - square
11:23 - root
11:25 - and now when i press run
11:28 - you must have noticed that we did not
11:29 - have to worry about the definition of
11:31 - this function sqrt we can simply pass a
11:34 - number and expect to get the square root
11:36 - back apart from sqrt there are numerous
11:38 - built-in functions that we can directly
11:40 - use in our program actually we've
11:42 - already been using some of them without
11:44 - even realizing it remember console.log
11:46 - that's also a built-in function
11:49 - if you're interested you can find all
11:51 - the built-in functions available in
11:52 - javascript on the programmings.com
11:54 - website i'll leave the link in the
11:55 - description below
11:58 - in 2015 a new version of javascript
12:00 - called es6 was launched it introduced a
12:03 - new way of creating a function called
12:05 - arrow functions this arrow function is
12:07 - equivalent to our regular function
12:09 - as you can see arrow functions allow us
12:11 - to write functions quickly and more
12:13 - concisely in the next video we will
12:15 - learn about arrow functions in much more
12:17 - detail
12:20 - now to practice what we have learnt here
12:22 - is a programming task for you can you
12:23 - create a program that can tell us if
12:25 - someone is eligible to vote for this
12:27 - create a function can vote that accepts
12:29 - the age of a person
12:31 - if the age is 18 or above 18 then return
12:34 - true or false
12:36 - call the function for ages 17 20 and 65
12:39 - to verify if your function is working
12:41 - correctly or not you'll find the answer
12:43 - to this question in our github
12:44 - repository also if you want to revise
12:46 - these concepts you can find all these
12:48 - programs in our github repository as
12:49 - well i'll leave the link in the video
12:51 - description below
12:52 - now that we have reached the end of this
12:53 - video it's time for the programming quiz
12:56 - what will be the output of the following
12:57 - code
12:59 - comment answer below and happy
13:01 - programming
13:06 - [Music]
13:11 - you