00:00 - hey guys my name is father manodar and i
00:02 - am a software developer here at
00:04 - programmies i'm really glad to be an
00:06 - instructor for this video series on c
00:08 - programming and in this series we will
00:10 - learn everything you need to know to get
00:12 - started with c
00:14 - by the end of this series you will have
00:15 - a good understanding of c and
00:17 - programming in general so let's get
00:19 - started
00:24 - so what is c programming c is a general
00:26 - purpose programming language that has
00:28 - wide range of application it was
00:30 - initially developed to rewrite unix
00:32 - operating system apart from that modern
00:35 - web browsers like google chrome firefox
00:37 - database management system like mysql
00:40 - and hundreds of other applications you
00:42 - see c is pretty old language created
00:44 - during 1970s and with the rise of new
00:47 - languages like python and javascript
00:49 - there may arise an important question is
00:52 - he outdated
00:53 - the simple answer to this is no while
00:56 - these new languages have their own
00:58 - benefits c is still a popular language
01:00 - for several reasons
01:02 - c is very fast and efficient so if you
01:04 - are working an application where
01:06 - efficiencies must like compilers or
01:09 - operating systems c is a good choice
01:12 - also c programming allows us to access
01:15 - the hardware of computers on a deeper
01:17 - level that modern languages do not
01:19 - that's why there is still a lot of
01:21 - demand for c programmers according to
01:23 - glassdoor a popular job portal site
01:26 - there are 18 000 active job openings for
01:29 - c programmers in united states in fact
01:32 - many universities teach students c
01:34 - programming as the first language and it
01:36 - was the first programming language for
01:38 - me as well there is a good reason for it
01:41 - learning c helps you understand how the
01:43 - software and hardware interact with each
01:45 - other as c allow us to directly work
01:48 - with computer memory
01:50 - so on the question of should you learn c
01:53 - while c programming may not be the
01:54 - hottest language out there we at
01:56 - programmies believe every programmer
01:58 - should learn c eventually it helps us to
02:01 - understand programming from a deeper
02:02 - level here is a line from joel spalsky
02:05 - the founder of stack overflow
02:08 - if you can't understand why this code
02:10 - copies a string you are a programming
02:12 - based on superstition so getting to the
02:15 - basics and understanding it is the must
02:17 - for every programmer
02:21 - before we learn to write our very first
02:23 - program our computer needs to install a
02:26 - sip compiler and a text editor to make
02:28 - this process easier we have created an
02:31 - online tool that lets you run c on the
02:33 - browser without installing anything to
02:36 - access our online c editor we'll open
02:38 - our browser and go to this url
02:41 - www.programmies.com
02:44 - [Music]
02:46 - slash
02:47 - c dash programming
02:50 - slash online
02:52 - dash compiler
02:55 - [Music]
02:56 - you can also find the link in the video
02:58 - description below
03:00 - we will write our code in this area and
03:02 - when i hit run it will execute the code
03:04 - and so output in this area
03:09 - now let's write our very first c program
03:12 - we'll create a program called hello
03:14 - world if you do not know a hello world
03:16 - is a simple program that displays hello
03:18 - world on the screen since it's a simple
03:21 - program it is often used to introduce a
03:23 - new programming language to beginners
03:26 - lighting even a simple program like this
03:28 - also involves a couple of steps so bear
03:30 - with me first we need to create the main
03:33 - function
03:34 - int
03:35 - mean
03:37 - with parentheses and with curly braces
03:40 - this is the main function it's the
03:42 - starting point of every c program now to
03:45 - mark the end of this program we will
03:47 - need to use return statement like this
03:52 - although this part is not necessary it's
03:54 - considered a good programming practice
03:57 - now to print the text in c programming
03:59 - we first need to import the file named
04:01 - stdio.h
04:03 - for that i'll write here has
04:05 - include
04:08 - stdio.h
04:11 - for now just remember that every c
04:14 - program will have this structure and we
04:16 - will write the code inside this curly
04:18 - braces so to print the hello world i'll
04:21 - write here printf
04:25 - bracket inside quotation hello
04:30 - world
04:32 - and end this statement with a semicolon
04:35 - now let me run this code
04:39 - as you can see in the output we get
04:41 - hello world
04:43 - here are the points to take away from
04:44 - this video every c program start from
04:47 - this main function
04:49 - we will write our code inside these
04:51 - curly braces
04:53 - if you're just watching videos without
04:55 - actually writing code you may soon
04:56 - forget and lose interest so i highly
04:59 - recommend you to practice what you have
05:01 - watched as we move forward in this
05:03 - course
05:06 - in this video we will be learning about
05:08 - variables more specifically we will
05:10 - learn how to create variables and store
05:12 - data in them so that we can use them
05:14 - later in our program a variable is a
05:16 - name given to a memory location inside
05:19 - our computer where we can store data let
05:21 - me give you an example i will go to my
05:23 - compiler here you can see int is here
05:26 - the name of the variable is is and to
05:29 - create this variable we use this keyword
05:31 - ind this end keyword is a data type
05:34 - which indicates that the ace variable
05:36 - can only store integer values in c
05:39 - programming every variable must have a
05:41 - type like this and we will learn about
05:43 - these data types in detail in next video
05:46 - and in this video we will continue using
05:48 - in to create our variables once we
05:50 - create a variable like this
05:52 - int is we can also store data into it
05:56 - like is equals to 25
05:59 - here we have first created a variable
06:01 - named is and then we have assigned an
06:03 - integer value
06:05 - 25 to this is variable by the way we
06:08 - have to use this semicolon at the end to
06:11 - mark the end of this statement and it is
06:14 - also possible to create variable and
06:16 - assign value in a single line let me
06:18 - show you how so instead of writing these
06:20 - two lines of code we can just merge them
06:23 - and write a single line of code like
06:25 - this
06:26 - so i'll cut this out
06:29 - if you have watched the last video we
06:31 - have used a structure that every c
06:33 - program follows i'll get back to my
06:35 - compiler if you remember this is the
06:38 - basic structure of c program
06:40 - so now let's add a variable inside this
06:43 - main function
06:45 - int
06:46 - is equals to 25
06:51 - if we run this code a variable is
06:53 - created but will not see any output and
06:56 - to get output in c programming we will
06:59 - use printf function
07:01 - before we print this variable let's
07:03 - first try to print a normal text then in
07:05 - the next step we will learn to print
07:07 - variables
07:08 - now to print a line of text we use the
07:10 - printf function
07:12 - print f
07:14 - drag it inside quotation
07:17 - c programming
07:22 - and we will always end this statement
07:24 - with a semicolon
07:26 - now let me run this code
07:28 - and we can see c programming is printed
07:31 - on the screen
07:32 - by the way our variable is is also
07:35 - created but we haven't seen it because
07:37 - we haven't printed it now let's print
07:39 - our variable
07:41 - i just want to print a variable so i'll
07:43 - cut this part that prints a line of text
07:46 - then i'll write
07:47 - printf bracket inside quotation
07:51 - percent d
07:52 - comma and the name of the variable in
07:55 - this case the name of the variable is is
07:58 - to print a variable in c programming we
08:00 - use something called format specifier
08:03 - here percent d
08:05 - is a format specifier
08:07 - now let's run this code
08:10 - as we can see 25 is printed as an output
08:15 - so what happens here is that here person
08:18 - d is replaced by the value of a is
08:20 - variable if we have to print other data
08:22 - like characters and decimals we use
08:25 - different specifier like percent c and
08:27 - percent f which we will discuss in the
08:29 - next video let me modify this program a
08:32 - bit
08:34 - here i'll write here
08:36 - is colon
08:38 - now let me run this code again
08:41 - now we can see this is column is printed
08:44 - as it is and percent d is replaced with
08:47 - the value of a's
08:52 - now that we know how to store data in
08:54 - variables let's see how we can change
08:56 - their values
08:57 - yes we can change the values of variable
09:00 - that's why it is called variable let me
09:02 - give you an example i'll go back to my
09:04 - previous example currently the is
09:07 - variable stores 25 now i'll assign a new
09:10 - value to this a's variable is equals to
09:13 - 31
09:14 - and i'll print this
09:20 - new is
09:22 - semicolon
09:24 - percent d and comma and again is
09:28 - and end this with semicolon let's run
09:30 - this program
09:32 - as you can see initially the value of is
09:34 - was 25 then i change the value of is by
09:37 - assigning 31 now let me put this second
09:40 - line of code into a new line for that
09:43 - i'll use backslash n
09:45 - and i'll run this again
09:47 - and you can see the output
09:49 - it is more readable and more clearer so
09:52 - here this backslash n is a new line
09:54 - character simply speaking it is a enter
09:57 - key
09:58 - if you are enjoying this video you will
10:00 - definitely love our interactive c
10:02 - programming course and on programmies
10:03 - pro the course includes easy to follow
10:05 - tutorials along with quizzes and
10:07 - challenges to practice and test your
10:09 - coding knowledge in real time you will
10:12 - also be creating projects to experience
10:14 - how programming works in the real world
10:16 - and in the end you will receive a
10:18 - certificate which will help you land
10:20 - your first job sign up now by using this
10:22 - qr code or you can also use the link in
10:25 - the description box
10:29 - so far we saw that we can assign data
10:32 - directly to a variable however we can
10:34 - also assign a value of one variable to
10:36 - another let me show you an example in
10:39 - this example as you can see we have
10:41 - assigned value 33 to this first number
10:44 - variable and we have then printed this
10:46 - first number variable
10:48 - now i'll assign another variable second
10:51 - number
10:55 - and instead of assigning any data i'll
10:58 - assign here first number
11:03 - then i'll print this
11:07 - backslash n so that we can get a
11:09 - readable output
11:12 - second number
11:14 - equals to percent d
11:17 - and name of the variable that is second
11:19 - number
11:23 - now let's see what will happen i'll run
11:25 - this code
11:28 - and we can see first number and second
11:30 - number variable holds the same value 33
11:34 - let's see how this program works line by
11:36 - line first we have created this variable
11:38 - first number and assigned value 33 to it
11:41 - then we have printed this variable
11:44 - and then we assigned another variable
11:46 - second number and assigned the value of
11:48 - the first number to it then we have
11:50 - printed the second number
11:56 - we can also declare multiple variables
11:58 - in a single line let me give you an
11:59 - example here i have created two
12:02 - variables variable 1 and variable 2 and
12:05 - i have separated them with a comma in a
12:07 - single line let me modify this program a
12:10 - bit
12:11 - i'll assign a value 25 to this variable
12:13 - too here the same two variables are
12:16 - created however the value of variable 2
12:19 - is now 25 by the way in c programming if
12:22 - we do not assign a value to a variable
12:24 - its value cannot be determined in this
12:27 - program variable 1 will have some random
12:29 - unpredictable value however some
12:31 - compilers may store 0 in them
12:34 - ok guys we need your support to keep
12:37 - this type of content free for all users
12:40 - youtube really likes engagement on the
12:42 - video so leave a comment below press
12:44 - that like button and hit subscribe if
12:46 - you haven't already let's get the
12:48 - engagement score high up so that more
12:50 - people can discover and enjoy these
12:52 - courses
12:56 - at this point we have covered all the
12:58 - basics of variable before ending this
13:00 - video let's talk about how to choose a
13:02 - good variable name if you have noticed i
13:05 - have used descriptive variable names
13:07 - like a's and first number we could have
13:09 - given variable names like a instead of
13:12 - a's and fn instead of first number
13:15 - it works just fine however it's hard to
13:18 - understand what a means just by looking
13:20 - at the code so when we use good
13:23 - descriptive variable names it becomes
13:25 - easier to understand the code
13:27 - and to make the variable name
13:29 - descriptive we may need to use names
13:31 - having more than one word in such cases
13:34 - we follow the camel case format while
13:36 - giving the names to the variable in
13:38 - camel case the first word will be of
13:40 - small later and the first letter of the
13:42 - second word will be of capital letter
13:44 - like the example shown on the screen
13:47 - by the way there are some rules you need
13:48 - to know while creating a variable
13:51 - you cannot create variable names with
13:53 - space in between you cannot start
13:55 - variable names with numbers and you
13:58 - cannot use certain words as variable
14:00 - names we cannot use if as a variable
14:03 - name because if is a keyword these
14:05 - keywords are part of c programming
14:07 - syntax and have special meaning in c we
14:10 - will learn about these keywords as we
14:12 - progress through the course it's time
14:14 - for programming squeeze can you guess
14:16 - the output of this program
14:20 - hey guys welcome back to this series on
14:22 - c programming in this video we will be
14:24 - learning about data types in c more
14:27 - specifically we will learn about
14:28 - different types of data available and
14:31 - how to use them data type specify the
14:33 - type of data that can be stored in
14:35 - variable let's look at this example here
14:38 - is a variable and int is the data type
14:40 - of this variable the data type
14:42 - determines two things first the type of
14:45 - variable the n-type means our variable
14:48 - can only store integer values second the
14:51 - size of the variable the size of an in
14:54 - variable is usually four bytes that
14:56 - means an in variable can store 2 to the
14:58 - power 32 distinct values
15:01 - by the way in c programming every
15:03 - variable we create must have a data type
15:06 - assigned to it now let's see different
15:08 - data types available in c and how we can
15:10 - print these variables
15:14 - let me copy a list of data types here in
15:16 - our text editor so that it's bit easier
15:20 - for us to see what they are used for
15:23 - now let's try these data types in our
15:25 - program one by one
15:31 - we have already discussed this in-type
15:33 - variable can only store integer values
15:36 - that means it allow us to store whole
15:39 - numbers the number can be 0 positive
15:42 - number and negative number
15:43 - let's see an example
15:46 - as we have already discussed in our
15:48 - previous video this is the basic outline
15:50 - of every c program so i'll continue on
15:52 - this
15:55 - and i'll assign
15:57 - int is equals to 10
16:02 - here you can see i have assigned 10 to
16:05 - our in variable is now let's print this
16:07 - using printf function
16:10 - print f bracket inside quotation percent
16:14 - d
16:15 - comma name of the variable that is is
16:17 - and end this with the semicolon
16:20 - let me run the program as we can see 10
16:23 - is printed on the screen
16:27 - here person d is replaced by the value
16:29 - of a's variable
16:31 - and if we want to make our output much
16:34 - more clear and readable we can add text
16:37 - here like this
16:38 - and let's run this again
16:41 - and as you can see our output is much
16:44 - more readable than before
16:49 - in c programming we use either float or
16:52 - double data types for creating variables
16:54 - that can store decimal and exponential
16:56 - values the only difference between the
16:59 - double and float is the size the size of
17:01 - float is usually 4 bytes and the size of
17:04 - double is usually 8 bytes hence double
17:07 - can be used to store numbers with more
17:09 - precision now let's try to use float and
17:12 - double in our code we'll start with
17:14 - double type
17:16 - double number
17:19 - equals to 12.45
17:22 - here number is a double type variable
17:24 - and we have also assigned a floating
17:27 - point value to this double variable
17:30 - now i will print this number using
17:31 - printf function as before
17:35 - printf bracket inside quotation percent
17:38 - lf
17:40 - comma name of the variable number
17:43 - for double we use percent lf format
17:46 - specifier so now let's run the program
17:50 - as you can see the output is printed on
17:52 - the screen however instead of 12.45 it
17:55 - shows 12.45 with multiple zeros after
17:59 - that this is because the double variable
18:01 - takes six digits after decimal points so
18:04 - it fills the remaining decimal places
18:07 - with random values if we want to avoid
18:09 - those random values we can print output
18:12 - only up to two decimal point all we have
18:14 - to do is to add point two after the
18:17 - percentage
18:19 - now let me run this code
18:22 - as you can see only two digits after the
18:24 - decimal point is printed
18:26 - and we can also use the float data type
18:29 - in the same way
18:31 - so i'll write
18:32 - float
18:34 - number 1
18:35 - equals to 10.9
18:38 - f
18:40 - and i'll print this
18:44 - print f bracket inside quotation percent
18:47 - f
18:48 - comma
18:49 - number one
18:50 - [Music]
18:52 - here i have added a float variable with
18:55 - value 10.9 and to indicate
18:58 - it's a float value rather than a double
19:00 - value i have added f at the end of the
19:03 - number here f is not a text it's just
19:06 - the syntax we use in c for float numbers
19:09 - and percent f is the format specifier we
19:12 - use for the float variables now let me
19:15 - run this code
19:18 - as you can see our output is bit messy
19:21 - so i'll use backslash anyare to make our
19:25 - output much more readable let's run this
19:27 - again
19:29 - and you can see the output here
19:32 - as in double we can also remove the
19:34 - unwanted digits after the decimal in
19:36 - float as well
19:38 - let's try it
19:40 - i'll add here
19:41 - 0.1 after the percentage and i'll run
19:45 - this
19:46 - and as you can see we get the desirable
19:48 - output
19:50 - by the way we can also use double and
19:53 - float to store exponential numbers let
19:56 - me give you an example
19:57 - first i will clean up my editor
20:01 - now let me store an exponential number
20:04 - double
20:07 - number
20:08 - equals to 5.5
20:11 - exponential 6
20:14 - here 5.5 e 6 is equals to 5.5 into 10 to
20:19 - the power 6 let me print this number to
20:22 - verify this
20:23 - [Music]
20:31 - now let me run this code
20:34 - as we can see this number is indeed
20:36 - equals to 5.5 into 10 to the power 6.
20:40 - here is a tip for you even though both
20:43 - float and double can be used for
20:44 - floating point numbers we suggest you to
20:47 - use double simply because double can
20:49 - store decimal parts with more precision
20:52 - for larger numbers okay guys we need
20:54 - your support to keep these types of
20:56 - content free for all users youtube
20:59 - really likes engagement on the video so
21:01 - leave a comment below press that like
21:03 - button and hit subscribe if you haven't
21:05 - already let's get the engagement score
21:07 - high up so that more people can discover
21:10 - and enjoy these courses
21:16 - now let's talk about character type data
21:19 - we use the care keyword to represent
21:21 - character type data and to print them we
21:23 - use person c format specifier let me
21:25 - give you an example
21:28 - your character is a care variable
21:31 - and i have assigned jet to this
21:33 - character variable and notice we have
21:35 - used this single quotes for character
21:38 - data
21:39 - and also notice i have used percent c
21:42 - format specifier for the care variable
21:44 - when i run the code i'll get the
21:46 - character jet as an output
21:50 - technically speaking a character data is
21:52 - internally stored as an integer rather
21:54 - than the character itself so if we use
21:57 - person d to print a care variable we can
22:00 - see its equivalent integer value so i'll
22:02 - go back to my code editor now i'll print
22:05 - its integer value
22:07 - print f bracket inside quotation i'll
22:10 - use person t because we want to print
22:13 - the integer value
22:17 - now i'll run this code
22:22 - and we can see 122 is printed if we use
22:26 - percentage
22:28 - so when working with character we need
22:30 - to remember just three things one we use
22:33 - single quotation for characters
22:35 - second to print a character we use
22:37 - percent c format specifier
22:40 - and third
22:41 - characters are internally stored as
22:44 - integers
22:49 - before we end this video let's talk
22:51 - about the size of operator which can be
22:53 - used to find the size of data types such
22:55 - as int double float and carry using the
22:58 - size of operator let me give you an
23:00 - example here i have used size of
23:03 - operator to find the size of int and
23:05 - double variable it gives the size in
23:08 - bytes let me run this program
23:11 - as you can see the size of ink is 4
23:13 - bytes and the size of double is 8 bytes
23:16 - by the way as you see we have mentioned
23:18 - it already here the size of int is 4
23:21 - bytes and the size of double is 8 bytes
23:24 - and the size of float is 4 bytes
23:26 - similarly the size of cad is 1 byte
23:29 - in this video we have covered 4 commonly
23:32 - used data types there are many other
23:34 - data types in c programming which we
23:36 - will cover as we progress through the
23:38 - course
23:40 - in this video we will learn to take
23:42 - input from users and store it in
23:44 - variables in c programming we use the
23:47 - scanf function to take input from the
23:49 - user the scanf function takes input from
23:51 - the user and store it in a variable
23:53 - similar to printf the concept of format
23:56 - specifier is also used here let's see an
23:58 - example
24:00 - as we have already discussed in our
24:01 - previous video this is the basic outline
24:03 - of every c program
24:05 - so i'll continue on this
24:07 - first i'll declare a variable
24:10 - int is
24:12 - now i will use scanf function
24:15 - to take the input from the user
24:18 - [Music]
24:22 - and finally i'll use printf function to
24:24 - print the variable
24:26 - [Music]
24:31 - now let me explain it in much detail
24:35 - here is an in variable to store the
24:37 - input data and notice the scanf function
24:40 - it has two parts first is the format
24:43 - specifier that represents the type of
24:45 - input data in this case it is an integer
24:48 - and second is the variable name
24:51 - notice that we have used the
24:53 - ampersand before the variable name here
24:56 - ampersand represents the memory address
24:58 - and ampersand is represents the memory
25:01 - address of the ace variable
25:03 - don't worry about the memory address for
25:05 - now we will learn about them in upcoming
25:08 - videos
25:09 - now
25:10 - the scanf function will take the integer
25:12 - input from the user and store it in the
25:15 - address of the ace variable
25:17 - to verify that the input value is stored
25:20 - in the variable i am also printing the
25:23 - variable using printf function
25:25 - now let me run this code
25:27 - here you can see the cursor i'll provide
25:30 - value 22
25:31 - and press enter
25:33 - as you can see the input value is
25:35 - printed
25:37 - here initially i get confused about
25:39 - where to find the cursor to input a
25:41 - value so i'll print a message to ask the
25:44 - user for the input value using printf
25:46 - statement
25:48 - so
25:49 - printf
25:51 - bracket inside quotation i'll write
25:53 - misses
25:54 - enter input
25:58 - value
26:02 - [Music]
26:04 - now let's run this
26:06 - as you can see i get the message enter
26:09 - input value i'll provide 22 and press
26:12 - enter
26:13 - here you can see
26:14 - the value is printed
26:16 - now this message
26:18 - enter input value make it obvious to
26:21 - input value
26:23 - okay guys we need your support to keep
26:25 - these types of content free for all
26:27 - users youtube really likes engagement on
26:29 - the video so leave a comment below press
26:31 - that like button and hit subscribe if
26:34 - you haven't already let's get the
26:36 - engagement score high up so that more
26:38 - people can discover and enjoy these
26:40 - courses
26:44 - now that we know how the scanf function
26:46 - works let's use it to take the double
26:49 - and character input i'll use the same
26:50 - program from earlier and i'll remove
26:52 - this part
26:54 - now first i'll create two variables
26:58 - double number
27:01 - and
27:02 - character alphabet
27:07 - then i'll use printf function
27:09 - to print the
27:11 - message for the user enter
27:14 - double
27:18 - input and similarly i'll use scanf
27:22 - function to get the input from the user
27:33 - here you can see
27:34 - i have used percent lf to take the
27:36 - double input
27:39 - now
27:40 - i'll use printf function to show the
27:42 - message again
27:46 - enter character
27:49 - input
27:52 - and i'll use scan a function to take the
27:54 - character input from the user
28:02 - and finally i'll print both the values
28:04 - using printf function
28:14 - now before we run this program i'll add
28:17 - here backslash n so that we get a
28:19 - readable output now let's run this
28:22 - program
28:23 - for a double input i'll enter 22.1
28:27 - and for character input i'll enter jet
28:32 - as you can see the double and the
28:34 - character values are printed as expected
28:38 - if you are enjoying this video you will
28:39 - definitely love our interactive c
28:41 - programming course on programmies pro
28:43 - the course includes easy to follow
28:45 - tutorials along with quizzes and
28:47 - challenges to practice and test your
28:49 - coding knowledge in real time you will
28:51 - also be creating projects to experience
28:54 - how programming works in the real world
28:56 - and in the end you will receive a
28:57 - certificate which will help you land
28:59 - your first job sign up now by using this
29:02 - qr code or you can also use the link in
29:05 - the description box
29:10 - in our earlier program we took double
29:12 - and character input from the user for
29:14 - that we have used to scanf function
29:17 - however we can also take multiple inputs
29:19 - together using a single scanner function
29:22 - let me show you
29:23 - i have the same code from earlier i'll
29:26 - first remove this code
29:30 - now i'll change this text from double
29:32 - input to input values
29:38 - now in the scanf function
29:41 - i'll add percent c after percent lf
29:45 - and i'll add here
29:47 - ampersand
29:49 - alphabet after ampersand number with
29:53 - comma in between
29:54 - here in the scan if percent lf is used
29:57 - for double input and percent c is used
30:00 - for character input now let's run this
30:03 - code
30:04 - i'll provide 30.6 double value and then
30:08 - character value c
30:10 - and then press enter
30:12 - as you can see respective values are
30:15 - printed
30:18 - now that i have shown you many examples
30:20 - of taking double and character inputs
30:22 - from the user i want you to write a
30:23 - program to take integer and float input
30:26 - from the user so go ahead and comment
30:28 - your program it's time for programming
30:30 - squeeze
30:31 - what is the correct way to take double
30:34 - input
30:37 - in this video we will learn to write
30:39 - comments in c programming we'll also see
30:41 - why comments are important comments are
30:44 - hints that we add to our program to make
30:46 - our code easier to understand let's see
30:49 - an example
30:50 - i have this program that brings a
30:52 - variable to make this code a bit more
30:54 - readable i can add comment here
30:58 - like this
31:02 - create
31:03 - a variable
31:05 - [Music]
31:08 - and i'll add another comment here
31:13 - print the value
31:18 - data variable
31:22 - here these lines that start with two
31:25 - forward slashes
31:26 - are comments we add them to make our
31:29 - program easier to understand for
31:31 - everyone
31:32 - let's see what happens when we run this
31:34 - program
31:36 - as you can see the program runs normally
31:39 - without any issue this is because c
31:41 - programming completely ignores the line
31:44 - that start with double forward slashes
31:47 - we can also put the comment and our code
31:50 - in the same line
31:52 - for that i'll cut this and put this in
31:55 - the same line with the code
31:57 - i'll do this
31:59 - for this comment as well
32:03 - now i'll run this code and see what
32:05 - happens
32:07 - you can see that the code before two
32:09 - forward slashes are executed and all
32:12 - comments are ignored
32:14 - we can add any number of comments
32:17 - anywhere in our program however if our
32:20 - code is self-explanatory there is no
32:22 - need to use comments
32:24 - this only makes our code very messy so
32:27 - i'll remove these comments from the
32:29 - program
32:35 - we can also use comments to debug our
32:37 - code it is a common practice to comment
32:40 - out code so that it is ignored rather
32:42 - than removing them completely let me
32:44 - give you an example
32:46 - in this example i have created a program
32:49 - to take a's and height from the user
32:51 - suppose in this program i was not
32:53 - required to take the height input from
32:55 - the user so instead of removing the code
32:58 - related to height what i can do is i can
33:01 - simply add a double forward slash at the
33:04 - beginning of this line so that they
33:06 - become comments so to make them comments
33:09 - i'll just add forward slash here
33:14 - so i'm adding forward slash to every
33:17 - code
33:18 - that is related to height
33:20 - now the codes will be there if we need
33:22 - them in future but they are completely
33:24 - ignored by the c compiler
33:28 - now let me run this code
33:30 - as you can see
33:33 - it says enter the is i'll enter 29
33:37 - and press enter
33:39 - here the output says is equals to 29 but
33:42 - these lines
33:44 - are completely ignored
33:48 - now later on if we need height
33:50 - again all we need to do is to remove
33:54 - these forward slashes
34:01 - and they will now become statement not
34:03 - comment
34:05 - now let me run this code again
34:08 - i'll enter the is 29
34:11 - and i'll add your height equals to 11
34:15 - and you can see the output on the screen
34:19 - a little pro tip for you remember the
34:21 - keyword shortcut to apply comments in
34:24 - most text editors it's ctrl forward
34:27 - slash if you are on windows and command
34:29 - forward slash if you are on mac this
34:31 - will be very helpful in debugging our
34:34 - code
34:36 - in c programming there is another type
34:38 - of comment that allow us to comment on
34:40 - multiple lines at once let me give you
34:43 - an example
34:44 - suppose we want to comment these three
34:46 - lines we can do that by typing forward
34:49 - slash and asterisk at the beginning and
34:52 - asterisk and forward slash at the end
34:55 - so let's do that
34:56 - forward slash and asterisk at the
34:58 - beginning
35:00 - and asterisk and forward slash at the
35:03 - end
35:04 - now let's run this code
35:07 - i'll enter 29
35:10 - as you can see the code runs without any
35:13 - errors and these comments are ignored
35:19 - i can also use keyboard shortcut to use
35:22 - multi-line comments let me show you
35:25 - first i'll remove this forward slash and
35:27 - asterisk
35:28 - at the beginning and i'll also remove
35:31 - this asterisk and forward slash at the
35:33 - end
35:35 - and i'll select these three lines and
35:37 - press ctrl shift forward slash as you
35:40 - can see these lines are now commented if
35:42 - you are on mac you can press command
35:44 - shift forward slash
35:46 - here instead of ctrl shift forward slash
35:49 - if i press ctrl forward slash only these
35:52 - three lines will be commented at once
35:54 - but they will be commented with single
35:57 - line comments
35:58 - the multiline comments are useful if we
36:00 - need to explain the code a bit more and
36:03 - add more text to understand the code
36:10 - now let's take a moment to discuss why
36:12 - comments are important
36:14 - imagine that you are working on a huge
36:16 - project for a client since you were on a
36:18 - tight schedule you decide to ignore
36:20 - comments you successfully delivered it
36:22 - to the client and clients are happy
36:24 - about it fast forward in a couple of
36:27 - months the client want to update some
36:29 - features of project since you were the
36:31 - one who developed the project the client
36:33 - wants you to make the change without
36:35 - comments you will forget the reason why
36:38 - you wrote a particular piece of code a
36:40 - certain way and you will end up spending
36:42 - a lot of time looking at your own code
36:45 - and trying to understand it now if you
36:47 - had commented the code it would have
36:49 - been easier for you
36:51 - comments are even more important if you
36:53 - are working in a group it makes it
36:55 - easier for other developers to
36:57 - understand and use your code that being
37:00 - said comments are not and should not be
37:03 - used as a substitute to explain poorly
37:05 - written code you should always try to
37:07 - write clean understandable code and then
37:10 - use comment as an addition it's time for
37:13 - programming's quiz what is the correct
37:15 - way to comment in c programming
37:20 - in c programming an operator is a
37:22 - special symbol that is used to perform
37:25 - operations on values and variables we
37:27 - have already used one operator many
37:29 - times in our program without even
37:31 - realizing it's the equal to operator
37:33 - this is an assignment operator that
37:35 - assign the value to a variable for
37:37 - example int is equals to 24 here value
37:42 - 24 is assigned to the ace variable
37:45 - there are many other assignment
37:46 - operators but before we learn about them
37:48 - let's first learn about arithmetic
37:50 - operators
37:53 - arithmetic operators are basic operators
37:56 - like plus and minus that allow us to
37:58 - perform arithmetic operations here is
38:01 - the list of all arithmetic operators
38:03 - available in c programming before we
38:05 - start let me first copy all the
38:07 - arithmetic operators in the code editor
38:10 - now we will learn about these operators
38:12 - next
38:16 - let's start with addition operator the
38:18 - addition operator represented by the
38:20 - plus symbol adds two values or variables
38:23 - let's see an example here is a basic
38:25 - outline of a c program
38:27 - now i'll create a variable say x int
38:32 - x equals to 12
38:34 - then
38:35 - i'll do something like int result equals
38:39 - x
38:40 - plus
38:42 - 8
38:44 - and i'll print this using printf
38:47 - function
38:49 - print f bracket inside quotation
38:52 - percenty
38:54 - comma
38:56 - result
39:01 - now let me run this code
39:04 - as you can see 20 is printed so what's
39:06 - happening here is value 8 is added to
39:09 - the value of x which is equals to 12 and
39:12 - they are added by the addition operator
39:14 - and the equal to operator is storing the
39:16 - result in the result variable and then
39:19 - when i print the result i get 12 plus 8
39:22 - which is equals to 20.
39:24 - instead of storing the result in a
39:26 - variable i can simply print the result
39:29 - for this i'll remove the result variable
39:35 - so inside the print statement i'll add
39:37 - here
39:38 - x plus 8
39:41 - instead of result and i'll run this
39:44 - and as before we can see 20 is printed
39:46 - on the screen but personally i would
39:49 - like to use the variable it makes the
39:51 - code much more elegant and organized so
39:53 - i'll revert back to my previous code
39:56 - and i'll put your result as before
39:59 - we can also use the addition operator to
40:01 - perform addition of two floating point
40:03 - numbers let's see an example i'll change
40:06 - the in variable to double
40:10 - double
40:11 - and
40:13 - end result to double result
40:16 - and i'll assign a floating point number
40:18 - so i'll make this 12 to 12.57
40:22 - then we will add x variable with another
40:25 - floating point number say
40:27 - 8.67
40:29 - since i am adding two floating point
40:31 - numbers the result will also be floating
40:33 - point number so i'll change the data
40:35 - type of result to double using percent
40:38 - lf format specifier and i'll put
40:41 - 0.2 before lf so that we can print
40:45 - the double value up to 2 decimal places
40:48 - now let me run this code
40:51 - now as you can see we get double result
40:55 - 21.24 as an output
40:57 - we can also add a double variable and an
41:00 - in variable using addition operator i'll
41:02 - use the same code and create an in
41:04 - variable y
41:06 - into y equals
41:09 - 8
41:10 - so i have assigned an end variable
41:13 - with a value 8 to it
41:15 - now in the place of 8.67 i'll use y
41:18 - variable now let's run this code
41:21 - as you can see i get an output 20.57
41:26 - when we add a floating point number with
41:28 - the whole number the whole number is
41:29 - converted into a floating point number
41:31 - hence we get a floating point number as
41:34 - a result
41:35 - similarly we can perform subtraction and
41:38 - multiplication using minus and asterisk
41:40 - operator respectively go ahead and try
41:42 - it by yourself and leave your code in
41:44 - the comment below
41:46 - in computer programming the division
41:48 - operator works differently when used
41:50 - with integers and floating point number
41:52 - so let's first see how it works for
41:54 - integer i'll create an input variable x
41:58 - and assign a value 12 to this
42:01 - and
42:02 - let us create an int result
42:06 - and assign
42:07 - x divided by
42:09 - 8
42:10 - and i'll print this using printf
42:12 - function
42:14 - inside quotation percent d
42:16 - comma
42:17 - result
42:20 - here you can see i have used forward
42:22 - slash
42:23 - for the division and notice i have used
42:26 - only the integer values for this now let
42:29 - me run this code
42:31 - as you can see i get 1 as an output
42:34 - however 12 divided by 8 should give 1.5
42:37 - but we got 1 because the division
42:40 - operator when used with integers gives
42:42 - only the quotient value
42:45 - now to get the exact result we use
42:48 - division operator with floating point
42:50 - number let me change this variable to
42:52 - double type
42:54 - so i'll change into x to double x
42:59 - and result to double
43:02 - the result
43:03 - then i'll
43:04 - make this integer value 12 to floating
43:07 - point value
43:09 - and i'll change this 8 to 8.00
43:12 - here i have changed the data type of x
43:15 - to double and assign the value 12.00
43:18 - instead of 12 and i change the value of
43:21 - 8 to 8.00
43:24 - and since the result will be a floating
43:26 - point number i change the data type of
43:28 - result to double for that i'll do
43:30 - percent lf
43:32 - and i'll put here 0.2 so that we'll get
43:35 - the output up to two decimal places
43:38 - now i'll run this code
43:42 - you can see the expected output 1.50 is
43:45 - printed
43:48 - we know that the division operator gives
43:50 - quotients when used with integer data
43:53 - now if we need to find the remainder
43:55 - after division we use the remainder
43:57 - operator it is also called modulus
43:59 - operator let's use the earlier code you
44:02 - i'll replace this division operator with
44:04 - modulus operator
44:06 - and i'll run this you can see i get 4 as
44:09 - an output because when we divide 12 by 8
44:12 - the remainder is 4. the remainder
44:14 - operator can only be used with integer
44:16 - data if you use it with floating point
44:18 - numbers you will get an error go ahead
44:20 - and try it yourself
44:22 - okay guys we need your support to keep
44:25 - these types of content free for all
44:26 - users youtube really likes engagement on
44:28 - the video so leave a comment below press
44:30 - that like button and hit subscribe if
44:32 - you haven't already let's get the
44:34 - engagement score high up so that more
44:36 - people can discover and enjoy these
44:38 - courses
44:41 - so far we have covered some of the basic
44:44 - operations now let's learn about the
44:46 - increment and decrement operator the
44:48 - increment is used to increase the value
44:50 - by one similarly decrement operator is
44:53 - used to decrease the value by one we use
44:55 - the plus sign as an increment operator
44:58 - and minus sign as a decrement operator
45:00 - let's see an example
45:02 - here i have a variable with value 12 now
45:05 - inside the print statement
45:08 - i'll bring the variable with increment
45:10 - operator
45:11 - so i'll add here plus plus
45:15 - as you can see
45:16 - i have used plus plus with x now let's
45:19 - run this code
45:21 - as expected the plus plus sign increases
45:24 - the value of x by 1 and we get 13 as an
45:27 - output similarly we can use the
45:29 - decrement operator to decrease the value
45:31 - by one let's see an example in this same
45:34 - code
45:35 - instead of plus plus i'll use
45:39 - minus minus in front of x
45:41 - and
45:42 - i'll run this again
45:44 - as you can see value is decreased to 11.
45:47 - here i have shown you example of prefix
45:50 - increment and prefix decrement of
45:52 - variable however we can also use it
45:55 - after the variable in a postfix form
45:57 - like x plus plus for increment and x
46:00 - minus minus for decrement they work in a
46:03 - similar manner but there is one small
46:05 - difference between them if you want to
46:07 - learn how they work differently you can
46:09 - visit the tutorial in our website
46:11 - programmies.com the link is in the video
46:14 - description below
46:17 - so far we have been using single
46:20 - operator in an expression however there
46:22 - might be a case where we have to use
46:24 - multiple operators in a single
46:26 - expression let me show you an example
46:28 - so in our previous example i'll change
46:31 - this value of x equals to 12 to 4
46:33 - divided by 2
46:36 - plus
46:37 - 6
46:38 - multiplied by
46:39 - 5 and will minus 1
46:44 - and
46:45 - we'll print this using printf function
46:47 - now let's run this here the output is 31
46:50 - this is because
46:51 - the division operator is executed first
46:54 - then the multiplication is executed
46:57 - then the addition is performed between
46:59 - the result of division and
47:01 - multiplication and finally minus
47:03 - operator is executed
47:06 - that means
47:07 - 4 divided by 2 equals to 2 6 multiplied
47:11 - by 5 is 30 and
47:14 - 2 plus 30 equals to 32
47:17 - minus 1 equals to 31
47:19 - so that is our output now the main
47:22 - question is why division is executed
47:24 - first well this is due to the concept
47:27 - called precedence and associativity
47:29 - operators with higher precedence are
47:32 - executed first and operators with lower
47:34 - precedence are executed last here the
47:36 - division has higher precedence than
47:39 - addition and subtraction so we'll learn
47:41 - about this in later videos before we
47:44 - move ahead one quick tip for you we
47:46 - should build a habit of using
47:48 - parentheses to make it easier to
47:50 - understand the code for example
47:52 - in my previous code i'll add parentheses
47:55 - like here i'll add parentheses
47:58 - between 4 and 2 and i'll add another
48:01 - parenthesis
48:03 - between 6 and 5. now you can see our
48:06 - code is much more organized than before
48:09 - it's time for programming squeeze what
48:11 - is the value of x in the following code
48:18 - in this video we will learn to convert
48:20 - one data type to another in c we will
48:22 - also learn about different types of type
48:25 - conversion in c programming before we
48:27 - talk about type conversion let's quickly
48:29 - see an example
48:31 - here we have two end variable
48:35 - a and b with value 5 and 9 respectively
48:38 - and we have used plus operator to add
48:41 - these two numbers
48:43 - now let's run this code
48:45 - you can see we get 14 as an output which
48:48 - is 5 plus 9. now let me change one of
48:51 - the data to cat type so here i'll change
48:54 - the data type of a to care
48:57 - care a equals to 5 and i'll put here
49:00 - single quotation
49:02 - around five
49:04 - now we are performing addition between
49:06 - integer and character variable now let
49:09 - me run this program
49:11 - as you can see that the code runs
49:13 - without any error and we get 62 as an
49:16 - output let's see what's happening here
49:18 - we are adding character value 5
49:21 - and an integer value 9 in this case the
49:24 - compiler automatically converts this
49:27 - character value into ascii value so the
49:30 - character 5 is converted into its ascii
49:32 - value which is 53 so the final output is
49:36 - 53 plus 9 equals to 62.
49:41 - now let's try another example this time
49:44 - i'll change this character data to
49:47 - double
49:50 - and make this 5 into a floating point
49:52 - number
49:53 - and i'll add here
49:55 - point
49:57 - 7
49:58 - now in this case we are adding
50:00 - double and in type variable now i'll run
50:03 - this code
50:05 - here we get 14 as an output it looks
50:08 - like the double value is converted into
50:11 - in value 5 and then added
50:15 - to 9 which gives us 14
50:18 - but
50:19 - that's not the case here actually the
50:21 - end value 9
50:23 - is converted into double value 9.00 then
50:26 - it is added to the double value 5.67
50:30 - making it 14.67 however the sum is
50:34 - stored in the result variable which is
50:36 - of in type so the double type sum 14.67
50:41 - is now converted to an n-type value 14.
50:45 - hence we get the output 14. we can
50:48 - verify this by changing the data type of
50:50 - result variable let me show you i'll
50:53 - change this result
50:54 - variable to double
50:56 - so double result equals to a plus b
51:00 - similarly i'll use percent lf instead of
51:03 - percent d
51:05 - and now i'll run this
51:07 - this time you will see
51:09 - 14.67 with multiple zeros after that you
51:12 - might be wondering why the end value is
51:14 - converted into double why not the double
51:17 - converted to int well the type
51:19 - conversion occur according to the data
51:22 - type hierarchy here the data type that
51:25 - is lower in this hierarchy is always
51:27 - converted to the data type that comes
51:29 - higher for example between care and int
51:32 - cad data type is converted to int and
51:35 - between int and double the in data type
51:37 - is converted to double we can say that
51:39 - the lower data type is promoted to
51:41 - higher data type however if you have
51:44 - noticed we have assigned double value to
51:46 - an in variable the double value is
51:48 - converted to the end value this is
51:51 - because during the assignment the data
51:53 - type on the right of the assignment
51:55 - operator is always converted to the data
51:57 - type on the left in this case sometimes
52:00 - the higher data type can also be demoted
52:03 - to lower data type let's see an example
52:06 - i'll create an end variable and a equals
52:09 - to
52:11 - 5.67
52:13 - and print this using printf function
52:16 - percent d
52:18 - comma
52:19 - a
52:24 - now when i run this
52:26 - you can see that we gave the integer
52:27 - value 5 as an output
52:30 - during the conversion from the higher
52:32 - data type
52:33 - like double to lower data type like ind
52:37 - there might be loss of some data in our
52:39 - program the data 5.67 is converted to 5
52:44 - there is a loss of data 0.67 during this
52:47 - conversion so we should be careful
52:50 - during this type of conversion here all
52:52 - the type conversion are happening
52:54 - automatically this is called implicit
52:56 - type conversion we can also forcefully
52:59 - convert one data type to another this
53:02 - type of conversion is called explicit
53:04 - type conversion if you are enjoying this
53:07 - video you will definitely love our
53:08 - interactive c programming course on
53:10 - programmies pro the course includes easy
53:13 - to follow tutorials along with quizzes
53:15 - and challenges to practice and test your
53:17 - coding knowledge in real time you will
53:19 - also be creating projects to experience
53:22 - how programming works in the real world
53:24 - and in the end you will receive a
53:25 - certificate which will help you land
53:27 - your first job sign up now by using this
53:30 - qr code or you can also use the link in
53:33 - the description box
53:37 - before we learn about explicit type
53:39 - conversion let's get back to our earlier
53:41 - code here we are adding double type
53:43 - variable a
53:45 - with an entire variable b
53:47 - normally we know that the entire
53:49 - variable b will be converted to a double
53:51 - type and then the addition is performed
53:54 - what if we want the double value to be
53:57 - converted to int
53:59 - and then add the end value this is where
54:02 - we use explicit type conversion let me
54:05 - show you
54:06 - i'll add
54:08 - int inside this parenthesis in front of
54:11 - a
54:12 - so
54:13 - here the end inside the bracket before a
54:16 - tells the compiler to convert the
54:18 - variable a to in type now let me run
54:20 - this code
54:22 - as you can see we get
54:24 - 14.00 as an output here
54:27 - this end inside the bracket changes the
54:30 - double value 5.67 to ind and then adds
54:34 - this value 9 to it
54:36 - and then the sum is 14
54:39 - which is assigned to result variable
54:41 - since the result is double variable
54:44 - 14 is converted to
54:47 - double and gives us output
54:51 - zero 14.00 and multiple other zeros
54:53 - after that
54:54 - since the result is also in i can now
54:57 - change the data type of result into
54:59 - end
55:01 - and don't forget to change the format
55:03 - specifier from percent lf to percent d
55:07 - and then i'll run this again
55:09 - this time we'll get 14 as an output
55:12 - okay guys we need your support to keep
55:14 - these types of content free for all
55:16 - users youtube really likes engagement on
55:18 - the video so leave a comment below press
55:20 - that like button and hit subscribe if
55:23 - you haven't already let's get the
55:25 - engagement score high up so that more
55:27 - people can discover and enjoy these
55:29 - courses
55:30 - similarly we can also convert an in data
55:33 - type to double by using double keyword
55:35 - inside the bracket before the variable
55:37 - name let me show you here i'll remove
55:40 - this code
55:42 - now i'll create two end variable int
55:45 - a and assign value 9 and create another
55:49 - in variable int
55:51 - b equals to
55:54 - 2.
55:56 - now i'll perform the division between a
55:58 - and b and store the result in a double
56:00 - variable so double
56:05 - result
56:06 - equals
56:09 - a divided by b
56:11 - then this print f bracket inside
56:14 - quotation percent lf
56:18 - comma
56:20 - result
56:22 - now let me run this code
56:25 - here we get 4 as an output not 4.5 this
56:28 - is because we perform division between
56:30 - two integer value the result will be
56:33 - quotient so we get 4 as an output which
56:35 - is the quotient value however we want
56:38 - the actual result 4.5 after the division
56:40 - then we can use the explicit type
56:42 - conversion to convert
56:44 - one of the variable to double and
56:46 - perform division
56:47 - so here i'll add double before the
56:50 - variable a
56:51 - now
56:52 - let's run this
56:55 - now we get 4.5 as output
56:59 - here we have only converted the variable
57:01 - a to double type but still we get the
57:03 - output
57:04 - this is because now the variable a is of
57:07 - double type and if we perform operation
57:10 - between double and int the end data type
57:12 - is implicitly converted to the double
57:14 - type hence b here is also converted to
57:18 - double type
57:19 - now the division between 9.0
57:23 - and 2.0 is equals to 4.5 it's time for
57:27 - programming squeeze what is the value of
57:30 - result in the following statement
57:36 - just like integer and double boolean is
57:38 - a data type that can store only two
57:41 - values either true or false we use the
57:44 - bull keyword to create boolean type
57:46 - variables however to create a boolean
57:49 - type variable we must import the std
57:51 - bool header file first let's see an
57:54 - example here i have a basic c program
57:57 - now i'll first
57:59 - include
58:02 - include
58:07 - o stdol dot h
58:09 - just like stdio.edge now let's create
58:12 - two boolean variables
58:14 - bull value
58:17 - 1
58:20 - equals
58:21 - true
58:22 - and another bull value
58:26 - will value 2 equals false
58:30 - now we'll print these variables we know
58:32 - that we use format specifiers to print
58:34 - variables in c however there is no
58:37 - format specifier for multivariable so
58:40 - how do you print a boolean variable well
58:42 - we use the percent d just like printing
58:45 - integer values this is because in c
58:47 - programming boolean values are
58:49 - represented by integer data false is
58:51 - represented by 0 and true is represented
58:54 - by 1 or all the values except 0. now
58:57 - let's print these variables now i'll
58:59 - print this using printf statement using
59:01 - percent d format specifier
59:04 - value
59:06 - 1
59:09 - and i'll put some space here
59:12 - then i'll print another value 2
59:16 - using printf statement so here we'll use
59:18 - percent d format specifier
59:21 - and
59:22 - value two
59:26 - and we'll
59:27 - we'll put some space here and i'll run
59:30 - this
59:31 - you can see 1 is printed for true and 0
59:35 - is printed for false one thing you
59:37 - should remember is that c is a case
59:39 - sensitive language and we cannot use
59:42 - true and false with capital t and
59:44 - capital f let me show you i'll replace
59:47 - this small t with capital t and i'll
59:50 - replace this small f with capital f and
59:53 - i'll run this
59:55 - as you can see i get an error this is
59:58 - because true with small t is different
60:00 - from true with capital t
60:04 - now that we know about the booleans
60:06 - let's learn about comparison and logical
60:09 - operators these operators are used to
60:11 - create boolean expressions that return
60:13 - boolean values let's start with
60:15 - comparison operator i'll first copy a
60:18 - list of all comparison operators in our
60:20 - text editor so that it's easier for us
60:22 - to use them now let's go through them
60:25 - one by one i'll start with greater than
60:28 - operator
60:30 - the greater than operator checks if the
60:33 - value is greater than another value
60:35 - let's see an example here i am using
60:37 - greater than operator to check if 12 is
60:40 - greater than 9 and assign the result to
60:43 - the value variable since 12 is greater
60:45 - than 9
60:46 - the output will be true so let's run
60:49 - this code
60:50 - as you can see i get 1 as output which
60:53 - represents true now let's change the
60:56 - value of 12 to 5
60:59 - now i'll run this code again this time
61:01 - we get output 0 which represents false
61:04 - it's because
61:05 - 5 is not greater than 9 so the greater
61:08 - than operator results false
61:14 - similarly the less than operator checks
61:16 - if the value is less than another value
61:19 - here i'll simply change the greater than
61:20 - sign to less than sign the value 5 is
61:23 - less than 9 so the output will be true
61:27 - let's run this code as expected we get
61:29 - the output 1 which is true
61:32 - now let me change the value 5 to 9
61:36 - and i'll run this code again
61:38 - here i'll get 0 as output because 9 is
61:42 - not less than 9.
61:47 - the equal to operator compares two
61:49 - values and return true if the value are
61:52 - equal i'll use the same code and change
61:54 - the less than sign to equal to sign
61:58 - here 9 is equal to 9 so we should get
62:01 - true as output let's run this code as
62:04 - expected we get 1 as output now let me
62:08 - change this 9 to 6 by just looking at
62:11 - this you can tell the output is going to
62:14 - be false let me run this code as
62:16 - expected we get 0 which means
62:19 - false in c programming
62:24 - similarly there is not equal to operator
62:27 - it does exactly the opposite of what
62:29 - equal to operator does it checks if two
62:32 - values are not equal here i'll change
62:35 - this equal to operator to not equal to
62:37 - here we are using not equal to operator
62:40 - between 9 and 6. now let's run this code
62:44 - i get
62:45 - 1 as output because 9 is not equal to 6
62:50 - so result is true
62:55 - in c programming there are also some
62:57 - compound comparator operators like
62:59 - greater than equal to this operator
63:01 - gives true if a value is either greater
63:04 - than or equal to another value i'll use
63:06 - the same code and i'll change this value
63:09 - to 9 is greater than and equals to 6.
63:12 - now what do you think the output of this
63:15 - code will be
63:16 - i'll run this
63:18 - and yes you guessed it right the output
63:20 - is 1 because 9 is greater than 6 so the
63:24 - result is true
63:26 - similarly there is less than or equal to
63:29 - operator that does the exact opposite of
63:32 - greater than or equal to let's change
63:34 - the operator here now let's change the
63:37 - operator here
63:38 - i will run this code
63:40 - you can see i get 0 because 9 is neither
63:44 - less than or equal to 6.
63:46 - we can also use this comparator operator
63:49 - with floating point number so i'll
63:50 - change the value 9 to 9.34
63:53 - and change this 6 to 6.87
63:58 - now we are checking if nine point three
64:00 - four is less than or equal to six point
64:02 - eight seven i'll run this code as you
64:05 - can see i get the output zero that means
64:08 - the condition is false
64:13 - till now we have used comparison
64:15 - operators to compare two values however
64:17 - we can also use them to compare
64:19 - variables let's see an example i'll
64:22 - create two variables
64:24 - int num
64:26 - 1 equals 9
64:29 - and another variable int num 2 equals
64:34 - 6.
64:36 - now let's compare these two variables to
64:38 - compare that we'll create bull value
64:41 - bool value
64:44 - equals
64:45 - num1 is greater than
64:48 - num2
64:50 - here i'm checking num1 is greater than
64:53 - norm2
64:55 - now let's print this using print
64:56 - statement
64:58 - print f bracket inside quotation
65:01 - percent d comma
65:04 - value
65:07 - now i'll run this code
65:09 - we get output 1 because the value of
65:12 - num1 equals to 9
65:14 - is greater than value of num2 that is
65:17 - equals to 6.
65:20 - we can also use comparison operators
65:22 - with variables and value i'll remove
65:24 - this num2
65:29 - and i'll remove this num2 here as well
65:32 - and put here
65:33 - value 6 and i'll run this again
65:36 - as you can see code runs perfectly fine
65:39 - and we get the output as before
65:42 - these are the comparison operators that
65:44 - are used in c programming they all
65:46 - return a boolean value and the
65:48 - expression where they are used is called
65:50 - boolean expressions in our previous
65:52 - example
65:54 - the code num1 greater than 6 is a
65:56 - boolean expression boolean expression
65:58 - check particular condition and results
66:01 - either true or false and based on the
66:03 - result we can perform different actions
66:06 - okay guys we need your support to keep
66:08 - these types of content free for all user
66:11 - youtube really likes engagement on the
66:12 - video so leave a comment below press
66:14 - that like button and hit subscribe if
66:16 - you haven't already let's get the
66:18 - engagement score high up so that more
66:20 - people can discover and enjoy these
66:23 - courses
66:27 - now let's move to logical operators
66:29 - logical operators are used with boolean
66:32 - expression to perform logical operations
66:35 - c programming has three logical
66:37 - operators and they are and or and not
66:41 - let's copy them in our code editor and
66:43 - learn them one by one
66:47 - we use the two ampersand sign for the
66:49 - and operator let me show you an example
66:51 - i'll create two variables a's and height
66:54 - with value 18 and 6.3 so let's do that
66:58 - int
66:58 - is
66:59 - equals 18
67:02 - and
67:03 - double
67:04 - height equals 6.3
67:08 - now i'll create another variable bull
67:11 - result
67:13 - where i'll assign two boolean expression
67:16 - first to check if a is is greater than
67:18 - or equal to 18 so
67:21 - equals to
67:23 - is is greater than or equals to 18
67:27 - and second to check if height is greater
67:29 - than 6 so
67:31 - height
67:33 - is greater than
67:36 - 6
67:37 - and now i'll use and operator to join
67:40 - them
67:41 - so
67:46 - let me complete this program here i'll
67:48 - add print statement
67:50 - printf bracket inside quotation
67:53 - percent d
67:55 - comma result
67:58 - here i have used n between two boolean
68:00 - expressions
68:01 - the operator returns true if both
68:04 - expression are true let me run this code
68:07 - here i get 1 as output because a is
68:10 - equals to 18
68:11 - so this boolean expression
68:14 - returns true and height is also greater
68:16 - than 6 so this boolean expression
68:19 - returns true as well hence we get the
68:22 - final result that is also true now let
68:25 - me change the value of 18 to 16
68:30 - so this expression is greater than
68:32 - equals to 18 becomes false
68:35 - now let me run this code
68:37 - as you can see we get output 0 this is
68:40 - because the and operator returns true
68:43 - only if both the expression are true
68:46 - however the value of a's is 16 so this
68:49 - expression is false hence we get the
68:52 - final result 0 that is false in c
68:56 - programming
68:58 - now let's learn about logical r operator
69:01 - we use double pipe symbol as the r
69:04 - operator the r operator returns true if
69:07 - one of the boolean expression is true
69:09 - let me show you here i'll replace this
69:11 - and with r
69:14 - here this expression is false however
69:17 - this expression is true so the result
69:19 - will be true let me run this code as
69:22 - expected we get one as output
69:28 - unlike and and or the not operator is
69:31 - used with only one boolean expression we
69:34 - use the exclamation mark as the not
69:36 - operator the not operator simply reverse
69:39 - the result of boolean expression if the
69:42 - expression is true it returns false and
69:44 - if the expression is false it returns
69:46 - true let's see an example
69:49 - i'll use the same code as before here
69:51 - i'll remove this double variable
69:54 - and this expression height is greater
69:56 - than 6
69:59 - and i'll use not operator before this
70:01 - expression
70:04 - here this expression is false so the not
70:06 - operator reverses the value hence the
70:09 - final results become true let me run
70:11 - this code
70:13 - as expected we get one as output now
70:16 - let's change the greater than operator
70:18 - to less than or equal to operator here
70:21 - the boolean expression is true so the
70:24 - result will be false because of this not
70:26 - operator now let me run this code
70:29 - as you can see we get 0 as output
70:35 - boolean expression are very useful in
70:37 - decision making and loops they are used
70:40 - to check particular condition and based
70:42 - on the condition we can make some
70:44 - decision suppose you want to check if a
70:47 - person is eligible to vote then we can
70:49 - use boolean expression to check if the
70:51 - a's of the person is greater than 18 and
70:53 - depending upon the result of the boolean
70:56 - expression we can decide if the person
70:58 - can vote or not this is how we can
71:00 - create decision making programs using
71:02 - boolean expression it's time for
71:04 - programming squeeze which of the
71:06 - following code returns false
71:11 - in this video we'll learn about if else
71:13 - statement in c programming we'll learn
71:16 - to create decision making programs that
71:18 - perform one set of tags under a certain
71:21 - condition and another set of tags under
71:24 - different condition in c programming we
71:26 - use the if statement to create programs
71:29 - that can make decision let's start by
71:31 - looking at the syntax of the if
71:33 - statement
71:34 - the if statement starts with if keyword
71:37 - and is followed by the test condition
71:39 - inside the parenthesis
71:42 - this test condition is a boolean
71:44 - expression that results in either true
71:46 - or false
71:48 - if the test condition is true the body
71:51 - of if statement is executed otherwise it
71:55 - is skipped from the execution
71:58 - now that you know the syntax of if
72:00 - statement let's try a working example
72:03 - suppose there is an election going on
72:05 - and to cast the vote your a's must be 18
72:08 - or more if your a's is 18 or more we'll
72:11 - print you are eligible to vote let's see
72:14 - how we can implement this here i have a
72:16 - basic c program now i'll create a
72:19 - variable to store is
72:21 - int is
72:23 - now i'll ask the user to input there is
72:25 - for that i'll use printf statement
72:30 - and print the message like
72:32 - enter
72:33 - here is
72:37 - then i'll use scan if statement to take
72:40 - the input
72:42 - so percent d
72:44 - comma
72:46 - ampersand is
72:52 - then i'll use if condition to check if
72:55 - a's is greater than or equals to 18.
73:01 - if this condition is true i'll print
73:08 - you are
73:09 - eligible
73:10 - to vote
73:15 - now let me run this program here i'll
73:18 - provide 31 as the is and i'll press
73:21 - enter as you can see you are eligible to
73:24 - vote is printed
73:27 - here the value is 31 so our test
73:29 - condition is greater than or equals to
73:32 - 18 is true that is why this print
73:35 - statement is executed
73:38 - now let me run this program again
73:40 - this time instead of 31 i'll enter 15
73:44 - this time nothing is printed on the
73:45 - screen this is because the age is 15 so
73:48 - the test condition is is greater than or
73:51 - equals to 18 is false so the body of the
73:55 - if statement is skipped
73:58 - our program is working fine but it is
74:00 - not printing anything when the a's is
74:02 - less than 18. we might want to print
74:05 - something like sorry you are not
74:06 - eligible to vote when ace is less than
74:09 - 18. so i'll add another if statement
74:13 - so i'll say
74:15 - if
74:16 - a's is less than 18
74:20 - i'll print
74:24 - sorry
74:26 - you are not
74:29 - eligible
74:31 - to vote
74:35 - now i'll run this code
74:38 - and i'll enter 15
74:40 - again here you can see sorry you are not
74:43 - eligible to vote is printed this is
74:46 - because age is 15 so this condition is
74:48 - is greater than or equals to 18 is false
74:52 - therefore this statement
74:54 - is
74:54 - skipped however this condition is is
74:57 - less than 18 is true so this statement
75:01 - is executed
75:02 - if you are enjoying this video you will
75:04 - definitely love our interactive c
75:06 - programming course on programmies pro
75:08 - the course includes easy to follow
75:10 - tutorials along with quizzes and
75:12 - challenges to practice and test your
75:14 - coding knowledge in real time you will
75:16 - also be creating projects to experience
75:18 - how programming works in the real world
75:20 - and in the end you will receive a
75:22 - certificate which will help you land
75:24 - your first job sign up now by using this
75:27 - qr code or you can also use the link in
75:29 - the description box
75:33 - i have this code from the last segment
75:36 - i'll remove this code to get the user
75:38 - input
75:40 - and i'll manually assign the value of is
75:43 - equals to 15
75:45 - so that it's easier to focus on the
75:47 - logic of the if statement
75:50 - in this program i have used two if
75:52 - statement to perform two different tags
75:55 - we know that the person is eligible to
75:57 - vote only if the a's is greater than or
76:00 - equals to 18 and if the condition is not
76:03 - met we know that the person is not
76:06 - eligible to vote
76:07 - in such cases instead of writing the
76:10 - second if statement with the condition
76:13 - we can use else clause
76:15 - let's first look at the syntax of the if
76:18 - statement with the else clause
76:21 - on your screen you can see how it looks
76:24 - so what happens here is if our test
76:27 - condition is true
76:28 - statement inside the body of if
76:30 - statement is executed and if it is false
76:35 - statements inside the body of ills are
76:38 - executed
76:39 - now getting back to our code to check if
76:41 - the person is eligible to vote or not
76:44 - in this program i'll use the else clause
76:47 - instead of this second if statement so
76:50 - i'll remove the second if statement and
76:52 - replace it with
76:53 - else
76:55 - now let me read this code in plain
76:57 - english as is greater than or equals to
76:59 - 18 then print you are eligible to vote
77:03 - else print sorry you are not eligible to
77:06 - vote now when i run this code
77:09 - you can see sorry you are not eligible
77:11 - to vote is printed
77:13 - this is because ace is 15 which is not
77:16 - greater than or equals to 18
77:19 - so we get the output sorry you are not
77:22 - eligible to vote
77:23 - okay guys we need your support to keep
77:26 - this type of content free for all users
77:28 - youtube really likes engagement on the
77:30 - video so leave a comment below press
77:32 - that like button hit subscribe if you
77:34 - haven't already let's get the engagement
77:36 - score higher so that more people can
77:38 - discover and enjoy these courses
77:43 - the if statement with else clause allow
77:45 - us to make a choice from two different
77:47 - options however sometimes we need to
77:50 - make choice from more than two options
77:53 - in those case we can use elsif's clause
77:56 - with test condition let's see the syntax
77:59 - first
78:00 - the if statement checks the first
78:03 - condition inside the if statement if it
78:05 - is true the body of if is executed and
78:08 - the statement 2 and the statement 3 are
78:12 - skipped however if the first test
78:15 - condition is false the control of the
78:18 - program jumps to the second test
78:20 - condition
78:21 - if this condition is true the body of
78:24 - the else if statement is executed and
78:27 - other statement are skipped if both the
78:30 - test condition 1 and the test condition
78:33 - 2 are false
78:35 - then only the else body is executed
78:39 - if necessary we can add as many else if
78:42 - clauses as we want for our program to
78:44 - work and among all those alternatives
78:46 - only a single block of code is executed
78:49 - now we know how the else if clause works
78:52 - let's get back to our code to check
78:54 - whether a person can vote or not
78:57 - here the is variable stores the a's of
79:00 - the person currently the is of oldest
79:02 - person is 120 so i want this program to
79:05 - consider is greater than 120 as invalid
79:09 - similarly the a's cannot be negative so
79:12 - i also want to write less than 0 as
79:14 - invalid
79:16 - now i want to include these two
79:17 - additional condition in our program for
79:20 - that i'll use else if clause now i'll
79:23 - modify this code
79:25 - so
79:26 - if
79:27 - a's is
79:28 - greater than 1 and 20
79:31 - i'll print
79:35 - invalid is
79:37 - invalid
79:38 - is
79:45 - and
79:46 - as if
79:50 - so if a's is
79:52 - less than 0
79:54 - that is negative value then will print
79:58 - is
79:59 - invalid
80:00 - is
80:04 - i'll change this if to elsif
80:08 - so as you can see i have included one if
80:11 - condition
80:12 - two else if condition
80:15 - and finally one else condition here i'll
80:18 - change the value from 15 to 130
80:22 - now i'll run this code
80:24 - here the a's is greater than 120 so we
80:27 - get invalid is as our output
80:30 - now let's change the value of this is
80:33 - from 130 to minus 4 and let's run this
80:36 - again
80:37 - this time we get invalid is again
80:41 - so this is the condition of else if
80:44 - here
80:44 - is is less than 0 so the output we got
80:48 - is invalid is
80:50 - now we can add as many else if condition
80:53 - as we want here we can see these two
80:56 - condition are performing the same tags
80:59 - printing the invalid is
81:01 - in this case we can combine both the
81:03 - condition together using logical
81:05 - operator
81:06 - here the a's is invalid if it is either
81:09 - greater than 120 or less than zero or
81:13 - let me modify this code so i'll cut this
81:16 - i'll use logical r and put here
81:20 - is
81:20 - less than 0. so i'll change this value
81:24 - from -4 to
81:26 - -1 and when i run this code
81:28 - i get invalid is as output
81:32 - now as long as the a's is an integer
81:34 - number our program works correctly and
81:37 - the extra condition make sure the a's is
81:40 - neither greater than 120 or less than 0
81:43 - and for any other value of a's the
81:45 - program runs as intended if we provide
81:48 - the is equals to 50 so let's do that
81:51 - i'll provide the value of a is equals to
81:53 - 50 i'll run this now this person is
81:58 - eligible to vote
81:59 - before we end this video one quick tip
82:02 - for you if the body if else block has
82:05 - only one statement like this then we can
82:07 - omit the curly braces of the if block
82:10 - like this
82:11 - as you can see the syntax of the if
82:14 - statement is pretty simple the harder
82:16 - part is the logic behind the test
82:18 - conditions so you will get better at
82:21 - creating test condition with practice
82:24 - also be sure to check our video on the
82:26 - comparison and logical operators that
82:28 - are used to create the test condition
82:30 - the link will be in the video
82:32 - description below
82:36 - we have covered a lot in this video it's
82:39 - time for you to practice what we have
82:41 - learned here is one programming
82:43 - challenge for you to solve can you
82:45 - create a program to check whether a
82:46 - number is positive negative or zero to
82:50 - create this program create a variable
82:52 - named number and assign a double value
82:54 - to it based on the user input then using
82:57 - an if statement check if the number
82:59 - variable is positive negative or zero
83:03 - if the number is positive print the
83:05 - number is positive if the number is
83:07 - negative print the number is negative
83:09 - and if the number is 0 print the number
83:12 - is 0. it's time for programming squeeze
83:15 - what is the output of following code
83:22 - in this video we'll learn about the
83:23 - ternary operator which can be used to
83:25 - replace if else statement in certain
83:27 - situation to make our code look cleaner
83:29 - let's start with syntax of turnit
83:32 - operator
83:33 - on the screen you can see the basic
83:34 - structure of ternary operator the
83:36 - ternary operator starts with the test
83:38 - condition
83:40 - like x is less than 0 or name equals to
83:42 - podma or any other boolean expression
83:44 - that evaluates to true or false
83:47 - if this test condition results in true
83:50 - this first expression before the column
83:52 - is executed and if the test condition is
83:55 - false then the second expression after
83:57 - the colon is executed
83:59 - here you can see there are three
84:01 - operands hence the name ternary operator
84:07 - now you know the syntax of ternary
84:08 - operator let's see an example here you
84:10 - can see the basic c program now i'll
84:13 - create an in variable is an assigned
84:15 - value 15 to this
84:19 - then i'll create a ternary operator with
84:21 - the condition
84:22 - is is greater than or equals to 18
84:25 - and if this condition is true i'll print
84:28 - you can vote so printf inside quotation
84:31 - i'll put you can vote
84:38 - and if that condition is false i'll
84:40 - print
84:43 - you cannot vote
84:46 - so i'll end this statement with the
84:48 - semicolon
84:49 - now let me run this code as you can see
84:52 - you cannot vote is printed here is
84:55 - equals to 15 so this condition becomes
84:57 - 15 is greater than or equals to 18 which
85:00 - is false so this print statement after
85:03 - the column is printed on the screen
85:06 - now let me change this value from 15 to
85:08 - 24
85:09 - now this condition becomes 24 is greater
85:12 - than or equal to 18 which is true so
85:14 - this print statement before the column
85:17 - should be executed now let's run this
85:19 - code as expected we get you can vote as
85:22 - output
85:24 - here we have used print statement as
85:26 - expression inside the ternary operator
85:28 - however we can also store value from
85:30 - ternary operator to a variable and use
85:33 - the variable later let's see an example
85:35 - i'll remove this line and create a care
85:37 - variable called operator and i'll i'll
85:41 - assign
85:42 - plus to this
85:44 - then i'll create an integer variable
85:47 - num1
85:48 - and i'll assign a value a to this and
85:51 - i'll create another in variable
85:53 - end num2
85:55 - and i'll assign value
85:58 - 7 to this
86:00 - now i'll cut this ternary operator and
86:02 - start with a new condition and i'll
86:04 - check if operator
86:06 - is equals to plus
86:10 - and if this condition is true i'll add
86:13 - num1
86:15 - with num2
86:17 - and i'll add colon here
86:20 - and if this condition is false
86:22 - i'll subtract num2 from num1 so num1
86:26 - minus num2
86:30 - this expression are returning some
86:32 - values so i'll assign this ternary
86:34 - operator to a variable so say int result
86:42 - and i'll print this variable using
86:44 - printf statement
86:46 - printf inside quotation i'll use percent
86:49 - d format specifier and the name of the
86:51 - variable that is result
86:54 - i'll run this code and you can see we
86:56 - get 15 as output which is the sum of 8
86:59 - and 7.
87:01 - here the operator is equals to plus so
87:04 - this condition is true and addition is
87:06 - performed between num1 and num2
87:10 - depending upon your requirement you can
87:12 - either print values directly or assign
87:14 - value to a variable from a ternary
87:16 - operator however if you plan to use
87:18 - values later in the program it's a good
87:20 - idea to store value in a variable
87:24 - in some of the cases we can replace the
87:26 - if else statement with a ternary
87:28 - operator this will make our code cleaner
87:31 - and shorter let me show you an example
87:33 - on your screen you can see a program
87:35 - that checks if you can vote or not using
87:37 - the fl statement on the right and turn
87:39 - it operator on the left both the program
87:42 - are doing the same tags and checking if
87:44 - a person can vote or not and you can see
87:46 - the use of ternary operator has made our
87:49 - code cleaner and shorter in such
87:51 - programs where we need to do a single
87:54 - task inside the if else statement we can
87:56 - use the ternary operator in a place of
87:58 - if else however if there are multiple
88:01 - lines of code inside the if else
88:03 - statement we should never replace that
88:05 - with the ternary operator this will make
88:07 - our code more confusing and messy
88:09 - okay guys we need your support to keep
88:11 - these types of content free for all
88:13 - users youtube really likes engagement on
88:15 - the video so leave a comment below press
88:17 - that like button and hit subscribe if
88:19 - you haven't already let's get the
88:21 - engagement score high up so that more
88:23 - people can discover and enjoy these
88:25 - courses
88:30 - now to revise what we have learned here
88:32 - is one programming task for you to solve
88:34 - can you create a program to check
88:36 - whether a number is odd or even to
88:39 - create this program create a variable
88:41 - name number and assign a value to it
88:43 - then using a ternary operator check if
88:45 - the number variable is odd or even if
88:47 - the number is odd print the number is
88:50 - odd and if the number is even print the
88:52 - number is even
88:54 - it's time for programming squeeze what
88:56 - is the correct ternary equivalent of the
88:58 - following if else statement
89:03 - in this video we'll learn about the
89:05 - switch statement and how to use it to
89:07 - make decision making programs in c
89:09 - programming here we will also create a
89:11 - calculator using switch statement before
89:13 - we learn about switch statement let's
89:16 - consider a scenario we are given a
89:18 - number between 1 to 7 and based on the
89:20 - number we have to print the day of a
89:22 - week for example if the number is 1 then
89:25 - the day is sunday and if the number is 2
89:27 - then the day is monday and so on now we
89:30 - can use the if else statement for this
89:32 - however for every number there should be
89:34 - a separate condition this will make our
89:36 - program look messy and difficult to
89:38 - understand for such type of problems
89:40 - where we have to choose from multiple
89:42 - options a better approach will be switch
89:44 - statement let's start with the syntax of
89:46 - the switch statement first
89:48 - the switch statement starts with the
89:50 - switch keyword followed by the variable
89:52 - or expression inside the parenthesis
89:55 - inside the switch statement we can
89:56 - create multiple cases
89:59 - and each cases will have its own value
90:02 - now the value of variable or expression
90:04 - is compared with the value of individual
90:06 - cases
90:08 - if the result of the variable or
90:09 - expression is equals to value 1 then the
90:12 - body of case 1 is executed
90:14 - similarly if the result is value 2 then
90:17 - the body of case 2 is executed and so on
90:21 - however if the result does not match any
90:23 - case then the body of default is
90:25 - executed
90:27 - now let's get back to our original
90:29 - problem of finding the days of the week
90:31 - on the screen you can see the basic c
90:33 - program now i'll create a variable
90:36 - number
90:38 - in
90:39 - number
90:41 - then i'll ask the user to enter number
90:43 - between one to seven so i'll use printf
90:46 - statement and i'll print the message
90:48 - like
90:49 - enter the number
90:52 - between
90:54 - 1 to 7
90:57 - and store the value to the number
90:59 - variable so scanf site quotation percent
91:03 - d
91:04 - comma ampersand name of the variable
91:07 - that is number
91:10 - then i'll create the switch statement
91:12 - that will print the day of the week as
91:14 - we have already discussed we'll use
91:17 - switch keyword
91:19 - and then inside parentheses we'll put
91:21 - variable or expression in this case we
91:24 - have variable number so i'll put number
91:26 - here
91:28 - then a curly braces
91:32 - inside these curly braces we'll add
91:34 - cases
91:36 - so when the case is won
91:39 - i'll print sunday
91:45 - and i'll use break statement after that
91:47 - i'll talk about this break statement
91:49 - later on the video so let's continue
91:51 - when the case is 2
91:54 - i'll print
91:56 - monday so
91:58 - monday
92:02 - and break statement
92:07 - so what i will do is i'll copy this and
92:09 - paste this five more times
92:15 - and at the end i'll put default
92:19 - and i'll print
92:21 - invalid number
92:22 - invalid number
92:27 - so invalid number
92:30 - now the case 1 and case 2 is already
92:32 - done so i'll edit from case 3
92:36 - and case 3 is
92:38 - tuesday
92:41 - similarly case
92:42 - 4
92:43 - is
92:44 - wednesday
92:49 - and case 5
92:51 - is thursday
92:53 - so we'll write
92:55 - thursday here
92:58 - then
93:00 - case 6 is friday
93:05 - and finally case 7
93:08 - is saturday
93:13 - so let's make this as capital
93:16 - so here i have included cases from case
93:19 - 1 to k7 and if the user input 1 then
93:24 - this part of code is executed and sunday
93:28 - will be printed on the screen
93:29 - and if the user input 2 then this part
93:32 - of code will be executed and monday will
93:34 - be printed on the screen however if the
93:36 - user input any number except one to
93:38 - seven
93:40 - then the code inside default will be
93:42 - executed and invalid number is printed
93:45 - on the screen now let me run this
93:47 - program
93:48 - i'll enter five
93:52 - now the input value five matched this
93:54 - case case number five and thursday is
93:57 - printed on the screen
94:00 - now let me run this code again this time
94:02 - i'll enter 6
94:04 - as expected we get friday as output
94:09 - now once again i'll run this code and
94:11 - this time
94:12 - i'll enter the number that does not lies
94:14 - between 1 to 7 so i'll enter 9
94:18 - and as you can see i got the output
94:21 - invalid number which is present inside
94:24 - the default
94:25 - here the default case is optional we can
94:28 - remove this if we are sure that the
94:29 - input value matches one of the cases go
94:32 - ahead and remove the default value and
94:34 - try the code
94:36 - here if you have noticed i have used
94:37 - break statement inside individual cases
94:41 - here this break statement exit the
94:43 - switch statement once the matching case
94:45 - is executed
94:47 - if we don't use the break statement all
94:49 - the cases after the matching case will
94:51 - be executed now let me show you i'll
94:53 - remove this break statement from the
94:55 - program
94:57 - so let's remove this
95:02 - now i have removed the break statement
95:03 - from each cases now i'll run this code
95:07 - and i'll enter 5
95:09 - and it matches the case number 5 and
95:12 - thursday is printed at first
95:15 - then
95:15 - all the cases after that is also
95:18 - executed
95:19 - so we get the output thursday friday
95:22 - saturday invalid number
95:25 - this is why it is important to use break
95:27 - after every cases
95:30 - if you are enjoying this video you will
95:31 - definitely love our interactive c
95:33 - programming course on programmies pro
95:35 - the course includes easy to follow
95:37 - tutorials along with quizzes and
95:39 - challenges to practice and test your
95:41 - coding knowledge
95:42 - in real time you will also be creating
95:44 - projects to experience how programming
95:46 - works in the real world and in the end
95:48 - you will receive a certificate which
95:50 - will help you land your first job sign
95:53 - up now by using this qr code or you can
95:55 - also use the link in the description box
96:01 - we learned that using break after every
96:03 - case is important however sometimes
96:05 - there might be situations where we want
96:08 - to execute multiple cases together in
96:10 - such situation we can omit break
96:12 - statement let's see an example as you
96:15 - can see i have pasted some new code on
96:17 - the compiler here we want to check if
96:19 - the day is weekday or a weekend
96:22 - so all the cases from 2 to 6 will print
96:26 - weekday
96:27 - and the case 1 and k7 will print weekend
96:32 - and then the default will be a invalid
96:35 - number
96:37 - now let me run this code
96:39 - i'll enter four year
96:42 - as expected we get weekday
96:45 - and i'll run this again this time i'll
96:47 - enter one
96:48 - and you can see weekend is printed on
96:50 - the screen
96:52 - as you can see we can omit the break
96:54 - statement as per our need next we will
96:56 - use the switch case statement to create
96:59 - a simple calculator okay guys we need
97:01 - your support to keep this type of
97:03 - content free for all users youtube
97:05 - really likes engagement on the video so
97:07 - leave a comment below press that like
97:08 - button hit subscribe if you haven't
97:10 - already let's get the engagement score
97:12 - high up so that more people can discover
97:14 - and enjoy these courses
97:19 - now that we know the working of the
97:21 - switch statement let's create a simple
97:23 - calculator using it here i have copy
97:25 - pasted the code from our github
97:28 - repository so that you don't have to see
97:30 - me typing the whole thing now let's see
97:32 - what's happening in this code
97:34 - here we have created a character
97:36 - variable we then ask the user to choose
97:38 - an operator
97:40 - and store the input in the operator
97:42 - variable
97:44 - then we ask the user to provide two
97:46 - input values and store them in num1 and
97:48 - num to variable
97:50 - then the result variable will store the
97:52 - value after calculation
97:55 - you can see we have used operator
97:57 - variable inside the switch statement and
98:00 - each case statement uses an operator as
98:03 - its value
98:04 - and based on this operator the
98:07 - corresponding operation is performed
98:09 - inside the case
98:11 - now let me run this code
98:13 - here i'll enter plus
98:16 - and i'll enter first number
98:18 - 8 and then second number 12
98:22 - you can see i get 20 as output what
98:25 - happens here is i provide plus as
98:28 - operator and this plus operator matches
98:31 - with this case
98:32 - hence the addition operation inside the
98:34 - case is executed and the final result is
98:36 - 8 plus 12 that is 20.
98:39 - the break statement then terminates the
98:42 - switch statement now let me run this
98:44 - code again
98:46 - this time i'll enter asterisk
98:50 - and the first number 9 and the second
98:52 - number 5.
98:54 - since i entered asterix the operator
98:56 - match with this case
98:59 - so the multiplication is performed
99:01 - between number 9 and 5 so we get 45 as
99:05 - our output
99:06 - in this way we can also perform
99:08 - subtraction and division you can try it
99:11 - yourself
99:15 - now to revise what we have learned here
99:17 - is the programming tax for you
99:19 - use the switch statement to create a
99:21 - program that will find the month based
99:23 - on the number input here take the input
99:25 - from 1 to 12 and print the corresponding
99:28 - month based on the input value if the
99:30 - number is 1 print january if number is 2
99:33 - print february and number is 3 then
99:35 - print marge and so on it's time for
99:38 - programming squeeze which of the cases
99:40 - is executed in the following code
99:46 - in this video we'll learn about while
99:48 - loop to repeat a block of code for
99:50 - multiple times we'll also learn about do
99:52 - while loop in c loops are used to repeat
99:55 - a block of code a certain number of
99:57 - times suppose we want to show a
99:58 - particular message hundred times instead
100:01 - of writing the same message hundred
100:02 - times we can write the message once and
100:04 - use the loop to display the message
100:06 - hundred times let's start with the
100:08 - syntax of while loop a while loop starts
100:10 - with the while keyword followed by the
100:12 - condition inside the parenthesis
100:15 - here the condition is a boolean
100:16 - expression that returns either true or
100:18 - false if the condition is true then the
100:21 - statement inside the while loop are
100:23 - executed then the condition is evaluated
100:26 - again and if the condition is true again
100:29 - then the statement inside the while loop
100:31 - is executed
100:32 - this process continues and the while
100:34 - loop is executed on and on until the
100:37 - test condition becomes false
100:39 - if the condition is false then the while
100:41 - loop is terminated and the body of the
100:43 - loop is skipped
100:45 - let's see an example i'll remove this
100:47 - old code and by now you must be familiar
100:50 - with the basic structure of c program so
100:54 - i'll
100:55 - write the basic structure of c program
100:57 - here
101:02 - now you can see the basic structure of c
101:04 - program
101:05 - now i'll create the while loop
101:08 - with the condition
101:10 - 1 is less than 5
101:14 - and inside the while loop i'll print the
101:16 - message
101:19 - while loop
101:21 - in c
101:26 - so
101:28 - here the condition 1 is less than 5 is
101:30 - true so the statement inside the while
101:32 - loop will be executed then the condition
101:35 - 1 is less than 5 is checked again this
101:38 - time as well the condition is true so
101:40 - the statement inside the loop will be
101:42 - executed again
101:43 - here 1 is always less than 5 so the
101:45 - condition is never false hence the while
101:48 - loop will be executed infinitely until
101:51 - the memory runs out this is called an
101:53 - infinite while loop
101:55 - now let's run this code
101:57 - so you can see
101:59 - the statement while loop in c is printed
102:01 - until the memory runs out and to avoid
102:04 - this infinite while loop we need to make
102:06 - sure that our condition becomes false at
102:08 - some point
102:10 - so i'll create a in variable
102:13 - count
102:15 - and assign value 1 to this
102:17 - now in the condition instead of 1 i'll
102:20 - write here count so the condition
102:22 - becomes count is less than 5.
102:25 - and inside the while loop i'll increase
102:27 - the value of count by 1 so count equals
102:30 - to count plus
102:32 - 1
102:33 - so this value of count will increase in
102:36 - each iteration now this line of code
102:38 - increases the value of count in each
102:40 - iteration and ultimately the value of
102:42 - count becomes 5 so
102:45 - our condition becomes
102:46 - 5 is less than 5 which is false
102:50 - and it will terminate our loop so let's
102:52 - run this code you can see the message
102:55 - while loop in c is printed 4 times let's
102:57 - see what's happening here initially the
103:00 - value of count is 1 so the condition
103:03 - count is less than 5 is true so the text
103:06 - while loop in c is printed on the screen
103:09 - now the value of count becomes 2 and
103:11 - again the condition is evaluated this
103:14 - time as well the condition is true so
103:16 - again while loop in c is printed on on
103:19 - the screen
103:21 - now the value of count is increased to 3
103:23 - in this way the value of count keeps
103:25 - increasing in each iteration and after
103:27 - the fourth iteration the value of count
103:29 - becomes 5. this time this condition
103:32 - count less than 5 becomes 5 is less than
103:34 - 5 which is false so the loop terminates
103:37 - and hence the text is printed four times
103:41 - we can also print the count variable to
103:43 - see the subsequent increment of count
103:45 - variable let me show you here inside the
103:48 - loop i'll add print statement
103:52 - and i'll print the value of count so
103:54 - count
103:57 - equals
103:58 - percent d
104:00 - comma
104:00 - count
104:01 - and we need to add here backspace n so
104:04 - that it will be printed on the different
104:06 - lines so let's run this code
104:09 - as you can see the value of count is
104:12 - increasing in each iteration
104:16 - now we know how the while loop works
104:18 - let's do something interesting i'll
104:20 - create a multiplication table using the
104:22 - while loop so i'll go to my code editor
104:25 - as usual you can see the basic structure
104:27 - of c program
104:29 - now i'll create a variable number
104:33 - now i'll ask the user to provide the
104:35 - input so let's use printf statement
104:38 - and i'll enter the message enter the
104:41 - number
104:42 - for the users
104:45 - so
104:47 - and then i'll store the input in the
104:49 - number variable so i'll use scanf
104:52 - statement
104:57 - just like before i'll create account
104:59 - variable
105:01 - so count
105:02 - and i will assign value 1 to this
105:06 - i want to create a multiplication table
105:08 - up to 10 so i'll use while loop
105:10 - so while
105:12 - with a condition
105:14 - count
105:15 - is
105:16 - less than or equals to
105:19 - 10 so
105:22 - inside the while loop i'll multiply the
105:24 - number provided by the user so number is
105:27 - multiplied
105:28 - with the count
105:31 - and i'll assign this to a to an in
105:33 - variable
105:35 - let's say product
105:38 - then i'll print this
105:40 - product variable
105:42 - so using printf statement
105:46 - we'll print this
105:52 - and finally i'll increase the value of
105:54 - count by
105:57 - so one equals to count plus
106:00 - 1.
106:01 - so before i run this i'll add here
106:04 - backslash n so that the output will be
106:06 - more clearer so let's run this program
106:09 - and i want the multiplication of 8 so
106:12 - i'll enter it and you can see the
106:14 - multiplication of 8 is printed on the
106:16 - screen
106:18 - now let's see what's happening here
106:20 - inside loop i'm multiplying the number
106:22 - provided by the user to the value of
106:25 - count then we are printing the value of
106:27 - product and you can see the output on
106:29 - the screen and then the value of count
106:32 - is increased
106:33 - in each iteration
106:35 - initially the value of count is equals
106:37 - to 1
106:39 - when the number 8 is multiplied with the
106:41 - value of count 1
106:43 - the output is 8
106:45 - and in the second iteration the value of
106:47 - count is equals to 2 so
106:50 - 8 into 2 is equals to 16. in this way
106:54 - the number is multiplied by the value up
106:57 - to 10 so we get the multiplication up to
107:00 - 10
107:02 - here i am printing only the product
107:04 - and to be honest it does not look like
107:06 - multiplication table so i want to print
107:09 - the exact multiplication table like 8
107:11 - multiplied by 1 is equals to 8 and 8
107:14 - multiplied by 2 is equals to 16 and so
107:17 - on now i'll modify my code
107:20 - so i'll
107:21 - do percent d into percent d equals to
107:25 - percent
107:26 - that is
107:28 - number
107:29 - into
107:31 - count
107:34 - is equals to product
107:36 - here you can see
107:38 - i am printing all these three variables
107:40 - with proper formatting
107:43 - now let me run this code
107:46 - and i'll enter it again
107:48 - as you can see
107:49 - the output looks better now now you can
107:53 - create multiplication table of any
107:55 - number
107:56 - okay guys we need your support to keep
107:58 - these types of content free for all
108:00 - users youtube really likes engagement on
108:02 - the video so leave a comment below press
108:04 - that like button hit subscribe if you
108:06 - haven't already let's get the engagement
108:08 - score high up so that more people can
108:10 - discover and enjoy these courses
108:15 - in c programming there is another
108:17 - version of while loop known as do while
108:19 - loop the working of do i loop is similar
108:21 - to that of while loop with one major
108:24 - difference before we learn more let's
108:26 - start with the syntax of do while loop
108:29 - the do while loop starts with the do
108:31 - keyword followed by the body of the loop
108:34 - and the while keyword
108:36 - with the condition inside the
108:37 - parenthesis and do not forget to put
108:40 - this semicolon at the end here the body
108:42 - of the loop is executed first and then
108:45 - the condition is evaluated if the
108:47 - condition is evaluated to true the body
108:50 - of the loop is executed again
108:53 - this process continues until the
108:55 - condition becomes false and if the
108:56 - condition is false then the loop
108:58 - terminates
109:00 - let's see an example
109:02 - so i'll remove this old code and i'll
109:04 - start with the basic structure of c
109:06 - program
109:13 - as you can see this is the basic
109:14 - structure of c program now i'll create a
109:17 - count variable
109:19 - so
109:19 - count variable and assign value 1 to
109:22 - this
109:24 - then i'll write a do
109:26 - block and i'll print
109:30 - the value of count here
109:32 - so percent d
109:34 - and
109:35 - backspace n
109:37 - and count here
109:40 - and increase the value of count by one
109:43 - account equals to count plus one
109:46 - now i'll use the while condition
109:49 - and i'll check if
109:51 - count is
109:52 - less than five
109:56 - now let's run this code
109:59 - as you can see the value of count is
110:02 - increased in each iteration when you
110:04 - compare a do i look with a while loop
110:07 - you can see in the do while loop the
110:08 - code that is to be executed is kept
110:11 - inside the do block and the condition it
110:14 - checked this is why the code in do while
110:16 - loop is executed once even if the
110:18 - condition is false let me show you here
110:20 - i'll change the value of count from 1 to
110:23 - 5
110:24 - now the condition is 5 less than 5 which
110:27 - is false so let me run this code here
110:30 - you can see we get 5 as output even
110:32 - after the condition is false from the
110:35 - beginning
110:36 - this is because first the do block is
110:38 - executed which will print the value of
110:40 - count so we get 5 as output then the
110:43 - condition is checked which is false so
110:46 - the loop terminates
110:49 - the do while loop is executed once no
110:51 - matter what this is the major difference
110:53 - between the while and do while loop
110:55 - since the working of do while loop is
110:57 - similar to that of while loop we can use
110:59 - it to print a multiplication table go
111:01 - ahead and print the multiplication table
111:04 - like before using a do while loop
111:08 - now to revise what we have learned here
111:10 - is a programming tags for you can you
111:12 - use the while loop to print the
111:13 - multiplication table for the given
111:15 - number but this time you have to print
111:17 - the number from 10 to 1 so the output
111:20 - would be something like this
111:22 - it's time for programming squeeze which
111:24 - of the following causes an infinite loop
111:31 - hey guys this is me padma from
111:32 - programming and welcome back to this
111:34 - series on c programming in this video
111:36 - we'll learn about for loop to repeat a
111:38 - block of code for a specific number of
111:40 - times in the last video we learned about
111:43 - while loop similar to the while loop we
111:45 - can also use for loop to repeat a block
111:48 - of code for multiple times let's start
111:50 - with the syntax of for loop a for loop
111:53 - starts with the four keyword and three
111:54 - expression inside the parentheses the
111:57 - first expression is called
111:59 - initialization expression
112:01 - it declares and initialize a variable
112:03 - for example
112:05 - int
112:06 - i equals to
112:07 - zero
112:09 - the initialization expression is
112:10 - executed only once next the test
112:13 - expression the test expression is a
112:16 - boolean expression that evaluates to
112:18 - true or false for example
112:21 - i is less than 5. if the test expression
112:25 - is true then the code inside the for
112:27 - loop is executed and then the update
112:30 - expression is executed
112:32 - the update expression changes the value
112:34 - of a variable for example
112:36 - i plus plus
112:38 - or i plus 1.
112:41 - here the value of i is increased by 1 in
112:43 - each iteration
112:45 - now again the test expression is
112:47 - executed if the test expression is true
112:49 - again then the code inside the for loop
112:51 - is executed
112:53 - and the value of i is updated again
112:56 - and the test expression is evaluated for
112:59 - the third time this process continues
113:02 - until the test expression i less than 5
113:05 - becomes false if the test expression is
113:07 - false then the for loop terminates
113:11 - now you know the working of a for loop
113:13 - let's see an example i'll remove this
113:15 - old code and i'll start with the basic
113:18 - structure of c program
113:20 - here you can see the basic structure of
113:21 - c program suppose i want to print the
113:24 - number from 0 to 9 so i'll use for loop
113:28 - with initialization expression
113:30 - into i equals 0
113:33 - since i want numbers up to 9 so i'll
113:36 - write the condition i less than 10
113:39 - and i'll increase the value of i by 1 in
113:41 - each iteration
113:43 - and inside for loop i'll print the value
113:46 - of i so printf
113:48 - percent d
113:51 - sorry
113:52 - percent d comma
113:55 - i
113:56 - and to make our code much more cleaner
113:58 - and understandable i'll put the space
114:01 - here so i'll run this code you can see
114:04 - the numbers from 0 to 9 are printed on
114:07 - the screen
114:08 - let's see what's happening here
114:10 - initially the value of i is equals to 0
114:13 - so the statement inside the for loop is
114:15 - executed and 0 is printed on the screen
114:18 - now the update expression increases the
114:21 - value of i from 0 to 1 and test
114:23 - expression is evaluated again since 1 is
114:26 - still less than 10 then the test
114:29 - expression is true and the statement
114:32 - inside the for loop is executed and 1 is
114:34 - printed on the screen the update
114:36 - expression
114:38 - again increase the value of i from 1 to
114:40 - 2 the process continues for the value of
114:43 - i up to 9 when the value of i becomes 10
114:46 - the test expression becomes
114:49 - 10 is less than 10 which is false then
114:51 - the loop terminates and in this way we
114:53 - get the output from 0 to 9.
114:56 - we can also use the for loop to print
114:59 - the message multiple times here instead
115:02 - of printing the value of i i'll print
115:04 - the message
115:05 - so i'll cut this part
115:08 - and i'll write the message like
115:10 - emergency
115:12 - condition
115:16 - so let's run this as you can see the
115:18 - message emergency condition is printed
115:21 - 10 times now suppose i want to print the
115:23 - message 20 times so i'll change the
115:26 - value from 10 to 20
115:28 - and i'll run this again
115:30 - as you can see it is printed 20 times
115:34 - if you are enjoying this video you will
115:36 - definitely love our interactive c
115:38 - programming course on programmies pro
115:40 - the course includes easy to follow
115:42 - tutorials along with quizzes and
115:44 - challenges to practice and test your
115:46 - coding knowledge in real time you will
115:48 - also be creating projects to experience
115:50 - how programming works in the real world
115:53 - and in the end you will receive a
115:54 - certificate which will help you land
115:56 - your first job sign up now by using this
115:59 - qr code or you can also use the link in
116:01 - the description box
116:05 - now let's see a practical example of a
116:08 - for loop in c programming suppose we
116:10 - want to find the sum of all numbers from
116:13 - 1 to 100 then instead of adding the
116:15 - number like 1 plus 2 plus 3 plus 4 and
116:18 - so on we can do is use a for loop let me
116:22 - show you i'll use the same code from
116:24 - earlier
116:25 - first i'll cut this part because we
116:27 - won't need this
116:29 - now i'll continue with the same code now
116:31 - since i want the sum from 1 to 100 so
116:34 - i'll change the initial value of i from
116:36 - 0 to 1
116:38 - and i'll change this test condition from
116:41 - i is less than 20 to i is
116:44 - less than or equals to 100
116:49 - then this update expression will update
116:51 - the value by 1 in each iteration now our
116:54 - loop runs 100 times from 1 to 100
116:58 - to store the sum of all numbers i'll
117:01 - first create a variable sum
117:04 - and i'll assign value 0 to this
117:07 - then inside the for loop i'll add some
117:11 - variable with value of i so sum equals
117:13 - to sum plus i
117:18 - so it becomes
117:19 - sum plus 1 in first iteration and sum
117:22 - plus 2 in second iteration and so on
117:25 - and finally i'll print the value of
117:28 - sum
117:29 - outside the loop
117:30 - so printf
117:33 - percent
117:34 - d
117:36 - sum
117:39 - now i'll run this code
117:41 - as you can see we get
117:43 - 5050 as our output which is the sum of
117:46 - all numbers from 1 to 100
117:49 - let's see how this program runs
117:52 - initially the value of i is equals to 1
117:54 - so this condition i less than or equals
117:57 - to 100 becomes true and the statement
118:00 - inside the loop is executed here we are
118:03 - adding sum with the value of i and
118:05 - assigning the value back to sum
118:08 - so the new value of sum is 0 plus
118:11 - 1
118:12 - that is equals to 1.
118:15 - now the update expression will change
118:17 - the value of i to 2 here the test
118:20 - expression is true again and this time
118:22 - sum is equals to sum
118:25 - plus i that is the value of sum is
118:28 - 1 from the first iteration and the value
118:30 - of i is 2 from the update expression so
118:33 - 1 plus 2 is equals to 3 this time the
118:36 - value of sum is equals to 3.
118:39 - in this way in each iteration the value
118:41 - of i is added to the new value of sum
118:43 - and finally when the value of i becomes
118:46 - 101 the test expression becomes false so
118:50 - the loop terminates
118:52 - and now final value of sum is equals to
118:55 - 5050 which is the sum of all the numbers
118:59 - from 1 to 100. you can see the use of
119:02 - for loop has made our tax much easier
119:05 - and faster if you have to add the number
119:08 - manually one by one it will be so
119:10 - difficult and error prone okay guys we
119:13 - need your support to keep these types of
119:14 - content free for all users youtube
119:17 - really likes engagement on the video so
119:19 - leave a comment below press that like
119:20 - button hit subscribe if you haven't
119:22 - already let's get the engagement score
119:24 - high up so that more people can discover
119:26 - and enjoy these courses
119:31 - let's see one more example this time
119:33 - i'll find the sum of only even numbers
119:35 - from 1 to 100 for this all i have to do
119:38 - is change the initial value of i from 1
119:41 - to 2
119:42 - and i'll change this update expression
119:45 - by 2 instead of 1 so i'll change this
119:49 - so i equals to
119:52 - i equals to i plus 2
119:56 - so before i explain what's happening
119:58 - here let me run this code
120:00 - as you can see the output
120:03 - 2550 is printed on the screen let's see
120:06 - what's happening here
120:08 - initially the value of i is equals to 2
120:11 - which is an even number
120:13 - when the loop execute
120:15 - 2 is added
120:17 - to the value of sum which is 0 so the
120:20 - value of sum is equals to 2.
120:23 - now this update expression increases the
120:26 - value of i by 2 so the new value of i
120:29 - becomes 4 which is also an even
120:32 - since the test condition is true then
120:35 - the
120:35 - expression inside the for loop is
120:37 - executed so the value of i which is
120:40 - equals to 4 is added with the value of
120:42 - sum which is equals to 2 from the first
120:44 - iteration so
120:46 - we get the value of sum equals to
120:49 - 2 plus 4 that is equals to 6
120:52 - which is also an even number
120:54 - in this way the update expression
120:57 - only updates the value of i to an even
121:00 - number and even value is added to the
121:02 - sum
121:03 - and this way we get the sum of even
121:06 - numbers and we get the final output
121:08 - 2550.
121:13 - now to revise what we have learned here
121:15 - is a programming tax for you can you use
121:17 - the for loop to compute the sum of only
121:20 - odd number from 1 to 100 in each
121:22 - iteration you need to add an odd number
121:25 - to the sum it's time for programming
121:27 - squeeze in the for loop below which is
121:29 - the update statement
121:33 - in this video we'll learn about brick
121:35 - and continue statement to alter the
121:37 - normal flow of loops in c programming
121:39 - the break statement immediately
121:41 - terminates the loop when it is
121:43 - encountered before we move forward let's
121:45 - see the working of loop first here i
121:47 - have used for loop the loop starts from
121:50 - i is equals to 1 to i is equals to 5 and
121:54 - it prints the value of i
121:56 - so let me run this code
121:58 - as you can see we get the output from 1
122:01 - to 5.
122:02 - now let me use break statement inside
122:05 - the loop after the print statement and
122:07 - i'll run this code this time i only get
122:10 - 1 as output
122:12 - let's see what happened here
122:14 - during the first iteration the value of
122:16 - i is equals to 1 so when the loop runs
122:19 - the value 1 is printed now after the
122:22 - print statement the break statement is
122:24 - encountered and this break statement
122:26 - immediately terminates the loop
122:29 - for more clarity let me add another
122:31 - print statement after this break
122:33 - statement so printf
122:36 - and i'll enter the message
122:39 - after
122:41 - the
122:42 - break
122:44 - so let's run this
122:47 - as you can see we get the same output
122:50 - one
122:51 - this is because when the break statement
122:53 - is encountered the loop exit and no
122:56 - other code of the for loop is executed
122:59 - we generally use the break statement
123:01 - with the decision making statement like
123:03 - if else statement this is why we can
123:05 - break a loop under a certain condition
123:08 - let's see an example i'll use the same
123:10 - code from earlier here i'll remove this
123:13 - break statement and the print statement
123:14 - after that now suppose i want to end the
123:18 - loop when the value of i is equals to 3
123:20 - so i'll add if statement
123:23 - so
123:24 - if statement with the condition i is
123:27 - equals to 3
123:29 - and inside this if statement i'll use
123:32 - break
123:34 - now i'll run this code
123:36 - as you can see we get the output
123:39 - 1 and 2.
123:40 - here during the first iteration the
123:42 - value of i is equals to 1 so this if
123:45 - statement is false so we'll go to this
123:49 - print statement and 1 is printed on the
123:52 - screen
123:53 - now the value of i is increased to 2 and
123:56 - this statement
123:58 - is again false because the condition
124:00 - does not meet and again this print
124:02 - statement is executed and 2 is printed
124:05 - on the screen
124:06 - when the value of i is equals to 3 the
124:09 - if condition is true and this break
124:12 - statement is executed and the loop
124:14 - terminates hence we get the output 1 and
124:17 - 2.
124:20 - let's now use the break statement with
124:22 - while loop i'll create a program that
124:24 - will ask input values from the user if
124:27 - the user inputs a positive value it will
124:29 - be printed however if the user input a
124:31 - negative value the while loop is
124:33 - dominated i'll use the same code from
124:35 - earlier i'll remove this for loop i'll
124:38 - create a while loop
124:40 - that is always true and i'll use one as
124:43 - a condition of while loop because we
124:45 - know that one represents true in c
124:47 - programming
124:48 - so this while loop is always true now
124:51 - inside while loop i'll declare a
124:53 - variable number so int number
124:57 - and i'll ask the input from the user
125:00 - and i'll ask the user to enter a number
125:08 - and i'll store it using scanf function
125:18 - since i want to break the loop only if
125:20 - the input value is negative i'll add if
125:23 - statement with the condition number
125:26 - is
125:27 - less than 0
125:29 - then
125:30 - will
125:31 - break the loop
125:33 - if it is not negative will print the
125:36 - value of the variable so i'll use printf
125:39 - statement
125:40 - so percent d
125:42 - and
125:43 - name of the variable that is number
125:47 - now let me run this code
125:49 - and i'll enter 5. you can see 5 is
125:51 - printed and i'll enter 9
125:54 - and it is also printed so now let's
125:56 - enter some negative value
126:00 - you can see the loop terminated
126:02 - here you can see as long as we entered
126:05 - positive value the while loop executed
126:08 - repeatedly however
126:10 - when the input is negative then the if
126:12 - statement becomes true and the break
126:15 - statement is executed and it terminates
126:18 - the loop
126:21 - now let's move to the continue statement
126:24 - on like break the continue statement
126:26 - skips the current iteration of the loop
126:28 - and starts the loop with the next
126:30 - iteration let's see an example
126:33 - in this code we have used break
126:34 - statement to terminate the loop when the
126:37 - value of i is equals to 3 now let me
126:40 - replace this break statement with
126:41 - continue statement so continue
126:45 - and i'll run this code now if you look
126:48 - into the output you can see the value 3
126:51 - is not printed let's see why this
126:53 - happens
126:55 - we know that the loop runs for 5 times
126:59 - from i is equals to 1 to i is equals to
127:02 - 5 and during the first and second
127:04 - iteration the value of i are 1 and 2
127:07 - respectively so if condition is false
127:09 - for both iteration hence the loop runs
127:12 - normally and
127:14 - 1 and 2 are printed during the third
127:17 - iteration the value of i is equals to 3
127:20 - this time if condition is true and
127:22 - continuous statement is executed
127:25 - now the continue statement skips the
127:27 - current iteration of the loop and start
127:29 - the next iteration so the program jumps
127:32 - to this update expression and increase
127:34 - the value of i to 4 and again for the
127:37 - value 4 and 5 the if condition is false
127:40 - and loop runs normally and 4 and 5 is
127:44 - printed on the screen in this way for
127:47 - value 3 the continuous statement skips
127:50 - the print statement
127:52 - ok guys we need your support to keep
127:54 - this type of content free for all users
127:56 - youtube really likes engagement on the
127:58 - video so leave a comment below press
128:00 - that like button and hit subscribe if
128:02 - you haven't already let's keep the
128:04 - engagement score high up so that more
128:06 - people can discover and enjoy these
128:08 - courses
128:11 - we now know the working of break and
128:12 - continue let's use them together in a
128:15 - single loop i'll create a program that
128:17 - takes the input values from the user
128:19 - however i want the user to input
128:21 - positive number only so if the user
128:23 - enters 0 or negative number i'll use the
128:26 - break statement to terminate the loop
128:28 - also to make the program more
128:30 - interesting i'll only print the even
128:32 - numbers so if the user inputs an odd
128:34 - number i'll use the continue statement
128:36 - to skip the loop so that odd numbers are
128:39 - not printed let's start now
128:42 - here the break statement is already
128:44 - implemented that ends the loop if the
128:46 - number is a negative number
128:48 - since we want to exit the loop if the
128:50 - number is either negative or 0 i'll
128:53 - change this less than operator to less
128:55 - than or equal to operator
128:57 - now i want to run the continue statement
128:59 - if the number is odd so i'll add if
129:02 - statement
129:03 - with the condition
129:05 - number
129:06 - modulo 2
129:08 - is
129:09 - not equal to
129:11 - 0.
129:12 - so inside if we'll add continuous
129:15 - statement
129:17 - here the modulo operator returns a
129:19 - remainder so for a number to be odd it
129:21 - shouldn't have a remainder 0 when it is
129:24 - divided by 2.
129:26 - so let's run this code
129:29 - i'll enter 4.
129:33 - you can see 4 is printed because it is
129:35 - an even number
129:37 - now i'll add
129:39 - 7
129:41 - and i'll enter
129:43 - i'll enter even number 32 and you can
129:46 - see this 32 is also printed
129:50 - now let's enter
129:52 - a negative value
129:53 - so minus 3
129:56 - you can see the loop is terminated
129:59 - so as you can see when the input value
130:01 - is positive and
130:03 - odd number this condition becomes true
130:06 - so the continuous statement skips the
130:08 - print statement for the odd input value
130:11 - however when the input values are
130:13 - positive even numbers both the condition
130:15 - becomes false so it is printed when it
130:19 - is a even number when the input value is
130:21 - negative this condition number less than
130:24 - or equals to zero becomes true so the
130:26 - break statement terminates the loop
130:31 - now to revise what we have learned it is
130:33 - a programming tax for you can you write
130:35 - a program that takes an input from the
130:37 - user and print it if the value is a
130:40 - negative odd number however if the input
130:43 - value is positive in the loop with the
130:45 - message positive value and if the input
130:47 - value is negative even skip the value
130:50 - with the message negative even so our
130:52 - output will look like this
130:54 - it's time for programming squeeze which
130:57 - of the following keyword is used to skip
130:59 - the current iteration of a loop
131:05 - in this video we'll learn about
131:06 - functions to divide our program into
131:08 - small blocks of code we'll also learn
131:11 - different types of function available in
131:13 - c programming a function is a group of
131:15 - related statement that perform a
131:17 - specific task they help us divide a
131:20 - large program into smaller chunks so
131:21 - that it is easier to understand and
131:23 - modify them
131:25 - suppose you need to create a program
131:27 - that draws a circle and a rectangle of
131:30 - different colors based on user input
131:32 - instead of creating one big chunk of
131:35 - statement to create this program we can
131:37 - create three functions a function to
131:40 - create a circle function to create a
131:42 - rectangle and a function to color the
131:45 - seed
131:46 - doing this help us divide the complexity
131:48 - of the program and help us focus on the
131:50 - specific part of the program at a time
131:53 - now that you know why we need a function
131:56 - let's see how we can create a function
131:58 - in c programming on your screen you can
132:00 - see the syntax of the function
132:02 - here the return type indicates the data
132:04 - type of the value that is returned by
132:07 - this function function name
132:09 - the function name is the name of the
132:11 - function and this dot inside the curly
132:14 - braces indicates the statement inside
132:17 - the function now let's use this syntax
132:20 - and create a simple function that prints
132:22 - good morning here you can see the basic
132:25 - structure of c program now i'll start
132:27 - with the return type first so
132:30 - here i don't want to return any value
132:32 - from the function so i'll use void as
132:35 - the return type
132:36 - remember that if a function does not
132:38 - return any value use the void as a
132:41 - return type now i will write
132:43 - greet
132:44 - as the name of my function
132:47 - and don't forget to use the parentheses
132:50 - these are needed to denote that this is
132:52 - a function
132:54 - now inside the function
132:56 - i'll print
132:58 - good morning
133:00 - so good
133:02 - morning
133:05 - now let me run this code
133:07 - as you can see nothing happened this is
133:10 - because to run a function we need to
133:12 - call it now to call a function we use
133:15 - function name
133:16 - with the parenthesis so
133:18 - we use the name of the function that is
133:20 - grid with the parenthesis
133:23 - and i'll run this code
133:26 - now this time you see the output good
133:28 - morning let's see how this program works
133:30 - like any other c program the execution
133:33 - start from main and when it encounters
133:36 - the function call the control of the
133:38 - program moves to the function definition
133:41 - now the code inside the function is
133:44 - executed and good morning is printed on
133:46 - the screen
133:48 - once the execution of function is
133:49 - completed the program of the control
133:52 - moves back to the next line after the
133:54 - function call
133:56 - now to verify this we can
133:58 - print
133:59 - the statement after the function call so
134:02 - i'll print
134:04 - after
134:05 - function
134:07 - call
134:09 - and
134:10 - before i run this i'll add here
134:12 - backspace n
134:13 - now let's run this
134:15 - as you can see first the code inside the
134:18 - function is executed now the control
134:20 - move back to the function call so the
134:23 - code after the function call is executed
134:26 - so we get the output good morning and
134:28 - after function call
134:30 - and as discussed earlier one of the good
134:32 - thing about the function is code
134:34 - reusability now once we create a
134:36 - function we can reuse it any number of
134:39 - times all we need to do is call it
134:42 - whenever we need now let me show you
134:44 - i'll remove this print statement
134:47 - and i'll add
134:49 - grit
134:51 - two more times
134:52 - so great
134:56 - and i'll run this
134:58 - so this time you can see good morning is
135:01 - printed three times
135:03 - before we move to the next section here
135:05 - is a quick tip for you it is a good
135:07 - practice to use descriptive names for
135:09 - function so that anyone reading the code
135:12 - will know what the function is doing by
135:14 - just reading the function name
135:16 - here we are greeting good morning so we
135:18 - are using greet as its function
135:20 - functioning we can also use wish morning
135:23 - or any other descriptive functioning if
135:26 - you are enjoying this video you will
135:28 - definitely love our interactive c
135:30 - programming course and program is pro
135:32 - the course includes easy to follow
135:34 - tutorials along with quizzes and
135:36 - challenges to practice and test your
135:37 - coding knowledge in real time you will
135:40 - also be creating projects to experience
135:42 - how programming works in the real world
135:44 - and in the end you will receive a
135:46 - certificate which will help you land
135:48 - your first job sign up now by using this
135:50 - qr code or you can also use the link in
135:53 - the description box
135:57 - so far we have created function that
135:59 - just prints message however sometimes we
136:02 - might want to create function that
136:04 - accepts some value and perform some
136:06 - action based on that value for example
136:09 - suppose we want to create a function
136:11 - that accept a number and computes the
136:13 - square of the number and print it we can
136:16 - do this in c programming with the help
136:18 - of function parameters a parameter is a
136:20 - value accepted by the function now let
136:23 - me show you how we can create function
136:25 - with a parameter so let me get back to
136:27 - my previous code i'll remove this grid
136:30 - function
136:31 - and i'll also remove this function call
136:34 - now i'll add another function
136:36 - call it
136:38 - calculate
136:40 - square
136:42 - so
136:43 - calculate square
136:45 - and inside parentheses i'll add function
136:47 - parameter
136:48 - int number
136:51 - now inside the function i'll do
136:53 - int
136:55 - square
136:56 - is equals to
136:58 - number
136:59 - multiplied by number
137:01 - then i'll print the number and it's
137:03 - square like
137:05 - printf bracket inside quotation
137:10 - square
137:11 - of
137:12 - percent d is percent d
137:17 - that is
137:18 - after comma
137:20 - number
137:22 - sorry number
137:24 - comma
137:26 - square now here in the main function
137:29 - i'll call the function
137:31 - calculate
137:33 - square
137:37 - now let me run this code
137:40 - here we get an error
137:42 - this is because when we create a
137:45 - function with a parameter we need to
137:47 - pass the value
137:49 - while calling the function so in the
137:51 - function call i'll add 5
137:54 - inside the parentheses now i'll run this
137:57 - code again
137:58 - this time you'll see the output the
138:00 - square of 5 is 25 now let me tell you
138:04 - what happened here the calculate square
138:06 - function accepts the parameter so we
138:09 - call the function by passing the value
138:12 - 5. now the parameter number is assigned
138:14 - with the value 5
138:16 - so when we use number inside the
138:19 - function we are using the value 5. a
138:21 - function can also accept multiple
138:24 - parameters let's see an example here
138:26 - i'll change this function name from
138:29 - calculate square to add
138:32 - numbers inside the parenthesis i'll
138:34 - change this number
138:36 - to int number one and i'll add
138:39 - comma
138:41 - and i'll add int
138:43 - number
138:44 - two now i'll remove these two line
138:46 - inside the function and i'll add int
138:50 - some
138:51 - is equals to
138:53 - number 1
138:56 - plus
138:57 - number
138:58 - 2
138:59 - and i'll add print statement after that
139:02 - to print the number and sum so i'll do
139:05 - printf
139:06 - bracket inside quotation
139:09 - sum
139:10 - of
139:11 - percent d
139:13 - and
139:14 - percent
139:16 - d
139:17 - is
139:18 - percent d
139:19 - that is
139:21 - number
139:22 - 1
139:23 - comma number
139:26 - 2
139:27 - comma sum
139:29 - now i'll remove this
139:31 - earlier function called calculate square
139:33 - and i'll add
139:35 - add numbers
139:40 - with the value 8 and 9 as its
139:44 - arguments
139:45 - so i'll run this
139:47 - as you can see we get the sum of 8 and 9
139:51 - that is 17 as output
139:53 - here the value 8 and 9 are assigned to
139:55 - the parameter number 1 and number 2
139:58 - respectively in programming values
140:01 - passed during the function call are also
140:03 - called function arguments 8 and 9 in
140:06 - this case are the function arguments
140:09 - many people use parameters and arguments
140:12 - interchangeably so don't worry about
140:14 - that however one thing you should
140:16 - remember is that the data type of
140:18 - parameter and argument should be the
140:20 - same in our case we have created in-type
140:23 - parameters so we pass into the values 8
140:26 - and 9 during the function call if we
140:28 - want our function to accept double or
140:31 - care type parameters we should call the
140:33 - function with double or care values
140:35 - respectively go ahead and write a
140:38 - function that accept double parameters
140:40 - and add them
140:44 - till now we have been using void as the
140:46 - return type of our function this is
140:48 - because our functions are not returning
140:51 - any value in c programming we can also
140:54 - create a function that returns a value
140:56 - suppose in our earlier program instead
140:58 - of printing the sum inside the function
141:01 - we want to return it let's see how we
141:03 - can do that
141:05 - here is the code from our earlier
141:06 - program first i'll remove
141:08 - this void
141:10 - and i'll add int
141:13 - i'm using end because i want to return
141:15 - the sum of two numbers and the data type
141:18 - of sum is in
141:20 - now i'll remove this print statement
141:24 - and i'll add return
141:28 - sum
141:29 - here the return statement
141:31 - that is used to return any value from
141:34 - the function since the function is
141:36 - returning some value this return value
141:38 - need to be stored somewhere so during
141:40 - the function call i'll assign the
141:42 - function call to an n variable say
141:44 - result so int
141:47 - result
141:48 - is equals to this
141:50 - function
141:52 - then i'll print the result using print
141:55 - statement so print
141:57 - f
141:58 - printf
142:00 - result is equals to percent d
142:04 - comma
142:06 - result
142:08 - now let me run this code
142:11 - as you can see we get the result 17
142:13 - which is 8 plus 9. here the function add
142:17 - numbers add 2 number
142:19 - that is 8 and 9
142:21 - and it returns the sum
142:23 - the return value now replaces this
142:25 - function call
142:27 - so this statement becomes
142:30 - end result is equals to returned value
142:33 - which is 17 hence we print the result
142:36 - and we get 17 as our output the data
142:41 - type of the return value and the data
142:44 - type of the variable where the return
142:46 - value is stored should be the same
142:49 - the return statement is the last
142:51 - statement of a function when a return
142:54 - statement is encountered the function
142:56 - exits
142:58 - we can verify this by adding print
143:00 - statement after the written statement so
143:02 - i'll add a print statement after the
143:06 - return statement and i'll
143:08 - write
143:08 - here after
143:11 - return
143:12 - statement
143:15 - so
143:17 - i'll run this
143:19 - you can see we get the same output the
143:22 - print statement
143:24 - after the return statement is not
143:26 - executed
143:28 - okay guys we need your support to keep
143:30 - these types of content free for all
143:31 - users youtube really likes engagement on
143:33 - the video so leave a comment below press
143:35 - that like button hit subscribe if you
143:37 - haven't already let's get the engagement
143:39 - score high up so that more people can
143:41 - discover and enjoy these courses
143:45 - in c programming a function prototype is
143:48 - a declaration of a function it provides
143:50 - information about the function name
143:52 - parameters and return types however it
143:54 - does not include the body let's see an
143:57 - example
143:58 - here i have the code from our earlier
144:00 - program if you have noticed i have put
144:02 - the code of add number function after
144:06 - the main function
144:07 - now let me add the function prototype
144:10 - for this add number function
144:12 - so i'll add
144:14 - int
144:16 - add
144:17 - numbers
144:18 - parentheses
144:21 - int number
144:22 - 1
144:24 - comma
144:25 - int
144:26 - number
144:28 - two
144:30 - as you can see
144:31 - the function prototype includes the
144:33 - function name
144:34 - and return type and the parameters
144:38 - inside the parenthesis now let me run
144:40 - this code as you can see the program
144:44 - runs without any issue in our program we
144:47 - are calling the function
144:49 - before defining the function
144:52 - in this type of situation
144:54 - the function prototype provides
144:56 - information about the function to the
144:58 - compiler now during the function call
145:00 - the compiler can now match the function
145:03 - call signature with the function
145:05 - prototype signature
145:07 - if we are defining the function before
145:10 - function call a function prototype is
145:12 - not needed that's why we haven't
145:14 - included any function prototype in our
145:16 - earlier program
145:20 - so far we have been creating our own
145:23 - function these types of function we
145:25 - write the function definition ourselves
145:28 - are called user defined function in c
145:31 - there is another type of function called
145:33 - standard library function they are built
145:35 - in function that are already defined in
145:37 - the library files and we can directly
145:39 - use them in our program for example the
145:42 - printf function the printer function is
145:45 - a standard library function that allow
145:47 - us to print the output the printf
145:49 - function is defined inside the stdio.h
145:52 - header file that's why we need to
145:54 - include the file using include stdio.h
145:58 - similarly the sqrt is another standard
146:01 - library function that allow us to
146:03 - compute the square root of a number let
146:06 - me show you an example here you can see
146:08 - the basic c program first we need to
146:10 - include mat dot etch header file because
146:14 - sqrt is defined inside the map dot edge
146:18 - header file so i'll include
146:22 - math
146:23 - dot edge header file
146:25 - now inside main i'll use
146:28 - sqrt function the sqrt function returns
146:32 - the square root of number as a floating
146:34 - point value so i'll write
146:36 - float
146:37 - result
146:39 - is equals to sqrt and inside sqrt i'll
146:44 - write
146:45 - 25 and i'll end this with semicolon
146:49 - now i'll print this
146:52 - square
146:53 - root
146:56 - square root is percent f
147:01 - comma result
147:03 - now i'll run this code as you can see we
147:06 - get 5 as output which is the square root
147:09 - of 25
147:14 - in all of our program we have used main
147:17 - if we look into the syntax of main it
147:19 - looks similar to a function this is
147:21 - because main is also a function in c
147:23 - programming it is the first function
147:26 - that is executed by the compiler so
147:28 - every c program should include a main
147:30 - function
147:34 - now to revise what we have learned so
147:36 - far here is a programming tax for you
147:38 - can you create a program that takes two
147:41 - numbers perform the multiplication of
147:44 - two numbers returns the result
147:46 - it's time for programming squeeze what
147:48 - is the correct way to call the following
147:51 - function
147:55 - in this video we'll learn about variable
147:57 - scope more specifically we'll learn
147:59 - about local and global variable scope in
148:02 - c programming a scope is a particular
148:04 - reason in a program and a variable scope
148:07 - determines which variable can be
148:08 - accessed from which region of a program
148:11 - in c programming there are two basic
148:13 - types of variable scopes they are local
148:15 - variable scope and global variable scope
148:18 - let's start with the local scope first
148:23 - to understand the local scope let's see
148:26 - an example of a c function in my code
148:28 - editor you can see function add numbers
148:31 - this function takes two parameters and
148:34 - it stores the sum in the result variable
148:37 - and it prints the result inside the
148:40 - function
148:41 - instead of printing the result inside
148:43 - the add number function let's print it
148:45 - after the function call
148:47 - so i'll paste it here
148:50 - so i have moved this line from the add
148:52 - number function to this main function i
148:55 - will run this code you can see we get an
148:57 - error saying result on declared this is
149:00 - saying the result is appeared for the
149:03 - first time in the line 11.
149:06 - you might be wondering how is that
149:08 - possible even though we have declared
149:10 - the result variable here inside the
149:12 - function well this is where the concept
149:14 - of local variables comes in any variable
149:17 - that is declared inside the function is
149:19 - a local to it
149:21 - meaning the result variable is local to
149:24 - the add number function this reason is
149:26 - called local scope and the result
149:28 - variable has no existence outside this
149:31 - group when the function ends the local
149:34 - variable are destroyed
149:35 - this is why we get an error when we try
149:38 - to use the result variable outside the
149:40 - local scope now if you remember we can
149:43 - solve this problem by returning result
149:45 - from the add number function so i'll add
149:48 - return result
149:51 - and i'll change this void to end
149:56 - since the function now returns a value i
149:59 - will now assign this function
150:01 - to a variable sum
150:04 - and then i'll print
150:06 - the sum
150:07 - so i'll run this code you can see the
150:10 - result is equals to 11 which is
150:13 - 5 plus 6.
150:16 - with the return statement we are not
150:18 - using the local variables directly
150:20 - rather we are returning its value to the
150:22 - function call and assigning it to
150:24 - another variable inside the main
150:26 - function this concept of local variable
150:29 - is a good thing because anyone using
150:31 - this add number function does not need
150:33 - to know what's inside it they just need
150:35 - to know what argument to pass and what
150:38 - value it returns and they can use this
150:39 - function without a problem this makes
150:42 - our code reusable to not only us but
150:45 - also to our fellow programmers
150:48 - another way we can solve our earlier
150:50 - program is using global variables global
150:53 - variables are variables that are
150:55 - declared outside of the function let me
150:58 - show you
150:58 - so i'll use this code from earlier
151:01 - as you already know this code will
151:03 - generate an error so now what i will do
151:06 - is i'll declare an invariable result
151:10 - outside the add number function
151:13 - and then i'll remove this in from here
151:17 - now i'll run this code
151:20 - as you can see
151:21 - this code runs without any error
151:24 - so what happened here is the result
151:26 - variable is declared in global scope
151:29 - this is why we are able to access it
151:31 - from both the function this add number
151:34 - function and the main function it's time
151:37 - for programming squeeze
151:38 - in the volume code which variable is a
151:41 - global variable
151:46 - in the last video we'll learn to create
151:48 - a function this function which we define
151:50 - ourselves i called user defined function
151:53 - in c there is another type of function
151:55 - called standard library function the
151:58 - function definition of standard library
152:00 - function is already provided by c and we
152:03 - can directly use them in our program
152:05 - let's see a simple example to print a
152:08 - text
152:09 - you can see this code in my code editor
152:12 - i'll run this program
152:14 - and you can see hello world is printed
152:16 - on the screen here printf is a standard
152:20 - library function that prints the text on
152:22 - the screen we haven't provided any
152:24 - definition for printf instead we are
152:26 - directly using it in our program in c
152:29 - programming a standard library function
152:32 - is a predefined function which is
152:34 - already defined inside a file and we can
152:36 - directly use them in our program in our
152:39 - case the definition of printf file is
152:41 - present inside the stdio.h header file
152:45 - that's why we have included
152:47 - stdio.edgeheader file inside our program
152:50 - and once the file is included we are
152:52 - able to use the printer function inside
152:54 - our program and also the scanf function
152:57 - that we have used to take the input from
152:59 - the user is also a standard library
153:02 - function and it is also defined inside
153:04 - the stdio.h header file there are
153:07 - various header files available in c
153:09 - programming this file includes different
153:11 - standard library function that we can
153:13 - use directly in our program let's learn
153:16 - about some of the c library files and
153:18 - standard library function present in
153:20 - those files
153:23 - we'll start with the math file the
153:25 - math.h file provides us with various
153:28 - built-in function that helps us to
153:30 - perform mathematical operation easily
153:33 - for example
153:34 - the sqrt function computes the square
153:36 - root of a number all these math based
153:39 - standard library functions are defined
153:41 - inside the math.edge header file so to
153:44 - use them we import the math.ad header
153:47 - file in our program let's now use this
153:50 - math based library function in our
153:52 - program i'll start with the square root
153:54 - function on your screen you can see the
153:56 - basic structure of a c program
153:58 - now first i'll import the math.header
154:02 - files so
154:03 - i include
154:06 - math dot edge header file
154:09 - then i'll create an end variable
154:12 - say num
154:14 - and i'll assign value 25 to this
154:17 - i'll print the square root of this
154:18 - number so i'll write
154:20 - printf bracket inside quotation
154:24 - square
154:26 - root
154:28 - percent lf
154:30 - and
154:31 - comma
154:32 - s
154:33 - q rt
154:35 - inside parenthesis name of our variable
154:37 - num
154:40 - here the sqrt function returns the value
154:43 - in double so i have used percent lf to
154:46 - print the output now let me run this
154:48 - code
154:49 - as you can see we get 5 as output
154:54 - which is the square root of 25.
154:57 - here we don't have to worry about the
154:59 - definition of skrt function we can
155:02 - simply pass a number and get the square
155:04 - root of that number similarly we can use
155:07 - the cbit function to compute the cube
155:09 - root of a number let me show you i'll
155:12 - change the value of 25 to 27
155:15 - and i'll change this function sqrt to
155:19 - cbrt
155:21 - and then i'll change this text from
155:23 - square root
155:25 - to cube root
155:27 - so i'll run this
155:30 - as you can see i get 3 as output which
155:33 - is the cube root of 27
155:35 - now let me show you one more example
155:38 - this time i'll calculate the power of a
155:40 - number i'll use the same code from
155:43 - earlier and i'll remove these lines
155:47 - and i'll create two variables so end a
155:51 - and i'll assign value 5 to this in
155:53 - variable a
155:54 - and another variable b and i'll assign
155:57 - 2 to this
156:00 - now i'll use pow function
156:03 - so inside the parenthesis i'll use two
156:05 - variables a and b
156:08 - here this pow function is the power
156:11 - function i'll assign this to a double
156:13 - variable result so double result
156:17 - is equals to pow function
156:20 - and finally i'll print this
156:23 - using printf statement
156:25 - so power
156:29 - percent lf
156:32 - comma
156:34 - result and i'll run this code here we
156:38 - get 25 as our output
156:41 - so what happens here is this first
156:44 - argument a of the power function is the
156:46 - base value and the second argument b is
156:49 - a power raised to the base
156:51 - so it gives
156:53 - 5 raised to the power 2 which is equals
156:56 - to 25
156:58 - now let me change this value of b from 2
157:01 - to 3 and i'll run this again
157:04 - and this time you can see we get
157:07 - 125 which is 5 raised to 3.
157:11 - there are various functions defined
157:13 - inside the math.header file you can
157:15 - learn about them on programmies.com
157:17 - website i'll put the link in the video
157:19 - description below
157:22 - now let's learn about different library
157:24 - function available inside the c type dot
157:27 - edge header file this file provides
157:29 - function to perform various operations
157:32 - on characters hence it is known as a
157:35 - character type header file let's see
157:37 - some example
157:39 - so you can see this basic structure of c
157:41 - program here first i'll import c type
157:45 - header file in our program so
157:48 - c type dot
157:50 - h header file
157:52 - now inside the main function i'll create
157:55 - a character variable
157:58 - say alpha and i'll assign a character e
158:02 - to this
158:03 - let's first use a function to convert
158:05 - this character to uppercase so i'll use
158:08 - a function
158:09 - to
158:10 - upper
158:12 - and inside the parentheses i'll use
158:14 - alpha
158:15 - and i'll assign this to a care variable
158:18 - upper so
158:21 - care
158:22 - upper is equals to this function
158:25 - then i'll print this using printf
158:27 - statement so percent c
158:30 - comma
158:31 - upper
158:33 - i will run this code
158:35 - and you can see
158:37 - we get capital e as output
158:40 - now let's change this uppercase value to
158:42 - lowercase so after this print statement
158:45 - i'll write
158:46 - care
158:47 - lower
158:49 - and i'll assign function
158:52 - to lower
158:54 - inside parentheses i'll put here upper
158:57 - then i'll print this lower variable as
158:59 - well
159:00 - so
159:01 - percent c
159:03 - comma
159:05 - lower
159:07 - and then i'll run this code as you can
159:10 - see the capital e is now converted to
159:12 - lowercase e in our example to upper and
159:16 - to lower our standard library function
159:19 - that are used to convert character to
159:21 - uppercase and lowercase respectively
159:24 - okay guys we need your support to keep
159:26 - these types of content free for all
159:28 - users youtube really likes engagement on
159:31 - the video so leave a comment below press
159:32 - that like button hit subscribe if you
159:34 - haven't already let's get the engagement
159:37 - score high up so that more people can
159:38 - discover and enjoy these courses
159:43 - now that we know how to use library
159:45 - function in our program let's see why
159:48 - standard library function are so helpful
159:50 - as we saw earlier we can directly use
159:53 - library function in our program we don't
159:56 - have to worry about the function
159:57 - definition and we don't have to write
160:00 - the code ourselves this saves
160:02 - significant amount of time and since
160:04 - they are already tested they work
160:06 - completely fine without any error also
160:09 - they are built in inside the c program
160:12 - so they are optimized for better
160:14 - performance and developers are
160:15 - constantly improving to keep them up to
160:18 - date there are so many library function
160:21 - in c programming if you want to learn
160:22 - about them visit our text based tutorial
160:25 - i'll put the link in the video
160:27 - description below
160:30 - now to revise what we have learned in
160:32 - this video here is the programming tags
160:34 - for you create a program that compute
160:36 - the result of a number raised to the
160:38 - power of the square root of a number so
160:42 - first take the input from user compute
160:44 - the square root of number using sqrt
160:47 - function compute the power of the number
160:49 - raised to the power of its square root
160:52 - and then print the result it's time for
160:54 - programming squeeze
160:56 - what is the correct way to include
160:58 - library function in our program
161:02 - in our past videos we'll learn about
161:04 - function now we will learn to create a
161:06 - different type of function that call
161:08 - itself these are called recursive
161:10 - function in computer programming
161:12 - recursion is a process that allow us to
161:15 - create a function that call itself let
161:17 - me show you what does that mean
161:19 - on your screen you can see we have
161:21 - created a function named recurse and you
161:24 - can also see we are calling the recurse
161:27 - function from inside its body here the
161:30 - function is calling itself this is
161:32 - called a recursive function let me tell
161:34 - you how this works
161:36 - initially the recurse function is called
161:38 - from the main function now the control
161:41 - of the program goes inside the body of
161:43 - the recurse function
161:45 - inside the function body we have
161:47 - included the function call to call the
161:50 - same recurse function
161:52 - now again the program's control move
161:54 - back to the recurse
161:56 - in this way the function is called again
161:58 - and again this might result in infinite
162:01 - function execution to prevent this
162:03 - infinite recursive call we need to
162:06 - provide an if else statement let me show
162:08 - you you can see we have put the
162:10 - recursive call inside if else statement
162:13 - now the function call itself only under
162:16 - certain condition this way we can
162:18 - prevent the infinite recursive call
162:20 - if you are enjoying this video you will
162:22 - definitely love our interactive c
162:24 - programming course and program is pro
162:26 - the course includes easy to follow
162:28 - tutorials along with quizzes and
162:30 - challenges to practice and test your
162:32 - coding knowledge in real time you will
162:34 - also be creating projects to experience
162:36 - how programming works in the real world
162:38 - and in the end you will receive a
162:40 - certificate which will help you land
162:42 - your first job sign up now by using this
162:44 - qr code or you can also use the link in
162:47 - the description box
162:51 - now that we know how recursion works
162:53 - let's see an example i'll create a
162:55 - program that computes the sum of n
162:58 - natural numbers instead of typing the
163:00 - program line by line i'll just copy the
163:02 - program so that i can focus more on the
163:05 - actual working in our previous video
163:07 - function we have already discussed about
163:09 - this function prototype so if you want
163:11 - to know more on this you can find the
163:13 - link in the video description as well
163:15 - here we have some function that takes in
163:18 - parameter n
163:19 - here n represents the number up to which
163:21 - we have to find the sum for example if n
163:24 - is 4 we have to find the sum of four
163:27 - numbers 1 2 3 and 4. inside the sum
163:31 - function we have an if else statement
163:34 - that checks if n is equals to 0
163:37 - if false the function makes a recursive
163:40 - call to itself however for each
163:42 - recursive call we are decreasing the
163:44 - value of n and finally when the value of
163:47 - n becomes 0 the else condition returns n
163:51 - and the recursive call is stopped let's
163:53 - run this code and i'll enter 4
163:57 - you can see we get the sum is equals to
163:59 - 10 let's see how it works
164:02 - so initially we provide 4 as input value
164:05 - which is stored inside the number
164:06 - variable this value is passed to the sum
164:09 - function during the function call from
164:11 - the main function
164:13 - inside the sum function the value of n
164:15 - is now 4
164:17 - so the condition is not equal to 0
164:20 - so this condition becomes true and if
164:23 - statement is executed
164:25 - here the return statement inside if
164:27 - returns n which is 4
164:29 - plus a recursive call to sum which with
164:33 - a new value 3 which is 4 minus 1.
164:37 - now again the value of n is 3 which is
164:41 - not equals to 0 so this condition is
164:44 - true again so the if statement is
164:46 - executed
164:48 - now if statement returns 3 and a
164:50 - function call with a new value 2. this
164:53 - process continues until the value of n
164:56 - becomes 0 when n becomes 0 the else
164:59 - statement is executed which returns 0.
165:03 - finally we have returned value 4 plus 3
165:07 - plus 2 plus 1 plus 0 hence we get
165:11 - 10 as output
165:14 - also this image will help you visualize
165:16 - the working more clearly
165:19 - okay guys we need your support to keep
165:21 - these types of content free for all
165:23 - users youtube really likes engagement on
165:25 - the videos so leave a comment below
165:26 - press that like button hit subscribe if
165:28 - you haven't already let's keep the
165:30 - engagement score higher up so that more
165:32 - people can discover and enjoy these
165:34 - courses
165:37 - now to revise what we have learned in
165:39 - this video here is the programming tags
165:41 - for you create a program that computes
165:43 - the factorial of a number here take a
165:46 - input number from the user create a
165:48 - function that takes the number as a
165:50 - parameter inside the function check if
165:52 - the number is greater than zero if true
165:55 - return number multiplied by a recursive
165:57 - call to the function with parameter 1
166:00 - less than number else return 1. it's
166:02 - time for programming squeeze
166:04 - which of the following statement is
166:08 - false in this video we'll learn about
166:11 - arrays in c so far we have been using
166:14 - single variables to store a single data
166:16 - now we will learn to store multiple data
166:18 - together inside a single variable using
166:21 - an array an array is a collection of
166:23 - similar type of data before we learn
166:25 - about array in c let's first know why we
166:28 - need them suppose you need to store the
166:30 - a's of hundred people one way to solve
166:33 - this is to create hundreds of variables
166:35 - to store the a's of each individual
166:37 - however that will be a lengthy and
166:40 - tedious task instead what we can do is
166:42 - create a single array and store the a's
166:45 - of 100 people together
166:47 - you got that right
166:48 - now let's see how we can declare an
166:50 - array in c programming on your screen
166:53 - you can see the syntax for array
166:55 - declaration
166:56 - here data type means the type of data
166:59 - that will be stored inside the array for
167:01 - example if data type is in all the
167:04 - elements will be of in type
167:06 - arrow name is an identifier that will be
167:09 - used to identify the array and array
167:12 - size specifies the number of elements
167:15 - that can be stored inside the array
167:17 - let's see an example i'll type int
167:20 - because i want to store into the data
167:22 - and i'll call my array is
167:25 - and since i want to store the a's of 5
167:28 - people
167:30 - i have written 5 inside the square
167:32 - bracket
167:34 - in the c programming we cannot change
167:36 - the size and the data type of an array
167:39 - once it is declared so now the data type
167:41 - of a's will be in and it can only store
167:45 - five values
167:49 - now that we know how to create an array
167:51 - let's learn to store data in it i'll go
167:53 - back to my code editor here you can see
167:56 - the code from earlier i don't need the
167:58 - syntax anymore so i'll just remove this
168:01 - so now let's continue with this code
168:04 - similar to assigning values to a
168:05 - variable we use equal to operator to
168:08 - assign data to an array now i'll assign
168:11 - 5 values 21
168:13 - 29
168:15 - 25
168:16 - 32 and 17
168:19 - these value inside the curly brackets
168:21 - are called array elements
168:23 - we can also omit the size of the array
168:26 - for that i'll remove this
168:29 - in this case the c compiler
168:30 - automatically determines the size of the
168:32 - array by counting the number of elements
168:35 - inside the curly bracket another thing
168:37 - we can do is assign less number of
168:40 - element than the declared length for
168:42 - example here i'll add 5 inside the
168:46 - square bracket and i'll remove these two
168:49 - elements from the curly bracket you can
168:51 - see the length of array is 5 however we
168:55 - are assigning only three values to this
168:58 - here the remaining two positions are
169:00 - filled with the default value in our
169:02 - case the fourth and fifth position will
169:04 - be zero
169:07 - now we know how to assign value to an
169:10 - array let's learn to access them but
169:12 - first let's learn about the array index
169:14 - in c programming each element of array
169:17 - is associated with a number this number
169:19 - specifies the position of an array
169:21 - element inside an array and is known as
169:24 - r index and array index starts with 0 so
169:27 - the first element of the array is
169:29 - present at index 0. similarly the second
169:33 - element is present at 1 and so on we use
169:36 - the array index to access our element
169:38 - let me show you here we have our array
169:41 - from our earlier program now let me
169:43 - complete this program
169:44 - so hash include
169:48 - stdio.h
169:51 - int
169:53 - into mean
169:56 - and inside the curly bracket
169:59 - return
170:01 - 0 this is the basic structure of c
170:03 - program so i'll cut this
170:05 - and put it here
170:10 - now to access an arrow element we use
170:12 - the array name and the array index
170:14 - inside the square bracket so to access
170:17 - the first element of this array we use
170:19 - is square bracket 0
170:22 - let me use this and print
170:25 - the first
170:26 - element so percent d comma
170:29 - is square bracket with the index 0
170:33 - and i'll run this
170:36 - as you can see 21 is printed on the
170:39 - screen
170:40 - similarly we can access second third
170:42 - fourth and fifth element by using array
170:45 - indices 1 2 3 and 4 respectively
170:49 - now what i'll do is i'll copy this
170:52 - and i'll paste it here
170:56 - and i'll change the index
170:58 - value
171:00 - from 0 to 1
171:02 - 2
171:04 - 3
171:04 - and 4
171:07 - and i'll run this
171:09 - here you can see all elements are
171:11 - accessed
171:14 - earlier we learned to assign multiple
171:16 - values to an array during the
171:17 - declaration we can also assign values
171:20 - individually using the index number
171:23 - let's see how we can do that on your
171:25 - screen you can see the earlier code
171:28 - here we have assigned all five values
171:30 - during the declaration since i want to
171:32 - assign values individually i'll remove
171:34 - this assignment
171:37 - now i can assign values individually
171:39 - using the index number so to assign the
171:42 - first value i can write
171:44 - is square bracket inside the bracket
171:47 - zero index is
171:49 - equals to
171:50 - 21.
171:51 - similarly i can assign a second value at
171:54 - the index one so is
171:57 - inside the bracket one and i'll assign
172:00 - value 29 to this
172:03 - in this way each value can be assigned
172:05 - to a particular index
172:07 - so i'll continue on this
172:12 - i'll run this code
172:14 - as you can see each value is assigned to
172:17 - the array here this acts as a variable
172:20 - so we can take input from the user and
172:22 - assign to it let's see an example
172:26 - i'll remove these assignments
172:28 - now i'll ask the user for five input
172:30 - value so i'll use print statement and
172:33 - i'll ask the user
172:35 - to enter
172:37 - five input
172:38 - values
172:43 - and i'll use scanf to store the input
172:46 - values so scanf bracket inside quotation
172:50 - percent d comma ampersand is square
172:53 - bracket
172:55 - inside the bracket zero index
172:57 - and scanf
173:00 - percent d comma ampersand is
173:04 - square bracket inside the bracket one
173:15 - here you can see i have used print
173:17 - statements to print the values now i'll
173:20 - run this code
173:23 - and i'll enter
173:24 - 21
173:26 - 29 25 32 and 17.
173:31 - as you can see the input values are now
173:34 - stored inside the
173:36 - array we can also change the value of an
173:39 - array element for this we can simply
173:42 - assign a new value to a particular array
173:44 - index let's see an example
173:47 - i'll use the same code from earlier here
173:49 - i'll remove these print statements
173:54 - now suppose i want to change this third
173:56 - value to 26 from 25 here i can simply
174:00 - assign a new value to the position 2 so
174:03 - i will do
174:05 - is
174:06 - square bracket inside the bracket 2
174:09 - is equals to 26
174:12 - and i'll print this
174:14 - so percent d
174:16 - comma
174:17 - is square bracket inside the bracket 2
174:22 - and i'll run this
174:25 - you can see
174:26 - the value at index 2 is 26
174:30 - okay guys we need your support to keep
174:32 - these types of content free for all
174:34 - users youtube really likes engagement on
174:36 - the video so leave a comment below press
174:38 - that like button and hit subscribe if
174:40 - you haven't already let's get the
174:42 - engagement score high up so that more
174:44 - people can discover and enjoy these
174:46 - courses
174:49 - in this example we have used
174:51 - five different scanf statement to take
174:54 - five input values of an array also we
174:57 - have used five different
174:59 - print statement to print values of the
175:01 - adding here instead of writing the same
175:04 - code again and again i can simply use a
175:07 - loop i can use one loop to take the
175:09 - input values and second loop to print
175:12 - the values i'll first add a for loop
175:17 - as we know array index starts from 0 so
175:20 - end i is equals to 0
175:25 - so we have started our loop from i is
175:28 - equals to 0 and since the array can
175:31 - store 5 elements so i is less than 5
175:36 - and we have this update expression
175:39 - that increases the value of i in each
175:42 - direction by one now inside the loop
175:44 - i'll add scan if statement
175:47 - and
175:49 - i'll use
175:51 - ampersand
175:52 - is with the square bracket inside the
175:55 - bracket we have i
175:57 - here you can see each input values is
176:00 - stored in a sequential index from 0 to
176:03 - 4. that's why inside the for loop
176:06 - we have used index i
176:08 - along with the a's
176:10 - in the scanf statement
176:12 - in each iteration of the loop the value
176:15 - of i is increased by 1 and input value
176:17 - is stored sequentially now i can remove
176:20 - this message and these scanf statements
176:24 - similarly i can use for loop to print
176:26 - the r elements so
176:28 - for
176:30 - int i is equals to 0
176:33 - i is less than 5
176:36 - and
176:39 - now inside the for loop
176:42 - i'll use printf statement
176:44 - percent d
176:46 - comma is with the square bracket inside
176:50 - the bracket i
176:52 - and i'll remove these prints
176:54 - statements
176:57 - i'll run this program and i'll enter 21
177:01 - 11
177:02 - 14 16 and 17.
177:06 - here you can see we get the desired
177:08 - output
177:11 - let me show you something interesting in
177:14 - this code here i'll change the condition
177:17 - from i less than 5 to i less than 6
177:21 - and i'll run this code
177:23 - and i'll enter
177:24 - 12
177:26 - 13
177:27 - 14 15 and 16.
177:30 - you can see a random number
177:33 - so what happens here well we have
177:35 - created the array to store only five
177:37 - elements now we can access array
177:39 - elements from index 0 to index 4 however
177:43 - our for loop runs from i is equals to 0
177:46 - to 5 so when the value of i becomes 5
177:49 - the element is square bracket 5 does not
177:52 - exist
177:53 - as a result we get an unexpected value
177:57 - sometimes we can also get an error due
177:59 - to this so we should never try to access
178:02 - element of an array outside of its bound
178:05 - or length
178:08 - now to revise what we have learned in
178:10 - this video here is a programming tags
178:12 - for you create a program that computes
178:14 - the average marks of a student for this
178:17 - create an array that stores the marks of
178:19 - 5 subject compute the total marks by
178:22 - adding all the marks divide the total
178:24 - marks by total number to the subject and
178:27 - print the average marks it's time for
178:29 - programming squeeze
178:31 - which value will we get when we print
178:33 - norm square bracket 4 from the following
178:36 - array
178:39 - in this video we'll be learning about
178:41 - the multi-dimensional array and we will
178:43 - also learn to write the matrix
178:45 - multiplication program in c programming
178:47 - we learned that an array stores multiple
178:49 - elements together similarly a
178:51 - multi-dimensional array also stores
178:54 - multiple elements the only difference is
178:56 - that the each element of
178:57 - multi-dimensional array is also an array
179:00 - this is why a multi-dimensional array is
179:03 - also known as an array of arrays
179:08 - let's start with the syntax of
179:10 - multi-dimensional array here the array
179:12 - is of in type which means it can only
179:15 - store integer data and arr is the name
179:19 - of the array and 2
179:22 - and 3 represents the size of the adding
179:25 - here 2 means there will be 2 arrows
179:28 - inside this array and 3 means each array
179:32 - will have 3 elements
179:33 - now all together our array can store 2
179:36 - into 3 6 elements now let's see how we
179:39 - can initialize a two-dimensional array
179:45 - i'll use this same array
179:48 - now i'll first assign values to this
179:51 - array so this array is equals to
179:54 - curly bracket inside this curly bracket
179:57 - another curly bracket with element 1
180:00 - comma 3 comma 5
180:04 - and enclosing this bracket
180:07 - and another comma here and curly bracket
180:10 - here
180:11 - here is 2 comma 4
180:14 - comma 6.
180:17 - these are the elements of first array
180:19 - and these are the elements of secondary
180:23 - you might think that this assignment
180:25 - looks different than the assigning value
180:27 - to a single dimensional array
180:29 - it's because here we are assigning aries
180:32 - not individual elements we have assigned
180:34 - two arrays and these two arrays has
180:37 - three elements each
180:39 - here this is the example of
180:41 - two-dimensional array
180:43 - and we can think of this as a table with
180:46 - two rows and three columns where rows
180:48 - represents arrays and column represents
180:51 - element inside the array if you are
180:54 - enjoying this video you will definitely
180:56 - love our interactive c programming
180:57 - course on programmies pro the course
180:59 - includes easy to follow tutorials along
181:02 - with quizzes and challenges to practice
181:04 - and test your coding knowledge in real
181:06 - time you will also be creating projects
181:08 - to experience how programming works in
181:10 - the real world and in the end you will
181:12 - receive a certificate which will help
181:14 - you land your first job sign up now by
181:17 - using this qr code or you can also use
181:19 - the link in the description box
181:24 - now that you know how to store elements
181:27 - to a multi-dimensional array let's learn
181:29 - to access them remember array indexes
181:32 - well the concept of array indexes is
181:34 - also present in multi-dimensional array
181:36 - however here each element is associated
181:39 - with two indexes let me explain this
181:42 - i'll go back to my code editor here we
181:44 - have our earlier code
181:46 - now to access the first element we use
181:49 - the adder name and indexes 0 and 0. so
181:53 - add a name with indexes 0
181:57 - and 0.
181:58 - here this first 0
182:00 - indicates the first element of add array
182:03 - which is
182:04 - this array and the second zero indicates
182:07 - the first element of the first inner
182:09 - array which is one
182:11 - similarly to access the third element of
182:14 - second array we write
182:16 - a r r with index 1
182:19 - and another index 2.
182:22 - here this 1 represents the second array
182:25 - and this 2 represents
182:28 - the third element of the second array
182:30 - now let's complete this program so i'll
182:33 - start from the basic structure of c
182:34 - program
182:40 - i will now cut this
182:42 - part and i'll
182:45 - paste it here
182:48 - and i'll print this both arrays so i'll
182:51 - use printf statement
182:57 - comma i'll cut this
183:00 - and
183:02 - i'll paste it here
183:05 - and i'll do the same for this add as
183:07 - well
183:12 - will now run this code
183:13 - as you can see we get 1 using this
183:16 - arr 00 and we get 6 using this
183:21 - arr 1 2.
183:23 - to get the idea of indexes in
183:25 - multi-dimensional arrays you can refer
183:28 - to this image
183:32 - we can also change the elements of a
183:34 - multi-dimensional array by using array
183:36 - indexes let's see an example here we
183:39 - have the code from our earlier program
183:41 - i'll remove these two printf statements
183:44 - from here
183:45 - now suppose i want to change this value
183:47 - of 5 to 7 and the value of 4 to 8
183:52 - here the value 5 is a third element of
183:56 - first array so we can use the index 0
184:00 - and 2
184:01 - so
184:02 - we'll write
184:03 - a r r with index 0
184:07 - and
184:08 - 2
184:09 - and i'll assign value 7 to this
184:12 - similarly 4 is the second element of
184:15 - second array so we can use index
184:19 - 1
184:20 - and
184:21 - 1
184:23 - and i'll assign value 8 to this
184:26 - i will now add print statement here and
184:29 - print these both arrays so percent
184:32 - d
184:34 - comma
184:36 - a r r with square bracket
184:40 - 0
184:41 - and
184:43 - 2
184:45 - and print f
184:47 - percent d
184:53 - second
184:54 - array and second element
184:58 - i'll run this code
185:00 - as you can see the value at this
185:02 - position is changed from five to seven
185:06 - and the value of this position is
185:08 - changed from four to eight
185:11 - okay guys we need your support to keep
185:13 - these types of content free for all
185:15 - users youtube really likes engagement on
185:17 - the video so leave a comment below press
185:19 - that like button and hit subscribe if
185:22 - you haven't already let's get the
185:23 - engagement score high up so that more
185:25 - people can discover and enjoy these
185:27 - courses
185:30 - similar to an array we can also access
185:33 - each element of a multi-dimensional
185:34 - array using a for loop let me show you
185:37 - here in our earlier example i'll remove
185:39 - these lines of code from here
185:41 - now i'll write two for loop
185:44 - for
185:45 - bracket
185:46 - and i
185:48 - is equals to 0
185:50 - and i is less than 2
185:54 - plus
185:56 - plus i this is the increment expression
186:00 - and inside this for loop there is
186:02 - another for loop
186:04 - int
186:05 - j is equals to 0
186:08 - and j is less than 2
186:11 - sorry j is less than 3
186:14 - and we have increment expression
186:18 - here the for loop iterates 2 time from i
186:20 - is equals to 0 to i is equals to 1 to
186:24 - access the two inner arrays of
186:27 - two-dimensional array
186:29 - and
186:30 - the inner for loop iterates three times
186:32 - from j is equals to zero to j is equals
186:35 - to two to access the three elements of
186:38 - both the inner array now inside the
186:41 - inner for loop i'll now print the
186:43 - element at index i n j so printf bracket
186:47 - inside quotation percent d
186:51 - comma a r r inside the square bracket
186:55 - i and
186:57 - j
187:00 - i will now run this code
187:02 - as you can see the elements of
187:04 - multi-dimensional array are printed here
187:06 - the outer for loop runs two times from i
187:09 - is equals to 0 to i is equals to 1
187:13 - and in each iteration of outer loop the
187:16 - inner loop runs 3 times from j is equals
187:18 - to 0 to j is equals to 2.
187:21 - initially the value of i and j is equals
187:25 - to 0 so are i j prints the first element
187:29 - that is 1
187:31 - now in the second iteration of the inner
187:34 - loop the value of j is increased to 1
187:37 - and the array i j becomes 0 1 and it
187:41 - prints the second element 3 on the
187:44 - screen
187:45 - in this way the inner loop runs three
187:48 - times to access all three elements of
187:50 - first array after that the condition of
187:53 - inner loop becomes false
187:55 - so the inner loop dominates
187:58 - now the program control moves back to
188:00 - the outer for loop and the value of i
188:03 - becomes 1 and again the inner loop
188:05 - restarts from j is equals to 0 to j is
188:09 - equals to 2. this time arr i j becomes
188:13 - arr10
188:14 - arr 1 1 and arr 1 2 which gives the
188:19 - first
188:20 - second and third element of secondary
188:24 - to help you visualize the output more
188:26 - clearly let me print a new line after
188:28 - the inner loop so
188:30 - print f
188:32 - i'll break the line here
188:36 - i'll run this program
188:38 - and you can see the output is printed in
188:42 - proper format it's time for programming
188:44 - squeeze which value will we get when we
188:46 - print arr 1 4 from the following array
188:53 - in this video we will be learning about
188:56 - strings in c more specifically we will
188:59 - be learning to use textual data in our
189:02 - code let's first see the example of the
189:04 - hello world program
189:07 - here hello world is an example of a
189:09 - string we have used double quotation to
189:12 - represent strings in programming strings
189:15 - are a collection of characters that are
189:18 - used to represent textual data
189:20 - for example hello world is a string
189:23 - containing a sequence of characters h
189:26 - e
189:27 - l l o
189:29 - w o r l d world
189:33 - now that you know what strings are let's
189:35 - see how we can create them in c
189:38 - here we have created a string type
189:40 - variable str with the value program is
189:44 - if you look carefully you can see the
189:46 - syntax of string looks somehow similar
189:49 - to an array this is because the string
189:51 - in c are an array of characters so this
189:55 - code is similar to this so let's
189:58 - complete this program
190:00 - has include
190:03 - stdio.h
190:07 - int
190:08 - main
190:10 - inside the curly braces return
190:15 - zero
190:17 - i'll cut this and i'll put it here
190:22 - then i'll print this using printf
190:24 - statement so percent s
190:28 - comma
190:29 - str
190:31 - here you can see we have used percent s
190:34 - format specifier to print the string now
190:36 - let me run this code you can see we have
190:39 - successfully printed the string
190:42 - by the way every string in c is
190:44 - terminated by a null character
190:46 - represented by slash 0. this null
190:49 - character helps the compiler to identify
190:51 - the end of the string even in our string
190:54 - programming the compiler adds slash 0 at
190:57 - the end due to this the actual size of
191:00 - the string will be 1 greater than the
191:01 - total number of character in the string
191:05 - we can use the same scanf function to
191:08 - take string input from the user let me
191:10 - show you here i have this code from
191:12 - earlier program
191:14 - i'll remove this part
191:17 - now if you remember
191:19 - this is the syntax of declaring an array
191:23 - i'm declaring an array of characters so
191:25 - i have to provide the size of this array
191:28 - as well i'll add here 20.
191:32 - now i'll add scanf statement to take the
191:35 - input from the user
191:38 - you can see i have used str instead of
191:42 - ampersand str
191:44 - this is because
191:45 - sdr is an array and it already points to
191:48 - the address of the first element of stm
191:51 - hence we can omit ampersand and we will
191:55 - discuss this in our later videos now
191:57 - before the scanf
191:59 - let me print the statement and ask the
192:02 - user for their name so printf
192:06 - i'll enter
192:08 - your
192:09 - name
192:11 - here
192:13 - now i'll run this and i'll enter my
192:16 - name you can see input value is stored
192:20 - on str string
192:22 - now let me run this code again this time
192:25 - i'll enter my full name padma manandar
192:29 - and i'll
192:30 - enter
192:32 - however i'm only getting padma instead
192:35 - of my full name padma manandar this is
192:37 - because the scanf method only takes the
192:40 - input until it encounters white space
192:43 - here there is a space after pogma so the
192:46 - scanf method only takes padma and
192:50 - ignores manandar if you want to take the
192:53 - entire line of string as input
192:56 - we can use f gates function let me
192:58 - modify the program i'll remove this
193:01 - scanf function
193:02 - and i'll add here
193:04 - f gets
193:06 - bracket str
193:08 - comma
193:09 - size
193:10 - size of
193:12 - str
193:14 - comma
193:15 - std i n
193:19 - here f gates function only takes three
193:22 - parameters
193:24 - the first parameter represents the name
193:26 - of the string in our case
193:28 - str is the name of the string
193:30 - and the second parameter is size of the
193:34 - string
193:35 - and
193:36 - this third parameter is stdin which
193:39 - means standard input which denotes that
193:42 - we are taking input from the keyword
193:45 - now let me run this program
193:47 - i'll again
193:49 - type my full name
193:52 - and i'll enter
193:54 - this time you can see my full name is
193:57 - printed okay guys we need your support
193:59 - to keep these types of content free for
194:02 - all users youtube really likes
194:04 - engagement on the video so leave a
194:06 - comment below press that like button and
194:08 - hit subscribe if you haven't already
194:10 - let's get the engagement score high up
194:12 - so that more people can discover and
194:14 - enjoy these courses
194:19 - we know that a string is a area of
194:21 - characters in c
194:23 - so just like an array we can access each
194:25 - character of a string using indexes
194:28 - let's see an example i'll start with the
194:30 - basic structure of c program so hash
194:33 - include s t d i o dot h
194:38 - int
194:39 - mean and inside
194:41 - this curly braces return
194:44 - j row
194:46 - and here i'll create string with value
194:49 - programming so so care
194:52 - str square bracket is equals to
194:56 - programming
195:00 - now to access the characters we can use
195:03 - string name and the index inside the
195:05 - square bracket
195:07 - so
195:07 - let's access the first character and
195:10 - print it using print statement so i'll
195:12 - use
195:14 - print statement
195:15 - print f
195:18 - percent
195:19 - c comma str
195:22 - and index is zero
195:25 - and i'll run this code you can see p is
195:28 - printed on the screen
195:30 - similarly we can access other elements
195:33 - easily using array indices
195:35 - for that i'll copy this
195:39 - so i'll copy this and paste it here
195:43 - and i'll just change the value of index
195:46 - number here from
195:47 - zero to one
195:49 - two
195:50 - and three
195:51 - so now second third and fourth elements
195:54 - can be accessed using array indices
195:57 - one
195:58 - two
195:59 - and three
196:01 - so now let's run this code as you can
196:04 - see we get the desired characters
196:09 - we can also change the character of a
196:12 - string for this we can simply assign a
196:14 - new character to a particular index
196:16 - let's see an example i'll use the same
196:19 - code from earlier program here i'll
196:21 - remove these print statements
196:24 - now suppose i want to change this
196:26 - third character to capital o i can
196:29 - simply assign value to index 2 so
196:33 - str
196:34 - square bracket will
196:36 - point to the index number 2
196:39 - and will assign its value
196:41 - capital o
196:44 - now let's change this fifth character to
196:48 - capital r
196:50 - so i'll do the same process here again
196:52 - so str with the index number
196:56 - four
196:57 - that means the fifth element is equals
197:00 - to
197:01 - capital r
197:04 - i'll now print the string using printf
197:06 - statements so print f bracket percent s
197:12 - comma
197:13 - str
197:16 - and i'll run this program
197:18 - as you can see the third character it
197:21 - changed to capital o from small o and
197:24 - the fifth character it changed from
197:27 - small r to capital r
197:32 - to revise what we have learned so far
197:34 - here is a programming tax for you create
197:37 - a program that takes your full name as
197:39 - input and prints your name then change
197:42 - the first letter of your name to x now
197:44 - if your name is joan williams it will be
197:47 - x on williams if your name is julie bing
197:51 - it will be julie being with x as your
197:54 - first character it's time for
197:57 - programming squeeze
198:02 - in this video we'll learn about four
198:05 - most important string function that are
198:07 - used to perform different operation on
198:09 - string let's revise the working of
198:11 - string first
198:13 - so i'll go back to my code editor
198:16 - here i have the basic outline of a c
198:18 - program
198:20 - now i'll create a string care
198:23 - language
198:25 - is equals to
198:28 - c
198:29 - programming
198:33 - let me print this string using printf
198:36 - statement
198:37 - printf
198:39 - bracket
198:40 - percent s
198:42 - comma
198:43 - language
198:46 - as discussed in our last video we use
198:49 - percent s to print the string
198:52 - now i'll run this code
198:54 - as you can see
198:55 - we have successfully printed the string
198:58 - this is the basic understanding of how
199:01 - string works in c if you have some
199:03 - doubts about this i highly recommend you
199:06 - to watch our previous video you can see
199:08 - the link on the screen
199:10 - now let's start with the string function
199:15 - the sdi line function or string length
199:18 - function is used to find the length of a
199:20 - string let's see an example here is the
199:23 - code from our earlier program
199:25 - suppose i want to find the length of
199:27 - this string for that i can use sdrlin
199:30 - function but before that we have to
199:32 - import
199:33 - string.h header file so i'll include
199:36 - here
199:37 - include
199:40 - string
199:41 - dot edge header file
199:44 - this is important because
199:46 - strlin function is a standard library
199:48 - function that is defined inside the
199:50 - string dot h header file
199:52 - now let's use the stanley function i'll
199:55 - use printf
199:57 - statement here
199:59 - and backspace n
200:01 - length
200:04 - percent jet u comma
200:07 - strlin function and inside the function
200:11 - language
200:15 - here percent jet u is the format
200:18 - specifier that we use to print the
200:20 - return value of strlin function
200:24 - now let me run this code
200:27 - here you can see
200:28 - 13 as output the strlin function counts
200:32 - the total number of characters in the
200:34 - string
200:36 - if you are enjoying this video you will
200:38 - definitely love our interactive c
200:40 - programming course on programmers pro
200:42 - the course includes easy to follow
200:43 - tutorials along with quizzes and
200:45 - challenges to practice and test your
200:47 - coding knowledge in real time you will
200:50 - also be creating projects to experience
200:52 - how programming works in the real world
200:54 - and in the end you will receive a
200:56 - certificate which will help you land
200:58 - your first job sign up now by using this
201:00 - qr code or you can also use the link in
201:03 - the description box
201:07 - the strcpi function or string copy
201:11 - function is used to copy one string to
201:13 - another let's see an example
201:16 - suppose i have a string name food
201:20 - and i'll assign
201:22 - value pizza to this
201:26 - i want to copy this string to another
201:28 - string named best food so let me first
201:32 - declare the best
201:33 - best food string
201:35 - so best
201:37 - food
201:38 - string
201:40 - and inside the bracket
201:42 - i'll put strlin
201:44 - and bracket
201:45 - food
201:48 - here i have used strlin function so that
201:52 - the length of the best foot string is
201:54 - same as the food string
201:56 - now let me use str's cpy function
202:01 - and i'll copy
202:03 - the string from food to best food so
202:06 - best food
202:08 - comma
202:09 - food
202:12 - the strcpi function takes two value
202:16 - source string
202:18 - from where we want to copy and
202:21 - the destination string
202:23 - and i'll print the best food now
202:25 - so
202:27 - using printf statement
202:30 - percent as
202:32 - comma
202:33 - best
202:34 - food
202:38 - now i'll run this code
202:40 - here you can see
202:41 - the string is copied from the food to
202:44 - best food
202:48 - the strcat function or string
202:50 - concatenation function is used to join
202:53 - two string together let's see an example
202:56 - suppose we have two string
202:58 - care text one
203:02 - is equals to
203:05 - hey
203:07 - and
203:08 - care
203:08 - text 2
203:11 - is equals to
203:13 - it has value
203:15 - how are you
203:17 - now let's use sti cat function to join
203:20 - this string so str cat bracket
203:25 - text 1 comma text
203:28 - 2.
203:30 - i'll print this using printf statement
203:33 - so
203:35 - percent as
203:37 - comma
203:38 - text 1.
203:41 - now i'll run this code here you can see
203:44 - two strings are joined together however
203:47 - the output does not look nice so let me
203:49 - add
203:50 - here comma and a space and i'll run this
203:53 - again now you can see a clear output
203:57 - that are concatenated together
204:00 - okay guys we need your support to keep
204:02 - these types of content free for all
204:04 - users youtube really likes engagement on
204:06 - the videos so leave a comment below
204:08 - press that like button and hit subscribe
204:10 - if you haven't already let's get the
204:12 - engagement score high up so that more
204:14 - people can discover and enjoy these
204:16 - courses
204:20 - the strcmp function or string comparison
204:23 - function is used to compare two string
204:25 - the function returns zero if both the
204:27 - string are equal however if the string
204:30 - are not equal it returns a random
204:32 - non-zero value let's see an example
204:35 - suppose we have two string caret text
204:38 - one
204:41 - and i'll assign value abcd
204:45 - and another
204:47 - string
204:48 - that is text 2
204:50 - and i'll assign
204:51 - here value
204:53 - ef gh
204:57 - now let's compare these two string using
204:59 - strcmp function so i'll use
205:03 - strcmp function
205:05 - bracket
205:06 - here text 1 comma text 2
205:13 - and
205:13 - since
205:15 - this function returns an integer i'll
205:17 - assign the return value to an integer so
205:21 - int
205:22 - result is equals to
205:25 - strcmp function
205:28 - now
205:28 - i'll print this using printf statement
205:32 - percent
205:33 - d because this time percent d because
205:36 - this time it gives us integer value and
205:40 - here we'll put result the name of the
205:42 - variable
205:44 - now i'll run this code
205:47 - here we get -4 as output which is a
205:51 - non-zero value because these two strings
205:54 - are not equal
205:56 - now let me change the value of this text
205:58 - to from efg to
206:01 - abcd
206:03 - and i'll run this again
206:06 - this time
206:08 - we get 0 as output because here the both
206:12 - string are equal
206:14 - apart from these four there are dozens
206:17 - of string function that can help us to
206:19 - work with string however remembering
206:21 - them is not possible instead what you
206:24 - can do is google and find the function
206:26 - that you need remember googling things
206:29 - is one of the most important skill in
206:31 - programming
206:34 - now to revise what you have learned in
206:36 - this program here is a programming task
206:38 - for you create a program to compare two
206:41 - string and print the larger string here
206:44 - is how the programs should work get two
206:46 - string input from the user using f gets
206:49 - compare the length of both the string
206:51 - using sdrlin and print the larger string
206:54 - it's time for programming squeeze
206:56 - which of the following function is used
206:58 - to join tostring
207:02 - in this video we'll learn about pointers
207:05 - in c
207:06 - more specifically we'll learn to work
207:08 - directly with computer memory address
207:10 - with the help of pointers pointer is one
207:12 - of the main features that make c
207:14 - programming so powerful it allows us to
207:17 - work directly with the computer memory
207:19 - before we learn about pointers let's
207:21 - first learn about addresses
207:23 - in c programming whenever we declare a
207:26 - variable a space will be allocated in
207:28 - the memory for the variable and c allow
207:31 - us to access the address of the variable
207:34 - we use the ampersand symbol with the
207:36 - variable name to access the memory
207:38 - address let's see an example you might
207:40 - be familiar with the basic structure of
207:42 - c program
207:44 - now i'll create an integer variable is
207:48 - so int is and i'll assign value 25 to
207:51 - this
207:52 - now
207:53 - let's use ampersand symbol to access the
207:56 - address where the is variable is stored
207:59 - so printf
208:01 - percent p
208:03 - comma
208:04 - ampersand is
208:08 - here i have used person p format
208:10 - specified to print the address
208:12 - now let me run this code
208:15 - here you can see we get this output
208:18 - which is the memory address where 25 is
208:21 - located
208:22 - when you copy and run the exact same
208:24 - code you may get different output
208:27 - because the output is based on the
208:28 - location where the variable is stored
208:30 - and it varies device to device
208:33 - if you remember we have used ampersand
208:36 - symbol with scanf
208:39 - like this
208:41 - like ampersand is
208:45 - so usually we use this ampersand is with
208:49 - scanf
208:50 - while taking input from the user
208:53 - this is because with scanf we are
208:55 - instructing the compiler to store the
208:57 - input value at the memory address
208:59 - specified by this ampersand is
209:05 - now that you know about memory addresses
209:07 - let's get back to pointers just like a
209:09 - regular variable a pointer is also a
209:12 - variable however a pointer variable
209:14 - stores the memory addresses of the
209:16 - variable not the actual value let's now
209:19 - see how we can create pointers so i'll
209:21 - create pointer int
209:24 - asterix ptr here ptr is a pointer
209:29 - variable let me create a regular
209:31 - variable and compare these two so i'll
209:34 - create
209:35 - int
209:36 - var
209:37 - when comparing these two you can see the
209:40 - only difference between
209:42 - these two
209:43 - is this asterisk symbol
209:46 - now let's see how we can assign value to
209:48 - a pointer variable
209:50 - here is our code from our earlier
209:52 - program now let me create a pointer
209:54 - variable
209:55 - int astrix
209:57 - ptr
209:59 - as we know a pointer variable stores a
210:01 - memory address of a variable and we also
210:04 - know that ampersand is gives the memory
210:07 - address so when we assign ampersand is
210:09 - to the pointer variable the pointer
210:11 - variable should store the memory address
210:14 - of the a's variable so let's do that
210:17 - now i'll assign this pointer
210:19 - to
210:20 - the address of a's variable
210:24 - and i'll print this using printf
210:27 - statement
210:35 - comma
210:36 - ptr
210:38 - now let me run this code
210:40 - here you can see we get the same result
210:43 - for both ampersand is and ptr
210:49 - we can also access the value of a
210:52 - variable using the pointer let's see an
210:54 - example in our code from our earlier
210:56 - example
210:58 - i'll remove this print statement
211:03 - and i'll modify this print statement
211:06 - here
211:07 - address
211:09 - colon
211:12 - express n
211:14 - now let's print the value using ptr
211:16 - pointer i'll use printf statement
211:20 - printf
211:23 - value
211:24 - colon percent d comma
211:28 - astrix ptr
211:30 - here asterix ptr gives the value stored
211:33 - in the ptr address and since the value
211:35 - is in integer i have used percent d
211:38 - format specifier now let me run this
211:41 - code
211:42 - as you can see we have successfully
211:44 - accessed the value using the pointer
211:45 - variable
211:46 - remember ptr is a pointer that stores
211:49 - the memory address and asterisk ptr
211:52 - gives the value stored in the memory
211:54 - address pointed by this ptr
212:00 - in our last example we saw that we can
212:02 - access value of a variable using pointer
212:05 - variable similarly we can also change
212:07 - the value of a variable using pointer
212:09 - variable let's see an example here we
212:12 - have our code from our earlier program
212:14 - here in this program i'll remove these
212:16 - two print statements
212:18 - now let's use pointer variable to change
212:21 - the value from is 25 to 31 so i'll use
212:27 - pointer
212:30 - and assign value 31.
212:33 - since we know asterisks astrix pti gives
212:36 - the value pointed by the ptr address so
212:38 - this code
212:40 - assigns a new value to the memory
212:42 - address pointed by the ptr variable
212:46 - now let's print the value of the ace
212:48 - variable i'll use printf statement
212:52 - percent d
212:54 - comma
212:55 - is
212:57 - and i'll run this
212:59 - here you can see the value of ace
213:02 - variable is changed to 31.
213:05 - this is because the ptr pointer points
213:08 - to the address of is variable and we
213:10 - have changed the value pointed by ptr
213:13 - pointer from 25
213:15 - to 31.
213:17 - so ultimately we have changed the value
213:20 - of the a's variable okay guys we need
213:23 - your support to keep these types of
213:24 - content free for all users youtube
213:27 - really likes engagement on the video so
213:29 - leave a comment below press that like
213:30 - button and hit subscribe if you haven't
213:33 - already let's get the engagement score
213:35 - higher so that more people can discover
213:37 - and enjoy these courses
213:41 - while working with pointers you might
213:43 - encounter these two syntax of creating
213:46 - pointers while both are the valid ways
213:49 - to create pointers you should try to
213:51 - avoid the first one because this syntax
213:54 - sometimes creates a lot of confusion
213:56 - let's try to understand this with the
213:58 - help of an example here we have created
214:01 - a pointer that stores the memory address
214:03 - of the a's variable in this syntax this
214:06 - asterisk symbol is attached to ptr so
214:10 - many things that this asterisk ptr is
214:12 - the pointer and try to print the address
214:15 - using asterisk ptr which is wrong this
214:18 - is because asterisk ptr gives the value
214:21 - pointed by the pointer not the memory
214:23 - address let me show you i'll use printf
214:26 - statement
214:28 - here percent d comma
214:31 - asterisk ptr
214:34 - and
214:35 - i'll run this
214:36 - as you can see we get the value of the
214:39 - age variable not the memory address so
214:42 - to avoid this confusion i highly
214:45 - recommend you to create pointer
214:49 - like this
214:51 - now you can visualize ptr separately as
214:55 - pointer and asterisk as the part of
214:58 - syntax to create a pointer now let's
215:01 - revise pointers here we have a regular
215:04 - variable number and pointer ptr
215:07 - then
215:09 - ptr is equals to number
215:12 - is wrong
215:14 - this is because ptr is pointer which can
215:17 - only store memory address but
215:19 - number is not a memory address so
215:23 - so this is invalid
215:28 - asterisk ptr
215:30 - equals to ampersand
215:33 - number
215:34 - is also wrong
215:36 - this is because asterix pti gives the
215:39 - value stored in the ptr location however
215:42 - ampersand number gives the memory
215:44 - address so
215:46 - so this is also invalid
215:52 - ptr equals to ampersand number
215:57 - is a valid code because
215:59 - both pti and ampersand number represent
216:03 - the memory address
216:04 - so this is a valid code
216:09 - and asterix ptr is equals to number this
216:14 - is also valid because
216:16 - both asterisk pti and number represent
216:19 - the value stored in the memory location
216:22 - so this is also a valid code
216:28 - now to revise what we have learned in
216:30 - this program here is a programming tax
216:32 - for you create a program to change the
216:34 - value of a variable using a pointer here
216:37 - is how the programs would work get input
216:40 - value for a double variable salary
216:43 - assign the address of salary to a double
216:45 - pointer now use the pointer to print the
216:48 - value of a salary and increase the
216:51 - salary by two times and print the new
216:53 - salary it's time for programming squeeze
216:57 - which of the following is valid for
216:58 - variable a and pointer p
217:03 - in the last video we learned about
217:05 - pointers in cc we learned about working
217:07 - with memory addresses now we will learn
217:10 - to use pointers to work with arrays an
217:12 - array is the collection of similar type
217:14 - of data you can see the example on the
217:16 - screen here numbers is an array that
217:19 - stores five elements and if we want to
217:21 - access these arrow elements we can use
217:24 - the array index that is to access the
217:26 - first element we use number bracket 0
217:30 - similarly to access the second and third
217:32 - element we use number bracket 1 and
217:34 - number bracket 2. in this way we can
217:37 - access each element of the added
217:40 - now let's try to access these elements
217:42 - using pointers but first let's try to
217:45 - access the memory address where these
217:47 - array elements are stored so
217:50 - here we have our array of numbers and we
217:53 - are printing the array elements using
217:56 - printf statement inside the for loop
218:00 - now let's print the address of each
218:02 - element using the ampersand operator
218:04 - let's modify this print statement i'll
218:07 - add here percent
218:09 - p
218:11 - and here
218:12 - comma
218:14 - ampersand
218:15 - numbers
218:17 - bracket
218:19 - i
218:20 - i have used percent p format specifier
218:22 - to print the memory address
218:24 - and also i have used here ampersand
218:28 - number
218:29 - square bracket i to print the memory
218:31 - address of the i element
218:33 - now let me run this code
218:36 - as you can see we get the corresponding
218:38 - address of each elements
218:41 - now let's see something interesting for
218:43 - that i'll print the address of array
218:46 - without any array index so
218:48 - i'll use printf statement
218:52 - printf here array
218:55 - address
218:59 - percent p
219:01 - comma
219:02 - numbers
219:05 - now let me run this code
219:08 - here if you look into the output you
219:10 - will notice two things
219:12 - first the difference between two memory
219:14 - addresses is four this is because the
219:16 - array is of integer type and size is of
219:19 - int is four
219:20 - byte second the memory address of the
219:24 - first array element
219:25 - and the address of the array is the same
219:28 - this is because the address of array
219:31 - always points to the first element of
219:33 - the array also here we have used only
219:36 - the name of the array without the
219:38 - ampersand sign this is because in most
219:40 - context array names are by default
219:43 - converted to pointers and we can
219:45 - directly use the name of the array so
219:47 - from now on if i use any name remember
219:50 - it's the pointer
219:52 - similarly we can use number plus 1
219:55 - to print the address of the second array
219:58 - element and we can use number plus 2 to
220:01 - print the address of third array element
220:06 - now let me show you that
220:08 - so what i'll do is i'll copy this and
220:10 - i'll paste it here
220:13 - and i'll modify this print statement to
220:15 - have a clear output so array address of
220:19 - 1
220:21 - backspace n
220:24 - and i'll change this to numbers
220:27 - then add a address of
220:31 - three
220:33 - here i'll add here
220:36 - backspace n
220:38 - and i'll change this to numbers plus one
220:42 - and i'll change this to array address of
220:46 - 5
220:48 - and let's put this as it is
220:51 - now let me run this program
220:55 - as you can see this number gives the
220:57 - address of first element and numbers
221:00 - plus one gives the address of second
221:02 - element and numbers plus two
221:05 - gives the address of third element
221:07 - in this way numbers plus i gives the
221:09 - address of ith element so we can
221:12 - implement this exact logic in a loop so
221:15 - i'll modify this code first i'll remove
221:18 - this print statement
221:20 - and in this print statement i'll modify
221:22 - this
221:23 - ampersand numbers
221:25 - bracket i to
221:27 - number plus i
221:29 - so
221:30 - number
221:32 - plus i now let me run this code
221:36 - as you can see we get the desired output
221:40 - in our last example we saw that for an
221:43 - array numbers numbers is a pointer that
221:46 - gives the array of the first element
221:48 - similarly numbers plus i gives the
221:50 - address of the ith element now we can
221:53 - use this pointer to access the array
221:55 - elements to access the first element we
221:57 - can use asterix number similarly to
222:00 - access the ith element we can use
222:02 - asterisks parenthesis numbers plus i let
222:05 - me show you you can see the code from
222:07 - our earlier program
222:09 - here numbers plus i gives the address of
222:12 - the ith element since i want to use the
222:15 - pointer to access the element i'll
222:17 - remove this number bracket i from here
222:21 - instead i'll write astrix parenthesis
222:25 - numbers
222:27 - plus
222:28 - i
222:29 - so this gives us the ith element now let
222:32 - me run this code as you can see number
222:35 - plus i gives the address of the id
222:37 - element and
222:38 - asterix parenthesis number plus i gives
222:41 - the value present at that number plus i
222:44 - address in this way we are able to
222:47 - access the address and value of an array
222:49 - using pointers okay guys we need your
222:52 - support to keep these types of content
222:54 - free for all users youtube really likes
222:56 - engagement on the video so leave a
222:58 - comment below press that like button hit
223:00 - subscribe if you haven't already let's
223:02 - get the engagement score higher so that
223:04 - more people can discover and enjoy these
223:06 - courses
223:09 - just like accessing the ad elements we
223:12 - can also change ad elements using
223:14 - pointers all we have to do is assign a
223:16 - new value to the address let me show you
223:19 - here i have the code from our earlier
223:21 - program i'll remove this for loop
223:24 - now suppose i want to change the value
223:27 - of first element to 2 so i can simply
223:30 - write here as tricks numbers is equals
223:33 - to 2.
223:35 - here astex number represent the first
223:37 - element and i have assigned a new value
223:40 - to it also let's change the last value
223:42 - to 11 from 9 so that our array includes
223:45 - only prime number so i'll write here
223:49 - astrix
223:51 - parenthesis numbers
223:53 - plus
223:55 - here 0 1 2 3 4. so numbers plus 4 is
224:00 - equals to
224:01 - 11
224:03 - here astrix parenthesis numbers plus 4
224:06 - represents the last element and i have
224:09 - assigned a new value to this address
224:13 - now to verify the value i changed or not
224:15 - let me print the first and last value so
224:17 - i'll use print statement
224:20 - here first
224:22 - element
224:24 - is percent
224:26 - d
224:27 - backspace n
224:29 - comma
224:30 - astrix
224:31 - number
224:34 - and another print statement
224:36 - here it prints the last element
224:40 - here last element
224:42 - colon
224:44 - percent d
224:47 - comma
224:48 - asterisk
224:49 - parenthesis
224:51 - numbers
224:52 - plus 4.
224:56 - now let me run this code
224:59 - as you can see the value of first and
225:02 - last elements are changed
225:06 - now to revise what you have learned in
225:08 - this program here is a programming tags
225:10 - for you create a program to find the
225:12 - largest element of an array first create
225:15 - an array with elements 34 12 21 54 and
225:18 - 48 then assign the first element to the
225:21 - array to a largest variable this time
225:23 - you should use a pointer instead run a
225:26 - loop to iterate through each add element
225:28 - in each iteration of the loop compare
225:30 - the largest variable with each element
225:32 - of the array using a pointer and if the
225:35 - largest element is smaller than the
225:36 - array element assign the an element with
225:39 - the largest variable
225:40 - again using pointers finally print the
225:43 - largest variable it's time for
225:44 - programming squeeze
225:46 - in an array int is bracket 5 what does
225:49 - aces represent
225:54 - in the last few videos we have been
225:56 - learning about pointers in c we'll
225:58 - continue that in this video as well
226:00 - today we will learn to use pointers and
226:02 - function together this is going to be an
226:04 - interesting video let's revise the
226:06 - working of the function with the help of
226:07 - an example here i have created a
226:10 - function that calculates the square of a
226:12 - number the function takes single
226:14 - parameter
226:15 - and it then computes the square of the
226:18 - number
226:19 - and then returns the square here we are
226:22 - passing a regular variable to the
226:23 - function
226:24 - in c we can also pass a pointer variable
226:27 - as an argument to a function let's see
226:29 - an example in which i'll create a
226:31 - function that accepts a pointer as an
226:34 - argument and change the value pointed by
226:36 - the pointer
226:37 - so i'll create a function void
226:40 - find value
226:43 - here this function takes pointer as an
226:46 - argument
226:49 - and inside the function
226:53 - astrix num is equals to 39.
226:57 - here the num parameter is a pointer
226:59 - variable and we have changed the value
227:01 - pointed by this pointer now let's create
227:04 - a number variable inside the main so
227:06 - i'll create here int
227:08 - number
227:09 - and i'll assign value 21 to this
227:12 - and i'll call the function by passing
227:14 - the address of the number so i'll call
227:16 - the function find
227:18 - value
227:20 - bracket
227:22 - ampersand
227:23 - number
227:26 - since our function accepts a pointer
227:27 - variable which stores the memory address
227:30 - we are passing the address of the number
227:32 - variable
227:33 - now let me print the value of the number
227:36 - so i'll use print statement print f
227:39 - inside quotation number
227:43 - percent d
227:45 - comma
227:47 - number
227:50 - let's run this code
227:53 - as you can see the value of the number
227:55 - is changed to 39. this happens because
227:57 - when we pass the address of a number
227:59 - variable
228:00 - the pointer variable inside the function
228:03 - is assigned with the address of the
228:04 - number
228:06 - so when we change the value at the
228:08 - memory address the value of the number
228:11 - is also changed
228:15 - now let's see another example in this
228:17 - example we'll find the square of a
228:19 - number like before but this time we'll
228:21 - use a pointer variable instead of a
228:24 - regular variable here i have the code
228:26 - from our earlier program let's remove
228:28 - this function
228:30 - now i'll create a find square function
228:33 - void
228:34 - find
228:35 - square
228:39 - and this function accepts a pointer
228:41 - variable as its parameter
228:43 - so
228:44 - int
228:46 - asterix
228:48 - number
228:51 - inside the function i'll find the square
228:53 - of the number so int
228:56 - square is equals to
228:58 - asterisk number
229:00 - multiplied with
229:02 - asterisk number
229:05 - this syntax might look confusing for you
229:08 - here asterix number is the value pointed
229:11 - by the number pointer and we are
229:12 - multiplying the value with itself
229:15 - now the square variable stores the
229:17 - square of the number now let me assign
229:19 - this to the value pointed by the number
229:21 - pointer so
229:23 - asterix number
229:26 - is equals to
229:27 - square
229:30 - now inside the main function i'll change
229:32 - this find value to find square
229:37 - so find square
229:39 - i'll also modify this print statement
229:41 - i'll write here
229:43 - square is
229:45 - now i'll run this code
229:49 - as you can see we have computed the
229:51 - square of the number
229:53 - if you are enjoying this video you will
229:55 - definitely love our interactive c
229:57 - programming course on programmis pro the
229:59 - course includes easy to follow tutorials
230:01 - along with quizzes and challenges to
230:03 - practice and test your coding knowledge
230:05 - in real time you will also be creating
230:08 - projects to experience how programming
230:10 - works in the real world and in the end
230:12 - you will receive a certificate which
230:14 - will help you land your first job sign
230:16 - up now by using this qr code or you can
230:19 - also use the link in the description box
230:24 - just like regular variable we can also
230:26 - return a pointer variable from a
230:28 - function let me show you an example here
230:31 - we have our code from our earlier
230:33 - program now suppose i want to return
230:35 - pointer from the function not just
230:37 - compute the square so first i'll change
230:40 - the return type of the function from
230:42 - void
230:43 - to
230:44 - integer pointer that is int asterisk
230:49 - now inside the function i'll add a
230:51 - return statement that returns a pointer
230:53 - so return
230:55 - number
230:58 - this statement returns the address
230:59 - pointed by number now to store the
231:02 - return value i'll assign this function
231:04 - call to a variable
231:06 - so int asterix
231:09 - result
231:10 - is equals to this function call
231:13 - since the return value is an address we
231:16 - have created a pointer to store the
231:18 - result now let's use this result
231:21 - variable to print the square value
231:24 - i'll modify this print statement here
231:26 - i'll remove this square is
231:29 - and i'll write here
231:30 - result is
231:32 - percent d
231:33 - and i'll remove this number and i'll
231:36 - write here
231:37 - asterix
231:38 - result
231:40 - now let's run this program
231:42 - as you can see the return address stores
231:45 - the square of the number
231:47 - okay guys we need your support to keep
231:50 - these types of content free for all
231:51 - users youtube really likes engagement on
231:53 - the video so leave a comment below press
231:55 - that like button and hit subscribe if
231:57 - you haven't already let's keep the
231:59 - engagement score higher so that more
232:01 - people can discover and enjoy these
232:03 - courses
232:05 - let's see one more example to make it
232:07 - more clear for you so i'll create a
232:10 - function that adds to number and returns
232:12 - the sum let me go back to my code editor
232:15 - i'll remove these all code from here
232:19 - and i'll remove these statements from
232:21 - here
232:22 - so first i'll create a function that
232:24 - accepts three pointer so i'll create a
232:27 - function here
232:28 - that is int
232:30 - asterisk
232:31 - add
232:32 - number
232:37 - int
232:38 - asterisk
232:39 - num1 comma int
232:42 - asterisk
232:44 - num2 comma int
232:47 - astrix sum
232:49 - and inside the function we will compute
232:51 - the sum of the number pointed by num1
232:54 - and num2 and store the result to the
232:56 - address pointed by the sum
232:58 - so
232:59 - we'll do
233:01 - asterix
233:02 - sum is equals to
233:05 - asterisk num1
233:07 - plus
233:08 - asterisk
233:09 - num tube
233:10 - then i'll return the sum
233:12 - so return
233:14 - sum
233:16 - now inside the main function i'll create
233:18 - two variables int number 1
233:22 - and i'll assign value 32
233:24 - and another variable int number
233:27 - 2
233:28 - and i'll assign value 8 into this and a
233:31 - sum variable to store the sum let me
233:34 - call the function by passing the
233:35 - addresses of three variables
233:38 - so i'll call the function add
233:41 - numbers
233:43 - parenthesis ampersand number one
233:46 - comma
233:48 - ampersand number two
233:51 - comma
233:52 - ampersand sum
233:55 - since the function returns the address
233:57 - i'll assign this function call to a
233:58 - pointer so int
234:01 - asterisk result is equals to this
234:05 - function
234:06 - finally i'll print this using printf
234:08 - statement
234:09 - so print f bracket inside quotation
234:13 - sum
234:14 - is percent d
234:17 - comma
234:19 - astrix result
234:23 - now let me run this program
234:26 - as you can see we have computed the sum
234:28 - of two numbers using the function and
234:31 - pointers
234:34 - now to revise what you have learned in
234:36 - this program here is a programming task
234:38 - for you create a program to find the
234:40 - multiplication of two numbers using a
234:42 - function and a pointer here is how your
234:44 - programs would work create a function
234:46 - that assets three pointers inside the
234:49 - function multiply values represented by
234:51 - two pointers and assign the result to
234:53 - the address of the third pointer inside
234:55 - the main function create three variables
234:58 - two variables with the value 13 and nine
235:00 - and third variable to store their
235:02 - product call the function with addresses
235:04 - of the three variables as argument store
235:07 - the return value inside a pointer and
235:09 - print the value pointed by the returned
235:11 - address it's time for programming
235:12 - squeeze what type of value does the
235:14 - following function return
235:19 - in this video we will learn about struct
235:21 - in c more specifically we will learn to
235:23 - store related data together under a
235:25 - single name using struct a struct is a
235:28 - collection of variables under a single
235:30 - name the variables can be of different
235:32 - types suppose we want to store the name
235:35 - and a's of a person for this we can
235:37 - create two variables and store name and
235:40 - a's however since both the data are of
235:42 - same person it would be better to create
235:45 - a single struct and put this data inside
235:47 - it remember struct is often termed as
235:50 - structure in c so don't get confused
235:53 - they are mostly used interchangeably
235:56 - let's now start with the syntax of
235:57 - creating a struct a struct in c starts
236:00 - with the struck keyword followed by the
236:02 - name of the struct
236:04 - the curly braces indicates the body of
236:06 - the struct and the variable inside the
236:09 - struct are called members of the struct
236:12 - when we define a struct we are basically
236:15 - creating a data type just like ind and
236:17 - double in this example the data type is
236:20 - struct person
236:21 - so we can create variables of this
236:24 - struck person type just like creating
236:26 - variables of int and double types now
236:29 - let's create a variable of struck person
236:31 - type
236:32 - here if you look into the syntax you can
236:35 - see the syntax looks similar to creating
236:37 - regular variables
236:38 - where struct person represents data type
236:41 - and this person 1 represents the
236:43 - variable name now we can use these
236:46 - struct variables to access the members
236:48 - of struct now i'll add here
236:51 - person 1 dot is
236:54 - is equals to 25
236:57 - and
236:58 - person 1 dot salary
237:02 - is equals to 4 321
237:08 - here i have used dot operator to
237:10 - initialize the struck members is
237:12 - with the value 25 and
237:15 - salary
237:16 - with the value
237:18 - 4321 321.78 for the person1 variable now
237:22 - let's print the value
237:24 - i'll use
237:25 - printf statement
237:27 - here
237:28 - is
237:30 - of person
237:32 - one is percent d n
237:36 - comma person
237:38 - 1 dot is
237:41 - and another print statement
237:44 - that prints the salary
237:48 - of person 1
237:50 - that is in double so point
237:53 - 2
237:54 - lf
237:56 - comma
237:57 - person
237:58 - 1 dot salary
238:00 - similarly the same dot operator is used
238:03 - to access the value of struct members is
238:06 - and salary for the person one variable
238:09 - now i'll complete this program here i'll
238:11 - add include
238:13 - stdio.h
238:17 - and add here
238:19 - struct
238:20 - person
238:22 - currently presses
238:24 - double
238:26 - sorry
238:27 - double
238:28 - salary and
238:31 - int
238:32 - is
238:34 - now i'll run this code
238:37 - here you can see we have successfully
238:39 - initialized and accessed the stock
238:42 - members for the person 1 variable
238:45 - in this way we can create as many stock
238:47 - variables as we want and all stock
238:50 - members can use the a's and salary
238:52 - members of the struct let me show you
238:55 - inside the main i'll add here
238:59 - struct
239:00 - person
239:02 - person2
239:04 - then we can initialize and access the
239:06 - struct members for person to variable as
239:08 - well so i'll initialize person2 variable
239:12 - is is equals to 31.
239:16 - person2.salary
239:20 - is equals to
239:22 - 78943.2
239:28 - and i'll print this
239:31 - so
239:33 - is
239:34 - of
239:35 - person 2
239:38 - golden percent d
239:42 - comma
239:43 - person
239:44 - 2 dot is
239:47 - and
239:48 - print
239:52 - f salary
239:55 - of person 2
239:58 - is percent
240:00 - 0.2
240:01 - lf comma person 2 dot
240:05 - salary
240:08 - so
240:09 - i'll remove this space from here
240:13 - now let me run this code
240:17 - you can see we have successfully used
240:19 - the struct for person 2 as well if you
240:22 - are enjoying this video you will
240:23 - definitely love our interactive c
240:25 - programming course on programmies pro
240:27 - the course includes easy to follow
240:29 - tutorials along with quizzes and
240:31 - challenges to practice and test your
240:33 - coding knowledge in real time you will
240:35 - also be creating projects to experience
240:38 - how programming works in the real world
240:40 - and in the end you will receive a
240:41 - certificate which will help you land
240:43 - your first job sign up now by using this
240:46 - qr code or you can also use the link in
240:49 - the description box
240:51 - in this example we are creating the
240:52 - struct variables in one line and
240:55 - assigning member variable in another
240:57 - line
240:58 - instead
241:00 - we can simply create the struct
241:01 - variables and initialize members in the
241:03 - same line let me show you
241:05 - i'll remove this part of code
241:09 - so i'll remove this part as well
241:12 - i'll remove these two lines of code
241:16 - and
241:17 - so i'll simply write here
241:20 - struct
241:22 - person
241:24 - person 1
241:26 - is equals to curly braces dot is
241:31 - is equals to 25 comma
241:34 - dot salary
241:37 - is equals to 4321.78
241:43 - and i'll close this curly braces
241:45 - and another struct
241:48 - person
241:50 - person 2
241:53 - is equals to curly braces dot is is
241:56 - equals to 31 comma dot salary
242:01 - is equals to
242:03 - 78943.2
242:07 - and let's close this
242:11 - now let me run this code here you can
242:13 - see we get the desired output
242:15 - also we can create stock variables while
242:18 - defining the struct let me show you in
242:20 - this previous code i'll remove this part
242:23 - of code
242:25 - and
242:26 - here i'll add these struct variables
242:29 - person 1
242:31 - comma person 2.
242:33 - now let me run this code
242:36 - you can see we get the same output
242:42 - while creating the struct variables we
242:44 - have to use both the struct keyword and
242:46 - the name of the struct which is too long
242:49 - instead we can use an alias the typedef
242:52 - keyword allow us to use an alias for
242:54 - struct let's see an example
242:57 - here we have our code from our earlier
242:58 - example
243:00 - in this case instead of struck person
243:03 - we can use an alias with the help of
243:06 - typedef let me modify this code
243:09 - here i'll add here type def
243:12 - in the struct definition and
243:15 - person at the end
243:18 - now this
243:20 - person can be used as an alias to struct
243:23 - so we can now create a struct variable
243:26 - using person instead of stock person so
243:28 - i'll remove this and i'll write here
243:31 - person
243:32 - now let me run this code
243:36 - as you can see we get the desired output
243:39 - okay guys we need your support to keep
243:41 - these types of content free for all
243:43 - users youtube really likes engagement on
243:45 - the video so leave a comment below press
243:47 - that like button hit subscribe if you
243:49 - haven't already let's get the engagement
243:51 - score higher so that more people can
243:53 - discover and enjoy these courses
243:58 - let's see one practical example of
244:00 - struct we'll create a program to add two
244:02 - complex numbers we know that a complex
244:05 - number has two part real part and
244:07 - imaginary part so while performing
244:09 - addition between two complex numbers we
244:12 - always add the real part of complex
244:14 - number with the real part of another
244:16 - complex number and the imaginary part of
244:18 - complex number to the imaginary part of
244:21 - second complex number
244:23 - now you know the mechanism of the
244:24 - program let's start writing code first
244:27 - i'll create
244:29 - a struct type def
244:32 - struct
244:34 - complex
244:37 - and curly braces
244:39 - and it has members real and imaginary so
244:43 - double
244:44 - real
244:46 - and
244:47 - double imaginary
244:49 - so i'll just write imagine
244:53 - so this represents the real and
244:55 - imaginary part of complex number and we
244:58 - will add complex at the end of the
245:00 - struct so complex here
245:04 - and semicolon
245:05 - now let's create two complex variable
245:07 - whose sum is to be found
245:10 - so i'll write here
245:14 - complex c1 is equals to curly braces dot
245:19 - real is equals to
245:21 - 21.87
245:24 - and its imaginary value is
245:27 - imagine is equals to 30
245:31 - and then
245:33 - we'll close this and another variable
245:36 - complex
245:37 - c2 with
245:39 - value
245:40 - real value is equals to
245:45 - 13.34
245:46 - and imaginary value
245:49 - dot imagine is equals to
245:52 - 112 point uh suppose this is
245:56 - 112.23 and we'll close this
246:01 - remember we are assigning value while
246:04 - creating the complex variables
246:06 - now let's create another complex
246:09 - variable to store the sum of these two
246:11 - variables so i'll create here
246:14 - complex
246:16 - sum
246:18 - as mentioned earlier let's add the real
246:21 - and the imaginary value of these
246:24 - variables independently and assign the
246:27 - results to the real and the complex part
246:29 - of this sum variable
246:32 - so what i'll do is
246:33 - i'll add here
246:35 - sum dot real is equals to c1 dot real
246:41 - plus
246:43 - c2 dot real
246:46 - and then
246:48 - sum dot imagine
246:50 - is equals to c1 dot
246:52 - imagine
246:54 - plus
246:55 - c2 dot imagine
246:59 - now let's print this
247:01 - i'll use printf statement
247:03 - printf bracket
247:05 - inside quotation result
247:08 - is
247:10 - percent
247:13 - point 2 lf as it is double so
247:17 - plus
247:18 - person dot 2
247:20 - lf and we'll add here i
247:24 - for the complex number
247:25 - and sum that real
247:28 - comma sum dot
247:31 - imagine
247:32 - here i have formatted the output to make
247:35 - our result look better
247:37 - now let me run this code
247:39 - as you can see we get the sum of two
247:42 - complex numbers
247:45 - now to revise what you have learned in
247:47 - this program here is a programming task
247:49 - for you create a program to find the
247:51 - difference between three complex numbers
247:54 - to perform the subtraction between
247:56 - complex numbers you need to subtract the
247:58 - real part of one complex number from the
248:00 - real part of other complex numbers and
248:03 - the imaginary part of one complex number
248:06 - from other complex numbers it's time for
248:08 - programming squeeze
248:10 - what is the name of the variable of the
248:12 - following struct
248:16 - in this video we'll learn about enums in
248:18 - c programming we'll also learn to create
248:20 - variables of enum types and use them in
248:23 - our program and enum is a type that has
248:25 - a fixed set of values let's see an
248:28 - example here we have used the enum
248:30 - keyword to create the enum named size
248:33 - this enum contains four fixed values
248:36 - small medium large and extra large these
248:40 - are called enum constant now let's
248:42 - create enum variables from the above
248:45 - enum so i'll create
248:48 - enum size
248:52 - suit size
248:57 - your suit size is an enum type variable
248:59 - this variable can now store one of the
249:02 - four values present in the enum size
249:05 - so basically the value of suicides can
249:09 - be of either small
249:11 - so i'll assign this here
249:13 - suicides can be
249:15 - small
249:19 - or this can be medium so
249:22 - medium
249:24 - or this can be
249:27 - lars
249:28 - or
249:29 - it can be
249:32 - extra-large
249:34 - now let's complete this example and run
249:36 - the code but before that let's first
249:38 - quickly learn about integral constant
249:43 - in c all enum constant are internally
249:46 - represented as fixed integer values
249:48 - known as integral constant if we
249:50 - consider our earlier enum
249:53 - the constant small is internally
249:55 - represented as 0 and similarly medium
249:58 - large and extra layers are represented
250:01 - as 1 2 and 3 respectively
250:04 - let's verify this i'll go back to my
250:06 - code editor here you can see the code
250:08 - from our earlier program now i'll
250:10 - complete this program so i'll add here
250:12 - has include
250:15 - stdio.h
250:19 - and here i'll add
250:21 - int
250:22 - main
250:24 - and inside the curly braces
250:27 - return
250:28 - zero
250:30 - and i'll cut this
250:33 - and i'll put it here
250:37 - so
250:39 - yeah
250:40 - i'll now print this using printf
250:42 - statement
250:44 - and here person d
250:46 - comma
250:47 - su size
250:49 - as we know enum constant are integer
250:52 - values internally so i have used this
250:54 - for person d format specifier
250:57 - now i'll run this
250:59 - as you can see we get 3 as an output
251:02 - because internally the value of extra
251:04 - large is three
251:06 - now i'll change the value of suicides
251:08 - from extra large to small
251:11 - and
251:12 - and i'll run this again
251:15 - this time we get the output
251:18 - zero as we saw in our earlier example
251:22 - the default integral values of enum
251:24 - constant starts from 0 so we get value 0
251:27 - 1 2 and 3 for enum constant small medium
251:31 - large and extra large however sometimes
251:34 - it might be necessary to print other
251:36 - values for example the value 0 1 2 and 3
251:40 - for sizes small medium large and extra
251:42 - large does not make sense instead we
251:45 - might want to print 27 for small 31 for
251:48 - medium 35 for large and 40 for extra
251:52 - extra large in such situation we can
251:55 - change the value of integral constant
251:57 - let me show you how i'll go back to my
251:59 - code editor here you can see the code
252:02 - from our earlier example
252:05 - now i'll assign new value
252:07 - to this enum constant so
252:09 - small is equals to 27
252:12 - and medium is equals to
252:15 - 31
252:17 - lars is equals to 35 and extra large is
252:21 - equals to 40.
252:24 - now let's create some more variables as
252:27 - well first i'll cut this line of code
252:32 - and
252:32 - now i'll
252:34 - modify this
252:36 - and write here suit size 1
252:38 - is equals to
252:40 - small
252:42 - and similarly i'll write
252:45 - enum
252:46 - size
252:48 - so size
252:51 - 2 is equals to
252:52 - medium
252:55 - and for lars and extra layers i'll copy
252:58 - this too
252:59 - and i'll paste it here
253:02 - and i'll change this to size
253:05 - 3
253:06 - and i'll write here
253:09 - lars
253:10 - and
253:12 - so size 4
253:15 - is extra large so extra
253:18 - large
253:22 - then i'll print this
253:26 - for that
253:27 - i'll use the same code from our earlier
253:30 - program and i'll copy this and i'll
253:32 - paste it three more times
253:35 - and change this
253:37 - from suicide
253:39 - 2 so size 3
253:41 - and this is
253:43 - suicide 4
253:46 - now let me run this code
253:50 - as you can see we get 27 31 35 and 40
253:55 - for the enum constant small medium large
253:58 - and extra large now we are to at the end
254:00 - of this video but before ending the
254:02 - video let me give you a small tip we
254:05 - have been using this format to create
254:08 - enum variable however we can also create
254:10 - enum variables while defining the enum
254:13 - let me show you here suicides is an enum
254:16 - variable and like before it can only
254:18 - store four values
254:20 - now let me run this code
254:23 - now this time we get the expected output
254:26 - okay guys we need your support to keep
254:28 - these types of content free for all
254:30 - users youtube really likes engagement on
254:32 - the videos so leave a comment below
254:34 - press that like button and hit subscribe
254:36 - if you haven't already let's get the
254:38 - engagement score high up so that more
254:39 - people can discover and enjoy these
254:41 - courses
254:45 - now to revise what you have learned in
254:47 - this program here is a programming task
254:49 - for you create an enum with enum
254:51 - constant sunday monday tuesday wednesday
254:54 - thursday friday and saturday
254:56 - inside the main function create two enum
254:58 - variables named weekend one and weekend
255:01 - two assigned values sunday saturday to
255:03 - the variables respectively print the
255:05 - values of the week in 1 and weekend 2
255:08 - it's time for programming squeeze what
255:10 - is the name of the variable in the
255:11 - following enum
255:16 - in this video we will learn about
255:18 - dynamic memory allocation in c
255:19 - programming more specifically we will
255:22 - learn to allocate and destroy memory
255:23 - addresses while running the c program
255:26 - dynamic memory allocation allow us to
255:28 - allocate memory dynamically that is
255:30 - after we run the program
255:32 - before we learn about dynamic memory
255:34 - allocation let's first revise the
255:36 - concept of pointers here we have created
255:39 - a pointer variable ptr this pointer
255:41 - variable stores the memory addresses of
255:43 - the var variable
255:45 - in the print statement we have used the
255:47 - pointer variable to access the value
255:49 - pointed by it
255:50 - when i run this code
255:53 - i'll get the output 32
255:55 - we have already discussed pointers in
255:57 - our earlier videos if you are confused
256:00 - how this program works i highly
256:01 - recommend you to watch earlier videos
256:03 - you can find the link somewhere on the
256:05 - screen now let's get back to our video c
256:08 - provides three major functions to
256:09 - perform dynamic memory allocation malloc
256:12 - reallock and free we will now learn
256:15 - about them one by one
256:18 - the malloc function stands for memory
256:20 - allocation is used to reserve a block of
256:23 - memory of the specified size for example
256:26 - suppose we need to allocate memory to
256:28 - store n variables of double type
256:30 - variable then we can use the malloc
256:32 - function now let's see how we can use
256:35 - the malloc function
256:36 - i want to allocate memory for n
256:38 - variables so let me create the n
256:40 - variable int
256:42 - and
256:44 - now let's create a pointer variable to
256:46 - store the address of allocated memory
256:49 - int
256:50 - asterix
256:51 - ptr
256:54 - now let's use the malloc function i'll
256:56 - write here
256:57 - ptr
256:59 - equals to parenthesis int asterisk
257:04 - malloc
257:05 - and
257:07 - into
257:08 - size of int
257:13 - here and into size of int is the memory
257:16 - required to store n number of integer
257:18 - values suppose the value of n is 100 so
257:21 - let's change this to n equals 200
257:25 - now we know the size of int is usually 4
257:28 - bytes so total space needed to store 100
257:31 - double values is 100 into 4 that is 400
257:34 - bytes
257:36 - now malloc function allocates 400 bytes
257:38 - of memory
257:40 - finally we have used the typecasting so
257:42 - that the allocated memory is used to
257:45 - store integer type data
257:47 - here we have assigned the allocated
257:48 - memory to the ptr variable in this case
257:51 - the ptr variable stores the address of
257:54 - the first byte of the allocated memory
257:56 - and we can use the ptr variable to
257:58 - access the remaining bytes as well
258:02 - once the work of allocated memory is
258:04 - completed we use the free function to
258:06 - release the dynamically allocated memory
258:08 - here is the syntax to use the free
258:10 - function here the ptr is the pointer
258:12 - variable that stores the address of the
258:14 - memory allocated using malloc now that
258:17 - we know how malloc and free works let's
258:19 - use them together in a program but
258:22 - before that let's get some engagement in
258:24 - the video so that we can keep these
258:26 - types of content free for all users
258:28 - youtube really likes engagement on the
258:29 - video so leave a comment below press
258:31 - that like button and hit subscribe if
258:33 - you haven't already let's get the
258:35 - engagement score higher so that more
258:37 - people can discover and enjoy these
258:39 - courses
258:40 - here we have our quote from our earlier
258:41 - program now let's complete this program
258:43 - first so i'll add here has include
258:49 - stdio.h
258:52 - and int
258:53 - main
258:56 - inside the curly braces
258:59 - return zero
259:02 - now i'll cut this and put it there
259:08 - and let's
259:10 - clean this up
259:12 - now it's ready okay
259:15 - so we have our complete code
259:17 - now first i'll change the value of n
259:20 - from hundred to four
259:22 - for simplicity now let's provide four
259:24 - input values to store in the allocated
259:26 - memory so
259:29 - i'll use
259:30 - printf
259:32 - so print f
259:34 - and here i'll write
259:36 - enter
259:37 - input
259:38 - values
259:46 - and i'll use for loop
259:50 - so end
259:52 - i is equals to 0
259:54 - i is less than
259:56 - n
259:59 - plus plus i
260:00 - and inside the curly braces i'll
260:04 - use scanf function
260:06 - and inside quotation percent d
260:09 - comma
260:10 - ptr plus i
260:14 - here we have allocated spaces for four
260:17 - element and ptr stores the address of
260:20 - the first element so we can treat ptr as
260:22 - an array
260:24 - and ptr plus i gives the ith element of
260:27 - the array which we have already
260:28 - discussed in the pointer and array video
260:31 - now let's print the input values i'll
260:33 - use the print statement first to print
260:35 - the message input
260:38 - values
260:40 - and
260:42 - i'll use for loop again
260:45 - and i is equals to 0 i is less than
260:51 - n
260:52 - and plus plus i
260:55 - inside the for loop i'll print
260:58 - percent
261:00 - d
261:03 - and comma
261:05 - asterix
261:07 - ptr
261:09 - plus i
261:10 - so asterix parenthesis ptr plus i gives
261:14 - the value pointed by the ptr plus i
261:16 - pointer while working with malloc there
261:18 - might be situation where the memory
261:20 - allocation fails in such situation the
261:23 - malloc function returns null so let's
261:25 - create a condition to end the main
261:27 - function if the function cannot memory
261:29 - in our code i'll add if condition
261:33 - if
261:35 - pti equals to null
261:38 - then
261:40 - then we'll print
261:44 - memory allo memory cannot
261:47 - be allocated
261:52 - and
261:54 - return
261:57 - zero
261:58 - here if the malloc function returns null
262:00 - the condition becomes true and this line
262:03 - memory cannot be allocated will be
262:05 - printed and finally return 0 terminates
262:08 - the main function now finally let's use
262:11 - the free function to release the
262:13 - allocated memory so i'll add here
262:18 - free function
262:23 - now
262:24 - let's run this code
262:26 - i'll enter here 12 21
262:29 - 13
262:31 - and
262:32 - 9.
262:34 - as you can see we have allocated the
262:36 - memory using the malloc function
262:39 - if you are enjoying this video you will
262:40 - definitely love our interactive c
262:42 - programming course and program is pro
262:44 - the course includes easy to follow
262:46 - tutorials along with quizzes and
262:48 - challenges to practice and test your
262:50 - coding knowledge in real time you will
262:52 - also be creating projects to experience
262:54 - how programming works in the real world
262:57 - and in the end you will receive a
262:58 - certificate which will help you land
263:00 - your first job sign up now by using this
263:03 - qr code or you can also use the link in
263:06 - the description box
263:08 - in our previous example we have
263:10 - allocated 400 bytes of memory to store 4
263:13 - of values now suppose we need to store
263:15 - two more integer data in this case we
263:18 - use the real look function to change the
263:20 - size of dynamically allocated memory now
263:23 - let's see the syntax to use really
263:26 - function
263:27 - here six into size of int is the new
263:29 - size allocated using the real look
263:32 - function let's see an example now
263:34 - here i have the earlier code for
263:37 - simplicity i'll remove this section to
263:39 - take input values so i'll remove this
263:42 - and here i'll print the memory addresses
263:45 - directly
263:47 - so here i'll use printf inside quotation
263:50 - allocated
263:53 - memory
263:57 - and i'll use for loop
264:00 - for
264:01 - and inside for
264:03 - and i is equals to zero i is less than
264:07 - n
264:09 - and
264:10 - plus plus i
264:12 - inside the curly braces
264:15 - inside the for loop i'll print the
264:17 - memory addresses
264:19 - so percent p
264:23 - comma
264:24 - ptr
264:26 - plus i
264:30 - now suppose i need two more memory
264:32 - spaces so i'll add a new value of n with
264:35 - value six
264:36 - so i'll add here n is equals to 6
264:39 - then we will use realloc function to
264:41 - allocate two more spaces so here ptr is
264:45 - equals to reallock
264:48 - function and ptr
264:51 - comma and into
264:54 - size of
264:56 - int
264:59 - finally let's print the memory addresses
265:02 - of new allocated spaces so
265:04 - printf and newly allocated
265:09 - sorry
265:10 - allocated
265:13 - memory
265:15 - backslash n
265:19 - and we'll use for loop again
265:22 - and i is equals to 0 i is less than
265:26 - n
265:28 - and here plus plus i
265:32 - inside for loop i'll print the newly
265:34 - allocated memory addresses so printf
265:37 - percent p
265:40 - comma
265:42 - ptr
265:43 - plus i
265:46 - i'll run this code
265:48 - you can see the output here
265:50 - initially four spaces were allocated
265:52 - using the malloc
265:54 - and then we increased the size from four
265:56 - to six using reallock
266:01 - now to revise what you have learned in
266:03 - this program here is a programming task
266:05 - for you create a program that
266:06 - dynamically change the size of an array
266:09 - create a pointer array like this int
266:11 - asterix aces and then allocate four
266:14 - spaces for the array using the malloc
266:16 - function get four input values for the
266:18 - array print the array element using the
266:21 - pointer resize the array to store six
266:23 - element using reallock assign 32 and 59
266:27 - as the fifth and sixth element you can
266:29 - see the hint on your screen
266:31 - then finally print all six arrays
266:33 - elements it's time for programming
266:35 - squeeze what is the correct way to
266:37 - allocate memory to store 12 double data
266:43 - in c programming there are usually three
266:45 - steps involved while working with files
266:48 - open a file perform file operation close
266:51 - the file let's first learn to open a
266:53 - file
266:56 - we use the file pointer to work with the
266:58 - file don't worry you don't have to
267:00 - understand all about this pointer just
267:03 - remember this syntax for now now once we
267:06 - create a file pointer we then use the f
267:09 - open function to open the file let me
267:11 - show you an example
267:12 - here i have this
267:14 - test.txt file now let's open this file
267:18 - what i'll do is
267:20 - i'll first create the file pointer
267:23 - file
267:24 - pointer
267:26 - so file astrix fptr
267:30 - now i'll use f open function fptr is
267:34 - equals to f open
267:36 - parenthesis inside quotation
267:39 - test dot txt
267:42 - and another attribute that is
267:45 - r that means read
267:48 - basically opening a file is nothing but
267:50 - connecting our c program to the external
267:52 - file in this case we are connecting our
267:54 - main
267:55 - dot c file to this
267:58 - test.txt file
268:00 - now
268:02 - you can see this r this r here indicates
268:05 - that we are opening the file in read
268:07 - mode so we can only perform the read
268:10 - operation on the file
268:11 - one thing you need to remember is that
268:13 - while opening the file in read mode you
268:16 - need to make sure the file is already
268:18 - present in the specified location
268:20 - otherwise the f open function will
268:22 - return null let me show you
268:25 - now let me first complete this program
268:27 - so i'll add here
268:31 - has include
268:33 - stdio dot edge
268:36 - and
268:38 - int main
268:40 - inside curly braces return zero
268:45 - and
268:47 - i'll cut
268:48 - this two lines of code and i'll paste it
268:52 - there
268:54 - so let's make it more clearer
268:57 - okay
268:58 - so now i'll add an fl statement to check
269:01 - if file open is successful or not so
269:04 - here i'll add
269:06 - if
269:08 - fbti
269:10 - is not equals to null
269:15 - then
269:16 - we'll print
269:20 - file open successful
269:23 - file
269:27 - been
269:28 - successful
269:32 - else
269:34 - will print
269:37 - file open unsuccessful
269:42 - and success
269:49 - now let's run this code
269:53 - as you can see file open is successful
269:56 - because
269:57 - test.txt file is present here now let me
270:00 - change the file to something else let's
270:02 - say
270:03 - test
270:04 - 2 dot txt and i'll save this and i'll
270:08 - run this again
270:11 - as you can see this time we get file
270:14 - open unsuccessful because the file does
270:17 - not exist and f open returns null
270:21 - if you are enjoying this video you will
270:23 - definitely love our interactive c
270:24 - programming course and program is pro
270:26 - the course includes easy to follow
270:28 - tutorials along with quizzes and
270:30 - challenges to practice and test your
270:32 - coding knowledge in real time you will
270:34 - also be creating projects to experience
270:37 - how programming works in the real world
270:39 - and in the end you will receive a
270:40 - certificate which will help you land
270:43 - your first job sign up now by using this
270:45 - qr code or you can also use the link in
270:48 - the description box
270:51 - now that we know how to open a file in
270:53 - read mode let's read its content in c we
270:56 - use the af gate function to read the
270:57 - content from the file let me show you an
270:59 - example
271:00 - here you can see the code from our
271:02 - earlier program
271:04 - now i'll change this test to to test.txt
271:09 - now i'll remove this file open
271:11 - successful print statement from if
271:13 - condition
271:15 - now let's use afkit's function to read
271:17 - the content of this file so first we
271:20 - need to create an array to store the
271:22 - file content
271:24 - so i'll add here
271:26 - care
271:27 - content
271:29 - square bracket
271:30 - 1000
271:34 - now let's read the content from this
271:36 - file to this array
271:39 - so i'll write here
271:42 - f gets
271:45 - bracket
271:46 - content
271:48 - comma 1000
271:50 - comma fpti
271:53 - and i'll close this
271:54 - then i'll print it using printf
271:56 - statement
271:59 - so percent
272:01 - f
272:01 - comma content
272:05 - i'll save this
272:07 - here f kids read the content of the file
272:09 - and stores it
272:11 - in the content array and this
272:14 - thousand is the size of the file that is
272:16 - to be read since our array is thousand i
272:19 - have kept a thousand and fbtr is the
272:22 - pointer used to read the file
272:25 - now let's run this code
272:28 - you can see we get the output this is
272:30 - the text file here you can see in this
272:33 - file this is the text file is the first
272:35 - sentence we are only able to get the
272:38 - first sentence from the file because
272:40 - here we have used f kits and f kids can
272:44 - only read the first sentence at a time
272:47 - if we need to read all the lines we can
272:49 - use a loop let me show you
272:51 - so first i'll use this line as the
272:54 - condition of while loop so i'll write
272:56 - here
272:57 - while
272:58 - and put this line inside parenthesis
273:07 - here f gets function reads the content
273:09 - of the file if the file read is
273:10 - successful it returns true otherwise it
273:13 - returns false hence our loop runs until
273:15 - there is some content to be read from
273:17 - the file
273:18 - now inside the loop
273:21 - i'll print the file content so i'll cut
273:23 - this
273:24 - and put it here
273:27 - now
273:28 - i'll save this
273:30 - now let's run this code
273:33 - as you can see we are able to read all
273:35 - the content of the file
273:38 - once a read operation is completed it is
273:41 - a good practice to close the file we use
273:43 - the fclose function to close the file
273:45 - here i'll add fclose function at the end
273:48 - fptr
273:53 - now let's learn to write content to a
273:56 - file but first we need to open our file
273:58 - in write mode this means we need to use
274:01 - w as the second parameter instead of r
274:04 - with the f open function let me show you
274:07 - here this test.txt file already exists
274:11 - but if the file did not exist a new file
274:14 - is created let me show you
274:17 - i'll change this name to new file
274:22 - new file
274:23 - dot txt
274:26 - now this new file will be created i'll
274:28 - save this and i'll run this
274:32 - you can see new file.txt file is now
274:35 - created here
274:37 - now let's add content to this file we
274:40 - use f put function to write content to a
274:42 - file let me show you
274:44 - i'll write here
274:46 - f puts
274:48 - parenthesis inside quotation i'll write
274:51 - i love
274:53 - c programming
274:58 - comma
275:00 - fbtr
275:03 - let me add one more message
275:05 - here i'll add f puts
275:08 - inside parentheses i'll write
275:11 - c programming
275:14 - series
275:17 - by
275:18 - programmies
275:21 - is the best
275:24 - so here comma fbtr
275:28 - and don't forget to close the file so f
275:31 - close
275:33 - fptr
275:36 - now let's run this code
275:39 - now when you open this file you can see
275:42 - the file now includes the message
275:44 - however the message looks a bit odd so
275:49 - in this file i'll add here
275:54 - backslash n
275:56 - and i'll save this
275:57 - and let's run this again
276:06 - now you can see the file looks clean now
276:09 - here remember that initially the file
276:11 - did not exist when we run the program
276:14 - for the first time a new file is created
276:17 - we then added the content to the file
276:19 - using f puts
276:20 - and when we run the program for the
276:22 - second time adding backslash n the
276:25 - initial content of the file is erased
276:27 - and new content is added
276:29 - so whenever we open a file in write mode
276:32 - if the file already exists
276:34 - all content will be erased let me show
276:36 - you that again now i'll change this
276:39 - message
276:40 - from i love c programming to
276:44 - to new misses
276:49 - new misses
276:50 - one
276:51 - and i'll change this
276:54 - to
276:57 - new
276:58 - messes two
277:00 - and i'll save this
277:02 - and i'll run this
277:05 - now you can see the old content is now
277:08 - replaced by new content
277:13 - now to revise what you have learned in
277:15 - this program here is a programming task
277:17 - for you create a new file in write mode
277:19 - and add content c is a fun programming
277:21 - language and i love using c language
277:25 - close the file again open the file in
277:27 - read mode and read the content of the
277:29 - file it's time for programming squeeze
277:36 - in this video we'll learn about
277:37 - preprocessors and macros remember this
277:40 - has include stdio.h
277:43 - we have been using it in all our
277:45 - programs today you will know the exact
277:47 - meaning of this line so let's get
277:49 - started in this line has include is
277:52 - preprocessor directive that includes the
277:54 - stdio.h header file in our program
277:57 - basically a preprocessor preprocess our
278:00 - program before it is being compiled for
278:03 - example this line adds the stdio.h file
278:07 - in our program before the execution of
278:09 - the program there are different types of
278:11 - preprocessor and all of them are
278:13 - represented by the hash symbol at the
278:15 - beginning let's start with the most
278:17 - common preprocessor
278:21 - as mentioned earlier the hash include
278:23 - preprocessor is used to include external
278:26 - header file in our program for example
278:28 - has include stdio.h
278:31 - this code includes the stdio.h file in
278:34 - our program similarly has include math.h
278:38 - this code includes the math.h file in
278:41 - our program once we add the header file
278:43 - in our program we can use all the
278:45 - function present in the file remember
278:47 - printf and scanf
278:49 - these functions were defined inside the
278:51 - stdio.h file we are able to use this
278:54 - function because we have added the
278:56 - stdio.h file in our program similarly we
278:59 - can use math function like sqrt and cbrt
279:03 - to compute the square root and cube root
279:05 - respectively once we include the
279:07 - math.header file in our program let's
279:10 - see an example here is the basic c
279:12 - program
279:13 - since we will always be printing some
279:16 - values i have already added the stdio.h
279:19 - file now let's add the math.h file so
279:22 - here i'll add
279:24 - has
279:25 - include
279:28 - math.h hero file
279:33 - now inside main
279:34 - let's create a variable
279:38 - int number
279:40 - so int number and i'll assign a value 36
279:44 - to this
279:46 - i'll now use sqrt function to compute
279:49 - the square root of this number so i'll
279:51 - use sqrt
279:53 - bracket number
279:56 - this function returns a double value so
279:58 - i'll assign this to a variable
280:01 - so double
280:04 - square
280:05 - root
280:07 - is equals to
280:08 - square t number now let me print the
280:11 - square root variable i'll use printf
280:13 - statement
280:14 - print f
280:17 - bracket inside quotation percent dot 2
280:21 - lf
280:22 - comma
280:23 - square
280:25 - root
280:29 - now i'll run this code
280:32 - as you can see we get square root of 36
280:35 - which is 6.
280:37 - now let's find the cube root using cvrt
280:40 - function i'll change this value of
280:43 - number from 36 to 125
280:47 - and let me change this skrt to cvrt
280:51 - c cbrt
280:54 - and i'll change this variable name from
280:56 - square root to cube root
280:59 - i'll change the variable name in here as
281:02 - well
281:04 - now let's run this code
281:07 - now this time
281:09 - you can see we get the cube root 5 of
281:12 - this number
281:15 - in c the hash defined preprocessor is
281:17 - used to define macros for example has
281:20 - defined pi 3.1415
281:23 - here pi is a macro a macro is a piece of
281:26 - code which is given a name in our
281:28 - example we have used pi to indicate the
281:31 - value
281:32 - 3.1415 now whenever we need to add the
281:35 - value in our code we use bi let's see an
281:38 - example now let me define pi macro
281:42 - has define
281:45 - p i
281:46 - 3.1415
281:49 - now i'll print the value of p i
281:52 - inside the main so i'll use printf
281:55 - statement
281:58 - here
281:59 - print
282:00 - f
282:02 - inside quotation percent dot 4
282:05 - lf
282:06 - comma
282:07 - vi
282:08 - sorry pi
282:10 - and i'll run this code
282:12 - as you can see we get the value 3.1415
282:15 - when we print pi
282:17 - let's see one more example suppose i
282:19 - want to compute the area of circle i
282:21 - have already defined pi macro now let me
282:24 - create the radius variable
282:27 - first i'll create radius variable here
282:30 - double radius
282:34 - is equals to 12.4
282:37 - and
282:38 - i'll now compute the area
282:41 - so here double
282:43 - area
282:44 - is equals to p i
282:47 - into
282:49 - radius
282:51 - into
282:52 - radius
282:54 - here i have used pi macro
282:57 - this will be replaced by the value 3.145
283:01 - now let me print the area i'll modify
283:03 - this print statement
283:05 - so i'll modify this print statement and
283:08 - i'll put here
283:10 - area
283:11 - i'll run this code you can see we have
283:14 - successfully computed the area of the
283:16 - triangle okay guys we need your support
283:19 - to keep these types of content free for
283:21 - all users youtube really likes
283:23 - engagement on the video so leave a
283:24 - comment below press that like button hit
283:26 - subscribe if you haven't already let's
283:28 - get the engagement score high up so that
283:30 - more people can discover and enjoy these
283:32 - courses
283:35 - as mentioned earlier macros are piece of
283:38 - code that is given some name hence we
283:40 - can also define a complete function as a
283:42 - macro let's see an example
283:45 - we have computed the area of circle
283:47 - instead of computing the area like this
283:49 - we can define a function macro that
283:51 - computes the area and use the code in
283:53 - our program let me show you here after
283:56 - the defined pi i'll write here has
283:59 - define
284:01 - circle
284:03 - area
284:06 - parenthesis are
284:08 - another parenthesis
284:10 - i'll write here p i
284:12 - into
284:13 - r
284:14 - into r
284:17 - this is the macro function it takes the
284:19 - single parameter r that is the radius of
284:22 - the circle and computes the area now
284:24 - let's use this in our code to compute
284:26 - the area so i'll remove this pi into
284:29 - radius into radius from the code and
284:32 - i'll add here circle
284:35 - area
284:36 - and here read yes
284:41 - so let me run this
284:44 - as you can see we get the same output
284:48 - now to revise what you have learned in
284:50 - this program here is a programming task
284:52 - for you create a program to find the
284:54 - square root of a number using the sqrt
284:57 - function and macro together here is how
284:59 - your programs would work include the
285:01 - math.header file define a macro function
285:04 - square root bracket and this macro
285:07 - function should use the sqrt function to
285:09 - find the square root of the parameter n
285:12 - inside the main function use the square
285:14 - root macro to compute the square root
285:16 - it's time for programming squeeze what
285:18 - symbol is used to begin a preprocessor
285:21 - directive
285:22 - comment your answer below see you in the
285:24 - next video happy programming
285:29 - [Music]