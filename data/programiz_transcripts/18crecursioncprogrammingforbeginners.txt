00:00 - hey guys this is me padma from
00:01 - programmies and welcome back to this
00:03 - series and c programming in our past
00:05 - videos we learn about function now we
00:07 - will learn to create a different type of
00:09 - function that call itself these are
00:11 - called recursive function it's going to
00:14 - be an interesting video so let's get
00:16 - started
00:20 - in computer programming recursion is a
00:23 - process that allows us to create a
00:25 - function that call itself let me show
00:27 - you what does that mean
00:29 - on your screen you can see we have
00:30 - created a function named recurse and you
00:33 - can also see we are calling the recurse
00:36 - function from inside its body here the
00:39 - function is calling itself this is
00:41 - called a recursive function let me tell
00:43 - you how this works
00:45 - initially the recurse function is called
00:48 - from the main function now the control
00:50 - of the program goes inside the body of
00:53 - the recurse function
00:54 - inside the function body we have
00:56 - included the function call to call the
00:59 - same recurse function
01:01 - now again the programs control move back
01:04 - to the recurse
01:05 - in this way the function is called again
01:07 - and again this might result in infinite
01:10 - function execution to prevent this
01:12 - infinite recursive call we need to
01:15 - provide an if else statement let me show
01:17 - you you can see we have put the
01:19 - recursive call inside if else statement
01:22 - now the function call itself only under
01:25 - certain condition this way we can
01:27 - prevent the infinite recursive call
01:30 - by the way if you are watching this
01:31 - there is a good chance you want to
01:33 - improve your skills in c programming
01:35 - lucky for you we have a mobile app that
01:37 - provides a well-structured free
01:38 - programming course with certification at
01:41 - the end and you can use the app
01:42 - alongside the video to practice on the
01:44 - built-in compiler our course is free so
01:47 - download now by scanning this qr code or
01:49 - click the link in the video description
01:54 - now that we know how recursion works
01:56 - let's see an example i'll create a
01:58 - program that computes the sum of n
02:00 - natural numbers instead of typing the
02:03 - program line by line i'll just copy the
02:05 - program so that i can focus more on the
02:08 - actual working in our previous video
02:10 - function we have already discussed about
02:11 - this function prototype so if you want
02:14 - to know more on this you can find the
02:15 - link in the video description as well
02:18 - here we have some function that takes in
02:20 - parameter n
02:22 - here n represents the number up to which
02:24 - we have to find the sum for example if n
02:27 - is 4 we have to find the sum of four
02:30 - numbers 1 2 3 and 4. inside the sum
02:34 - function we have an if else statement
02:36 - that checks if n is equals to zero if
02:40 - false the function makes a recursive
02:42 - call to itself however for each
02:45 - recursive call we are decreasing the
02:47 - value of n and finally when the value of
02:50 - n becomes 0 the else condition returns n
02:53 - and the recursive call is stopped let's
02:56 - run this code and i'll enter 4.
03:00 - you can see we get the sum is equals to
03:02 - 10. let's see how it works
03:04 - so initially we provide 4 as input value
03:07 - which is stored inside the number
03:09 - variable this value is passed to the sum
03:12 - function during the function call from
03:14 - the main function
03:16 - inside the sum function the value of n
03:18 - is now 4
03:19 - so the condition is not equal to 0.
03:23 - so this condition becomes true and if
03:25 - statement is executed
03:27 - here the return statement inside if
03:30 - returns n which is 4
03:32 - plus a recursive call
03:34 - to sum which with a new value 3 which is
03:38 - 4 minus 1.
03:40 - now again the value of n is 3 which is
03:43 - not equals to 0 so this condition is
03:46 - true again so the if statement is
03:49 - executed
03:50 - now if statement returns 3 and a
03:53 - function call with a new value 2. this
03:56 - process continues until the value of n
03:59 - becomes 0
04:00 - when n becomes 0 the else statement is
04:03 - executed which returns 0. finally we
04:07 - have returned value 4 plus 3 plus 2 plus
04:10 - 1 plus 0 hence we get 10 as output
04:16 - also this image will help you visualize
04:19 - the working more clearly
04:21 - okay guys we need a support to keep
04:23 - these types of content free for all
04:25 - users youtube really likes engagement on
04:27 - the videos so leave a comment below
04:29 - press that like button hit subscribe if
04:31 - you haven't already let's keep the
04:33 - engagement score high up so that more
04:34 - people can discover and enjoy these
04:36 - courses
04:40 - now to revise what we have learned in
04:42 - this video here is the programming tags
04:44 - for you create a program that computes
04:46 - the factorial of a number here take a
04:48 - input number from the user create a
04:51 - function that takes the number as a
04:52 - parameter inside the function check if
04:55 - the number is greater than zero if true
04:57 - return number multiplied by a recursive
05:00 - call to the function with parameter one
05:02 - less than number else return one you can
05:05 - find the answer to this question in our
05:07 - github repository and also if you want
05:10 - to revise this concept all the program
05:12 - in this video are present in there the
05:14 - link is in the video description below
05:17 - now that we have reached the end of this
05:19 - video it's time for programming squeeze
05:22 - which of the following statement is
05:23 - false
05:25 - comment your answer below see you in the
05:27 - next video happy programming
05:33 - [Music]
05:39 - you