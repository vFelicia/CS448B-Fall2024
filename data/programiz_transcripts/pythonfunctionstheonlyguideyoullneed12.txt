00:00 - what's up guys i'm punit from
00:01 - programmers and welcome back to this
00:03 - series on python
00:04 - in the last few videos we learned about
00:07 - decision making and loops
00:09 - we will start a new section today we
00:11 - have been using the term
00:12 - function a few times in our videos
00:14 - without explaining what they are
00:16 - in this video we will look into
00:17 - functions in detail and learn how to
00:19 - create them
00:20 - and why they are used so let's get
00:22 - started
00:29 - in programming a function is a group of
00:31 - related statements
00:33 - that performs a specific task they help
00:35 - us divide a large program
00:37 - into smaller chunks so that it's easier
00:39 - to understand
00:40 - and change suppose you need to create a
00:43 - program
00:43 - that draws circles and rectangles of
00:46 - different colors
00:47 - based on user input instead of creating
00:49 - one big chunk of statements to create
00:51 - this program
00:52 - we can create three functions to solve
00:54 - this first
00:55 - create a circle function then a
00:58 - rectangle function
00:59 - and then the color the shape function
01:02 - this helps us to divide complexity
01:04 - and we can focus on only a small part of
01:07 - the problem at one time
01:09 - now let's see how we can create a
01:10 - function in python
01:12 - to create a function we use the def
01:14 - keyword which stands for the function
01:16 - definition
01:17 - followed by the function name then i'll
01:20 - use the empty parenthesis
01:21 - followed by a column so i'll say def def
01:25 - greet empty parenthesis and column
01:29 - here we have defined a function name
01:31 - greet however
01:33 - this code will give us an error because
01:35 - the function body is missing
01:37 - let's fix that for now i'll only add two
01:40 - print statements as its body
01:42 - so i'll say print hello
01:45 - and then let me add another print
01:47 - statement print
01:49 - how do you do remember we need to use
01:53 - indentation to specify that this is the
01:55 - body of the function
01:57 - we have successfully created a function
01:59 - named greet now let me run this code
02:05 - and we don't really see anything this is
02:07 - because
02:08 - defining a function won't do anything in
02:10 - itself to bring the function into action
02:13 - we need to call it our function name is
02:15 - greet
02:16 - with empty parenthesis so to call it i
02:19 - will just use greet with empty
02:20 - parentheses
02:21 - so here i'll say greet
02:26 - and now when i press run then you can
02:28 - see that hello
02:29 - and how do we do are printed here's how
02:32 - this code works
02:33 - when we call the function the control of
02:36 - the program jumps to the function header
02:39 - then the statements inside the function
02:41 - are executed
02:43 - when this task is completed the control
02:46 - of the program
02:46 - goes back to the function call and the
02:49 - next statement
02:50 - after the function call is executed one
02:53 - thing with functions
02:54 - is that once we define a function we can
02:56 - call it any number of times
02:58 - let's call our greet function three
03:00 - times so here i'll say greet
03:03 - and one more greet and now if i press
03:06 - run
03:08 - as you can see the function has run
03:09 - three times that's why these two
03:11 - statements were executed
03:13 - one two and three times
03:18 - so if we need to perform a task again
03:21 - and again we can wrap the codes inside a
03:23 - function
03:24 - and use the function any number of times
03:26 - we just need to call the function again
03:28 - and again
03:29 - one thing to remember when we create a
03:31 - function is that we need to define a
03:33 - function
03:34 - first before we can call it this code
03:36 - for instance will not work
03:38 - let me run this code to show you
03:41 - here when the grade function is called
03:44 - python doesn't know that this function
03:46 - exists
03:47 - because it's defined after the function
03:48 - call so always remember to
03:50 - define a function before you use it
03:54 - before moving to the next section of the
03:55 - video i'd like to mention that the
03:57 - program is team has created an app that
03:59 - allows you to learn python from your
04:00 - phone
04:01 - the app contains bit size lessons that
04:03 - are easy to understand
04:04 - a built-in interpreter so that you can
04:06 - run python on your phone
04:08 - quizzes and many more features the app
04:10 - is available on both ios and android the
04:12 - links are in the video description below
04:16 - now let's talk about python arguments
04:18 - and how our greet function from the
04:19 - previous example
04:21 - can be changed to allow arguments
04:23 - suppose we want to make our greet
04:25 - function a bit more personal
04:26 - so instead of printing hello we want to
04:28 - print something like
04:29 - hello jack or whatever the person's name
04:32 - is
04:32 - in such cases we can pass values to a
04:35 - function
04:36 - these values we pass to a function are
04:38 - called arguments
04:39 - so i'll go back to the code that i
04:41 - started with i'll remove these two greet
04:43 - functions because i want only one
04:45 - and here inside the grid function i'll
04:48 - pass the jack string like this
04:51 - this value that we passed during a
04:53 - function call is called an
04:54 - argument so jack here is an argument
04:57 - and in the function definition i'll add
04:59 - a variable in the greet function
05:01 - i'll call it name
05:05 - this name variable accepts whatever
05:07 - value is sent as an argument during the
05:09 - function
05:10 - call in this case jack is transferred to
05:13 - the variable name
05:15 - now i can use the name parameter inside
05:17 - the function
05:18 - so now i can say hello comma
05:22 - name and when i press run then i get
05:25 - hello
05:25 - jack let's see step by step how this
05:28 - function works
05:30 - when we call the greet function with the
05:31 - argument jack
05:33 - then this is passed to the name variable
05:35 - inside the function definition then
05:38 - the statements inside the function are
05:40 - executed we can use the name parameter
05:43 - inside the body of the function
05:46 - when this task is completed the control
05:48 - of the program comes
05:49 - back to the place from where the
05:51 - function was called
05:53 - and the next statement is executed in
05:55 - this case there's nothing here
05:58 - it's also possible to pass multiple
06:00 - arguments to a function
06:01 - as per our needs if we need to pass
06:04 - multiple arguments to a function
06:05 - we can separate them by commas let's see
06:08 - this in action by creating a function to
06:10 - add two numbers
06:11 - so i'll remove the old code and i'll
06:13 - create a new function called add numbers
06:16 - so i'll say def
06:18 - add underscore numbers obviously i'll
06:20 - need two parameters
06:22 - n1 and n2 and then inside the function
06:25 - i'll say result
06:27 - equals n1 plus n2
06:31 - print the sum
06:34 - is and here i'll say result
06:39 - now outside the function i'll say number
06:43 - 1
06:44 - equals 5.4 number two
06:47 - equals six point seven and then i can
06:51 - call
06:51 - add underscore numbers number one
06:55 - comma number two in this program
06:58 - we have passed number one and number two
07:01 - as arguments to the add numbers function
07:04 - these arguments will be accepted as n1
07:06 - and n2
07:08 - once they are passed to the add numbers
07:09 - function so inside the function
07:12 - n1 will be 5.4 and n2 will be 6.7
07:16 - then we have added the numbers and
07:18 - printed them inside the function itself
07:22 - let's run this code and see the output
07:24 - as you can see
07:25 - i now have the sum of those two numbers
07:31 - in our program to add two numbers we are
07:34 - finding the sum of numbers
07:35 - and printing it it's working fine
07:37 - however
07:38 - it's better just to find the sum inside
07:40 - the function
07:41 - and print the result somewhere else we
07:43 - can achieve that by using the return
07:46 - statement
07:47 - inside the function i'll remove this
07:48 - print statement
07:50 - and i'll say return
07:54 - result when we return a value
07:58 - it comes back to the function and we can
08:00 - assign this return value to a variable
08:02 - like this
08:03 - so here i can say result equals
08:07 - add numbers number one comma number two
08:10 - and i can print the result as
08:11 - print the sum is
08:15 - and then i can say result let's see step
08:18 - by step how this program works
08:21 - we call the add numbers function with
08:23 - two arguments
08:24 - number one and number two which are
08:26 - accepted by the function definition
08:29 - as n1 and n2 the sum of n1
08:32 - and n2 is calculated and the result
08:35 - is returned to the function call this
08:38 - return value
08:39 - is assigned to the result variable
08:42 - and in the next line we just print the
08:44 - result variable
08:45 - outside the add numbers function
08:48 - whenever a return statement is
08:50 - encountered inside a function
08:51 - the control of the program goes back to
08:53 - the place from where it's called
08:55 - let's see an example of this let's get
08:57 - back to our grid function that we wrote
08:59 - before
08:59 - i'm pasting it here
09:03 - when i press run then we get hello jack
09:07 - and how do you do here now let me modify
09:09 - this program a little bit
09:10 - i'll add a return statement after this
09:13 - line and let's see what happens
09:15 - now when i press run then you can see
09:18 - that only hello jack is printed
09:20 - this is because when the return
09:22 - statement is encountered
09:24 - immediately the function terminates and
09:26 - control of the program goes back to the
09:28 - place from where the function is called
09:31 - at this point we have covered all the
09:33 - basics to create a function
09:35 - these functions we created ourselves are
09:38 - known as user defined functions
09:40 - actually we have already used functions
09:42 - numerous times
09:44 - in all of our videos remember print it
09:46 - is also a function
09:48 - the function definition of this print
09:49 - statement is defined somewhere inside
09:52 - the python programming language
09:54 - that's why we can just call the function
09:56 - and it just works
09:57 - these functions defined inside of python
09:59 - are called built-in functions
10:01 - we have also used other built-in
10:03 - functions like float
10:05 - int input and so on in our videos
10:08 - there are numerous built-in functions
10:09 - available in python that make our life a
10:12 - whole lot easier
10:13 - for example suppose we have a list like
10:16 - this
10:18 - now if we need to find the length of
10:19 - this list we can use the len function
10:23 - so here i can say length
10:27 - equals len max
10:30 - and i can print the length of the list
10:32 - as print
10:34 - length is comma
10:37 - length let's run this code and see the
10:40 - output when i press run
10:42 - then as you can see it says length is 5
10:45 - which is the length of the number of
10:46 - items in this
10:48 - marks list if we instead needed to find
10:51 - the sum of the items of the list
10:53 - we don't need to manually write the code
10:55 - ourselves we can use the sum function
10:57 - that's available in python
10:59 - so here i can say marks underscore sum
11:02 - equals sum of marks
11:07 - and then i can print the sum as print
11:09 - the
11:10 - total marks you
11:14 - got is and then i can say
11:17 - marks underscore sum now when i press
11:20 - run
11:20 - then it says the length is 5 and the
11:22 - total marks you got is 308
11:25 - which is the sum of these marks if
11:28 - you're interested
11:29 - you can find all the built-in functions
11:30 - available in python in the
11:32 - programming.com website
11:34 - the link will be in the description
11:35 - below let's put all the things
11:37 - we have learnt in this video in action
11:40 - suppose you have just attended a
11:42 - university examination
11:43 - the marks you obtained in various
11:45 - subjects are stored in a list like this
11:48 - you want to find the average marks you
11:50 - obtained in the exam
11:51 - and based on the average marks you want
11:53 - to find your grade
11:55 - the grading rule is like this you will
11:57 - get grade a
11:58 - if the average marks is equal to or
12:00 - above 80
12:01 - you will get grade b if the average max
12:04 - is equal to or above 60
12:06 - and less than 80 you will get grade c if
12:08 - the average max is equal to or above
12:11 - 50 and less than 60 and if the average
12:13 - marks is less than 50
12:15 - you will get great f to solve this
12:17 - problem
12:18 - we will create two functions one to find
12:21 - the average marks
12:22 - and another to compute the grade so
12:24 - let's get started
12:25 - i'll start with the function definition
12:27 - but before that let me add a little
12:29 - comment i'll say
12:30 - function to find average marks
12:34 - now let me define my function as def
12:37 - fine average marks now the argument to
12:41 - this
12:42 - will be a list of marks and inside i'll
12:45 - say
12:46 - sum of marks equals
12:49 - some marks i also need to find the
12:51 - number of subjects or the number of
12:53 - marks i have so i'll say total
12:56 - underscore subjects
12:59 - equals the length of this marks list
13:03 - and then now i can calculate the average
13:05 - as average
13:06 - underscore marks equals sum of
13:09 - marks divided by total subjects
13:13 - let me return this average marks
13:15 - variable
13:17 - and now outside the function i can say
13:20 - average
13:21 - marks equals find average
13:25 - marks i'll pass in the marks list and
13:27 - here i'll say
13:29 - print your average marks
13:32 - is and i'll say average underscore marks
13:36 - when i press the run button i can see
13:38 - that my average marks is 67.8
13:41 - which is the average of these five
13:43 - numbers which is calculated as sum of
13:45 - these numbers
13:46 - divided by the total number of subjects
13:48 - which is 5 in this case
13:51 - now we need to create another function
13:54 - to calculate the grade based on the
13:55 - average marks
13:56 - let's do that now i'll create another
13:59 - function but before that let me add a
14:00 - little comment
14:01 - i'll say calculate the grade and
14:04 - return it and then i'll say def
14:08 - compute underscore grade now the
14:11 - parameter or the argument to this will
14:13 - be the average marks
14:14 - so i'll say average marks and inside
14:17 - i'll say
14:18 - if average marks greater than
14:22 - equals 80 then grade
14:25 - is a alif
14:29 - average marks greater
14:32 - equals 60
14:35 - then the grade is b
14:39 - alif average max
14:42 - greater than equals 50 in this case
14:45 - the grade is c and the else clause
14:49 - i'll say grade equals f
14:52 - and outside the if block i'll say return
14:56 - grade now i can use this compute grade
14:59 - function as
15:01 - grade equals compute
15:05 - underscore grade average
15:08 - marks now let me print
15:12 - this grade as your grade is
15:16 - and the grade variable now when i press
15:19 - it on
15:20 - i can see that my average marks is 67.8
15:23 - and my grade is b which is not the best
15:25 - result but at least i now know what my
15:28 - grade is
15:30 - before we end this video here's a
15:32 - programming task for you can you create
15:34 - a program to add and multiply two
15:36 - numbers
15:37 - for this create two functions add
15:39 - underscore numbers
15:40 - and multiply underscore numbers these
15:42 - functions should compute the result and
15:45 - return them to the function call
15:47 - and the results should be printed from
15:49 - outside the function
15:50 - you'll find the answer to this question
15:52 - in our github repository
15:54 - also visit our website programmies.com
15:56 - for more tutorials and examples
15:58 - the links will be in the description
16:00 - below now let's recap what we learned
16:02 - a function is a block of code that
16:04 - performs a specific task
16:07 - we use the def keyword to define a
16:09 - function
16:10 - to bring the function into action we
16:12 - need to call the function
16:14 - we can call the same function as many
16:16 - times as we want as per our needs
16:19 - we can pass values to a function these
16:21 - values
16:22 - passed to functions are called arguments
16:24 - or parameters
16:26 - the return statement can be used inside
16:28 - a function the return statement returns
16:30 - a value
16:31 - from a function and exits the function
16:33 - as well that's it for this video
16:35 - i hope you learned something if you're
16:36 - just watching the video without writing
16:38 - any code
16:39 - i highly encourage you to try the
16:40 - programs in this video on your own
16:42 - the only way you can be a good
16:43 - programmer is by trying
16:45 - by the way you can find all the programs
16:47 - from this video on github
16:49 - i've provided the link in the
16:50 - description below feel free to copy the
16:52 - program and edit them as you please
16:54 - and if you have any questions and
16:56 - feedback use the comment section below
16:58 - in the next video we will learn about
17:00 - different types of function arguments in
17:02 - python
17:03 - join me in this video series and let's
17:05 - explore the exciting world of
17:06 - programming together
17:07 - if you like this video hit the like
17:09 - button now and also don't forget to
17:11 - subscribe to our channel
17:12 - and ring that bell icon so that you
17:13 - don't miss the next video thanks for
17:15 - watching and i'll see you in the next
17:17 - one
17:17 - happy programming