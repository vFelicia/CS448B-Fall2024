00:00 - what's up guys i'm puneet from
00:01 - programmers and welcome back to this
00:02 - series on programming with javascript in
00:05 - this video we will learn javascript
00:06 - operators and how to use them with
00:08 - various data types such as strings and
00:10 - numbers we will specially look at
00:13 - arithmetic operators
00:20 - in javascript an operator is a symbol
00:23 - that is used to perform operations on
00:25 - values and variables and we have already
00:27 - used one operator many times in our
00:29 - program without even realizing it it's
00:31 - the assignment operator equal to it is
00:34 - used to assign the value in the right to
00:36 - the variable in the left here the punit
00:39 - string
00:40 - is assigned to the variable name
00:43 - there are also many other assignment
00:44 - operators but before we take a look at
00:46 - them let's talk about arithmetic
00:48 - operators first
00:51 - arithmetic operators are basic operators
00:53 - such as addition and subtraction that
00:55 - allow us to perform arithmetic
00:57 - operations here are the basic arithmetic
00:59 - operators that we use in javascript
01:01 - programming
01:02 - let me copy all the arithmetic operators
01:04 - in the code editor i'll remove this old
01:06 - code and paste these
01:08 - now i'll create a series of examples
01:10 - where i'll use these arithmetic
01:12 - operators one by one
01:16 - let's start with the addition operator
01:18 - that is represented by the plus symbol
01:22 - on my code editor i'll write
01:24 - const x
01:26 - equals eight
01:28 - similarly const y
01:30 - equals four
01:33 - and now i can say const result equals
01:36 - x plus y
01:38 - let me print the result variable i'll
01:40 - say const oops console.log
01:44 - result
01:46 - here the x variable
01:48 - contains the value 8
01:50 - the y variable contains the value 4.
01:54 - we then use the plus operator
01:56 - to perform the addition operation and
01:58 - the result is stored in the result
02:00 - variable by the assignment operator
02:02 - equals
02:03 - let me run this code
02:06 - and you can see that i got 12 which is
02:08 - the sum of 8 and 4 as a result
02:12 - instead of storing the result in a
02:13 - variable we can simply print the value
02:15 - directly for example from the previous
02:18 - code i'll simply remove this line
02:23 - and on line 13 i can just say x plus y
02:27 - directly when i press run
02:29 - i get the same output as before
02:32 - we can also add values without using any
02:35 - variables we can do something like this
02:37 - so i'll remove these two lines
02:40 - and instead of console log x plus y i
02:42 - can just say 8
02:44 - plus 4 inside and when i press run i get
02:47 - the same output as before
02:49 - let's now get back to our original code
02:51 - so let me undo
02:53 - some of the things i've done
02:57 - all right
02:58 - here we are adding two integer values we
03:00 - can also add integers and floating point
03:02 - values so i'll change this value from 8
03:05 - to 8.5 and when i press run
03:08 - i get 12.5 that means i can combine
03:12 - integers and floating point values while
03:14 - adding
03:16 - so far we have been using the plus
03:17 - operator with numeric data where it
03:19 - simply adds two numbers however the plus
03:22 - operator can also be used with strings
03:24 - when used with strings the plus operator
03:26 - concatenates or joins two or more
03:28 - strings together let's see an example
03:31 - i'll first create two string variables
03:33 - so let me remove this old code i can say
03:35 - const text one equals
03:39 - javascript
03:41 - similarly
03:42 - const text two
03:44 - equals
03:45 - programming
03:47 - now let's use the plus operator with
03:49 - these two strings so i'll say
03:50 - console.log
03:52 - text1 plus text2
03:55 - and now when i press run
03:59 - as you can see i get output as
04:01 - javascript and programming joined
04:02 - together
04:03 - now i want to include a space between
04:05 - the two strings for this i can simply
04:08 - add a space after the first string
04:10 - and now when i press run
04:12 - there is space between javascript and
04:14 - programming
04:15 - we can also join multiple strings using
04:17 - the plus operator let me show you so
04:20 - i'll remove this old code and i'll just
04:22 - say console.log
04:25 - javascript
04:27 - oops
04:29 - then plus
04:31 - then
04:32 - is
04:34 - then i can say
04:35 - fun
04:38 - here i'm joining three strings together
04:40 - let's run this code
04:43 - and as you can see the final output
04:45 - contains the three strings joined
04:47 - together
04:48 - you must have noticed that all strings
04:50 - are separated by space this is because i
04:52 - have added a space before is and a space
04:56 - before fun
05:01 - similar to the plus operator we use the
05:03 - minus operator to perform the
05:05 - subtraction operation let's see an
05:07 - example of subtraction i'll use the same
05:09 - program and simply replace plus with
05:11 - minus
05:12 - i have my old code from before now
05:14 - instead of plus i'll replace this with
05:16 - minus and now when i press run
05:20 - you can see that i get 4 as the output
05:21 - which is 8 minus four
05:27 - now to perform multiplication we use the
05:29 - asterisk symbol it is used as a
05:31 - multiplication operator let's see an
05:34 - example from the previous program i'll
05:36 - simply replace the minus symbol with an
05:38 - asterisk so instead of x minus 1 i'll
05:41 - say x s check y
05:43 - i'll run this code you must have guessed
05:45 - the output by now but it's 8 times 4
05:48 - which is 32.
05:53 - similarly we can also perform division
05:55 - using the division operator the forward
05:57 - slash is used as a division operator
06:00 - now in the code i'll change the asterisk
06:02 - to forward slash
06:06 - you must have guessed the output again i
06:08 - press run and 8 divided by 4 is 2.
06:15 - in javascript you can also get the
06:17 - remainder after division for this we use
06:19 - the modulus operator the modulus
06:21 - operator simply performs division and
06:23 - returns the remainder after the division
06:25 - let's see an example here i'll change
06:28 - the division operator with the modulus
06:29 - operator and run the code
06:31 - so i can say x modulus y and when i
06:35 - press run
06:37 - i get 0 because when 8 is divided by 4
06:40 - the remainder is 0.
06:42 - let me modify the program i'll replace
06:45 - value 8 with value 11 and when i press
06:48 - run
06:48 - i get the remainder 3 because 11 when
06:51 - divided by 4 has a remainder of 3.
06:54 - if you're enjoying this video please
06:56 - also check out programmers pro where we
06:58 - provide tutorials along with quizzes and
07:00 - challenges which will help you practice
07:02 - and test your learning in real time also
07:04 - the course includes projects to give you
07:06 - an awesome experience of how programming
07:07 - works in the real world and for our
07:09 - youtube subscribers we are giving 50 off
07:11 - on the yearly plan sign up by scanning
07:13 - this qr code or use the link in the
07:15 - video description to claim your discount
07:20 - now let's learn about the increment
07:21 - operator the increment operator is used
07:23 - to increase the value by one we use two
07:26 - plus signs as the increment operator
07:28 - let's see an example here i'll create a
07:30 - variable with value eight
07:32 - so
07:33 - let me remove this old code i can say
07:35 - let x equals eight
07:38 - and in the next line i'll say
07:40 - console.log
07:43 - plus plus x
07:44 - you can see that i have printed the
07:46 - variable with increment operator in
07:48 - front of it let's run this code
07:54 - as expected
07:55 - the plus plus sign increases the value
07:57 - by 1 and we get 9 as the output
08:00 - in this case we have used the increment
08:02 - operator before the variable x
08:05 - however you can also use it after the
08:07 - variable let me show you so i'll remove
08:09 - this and i'll add the plus plus
08:12 - after x
08:14 - you must be thinking what the output
08:15 - must be
08:16 - most of you must have guessed nine let's
08:18 - see if you're right or not when i press
08:20 - run
08:22 - i get eight instead of nine
08:25 - what's happening here
08:26 - well the increment operator when used
08:28 - after variable will first return its
08:31 - current value and then increase the
08:33 - value by 1.
08:34 - so here the value of x is printed first
08:37 - which is 8 and then it is increased to
08:39 - 9. we can verify this by printing the
08:42 - variable for the second time
08:44 - so after this i'll say console.log
08:47 - x
08:48 - and when i press run
08:50 - you can see first the value is 8 and
08:53 - then it is increased to 9.
09:00 - similarly we can also decrease the value
09:01 - by 1 using the decrement operator and we
09:04 - use 2 minus signs as the decrement
09:06 - operator let's see an example similar to
09:09 - the earlier examples i'll create a
09:10 - variable and print it using the
09:12 - decrement operator so let me remove this
09:14 - whole code and i can say console.log
09:18 - minus
09:19 - minus x
09:22 - when i press run
09:25 - as you must have expected i get seven as
09:27 - output here the value is decreased by
09:29 - one
09:30 - we can also use the decrement operator
09:32 - after the variable and same as the
09:34 - increment operator it returns the value
09:37 - and then increases the value by 1.
09:41 - when i run this code
09:43 - i get 8 just like before
09:46 - now to check if the value has been
09:47 - decreased or not we simply print the
09:49 - variable for the second time so i can
09:51 - say console.log
09:54 - x
09:54 - and when i press run
09:56 - i get 8 and then 7 that means the
09:58 - decrement operator did decrease the
10:00 - value by 1.
10:05 - similar to two plus operators we can
10:07 - also use two asterisks together the two
10:10 - asterisks operator together is known as
10:12 - the exponential operator it is used to
10:14 - compute the power of a number let's see
10:17 - it with an example
10:18 - so i'll remove this old code and i'll
10:20 - say const result equals x
10:24 - asterisk asterisk 2
10:26 - and let me console log the result
10:30 - in this program the left side of double
10:32 - asterisk is the variable x which has the
10:35 - value 8
10:36 - the right side represents the power to
10:38 - the value so this line can be read as 8
10:41 - to the power of 2 or x to the power of
10:44 - 2. let's run this code
10:47 - as expected i get 64 which is 8 squared
10:51 - as the result
10:56 - so far we have been using a single
10:57 - operator in an expression however there
11:00 - might be a condition where we might have
11:01 - to use multiple operators in a single
11:03 - statement let's see this with an example
11:06 - so i'll remove this old code and i'll
11:08 - say const result equals
11:11 - 4 by 2 plus 3
11:16 - times 5
11:17 - minus 1
11:19 - now i'll console log the result
11:24 - here i have used the division operator
11:26 - addition operator multiplication
11:28 - operator and subtraction operator
11:30 - together
11:31 - now the output of the program depends on
11:33 - the operator that will be executed first
11:35 - let's see the output first
11:38 - you can see that i get 16 as the output
11:41 - this is because the division operator is
11:44 - executed first
11:46 - then the multiplication is executed
11:50 - then the plus operator is executed and
11:52 - finally the minus operation is executed
11:56 - that means 4 by 2 is 2
11:58 - 3 times 5 is 15 so 2 plus 15 is 17 17
12:03 - minus 1 is 16.
12:06 - you might be wondering why division is
12:08 - executed first well this is due to the
12:10 - concept called precedence and
12:12 - associativity operators with higher
12:14 - precedence are executed first and
12:16 - operators with lower precedence are
12:18 - executed last we will learn about all
12:20 - this in the later videos
12:22 - but before we move ahead one quick tip
12:24 - for you if you have multiple operators
12:26 - in a single line you should build a
12:28 - habit of using parenthesis to make it
12:30 - easier to understand the code for
12:32 - example i'll change the above code and
12:34 - i'll add some parentheses to make it
12:36 - clearer i can add parenthesis here
12:39 - similarly
12:40 - here
12:42 - and now you can see that the code looks
12:44 - much cleaner
12:45 - okay guys we need your support to keep
12:47 - these types of content free for all
12:49 - users youtube really likes engagement on
12:51 - the video so leave a comment below press
12:53 - that like button and hit subscribe if
12:55 - you haven't already let's get the
12:57 - engagement score high up so that more
12:58 - people can discover and enjoy our
13:00 - courses
13:03 - now let's use the operators that we
13:05 - learned in this video to create some
13:06 - interesting programs suppose you're a
13:08 - university student and you need to pay
13:11 - 4535 dollars as tuition fee for the next
13:13 - semester
13:14 - the college is giving a discount of 10
13:17 - on the early payment of your tuition fee
13:19 - since it's a great offer you decided to
13:21 - make an early payment now can you find
13:23 - out how much money you have to pay i'll
13:26 - initialize a variable called
13:28 - initial fee
13:29 - and i'll put the value of 4535 into it
13:33 - then let me save the discount percent in
13:34 - a variable called discount percent
13:38 - and that's obviously 10 percent
13:40 - now i can say const discount amount
13:43 - equals
13:44 - discount percent
13:47 - divide by 100
13:48 - times the initial fee
13:52 - now the total fee will obviously be
13:55 - or the fee that you pay after the
13:57 - discount will be the initial fee
14:00 - minus the discount
14:02 - amount oops it should be amount
14:07 - and now i can say console.log let me use
14:10 - the string interpolation so i'll say fee
14:13 - after
14:14 - discount
14:16 - is
14:17 - dollar basis total fee
14:20 - and now when i press run
14:23 - you can see that the fee after discount
14:25 - is 4081.50
14:30 - let's see one more example
14:32 - suppose you go on a run every other day
14:34 - exercising is obviously good for health
14:36 - and you cover a distance of about five
14:38 - kilometers a day now you want to convert
14:40 - that distance from kilometers to miles
14:42 - and see how much distance you've covered
14:44 - in miles you could create a program like
14:46 - this so here i'll remove this old code
14:49 - first i'll start by storing the five
14:51 - kilometer value in the variable km
14:52 - distance so i can say const km
14:55 - distance equals five
14:58 - then we know that one kilometer is equal
15:00 - to zero point six two one three seven
15:02 - one miles so i'll store this conversion
15:05 - ratio in the conversion ratio variable
15:07 - i'll say const conversion ratio equals
15:13 - 0.621371
15:19 - now to calculate the distance in miles
15:21 - we simply multiply the distance in
15:23 - kilometers with the conversion ratio and
15:25 - store the value in miles distance
15:27 - variable
15:28 - so i can say const miles distance
15:32 - equals
15:34 - km
15:36 - distance
15:37 - asterisk
15:38 - conversion ratio
15:41 - now when i print the my stations
15:43 - variable i should get the distance in
15:45 - miles so this time i'll use string
15:47 - concatenation
15:49 - i can say console.log
15:53 - u covered
15:56 - covered
16:00 - in space
16:02 - plus
16:03 - miles distance
16:05 - plus
16:07 - miles
16:08 - as you can see when i press run
16:11 - then the kilometers is converted to
16:13 - miles
16:17 - now to practice what we have learned
16:18 - here's a programming task for you create
16:20 - a program that converts degree celsius
16:22 - to fahrenheit the formula to convert
16:24 - celsius to fahrenheit is fahrenheit
16:27 - equals celsius times 1.8 plus 32
16:30 - what you can do is store the value of
16:32 - celsius value in the celsius variable
16:34 - then use the formula fahrenheit equals
16:36 - celsius times 1.8 plus 32 to convert to
16:39 - fahrenheit and display the result you
16:41 - can find the code for this program in
16:43 - our github repository also if you want
16:45 - to revise the concept you can find all
16:47 - the programs in our github i will put
16:49 - the link in the description now that we
16:51 - have reached the end of the video it's
16:52 - time for the programming squares what is
16:54 - the output of the following code
16:59 - comment answer below happy programming
17:05 - [Music]
17:10 - you