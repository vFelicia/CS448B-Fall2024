00:00 - today i want to talk about some of the
00:01 - things that i wish i knew
00:03 - when i started my first developer job
00:05 - the reason i want to talk about this
00:06 - topic is because
00:07 - when i started my first developer job as
00:09 - a professional software developer
00:11 - there were so many things so many things
00:14 - that you know i realized that i had the
00:16 - wrong concepts about
00:17 - when i was in college i used to think
00:19 - that writing software development or
00:21 - software developers career is all about
00:24 - wearing a hoodie
00:24 - and you know writing code in front of a
00:26 - black screen but
00:28 - when i started my journey as a
00:29 - professional software developer i
00:30 - realized that i had so many
00:32 - misconceptions about
00:33 - the career of a software engineer
00:35 - especially not just you know
00:37 - and software engineering or software
00:38 - development can be such a broad term
00:41 - there's mobile app development there's
00:43 - web app development there's
00:44 - data science there's so many fields and
00:47 - each field can be so
00:48 - different in its approach to a problem
00:50 - that you know you might
00:52 - need to work differently or you might
00:55 - need to think differently even
00:56 - for instance if you're if you want to go
00:58 - into cyber security
01:00 - the kind of mindset that you need to be
01:02 - a cyber security researcher or
01:04 - an ethical hacker is so different from
01:06 - someone who wants to work in enterprise
01:08 - software
01:09 - that you know the good practices of one
01:12 - field can be bad practices in another
01:14 - field
01:15 - so before i continue i want to talk a
01:17 - little bit about my history
01:19 - as a software developer and what i've
01:20 - learned through that history
01:22 - after graduation my first job was in a
01:25 - company in hyderabad india
01:27 - where i was working on c-sharp and and
01:30 - the microsoft suit of business
01:31 - intelligence software so it was called
01:32 - ssrs sscs
01:34 - nssis and i was also working on windows
01:37 - 8 metro applications so there was
01:38 - something called windows 8 metro
01:40 - applications that were full screen
01:41 - applications for windows 8
01:43 - and it was a lot of legacy code so i was
01:45 - working on
01:46 - fixing other people's codes and it was
01:49 - kind of a shocker for me because you
01:50 - know i was thinking okay i would get a
01:52 - fresh code base to work on i would get
01:53 - to start something new
01:55 - but then that was probably the first
01:58 - shock
01:58 - that i got as a entry-level software
02:01 - developer
02:02 - i also got introduced to javascript
02:03 - during that time and
02:05 - after a few months i felt that you know
02:07 - uh so the company i was working for was
02:09 - like more like a corporate setup
02:11 - with 300 employees and i always felt
02:14 - that i was more of a startup kind of guy
02:16 - so when and when i got an opportunity to
02:18 - work in a startup i just grabbed it and
02:20 - i changed my location to noida in india
02:22 - so it's more in north india
02:24 - where the technology stack was
02:26 - completely different so
02:27 - here i had to work on java linux
02:30 - distributed systems
02:31 - i had to write code that simulated
02:35 - statistical equations so in programming
02:38 - language called
02:39 - r i have to build complex graph graphs
02:42 - using javascript and a framework called
02:44 - d3
02:44 - so it was this whole new ecosystem of
02:47 - programming languages and
02:49 - you know deployment strategies and a
02:51 - completely new world basically
02:53 - after i came back to nepal and started
02:55 - programming with my friends
02:56 - it was a different challenge because we
02:57 - were then working on content writing
02:59 - content making the website
03:01 - very good usable and now i'm being
03:04 - focused on building more advanced tools
03:06 - like our compiler or our mobile app and
03:08 - also creating these videos
03:10 - one thing i was not aware of uh when i
03:12 - was in college or when i before i
03:14 - started my first professional
03:17 - job was you know how
03:20 - how fast the technology was growing and
03:23 - how fast i would need to adopt to new
03:25 - check technologies
03:26 - as i mentioned i started as a c-sharp
03:28 - developer then moved on to javascript
03:30 - then again went back to back-end so
03:32 - doing java r
03:33 - you know doing a lot of graphs using
03:36 - technology like apache storm so
03:38 - distributed systems all these things and
03:42 - in the matter of six months i had to
03:44 - completely change even my you know the
03:46 - operating system
03:47 - my laptop was running and literally
03:50 - everything
03:50 - so when i was in college or before i
03:54 - got those experiences the image of a
03:56 - software development career i had was
03:58 - working on a programming language for
03:59 - two years
04:00 - then slowly maybe learning another
04:01 - language i was not prepared for the pace
04:04 - at which
04:05 - uh technologies are growing and that is
04:07 - why throughout these python videos and
04:09 - these unscripted videos
04:10 - one thing that i've always focused on is
04:13 - mastering the key concepts
04:15 - don't call yourself a python programmer
04:16 - or a javascript program or a c-sharp
04:18 - programmer call yourself a programmer so
04:20 - that
04:20 - if the technology changes if there's new
04:23 - concepts that's coming in
04:24 - you are always ready to learn them and
04:26 - you're not sticking to one or two
04:28 - programming languages
04:29 - so the thing about software development
04:31 - that i love and also i hate
04:32 - is that you have to learn so much every
04:34 - day uh the intuition i had was
04:37 - i would be a beginner for six months
04:39 - then i would be a six after six months i
04:41 - would be a mid-level developer
04:42 - then maybe after two years i'd be a
04:44 - senior developer but
04:46 - the reality is not uh like that the more
04:48 - i learned the more i feel like a
04:50 - beginner
04:50 - and the more i realize that there's so
04:52 - much to learn there's so much to learn
04:54 - every day
04:55 - another thing i wish i knew was the
04:57 - importance of starting out with the
04:58 - right programming language
05:00 - because i was lucky in college the
05:03 - company in which i got my first job
05:05 - even before my college had ended they
05:07 - gave me a training on javascript
05:08 - and even after six or seven years i'm
05:11 - still writing a lot of javascript code
05:13 - it's one of my favorite programming
05:14 - languages along with python
05:15 - and the reason i'm so grateful that i
05:18 - started with javascript is
05:20 - i started a programming language that
05:22 - was growing very rapidly
05:24 - and that is why you know i i got a good
05:26 - paying job in the
05:27 - like right out of college and that is
05:29 - why that sort of gave me the momentum
05:31 - for the rest of my career
05:32 - now i'm not trying to bash on
05:34 - programming languages that are not as
05:36 - popular
05:37 - today like c or c plus plus but what i'm
05:40 - trying to say is
05:41 - if you're going to a market place where
05:44 - you know there's a demand for certain
05:47 - programming languages
05:49 - based on the market market value of
05:53 - those programmers
05:54 - then you have to be a bit smart about it
05:55 - so if you're
05:57 - starting out in your career it's always
05:58 - better to choose the right programming
06:00 - language do your research
06:01 - find out which technologies are in
06:03 - demand and make sure that
06:05 - you learn those technologies that is
06:06 - something that i would have told
06:08 - a younger myself quick announcement guys
06:10 - our python holiday sale ends today
06:12 - grab it now the links are in the
06:13 - description below
06:15 - another thing i would have told myself
06:17 - or told a younger punit is
06:19 - don't focus on learning too many
06:20 - programming languages instead focus on
06:22 - the key concepts of software development
06:24 - what do i mean by that let me give you
06:27 - an example so i there's this one person
06:29 - i know
06:30 - she is doing she did this 100 days of
06:32 - code challenge and she did like every
06:34 - day she would post the solution of
06:36 - some problem for 100 days in one
06:38 - programming language so she started with
06:39 - python i think
06:40 - then she went on to see and then then
06:43 - she went on to dart
06:44 - so she did this 100 days of coding
06:46 - challenge for three different
06:47 - programming languages
06:49 - not really solving new problems so the
06:51 - same problems in different programming
06:52 - languages
06:53 - i do not suggest that because you know
06:56 - learning too many programming languages
06:58 - isn't helpful instead if you
07:00 - are a master at one programming language
07:02 - and if you know the basics
07:03 - and not just the syntax of a programming
07:05 - language if you know
07:06 - you know what surrounds programming like
07:08 - networks cyber security
07:10 - deployment debugging testing so if you
07:13 - know all these things
07:15 - then no matter which programming
07:16 - language you pick up you will always
07:17 - become a good software developer
07:19 - another thing i wish i knew before was
07:22 - uh the importance of people skills
07:24 - now you are not going to be building
07:26 - software alone there is going to be a
07:27 - team
07:28 - so the way you communicate with the team
07:30 - the you the way you
07:32 - uh pose questions and answer to your
07:34 - team
07:35 - can make or break your career as a
07:37 - software developer
07:38 - what do i mean by that when you know
07:41 - you're working in a team setting then
07:42 - there are going to be conflicts there
07:44 - are going to be partnerships you form
07:46 - with people and if you are able to
07:49 - build trust and you know build good
07:51 - relationship with those people
07:53 - then definitely your life as a software
07:55 - developer is going to be hard
07:56 - and instead if you do not manage those
07:58 - conflicts properly
08:00 - if you have uh quarrels and
08:02 - disagreements with those people and you
08:03 - are not able to resolve them
08:05 - then you know life is going to be very
08:07 - difficult that is something that i
08:09 - did not know you know i was only doing
08:11 - software development alone or maybe just
08:13 - this one friend who was comfortable with
08:16 - me
08:17 - now if you're going to be in a
08:18 - professional job you have to work with
08:20 - people who you might not be totally
08:22 - comfortable with sometimes and
08:24 - that is where you have to show a true
08:27 - test of character where you have to
08:30 - balance those communications and those
08:33 - disagreements and you know
08:34 - sometimes you need to take a stand
08:36 - sometimes you need to step back so
08:37 - people skills
08:38 - are really underrated in any field but
08:41 - especially in computer science
08:42 - there's this whole godly treatment for
08:46 - coding the coding part and not really a
08:49 - lot of
08:50 - focus on the communication part so that
08:52 - is something that i wished i knew
08:54 - another thing that i did not appreciate
08:56 - as much as before is that
08:58 - software is built to solve other
09:00 - people's problems not your problems
09:02 - and if you are going to build a good
09:04 - software then
09:05 - you know your ability to ask good
09:07 - questions to the client
09:08 - understand what they really want to
09:10 - build understand what their budget is
09:13 - and what you can build within the budget
09:14 - by budget i mean not just money but also
09:17 - time
09:18 - and your approach to you know the
09:20 - software development really depends on
09:22 - these so many factors that are
09:24 - outside the paradigm of just coding and
09:27 - i wish that i was better at that
09:29 - now after six or seven years after
09:30 - working with many clients i will
09:32 - sometimes
09:33 - flat out say no to some clients
09:35 - sometimes i'll tell them no this cannot
09:37 - be done
09:38 - within your budget or sometimes i'll
09:40 - tell them this is what you're going to
09:42 - get for this amount of money or this
09:43 - amount of time
09:44 - and this ability to set realistic
09:47 - expectations with client
09:48 - talk to them consult them on not just
09:52 - the programming side but also the
09:53 - business side of their idea
09:54 - is something that i learned over time
09:56 - and i wish if i was better at these
09:58 - things
09:58 - in the early stages of my career maybe
10:01 - you know it life would have been much
10:02 - easier for me maybe
10:04 - i would have been able to help my
10:05 - clients much better than
10:07 - i am i was able to do before another
10:10 - thing i wish
10:10 - i was good at before or i knew before
10:14 - was
10:14 - the importance of building relationships
10:17 - and building your networks
10:18 - there's a lot of focus on this public
10:22 - networking side of it so people say you
10:24 - should go to meetups people should
10:25 - say you should go to events yes all
10:28 - these
10:29 - do help in fact i myself was very active
10:32 - in
10:32 - organizing meetups when i was in early
10:34 - stage of my career and when i came back
10:36 - to nepal
10:37 - but now uh there's i also see this other
10:40 - aspect of networking which is a private
10:42 - networking what do i mean by that
10:44 - well what i mean by that is you know
10:47 - building on the relationship that you
10:49 - already have with your peers
10:51 - an example for instance could be say
10:53 - you're in college still in college and
10:56 - you're trying to learn programming or
10:58 - you're interested in say machine
10:59 - learning or competitive programming or
11:01 - some or cyber security some aspect of
11:03 - that
11:03 - now what you could do is you could start
11:05 - a cyber security club in your college or
11:07 - you could start
11:08 - a machine learning enthusiast group on
11:12 - a messaging platform like telegram or
11:14 - whatsapp
11:15 - but that is not enough because then you
11:18 - know you might get lost now what i wish
11:20 - i
11:20 - had done before is what i do now
11:24 - is i also set some discipline that you
11:27 - know this group
11:28 - or four or five people for example who
11:30 - are interested in cyber security
11:32 - we will meet once a week or once a month
11:34 - and do some activity related to the
11:36 - field that i'm that we're all interested
11:38 - in for instance right now i have a
11:40 - group of bloggers uh or content creators
11:43 - who meet on the last saturday every
11:45 - month and on that date
11:47 - we discuss you know ideas we discuss new
11:50 - concepts we discuss what's happening in
11:52 - the industry
11:53 - and that is an aspect of networking that
11:55 - i did not know existed so
11:58 - this private networking and public
11:59 - networking both are equally important
12:01 - you have to be active on sites like
12:04 - linkedin you have to share
12:05 - your work on github you have to you know
12:08 - interact with other people who are doing
12:10 - good work
12:11 - you have to support others and you have
12:12 - to also ask for help when you're stuck
12:14 - another thing i wish i knew was the
12:16 - importance of writing
12:18 - clean and maintainable code before when
12:21 - i was not a professional software
12:22 - developer
12:23 - i was the only right person who was
12:25 - writing a piece of code and maintaining
12:27 - it
12:27 - and i you know underestimated
12:30 - the amount of effort that would go into
12:33 - making sure that
12:34 - the code you write today survives for
12:36 - years and years
12:38 - because once you write get into this
12:41 - habit of writing in unmaintainable code
12:43 - that is a habit that can uh really
12:46 - take over you and that can be a habit
12:48 - that is very
12:50 - hard to get rid of so because people
12:52 - spend a lot more time reading code than
12:54 - writing code
12:55 - and as a professional developer i have
12:57 - spent much
12:59 - more time reading other people's code
13:00 - fixing other people's code maintaining
13:02 - other people's code than writing my own
13:04 - code
13:05 - that is sort of a myth i had in college
13:07 - or when i was not a software developer
13:09 - i had this image of a software developer
13:11 - really creating things from scratch
13:13 - always building new things and that is i
13:16 - realized that that's not the case
13:18 - so for your own sanity and for the
13:20 - sanity of other people who are going to
13:22 - be reading your code
13:23 - make sure that your code is very clean
13:25 - very maintainable
13:26 - variable names are good function names
13:28 - are good you divide your code into
13:30 - modules and packages
13:32 - another thing that i used to do that i
13:34 - wish i did less of
13:35 - was using clever tricks in my code so
13:38 - um especially when you know you are the
13:41 - only person maintaining code you want to
13:43 - be very clever you want to
13:45 - use mathematical tricks in your code or
13:47 - shortcuts in your code to do things
13:48 - in a creative way and while that
13:51 - creativity might be useful in some
13:53 - fields like
13:54 - competitive programming where you know
13:55 - or there's also some
13:57 - sort of competitions where you are
14:00 - challenged to write some piece of code
14:01 - in
14:02 - in the less least number of characters
14:05 - except those few exceptions it's always
14:08 - good to write code that is clear to read
14:11 - and
14:12 - that is that this clearly describes
14:16 - what it is doing without being too
14:18 - tricky because a lot of people are going
14:19 - to be reading your code and if they
14:21 - confuse if they get confused
14:22 - then they are going to waste a lot of
14:24 - time so
14:26 - one thing that i wish i did less of or i
14:29 - wish i told i could have told myself is
14:31 - don't use too many tricks your code is
14:33 - going to be read by a lot of people
14:35 - a lot of people are going to be working
14:36 - on your code in the future so
14:38 - don't use tricks make your code as
14:40 - readable or as easy to read as possible
14:43 - another thing i wish i knew was there's
14:46 - a lot of maintenance work to be done in
14:48 - software
14:49 - so i talked about this before as well
14:51 - the image that i have
14:52 - i had of software development was
14:54 - starting you know writing always writing
14:56 - code always writing code
14:58 - but after i came into the industry i
15:00 - realized that
15:01 - i had to work on a lot of legacy systems
15:03 - i had to work
15:04 - with programming languages that were not
15:06 - popular
15:08 - at that time and that was like you know
15:10 - 10 years back they were popular
15:12 - but in hindsight i think it was a good
15:15 - experience
15:16 - i'll tell you one exact experience i had
15:18 - so there was this
15:20 - old legacy code and the brief that i got
15:23 - was
15:24 - the design guidelines or the other
15:25 - guidelines followed in this code are not
15:27 - up to the standards of the company
15:29 - so uh these guidelines were some of them
15:31 - about how comments were written some of
15:33 - them
15:33 - were about how strings were converted to
15:36 - integers or floats
15:37 - so little things that you know the
15:39 - guidelines were not being followed and i
15:40 - had to make sure that all those code
15:43 - followed the guidelines now imagine
15:45 - having to do that for
15:46 - thousands and thousands of lines of code
15:48 - and across hundreds and hundreds of
15:50 - files
15:50 - and it was not obviously exciting work
15:54 - but then i
15:54 - i turned it into a challenge so i wrote
15:57 - my own regular expressions to detect
15:58 - places where
15:59 - there were comments that were based on
16:01 - the old guidelines and
16:03 - i i while doing that work i also made a
16:06 - presentation about how i was doing that
16:08 - i was sending those presentations to my
16:09 - manager
16:10 - in fact after i had done done that work
16:12 - my manager was so
16:14 - impressed with the fact that i was so
16:16 - enthusiastic even with when working with
16:18 - legacy code or fixing legacy code
16:20 - that he put me in a more ambitious
16:22 - project
16:23 - so this will happen to you as well you
16:25 - will sometimes get a legacy
16:27 - piece of code or you'll have to maintain
16:29 - some code that
16:30 - that is not very exciting but you have
16:32 - to find the challenge in it as well
16:34 - now the things i mentioned right now are
16:36 - not the only things i wish
16:37 - because uh again i'm not you know a
16:40 - master at programming or i'm not one of
16:43 - the best programmers in the world but
16:45 - even even in with so little experience
16:49 - i i feel i've learned so much and that
16:52 - is the reason why this video is so long
16:54 - and i wish somebody had prepared this
16:57 - video for me
16:58 - when i was fresh out of college or
16:59 - someone would have told me these things
17:02 - that way probably i would not have had
17:04 - to struggle so much with so many of the
17:06 - things that i had to struggle with
17:07 - stay curious and i'll see you in the
17:09 - next one
17:19 - you