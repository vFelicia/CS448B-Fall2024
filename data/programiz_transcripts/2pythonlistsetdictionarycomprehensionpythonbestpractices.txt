00:00 - there are different compound data types
00:01 - in python like lists
00:03 - sets and dictionaries in this video we
00:05 - will learn to use list
00:06 - set and dictionary comprehension in
00:08 - python with the help of examples
00:10 - these comprehensions will allow you to
00:12 - create lists sets and dictionaries in a
00:14 - more elegant and pythonic way
00:16 - using a single line expression
00:18 - [Music]
00:24 - before we learn about list comprehension
00:26 - let's first understand
00:28 - why it is used suppose we have to create
00:30 - a list of the first five powers of two
00:32 - for this we would normally use a for
00:34 - loop and append every item to the list
00:36 - let me show you what i mean so i'll go
00:38 - to my text editor and here
00:40 - i'll start with an empty list i'll say
00:42 - numbers equals
00:44 - an empty list now i'll use a for loop to
00:46 - loop from one to five
00:48 - i'll also use the append method to add
00:50 - elements to the end of the numbers list
00:52 - so here i'll say for i in range
00:56 - one 2 6 and then inside this for loop
01:00 - i'll say numbers
01:02 - dot append 2
01:05 - to the power of i then i'll print the
01:09 - numbers list
01:10 - so here i'll say print numbers and now
01:13 - when i run this program
01:15 - then verified i got the first five
01:17 - powers of two
01:19 - now wouldn't it be awesome if you could
01:21 - do the same task in a single line
01:23 - list comprehension allows you to do
01:24 - exactly that let me show you how
01:27 - i'll go back to my code editor and let
01:29 - me start by commenting out this old code
01:31 - and here i'll just write one line which
01:34 - is
01:35 - numbers equals 2
01:38 - to the power of i now what is i
01:42 - let me add a for loop in the same line
01:44 - so here
01:45 - i'll see for i in
01:49 - range 1 to 6 i'll run this code
01:55 - and as you can see i get the same output
01:57 - as before
02:00 - this code is much more elegant and
02:01 - simpler than before and it almost feels
02:04 - like you're reading english
02:05 - let me read this code out so that you
02:07 - can decide for yourself
02:08 - why it works create a numbers list
02:12 - with elements in the form of 2 to the
02:15 - power i
02:16 - where i takes values from 1 to 5.
02:20 - this results in the list of first five
02:22 - powers of two
02:26 - list comprehensions can also have an
02:28 - optional if conditional along with a for
02:30 - loop
02:30 - let me give you an example suppose we
02:32 - have a list like this so i'll say
02:34 - numbers
02:34 - equals 49
02:37 - 64 81
02:41 - 100 and 121
02:44 - and we want to create a new list that
02:47 - contains the square root of
02:48 - all the even numbers from this list for
02:50 - this i will first import the math module
02:52 - to use the sqrt function
02:55 - so here i'll move this down and i'll say
02:57 - import
02:58 - m a t h math then i'll create a new list
03:02 - called new underscore list
03:04 - so here i'll say new
03:07 - underscore list and let me start with
03:10 - the list comprehension
03:11 - so here i'll say math dot sqrt
03:16 - n and then i'll say for n
03:19 - in numbers now let me print this new
03:22 - list
03:23 - i'll say print new underscore list
03:28 - let me press run button and you can see
03:31 - that i got the square root of all the
03:33 - numbers
03:33 - but that's not exactly what i wanted i
03:36 - want to add
03:37 - i want to get the square roots of only
03:39 - the even numbers so i'll simply add an
03:41 - if statement
03:42 - right at the end so here i'll say if
03:46 - n modulus 2 equals equals
03:50 - 0 because if the remainder when divided
03:52 - by 2 is 0 then the number is definitely
03:54 - even
03:55 - and now when i press run then you can
03:58 - see
03:58 - that i got the square roots of only the
04:01 - even numbers from this list
04:04 - list comprehensions work like magic
04:05 - don't they
04:08 - we can have more than one for loop in
04:10 - list comprehension
04:11 - let me show you an example suppose we
04:13 - have the following code
04:14 - so team one has janet
04:19 - arya and mary
04:23 - similarly team two has
04:27 - even jake
04:31 - and randy here team one and team two
04:33 - contain members of two teams
04:35 - suppose we want to map each element of
04:37 - team one to that of team two
04:38 - and create a new list for this we can
04:41 - use multiple for loops
04:43 - so here i'll say new underscore
04:46 - list equals to now this will be a list
04:49 - of tuples
04:50 - so x y now i need to define what x and y
04:52 - are
04:53 - so x is uh whatever is in
04:57 - team 1 and similarly y is in
05:00 - whatever is in team 2 now let me print
05:03 - this new list
05:05 - print new underscore
05:08 - list let me run this code
05:12 - now let's try to understand what's going
05:13 - on here we have defined new list
05:17 - which will have elements in the form of
05:19 - a tuple
05:20 - which will contain two elements x and y
05:24 - we do this for all values of x in team
05:26 - one that
05:27 - is for janet arya and mary
05:30 - similarly for each of the values in x we
05:33 - also have
05:34 - y that takes values from team 2 that
05:38 - include even jake and randy
05:42 - now these two codes are equivalent but
05:44 - using list comprehension makes our code
05:46 - much more concise
05:47 - we can also write nested list
05:49 - comprehensions it means that we can use
05:51 - a list comprehension
05:52 - inside another list comprehension to
05:54 - give this video short and to the point
05:56 - i will not discuss listed list
05:58 - comprehensions in this video if you want
06:00 - to learn about them
06:01 - you can always visit our article on
06:02 - programming.com and leave the link in
06:04 - the description below
06:06 - remember we generally write list
06:07 - compressions to simplify our code
06:09 - and make it easier to read so avoid
06:11 - using list comprehensions
06:12 - when you have complex and long nested
06:15 - for loops
06:16 - by the way if you're finding this video
06:18 - useful a sub to the channel
06:20 - would be much appreciated before moving
06:22 - to the next section of the video
06:23 - the programs team has created an app
06:25 - that allows you to learn python from
06:26 - your phone
06:27 - the app contains bit size lessons that
06:29 - are easier to understand a built-in
06:30 - interpreter so that you can run python
06:32 - on your phone
06:33 - quizzes and many more features the app
06:35 - is available on both ios and android
06:38 - the links are in the video description
06:42 - we can also use set comprehensions in
06:44 - python to create sets quickly and
06:45 - concisely
06:46 - its syntax is similar to that of list
06:48 - comprehension but we use curly braces
06:51 - instead of square brackets
06:52 - let me show you an example of set
06:54 - comprehension suppose we have a string
06:56 - like this so i can say word
06:58 - equals equals
07:02 - programming and let's try to use set
07:04 - comprehension to get the unique
07:05 - alphabets in this word
07:07 - so here i'll say alphabets
07:12 - equals square bracket x for
07:15 - x in word
07:18 - now let me print the alphabet set so
07:20 - here i'll say print
07:23 - alpha bits and now let's see when what
07:27 - happens when i run this code
07:28 - so i'll press run and as you can see i
07:31 - got all the alphabets in programming
07:33 - but they are not repeated since sets
07:35 - don't repeat elements
07:40 - similar to list and set comprehension
07:42 - dictionary comprehension is an elegant
07:44 - and concise way to create dictionaries
07:46 - in python
07:46 - let me give you an example suppose we
07:49 - have a list like this
07:50 - so numbers equals 1 comma 2 comma 3
07:54 - comma 4 comma 5
07:57 - let's create a dictionary that maps
07:58 - elements from this numbers list
08:00 - to its square value so i'll say square
08:04 - underscore dictionary equals
08:07 - now i'll start with an empty dictionary
08:09 - and then i'll say for
08:10 - num in numbers now i can say square
08:15 - underscore dictionary and then the key
08:18 - will be obviously num
08:20 - equals num to the power of 2.
08:24 - next i can print the square underscore
08:26 - dictionary so print
08:28 - square and square underscore dict
08:31 - and when i press run then i get a
08:34 - dictionary
08:35 - having the numbers in the key and the
08:38 - square values
08:39 - in the values now let's try doing the
08:42 - same task using a dictionary
08:44 - comprehension
08:44 - i'll go back to my code editor and
08:46 - comment the old code
08:50 - then i'll directly define square
08:52 - underscore dictionary with the key num
08:54 - and the value as num to the power 2.
08:57 - so here i'll say square
09:01 - underscore dictionary equals
09:04 - the key being num and the
09:08 - value being num to the power 2
09:11 - and then because i want to do this for
09:13 - each number in the numbers list
09:15 - so i can say for num in
09:19 - numbers i'll close the curly braces and
09:22 - when i press run
09:24 - i get the same output as before
09:27 - let's try one more example suppose we
09:29 - have a dictionary that looks like this
09:31 - and we need to construct a new
09:32 - dictionary with new prices
09:34 - by increasing the price of items by 50
09:37 - for those that are more than
09:38 - two dollars i will now use dictionary
09:41 - comprehension to do this task
09:43 - in one single expression so here i can
09:46 - say
09:46 - new underscore price equals and then
09:50 - i'll need a key and a value now value
09:53 - will be value obviously times 1.5
09:57 - if value is greater than 2 otherwise
10:01 - just the value the old value for
10:04 - key value
10:07 - in old underscore price dot
10:12 - dot items that's how you get the items
10:14 - of a dictionary
10:15 - and then i'll close the square bracket
10:17 - or curly bracket
10:18 - and let's see what happens when i print
10:20 - the new price
10:24 - i'll press run and you can see
10:28 - that the prices of the items that whose
10:31 - values
10:32 - were more than 2 have been increased by
10:34 - 50 percent
10:35 - but the price of milk is still the same
10:40 - these two pieces of code are the same
10:46 - that's it for this video if you want to
10:48 - revise these concepts you can find all
10:50 - these programs in our github repository
10:52 - i'll also put this link in the video
10:53 - description and if you like this video
10:55 - hit that like button and subscribe to
10:57 - the channel and i'll see you in the next
10:59 - one
10:59 - happy programming