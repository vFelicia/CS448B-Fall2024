00:00 - what's up guys i'm punish from
00:01 - programmers and welcome back to this
00:02 - series on javascript in this video we
00:05 - will learn about the break and continue
00:06 - statements and use them with loops to
00:08 - change the normal flow of a loop so
00:10 - let's get started
00:15 - in programming the break statement
00:17 - immediately terminates the loop when it
00:19 - is encountered before we move forward
00:21 - let's see the working of a for loop
00:23 - first here i'll use the for loop code to
00:26 - loop over and display the value of i in
00:28 - each iteration for 5 iterations so i can
00:30 - say 4
00:31 - let i equals 1
00:34 - i less than equals 5
00:37 - and i plus plus
00:39 - and inside i'll just say console log i
00:43 - let me run this program
00:45 - and as you can see i got the numbers
00:47 - from 1 to 5.
00:50 - now let me add a break statement inside
00:52 - the loop i'll add it after the print
00:53 - statement so i can say
00:56 - break and now let me run this program
00:59 - again
01:01 - this time i only get one as output let's
01:05 - see what happened here during the first
01:07 - iteration the value of i is one which is
01:10 - printed by this console log
01:12 - then the break statement is executed and
01:15 - it immediately terminates the loop to
01:17 - see this clearly let me add another
01:19 - print statement after the break
01:21 - so here i'll say console.log
01:25 - after break
01:27 - now when i press run
01:29 - i get the same output as before because
01:32 - the break statement terminates the loop
01:33 - immediately anything after it is never
01:36 - executed
01:38 - generally the break statement is used
01:39 - with conditional statements that way we
01:42 - can break the loop only under certain
01:43 - conditions let's see an example i'll use
01:46 - the same code here i'll remove the break
01:48 - statement and the second print statement
01:51 - so i'll remove these two
01:54 - and
01:55 - before the console log let me say
01:57 - something like if
01:59 - i
02:00 - equals 3
02:03 - break
02:04 - let me run this code
02:08 - and you can see that 1 and 2 are printed
02:11 - for the first iteration the value of i
02:13 - is 1.
02:15 - since 1 less than equals to 5 is true
02:18 - i get inside the body of the for loop
02:20 - now since 1 is not equal to true we skip
02:23 - this if and 1 is printed by the console
02:26 - log that we can see here in the next
02:28 - iteration i is increased to 2 and since
02:31 - 2 less than or equals to 5 is true i go
02:34 - inside the body of the for loop
02:36 - now since 2 is not 3 this break is not
02:39 - executed and the console log prints 2.
02:42 - now in the next iteration when i is 3
02:45 - 3 is 3 is true or 3 equals 3 is true
02:49 - and break is executed that means no
02:52 - statements after this will be executed
02:54 - and we get outside the loop and that's
02:56 - why 3 was never printed here
03:01 - let us see an example of a break
03:03 - statement with the while loop i'll
03:04 - create a program that will ask input
03:06 - values from the user if the user enters
03:08 - a positive number i'll print the number
03:10 - and ask for another number this process
03:13 - will continue until the user enters a
03:15 - negative number when the user enters a
03:17 - negative number i will just terminate
03:19 - the while loop
03:20 - since i want to terminate the loop with
03:22 - the break statement let me start with a
03:24 - while loop that is always true so let me
03:26 - remove this old code and i'll say while
03:29 - true
03:31 - here the condition of the loop is true
03:33 - which means unless a break statement is
03:36 - encountered the loop will keep running
03:39 - now inside this loop i'll accept a
03:41 - number from the user so let number
03:43 - equals
03:45 - parse float
03:49 - and then prompt
03:51 - i think i screwed up the spelling of
03:53 - float yup
03:55 - prompt
03:56 - enter a
03:58 - number and then i'll use an if statement
04:01 - to check if the number is less than 0
04:03 - and inside the statement i'll execute
04:05 - the break statement
04:07 - so here i can say if
04:09 - number less than 0
04:13 - then break this means that the loop is
04:15 - terminated if the input value is
04:17 - negative
04:18 - i'll then add a print statement to print
04:20 - the input value so outside the if i can
04:23 - say console
04:25 - dot log
04:27 - number
04:29 - let me run this code
04:32 - and i'll enter something like 5
04:34 - when i press enter
04:36 - 5 is successfully printed let me try
04:38 - something like 9
04:40 - and you can see that 9 is also printed
04:42 - now let me enter a negative number like
04:44 - -4
04:46 - and you can see that the program ended
04:49 - because the loop is now terminated let's
04:51 - go into detail to see what's happening
04:53 - with the code here i've created a while
04:55 - loop that is always true
04:57 - now in the first iteration i entered 5
05:00 - so number has the value 5
05:03 - since 5 less than 0 is false this break
05:06 - is not executed and the number is
05:08 - printed in the next iteration i entered
05:11 - 9 so number is 9 and 9 less than 0 is
05:15 - again false so the break statement is
05:17 - never executed and console log number
05:19 - prints 9.
05:21 - in the third iteration however i entered
05:23 - minus 4 and since -4 less than 0 is true
05:26 - we encountered the break statement and
05:28 - the loop ended there and then
05:31 - if you're enjoying this video please
05:33 - also check out programs pro where we
05:35 - provide tutorials along with quizzes and
05:37 - challenges which will help you practice
05:39 - and test your learning in real time also
05:41 - the course includes projects to give you
05:42 - an awesome experience of how programming
05:44 - works in the real world and for our
05:46 - youtube subscribers we are giving 50 off
05:48 - on the yearly plan sign up by scanning
05:50 - this qr code or use the link in the
05:51 - video description to claim your discount
05:55 - now let's move to the continue statement
05:57 - unlike break the continue statement
05:59 - doesn't terminate the loop it only skips
06:01 - the current iteration of the loop and
06:03 - starts the loop from the next iteration
06:05 - let's see an example
06:07 - on my screen you can see a previous code
06:09 - i used to demonstrate the break
06:11 - statement if the value of i is 3 then we
06:13 - break out of the loop
06:15 - let me replace the break with a continue
06:17 - statement so i'll say continue
06:20 - and then run the code
06:25 - you can see that instead of breaking out
06:26 - of the code only three is skipped from
06:29 - this loop
06:30 - let's try to understand what happened
06:32 - here and why 3 was not printed during
06:34 - the first iteration the value of the
06:36 - variable i was 1
06:38 - now i 1 less than 5 is ok and we go
06:41 - inside the body of the loop and since 1
06:43 - is not equals 3 we don't go to the
06:45 - continue statement so console.log
06:48 - i printed one similarly in the second
06:51 - iteration i is now two this is skipped
06:54 - and console log i prints two
06:57 - now things get interesting when i is
06:59 - three
07:00 - so when i is
07:01 - 3 equals 3 is true
07:03 - and we encounter the continue statement
07:06 - the continue statement does not allow
07:08 - anything else to execute inside the for
07:10 - loop and takes me directly to the update
07:12 - expression with which increases the
07:14 - value of i to 4
07:15 - so 4 and 5 get printed and when i become
07:18 - 6 we exit out of the loop
07:21 - okay guys we need your support to keep
07:23 - these types of content free for all
07:24 - users youtube really likes engagement on
07:26 - the video so leave a comment below press
07:28 - that like button and hit subscribe if
07:30 - you haven't already let's get the
07:32 - engagement score high up so that more
07:33 - people can discover and enjoy these
07:35 - courses
07:38 - we now know the working of break and
07:40 - continue let's use them together in a
07:42 - single loop i will create a program that
07:44 - asks an input value from the user
07:46 - however i want users to input only
07:49 - positive values so when a user inputs a
07:51 - negative value or 0 i'll end the loop
07:54 - also to make the program more
07:55 - interesting i will only print the number
07:58 - if it's even so if the user inputs an
08:01 - odd number i will use the continue
08:02 - statement so that odd values are not
08:04 - printed let's get started so i hope you
08:06 - remember this quote from our earlier
08:08 - program here the break statement is
08:10 - already executed and it breaks the loop
08:13 - or ends the loop if the input value is
08:15 - negative
08:16 - since i only want to print even numbers
08:18 - i'll need to use the continue statement
08:20 - if the number is odd so let me add an if
08:23 - statement here i'll say if number
08:27 - modulo
08:29 - 2
08:30 - not equals 0
08:34 - continue
08:36 - here the modulo operator returns the
08:38 - remainder when number is divided by 2.
08:41 - if this remainder is equal 0 then it's
08:44 - an even number so since i want to find
08:46 - odd numbers i'll say not equals to 0.
08:49 - this condition then tells me if the
08:51 - number is odd or not
08:53 - if the number is odd then i just want to
08:55 - continue i don't want to print the
08:57 - number at all let's run this code
09:02 - i'll enter something like 4 and when i
09:03 - press enter you can see that 4 got
09:06 - printed now let me enter an odd number
09:08 - like 9
09:10 - and you can see that nothing got printed
09:12 - that means my continue is working
09:14 - now let me again enter an even number
09:16 - like 28
09:18 - and it's getting printed fine now let's
09:21 - break out of the loop by doing a
09:22 - negative number like minus 34
09:25 - and when i press enter you can see that
09:27 - i broke out of the loop
09:29 - here you can see when the input value is
09:31 - odd the condition number modulo 2 not to
09:35 - 0 make sure that this console log is not
09:37 - executed but i still keep on going with
09:40 - the loop because the continue statement
09:42 - does not break me out of the loop but
09:44 - just helps me go to the next iteration
09:46 - while skipping the rest of the loop
09:48 - similarly when the input value is
09:50 - negative the condition number less than
09:53 - 0 breaks out of the loop
09:55 - however when the input is a positive
09:58 - even number
09:59 - both of these conditions number less
10:01 - than 0 and number modulo 2 not equals to
10:04 - 0 are false the flow of the program goes
10:06 - to console log number and that's why 4
10:09 - and 28 were printed on the screen
10:15 - now to practice what we've learnt here's
10:16 - a programming task for you can you
10:18 - create a program that takes the input
10:20 - from the user if the user enters a
10:22 - single digit number print the number if
10:24 - the user enters a negative or double
10:26 - digit number ask the user for another
10:28 - number and if the user enters a number
10:30 - greater than 100 terminate the loop
10:32 - you'll find the answer to this question
10:34 - in our github repository also if you
10:36 - want to revise these concepts you can
10:38 - find all these programs in our github
10:39 - repository i'll put the link in the
10:41 - video description below
10:42 - now that we have reached the end of this
10:44 - video it's time for the programmers quiz
10:46 - which of the following keywords is used
10:48 - to terminate a loop
10:50 - terminate break continue
10:53 - loop commit answer below happy
10:55 - programming
10:59 - [Music]
11:05 - you