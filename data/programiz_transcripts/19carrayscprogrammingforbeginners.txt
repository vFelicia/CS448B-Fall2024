00:00 - what's up guys welcome back to this
00:01 - series and c programming in this video
00:03 - we'll learn about arrays in c so far we
00:06 - have been using single variables to
00:08 - store a single data now we will learn to
00:10 - store multiple data together inside a
00:13 - single variable using an array so let's
00:15 - get started
00:20 - an array is a collection of similar type
00:22 - of data before we learn about array in c
00:25 - let's first know why we need them
00:27 - suppose you need to store the a's of
00:29 - hundred people one way to solve this is
00:32 - to create hundreds of variables to store
00:34 - the a's of each individual however that
00:37 - will be a lengthy and tedious task
00:39 - instead what we can do is create a
00:42 - single array and store the a's of
00:44 - hundred people together
00:45 - you got that right
00:47 - now let's see how we can declare an
00:49 - array in c programming on your screen
00:52 - you can see the syntax for array
00:53 - declaration
00:55 - here data type means the type of data
00:57 - that will be stored inside the array for
01:00 - example if data type is in all the
01:03 - elements will be of in type
01:05 - arrow name is an identifier that will be
01:08 - used to identify the array and add size
01:11 - specifies the number of elements that
01:14 - can be stored inside the array let's see
01:16 - an example i'll type int because i want
01:19 - to store into the data and i'll call my
01:22 - array is
01:24 - and since i want to store the a's of 5
01:27 - people
01:29 - i have written 5 inside the square
01:31 - bracket
01:32 - in the c programming we cannot change
01:34 - the size and the data type of an array
01:38 - once it is declared so now the data type
01:40 - of is will be int and it can only store
01:44 - 5 values
01:47 - now that we know how to create an array
01:49 - let's learn to store data in it i'll go
01:52 - back to my code editor here you can see
01:54 - the code from earlier i don't need the
01:57 - syntax anymore so i'll just remove this
02:00 - so now let's continue with this code
02:02 - similar to assigning values to a
02:04 - variable we use equal to operator to
02:07 - assign data to an array now i'll assign
02:09 - 5 values 21
02:12 - 29
02:14 - 25
02:15 - 32 and 17.
02:18 - these value inside the curly brackets
02:20 - are called array elements we can also
02:22 - omit the size of the array
02:25 - for that i'll remove this
02:27 - in this case the c compiler
02:29 - automatically determines the size of the
02:31 - array by counting the number of elements
02:33 - inside the curly bracket
02:35 - another thing we can do is assign less
02:38 - number of element than the declared
02:40 - length for example
02:42 - here i'll add five inside the square
02:45 - bracket and i'll remove these two
02:48 - elements from the curly bracket you can
02:50 - see the length of array is five however
02:54 - we are assigning only three values to
02:56 - this here the remaining two positions
02:59 - are filled with the default value in our
03:01 - case the fourth and fifth position will
03:03 - be zero
03:06 - now we know how to assign value to an
03:08 - array let's learn to access them but
03:10 - first let's learn about the array index
03:13 - in c programming each element of array
03:15 - is associated with a number this number
03:18 - specifies the position of an array
03:20 - element inside an array and is known as
03:23 - r index and array index starts with 0 so
03:26 - the first element of the array is
03:28 - present at index 0. similarly the second
03:31 - element is present at 1 and so on we use
03:35 - the array index to access our element
03:37 - let me show you here we have our array
03:39 - from our earlier program now let me
03:41 - complete this program
03:43 - so hash include
03:46 - stdio.h
03:50 - int
03:52 - int main
03:54 - and inside the curly bracket
03:58 - return zero this is the basic structure
04:01 - of c program so i'll cut this
04:04 - and put it here
04:09 - now to access an error element we use
04:11 - the add name and the array index inside
04:13 - the square bracket so to access the
04:16 - first element of this array we use is
04:19 - square bracket 0.
04:21 - let me use this and print
04:23 - the first
04:25 - element so percent d comma
04:28 - is square bracket with the index 0
04:32 - and i'll run this
04:35 - as you can see 21 is printed on the
04:37 - screen
04:38 - similarly we can access second third
04:41 - fourth and fifth element by using array
04:44 - indices one two three and four
04:46 - respectively
04:48 - now what i'll do is i'll copy this
04:51 - and i'll paste it here
04:55 - and i'll change
04:56 - the index
04:57 - value
04:58 - from 0 to 1
05:01 - 2
05:02 - 3
05:03 - and 4
05:05 - and i'll run this
05:07 - here you can see all elements are
05:09 - accessed
05:10 - by the way if you are watching this
05:12 - there is a good chance you want to
05:14 - improve your skills in c programming
05:16 - lucky for you we have a mobile app that
05:18 - provides a well-structured c programming
05:20 - course with certification at the end and
05:22 - you can use the app alongside the video
05:24 - to practice on the built-in compiler our
05:27 - course is free so download now by
05:29 - scanning this qr code or click the link
05:31 - in the video description
05:35 - earlier we learned to assign multiple
05:38 - values to an array during the
05:39 - declaration we can also assign values
05:42 - individually using the index number
05:44 - let's see how we can do that on your
05:47 - screen you can see the earlier code
05:49 - here we have assigned all five values
05:52 - during the declaration since i want to
05:54 - assign values individually i'll remove
05:56 - this assignment
05:59 - now i can assign values individually
06:01 - using the index number so to assign the
06:04 - first value i can write is square
06:07 - bracket inside the bracket zero index is
06:10 - equals to
06:12 - 21.
06:13 - similarly i can assign a second value at
06:16 - the index one so is
06:19 - inside the bracket
06:20 - 1 and i'll assign
06:22 - value 29 to this
06:25 - in this way each value can be assigned
06:27 - to a particular index
06:29 - so i'll continue on this
06:34 - i'll run this code
06:36 - as you can see each value is assigned to
06:39 - the array here this acts as a variable
06:42 - so we can take input from the user and
06:44 - assign to it let's see an example i'll
06:48 - remove these assignments
06:50 - now i'll ask the user for five input
06:52 - value so i'll use print statement and
06:55 - i'll ask the user
06:57 - to enter
06:58 - five input
07:00 - values
07:05 - and i'll use scanf to store the input
07:08 - values so scanf bracket inside quotation
07:12 - percent d comma ampersand is square
07:15 - bracket
07:17 - inside the bracket 0 index
07:19 - and scanf
07:22 - percent d comma ampersand is
07:26 - square bracket inside the bracket 1.
07:37 - here you can see i have used print
07:39 - statements to print the values now i'll
07:42 - run this code
07:44 - and i'll enter
07:46 - 21
07:47 - 29 25 32 and 17.
07:53 - as you can see the input values are now
07:55 - stored inside the array
07:59 - we can also change the value of an array
08:02 - element for this we can simply assign a
08:04 - new value to a particular array index
08:07 - let's see an example
08:08 - i'll use the same code from earlier here
08:11 - i'll remove these print statements
08:16 - now suppose i want to change this third
08:18 - value to 26 from 25 here i can simply
08:22 - assign a new value to the position 2 so
08:25 - i will do
08:27 - is
08:28 - square bracket inside the bracket 2
08:31 - is equals to 26
08:34 - and i'll print this
08:36 - so percent d
08:38 - comma
08:39 - is square bracket inside the bracket 2
08:44 - and i'll run this
08:47 - you can see
08:48 - the value at index 2 is 26
08:52 - okay guys we need your support to keep
08:54 - these types of content free for all
08:56 - users youtube really likes engagement on
08:58 - the video so leave a comment below press
09:00 - that like button and hit subscribe if
09:02 - you haven't already let's get the
09:04 - engagement score high up so that more
09:05 - people can discover and enjoy these
09:07 - courses
09:11 - in this example we have used
09:13 - five different scanf statement to take
09:16 - five input values of an array also we
09:19 - have used five different print statement
09:22 - to print values of the adding here
09:24 - instead of writing the same code again
09:27 - and again i can simply use a loop i can
09:30 - use one loop to take the input values
09:32 - and second loop to print the values i'll
09:35 - first add a for loop
09:39 - as we know array index starts from 0 so
09:42 - int i is equals to 0
09:47 - so we have started our loop from i is
09:50 - equals to 0 and
09:52 - since the array can store 5 elements so
09:55 - i is less than 5
09:58 - and we have this update expression
10:01 - that increases the value of i in each
10:04 - direction by 1.
10:05 - now inside the loop i'll add scan if
10:08 - statement
10:09 - and
10:11 - i'll use
10:13 - ampersand
10:14 - is with the square bracket inside the
10:16 - bracket we have i
10:19 - here you can see each input values is
10:22 - stored in a sequential index from 0 to
10:25 - 4. that's why inside the for loop
10:28 - we have used index i
10:30 - along with the is in the scanf statement
10:34 - in each iteration of the loop the value
10:37 - of i is increased by 1 and input value
10:39 - is stored sequentially now i can remove
10:42 - this message and these scanf statements
10:46 - similarly i can use for loop to print
10:48 - the r elements so
10:50 - for
10:52 - int i is equals to 0
10:55 - i is less than 5
10:58 - and
11:01 - now inside the for loop
11:03 - i'll use printf statement
11:06 - percent d
11:08 - comma is with the square bracket inside
11:11 - the bracket i
11:14 - and i'll remove these prints
11:16 - statements
11:19 - i'll run this program and i'll enter 21
11:22 - 11
11:24 - 14 16 and
11:26 - 17.
11:28 - here you can see we get the desired
11:30 - output
11:33 - let me show you something interesting in
11:36 - this code here i'll change the condition
11:39 - from i less than 5 to i less than 6
11:43 - and i'll run this code
11:45 - and i'll enter
11:46 - 12
11:48 - 13
11:49 - 14 15 and 16.
11:52 - you can see a random number
11:55 - so what happens here well we have
11:57 - created the array to store only five
11:59 - elements now we can access array
12:01 - elements from index 0 to index 4 however
12:05 - our for loop runs from i is equals to 0
12:08 - to 5 so when the value of i becomes 5
12:11 - the element is square bracket 5 does not
12:14 - exist
12:15 - as a result we get an unexpected value
12:19 - sometimes we can also get an error due
12:21 - to this so we should never try to access
12:24 - element of an array outside of its bound
12:27 - or length
12:30 - now to revise what we have learned in
12:32 - this video here is a programming tags
12:34 - for you create a program that computes
12:36 - the average marks of a student for this
12:39 - create an array that stores the marks of
12:41 - 5 subject compute the total marks by
12:44 - adding all the marks divide the total
12:46 - marks by total number to the subject and
12:48 - print the average marks you can find the
12:51 - answer to this question in our github
12:53 - repository and also if you want to
12:55 - revise this concept all this program in
12:58 - this video will be present in there the
13:00 - link is in the video description below
13:02 - now that we have reached the end of this
13:04 - video it's time for programming squeeze
13:07 - which value will we get when we print
13:09 - norm square bracket 4 from the following
13:12 - array
13:13 - comment your answer below see you in the
13:14 - next video happy programming
13:20 - [Music]
13:26 - you