00:00 - a generator is an elegant way to create
00:02 - custom iterators in python
00:04 - that make it really easy to work with
00:05 - iterators if you haven't watched our
00:07 - video about iterators yet
00:08 - i suggest you watch that video first
00:10 - before you proceed
00:12 - in this video we will learn to create
00:14 - and use generators in our python
00:15 - programs
00:16 - with the help of examples
00:21 - now why generators before we learn about
00:23 - generators
00:24 - let's see an example of an iterator
00:26 - implemented in python
00:27 - let me run this code and you can see
00:30 - that a sequence of numbers
00:32 - 2 4 and 6 is generated to generate this
00:36 - we have created a custom iterator inside
00:38 - the even class
00:40 - for an object to be an iterator it
00:42 - should implement the item method
00:44 - which will return the iterator object
00:46 - the next method
00:47 - which will return the next value in the
00:49 - stream and possibly raise the stop
00:51 - iteration
00:52 - exception when there are no values to be
00:54 - returned
00:55 - as you can see the process of creating
00:57 - iterators is both lengthy and counter
00:59 - intuitive
01:00 - generators come to the rescue in such
01:02 - situations python generators are a
01:04 - simple way of implementing iterators
01:06 - all the work we mentioned above are
01:08 - automatically handled by generators
01:11 - now let's see how we can use generators
01:13 - to create iterators
01:15 - i have this code from the last section
01:17 - that creates a sequence of even numbers
01:20 - let me first remove this even class
01:24 - now let's implement the same iterator
01:26 - using a generator
01:27 - a generator is simply a function but
01:29 - with slight modifications
01:31 - in a generator function we use the yield
01:33 - keyword to get the next item of the
01:35 - iterator
01:36 - let's see how first i'll create a
01:38 - generator function
01:39 - named even underscore generator and also
01:41 - change this
01:42 - to even underscore generator so let me
01:44 - remove this and i'll call it e1
01:46 - underscore generator now let me define
01:49 - the even undercooked generator function
01:51 - i'll say def even underscore
01:54 - generator inside this for now i'll just
01:58 - say pass
02:05 - now inside of this function i will use
02:07 - the yield keyword
02:08 - instead of the return keyword to yield
02:10 - the next value without terminating the
02:12 - function
02:13 - so here i'll start with n equals 0
02:17 - and then n i'll increase the value of n
02:20 - by 2
02:21 - and yield n and then i'll again increase
02:24 - the value of n by 2
02:25 - and yield n and again let me increase
02:28 - the value of n by 2
02:30 - and yield n and let me remove this pass
02:35 - let's see from the very beginning what
02:37 - this code is doing
02:38 - first i've created a generator function
02:42 - that has three yield statements
02:46 - there should be an n here when we call
02:49 - this function
02:50 - it returns a generator which is an
02:52 - iterator object
02:54 - then we have called the next method to
02:57 - retrieve elements from this object
03:00 - this code gives us the value of the
03:03 - first yield
03:04 - which is 2 in this case this code will
03:07 - give us the value
03:08 - of the next yield which is n equals 0
03:11 - plus 2 plus 2 which is 4 and this code
03:14 - gives me the value of the third yield
03:17 - which is six
03:18 - the difference between return and yield
03:21 - is that the return statement
03:22 - terminates the function completely while
03:24 - the yield statement
03:25 - pauses the function saving all its
03:27 - states for next successive calls
03:29 - so when we call the next function for
03:31 - the second and third time
03:34 - it gave us the values of 4 which is the
03:37 - second yield
03:38 - and 6 which is the third yield let me
03:41 - run this code so that you can see it for
03:43 - yourself
03:44 - so when i run this code you can see that
03:46 - the same old numbers of 2 4
03:48 - and 6 were generated that means our
03:50 - generator is working correctly
03:52 - however as of yet it only returns the
03:54 - first three even numbers
03:56 - i will now implement a loop to make this
03:58 - generator return even numbers till a
04:00 - certain max number
04:01 - and here i'll pass in a parameter called
04:03 - max
04:05 - now let me remove this old code now i'll
04:07 - say n
04:08 - equals 2 and then i'll start a while
04:11 - loop so i'll say while
04:13 - n less than equals max
04:18 - yield n and then increase the value of
04:22 - n by two
04:25 - now i'll say numbers equals even
04:27 - underscore generator
04:28 - 4 when i press run then you can see
04:31 - that 2 and 4 are generated and after
04:34 - that a stop iteration exception is
04:40 - raised
04:48 - let's compare this generator code with
04:50 - our custom iterator code
04:52 - notice how we have never explicitly
04:54 - defined the item method next method
04:56 - or raised or stop iteration exception
04:59 - they are handled implicitly by
05:00 - generators
05:01 - making our program and our life much
05:03 - simpler and easier to understand
05:05 - by the way if you're finding these
05:06 - videos useful a sub to the channel would
05:08 - be fantastic
05:10 - before moving to the next section of the
05:11 - video the programming team has created
05:13 - an app that allows you to learn python
05:15 - from your phone
05:16 - the app contains bit size lessons that
05:17 - are easier to understand a built-in
05:19 - interpreter so that you can run python
05:21 - on your phone
05:21 - quizzes and many more features the app
05:24 - is available on both ios and android the
05:26 - links are in the video description below
05:31 - iterators and generators are generally
05:33 - used to handle a large stream of data
05:35 - theoretically even an infinite stream of
05:37 - data these large streams of data cannot
05:40 - be stored in memory at once
05:41 - to handle this we can use generators to
05:44 - handle only one item at a time
05:46 - now let's build a generator to produce
05:48 - an infinite stream of fibonacci numbers
05:50 - for those of you who don't know the
05:52 - fibonacci series is a series
05:54 - where the next element is the sum of the
05:56 - last two elements
05:57 - so i'll go to my text editor first i'll
05:59 - create a generator function name
06:01 - generate underscore fibonacci and call
06:03 - it here i'll say def
06:05 - generate underscore fibonacci
06:09 - and then inside this i'll just write
06:11 - pass and let me call
06:13 - the generate underscore fibonacci
06:16 - function
06:17 - it should be fibonacci okay
06:21 - now inside this function i will create
06:23 - the first two elements of the fibonacci
06:25 - series
06:25 - so here i'll say n1 equals 0
06:29 - and n2 equals 1 let me remove this pass
06:34 - then i'll use an infinite while loop and
06:37 - inside it
06:38 - i will yield the value of n1 so here
06:40 - i'll say while
06:42 - true and inside it i will yield
06:46 - n1 and then i'll update the values so
06:50 - that the next term
06:51 - will be the sum of the last two terms so
06:54 - i'll say
06:54 - n1 comma n2 equals
06:58 - n2 comma n1 plus n2
07:02 - if you're confused about what's
07:04 - happening here what's happening is
07:06 - the sum of n1 and n2 is being assigned
07:08 - to n2
07:09 - and n2 is being assigned to n1 all in a
07:13 - single line
07:14 - isn't python sweet now let me print the
07:17 - first few elements in this series
07:19 - here i'll say let me assign this
07:21 - iterator so seq equals this
07:24 - now let me say print next sequence
07:30 - i'll copy this and paste it a few times
07:35 - oops all right
07:39 - when i run this code you can see that
07:43 - the fibonacci numbers
07:44 - has been generated if we had used a for
07:47 - loop and a list to store this infinite
07:49 - series
07:50 - we would have run out of memory however
07:52 - with generators
07:53 - we can keep accessing these terms for as
07:55 - long as we want
07:56 - it is because we are just dealing with
07:58 - one item at a time
08:00 - at this point we have covered the basics
08:02 - of python generators
08:03 - by the way we can also create generators
08:05 - on the fly using generator expressions
08:08 - if you want to learn more about it you
08:09 - can check our article on our website
08:11 - programmers.com
08:12 - the link will be in the video
08:13 - description below now i have a little
08:15 - assignment for you
08:16 - why don't you try and modify the
08:18 - generate fibonacci function
08:20 - to instead generate an infinite stream
08:22 - of odd numbers
08:23 - so you can call it generate underscore
08:25 - odd and then use the next method
08:27 - 10 times to print the first 10 odd
08:30 - numbers
08:31 - that's it for this video if you want to
08:33 - revise these concepts you can find all
08:35 - these programs in our github repository
08:37 - i'll also put this link in the video
08:38 - description
08:39 - and if you like this video hit that like
08:41 - button and subscribe to the channel and
08:43 - i'll see you in the next one happy
08:45 - [Music]
08:52 - programming
08:54 - you