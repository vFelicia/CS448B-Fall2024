00:00 - i'm sure you have run into errors
00:01 - numerous times while programming
00:03 - basically these errors are of two types
00:06 - one
00:06 - is syntax errors like missing
00:07 - parenthesis wrong indentation etc
00:10 - you can easily fix these errors by
00:12 - fixing the syntax
00:13 - and the other type of error is exception
00:16 - even if your code is syntactically
00:17 - correct
00:18 - it may sometimes result in an error for
00:20 - example
00:21 - if you divide a number by zero you will
00:23 - get an error
00:24 - these types of errors that we encounter
00:26 - during the runtime of the program
00:28 - are called exceptions in this video we
00:30 - will learn about exceptions in detail
00:32 - and then we will see how we can handle
00:34 - them in python so let's get started
00:40 - let's understand about exceptions first
00:42 - for this i will write a program that
00:44 - will give us an
00:45 - error so in my code editor i'll say
00:47 - numerator
00:49 - equals 10 denominator
00:52 - equals 0 now i'll say print
00:56 - numerator divided by denominator
01:00 - and i'll save this file let me run it
01:03 - i'll say python
01:04 - main dot pi and you can see
01:07 - that when i run the code we can see the
01:10 - zero division
01:11 - error has been raised even though our
01:14 - code was correct syntax wise
01:16 - it's not allowed to divide a number by
01:18 - zero in python
01:19 - this is an exception in this case we are
01:22 - getting the zero division error
01:23 - exception
01:24 - depending upon the error these
01:26 - exceptions can be of different types
01:28 - for example if you try to access a file
01:31 - that doesn't exist
01:32 - we will get the file not found error
01:34 - exception similarly
01:35 - if we try to access the item of a list
01:37 - out of range we will get the index error
01:40 - exception
01:42 - now that we know what exceptions are we
01:43 - will see how we can handle them next
01:45 - and by the way if you're finding this
01:47 - video useful a sub to the channel would
01:49 - be much appreciated
01:52 - as we know when our program encounters
01:54 - an exception our code ends abruptly with
01:56 - an error message
01:57 - and most of the time rather than showing
01:59 - the default message
02:01 - we may want to show a custom message
02:03 - that's more helpful
02:04 - or run a different set of code this is
02:07 - known as exception handling
02:08 - it's the process of responding to
02:10 - exceptions in a custom way
02:11 - during the execution of a program in
02:14 - python
02:14 - we use the try except block to handle
02:16 - exceptions and its syntax goes like this
02:19 - inside the try block we write the code
02:22 - that might throw an exception
02:24 - now if an exception occurs the control
02:26 - of the program jumps immediately to the
02:27 - accept blocks
02:28 - and the program continues and if
02:31 - exceptions don't occur
02:32 - the except block is completely skipped
02:34 - pretty simple right now let's see a
02:36 - working example of it
02:38 - so inside the try block i will write
02:40 - some code that might raise an exception
02:42 - let me remove this and here i'll say
02:45 - numerator
02:46 - equals integer input enter
02:50 - numerator then
02:53 - i'll say denominator
02:57 - equals integer input
03:00 - enter denominator
03:05 - next i'll say result equals
03:08 - numerator divided by denominator
03:12 - and let me print the result
03:16 - here we are taking numerator and
03:17 - denominator from the user
03:19 - dividing the numerator and the by the
03:21 - denominator and then printing the result
03:25 - this code may raise an exception if the
03:27 - user enters 0 as a denominator
03:29 - let's print a simple message inside the
03:31 - accept block if an exception occurs
03:33 - so i'll remove this code and here i'll
03:36 - say print
03:37 - denominator cannot be zero
03:41 - please try again
03:44 - let me also put another print statement
03:46 - outside the try accept blocks
03:48 - here i'll say print program ends
03:52 - let me save this and when i run this so
03:54 - i'll go to my terminal and say
03:56 - python main dot pi in the numerator i'll
03:59 - enter
04:00 - 10 in the denominator i'll enter 0
04:03 - and as you can see denominator cannot be
04:05 - 0 please try again is printed
04:09 - this is because this line result equals
04:12 - numerator divided by denominator
04:14 - raises an exception when denominator is
04:16 - zero in this case
04:17 - the control of the program jumps to the
04:20 - except block
04:21 - and the code inside it is executed
04:24 - let me run this program again so here
04:26 - i'll say python
04:28 - main.pi and this time let me enter the
04:30 - numerator as 4
04:32 - and denominator as 2. when i press enter
04:35 - as you can see the correct answer which
04:37 - is 4 divided by 2 is printed
04:39 - and the accept block is not executed
04:41 - this time
04:42 - before moving to the next section of the
04:44 - video the program is team has created an
04:46 - app that allows you to learn python from
04:48 - your phone the app contains bit size
04:50 - lessons that are easier to understand
04:52 - a built-in interpreter so that you can
04:53 - run python on your phone quizzes
04:55 - and many more the app is available on
04:57 - both ios and android
04:59 - the links are in the video description
05:03 - i have this code from our early example
05:05 - on my screen here it doesn't matter what
05:07 - type of exception it is
05:09 - this except block is executed whenever
05:11 - an exception is thrown
05:12 - it's also possible to handle different
05:14 - types of exceptions in different ways
05:16 - for example we may want to print
05:18 - different error messages for zero
05:20 - division error
05:21 - and index error exceptions we can do
05:23 - that by specifying the type of exception
05:26 - after the accept keyword so here after
05:28 - accept
05:29 - i will add zero division
05:32 - error now this accept block
05:35 - is only handling the zero division error
05:38 - let me run this code so here i'll clear
05:41 - this
05:42 - and let's say python main dot pi
05:47 - enter numerator 10 and enter denominator
05:50 - again i'll enter 0 because i want to
05:51 - throw the exception
05:53 - and as you can see the code inside the
05:55 - except block was executed
05:59 - handling specific exceptions in this way
06:01 - is particularly useful
06:02 - if our try block may raise more than one
06:04 - type of exception
06:05 - suppose our try block can raise the zero
06:07 - division error
06:08 - and the index error as well we want to
06:11 - handle these two exceptions separately
06:13 - we can do that by adding another except
06:15 - block to handle the index error
06:17 - exceptions separately
06:18 - let me show you what i mean by this i
06:20 - will add code inside the try block that
06:22 - may raise the index error exception
06:24 - so in my code after the print result
06:27 - here i'll say
06:28 - my underscore list equals 1 comma 2
06:32 - comma 3
06:33 - and i'll accept input or the index from
06:36 - the user
06:36 - so here i'll say i equals integer input
06:41 - enter index
06:45 - and then i'll print my underscore list
06:48 - i this code will raise the index
06:52 - exception
06:53 - if the user enters an index greater than
06:55 - 2 because our list only has
06:57 - three items now to handle the exception
07:00 - i will type another except block
07:02 - so here i'll say accept
07:05 - index error
07:08 - and inside this i'll say print index
07:12 - cannot be greater than size
07:15 - of list let me add the full stop
07:19 - now when i run this code i'll say
07:22 - python main dot pi
07:26 - oops there's an error so the error seems
07:28 - to be
07:30 - print result no print oh i forgot a
07:33 - bracket here okay
07:34 - i'll save this and let me say python
07:38 - main dot pi it says enter numerator so
07:41 - let me enter something like 10
07:43 - in the denominator i'll enter 5 now when
07:45 - it says
07:46 - enter index let me enter something like
07:48 - 5
07:49 - when i press enter then you can see that
07:52 - index cannot be greater than size of
07:54 - list
07:54 - which is the custom message i had put in
07:56 - for the index error is printed
08:02 - a try statement can also have an
08:04 - optional finally block which is executed
08:06 - regardless of whether an exception
08:08 - occurs or not and its syntax goes like
08:10 - this
08:11 - let me run this code first so here i'll
08:14 - say python
08:15 - mean dot pi now let's understand what's
08:18 - going on in this program
08:20 - this block of code gives us the zero
08:22 - division error
08:23 - so the except block denominator is
08:26 - printed to the screen
08:27 - finally the code inside the finally
08:30 - block is also executed
08:32 - however if an exception doesn't occur in
08:34 - the try block
08:35 - this except block is not executed but
08:38 - this finally block is still executed
08:42 - the final block is usually used to
08:44 - perform cleanup actions
08:45 - that need to be executed under all
08:47 - circumstances
08:49 - suppose we are working with an external
08:50 - file in our program we need to close
08:52 - this file at the end even if there was
08:54 - an error while writing to it
08:55 - in this case we put the close file
08:58 - function inside the finally block
09:00 - at this point we have covered pretty
09:01 - much everything we need to know about
09:03 - exception handling
09:04 - by the way we can also create custom
09:06 - exceptions in python
09:07 - if you're interested you can check that
09:09 - article on our website programmings.com
09:11 - the link will be in the video
09:12 - description that's it for this video
09:14 - if you want to revise this concept you
09:16 - can find all these programs in our
09:18 - github repository
09:19 - i'll also put the link in the video
09:20 - description and if you like this video
09:22 - hit that like button and subscribe to
09:24 - the channel and i'll see you in the next
09:25 - one
09:26 - happy programming
09:36 - you