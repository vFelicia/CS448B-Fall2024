00:00 - you've probably heard that python is an
00:02 - object-oriented programming language
00:04 - in this video you will learn what
00:05 - object-oriented programming
00:07 - is and why it is used after that
00:10 - we will implement the object-oriented
00:11 - style of programming in our code
00:13 - by creating two practical examples so
00:16 - let's get started
00:21 - let's learn about object oriented
00:23 - programming first then
00:24 - we will see how we can apply it in
00:26 - python suppose we need to store the name
00:29 - and marks obtained by university
00:31 - students
00:32 - and based on the marks obtained by the
00:33 - students we also need to find out if
00:36 - they passed or failed their exam
00:38 - then the structure of our code would
00:40 - look something like this
00:42 - now imagine that instead of one student
00:45 - you have to do this for numerous
00:47 - university students
00:48 - if you were to use the same approach our
00:50 - code would be
00:51 - less organized and it would look messy
00:54 - since
00:55 - these data and functions are related it
00:57 - would be
00:58 - amazing if we could treat them as a
00:59 - single entity we can do
01:01 - exactly that by creating objects this
01:04 - helps us to make programs
01:06 - more organized now there are two steps
01:10 - required to create objects first we need
01:12 - to define a class
01:14 - since we're working with students we can
01:16 - create a class name student
01:19 - this student class acts as a blueprint
01:21 - for the objects
01:23 - all objects created from this class have
01:25 - name
01:26 - and marks data and can use the check
01:28 - pass fail function
01:30 - think of a class as a blueprint of a
01:32 - house it contains
01:34 - all the details about the floors doors
01:37 - windows etc
01:38 - based on these descriptions we built the
01:40 - house
01:41 - the actual physical house is the object
01:45 - as many houses can be made from a
01:47 - house's blueprint
01:48 - we can create many objects from a single
01:50 - class
01:51 - so from our student class we can create
01:54 - as many student objects as we want
01:56 - the concept of object-oriented
01:58 - programming is not native to python and
02:00 - is available to most of the programming
02:02 - languages
02:03 - before moving to the next section of the
02:05 - video the programmers team has created
02:07 - an app
02:08 - that allows you to learn python from
02:10 - your phone the app contains bit size
02:12 - lessons that are easier to understand
02:14 - a built-in interpreter so that you can
02:15 - run python on your phone quizzes and
02:17 - many more
02:18 - the app is available on both ios and
02:20 - android the links are in the video
02:22 - description
02:24 - now that we know what objects are let's
02:26 - implement them in python
02:28 - as mentioned before we need to define a
02:30 - class before we can create
02:32 - objects let's do that first and here
02:34 - i'll say class
02:36 - student and then i'll just use
02:39 - pass here i have defined a class named
02:42 - student
02:44 - at the moment our class doesn't have any
02:46 - attributes and methods
02:48 - since classes cannot be empty i have
02:50 - added a pass statement
02:51 - so that i can run the code without any
02:53 - errors by the way
02:55 - when working with objects variables are
02:58 - called attributes
02:59 - and functions are called methods from
03:02 - now on
03:02 - we will be using these terms when
03:05 - working with objects
03:06 - now that we have defined a class we can
03:08 - create as many objects as we want from
03:11 - it
03:11 - let me create two objects of the class
03:14 - i'll say
03:15 - student 1 equals student
03:18 - in parenthesis and then i'll say student
03:21 - 2
03:22 - equals student and again parenthesis
03:27 - here student 1 and student 2
03:30 - are both objects of the student class
03:34 - now we can start adding different
03:35 - attributes to these object
03:37 - instances first let me remove the
03:39 - student 2
03:40 - and here i'll say student 1
03:44 - dot name equals harry
03:48 - here we have assigned harry to the name
03:51 - attribute of the student1 object
03:54 - let me add another attribute to our
03:56 - object so here i'll say student
03:59 - 1 dot marks equals 85
04:03 - and i'll print these attributes i'll say
04:06 - print
04:07 - student 1 dot name
04:10 - and print student
04:14 - 1 dot marks now when i press run
04:18 - i get harry and 85 back we have
04:21 - successfully added
04:23 - two attributes to our student one object
04:25 - however
04:26 - this is not the proper way to add
04:28 - attributes to objects
04:29 - usually what we want to do is we want to
04:32 - put attributes
04:33 - inside our class so that all the objects
04:35 - created from the class
04:36 - have these attributes by default
04:39 - similarly
04:40 - we also put all methods inside our class
04:42 - so that
04:43 - every object of the class can access
04:45 - them
04:46 - let's first see how we can add methods
04:48 - inside a class
04:49 - then we will look into the proper way to
04:51 - create attributes
04:53 - here i have defined the check pass fail
04:56 - method
04:57 - inside the class now any object
05:00 - created from this class will have access
05:03 - to the check pass fail method if you
05:06 - have noticed
05:07 - we have used self as an argument here
05:10 - and self.marks inside the method
05:14 - we will talk about that in a moment
05:16 - let's first access this method using the
05:18 - student1 object
05:19 - so at the end here i'll say did
05:23 - underscore pass equals
05:27 - student 1 dot check
05:31 - underscore pass underscore fail
05:35 - and then i'll say i'll remove these two
05:38 - lines and i'll say print
05:40 - did underscore pass now when i press run
05:44 - then as expected it prints true because
05:47 - the student one has enough marks to pass
05:52 - see from the very beginning what's going
05:53 - on here we have created a class
05:56 - and we have defined a check pass fail
05:58 - method inside it
06:00 - then we created an object from this
06:03 - class
06:04 - and added two attributes name and marks
06:07 - to it
06:08 - finally we call the check pass fail
06:12 - method using the student1 object we have
06:15 - called this method
06:16 - without passing any arguments however
06:18 - the method definition
06:20 - has an argument called self now you must
06:23 - be thinking
06:24 - shouldn't this give us an error well
06:27 - whenever we define methods
06:28 - for a class we need to use self as the
06:31 - first argument
06:33 - this self represents the object calling
06:35 - it in our example
06:37 - self refers to the student1 object and
06:40 - self.marks
06:41 - refers to the marks attribute of the
06:43 - student1 object
06:46 - so the object is passed as the first
06:48 - argument automatically
06:50 - if you create another object let's say
06:52 - student to
06:53 - and call this method then self
06:55 - represents the student2 object
06:57 - and self.marks represents the marks
06:59 - attribute of the student2 object let's
07:02 - write out
07:03 - student 2 equals
07:06 - student student 2 dot
07:11 - name equals
07:14 - janet student 2 dot
07:18 - marks equals 30
07:21 - did underscore pass equals check
07:25 - pass fail oops student two dot check
07:30 - pass fail
07:31 - and let me print did underscore pass
07:35 - now when i press run then i get true
07:37 - first
07:38 - and i get false here marks of student
07:42 - one
07:43 - is 85 so in this method
07:46 - self.max is 85 which is greater than 40
07:50 - that's why true is returned similarly
07:53 - for student 2 student.2.max is 30
07:56 - so self.max greater than equals to 40 is
07:59 - false
08:00 - that's why we get false by the way
08:04 - we can use any name instead of self here
08:07 - is just an identifier like variable
08:09 - names using self is a convention
08:12 - and for consistency we will also keep
08:14 - using self
08:15 - if you're finding this video useful a
08:18 - sub to the channel would be awesome
08:20 - as i have previously mentioned adding
08:22 - attributes to the object manually after
08:24 - defining it
08:26 - is not a good practice instead python
08:29 - offers a much more elegant and compact
08:31 - way
08:31 - of defining attributes right while
08:34 - instantiating the object
08:35 - for that we use the init method the init
08:39 - method is a special method that
08:41 - automatically gets called every time
08:43 - objects are created
08:45 - if you're coming from other programming
08:46 - languages like c plus plus or java
08:49 - the python init method closely resembles
08:52 - constructors
08:53 - so let's see how we can use the init
08:55 - method in our code
08:56 - and i'll remove the student 2 code
09:00 - and i'll also remove the code that adds
09:03 - the attributes of name and marks to the
09:06 - student1 object
09:07 - then i'll say def
09:12 - underscore underscore init underscore
09:14 - underscore
09:16 - self name
09:20 - marks and i'll say self.name
09:24 - equals name self.max equals
09:27 - marks and here i'll say
09:30 - harry and 85
09:34 - now let me also remove this did pass and
09:36 - i'll say print
09:38 - student1 dot name and print
09:42 - student1.max let's see what's happening
09:45 - here
09:46 - when we create an object this init
09:49 - method is
09:50 - called automatically with the values
09:53 - harry and 85 passed to name and marks
09:56 - automatically
09:58 - remember the first parameter self
10:01 - represents
10:02 - the object calling it while the second
10:04 - and third parameter
10:06 - take the two arguments which we used
10:08 - during object creation
10:11 - now for the student1 object the name
10:14 - attribute will be harry
10:15 - because of the statement self.name
10:17 - equals name
10:19 - and marks will be 85 because of the
10:22 - statement self.marks equals marks
10:25 - when i run this code then i get harry
10:28 - and
10:29 - 85. let's create another object
10:32 - first i'll add another student student 2
10:37 - equals student
10:41 - janet 30 and let me print those so i'll
10:45 - say print
10:46 - student 2 dot name
10:49 - and print student 2
10:52 - dot marks now when i press run then i
10:55 - get harry 85
10:56 - janet and 30. now let me check if
11:00 - student 1
11:01 - and student 2 passed or failed the exams
11:04 - we
11:04 - already have the check pass fail method
11:06 - defined for this purpose
11:07 - we just need to call it but first i'll
11:10 - remove the code to print the attributes
11:13 - and then i'll say
11:14 - did underscore pass equals student1
11:18 - dot check pass fail
11:22 - let me print did underscore pass
11:26 - and again i'll modify did pass so that i
11:28 - know the value
11:29 - or the pass fail status of state student
11:31 - two so i'll say did underscore pass
11:34 - equals student two dot check
11:38 - pass fail print
11:41 - did underscore pass you must have
11:44 - guessed the output by now
11:45 - but let me run the code and verify
11:47 - anyways so i'll press run
11:50 - and as expected true and false are
11:52 - returned
11:53 - because in this line did underscore pass
11:56 - will be true
11:57 - since the first student harry has enough
12:00 - marks to pass the exam
12:01 - similarly here did pass will be false
12:04 - because student 2 does not have enough
12:06 - marks to pass the exam
12:10 - let's see how this program works from
12:11 - the very beginning again
12:13 - we have created a class with two methods
12:16 - an init method
12:17 - that initializes the attributes of name
12:19 - and marks
12:20 - and a check pass field method that
12:22 - returns true if the marks is greater
12:24 - than 40
12:25 - greater than equals 40 and false if it's
12:29 - not greater than equals 40. we then
12:31 - created student 1
12:33 - in this line with the parameters harry
12:36 - and
12:36 - 85 when this object is created the init
12:40 - method is called
12:41 - and name and marks attributes of this
12:44 - student1 object
12:45 - are now harry and 85
12:48 - then we checked if student1 passed the
12:51 - exam
12:52 - and printed the result we had also
12:54 - created another object student 2
12:56 - by passing janet and 30 so the name and
13:00 - marks of the student 2 object are janet
13:02 - and 30
13:03 - and then we calculated if the student
13:06 - had passed or not using the check pass
13:07 - fail method
13:08 - of the student 2 object and we printed
13:10 - the result
13:13 - i hope you have some idea of how classes
13:16 - and objects work by now
13:17 - let's try one more example for extra
13:19 - clarity in this example
13:21 - we will add two complex numbers manually
13:24 - python already handles this by default
13:27 - but we will create our own complex class
13:29 - to better understand the concepts of
13:31 - object-oriented programming
13:33 - if you do not know a complex number has
13:35 - real and imaginary parts
13:37 - when we add two complex numbers we need
13:39 - to add the real
13:40 - and imaginary parts separately let's
13:43 - first create a class that represents
13:45 - complex numbers
13:47 - i'll remove this old code and i'll type
13:49 - class
13:50 - complex and here i'll define an init
13:53 - function so i'll say def
13:56 - init self
14:00 - real image
14:03 - and inside this i'll say self.real
14:06 - equals real
14:07 - and self.imaginary equals
14:10 - image and now let me create two objects
14:14 - n1 equals complex
14:18 - 5 6 and n2
14:21 - equals complex
14:24 - minus 4 and 2. at this point
14:27 - we have created two complex numbers n1
14:31 - and n2 and initialize the real and
14:33 - imaginary parts
14:35 - now we'll create a method to add these
14:37 - complex numbers
14:38 - so inside our class i'll add the code
14:41 - i'll say def
14:42 - add self number
14:45 - and here i'll say real equals
14:50 - self dot real plus
14:53 - number dot real and i'll say image
14:56 - equals
14:57 - self dot image plus number dot
15:00 - image then i'll say result
15:05 - equals complex real
15:10 - image and i'll return this result object
15:14 - now let me call the add method so here
15:17 - i'll say result
15:18 - equals n1 dot add
15:22 - n2 here we have called the add method
15:26 - on the n1 object and pass the n2 object
15:29 - to it
15:30 - so inside the add method self will be n1
15:34 - and number will be n2 then the real
15:38 - and imaginary parts of these numbers are
15:40 - added separately
15:42 - so real equals self dot real plus number
15:45 - dot real means
15:46 - n1.real plus n2.real similarly image
15:50 - equals self.image.plusnumber.image means
15:54 - n1 because n1 is self and one dot image
15:56 - and number
15:57 - is n2 so n2 dot image we have then
16:01 - created another object of the complex
16:03 - class
16:04 - using the result values and then
16:06 - returned it in the next line
16:08 - now let's print the attributes of the
16:10 - result object
16:12 - i'll say print real
16:16 - equals
16:19 - result dot real and print
16:24 - image equals
16:28 - result dot image now when i press run
16:33 - there seems to be a problem i forgot the
16:34 - column now when i press
16:36 - run then i get real equals 1 image
16:39 - equals 8
16:40 - let's verify so 5 minus 4 is 1
16:43 - and 6 plus 2 is 8 so the answer is
16:46 - correct
16:47 - as you can see the real and imaginary
16:50 - parts have been added separately as
16:52 - expected
16:55 - why object oriented programming as we
16:58 - have seen from our examples
17:00 - creating objects allows us to organize
17:02 - related data and functionalities
17:04 - together
17:05 - this helps us to write structured and
17:07 - flexible code
17:08 - now instead of thinking in terms of
17:10 - individual data and functions
17:12 - we start thinking in terms of objects
17:14 - and how one object interacts with the
17:16 - other
17:17 - this helps us to divide a complex
17:19 - problem into smaller sub problems
17:22 - also using an object oriented style of
17:24 - programming makes our code reusable
17:26 - because we can define multiple objects
17:28 - with similar attributes and
17:30 - functionalities from a single
17:32 - class before we end this video here's a
17:34 - task for you
17:36 - create a class named triangle create an
17:39 - object from it the object will have
17:41 - three attributes named
17:42 - a b and c that represent the sides of
17:45 - the triangle
17:46 - the triangle class will have two methods
17:49 - the init method to initialize the sides
17:52 - and a method to calculate the perimeter
17:54 - of the triangle from its sides
17:56 - the perimeter of the triangle should be
17:57 - printed from outside the class
17:59 - here's the bare bones code for the
18:01 - program
18:03 - you'll find the complete answer to this
18:04 - question along with source code of all
18:06 - the programs in this video
18:08 - in our github repository the link will
18:10 - be in the description below
18:11 - and if you like this video hit the like
18:13 - button and subscribe to the channel
18:15 - and i'll see you in the next one happy
18:18 - [Music]
18:25 - programming