00:00 - what's up guys welcome back to this
00:02 - series in c programming in this video we
00:05 - will be learning about strings in c more
00:07 - specifically we will be learning to use
00:10 - textual data in our code so let's get
00:13 - started
00:17 - before we learn more about strings let's
00:19 - first see the example of the hello world
00:22 - program
00:24 - here hello world is an example of a
00:26 - string we have used double quotation to
00:29 - represent strings in programming strings
00:32 - are a collection of characters that are
00:35 - used to represent textual data
00:37 - for example hello world is a string
00:39 - containing a sequence of characters h e
00:44 - l l o
00:46 - w
00:47 - o r l d world
00:50 - now that you know what strings are let's
00:52 - see how we can create them in c
00:55 - here we have created a string type
00:57 - variable str with the value program is
01:01 - if you look carefully you can see the
01:03 - syntax of string looks somehow similar
01:05 - to an array this is because the string
01:08 - in c are an array of characters so this
01:11 - code is similar to this
01:14 - so let's complete this program
01:17 - has include
01:20 - stdio.h
01:24 - int
01:25 - main
01:27 - inside the curly braces return
01:32 - zero
01:34 - i'll cut this
01:35 - and i'll put it here
01:39 - then i'll print this using printf
01:41 - statement
01:43 - so percent s
01:45 - comma
01:46 - str
01:48 - here you can see we have used percent as
01:51 - format specified to print the string now
01:53 - let me run this code you can see we have
01:56 - successfully printed the string
01:58 - by the way every string in c is
02:01 - terminated by a null character
02:03 - represented by slash 0. this null
02:06 - character helps the compiler to identify
02:08 - the end of the string even in our string
02:11 - programming the compiler adds slash 0 at
02:14 - the end due to this the actual size of
02:16 - the string will be 1 greater than the
02:18 - total number of character in the string
02:20 - by the way if you're watching this there
02:22 - is a good chance you want to improve
02:24 - your skills in c programming lucky for
02:27 - you we have a mobile app that provides a
02:29 - well-structured c programming course
02:31 - with certification at the end and you
02:33 - can use the app alongside the video to
02:36 - practice on the built-in compiler our
02:38 - course is free so download now by
02:40 - scanning this qr code or click the link
02:42 - in the video description
02:46 - we can use the same scanner function to
02:49 - take string input from the user let me
02:52 - show you here i have this code from
02:54 - earlier program
02:55 - i'll remove this part
02:58 - now if you remember
03:01 - this is the syntax of declaring an array
03:04 - i'm declaring an array of characters so
03:07 - i have to provide the size of this array
03:09 - as well i'll add here 20.
03:13 - now i'll add scanf statement to take the
03:17 - input from the user
03:20 - you can see i have used str instead of
03:23 - ampersand str
03:25 - this is because
03:27 - sdr is an array and it already points to
03:30 - the address of the first element of stm
03:33 - hence we can omit ampersand and we will
03:36 - discuss this in our later videos now
03:39 - before the scanf
03:41 - let me print the statement and ask the
03:44 - user for their name so printf
03:47 - i'll enter
03:50 - your
03:51 - name
03:53 - here
03:54 - now i'll run this and i'll enter my name
03:59 - you can see input value is stored on str
04:02 - string
04:04 - now let me run this code again this time
04:06 - i'll enter my full name padma manandar
04:10 - and i'll
04:12 - enter however i'm only getting pogma
04:16 - instead of my full name padma manandar
04:18 - this is because the scanf method only
04:21 - takes the input until it encounters
04:24 - white space
04:25 - here there is a space after pogma so the
04:28 - scanf method only takes padma and
04:31 - ignores manandar if you want to take the
04:34 - entire line of string as input
04:37 - we can use f gates function let me
04:39 - modify the program i'll remove this
04:42 - scanf function
04:44 - and i'll add here
04:46 - f gets
04:47 - bracket str
04:49 - comma
04:50 - size
04:52 - size of
04:54 - str
04:56 - comma
04:57 - std i n
05:00 - here f gates function only takes three
05:03 - parameters
05:05 - the first parameter represents the name
05:07 - of the string in our case str is the
05:10 - name of the string
05:12 - and the second parameter is size of the
05:15 - string
05:16 - and
05:17 - this third parameter is stdin which
05:21 - means standard input which denotes that
05:24 - we are taking input from the keyword
05:27 - now let me run this program
05:29 - i'll again
05:30 - type my full name
05:34 - and i'll enter
05:36 - this time you can see my full name is
05:38 - printed okay guys we need your support
05:41 - to keep these types of content free for
05:44 - all users youtube really likes
05:46 - engagement on the video so leave a
05:47 - comment below press that like button and
05:49 - hit subscribe if you haven't already
05:51 - let's get the engagement score high up
05:54 - so that more people can discover and
05:56 - enjoy these courses
06:00 - we know that a string is a area of
06:02 - characters in c
06:04 - so just like an array we can access each
06:07 - character of a string using indexes
06:09 - let's see an example i'll start with the
06:12 - basic structure of c program so hash
06:14 - include s t d i o dot
06:19 - int
06:20 - mean and inside
06:23 - this curly braces return
06:25 - zero
06:27 - and here i'll create string with value
06:30 - programming so so
06:32 - care str square bracket is equals to
06:38 - programming
06:41 - now to access the characters we can use
06:44 - string name and the index inside the
06:47 - square bracket
06:48 - so
06:49 - let's access the first character and
06:51 - print it using print statement so i'll
06:54 - use
06:55 - print statement
06:57 - print f
06:59 - percent
07:00 - c
07:01 - comma str
07:03 - and index is zero
07:06 - and i'll run this code you can see p is
07:10 - printed on the screen
07:12 - similarly we can access other elements
07:14 - easily using array indices
07:17 - for that i'll copy this
07:20 - so i'll copy this and paste it here
07:24 - and i'll just change the value of index
07:27 - number here from
07:29 - 0 to 1
07:30 - 2
07:31 - and 3
07:32 - so now second third and fourth elements
07:35 - can be accessed using array indices
07:39 - one
07:40 - two
07:41 - and three
07:42 - so now let's run this code as you can
07:45 - see we get the desired characters
07:51 - we can also change the character of a
07:53 - string for this we can simply assign a
07:56 - new character to a particular index
07:58 - let's see an example i'll use the same
08:00 - code from earlier program here i'll
08:02 - remove these print statements
08:05 - now suppose i want to change this
08:08 - third character to capital o i can
08:11 - simply assign value to index 2 so
08:14 - str
08:16 - square bracket will
08:18 - point to the index number 2
08:20 - and will assign its value
08:23 - capital o
08:25 - now
08:26 - let's change this fifth character to
08:29 - capital r
08:32 - so i'll do the same process here again
08:34 - so str with the index number
08:37 - four
08:38 - that means the fifth element is equals
08:41 - to
08:42 - capital r
08:45 - i'll now print the string using printf
08:48 - statements so print f bracket percent s
08:53 - comma
08:54 - str
08:57 - and i'll run this program
09:00 - as you can see the third character it
09:02 - changed to capital o from small o and
09:05 - the fifth character it changed from
09:08 - small r to capital r
09:13 - to revise what we have learned so far
09:16 - here is a programming tags for you
09:18 - create a program that takes your full
09:20 - name as input and prints your name then
09:23 - change the first letter of your name to
09:25 - x now if your name is joan williams it
09:28 - will be x on williams if your name is
09:32 - julie bing it will be julie being with x
09:35 - as your first character you can find the
09:38 - answer to this problem in our github
09:40 - repository and also if you want to
09:42 - revise this concept all the programs in
09:45 - this video will be present in there the
09:47 - link is in the video description below
09:50 - now that we have reached the end of this
09:52 - video it's time for programming squeeze
09:59 - comment your answer below see you in the
10:00 - next video happy programming
10:06 - [Music]