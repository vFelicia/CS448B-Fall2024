00:00 - welcome back to this series on python
00:02 - project-based learning for beginners
00:04 - i'm soyuz from programmers and in this
00:06 - video i'll teach you to create your own
00:08 - calculator app in less than 200 lines of
00:10 - python code
00:11 - so let's get started
00:16 - before we get started with the tutorial
00:18 - let me first show you what our final
00:20 - calculator app is going to look like
00:21 - for this video we will try to mimic the
00:23 - built-in standard windows calculator app
00:26 - so i'll open this file so here we have
00:29 - the digits
00:30 - to add buttons from 0 to 9 and also a
00:32 - button
00:33 - to add the decimal point then we have
00:35 - the buttons to perform the four basic
00:37 - arithmetic operations
00:38 - along with square and square root okay
00:41 - so let me use our calculator
00:42 - to find the product of 23 and 17
00:45 - so i'll say 23 into 17
00:48 - and press equals to and as you can see
00:51 - we get
00:51 - 391 as the answer also notice that we
00:55 - have a label that keeps track of the
00:56 - entire expression
00:58 - so if i want i can even add the square
01:00 - of 15 to this answer
01:01 - so i'll say plus 15 and now i'll use the
01:05 - square button to find its square
01:07 - i'll press equals to and we get the
01:09 - expected value
01:11 - by the way we can also use our
01:13 - calculator with the keyboard
01:14 - so first i clear these values using the
01:17 - clear button
01:19 - and now i'll use the keys to type the
01:23 - expression
01:23 - like 27 times 6
01:28 - plus 5 minus 3
01:31 - times 7 i'll press enter and as you can
01:35 - see
01:35 - our calculator follows the correct order
01:37 - of operations
01:38 - to give us the right answer now let's
01:41 - learn to build this calculator app using
01:43 - python and tkinder
01:48 - before we get started with the tutorial
01:50 - i want to mention that we're going to
01:52 - use an object oriented style of
01:53 - programming
01:54 - to build this calculator so make sure
01:56 - that you're familiar with object
01:57 - oriented programming first
01:59 - you can check our python object oriented
02:00 - playlist to brush up on your oop skills
02:03 - the link will be in the video
02:04 - description remember
02:06 - that the main takeaway from this video
02:09 - should not be just to build a calculator
02:10 - in python
02:11 - but also to learn things that are often
02:13 - overlooked like how to structure your
02:15 - project
02:15 - and write clean readable python code so
02:18 - let's start writing our code
02:20 - i'll first create a new folder in my
02:22 - workspace i'll call it calculator
02:28 - then i'll open this folder with pycharm
02:37 - it's always a good practice to create a
02:39 - new virtual environment
02:40 - for each of our python projects this
02:42 - will help us manage dependencies for
02:44 - each project in a separate
02:45 - and isolated environment so let me open
02:48 - the terminal
02:49 - and create a new virtual environment
02:51 - using the v and v module
02:53 - i will say python hyphen m
02:56 - v and v and then the name of our virtual
02:58 - environment i'll also call it v and v so
03:00 - i'll say v e and v
03:01 - i'll press enter now let's activate this
03:04 - virtual environment
03:05 - i'll say dot slash vnv says scripts
03:09 - slash activate for now we are going to
03:12 - use only the built in tkinter module
03:15 - so we don't have to install any
03:16 - dependencies yet now
03:18 - let's create a file to write all of our
03:19 - python code
03:22 - so i'll create a new file
03:25 - and i'll call it calc.pi so i'll say
03:26 - calc dot pi
03:30 - now let's start by importing the
03:31 - built-in tk enter module
03:33 - i'll say import tk enter as tk
03:38 - then i'll create a calculator class that
03:40 - will contain all the components and
03:42 - functionality of our calculator
03:44 - so i'll say class calculator
03:49 - now i'll create an init method for the
03:51 - calculator class where i will do all the
03:53 - initializations
03:54 - so i'll say def underscore underscore
03:56 - init underscore underscore
03:58 - self and inside this init method
04:01 - i'll first create the main window of our
04:03 - calculator app using the tk class of the
04:05 - tkinder
04:06 - module so i'll say self dot window
04:09 - equals to tk dot dk then
04:14 - i'll specify the width and height of
04:16 - this window so i'll say self
04:18 - dot window dot geometry
04:22 - and i'll specify the size as 375
04:27 - times 667
04:31 - this size is also the standard logical
04:32 - resolution for iphone 8.
04:35 - now i'll also disable resizing for this
04:37 - window
04:38 - i'll say self dot window dot resizable
04:42 - and i'll pass 0 comma 0 then i'll also
04:46 - give our app a name in the title bar
04:48 - so i'll say self dot window dot title
04:52 - i'll give it the name calculator also
04:54 - calculator
04:57 - now let me create another method called
04:59 - run to start our calculator app
05:01 - so i'll say def run
05:05 - and then i'll say self dot window
05:08 - dot mean loop then
05:11 - outside this class i'll say
05:15 - come outside this class and i'll say
05:18 - if underscore underscore name underscore
05:20 - underscore
05:21 - equals to main
05:29 - inside this if statement i create an
05:31 - object of the calculated class called
05:33 - calc
05:34 - so i'll say calc equals to calculator
05:38 - then i'll run the run method of the
05:40 - calculator
05:41 - object source calc dot run
05:45 - these lines of code will run only when
05:48 - calculate pi
05:49 - is run as a script from the terminal so
05:51 - let me save this file
05:53 - and run it and you can see that our main
05:57 - window was created with specified
05:59 - dimensions
06:00 - and we also have calculator in the title
06:04 - bar
06:06 - now we're going to create two frames one
06:08 - for the display and the other for the
06:09 - buttons
06:11 - so i'll say self dot display frame
06:17 - equals to self dot create display frame
06:23 - and then self dot buttons frame
06:27 - equals to self dot create
06:31 - buttons frame now let's define these two
06:34 - methods
06:35 - first i'll define create display frame
06:37 - so i'll say def
06:39 - create display
06:42 - frame inside this method
06:45 - i'll say frame equals to tk
06:48 - dot frame since we are creating this
06:51 - frame inside our main window
06:53 - i'm going to specify self.window
06:57 - i'll also specify the height for this
07:00 - frame so i'll give it a height of 221
07:04 - let's also give this frame a different
07:05 - background color so i'll first define a
07:08 - variable
07:09 - called light gray so i'll come here and
07:10 - i'll say light
07:12 - gray and give it a hex value
07:16 - of f5 f5
07:20 - f5 then
07:23 - i'll come here i'll specify bg
07:27 - the background color as light grey
07:31 - now let's back this frame to our main
07:33 - window so i'll say frame
07:35 - dot pack and i will specify expand
07:39 - equals to true and fill equals to both
07:44 - these arguments will allow our frame to
07:46 - expand and fill any empty space around
07:48 - it
07:49 - finally let me just return this frame so
07:51 - i'll say
07:53 - return frame
07:57 - now let's do the same for the buttons
07:58 - frame so i'll say
08:00 - def create buttons frame
08:06 - inside this method i'll create a frame
08:08 - so i'll say frame
08:09 - equals to tk dot frame and i'll pass
08:13 - self.window and similar to the display
08:17 - frame
08:17 - i'll also pack this frame so i'll say
08:21 - frame dot pack i'll say expand
08:26 - equals true and fill equals to both
08:32 - then and also return this frame so i'll
08:34 - say return frame
08:40 - now that we've created the frames let's
08:42 - add display labels to our calculator
08:44 - as we saw in our demo the calculator app
08:46 - will have two different labels
08:48 - one to display the current expression
08:50 - and the other to display the total
08:51 - expression
08:52 - so first i'll define both the current
08:54 - expression and the total expression
08:56 - so i'll come here and i'll define
08:59 - self dot total expression
09:07 - i'll set it to zero i'll do the same for
09:10 - self.current expression so i'll say self
09:12 - dot current
09:13 - expression and i'll set it to zero
09:18 - then i'll create a method called create
09:20 - display labels to create these labels
09:24 - so i'll create the display label so i'll
09:28 - say
09:29 - def create display
09:33 - labels and inside this method
09:36 - i'll first define the total label so
09:38 - i'll say total
09:40 - label equals to tk
09:43 - dot label and i'll add it to
09:46 - self.display frames as itself
09:48 - dot display frame i'd also specify the
09:52 - text for this label so i'll say
09:53 - comma text equals to the value of the
09:57 - total expression so as itself.total
09:59 - expression i will also use anger
10:03 - equals to tk dot e this will help
10:05 - position the text at the east side of
10:07 - the frame
10:09 - i'll also change the background and
10:10 - foreground colors for this label
10:12 - so first i'll define another constant
10:15 - i'll call it label
10:16 - color so i'll say label color and i'll
10:19 - give it the hex value
10:21 - 2 5 2 6 5 e
10:26 - then i'll come back here and i'll
10:29 - specify
10:30 - bg as light gray
10:33 - and fg the foreground color
10:36 - as the hex value of the label color so
10:39 - as a label color
10:42 - i'll also give it a padding in the
10:44 - horizontal direction so i'll say
10:46 - pad x equals 24
10:51 - let me also change the font style for
10:52 - this label so first i'll create another
10:54 - constant so i'll come here
10:56 - and i'll create another constant i'll
10:58 - name it small
11:00 - font style and i'll give it a tuple
11:03 - value
11:04 - of arial and 16.
11:08 - now i'll come back here and i'll specify
11:12 - font equals to small font
11:16 - change it to comma
11:19 - finally i'll pack this label with expand
11:21 - equals to true and fill custom so i'll
11:23 - say
11:23 - total label dot pack expand
11:28 - equals to true and
11:33 - fill equals to both
11:38 - for the current label i'll just copy and
11:40 - paste this line so i'll say
11:43 - the same thing and now i'll change total
11:46 - label
11:47 - to label i'll change self
11:50 - total expression to self.current
11:52 - expression
11:53 - i'll also change total label here to
11:56 - label
12:00 - then i'll come here and i'll define
12:01 - another constant so i'll say
12:05 - large font style
12:08 - and i'll give it the value arial
12:12 - comma 40 and also bold
12:16 - now i'll come back here
12:20 - and i'll specify the font now as large
12:24 - one style
12:27 - finally i'll return total label and
12:30 - label so i'll say return
12:32 - total label comma label now
12:35 - i'll come back to the init method and
12:38 - here
12:38 - i'll say self
12:41 - dot total label
12:45 - such itself total label comma self
12:48 - dot label equals to self dot
12:51 - create display labels
12:56 - now i'll save this file and i'll run it
13:00 - and as you can see our display labels
13:01 - have been added
13:07 - let's now add the buttons to our
13:08 - calculator we'll use the grid system to
13:10 - add all the buttons
13:11 - so first let me create a dictionary of
13:13 - all the digits and the corresponding
13:15 - positions
13:16 - so i'll come to the init method and i'll
13:17 - define self dot digits
13:20 - as a dictionary
13:23 - in a standard calculator the digits
13:25 - start from seven
13:27 - so first i'll add seven as the key with
13:29 - the value one comma one
13:32 - we will later use this value to specify
13:34 - that seven should be placed in a cell
13:36 - with row one and column one similarly
13:39 - eight should be placed in root one and
13:41 - column two so i'll say
13:44 - it and give it the value 1 comma 2.
13:49 - now i'll copy paste other values
13:55 - we also have 0 at the center of the last
13:58 - column so i'll add
13:59 - 0 and i'll give it the value 4 comma 2
14:04 - let's also add a decimal point button at
14:06 - position 4 comma 1 so i'll say
14:08 - dot i'll give it the value 4 comma 1.
14:14 - now i create a method called create
14:15 - digit buttons so i'll come here
14:18 - and i'll say def create
14:21 - digit buttons
14:24 - and inside this method i loop through
14:26 - our dictionary and add each button to
14:28 - our button stream
14:29 - so first i'll say for digit
14:33 - comma grid value in self.digits.items
14:40 - and for each of the digits and grid
14:42 - values i'll create a button so i'll say
14:44 - button
14:44 - equals to tk dot button
14:48 - and now i'll place it inside self read
14:51 - buttons frame so i'll say self
14:53 - dot buttons frame
14:56 - i'll also specify the button text as
14:58 - digit so i'll say
14:59 - text equals to digit
15:02 - but since it's an integer value i'll
15:04 - also convert it to string
15:06 - before passing it so i'll say string
15:10 - of digit let's also give a button a
15:13 - background color and a foreground color
15:15 - so first i'll define white
15:19 - i'll say white equals to
15:23 - x value fff
15:26 - and now i come here
15:30 - and i'll specify bg the background color
15:33 - as white and fg the foreground color as
15:36 - label color
15:41 - then to place these buttons in a grid
15:43 - i'll say button
15:44 - dot grid and i'll pass row as the first
15:47 - element of grid value which is grid
15:48 - value
15:49 - 0 and column as the second value of the
15:53 - grid value which is grid value
15:54 - one i will also specify
15:58 - sticky equals to tk dot north south east
16:01 - west
16:02 - so that our buttons stick to every side
16:04 - and fills up the entire grid cell
16:06 - i will now call this method from inside
16:08 - init
16:09 - so i'll say
16:12 - self dot create digit buttons
16:17 - now let me save this file and run it
16:21 - and you can see that our buttons have
16:23 - been added they look very small at the
16:25 - moment so let's change that
16:27 - i'll first define the digits font style
16:30 - so i'll say digit
16:36 - font style
16:40 - and i'll give it the value arial
16:43 - 24 and bold
16:48 - now i'll come here
16:52 - and i'll specify the font
16:56 - as this is font style
16:59 - i will also remove the border from this
17:01 - button so i'll say
17:02 - border width equals zero
17:07 - now let me save this file and run it
17:08 - again
17:10 - and we can see that a new font style has
17:13 - been added to the buttons
17:14 - also the border has been removed a
17:16 - button still don't fit the entire window
17:18 - but we'll fix that once we add all the
17:20 - buttons
17:22 - so now let's add the basic arithmetic
17:23 - operator buttons
17:28 - for this i'll first create a dictionary
17:31 - called self.operation so i'll come here
17:32 - and i'll say
17:34 - self dot operations
17:37 - and i'll paste this value
17:40 - this dictionary maps the arithmetic
17:43 - operation in python
17:44 - to the operator symbols here these two
17:47 - values
17:48 - are unicode values that represent the
17:50 - division symbol and the multiplication
17:51 - symbol
17:53 - now i'll create a new method called
17:55 - create operator buttons
17:57 - so i'll go here and i'll create a new
17:59 - method so i'll say def
18:01 - create operator buttons
18:08 - and inside this method i'll loop over
18:10 - the previous dictionary so i'll say
18:12 - for operator
18:15 - operator and symbol
18:19 - in self.operations.items
18:25 - i will define button sdk dot button
18:29 - i'll add this button inside self dot
18:31 - buttons frame so i'll say
18:32 - self dot buttons frame and i'll specify
18:36 - the button text as the symbol
18:41 - let me now define two more constants so
18:43 - i'll come here
18:44 - and i'll specify the default font style
18:46 - so as a default
18:49 - font style and i'll give it the value
18:53 - arial and 20.
18:57 - i'll also specify another color so i'll
18:59 - come here and i'll specify
19:00 - another color called off-white and i'll
19:02 - give it the hex value
19:05 - f8 fa ff so that's f8 fe
19:09 - ff now
19:13 - i'll come back here and i'll specify bg
19:16 - the background color as off-white and
19:19 - i'll specify fg
19:21 - the foreground color as label color so
19:22 - i'll say label color
19:25 - i'll also specify font equals to
19:28 - default font style
19:32 - i'll also remove the border from these
19:33 - buttons so i'll say border width
19:36 - equals zero now let's place this button
19:40 - to the buttons frame grid
19:41 - so i'll say button dot grid
19:45 - we know that the operator button should
19:47 - be at the last column and start one row
19:48 - above the digit buttons
19:50 - so i'll first define a counter variable
19:53 - called i
19:53 - outside this loop so that's i equals 0
19:56 - and now
19:58 - i'll say row equals to i
20:03 - i'll specify the column as 4
20:07 - and also specify sticky
20:10 - as tk dot north south east west
20:14 - finally i'll increase the value of i by
20:16 - 1 so i'll say i
20:17 - plus equals 1. i will now call this
20:21 - method from inside the edit method so
20:22 - i'll come here
20:24 - i'll specify self dot
20:27 - create operator buttons
20:32 - let me save this file and run it and as
20:34 - you can see the operator buttons have
20:36 - been added
20:38 - similarly i'll create the clear button
20:40 - and the equals to button
20:41 - so i'll define a new method called
20:43 - create clear button so i'll come here
20:45 - and i'll say def create
20:49 - clear button and inside this method
20:53 - i'll first copy this code and i'll paste
20:55 - it here
20:56 - then i will change symbol to c
20:59 - for clear i will also
21:03 - change the grid values we know that the
21:05 - clear button will be at the top most row
21:06 - so i'll first
21:07 - replace i with 0 and also replace 4 with
21:11 - 1.
21:13 - for now i'll also add column span equals
21:15 - to 3 so that this clear button will span
21:17 - across 3 columns
21:18 - so i'll say column span equals to 3.
21:23 - now listen now let's define the create
21:25 - equals button
21:26 - for this i'll just copy this method and
21:29 - i'll paste it here
21:31 - i will change create clear button to
21:32 - create
21:34 - equals button i will change
21:37 - c to equals to sign
21:40 - now i'll define another color so i'll
21:43 - come here and i'll specify
21:45 - light blue as the hex value
21:49 - cc edff
21:53 - now i'll come back here
21:56 - and i'll specify the background color
21:59 - as light blue
22:04 - since our equals button will be at the
22:05 - last row and span across two columns
22:07 - i'll specify the row as 4. the column
22:11 - should be 3
22:12 - and it should span across 2 columns so
22:14 - i'll say 2.
22:16 - now let's call these methods from the
22:18 - init method so first i'll come here
22:20 - and i'll define a new method so i'll say
22:24 - create special buttons
22:29 - and inside this method i'll call self
22:32 - dot create clear button
22:35 - and self dot create
22:38 - equals button then i'll call the create
22:42 - special buttons from
22:43 - the init method source itself but create
22:46 - special buttons
22:47 - now i'll save this file and i'll run the
22:49 - code
22:52 - and we can see that the buttons have
22:53 - been added as specified
22:55 - now let's expand this button so that
22:57 - they fill the entire space
22:59 - so i'll come to the init method and here
23:02 - i'll create a for loop that loops from
23:03 - one to four so i'll say for x
23:06 - in range
23:09 - one comma five and inside this
23:13 - for loop i'll say self dot buttons frame
23:16 - dot row configure and i'll pass in the
23:18 - value x
23:19 - and i'll also specify weight equals to
23:23 - 1 then
23:26 - i'll copy this line instead of row
23:28 - configure i'll say column
23:29 - configure
23:34 - these lines of code will help our rows
23:36 - and columns to expand
23:38 - since we specified a non-zero weight our
23:41 - buttons can now grow to fill the empty
23:42 - spaces
23:43 - by the way we also have the zeroth row
23:46 - so let's add this row configure
23:47 - for the zeroth row as well so i'll come
23:49 - here and i'll specify
23:51 - zero and finally let me finally save
23:55 - this file and run it
23:57 - and you can see that our buttons finally
23:59 - occupied all the empty spaces
24:02 - we will add the square and square root
24:03 - buttons later in our program
24:05 - now that we have added all the essential
24:07 - buttons let's start adding functionality
24:08 - to these buttons
24:09 - by the way if you're finding these
24:11 - videos useful a sub to the channel would
24:13 - be much appreciated
24:15 - before moving to the next section of the
24:16 - video i want to mention that the
24:17 - programming team has created an app that
24:19 - allows you to run python from your phone
24:21 - this app contains bit size lessons that
24:23 - are easy to understand
24:24 - a built-in python interpreter so that
24:26 - you can run python on your phone
24:27 - quizzes and many more the app is
24:29 - available on both ios and android
24:31 - links are in the video description
24:35 - let's start by making the digit buttons
24:37 - functional
24:39 - first i'll create the methods that will
24:41 - update the total label and the current
24:42 - label
24:43 - so i'll come here and i'll create two
24:45 - methods first i'll say def
24:48 - update total label so let's say update
24:51 - total
24:52 - label inside this method i'll update the
24:56 - text property of cell.total label
24:59 - so i'll say self dot total label dot
25:02 - config
25:03 - and now i'll change the value of text to
25:06 - whatever the value of self the total
25:08 - expression is so as itself
25:10 - total expression
25:13 - then i'll do the same for the current
25:14 - label so i'll say define
25:17 - update label so i'll say update label
25:22 - i'll change self dot total label
25:28 - change the text property to cell dot
25:31 - current expression
25:35 - now let me create a method called add to
25:37 - expression that will add a given value
25:40 - to the current expression so i will come
25:41 - here
25:43 - and here i'll specify a new method so
25:46 - i'll say
25:46 - def add to expression
25:51 - this method will take in a value
25:54 - and what i will do inside this method is
25:56 - i'll append
25:58 - this value to work on expression so i'll
26:00 - say self
26:01 - dot current expression plus equals to
26:04 - and then the string of our value
26:08 - now finally i'll update this current
26:10 - expression so i'll say self
26:12 - dot update label
26:16 - now let's add the functionality of this
26:18 - method to our buttons so i'll come here
26:20 - and i'll specify the command so i'll say
26:23 - comma
26:23 - command and i'll say self dot add to
26:26 - expression
26:27 - and i'll give it the valid digit but
26:30 - since the command has to be a function
26:31 - i'll wrap our method using the lambda
26:34 - keywords also lambda
26:37 - then i will remove the initial values of
26:40 - self.total expression as self.current
26:42 - expression
26:43 - so i'll make them empty strings let me
26:46 - save this file and run the code
26:48 - and now i'll press the buttons
26:52 - okay so currently a decimal point gets
26:53 - added to the current expression for any
26:55 - digit button we press
26:56 - let's see why that is so i'll come to
26:59 - the
27:00 - create digit buttons
27:03 - okay so it's because our lambda function
27:05 - uses the digit
27:07 - variable which gets reassigned every
27:09 - time in the loop due to this
27:11 - all the buttons give the last value of
27:12 - digit which happens to be the decimal
27:14 - point
27:15 - to fix this problem i'll create a
27:17 - parameter called x and i'll bind it to
27:19 - the digit in each iteration of x
27:21 - so i'll say x equals to digit
27:24 - and here instead of digit i'll say x
27:28 - now let me run this code again
27:34 - and our digit button finally work
27:38 - now let's add functionality to our
27:39 - operator buttons the operator button
27:41 - should append the symbol
27:43 - to the end of the current expression
27:44 - append it to the total expression and
27:45 - finally clear the current expression for
27:47 - the next entry
27:49 - i will implement the method called
27:50 - append operator and you'll exactly
27:52 - understand what i mean
27:53 - so i'll come here and here i'll create a
27:56 - new method so i'll say def
27:58 - append operator
28:02 - this will take in an operator
28:06 - and inside this method i'll first append
28:08 - the given operator to the current
28:10 - expression so i'll say
28:11 - self dot current expression plus
28:14 - equals to the operator then
28:17 - i'll append the current expression to
28:19 - the total expression so i'll say self
28:21 - dot total expression total expression
28:25 - plus equals to self dot current
28:27 - expression
28:28 - finally i'll clear the current
28:30 - expression for the next entry so i'll
28:32 - say
28:32 - self dot current expression equals to an
28:35 - empty string
28:37 - finally i'll update both the total label
28:39 - and the current table so i'll say
28:42 - self dot update total label
28:45 - and self dot update label
28:50 - now i'll add this method to operator
28:52 - buttons so come here
28:54 - and similar to before i'll say command
28:57 - equals to lambda
28:59 - which will take in a value x and i'll
29:02 - bind it to the operator
29:04 - variable in each iteration and then i'll
29:07 - say self
29:08 - dot append operator and i'll pass in x
29:12 - let's save this file and run it
29:16 - now i'll press 9 plus
29:20 - and as you can see the plus operator is
29:21 - first appended to the current expression
29:24 - then we appended the current expression
29:26 - to the total expression
29:27 - and finally we'll clear the current
29:28 - expression for the next entry
29:31 - let's now add functionality to the clear
29:33 - button and the equals to button in a
29:34 - similar way
29:35 - so first i'll come here and i'll specify
29:38 - the clear method and what this method
29:42 - will do
29:43 - is simply clear both the current
29:44 - expression and the total expression so
29:46 - i'll say
29:47 - self dot current expression equals to an
29:49 - empty string
29:50 - i will do the same for the total
29:52 - expression so the total expression
29:54 - this will also be an empty string now
29:56 - i'll update both of the labels
29:58 - as itself dot update total label
30:02 - okay so i then update total label as
30:06 - well
30:06 - so i'll say update total label
30:09 - now i'll come here
30:13 - i'll specify command
30:17 - equals to self.clear
30:21 - next let's review the eval function
30:23 - before implementing the functionality of
30:24 - the equals to button
30:26 - the eval function evaluates and returns
30:28 - the value of a valid python expression
30:30 - let me show you what i mean so first
30:32 - i'll go to the python console tab in
30:34 - pycharm
30:35 - and here i'll say eval
30:38 - 2 times 3 plus 3
30:43 - i'll make it a string i'll press enter
30:48 - and you can see that this expression
30:50 - gets evaluated and the final result is
30:52 - returned
30:54 - we are going to use this eval function
30:55 - to evaluate our total expression when
30:57 - the user presses the equals to button
30:59 - so now i'll close this tab
31:03 - i'll come back to my correlator and i'll
31:05 - define the evaluate method here so i'll
31:07 - say def
31:08 - evaluate
31:12 - inside this method i will first append
31:14 - the current expression to the total
31:16 - expression
31:17 - such as self dot total expression plus
31:20 - equals to self
31:21 - dot current expression then i'll update
31:24 - the total label so i'll say
31:25 - self dot update total label
31:30 - then i will say self dot current
31:32 - expression
31:33 - equals to eval
31:36 - of self dot total expression i'll also
31:39 - wrap this
31:40 - function with the string function so
31:42 - that a string is written at the end
31:45 - now i'll reset the total expression so
31:46 - i'll say
31:48 - self dot total expression
31:51 - equals to an empty string finally i'll
31:54 - update the current label
31:56 - so i'll say self dot update label
32:03 - now i'll come here and i'll say
32:07 - command oops i'll say command
32:10 - equals to self dot evaluate
32:17 - let me finally save this file and run it
32:21 - and now our calculator app should be
32:22 - fully functional i'll try to find the
32:24 - product of 8
32:25 - and 9 so i'll say 8 times 9 equals 2
32:29 - and we can see that it gives us the
32:30 - correct answer
32:32 - we can also reset the expressions using
32:34 - the clear button so if i press the clear
32:35 - button
32:37 - these expressions are now removed
32:42 - now that our calculator is fully
32:43 - functioning let's enhance some of its
32:45 - features
32:47 - first of all let's add the square and
32:49 - square it buttons to the calculator
32:51 - also when we currently type an
32:53 - expression like 9
32:54 - times 9 we can see that the actual
32:57 - operator symbol is not displayed
32:59 - let's replace this python operator
33:01 - symbols with the actual operator symbols
33:04 - next if we try to do calculations like
33:07 - 1 divided by 3 we can see
33:11 - that the values currently overflow the
33:13 - window width so let's truncate our
33:15 - results
33:16 - also if we try to divide by 0 so i'll
33:19 - say 1
33:20 - divided by 0 so here we get an error
33:24 - message
33:25 - let's try to put our eval function in a
33:27 - try block
33:28 - finally we'll also make our calculator
33:30 - app usable from the keyboard
33:36 - first let's start by adding square and
33:38 - square root buttons to our calculator
33:41 - so i'll first come here and i'll remove
33:42 - the column span parameter for the clear
33:44 - button
33:44 - to make room for square and square root
33:47 - buttons
33:48 - and then i'll copy paste this code to
33:49 - create the square button
33:51 - first of all i'll change the name to
33:53 - create
33:54 - square button so create square button
34:00 - then i'll change the text to x slash u
34:03 - 0 0 b2 this unicode value represents the
34:07 - square symbol
34:08 - i will also change the command to
34:10 - self.square
34:13 - now let's define the square method so
34:16 - i'll say
34:19 - def square and what this function will
34:22 - do
34:24 - is i'll say self dot current expression
34:28 - equals to eval and i'll evaluate
34:32 - the string which is the self
34:36 - dot current expression and i'll just
34:38 - square it so i'll just do
34:40 - square and finally i'll wrap this using
34:44 - the
34:44 - str method
34:49 - and i'll update the label so i'll say
34:51 - self
34:52 - dot update label
34:57 - by the way i also have to change this
34:59 - column to 2
35:00 - so that it appears next to the clear
35:02 - button
35:06 - similarly for the square root button
35:07 - i'll copy paste both the square button
35:09 - and the square method
35:10 - so i'll copy paste this code i'll change
35:13 - square to s
35:14 - qrt and instead of 2
35:18 - i'll say 0.5
35:21 - i'll also change the value
35:25 - of the name of this method so i'll say
35:28 - create
35:31 - qrt
35:34 - button i'll also change the text
35:38 - to slash u 2 2 1
35:41 - a this unicode value represents the
35:44 - square root
35:45 - symbol and then i'll type x
35:49 - and now i'll change the column to three
35:53 - let's add these buttons inside the
35:54 - self.create special buttons
35:56 - so i'll come here and i'll add this
36:00 - method
36:00 - here so i'll say self dot create square
36:03 - button
36:04 - and i'll say self dot create
36:07 - square root button so i'll say create
36:09 - squared button
36:12 - now i'll save this file and i'll run the
36:14 - code
36:16 - and as you can see these buttons have
36:17 - been added then i'll try to find the
36:20 - square of 3 so i said 3
36:21 - square which is 9 and then i'll again
36:24 - find the square root
36:26 - oops we forgot
36:29 - to actually add so i'll come here
36:33 - i'll change the square to square root
36:37 - so now if you run this thing again
36:40 - we try to find the three square then
36:42 - find its under root
36:44 - we get the actual output
36:50 - to change the operator symbols i'll go
36:52 - inside the object total label method
36:55 - and i'll simply replace the python
36:56 - operators with the actual operator
36:58 - symbols
36:59 - so first i'll say expression
37:02 - equals to self dot total expression and
37:05 - now
37:06 - i'll loop through all the operators from
37:07 - the operations dictionary so i'll say
37:09 - for operator comma symbol
37:14 - in self dot operations dot items
37:18 - i'll simply replace these values so i'll
37:21 - say expression
37:22 - equals to expression dot replace
37:26 - and now i'll replace the operator with
37:29 - the symbol so i'll also add
37:31 - white space around it so i'll say f and
37:34 - i'll say
37:35 - symbol now i'll change the self.total
37:38 - expression
37:39 - to this expression let's save this file
37:42 - and run it
37:47 - let me type an expression like 9 times 9
37:50 - now you can see
37:50 - that the operator symbols have been
37:52 - displayed
37:56 - for truncating the result i'll go to the
37:58 - update label method
37:59 - and use the slicing operator to limit
38:01 - its length to 11.
38:03 - so i'll add 11 at the end
38:09 - now i'll save this file and run the code
38:13 - and now if i say 1 divided by 3 equals 2
38:17 - and we can see that our result no longer
38:19 - overflows the screen
38:24 - to handle exceptions i'll come to the
38:26 - evaluate method and i'll put the eval
38:27 - function inside the try block
38:29 - i'll come here and i'll say try now i
38:32 - indent
38:33 - this code if an exception occurs
38:36 - i'll set the current expression to error
38:39 - i'll come here and i'll say
38:40 - accept exception
38:43 - oops exception as e
38:46 - here i'll just say self dot current
38:48 - expression equals to error
38:52 - and inside the final block i'll say
38:55 - finally
38:56 - i'll put self dot update label
39:00 - now i'll save this file and run the code
39:04 - and now if i do something like 1 divided
39:06 - by 0 i'll press equals 2
39:09 - we get error
39:13 - at this point our calculator is working
39:15 - correctly however
39:16 - it doesn't take inputs from the keyboard
39:18 - let's change that
39:20 - to make our calendar usable from the
39:21 - keyboard we need to bind the keys of our
39:23 - keyboard to the respective methods from
39:25 - our calculator class
39:27 - so first i'll create a method called
39:29 - bind keys so come here and i'll say
39:31 - def bind keys and inside this method
39:36 - i will say self dot window
39:40 - so self dot window
39:43 - dot bind and firstly i'll bind
39:47 - the enter key so i'll say return
39:52 - here i'll pass the function lambda it
39:55 - takes in an event
39:57 - and i'll execute self dot evaluate
40:01 - this line of code specifies that
40:03 - pressing the enter key is the same as
40:04 - pressing the equals to button
40:06 - now i'll do the same for the digit
40:08 - buttons and the operator buttons
40:10 - so first i'll loop through all the
40:12 - digits so i'll say for
40:14 - key in self dot digits
40:18 - i'll say self dot window dot bind
40:22 - and pass in key and for the function
40:25 - i'll say lambda
40:29 - which is two parameters the first is the
40:31 - event and the second is the digit
40:33 - i'll bind the digit to the key
40:37 - and i'll return self dot add to
40:40 - expression
40:41 - digit
40:45 - similarly for the operator buttons look
40:48 - through all the operators so i'll say
40:49 - for
40:50 - key in self dot operators
40:55 - self dot window dot bind
41:00 - key and for the function i'll again
41:02 - define a lambda function so i'll say
41:04 - lambda
41:06 - that takes in two parameters the first
41:07 - is the event and the second
41:09 - is the operator i'll bind the operator
41:12 - to the key
41:13 - and i'll say self dot append operator
41:16 - and pass
41:18 - operator
41:22 - now i'll call this method from the edit
41:24 - method so i'll come here
41:26 - and i'll say self dot bind keys
41:30 - i save this file and run the code
41:35 - now i'll use the keys of my keyboard to
41:36 - type 9 times 8
41:39 - i'll press enter and our calculator
41:41 - works as expected
41:47 - now that we have made our calculator
41:48 - fully functional let's create an exe
41:50 - file from our calculator pi file
41:52 - this will allow us to run the calculator
41:54 - app from any windows device without
41:56 - any python setup for this i'll use pi
41:58 - installer
41:59 - pi installer is a tool that allows us to
42:01 - convert a python application into a
42:03 - standalone executable
42:04 - let's first install the pi installer
42:06 - from pip
42:07 - so i'll see so i'll go to the terminal
42:10 - and i'll say
42:11 - pip install pi installer
42:18 - now that the pi installer is done
42:20 - installing i'll use it to convert calc
42:22 - dot pi to an executable file
42:23 - so i'll see pi installer installer
42:27 - and i'll say hyphen iphone one file
42:30 - iphone w and then the name of our script
42:32 - i'll say calc
42:33 - dot pi this one file flag
42:37 - specifies that our executable should be
42:39 - created as a single file
42:41 - and this w flag specifies that python
42:44 - should not bring up the terminal while
42:45 - running the calculator gui
42:47 - so i'll press enter
42:56 - so now i'll go to my workspace
43:00 - and we can see that the build and disk
43:02 - folders are created by pi installer
43:04 - let's open the disk folder and we can
43:06 - see that we have a calc.exe file
43:09 - let's open this file we can see that our
43:12 - calculator app
43:13 - is running from here as well i hope you
43:16 - found this project helpful
43:17 - i encourage you to try and add more
43:19 - buttons and modify this calculator as
43:21 - you please
43:22 - that's it for this video you can find
43:24 - all the links i mentioned in the video
43:25 - description
43:26 - if you want more of these videos let us
43:28 - know in the comments and if you like
43:29 - this video
43:30 - hit that like button subscribe to the
43:32 - channel and i'll see you in the next one
43:34 - happy programming
43:45 - you