00:00 - what's up guys i'm puneet from
00:01 - programmers and welcome back to this
00:03 - series on python
00:04 - till now we have covered four different
00:06 - compound data types
00:08 - lists tuples strings and dictionaries
00:11 - in this video we will learn about the
00:13 - final one
00:14 - sets in python sets are similar to how
00:17 - sets work in mathematics let's get
00:19 - started
00:21 - [Music]
00:28 - a set is a collection of items like
00:30 - lists
00:31 - and tuples however there are some
00:33 - important differences between them
00:36 - sets in python are like sets in
00:37 - mathematics a set cannot contain
00:40 - duplicate items
00:41 - and these items are not in any
00:43 - particular order
00:45 - also we can only use immutable objects
00:47 - in set
00:48 - like strings numbers and tuples so a set
00:51 - cannot have mutable objects
00:53 - like lists and dictionaries just three
00:56 - things to remember when we
00:58 - imagine sets in python number one items
01:01 - of a set
01:01 - are not in any particular order number
01:04 - two
01:04 - no duplicate items are allowed and the
01:07 - third one
01:08 - items must be immutable objects now that
01:11 - we know what sets are
01:13 - let's see how we can create them to
01:14 - create a set we place items inside curly
01:17 - brackets
01:18 - separated by commas like this so here
01:21 - i'll say animals
01:22 - equals curly bracket and then i will add
01:25 - the list of animals as
01:26 - dog cat
01:31 - tiger and elephant
01:36 - let me print this set and run it so i
01:38 - will say print
01:40 - animals when i press
01:43 - run then you can see the set was printed
01:48 - but you must have noticed that this
01:50 - order of animals
01:51 - is different from this order this is
01:54 - what i meant when i said that the
01:55 - items of a set are not in any particular
01:57 - order
01:58 - this is also the reason why set items
02:00 - also don't have indexes
02:02 - now let's see what happens if we try to
02:04 - create a set having duplicate items
02:07 - inside the set animals i will repeat the
02:10 - dog string twice
02:11 - so here i'll add another dog at the end
02:14 - and now if i press run then you can see
02:17 - that in the output dog is printed only
02:20 - once
02:21 - even though in the set definition dog is
02:24 - repeated twice
02:25 - the duplicate dog was removed from the
02:27 - set because sets in python automatically
02:30 - remove
02:30 - all duplicate items it's also possible
02:33 - to create a set
02:34 - that doesn't have any items to create an
02:37 - empty set
02:38 - we need to use the set function now we
02:40 - cannot use
02:41 - empty curly braces for this because it
02:43 - would create an empty dictionary instead
02:46 - so here i'll remove this old code and
02:47 - i'll say animals equals
02:49 - set and then i'll print
02:53 - animals oops animals now when i press
02:56 - run
02:56 - you can see that an empty set has been
02:59 - printed
03:01 - the set function that you see here can
03:04 - also be used to create
03:05 - non-empty sets i'll show you an example
03:08 - so here i'll add a list inside this set
03:11 - function
03:12 - i'll say cat dog
03:18 - tiger and elephant
03:22 - here we have passed a list inside the
03:24 - set function
03:26 - the set function converts this list into
03:28 - a set
03:29 - when i press run then you can see that
03:32 - this list
03:33 - has been converted to a set because it
03:35 - has curly braces instead of square
03:37 - braces
03:39 - here i have passed a list of four
03:41 - animals
03:42 - cat dog tiger and elephant and the set
03:44 - function has converted it into a set
03:47 - that is why the order has been changed
03:50 - we can convert other iterables like
03:52 - tuples dictionaries
03:53 - and strings into a set in a similar way
03:57 - now let's see how we can add items to a
03:59 - set
04:00 - sets in python are mutable we can add
04:02 - and remove
04:03 - items from them to add a single item to
04:05 - a set
04:06 - we use the add method i have this animal
04:09 - set
04:09 - we have been working on in this video
04:12 - let me add monkey to it
04:13 - to add it after the set's name i will
04:16 - type dot
04:17 - so animals dot and then i'll say add
04:21 - and inside the parenthesis i will pass
04:23 - the monkey string
04:25 - now let me print the animals set so that
04:27 - i can verify if monkey was added
04:29 - correctly or not
04:30 - so i'll say print animals and now when i
04:33 - press run
04:34 - then you can see that monkey was also
04:37 - added to the set
04:39 - we can also add all the elements of
04:40 - iterables like
04:42 - list tuples and other sets to a set for
04:45 - that
04:45 - we can use the update method let's take
04:48 - an example
04:49 - suppose we have a set and a list like
04:51 - this
04:52 - now we want to add all the items of this
04:55 - wild animals
04:56 - list to this animal set
05:00 - we can do that by using the update
05:02 - method like this so i can say
05:04 - animals dot update why
05:10 - animals now i'll print animals and see
05:12 - what i get
05:15 - when i press run you can see that
05:18 - leopard and tiger were added to animals
05:21 - list
05:22 - one thing to note here is that elephant
05:23 - is common in both animals
05:25 - and wild animals since sets cannot have
05:28 - duplicates
05:29 - the output has only one elephant
05:32 - by the way we can also pass multiple
05:34 - iterables to the update method like this
05:37 - so here along with wild animals i'll
05:39 - also add
05:40 - a set containing dolphins
05:44 - when i press run then as you can see
05:46 - dolphins was
05:47 - also added to the set of animals
05:51 - the update function added items from
05:53 - both
05:54 - wild animals and the set containing
05:57 - dolphins
05:58 - to the animal set before moving to the
06:01 - next section of the video
06:02 - i'd like to mention that the program is
06:04 - team has created an app that allows you
06:06 - to learn python from your phone
06:08 - the app contains bit size lessons that
06:10 - are easy to understand
06:11 - a built-in interpreter so that you can
06:12 - run python on your phone
06:14 - quizzes and many more features the app
06:16 - is available on both ios and android
06:18 - the links are in the video description
06:20 - below
06:22 - let's now learn how to remove items from
06:24 - a set to remove an item in a set
06:27 - we can either use the discard method or
06:29 - the remove method
06:30 - let's use the discard method first i
06:33 - have this set of
06:34 - animals now i'll use the discard method
06:36 - as
06:37 - animals dot discard
06:40 - let me discard the cat and now let me
06:43 - print animals to see what i get
06:46 - when i press run you can see that dog
06:49 - elephant and tiger are still in the set
06:51 - but cat has been removed
06:55 - now instead of discard let me try and
06:57 - use the remove method
06:59 - so here i'll say remove and when i press
07:01 - run
07:02 - i get the same output of course in
07:04 - jumbled order
07:07 - both discard and remove are used to
07:09 - remove an item from a set
07:11 - however there's an important difference
07:13 - between them
07:14 - if the item we are trying to remove is
07:16 - not in the set
07:17 - discard returns none whereas the remove
07:20 - method
07:21 - throws an error let me change cat to
07:23 - something like ferret here
07:25 - so i'll say animals.remove ferret and
07:28 - when i press
07:29 - run then python says there is an key
07:32 - error
07:33 - now when i use discard and run it
07:40 - you can see that no error was thrown
07:44 - we do not get any errors and our animal
07:46 - set is printed
07:47 - what happened here is that this code
07:50 - returned on because ferret is not in the
07:53 - animal set
07:54 - however we haven't assigned the return
07:56 - value to anything
07:58 - then this print statement prints the
08:00 - animal set
08:01 - by the way we can also remove all items
08:03 - in a set at once by using the clear
08:05 - method like this
08:06 - so here i'll remove this code and i'll
08:08 - say animals.clear
08:10 - and when i press run then you can see
08:13 - that animals is now an
08:15 - empty set let's see how we can find
08:19 - if an item is in the set or not similar
08:22 - to other compound data types
08:24 - we can check if an item is in a set or
08:26 - not by using the in keyword
08:28 - let's see an example so here i'll remove
08:30 - this old code
08:32 - and i'll say print
08:36 - tiger in
08:40 - animals when i press run then i get true
08:43 - because
08:44 - indeed tiger is present in the set of
08:46 - animals
08:47 - if you change tiger to something like
08:49 - ferret and run it so i'll say
08:51 - ferret when i press run then this time i
08:55 - get false
08:56 - because ferret is not present in the set
08:58 - of animals
09:00 - it is also possible to loop through
09:02 - items of a set
09:03 - like other compound data types let's see
09:05 - an example
09:07 - here i have the same old set from before
09:09 - i'll remove this code and i'll say
09:10 - for animal in
09:14 - animals print animal
09:18 - when i press run then you must have
09:19 - guessed the output by now
09:21 - all the animals are printed one by one
09:24 - however the order in which these items
09:26 - are printed is random
09:29 - let's take a look at python set
09:31 - operations now as i mentioned before
09:33 - the way sets work in python is similar
09:35 - to how sets work in mathematics
09:38 - in this video we will cover two set
09:39 - operations union
09:41 - and intersection suppose we have two
09:43 - sets
09:44 - domestic animals and wild animals like
09:46 - this
09:48 - the union of these two sets is a set of
09:50 - all items
09:51 - in both domestic animals and wild
09:53 - animals
09:55 - to find the union of sets we can either
09:57 - use the union method
09:58 - or use the pipe symbol let's see an
10:01 - example
10:02 - so here on my compiler i'll remove the
10:04 - whole code and i'll say
10:06 - domestic animals
10:09 - equals
10:13 - dog cat
10:17 - and elephant
10:21 - and then i'll see why animals
10:24 - equals lion
10:28 - tiger and of course elephant
10:32 - again now i can create the union of
10:36 - these sets by saying
10:37 - animals equals domestic
10:40 - underscore animals dot
10:46 - union wild underscore
10:50 - animals let me print the animals
10:53 - variable now i'll say print
10:55 - animals
10:58 - when i press run then i get a set
11:02 - containing
11:03 - animals from both the domestic animal
11:05 - set and the wild animal set
11:09 - the order of sets doesn't matter here i
11:11 - can reverse this order and i can say
11:13 - wild underscore
11:15 - animals dot union
11:18 - domestic underscore animals and when i
11:22 - press run
11:23 - i get the same output as i mentioned
11:26 - before we can also use the pipe
11:28 - symbol to find the union so here i could
11:30 - have also written
11:32 - wild animals pipe domestic animals
11:35 - when i press run i get the same output
11:42 - let's talk about intersection of sets
11:44 - suppose we have two sets
11:45 - domestic animals and wild animals like
11:47 - before
11:48 - the intersection of these two sets is a
11:50 - set of items that are common
11:52 - in both domestic animals and wild
11:54 - animals
11:55 - to find the intersection of sets we can
11:57 - either use the intersection method
11:59 - or use the ampersand operator let's see
12:02 - an example
12:03 - so i have the same set of domestic
12:05 - animals and wild animals from before
12:08 - and here instead of saying union i'll
12:10 - say wild animals
12:11 - dot intersection
12:15 - domestic animals
12:19 - now when i press run then i get a set
12:22 - containing
12:23 - elephant because elephant is the common
12:25 - element between domestic animals and
12:27 - wild animals
12:29 - now let's use the ampersand operator to
12:31 - find the intersection this time
12:33 - i'll say wild animals ampersand
12:37 - domestic animals and when i press run
12:40 - i get the same output as before
12:44 - you can find more information about
12:46 - different set operations
12:47 - and methods in our website
12:49 - programmers.com i'll include the link in
12:51 - the description
12:52 - below at this point we have covered all
12:54 - the basics of python sets
12:56 - before we end this video here's a task
12:58 - for you can you guess the output of this
13:00 - program
13:01 - i'll give you a couple of seconds to
13:02 - pause the video
13:05 - as always you'll find the answer to this
13:07 - question in our github repository
13:09 - i'll also include the link in the
13:10 - description below now let's recap what
13:13 - we learnt in this video
13:14 - a set is a collection of unordered items
13:17 - since the items do not have any order
13:19 - they also do not have any indexes a set
13:22 - also cannot contain
13:24 - duplicate items and all items of a set
13:26 - must be immutable
13:28 - although the items of a set need to be
13:30 - mutable sets
13:31 - themselves are mutable and we can add
13:33 - and remove items from a set
13:36 - sets in python are similar to sets in
13:38 - mathematics
13:39 - that's why we can perform operations
13:40 - like union and intersection of sets
13:43 - that's it for this video i hope you
13:44 - learned something if you're just
13:46 - watching the video without writing any
13:47 - code
13:48 - i highly encourage you to try the
13:49 - programs in this video on your own
13:51 - the only way you can be a good
13:52 - programmer is by trying
13:54 - by the way you can find all the programs
13:56 - from this video on github
13:58 - i have provided the link in the
13:59 - description below feel free to copy the
14:02 - programs
14:02 - and edit them as you please and if you
14:04 - have any questions and feedback
14:06 - use the comments section below in the
14:08 - next video we will learn more about the
14:10 - range function in detail
14:12 - which makes it easier to work with
14:13 - sequences of numbers
14:15 - join me in this video series and let's
14:17 - explore the exciting world of
14:18 - programming together
14:19 - if you like this video hit the like
14:21 - button now and also don't forget to
14:23 - subscribe to our channel
14:24 - and ring that bell icon so that you
14:26 - don't miss the next video thanks for
14:28 - watching
14:28 - and i'll see you in the next one happy
14:30 - programming