With timestamps:

00:00 - hello everyone I'm all now and this is
00:03 - building is for girls today as promised
00:19 - I will show you an example solution for
00:21 - one of the challenges I gave you in one
00:24 - of my previous videos if you don't know
00:27 - what I'm talking about make sure to look
00:29 - at the link in the description below
00:31 - first let's remind what the first
00:34 - challenge was all about we wanted a
00:36 - program that will first ask you to
00:39 - provide a number of interests then wait
00:42 - for you to type the number and then
00:44 - click enter take this volume and convert
00:47 - it into centimeters and finally print
00:50 - answer number interest is the number of
00:55 - centimeters where you replace number and
00:58 - result with the calculated values for
01:01 - example for two interest we would have
01:03 - two interest is 5.08 centimeters and to
01:10 - remind you bonus points were for
01:12 - handling errors and incorrect types for
01:15 - example if the user typed some text for
01:18 - example the name Ola instead of the
01:20 - number okay let's start the code I
01:24 - create the file called unit stat file
01:27 - and save it on my desktop first we need
01:29 - to print the message asking user to
01:31 - provide a number of interest and then
01:33 - store it somewhere for example in
01:35 - variable interest okay so let's type
01:38 - interest equals input hopefully you
01:42 - remember that input is a Python function
01:44 - that allows reading what user types and
01:48 - storing the value if you want if you
01:51 - don't know what it's all about make sure
01:53 - to check my previous video python basics
01:55 - user input and dealing with errors then
02:00 - we type provide a number of images next
02:03 - thing we would like to calculate is how
02:07 - many centimeters the given number of
02:09 - engines in quality one inch is
02:13 - to the point 54 centimeter so we have to
02:17 - multiply a number we got from the user
02:19 - by 2.54 so we will print the result as
02:24 - interest plus the text interest is then
02:28 - + and the value in variable interest
02:31 - multiplied by 2.54 and then text
02:36 - centimeters okay let's try to run our
02:40 - program in console so we type python 3
02:43 - units to the PI there is an error but
02:47 - why well the error is type error saying
02:50 - that we cannot multiply sequence by non
02:53 - end of type float as I told you in one
02:57 - of my previous video input function
03:00 - invite and return text not number so we
03:04 - need to make sure that we change somehow
03:07 - the text containing number into the real
03:10 - number in python and we can do that by
03:13 - using Python function named load and
03:16 - take this number and then multiply it by
03:19 - 2.54 let's do this right now we will
03:23 - wrap a variable interest in to float
03:25 - function like this now let's save file
03:28 - and run it in console now now we cannot
03:32 - display the value because we need text
03:35 - this is so annoying although we
03:37 - successfully converted our user input
03:41 - into number and made all the
03:43 - calculations to get number of
03:45 - centimeters now if we want to display it
03:48 - in print function we expect to have text
03:52 - so we need to take the calculated value
03:55 - and change it into text by using Python
03:58 - function named STR ok so let's wrap
04:01 - float interest multiple 2.54 with STR
04:06 - function now let's save the file and run
04:09 - it in console we type python 3 units at
04:13 - 5 now it worked but let's make our code
04:17 - a little bit nicer more beautiful and
04:20 - more readable because it's a little bit
04:23 - ugly now let's take this bit so now
04:26 - images multiple 2.54 and store it in a
04:30 - variable so the code is more readable
04:33 - let's call the variable cm from
04:35 - centimeters okay that's better and it
04:38 - still works nicely what we did is
04:41 - separating the calculation of number of
04:43 - centimeters from displaying that but we
04:47 - can go one step further and use feyten
04:50 - building method called format I know I
04:54 - haven't talked about it yet but I cannot
04:56 - resist introducing something new let's
04:59 - take a quick look at the Python
05:01 - documentation about this method it says
05:03 - that format performs a string formatting
05:06 - operation the string on which this
05:09 - method is called can contain literal
05:11 - text or replacement filter delimiter by
05:14 - curly braces each replacement field
05:16 - contains either the numeric index of the
05:19 - positional argument or the name of the
05:21 - keyword argument returns a copy of a
05:24 - string where each replacement field is
05:26 - replaced with a string value of the
05:28 - corresponding argument okay that was a
05:31 - little bit confusing even for me and I
05:33 - know how format method works but in the
05:35 - end it means that we have a text with
05:38 - some kind of placeholders here and there
05:41 - and then we provide the values for these
05:44 - placeholders at the very end and we use
05:46 - curly brackets to mark the places we
05:49 - want to put some values from our
05:51 - variables I like to think about format
05:53 - method like having some kind of template
05:56 - for example if I write an invitation or
05:58 - the letter I want to send to many people
06:01 - I have pretty much the same text and I
06:03 - just want to put a different address and
06:05 - name to each invitation and the name and
06:08 - address are this placeholders this curly
06:11 - brackets in format and the text of the
06:13 - invitation is the text we are running
06:16 - the format with so when we use format
06:19 - method we first write the text and to
06:21 - mark all the places where we want to
06:23 - inject the value our placeholders with
06:26 - the curly brackets and then use dot
06:30 - format and in parentheses would provide
06:33 - all the arguments on the variables we
06:36 - want to put into our
06:38 - holder's okay let's see it in action
06:40 - let's turn to print in our program first
06:44 - we want to have a number of images this
06:47 - will need a placeholder so we type curly
06:50 - brackets and then we type in just s and
06:53 - we want to display number of centimeter
06:56 - so we will need another placeholder
06:58 - finally we add centimeters then we take
07:02 - our whole text and after it adopt and
07:06 - type format that means we call method
07:09 - format on this text now in parentheses
07:13 - will provide interests and centimeters
07:15 - re apples remembering about correct
07:18 - order have you noticed that we no longer
07:20 - need to transform variable that stores
07:23 - centimeters to text using STR method
07:26 - format method is smart enough to do it
07:29 - for us so we don't need to remember
07:31 - about it every single time let's make
07:34 - our code even preacher we can take the
07:37 - inner part in print and store it in that
07:40 - separate variable so it's even more
07:42 - readable let's call it message and
07:45 - remember about naming your variables in
07:48 - a meaningful way this will expose to
07:51 - every person who read your code what was
07:54 - the intent of the code and it makes it
07:56 - much much easier to read okay but the
07:59 - question is can we make our code even
08:01 - nicer well of course we can let's take
08:05 - this line centimeters equals float
08:09 - inches multiple 2.54 and create a nice
08:14 - freezable functions after that all you
08:17 - can ask why we actually need function
08:19 - here the code is good enough it works so
08:22 - why we would like to do that imagine
08:25 - that we have two different files that
08:28 - want to do my very same thing but
08:30 - slightly different let's create a file
08:33 - named units PL dot v and let's save it
08:38 - in the same folder I'm saving it on
08:40 - desktop this program will do pretty much
08:43 - the same but instead of displaying all
08:46 - messages in English we will use polish I
08:49 - will type input with
08:51 - this messages like for they live sunny
08:54 - and then if I would like to calculate
08:56 - the number I would need to copy the
08:59 - whole thing again like this changing
09:01 - only the text but this is not that nice
09:04 - and in case we have 100 different files
09:08 - with 100 different languages that does
09:12 - pretty much the same and we somehow made
09:15 - a mistake and instead of multiplying by
09:18 - 2.54 we would multiply by 2.56 and we
09:23 - will realize that there is an error
09:25 - we'll need to go to every single file
09:28 - out of 100 and fix it this is not good
09:32 - and computer scientists don't like to
09:34 - repeat themselves but we can be smarter
09:37 - we can create a separate file we can
09:40 - call it a unit function Spotify and move
09:44 - the curve that calculates the value and
09:46 - make the function out of that and we use
09:50 - that in every single file who would like
09:52 - to have so in the unit 5 and units PL
09:55 - dot 5 let's create the file unit
09:58 - functions that fire them and save it on
10:01 - desktop inside we will define the
10:04 - function let's call it inches to
10:06 - centimeters and we wanted to return the
10:09 - calculation now when we go back to units
10:13 - PL dot fire file instead of centimeter
10:16 - variable in print we will call that
10:18 - created function with interest we get
10:22 - from the user let's save and run it in
10:25 - console Oh when we run it the program
10:29 - breaks saying that the function is not
10:31 - defined and this is true because in this
10:33 - file units PL dot 5 there is no function
10:38 - called interest centimeters but the
10:41 - thing is that feyten allows you to share
10:43 - the code between files yes we can let by
10:46 - 2 node to look into unit functions dot
10:49 - fire file and take the function which is
10:52 - defined we do that by using construction
10:55 - from name of the file we want to avert
10:58 - something import and then the name of
11:01 - the thing we want to import so in our
11:04 - scenario
11:05 - we'll have from unit functions import
11:08 - into centimeters where our unit
11:11 - functions is the name of the file we are
11:13 - importing our function from and please
11:15 - note that we are not typing dot py
11:18 - extension here at all typically when we
11:21 - use from import construction we place it
11:24 - at the very beginning of the file so
11:26 - let's do it here so we are typing from
11:30 - unit functions in our interest to
11:32 - centimeters we can also go back to our
11:34 - units file and use very same from import
11:38 - construction to use the same function
11:40 - here this way we can have different
11:43 - programs that shares the same thing
11:44 - isn't it awesome now let's see if it
11:47 - works let's go to the console and run
11:50 - vital 3 units PL to the PI it works the
11:55 - same is with units but what if we move
11:58 - our unit functions file to some other
12:00 - folder for example we will call it
12:03 - functions I will create a folder in
12:06 - console so in a desktop i will do m
12:10 - Kadir functions and now i will move the
12:13 - file by typing MV unit functions
12:18 - functions so I moved unit functions file
12:21 - to functions subfolder now when we try
12:25 - to run the program we get new error
12:27 - which is no model named unit functions
12:30 - so how we can access that now
12:33 - well python obviously has a way to do
12:36 - that and it allows that by adding the
12:39 - name of the founder before the name of
12:42 - the file and connected all with dot so
12:45 - in our scenario we'll have from
12:48 - functions dot unit functions in for
12:50 - interest centimeters let's fix our files
12:54 - then
12:58 - now when we run it again everything
13:00 - works of course using from import
13:04 - structure is more complicated when you
13:07 - have the file that is further away in
13:10 - some other folder but I won't cover it
13:13 - today because that's the topic for a
13:15 - separate video but you should be very
13:18 - proud of yourself because you just learn
13:21 - how to share your power between
13:22 - different files and different programs
13:24 - and this is really awesome now let's
13:27 - make our program even nicer remember in
13:31 - the video where I talk about all the
13:33 - challenges I told you that it would be
13:35 - really nice and this is for bonus points
13:38 - to make sure that program does not crash
13:41 - when you provide the value that is not a
13:44 - number for example if we run the program
13:47 - and instead of typing the number will
13:49 - type hola
13:51 - first let's look how our program caves
13:54 - when we do that now so we go to the
13:57 - console and type Python 3 units dot 5
14:01 - and now we type hola and click enter we
14:05 - get a value error I hope you remember my
14:08 - video about handling errors and
14:10 - exceptions and who will use now try
14:13 - except Clause we learned in the video
14:15 - and make sure that we display some a
14:18 - very nice message to user
14:19 - when the error occurs let's open our
14:22 - unit file and add try exact Clause these
14:26 - two lines will be in a block now after
14:28 - try then we type accept and the name of
14:32 - the error we want to handle in this
14:34 - scenario its value error and then in
14:37 - this block we specify what we want to
14:39 - display to the user when they made a
14:41 - mistake for example message it is not a
14:45 - correct number let's try it now in the
14:48 - console let's type hola and it looks
14:51 - very nice now okay so time for last
14:55 - improvement if we want to have the same
14:59 - try except Clause also in Polish version
15:02 - we need to add all the code and messages
15:05 - around it and once again it looks very
15:08 - similar so is there a way to
15:11 - extracted into function that we can use
15:13 - in both scenarios if you would compare
15:16 - what's the difference between Polish and
15:18 - English version we would realize that
15:20 - the only difference is their messages
15:24 - once in English and once in Polish so
15:28 - let's try to extract the separate
15:31 - function that we can use in both files
15:34 - we will open our unit functions file and
15:37 - we will copy paste whole thing from
15:40 - units from reading the input to printing
15:44 - the error message we wanted as a
15:46 - function so we need to type that and
15:48 - give it a name for example convert
15:51 - interests and all the code that we copy
15:54 - pasted should be invented so it is
15:57 - inside this function now when we look
16:00 - here only these parts provide number of
16:04 - images interest is sounding centimeters
16:07 - and it is not a correct number should be
16:11 - different depending on the language we
16:13 - are using so let's change them in two
16:16 - variables that we provide when running
16:19 - this function we can call it prompt
16:22 - message message and error message and
16:25 - replace text with them like this now
16:29 - let's go back to unit 5 and invert this
16:32 - function we can import next thing in the
16:35 - same from import statement by doing it
16:38 - after the comma now instead of this
16:41 - whole code we'll simply call the
16:43 - function which is defined in the unit
16:45 - functions file like this convert
16:48 - interest and then in parentheses we will
16:51 - provide three arguments first was
16:54 - message prompt which is provide number
16:57 - of inches than message number interest
17:01 - is number of centimeters and finally
17:04 - error message in this scenario it is not
17:07 - the correct number let's see if it works
17:10 - let's go to the console and type Python
17:13 - 3 units dot 5 yes it does now it's time
17:17 - to change or as computer scientists say
17:20 - refactor the unit's PL file we replace
17:24 - the code
17:24 - with convert interest and provide all
17:28 - three messages in Polish so what I
17:31 - either study you lost Ally to either
17:33 - sentimental and Kanye's new one yay it
17:38 - works you extracted the code and now you
17:41 - can create any number of files with
17:44 - different languages and reuse that
17:46 - simply by providing different messages
17:50 - in different languages isn't that
17:53 - amazing
17:53 - not small thing in our files is that we
17:57 - no longer use interest centimeters
17:59 - explicitly in the units and units PL
18:02 - files it is used but only inside convert
18:06 - interests which is in the same file as
18:09 - interest to centimeters so the import of
18:12 - interest centimeters is not needed
18:14 - anymore and we can remove it from units
18:17 - and units PL files I hope you had fun
18:20 - watching how I try to implement the
18:23 - challenge and that you enjoy looking how
18:26 - I try step by step improve my code as I
18:31 - already mentioned it's called
18:32 - refactoring and it's something that
18:34 - programmers are doing every day
18:37 - refactoring is about making code more
18:40 - robust more readable and containing less
18:44 - errors there is still the second
18:46 - challenge so if you haven't done it yet
18:48 - hurry up I placed the link to the video
18:51 - where I talked about both challenges in
18:54 - the description below so make sure to
18:56 - check it out I hope that he had fun
18:58 - today and you've learned something new I
19:01 - know it was kind of sneaky to add new
19:04 - things like format method and importing
19:07 - stuff but I really couldn't resist
19:09 - showing you something new but obviously
19:11 - it was not needed to write the program
19:13 - so I hope that you will forgive me let
19:16 - me know in the comments what was the
19:17 - hardest part of the challenge and don't
19:19 - forget about second challenge I will
19:22 - post a video with the example solution
19:24 - very very soon so if you want to learn
19:27 - how to program with me make sure to
19:29 - subscribe this channel
19:30 - and stay tuned have a lovely day
19:34 - see you

Cleaned transcript:

hello everyone I'm all now and this is building is for girls today as promised I will show you an example solution for one of the challenges I gave you in one of my previous videos if you don't know what I'm talking about make sure to look at the link in the description below first let's remind what the first challenge was all about we wanted a program that will first ask you to provide a number of interests then wait for you to type the number and then click enter take this volume and convert it into centimeters and finally print answer number interest is the number of centimeters where you replace number and result with the calculated values for example for two interest we would have two interest is 5.08 centimeters and to remind you bonus points were for handling errors and incorrect types for example if the user typed some text for example the name Ola instead of the number okay let's start the code I create the file called unit stat file and save it on my desktop first we need to print the message asking user to provide a number of interest and then store it somewhere for example in variable interest okay so let's type interest equals input hopefully you remember that input is a Python function that allows reading what user types and storing the value if you want if you don't know what it's all about make sure to check my previous video python basics user input and dealing with errors then we type provide a number of images next thing we would like to calculate is how many centimeters the given number of engines in quality one inch is to the point 54 centimeter so we have to multiply a number we got from the user by 2.54 so we will print the result as interest plus the text interest is then + and the value in variable interest multiplied by 2.54 and then text centimeters okay let's try to run our program in console so we type python 3 units to the PI there is an error but why well the error is type error saying that we cannot multiply sequence by non end of type float as I told you in one of my previous video input function invite and return text not number so we need to make sure that we change somehow the text containing number into the real number in python and we can do that by using Python function named load and take this number and then multiply it by 2.54 let's do this right now we will wrap a variable interest in to float function like this now let's save file and run it in console now now we cannot display the value because we need text this is so annoying although we successfully converted our user input into number and made all the calculations to get number of centimeters now if we want to display it in print function we expect to have text so we need to take the calculated value and change it into text by using Python function named STR ok so let's wrap float interest multiple 2.54 with STR function now let's save the file and run it in console we type python 3 units at 5 now it worked but let's make our code a little bit nicer more beautiful and more readable because it's a little bit ugly now let's take this bit so now images multiple 2.54 and store it in a variable so the code is more readable let's call the variable cm from centimeters okay that's better and it still works nicely what we did is separating the calculation of number of centimeters from displaying that but we can go one step further and use feyten building method called format I know I haven't talked about it yet but I cannot resist introducing something new let's take a quick look at the Python documentation about this method it says that format performs a string formatting operation the string on which this method is called can contain literal text or replacement filter delimiter by curly braces each replacement field contains either the numeric index of the positional argument or the name of the keyword argument returns a copy of a string where each replacement field is replaced with a string value of the corresponding argument okay that was a little bit confusing even for me and I know how format method works but in the end it means that we have a text with some kind of placeholders here and there and then we provide the values for these placeholders at the very end and we use curly brackets to mark the places we want to put some values from our variables I like to think about format method like having some kind of template for example if I write an invitation or the letter I want to send to many people I have pretty much the same text and I just want to put a different address and name to each invitation and the name and address are this placeholders this curly brackets in format and the text of the invitation is the text we are running the format with so when we use format method we first write the text and to mark all the places where we want to inject the value our placeholders with the curly brackets and then use dot format and in parentheses would provide all the arguments on the variables we want to put into our holder's okay let's see it in action let's turn to print in our program first we want to have a number of images this will need a placeholder so we type curly brackets and then we type in just s and we want to display number of centimeter so we will need another placeholder finally we add centimeters then we take our whole text and after it adopt and type format that means we call method format on this text now in parentheses will provide interests and centimeters re apples remembering about correct order have you noticed that we no longer need to transform variable that stores centimeters to text using STR method format method is smart enough to do it for us so we don't need to remember about it every single time let's make our code even preacher we can take the inner part in print and store it in that separate variable so it's even more readable let's call it message and remember about naming your variables in a meaningful way this will expose to every person who read your code what was the intent of the code and it makes it much much easier to read okay but the question is can we make our code even nicer well of course we can let's take this line centimeters equals float inches multiple 2.54 and create a nice freezable functions after that all you can ask why we actually need function here the code is good enough it works so why we would like to do that imagine that we have two different files that want to do my very same thing but slightly different let's create a file named units PL dot v and let's save it in the same folder I'm saving it on desktop this program will do pretty much the same but instead of displaying all messages in English we will use polish I will type input with this messages like for they live sunny and then if I would like to calculate the number I would need to copy the whole thing again like this changing only the text but this is not that nice and in case we have 100 different files with 100 different languages that does pretty much the same and we somehow made a mistake and instead of multiplying by 2.54 we would multiply by 2.56 and we will realize that there is an error we'll need to go to every single file out of 100 and fix it this is not good and computer scientists don't like to repeat themselves but we can be smarter we can create a separate file we can call it a unit function Spotify and move the curve that calculates the value and make the function out of that and we use that in every single file who would like to have so in the unit 5 and units PL dot 5 let's create the file unit functions that fire them and save it on desktop inside we will define the function let's call it inches to centimeters and we wanted to return the calculation now when we go back to units PL dot fire file instead of centimeter variable in print we will call that created function with interest we get from the user let's save and run it in console Oh when we run it the program breaks saying that the function is not defined and this is true because in this file units PL dot 5 there is no function called interest centimeters but the thing is that feyten allows you to share the code between files yes we can let by 2 node to look into unit functions dot fire file and take the function which is defined we do that by using construction from name of the file we want to avert something import and then the name of the thing we want to import so in our scenario we'll have from unit functions import into centimeters where our unit functions is the name of the file we are importing our function from and please note that we are not typing dot py extension here at all typically when we use from import construction we place it at the very beginning of the file so let's do it here so we are typing from unit functions in our interest to centimeters we can also go back to our units file and use very same from import construction to use the same function here this way we can have different programs that shares the same thing isn't it awesome now let's see if it works let's go to the console and run vital 3 units PL to the PI it works the same is with units but what if we move our unit functions file to some other folder for example we will call it functions I will create a folder in console so in a desktop i will do m Kadir functions and now i will move the file by typing MV unit functions functions so I moved unit functions file to functions subfolder now when we try to run the program we get new error which is no model named unit functions so how we can access that now well python obviously has a way to do that and it allows that by adding the name of the founder before the name of the file and connected all with dot so in our scenario we'll have from functions dot unit functions in for interest centimeters let's fix our files then now when we run it again everything works of course using from import structure is more complicated when you have the file that is further away in some other folder but I won't cover it today because that's the topic for a separate video but you should be very proud of yourself because you just learn how to share your power between different files and different programs and this is really awesome now let's make our program even nicer remember in the video where I talk about all the challenges I told you that it would be really nice and this is for bonus points to make sure that program does not crash when you provide the value that is not a number for example if we run the program and instead of typing the number will type hola first let's look how our program caves when we do that now so we go to the console and type Python 3 units dot 5 and now we type hola and click enter we get a value error I hope you remember my video about handling errors and exceptions and who will use now try except Clause we learned in the video and make sure that we display some a very nice message to user when the error occurs let's open our unit file and add try exact Clause these two lines will be in a block now after try then we type accept and the name of the error we want to handle in this scenario its value error and then in this block we specify what we want to display to the user when they made a mistake for example message it is not a correct number let's try it now in the console let's type hola and it looks very nice now okay so time for last improvement if we want to have the same try except Clause also in Polish version we need to add all the code and messages around it and once again it looks very similar so is there a way to extracted into function that we can use in both scenarios if you would compare what's the difference between Polish and English version we would realize that the only difference is their messages once in English and once in Polish so let's try to extract the separate function that we can use in both files we will open our unit functions file and we will copy paste whole thing from units from reading the input to printing the error message we wanted as a function so we need to type that and give it a name for example convert interests and all the code that we copy pasted should be invented so it is inside this function now when we look here only these parts provide number of images interest is sounding centimeters and it is not a correct number should be different depending on the language we are using so let's change them in two variables that we provide when running this function we can call it prompt message message and error message and replace text with them like this now let's go back to unit 5 and invert this function we can import next thing in the same from import statement by doing it after the comma now instead of this whole code we'll simply call the function which is defined in the unit functions file like this convert interest and then in parentheses we will provide three arguments first was message prompt which is provide number of inches than message number interest is number of centimeters and finally error message in this scenario it is not the correct number let's see if it works let's go to the console and type Python 3 units dot 5 yes it does now it's time to change or as computer scientists say refactor the unit's PL file we replace the code with convert interest and provide all three messages in Polish so what I either study you lost Ally to either sentimental and Kanye's new one yay it works you extracted the code and now you can create any number of files with different languages and reuse that simply by providing different messages in different languages isn't that amazing not small thing in our files is that we no longer use interest centimeters explicitly in the units and units PL files it is used but only inside convert interests which is in the same file as interest to centimeters so the import of interest centimeters is not needed anymore and we can remove it from units and units PL files I hope you had fun watching how I try to implement the challenge and that you enjoy looking how I try step by step improve my code as I already mentioned it's called refactoring and it's something that programmers are doing every day refactoring is about making code more robust more readable and containing less errors there is still the second challenge so if you haven't done it yet hurry up I placed the link to the video where I talked about both challenges in the description below so make sure to check it out I hope that he had fun today and you've learned something new I know it was kind of sneaky to add new things like format method and importing stuff but I really couldn't resist showing you something new but obviously it was not needed to write the program so I hope that you will forgive me let me know in the comments what was the hardest part of the challenge and don't forget about second challenge I will post a video with the example solution very very soon so if you want to learn how to program with me make sure to subscribe this channel and stay tuned have a lovely day see you
