00:01 - now okay hi everyone my name is willa
00:04 - that's a new and we will be answering
00:06 - your questions and teaching you guys
00:07 - javascript today so let's get into it
00:09 - um we are going to have a really great
00:12 - lesson i'm actually really excited about
00:13 - this one
00:14 - javascript is really interesting in that
00:16 - it gives us all of our
00:17 - functionality for a program so like if
00:19 - anything that's like interactable
00:21 - that's going to be javascript i know
00:23 - we've taught with some one-liners before
00:25 - but today we're going to get into like
00:26 - the nitty-gritty of javascript um
00:28 - i think we have five javascript lessons
00:30 - so it's something like the largest part
00:31 - of the course
00:32 - um but yeah get excited for it i'm gonna
00:35 - start sharing my screen
00:36 - and we're gonna go through the slides
00:38 - remember when i ask you for a thumbs up
00:39 - thumbs down we're gonna use our reaction
00:41 - buttons and if you have any questions
00:42 - just drop them in the chat
00:44 - all right so let's start sharing our
00:46 - screen i'm gonna minimize
00:48 - that for now so
00:52 - javascript part one let's get excited so
00:58 - getting started in javascript um pseudo
01:00 - code this is
01:02 - kind of interesting this isn't coding
01:04 - necessarily but it's a nice little
01:05 - planning step
01:07 - that we do um so say you want to make a
01:10 - website you want to make a game
01:12 - writing something like pseudo code will
01:14 - help you kind of plan out what kind of
01:16 - features you want
01:17 - so what kind of cascading code you want
01:20 - so this is an example like if
01:22 - this scenario is true say that
01:25 - so this is like a nice example of you
01:27 - planning out your code in
01:28 - words of english that aren't code before
01:31 - you
01:32 - execute it um and it's helpful just like
01:34 - get your mind square before you go into
01:36 - programming
01:37 - so a statement statements are
01:40 - instructions
01:41 - we give to the computer to tell it what
01:44 - to do
01:45 - so a statement is any complete line of
01:47 - code
01:49 - that's the basic way of thinking about
01:51 - it this is
01:52 - applicable but this is the way i like to
01:54 - think about it that a statement is let
01:55 - me get my pointer
01:56 - that a statement is any complete line of
01:58 - code so we see this little text box here
02:01 - or like this little image example this
02:04 - function ask name line of code
02:08 - that's just declaring this is a function
02:09 - it's called ask name
02:11 - prompt complete line of code the prompt
02:14 - is what is your name that's a that's a
02:15 - statement
02:16 - let x equal 10. that's a statement so
02:19 - all these are examples and statements of
02:21 - javascript
02:21 - [Music]
02:24 - syntax syntax is a set of rules that
02:27 - javascript follows to build a program
02:29 - so if you run into a javascript syntax
02:31 - incorrectly
02:32 - you'll run into a quote syntax error
02:36 - um this is a little bit interesting
02:38 - remember when we had html
02:40 - and we had things like um or css
02:43 - and we had things like color blue
02:47 - semicolon or we had things like p
02:50 - tags paragraph tags those are all
02:53 - examples of syntax
02:54 - javascript being its own coding language
02:56 - just like python just like java just
02:58 - like ruby
02:59 - has its own syntax and we need to follow
03:00 - that syntax so that the computer knows
03:02 - what we're saying
03:03 - with javascript if you don't follow that
03:05 - syntax when you're trying to run your
03:07 - code you'll notice that it
03:08 - i think in reply it's like a red um
03:11 - please correct me if i'm wrong i knew
03:13 - but it's like a red little blurb and
03:15 - it's like
03:16 - like error code like syntax
03:19 - error unable to run something like it
03:21 - says something like that it's pretty
03:22 - much like that yeah
03:23 - yeah so um that's basically what you're
03:26 - going to get if you don't follow
03:27 - javascript
03:28 - or javascript syntax excuse me um but
03:31 - a lot of i mean these are some very
03:32 - basic syntax errors but you'll notice
03:34 - that every single
03:35 - um line that we see here ends with a
03:38 - semicolon
03:39 - that's generally what's going to happen
03:41 - in javascript
03:42 - unless you're dealing with a function
03:44 - but we will get into that later
03:46 - so console.log
03:50 - console.log is a printing function that
03:53 - if you have taken java
03:54 - which i don't think this is this group
03:56 - um it's the same as system.out.print um
04:00 - so basically what this does is that when
04:02 - you run that program
04:03 - it will print that out onto the console
04:07 - so oh also the console is that little um
04:11 - squarespace where it previews your
04:13 - website and ripple it
04:14 - that's what we call the console um in
04:18 - languages like python and java it's like
04:20 - not that it's just like a black screen
04:22 - and it will print it out in like very
04:24 - simple white text
04:26 - but it still prints it out onto the
04:27 - screen which is really cool
04:29 - um so the message is sent and then
04:32 - displayed in the debugging console not
04:34 - on screen
04:36 - i don't think that's exactly correct
04:38 - because console.log should print it out
04:41 - to the console
04:43 - anew what do you think hold up the
04:46 - message is sent displayed to the
04:48 - debugging
04:49 - blog not to the screen i think that's
04:52 - incorrect
04:53 - actually yeah yeah because when
04:56 - like when you see this line console i
04:59 - won't move my mouse so that little bar
05:00 - will go away
05:02 - um console.log z it will print out
05:06 - the value of z so it will print out x
05:08 - plus y
05:09 - so it will be uh nine so it will print
05:12 - out
05:12 - nine and we see that in this case nine
05:14 - will be displayed so it will actually
05:16 - print out the number
05:17 - um alert and prompt we're gonna get
05:20 - really familiar with these today because
05:22 - this is actually what our example's
05:23 - about
05:24 - so both of these functions make a pop-up
05:26 - appear on screen with a message of your
05:28 - choice
05:29 - so like console.log you put the message
05:31 - in in the parentheses
05:33 - and a prompt message will display both a
05:36 - message
05:36 - and an input box the user can type
05:38 - something in it
05:40 - okay so this this is an example of an
05:43 - alert
05:44 - and this is an example of a prompt we're
05:46 - gonna go through these each
05:48 - so let's talk about syntax really
05:49 - quickly because i know we talked about
05:51 - that earlier
05:52 - alert tells the computer that we want an
05:55 - alert
05:56 - we're going to do brackets and whatever
05:58 - is in the brackets is going to be what's
06:00 - displayed
06:02 - it's text so we're going to put our
06:03 - quotation marks just like we do
06:05 - with anything else and we're going to
06:08 - write what we want to say
06:09 - and at the end we're going to add our
06:11 - classic semicolon that finishes it all
06:13 - off and tells the computer
06:14 - we're done with our line of code here
06:16 - and that
06:18 - shows in this alert so has anyone ever
06:19 - gotten um an alert
06:21 - on their computer and it you like try
06:24 - and click on something and it says like
06:26 - this like you can't go back or it says
06:29 - like this computer
06:30 - says something if you if you're unsure
06:33 - what i'm talking about you probably know
06:35 - what i'm talking about i'm just doing a
06:36 - bad job of explaining it
06:37 - um a new do you want to try explaining
06:39 - it what like an alert is
06:40 - i tried i'm probably not good at it i
06:43 - mean it's kind of like
06:46 - it is kind of hard to explain it's just
06:48 - i think i think
06:50 - sorry if i pronounced this wrong but
06:52 - julie
06:53 - julie do i like in the comment
06:57 - section like he knows or he or she knows
07:00 - what it is i think people get it okay
07:03 - yeah yeah so that's good if you're
07:06 - unsure
07:07 - you'll see it in our example a prompt is
07:08 - basically an alert but we have an input
07:10 - text bar
07:11 - so prompt different than alert but same
07:13 - syntax
07:14 - right so instead of saying alert we just
07:16 - say prompt and then we get an input text
07:17 - box
07:20 - if you're a little bit shaky on that
07:21 - once you see the example i think you'll
07:23 - get it
07:23 - um data types so data types are the
07:26 - formats in which data can be stored in
07:28 - javascript this is also the same for
07:30 - java
07:31 - so the simplest data types are numbers
07:34 - i don't like to call these numbers i
07:35 - like to call them integers
07:37 - um oh no we're going to stick with
07:40 - numbers we're going to stick with
07:41 - numbers for now i think we get into the
07:43 - difference between
07:44 - numbers later where everything that is a
07:47 - number
07:47 - is a number so everything that
07:51 - is a numerical value whether it's a
07:53 - whole number or a decimal
07:55 - is a number um this
07:58 - i'm gonna disagree with the slide here
08:00 - see this one two three e5
08:03 - i don't think that's an oh is a
08:05 - mathematical number
08:06 - sorry i thought we were talking about
08:08 - say this was um
08:10 - say this was the letter p like a random
08:13 - letter
08:13 - not a mathematical letter this would be
08:16 - a string
08:17 - because you can't have a numerical value
08:19 - with there's like a random letter in it
08:20 - but since
08:20 - e is a mathematical letter this is a
08:22 - number
08:24 - strings anything that is text
08:27 - so letter series of letters so words
08:31 - um smiley face commas
08:35 - blank spaces so anything that's not a
08:39 - number
08:39 - is a string yes
08:43 - um the difference between these things
08:46 - when you're talking about it is that
08:48 - numbers if a computer recognizes a value
08:50 - as a number it can add it to other
08:52 - things so that allows us to use
08:53 - arithmetic
08:54 - so if we recognize 3 as a number we can
08:57 - add it to
08:58 - another number like 5. but if we
09:01 - fail to do that and it thinks that if
09:03 - this is a string instead of giving me
09:05 - the answer 3 plus 5 is 8 it will give me
09:07 - 3 plus 5 is 35 or something because it
09:10 - will try and just add a string onto
09:12 - a different thing so a good example of
09:14 - this take our 3 plus 5 example
09:16 - 3 plus 5 are both numbers i put them in
09:18 - javascript i want to add them together
09:20 - the answer is going to be 8.
09:22 - i don't define them as numbers i define
09:24 - them as strings 3 plus 5 are both
09:26 - strings if i say
09:27 - 3 plus 5 as a string it's going to give
09:30 - me the answer
09:31 - 35 because it's just going to put the
09:33 - two strings and put them together
09:36 - or it's not even going to work because
09:37 - the addition operator doesn't work with
09:39 - strings
09:39 - unless you're doing concatenated
09:41 - statements which we'll get into later
09:44 - a boolean is a value that is either true
09:46 - or false this goes back to the idea that
09:48 - code is like binary and computers are
09:50 - binary so
09:52 - booleans are often thought of as true or
09:54 - false
09:55 - they can be um that's not exactly true
09:58 - most of the time you're going to see
09:59 - them as true or false they can also be
10:01 - yes or no
10:02 - they can also be zero or one
10:05 - but those are the only values that can
10:06 - be a boolean you can't make
10:08 - three or four a boolean you can't make
10:11 - um
10:13 - you can't make absolutely and no way a
10:16 - boolean it's
10:17 - yes or no true or false zero one it's
10:20 - binary it's black and white
10:22 - so um an undefined is an empty value
10:25 - now i know we're looking at this here
10:27 - and we're like this is an empty value
10:29 - it's not it's a space an
10:32 - undefined means that there's nothing
10:34 - there but putting this
10:36 - space in a string gives it space okay so
10:39 - declaring variables
10:41 - so variables are containers which can
10:43 - hold pieces of data
10:45 - they can be for number strings or
10:47 - booleans they can be for any of the data
10:49 - types
10:49 - so to create a variable you must make
10:51 - both the container
10:53 - and fill it with the value so you have
10:55 - to say
10:57 - like very simple example let
11:01 - x equal 10 so that's
11:04 - declaring a variable called x and then
11:07 - making it equal to 10.
11:10 - in this we're calling it number
11:13 - so let number that's declaring a
11:16 - variable
11:17 - i personally wouldn't name it number
11:19 - because that's a category of data
11:22 - so i mean
11:26 - that's why it says name with a letter or
11:28 - underscore so personally
11:29 - number since the category of data i
11:31 - wouldn't use that i usually use
11:33 - letters like x y z p whatever letter you
11:37 - want
11:37 - um but if you're using it also with a a
11:40 - code
11:40 - you could use it like something that
11:42 - helps you define it with the code so
11:44 - um so let number
11:47 - so that's what our variable is called
11:49 - this statement right here
11:51 - let number um the let you'll notice it's
11:53 - in blue
11:54 - let means um
11:58 - create this thing
12:01 - this variable called number
12:05 - that's what this statement does this
12:06 - just creates that quote
12:08 - container that can hold a variable
12:12 - then we get into number equals 10
12:15 - so initialization assigning a value use
12:18 - an equal sign and value must be valid
12:21 - so a string should be in a string excuse
12:24 - me
12:24 - a string should be in a string and a
12:27 - number should be in a number
12:29 - so these two would actually come one
12:32 - after another you would see
12:34 - let number and then right below that you
12:36 - would see number equals to 10.
12:38 - and those two lines of code would
12:41 - initiate the variable for you
12:43 - now this isn't really commonly seen
12:46 - because you can condense it down to one
12:48 - line
12:48 - which we see here let number equal 10
12:53 - and this just condenses these two lines
12:55 - of code into one line
12:57 - let number let this variable number
12:59 - equal to 10.
13:01 - um operators
13:04 - if you have trouble remembering stuff
13:07 - like i do
13:09 - i would suggest maybe taking like a
13:11 - handy dandy little screenshot of this
13:13 - table
13:14 - that's just me because i know when i
13:16 - started coding i would forget those all
13:17 - the time might just be me
13:21 - but i would forget them all the time so
13:23 - operators for arithmetic these are just
13:25 - normal arithmetic operators
13:27 - and remember how i said if we define
13:29 - something as a number
13:30 - we can use it as a number these all have
13:33 - to do with numbers you can't use these
13:35 - for strings like you can't say this
13:40 - plus that like that's not how that works
13:43 - unless you're doing it in concatenated
13:45 - statements so
13:47 - these are all for arithmetic
13:48 - specifically
13:50 - so some are special so like the modulus
13:53 - one here
13:54 - one parenth parentheses
13:58 - not parentheses oh my gosh percent
14:01 - symbol
14:02 - one percent symbol two equals one two
14:05 - percent symbol two equals zero
14:07 - this one's a little weird um do we see
14:09 - it on the next slide
14:11 - or do i explain it now i'll explain it
14:13 - now
14:14 - this is like the remainder theory so
14:17 - like
14:18 - basically what it does is it says how
14:21 - many times can
14:22 - this fit into this and then what's the
14:25 - remainder of that so like
14:26 - how many times can two fit into two well
14:28 - it fits in one time but how
14:30 - what is the remainder of that the
14:31 - remainder is 0 because if you put 2 into
14:34 - 2
14:34 - one time there is 0 remainder how many
14:36 - times does 1
14:37 - fit into 2 well it fits in one time so
14:40 - then the remainder of that
14:42 - is 1 because one into two is one and
14:45 - then you have one left over
14:46 - so it gives you the remainder of your
14:48 - division problem basically that's what
14:50 - the
14:51 - that's what the percent symbol means it
14:53 - gives you the remainder of your given
14:55 - division problem
14:56 - so yeah division modules returns the
14:59 - remainder of the two operand
15:01 - um decrement so let i equal zero
15:06 - i equals minus minus this is gonna be
15:08 - like a really common pattern you're
15:09 - gonna see here
15:10 - um let the variable i equals zero
15:14 - and then i minus minus so we see over
15:17 - here
15:17 - decreases that by one so that basically
15:20 - says
15:20 - i is zero but every single time that
15:23 - this
15:24 - code runs i decreases by one so then i
15:27 - now equals negative one
15:30 - yeah these three are the trickiest
15:33 - these the division modulus the decrement
15:35 - and the increment
15:37 - um increment sorry
15:40 - words are hard everyone
15:43 - so let's go through the list addition
15:47 - we just use we just use one one plus
15:50 - sign subtraction
15:51 - you know another division fraction
15:55 - symbol
15:56 - multiplication the asterisk you're going
15:58 - to find that over your 8 on your
15:59 - keyboard
16:00 - um these are pretty standard this is
16:02 - basically how you define math if you
16:03 - were to put in like a microsoft word
16:04 - document
16:05 - these ones are kind of specific
16:09 - double asterisks experimentation so if
16:11 - anyone doesn't know what that means it's
16:12 - one number to the power of another
16:14 - number
16:16 - division modulus we talked about that
16:17 - returns the remainder of a division
16:19 - problem
16:20 - decrement um reduces
16:24 - the value of a variable by one
16:27 - and double pluses is we increase the
16:30 - value of a variable by one so it adds
16:32 - one
16:33 - um you cannot change these to like make
16:37 - them add
16:38 - two you know what i'm saying like double
16:41 - plus will never add two it will only add
16:43 - one
16:43 - double minus will never subtract two it
16:45 - will only subtract one
16:46 - because these are just the given easy
16:48 - functions that they made to like help
16:49 - you along with things if you want to
16:51 - subtract 2
16:52 - from like i you would say i equals i
16:54 - minus
16:55 - 2. javascript is really one of my
16:58 - favorite things so i'm glad i'm glad
17:00 - we're getting it
17:01 - so um concatenation i talked about this
17:04 - a little bit
17:05 - um so arithmetic operators are binary
17:08 - operations that you apply to operands
17:10 - you can add strings and numbers together
17:12 - adding strings together
17:13 - is like very iffy like i know it you
17:16 - said
17:16 - i i know i said you couldn't do it and
17:18 - that basically meant that like
17:20 - you can't really do it but there's like
17:22 - a way that you can
17:25 - so console.log here there were
17:29 - in brackets this is like given text
17:32 - so everything that's in quotation marks
17:36 - um it's gonna define it as a string
17:40 - that's what java does if it's not in
17:41 - quotation marks and if it's a number
17:44 - it's gonna define it as an integer but
17:46 - if it's in these quotation marks it's
17:47 - going to define it as a string
17:49 - so what we use these um
17:52 - plus signs for is to concatenate
17:55 - statements so that we can insert
17:56 - things into each other so there were
18:00 - stringing quotation marks we end the
18:03 - string
18:04 - no more string we add the value 15
18:08 - to the string so we like add it into the
18:11 - sentence it's like a
18:12 - block it's like a block and we just put
18:14 - it in
18:15 - you know it's like puzzle pieces that
18:17 - kind of fit together i think that's a
18:18 - good way to describe this
18:19 - so by doing this it's basically like
18:21 - we're just saying there were
18:23 - puzzle piece 15 puzzle piece
18:26 - the trees are 15 trees but now there are
18:29 - different puzzle piece 10 puzzle piece
18:33 - and by adding these plus signs we just
18:36 - make the puzzle pieces
18:38 - able to fit together
18:42 - going to talk about this and then i know
18:43 - that the chat's blowing up so we're
18:45 - going to answer questions because i know
18:46 - this is like a tricky concept
18:48 - you can also add variables and strings
18:50 - together and this is where this is most
18:52 - useful this is where concatenation is
18:54 - most useful
18:56 - so variable let y equal 9
19:00 - variable letting y equal 9. so we're
19:04 - letting
19:04 - a variable exist the variable is called
19:07 - y y has a value of 9. it has an
19:09 - integer number value of nine
19:13 - console log i have
19:16 - space y apples by allowing concatenated
19:20 - statements
19:21 - we can insert variables that have an
19:24 - unknown or
19:25 - not predetermined value into sentences
19:29 - with text
19:29 - that we need to show on screen so say
19:32 - you're making a game
19:34 - and the game in the game you accumulate
19:36 - points
19:37 - you might want those points to be a
19:39 - variable because different people
19:40 - playing the game
19:41 - can get different amounts of points
19:43 - therefore you would use a concatenated
19:45 - statement like this one
19:47 - so you would say like you have y
19:50 - points and why could be your variable
19:52 - for how many points you have
19:54 - i see that there's like a lot of chat
19:56 - going on a new what are some common
19:58 - questions that we have
20:00 - so um so there's a question to like
20:04 - explain the previous slide
20:06 - but let's first do this question so
20:09 - okay let me say it in the first
20:11 - statement why is there a plus sign
20:14 - after 15 but not after the 10
20:18 - good question so after the 15
20:21 - that you have to add on another puzzle
20:23 - piece so like
20:24 - remember how i set each of these as
20:26 - puzzle pieces by adding this
20:28 - extra plus sign we could have the
20:30 - ability to add another puzzle piece
20:32 - since the sentence ends after there are
20:35 - 10
20:36 - we don't need to add any more puzzle
20:37 - pieces therefore we don't need to add
20:39 - another plus sign
20:40 - after the 10. does that make sense
20:42 - hopefully whoever asked that question
20:44 - hopefully that
20:44 - is a good explanation yeah they said
20:46 - yeah perfect
20:48 - is there any other questions that we
20:49 - have one more for this slide so
20:52 - it's um they say are you saying
20:56 - concatenate is simply for inserting a
20:59 - number
21:00 - into a string yes
21:03 - basically but you're never really going
21:05 - to see it for inserting numbers like
21:06 - this is a very simple where we insert
21:08 - numbers the most you're going to see it
21:10 - use is for
21:11 - variables that have unknown value so
21:13 - where you're really going to see
21:15 - concatenated statements
21:16 - is this example right here where we have
21:18 - a variable
21:19 - of usually unknown value in this case
21:22 - the value is 9
21:23 - and we stick it in because we need it to
21:26 - say something at the end
21:27 - but you don't know the value of the
21:29 - variable so we stick in
21:30 - a concatenated statement like this so
21:32 - that the variable is presented and it
21:34 - can have a value
21:36 - but we don't have to like recode every
21:39 - single time there's a different value
21:42 - so they're really helpful for variable
21:44 - insertion
21:46 - okay they said thank you no problem okay
21:48 - so we needed to go back to the previous
21:50 - slide
21:51 - yeah because caitlyn she didn't exactly
21:54 - grasp the concept i think like the
21:56 - like the special three
21:59 - yeah probably yeah okay let's go over
22:03 - these again
22:03 - um real quick division modulus does
22:06 - anyone remember doing division
22:08 - in like maybe third grade and you would
22:10 - do like long division
22:12 - and you had um like
22:15 - your division number and then you had
22:16 - your remainder does anyone know the term
22:19 - remainder for math when you're talking
22:20 - about division
22:21 - so like let's say i wanted to divide
22:24 - 3 into ten if i'm using this division
22:28 - modulus
22:29 - my answer would be i can fit three into
22:32 - ten three times but i have one as a
22:35 - remainder
22:37 - the division modules if i were to use 3
22:39 - and 10 for the division modulus
22:41 - the answer would be 1.
22:44 - so it just shows the remainder decrement
22:47 - and increment are the exact opposite of
22:49 - each other
22:50 - so decrement you subtract one
22:53 - from a value and increa increment
22:56 - you add one to a value
23:02 - i know it's a little tricky you really
23:04 - use these with variables only
23:07 - like variables only like say
23:10 - i'll give you an example say i wanted a
23:13 - game
23:14 - a game perfect if i answer it's a quiz
23:18 - show i'm making a game and it's a quiz
23:20 - show
23:21 - if i answer a question right i get one
23:23 - point
23:24 - if i don't answer a question right i
23:26 - lose a point
23:28 - right i either get a point or i lose a
23:30 - point plus one minus one
23:32 - so i might have a statement that says if
23:35 - question
23:36 - answered correctly
23:39 - points plus plus because i'm adding one
23:42 - to the points
23:44 - i might have another statement that says
23:46 - if points answer
23:48 - incorrectly points minus minus we'd take
23:51 - one away from the value of points
23:54 - does that does that help explanation yes
23:56 - no maybe if it doesn't help i think i'm
23:58 - going to get a new to explain it because
23:59 - i think she can do a really good job
24:00 - with that
24:01 - i think caitlyn in the chat she says i
24:04 - think i get it now so i think she got it
24:06 - awesome awesome awesome awesome all
24:08 - right
24:09 - um string concatenation operators
24:12 - comparison
24:13 - so this is very much like logic um
24:18 - this isn't for this isn't for numbers i
24:21 - mean it kind
24:24 - all of these operators i'm about to talk
24:26 - about or
24:28 - are for logical statements
24:31 - something true is something not true
24:36 - that is the question that is being asked
24:39 - by these operators
24:42 - that's what they do their purpose
24:44 - depending on the kind of
24:47 - data type is to answer the question
24:50 - is the condition true or false they
24:54 - work on a boolean system
24:57 - so equal to is my one value over here
25:01 - equal to my other value over here is one
25:04 - equal to two
25:06 - this is our example here if one is equal
25:09 - to two
25:10 - we all know one is not equal to two
25:13 - therefore the answer in the computer's
25:16 - brain
25:17 - is false and therefore the code
25:20 - underneath this
25:21 - will not run because 1 is not equal to
25:26 - 2.
25:28 - this one equal to the triples equal sign
25:31 - is equal to
25:32 - as like strict so it really it like
25:36 - it takes like a more intense look at the
25:40 - code um
25:43 - in terms of like what it looks at
25:47 - um i'm not super familiar with that
25:50 - operator i've personally never used it
25:53 - um a nude can you speak to that a little
25:55 - bit i think for like the triple equal
25:58 - that's like more for
25:59 - comparing if it's like the same data
26:01 - type i'm pretty sure
26:03 - yeah yeah but i think
26:07 - you know what i won't like like yeah
26:10 - yeah let's just say
26:11 - no in our collective coding experience
26:14 - me and anu if we have never really seen
26:17 - this or used it
26:18 - you don't really see it or use it that
26:20 - much we'll just leave it at that
26:22 - this is very much sufficient for a lot
26:24 - of the coding you will do
26:26 - will c will interact with and most
26:28 - coding operators will use the just the
26:30 - double equals
26:33 - i want everyone to remember this
26:35 - exclamation point
26:36 - means not so when we're thinking about
26:39 - things like
26:40 - in what they are we're going to think of
26:43 - exclamation points
26:44 - mean not so having exclamation point
26:47 - equal sign means the first value over
26:50 - here is not
26:51 - equal to the other value over here same
26:54 - thing here
26:55 - this value over here is not equal to
26:57 - this value over here but on a more
26:59 - strict sense
27:02 - so see this
27:05 - if one is not equal to do ah
27:09 - if one is not equal to two does that
27:13 - like one is not equal to two therefore
27:16 - true therefore the code will run because
27:19 - it is true
27:22 - right if we had 2 here instead if 2 is
27:25 - not equal to 2
27:26 - the code would not run because 2 is
27:29 - equal to 2
27:30 - 2 is not in equal to 2.
27:37 - yeah let's no go back
27:40 - so exclamation points mean not so equal
27:43 - to
27:44 - not equal to these ones
27:47 - standard math operators greater than or
27:49 - less than these are used for numerical
27:51 - values only
27:52 - well these four really are you can use
27:54 - these for strings
27:56 - if you're really careful about it um
27:58 - i've seen this like
27:59 - string length which is something we'll
28:01 - get into like how long
28:02 - a string of characters is um but
28:05 - really you're going to use these for
28:07 - like numerical operators and these you
28:09 - can use for
28:10 - both but mostly numerical operators
28:12 - these
28:13 - greater than less than standard math
28:17 - greater than or equal to less than or
28:18 - equal to also pretty standard math
28:21 - these are the ones that are like a
28:22 - little bit confusing okay
28:25 - is the green part of the code acetyl
28:28 - code
28:28 - or a function the green part of the code
28:31 - is a comment
28:33 - remember how we learned comments this i
28:36 - have a feeling
28:37 - this was done by um another instructor
28:41 - and i have a feeling that they were
28:43 - using dark mode in reply or something
28:45 - like that
28:46 - because you know how replies usually
28:48 - white well you can change it to dark
28:49 - mode and therefore it turns
28:51 - like the background is black um so
28:53 - comments usually gray when you're in
28:55 - normal replit
28:56 - but they turn green when you're in dark
28:57 - mode i think so yes they're comments
29:00 - um this is also how you do comments um
29:02 - it's just like in java double slashes
29:04 - are comments
29:06 - yes i think besides that they're good
29:10 - awesome okay operators
29:13 - logical these are um
29:17 - you can see these like for booleans too
29:20 - but like we're not going to get into
29:21 - that because that's more complicated
29:23 - uh for now we're just going to see those
29:24 - numbers i want to talk about this
29:27 - this code for a second this has wrong
29:30 - syntax
29:30 - i have been informed in this i'm going
29:32 - to annotate it with the correct syntax
29:36 - okay so the red is the correct syntax
29:38 - it's actually brackets like this
29:41 - the brackets in the middle these two
29:43 - brack everything is within one set of
29:45 - brackets
29:47 - so the red brackets are the correct
29:51 - brackets
29:53 - and the um white brackets don't exist
29:57 - yes so it should be one equals equals
30:00 - two
30:01 - double line two equals equals two closed
30:04 - bracket
30:05 - open bracket one equals equals two and
30:08 - and
30:09 - two equals equals to close bracket so
30:11 - these are actually a little bit of a
30:12 - mistake
30:13 - um in the syntax so i want everyone to
30:16 - take note of that because this is not a
30:17 - hundred percent correct
30:19 - yes okay operators
30:22 - and and it means and so
30:26 - if that basically just tacks on another
30:28 - layer of the conditional statement so
30:30 - like
30:30 - if this thing is true and this thing is
30:34 - true
30:34 - then we move on but what both of these
30:37 - things have to be true
30:39 - not just one of them not just the other
30:42 - double lines mean or so
30:45 - um you know how we had and where both
30:47 - things had to be true well or just says
30:50 - one or the other have to be true
30:53 - now both can be true if we use the or
30:55 - operator both
30:56 - can be true but one of them like at
30:59 - least one has to be true
31:01 - both can be true but at least one of
31:03 - them
31:05 - yes no maybe so how do we feel about
31:06 - that
31:08 - that's i think all of our operators for
31:10 - today i know there's a lot of them
31:12 - that's why i said write them down
31:13 - if you're anything like me write them
31:15 - down
31:16 - oh i'm so glad we're getting this i love
31:18 - this
31:20 - i'm really proud guys because i
31:22 - generally when i learned this i was so
31:24 - confused so
31:25 - you guys are a lot better at it than me
31:27 - um
31:30 - dom content loaded dom content loaded um
31:33 - wait until dom finishes loading so you
31:35 - can add script
31:37 - tag in the heading section um
31:41 - this is weird so basically if anyone has
31:44 - ever noticed
31:45 - i think in mary like maybe our first or
31:48 - second example
31:49 - i used a dom content loaded because i
31:52 - wanted the script tag in the very
31:54 - beginning because i wanted them to be in
31:55 - the same place
31:58 - this is really just a preference thing
32:00 - if you never learn this
32:01 - you're not going to be a bad programmer
32:03 - and if you use this all the time you're
32:04 - not going to be a better programmer than
32:06 - someone who doesn't use this all the
32:07 - time
32:08 - this allows you to put your script tag
32:10 - in the heading section
32:11 - where the css tag is so it's not just at
32:14 - the bottom because if anyone has noticed
32:16 - the script tag is actually usually at
32:17 - the bottom of your html file
32:20 - um so if you want at the top you can use
32:23 - dom content loaded
32:27 - and do all that stuff uh it's also an
32:30 - event listener
32:31 - but we're gonna talk about that later
32:33 - because we
32:34 - do not like it's not applicable right
32:37 - now
32:38 - it's gonna come more when we're like
32:39 - doing more complex things on the website
32:41 - so yeah if there's any questions about
32:44 - that you can ask me later
32:46 - but for now we're gonna go into our
32:49 - reply
32:50 - for the day so i'm gonna drop the link
32:51 - in the chat i'm gonna also get rid of my
32:54 - pointer
32:54 - i'm gonna drop the link in the chat yes
32:57 - remember we're gonna click this little
32:58 - arrow as soon as we get there we're
32:59 - gonna click the arrow
33:00 - and we're gonna press fork we're gonna
33:03 - press fork
33:05 - we're gonna click the arrow and we're
33:07 - gonna press fork so this is our fun
33:08 - little replied example today you're
33:10 - going to learn how to do
33:11 - an alert website so if anyone was
33:12 - confused about the alerts
33:15 - world's most annoying website um dare to
33:17 - try this is a button
33:19 - this is an alert this is an alert
33:23 - and it says i'm an alert box um
33:26 - this is the second alert this is the
33:27 - third fourth fifth
33:29 - alerts will never end well maybe they
33:32 - did
33:32 - and then they end i only put a couple
33:34 - because i wanted you guys to explore
33:36 - with it and also not have to run through
33:37 - it 500 times
33:40 - for them to end but
33:44 - basically that's what we're going to do
33:45 - today so
33:47 - world's most annoying website um button
33:50 - on click
33:51 - my function there to try this is
33:53 - probably the most confusing piece of
33:55 - code
33:56 - in at least the html document uh let's
33:58 - go through that
34:00 - so button um is
34:03 - this it's a button on click remember
34:06 - our um class remember our um
34:10 - pseudo classes for css when we said when
34:13 - our mouse is hovering over something
34:15 - it's kind of like that but this one
34:17 - basically means that when the button is
34:18 - clicked
34:19 - something happens yeah so
34:22 - on click so when the button is clicked
34:26 - my function this means
34:29 - it's going to execute my function
34:33 - called it's gonna execute the function
34:35 - in the javascript called my function
34:38 - and then dare to try is what the button
34:40 - just says that's the words on the button
34:43 - so let's talk about what a function is
34:46 - first i like to think of functions
34:48 - as um like a little instruction booklet
34:52 - and each function is its own instruction
34:55 - booklet
34:55 - and when you say do when you say execute
34:59 - a function
35:00 - what that means in java or javascript or
35:04 - in python um
35:07 - that it just goes through that book of
35:10 - instructions
35:11 - and just executes every single one of
35:13 - them
35:14 - so having different functions it's just
35:16 - like having different instruction
35:17 - manuals and when you say
35:18 - execute this function it just goes
35:22 - through and executes
35:23 - the instruction manual basically so like
35:27 - you could have a function called
35:28 - house and you could put all of the
35:30 - things in it that tell you how to build
35:31 - a house and you could say execute
35:33 - function house and it would build a
35:35 - house
35:36 - right so it's a little it's a little
35:38 - interesting but this is called function
35:40 - my function
35:41 - we'll get into the syntax of this in a
35:43 - minute
35:44 - and then these are all my various alerts
35:46 - that you just saw
35:48 - um so function my function this is the
35:51 - syntax of a function so we declare it as
35:53 - a func this is javascript by the way
35:55 - this is in our javascript file this is
35:56 - javascript function
35:58 - this is a function it declares it as a
36:00 - function
36:02 - it gives it a name my function is the
36:04 - name you can change this name but if you
36:06 - change this name here
36:07 - you need to change this name here
36:10 - because
36:11 - this will call on a function called my
36:13 - function and if you
36:14 - don't change the name here
36:17 - then it will not work
36:21 - parentheses whenever we declare a
36:23 - function we always have
36:25 - function name parentheses nothing goes
36:28 - in these parentheses
36:29 - um which if anyone can see it's a void
36:32 - function because of that
36:33 - you're only going to deal with void
36:34 - functions for now um
36:37 - void functions are interesting we're not
36:38 - going to go into the meeting now you
36:39 - don't need to know what they mean right
36:41 - now
36:41 - but void functions basically just like
36:43 - don't really have anything
36:45 - about like they're not bringing in
36:47 - values from anywhere else so that's what
36:48 - we're going to call them void for now
36:50 - um so function my function void
36:54 - then we have our opening tag and our
36:56 - closing tag
36:57 - and that says anything that's in these
36:59 - tags is the function so anything that
37:01 - is in these tags is the instruction
37:03 - manual
37:05 - and then we just have a various bunch of
37:07 - alerts
37:09 - and the alerts we know our syntax alert
37:11 - declares it as an alert
37:13 - and then what the alert says and then we
37:15 - always finish it off with our
37:16 - handy-dandy semicolon
37:18 - um before the challenges for this week
37:20 - is add an alert with
37:21 - options so if you're stuck on how to do
37:24 - that um
37:25 - remember our it's not alert it's
37:27 - something else
37:28 - and if you need more hints than that ask
37:31 - me
37:32 - challenge to add an alert with text
37:33 - input um
37:36 - that's another fun one um remember it
37:38 - was in the slides
37:39 - and an alert with choice that has a
37:41 - visual output i t
37:42 - text detailing and the decision made
37:44 - this is more for the advanced
37:46 - class um because you need to add another
37:48 - function in
37:50 - but yeah i'm going to stop sharing my
37:52 - screen
37:53 - and that's the workshop so i'm going to
37:56 - stop recording