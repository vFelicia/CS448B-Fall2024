00:00 - today we're gonna be talking about um
00:02 - just iteration
00:03 - and what i mean by iteration is
00:04 - basically like looping so like
00:07 - things like four loops while loops will
00:08 - be going over
00:10 - and how those work in java
00:13 - so first off um just like i said
00:15 - iteration is basically
00:17 - um you can do a bunch of things
00:20 - um in sequence to like a block of code
00:22 - and you can basically just repeat the
00:24 - same block of code over and over again
00:26 - for a certain amount of times so an
00:29 - inner
00:30 - like um technically speaking in
00:32 - iteration is sort of like
00:34 - one one loop around uh like
00:37 - running the code once so if you want to
00:39 - iterate over a piece of code
00:41 - like say five times that just means like
00:43 - running that piece of code
00:45 - five times
00:50 - all right so how java does iteration
00:54 - is basically through looping so living
00:57 - in java is basically
00:58 - you have um you like have a specific
01:01 - code inside a loop
01:02 - and i'll iterate it over it for a
01:04 - certain amount of time
01:06 - so it's basically um the same ideas
01:09 - as like iteration
01:14 - so um there are two kinds of loops
01:17 - or there are two in general there are
01:19 - two kinds of moves in java so the first
01:21 - one
01:21 - is basically like a for loop where um
01:24 - and then the other one is a while loop
01:26 - these are very similar like
01:28 - they both do like looping over a block
01:29 - of code but they're
01:31 - a little bit like there's a little bit
01:32 - of a nuance um
01:35 - which which will like affect when you
01:38 - want to use a for loop and one you want
01:39 - to use a while loop
01:41 - so um i'm just gonna
01:45 - um open up this image
01:48 - and this is basically a flowchart of a
01:50 - for loop
01:52 - so basically in a for loop you um
01:55 - have like a you have sort of a counter
01:59 - variable
01:59 - so usually it's called i and it starts
02:02 - at the value
02:03 - um usually zero but for this one it's
02:05 - two
02:06 - um a for loop will then do a check like
02:08 - is i less than or equal to six
02:11 - or something like that um if it's true
02:14 - it'll like
02:14 - perform whatever action you put inside
02:16 - the block and then
02:18 - next it'll increment the variable um
02:22 - a certain amount of times until this um
02:26 - this condition is false and they'll stop
02:28 - um this will make more sense once we get
02:30 - into like
02:31 - the syntax of a of a for loop so i'll
02:34 - come back to that
02:36 - um any questions about so far
02:40 - um yes um can you just tell us what
02:42 - exactly that
02:43 - uh would print out of course
02:46 - um basically for this specific loop
02:49 - um we'll start at over here so start um
02:52 - i equals two
02:54 - so we have this counter variable called
02:56 - i and we give it a value of two
02:58 - um inside the for loop it will do a
03:00 - check so is i
03:01 - less than six or is i less than or equal
03:03 - to six
03:04 - um right now the current value of i is
03:06 - two so that is true
03:08 - we'll then do on print i plus one so
03:11 - we'll print out
03:12 - um yep
03:18 - okay does it print
03:21 - two or does it print three is it adding
03:23 - one to the number
03:25 - yeah so we'll basically print out what
03:28 - i plus one is so print out three
03:34 - and then like afterwards it'll increment
03:37 - i so i equals i plus two
03:39 - so now i is four um it'll do this check
03:42 - again
03:43 - is i less than or equal to six that is
03:45 - true
03:46 - so then it will print out um i plus 1 so
03:49 - 4 plus 1
03:50 - so it'll print out 5. and then it'll
03:52 - like continue until i is
03:54 - i is not less than or equal to 6. so
03:58 - and then it'll exit the program um
04:01 - basically this will just print out
04:03 - um let me give me a second to like do
04:06 - the math in my head
04:07 - it will print out three five and seven
04:12 - basically um this one
04:16 - this will um make more sense once i show
04:18 - you like
04:19 - what a four loop looks like in code but
04:22 - um
04:23 - this is sort of just like the general
04:25 - looping structure
04:27 - so we can like come back to this once i
04:29 - get into like four loop and while
04:31 - syntax
04:36 - yeah so next we're just gonna go over
04:39 - like the syntax of a for loop
04:41 - so in a for loop um you have the four
04:45 - parentheses and there are three
04:46 - statements um
04:49 - there are cert they're like
04:52 - there's like certain rules of like what
04:53 - each of these statements are
04:55 - but um i'll come back to that once we
04:59 - get into like the looping examples
05:02 - and then inside like you have the curly
05:05 - brackets and then you have weber block
05:07 - you want to like loop over
05:09 - um a while loop is a little more simple
05:12 - it's basically while parentheses there's
05:14 - like a boolean condition
05:15 - that you want to check um inside the
05:17 - while loop and then there's like the
05:19 - curly brackets
05:20 - and then whatever code you want to like
05:22 - go over
05:25 - so first let me um share you
05:30 - this first looping example this is just
05:33 - a demo of before this
05:35 - i'll just paste in chat here um just
05:37 - remember to like
05:39 - to fork before you change your code um
05:42 - and i'll just go over what this does
05:51 - so if i just run this um
05:54 - what the code actually does is it will
05:56 - print um
05:58 - basically um the counter variable i
06:02 - and hello like how many times you want
06:04 - so
06:05 - right now ten times um basically
06:09 - in the for loop you have a counter
06:12 - variable
06:12 - um usually people will call it i and
06:15 - then you'll have like a boolean check as
06:17 - your statement two
06:18 - and then your statement three is an
06:20 - increment so
06:22 - um let's go back here so statement one
06:26 - is basically you're initializing
06:28 - a counter variable so the variable if
06:30 - you count how many iterations
06:32 - you're gonna to go over so how many
06:35 - times are you going to lose
06:36 - in this um this for loop
06:40 - so you're going to initialize it here
06:43 - the next one is statement 2 is your
06:45 - conditional check
06:46 - so i is i less than um
06:50 - the maximum amount of times you want to
06:51 - loop over and then statement three
06:54 - is when you increment i so are you gonna
06:57 - like is it gonna be like i
07:00 - is gonna increment by one each time or
07:02 - is it gonna like increment by two
07:04 - um i don't think we've gone over what
07:07 - plus plus means
07:08 - in the primitive section but plus plus
07:11 - is basically
07:12 - um it increments i by one um there's
07:15 - also like
07:16 - minus minus which will decrease i by one
07:20 - but for now um the this basic for loop
07:24 - is like
07:25 - for integer i equals zero so like
07:28 - the counter is going to start at zero um
07:31 - if i is less than the number of
07:33 - bonds that we want to print out um and
07:36 - then at the end of each for loop
07:37 - i is going to increment by one any
07:39 - questions about this
07:42 - yes um so so the logic is if
07:45 - i is less than the number of lines yep
07:50 - i guess what i'm wondering is when does
07:52 - the increment uh
07:53 - incrementing it i by 1 happen before
07:57 - or after the print printing of the line
08:01 - sure um let me
08:04 - draw out sort of like the a flow chart
08:07 - for this so basically the
08:09 - general logic is you're going to
08:11 - initialize a counter variable i
08:14 - and then next what's going to happen
08:17 - is the java is going to do a conditional
08:20 - check
08:21 - so so basically what happens is you have
08:25 - in i equals zero
08:28 - the next thing um java's going to do is
08:31 - it
08:31 - it's going to do the statement to like
08:34 - the conditional check
08:35 - so is i less than num lines
08:39 - afterwards it's going to be like their
08:41 - print
08:44 - hello so it's going to be whatever is
08:47 - happening
08:48 - inside this code block so this line of
08:50 - food
08:52 - and then finally it's going to do i plus
08:55 - plus
08:56 - so the increment um usually happens
08:59 - or yeah the increment happens at the end
09:02 - of each loop
09:03 - and then it's going to go back and do
09:05 - this conditional check
09:06 - and then this is like the general
09:08 - structure of the loop um if it turns out
09:11 - that like
09:12 - this um conditional like i let's say
09:15 - like you
09:16 - print this out 10 times so like
09:20 - um and then um we're at this point where
09:23 - like
09:24 - over here i equals 11. if this
09:27 - conditional is false
09:29 - it will then go and exit the loop
09:34 - is that a little more clear basically
09:37 - i don't i don't think this has been
09:39 - explained before
09:41 - like explicitly in like in classes
09:44 - but i would recommend that like
09:47 - basically
09:48 - all semicolons think of semicolons as
09:51 - like
09:51 - the period at the end of the sentence so
09:54 - semicolons just determine like how it
09:57 - helps java
09:58 - think of determine like which where the
10:02 - lines of code are like
10:03 - what is code basically um should line 12
10:07 - be empty
10:08 - um yeah this is valid code so
10:11 - basically um for system.out.printline
10:16 - um it'll if you leave it empty it'll
10:19 - basically print out
10:21 - it's basically kind of just like
10:22 - pressing enter
10:24 - and then printing out like an empty line
10:28 - um if you want to like
10:32 - yeah basically it'll print out just the
10:34 - empty line i know
10:35 - like skip to the next line so basically
10:38 - for this
10:39 - um this will print out um
10:43 - basically zero hello one hello it'll
10:46 - print
10:46 - all of that out up until nine it won't
10:50 - print out
10:50 - ten hello because um i haven't put the i
10:53 - less than or equal to num line so only
10:55 - print out when i
10:57 - is um zero to nine
11:01 - um there's also like this other trick so
11:04 - basically for for loops um we have these
11:08 - three statements right
11:09 - you can actually leave some of these
11:11 - statements blank
11:13 - so if i leave if i like initialize
11:16 - uh enter like j outside over here
11:20 - i can actually leave this first
11:21 - statement blank because j has already
11:23 - been initialized
11:24 - somewhere else this is just something to
11:27 - um keep in mind
11:29 - i wouldn't recommend like actually doing
11:31 - it this way
11:32 - just because it makes your code
11:33 - unbeatable but um
11:36 - in case like you see it in other
11:37 - people's code this is like
11:39 - this is valid code basically any
11:42 - questions about this
11:46 - i have a different question about why
11:49 - can't you just
11:50 - print why can't you just print lm
11:53 - left parenthesis why can't you just
11:55 - print j itself why do you have to put
11:58 - integer period t o string in front of it
12:02 - um basically so string
12:06 - and um and integers are different types
12:10 - and java is a little peculiar about like
12:14 - what types can you sort of like add
12:16 - together
12:17 - so okay because you're adding it to that
12:20 - other string
12:21 - okay yes right if you were if you were
12:24 - just printing
12:24 - if you were just printing the number and
12:26 - you didn't have another string in there
12:28 - could you just say
12:29 - print ln link paren right paren
12:32 - can you do that or can you yeah okay
12:36 - yeah so basically um
12:39 - i think like so
12:43 - java will i'm actually not too sure like
12:47 - if java will get angry if i
12:50 - wait let me actually try this so
12:53 - sometimes java will get angry
12:55 - if you like try to add a add an integer
12:57 - to a string
12:58 - and sometimes it won't it's just very
13:01 - peculiar about like
13:02 - when you're like adding two types
13:04 - together so right now it's like
13:06 - it's fine with it so this is like
13:09 - technically you can do this
13:11 - um i just personally i just like being
13:13 - careful and like
13:14 - doing integer.2 string and converting
13:16 - into a string because
13:18 - some languages are like very well some
13:21 - languages just won't like this
13:24 - but like other languages like job and
13:26 - python
13:27 - they might they may or may not be
13:29 - flexible with this
13:30 - um this might not work for like other
13:33 - types so if i have like a double
13:35 - um maybe it won't work i'm just
13:38 - yeah this is just personally like
13:42 - i like doing like the string conversion
13:44 - because like i've worked with other
13:46 - languages where like
13:47 - like doing just like j plus 5
13:50 - will like make make the compilers mad
13:53 - but like
13:55 - for yeah it's just it's just my habit so
14:01 - um i was going to come back and like
14:03 - explain this but
14:05 - um i guess like my explanation like
14:08 - drawing outside
14:10 - all right so
14:13 - next um let's just move on to the while
14:16 - loop double done
14:18 - so for a while loop it's not exactly
14:20 - like a for loop
14:21 - where you have like three statements
14:23 - it's like
14:24 - a little bit complicated a while loop is
14:26 - just the while keyword
14:28 - front a parenthesis with a conditional
14:31 - check in it
14:32 - and then your brackets with your um with
14:35 - your code in it
14:37 - so let's just move on to this wow
14:40 - demo um basically over here we have like
14:44 - a while loop where that takes in like
14:47 - user input
14:48 - so um we first like scan in the user
14:51 - input if the user input is not
14:53 - 5 we'll just um print out basically
14:56 - whatever
14:57 - you type in so to do a quick demo
15:05 - once this runs this will basically be
15:07 - like i can like type in like
15:10 - random gibberish and then it will just
15:16 - it'll basically just print out whatever
15:17 - i can
15:19 - except when i print out five it'll just
15:21 - print out by and it'll exit
15:23 - this wow and the code
15:29 - so basically um what's happening here
15:32 - is just what whenever we like run this
15:36 - while we
15:36 - for each loop we'll do this conditional
15:39 - check
15:40 - while this conditional is true we'll
15:42 - continue looping over this
15:44 - and then once it's false we'll exit the
15:47 - loop
15:48 - um any questions about this so you have
15:51 - a
15:52 - question chat so this code is to reprint
15:54 - the user input
15:55 - exactly all this code does is it will
15:57 - echo back whatever you um
15:59 - whoever you typed in so if i
16:02 - see over here um it'll first print out
16:05 - the original user input
16:06 - asdf but then this line 14
16:10 - basically um changes user input
16:13 - uppercase
16:13 - and reassigns it the user input and then
16:16 - once i run the same
16:17 - like print statement as line flow um
16:20 - you'll see that it's like all cats
16:22 - um i can also like add something outside
16:25 - the file loop so
16:26 - um let's say like system
16:30 - [Music]
16:33 - outside for a while loop
16:37 - um it's pretty simple all you have is
16:39 - like a single conditional check
16:41 - so is user
16:45 - input equal
16:48 - to buy
16:51 - um remember that like this is actually
16:54 - let me raise this because
16:56 - this is pretty confusing or it can be
16:59 - pretty confusing
17:01 - um is user input by basically
17:04 - this is like the question um
17:08 - while this is true we'll like execute
17:11 - code
17:16 - in this and then it'll loop that
17:20 - so while this is true it'll continue in
17:22 - this cycle
17:24 - um if it's not true it'll exit the loop
17:29 - so then the question becomes like what
17:31 - code
17:32 - is this so like
17:35 - what code is going to be executed movie
17:38 - and just like with the for loop
17:40 - it's everything inside of the curly
17:42 - brackets
17:45 - so we'll just like run all of these
17:48 - lines of code
17:49 - in sequence um does that make it a
17:53 - little clearer
17:55 - yeah oh yeah yeah
17:58 - see the general rule for like for java
18:01 - is
18:02 - anything inside of curly brackets counts
18:05 - as its own block of code
18:07 - so semicolons um basically denote like
18:11 - statements
18:12 - sort of like sentences and curly
18:15 - brackets are kind of like paragraphs
18:17 - so this is this is a block of food
18:21 - and everything inside
18:24 - of like the curly brackets in the main
18:27 - statement
18:28 - or in the main method counts also counts
18:31 - as its own block of code
18:35 - um so basically
18:39 - yeah this is all we've gone over for
18:41 - like the four loops
18:43 - so we have like statement one is like
18:46 - the
18:46 - initializing the counter variable
18:49 - statement two is just like the
18:50 - conditional check
18:51 - and statement three is the um the
18:54 - incrementation or i don't think that's a
18:58 - word
18:58 - it's like it it increments basically the
19:00 - counter
19:04 - um i don't know do you guys want to like
19:07 - do this example
19:08 - or basically this will just
19:12 - print everything like one two three but
19:15 - not
19:15 - four um
19:19 - and then while you again it's just like
19:22 - you have a while and then conditional
19:23 - check
19:24 - and they'll perform everything inside
19:25 - the curly brackets
19:27 - the thing for a while loop to watch out
19:29 - though is notice that unlike for loop
19:32 - um there isn't really like
19:36 - there isn't really a fail safe where
19:37 - like you have a counter and there's like
19:40 - a specific like there's a specific
19:42 - number of leads that can like
19:44 - go like there's a specific number of
19:46 - iterations you can basically go through
19:49 - so notice how for loops i have like this
19:51 - counter variable that keeps track of
19:53 - like how many times can i like
19:55 - go over this code but in while loops we
19:58 - don't have that
20:00 - so um when you're writing with a while
20:02 - loop just be very careful
20:04 - that you aren't um you aren't
20:07 - accidentally making
20:08 - an infinite loop so um in this example
20:12 - we've created our own like counter
20:14 - variable i
20:16 - and we keep track of that like inside
20:18 - the while loop conditional
20:20 - um you can also have things like just
20:23 - like in the demo code where it's like
20:25 - while like while the user doesn't
20:28 - um input phi um
20:31 - i'll like keep on running the soup but
20:33 - there's like a definite condition
20:35 - where like this wildly ends
20:41 - um and so like just make sure that
20:44 - you aren't actually creating a situation
20:46 - where like you can't exit
20:49 - and that um that is like really common a
20:53 - really common mistake for while loops
20:56 - um it can happen in for loops but for
20:59 - loops are generally
21:00 - like that's like it's rare in that case
21:07 - so um i think we only have like 20
21:10 - minutes left so
21:12 - um you can like go over this example on
21:14 - your own it's kind of similar
21:16 - to um to like the
21:19 - demos but um like they have this counter
21:22 - variable
21:23 - and they're just like they're like doing
21:25 - the conditional check and they're
21:26 - incrementing
21:27 - so if like you're writing code like this
21:29 - make sure you always increment your um
21:32 - your counter every time
21:36 - so next um we're just gonna go over two
21:39 - important keywords
21:40 - for looping so the first one is break um
21:43 - if you remember from the switch
21:45 - statement break basically
21:47 - exits something for you so in the case
21:50 - of loops
21:50 - break will basically um break you out
21:53 - movie
21:54 - and then continue is just sort of a way
21:56 - to skip
21:58 - um skip something and do things so
22:00 - continue is just like i'm going to the
22:02 - next
22:03 - iteration i'm not gonna like um
22:06 - do whatever else is in the code after
22:08 - the community
22:10 - any questions about this
22:17 - all right so i'm gonna um
22:21 - first do the continue demo
22:26 - and we can check out this code
22:32 - so basically in this case i have like
22:35 - a for loop where um where i'm basically
22:38 - gonna um
22:40 - have a counter so
22:43 - wait so i have this first integer called
22:46 - counter
22:47 - that's not purpose for me and then
22:49 - inside the fourth
22:50 - i'm gonna loop over this 10 times except
22:54 - i'm gonna um skip three and i'm going to
22:57 - continue
22:58 - with three um
23:01 - the other code is like basically
23:04 - other than that i'm gonna just add um
23:07 - i'm gonna increment my counter so
23:10 - what's happening is
23:14 - basically um counter should
23:17 - this should this loop should run ten
23:19 - times but because i'm skipping three
23:22 - um the counter should only count up to
23:25 - nine
23:27 - so i
23:32 - [Music]
23:34 - equals
23:37 - sorry just a moment let me grab my
23:40 - drawing probably again
23:44 - so basically i equals
23:48 - zero and then um
23:51 - in this case of this force i is less the
23:54 - condition was i is less than ten
23:56 - um and then
24:02 - i'm going to increment counter if
24:05 - counter
24:09 - isn't three and then i'm going to
24:12 - continue digging over
24:14 - what's basically increments you
24:16 - increment the counter
24:18 - and then you check if counter you do the
24:21 - you increment the counter first so
24:24 - you're coming down and you said size
24:26 - less than 10. the first thing you do is
24:28 - increment the counter to one
24:34 - and then after incrementing it you check
24:36 - to see if the
24:38 - counter is equal to 30 is
24:42 - is not equal to three no
24:45 - so what's happening is basically um for
24:48 - code you always read code top down so
24:50 - the first thing i'm doing
24:51 - is i'm checking if i equals three if i
24:54 - was three i'm printing out the statement
24:57 - that i'm skipping um i'm skipping three
25:01 - and then i'll continue what continue
25:04 - does
25:04 - is it'll basically um ignore everything
25:08 - at the bottom here
25:09 - and it'll just go to next loop
25:13 - and then you will ignore the the
25:15 - increment
25:17 - yeah basically continue enforce the
25:20 - increment
25:22 - yeah it will basically um ignore
25:25 - everything that's after it inside of the
25:28 - loop
25:29 - so everything that's like after this
25:32 - continues
25:33 - um it'll basically skip over once i hit
25:36 - the continue keyword
25:39 - um the general gist of this code is i'm
25:42 - counting each time like the loop is run
25:47 - so if the if statement wasn't here
25:50 - this counter would be 10 because i went
25:52 - over the um
25:54 - the loop 10 times right however
25:57 - once i have this checked like if i go
25:59 - three print out i'm skipping three i'm
26:01 - gonna continue
26:02 - um what's happening is it'll skip over
26:06 - the third
26:10 - this makes it a lot more clear so like
26:12 - basically
26:13 - when i equals three it will just like
26:16 - um it will just skip everything after
26:20 - the company
26:21 - so continue basically like um
26:24 - it's nothing super like complicated it's
26:26 - just like
26:28 - anything after the um continued keyword
26:30 - is just skipped over
26:34 - any other questions is it okay if i move
26:38 - on from this one
26:41 - yeah yes sweet
26:46 - all right and then the last demo i'm
26:49 - going to show
26:50 - is the brake demo
26:55 - so brake um will basically break you out
26:58 - of the boot
27:00 - um it's pretty useful
27:04 - like in certain conditions so like
27:08 - i remember i said like remember when i
27:10 - said um
27:12 - in wild loops like you generally once
27:15 - you want to like um want to avoid like
27:19 - infinite loops where like
27:21 - where um it isn't possible for like
27:24 - whatever your
27:25 - whatever condition you're tracking to be
27:27 - false but
27:28 - that's kind of like not exactly accurate
27:31 - so there there are actually times where
27:34 - you want to lose infinitely
27:35 - over something um think about like at
27:38 - any time you like run a program
27:41 - your code never like when i'm running
27:43 - this browser
27:44 - it doesn't just run once and exit right
27:47 - um
27:48 - it's like here for like until i exit out
27:51 - of it
27:51 - like by pressing the x button um
27:54 - what's happening is this um program is
27:57 - actually running on
27:58 - infinitely and then there's like
28:01 - somewhere in the infinite loop
28:03 - like when i click on this like x button
28:06 - and close the program it'll like break
28:08 - out of that loop
28:10 - and this is like sort of what's
28:11 - happening here so i have this
28:13 - infinitely while true i'll run this code
28:17 - and in this code like you don't have to
28:20 - worry too much about like
28:21 - what exactly i'm like doing so like
28:24 - basically i'm
28:25 - like whenever i type in something um
28:28 - i'll
28:28 - basically like either repeat it back or
28:31 - like if it's something in the switch
28:33 - statement i'll like
28:34 - uh type in a response or something or
28:36 - like the program will give me back the
28:38 - response
28:39 - so say like i type in hi it'll like
28:41 - print out hello
28:42 - um stuff like that um this is just like
28:46 - another example of a switch statement if
28:48 - you want to like check it out
28:49 - um the more important part is i also
28:52 - have the ability to break out of this
28:55 - infinite loop
28:56 - so when i type in five um
28:59 - it'll the system will basically print
29:01 - out five and it will just
29:03 - exit this while loop um so it's sort of
29:06 - really similar to
29:07 - the first file loop we saw so it's the
29:10 - same idea of like
29:11 - if i print out five um i'll basically
29:14 - exit the loop
29:18 - um any questions about this
29:21 - there isn't a condition that this is
29:23 - checking
29:25 - um if i like let's say i didn't have
29:27 - this
29:28 - let's say i didn't have this break this
29:30 - will run forever
29:31 - this like it won't stop until like the
29:34 - program crashes and runs out memory or
29:36 - something
29:37 - so this will run forever theoretically
29:40 - okay however like if you want like
29:43 - an infinite statement like this you
29:46 - should always include like a weighted
29:47 - exit right
29:48 - and that way to exit is a break
29:50 - statement
29:53 - so this break will basically break you
29:56 - out of this
29:56 - infinite loop
30:00 - is that like a little more clear so
30:04 - think about like for example
30:05 - this web browser i don't want it that
30:07 - like when i click on this web browser
30:10 - it will just like run once and then exit
30:12 - on me right
30:13 - i don't want it so that it like opens
30:16 - for like two seconds
30:17 - and then it will just exit the code
30:20 - i wanted to run over a period of time so
30:23 - that i can like
30:24 - use it and like interact and go online
30:26 - and stuff
30:27 - so all like programs that run over a
30:29 - period of time even zoom
30:31 - it'll run on something like an infinite
30:33 - boot where like
30:34 - it'll run or it'll run forever but like
30:37 - if there's
30:38 - a condition where like i press x to exit
30:41 - it'll like break out that infinitely
30:45 - okay yep um
30:49 - they're like there are like definitely
30:53 - other ways to like
30:54 - to sort of like emulate that like you
30:57 - can
30:59 - like also do something like this where
31:01 - like
31:02 - while um user input doesn't equal like 5
31:05 - or something like that
31:07 - um i'll keep on running it but this is
31:09 - like just another way to like do it
31:12 - and it also just shows like the
31:15 - what a break statement is
31:19 - unfortunately we only have like one
31:21 - minute left but um
31:23 - you guys can definitely like i would
31:25 - recommend you go over like the choice
31:27 - questions just best practice
31:30 - um and i think willa already posted like
31:33 - all the links to like the workshop um if
31:36 - you want to do it on
31:38 - submission and viva