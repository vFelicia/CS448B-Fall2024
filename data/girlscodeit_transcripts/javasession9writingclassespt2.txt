00:00 - today uh we're just going to be doing a
00:03 - review about
00:04 - writing classes in java um
00:07 - it's lesson number nine but just an
00:09 - extension of yesterday of last week's
00:12 - lesson
00:13 - um so this is our agenda for today so
00:16 - the first thing
00:17 - i'm going to be doing is taking any
00:19 - questions there's anything you want to
00:20 - go over
00:21 - and then we're going to be learning
00:22 - something new which is called class
00:24 - diagrams
00:26 - i'm going to go over last week's
00:27 - workshop and then if you have time
00:30 - i'll do the quiz i'll take any more
00:32 - questions
00:33 - and then at the end i'll very very
00:35 - briefly just
00:36 - introduce the concept of inheritance
00:39 - today we're going to be learning to draw
00:41 - class diagrams so a diagram
00:44 - is used to show the relationship between
00:47 - different classes
00:49 - it's very helpful because if you have a
00:51 - lot of code with a lot of classes
00:54 - you can draw a diagram before coding so
00:57 - that you have
00:58 - a better idea of what you want to code
01:01 - it's really helpful also with
01:02 - understanding code
01:04 - so if you don't understand a big project
01:06 - that someone else wrote maybe
01:08 - you can draw class diagrams for it so
01:11 - you can get a better idea of what it's
01:13 - doing
01:14 - this is drawing a class diagram
01:16 - basically takes out the code
01:18 - component of coding of classes like it
01:20 - allows you to focus
01:22 - exclusively on your relationships
01:24 - between classes
01:25 - and the purpose of a class but you don't
01:28 - have to worry about like
01:29 - syntax or actually coding anything this
01:32 - is pretty much just to help you
01:33 - understand
01:34 - what a class is what it does how it can
01:38 - relate to other classes so
01:41 - now i'm going to be going through the
01:43 - demos
01:44 - from the uh last
01:48 - lesson and just drawing a class diagram
01:52 - to show you what it is
01:53 - for each
01:56 - demo so here we have a
02:00 - car class and it has
02:05 - the this one attribute here
02:09 - num wheels is all it has so i'm just
02:12 - going to open up ms paint to draw a
02:13 - class diagram just for this
02:15 - class here so usually you draw class
02:18 - diagrams you represent
02:19 - one class with a box like this
02:24 - and then you can section it up with some
02:27 - lines i'm just gonna that did not work
02:30 - uh you can section it off
02:32 - with two lines like this
02:36 - and in the top section you would put the
02:40 - name of the class so in this case the
02:43 - name of the class's car security's
02:45 - name of class goes there
02:48 - and then in the second half of your box
02:52 - you're going to list um all the um
02:55 - attributes so in this case
02:58 - it's num wheels so you can put int
03:01 - so the data type and then the name
03:05 - wheels and then down here you can put
03:08 - the class
03:08 - methods so as you can see this
03:12 - this class has no methods it only has
03:15 - constructors
03:16 - so it only has um ways to
03:19 - allow you to make um car objects down
03:22 - here but there's
03:23 - that you can't actually do anything with
03:25 - the car
03:26 - there's no methods so this is just a
03:28 - very basic
03:29 - um class diagram that you can make
03:32 - and when you have multiple classes
03:34 - you'll have you know multiple boxes
03:36 - but um we'll deal with that towards the
03:38 - end of class right now
03:39 - just focus on the one class diagram
03:43 - like this so this is a much more
03:46 - complicated one
03:47 - so this we have the class dog and we
03:50 - have
03:50 - three attributes here at the top that
03:53 - you can see so i'm just gonna do this
03:55 - one now
03:55 - make it look a little neater so everyone
03:58 - can understand it
03:59 - but um i just section this off like this
04:03 - and then the class we are using this
04:06 - time is dog
04:07 - so at the top here you would write dog
04:11 - and then the name of the class that just
04:13 - goes in the top
04:15 - third of your box and then
04:17 - [Music]
04:18 - in the second third we're going to put
04:20 - all of its attributes so
04:21 - int age string name string sound you
04:24 - usually keep the
04:26 - data type like that
04:32 - um attributes
04:37 - um and then the bottom third you can put
04:40 - the methods
04:41 - of all the of the class so here you can
04:43 - see so we
04:44 - the constructor does not count as a
04:46 - method only
04:47 - these um methods count
04:50 - so we have set age get name
04:54 - get age bark so let's take them
04:57 - and put them all in here there's quite a
05:00 - few
05:00 - um there's bark there's one
05:04 - and uh get age is one
05:08 - um get name
05:16 - oh sorry i put string age instead of
05:18 - string name on my bad
05:26 - string name that is in white
05:29 - there you go um and then if you start
05:31 - running out of space you can just like
05:33 - go on to the next line like that
05:35 - that name and there's also a
05:38 - set age
05:42 - and um that
05:46 - so in here you put all the methods and
05:49 - then this diagram is just helpful in i
05:51 - guess
05:51 - understanding the purpose of a class so
05:54 - the purpose of our dog class here it
05:56 - gives you an age and a name and a sound
05:58 - and you can customize all those
06:00 - um and then you can use those methods
06:03 - down below on the dog
06:05 - class um
06:08 - uh you draw a couple more
06:11 - much easier times out diagram good that
06:14 - is the
06:14 - point of the diagram um
06:18 - very glad to see that
06:21 - so yeah just keep in mind that
06:23 - constructors don't
06:24 - count okay this one is not filled in so
06:27 - i'm not gonna
06:28 - fill that one in live but um
06:35 - see what this one is i have another dog
06:39 - these are pretty straightforward so this
06:42 - one doesn't have any methods
06:43 - so you would just white it out if
06:45 - there's no methods
06:47 - like that and then this one just has
06:51 - a name and age like that and then that's
06:54 - the class diagram for this
06:56 - very simple um yeah that's just a basic
07:00 - class diagram for one class
07:05 - and i think now i can get started on
07:07 - doing the
07:08 - workshop in this workshop try to
07:11 - implement as many methods as you can
07:13 - from the student class
07:14 - and then print out all the info about
07:17 - your student
07:18 - so in this case you're given a full
07:21 - class so this entire class
07:25 - is just given to you
07:29 - and then over in maine.java you have to
07:32 - actually um
07:33 - use the class to make an odd a student
07:36 - object
07:37 - excuse me and then um you use some of
07:40 - its methods
07:41 - in in the code here so i'm just going to
07:43 - uh
07:45 - fork work this make my own version of it
07:48 - if i
07:48 - do anything and then i'm just going to
07:51 - be taking a look at the student.java
07:54 - so you can kind of understand what's
07:56 - going on here
07:57 - so class student in this case our
07:59 - students attributes
08:01 - are they have a first name last name id
08:04 - number
08:05 - grade level gpa and it takes ap
08:08 - value so true or false if they're taking
08:10 - ap classes
08:12 - and then our constructor so this is what
08:15 - is going to allow us to make a student
08:17 - pretty much um
08:21 - so first name people say you have to
08:23 - pass you have to give
08:24 - the student a name um an id number a
08:27 - grade
08:28 - gpa and ap otherwise you can't have a
08:31 - student
08:32 - in this school structure we set each of
08:34 - the attributes to those passed in by the
08:36 - user
08:37 - when we're creating a student object
08:39 - yeah so
08:40 - that's what we're going to have to
08:41 - implement in maine
08:44 - then we have some methods so we can get
08:47 - the
08:48 - get the name um
08:51 - we can also set the name we can get the
08:55 - id
08:55 - uh set the id get the grade level set
08:58 - the
08:59 - grade level so reminder so getters so
09:01 - like
09:02 - this one this method getters just
09:05 - returns a value
09:06 - so because in this case first and last
09:09 - name are
09:10 - private you need to have a something
09:13 - that will return it
09:15 - will return the value for you because
09:17 - you can't access it directly
09:20 - private means you can only access it
09:22 - within within
09:23 - student and then setters
09:26 - like set name will just change name
09:29 - will change the first name to something
09:32 - that you pass in here
09:33 - and it will change the last name for
09:35 - something that you pass
09:37 - in here and you have that for i think
09:39 - everything right
09:41 - um
09:41 - [Music]
09:44 - yes you have this special ap
09:47 - classes method that's just going to
09:50 - print out
09:51 - whether or not they take ap classes
09:55 - so that's what we have going on in our
09:57 - student class
10:00 - and then our main here the first thing
10:03 - we have to do is you have to create a
10:04 - student
10:05 - object so um
10:08 - if i want to create a student named anna
10:12 - um does anyone have any suggestions for
10:14 - how i would do that what lines of code i
10:16 - have to type in or at least part of it
10:29 - wouldn't be student and then you have to
10:31 - try string first
10:34 - and then you have to type the conditions
10:37 - or something
10:39 - yeah so you'd uh go student that's the
10:41 - name of the class and then
10:43 - the name of your student i'm just gonna
10:44 - call for anna
10:46 - equals new student and then all the
10:48 - they're called parameters
10:50 - all of the that's just you have to set
10:52 - everything in the constructor to
10:54 - construct a suit
10:55 - you have to give it all of these things
10:57 - pretty much you have to give it a string
10:59 - a string
11:00 - an int an int a double and a boolean in
11:03 - that order
11:04 - so um anna
11:09 - e because the first two things after
11:10 - these strings and then a number
11:13 - an id number doesn't really matter um
11:16 - and another
11:18 - number for grade and then
11:21 - uh a double for gpa
11:24 - so 4.0 for sure
11:27 - and then a boolean for ap
11:30 - so false so if you don't get those in
11:33 - the right order i'm pretty sure it's
11:34 - gonna
11:35 - throw an error because what it's gonna
11:37 - do when you do this it's gonna take
11:39 - all of these and just like put them
11:42 - straight in here
11:44 - and if it doesn't match up properly
11:46 - you're going to get an
11:47 - error and you can do this you can make a
11:50 - bunch of students
11:51 - if you you want to like this
11:56 - i i don't i don't know her last name so
11:57 - we're going to see
11:59 - and then you can change all of these
12:00 - values however
12:02 - you want um like this
12:06 - so with this um quick question
12:10 - so for what is the idea exactly i've
12:12 - never heard of it
12:14 - um i guess students just have
12:17 - um id numbers like if you want to log in
12:19 - on a school computer
12:21 - it doesn't really matter and then
12:25 - so it would be name so
12:28 - be both names then the id and then it
12:31 - would
12:32 - be it would be the grade and then the gp
12:36 - and ap
12:37 - yeah so you have to take it in the order
12:39 - of the constructor yeah willa
12:42 - um type it in chat if the data types
12:44 - aren't aligned your code is problems
12:46 - so ins have to go they're assigned so
12:48 - you have to have an
12:49 - int in like the third place so like like
12:52 - for the id number
12:55 - um and then same with strings you have
12:56 - to have two strings and then
12:59 - yeah yeah just to like add on to that
13:03 - there are certain ways you can change
13:04 - data types so like if you wanted to
13:06 - change like an int to a boolean you can
13:08 - use something called a wrapper class
13:11 - or i think it's a boolean to an n but
13:12 - basically certain data types can you can
13:15 - change them within one another
13:16 - however when you're trying to establish
13:18 - new instances of a class
13:20 - you need to align them in the way that
13:21 - you previously set them out because you
13:23 - don't want to have
13:24 - the computer thinking your string is an
13:26 - integer because then it won't compile
13:28 - because certain things can happen with
13:29 - integers that can happen with strings so
13:31 - you need to align your data types in the
13:33 - way that you previously set them out
13:35 - yeah basically when you're creating your
13:37 - object
13:38 - these parameters just have to line up
13:40 - with these parameters in the constructor
13:44 - they have to match in data type and in
13:46 - quantity
13:47 - pretty much um and in order obviously
13:51 - so now that you have your student
13:54 - objects
13:55 - um we can try to use the setter methods
13:58 - to change
13:58 - some of the values you defined above so
14:02 - to use a method on a class
14:05 - um let me just double check what the set
14:07 - looks like
14:08 - so let's change um
14:12 - my id number or something so we have
14:14 - this
14:15 - set id method in the class which is
14:18 - going to take an int so i have to pass
14:20 - in an int so
14:24 - um we can just go anna dot
14:28 - set id and pass in a number that's like
14:32 - different i don't know it doesn't matter
14:34 - it's that
14:35 - um and you can try printing it out to
14:39 - see
14:39 - if we got a changed value we can also
14:42 - print it out beforehand
14:46 - so we can print this out to anna and we
14:49 - have to use a method remember because
14:52 - the id is private so we can't access it
14:55 - outside of the the student class you
14:58 - have to use the
14:59 - get i think id method like like that
15:04 - um and then we can also do this get
15:09 - grade level yeah and then the gpa
15:12 - and i thought get
15:15 - the gpa like that
15:19 - and that should run yeah so
15:22 - um you change my id number to this
15:25 - number here
15:26 - and so when we print it out it prints
15:28 - out the new changed value
15:30 - my grade level is 12 which is what i
15:32 - originally set it to be
15:34 - up here on line 9 and then my gpa
15:38 - is 4 which is also what i set it
15:41 - up to be original here and if i can just
15:43 - go back and change
15:44 - all of these to change all of those so
15:47 - set
15:49 - gpa something else
15:52 - and set my grade
15:56 - to be something else
16:01 - and then when i use these setter methods
16:03 - as you can see on the right
16:04 - change my grade to 11 now and change my
16:07 - gpa to
16:08 - 3.9 instead of what it used to be
16:11 - um so we can also use the boolean ap
16:16 - classes method here so we can go back
16:18 - and double check if we forget what
16:20 - everything is called
16:21 - so we just called it ap classes
16:25 - so i don't even have to this actually
16:27 - prints for me as you can see so i don't
16:29 - have to print this out i can just go
16:32 - hannah dot ap classes like this
16:36 - and with the semicolon um
16:39 - and that will print for me that i do not
16:41 - take ap classes
16:42 - because the method will check if i am
16:45 - taking ap
16:47 - um that is pretty much the workshop you
16:50 - can obviously change a bunch more things
16:52 - and print out a bunch more things if you
16:54 - like um
16:56 - i can also print out my i like things
16:59 - before i change them so
17:03 - my id is first set to you know 2 000 20
17:06 - 000 whatever
17:07 - and then i change it and it changes to
17:10 - 900
17:11 - by whatever um so yeah you can do a lot
17:14 - with this play around with this
17:16 - workshop but that's it
17:19 - um any questions about that
17:23 - pause for two seconds because i know
17:25 - what anna just did looks kind of simple
17:27 - but i want to make sure everyone
17:28 - understands
17:29 - why it works the way it does why the id
17:32 - prints out twice and it's two different
17:33 - values
17:34 - right we always have to remember that
17:36 - java works
17:37 - down like from the top to bottom
17:39 - therefore it changes the value
17:42 - after it's already printed out the
17:43 - statement does everyone understand that
17:46 - i know that sounds really simple but
17:47 - like that's a really important part of
17:49 - java
17:49 - and like it helps to like visualize the
17:51 - fact that your code does run down top to
17:53 - bottom
17:56 - okay good sorry i know that was probably
17:59 - not needed but it's very important
18:02 - yeah so it just runs line you know these
18:05 - lines first line eight and then nine
18:07 - and then it'll print out my first id and
18:10 - then it changes it
18:11 - and then it prints it out again after
18:13 - changing it
18:15 - um it just runs so the lines will just
18:18 - run in order 10 and then 11 and then 12
18:20 - and then 13.
18:21 - and so because of that order first it'll
18:24 - print
18:25 - what i already have it set to up here
18:28 - and then and then i change it and then
18:30 - when i print it again
18:32 - it's worth it it's now this number
18:34 - pretty much
18:37 - um well i will type it in chat again um
18:40 - if you didn't quite understand that
18:42 - but um yeah that is the workshop you can
18:45 - now do that on your own and you can make
18:48 - your own student and you know change
18:50 - whatever student values you want
18:53 - um this is the first question
18:57 - which method is not a common or which
19:00 - which type of method should i say
19:02 - is not a common class method the correct
19:05 - answer is
19:06 - b um this is an animation there is no
19:09 - animation okay
19:10 - uh the correct answer is b destructors
19:12 - are not a class method
19:14 - um constructors are the method you use
19:17 - to be able to create an object it's like
19:20 - the blueprint
19:22 - method in a way and then getters are
19:25 - what allow you to just
19:26 - get values and setters are what allow
19:28 - you to set values
19:30 - um that those those those three are
19:32 - valid
19:34 - next question good job everyone by the
19:36 - way how can you
19:38 - access a private field outside of its
19:40 - class
19:41 - so how can you access a private field
19:45 - of student of the student class
19:48 - in the main.java you can access it like
19:51 - a regular field
19:52 - you create a getter that returns the
19:54 - value of the field or you create a
19:56 - variable
19:56 - outside of the class with the same name
20:02 - yes all of you are right you create a
20:04 - getter that returns the value
20:06 - of the field so you can't access private
20:09 - fields directly outside of its class
20:11 - like you can't access it like a regular
20:13 - field so
20:14 - like in the workshop you have to create
20:16 - a getter method
20:17 - that will return the value of the field
20:21 - good job good job
20:24 - and then this is the last question i
20:27 - think
20:28 - private variables can't be accessed by
20:30 - subclasses
20:31 - we haven't gone over subclasses in this
20:34 - lesson have we
20:35 - so okay so maybe this question
20:38 - we don't we don't need to answer this
20:40 - question um
20:42 - good job with those two questions though
20:44 - you were
20:46 - correct with those questions um
20:50 - the next thing i'm going to be doing i
20:53 - guess
20:55 - is technically i'm supposed to be
20:56 - answering any more questions that you
20:58 - have
20:58 - right now oh you can also do some extra
21:00 - practice actually
21:14 - okay so maybe we should go over
21:16 - subclasses a little bit
21:18 - so what is it so this is um this is a
21:21 - class diagram with
21:22 - multiple classes so you have the big
21:25 - person class at the top
21:27 - but you also have a bunch of these um
21:30 - sub classes underneath it um
21:34 - student staff high school middle school
21:36 - math and there's a bunch of things going
21:38 - on here
21:38 - so basically you start at the top and
21:40 - you have a
21:41 - person class that has you know maybe an
21:44 - eat method or something because all
21:46 - people can eat
21:46 - but if you want to have more nuanced
21:49 - versions
21:50 - like you can have a student person and a
21:53 - staff
21:53 - person so a student is a person
21:57 - and a staff member is also a person
22:00 - but they have like additional methods
22:03 - and attributes
22:04 - that a person doesn't so
22:07 - the in this case student and staff would
22:09 - be sub classes
22:11 - of the person class so if a person
22:14 - has an eat method student and staff
22:18 - also have an e-method however a student
22:21 - might also have
22:22 - a study method or a go to class
22:26 - method while a step while staff might
22:29 - have a teach method
22:30 - or something so um
22:34 - student and staff would have more
22:36 - methods and more attributes probably
22:38 - than a person class would
22:45 - and you can probably take this a level
22:47 - further
22:48 - with high school and middle school
22:52 - sub classes to student and
22:55 - math and english teacher um subclasses
22:59 - for staff
23:00 - so there is some
23:04 - um additional slides i can
23:07 - show y'all if i'll just stop showing for
23:10 - a second so i can get them
23:12 - um so these are technically supposed to
23:16 - be the next lesson
23:18 - but i'm just going to give y'all a
23:19 - little preview into it
23:24 - so let's just skip to creating
23:26 - subclasses
23:31 - all right so here we have um could be
23:34 - creating subclasses slides
23:36 - so if you want to create a sub class
23:40 - you would use an extends keyword which i
23:43 - will show y'all in the demo
23:44 - and if you want to refer it to the
23:47 - parent class so in this case car
23:49 - on the right car is a parent class you
23:51 - use super i'll show you that in the demo
23:54 - in java you can only inherit one class
23:56 - so race car
23:58 - can only inherit car it can't inherit
24:01 - car and vehicle for example you can only
24:04 - do
24:04 - go one up pretty much
24:07 - so let's open up this example just so
24:10 - you can see a quick
24:13 - uh demo so in here we have a vehicle
24:17 - class
24:18 - so i'm also going to draw a uml diagram
24:21 - for this actually
24:22 - so you can maybe understand it a little
24:30 - better
24:32 - so here we have the vehicle class with a
24:36 - color and number of wheels
24:39 - attributes and it has the print info
24:42 - method
24:44 - and then in here you have a subclass of
24:48 - vehicle
24:49 - to do a sub class just called truck
24:50 - which is your new class
24:52 - extends vehicle pretty much
24:55 - and this one has its own attribute
24:57 - called number of trailers
24:59 - because vehicles don't necessarily
25:02 - have trailers right but a truck will
25:04 - have a trailer so
25:06 - that's like how you could use a subclass
25:10 - and then you have your constructor and
25:12 - there's
25:13 - something interesting in here um super
25:16 - this super basically just refers to the
25:19 - constructor for a vehicle like it
25:21 - like this automatically if you put it in
25:23 - here
25:24 - will go up to the vehicle constructor
25:28 - so you can use that as well
25:31 - there is another subclass also car it
25:34 - also uses super
25:35 - and it just goes up to vehicle and uses
25:38 - that
25:39 - yeah so sub classes are like like um
25:43 - yeah finer categories of information
25:46 - that's
25:47 - that's pretty much how to explain it so
25:49 - in here we use an arraylist
25:51 - and we make a vehicle we make a truck
25:54 - and we make a car and then we print the
25:56 - info for all of them
25:58 - so let's run that
26:06 - so there we go generic vehicle
26:10 - um because that is what this prints out
26:14 - in in vehicle print out the color gray
26:18 - and then the number of wheels
26:21 - and then in truck prints out in truck
26:24 - so when you're using the
26:27 - print info method on truck
26:31 - because it has its own print info method
26:34 - that one takes precedence over the
26:37 - vehicle
26:38 - print info method so basically
26:41 - um this this is like more important in a
26:45 - way
26:46 - than what it's inheriting the print info
26:49 - that it inherited from the other
26:50 - subclass the other class
26:52 - so because of that it has its own
26:55 - thing to print the number of trailers um
26:58 - while a vehicle doesn't have that
27:02 - this is a little confusing sorry um
27:06 - however as you can see car does not have
27:10 - its own print info method so if it
27:12 - doesn't have its own print info method
27:14 - it's going to default to the print info
27:17 - from vehicle
27:20 - so this is actually pretty good example
27:21 - because it shows both
27:23 - both overriding a method and it shows
27:27 - um using the inherited method
27:30 - yeah subclasses take all the information
27:32 - from the parent class
27:34 - and apply it yeah
27:38 - thank you willa you're very help helping
27:41 - me right now
27:43 - what i can do in the meantime is draw a
27:45 - uml diagram
27:46 - because apparently that might be helpful
27:48 - to explain what is going on
27:52 - um let's do that
27:56 - so in this case look at this we have
27:58 - three things going on in this example
28:01 - so we have the top is vehicle and then
28:03 - we also have truck and car
28:05 - which both extend the vehicle class
28:10 - so let's just section this up like we
28:13 - normally do
28:23 - yes everything willa saying is very
28:24 - important
28:28 - we have our vehicle yeah i don't know
28:31 - how to type that
28:32 - vehicle don't don't worry about that car
28:35 - car class and then our our
28:38 - truck class and then
28:42 - we have uh can draw some little i don't
28:45 - know how to draw an arrow properly
28:47 - like that there you go
28:50 - um and our vehicle has
28:54 - the color number wheels
28:57 - and then print info so
29:00 - spring color it gets an
29:04 - ant numb of wheels
29:08 - not number of wheels and then print
29:12 - and chosen like that and now
29:15 - car has number of seats
29:19 - and that's that's all it has to have
29:21 - anything other than
29:23 - um has number
29:26 - sorry ants number
29:29 - of seats if there are any questions
29:32 - while i make this diagram
29:33 - also feel free to ask so right now this
29:36 - car
29:37 - class has int number of seats string
29:39 - color
29:40 - and number wheels and print info like it
29:43 - takes everything from vehicle
29:45 - and like you can use it in the car class
29:49 - and then truck would have um
29:53 - number of trailers and it also has its
29:56 - own print info method
29:58 - so in
30:01 - number of wheels and it has its own
30:06 - print info method and so whenever it has
30:09 - its own print
30:10 - a subclass has like its own method but
30:12 - it's like named the same as this one
30:14 - um this one is gonna be more important
30:17 - the one in the subclass
30:19 - is more important and that's the one
30:20 - that's gonna to
30:22 - be used when you're running code
30:25 - the reason why truck has its own print
30:27 - info method is so you can print out the
30:29 - number of trailers
30:31 - because a vehicle doesn't have that so
30:33 - you can't
30:34 - print it out from there uh
30:37 - yeah i can yeah that's this is a diagram
30:41 - for
30:42 - classes multiple classes their
30:44 - relationship to each other
30:45 - these two are pointing up the arrows up
30:47 - i guess means
30:48 - that it has an is a relationship so a
30:52 - car is a vehicle a truck
30:56 - is a vehicle as well
31:01 - yeah and remember you can only have um
31:05 - want a subclass can only have like one
31:07 - parent class
31:08 - yes
31:12 - yeah that is pretty much
31:16 - it for today right don't think there's
31:18 - anything
31:19 - you need to go over um now i can take
31:21 - questions
31:23 - um i can
31:26 - send you know extra resources
31:29 - so it is really important to practice
31:31 - the trickier stuff like this
31:33 - like try doing the extra i sent this
31:35 - extra practice
31:37 - so you know try doing that on your own
31:39 - time
31:41 - here are some helpful
31:44 - links that actually willa can you send
31:47 - like the actual links because that
31:49 - didn't work thank you
31:50 - yeah um in the meantime
31:54 - you can have here's the submission and
31:57 - feedback forms these are the actual
31:58 - links for these
32:00 - um so the submission form can be for
32:03 - last week's workshop
32:04 - or any workshop we've ever done and then
32:07 - the feedback form
32:08 - i really appreciate it if you filled
32:10 - that out because it
32:11 - it helps helps us like change the
32:14 - lessons
32:15 - and change the way we teach and stuff
32:19 - so yeah um
32:24 - i don't know those are questions anyone
32:26 - needs help
32:28 - that's pretty much it so
32:31 - think thank you everyone for coming the
32:33 - lesson um make sure you do the feedback
32:35 - form
32:36 - uh make sure you practice on your own
32:38 - time that you have something to do use
32:39 - for practice you have some resources and
32:41 - links
32:43 - and then if you do finish the workshop
32:44 - because you also have the workshop
32:47 - please submit it if you feel comfortable
32:50 - doing so
32:52 - um yeah i think otherwise i'm done
33:10 - you