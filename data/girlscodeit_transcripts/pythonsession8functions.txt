00:00 - functions and like how to create
00:01 - functions in python
00:03 - and just like genome stuff related to
00:06 - making your own functions in python
00:10 - so first off what is a function
00:14 - a function is basically a block of code
00:16 - that is a part of a program but not
00:18 - included
00:18 - in like the main um execution part of
00:21 - the code
00:22 - so think of it as just like a block of
00:24 - code that
00:25 - does something consistently so
00:28 - as you can see in this example you have
00:30 - like um print hello print buying stuff
00:32 - like that
00:34 - um a function will help you like
00:37 - instead of having like competitive code
00:39 - like print hello goodbye and
00:41 - have that repeat mistake you can wrap
00:43 - that all up into one function
00:45 - and then call that function multiple
00:47 - times if you like do the same thing
00:49 - so it's just a block of code that does
00:51 - the same thing
00:53 - um consistently and this way it provides
00:57 - the code a little bit of abstraction
00:59 - that will
01:00 - um that will help you save a lot of
01:02 - lines of code
01:03 - and it simplifies your private code and
01:05 - also makes your code
01:06 - pretty readable so we can
01:10 - quickly look at a simple example of this
01:14 - [Music]
01:15 - so in this example we have
01:19 - just a array a one two three four and
01:23 - then a rate of b
01:24 - five six seven eight and then say i want
01:27 - to add 10
01:28 - to both of these lists so i basically
01:31 - want to
01:32 - add 10 to each element for both a and b
01:35 - so i can first just have like
01:39 - just have go through them usually for
01:42 - both of them so like where i
01:44 - numb in a numerator i'll add 10 to like
01:48 - the element in a and then i'll do the
01:50 - same thing
01:51 - for b and i'll put them out so
01:55 - this way like as you can see i have
01:58 - basically
01:58 - two blocks that just do the same thing
02:02 - but they also use but all they do is
02:05 - just like
02:06 - um or they do the same thing besides
02:09 - like use taking in like a different list
02:12 - each time
02:13 - so i'm doing the same thing for both of
02:15 - these and i'm basically using
02:18 - um a lot of lines just to do the same
02:20 - thing instead of having like
02:24 - instead of having basically the two
02:26 - blocks of the same code
02:28 - what i can do instead is something like
02:32 - um define a function like
02:36 - that takes in a variable x
02:40 - and then for i num and enumerate
02:44 - x i can have x
02:48 - of i equals
02:55 - [Music]
02:58 - and then i can basically
03:01 - call that function so my function foo
03:07 - a and then and then pass both a and b
03:11 - [Music]
03:14 - and it returns the same thing so as you
03:16 - can see
03:17 - i've used like one two three four lines
03:20 - of code
03:21 - instead of basically six lines of code
03:25 - to do
03:25 - the same thing so
03:29 - a function in general is just a block of
03:32 - code
03:32 - that will help you reduce the amount of
03:34 - lines you have and will make your code
03:36 - more readable
03:40 - and then next step you will talk about
03:42 - um just the nandium function
03:44 - and how function works
03:49 - okay so when you're when you're writing
03:52 - a function there are a few things that
03:53 - you should
03:54 - understand and remember so one of the
03:57 - most
03:57 - important things in a function is
04:00 - remembering to use the def
04:02 - def keyword and that denotes that
04:05 - uh that basically tells python that yes
04:08 - this is
04:09 - a function that i'm writing and then
04:12 - right after the def keyword you write
04:14 - your function name
04:16 - so this can be anything you want like in
04:19 - this example
04:20 - um our function name is my function and
04:23 - right after your function name you
04:24 - should have
04:25 - two parentheses um and
04:28 - inside those parentheses you might you
04:31 - may or may not
04:32 - include parameters and you may have one
04:35 - uh you may have zero parameters one or
04:38 - as many as you want but i'll if you
04:41 - don't understand
04:42 - what parameters are yet that's
04:43 - completely okay because i'll probably
04:45 - explain that in the next slide
04:48 - then after you're um after the
04:52 - sorry sorry um after your parentheses
04:55 - you should always remember to have
04:57 - a colon and on the next few lines
05:01 - where you want to write the body of your
05:04 - function
05:05 - make sure that you have make sure for
05:07 - each of those lines
05:08 - in the body of your function you you
05:11 - have an
05:12 - um an indentation because python is
05:15 - pretty
05:15 - strict about uh that sort of thing and
05:19 - um right so all of your um statements in
05:22 - the body of your function
05:24 - will be executed when you call your
05:26 - function name
05:29 - you can go to the next slide
05:34 - right okay so let me explain a little
05:36 - bit more about arguments and parameters
05:38 - so a parameter is a variable that's used
05:42 - inside the function um definition
05:45 - and it's defined inside of the the
05:48 - parentheses
05:48 - that i mentioned before and if there are
05:51 - multiple
05:52 - parameters then you separate those
05:54 - parameters by commas
05:56 - so let's look at this example first on
05:59 - the um the example def my function
06:03 - so we have this function here called my
06:05 - function
06:06 - and inside the parentheses right after
06:09 - the
06:10 - um you can see that um
06:14 - there is a you can see that there is a
06:17 - parameter
06:18 - called food and you can think of food
06:20 - like
06:21 - um a variable but basically
06:25 - when you call your function my function
06:29 - you need to give python a value
06:32 - for food so let me now go back to what
06:36 - an argument is
06:37 - so arguments are information that are um
06:40 - that are passed
06:41 - into a function so okay let's look at
06:44 - the
06:45 - second part of this example um when i'm
06:48 - calling my function
06:50 - notice how i'm putting a value inside of
06:53 - those parentheses
06:54 - right after i say my function i'm saying
06:56 - uh pizza
06:58 - and then i'm saying like ice cream and
06:59 - then i'm saying fries
07:01 - so let's say i i said i put pizza i put
07:05 - pizza first right so when i say pizza
07:10 - i'm basically telling python that
07:13 - okay you have pizza right here now make
07:16 - food
07:16 - equal to pizza remember food that was
07:19 - in our function definitions statement
07:23 - um so because food equals pizza
07:28 - then whenever you see food whenever
07:30 - python will see food
07:31 - inside of your function then it's going
07:34 - to replace
07:34 - food with pizza so in the statement my
07:38 - function pizza
07:39 - when you when you write that in python
07:41 - it's just going to print out
07:43 - i like pizza and for ice cream it's
07:46 - gonna say i like ice cream and then i
07:48 - like fries for the next statement
08:00 - okay so uh like i mentioned earlier you
08:02 - can
08:03 - have multiple parameters and that would
08:05 - mean that you can have
08:07 - that would mean that you would have
08:08 - multiple arguments
08:10 - so if you do choose to choose to have
08:14 - multiple parameters then you need to
08:17 - separate them by
08:18 - a comma so in the first line you can see
08:21 - that def my function and inside
08:25 - these parentheses you can see that
08:26 - there's name comma food
08:28 - so that's telling python that there are
08:31 - two different um
08:32 - parameters that are going to be used
08:35 - inside your function
08:36 - name and food then you can see that we
08:39 - have this
08:40 - body of code where name and food are
08:42 - being used
08:43 - and outside of your function when you're
08:46 - trying to call
08:47 - my function then what you need to do
08:50 - is to tell python what the values of
08:53 - name and food are
08:55 - so um uh let's look at these examples
08:59 - where i say my function
09:00 - and then marissa and comma pizza
09:04 - so um then python would take
09:08 - name and assign the value of marissa to
09:11 - name
09:12 - and pizza and assign the value of pizza
09:15 - to food so in this first statement
09:18 - where i say my function marissa comma
09:20 - pizza i would say
09:23 - um what would happen is that python
09:25 - would print out
09:26 - name poland and then print out marissa
09:29 - and on the next line python would say
09:32 - favorite food
09:33 - and then um print out
09:36 - uh pizza sorry yeah and then for these
09:39 - other examples the same thing would
09:41 - happen
09:41 - so emily would be passed into name and
09:44 - then ice cream into food and
09:45 - uh natalie would be passionate name and
09:48 - then fries into food
09:50 - and jessica will go over this example
09:59 - yep so this is just another yeah another
10:04 - example of like python's
10:06 - um parameters and how parameters work
10:09 - in python so in this example
10:12 - we have our main body here and our
10:16 - a function called add so here i
10:18 - basically takes in
10:20 - two parameters a and b and i'll print
10:22 - out a plus b
10:24 - and in the main body we have we're
10:27 - passing in
10:28 - 10 and 11 for the first i and then
10:32 - in the second part we're passing in
10:34 - string one and string two
10:35 - and we can add it so here you can see
10:38 - that
10:39 - um like variables python's parameters
10:41 - are very flexible
10:43 - so you you um
10:46 - there is a way to specify like um
10:50 - parameter types if you really want to um
10:52 - pass in like only integers or only
10:54 - strings
10:55 - into your function or you can like check
10:58 - for
10:58 - the type in in your function itself
11:02 - but if you don't specify um the
11:04 - parameter type
11:05 - the type can be anything as long as
11:09 - it's um it can perform the operations
11:12 - in your function so here if we run this
11:16 - code
11:17 - you can see like if i have if i pass in
11:20 - 10
11:20 - and 11 and that into add it'll print 21.
11:24 - but if i also pass in like hello and bye
11:27 - into i it'll also still do the ad
11:31 - but it'll do the ad for the strings
11:34 - instead of
11:35 - like adding them like integers or
11:36 - something like that
11:41 - and let me share this too
11:43 - [Music]
11:46 - so overall like pythons parameters
11:50 - are at like flexible just like variables
11:53 - um
11:53 - and just to note like to reiterate again
11:57 - you can you have to separate your
12:00 - parameters
12:00 - with a comma in your function definition
12:08 - all right next is something called
12:10 - optional arguments or optional
12:12 - parameters
12:13 - so this is um pretty python specific
12:16 - um in python you can also define
12:20 - something
12:21 - that's called an optional argument which
12:23 - is basically
12:25 - um just like with like your regular um
12:29 - function um header like this
12:33 - you can have like depth
12:37 - function name and then have a required
12:40 - argument
12:41 - and then if you want to um if you want
12:43 - an optional argument
12:45 - you name the parameter then you
12:48 - assign it a default value afterwards
12:52 - and then do stuff in your in your um
12:55 - function body so if you have an optional
12:59 - argument what you can do
13:00 - is you can call it with only the
13:02 - required parameters
13:04 - like pass in only the required arguments
13:06 - or you can pass
13:07 - in both a required argument and an
13:09 - optional argument
13:11 - the general gist is just that um
13:14 - the optional argument always has a
13:16 - default value so python will
13:19 - always like it will know that if you
13:21 - don't um
13:22 - assign a value to the optional argument
13:26 - it can revert back to the default value
13:29 - but
13:29 - if you want to specify like the optional
13:32 - argument
13:33 - you can um you can just pass it in
13:37 - in whenever you call the argument itself
13:40 - and then an example would be something
13:42 - like if i have
13:44 - death um we can say add
13:49 - a b and this is just like in our example
13:52 - so a b print a
13:56 - c
13:59 - and then in our main body
14:07 - um we have a equals 10 b
14:10 - equals 11 and then
14:17 - if i have the original example like this
14:20 - uh basically a and b right now
14:24 - are your required parameters so i can't
14:27 - exactly i can't just say like i just
14:30 - want to add
14:30 - a because then python will be like well
14:33 - what is b
14:34 - now and then this won't work
14:37 - so this will throw argument um and
14:40 - python will say like
14:41 - it's add is missing one one required
14:44 - positional argument
14:45 - which is just a really complicated way
14:48 - of telling us like
14:49 - hey you're missing the second argument
14:51 - for this function
14:52 - however if i make b of
14:56 - an optional parameter by giving it a
14:57 - default value say like
14:59 - b equals probably not 10 because that
15:01 - would be confusing
15:03 - b equals three then i can
15:06 - call um add a comma b like this
15:09 - and change the um and like pass in
15:13 - uh argument to the optional parameter or
15:16 - i can just call at a like this
15:18 - but when python goes back up here and
15:21 - checks the
15:22 - um the or it starts assigning values
15:25 - to the parameters then it can say like
15:28 - oh
15:28 - so i do have the um i did pass in like
15:32 - the required argument which is a
15:34 - but when it sees like i don't i didn't
15:38 - pass in b it will know that it can fall
15:40 - back to
15:41 - b equals three
15:44 - so next we're going to be talking about
15:46 - return values um
15:48 - sometimes in python you don't want your
15:50 - function to
15:51 - just like do something and then be done
15:55 - like you want it to return something to
15:58 - give you
15:59 - like you want to um you want it to give
16:02 - a value back back to like whatever main
16:05 - function
16:05 - you're doing um and you can basically
16:09 - pass back values by um
16:12 - specifying it or passing something back
16:14 - using the return keyword
16:17 - so in this example we have like um
16:21 - a function called calculate average and
16:24 - it takes in like a list of numbers
16:26 - and then it'll do like it'll calculate
16:29 - your mathematical average
16:31 - and sometimes you don't want to just
16:34 - like
16:34 - do something you wanted to like just
16:37 - like in this example
16:38 - it's returning back like the numerical
16:40 - average because you might want to use
16:42 - that for later or something like that
16:44 - so then once it returns back like the
16:48 - average you can capture it in like a
16:50 - variable
16:51 - say like average num and then print it
16:53 - out in your main function
16:55 - so basically the journal just is if you
16:58 - want your function to return something
17:00 - just write return and afterwards
17:04 - write like whatever data you want to
17:05 - send back but just
17:07 - um just like a clarification is like
17:11 - once you like return a value in your
17:13 - function
17:14 - that function ends there so um
17:18 - for example if i return average here
17:22 - if i write any code in the function
17:24 - after
17:25 - this return call it won't be called ever
17:29 - because the function exits upon return
17:33 - so we can check out like a quick example
17:36 - of this
17:44 - so in this code
17:48 - we have like we have the last example is
17:50 - add a comma b
17:52 - but instead of um just
17:55 - having it print out the um
18:00 - the sum you can return it like this
18:05 - um another example is just like finding
18:06 - the even finding like the even number
18:09 - in like your parameter a
18:12 - and then you can just find it like this
18:15 - um a quick question that like
18:19 - so quick question what is a what type
18:23 - can find what types of um
18:28 - what data types can find even taken
18:36 - based off this for loop you can drop the
18:39 - answers in chat
18:53 - so based off the four loop it's
18:56 - it's in general any data type that you
18:58 - can enumerate through
19:00 - in a form so this can be like
19:04 - or and any data type where each element
19:07 - in this collection can be
19:10 - um can be used with a modulus
19:14 - observation
19:16 - so this could be something like
19:19 - a list of numbers or something like that
19:22 - most commonly
19:24 - and over here as you can see
19:27 - you can also return multiple values and
19:30 - this will return it as a tuple
19:34 - so if i run this example
19:43 - in the in the main body i'm basically
19:46 - like passing in a list of 1 3
19:49 - 5 10 13 and i can capture the results of
19:53 - find even
19:54 - in this variable called results and then
19:57 - i'm printing
19:58 - um out the the um
20:02 - the elements within this result table
20:05 - so i can do it this way where i just
20:08 - capture
20:09 - the um the return values as
20:13 - one big tuple and then print out like
20:16 - each each part by indexing into the
20:19 - tuple
20:21 - or i can capture
20:24 - each individual element by
20:28 - listing a bunch of different variables
20:32 - so i'm just separating them by commas
20:35 - so what this does is basically
20:39 - in find even i'm returning the index
20:42 - and the even number that um
20:46 - the of the first even number in the list
20:50 - and in this part um python will
20:54 - basically
20:54 - map like the return value to the
20:58 - variable
20:58 - that like matches it in the like
21:02 - that matches the um
21:05 - the position basically of the
21:08 - return values so in this case like
21:12 - i would be mapped to pause and then num
21:15 - would be
21:15 - math you know and then i can print out
21:18 - the values like this
21:24 - so like
21:28 - if i what happens then if i run like
21:31 - b equals one three five nine so like i
21:34 - pass in
21:35 - a list you find even that has
21:38 - no um that has no
21:42 - no even numbers what happens so
21:47 - if we look back into find even
21:52 - um basically this will only return
21:55 - something
21:56 - if i find the even number so
21:59 - what if i don't find the even number
22:01 - what's the um value of result then
22:05 - well we can check it out right now by
22:07 - running it
22:09 - and you can see that it's the none type
22:12 - so none in python is basically the type
22:16 - that denotes like no value if you're
22:19 - familiar with them
22:20 - other languages it's basically python's
22:22 - version of the node type
22:25 - where um it's just
22:28 - it just like has no value
22:32 - so just be careful when you're doing
22:35 - return values because
22:36 - if python sees that that you're trying
22:38 - to like you're trying to capture some
22:41 - sort of value
22:43 - um from your function but there isn't
22:46 - like
22:47 - a like a final return value
22:51 - then like you might run into some
22:53 - trouble
22:54 - in like more complicated pieces of code
22:57 - so make sure that like you're it
23:00 - it's good practice to basically have
23:03 - like consistent return values
23:06 - or if like or if
23:10 - or like at the very least make sure
23:12 - you're checking for like
23:14 - none types if you ever have like a
23:16 - function like this where
23:18 - it might not always return a value at
23:21 - all
23:24 - see so
23:27 - finally we're going to be talking a
23:29 - little bit about variable scopes and
23:31 - scoping in general
23:32 - this is the concept that is um important
23:34 - to any
23:35 - any um coding language so no matter like
23:39 - which language you're using
23:40 - you always you always want to be
23:42 - familiar with scoping because this will
23:44 - help you a lot in
23:45 - coding in general so scoping is
23:47 - basically
23:48 - um how and where a variable can be
23:51 - accessed
23:52 - or like a variable or a function can be
23:54 - accessed within your code
23:57 - um this is basically like um
24:00 - how like how you kind of
24:04 - how the the um
24:07 - the language underneath the hood will
24:10 - map
24:10 - values to your variable name and like
24:15 - and how you can access that value when
24:18 - and like what values you can access when
24:20 - you call a variable
24:22 - so there are two um scope two types of
24:25 - scopes local and global
24:26 - and i'll get um to the details about
24:29 - that a little later
24:30 - another thing you should um be aware of
24:32 - is shadowing
24:33 - and shadowing is basically when
24:36 - a local variable has the same name as a
24:38 - global variable
24:40 - and the um two names are
24:43 - it won't conflict so like it's not
24:46 - something that's very bad and will throw
24:48 - an error or something
24:49 - but this is something that might like
24:52 - cause confusion as you're beating the
24:54 - code so if i have like a global variable
24:57 - called
24:58 - um a and i have a local variable a it
25:01 - might be a little confusing to read the
25:03 - code
25:04 - after like after a few months of not
25:06 - like
25:07 - of developing that program basically
25:11 - so just be very careful shadowing is not
25:13 - something
25:14 - that is like technically bad or like
25:18 - or something that will like cause your
25:21 - program to crash but it's something that
25:24 - you want to avoid
25:26 - because it might cause your code to be a
25:28 - little unreadable
25:32 - so first let's talk about
25:35 - global scope global scope is
25:39 - um basically a global variable is
25:41 - basically
25:42 - something that can be accessed anywhere
25:44 - in the program so
25:45 - um it's a value that so basically
25:49 - python will map the um value to your
25:52 - variable
25:53 - and then you can basically access that
25:56 - anywhere
25:56 - like in a function in a class or like in
25:59 - your main function
26:01 - um this is created outside of a function
26:04 - so like
26:05 - you're not defining this um in any
26:08 - function
26:09 - or like you can define it in the main
26:12 - function
26:14 - which is and stuff like that um
26:17 - in python specifically you can access a
26:20 - global variable in a local function by
26:23 - using the global keyword
26:25 - so basically if you want to access a
26:27 - global variable in
26:28 - your function you have to um tell python
26:32 - that
26:32 - you're trying to access a global
26:34 - variable first
26:40 - and second is local scope so
26:44 - a local variable is basically something
26:47 - that can be
26:48 - only the access within a function that
26:50 - it's defined in
26:52 - so um it's basically all the
26:55 - variables or not all of the variables
26:58 - but like
26:59 - it's something say like if i have
27:02 - x equals 10 in my code
27:05 - this would be a local variable because
27:09 - it's only defined within my add
27:12 - function basically
27:18 - so we can check out an example of this
27:25 - so for example um i have
27:28 - two two functions the first one is foo
27:32 - where i call a global variable z
27:36 - and then i create a local variable x
27:39 - and then i add 100 to z
27:41 - [Music]
27:44 - next is like for now like
27:47 - we won't worry about whack because it's
27:50 - a pretty
27:51 - this one's pretty like tricky but let's
27:54 - look at food first
27:56 - so
28:00 - if i run this like so let's
28:03 - like first in the main function we have
28:05 - like z equals 100
28:06 - x equals 10 and then i want to print out
28:09 - z and x
28:10 - after i call through so if you
28:14 - like before we said that like here we're
28:16 - um
28:17 - we're calling the global variable z
28:20 - and then we're adding 100 to z so this
28:23 - will
28:24 - basically this line first of all
28:26 - basically tells python like
28:28 - hey i'm calling like like look i'm
28:31 - referring to
28:32 - the global variable z and then python
28:35 - would be like okay i'm going to map like
28:37 - 100
28:38 - to this variable then and then
28:41 - next uh python will see that like
28:45 - we're creating a local variable x and
28:48 - that will map up the value of 100 to x
28:50 - and then finally python will just add
28:53 - 100 to z
28:55 - however once python exits this function
28:59 - this local variable value will basically
29:02 - just be destroyed
29:03 - because it's only local it so that about
29:06 - this value 100
29:08 - won't be um won't be uh
29:12 - won't stay basically in
29:15 - like x and then python in the main
29:18 - function
29:20 - will still refer back to this x if it
29:22 - wants the value
29:23 - in this print
29:28 - so that's basically why when we print z
29:30 - over here
29:31 - it prints 200 because we've altered the
29:34 - global variable
29:35 - in this function but for x over here
29:39 - this one's global
29:41 - but the x in our um in our
29:44 - foo function was local so
29:48 - this value basically isn't kept anywhere
29:52 - and one python prints over here it would
29:54 - just print the 10 that was in the global
29:56 - variable x
29:59 - so this also applies to functions
30:02 - functions
30:02 - also have like the everything i've said
30:05 - about like
30:06 - local and global variables also applies
30:09 - to
30:09 - functions so for example we have this
30:12 - function in wac
30:14 - that has like a function within a
30:15 - function called
30:17 - inside func that takes in like a
30:19 - parameter
30:20 - x and then multiplies x by 10
30:25 - and then in the function lac
30:28 - we define a local variable called num
30:31 - equals 20 and then we'll call inside
30:34 - func
30:35 - them which will basically just multiply
30:38 - them by
30:38 - um by 10 and then return 200.
30:42 - so basically when we look at
30:46 - this inside func this is a function that
30:49 - is
30:49 - local to whack so it can't be referred
30:53 - um it can't be called anywhere outside
30:57 - of the function
30:58 - whack however like technically
31:02 - black is a global function so it can be
31:05 - caught
31:06 - anywhere like in the main function or
31:08 - like outside
31:10 - basically so if we print out black
31:16 - it will print out 200. however like
31:19 - if i want i can't like call inside funk
31:22 - outside of black so if i try like call
31:24 - inside function here
31:26 - it will throw me an error saying like
31:28 - inside funk isn't defined in this scope
31:32 - any questions about um scoping
31:43 - see all right
31:46 - and next we have our five minor five
31:52 - so question one what's the output of
31:55 - this code
31:57 - so we have a function called zoo and
32:00 - we do x plus equals 10. so we're just
32:03 - adding x by a hundred
32:05 - then outside we're defining x equals
32:09 - nine
32:09 - and then we call through over here if i
32:13 - run this program what do you think will
32:15 - happen
32:16 - right so the answer would
32:20 - be an error basically
32:23 - in this part in the new function itself
32:26 - x isn't defined
32:27 - so what python will read is like
32:30 - x equals nine in the global scope but
32:33 - then
32:34 - once it enters the function foo
32:37 - first off um you'll notice that like
32:41 - this x in foo is a local variable
32:45 - because we didn't like we didn't use any
32:47 - global keywords before to like specify
32:50 - what x is
32:50 - so this x is is local
32:54 - and second on this local variable x
32:58 - hasn't had any like any value assigned
33:01 - to it
33:02 - it's basically undefined in this case
33:06 - so and then it would be like oh i can't
33:08 - add
33:09 - 100 to like an undefined variable so
33:12 - it'll throw this error local variable x
33:14 - was referenced before assignment
33:16 - that's basically just a fancy way of
33:18 - saying like you didn't assign
33:20 - um x anything like any sort of value
33:24 - before you
33:25 - started like doing operations on it
33:27 - basically
33:28 - so um in general make sure like when you
33:31 - want to access
33:32 - a global variable make sure you specify
33:35 - that is global
33:36 - before like you try to change it and if
33:39 - you
33:40 - want to like um make a local variable
33:43 - or if you want to make any variable in
33:44 - general make sure you assign it a value
33:47 - before like you start doing things do it
33:53 - so in order to fix this there are two
33:56 - possible solutions
33:57 - first off you kind of define foo you can
34:00 - define the global variable x by
34:03 - specifying like global keyword
34:04 - info and then adding 100 to the global
34:08 - variable
34:09 - and then it will like add 100 to
34:12 - this x equals nine and print 109.
34:15 - what you can also do is um have fu
34:18 - um take in a parameter that's instead
34:21 - and then return
34:22 - the x plus a hundred so this way
34:25 - you define a global variable x equals
34:27 - nine and then you can say like
34:29 - x equals four x and then it'll print
34:33 - it'll also print 109. so there are many
34:36 - ways like
34:36 - and these aren't just the only two
34:38 - solutions there are many ways to fix
34:40 - this just make sure like
34:41 - you as long as like x has a value before
34:45 - you change it
34:46 - and then like if you if you want to like
34:50 - return it
34:50 - as like if you want to return
34:54 - or if you want the function to return
34:56 - something then like specify that with
34:58 - the return keyword
35:01 - so question two what's the output of
35:05 - this code then
35:06 - so i have like again um function foo but
35:09 - this time
35:10 - i'm having like a global variable z and
35:13 - saying z equals 24.
35:16 - and then i'm calling foo and printing z
35:22 - so in this case like what do you think
35:25 - the output would be
35:27 - all right so um in this situation
35:30 - the answer would be 24.
35:33 - so like this might be a little confusing
35:36 - because we didn't define the actual
35:38 - global variable
35:38 - z outside over here but you can actually
35:42 - create new global variables
35:43 - by using the global keyword so
35:47 - basically what python does it's like
35:50 - it'll see that
35:51 - once it gets to like this line global z
35:54 - it'll see like hey i don't have a global
35:57 - any global variables called z
35:59 - um in my in my global scope so
36:02 - what i'll do instead is i'll create it
36:05 - in this function
36:06 - and then assign it to 24 and then add
36:08 - that to the global scope
36:10 - so and then out here um once i hit that
36:14 - print function
36:16 - python will see like oh in my global
36:18 - scope i have this variable z
36:20 - and its value is 24 and then i will be
36:23 - able to print it out
36:25 - as um 24 over here so
36:28 - um if you if you call if you try to
36:31 - refer to a global variable
36:32 - that doesn't exist in like a function or
36:35 - like in any vocal scope
36:37 - um you can python will basically just
36:41 - create that variable and then assign it
36:43 - to like whatever value you have from
36:44 - here
36:46 - um this is both like good and bad so
36:48 - like the good part is
36:50 - you don't exactly have to like define
36:52 - every single global variable you're
36:53 - going to use
36:54 - in like the um in the main function or
36:56 - anything
36:57 - so like you don't have to preemptively
36:59 - define z
37:01 - um if you're not going to like use it or
37:04 - if you're
37:04 - um if in your main function
37:08 - so like you can just start creating
37:10 - global variables like wherever
37:12 - you want to like um define it however
37:15 - the bad part is like say
37:17 - i i do have like or say i have a
37:20 - variable like abc that's in my global
37:24 - scope
37:25 - but then like somewhere like a thousand
37:28 - lines later
37:29 - i'm like in like i'm defining a function
37:32 - or something
37:33 - and i make a typo like i say instead of
37:35 - like global abc
37:37 - i actually say like global a b instead
37:40 - oh python would just like oh i can't i
37:42 - don't see like this
37:43 - this global variable called a b so i'm
37:45 - just going to create one myself
37:47 - and then that might cause like a lot of
37:50 - errors
37:51 - that might be hard to debug because it's
37:53 - actually not throwing an error it's just
37:55 - like python is just like being super
37:58 - being like a little too flexible
37:59 - and a little bit too forgiving
38:03 - so um
38:06 - if you're gonna if you want to like
38:08 - start creating global variables within
38:10 - like functions and stuff
38:12 - just make sure that you use that
38:16 - carefully
38:21 - all right next is is this a first off
38:24 - like
38:25 - is this a valid function and second off
38:28 - what data types can parameter x be
38:31 - so i have a function called wacky
38:34 - function that takes in a parameter x
38:36 - and i say like if x then like return 100
38:40 - else return 10 20 30.
38:43 - so first off like is wacky funk like
38:46 - if i define this is wacky function of
38:48 - valid function
38:50 - like is my function body valid
38:54 - and like what or will python throw an
38:57 - error when i try to call it
39:00 - second off um what kind what data types
39:04 - can parameterx be can i pass just
39:06 - anything into it or like
39:08 - where can i only pass certain types
39:11 - of um can can x be only be like
39:14 - specific data types
39:21 - so this might take a little longer to
39:25 - think about
39:26 - but um feel free to drop
39:29 - answers or like any thoughts or
39:31 - questions in the chat
39:32 - about this
40:32 - fun
40:36 - so you can repeat that please
40:40 - is the class done um
40:44 - not yet we've got two more questions
40:50 - okay
41:13 - all right so let's look at the answer
41:17 - then first off is this a valid function
41:21 - yes because a function's returned values
41:24 - can be flexible
41:25 - um for python you can return as many
41:29 - and like as many types and as many like
41:33 - numbers
41:34 - of values in your function so you don't
41:36 - always like
41:38 - you can return one value like
41:41 - in one condition or like three values in
41:44 - another condition
41:45 - that the number and type of return
41:48 - values doesn't
41:48 - isn't doesn't have to be fixed basically
41:52 - um second off um x can be
41:55 - any data type that can be passed in as a
41:58 - boolean expression
42:00 - so like as you can see on this side um
42:03 - wacky function can be an empty string or
42:06 - it can be like
42:07 - a number or it can be like a list
42:10 - or just a boolean so as long as
42:14 - x can be evaluated by this if statement
42:20 - it can be passed in to yp function
42:24 - and because like python is very flexible
42:27 - in
42:27 - what can be evaluated by an if statement
42:30 - i'm honestly like not sure
42:31 - if there is a data type that can't be
42:33 - evaluated by ifs and to be honest but
42:36 - virtually um x can be any data type
42:42 - all right question four can a function
42:45 - be passed in as a parameter to another
42:47 - function
42:50 - so can i have like a function that just
42:52 - takes in other functions
42:54 - as parameters and then um do stuff
42:58 - with that what do you guys think
43:02 - i get i'll just give you this answer
43:04 - because this one
43:05 - is um this one is a pretty
43:09 - complicated answer to be honest but the
43:11 - answer is yes
43:12 - so in python and in in many other
43:15 - languages to be honest
43:17 - um functions are treated as their own
43:19 - objects
43:20 - so i can like have an example where like
43:24 - say i have a definition that prints x
43:26 - plus 100
43:28 - and then um function fast that takes
43:31 - that prints out x times 100. then i can
43:34 - also have a function
43:35 - lam that takes in a function f
43:38 - and then just cause f um and passes in
43:42 - three to it
43:44 - and then when i call i can like pass in
43:47 - just the name of the function so like
43:49 - foo
43:49 - or vas and then it'll print out like
43:53 - whatever um it'll basically
43:58 - pass in this function into f
44:01 - and then pass in three into whatever
44:04 - function
44:05 - i've passed into lamb so
44:08 - a function that takes in other functions
44:11 - as parameters
44:12 - are called higher order functions so
44:16 - um many languages now support
44:19 - this like higher order function so i can
44:21 - have like
44:23 - like now i can have things like lists of
44:25 - functions
44:26 - or and then pass in like the same
44:28 - parameter to my list of functions
44:30 - i can even like store functions as
44:33 - variables
44:34 - and then pass them into like other
44:36 - functions or like
44:37 - um assign them to like different objects
44:40 - and stuff like that
44:41 - so this makes python like really
44:43 - powerful
44:44 - i can even like um do something like say
44:48 - i want
44:48 - uh i want a super customized sorting
44:51 - function
44:52 - and then i can like basically order an
44:55 - entire list
44:56 - by passing in like a custom sorting
44:58 - function into like another function
45:01 - that will like order my list based off
45:03 - of whatever sorting function i passed
45:05 - into it
45:08 - so be aware that like functions are
45:11 - treated are
45:11 - basically their own objects and this can
45:15 - like
45:15 - this can take your program to like your
45:17 - programming to a whole
45:19 - new level basically
45:24 - and finally um what's the output of this
45:27 - code
45:28 - so i have a function called say
45:32 - and it takes in a parameter message and
45:34 - then
45:35 - another parameter times which has a
45:37 - default value of one
45:39 - and then i print on the message
45:42 - um this number of times basically
45:46 - and then i have um in the
45:49 - main function i pass in hello world
45:53 - and three into function say
45:56 - so what do you think is that all right
45:59 - so the answer
46:00 - is it will print out hello world three
46:03 - times
46:05 - so because we specify the default value
46:07 - two times
46:09 - it's basically optional parameter um
46:12 - so if i just printed like say hello
46:15 - world
46:15 - and i didn't pass in three um it'll
46:18 - print out hello world
46:20 - times one which is just how it worked
46:21 - one time however like
46:24 - this time i decided to specify the
46:26 - number of times i want to
46:28 - say hello world so it printed out hello
46:31 - world three times