00:06 - okay
00:06 - can you see my whole screen yep you're
00:09 - good
00:10 - okay oh wait like we just see the
00:14 - google window or whatever like just the
00:17 - slides if that's like
00:20 - yeah i um
00:23 - do you want to go over just the slides
00:25 - from the last time
00:26 - okay okay so last
00:30 - time i think that was sunday we went
00:32 - over
00:33 - arrays and arraylists and the difference
00:35 - between them so we're just going to run
00:37 - really quickly
00:38 - back over that um just to make sure you
00:40 - guys remember because they're pretty
00:42 - important
00:43 - so arrays and array lists are basically
00:46 - like
00:47 - string uh are like lists of
00:50 - a lot of different elements so that you
00:53 - can handle them more easily rather than
00:55 - just like
00:56 - having random elements scattered all
00:59 - over
00:59 - so an array is
01:02 - an object that holds a fixed number of
01:06 - elements so when you define an array you
01:10 - set how many elements can be in this
01:13 - array
01:14 - and you can't change it and all of the
01:17 - elements in your array also have to be
01:19 - the same type so like they have to be
01:20 - all
01:21 - integers or all strings are all doubles
01:25 - and it's basically just like a
01:26 - collection of data um
01:28 - as you remember and down here is how you
01:31 - make
01:32 - how you form your array if
01:36 - you want a refresher um
01:43 - so you guys also should remember
01:47 - the concept of indexes from last week so
01:50 - indexes
01:51 - are how your array
01:54 - like keeps track of the elements in it
01:57 - um this also goes for arraylists so each
02:00 - element of your array has a different
02:01 - index number
02:03 - and the computer will start
02:06 - counting the index from zero
02:09 - instead of one like we usually do so we
02:12 - start counting from
02:13 - zero one two three four five six um in
02:16 - the index
02:17 - of an array or an array list and so you
02:20 - can call
02:21 - the element you can call it an element
02:24 - of an array or an array list using its
02:27 - index
02:31 - okay and also we taught you how to print
02:34 - an individual element of an array
02:37 - and that's pretty basic like we taught
02:40 - you before you use the print
02:42 - line method and
02:45 - you just write the name of the array
02:48 - and then in brackets the index of the
02:51 - element you want to print
02:57 - okay and then we have it realists um
02:59 - arraylists are kind of similar to arrays
03:02 - but there is one big major difference
03:06 - an arraylist you can change the size of
03:09 - your arraylist
03:10 - all throughout your code so you don't
03:12 - have to set a certain size
03:14 - that your arraylist is at the very
03:16 - beginning when you create it
03:19 - um the number of elements in your
03:21 - arraylist can like
03:23 - get bigger or smaller depending on like
03:25 - how many
03:26 - elements you put in and it can change
03:28 - that your code
03:30 - um and as a refresher this is how you
03:33 - make your arraylist
03:36 - and yep that is pretty simple oh also
03:40 - for arraylist you have to
03:41 - import the ability to make an arraylist
03:44 - at the very top of your code
03:47 - um and then we also taught you how to
03:50 - add and delete elements from an
03:52 - arraylist
03:53 - those are also pretty
03:57 - similar techniques so you
04:00 - to add to an arraylist you just use name
04:02 - of the arraylist
04:03 - plus dot add and in the parentheses you
04:07 - put
04:08 - the element you want to add and it'll
04:11 - just
04:12 - stick that onto the end of your
04:13 - arraylist and then
04:15 - when you'd want to delete an element
04:18 - from your realist
04:19 - you use the name of the release
04:22 - plus dot remove and in the parentheses
04:25 - you
04:25 - just write the index of the element you
04:28 - want to remove
04:30 - remember you can't like just write
04:33 - the element in the parentheses for
04:36 - remove
04:37 - you can't call an element by saying like
04:40 - what the element actually is because
04:41 - what if there
04:43 - what if it's an arraylist of strings and
04:45 - you have two
04:47 - entries in your arraylist that say like
04:49 - dog
04:50 - and then you say i want to remove dog
04:53 - but your computer won't know which
04:57 - element to actually remove because you
04:59 - have two of them so you're going to have
05:01 - to follow them using their indexes and
05:03 - that's why indexes are really important
05:10 - and also last time we taught you how to
05:12 - print a specific
05:14 - element of an arraylist um it's kind of
05:17 - similar to
05:18 - uh playing an element of an array it's
05:21 - just
05:22 - instead you
05:25 - type the name of your arraylist dot
05:29 - get to like access the element you want
05:32 - to
05:32 - print and then parentheses
05:36 - index
05:41 - okay so that's it for what we did
05:45 - last week um if anyone has any questions
05:48 - about that um you can just go ahead and
05:52 - meet yourself and ask them or type them
05:53 - in the chat it's really important that
05:55 - you guys
05:57 - get this and like
06:00 - are able to understand it so does anyone
06:03 - have any questions
06:05 - or you can view some anything at all
06:12 - or i can go over something more slowly
06:27 - okay so i'll take that to
06:30 - mean we're good so far
06:34 - um again if you have any questions like
06:36 - the other lesson please feel free to
06:37 - like ask us
06:39 - um type in the chat or something um
06:42 - okay so one very important thing that we
06:45 - need to know how to do with arrays and
06:48 - array lists is find the length
06:51 - of them so maybe sometimes you just
06:54 - don't remember how long you made your
06:56 - array or arraylist or
06:58 - it's in the case of arraylist it's
07:00 - always changing
07:02 - so you want a simple method to
07:06 - just give you
07:09 - the length or the size of your array
07:12 - array list
07:13 - so um these are different
07:16 - for the two types um so to find the
07:19 - length
07:20 - of your array which is basically like
07:22 - how many
07:23 - elements how many entries are in your
07:26 - array
07:27 - you type the numerator and then dot
07:31 - length and that
07:34 - should provide you with an int that
07:38 - a whole number that's the number of
07:40 - elements in your array so like
07:42 - six um
07:45 - and just to remind you so like if your
07:47 - array has
07:49 - six elements in it um that means that
07:52 - the last
07:53 - index is going to be five
07:57 - because we start counting from zero and
07:59 - not one
08:02 - um and then if we wanna do the same
08:04 - thing for an arraylist
08:05 - to find the length of it or how many
08:08 - elements is in your arraylist
08:10 - instead of the dot length for array
08:13 - you're going to do the name of your
08:15 - arraylist then dot size
08:17 - parentheses and
08:21 - um it can it can be confusing or people
08:24 - always get these mixed up
08:26 - but it's really important to remember
08:27 - that there are different
08:29 - ways to do stuff with the raisin wrap
08:33 - um before we move on let's just like try
08:36 - this really quick
08:37 - just this okay so if you guys
08:40 - want to open up blue jay
08:43 - i'm just going to go ahead and make a
08:46 - new class
08:47 - um i'm just going to call it loops
08:49 - because that's the main focus of today
08:52 - so opening that up
08:57 - and then
09:02 - okay like always just go ahead and
09:06 - delete everything and then
09:30 - okay so like alex said before whenever
09:34 - we're working with arraylist we have to
09:36 - import it so we're going to go ahead and
09:40 - import java
09:44 - dot
09:47 - okay so now that we imported that now we
09:49 - can use it um so just to show you how
09:51 - the
09:52 - dot length and dot size works um let's
09:54 - just go ahead and create a really simple
09:56 - array just so we can kind of see how it
09:58 - works we can use that
09:59 - in the next step which is the loops so
10:02 - let's go ahead and
10:04 - make in
10:06 - [Music]
10:07 - let's just make an array and then we'll
10:09 - make an array list
10:11 - and then we'll go from there okay
10:14 - so to make an array again so you do the
10:17 - data type which is to
10:18 - ins i'm just going to call it
10:21 - array equals new int
10:25 - um and let's just make it like three or
10:27 - something
10:29 - okay so now let's just fill it
10:37 - um i'll just keep random numbers it
10:39 - doesn't really matter
10:47 - [Music]
10:50 - okay so now we created our
10:53 - array and we
10:56 - filled our ray um so now let's just go
10:59 - ahead
10:59 - and
11:05 - array dot length
11:09 - and you might be wondering like okay
11:11 - well we know the length
11:13 - is three because that's what we declared
11:15 - up there but sometimes
11:16 - let's say you're coding and you have an
11:18 - array and you're working with your array
11:20 - but you can't
11:22 - remember what the size is um and you
11:25 - can't go back and like
11:26 - count it but you can't find it just when
11:28 - your code gets a lot
11:29 - longer and maybe more complicated um
11:32 - it's really easy way to just find it
11:33 - without having to search back there and
11:35 - find
11:36 - where you made your array so
11:40 - um compile and looks good
11:44 - so
11:50 - and i printed out three which is what we
11:52 - expected
11:53 - because we made it a length of three and
11:56 - we have
11:56 - three elements in it from indexes zero
11:59 - to
12:00 - two okay so now
12:04 - um i'm gonna
12:07 - comment this out
12:12 - um to block comment i don't know if you
12:14 - guys went over this
12:15 - um just highlight everything and at the
12:17 - top of your keyboard you see where it
12:18 - says
12:19 - f8 that'll comment all of that out so it
12:22 - will be
12:23 - run when we compile and run our code
12:26 - okay so now um we know that that one
12:29 - works let's
12:30 - try it with an arraylist
12:34 - i'm just going to do arraylist again i'm
12:36 - just going
12:50 - okay so now we have our arraylist
12:52 - created and again you could put like
12:53 - double string
12:55 - other stuff in there um okay so now
13:02 - do like
13:09 - and finding the length or size of an
13:12 - arraylist
13:13 - um is really really helpful because like
13:16 - like i said for
13:17 - regular arrays you could always just go
13:19 - back and find it but arraylist
13:21 - you might have things added randomly
13:22 - throughout your code and then
13:24 - or you might have it not
13:27 - you might not have a set number in your
13:29 - code of how much you added if that makes
13:31 - sense
13:31 - um so finding the
13:35 - length of the arraylist using the dot
13:36 - size method is really really really
13:38 - helpful
13:39 - especially for arraylist because you
13:41 - don't have that set
13:43 - um size
13:50 - and let's just go ahead and add one more
13:57 - [Music]
14:00 - then
14:03 - and we're going to do arraylist
14:10 - so again for arrays we're going to do
14:13 - dot
14:13 - length without a parenthesis at the end
14:15 - and for arraylist we're going to do dot
14:18 - size
14:18 - with parentheses at the end i know it
14:21 - could be a little hard to
14:22 - um remember and stuff because it's not
14:25 - the same
14:26 - but if you do it over and over you'll
14:28 - remember and
14:29 - um yeah
14:33 - okay so let's go ahead and compile this
14:42 - one
14:47 - oops okay
14:51 - and we have four which again is what we
14:53 - expected because here we added
14:55 - a one two three and four elements to our
14:59 - array all right do you guys have any
15:02 - questions about this
15:07 - okay cool let's go back
15:10 - to the slide
15:15 - [Music]
15:24 - okay
15:28 - and yeah so we finished going over how
15:31 - to
15:32 - find the length of your array array list
15:34 - and now we're going to move on to loops
15:37 - so these are really important things you
15:40 - need to know and like how to
15:42 - structure your code um and
15:46 - um so they're really important for you
15:48 - to understand how they're
15:50 - how they work so the first
15:53 - type of loop that we're going to talk
15:55 - about today is a for loop
15:57 - so this um
16:01 - is like a way
16:04 - to structure your code so that part of
16:07 - your program
16:08 - gets run through multiple times um
16:12 - and you can only use this when you know
16:15 - exactly
16:16 - how many times you want to repeat that
16:18 - part of your code
16:20 - um so i'm just going to get into how you
16:25 - format your for loop because that'll
16:27 - make it easier to understand
16:28 - how it works so first you type the word
16:32 - for
16:33 - and then in parenthesis inside your
16:35 - parentheses
16:37 - first you're going to make an integer
16:40 - variable
16:42 - you can name it whatever you want you
16:43 - can name it like x
16:45 - or count or number
16:48 - uh whatever you want and you're going to
16:51 - set it to
16:53 - well whatever value you want but usually
16:56 - we
16:56 - just start at 0 to make it easier to
16:59 - keep track of
17:00 - but this integer value that you make
17:04 - here like you can make it equal to one
17:08 - or two or three or four
17:10 - um so that's just what
17:13 - by your for lip is going to take
17:16 - advantage of this
17:17 - integer variable and use it to keep
17:20 - track of how many times
17:22 - the for loop repeats itself
17:26 - so after you make your integer variable
17:29 - you're going to add a semicolon and then
17:31 - after that
17:32 - you um basically
17:37 - create a limit
17:40 - um as so like
17:44 - the for loop is going to keep running as
17:48 - long as this
17:49 - limit or this condition is true
17:52 - so as long in this example as long as
17:55 - x is less than 5 then
17:59 - this for loop is going to keep repeating
18:01 - itself
18:03 - and then after that you add another
18:06 - semicolon to separate it
18:08 - and then you just add
18:12 - new tell
18:14 - the computer how many like what you want
18:17 - to be
18:17 - done to your int variable every time
18:21 - the four loop runs uh this is kind of
18:24 - confusing but for example
18:26 - so if you say every time the for loop
18:29 - runs you want to add one to
18:31 - x so you type x plus plus
18:36 - and then so that's the basic structure
18:40 - of how you set it before loop and then
18:43 - you want curly brackets and inside the
18:45 - curly brackets you
18:48 - write whatever code you want to be
18:51 - repeated over and over again
18:53 - so here we have a print statement
18:56 - and it's going to print hello so it's
18:58 - going to print hello
19:00 - as many times as the for loop
19:03 - runs through itself and so basically how
19:06 - a for loop works is
19:07 - it's going to execute the code inside
19:10 - the curly brackets once
19:12 - and then it's going to carry out
19:15 - this third operation so after
19:19 - it prints hello once it's going to add 1
19:22 - to x
19:24 - and then it's at the end of the for loop
19:27 - and after it's added 1 to x
19:31 - it's going to check if x is still less
19:33 - than 5
19:35 - and if x is still less than 5 the for
19:38 - loop is going to
19:39 - repeat itself again it's going to print
19:41 - hello again
19:43 - so the second time and then after this
19:46 - time it's going to add 1 to x again
19:49 - and it's going to check if x is still
19:52 - less than five
19:53 - so at this point x is two so
19:56 - two is still less than five so it's
19:58 - going to keep running so this is going
20:00 - to repeat itself over and over again
20:02 - x is going to get one digit bigger every
20:05 - time you run through
20:07 - um all the way until the fifth
20:10 - time yes um when x is going to be equal
20:15 - to five at the end of the for loop
20:17 - and then the computer is going to check
20:18 - is x less than
20:20 - five five is not less than five so
20:23 - the for loop is going to stop running
20:25 - and you're going to continue on with the
20:28 - rest of your code after that
20:32 - um for lips can be difficult
20:35 - and complicated to understand so
20:38 - let us know if you don't fully
20:41 - understand it and we can try to explain
20:43 - it over again
20:48 - okay well let's just go ahead and try to
20:49 - bleach it a lot of times it's like with
20:51 - coding
20:52 - even though you might not understand it
20:53 - when you first hear about it when you
20:55 - um do it on your own and actually run
20:57 - the code a lot of times it makes a lot
20:59 - more sense and then you'll gradually
21:01 - um you know understand it better and
21:02 - then finally you'll get it so
21:05 - let's um go ahead and try this i'm just
21:08 - going to go ahead and open up the same
21:09 - one
21:10 - as before and
21:15 - okay um so again i am just going to
21:18 - comment this out in case we need it
21:20 - later
21:22 - okay so let's just use the
21:26 - loop example that was in the um
21:31 - okay so for it and again you can name it
21:34 - whatever you want
21:35 - i usually just do x because it's easiest
21:38 - equals
21:38 - zero x is less than
21:43 - let's do x is less than seven
21:47 - and x plus plus okay so those are the
21:50 - three main parts
21:51 - of our for loop so we have kind of like
21:54 - our starting value our
21:59 - condition and
22:02 - how much we increase
22:06 - x every time we go through the loop
22:09 - okay so let's just do
22:19 - hi okay
22:23 - so when we
22:26 - run this it should print out seven times
22:29 - because
22:30 - x goes from zero to six um because
22:34 - as long as x is less than seven it's
22:36 - going to predict we have
22:37 - zero one two three four five six
22:41 - equaling seven times and when x becomes
22:44 - seven
22:44 - seven is no longer less than seven so
22:46 - it's going to exit the loop
22:48 - um and then go on to the rest of the
22:50 - code which we don't have anything else
22:52 - after this
22:53 - um so it's just going to not print
22:54 - anything so
22:56 - we have this let's compile it
23:00 - and then
23:20 - um
23:35 - i don't know
23:41 - okay there we go i don't know i wasn't
23:42 - working before okay so we have
23:45 - hi printed out one
23:48 - two three four
23:52 - five six and seven times
23:55 - just like we predicted
23:58 - okay so now you can kind of see how that
24:01 - works
24:02 - and again you could put anything inside
24:04 - of
24:05 - here it doesn't have to be printing
24:07 - something out and as you'll see later
24:08 - we're going to use these loops to print
24:11 - out
24:12 - um all of our elements from an array
24:16 - and you'll see that towards the end of
24:17 - today okay
24:19 - now what if we were to do something like
24:22 - x is less than or
24:25 - equal to seven caitlyn
24:29 - c how many times will high
24:32 - print out if x is less than or equal to
24:35 - seven
24:41 - keep one c you said a
24:44 - and that is completely right yes perfect
24:47 - eight times because when x becomes seven
24:50 - we're going to check
24:51 - okay is seven less than or equal to
24:53 - seven yes it is because it's equal so
24:54 - we're going to print it one more time
24:56 - and when it becomes eight it's no longer
24:58 - gonna be meet the requirements so then
25:01 - we're going to
25:01 - exit perfect okay um
25:04 - caitlin says in the computer said it
25:07 - reached the end of file while pressing
25:11 - i forgot what that means um
25:20 - um so caitlyn did it print out
25:23 - hi at all or
25:29 - is it just like a red error in your code
25:34 - when you compiled it it said air oh okay
25:38 - [Music]
25:40 - um
25:43 - do you want to maybe share your screen i
25:45 - think that might be the easiest way
25:54 - here kevin would you feel comfortable
25:56 - with sharing your screen so we could
25:58 - i feel like that's just the easiest way
26:00 - to help fix errors
26:02 - um okay
26:05 - okay i'm gonna go ahead and stop sharing
26:07 - my screen
26:10 - so if you want to share your screen and
26:21 - oh okay super easy fix for this i think
26:25 - all you need is just an
26:26 - end parenthesis at the end so whenever
26:28 - do you see how you have
26:29 - the 4 and you have x equals 0 less than
26:31 - 7 x
26:32 - plus parenthesis and then you have that
26:34 - open bracket
26:36 - so whenever we have
26:39 - that open bracket we're always going to
26:41 - need a close bracket
26:43 - so on the next line why don't you just
26:46 - try putting a
26:47 - closed bracket
26:50 - yeah and then now do you want to try
26:52 - running it
27:01 - uh i think you also need close brackets
27:05 - for the
27:08 - i think you need two more closed
27:09 - brackets
27:11 - yeah oh yeah so always remember when you
27:14 - make an
27:15 - open bracket you'd always need to have a
27:17 - closed packet to like
27:19 - pair it um so yeah
27:25 - okay do you want to try compiling just
27:27 - to be sure and
27:28 - let us know if um they're still an
27:32 - error or something i'm gonna go ahead
27:34 - and share my screen again
27:37 - and does anyone have any questions about
27:39 - the for loops
27:45 - it works cool good job okay
27:49 - um let's go ahead and
27:53 - move on to our second type of loops
27:58 - sorry making sure it's a little bit slow
28:04 - okay so now that we've talked about for
28:07 - loops there's another type of loop we
28:08 - need to
28:09 - explain to you um so now we have while
28:12 - loops
28:14 - um this is fairly similar to the for
28:18 - loop because it also
28:20 - allows you to repeat part of your
28:22 - program over and over
28:23 - and over again um
28:27 - but it's kind of less complicated than a
28:30 - for lip
28:31 - because you can use it when you're not
28:34 - sure how many times exactly
28:37 - you want to go through your while loop
28:40 - so
28:40 - before you make your while loop while
28:42 - you're coding you're not sure how many
28:44 - times
28:45 - you're going to go through because maybe
28:46 - it changes every time
28:48 - you run it depending on different
28:49 - conditions so basically
28:51 - your while loop is going to repeat
28:53 - itself over and over
28:55 - as long as the condition inside the
28:57 - parentheses
28:58 - here is true so every time
29:01 - you finish your while loop once the
29:04 - computer is going to go back to the
29:05 - beginning and
29:06 - check if for example x is still less
29:09 - than 5
29:10 - and if that is true it's going to keep
29:13 - repeating
29:14 - um so in a while loop in the parentheses
29:18 - afterwards there is only one section
29:21 - only one condition
29:24 - um so you don't like have to make
29:28 - a variable specifically for your while
29:31 - loop
29:31 - to use um
29:35 - but typically you do basically have the
29:37 - same components of your for loop
29:40 - when you're making your while loop just
29:42 - like in a different place
29:44 - so for example here yes you only have
29:48 - one condition
29:49 - in the parentheses after a while loop
29:52 - but that condition like requires a
29:54 - variable
29:56 - to begin with so you're going to need to
29:58 - make that variable somewhere earlier in
30:00 - your code
30:01 - um and then in this example
30:05 - the main body of your
30:09 - the main body of the code inside your
30:10 - while loop
30:12 - is actually two actions it's going to
30:15 - print hello so
30:16 - basically this has the same result as
30:18 - the other for loop
30:20 - it's going to print hello five times and
30:22 - then the second part
30:24 - is it adds one to x every time it goes
30:27 - through
30:29 - so basically that this x plus plus
30:33 - is what limits your while loop
30:37 - it it's what like tells
30:42 - um it's what defines how many
30:46 - times you're going to go through the
30:47 - while loop kind of
30:49 - so like the good thing about
30:52 - having a while loop basically there are
30:55 - two benefits
30:56 - so one you don't have to set
31:00 - exactly how many times you're going to
31:02 - run through it when you
31:04 - create it so it can vary
31:07 - depending on your code and how you run
31:10 - it
31:11 - and also the variable that
31:15 - that defines how many times you go
31:18 - through
31:19 - um doesn't have to be specifically made
31:23 - for that loop it can have other purposes
31:26 - before or after
31:27 - during the while loop um but it's also
31:30 - true that
31:31 - this inside the parentheses of your
31:33 - while it doesn't have to be something
31:35 - like
31:35 - x is less than five it can also just be
31:38 - like
31:40 - a boolean so like if
31:44 - if you have a boolean value
31:47 - named running that's like either true or
31:50 - false you can say
31:52 - oh um while
31:55 - running is true then we're going to go
31:58 - through
31:58 - this code over and over so
32:01 - yeah you could also use it for example
32:03 - something like
32:04 - let's say you make a game like a
32:08 - yeah a game and um
32:11 - you ask the user do you want to play
32:14 - again
32:15 - and it could be like while again equals
32:18 - yes um then it's going to keep on
32:20 - playing the game
32:21 - but then as soon as they say no then
32:24 - it's going to exit and then the game
32:25 - will end so
32:26 - like alex said it doesn't have to be
32:28 - like a number kind of
32:30 - value in here um it could be like a
32:32 - boolean
32:33 - um so that's
32:38 - a big difference like the main
32:39 - difference between for loops
32:41 - and while loops also so
32:44 - what do you guys think would happen
32:46 - let's say this right here
32:48 - let's say we didn't have it um so the
32:51 - code just ended after
32:53 - this right here what do you guys think
32:56 - would
32:57 - happen like how many times do you think
32:59 - it would be printed or what do you think
33:01 - would happen to the code
33:10 - can take your mics off or if you want to
33:11 - type in in the chat um just what do you
33:13 - guys think
33:32 - any ideas
33:37 - it would run forever
33:41 - yes alex yeah so it would run uh forever
33:45 - so that's a really common mistake when
33:46 - working with loops
33:48 - because if we think about it we're only
33:50 - going to
33:51 - somehow be greater than five because x
33:54 - is increasing but let's say x never
33:57 - increased and x was always zero
33:59 - well zero is always going to be less
34:01 - than five so we're always going to be
34:03 - printing hello
34:05 - so again because we have x plus plus
34:07 - we'll go from zero
34:08 - to one to two to three to four finally
34:11 - to five
34:12 - where five isn't less than five so it'll
34:14 - exit so
34:16 - again like alex said before um we have
34:18 - the three same parts as in the for loop
34:21 - um like the we have the initial we have
34:24 - the condition
34:26 - and we have the increments it's just
34:28 - different placements
34:30 - um so all three are important and
34:32 - necessary
34:34 - so if you didn't have this um it'll
34:37 - run forever basically infinite loop
34:41 - um which again is a really easy fix it's
34:43 - just something that comes up a lot so if
34:44 - you ever see your screen it just like
34:46 - keeps on printing something then you've
34:49 - probably forgotten that statement but
34:50 - it's super super easy to add so
34:53 - just something to be aware of um so you
34:56 - can easily fix it
34:59 - okay do you guys have any questions
35:01 - about that
35:05 - okay then let's hop back over
35:08 - [Music]
35:10 - to blue jay
35:19 - okay so i'm actually let's actually turn
35:22 - this right here what we have right here
35:24 - and let's turn it into a while loop
35:27 - meaning that we're gonna have it perform
35:28 - the exact same function we're going to
35:30 - have high print out eight
35:31 - times we're just going to use a while
35:34 - loop instead
35:34 - of a four loop
35:38 - okay so let's start off with our
35:42 - int i'm just gonna do y this time
35:45 - equals zero so again this right here is
35:48 - going to correlate
35:49 - to this part right here and now we're
35:52 - gonna have
35:56 - bio y is less than or equal to
36:01 - seven and
36:07 - this right here is going to be
36:09 - correlated to this part right here so
36:11 - that's our condition
36:13 - and inside we're going to have
36:19 - system.out.printout
36:20 - and hi
36:27 - and then um as you can first see that
36:30 - right there is going to be the same
36:31 - thing as right here
36:32 - so that's our body of our loop and of
36:35 - course because we don't want this to run
36:36 - forever we need our last part
36:39 - right here which is our increment so
36:41 - we're just going to do y
36:42 - plus plus and there we go that's
36:45 - basically this basically performs
36:48 - the exact same thing as this does
36:52 - it's just going to be a different format
36:54 - so i'm gonna go ahead and comment this
36:55 - out
36:59 - and let's go ahead and run it
37:06 - okay
37:13 - and again like last time we have it
37:16 - printed out
37:18 - eight times three four five six seven
37:22 - eight um so now let's just see
37:25 - what would happen if we forgot this y
37:28 - plus plus
37:31 - so um like we talked about before it's
37:33 - going to be an infinite loop meaning
37:34 - that it's always it's going to be
37:36 - continuously printing out high
37:38 - because 0 is always going to be less
37:39 - than 7 so let's kind of see
37:42 - what that looks like or what it's going
37:44 - to do
37:46 - so compile it and
37:50 - run it and as you can see it just it
37:52 - keeps on going right it's printing
37:54 - pruning printing
37:54 - it's not stopping it just keeps on going
37:57 - um so that's how you know that you've
37:58 - forgotten that last part um so how to
38:01 - exit it if you see at the bottom next to
38:03 - the blue bar there should be an
38:04 - arrow just go ahead and click that and
38:06 - that will exit
38:07 - um yeah exit it
38:11 - and then once you see that then you can
38:14 - [Music]
38:17 - go back here you'll see yourself okay
38:19 - that's an infinite loop i know i forgot
38:21 - my increment
38:22 - so then you could just go ahead and add
38:24 - that back and it should be all good
38:26 - do you guys have any questions about
38:27 - infinite loops or just anything to do
38:29 - with
38:30 - while loops or anything like that
38:36 - okay cool um speaking about 10 minutes
38:39 - so
38:39 - let's go ahead and cover the last part
38:43 - for today
38:47 - yep my computer is being slow
38:52 - okay there we go okay so
38:55 - what can we actually use the for loop
38:59 - for
39:00 - like as a more practical purpose so um
39:03 - oftentimes we want to print
39:07 - the entire contents of our array or our
39:10 - array list
39:11 - so like instead of just printing one
39:13 - element at a time
39:15 - we want to tell the computer to print
39:17 - the whole array
39:18 - the whole list so this is where
39:22 - for loops really come in handy because
39:25 - we can use it we can use a for loop to
39:29 - like
39:30 - iterate through every single element
39:33 - of your write or array list so it's
39:35 - going to like
39:37 - move through every element and you can
39:39 - tell
39:40 - the computer how many times you want to
39:43 - go through it
39:44 - depending on how long your array or
39:47 - array list
39:48 - is so
39:51 - basically how you print out all the
39:53 - elements
39:54 - of an array for example so
39:57 - in this slide here we have an example um
40:01 - you're going to make a for loop then
40:05 - inside your parentheses you have the
40:07 - three conditions
40:08 - so first you're going to create an
40:11 - integrable
40:12 - um hero just and usually you want to set
40:16 - it to zero
40:17 - as i said before you can set it to like
40:19 - any number you want but if you set it to
40:21 - zero it's a lot easier to keep track of
40:25 - and then the second condition is
40:28 - um what under what conditions the for
40:32 - loop will run
40:33 - so here we're going to say as long as
40:36 - your integer variable
40:37 - is less than array.length
40:41 - so as long as the counting variable
40:45 - is less than the number of
40:49 - elements in your array
40:53 - and then the third condition is just
40:55 - adding one to
40:57 - your variable every time it goes through
40:59 - so
41:00 - it keeps counting through your array
41:03 - um so basically what this for loop is
41:06 - going to do
41:06 - is to start at zero which is the index
41:09 - of the first element in your array
41:12 - and it runs again
41:15 - for each it runs again
41:19 - once for each element of your array
41:22 - so inside the body of your for loop the
41:25 - code is going to be
41:27 - system.out.print so a print statement as
41:29 - always
41:30 - and then you're going to print do you
41:33 - guys remember
41:34 - how to print just one element from your
41:37 - array
41:38 - it's going to be this print statement
41:40 - and then the name of your array
41:42 - and then in brackets the index of the
41:45 - very
41:46 - the index of the element you want to
41:48 - print
41:50 - so this way your x
41:53 - your accounting variable is kind of
41:55 - acting as both the accounting variable
41:57 - and the index of the element you want to
42:00 - print
42:02 - so your every time you run through your
42:06 - for loop you're going to print
42:09 - the element of the array that has the
42:13 - that has x as its index number
42:17 - um you kind of need to wrap your head
42:19 - around that but it's a really
42:22 - like effective way of printing
42:26 - every single element of your array and
42:28 - running through it as many times as
42:30 - there are elements
42:32 - in your array uh let us know if you need
42:36 - to
42:36 - us to clarify that or anything or
42:38 - explain it again because it can be kind
42:40 - of
42:41 - confusing like everything we've been
42:45 - talking about
42:46 - and then your arraylist basically uses
42:49 - the same
42:50 - um method so
42:53 - the only difference it's also going to
42:56 - run through
42:57 - each and every single element in your
42:59 - arraylist
43:00 - but the only difference is the condition
43:04 - when you say how many times it's going
43:06 - to run instead of using
43:08 - dot length like you would for array
43:11 - to get the size or the number of
43:14 - elements in
43:15 - your list you use dot size parentheses
43:17 - as we taught you before
43:20 - at the beginning of the lesson so here
43:22 - you're just going to
43:23 - do the name dot size instead dot length
43:28 - and then also to print an individual
43:31 - element of an array list
43:33 - you use dot get and then the index
43:36 - in parenthesis unlike up here
43:40 - you use the name and then
43:43 - in brackets so those are basically the
43:46 - two differences and
43:47 - it just has to do with how you
43:50 - do different individual like
43:54 - it's depending on array or array list
43:58 - uh but it's the same overarching concept
44:05 - yeah so um let's go ahead
44:08 - and try that and i'm just gonna use
44:12 - um okay so i'm gonna go ahead and delete
44:14 - this
44:17 - um i don't know if we have time to try
44:19 - out both
44:20 - so it's the same concept like alex said
44:23 - so let's just go ahead and try this with
44:24 - our arraylist
44:27 - okay so we made our arraylist and
44:30 - we added some elements to it so we have
44:33 - four
44:34 - um it's in this arraylist
44:38 - and if we wanted to print all of them
44:40 - it's a lot easier to use this
44:42 - loop rather than doing a realistic get
44:45 - zero or real estate one
44:46 - real estate two so on so on especially
44:48 - if we have like
44:50 - 100 elements we don't want to spend 100
44:52 - lines of code
44:54 - writing that out and we could do that in
44:56 - like three lines
44:58 - they're a lot simpler so let's go ahead
45:01 - and set up our for loop now let's just
45:04 - do
45:04 - it x equals zero
45:08 - in x is less than array
45:11 - list dot size and i've seen this
45:13 - arraylist.size here kind of confuses you
45:16 - just think about
45:17 - the arraylist.size is going to be an
45:19 - it's like if you remember at the
45:20 - beginning when we
45:21 - printed out the arraylist.size we got
45:23 - four so this is essentially just saying
45:26 - x is less than four it's kind of just a
45:28 - shortcut so
45:29 - we don't have to go out and figure out
45:32 - how many elements are in it but
45:34 - just think of this as an int in this
45:37 - case
45:37 - four so then we're going to do x plus
45:40 - plus
45:41 - open parenthesis always forget your
45:44 - always remember you're closed
45:46 - and then we are going to do
45:54 - just arraylist dot
45:57 - get and x and this is going to work
46:01 - because first
46:01 - x is going to equal zero so it'll print
46:03 - out
46:05 - arraylist.getzero and then and then x
46:08 - will equal once it'll print out this one
46:09 - x will equal two
46:11 - and then x will equal three and then
46:13 - it'll exit
46:16 - so i'll give you a second to copy that
46:26 - down
46:29 - okay so let's go ahead and compile that
46:32 - it all looks good and
46:35 - let's run it so we should have five
46:38 - three
46:39 - one and nine
46:42 - yep and we have five three one and nine
46:45 - exactly like
46:46 - um we expected so really quick before we
46:48 - end let's just try
46:50 - what if we add like what if we add one
46:54 - more
46:57 - well this will take it into account
46:58 - because now arraylist.size is going to
47:01 - be five so it'll be less than five
47:03 - and then it'll go all the way up until x
47:05 - equals four
47:06 - so then it'll include this last one so
47:08 - if we compile it it should be the same
47:10 - thing
47:10 - just with the number seven
47:13 - added on to the end
47:20 - and that's exactly what we have so we
47:21 - have five three one nine seven just like
47:24 - we have here
47:25 - so again this is really convenient as
47:26 - you can see this is really compact only
47:28 - three lines
47:29 - and we could use it to print an array
47:31 - list that might have like a hundred
47:33 - elements which is gonna be a lot easier
47:35 - than typing out each one
47:37 - um individually all right so
47:40 - again this is the same concept that you
47:42 - would use for array
47:43 - here you would just do um array dot
47:46 - length and here you would do
47:48 - array with the bracket and x instead of
47:50 - dot get x
47:52 - otherwise it's the same concept um and
47:55 - so if you want to try it on your own
47:56 - later that would be great
47:59 - okay we're kind of running out of time
48:00 - so i'm going to go ahead and stop
48:02 - sharing but do you guys have any final
48:04 - questions
48:11 - okay cool so then i think we're pretty
48:13 - much done for today
48:15 - uh thank you guys for coming and
48:18 - our next one will be saturday
48:23 - yep yeah so hopefully we'll see you guys
48:25 - then
48:26 - and thanks for coming yep
48:30 - thank you guys so much hope you had fun
48:32 - and learned something
48:36 - like two people