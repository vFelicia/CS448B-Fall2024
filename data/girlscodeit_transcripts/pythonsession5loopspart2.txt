00:00 - hi everyone today i will be going over
00:03 - loops and this is a continuation from
00:05 - our previous lesson on for loops and
00:07 - while loops
00:07 - except for today's lesson i will be
00:09 - going um into
00:11 - nested loops and some other built-in
00:13 - functions for
00:14 - loops so on our agenda we have of course
00:17 - please i'm going to wrap it so you can
00:18 - code along with me and then i will be
00:21 - going over a quick review of
00:23 - the loops we went over in our previous
00:24 - lesson and then i'll go
00:26 - into nested loops enumerations some loop
00:29 - keywords
00:30 - and finally i'll end with a demo
00:33 - now to start here's a quick review of
00:35 - the loops we went over
00:36 - in the previous lesson so for for loops
00:39 - you have two options of what you can do
00:41 - with these you can do
00:43 - four variable name in a certain range
00:45 - from one index to
00:48 - another index and then you could also do
00:51 - for
00:51 - a variable name in a sequence such as a
00:54 - list or string things like that
00:57 - and then for while loops you could
01:01 - check for a certain condition and while
01:03 - that condition is true
01:05 - this chunk of code below it will
01:08 - continue to run
01:09 - now what is an iteration an iteration is
01:12 - essentially a sequence of repetitions
01:14 - that
01:14 - generate new outcomes so for example in
01:18 - your
01:18 - while loop for every time
01:21 - you run that
01:25 - code underneath your while loop if the
01:27 - condition
01:28 - is still true then it will repeat it
01:32 - will
01:32 - have another repetition of the while
01:34 - loop code
01:36 - and then that repetition in itself is
01:39 - what you would consider
01:40 - an iteration
01:44 - okay now for the range function this is
01:46 - a built-in function
01:48 - where you would put for the first
01:50 - parameter the
01:51 - start index and then the second
01:53 - parameter you would
01:54 - input the stop index and the stop index
01:58 - is always
01:58 - exclusive so if you had if you inputted
02:02 - a range from
02:03 - say 0 to 3 what would print out is 0 1
02:06 - and 2
02:07 - rather than 0 1 2 and 3 and that is
02:10 - again because
02:11 - the stop value is exclusive
02:14 - so what are the differences between
02:16 - immutable and mutable data types
02:18 - immutable data types
02:21 - cannot be changed in place so for
02:22 - example tuples and strings
02:24 - you would not be able to change the
02:27 - original two-bar string
02:29 - and if you attempted to it would give
02:31 - you an
02:32 - error in your interpreter or you could
02:34 - create you need to borrow string and
02:36 - from that
02:37 - you would already make those changes now
02:39 - for mutable data types these values can
02:41 - be changed in place
02:43 - and some examples are lists and
02:45 - dictionaries
02:47 - so for listen dictionaries you can
02:50 - change those values with
02:51 - there there are built in um listen
02:53 - dictionary functions
02:55 - that will allow you to change those
02:57 - values without having to create
02:59 - any new lists or dictionaries
03:04 - moving on to indexing in python the
03:06 - index of the first element is always a
03:08 - zero and then
03:10 - it will increment by one for each value
03:13 - in your list and the index
03:16 - of the last element can be written as
03:19 - negative one
03:20 - and from there you can also index in
03:22 - reverse
03:24 - so now to get into our actual lesson for
03:27 - today
03:28 - nested loops are essentially loops that
03:31 - are within another loop
03:32 - and i'll show you an example of that all
03:36 - right so
03:37 - for this demo we have a
03:40 - two-dimensional list and what a
03:42 - two-dimensional list
03:43 - is is that it is a list but for each
03:46 - value within the list
03:48 - there is another list and this could
03:51 - also be called a 2d array
03:53 - or in this case a multi-array
03:56 - so for this first chunk of code
04:00 - this runs for each row in the
04:03 - multi-array it will print out
04:04 - the row so for each of these values here
04:06 - for each row
04:08 - it will be printed out in the
04:09 - interpreter like so
04:12 - okay now for the second chunk of code
04:18 - for each of these rows in the
04:20 - multi-array
04:22 - um then for each column or for each
04:24 - value
04:25 - it will also be printed when you run it
04:29 - like so so each each value in the entire
04:32 - multi array
04:33 - will be printed here
04:39 - okay so you can also use
04:42 - a nested for loop to access each of the
04:45 - elements
04:46 - in the list and you could do this
04:50 - by um so for for each of these
04:54 - rows in the multi-array you would be
04:57 - incrementing by one for each iteration
05:01 - and then you would also have
05:04 - this for loop here for each of these
05:06 - numbers within
05:08 - row you would be checking
05:11 - if the number is equal to five
05:14 - and so for our first row none of the
05:16 - number is equal to five
05:18 - so it will exit this for loop go back
05:22 - and run the second iteration of our
05:24 - parent
05:26 - for loop and it will move on to the
05:29 - second row and checks whether one of
05:32 - these numbers is equal to five and since
05:33 - one of them is equal to five
05:35 - this here will run and will print i
05:38 - found five
05:39 - in row number two since this incremented
05:42 - twice and then it will continue to run
05:47 - through the entire multi array until
05:51 - it leaves the nested for loop
05:54 - and then it will print out the total
05:56 - number of rows in the
05:57 - multi-array and that will be equal to
06:01 - five you see here i found five in row
06:04 - number two
06:05 - and number of rows is five
06:08 - and you can also use a
06:11 - while loop a nested while loop to
06:15 - print out all of these values here
06:18 - and so what this chunk of code does is
06:22 - that
06:22 - while row num is greater than zero we
06:25 - declare
06:26 - a variable rho to be equal to the multi
06:29 - array at
06:30 - index rona minus one and
06:33 - we would use row num minus one
06:36 - since um again indexing in python always
06:40 - starts at
06:41 - zero so if you were to do ronan by
06:44 - itself
06:45 - multi-array at index of
06:48 - just row number itself that would be at
06:50 - index five
06:51 - and there would be no index of five
06:55 - in this list so it would go back to the
06:58 - beginning
06:59 - and print this out but
07:02 - what you want to print is our row five
07:05 - and
07:05 - this would be index four
07:09 - so that would be five minus one four so
07:12 - row
07:12 - equals unless i array at index four and
07:15 - then we also declare the variable array
07:18 - length to equal
07:18 - the length of this row so
07:22 - that would be equal to three and then
07:25 - while array length
07:26 - is greater than zero we want to print
07:28 - out row at array length minus one
07:30 - because again indexing starts at
07:32 - zero and what this would
07:35 - print out is the index of row at index
07:39 - two so it would print out fifteen
07:42 - because this
07:43 - is an index 2 for this list here
07:47 - and then every time this
07:50 - while loop runs array length will
07:53 - keep decreasing by 1 so as it continues
07:57 - to go on it will print 15 and then 14
07:59 - and then 13
08:00 - and then so once it reaches 13 this will
08:03 - be indexes 0.
08:04 - so the array length would be
08:08 - less than 0 so it will exit this while
08:11 - up here
08:12 - and then it will decrease road number
08:14 - one and then we would move on to our
08:16 - second iteration for the while
08:18 - loop and it would continue to print out
08:21 - the rest of these values here
08:23 - and you can see that it
08:28 - prints out all the values in reverse
08:33 - all right so moving on to some extra
08:36 - examples
08:37 - so for this first example imagine you
08:40 - have
08:40 - two arrays or a one and a two so for our
08:43 - first array
08:44 - for each value in that array you will be
08:47 - running
08:47 - through all of the values in array two
08:51 - and you'll keep doing that for every
08:52 - single value
08:53 - in array one and then for the second
08:56 - example for each value
08:58 - in our first array while n is greater
09:01 - than 10 you execute this code here and
09:03 - it
09:03 - is assumed that at some point you are
09:06 - decreasing
09:06 - n so that this does not end up as a
09:10 - infinite loop and for this third example
09:12 - it is similar to
09:14 - our first example where for each value
09:17 - in our first array
09:18 - all of the values in our second array
09:20 - will be run through except
09:22 - while n plus m is less than
09:26 - three this will actually
09:29 - execute your code so it is also assumed
09:31 - that either
09:32 - n or m is being incremented somewhere in
09:35 - this code here
09:36 - so that your code does not end up being
09:38 - an infinite loop
09:41 - okay so moving on to enumerations
09:45 - um here we have the enumerate function
09:48 - which for its first parameter takes in
09:50 - the list that you want to enumerate
09:52 - um with and the second parameter takes
09:54 - in
09:55 - the index that you want to
09:58 - start at for your tuple which i'll go
10:02 - over in a second
10:03 - and then the enumerate function returns
10:05 - an iterator of tuples that contain
10:08 - for the first value will be the index of
10:11 - the value in your list and the second
10:15 - value will be the actual value within
10:18 - your list
10:19 - and the enumerate function is really
10:22 - good to
10:23 - allow you to track both the index and
10:26 - element of
10:27 - your list so here is an example
10:32 - if you were to print this
10:35 - array 2 is equal to docket bird and then
10:38 - you
10:38 - print the list enumerating through
10:42 - array 2 and this returns three
10:45 - separate tuples and so
10:49 - dog will be the value of
10:52 - the array and then it will be at index
10:54 - zero and the same
10:55 - for cat and bird but say you wanted to
10:58 - start at a different index then you
11:00 - could do
11:02 - star equals two
11:05 - and this will start your index at
11:08 - two and then we'll increment
11:12 - by one from there
11:15 - here this shows how you can use a
11:18 - for loop to
11:22 - make it look a lot nicer you could do
11:24 - the value
11:25 - at dog at the value dog at
11:29 - what index it is at and here
11:32 - this index here shows the actual index
11:35 - of
11:35 - the value in your array
11:39 - rather this is just where you
11:42 - want to start at so this is usually
11:46 - would be starting at
11:48 - index zero you don't necessarily need to
11:51 - include that as a parameter it is the
11:54 - default
11:54 - parameter and so basically
11:57 - for the index it replaces this value as
12:01 - index and then it replaces this value as
12:03 - val
12:04 - in this enumerated array and then it
12:08 - does
12:08 - it runs this code here and it does the
12:11 - same thing
12:12 - with our second example
12:16 - so again it enumerates through our
12:19 - array three and then
12:23 - it prints out these tuples each with the
12:25 - value and its corresponding index
12:28 - and it runs through this with the for
12:31 - loop here
12:32 - to make it look a lot prettier
12:35 - all right so now let's move on to some
12:38 - keywords for loops first we have break
12:42 - which exits the current loop then we
12:44 - also have continue that
12:46 - does almost the same as break except it
12:49 - continues to the next iteration instead
12:50 - of
12:51 - exiting the current loop and pass
12:54 - is not very commonly used in programming
12:58 - for python and what it does is
13:02 - it basically doesn't do anything so i
13:05 - will show you guys an example of this
13:09 - okay so here we have two
13:13 - infinite while loops and this while loop
13:16 - here is nested
13:17 - in the outer while loop so when you run
13:21 - this
13:22 - it prompts the user to input either
13:25 - continue pass or exit
13:27 - so if you were to input continue they
13:29 - would run the continue
13:31 - keyword and what this does
13:34 - is it doesn't run anything below it
13:38 - um but it doesn't necessarily exit out
13:40 - it will continue on to the next
13:42 - iteration so from here you can
13:45 - do pass as well what pass will do
13:49 - is it just passes through this
13:51 - conditional here and continues on
13:53 - to the end of the while loop here and
13:55 - will print
13:56 - that you are still being stuck in a loop
13:59 - and then it will continue to the next
14:00 - iteration
14:02 - now if you wanted to exit the loop you
14:05 - would type
14:06 - in exit and from here you would
14:10 - run the break the break keyword here
14:14 - and then you wouldn't run anything here
14:16 - you would completely exit out of the
14:19 - nested while loop and then you would be
14:23 - you would still be in an infinite wall
14:24 - loop except you would be in the outer
14:26 - while loop so from here if you want to
14:30 - exit from this outer while loop as well
14:33 - you all you would have to do
14:34 - is break from it again what you could do
14:37 - by
14:37 - typing exit and then you are outside of
14:40 - both loops
14:42 - all right so now i will be going into
14:45 - looping um and how python
14:50 - is run on runtime so
14:53 - uh sometimes your program can be a lot
14:56 - slower than if you were using another
14:58 - language and this is because
15:00 - of time complexity and how long it takes
15:03 - to run your program
15:05 - based on how many loops you have so the
15:07 - more loops you have the longer it will
15:09 - take your program to run
15:10 - and i will show you guys an example of
15:12 - this
15:14 - here so here in this demo
15:18 - um we've declared a with a list here and
15:22 - then
15:22 - for this first for loop here um
15:27 - for each value in a we are incrementing
15:30 - the count by one and then we are
15:31 - printing the number of iterations
15:34 - like so okay so what this code basically
15:38 - shows you is that it has a
15:41 - run time of o n that's what we're trying
15:43 - to show you guys
15:44 - um since this for loop depends
15:48 - on growth linearly so basically the
15:51 - more data you input into this for loop
15:54 - the longer it will take to run it
15:58 - and the time is directly proportional to
16:00 - the amount of data
16:02 - you inputted into this for loop here
16:05 - okay now for this second example
16:10 - for each value in the range of the
16:14 - length
16:14 - of this list so range four
16:18 - so zero to four or actually would be
16:21 - zero to three since
16:22 - again the stop index is always
16:26 - exclusive so it would be from a zero to
16:28 - three and then
16:29 - for j in range zero two
16:32 - um length a is four minus
16:36 - the first value of i would be zero so
16:38 - four minus zero minus one would be three
16:40 - so from zero to three or zero to two
16:44 - count would increment by one and this
16:48 - is a lot easier to show if we just
16:51 - print out i j and count
16:54 - every time this is run okay
16:59 - so as we can see the value of i
17:02 - starts at zero and then the value of j
17:04 - also starts at zero
17:06 - and then count increments by one and
17:08 - then again
17:09 - this will run again i is still equal to
17:11 - zero j is equal to one
17:13 - and then count increments to two and
17:15 - then this keeps going
17:17 - until it reaches the end of the range so
17:20 - once it reaches two it will then
17:23 - exit this for loop go back to the outer
17:27 - for loop here
17:28 - and then it will run again where i is
17:31 - equal to
17:32 - one and then this will affect the range
17:35 - here
17:35 - because as i is increasing um
17:39 - then the range here will continue to
17:41 - decrease and
17:42 - this will actually decrease faster than
17:46 - i will um reach the end of the
17:50 - range here okay so
17:54 - when this is equal to 1 the length
17:58 - of a4 minus one minus one would be two
18:00 - so the range would be from zero to two
18:02 - or zero to one because again
18:04 - the stop index is exclusive and so you
18:07 - can see
18:08 - that here zero to one it keeps
18:11 - incrementing and then we reach
18:13 - the third iteration at two
18:17 - this would be zero to one this would run
18:20 - one time and then for the fourth and
18:22 - final iteration
18:24 - this i would be equal to three so this
18:27 - would be from range
18:28 - 0 and then 4 minus 3 is 1 1 minus 1 is
18:30 - 0.
18:31 - so from 0 to 0 there are no values
18:34 - between 0 and 0 since
18:36 - these the stop index does not include a
18:38 - 0
18:39 - so this would not run for the final time
18:43 - and then after that has been run
18:47 - we print out the number of comparisons
18:51 - in this bubble sort which is
18:54 - six
18:57 - so now let's move on to our second
19:00 - example
19:03 - and this code here
19:06 - demonstrates again how um
19:10 - the more data input you put
19:14 - for your for loop or the more loops
19:17 - within
19:18 - your nested loop then this
19:21 - is directly proportional to how long
19:24 - it will take for your code to run
19:27 - and if i go just
19:30 - into more specifics about this code here
19:33 - this line import num numpy as np
19:36 - this imports the numpy library
19:40 - which allows python to support really
19:42 - large arrays
19:43 - and then here we are declaring the
19:45 - variable large matrix to equal
19:47 - this really really large array
19:50 - and then initialize count to zero so for
19:53 - each row
19:54 - in this matrix um you will print adding
19:58 - and there are 200 rows in our matrix so
20:01 - we will print adding 200 times so for
20:04 - each column in
20:07 - each of the rows here so
20:10 - for so each column that would be 200
20:13 - columns within
20:14 - each row since here you can see that 200
20:18 - 200 200 so from those 200
20:22 - columns 4i in range of length of
20:26 - column that would be the range would be
20:29 - from 0 to 199 since 200 is exclusive
20:34 - and then each time that happens count
20:36 - will be incremented by
20:37 - one and then the total number of
20:40 - elements should be printed
20:42 - so the total number of elements within
20:44 - your entire array will be printed and
20:47 - that will come out to 200 times 200
20:50 - times 200 which is
20:51 - 8 million and let's just run our code
20:54 - here
20:59 - all right so you can see it printed
21:02 - adding
21:03 - 200 times for the 200 rows here
21:07 - and then the total number of elements is
21:10 - as i said before
21:11 - 8 million okay so let's get into
21:15 - our five under five segment
21:19 - um let's skip the first question for now
21:23 - since this has to do with dictionaries
21:25 - and we haven't gotten to that yet
21:27 - for question two what is the output of
21:30 - this code i will give you guys a second
21:32 - to
21:33 - think about this
21:36 - okay so what output is an
21:40 - error since tuples are immutable data
21:43 - types and
21:44 - cannot be changed so if you were trying
21:47 - to change
21:48 - um the tuple at index 0 to equal 100 you
21:52 - would come out with an error
21:54 - since tuples cannot be changed in place
21:59 - okay question three why would you want
22:03 - to use a while loop
22:04 - instead of a for loop and again i'll
22:06 - give you guys a few seconds to think
22:08 - about this
22:11 - okay so for loops
22:15 - are counting loops they are used
22:18 - when you are trying to run through a
22:21 - sequence um or a range
22:24 - anything like that and they are exit
22:27 - controlled since
22:28 - you know when that sequence or range
22:31 - um will end so once you reach the end of
22:35 - that sequence
22:36 - then you will exit from the for loop as
22:38 - for while loops
22:40 - these are conditional loops so the while
22:43 - loop
22:43 - will continue to run as long as the
22:46 - conditional is true
22:47 - and once the conditional is false then
22:50 - that is when you will break out from the
22:52 - loop and that is why it is an entry
22:54 - controlled loop
22:56 - so we would use a while loop when we
22:59 - aren't sure when the end condition
23:01 - will be false
23:05 - sorry showed the answer there but for
23:08 - question
23:09 - four how many comparisons will this code
23:12 - perform
23:14 - and um and we just look at the answer
23:17 - here
23:19 - so the first line for
23:22 - num in array this will loop 100 times
23:26 - since here we are making a list of 100
23:29 - zeros
23:31 - so there will be a hundred
23:34 - values inside of array for each of these
23:38 - so that would make 100 times 100 times
23:42 - 100
23:43 - equal to 1 million so the comparison
23:47 - will happen 1 million times moving on to
23:50 - question five out of these following
23:52 - variable names which one
23:54 - is valid so if we take a look at this
23:59 - for days times rent this is not a valid
24:03 - variable name
24:04 - since no special characters are accepted
24:07 - except for things like underscores or
24:09 - dollar signs
24:10 - and you cannot use the asterisk symbol
24:13 - within
24:13 - a variable name now for the second one
24:17 - for this is a valid variable name since
24:20 - python is case sensitive
24:22 - and you didn't use um the reserved
24:24 - keyword for which would be used for for
24:26 - loops
24:26 - since you did capitalize the f and four
24:30 - price one is also valid since
24:33 - the underscore is used which is valid
24:36 - and
24:36 - the number is used after all the letters
24:39 - it does not start with a number
24:40 - however for this one the number um
24:44 - does start at the beginning of your
24:45 - variable name so it is
24:47 - no longer valid my city this is not
24:50 - valid because there is a space
24:52 - right here and spaces are not
24:55 - acceptable in variable names
25:00 - while this is not a valid variable name
25:03 - because you are using the reserved
25:04 - keyword for
25:05 - while loops let's get
25:09 - into our demo
25:12 - so here we have um this code right here
25:16 - is
25:17 - very similar to a bash show which takes
25:20 - in user commands basically so if we run
25:23 - this
25:24 - it prompts the user to input something
25:27 - after
25:28 - this hashtag symbol and so
25:31 - whatever is inputted here will be stored
25:33 - in command and then we declare the
25:36 - variable
25:36 - arcs to be equal to um command.split so
25:40 - what this does is you insert two words
25:42 - then
25:43 - this function here will split that
25:46 - string into
25:47 - two separate strings and we'll store
25:49 - that in a list
25:50 - under arcs so if the length
25:54 - of r is equal to one so there's only one
25:56 - word and
25:57 - if um you type in
26:00 - pwd then it will print this is online
26:04 - who knows that and then if you were to
26:08 - print
26:08 - i mean if you were to type in who am i
26:11 - still print out
26:12 - this username here jz0024
26:15 - and then if you were to type in exit it
26:18 - would
26:19 - break from the loop and then print out
26:22 - exiting totally not bad
26:23 - shell now for this second part
26:27 - here this is for two words so
26:32 - if you inputted two
26:35 - words here
26:39 - then it would run this conditional here
26:42 - so if you put switch user
26:46 - this would not do anything but if you
26:48 - did switch user
26:49 - to racial and then you go back to
26:54 - our first conditional here and then you
26:57 - input who am i
26:58 - it will respond back with rachel
27:03 - now if i were to put something like cd
27:06 - and then rachel
27:11 - it would respond back this is online
27:14 - and then we can just exit again
27:17 - like so and that is our bash shell
27:20 - demo now we're at
27:24 - our challenge problems so for
27:27 - our first challenge problem
27:31 - we have to create a list of the first
27:35 - 100 perfect squares so let's declare a
27:38 - list called squares
27:41 - in empty list we created an empty list
27:44 - and then we want to
27:46 - create a list of the first 100 perfect
27:49 - squares so what we would do is we would
27:53 - create a for loop for um
27:58 - for number for each number
28:01 - in the range 1 to
28:04 - 101 since 101 is
28:07 - exclusive so this is technically 1 to
28:09 - 100
28:11 - then what we can do is
28:15 - squares dot pen so we're adding
28:18 - we we're adding values to
28:21 - these squares list so then we're adding
28:24 - the
28:24 - value num squared
28:30 - and then finally we want to print our
28:32 - list
28:35 - and it prints out all of the perfect
28:38 - squares from
28:40 - 1 to 100 here
28:44 - okay so for our second example we want
28:48 - to return a list of only words that
28:49 - begin with
28:50 - vowels so we take this list
28:54 - here okay we can get rid of this
28:58 - so we have our first list and then
29:05 - we also want to create our vowel
29:09 - string to be
29:14 - so for name and
29:17 - name for each name in this list here
29:23 - we want to check if
29:27 - um name index 0
29:31 - is in our vowels
29:35 - string and then we can find out
29:38 - name
29:41 - and this prints out all the values with
29:45 - um a vowel at the beginning of
29:48 - the string
29:52 - okay next we have
29:55 - this challenge problem here where we
29:58 - want to
30:00 - without using the subtract multiply
30:04 - or division operators we want to
30:06 - implement subtract multiply and divide
30:08 - functions and you can assume that a is
30:11 - divisible by b
30:12 - so we want to um subtract multiply and
30:15 - divide
30:16 - two numbers without actually using those
30:18 - corresponding
30:19 - operators and i will do that
30:24 - okay so let's start out by defining
30:28 - our subtracting function
30:32 - with parameters a and b and don't worry
30:35 - too much
30:36 - about functions for right now we will be
30:37 - going over them more in depth in
30:40 - a future lesson but for now you can just
30:43 - focus on all the code that is within
30:45 - each of these functions
30:47 - so we define the subtract function and
30:50 - then we initialize
30:51 - the count variable to zero
30:55 - and then we check for our
30:58 - condition
31:02 - um while a is greater than b
31:06 - and then we increment counts by one each
31:10 - time and we are also incrementing
31:14 - b by one each time and then
31:18 - we return count
31:22 - and then we call our function so
31:26 - we print out subtract with
31:30 - values and eight
31:34 - so this will print out twenty minus
31:36 - eight is twelve and
31:38 - it'll be a lot easier to show you guys
31:40 - what is actually hope happening in this
31:42 - code let me just
31:44 - think about the values of count and
31:47 - b each time
31:51 - okay so as
31:54 - this while loop continues to iterate it
31:58 - increments count by one each time and it
32:00 - also is incrementing b
32:01 - by one each time and so it is only
32:05 - incrementing um
32:08 - count until b is
32:11 - either equal to greater than or equal to
32:14 - a
32:14 - or 20. so once ba reaches 20 then
32:18 - count no longer is incrementing and
32:21 - therefore
32:22 - you return with the subtracted
32:26 - value from 20 and 8
32:29 - which is 12. okay
32:33 - now we can move on to the multiply
32:36 - function
32:38 - parameters a and b we again initialize
32:42 - count to zero
32:44 - and then for x
32:47 - in the range of a
32:52 - we want to also increment
32:56 - count by one
32:59 - sorry not one we want to increment
33:03 - um our count by b
33:07 - and then we can return
33:10 - count so if we
33:13 - um comment this out and then
33:18 - we print
33:21 - the multiply function 2
33:24 - and 5 works
33:28 - we get 10. and this is because
33:31 - for each value in our range of a which
33:33 - is 2
33:34 - so for each of those two values we are
33:36 - increasing
33:37 - by 5 so
33:41 - that will give you 10 and that is um a
33:44 - simplified version of multiplication
33:45 - right
33:46 - there and now we can move on to
33:49 - our division function
33:54 - where we can initialize count to zero
33:58 - then we would put your
34:02 - a doesn't equal zero
34:08 - incrementing count by one
34:15 - and then we can change the value of a
34:18 - to equal go back to our subtract
34:21 - function
34:22 - here and subtract a and b from each
34:24 - other
34:25 - so basically what this would do
34:30 - is that it continues to increment by one
34:35 - um as it iterates through here and then
34:38 - a is constantly being
34:39 - subtracted from so if we did
34:43 - print divide uh
34:46 - 12 and 2.
34:52 - we'd be subtracting 12 by 2
34:55 - and we'll go through here so that would
34:58 - be 10
34:59 - our new value of a would be 10 and then
35:00 - that would be 10 minus 2 again so that
35:02 - would be 8 and it would continue to do
35:04 - that
35:04 - until a um is equal to 0 and then
35:08 - it will finally return count so
35:12 - when we run it we get 6 as expected
35:17 - now for a final challenge given this
35:19 - matrix here print out
35:21 - the diagonal from top left to bottom
35:23 - right and then do this again
35:25 - from top right to bottom left so we can
35:28 - take this matrix
35:30 - here okay
35:33 - and then get rid of this paste our
35:36 - matrix
35:40 - okay so what we want to do is um
35:44 - locate each value in the left diagonal
35:47 - let's start with the left diagonal
35:49 - so for row
35:52 - in our matrix
35:55 - but we want to find the length of our
35:59 - matrix
36:00 - and then from there we want to find the
36:03 - range of our matrix so
36:05 - for each row in the range of the length
36:08 - of our matrix we want to find
36:12 - the column or each of these individual
36:14 - values within the row
36:15 - in the range of the
36:20 - length of matrix at
36:24 - x 0 for example
36:27 - okay now in order to
36:31 - figure out how what we want to compare
36:34 - here and to locate
36:36 - the left diagonal values we have to find
36:39 - the pattern so this value here is at
36:43 - row zero column zero
36:46 - and then five is at row one column one
36:50 - and nine is at row two column
36:54 - two so what you what you will notice is
36:57 - that
36:58 - um for each of these values both the row
37:00 - and the column
37:01 - are equal to each other so you can use a
37:04 - conditional to check
37:06 - if the row is equal
37:10 - to the column and if it is then you can
37:13 - print out the
37:18 - matrix at indexes
37:22 - of row and column
37:27 - and this will print out 1 5 and 9 which
37:30 - are the
37:31 - left diagonal now if you want to
37:35 - find the values in the right diagonal
37:39 - we would do basically the same thing
37:42 - range
37:44 - matrix
37:47 - each column in this range
37:54 - zero and here we again need to find the
37:58 - pattern of our right diagonal
38:00 - so three is at row zero
38:04 - and column two
38:08 - and then five is at
38:11 - row one column one
38:15 - and then seven is at
38:19 - row two index zero so
38:22 - what you can tell from that is that when
38:24 - you add those two values together
38:26 - they are always equal to two and two
38:29 - is um one less than the length
38:32 - of the list here
38:35 - so what you can do is
38:39 - if you add together row
38:42 - plus column and then if they equal
38:45 - the length of the
38:49 - matrix minus
38:52 - one since again
38:55 - indexes always start at index zero so
38:58 - you always put
38:59 - minus one through these cases then you
39:02 - can print
39:03 - the matrix at the indexes
39:06 - of each row and each column
39:11 - sorry column
39:14 - and it will run three five and seven
39:20 - so that's it for our last example
39:26 - here are some other links that you guys
39:29 - can
39:30 - look over which i will add in the
39:32 - description
39:33 - below and you guys can check these out
39:35 - if you want to read further
39:37 - so that is all for today's lesson
39:41 - i hope you guys learned a lot from it
39:43 - and for our
39:44 - next lesson we will be going over lists
39:47 - and
39:48 - list functions hope you guys enjoy that
39:50 - as well
39:51 - thanks for watching