00:00 - hello everyone and welcome to the girls
00:03 - codec class on foreign while loops in
00:05 - python
00:06 - i'm so happy to have you with me today
00:08 - and i'm sure that we're going to have a
00:09 - great time studying this interesting
00:11 - concept
00:12 - so you know that there's so many
00:14 - situations in life where you need to
00:16 - repeat the same set of tasks again and
00:18 - again
00:18 - let's say like repeating the same steps
00:21 - to make pancakes
00:22 - similarly there are so many coding
00:24 - situations in which you'll have to
00:26 - repeat a portion of the code
00:28 - python allows you to carry out
00:30 - repetitive tasks without having to write
00:32 - the code
00:33 - all over again using loops and there are
00:35 - two types as i mentioned earlier so
00:37 - let's begin with the for loops
00:40 - the for loop of python is assigned to
00:42 - process the items of any sequence
00:45 - such as a list or a string one by one
00:48 - and this is known as iteration or
00:50 - traversal as soon as
00:51 - all the elements of the list and string
00:53 - are done the loop will break
00:55 - and this is the general form of a for
00:57 - loop
00:58 - for variable in sequence perform code
01:02 - i know it sounds a little weird right
01:04 - now but let's check out an example
01:08 - here you can see that we have an array
01:10 - which is a list of a bunch of numbers
01:12 - and below that we have a variable count
01:14 - holding the value 0.
01:16 - so if you remember the general form or
01:18 - syntax of a for loop
01:19 - you will remember that it was for
01:21 - variable in sequence
01:23 - and here's your code our variable here
01:26 - is number
01:27 - and the sequence here is the array right
01:29 - above
01:30 - here's what the code says if a number is
01:33 - greater than 2
01:34 - then you increase the count by 1.
01:37 - and as soon as we're done traversing
01:39 - every single element in the array
01:41 - the loop will break and come to the next
01:42 - statement which is outside the loop
01:44 - we'll look at that later but let's see
01:46 - how this will work
01:48 - so here you can see the list and you can
01:50 - also see the numbers that are bigger
01:51 - than 2
01:52 - which is 3 4 and 7.
01:56 - so every time the loop goes through this
01:58 - array
01:59 - it will start to add up 1 to the count
02:02 - to see how many numbers there are in
02:04 - this array which are greater than 2.
02:06 - every time the for loop iterates through
02:08 - this array
02:10 - the value that the variable number holds
02:11 - will keep changing
02:13 - but first i want you to test this out
02:15 - and see how it works out for you
02:18 - but first here's something super helpful
02:22 - as long as the list that you're typing
02:24 - in a for loop contains
02:25 - a small number of elements it's okay to
02:28 - type all of it down
02:29 - but what if you have to iterate through
02:31 - a very large list
02:33 - such as natural numbers between 1 200.
02:36 - typing all of it down will be really
02:38 - hard
02:38 - and that's why python has a range
02:40 - function
02:42 - the range function of python generates a
02:44 - list
02:45 - for you and this is how it's written
02:47 - range
02:48 - and start which is your lower limit stop
02:52 - which is your upper limit and step we'll
02:55 - talk about step a little later but first
02:57 - i want you to see this example
02:59 - here is a variable x and that includes
03:02 - the range
03:03 - from one to five one is your lower limit
03:06 - and five is your upper limit remember
03:08 - that step is
03:09 - optional so it's not that important to
03:12 - get into it right now
03:14 - but here's something super important
03:17 - whenever you use the range function
03:19 - bison does not include the ending
03:23 - which is 5 so here your range will be
03:26 - from 1 to 5
03:27 - excluding 5. so what does that mean
03:31 - 1 2 3 and 4
03:34 - because it excludes the ending number as
03:36 - i mentioned here
03:38 - and here we use a for loop our variable
03:41 - is number
03:42 - and our list is x this particular code
03:45 - makes python print down
03:47 - every single number that is inside x and
03:50 - that is one
03:51 - two three and four now here's a small
03:55 - test for you
03:56 - it's a project in which you have to find
03:58 - a needle in the haystack
04:00 - and i want you to try it out in a bit
04:02 - but first we should discuss
04:04 - the while loop the while loop is a
04:07 - conditional loop
04:08 - that repeats the coding within itself as
04:11 - long as the condition remains true or is
04:13 - satisfied
04:16 - when the expression becomes false the
04:18 - program control passes to the line
04:20 - after the loop body so remember that a
04:23 - variable or a condition
04:24 - has to become false at one point or the
04:27 - other otherwise
04:28 - it will keep running and become an
04:29 - infinite loop
04:31 - they can also be nested and we'll get
04:34 - into that in our next class
04:36 - and here's the syntax for it while some
04:38 - condition
04:39 - is fulfilled it will go under the loop
04:42 - and perform whatever is written inside
04:44 - the coding
04:47 - till the time a condition is true a set
04:50 - of statements are repeated again and
04:52 - again
04:54 - as soon as the condition becomes false
04:56 - the repetition stops
04:58 - and the loop is broken
05:02 - here's an example for you we have a
05:04 - variable i
05:05 - which has the value 3. as long as i
05:09 - is less than 5 we will keep increasing
05:12 - the value
05:12 - of i by 1. here i is 3
05:16 - and 3 is obviously less than 5 so we do
05:19 - satisfy the condition for the while loop
05:22 - and i'm now going to tell you the answer
05:24 - because i really want you to think about
05:26 - it and to try it out
05:30 - here are two cases of a while loop
05:32 - terminating
05:33 - in the first case we have used a special
05:36 - statement known as break
05:38 - and in the second case we have let the
05:40 - while loop terminate
05:41 - naturally so what's the difference
05:45 - here we have a variable i and it holds
05:48 - the value 1
05:50 - while i is less than 6 we will print
05:52 - whatever i
05:53 - is as soon as it becomes equal to 3
05:57 - we break it which means
06:00 - 1 is less than 6 yes it's true so we
06:04 - print 1.
06:05 - 1 is not equal to 3 so we ignore this
06:09 - and we get to the next step
06:10 - i increases by 1 so i will now become 2
06:15 - 2 is again less than 6 so we print 2.
06:18 - 2 is not equal to 3 so we ignore this
06:21 - and we increase the value of i by 1
06:24 - and it becomes 3 3 is less than 6
06:28 - true so we print 3 but 3 is
06:31 - also equal to 3 and now we encounter our
06:34 - break statement
06:36 - the break statement enables the program
06:38 - to skip over a part of the code
06:41 - a break statement immediately terminates
06:43 - the loop in which it lies
06:45 - so as soon as we hit break we are now
06:48 - out of the code and our answer will be 1
06:52 - 2 3. over here
06:56 - we have i which holds the value 1 as
06:59 - long as i
06:59 - is less than 6 we keep printing i
07:02 - and then we keep increasing it by one
07:06 - as long as it's not less than six
07:09 - we then come and print that i is no
07:11 - longer less than six
07:13 - i want you to think about this what do
07:15 - you think will be the output of this
07:17 - code
07:20 - remember when i told you that you might
07:22 - fall into an infinite loop unless
07:25 - your wild condition becomes false at one
07:27 - point or the other
07:29 - well here's an example this is a
07:31 - variable name
07:33 - and it holds a string value in which you
07:35 - write your name
07:36 - and write 0 to finish as long as your
07:39 - name is not
07:40 - equal to 0 python will then ask you for
07:43 - your age
07:44 - which will be stored in an integer
07:46 - format and then again
07:48 - ask you for your name which will be
07:50 - stored in a string format
07:52 - so as you can see there is absolutely no
07:55 - chance
07:56 - of this while statement becoming false
08:00 - which means this will keep running on
08:03 - and on and fall into an infinite loop
08:05 - remember that a variable name is a
08:08 - string data type
08:10 - while zero is integer and string can
08:12 - never be equal to an integer
08:14 - i want you to avoid such mistakes and be
08:17 - super careful whenever you code
08:21 - it's also worth noting that for loops
08:23 - and while loops are actually not the
08:25 - same
08:26 - they're pretty different and here's why
08:31 - a for loop is a counting loop which
08:34 - means
08:34 - it repeats a certain number of times
08:38 - a while loop is a conditional loop
08:41 - the loops that repeat until a certain
08:44 - thing happens
08:44 - which is they keep repeating as long as
08:47 - some condition is true
08:48 - is called a conditional loop
08:52 - for loop is an exit control loop if the
08:55 - exit condition is true
08:56 - then the loop will terminate on the
08:59 - other hand you have while loops
09:01 - which is entry controlled it checks the
09:04 - condition
09:05 - at the entry as long as it's true the
09:08 - code will proceed
09:09 - and if it's not then it won't it's that
09:12 - simple
09:13 - everyone it's really smart to learn from
09:15 - other people's mistakes
09:17 - and right now i'm here as an example for
09:19 - you
09:20 - please do not forget to add the colon at
09:22 - the end of every four
09:23 - and while loop that you use
09:27 - we have reached the last segment
09:30 - congratulations everyone and this is
09:31 - called the five
09:32 - under five five quick questions that you
09:35 - can finish in under five minutes
09:37 - so let's start here's the first question
09:41 - what's wrong with the following code
09:44 - i want you to pause the video think
09:46 - about it before i reveal the answer
09:49 - i'll count down for the next 10 seconds
09:52 - i'll start now
10:04 - okay here's the answer it's an infinite
10:07 - loop
10:08 - the while condition continues to remain
10:10 - satisfied and the code
10:11 - keeps running so it'll just keep
10:13 - printing the alphabet a
10:14 - over and over again and if you wanted to
10:17 - stop
10:18 - you can press ctrl and c
10:21 - now the next question what is the output
10:24 - of this code
10:25 - again i'm waiting for 10 seconds so
10:27 - let's go
10:38 - here's the answer 34
10:43 - 3 and 4 are individually strings so as
10:46 - soon as they come together
10:48 - they become 34 but it's a string format
10:51 - but since we're converting it into an
10:53 - integer it will finally become the
10:55 - integer
10:55 - 34. here's your next question
10:59 - which operator is used to check whether
11:01 - two variables are the same
11:03 - choose the correct answer and i'll give
11:05 - you five seconds for this one
11:13 - revealing the answer now it's b and
11:16 - here's a bonus thing that you should
11:17 - know
11:18 - you can also use the is keyword to see
11:20 - if two variables refer to the same
11:22 - object
11:24 - on to the fourth question true or false
11:28 - in python variables can be assigned only
11:31 - once and you cannot change the values
11:34 - your five seconds start now
11:41 - time for the answer it's false
11:45 - python is flexible and here's an example
11:49 - now the final question
11:53 - yes or no is pricing case sensitive
11:57 - five seconds begin now
12:04 - here's your answer yes python is
12:07 - case sensitive for example the first
12:10 - letter of boolean true and false
12:12 - must be capitalized otherwise bison
12:14 - won't accept it
12:17 - if you want to practice these concepts
12:20 - make sure to try these out
12:22 - and as a bonus added challenge you can
12:24 - even try to print out the fibonacci
12:26 - numbers
12:27 - in case you're unsure about that make
12:29 - sure to check it out
12:30 - on wikipedia and the link is right here
12:33 - congratulations for making it to the end
12:36 - of the lesson
12:37 - i am so proud of you and you have done
12:39 - really well
12:40 - thank you for being with girls coded and
12:42 - i hope that we continue to learn
12:44 - together for a really long time to come
12:47 - thank you and see you soon