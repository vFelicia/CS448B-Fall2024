00:00 - hi everyone my name is rachel and i am
00:03 - an instructor for girls coded today i
00:06 - will be going over
00:08 - the python data types lesson and if at
00:11 - any point
00:12 - throughout this presentation if you have
00:14 - any questions at all
00:15 - please feel free to ask either me or any
00:18 - of the other
00:18 - instructors and we will try to get back
00:21 - to you as soon as we can
00:24 - and if you guys missed um
00:27 - if you guys missed last week's lesson
00:30 - we just went over an introduction to
00:32 - python and you can find
00:33 - that on our website at girlscoded.org
00:43 - so we go under past events
00:49 - you can find our python class one
00:51 - introdu python
00:53 - video and this will just help you guys
00:55 - help get you guys
00:57 - up to speed for today's lesson
01:00 - and please log on to replits so that you
01:02 - guys can
01:03 - code along with me throughout the lesson
01:07 - so for today's agenda we will be giving
01:10 - a basic overview on
01:11 - data types and variables and we will
01:14 - also be going over operators casting
01:16 - and finally we will have a really fun
01:20 - hunger games workshop slash
01:22 - demonstration
01:25 - so what are data types data types
01:27 - represent values that's how
01:28 - operations can be performed on a
01:30 - particular piece of data so some
01:32 - examples
01:32 - are numeric data types which are like
01:34 - ins
01:35 - floats complex numbers uh we also have
01:38 - strings lists tuples sets and
01:40 - dictionaries
01:41 - and data types have their own built-in
01:43 - methods slash
01:45 - functions so you can do different
01:48 - actions
01:48 - with them and you can use the type
01:51 - function
01:52 - to actually get the data type that you
01:55 - were using
01:56 - and i will show that in one of our
01:58 - examples
02:00 - so what is a variable a variable is a
02:02 - way to
02:03 - store or capture information
02:07 - all right so just to give clarification
02:11 - this first line is basically python
02:14 - script
02:14 - so you guys don't really need to know
02:17 - how to use this for right now
02:19 - but it is a good habit to get into
02:21 - because if you
02:22 - do have multiple files in your python
02:25 - program
02:26 - this is definitely useful so that you
02:28 - can specify
02:29 - that to run this uh to run this block of
02:33 - code
02:34 - only if the name of your program is
02:37 - main which it is you can see here
02:39 - main.py
02:41 - and so it will run this code but you
02:43 - guys do not have to
02:45 - include this python script so um
02:49 - yeah the program will work the program
02:51 - will work exactly the same
02:53 - whether you put the this line of code in
02:56 - or not
02:57 - okay so back to variables a equals 2
03:01 - this assigns the value 2 to the variable
03:03 - a
03:04 - and then if we were to print that out
03:07 - you can see that it prints out two and
03:10 - you use the type function
03:12 - here to figure out what data type
03:15 - 2 is and then it prints out class int
03:18 - because this is an integer
03:21 - and then for the variable b
03:24 - we really quickly went over
03:28 - the input function in last week's lesson
03:32 - but basically what this does is whatever
03:35 - the user inputs here
03:38 - the this value here will be stored
03:40 - inside the variable b
03:42 - and when you print b it will show two
03:45 - and then when you print the type b it
03:47 - will
03:48 - always print out class string so no
03:51 - matter what
03:52 - the user inputs no matter what the user
03:56 - inputs here
03:58 - it will always come out as a string and
04:00 - that's just how the input function
04:02 - works and if you want to change it to an
04:05 - int
04:05 - we would cast that and i will be going
04:07 - over that shortly
04:12 - all right so python is also a
04:15 - dynamically typed
04:16 - language and what this means is that
04:20 - you do not have to actually declare the
04:22 - variable
04:24 - so if you guys have ever coded in java
04:26 - which is a
04:27 - static language you will know that
04:30 - you have to declare the variable with
04:32 - its data type so say
04:34 - you would have to do something like int
04:36 - and then variable
04:37 - equals a value or string
04:40 - variable equals this string but in this
04:44 - piece of code you can see that we did
04:47 - not actually declare the variable x
04:49 - and it just it runs as expected we did
04:52 - not have to declare the variable x
04:55 - and um basically this is a function
04:59 - we'll be going over functions
05:00 - later in our course so basically
05:03 - it takes this value here within the
05:06 - parentheses
05:07 - and stores it within x prints a hundred
05:10 - and the same thing here it's the
05:12 - resistant x prints x
05:14 - and it prints hello there
05:18 - okay moving on so
05:22 - here i just this is a numeric data type
05:25 - integers um what integers are they are
05:27 - positive or negative whole numbers
05:29 - represented by the int class so some
05:32 - examples are 3 500 213.
05:35 - um there you can do this really long
05:38 - number this really small number there is
05:40 - no
05:40 - minimum or maximum number um that can be
05:43 - stored within the end
05:45 - so you yeah you could do this whole long
05:47 - number and it will
05:49 - print as expected
05:53 - i will demonstrate this for you guys
06:00 - all right so basically what these um
06:03 - three single quotes do it comments out
06:06 - multiple lines of your code
06:08 - whereas this hashtag only comments out
06:10 - one line of code
06:12 - that's just a tip you guys can use
06:15 - and yeah so it showed this
06:19 - code shows and when you use the
06:22 - type function it prints out class int
06:27 - even though this is a really huge number
06:29 - this demonstrates
06:30 - there is no maximum or minimum
06:33 - number that can be stored in int
06:37 - now for floats this is also a
06:41 - numeric data type uh the floats are real
06:44 - numbers with a floating point
06:45 - representation so basically
06:47 - it is just a decimal number and it is
06:49 - represented by the float
06:51 - class and it truncates at a point which
06:55 - i'll demonstrate in a second
06:56 - so here are some examples 32.0 16.345
07:00 - and i will demonstrate this
07:06 - all right so our first variable x we
07:08 - stored 15.20
07:10 - inside x but when it prints out it
07:12 - prints out that it prints out as
07:14 - 15.2 and this is because the value was
07:17 - truncated to so that it does not include
07:21 - zero and this is to speed up the
07:23 - efficiency of your code
07:24 - because if um python were to print out
07:27 - all the zeros
07:28 - of this decimal number it could go on
07:31 - for infinity
07:32 - and that would not be a really great
07:34 - language
07:36 - it would run really slowly
07:40 - now for y what this is is
07:43 - scientific notation so how old would
07:45 - print
07:46 - is in scientific notation form 3.23 e
07:49 - plus 19. so this is 3.23 times
07:52 - 10 to the power of 19 which is
07:55 - scientific notation
07:56 - and this happens the same way you can do
07:59 - it either way you don't have to use the
08:01 - plus sign
08:02 - um or you can use a plus sign either way
08:04 - works
08:06 - and you can see that all three will
08:08 - print as class
08:10 - float
08:14 - okay moving on to complex numbers
08:19 - this is also numeric data type um how
08:21 - this is formatted is real number plus
08:24 - imaginary number times j so
08:27 - this concept won't really be
08:30 - used unless you are doing something like
08:33 - advanced
08:33 - calculus or um some advanced physics
08:37 - formulas
08:38 - so we will not be using this in our
08:41 - course but this is just good to know
08:44 - that this
08:45 - is a data type that exists and it is
08:47 - represented by the complex class
08:49 - so here are some examples of complex
08:52 - numbers i will just show you how this
08:55 - prints out
08:56 - but you guys do not have to worry too
08:58 - much about
08:59 - how to calculate it or anything
09:03 - yeah this is how we'll print out
09:09 - okay now for string data types a string
09:13 - is basically a collection of one or more
09:15 - characters
09:15 - within quotes and there is no actual
09:19 - character data type so um basically what
09:22 - a character is is a string that is of
09:24 - length one
09:25 - so say a or like an exclamation mark or
09:27 - even like
09:28 - a dollar symbol those are all characters
09:32 - but they don't have a character data
09:34 - type they are represented
09:36 - by the string class and then i will just
09:39 - show you guys some examples of some
09:41 - strings here
09:44 - okay again this is python script that
09:46 - you don't have to worry about for right
09:47 - now this is a string counter that
09:50 - we will be looking at later so don't
09:52 - worry about that just yet
09:54 - um okay so let's just run the code so i
09:57 - can
09:57 - show you guys what this does all right
10:00 - so
10:02 - for variable a we assign it with this is
10:05 - a string with double quotes around it
10:07 - it will print into the interpreter like
10:09 - this if you were to use single quotes it
10:11 - would also print out the same way
10:14 - um if you use three double quotes
10:18 - like this this allows you to print
10:21 - a multiple line string and however you
10:24 - format it within
10:25 - the editor here however you were to
10:28 - format it it will
10:29 - print in the same way inside the
10:32 - interpreter
10:35 - yeah so all the white space will all be
10:37 - shown in the interpreter
10:40 - okay for variable d this here
10:44 - this group of code just represents
10:48 - some special characters that you will
10:50 - need to use an escape
10:51 - sequence in order to print within a
10:54 - string and
10:55 - this includes quote double quotes
10:58 - single quotes and even the backslash and
11:01 - the reason why we need this escape
11:04 - sequence is because
11:05 - if we were to delete the backslash what
11:07 - this would do
11:08 - is that it would take this as the string
11:10 - and this would just be some unknown code
11:12 - that is not within the string but if you
11:15 - wanted to actually
11:16 - print a double quotation mark inside
11:18 - this string what you would need to do
11:20 - is use the escape sequence and use a
11:23 - backslash
11:25 - this is how it would print you would use
11:27 - a backslash for another backslash
11:29 - so print like that and the escape
11:32 - sequence
11:33 - also includes the this new line
11:35 - character and what a new line character
11:37 - does is it's essentially like an enter
11:40 - key
11:41 - but within your string so it will give
11:44 - you a new line
11:45 - as you can see here it enters
11:49 - and here is a new line at character
11:54 - okay now for g
11:58 - um here
12:01 - this is an unformatted string
12:05 - so um how your string will print depends
12:08 - on your white space
12:10 - it will include your white space as
12:12 - shown here here's the white space it
12:14 - also did a new line
12:16 - didn't you like here if you want to use
12:18 - the
12:19 - strip function is this showing here
12:26 - yes the strip function will remove
12:29 - all white space so
12:32 - basically here we see the strip function
12:37 - um a room it will remove the new line
12:39 - this is considered white space it will
12:41 - remove this white space right here
12:43 - that is considered white space and it
12:44 - will remove this white space here with
12:47 - the new line but what it doesn't do is
12:49 - it does not
12:50 - remove this new line here because um the
12:54 - strip function
12:54 - only removes the white space from either
12:56 - end of your string so remove
12:59 - these parts of the white space as you
13:01 - can see here
13:04 - um for the strip function specified with
13:07 - a
13:08 - character um this specifically
13:11 - deletes the new line characters
13:15 - at either end of your string so
13:18 - this is shown here
13:22 - so it only removed the new line
13:25 - character here
13:26 - and they removed the oh it did not
13:29 - remove any of the
13:31 - um it did not remove this new line here
13:33 - because there is white space here so it
13:35 - is not
13:35 - technically at the end of this string
13:37 - but it will also
13:38 - keep this white space here because it
13:41 - only gets
13:41 - rid of the new line character um
13:46 - and it will also even though you are
13:48 - specifying you want to delete to the new
13:49 - lines it only gets rid of it at either
13:51 - end of the string so it will not get rid
13:53 - of
13:53 - this d line or this new line and you can
13:56 - see that printed here
13:58 - uh now for the find function
14:02 - this basically you specify the
14:05 - substring that you want to locate within
14:08 - the
14:08 - whole string here and then it basically
14:12 - locates it
14:13 - based on the index of the string
14:17 - so um here i can show you guys what the
14:20 - index would be
14:21 - so this would be index 0 1
14:24 - 2 3 4 5 6 7 8 9
14:28 - 10 11 12 13 14 15
14:31 - and 16. so at index 16 is where
14:35 - the um string shows up and you can see
14:38 - here printed
14:39 - 16 and 4
14:43 - h this uses the
14:46 - format function specified with the
14:47 - variable string count
14:49 - so throughout the program we were
14:50 - counting the number of strings
14:52 - and then so what you would do is
14:55 - you place two curly brackets
14:58 - for where you want to input the number
15:02 - in to your string and you
15:05 - have to use the format function because
15:07 - you cannot concatenate
15:09 - a string within ins because there are
15:11 - two different data types
15:12 - so you can't um you can't connect
15:15 - concatenate them together
15:16 - so this is how you would print how you
15:19 - would print it out
15:20 - so that it would include the variable
15:22 - for string count
15:23 - within your string so let's say there
15:26 - are eight strings in this example
15:28 - all right so now we will move on to the
15:32 - split function and what this does it is
15:35 - is it specifies where you want to
15:39 - split this entire string into two
15:42 - separate sub strings so it will delete
15:46 - this colon here and then it will
15:48 - separate
15:49 - these into two sub strings
15:52 - as shown here you can see one substring
15:55 - and i'm not sure you can see that
15:57 - but it does it does
16:00 - um separate that into a second substring
16:05 - and finally we have the print function
16:08 - for
16:08 - indexing this just shows that you can
16:10 - index a string
16:12 - so basically at index three
16:15 - it will print out whatever is at index
16:17 - three so for this string
16:19 - index three will be i
16:22 - and they will print out i here and
16:25 - um oh yeah i just wanted to
16:30 - highlight this um indexing for python
16:33 - always starts at zero so always remember
16:36 - that indexing always
16:37 - starts at zero so the s here will be
16:40 - zero p will be one i will be
16:42 - two i will be three
16:48 - okay um now for the
16:51 - tuple data type a tuple is a collection
16:54 - of objects
16:54 - which is ordered and immutable which
16:57 - means that they cannot be changed
16:58 - so these values in here cannot be
17:00 - changed and here's an example of that
17:11 - okay so if we run this code we can see
17:14 - that tuple one at index
17:18 - zero will print out
17:21 - physics because for this tuple um
17:24 - physics is at index zero and then for
17:27 - tuple2
17:28 - this just is asking um what will print
17:31 - if you include two indexes one and five
17:35 - so the first index is inclusive the
17:37 - second index
17:38 - is exclusive so i index so this will
17:41 - print out
17:42 - um the values within index one and five
17:46 - so from here index one will be two index
17:49 - five will be
17:50 - six but since the second index
17:53 - is exclusive it will not print out six
17:55 - but it will print out two
17:56 - three four and five as shown here
18:02 - okay um so now for lists
18:05 - this is an ordered collection of
18:07 - elements and this
18:10 - lists are immutable so they can be
18:11 - changed unlike
18:13 - tuples and i will show you an example of
18:18 - this
18:21 - and again we will be going over all of
18:24 - these
18:25 - lists tuples sets um
18:28 - most of the stuff covered in today's
18:29 - lesson we will be going over this again
18:31 - in a future lesson so you don't have to
18:34 - worry too much if you aren't able to
18:35 - completely grasp
18:36 - the concepts but if you do have
18:38 - questions again please feel free to
18:39 - reach out ask us any questions through
18:41 - our emails
18:52 - okay so if we print this you can see
18:55 - printing list one
18:57 - it will show up in the same way as you
19:00 - um declared list one as
19:04 - for list two we are using a for loop
19:07 - which will also be having
19:09 - a future lesson on for loop but
19:11 - basically
19:12 - for each of these values for each fruit
19:16 - in this list we will print the fruit
19:18 - like so apple
19:20 - banana and orange in order
19:23 - and for this last for the last two lines
19:26 - of code
19:28 - um this shows that you can have
19:31 - different data types within a list so
19:34 - you can have an int
19:35 - and a string within a list and that is a
19:37 - totally valid list
19:39 - for python and yeah if you were to print
19:42 - this
19:43 - list three add index two this would
19:45 - print out
19:46 - two here and then list three at index
19:48 - one here
19:50 - it would print out chicken nuggets and
19:53 - it would say i want two chicken nuggets
19:56 - and this would only work because we used
19:59 - commas so but if you were to actually
20:02 - concatenate
20:04 - the um if you actually try to
20:06 - concatenate the
20:08 - data type together this would end in as
20:10 - two
20:11 - well this would be a string and this
20:12 - would be a string so again
20:14 - you cannot combine a string and an in
20:18 - together
20:19 - and you would actually have to cast this
20:21 - which i'll be going over
20:22 - a little bit later okay so moving on to
20:25 - sets these are an
20:26 - unordered and un indexed collection of
20:29 - items
20:29 - and you cannot access any of the
20:31 - elements elements in the set
20:33 - by indexing because the elements always
20:36 - print in
20:37 - a random order and these are denoted by
20:40 - curly brackets oh and sorry i forgot to
20:42 - mention lists are denoted by
20:45 - regular brackets and tuples are denoted
20:48 - by
20:48 - parentheses
20:51 - and i will just show you how sets will
20:54 - print
20:55 - in the interpreter
21:01 - i will print um you would expect it to
21:03 - print chicken pot pie but since
21:05 - sets always print in random order it
21:07 - will say some
21:08 - um this just happened to print in the
21:11 - right order
21:12 - if you were to run it again it would be
21:13 - in a totally different order
21:15 - you run it again again it will be in a
21:17 - different order and that just shows the
21:19 - sets
21:20 - are always random
21:25 - okay now for dictionaries
21:29 - dictionaries are a collection of key and
21:31 - value pairs you can't have any duplicate
21:33 - keys but you can have
21:35 - duplicate values so in this example here
21:39 - a would be the key and 12 would be the
21:41 - value
21:42 - 12.3 would be the key and hello would be
21:44 - the value
21:45 - and uh remember keys are case sensitive
21:48 - so make sure your capitalization is
21:50 - correct
21:51 - when you call the keys and dictionaries
21:54 - are ordered
21:54 - indexed and so
21:58 - i will show you guys
22:01 - how this would look in the interpreter
22:07 - all right so we wanted to find a
22:11 - dictionary with the key as one and it
22:14 - will print out the value
22:16 - hello and then for this same dictionary
22:20 - at key 3 this will also print out the
22:23 - value
22:24 - hello and for the dictionary at
22:29 - key 2 it will print out the
22:31 - corresponding value
22:32 - by all right
22:40 - now for operators we will be going over
22:42 - action
22:43 - versus assignment okay
22:46 - so if we run this
22:50 - this here these two lines are
22:53 - assignments we are just assigning the
22:55 - value 1
22:56 - to the variable a and here we're
22:58 - assigning the value 2 to the variable b
23:00 - so we're not actually doing anything to
23:02 - each of these values we're just
23:04 - assigning them to the variable now for
23:08 - this line of code this is an action we
23:10 - are adding
23:11 - 10 to the variable a but
23:14 - if we were to print this out a would
23:16 - still be one
23:18 - shown here and this is because
23:21 - we did not actually assign a any value
23:24 - we just
23:25 - did the action of adding so
23:28 - a is not a any new value at all it will
23:31 - still be one
23:32 - okay for this line of code this is both
23:35 - an action and an assignment
23:37 - using the plus equals operator so
23:40 - basically what this operator does
23:42 - is it's this is the equivalent
23:46 - of it but this is just basically a
23:47 - shortcut of this format
23:50 - so it is taking the value b
23:53 - the value from b to and adding it to 10
23:56 - and then it declares the total sum of
24:00 - b plus 10 to b itself
24:04 - so if we were to to delete that to run
24:08 - it again
24:10 - it will show 12.
24:13 - so yeah that is basically the difference
24:15 - between an assignment and an
24:17 - action and how you can combine both to
24:19 - actually assign
24:20 - the whatever action you wanted to do to
24:23 - the variable
24:23 - and print that out into the interpreter
24:29 - now we will go over operators themselves
24:31 - operators in python are very flexible
24:34 - here we just declared two ins to the
24:37 - variables in
24:38 - a and into b and if we were to
24:41 - run this it would print out leave
24:44 - whatever value is stored in int
24:46 - a which is 5 and the value stored in in
24:48 - b which is 12 we would add them together
24:50 - so 5 12 would be 17 5 minus 12
24:54 - negative 7 5 times 12 16.
24:59 - yeah these are all operators if we
25:00 - wanted to do an
25:02 - exponent you could do the value stored
25:05 - in into b
25:06 - with um you would have two asterisks or
25:09 - two multiplication symbols
25:11 - with the power you wanted to um
25:14 - multiply by so this raises
25:18 - into b which is 12 to the power of 2
25:20 - which gives you 144.
25:22 - you can also divide into a y and b
25:25 - giving you
25:25 - this complex number here so here
25:28 - is the modulo operator and this is
25:32 - division into b divided by into a and it
25:35 - gives you the remainder of that
25:36 - so it would be 12 divided by 5
25:40 - which would be which would equal 2
25:43 - remainder 2
25:44 - so the remainder 2 would be printed here
25:48 - booleans are another data type they
25:51 - return
25:52 - either true or false what this line does
25:55 - is it checks whether this
25:58 - whether boolean a or boolean b will
26:00 - return
26:01 - true so if either boolean
26:05 - a or boolean b is equal to true
26:08 - then it will also print out true which
26:10 - it does because boolean a
26:12 - is equal to true now for this line
26:16 - this is checking if boolean a and
26:18 - boolean b
26:19 - are equal to true if they will both
26:21 - return true
26:22 - but since boolean b is false um one of
26:26 - the conditions is not
26:27 - met but and since there is the and
26:29 - operator here
26:31 - both conditions have um i mean both
26:33 - booleans have to meet the condition
26:35 - of true and since that is not true
26:39 - the print statement will actually print
26:43 - false now first strings
26:48 - if you were to add two strings together
26:51 - using the addition operator this would
26:54 - just
26:54 - append string b to string a so it would
26:57 - say
26:58 - hello world like this
27:01 - and for list if you were to use the
27:02 - addition operator
27:04 - here it would just also append the list
27:08 - from list b to list a so what this would
27:11 - print out is
27:12 - one two three four five six shown here
27:14 - and if you were to append list c to list
27:16 - a it would go
27:17 - one two three one two as shown here
27:21 - and what i just went over only covers
27:23 - some of the basic operators and there
27:24 - are many more
27:25 - out there
27:28 - okay casting what is casting this
27:32 - casting is basically when you convert
27:34 - one data type
27:35 - to a different data type almost like
27:38 - this magician here
27:40 - and you would use the into or
27:44 - string functions to cast them into a
27:47 - different data type
27:48 - and i'll just demonstrate this
27:51 - okay so if you were to run this code you
27:54 - would come out
27:54 - with um an error if you were to put an
27:58 - int this would no matter what this would
28:01 - print out as class string and i'll just
28:03 - show you guys
28:04 - this because as i mentioned earlier
28:07 - um no matter what you input
28:11 - into the input function sorry
28:14 - no matter what you input into the input
28:16 - function it will always come out as
28:19 - class string
28:23 - you can see it came out as class string
28:25 - and because
28:27 - we wanted to add an int with a string
28:30 - this does not work you cannot um
28:34 - you can't add two different data types
28:36 - together because
28:37 - that doesn't work out
28:41 - so how you would fix this
28:44 - is you would have to cast b here
28:47 - into an int so it was originally a
28:50 - string but using the int
28:51 - function you casted it into an int and
28:55 - you can add the two values together so
28:58 - it would be adding
28:59 - 10 10 here plus what you would put it
29:02 - here
29:03 - two which was casted into an in so ten
29:06 - plus two would equal
29:07 - to the end twelve so another way you
29:11 - could
29:12 - cast the ins would be
29:15 - to use the hint function and just
29:18 - put it all around the input function
29:20 - here
29:22 - and that will also cast your string into
29:26 - an end and they will add it together but
29:28 - say you
29:29 - don't want to actually add them together
29:32 - you know traditionally
29:34 - mathematically you want to say append
29:36 - the string
29:38 - to to a string ten
29:41 - so you could do this by casting
29:45 - a as a string and then if you run it
29:51 - you will append two to 10 and then it
29:54 - will come out as
29:55 - 102. so you were appending it and you
29:58 - did not mathematically
29:59 - add it and that is
30:03 - the basics on casting and finally we
30:06 - have our demo and
30:08 - we will just be going over a
30:11 - hunger games character creator
30:15 - alright so here we are in our main file
30:18 - for our demonstration so what this
30:22 - line does is it imports the text file
30:25 - um it inputs the oh
30:28 - it imports this python file sorry not
30:31 - the text file it imports the python file
30:35 - so that you can run it in this main
30:38 - python file
30:40 - and don't worry too much about importing
30:43 - we will be going over that in future
30:45 - lessons
30:45 - again the python script will also be
30:47 - going over that in a future lesson
30:49 - and basically what this line does is it
30:52 - places
30:54 - a it calls a function
30:57 - and it stores it into this variable out
31:00 - and then it will print it out
31:02 - and where this function is located is in
31:05 - the
31:05 - character class python file so
31:09 - when this
31:12 - when the function is called here
31:16 - it is calling it from this character
31:19 - class file
31:20 - and it will it will call upon this
31:23 - code here okay with
31:26 - the file which is the character text
31:29 - file
31:30 - and here we just have
31:33 - some descriptions on each of the
31:35 - characters from hunger games
31:39 - okay so here you don't have to worry
31:42 - about
31:43 - this for right now you don't have to
31:45 - worry about this section here right now
31:47 - um what this does is it opens the
31:51 - file here character text characara
31:54 - dot text it will open this file and then
31:57 - here is a for loop
31:58 - again don't worry about for loops we'll
31:59 - be going over that in future lesson
32:02 - um so for each line in this
32:05 - file for each line we will
32:08 - um we will be
32:12 - executing this code for each of
32:15 - the lines in this character text file
32:20 - okay so what after that
32:23 - we use the strip function
32:27 - and store the stripped
32:30 - lines these stripped lines into the
32:33 - variable x
32:34 - and so that will just strip any white
32:37 - space so it will strip this white space
32:39 - here
32:40 - we'll get rid of that white space any
32:42 - white space on this side
32:43 - we'll get rid of two
32:47 - and again it stores an x and then in
32:49 - this conditional here
32:51 - if character in x this checks if the
32:53 - substring
32:54 - character is found in this
32:57 - line then we will carry out
33:01 - this code here and then
33:04 - we are using the split function to
33:08 - split this line of code into
33:11 - two sub strings with the colon and the
33:15 - space
33:16 - that was specified here we specified the
33:19 - colon on the space so we will
33:22 - get rid of the colonist space separate
33:25 - it into two substrings
33:26 - so one substring will be character and
33:28 - the second substring will be katniss
33:30 - everdeen and then we also
33:33 - specified it at index one we want to
33:38 - assign the split function with index one
33:41 - into the variable name
33:43 - so this will be printed out as a list
33:47 - so it will be character as one sub
33:48 - string with a comma and then candice
33:50 - everdeen as the second substring
33:52 - and so this will be index zero this will
33:55 - be index one so what we will actually be
33:56 - printing out
33:58 - is katniss everdeen that will be stored
34:01 - inside of
34:02 - name and then we basically just store
34:05 - this inside the output
34:07 - we'll return the output later and then
34:08 - we do the same thing with
34:10 - district and weapon
34:14 - so district and weapon it just keeps
34:17 - checking for each of these lines of code
34:19 - so basically how this will print out if
34:21 - we run the code
34:23 - um you'll see kadness everdane and then
34:26 - 12
34:26 - bone arrow finna go dare for trident
34:30 - um and just keep going throughout the
34:32 - character text file and that's basically
34:34 - how you
34:35 - can sort through a text file using
34:38 - the specific string function so use
34:42 - strip and split and
34:46 - that is just how you can apply it to
34:49 - um a file like this
34:55 - all right so here are just some
34:57 - additional resources
34:58 - that are really useful if you click on
35:01 - this link here
35:04 - you'll see a bunch of documentation on
35:08 - data types in python this is really
35:10 - useful you can
35:12 - read through it if you have extra time
35:16 - and another really important resource is
35:20 - w3 schools
35:23 - and w3schools basically has a bunch of
35:26 - documentation
35:27 - on a bunch of different languages
35:31 - so this is definitely somewhere you can
35:34 - do a lot of additional reading on
35:37 - learning python
35:38 - some other python documentation
35:41 - there's a lot of documentation on python
35:44 - data types that you guys can go
35:45 - through yeah this is really
35:49 - this is a really widely used resource in
35:51 - the programming world
35:52 - so i would really recommend w3schools
35:56 - and that concludes the lesson for today
36:01 - um thanks everyone for watching our next
36:03 - lesson will be next saturday september
36:05 - 19th
36:06 - at either 9 a.m or 3 p.m pst depending
36:09 - on when your lesson is scheduled
36:12 - um we will be going over conditionals
36:15 - next lesson
36:16 - and if you do need any help or want
36:18 - one-on-one tutoring
36:19 - please don't be afraid to reach out here
36:21 - are some emails you can reach out to
36:23 - or you can go to this link here
36:28 - and if you click the
36:32 - book button
36:40 - you can just fill this out get some
36:41 - one-on-one tutoring for any help that
36:43 - you might
36:44 - need um and yeah
36:48 - thanks everyone for listening i hope you
36:49 - enjoyed today's lesson
36:52 - and bye