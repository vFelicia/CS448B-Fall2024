00:00 - as of now so the session has started
00:02 - recording
00:03 - okay let's get into javascript part two
00:07 - so let's present this
00:10 - javascript part two today we're gonna
00:12 - get into functions
00:14 - um which is a really exciting topic it
00:15 - comes up a lot in a lot of different
00:17 - kinds of code
00:18 - oh i guess the leaves were i think this
00:20 - week
00:21 - functions um a function is a block of
00:25 - code
00:25 - you can reuse without copying and
00:28 - pasting it every time
00:31 - that's an interesting way to think about
00:32 - it i like to think of a function
00:34 - as a specific instruction set
00:37 - that is used when you call upon it so
00:40 - it's basically like saying like
00:42 - oh like you write out a function and a
00:43 - function is like a given set of
00:45 - instructions that a computer completes
00:46 - and then you can call on that function
00:48 - that's what it means when you can reuse
00:50 - it
00:50 - you can call on it and it will just do
00:53 - the instruction set you don't have to
00:54 - rewrite it out you can just call on it
00:56 - um each function is designed to do one
00:58 - task
01:00 - um yeah that's pretty true um
01:04 - i know we have an example today where
01:05 - like if you want to add a counter you
01:06 - can add that on
01:08 - um into a function so i think one task
01:10 - is a little bit limiting
01:11 - but generally speaking you're going to
01:12 - use like one function for task
01:14 - especially when you're learning code
01:15 - because it keeps everything organized
01:17 - um and functions are executed when they
01:19 - are called that's what that means
01:21 - you can reuse them um they're called
01:24 - um so this let's go over the syntax of a
01:27 - function this is what all functions are
01:29 - going to really look like
01:30 - so this is a function we have and i'm
01:33 - going to go through it in simple english
01:34 - we're going to talk about what it does
01:35 - and then we're going to go through the
01:36 - syntax of it
01:38 - so this function called ask name will
01:41 - trigger an alert that says hello and it
01:44 - will have a prompt
01:46 - that asks you what your name is where
01:47 - you can fill in your name
01:50 - now syntax functions you always have to
01:53 - declare it with the keyword function to
01:55 - say
01:56 - this is a function so by declaring it
01:58 - function
01:59 - you always do that and that's always the
02:00 - first thing you do in a function
02:02 - function name of function
02:06 - so you can name it pineapple you can
02:08 - name it
02:09 - banana you can name it but in this case
02:11 - it's ask name i always recommend naming
02:13 - it something that has
02:14 - meaning to what the function is
02:16 - executing so that you can like organize
02:17 - your code better but you can name it
02:19 - whatever you want
02:20 - um you can't name it something that is
02:22 - an already given operator so you can't
02:24 - have a function
02:26 - named function because the computer will
02:28 - get confused
02:29 - um in terms of like what you're asking
02:31 - it to do so like you can't have a
02:33 - function
02:33 - um that's like an inherit like
02:36 - so there's inherent functions and we're
02:38 - going to talk about those later but you
02:40 - can't name a function
02:41 - name that's an inherent function so you
02:43 - can't name it like um
02:45 - this is a java example but like
02:46 - math.random
02:48 - picks a random number you can't name a
02:50 - function math.random because it will get
02:52 - confused
02:52 - so just pick something that's like a
02:54 - normal english word and you'll generally
02:56 - be okay
02:58 - um then we have the code
03:01 - that is within the function and remember
03:03 - it's always within
03:05 - these two curly brackets so we always
03:08 - have our code that's within these two
03:09 - curly brackets and then we have our code
03:12 - that is our function so it's our
03:14 - instruction set
03:15 - and then does anyone see this this is
03:17 - outside of the function so this is no
03:19 - longer part of the code of the function
03:21 - this is outside of the function and this
03:23 - is how we call upon a function
03:25 - so you just see this the ask name so
03:28 - it's just the name of the functions
03:29 - with the parentheses and then we always
03:32 - end our code segments
03:33 - um with a semicolon so we just do that
03:36 - so
03:36 - basically when you call upon a function
03:38 - you just execute this code
03:40 - by just saying this all right we'll move
03:42 - on um i actually have a question
03:44 - okay yeah go ahead so with the two
03:47 - parentheses
03:48 - is that just a way to mark the um
03:51 - the name of the function like as a
03:54 - market as a function
03:55 - or it's a little different uh
03:58 - it's iffy um i know
04:01 - at least like in here so by putting
04:04 - nothing in here you kind of just
04:05 - established it as like a normal function
04:07 - like quote unquote normal function
04:09 - but you can put um data types in here
04:12 - that specif specify what kind of data
04:14 - types are being used within the function
04:16 - but a lot of the times like especially
04:18 - when you're doing simple stuff you won't
04:19 - need it but you could do like ask name
04:21 - string ask name um
04:24 - integer b or something like that and
04:26 - that brings in
04:28 - certain things that you can then work
04:29 - within the function um a lot of the
04:31 - times you're going to see that with like
04:32 - integers if you want to use um if you
04:34 - want to like make
04:35 - a function that works with integers so
04:39 - um you could have like ask i mean
04:43 - okay say i want a function that says
04:45 - dice roll so i have a function called
04:47 - dice roll
04:47 - and the dice function basically just
04:50 - picks a random number from one to six
04:52 - so i would do like function dice roll in
04:55 - here i could have like
04:56 - integer d okay or like into d
04:59 - which tells me i'm working with an
05:00 - integer but yeah generally you're not
05:02 - gonna put anything in here unless you're
05:03 - working with a specific data type
05:05 - okay thanks good question though uh
05:09 - functions continued so using functions
05:11 - will generally
05:12 - uh well sorry will greatly reduce the
05:14 - amount of code necessary to do a task
05:16 - so um this
05:19 - is the code execution for
05:23 - remember our function over there but if
05:25 - we wanted to just call the function four
05:27 - times like we just wanted the code to
05:28 - execute four times instead of rewriting
05:30 - it out four times
05:30 - we can just call the function four
05:32 - different times so that's why we like to
05:34 - use functions because it's a one
05:36 - instruction set we write it once and
05:37 - then we can call upon it whenever we
05:39 - need it
05:41 - functions continued so functions can
05:43 - have parameters this is what you were
05:45 - talking about this is like the parameter
05:47 - thing
05:48 - parameters are variables declared in the
05:50 - parentheses at the top of the function
05:51 - remember
05:52 - i use the example like integer b that
05:55 - could be a fun
05:56 - variable so in this scenario we're using
05:59 - a string variable called greeting
06:02 - um so they're assigned values in the
06:04 - function call in the parentheses of a
06:05 - function call
06:06 - you add values to be assigned to the
06:09 - parameters
06:10 - and the values in the function are
06:11 - called arguments so these variables can
06:14 - be used within the scope of the function
06:16 - the curly brackets let's go through this
06:18 - in normal english
06:20 - function ask name greeting so this is
06:22 - our parameter
06:23 - the our parameter is a string variable
06:26 - called greeting yes so it's not an
06:30 - integer
06:31 - it's not a boolean it's a string
06:34 - variable called grading and we know it's
06:36 - a string variable because we know it's
06:37 - going to be printed out and we can see
06:39 - it over here
06:41 - yes so alert greeting
06:44 - so alert greeting that's i was
06:48 - asking it um to assign the input
06:52 - of the alert as the variable
06:55 - right because we don't know what it is
06:56 - yet so by saying alert greeting you're
06:59 - saying
06:59 - okay whatever is the answer to this
07:03 - question
07:03 - this prompt alert whatever the answer to
07:06 - that question is
07:07 - we're going to assign it as the variable
07:10 - greeting
07:10 - so whatever gets put in that text box is
07:13 - now known to the computer
07:15 - as a string variable greeting
07:19 - and then console.log greeting
07:23 - this helps us because we have no idea
07:25 - what the answer to the question what is
07:27 - your name going to be
07:28 - so by assigning it an unknown
07:30 - undetermined
07:31 - string variable like greeting
07:34 - we can just say okay well whatever the
07:36 - value is we don't know what it is
07:39 - it's just going to be assigned greeting
07:41 - and then whatever the value is
07:43 - it can just be printed out as greeting
07:47 - yes it's a little weird
07:52 - um but this one also gets into arguments
07:56 - so like ask name how is it going
08:00 - argument so i'm gonna get my pointer and
08:03 - i'm gonna
08:04 - i hate this little bottom bar because it
08:06 - always interferes with our code
08:08 - but i'm gonna try and not move my cursor
08:10 - really quick so we can talk about it
08:11 - okay
08:12 - everyone see line seven ask name how is
08:16 - it going
08:17 - this is an argument this is where we are
08:20 - going to
08:21 - apply our function um
08:24 - in a real world example so remember how
08:27 - we
08:28 - called on a function and we said
08:29 - function name and then two
08:32 - brac uh like
08:36 - parentheses yes that is the word
08:38 - parentheses ask name
08:40 - parentheses so now
08:43 - ask name is gonna take the information
08:47 - given to it and then address it
08:51 - so in this example it's to print so it's
08:53 - going to
08:54 - first what it's going to do when you say
08:56 - when you call on this function by saying
08:57 - ask name how is it going
08:59 - what the computer is going to do it's
09:01 - going to show an alert
09:03 - and the alert is going to have an input
09:04 - box that says what is your name
09:07 - you put your name in so i would put
09:09 - willa
09:10 - and then it would you would press enter
09:13 - it would go into the system
09:14 - the system would take my name willa
09:16 - assign it to the value of greeting
09:18 - and on the console which is that black
09:21 - square
09:23 - that you would see in reply it would
09:25 - print how is it going
09:26 - willa
09:32 - no it wouldn't no it wouldn't it would
09:33 - just print how is it going
09:35 - but if we printed if we had it as how is
09:38 - it going
09:39 - plus remember our cognitive
09:42 - concatenated statements so if we said
09:44 - how is it going
09:45 - plus greeting it would say how is it
09:48 - going plus
09:49 - how is it going willa but for right now
09:51 - it just says how is it going and then it
09:53 - stores my name as the variable greeting
09:58 - i'm sure there's questions okay
10:01 - yeah we do have one question so go ahead
10:04 - okay so input in the parentheses
10:07 - becomes the identity label of the user's
10:10 - answer
10:11 - yes if i'm understanding that question
10:14 - right
10:15 - yes so basically by putting
10:18 - see this greeting this greeting is
10:20 - basically like the
10:21 - id badge of the variable
10:25 - right so like say you have a math
10:28 - equation where
10:29 - x is equal to five but you don't know
10:32 - that yet
10:32 - right you just know that you have the
10:34 - variable x so the variable x
10:37 - in your mind before you know that it's
10:39 - equal to a specific number can be any
10:40 - number
10:42 - therefore it's just the identity that
10:45 - you give
10:46 - the unknown number it's the exact same
10:48 - way but we're going to use it for
10:50 - unknown words instead of unknown numbers
10:53 - yes no maybe
10:57 - and then in addition to that is
11:00 - and the input in the bottom in the
11:03 - bottom
11:04 - ask name works differently from the
11:06 - input
11:08 - in the first function ask a name right
11:12 - or ask a name so ask name
11:17 - in the box i think when you say lines i
11:20 - think when you say the bottom i think
11:21 - you're talking about line seven so i'm
11:23 - gonna
11:23 - leave it here line seven is not an input
11:26 - i mean it kind of is what is being asked
11:30 - here
11:31 - the function ask name has an input
11:34 - variable
11:35 - the input variable is called greeting
11:38 - yes so whenever you call the function
11:42 - ask name
11:43 - as you're doing in line seven you
11:46 - get an input variable of name or
11:50 - of greeting which is the name right
11:53 - but that's not what's happening
11:57 - i mean it's what's happening in seven
11:59 - but line seven
12:00 - basically what it does is it just says
12:02 - it takes all your information that's
12:04 - great but it just prints
12:05 - how's it going to the console
12:10 - right so it's like
12:13 - well
12:16 - i don't like this example code i don't
12:19 - like this example code let's go back
12:21 - so see how we have all of these things
12:24 - and it's like just ask name
12:26 - by doing this this line 11 just this ass
12:29 - name we just
12:31 - have this hello what is your name the
12:33 - next slide we
12:35 - assign the value like the input value
12:38 - of the name to a variable and then we
12:40 - add like how's it going so it will say
12:42 - like oh how's it going
12:44 - your name but it doesn't say your name
12:45 - because it's not a concatenated
12:46 - statement
12:48 - i think it should i think that would be
12:49 - a better example but it doesn't
12:52 - arguments and parameters example i think
12:54 - this would have been helpful
12:56 - to look at so we're going to do it we're
12:57 - going to go through it quick when you
12:59 - call
13:02 - i'm sorry okay let's go through it again
13:05 - in the visual format
13:07 - so function ass name greeting alert
13:10 - greeting prompt what is your name
13:13 - greeting
13:13 - is referring to how's it going not what
13:16 - is your name
13:19 - what is your name is a different
13:20 - variable but greeting
13:22 - gets inserted to here because
13:26 - when you put how's it going how's it
13:28 - going gets established as the greeting
13:31 - so it gets inserted in that's what that
13:33 - means
13:34 - i'm sorry i made such a big error i'm
13:37 - i've been coding in different languages
13:39 - i have
13:41 - made a mistake so when you say
13:44 - call the function and you do this so by
13:46 - saying ask name when we say ask name
13:49 - we make a string variable called grading
13:51 - i didn't get that wrong
13:53 - so we say ask name greeting greeting is
13:55 - the string variable here
13:56 - that's great so console log greeting
14:00 - we create a string variable called
14:01 - greeting when we say ask name how's it
14:03 - going
14:04 - we take this input this text input
14:07 - and we establish it as the value
14:09 - greeting it's not the what is your name
14:11 - it's the how's it going
14:12 - so it's still a string variable it's
14:14 - still a variable that gets used within
14:16 - the function but it's just
14:17 - how's it going yes so now greeting is
14:20 - the how's it going so console.log
14:22 - greeting see our string variable
14:24 - greeting will print how's it going on
14:26 - the console
14:28 - now because it's an alert the parameter
14:31 - greeting can now be used within the
14:32 - function just like a variable
14:34 - how's it going does that make more sense
14:37 - i'm sorry i messed it up guys i really
14:39 - do apologize
14:40 - okay arrow functions error functions are
14:42 - more condensed version of regular
14:44 - functions
14:45 - um they allow you to create a function
14:47 - without giving it a name
14:50 - so we had a little bit of a meeting
14:53 - on arrow functions um
14:56 - this is a literal this this
14:59 - th i hate this i
15:02 - don't like this so this tells me
15:05 - literally nothing about what an arrow
15:06 - function is so arrow functions
15:08 - um they can act as like excel
15:12 - not accelerators but like um it just
15:15 - condenses the
15:16 - regular function code down um
15:20 - yes it allows you to create a function
15:21 - without giving it a name
15:23 - i don't recommend doing this
15:26 - like when like you guys are just
15:28 - learning how to code
15:29 - do not give functions that don't have
15:31 - names right now
15:33 - you know you like and i'm not saying
15:35 - this because i don't doubt your coding
15:36 - ability
15:37 - i'm saying this because i've made these
15:38 - mistakes and i have like
15:40 - lost a lot of work or i've deleted
15:42 - things that i didn't realize that i
15:44 - shouldn't be deleting
15:45 - give names to things it helps you
15:48 - organize it helps you realize what
15:50 - things are happening
15:51 - it helps you organize things it helps
15:53 - you call on specific things you want to
15:55 - call on
15:56 - so even if you want to use arrow
15:57 - functions don't
15:59 - create a function without a name in my
16:02 - recommendation
16:03 - because i think that it can be really
16:05 - confusing and i think you can like lose
16:07 - things and lose
16:08 - track of things really easily and you
16:10 - can just confuse yourself
16:11 - unnecessarily so i don't recommend doing
16:14 - this
16:15 - but yes arrow functions are a more
16:16 - condensed version of regular functions i
16:18 - think this is a really bad example i
16:19 - think i'm gonna put in
16:21 - where we can hold up so this shows us a
16:24 - traditional function
16:25 - and an arrow function and i think seeing
16:28 - the difference will be helpful
16:30 - so a traditional function we have a
16:31 - function we have our two variables
16:34 - yes the function wants us to return a
16:37 - plus
16:37 - b plus a hundred right so we have our
16:40 - two unknown variable values
16:41 - and the function just wants us to return
16:43 - a plus b plus a hundred
16:44 - so some integer value by using an arrow
16:48 - function
16:49 - we take out the word function so no more
16:51 - word function
16:52 - no more curly brackets see we just have
16:55 - a plus b
16:56 - our variables arrow which kind of takes
16:59 - the place of the word function
17:01 - a plus b plus 100 so it's basically just
17:03 - saying i want to give you these two
17:04 - variables
17:05 - and it's going to be a plus b plus 100.
17:07 - so this is a function it condenses it
17:09 - down
17:10 - but notice how like there's no more
17:14 - function word so it's harder to identify
17:16 - as a function if you're just like
17:17 - skimming through your code
17:18 - um there's no return
17:22 - so be careful with that because return
17:25 - and print are two different things um
17:29 - return just like returns the value back
17:32 - into the computer
17:33 - but print out gives you a visual output
17:35 - so if you want it to like show you the
17:36 - value you have to use print out not
17:38 - return so be careful of that
17:40 - so they're really just tricky things um
17:43 - i personally at least for like the
17:45 - beginner class like please
17:47 - don't you don't need to use them you
17:50 - like you shouldn't
17:51 - you know you if i honestly just think it
17:53 - would confuse
17:55 - more than it would do well um but that
17:58 - is my personal opinion that is my two
17:59 - cents
18:00 - you don't have to take my advice as
18:01 - bible but
18:04 - that's my personal recommendation on
18:05 - arrow functions okay hopefully we
18:08 - understand them at least
18:10 - i'm going to share my screen again and
18:13 - we're going to present this
18:15 - all right so built-in functions
18:18 - um the functions are provided by
18:20 - javascript for you to use anytime
18:22 - without having to import libraries
18:24 - so remember when i said don't name a
18:26 - function anything that's a keyword for a
18:29 - built-in function
18:31 - this is what i was talking about so
18:35 - java and javascript try to be really
18:38 - really helpful
18:39 - and they give you all of these commands
18:41 - that are already built
18:42 - in so remember how um last week we went
18:46 - through
18:46 - our list of operators and we had like
18:49 - double
18:50 - or we had like slash meant divide and we
18:52 - had like double
18:53 - um asterisks meant like
18:57 - like power of so
19:00 - those are kind of like built-in
19:01 - operators but java does something really
19:03 - nice and it gives you specific
19:05 - words that give you specific functions
19:08 - so
19:08 - if you have um console.log
19:11 - date so this is a specific um date
19:14 - is a specific built-in function so date
19:18 - parentheses gives you the it
19:20 - automatically gives you
19:21 - the date so friday january 22nd 2021
19:26 - it automatically gives you the date so
19:28 - by saying console.log it goes it prints
19:30 - out to the console the date
19:31 - so date parentheses is an automatic
19:34 - built-in function
19:35 - so you don't want to name your function
19:38 - date
19:39 - because the computer will get confused
19:41 - and it will think that you want the
19:43 - automatic built-in function
19:45 - and therefore that's what it will do or
19:48 - it will cause a runtime error or it will
19:50 - cause a compiler error
19:52 - so it will get really confused so when i
19:54 - say you can name your function anything
19:56 - you want just not a built-in function
19:57 - name
19:58 - this is what i'm talking about um
20:02 - parseint 4.1 this is for something
20:05 - that's like
20:06 - rounding integers a little bit so it's
20:08 - like um four point one it rounds it down
20:10 - to four so it will print four
20:12 - um console.log is
20:15 - n a n zero divided by zero so it's kinda
20:18 - just like a
20:19 - true or false machine this one um but
20:22 - yeah
20:22 - when i say don't print um
20:26 - don't print like don't name your
20:28 - functions something that have
20:30 - like already inherent values these are
20:32 - the things i'm talking about don't name
20:33 - a function
20:34 - date don't name a function parse integer
20:36 - don't name it parse float
20:37 - don't name it is an an
20:41 - um conditionals used in code to perform
20:45 - different actions for different
20:46 - decisions so
20:49 - if else else if these guys are going to
20:52 - become
20:53 - your best friend especially as you move
20:55 - into more complex coding
20:57 - so what these guys do um they work
21:00 - as like a team of three so it's kind of
21:04 - like i like to think of them as like the
21:05 - jack queen and king and a deck of cards
21:07 - they're all slightly different but
21:08 - they're all part of like the same like
21:10 - you know like you know how like the jack
21:12 - queen and king are like different than
21:13 - like
21:14 - like the regular numbers that's how i
21:16 - like to think of these three
21:17 - so if always comes first
21:21 - um elsif always comes second and else
21:24 - always comes last
21:26 - so basically what it's saying is like it
21:28 - gives me off
21:30 - like what this allows me to do is to
21:31 - give me options
21:33 - within my code so like if something
21:36 - doesn't work
21:37 - backup plan and if that backup plan
21:40 - fails
21:40 - then all else fails here's your last and
21:44 - final option
21:45 - but you can have as many of these as you
21:47 - want so you can have i mean you can only
21:49 - have one
21:50 - if and you can only have one else but
21:52 - you can have as many elsifs as you want
21:54 - in your code you could have five
21:56 - you can have five 000 but it basically
21:58 - just gives you backup plans
22:00 - that's how i like to think about it so
22:02 - let's look at this
22:03 - example uh let's start with this one
22:07 - if you only have two plans you're going
22:09 - to use if
22:10 - and else don't use elsif because if you
22:13 - only have two plans
22:15 - the computer if you use elsif is going
22:17 - to look for the third one
22:19 - so if you only have two if and else are
22:21 - good
22:22 - your first one is always going to be if
22:24 - so like if a condition is
22:26 - true or if a condition is false
22:29 - this is your booleans right so not
22:32 - everything here has to
22:32 - i mean not everything here has to be a
22:36 - boolean
22:36 - but what the thing is saying like
22:40 - if the condition is true or false
22:44 - or let's think of it this way if the
22:46 - condition set in these brackets
22:48 - has been met so if the criteria of the
22:52 - condition have been met
22:54 - then the code under it will execute
22:57 - if the con if the criteria for the
22:59 - condition have
23:00 - not been met it will go to this
23:03 - different action it will
23:04 - skip to the else right so if
23:08 - plan a right
23:12 - but if plan a like if we can't run plan
23:16 - a
23:17 - we're gonna go to plan b and that's else
23:20 - so if now we're going to go to this
23:22 - example
23:23 - if else if else if plan a
23:27 - if conditions for plan a are met you're
23:29 - going to run
23:30 - plan a if those conditions are not met
23:33 - you're going to look to see if the
23:35 - conditions are met for plan b
23:37 - if the conditions are met for plan b
23:40 - then you're going to run
23:41 - plan b if the conditions for plan a
23:44 - and plan b are both not met
23:47 - you're going to run to plan c
23:51 - yes no maybe on the explanation do we
23:53 - have questions anew
23:54 - how's the chat looking use those
23:57 - reactions guys yes no maybe
24:00 - i know this is tricky but like the bread
24:03 - and butter of coding
24:04 - that's good i saw some thumbs up i'm
24:06 - really glad guys okay
24:07 - can i ask a kind of specific question go
24:10 - for it
24:11 - okay so last week i was trying to um
24:14 - figure out how how to um
24:18 - i was thinking about like this but i
24:19 - didn't know how to do it so i couldn't
24:20 - do it
24:21 - but um if you had to you had the prompts
24:24 - come up and it was yes or no
24:26 - how can you um do that if statement so
24:29 - like if someone says yes you make it go
24:32 - do one thing or
24:33 - no would you just put like no or yes and
24:36 - like the code
24:37 - where would you put it would it be if
24:39 - yes then
24:40 - no i know i i know exactly what you're
24:42 - saying it's a little bit tricky because
24:44 - you have to do
24:45 - the response from the alert so
24:48 - you have to i don't want to go in this
24:51 - too much but like
24:52 - if you would have to say like if um
24:57 - i mean when you think about it
24:58 - fundamentally you either have you have
25:00 - two options it's either yes or no
25:02 - so i would say like if um
25:05 - i can't remember the exact code for it
25:06 - but it's like if
25:08 - alert response yes
25:13 - like system.out or like print you
25:16 - selected yes
25:17 - else you selected no you know what i'm
25:20 - saying
25:21 - yeah i get it okay yeah yeah okay um
25:26 - if you want to like get into that ask me
25:28 - when we're working through the code
25:30 - okay conditionals example if x
25:34 - is equal to 10
25:37 - x is equal to 10. so this is an if block
25:40 - yes so if x is equal to 10.
25:44 - if this condition is met the const will
25:46 - print x is equal to 10. if it's not it
25:48 - won't do anything
25:50 - if else block if x is equal to 10 it
25:52 - will print
25:53 - it's equal to 10. else it will print
25:55 - it's not equal to 10.
25:56 - so makes sense if x is equal to 10 it
26:00 - will print else
26:02 - x is equal to 10. else if so it's not
26:05 - equal to 10
26:06 - but it's equal to 9 it will print x is
26:08 - equal to 9
26:09 - and if it's not equal to 10 or 9 it will
26:12 - print
26:13 - x is not equal to 10 or 9.
26:16 - yeah yeah okay so
26:20 - switch statements um type of conditional
26:23 - specifies many alternative blocks of
26:25 - code to be executed
26:27 - so
26:29 - [Music]
26:32 - yeah um an expression or variable value
26:34 - goes in parentheses so it's like kind of
26:35 - it's the same as the if else value so
26:37 - it's
26:38 - um expression or value entire block and
26:41 - closed with curly brackets so see how
26:42 - the curly brackets
26:44 - you know it's here to here um
26:48 - notice how with these ones if has its
26:50 - own curly bracket set else has its own
26:52 - curly rocket set
26:53 - not with the switch statements the
26:55 - switch statements is just once you say
26:57 - switch
26:57 - until you want um it to end you don't
27:01 - close your curly brackets each case
27:04 - starts with a colon
27:05 - and if a case ends with a break
27:07 - statement cases um each k
27:09 - sorry each case ends with a break
27:12 - statement so
27:13 - break in code just means like break like
27:15 - take a break stop for two seconds
27:17 - um each case ends with a break statement
27:19 - if case is true
27:21 - it doesn't check the others so this is
27:23 - like
27:24 - only good for yes or no things
27:27 - so like if you wanted to know if an
27:29 - integer is
27:31 - above or below a value like you wouldn't
27:32 - use this you would just like
27:34 - want to say like is like you would have
27:37 - like something like before this like a
27:39 - good example of this like you had
27:40 - something before this that
27:41 - was like x is equal to five
27:44 - right so like in the switch you would
27:46 - have like this
27:47 - x is equal to five yes
27:50 - case x x is less than five
27:55 - and you print x is less than five
27:58 - break case y x is equal to five
28:02 - console prints x is five break you could
28:06 - also have like
28:07 - k z where it's like x is greater than
28:09 - five and it prints out
28:10 - so it basically just like if else
28:12 - statements but it just like cascades
28:13 - through them and as soon as it finds one
28:15 - that works it stops
28:17 - right so um
28:22 - default is like the final like remember
28:25 - how i said
28:26 - use else is the last one and used if as
28:28 - the first one
28:29 - well in this case instead of using if um
28:32 - and if else you're just going to use
28:34 - case but your last one is always going
28:36 - to be default
28:38 - right so it's like the default very last
28:39 - plan yes how do we feel about switch
28:42 - statements do you have any questions i
28:43 - knew what's the chat looking like
28:46 - so um i seem to miss like a question
28:50 - maybe from the previous slides okay we
28:52 - can go back uh the previous slide
28:54 - it asked yeah um
28:57 - she asked what does the actions do
29:02 - wit oh
29:05 - this this this like action action is
29:08 - just the execution code so like
29:10 - in this case this is the action
29:13 - console.log
29:14 - is equal x is equal to 10. that's the
29:16 - action code so action is just like
29:18 - the thing that happens when the thing is
29:20 - true
29:23 - yeah so it's just like what happens when
29:25 - it is true
29:26 - you know what i'm saying yeah um any
29:29 - other questions
29:32 - um so far none awesome
29:36 - okay great um this is just a switch
29:39 - statement
29:40 - example we'll go through this quickly
29:42 - variable name marie
29:44 - um so the variable of name has the value
29:48 - of marie
29:50 - switch name expression be evaluated is
29:53 - the name variable
29:54 - if the name is ida it will print did you
29:57 - know ida lovelace was the first computer
29:59 - programmer
30:01 - if the name is marie it will print you
30:03 - share a name with marie curie
30:06 - and default it will print hi
30:10 - name exclamation point
30:15 - so in this case the name is marie so
30:17 - we'll go to the case ida and it will say
30:19 - well the name is not ida so we're going
30:21 - to ignore this
30:22 - then we'll go to the case marie and
30:24 - we'll say oh
30:26 - the name is marie okay so it will print
30:28 - out you share a name with marie curie
30:31 - yeah but if i like if the variable name
30:34 - was my name
30:35 - willa it would say oh well the name
30:37 - isn't ida so we're going to ignore this
30:39 - and the name isn't marie so we're also
30:42 - going to ignore that
30:43 - so what we're going to do is we're going
30:44 - to print hi willa
30:46 - exclamation point and this is another
30:48 - example of our
30:49 - of our concatenated statements remember
30:51 - we insert the variable
30:53 - like that with our plus signs
30:56 - okay return statement a return statement
30:58 - ends um a
30:59 - javascript function functions can also
31:01 - return values
31:03 - um so
31:06 - see this like return input this is
31:09 - different than like
31:10 - printing
31:13 - i mean
31:16 - so basically what it return means
31:20 - is it returns the information that was
31:22 - given it
31:23 - back to the computer so like what it
31:26 - means is
31:28 - like say i have this input so like this
31:30 - input name is like
31:32 - ife so it inputs it
31:35 - but when i say return what it does with
31:37 - the name ife it takes it back to the
31:39 - computer
31:40 - and it's like okay so the name we're
31:42 - using is ife
31:44 - and it just makes a little me like the
31:46 - equivalent of return is like just making
31:47 - a mental note of it
31:49 - and then when we say variable name
31:51 - equals ask name how's it going
31:53 - and we print console log
31:56 - hi name it will be like oh my gosh name
31:59 - we know what that
31:59 - is the name is ife remember we made a
32:02 - little mental note of that when we
32:04 - returned the input
32:05 - so that's what returning does um
32:08 - to end a function return whatever value
32:11 - input you had because it just
32:13 - like it like updates the computer with
32:14 - the current information
32:17 - so to return a value add the value after
32:19 - return so like in this case we return
32:21 - input but like if you were having a
32:24 - variable
32:26 - um like say this was like numbers and
32:28 - you had a variable called like
32:30 - uh or like a very like b you could like
32:32 - return
32:33 - b you know or like return name return
32:37 - input a good way of saying is like
32:39 - return input but it varies depending on
32:41 - what kind of code you're using
32:43 - prompt can be assigned to input because
32:44 - it returns a value
32:46 - so the prompt works here because the
32:48 - prompt has an
32:49 - input value right so we're assigning the
32:52 - input variable
32:53 - so this is we're creating a variable
32:55 - called input and we're assigning it to
32:57 - the prompt value
32:59 - and then it just returns it back
33:02 - uh oh do we have any questions about
33:04 - this
33:08 - i knew what's the chat saying okay we do
33:10 - have one
33:11 - okay one question is why isn't
33:14 - high okay quotations high
33:18 - quotations plus input and then plus
33:22 - uh exclamation mark at the end there
33:25 - since there's no
33:27 - why does it say name instead of why does
33:30 - it say name instead of input
33:34 - yeah so i think the question is
33:37 - yeah why does this say name instead of
33:40 - input
33:40 - they said yeah okay yeah
33:44 - if let's look at line five
33:47 - upwards for now so just let me get my
33:49 - pointer
33:50 - just here up
33:53 - if we just have like alert greeting
33:55 - variable input prompt what's your name
33:57 - return input you would be 100 right it
34:00 - should be
34:01 - high plus input but see this
34:04 - variable name
34:08 - right so it takes the variable name
34:12 - and all of a sudden anything that um
34:15 - was put so remember our ask name how's
34:18 - it going
34:19 - variable thing so it takes the value
34:22 - that's gotten from the function
34:24 - ask name and assigns it as the variable
34:27 - name
34:29 - so this is your key here this variable
34:33 - name equals ask name so variable name
34:36 - equals ask name
34:37 - basically just says like oh well the
34:38 - input that's coming in from this
34:40 - function
34:41 - it's actually it's actually a variable
34:43 - called name
34:44 - like you're going to call it input in
34:45 - the function but this
34:48 - right here overrides this because it's
34:51 - like the larger
34:52 - umbrella okay so that's your reply
34:55 - that's your submission form let's go to
34:57 - the reply now
34:58 - and remember everyone as soon as we get
34:59 - to the reply what's the first thing
35:00 - we're gonna do
35:02 - say it in the chat say it out loud fork
35:04 - it
35:05 - fork it we love forking it
35:10 - all right if we forget how to fork it
35:12 - remember this little down arrow and
35:13 - we're gonna press fork
35:14 - this down arrow and we're going to press
35:16 - fork
35:18 - we're going to press fork we're not
35:19 - going to touch the code we're going to
35:20 - press fork
35:23 - fork fork very important okay
35:27 - so fun fact today our
35:31 - project is a little quiz show i'm gonna
35:33 - go through it quickly
35:34 - okay so capital cameroon
35:38 - i think this is it from my memory um
35:41 - basically it's a quiz show you get the
35:42 - answer right you move on to the next
35:43 - question
35:45 - um you know if you get all three
35:48 - questions right you win the quiz
35:49 - uh the most important thing i don't want
35:51 - to demonstrate this
35:54 - running why is it not running
35:59 - you get the question wrong it says you
36:02 - lost and then you have to play again
36:03 - until you win
36:05 - so it's a quiz you either win or you
36:07 - lose
36:08 - um does anyone want me to go through the
36:11 - javascript
36:12 - code quickly oh my god i know for a fact
36:15 - that christians kids are on this
36:17 - editing it but we're gonna ignore that
36:18 - okay so
36:22 - i'm gonna go through the javascript code
36:23 - really quick because that's what we're
36:24 - here to learn so
36:25 - function correct answer um cue number if
36:28 - cue number is less than three
36:30 - [Music]
36:31 - um window location replace queue number
36:34 - um
36:36 - so basically what this does is it says
36:39 - like
36:40 - oh if the number is like so there's
36:43 - three questions that's why this is less
36:45 - than three
36:46 - so replace q with q number
36:49 - dot html so like basically what it does
36:51 - is it just like
36:52 - takes you back to like the
36:55 - the um like if you get the correct
36:59 - answer
37:00 - then it adds one to like it
37:03 - takes the question number and then it
37:06 - adds
37:07 - one to the question number because
37:08 - notice how it's like q one q
37:10 - are q three q two so it takes one to the
37:13 - question number and then it
37:15 - um takes you to the next web page for
37:17 - the next question
37:19 - else which means you got through all
37:20 - three questions it you go to the winning
37:23 - win.html which is like oh you won you
37:26 - answer all the questions correctly
37:27 - yeah i'm going to stop sharing do we
37:29 - have any questions