00:00 - ah there you go okay perfect so string
00:03 - intros
00:04 - um string as we all know is anything
00:06 - with text
00:07 - so not numbers because that's an integer
00:10 - uh and it must be enclosed with
00:12 - quotation marks just like if you would
00:14 - see it in a book
00:15 - so like you know when someone's speaking
00:16 - in a book it's like quotation marks it's
00:18 - the same thing with strings
00:19 - um you can use double or single
00:21 - quotation marks
00:22 - um either one works and assigns strings
00:25 - to a variable with an equal sign
00:27 - so um this is a good example of that
00:31 - um see this variable fruit one is
00:34 - watermelon that assigns um the variable
00:37 - fruit one to watermelon so when we say
00:39 - console.log
00:41 - fruit one the console will show us
00:42 - watermelon because we've assigned
00:44 - that string to the
00:47 - variable fruit one how many characters
00:48 - are in the word watermelon so today
00:50 - we're going to get to something called
00:51 - like
00:52 - string length which is an operator that
00:55 - counts the number of characters in a
00:57 - string
00:57 - and then that value is an integer that
01:00 - you can then manipulate for things
01:03 - so the length property returns the value
01:06 - of a string and you have to write dot
01:08 - length after the variable
01:10 - so variable fruit is watermelon remember
01:13 - that so we have our fruit is watermelon
01:16 - by saying fruit.length we say
01:18 - okay what is the length of the string
01:20 - that is this variable
01:22 - so what is the length of watermelon and
01:24 - it counts
01:25 - the letters so w-a-t-e-r-m-e-l-o-n
01:29 - and there's ten so there's ten different
01:31 - characters within the variable
01:33 - string which then gives us the value ten
01:36 - this number ten is an integer so this is
01:38 - a string
01:40 - this is an integer two different data
01:42 - types
01:43 - um you can also just would see it in
01:44 - like code this way so variable fruit
01:46 - watermelon variable word length equals
01:50 - fruit.length
01:52 - console.log word length yes so we have
01:55 - two different variables fruit
01:57 - and word length this one is an integer
01:59 - this one is a string
02:01 - yes what's the difference between a
02:04 - string and an integer
02:05 - so a string is like words
02:08 - so it's text an integer cannot be
02:11 - numbers sorry an integer cannot be
02:14 - letters
02:15 - it cannot be letters so we specifically
02:18 - use integer when referring to numbers
02:19 - because it allows us to use mathematical
02:21 - operators so like
02:23 - plus minus equals multiplication
02:26 - all that stuff so we need to use integer
02:29 - when talking about those because you
02:30 - can't like multiply
02:31 - strings because you can't like multiply
02:34 - words together
02:35 - so by using integer we allow ourselves
02:36 - to use mathematical operators
02:38 - if you want to use a number because it's
02:39 - like part of a story
02:42 - then you would use it as like a string
02:45 - so like all numbers can be strings but
02:48 - words cannot be integers basically um
02:50 - there was another question let me answer
02:52 - so is 10 going to be different from 10
02:55 - yeah so quotation marks 10 is a string
02:59 - but 10 by itself is an integer and
03:01 - therefore because it's an integer we can
03:02 - perform mathematical operations on it so
03:04 - yes
03:04 - it is different good job um the
03:07 - different string methods
03:08 - serve different purposes so access
03:11 - method
03:12 - through variable dot method so um
03:16 - here are two like variable methods um
03:19 - index of returns the um
03:23 - index of method returns the index
03:25 - position of the first occurrence of a
03:27 - specified text in a string
03:29 - so example say i have the word
03:32 - watermelon
03:33 - yes or no let's use this example because
03:35 - it's right here say i have the word
03:37 - hello
03:38 - if i said like index of e it would give
03:41 - me
03:41 - one yes because it goes to like the
03:45 - first
03:45 - instance of the character sets
03:48 - that's in here and then it finds that
03:50 - and it gives you the index one important
03:52 - thing to note
03:53 - when you want to do indexes it doesn't
03:55 - start at one
03:56 - so it counts all of the characters like
03:59 - this
04:00 - but it doesn't start at one so it would
04:03 - assign all the values but it goes
04:06 - zero one two three four so you might say
04:10 - oh there's five
04:11 - letters characters in this string hello
04:15 - but the computer starts at zero so the
04:18 - computer would say
04:19 - h is at the position zero e is at the
04:22 - position one
04:23 - so always subtract one yeah
04:27 - um the word that you want to find the
04:30 - index
04:30 - of goes inside the the parentheses
04:34 - and to uppercase converts the text to
04:36 - uppercase
04:37 - so basically to uppercase is basically
04:40 - just like the caps lock button
04:41 - on your computer um that's what that
04:43 - means
04:44 - um i saw there's a question i'll answer
04:46 - that in two seconds variable string
04:48 - i like to sing yes we have a variable
04:51 - str so the variable is called
04:52 - str the variable is i like to sing it's
04:56 - a string variable
04:57 - variable position string index of like
05:02 - console.log position 2.
05:05 - in this case it looks like it's giving
05:07 - it different words
05:09 - why it says two is unknown to me because
05:12 - the output should be one
05:14 - java and javascript are the same as in
05:16 - the sense that they start from zero
05:19 - so you don't start counting at one you
05:21 - start counting at zero so
05:22 - two is actually incorrect here but
05:26 - yes yeah yeah no it starts at zero
05:29 - i'm not going crazy yes so
05:33 - i think it's because there's a space
05:36 - is there a one too i don't even know
05:38 - because it says
05:39 - index of like i've never seen being like
05:42 - indexes of
05:43 - words before and like counting words
05:46 - yeah i think that starts at um the next
05:48 - two
05:50 - i don't even know because the i is zero
05:52 - one
05:53 - yeah zero one two three four five
05:56 - six seven eight so the period would be
05:58 - eight yeah okay
06:00 - so in this case we're counting words
06:02 - spaces do count
06:04 - um spaces do count when you're talking
06:06 - about like
06:07 - a sentence like that because it will go
06:08 - through um
06:10 - let's see what's index
06:14 - index is basically just like the places
06:16 - of the word so like
06:17 - um it's like if you were like number the
06:21 - letters off so like zero one two three
06:23 - four five the index is like the number
06:25 - that the letter corresponds to if you
06:26 - were like number them off starting at
06:28 - zero
06:29 - um variable text hello console.log
06:32 - text to uppercase so see our built-in
06:34 - function to uppercase
06:36 - basically just like if i typed it with
06:37 - caps lock yeah
06:40 - arrays arrays are used to store multiple
06:42 - values in a single variable
06:45 - arrays are tricky so if there's
06:47 - questions please ask them
06:49 - the values are closed with square
06:51 - brackets you can't use
06:53 - you can't use circle brackets you have
06:54 - to use square brackets array index
06:57 - numbers
06:58 - start from zero yeah see i'm not going
07:00 - crazy
07:01 - array index zero numbers start from zero
07:04 - everything starts from zero
07:05 - so even index of like specific words it
07:08 - starts from zero there's
07:09 - um no different thing the first array
07:12 - element is zero the second one is one
07:14 - all the way to the length of the array
07:15 - minus 1.
07:17 - this is true for even if you're just
07:19 - asking for the length of
07:20 - one string like one single word it's
07:22 - true access array elements by referring
07:24 - to an
07:25 - index number so say um
07:28 - it's like you're going to like a library
07:30 - does anyone know like the dewey decimal
07:32 - system or am i just like
07:34 - really old-fashioned where like you
07:35 - would go to a library
07:37 - and you would say okay i want um
07:40 - charlotte's web
07:41 - and charlotte's web on the code for the
07:43 - library they identify it by like a
07:45 - specific number
07:47 - well that's basically the same thing
07:48 - here so i have all of these different
07:50 - items well i want to categorize them by
07:52 - numbers
07:52 - so i can know how to find them from the
07:54 - specific numbers
07:56 - so in this case we have variable comic
07:59 - yes so spider-man iron man
08:03 - deadpool we'll say i want to access
08:06 - spider-man
08:06 - well that's index zero so i have to go
08:09 - find index zero
08:10 - i want deadpool well that's index two so
08:12 - i want to go find index two
08:15 - spiderman is assigned the variable
08:16 - favorite because the index number for
08:17 - spider-man is zero the first array
08:19 - element in the comic array so in this
08:21 - case variable comic
08:23 - array of different comic books yes
08:28 - so i like to think when you're using
08:30 - array it's not like one specific
08:31 - variable it's more like
08:32 - category of all of the variables here
08:36 - and then my variable favorite is comic
08:39 - and then whatever comic is at index zero
08:42 - and i can change this around
08:44 - i can change these around but whatever
08:46 - comic is at the index of zero
08:48 - that's my favorite so like if i have a
08:50 - different favorite comic i can change
08:51 - them around
08:52 - so whichever one's at zero is my
08:54 - favorite and then the console.log
08:56 - favorite so we print out the variable
08:57 - favorite and it prints out
08:59 - spider-man because spider-man's at index
09:01 - zero but if i were to change the list
09:02 - around i put deadpool at zero
09:04 - then it would print out deadpool um
09:07 - length property returns the number of
09:09 - array elements so
09:10 - dot length after a variable the length
09:12 - property is always one more than the
09:14 - highest array of the index
09:16 - um constructor constructor property runs
09:19 - in a raised constructor function
09:21 - dot constructor after the variable used
09:23 - to check if the variable's an array
09:28 - i don't like those explanations so i'm
09:30 - going to try and explain them in a
09:31 - second
09:32 - so the length of fruit is for the
09:35 - highest array index is 3.
09:37 - we know this because
09:40 - we start from zero so banana is zero
09:42 - orange is one
09:43 - apple is two mango is three therefore
09:46 - the highest array index is three
09:49 - the length of the list is four
09:53 - because there's four different elements
09:54 - in the array and the computer knows that
09:58 - but the highest like indexes
10:02 - start at zero but like
10:06 - this is confusing for me because i'm 99
10:09 - sure that lengths also start at zero
10:12 - so let me check that hold up
10:16 - because i don't want to be saying wrong
10:18 - information
10:20 - this is oh
10:24 - okay so this is the whole like banana
10:27 - orange apple mango
10:28 - so the length should be three because
10:31 - length start at zero
10:32 - array started zero length started zero
10:34 - indexes started zero
10:36 - yes everything starts at zero i this is
10:39 - a typo
10:39 - i really this is a typo so the output
10:42 - function
10:43 - array variable animals equals cat dog
10:46 - penguin
10:49 - animals.constructor function array so
10:52 - like
10:52 - this just checks if it's like an array
10:55 - like that's all this does
10:56 - um animals.constructor just checks if
10:58 - it's an array
11:00 - but variable animals cat dog penguin
11:04 - that just it like it just checks that
11:07 - it's
11:08 - an array yeah it's not checking for
11:10 - length it's just checking that it is an
11:11 - array
11:13 - right so constructor just checks like
11:16 - what type of thing it is and then it
11:18 - says what type of thing it is
11:21 - okay convert elements into a string
11:24 - so join remember how we had like our
11:27 - methods like
11:28 - dot length and like to all uppercase
11:30 - join
11:31 - is another one of those so join method
11:33 - joins all
11:34 - arrays if joins all array elements into
11:37 - a string
11:39 - so it takes all of the array elements
11:42 - and puts them into a string
11:47 - yes so um
11:51 - i like cannot how do i
12:03 - okay yes perfect sorry so see this
12:07 - see the whole like this is a good
12:09 - example of this so join if we use join
12:11 - and we like add a
12:13 - exclamation point it just adds an
12:14 - exclamation point to the end of
12:16 - each thing why is there not an
12:19 - exclamation point after mango
12:20 - there should be there should be one
12:24 - um oh no sorry there should not be one
12:27 - because it puts it in between each
12:28 - element so it doesn't put it after each
12:30 - element and puts it in between
12:32 - each element so it uses them to like
12:34 - join them together basically
12:36 - um remember how concatenated statements
12:38 - how we have
12:39 - plus signs to join them together well
12:42 - it's basically like saying that but you
12:44 - know
12:44 - it just puts a character whatever
12:46 - character you want
12:48 - um pop removes at the last element from
12:51 - an array
12:53 - so and push adds a new element to the
12:56 - end of an array
12:57 - so these are just like little shortcuts
12:59 - that you can do when you want to modify
13:01 - an array
13:02 - on the fly um so
13:05 - there's a lot of these pop slice unshift
13:08 - shift sort two string join splice map
13:10 - reverse
13:12 - these are very interesting um a lot they
13:15 - have
13:15 - different functions but basically like
13:16 - shorthand ways that you can manipulate
13:18 - an array
13:19 - very easily so let's go through this
13:21 - code variable fruits banana apple mango
13:24 - fruits join exclamation point we add an
13:26 - exclamation point in between each one to
13:28 - join them together
13:29 - fruit stop pop we delete the last
13:32 - element
13:33 - so we delete mango so mango's gone now
13:36 - fruit push great add grape to the end so
13:40 - banana apple grate fruits dot join
13:45 - doesn't add like it doesn't modify the
13:47 - array specifically it modifies like
13:49 - like the words of the array kind of
13:53 - but like well no it does modify the ring
13:56 - it's just hard to explain because like
13:58 - i would like if it was just like more in
14:00 - a format because basically what it does
14:01 - it like it puts like
14:02 - banana in its quotation marks comma
14:05 - exclamation point in its quotation marks
14:07 - that's like basically what it does
14:09 - um i wish this was in array format it's
14:12 - not it's in just like regular words
14:13 - format
14:14 - but anyway you get the point question if
14:17 - you were to use a constructor what sort
14:18 - of output will it give
14:20 - um that depends so if you're using an
14:22 - array it will say like
14:24 - function array because it's like oh
14:26 - that's an array
14:27 - if you're using like mathematical
14:29 - functions
14:30 - it would be like oh like um
14:34 - what's a mathematical function
14:35 - math.random
14:37 - that's one yes it's one for java so it
14:41 - should be one for javascript
14:42 - um so you it would be like function
14:46 - like math.random because it's like an
14:48 - inherent like function that it shows so
14:50 - depending on what
14:51 - function you're using it will give a
14:53 - different output
14:55 - object and dictionary create a
14:56 - dictionary by creating an object with
14:58 - curly brackets
14:59 - so inside the curly brackets add key
15:02 - value pairs
15:03 - there should be a comma after each pair
15:05 - so
15:06 - these are very much like arrays in the
15:08 - sense that like we have different values
15:11 - separated by commas within brackets yes
15:14 - few things to note curly brackets for
15:17 - dictionaries
15:18 - square brackets for arrays very
15:20 - important because the computer will like
15:22 - help decipher what you're trying to do
15:25 - based on the brackets based on your
15:26 - syntax in general
15:28 - so very important use the correct
15:29 - brackets um
15:32 - key dot value pairs is basically just
15:36 - like
15:37 - it's kind of like how we establish a
15:39 - variable so you know how we like a
15:40 - variable a name
15:41 - so we say like variable
15:45 - y equals the value of the variable
15:49 - it's very much like that so we have like
15:52 - well like
15:55 - information that this is the actual
15:58 - information
15:59 - so like you know it's like first name
16:02 - last name you know it's very much like
16:04 - that um
16:05 - luckily we have this use as a thing
16:10 - age 154 54.
16:16 - so it's always key value key value
16:20 - dictionary 54 get the value through the
16:23 - key
16:24 - so dictionary first name
16:27 - so anything is this is the key
16:32 - and this is the value yeah so
16:35 - when calling up information in a
16:37 - dictionary we say
16:38 - dictionary and then we say the key
16:44 - yeah so if it's like a weird key like
16:46 - this
16:47 - we can just put in the bra like in the
16:49 - square brackets to call it
16:50 - but if it's not we have like
16:52 - dictionary.firstname because we have
16:54 - first name as like an established
16:56 - thing there's some different syntax that
17:00 - goes along with these
17:02 - um that you mostly just learned through
17:04 - experience which is really rough
17:06 - uh dictionary age let's use these
17:09 - examples
17:09 - dictionary age so notice how we have
17:11 - like square brackets to classify what we
17:14 - want to talk about
17:15 - we put the key or we put the key
17:19 - here and we put oh no this is to change
17:22 - it
17:23 - sorry this is to change you want to
17:25 - change something you need to put it
17:27 - like the same kind of syntax so
17:30 - if you want to call it it's dictionary
17:33 - and then square brackets with the val
17:35 - like the key that you want to call
17:37 - yeah so if i put dictionary last name
17:41 - it would say mendez but if i want to
17:44 - change it it's
17:45 - dictionary category of information
17:47 - equals
17:48 - the new information we want to put in so
17:50 - dictionary age equals 10. this takes
17:52 - this one changes it to a 10.
17:54 - dictionary last name orlando so then it
17:57 - takes the last name and it's now orlando
18:00 - yes so putting an equals
18:03 - new value after it changes information
18:05 - just putting
18:06 - the dictionary with the information key
18:10 - tells you the information in order to
18:11 - change you have to put equals and then
18:13 - new information
18:14 - okay so we have a fun replit today i'm
18:17 - gonna
18:18 - so okay guys if we can all go to the
18:20 - replit i will meet you guys there
18:22 - and we're gonna do something where we
18:23 - talk about like line numbers so i'm
18:24 - gonna say the specific file i want you
18:26 - to go to
18:27 - within the reply and then i'm going to
18:28 - say the line number that we're all going
18:30 - to talk about
18:31 - yes i think that's going to be the best
18:33 - way to do this for now because you're
18:34 - going to be seeing the same thing that
18:35 - i'm seeing
18:37 - um and i will answer questions
18:40 - so christian did make this um
18:43 - and if you're looking at the reply right
18:44 - now just like i am
18:46 - you're going to notice that there is an
18:48 - advanced script file and there's a
18:50 - script
18:50 - file so it's going to say advanced
18:52 - script.js and script.js
18:54 - um i would like everyone to go into the
18:56 - script.js
18:57 - file yeah so this is a harry potter quiz
19:00 - show
19:01 - it uh or like a quiz game it looks like
19:04 - a lot
19:05 - he tailored it for his class which is
19:08 - great
19:08 - but there's going to be definitely some
19:10 - questions so at this point if you have
19:13 - any questions about the reply
19:15 - were like please just like shout them
19:18 - out because i know that there will be
19:19 - some
19:20 - okay so let's go into the script.js file
19:25 - and i'm just going to go
19:26 - like through it in like sections and
19:27 - kind of explain what each
19:29 - section does yes okay script.js
19:33 - lines one through four um
19:37 - these just like are
19:41 - like variables documents stuff like that
19:45 - they create um method document
19:48 - element yeah so return the reference to
19:52 - the first object with specified
19:54 - value of the idea name attribute yeah so
19:57 - it's just
19:57 - calling references for things that
20:00 - establish our code later on
20:02 - user information username house response
20:06 - these are all variables yes so these are
20:10 - lines
20:10 - seven and eight so let user name house
20:13 - response
20:15 - all strings all like user information
20:19 - stuff
20:20 - points is an integer variable and
20:22 - because we're starting at zero because
20:24 - it's a
20:25 - quiz game we're starting it at zero
20:27 - there's no quotation marks because it's
20:29 - an integer yes and there's no quotation
20:32 - marks on any of these even though
20:34 - they're strings because it's the
20:35 - variable name not the string
20:37 - itself um lines
20:40 - 10 and 11 go to
20:44 - a button which is an event list listener
20:47 - um
20:48 - so basically what an event listener is
20:49 - it just like sits there and listens
20:51 - and waits for something to happen and
20:53 - then once something happens
20:55 - it like executes its function so
20:58 - he made the buttons event listener so
21:00 - that when you click the buttons it
21:01 - advances you to the next question
21:03 - um he used an arrow function here for
21:06 - that
21:07 - um and
21:11 - that's basically what that means so
21:12 - lines 10 and 11 are like when you click
21:14 - the button
21:15 - like next it takes you the next question
21:18 - yeah
21:19 - um lines 14 15 and 16
21:23 - um basically like pressing
21:26 - enter like takes you to like the next
21:30 - question i think
21:32 - if i remember correctly let me just like
21:34 - put it in like as like a
21:36 - little
21:40 - um yeah so what he did is he put like
21:44 - key up so like like you can either click
21:46 - the button to take you to the next
21:47 - slide or you can like press enter to
21:50 - take you to the next slide
21:51 - so 14 15 16 pressing enter to take you
21:54 - to the next slide
21:55 - 10 and 11 you have to click it to take
21:57 - you to the next slide
21:59 - um so he likes to do these things
22:01 - because it makes for a better program
22:04 - um so basically this whole thing lines
22:07 - 20 to 54
22:10 - is a function yes
22:14 - and he did this because
22:17 - the entire function um is like
22:20 - one question
22:23 - yeah wait let me check i think it is
22:29 - yeah so basically
22:36 - he did this because it's one function
22:37 - for the question and
22:41 - let's go through each section of it so
22:43 - lines 20 to 23
22:45 - that's the question itself so professor
22:48 - snape
22:49 - like that's the root you're taking
22:51 - that's the question
22:54 - um root get responses so notice how this
22:58 - 20 to 54 is a function but notice how
23:01 - it's like cascading if else statements
23:03 - so like if this thing happens then that
23:04 - happens if it doesn't happen
23:06 - then it goes to the next option he does
23:09 - this because it's a multiple choice
23:10 - question
23:11 - so if answer a is picked then code
23:14 - executes
23:15 - else it will see if answer b is picked
23:17 - if answer b is picked then
23:19 - it does something else so that's
23:21 - basically what these like if else
23:22 - cascading statements do
23:25 - um the first one is the question itself
23:28 - so it shows like the it creates a an
23:31 - array
23:32 - called possible responses and it says
23:34 - like stay silent make a random answer
23:35 - stand up for yourself yell back at him
23:37 - those are your those are your answers um
23:40 - those are your
23:44 - those are your like various different
23:45 - responses to the multiple choice
23:46 - question and you put them in an array
23:48 - so that's what it does it it the first
23:50 - question it takes all your answers puts
23:52 - them in an array
23:53 - that's what that does 25 to 27
23:57 - else option set attribute hidden hidden
23:59 - response input value
24:01 - um don't worry about it it basically
24:05 - just like sets
24:06 - the like stuff and makes it so it like
24:09 - functions kind of um let response
24:12 - any so like it just like it's like oh
24:14 - like
24:16 - we're gonna have an input value the
24:17 - input value is going to be like the
24:19 - click
24:20 - like multiple choice thing or no it's
24:22 - going to be a type in
24:24 - a b or c
24:27 - um so 29 through
24:31 - 32 if response character code
24:34 - at less than 97 greater than 90 or
24:38 - like
24:42 - less than 97 oh yeah if it's less than
24:45 - 97
24:46 - and it's greater than 99 or yeah it's
24:49 - greater than 99
24:51 - um basically it basic it just means that
24:54 - like oh you didn't put a valid answer in
24:56 - so it just says please pick a b c or d
25:00 - or a b c a b or c so that's what that
25:03 - means
25:03 - this like 29 through 32 is basically
25:06 - just like oh you didn't put in like
25:07 - unacceptable response value
25:09 - um that my computer could recognize so
25:11 - like i'm going to tell you to do that
25:13 - that's what that means so it looks for
25:14 - like you're the length of your input and
25:16 - then it's like oh like
25:18 - what's your deal there with that um
25:24 - lines 34 through 40. else
25:28 - lex selection you picked dollar sign
25:31 - response
25:32 - so christian likes to put the dollar
25:33 - signs in because it's concatenated
25:35 - statements
25:36 - um i use plus signs because i think
25:38 - that's easier for me to identify
25:40 - he uses dollar signs so that's how to do
25:42 - concatenated statements on the shorthand
25:44 - um dollar sign curly bracket the thing
25:47 - you want to stick in
25:48 - other curly bracket yes so that's all
25:51 - that means it's a concatenated statement
25:52 - but he likes to
25:54 - pull in that way um so else let section
25:58 - you picked
25:58 - response if response equals to a
26:02 - then like if our response in here was a
26:06 - you lose points because that wasn't the
26:08 - correct answer yes
26:10 - so you start at zero you lose points so
26:12 - like see this our points
26:13 - minus equal to ten there was a question
26:15 - last week about how to like change
26:16 - points on the fly that's how you do it i
26:19 - have my points variable that
26:20 - we established earlier in the code and
26:22 - then we change it here
26:24 - yeah and then below that is like the
26:27 - response
26:28 - for the question so like when you pick
26:31 - an
26:31 - answer it gives you a response so
26:34 - um it like just says like oh
26:37 - concatenated statement
26:38 - your selection so it repeats your
26:40 - selection to yourself
26:42 - then slash n that's some syntax it's
26:44 - newline so it just moves it to like a
26:46 - new line just kind of like a typewriter
26:48 - so just press enter
26:49 - um professor snape is annoyed that you
26:51 - ignored him he deducts 10 points
26:53 - new line you have x amount of points
26:56 - concatenated statements we insert points
26:58 - the variable into points yes and then
27:02 - input value is nothing because there's
27:03 - nothing to input um and then
27:07 - 42 to 4 so 42 onwards is basically the
27:10 - same thing but for answers b
27:12 - and c yes so we know here that
27:15 - b is the correct answer because you get
27:17 - points for that answer
27:18 - c is the incorrect answer because you
27:20 - lose points for that answer
27:22 - and then below that is like the
27:23 - responses that you get for when you
27:27 - like give those given answers
27:30 - uh jeez a lot of lines i knew this why
27:33 - am i acting surprised
27:36 - 56 function so 56 to 65
27:39 - uh function crea so
27:43 - this just creates a list of the
27:46 - responses
27:47 - so it just like creates a list for them
27:50 - um and then the current response
27:52 - it makes a list for them um
27:58 - yeah so it just creates a list for your
28:01 - responses
28:02 - um 69 to 75
28:06 - function all questions if question get
28:08 - attribute name
28:09 - equals equals question 1 username input
28:12 - value
28:13 - question set attribute name question two
28:15 - so basically
28:16 - notice there like if you put your name
28:18 - in that like name thing
28:19 - that's basically what it does it just
28:21 - like puts your name into like the
28:23 - question
28:25 - yes so that's what it does um
28:30 - this is the same thing like question
28:31 - inner html like what house are you in so
28:33 - it just
28:33 - like takes the value like the inner like
28:36 - the input value of like what house you
28:37 - said you were in and then puts you
28:40 - in that like it like adds it to the
28:42 - story
28:43 - through concatenated statements um else
28:45 - if name question
28:47 - equals two input value name question
28:49 - three
28:50 - so it's just like an else if like all
28:52 - else fails situation here
28:54 - um last chunk 82 to 85
28:58 - let introduction these are concatenated
29:00 - statements
29:01 - so like this is like the introduction
29:04 - stuff
29:04 - concat native statement um
29:07 - yes and then 87 elsif
29:11 - um it's just like
29:14 - the elsif scenario like your name
29:17 - is question three and then professor
29:21 - snape
29:22 - it like calls the function professor
29:23 - snape
29:25 - um that gets responses
29:29 - i think i don't know i don't oh no
29:34 - basically because the questions about
29:35 - professor snape so it calls the question
29:36 - function
29:37 - yes he put an advanced javascript file
29:41 - in there
29:42 - um which i think
29:45 - is interesting personally i wouldn't
29:48 - look at it right now
29:50 - um these are like really for his class
29:53 - but i'm gonna stop sharing really quick
29:55 - and then we can talk and like
29:57 - talk about questions okay yes