hello in this video I'm going to look at the lurp function the lurp function in processing and p5js I'll do it in both environments what is the lurp function by the way lurp is kind of a weird word it stands for linear interpolation which might make you want to stop watching this video immediately now that I said linear interpolation but but stay here because I think there's a reason why you might want to use this so I've seen this question come up multiple times this week if you have let's say you're doing computer vision tracking and you're trying to color track and the the thing you're tracking is like jumping around a lot or you're getting a sensor reading and there's a lot of noise on the sensor so one of the things you can use lurp or linear interpolation for is easing or smoothing out a value so let's I'm going to build an example in a second but let's just look at the lurp function uh on the Whiteboard over here so the lur function requires three arguments the first argument is one particular value I'll call it Val one the second argument is another particular value call it Val 2 and the third argument is essentially you could think of it as a percentage some value between 0.0 and 1.0 so if if value one which to make an easy scenario happens to have the value zero and value two happens to have the value 100 and you put in 0.3 here and you say a float valve equals Val will have the value say it in your head because you probably can figure it out uh 30 because 30 is3 or 30% along the way between Z and 100 so the math actually to do that is quite simple it's a you know it's multiply I was GNA I was just going to go through it then I was like ah but I wanted to make this video short what's going on but you can think about how you might get a percentage in between a beginning and a starting point maybe I'll just include the actual code for doing that in the in the description below but what you're here really is for to use this particular lurp function so how is this relevant um okay so uh oh no eraser here so let's think about how this might be relevant let's say that you okay so first of all I'm going to do a physical demonstration one of the reasons you might want to use it is is to get rid of teleportation in your code right so let's say I know that sounds weird but bear with me for a second let let's say you have a Target Target X and you have your own thing at variable X and you want your thing that's at variable X to go to the Target well you could say x equals Target X and the next time you draw it at X it will be at the Target that's teleportation right this thing went all the way there but what if I want it to smoothly nicely ease its way on over there so instead of me right here physically teleporting to this wall I could go halfway each time I could go 50% and then 50% and then 50% or I could go 10% 10% and 10% and 10% and if I'm doing that 60 frames per second we're going to see a nice easing motion that's going to get rid of this teleportation problem so let's build that into this example here and see how that works so I have a processing sketch with nothing in it and I'm going to create two variables I'm going to say float x equal 0 and I'm going to say float Target equals uh 300 and then what I want to do is I want to draw an Elipse at Target uh some y I mean it's just should probably do this with X and Y but let's be really simple about this and do it with only X you as your exercise you can put the Y in uh so I'm going to make the target a nice uh some sort of arbitrary purplish color and then I'm also going to draw my actual thing X and uh it's also it's going to have uh some other color so let's run this code right now and I want to be be able to see it all here so run this code you can see oh no they're too small sorry let's make them much bigger so we can see I have uh Circle X which is this like bluish color should make it brighter I don't know what's going on here but just you can see and I'll say stroke 255 for both of them okay so I have the circle X which is the purple one and Target sorry X which is the purple one and Target which is the pink one so I could do teleportation right I could say x equals Target and when I run it it's instantly at that Target and or I could say instead now I could do what I've been wanting to do oh you can't see what I'm typing how terrible let's do this at the top of draw right x equals Target this would be just setting the value X literally to Target now instead I could say x equals lurp to the Target oh between X and the target so unlike what I kind of showed you over on the on the the Whiteboard where I had sort of two values lur finding a lurp between them to set to a new value I'm just having X continuously interpolate between itself and the target so what I want X to do is go just 10% of the way along the Target now did I get that backward so let's just run it and we'll find out if I got it backwards I don't think I got it backwards did you see that nice easing motion um what I meant by getting it backwards is what happens if I put 0. n in here well 0. n is going 90% of the way there at 60 frames per second it's almost as if you're teleporting there instantly and I could further emphasize this by saying 0.01 and you can see this sort of smooth motion of it moving towards that particular Target now um I have this desire to add a little bit of alpha to these and then do something else which is to say anytime now I click the mouse why don't I give the target equal to a the new mouse value so now you can see uh and let's make it a little bit faster uh 0.06 sort of arbitrary but you can see now if I click the mouse you can see that the one particular uh circle is going directly to the spot and the other particular Circle is not going directly to the spot so this a is showing you how you can have some nice easing motion how can you use this same technique now to smooth out sort of a sensor reading that has noisy values so um I'm going to save this and I'm going to do save as lurp example two and I'm going to uh basically do the same thing here I'm going to take out Mouse X and I don't need Target to be a global variable anymore what I want to do is say though that uh Target is mouse X plus some random value what I'm trying to do now is simulate I already have the solution in there sorry what I'm trying to do now is simulate a noisy value so you can see this particular and and maybe I need to make maybe I need to zoom in a little bit so you can see you can see how much noise is on there and I could actually make it a little bit more extreme by saying like5 I'm just adding some noise to the mouse so you can see this might be the kind of values you're getting from a sensor might be something like this so now you can see that if the and and let's call this like sensor and now let's call uh this instead of X I'll call it smooth sensor because I need a really long variable name for no good reason so I could say now lurp now I'm making this like totally awkward here but this is going to work smooth sensor um now I could say lurp from the smooth value with the actual noisy value by 06 and in this case I actually might want to use a kind of higher value because I don't want to have this like I don't want it to be lagging so far behind but I just want to kind of lose that noise so and now of course I need to draw the whoops I need to draw the uh actual sensor value I don't know this is silly that I'm changing the variable names for no reason and making this more comp my like I something is going on with my keyboard and all this like weird stuff is happening with copy paste ah okay I'm going to have to look into that so now we should be able to see uh uh oh and I didn't have a value in here that would help if it's zero obviously it's not going to do anything so let's make it 0 2 again and you can see now how the purple dot if we zoom in here how the purple dot is actually moving quite smoothly but the noise is on the red one so that just that little bit of lurp now I could if I move really fast you can see it lags a little bit behind and this is you just about you kind of tweaking values and playing around so hopefully this gives you a sense of what the definition of the lurp function is how it works and a couple scenarios where you can use it and if you have questions please add them in the comments oh I said I was going to do this in P5 so just to show you that this exact same thing I could take this exact code I'm going to open up p5js I'm going to paste it in and I'm just going to change this to VAR I'm going to change this to function I'm going to change this whoops to create canvas I'll change this to function I'll change this to VAR whoops change this to VAR and I I think now I have this exact same program working in p5js so you can see here the lurp function exists across both environments and there's just a few syntax differences the most notable being variables are not typed so in P5 which is Javascript you just say VAR instead of float uh functions don't need a return type specified so instead of void setup function setup and then uh instead of size the function in P5 I guess I didn't set the font size in advance is uh create canvas so hopefully now you've seen how lurp Works couple scenarios where you could use it in both processing and P5 okay thanks very much and see you in the next video someday