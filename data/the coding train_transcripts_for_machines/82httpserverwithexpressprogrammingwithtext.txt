okay welcome to a first video in a little series about building an API with nodes the question was asked in the live chat this is by the way you're probably watching this as a recorded archive but in the live chat why would you want to make an API and so you know I mostly right in the comments I'd love to hear why what your idea for an API and why you would like to make an i API is but there's there's a couple reasons that I think I could kind of start with here number one is you have uh data and you want to allow other people to use that data so this is a way of you kind of making a transaction a sort of handshake and saying like hey there is this means for you to access this data and I intend for you to be able to do so an API stands for application programming interface it's a way for two it's a way for two different applications to talk to each other so there's the applic we're going to build an application a node application um that has data or something associated with it and it's other PE other applications will be able to talk to it so that's kind of the main reason now there is sort of this scenario which I also am going to show you with you might be making an API for one person in the world one wonderful singular person and who is that person it's you all right so there are lots of projects where you're writing a front end a client side JavaScript thing you're making pretty pictures and drawing text and all sorts of interaction stuff on the page but you need some server side stuff to connect to download images to run long complicated processes to use other node packages so you might make an API just for your own project self and actually that's what we might see in some of the examples I have to show you so that's kind of number one you might just want to you know you you you have something and you want to allow other applications to connect or you might actually want other things being namely yourself okay um so hopefully that made someone sense of why you might make an API but really you know what the answer to that is let's try to make an API talk about it get to the end and um hopefully some creative ideas will will emerge in your head as you're watching these videos um okay so first I want to point you to this web page which is part of the course um the things that you will that need before you're watching this video is what is node.js and what is npm so you're going to need to have both of those things downloaded and in this video I'm going to start with adding Express so I want to use this Express package which is a fast unopinionated minimalist web framework for no Dutch ass so first of all I just love anything that says minimalist because programming gets like really complicated and looking through documentation and API is just like so it's nice that what a lot of the things that I'm that I want to do in this application that I'm going to build is like oh host some files or oh receive a query from a user and no and express is going to have a simple function for each of those as opposed to kind of writing all the code for that in raw node so to speak so I'm going to look at my directory where have the project and all I have is uh two things I have server.js file which is actually that's where I'm going to put my javascrip code which is empty and then I have this package.json file which you can make with npm in it but I already have one there that's your configuration file for the project and there's lots of important details about that if you go to publish your thing as a node package or an open source project but for now we can mostly ignore the contents of package.json um and I'll come back to it maybe another time um so you can see what's in it it's just like a little bit of stuff saying like hey this is the name of my project and this is the version but what I want to do is go and grab this and now install Express with this project so I'm going to say and I'm you can see I'm in that directory and I'm going to say npm install oh I'm actually I'm just going to paste it in there npm install Express ddave oh I have an error in par so I I I messed up I have an error here I I wrote that package that so by the way if you get if that happens to you let that happen um trailing comma I got an error in my package.json file so that should fix it I'm gonna say clear and try this again oh yay that looks much better so you can see it should now I should have a a new directory called node modules and you can see oh there's all this stuff installed in there I'm just going to have to trust that Express installed correctly so let's make sure everything's working I'm going to go into my server and I'm just going to say console.log server is starting and I'm going to say node server server is starting great so a node program is just like a program that's written in JavaScript that just runs on your computer and it runs without Graphics without a window and actually there's a lot of stuff you can do with node I mean you know I should probably really Learn Python one of these days but I use node a lot to do a lot of batch processes on my computer like oh I could just write a little node program to rename a whole directory of files or I can do you know make a request to some other API and download a whole bunch of things so you know node is something that you can just forget about web servers and apis you can just use as a little programming tool to try do a bunch of things for yourself on your computer through code but what I want to do the first thing I want to do is create a web server and by web server I mean something that opens up a port and allows browsers to connect to it and this is very easy with Express now I have most of this documented on this page so I'm kind of going to go and kind of copy paste some of the like pieces of code the first thing I need is uh I need to say VAR Express require Express this is like an import statement import the package express I want to be able to use express now the funny thing about this is I get requir Express I get this into a variable this whole package is actually a function Express is a reference to a function and I can execute that function and that's what I'm going to do here in this next line of code I'm going to say app equals Express so I execute Express and suddenly I get this web application this is what I mean about how great it is to use express it's doing all this stuff behind the scenes and the first thing I can do is I say Hey listen for incoming connections so I'm going to say server equals app. listen Port 3000 now there are various default ports that servers will will use but since I'm just doing all of my testing you know this diagram that I have over here of this idea of a server and a CL Cent right now all of this is happening on one computer the server is on the computer the client is that computer itself and that might actually for a lot of projects be all you need but at some point you also might want to deploy your server somewhere else so that other people could connect to it and I'll have to make some videos about that as well okay so now that I'm listening at Port 3000 um I can do uh I can do a few different things so one thing let's just run this server is starting and you know what would be nice it would be nice to like add a little call back here so I'm just going to write I'm going to add something called function listening and I'm going to say console.log listening so I'm just wrote a little call back so that and and actually there the the reason I'm adding this into the code is there are a lot of things you can do here you can get the host address and the port and various things but most of this stuff is unnecessary for what we want to do but I want to at least sort of see this call back that it's working so I'm going to uh I'm G to run this again server is starting listening okay here we go now uh so let's go to Local Host 3000 this is where my server is I'm gonna look at the web page I made Oh cannot get anything so there's nothing there but you can see that this is working because at least I got the message I'm listening but I don't have anything to give you right the me the web browser right now made a get request to this to the server and this is kind of an important concept so one of the first things I might do although this is a little bit NE unnecessary for this idea of an API but it's kind of worth exploring right now that we're going through this Express stuff is I can use an aspect of Express to host static files meaning I can make and this this idea of uh this word public in there is something I could make up so I could call this website instead of Public public being a kind of standard thing this is saying use out of the express package its ability to host static files HTML files image files movie files all that sort of stuff so what I can do now if I go into here right into my project what I want to do is create a folder I'm going to call that folder website which is sort of a silly name and I'm going to put in that folder a file called index.html and then I'm going to say hello so in that file it says hello okay and then I I don't know why I'm speaking in that voice uh and then I mean I do know why I am but I don't know why why I am why I am anyway now if I hit refresh now first of all I've got to restart the server so here's the thing there's actually a really nice tool you notice how I have to like stop the server restart it stop the server restart it every single time I change my code there's a nice little node module I'm sure this is um which um called nodemon and node Monon like node monitor I think monitors your code and restarts the server for you every time you change the code now this can be problematic and you don't always want to use it but in this case it would be a lot more convenient and dash g means I want this package this isn't a package associated with this project I want this as just a global tool that I'm use on my computer and this probably is going to fail oh but maybe it's not I'm feeling hopeful now that actually this is going to work yeah so I got some error permission denied this is because I when I'm installing a global package it's got to to go into like user VAR local bin some secret place on my computer where I need special permission so I'm going to say pseudo for super super super do uh npm install node mg and now I'm going to type in the password here and hopefully this works there that seemed to work or I'm getting some warnings I'm getting some things that look scary oh it's doing more stuff I think that worked so I'm now going to say nodon server.js and this is working so you can see that it is the server is starting listening and watch what happens if I go back and I say go to my server and I say um you know I make a just do a carriage turn and hit save you can see here look how many times it restarted the server so now I can kind of ignore terminal for a little while and just go from uh I can just go from my code to when I make a change refreshing in the browser so look at that by the way I now see the files that are in that directory website so this is this this is step one we have now written a web server with like barely any code at all look this is like all the code for the web server and incidentally if you've ever seen me or do something like this like often I'll run a web server on my computer by just saying python DM simple htpp server that's running a web server there are lots of other tools there's a node HTTP server there are lots of tools that just make a web server that hosts files this is what we have now done um in this exact program so Step One is completed we have written a web server that hosts files in the next video I'm going to add something to this called routes so in addition to hosting files I'm going to allow the user to send information or request information through something called a route a restian route and by rest in I mean you're going to want to take a rest after watching the video probably okay so I'll see you in the next video thanks for watching this one on setting up a basic web server with Express