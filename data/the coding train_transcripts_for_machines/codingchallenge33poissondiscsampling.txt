welcome to a video tutorial where I'm going to implement I'm gonna read this paper in this video out loud to you so if you ever thought oh you don't want to do I want to watch a video on YouTube or somebody reads out loud to be an academic paper with some math stuff in it you come to the right place it is called fast fast + song disc sampling in arbitrary dimensions just to kind of cover what that is the idea here is that I want to fill a space with points these could be you know I want to I want to use this to create a bigger better good examples like an ecosystem simulation where creatures are wandering around I want to fill a space with food or I want to use these as seed points for some type of other generative growth algorithm or I just want to have a nice pretty dots pattern then I color according to some image and I want those points to be evenly spaced around and not overlapping so let's look at how we can implement this algorithm and I'm not going to read the whole paper I'm just going to start from down here and the idea is the algorithm takes and by the way let's just so look you look in this video over the URL for this paper and it's by Robert Britain from the University of British Columbia and this is I think from I assume that this oh seven means it's from 2007 so the algorithm takes as input the extent of the sample domain the minimum distance R between samples okay so what does that mean a sample by the way is each one of these dots that's a sample so I first won't eat a minimum distance so I'm going to go to my code oh by the way what's my code doing right now so I'm starting with this code written in JavaScript using the p5.js library and it just draws what has a loop to go from zero a thousand to draw a thousand random points in a window and we can see that's happening here and you can see that these points don't have that kind of distribution they're overlapping they're not kind of evenly spaced right this is a perfectly fine distribution I don't have nothing against this particular pattern whatsoever but it's interesting to look at other patterns of what types of beautiful beautiful beautiful beautiful things could emerge out of that okay so here we go okay so now back to the paper where was I okay so let's go okay so our aah so I need to add our so I'm an a variable R and let's say right now we're going to start with I want these points to be 10 pixels apart that's kind of a reasonable value to start and then a constant K what is K as the limit of samples to choose before rejection in the algorithm typically K equals 30 okay so well that seems to me I can create a variable k equal to 30 but what does that mean limit of samples to choose before rejection so probably in the algorithm I've read this before I haven't implemented the code yet but I did read this before so I know but it means there's going to be some point where I'm going to try to do something a certain amount of times and if it doesn't work at some point I'm going to quit and this is this is telling the algorithm to quit after 30 times and that's obviously both of these are numbers we could play with to see if we get different effects so now what I want to do is initialize an N dimensional background grid oh boy what then what is an N dimensional background grid that sounds complicated sorry I just needed to get to my keyboard here so what I want is to have a two dimensional background grid meaning I want to think of some sort of grid and what I'm going to do is I'm going to store everything in that grid in an array so I'm going to make actually just one I think I'm going to make a one dimensional array and that one dimensional array will number the in every single element in that grid and this is what I do I've done this in countless different examples and things online where online on YouTube on the internet where well this is where I have this one dimensional array to store information in it's for a twodimensional space pixels do that all sorts of things so let me come back here and let's set that up so what I'm going to do is I'm going to create a variable and I'm going to call it grid and I'm going to make it an array now I need to think about what is the what is this this pens by the way very light can you see this what is the size of each one of these cells in the grid so here it says we pick the cell size to be bounded by R divided by the square root of n our is the minimum distance we want between our points and is the dimensions to dimensions I mean so interestingly enough we could do this in three dimensions or in four dimensions or and I was gonna play some Spacey music for four depictions but whatever I'd I'm not I got to work on this whole soundboard think I'm not very good at it um okay so uh so so that's something I need to calculate and I'm gonna calculate it I'll just do it up here I'm gonna call that variable W to be the I have a black marker now by the way so you can see this better the size what's the width what's the height of each one of these cells okay so I need that to be R divided by the square root of n which is two so uh so you know you can figure that out but III have to think of that out because the perk the code will calculate that for you okay so I have that now so let's read this so okay the grid can be implemented as a simple n dimensional array of integers the default negative one indicates no sample a nonnegative integer gives the index of the sample located in a cell so basically that big array is either going to have a negative one in it or or another number in it to say like oh there's something in that all right so let's let's start by okay so first of all we have to figure out how many columns are there because the space is 400 by 400 pixels and the size of each one of those cells is W so I want to have it I want it to be an integer so I'm going to use the floor function I want to take the width divided by W for the number of columns and the number of rows is the height divided by W and then what I want to do is loop through every single spot which is the number of columns times the number of rows and in the grid initialize its value to negative one so I'm starting with a grid the idea here is the grid I just pick up a different marker each time where the grid is just filled with these are the index values but the grid itself is filled with negative one negative one negative one negative one we're gonna start actually putting points filling that grid with values okay who still why is it still interesting to you I hope so okay so going back to this paper okay good good good good good good ah select the initial sample X sub 0 whatever what does I mean pick a random point that means pick one random point randomly choose a chosen in uniformly from the domain insert it into the background grid and initialize that active list whew okay there's a bunch of extra stuff there okay so forget about this active list for a second let's say I need to pick a random point that's not too hard I can pick a random point what so what were let's let's see here so this is a this is really uh if I'm reading the paper this was step zero and now I'm going to do this by the way is no longer relevant now I'm going to do a step one so which was pick a random point var x equals random with bar y equals random height and you know what mix make that a vector I think it's going to be useful a vector in p5 is an object that stores both in x and y so I don't to keep them as separate variables let's make a vector called Paz with it X and the y in it okay we're doing well okay so that was there we go so now select the initial sample chosen bababa inserted into the background rib so what does that mean so if I pick a random point some pair in this window ah I got to throw a dart right ready one two three ah it worked exciting live demonstration ok so right I pick this random point and I can see that it's in spot eight unfortunately I can't actually in my code like throw something and just see where it is so I have to figure out where it goes and the oh did I yeah okay um I have two am i back in the right place okay um I have to now figure out where it goes and how do I figure out where something where it's column which I'm going to call I is the exposition divided by W right W being the size that's that sort of scaling factor the size of each cell and I also want to use the floor function to make that an integer is going to be an index into an array and then J is the yvalue divided by W and so what I want to say is the grid I plus J times the number of columns equals that position so this is me inserting it into the grid I pick a random XY point I find its column and row position I'm saying I and J in the grid I make a position vector out of it and I insert it into the array so this I plus J times columns thing this is a formula that exists in just about so many of my code examples but it basically is a formula for taking a column position and a row position and figuring out ah if the column is 0 1 2 3 and the row is 0 1 2 that the actual position in the array is 13 and you can see that is the column plus the row times the width 1 2 3 4 5 so 5 times 2 is 10 plus 3 is 13 yeah that formula works so that was kind of a quick explanation I think I have a video somewhere over that more you could try to find it yeah ok great so now we have that inserted so that's step two let's go back oh no that's step one sorry so now we've done step two ah but we're missing something active list so this algorithm requires an active list of points that we are currently working with and that's going to make more sense as I get further into this but there's some interesting stuff going on to the live chat here ok so so let me let let's create I want to create another array called active and what I want to do is also say active dot push that position so I want that position that vector to both be inserted into the grid member this grid is an array now that has negative 1 everywhere except for this one spot that it actually has a vector and then what I want to do is I'm going to add the draw function back in I want to say background zero and I just want to say I want to loop through the grid just to make sure things are working and I want to say a stroke 255 stroke wait for and then I want to say sorry I want to say a point grid index IEX grid index I dot y however I only want I want to loop through the whole grid and draw all the points but I'll not there's a negative one there so I want to say as long as grid index I does not equal to negative one then I can draw the point so I just want to be able to see what's going on and then also I think it would be useful to look at all the active points so I'm also going to loop through the active array this is really mostly for debugging but I think it might also make kind of an interesting pattern and I'm going to say stroke 255 comma 0 comma 255 stroke wait for and I'm going to draw a point but this time at the active spot okay there we go whoops how's this looking everybody live reload going let's take a look up so we have an error square root is not to find look at that so this is by the way a very common p5.js problem if you ever try to call a p5.js function outside of setup it actually won't work because p5.js has not been initialized the page has not been loaded until setup this is like an unloaded type event I could get around that here just because it's square root by just accessing the JavaScript square root function directly I'll just do that otherwise I don't have to move the square root function in to set up call is not defined sketch is line 15 this is columns times rows there we go okay so you can see there's one random point that's also one active point and you can see each time I reload the page it's somewhere there ok we're moving along here we're trucking along here I'm getting somewhere now I think yes yes people in the chatter tell me to use a for each loop I'm I've nothing against for each loops but I think it's a little bit more readable to do this right at the moment so let me go back to this paper and now we're going to look at step two this is the this is the tofu of the algorithm right this is where the main stuff is happening while the active list is not empty choose a random index from it okay let's start with that so I have to say down here let's put let's put step two at the beginning of draw and I'm going to say while active is not okay while active dot length is greater than zero that's that's saying as long as it's not empty now I'm going to make something a little bit different here the algorithm has a while loop in built into the description in other words it's saying while this is true keep doing this keep doing this keep doing this but I actually don't want to do this I want to make use of the draw loop which animates so I can see the algorithm animating itself so I'm actually just going to say if because I want to just do this one at a time and it's going to come around and do it again with draw so if active dot length is greater than zero what's the next thing I choose a random index okay so I can save our index I'll call that our maybe our equals random active dot length and I need to floor that that's a random index and then generate up to K points chosen uniformly from the sphere spherical annulus between radius R and 2 R and oops sorry I don't have my really don't point to be something um okay ah okay hold on hold on hold on we're going to be okay let's go bets let's start with generate up to this chart with generate up to K points I'm going to say for VAR n equals 0 n is less than K + + + so I'm going to do a loop at least K times up to K points and then now this is kind of crazy uniformly from the spherical on ulis between radius R and 2 R around X index I let's talk about what this means okay so I have to find an eraser which I'm gonna use this paper towel so here's what we have to do this is kind of a useful thing in programming to sort of think about I have a point that I just picked this is my random active point now there is some value in our program called R which has this distance okay so our I don't know why wrote distance there or has some length so what I want to do is pick another point around this point whose distance is somewhere randomly between R and 2 R so in other words I want to pick any point that's within kind of this doughnut right I don't want it to be it can't be within our otherwise it's invalid and I don't want it to be really far away I want it to between R and 2 R so how do I do that well one thing I need to do is one thing I could do is just pick a random angle right first let me pick a random angle and then let me pick a random value between R and 2 R and I want to place the point offset from here along that angle somewhere between aren't you our so that's what I need to do so let's come back to the code and what I want to do is say so first I want to angle random 2pi honestly here's the thing I could take some let me do it longwinded ly but I can take some shortcuts because there's some functions in p5 out sort of do some of these steps for me but then I want to create the offset values so offset X is cosine of that angle offset Y is sine of that angle right this is trigonometry that if I have an angle I can get the the sides of the triangle right the from that angle with cosine and sine look for one of my video tutorials that goes through this math so but actually what I can actually do by the way is just pick a random vector so all of this really what I want to do is say var offset equals P five vector random 2d because what that's going to give me is a random unit vector pointing out in some direction from here and then all I want to do is make the length of that vector between R and 2 R so now I want to create a magnitude which is some random value between R and 2 times R and then I want to take the offset and set the offsets magnitude to that random value and then where's the point that point actually I can just say offset ad oh wait I forgot to get it so the position the position that I'm working with is from the active array that particular so I remember I'm picking a random point from the active array and then up to K times 30 times I'm going to pick random points around it between between what between R and 2 R so now if I add position to that offset this is really the point and actually here's what I'm going to do I'm going to change my variable naming a little bit what I'm trying to do is make a new sample so I'm going to call this sample and I'm going to make a random vector and then and then sample is going to get the position added to it so now that's that actual point so I'm now done with this this particular step generate up to K points I've done one point uniformly between R and 2 R for each point check if it is within distance oh wait there's a mouse in the way check if it is within distance are of existing samples using the background grid to only test nearby samples this is an exciting moment okay I don't know if anyone is still watching this video however many minutes and I might be like 20 minutes in already this is like a video about Plusle disappointing but this is a moment because what I'm gonna do here actually applies to a lot of other scenarios let's think about this for a second I want to talk about what's going on we find my marker we find my paper towel okay we come over here so let's think about this there is a space and that space is full of points and I am working with a particular new point right here and let's say I want to know is this point too close to any of the points in the space most algorithms would say I have to check this point against every other point in the space and there could be you know something like 10 million points in a space and this could take a long time especially I'm doing this apart some animation algorithm however the whole point of this place'll disk thing that we're doing is that the points are registered to a spot on the on some kind of grid and if the only thing I care about is is a point too close to another point if this point is within this spot on the grid I kind of know 100% that I don't need to check these points or these points or these points the only ones that are worth checking are the ones that are in immediate neighboring spots on the grid and this allows a massive savings in performance and in a flocking simulation in a collision detection simulation this kind of algorithm can also be used and it's quadtree type stuff I'll do some other videos at some point but so let's look at how we're going to do that here okay now uh so what I need to do is check I want to check okay so first of all I need to know where is this point in the grid so I need to know its column position is sample dot X divided by W and I need to floor that so this is where it's going to be in the grid then I need to know its row position which is sample dot Y divided by W and then I need to do another loop like you could check in to neighbor individually but let's do another loop right nested loop I starts at negative one which is like the spot to the left I is less than or equal to one which is the spot to the right I plus plus and then J is equal to negative one same thing J is less than 1 j plus plus and then what I want to do is I want to look at I want to look at a point I don't know what to call it a neighbor I'll call it neighbor equals the grid at I plus J times the number of columns and I want to check the distance now between the sample the distance between and I can use the P five vector distance function the distance between the sample and the neighbor and I want to do something right this is going to if if that distance is less than R right the whole point of this whole thing that we're doing is to make all these points on the screen where none of them are within this distance threshold okay so this is a very key right here what do I do if I find one by accident that's too close to so let me go back to this and see for each point in turn check if it is within distance R okay if a point is adequately far from existing samples then it becomes then it goes into the active list and it's good okay so we're trying to find three times we're going to try to find a point that's okay so here what I think would work best is for me to create a boolean variable like I'm going to call it okay and I'm gonna assume it's okay bar okay is true it's going to be okay however if that distance is ever less than or it's not okay anymore so I got to check everything i here's a I don't want to check oh here's another first of all there might be nothing in the grid so I only want to do this if only want to do this if the neighbor is not equal to negative one remember negative one there's probably a different way I might clean this code up later famous last famous words of every single programmer ever I might clean this code up later but here remember if something's not actually in the grid we're just sticking a negative one in the array so I only want to do this right if negative one if there's nothing there it's definitely not too close because there's nothing there to be too close to so okay so after I do this I want to check and say after all this if it's okay what do I want to do I want the grid at that spot to be that sample and I want active I want to add that sample to active so I remember I'm keeping two lists I'm keeping an array of this grid so I want to put the point in the grid but I also want to put it in the active list because it's going to be another point that we could use later to pick a point next to it okay oh boy this okay so now let's think I feel like there's some there's a sort of missing issue here there's kind of an issue what if I I think I need to check it's not written in let's keep limp let's keep reading the paper so okay Amit is the next okay so let's let me guy I feel like I've missed a step here that isn't explicitly written here but I'm going to keep going with what's written here so okay so one thing we should do is say like well if it's okay remember I'm in this loop to try this K times if I find a point I don't need to keep trying so our dark should I keep trying generate up to K points I guess I could keep trying but but I do need to check I do need to figure out if I get two K and I haven't found a point then at least one point then I need to remove this active one so let's say let's create a variable called found is false so I'm assuming I'm going to try now k times if I find something I'm gonna said found equal to true here is where I know I found something so I'm going to say found equals true and then what I'm also going to do now is if I get to the end of this loop kay boy there's a lot of code here if it's not found what do I want to do active dot splice R comma one right remember the whole point is I started with a random point in the active list and I tried to find points around it that are okay if I didn't find any points around it that are okay I want to take that point out of the list and splice is a JavaScript function that removes an element from an array splice at the index R oh boy there's a big problem here right I've used R as the variable name for that minimum distance threshold and then I just made a new variable R for that index so I'm going to rename this to R and index let's use a better variable name Rand index and then go back and add that here okay I can't believe I've written so much code without running it terrible idea actually I generally try to avoid doing this yeah Taylor in the chat says can't you break after o fault okay equals false I think actually after okay is true yeah so I was going to put a break here let's comment this out and see how it works with or without it let's just put a little question here should we break Oh we'll discuss that later so weirdly I kind of have all of the code right now right if we go back and look at this we're done now but I know that I in my head I there's something that I'm missing let's see if you can think about what I'm missing but let's actually just try running it well nothing's happening yeah okay so there's a bunch of errors in my code one of which which is quite crucial is that actually the this year is absolutely wrong what I'm looking for right this nested loop where I'm trying to find the neighbors I need to add the actual place that I'm at so this should actually be column plus I plus and I kind of hate the way that I've written this row plus J times columns but we'll leave it you know III think I might like to say something like this just to kind of put this in a separate variable like calculate that index this way okay so that was something I definitely was missing so that's the thing I'm definitely missing let's see if we can kind of debug this a little bit I'm actually I'm gonna there's something else that I feel like I'm missing which is sort of crucial which is that if I pick a point I let's add the break there maybe the break is a bit of a problem let's see if things are going let's um whoa okay let's okay let's check the code Oh Kyle's is not defined okay so one thing that I forgot is that if I'm going to use these in setup or draw they need to be global variables so let's do that okay oh look at this amazingly it's actually working I kind of thought for sure I had a problem uh yeah okay great so we have an uncaught cannot read property copy of undefined let's see if we can the distance function in draw sketch j/s line 52 so we have a problem here and I think I know this is what I was thinking of here that what it if neighbor does not equal negative one well guess what neighbor could also be could neighbor ever be or could sample be undefined trying to think about this well to me there's an issue here which and I don't know if this would this this this is what I'm thinking okay this is what I'm thinking I'm thinking that what this new point that I've picked if grid oh oh I know what it is of course so there's definitely a major issue here which is that if neighbor does not equal negative 1 or if neighbor I think I could just say if not neighbor and you know what you don't really better let's not even because I could just fill it with undefined because undefined in JavaScript evaluates to false and then is there another place that I was checking negative one and then I can just also say if not grid index I which I think is a better way to the reason why I want to do this is this is sometimes going to give me what if I'm on the edge right if I'm if I'm in the cell on the edge and I try to look to neighbor negative one it's going to be undefined so I also need to check for that and if I come back over here did I switch to the other screen there I don't know if I did so I'm still getting this issue okay okay what what happened here sketch line 52 so let's look at let's look at what the value of neighbor is undefined oh if neighbor I want to do this not if not neighbor if neighbor cannot read properly X of undefined line 78 if only if not if not only if boy here we go now we can start to see this working and we're getting this distribution now I kind of thought that I needed another check but I'm kind of amazed that this is working anyway I guess I don't need another check and you can see which points are active and which points are finished and we can let's just let this finish it should get now the reason why you're not seeing this happen really really fast is because is because I'm doing it once per frame and P 5 only runs like 30 frames or 60 frames per second but I could now really really couple things I want to check what I want to take this console log out one thing I'm just curious but if I take out this break yeah then we could find multiple points per frame so if I'm checking for 30 points around a point this is that I'm fighting multiple points per frame doesn't really make a difference I kind of like the animation better when I am enforcing just one point per frame and look at that starting from the bottom now but something and I want to add here just to show you is I'm going to change this to a while loop and look at this so there is an issue with the code which is that um what happens when it's not finishing correctly so I need to figure this out right so tailor s is asking this question how quick is if it runs entirely one frame and this is not working right now and I even crashed the so so let's think about this why is this not working so I think there's an issue this is an issue that I'm thinking of when I pick I know what the problem is what if I pick this sample point and there already exists a point in that spot in the grid I could be stuck in an infinite loop because I could continuously just keep picking a new sample point if the grid is ever full I don't want to pick points anymore so I think that I should add a check right if grid column plus Rho times the columns right if it exists then then I don't write if something exists there then also skip everything I hold on is like I'm thinking okay I'm back and to debug this um which I just did and you can find the live stream version of this if you want to see that about like 15 minutes of be figuring this out I've changed the frame rate to one and I'm looking now and seeing like whoa why is it generating all of these positions that are like way off screen like negative 16 and negative 68 those aren't valid points in my space and I forget I always forget that a JavaScript array is this dynamic thing so it has no problem just saying like oh okay you're generating points off the screen I'm just going to keep adding them as opposed to giving me something like an index out of bounds exception like oh you generated a point that's not part of your original grid so I need to protect against that in some way and the way that I think I could do that right here is in the same way that I am checking to make sure that this is not that this is a spot that's not already filled what I can also check is that column I want to make sure that column is less than columns and I only can go forward if the column is actually on the screen and row is less than the total rows and it is a spot that is empty so that if I add that in we should be able to watch this now and if I run this I shouldn't see any points being generated off screen so let's look and see if this is working on going to console.log the length of the active array and I'm going to get rid of console logging where that point is and I'm going to put the framerate back and I'm going to run it again and we should see obviously I only checked not obviously because apparently not obviously to me I only checked it was off the righthand side or the bottom so I need to also check if it's greater than zero or if it is or if it's greater than and actually zero is perfectly valid so greater than negative one I can say greater than or equal to zero all of these as well this is a very awkward if statement so maybe I can figure out a better way to write that at some point and now you can see there we go active got down to zero and you can see how it fills up rather quickly so let's go back now and I'm going to comment this out I'm going to make the screen again 400 by 400 and I am going to give myself some more space to see this in I'm going to make our back down to like 10 and I'm going to run it and you can see now here it is filling the entire window now let's just see if I actually put in a while loop here in draw and I can also say no loop so it only does it once and you can see boom each time i refresh it you can see I get a completely different distribution very very fast and I could make this even higher resolution I'm gonna get this image very very fast I do kind of like watching it grow so let's see if we can make some something a little prettier out of this so one as we see the active points and the non active points which is kind of interesting to see one thing that I might be curious to do is change that art of like four and change the stroke way to one and then also I think what could be interesting is let's actually have it pick more than one point per frame so I'm going to I'm going to say for var total equals zero total is less than five total plus plus so this I'm just going to do this whole thing five times per frame I don't want to draw everything five times per frame and we can see now you can see it growing kind of faster look at this I have a stroke way for somewhere else and you can see look at this kind of Spacey thing growing I think it's even actually kind of beautiful let's make this I mean you can now stop watching this video and go and grab my code and play around with this but I could do like 25 at a time it's kind of nice to watch it grow you know I could even make that are like two and you can see look at this kind of amazing what I'm getting the good kind of pattern and then I could also think about what if as I'm drawing these points I did something like I said colormode HSB and I use the color to be so this is just the active let's get rid of the active points for a second what if I said the color is I module is 360 255 a 100 100 I think are the defaults so you can see something interesting happening here and maybe I should say something like I divided by 100 you can see I kind of am getting this rainbow pattern out of the growth of points so that's interesting this is not what I was expecting I know because I'm doing it based on where they are in the grid not their order of when they were added so you know what I would need to do Oh people are making great suggestions in the chat which I would like to this video needs to be over soon so this by the way is just giving you you're just seeing the stripes because it's just drawing them according to the grid pattern but what I want to actually do is have their order so let's have another array sure there's much I'm going to call it ordered and every time I add a sample to the grid a valid sample I'm going to say ordered dot push sample so I'm just going to make a separate array that just has them in order and then actually what I would like to do is draw them based on the order and whoops and I need to do this as well order ordered I called it ordered I think right so if I add this now we can see and I don't need that divided by 100 anymore you can see now their color is according to when they were created and this is a bit too you know too extreme and you know it might be nice by the way it's just that my stroke weight Br because then you can see there we go and let's you know it just so I can see this more consistently let's add always start the point not random but actually have the first point just be in the middle and there we go okay so now we have fast animated Wasel disk pointing evenly distributed and one of the suggestions and really actually unfortunately the way that I've written this because of the way that this should really be divided by 2 or x 0.5 there we go so that that way they won't be overlapping so you can see this is kind of an interesting algorithm for seizing these points um I um somebody in the chat yes I am addicted to HSB you know I'm going with the rainbow theme if somebody I should really think of a different way of doing it but it's my theme so if somebody on what somebody suggested and this is an interesting thing to think about how could you start with larger points and then slowly over time have smaller points and have that distance threshold be something that's variable and that grid be something that's variable that's kind of probably quite a complex program problem which I would like to think about and do future videos on ok so thanks for watching this video about possible distribution of points in a two dimensional plane see if you can expand this into three dimensions see if you can change the size of these find a different way to color them use this as a way of seating another type of system and what kind what ever creative possibilities you build out of this build from the code that you'll find in this video's description and keep me posted and share on Twitter or wherever you can share it and I'm excited to see what you make ok goodbye