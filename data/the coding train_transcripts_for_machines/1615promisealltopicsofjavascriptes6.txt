all right welcome back this for the moment for the time being is the last video in my series on promises in es6 and a sink and a weight in ES 8 now many people who are watching the live version of this you might be watching the recorded version or making lots of excellent comments about things that I'm not demonstrating for example what if I want things to happen like on the interim during various stages of this or why I want to show like a loading bar oh you know I want my asynchronous calls to be happening in parallel instead of like waiting for all this to be done and then just showing the results those are all really good questions so I'm trying to stay in sort of a simple place to demonstrate the basic idea but I would leave some of those as exercises to you and maybe I can come back and continue this series if there are some key things that I've missed so please give me your feedback in the comments but what I want to show in this particular video is what if I want to make multiple calls to word gift and I want them I want to be able to retain sort of something about the sequence of those calls so for example something I absolutely could do is I could just do this twice right and in fact I can still leave the catch at the end so I can actually do this I think right because this returns oh no I would have to say right this is a little bit goofy but I could say return word gif of sorry word gift inside of here and then I could say then do another one right so this is just me doing this is a little bit weird and I'm need to finish off the code here and I need a dot here so this is the way of chain this is kind of without the await thing this is the way of chaining promises so first I call word gif I show the results I return the next call to word gift which is a new promise and then I show those results so let's run this and see if we get two up sorry I'm in a different place we see two and they happen one after the other and sometimes I'm gonna get an error if there's no gift okay now here's the thing I want to change thing about the word gift function I want to make this have an argument numb and that's going to be the number of the number of sorry I'm spacing the number of letters that I want so I'm gonna go to the word Nick API and hmm I'm gonna take this out and I'm gonna say when I'm calling that I'm gonna say plus and so I'm just adding and um there's a nice way I should use those what's that called in es6 the string thing I'll have to make a video on that but I'm gonna do it my highly manual way I'm just adding in the minimum maximum length as a number so hopefully you can follow what I'm doing here because I'm alright so what I'm doing is I'm just modifying the call to the word Nick API to specify a number of characters so I'm gonna say word Nick for and then word Nick 5 we're sorry not word Nick word gift for word gift 5 so I should get a fourletter word and then a five letter word four letters alright I got an error four letters five letters okay so that this works for letters five letters in sequence so so why am I doing this so one thing I want to point out about sequence versus parallel I know I'm gonna get the promise that all interestingly enough what if I didn't chain these so let's take out the second one and just leave this first one and now I'm going to actually just completely duplicate this code and say I'm gonna say 3 & 4 3 & 4 let's run this now so now they're not chained so I'm not waiting to do the second one until the first one comes back I'm just saying do these in parallel do both of them and when they both come back create the paragraphs in the image so let's look at this 3 4 3 4 3 3 4 so interesting enough let me let's I'm sort of surprised I want to just try now with a 5 as well I look at this for 3 five so when they're happening in parallel what I'm saying just like do this do this do this just start them all I'm not necessarily going to be sure about the order that they come back in so one way to deal with that is to chain them like I did there's another way to deal with that if I want to say like wait till everything is done and then show the results and that's where promise dot all comes in so promise dot all requires an array so let me let's just so let's just pretend I have something like called promises and it has it's an array of three promises if there is an array of three promises I can write promise dot all pass in promises that array and then add sorry it's a then and catch so hold on I'm I'm this is hard I have to think about this while I'm doing it promise dot all promises then and this gets a function of what to do when it comes back and this gets a function which is pretty much you know if there is an error okay so I think this is the skeleton of what I want I have some syntax errors here maybe I you know semicolon looking looking looking oh well this should say error console.log err what's wrong here what am I missing ah this needs us there we go no okay this is actually correct this curly bracket I don't know why I was I had a little brain malfunction there where I thought it was supposed to be there but this is actually closing set up so this is in the correct spot so this is the skeleton the idea is and by the way this this is really a problem this needs to have an argument the idea the skeleton is if I create an array of three promises I can say when all of the promises are complete and resolved give me the result of all those promises in an array of the same order as the original promises that's the idea of promise all so what are these promises well they could be this word gift three word gif for and certainly I could create them in a loop or with separate variables but just to do this word gif five so this is the idea here let me give myself a little bit more space that what I can do here is just say hey I want to make three promises I want three word gift things when all of those are done show me the results and now this is I'm just gonna use a like a regular loop because instead of a four of loop I'm not sure why but that's how I feel right now so now I can do a loop to go through all the results and then I could say data equal results index I and then what do I want to do actually let's just put this in here the difference is I'm saying results index I results index I right so the idea here is now this is exactly what I had before starting took me a little while to get to this this is exactly what I had before the difference is I am putting all the promises in an array I'm not handling them with our each their own then or in separate blocks I'm just putting all the promises right word gift returns a promise remember this code of this this I can totally delete now remember this async function we wrote the async function with a weight returns a promise when the promise is resolved you get this particular object so now when all of the promises are resolved then I have all of the resolutions in an array called results and I can go through them one at a time and they should be in the same exact order as the array original array did I do this correctly did I do this correctly uh shoot gets that to have slide 49 what did I do wine 49 am I even in the right yeah I'm in the right 49 hold on that's not I didn't save I didn't save save this is like wasted time in the video but well I'm 20 now should never use that drum sound effect oh I just have an extra curly bracket thank you there we go so when they're done all three of them happen at once and they're always in the right order three four five three four or five let's get an error I'm sure we'll get errors if we give longer words so let's just see what happens with an error didn't get in how are we not getting any errors all right so I got an error so here's the thing this promised out all might not actually be such a great solution for this because promise dot all is all or nothing so if any of those promises have an error then I don't get any of the results so if what I wanted to do here was create a for loop you know let I equals zero I is less than 100 I plus plus and I have like let promises equal an array and then it's a promises dot push word gift you know for for I write this is now going to work and it should show me a hundred word gifts but if any one of those words come does not have a proper gift associated with it I'm not gonna get anything so let's see it's doing them all but this is actually a great exercise now for you to do a loading bar because this takes a while and actually I got lucky I guess like all 100 of them worked but if I want to see them like appearing as they come in want to do them more in parallel I want to sequence them but hopefully you've seen the range of ideas here so I'd encourage you to take this code play with it maybe back out of the promise tall thing what can you add a loading bar how can you like load them cleverly and try some other stuff with it and I also I think I'm forgetting I guess I'll do this in another video if I can remember I also can use try and catch inside of this async function if I want to handle the errors in a slightly more custom way I think that's correct but if that's not correct eventually I'll make a video about try and catch thanks for watching this series on promises I think I now have made a video tutorial that follows this list leave me your comments and your questions and all that sort of stuff and I'll see you again sometime goodbye you