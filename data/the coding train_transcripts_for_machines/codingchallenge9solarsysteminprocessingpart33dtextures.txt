Part three of my solar system generating simulation thingamabob. This, by the way, is not my example. This is an example by Andres Colubri. It comes with Processing under Examples, Demos, Graphics, Planets. You can take a look at it. It's using some similar stuff that I'm using in my example, but the reason why I'm pointing to it right now is, you'll notice that the planets that you're seeing are not just plain old spheres that are white or one single color. They have a texture to it, a texture that is an image. So what I'm going to show you now is how to add image textures to a sphere, just like in this example, in the one that I've been building. So the first thing is we need some image textures. Boy, I would love to make a video, somebody remind me someday, of how to generate your own texture using purlin noise, and you could procedurally generate textures for all your planets. That's going to be a part something to this eventually, but for now, what I'm going to do is get some image textures. So Andres, in the example here, you can see that he has a link to a site called Planet Pixel Emporium. This is what the site looks like. For example, down here, I can click on Earth, and I can go down here, and I can get this particular texture. It's just a rectangular image, and what's going to happen in processing is this image is going to be taken and wrapped around that sphere. So how do you do that? So I've already downloaded a bunch of I'm going to close this. And I'm back this is my example, if you don't recall. This is what it looks like. What I'm going to do is, now, add the textures to these spheres. So I've already downloaded a bunch of JPEG files. PNGs would work, various file formats, and I've got them in the Data folder. So I'm just going to look at those real quick, and I'm going to actually just rename these earth. I should have done this before I started mars, mercury, and sun. And all of these come from that particular website, Planet Pixel Emporium. I will have a link to it in this video's description. So what I'm going to do now is I am going to say PImage, img, and then in setup, I'm going to say loadImage sun.jpg. So the first thing I need to do is just have that image loaded into a variable, a variable of type PImage loaded into that. And now, I need this image to somehow be attached to that sphere. Let's go to where we're drawing the sphere. Now, I am drawing the sphere right here. This is known as immediate mode rendering, I think. Yes. Save mode The point is I'm drawing this sphere, so it's calculating and figuring out and making the sphere on the fly. There is something in Processing called a PShape, which is an object that can store geometry about any type of shape. So you can make a PShape that's a geometry of a collection of shapes, that's a custom polygon, that's a sphere, that's a rectangle. So what I need to do to automatically texture this sphere is to use a PShape variable, which will make it a little bit easier to deal with. So I'm going to go back up here and say, PShape. I'm going to add every planet object is going to have a PShape associated with it, and I'm going to call that PShape globe because it's going to be a sphere. And then in Setup, I'm going to say not in setup, sorry. In the planet's constructor, I'm going to say globe equals createShape. So createShape is the generic function to make a PShape object. You can make group PShapes. You can make primitive PShapes, which is like rectangle, ellipse, sphere, box. Or you can make custom PShape, which are just set out of a lot of vertices, and boy, this would be another great topic for a video. But for right now, I'm going to make a primitive PShape, which is just a sphere, and I also need to give it some size. Guess what? I have the size right there radius. Now, the other thing I want to do, this is going to seem a little bit strange, is right here, I'm going to say no stroke and no fill because when I call createShape, it's going to pick up the stroke and fill that are currently assigned. There's all sorts of other ways. I think you can call a setStroke or setFill, and then you can change those later as the program is running. But for right now, I just want a sphere with no stroke. And you know what, actually? What I want, just to make sure this is working, is set the fill to 255. So I just want to have my shape be white. I'm not going to add the texture just yet. And now, the other thing I'm going to change, now that I've made that PShape object, is here, instead of drawing the sphere with immediate rendering, I'm going to render that precalculated save geometry, that sphere that was already made. So I'm going to say, now, shape globe. So the shape function renders a particular PShape object to the scene, that PShape being the globe. So if I run this, we have exactly the same thing. And just to make sure this is really doing what I think it's doing, let me do that. I'm afraid. Ah, yes, and now, they're all red. So you can see how this is working. Now, the thing is, I actually don't want to fill. I want to say no fill, and this is what is so wonderful about working with PShapes and spheres and textures is Processing, behind the scenes, will automatically figure out how to do all of the mapping of the image and the pixels to the [INAUDIBLE]. There's all sorts of interesting custom ways of doing this, but I can actually just say globe setTexture img and run this. And magically, you can see all of these planets now have that one Sun texture. I can zoom in, and you can see it's that same texture on all of them. So we're kind of even I didn't hit my timer, so I don't know how long I've been going. But just a few minutes, five minutes at the most, into this video, I already have textures on these planets. So what do I want to do next? Well, I only want to have the Sun texture on the center one, and then I want to have other textures on the others. So let's figure out how to do that. What I think might make sense is to I'm going to make a variable called sunTexture to load that, and then I'm going to make another variable, which I will make an array. Well, I'll just call it textures. And how many do I have? I have 1, 2 I just have three. So let's have 3, and then I'm going to say textures index 0 equals, and now, apologies for the tedium of this, Mars, Earth. I'm going to load these just manually into the array, manually setting the index spots. Mars, Earth, Mercury. So now, where should the planet get assigned its texture? I just globally assigned it one, but I think what would make sense is for the planet to have a particular actually, I don't need a variable. What I just need here is to add a fourth argument called image. So when I create a planet, I give it a radius, a distance from whatever it's orbiting around, that O is for an orbital speed, and an image, which is its texture. So right now, I could say, for example, make the Sun with the sunTexture. And I could say here, make every other planet with textures index 0, which was, what, Mars. Let's do textures index 1 to be the Earth texture. So whenever I make any other planets, make it textures index 1, the Earth. And I could run this. I missed something important. Actually, I didn't, and you can see now, look at that, because I now have the Sun as the center, and all the other ones have the Earth texture. This is getting good. Now, what I want to do, though, is have each of these have a different texture. So what I could do where did I assign that earthTexture was right here. There's no reason why I couldn't get a random number. Oops, I already used r, so let's just call this index and a random number between 0 and textures.length. And then have that be a random texture. So when I create the planet, the radius shrinks, the distance is random, the orbital speed is random, and the texture is a random one from the other textures I have. And if I run this again, and you can see now I don't know why we didn't get any Earth ones. Let's run this again. There we go. So you can see now and by the way, funny how I'm zooming, but I can actually just zoom in Processing now because I have [INAUDIBLE]. Never mind, I'm not as good at doing that. You can see that all of the planets have different textures, and you can see and it kind of creates [INAUDIBLE].. Now, blah, blah, blah, I've lost my ability to speak. So now, we have this solar system thing. Now, there's a few more things we could add to this. Number one, is it'll be interesting to make the orbits elliptical. I'm going to leave that as a thought experiment for anybody watching this video to discuss in the comments and maybe post a version of it, but you could think about how that radius changes as it's orbiting. It gets wider. It gets shorter based on the angle of rotation. That's something you might try. But what I want to do now is just change the lighting a little bit. I think it would be interesting to, instead of having generic lighting, to actually have the lighting come from the sun itself. The sun is bright, and as things are orbiting it, you can see how different parts of the planets might get the light or not get the light. And so a way of doing let's look in the Processing reference. I honestly don't a lot about I have to live in fear of 3D. It's something I don't like to do because it makes I sometimes get a stomach ache when I program things that are in 3D. But I want to go to Processing, and I want to go to Reference, and I want to look for lights. And I'm going to look here and see there's, all these different functions for different kinds of lights. I encourage you to explore them. But I want to look at point light. What point light does is it adds a light, and you can see it has six arguments the red, green, and blue value, so what color is that light, and then the coordinate of the light. Well, this is really easy. I want a bright white light from where the sun is, which is at the center. So I can actually go back to my scene now, go back to the main draw, and right here, instead of saying lights, I can say pointLight, bright white, and at the centers of the world, 0, 0, 0. So let's run this actually not tried this. I'm just assuming that it's going to work. And look at that, you can see now now, interestingly enough, you can't see the sun. I kind of love this, though. The sun is not getting its own light. So I don't know how best to remedy that, but we could also try turning the generic lights on. And it's not as effective because but I could probably shine a spotlight on the sun or something. I don't know. I don't really mind that, though. But anyway, you can see that the effect is not as strong. Somebody watching this video will come up with a nice way of lighting the sun and the other planets. But I like this effect of being able to see that shadowing. And maybe we could what would be interesting is to actually put lights on some of the other planets to see how that works. Oh, there's all sorts of possibilities there, but I've got to stop. I think I've given you some tools here. I've given you a way of creating spheres as an object, of rotating spheres around other spheres, having those things be nested, having textures texture those spheres, and a little bit more on how you might light the scene in creative ways. So I hope you will explore this. Something else you can do is put an image as the background, maybe a star field. You can see, in Andres' example, how that works. I'll link to the code for that example as well in the description, but make some creative experiments with this. Think about elliptical orbits. Be more thoughtful. Could you actually make sun and the planets that are in our solar system? Would you choose to include Pluto or not or some other new planetary discoveries? Can you put a ring around Saturn? How might you do that? Oh, all sorts of interesting possibilities, so I encourage you to explore that stuff and share with me your solar system Processing sketches.