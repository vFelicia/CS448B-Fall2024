all right now I think we're here I mean this is like I'm ready to actually start trying to do guess yeah settle down outside the room I'm ready to try to start actually doing the neural network training so just to kind of recap you know hopefully you've watched some of the videos that are leading up to this particular one but what I have right now is I have a JavaScript program that loads eight data for 800 doodles of cats 800 one thousand eight hundred thousand Turtles of cat a thousand doodles of trains a thousand doodles of rainbows all these doodles come from the Google quickdraw dataset which I covered in previous videos now what I've also done is prepare the data and separate it out into into eight it's about 80 percent twenty percent eighty eighty percent for training and 20 percent for testing so the first thing that I want to do now is I need to create a neural network that will work with this data it needs to be able to receive a single image as input with 784 pixels and it needs to give me an output with three numbers which each represent a likelihood or like a score of how likely it is to be of a given category so we can think of maybe this category will be cat this category will be rainbow and this category will be train and low so let's actually set something up because we're altom utley everything is everything boils down to numbers and we think of this as an image and we think of these as string labels but it's going to make sense for us ultimately to use numbers so what I'm going to do just really in the code really quickly is I'm going to add at the top some constants like cat equals zero rainbow equals one so this will be kind of a mapping rainbow what was the other one train equals two this will map each one of those categories to a number I already have as part of my index.html file a reference to mine network library so when I released this code when I released this example and you're looking at the video description to find a link to the code you will find it with this library included and what this light where the this libraries repository is here on github under toy neural network j/s and what it allows me to do if I go back to my main sketch is I can create a variable I'm gonna call it I'm just dare I call it an end for neural network I'm going to and end for neural network and I'm going to say and and equals a new neural network so what arguments go inside the parentheses there the way the library is designed and this is not universal is first I need to say how many inputs are there 784 second I need to say something else and third I just say how many outputs I want which in this case right now is 3 the second argument is how many hidden nodes now you're gonna want to go back and watch my neural network build a neural network playlist which where I go much more into detail about what the hidden nodes are and how they work but right now the hidden nodes it's really you can think about it as the kind of magic in a way that's in between the input and the output that allows it to make lots that allows it to learn and so the more hidden nodes we have the more parameters there are the more things the more sophisticated in a way the neural network can be now of course there can even be not just the number of hidden nodes if there's if there's input hidden and output there what I'm talking about is sort of vertically how many hidden nodes are there but there could also be more hidden layers but this is again kind of beyond the scope of where we are currently in my videos about machine learning and neural networks right now the library I'm gonna just assume there's 784 inputs there's one input there's one set of inputs with 754 one set of outputs was three and then there is a hidden layer which I'm gonna arbitrarily just say I don't know 64 sounds like a good number and if maybe things aren't working very well maybe I'll try making it higher if it's running too slow maybe I'll try making it lower so there'll be less math for it to do we'll just sort of play around with it okay so coming over here I'm now gonna say 784 then I'm going to say I've already forgot 784 I guess sixty four and three so this is my neural network 780 four inputs three outputs and sixtyfour hidden nodes and time and I think I'm good I'm good I'm done no none now what I want to do is I want to train it to learn I don't know why I'm all caps all of a sudden about cats so what I want to do is say four let I equals zero I is less than cats dot training dot length how many training data sets are there i plus plus then what I need to do so here's the thing by definition this is a cat so and I've set so I need to say the let me create the outputs okay so I just realized something here's a terrible idea that I was about to do let me train the neural network with all 1,000 cats now let me train the neural network with all 1,000 trains now let me train the neural network with all 1000 rainbows this is no good I need to tune order for this to work effectively I need to just be training it with all the training data in random order so it's like cat rainbow train train rainbow cat rainbow cat train train cat rainbow train so I'm gonna need to do I thought I prepared all the data in the previous video I gonna have to do some more work preparing the data and so one thing that I think that I can do is I can actually pass in what I'm gonna do here is pass in the label so this is a cat this is a rainbow I'm going to give it and this is a train I'm going to add another argument called label and what I'm going to do this is a little bit goofy but you could do this kind of stuff in JavaScript this array I'm going to just give it an additional property and I'm going to give it that label and I'm gonna call it label so it's a little bit goofy I'll I'm using the same variable name everywhere but I think in the end it's gonna make things make sense I will show it to you in the console and this is I threshold because I need the testing data and this is testing also needs a label so look at this let me just show you what's gonna happen now okay now that I've added that in i refresh the sketch let's look at the Rainbows you can see there's still 800 training rainbows 200 testing if I look at the testing ones and I look at number two for example this is the array and it has a label of one so all of the rainbows should have a label of one all of the cats if I look at just an arbitrary 101 have whoops and this is a weird thing you can do with JavaScript even though it's an array an array is an object and so I can attach some other properties to that object as well so the labels are in there now what I can do is I what I need to do is put all of them together into one big array and then shuffle it so what I should say is let training equal a blank array and then training equals training.com cat cat start raining like cats should join it right and then just join the rainbows I don't know if this is right and the the rainbows and what was the other one I got the trains alright so here we go so that is now let's let's let's see what that comes up with console.log training let's look at that there we go 2,400 that's 800 times 3 yeah why is there oh yeah yeah it's 2400 of these wonderful look and now and this one in here is label1 oh this is good this is actually making sense okay so I have all the training data in here but I want to shuffle that I want it to be in random order but so how do I shuffle an array okay well today is our lucky day because it just so happens that p5 has a function in it to shuffle an array so I'm gonna say shuffle training now one thing that's interesting about the p5 shuffle function and let me just show this to you in the breath let me just show you the student in the console and let's make sure this is true let's say I make an array and I say 4 1 9 10 right so there's an array I could say shuffle the array a and it's giving me back a new array in a randomized order but if I look at the original array it's still in the original order so I could say a equals shuffle a but another way I could do it I believe in p5 is say shuffle a and then pass in a second argument that's a boolean variable true and then I get this array again in a random order but it's actually affected it's actually affected that array itself this is similar to when I looked at array functions like does the array function map alter the array or make a new array this is similar here so I'm gonna say shuffle training true so and then I'm going to console.log it again so this was it it should be like everything at the beginning should just be like 1 0 oh no no I'm sorry so the problem with console.log by the way is it tries to be this happened to me all the time it tries to be smarter than you and so even though it's console logging it here I changed that array and it so even though it's I'm console logging it before I call shuffle it's there in the console and it's like live updating as the date of that object changes so I would have to so I think we're just gonna trust that this is working and I'm gonna take this out and I'm just gonna call shuffle again and as I look at it we should see here okay the first one is a two the second one is a zero the third one is one perfect it is in random shuffled order excellent so now I can finally go through and train the neural network this is my image drawing stuff which I don't need so I am going to this is making the neural network this is preparing the data making the neural network and now randomizing and now we're going to do something very exciting we are going to train oops train for one and what's the word that I'm going to use I'm going to add a term somewhere epoch which is in my view of the proper pronunciation of this word not how I like to nevermind anyway so epoch or epoch whatever so one epoch is tripping over all 800 of the training elements but in this case it's 800 times 3 so overall 2400 so I want to say for one epoch I'm gonna say 4 let I equals 0 I is less than training dot length I plus plus and I'm gonna say the the data is training index I the label is training index i dot label so now what I need is I need the inputs and I let me say so inputs is training in his training index I is that array it is a little bit confusing but let's think about it let's just do this so for a moment just so I get a handle on this I'm gonna actually just do one thing so instead of training over all the training game I'm going to just train over one so let's console.log the inputs and then console.log the label and I just realized I've got a major issue which is fine it's it's it's a major issue but but I can I could hate I could do this I actually need to make a new array I need to make inputs actually has to be a new array because what I want to feed if you remember I talked about this in one of my earlier videos I don't want to feed in the raw bytes of a number 0 through 255 into the network I want to feed in a normalized number so that byte value which is an integer or byte between 0 and 255 go and divide that by 255 to get a floatingpoint number so I'm gonna make a new array again I'm not worrying about being efficient here and I'm gonna say let I'm gonna say 4 I'm gonna do another loop I'm gonna just use j j is less than training index i dot length right which i know is going to be 784 so really i can use that global variable j plus plus and I'm gonna say inputs index J equals training index I index J oh boy let's make another variable data equals training index I that way I can just say this I can say data length and now I can just say inputs J equals data J divided by 255 I can't override that data because that's an integer that says this this training array is reserved to be integers so now I have the inputs the inputs should be 784 floatingpoint numbers and then so let's look at that let's look at the inputs and oh let's look at that let's look at the inputs and then let's look at the label so we can see there are the inputs let's go into the middle somewhere where we have some color values mmm oh there we go so we can see these values have been normalized now we have floating point numbers between zero and one those are the inputs now let label and the label is for this particular one is 2 now here's the thing I don't what I need for the outputs is an array that has 3 that has 3 values in it it should have zeros for the category it is not and a 1 for the category it is that's often by the way we refer to as one hot encoding it's an array that has only one vector that only has one element with the value of 1 everything else is 0 so the way that I could do that is I can say let targets now be an array with 3 zeros in it and then I could say targets index label equals 1 right because remember that label is a 0 1 or 2 so I either want this to be 1 this to be 1 or this to be 1 and now I could say console dot log targets so let's do that let's run this we can see look now every time I run this I'm gonna get something different because remember it's shuffling the array a different way but we can see though I got a lot we could see this is working I'm getting an image with 784 pick on an image but an array of 784 floatingpoint values and I'm getting the target outputs so finally finally finally finally I can say neural network trained inputs targets so what is happening inside of this function so to really dive more deeply into what is happening inside this function you've got to go back and watch my playlist where I build the neural network library itself and write the code for the training function just to give you an overview an idea here is what we're saying is hey neural network whatever state you're in take this input data and give me some outputs and maybe those outputs it's going to make a total guess so those outputs are going to be some arbitrary numbers like 0.4 0.9 0.003 it's gonna just come up with some but it's gonna be random when it starts but I've also given it targets and maybe I said the targets are 1 0 0 so this is its actual guess its prediction and this these are the targets and so what the neural network is able to do is calculate an error and the error is really something quite simple it's just the difference between and I mean subtraction when I say difference between what it guests and what the targets are and it uses that difference as a way of internally adjusting a whole bunch of dials which are essentially the weights of all the connections between the inputs and the hidden layer and this output layer so you can go back and watch my neural network playlist to dive into how that process works more deeply but that's basically what the library is doing so now in theory if I run this and I'm going to take out this console log and I'm gonna put this back in I can say console dot log trained for one epoch hmm we're stuck is it just taking a long time or are we really stuck it just took a long time so that can take awhile right it's slow because I haven't done anything to optimize my code it's just and really what I might want to do is like sort of like put this in the draw loop and have some kind of animation but I'll come back to that I'll believe we'll add that in a future video I just want to see now what happens well let's try using let's try it let's evaluate it okay so let's wait actually you know what we're good I gotta stop here I mean we don't know if it's worked but I think this is a good point to stop and take a break and get ready for the next video because what is it that I need to do I now need to test how it did so the next thing I need to do is give it all of the test data don't train with it but just evaluate how well it does with all of that testing data so that's what I'll do in the next video then of course what I ultimately want to be able to do is I want to be able to use my mouse to draw a nice little train or rainbow or cat into this canvas right here and have it guess what it is okay so so hopefully this video about training has helped I know we're not seeing anything yet so we haven't gotten to the exciting part but we have now trained over all of the training data and if I looked at the neural network it's still there you can see it has some input nodes you can see it's got stuff in it I got to talk about the learning rate we'll get to all this stuff later okay see you in the next video you