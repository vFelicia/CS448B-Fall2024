hello I have a very exciting coding challenge for you today I'm going to attempt to make some 3d not now these are 3d knots made in processing by Ruby Ruby who submitted issue number 72 the rainbow topics repository this is related to super shapes or maybe not related but the idea came from after super shapes knots would be a great follow up so there's this Wikipedia link and as I often do there is the paul bork website which has tons of mathematical formulas for geometry and i guess i thought back in 2016 i might like to tackle it and i took so long that ruby in fact tackled it herself and you can see these wonderful you can you can take a look at this github Repub now i haven't actually looked at the code here whatever i affirmed i have not looked at the code here and but i'm going to certainly look at the paul bork website and i pretty sure that this is going to end up being very similar to another coding challenge where I did the Lorenz attractor so let's take a look so let's see if we can find the simplest way to do this not one not two not three not four but yes five no where's my laughs drag okay why not do the knots oh this is just this is just getting better with every minute all right so let's look at what let's I want to find the first instance of a formula okay here we go there are a whole family of curves including knots I don't know how well you can read this let's make this a little bigger there are a whole family of curves including knots which are formed by the equations x equals R times cosine of V times cosine of theta y equals R times cosine of feet times sine of theta Z equals R times the sine of feet now I've done this before right didn't I have a video about spherical geometry where this was really really really really similar hmm so the this is you I would I would just go back and review that right we can find the points along a 3d sphere by having two different angles and this idea of spherical coordinates and you using spherical coordinates so what this is is probably weaving a path around that sphere is going to end up with some interesting knock patterns so for example we could do it this way whoa so which are the equations right for converting from polar to Cartesian purple coordinates that we make them our theta fee a function of the parameter beta which ranges from zero to pi oh look at this oh I love this okay okay so so first we just let's get these formulas let's grab this formula and let's put this in our code so I have a blank sketch here I'm doing this in processing which has a robust 3d rendering environment P 3d I've been doing recently a lot of video tutorials about WebGL in p5.js so maybe I'll try to redo this one so let's put these formulas in here and put them up here in just in the comments now let's get these formulas and put them here as well so this is really I believe all that I need so first I'm gonna have a variable let's just do the whole thing all at once so we can animate it have it grow we'll figure out that stuff as we go but first let me just try to draw the entire not so I need to have a variable I'm gonna call it beta which equals zero and I'm going to say while beta is less than PI right isn't that what it said zero to PI that's the range the first thing I'm gonna do is these so I'm going to say convert these now I'm gonna say float R equals this formula float theta equals it can someone in the chat confirm that I'm pronouncing the Greek letter fee correctly I know some people say five and I think it's actually fee so great I'm gonna add my semicolons so now I have calculated and our a theta and a fee so once and this should say cap PI has to be all capital letters for the constant now what I'm gonna do now is take these now I'm actually in some ways done I have the polar this mirakl coordinates for this not pattern but what I need to do is processing only knows about Cartesian coordinates X Y Z so that's what this next step is whoops so I need to get these formulas and I can say float X float Y and float Z and just make sure I put in my semicolons and then let's just I was gonna let's use well what let's just go for broke here I want to well one thing is I need beta to increase I'm gonna say beta plus equals zero point one and I'm just gonna say begin shape and shape it's this is gonna work I'm gonna say no fill stroke 255 and I'm just gonna set a vertex vertex at XYZ oops let's run this what I get is there anything there well first of all I forget the origin point is the top left corner in processing so let's translate to the middle and let's run this again I'm hoping to see just look there's something there's my knot pattern look oh it's beautiful look at the not matter so what happened I'm getting values and it's making some pattern but those values are probably really really tiny so I need to do is really expand it out I could use scale or something but let's actually just try I have a feeling that if I just take our and kind of multiply that whole our are being that radius by like something like 100 I'm going to see something more looking like they're not there we go look at that that kind of looks like it mmhm now it's very jagged so I probably need finer detail so let's increase beta by less let's just try like 0.01 so now I actually have like a hundred points for every I don't know 10 points for every one point I had before there we go now we're definitely talking now is this really 3d I believe it is but let's confirm that by let's have an angle and let's just do a little bit of rotation like rotate Y by that angle and increase the angle by some small amount there we go so you can see and that's going really fast so let's slow that down it could map it to the mouse or something so you could see there is the not so first of all boom done we never have this not and now there's just so much that we could do let's try adjusting the formulas a little bit so let's try top side front yes not 5 so this are some oh look there's even some source code here that I could have copied so I'm heat not whoa look at this there's all these different possibilities so actually so what I'm going to do as an exercise I'm gonna let people explore who I really would like to do this one I'm gonna let people explore and try to make other versions of these knots and let's just try what I want to do is show you a little bit more about ways you could render the not so one thing that I think is worth looking at is how could I have that not animate its path well first of all how could I make it can I say strokeweight in 3d will that make that because a stroke in 3d is really like a tube let's see let's see how that looks yeah so that made it a little thicker I think if I say eight all right so this is worth doing I could also probably mess around with the color so I could say like stroke XYZ or something and it's gonna give me like an RGB value according to its XYZ value this is just like normal material in p5 so you can see it start to play with the colors of the pattern but what I really want to do and let me sort of feel like doing this actually so the R could be the Jeep so let's just do this weather so if we see the difference what I really want to do now is I want to show you how to animate this pattern how do we do that so the way that we do that is instead of drawing all of the vertices all at once what if I store them all into an array and then and then create the shape one at a time so there's there's a variety of ways I could do this what I'm actually gonna do is I think what I'm gonna do is I'm gonna use an ArrayList and call on with Poppy vector P vector is a kind of object that stores an XYZ and I'm gonna say vectors equals a new ArrayList P vector and what I'm going to do is I'm gonna now make beta a global variable and instead of while beta is less than pi I'm just going to every let me take all this out I mean I'm gonna need this stuff I'm gonna I'm gonna move actually what would make more sense is I want to what I want to do let me take out the while I want to put all the drawing stuff separate so the drawing stuff is going to happen down here and it's still going to involve a loop so I want to say every lecture inside of vectors set of vertex at V X V Y V Z so this is now just this is now just saying hey draw all the vectors as a shape so now what my job becomes is adding these points one at a time so every time through draw beta goes up by a little bit and what I do is I say vectors and I think it's ad in Java and ArrayList add new P vector at that XYZ so I got rid of my loop and I'm just calculating one XYZ every frame and adding it and what this should do is if I run this I should see it drawing that path this is pretty good now ah so I forgot um one thing is I lost the color so I could do something where I you know calculate make an object for a vertex that has the color and the XYZ so I could there's probably a lot of ways I could think about organizing this right now I think what I might just do is set the stroke here and one thing I could do is I mean this is redundant but uh so this is very inefficient but I can ask for the oh I could just say I could ask for the magnitude for example of the vector that's its length and I could say something like whoops I could say stroke 255 magnitude 255 so the length of the vector right how far it is from the center has something to do with its color so you can see now against again I've kind of got that coloring back in oh this is so lovely well this actually worked out quite well so I think I'm going to stop here and quit while I'm ahead so to speak there's probably a lot of things you could think about doing you could look at Ruby's code which I think will have more examples can you create any of these other patterns can you think of other ways of rendering them could you make some nice gif animations so if you make something share it there's three ways you can share well there's a link to the source code for this challenge in the description there's a readme there so you can add a link to that readme you can tweet me at Schiffman or just use hashtag than why not why K and ot hashtag why not and I on Twitter I'm at Schiffman and I'd love to see all the different beautiful knots you make and at someone I will look into remaking this in p5.js okay thanks for watching this coding challenge have a good day you