Hello. This is another video in my continuing series about perlin noise. I just want to briefly show you what the noise detail function does. And if you can remember a time, a little while ago and when I recorded my first video, today, or I don't know when, never mind about time. Time doesn't exist in the world of YouTube, but I do have a previous video, which you might watch where I talk about how the noise algorithm actually works. And if you recall, there is this idea oh, look it's a purple pen. This is so exciting. I didn't even know this was. There was this idea of picking random values spaced apart with some amplitude and then interpolating between them. And then again picking random values spaced closer together with a smaller amplitude, and then again, picking random values closer together with an even smaller amplitude, and then interpolating between those. And then adding all of these random waves together results in some nice perlin noise. This is how the perlin noise algorithm works. Now, over here, we have a visualization of perlin noise in two dimensions, which I just talked about in my previous video, smooths randomness, each pixel having a similar grayscale value to the pixels around it. Now, what we can actually so this is the default visualization of two dimensional perlin noise, but we can look at how that changes based on this noise detail function. So what the noise detail function does is it actually takes two arguments. Let's say I say noise detail 4, and I'm going to make this a little bit bigger. You could see nothing changed. If I say noise detail 8, you could see that it changed. Look. It's got finer detail. Noise detail 24. Can you see that even finer detail? So what that first argument is doing is controlling the number of octaves. So the more octaves that you have, the further down this trajectory you're going in the smaller more fine detail you're getting. Now, over here, I want to OK, now, so let's go back to noise detail 4. That's the default. There's also a second and by the way, if I were to say noise detail 1, like what if I just do one octave. You can see now we've lost that finer detail and just have this sort of smooth grayscale values. Now, what if we look at the second argument? The second argument is often referred to as fall off. Remember I was saying how the period of these waves is shrinking, the amplitude is shrinking? Well, by what factor? It's shrinking by a factor of 0.5. Have. So if I were to say noise detail 4, 0.5. Hold on. I don't like the size of my things here. You can see that's the sort of default noise, but I can now say noise detail 4.9, and look what that looks like. A little bit weird. Or 0.2, and look what that looks like, or I could say 0.4 but with 12 octaves. You can control the quality of the perlin noise. Actually, I'm curious just for a second to look at what it looks like with this one dimensional perlin noise example. Let's just change the noise detail to 1. Let's try noise detail 1. You can see how this graph really changes. You lost the finer detail. You only have that original random noise. Now, if I say noise detail 8, you can see how there is even more detail in the finer points of change, and I could also say now noise detail 8, and then change the fall off to 0.2, and you can see what that looks like versus 0.8, and you can see what that looks like. So there is a lot of how you alter the noise detail function can change the behavior of the noise, and that's something you can control to get a variety of different effects, whether it's a pixel effects or otherwise.