now we've established that fractals are generated from functions with recursive definitions what does it mean to have a function with a recursive definition in a processing sketch this is what we're going to look at exclusively in this video you know we'll get to some more advanced stuff later but we're going to start with this very basic idea so here we have an incredibly simple processing sketch it's so nice that in this this topic we return back to the kind of very roots of ourselves and the very beginnings of working in processing we have this sketch that when I run it does nothing but draw this nice beautiful round circle this Euclidean form here in the center of the screen right all we're doing is making the size we're saying stroke of zero no fill drawing ellipse to the center of 300 300 so one thing we've learned about in programming is hey this functionality here we could wrap they put it into a function and it's silly to do this because you know why are we making a whole another function just to draw a circle but I could put all of this in this function I could run it and I have the exact I would have the exact same result if I called the function and draw so there we go we have that result right up there above my head probably there okay so now we've got it in a function let's do one more thing and let's add some arguments to the function we need a location and a diameter which will determine the size of the circle and I'm going to pass those arguments into that function okay pretty good pretty basic if you've been following all these videos your way further ahead than this kind of stuff in processing but now we're going to add a little twist here let's say what if I were to say draw all the function draw a circle inside of this function I'm going to do it this way I'm going to say call it again but with a diameter that is half the size now first of all this looks like a horrible idea first I mean are you that you just wrote the function draw circle and then you call it draw circle out of it so when Drago gets called it calls drawcircle which then calls drawcircle we've said Co straw circling like all of our heads explode and like a to madness in fact this is really a quite excellent thing to do and tons of algorithms and things that you might see in just sorting algorithms and all sorts of things can work off of this principle of recursion a function that calls itself but there is a problem here that we need to solve if I were to actually run this we see nothing on the screen and in fact we get this wonderful error message which I hope you find some day in your life this sketch is attempting to much recurse you can write it it's like figured out it's like recursion recursion so just as when you first learned about a for loop in processing and you figured out that you are a while loop that you need to have an exit condition we need to have an exit condition for this recursion what should that exit condition be let's think about it for a second think of how to yourself a circle half the circle half a circle half a circle what about when the circle gets too small so as long as the diameter is greater then I don't know 10 pixels which is arbitrary and then you can continue to call yourself so if we do this we now have and I'll just move this over so I'm not blocking it we now have look at this a circle and then another circle then another circle and eventually we stop calling that function over and over again recursively now if we keep looking at this I'm like okay come on you went through all of that and all you have is a bunch of circles I mean I could have done that with a for loop and linked licketysplit and this is true everything that you could do with recursion you could also do with a loop I don't know if everything they go back and forth but there are some things that you're going to see that we can do with recursion that doing with just a plain old loop would be incredibly hard and I that can I do that as a challenge to you look at the kind of example all examples in this particular video when we get to the end of them try going back and doing them without recursion we send them to me out you know I'll be really excited okay so let's just say what if instead of drawing the circle at the same location I'm going to draw it a little bit to the right and now we look at this we can see I have circles going to the right now let's also say I'm going to draw that circle a little bit to the left now I'm not going to run this yet because I know I'm taking a very long time to go over this but I think it's important to think about whoops I left all this what did we just do first we said halt draw the circle and then draw one half the size of the right half the size to the right half the size the right half the size of them right and then we said you know what to the right and to the left and so you might think to yourself here is the result right circles are going to the right and circles are going to the left but this isn't the result we're saying this circle should have a circle to the right and the left and you know what each of those circles should have a circle to the right and the left and you know each of those circles should have a circle to the right and the left right this is the power of recursion we are actually being able to duplicate this kind of multidimensional branching shape over and over again it's like the loop went off in this direction and also this direction and also this direction when it goes off that direction also goes in this direction also this direction it's really magical so let's go back right let's come back here and say remember what did we do we're going to comment this line out and we're going to say here we go we've got them going to the right now let's add them going to the left and here you can see and if we zoom in on this shape here you can see the majesty of this here we have that every circle has two circles around of course it stops this is the sadness we have it stops when you know we don't what we're making a circle it's no more than ten pixels we could we could get a little bit further we could say you know what I don't care a two pixel circle is good enough for me and now we can really zoom in you can start to see but at a certain point you know there's only so much space with these pixel which is really the tragedy here one thing that you might consider is a very challenging exercise I'm just zooming through the you know operating system zoom but what if you built the sketch where you actually could zoom into it and as you know behind the scenes you're kind of drawing more and more parts of the fractal and depending on what zoom level you're at that would be a great project of this duds been done a zillion times you know Google Mandelbrot set zooming trippy video with colors and cool music you'll find a ton of them for you to stay up at night and like watch with you know colored glasses and something but anyway um this is now something we've achieved in processing and we should also note you know that we could keep going with this what if I wanted to put one above right it should be at the X location but a little above as well and we can start to see I guess above means below when you're adding right we can start to see in what's called this is so crazy look at this let's make our window size bigger this by the way somehow just by drawing all these circles we get another fractal pattern that's the sierpinski triangle right there what is the sierpinski triangle the sierpinski triangle is a triangle which is broken into three triangles and each of those triangles are broken into three triangles and each of those are broken into three triangles right I you know I have to like watch myself not to keep drawing here right we get this this is a very very famous fractal pattern which you could now as an exercise also try to create by drawing triangles how would you create the iterative structure but it's kind of amazing that we see we've got this just by these circles being overlaid on top of each other this it's amazing okay so I forgot how long we've been going but the next video is gonna is kind of important but I think before we go there let me just um mention one thing um I think the I think so P correct me the kind of first known instance of a fractal is about 1883 discovered by a mathematician called the Cantor set well the thing that I want to emphasize about these fractals is that they are generated through a recursive cursive function but they're off often come within a set of production rules so even though we kind of started with the code in other scenarios you might start with those production rules so you can stop the video Nichols probably done enough but if you're interested interested let me keep listening so the Cantor set by the way as a production rule which is start with a line start with a line two is divide the line into thirds right so that's approximately the line divided into the thirds erase middle third so if I get the eraser here and I erase this middle third this was be applying the production rule to that line what do we have left over two lines let's apply this production role start with a line apply to this line start with a line apply to this line what do we have that let's do that again two four lines the reason why I bring this up and I wanted to just take a moment is one of the things about fractals is in the sort of theoretical pretend land where we could do this to infinity they exhibit these kind of crazy properties I mean first of all we could do this to infinity we're gonna have an infinite number of points just between in this very very finite space that doesn't seem really possible what's the what is you know add up the lengths of all of these lines as you do this to infinity if the first line is one the second line is 2/3 what's the next line add up those legs what happens when you do that to infinity I encourage you to kind of research and look at a lot of material about the Cantor set in these strange paradoxes when we look at the Copts curve it's often referred to as the monster curve because it has an infinitely even though it's in a finite space so this is really kind of a fascinating thing about fractals but in our world we're making stuff with pixels and it's quite finite but what I wanted to just briefly show you is you know you could say to yourself okay well if you understand these production rules now translate these production rules into a function and obviously this is something that I'm not obviously but this is something that I've done with one of the examples from the book this by the way with the circles is examples eight point one eight point two and eight point three I believe and once we get to example eight point four we can see here here is the cantor set now I'm showing each generation as a separate kind of as a separate line you can see the first line then two lines that 4 then 8 then 16 etc etc and you can see how is this done right you can take this as an exercise but you can see the the function takes an X Y which is the leftmost point of the line and the length of the line and then for every single generation it draws two more lines recursively so Cantor calls itself twice so I didn't think I don't so I wanted to just go through these two scenarios there's a kind of essential problem with these two I mean they're they work but these these shapes are going to be very hard for us to manipulate after the fact I just sort of drawn and sitting there so that's the aspect I want to talk about in the next video for example what if you wanted to draw that circular pattern that have all those circles like float away like bubbles how would you do that so um and the technique that we're going to look at is using an ArrayList to be our kind of repository of the recursion and hopefully this kind of gives you the give you the basic idea you know try to generate your own fractal try to create your own production rules see if you can create a fractal where you can zoom there's lots of possibilities there