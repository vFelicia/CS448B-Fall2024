[MUSIC PLAYING] Hello, and welcome to Let's Make A Deal. Behind one of these three doors is today's prize, a trip on the coding train express. Behind the other two doors is a goat. It's up to you to pick one of these doors. Which one will you pick? I can hear the people of the internet shouting out to me, door number 3. But before I reveal what's behind door number 3, let me show you what's behind door number 1. Now, I'm going to offer you a onetimeonly chance to switch switch to door number 2, or do you want to keep door number 3? Think about it. Should you switch? What is the probability that the prize is behind door number 3, and what is the probability that the prize is behind door number 2? This is the classic Monty Hall problem, which originated in the American television show, Let's Make a Deal back in the 1970s. The answer to the problem is, you should absolutely switch. If you switch, you will have a 2 out of 3 chance a 66.666666666% chance of the prize being behind door number 2. This might seem counterintuitive. Shouldn't it just be 5050? There's two of them. It's definitely not behind door number 1, so it's either behind door number 2 or door number 3. No, that is not the case. In today's coding challenge, I'm going to first explain to you why you absolutely should switch. And then, I'm going to code a simple P5 JS simulation of the game that you can play over and over again to test your different theories about what the proper strategy and probabilities might be. Let's recap the problem. We've got three doors. Behind one of these doors is a prize a train. Let's say it's behind door number 2. There. That's my train. Then, behind doors 1 and 3 is a goat. I'm going to have to draw a goat, now. It's more like a cat, but it'll have to do. It's important to remember that the host played by me, or Monty Hall, really, knows where the prize is. Let's think about all the possible ways this game could play out and build a table describing those ways and look at how often does the player win if they switch, and how often do they win if they don't switch? So what are the stages? First, there's the player's pick. Then, there's the door revealed by the host. Then, there's the question of, does the player switch or not? And of course, we have the question, do they win? All right, let's say the player starts by picking door number 1. The host, then, knowing that the prize is in door number 2, has to reveal door number 3 to show a goat. Now, remember, the player has picked door number 1. If they switch, they'll be switching to door number 2. Let's just assume, for the sake of argument, that the player is always going to switch. So yes, the player switches. Did the player win? Yes, the player wins check. Now, let's look at the scenario where the player starts by picking door number 2. Now, this is a interesting scenario. Because if the player has picked door number 2, Monty Hall has to reveal a door that has a goat behind it. It could be either 1 or 3. So let's just say that Monty Hall reveals door number 3 this time again. Again, we've got another door number 3. The player has picked door number 2. Should they switch to door number 1? We know they shouldn't, but let's say in the scenario, they do. So yes, they switch. And no, they do not win. The last possibility here is that the player starts by picking door number 3. They pick door number 3. Monty Hall has to reveal door number 1 the only other door with a goat behind it. The player switches, switching to door number 2, and yes, they win. There's only 3 ways this game can play out. The player starting by picking door number 1, starting by picking door number 2, or starting by picking door number 3. If the player always switches, the player will win 2 out of 3 times. Think about it this way. Remember, you don't know where the prizes are. You pick door number 1. And I'm going to say to you now, well, would you like to keep door number 1, or would you like to win if it's behind either doors 2 or 3? Either one you can have two doors. You don't need just one door. Stick with just one door, or would you like two doors? That's exactly what this problem is. You would want to pick two doors, because it's more likely 2 out of 3 times to be behind one of these two doors than the original one that you picked. Let's look at it, one more way. I'm going to show you 100 doors. All right, fine, let's just do 50 doors. I don't feel like drawing the rest. Pick any one of these doors. There's only a prize behind one of them. This train ride this glorious train ride you're going to win is somewhere behind one of these 50 doors. Oh, oh, you want to pick this one? OK, you pick this one. I'll color it in purple to indicate it's the one you picked. Now, I'm going to reveal to you that there's a goat behind 48 other doors. Would you like, now, to switch to this door and see if the prize is there, or would you like to keep your original door? I mean, hello, you're going to want to switch to this door, right? What's the chance that the prize happens to be your 1 out of 50 chance that you happen to just pick, or I revealed all of these other I mean, it could be there. There could be a goat here. But I remember I know all of these are goats. So I'm going to leave one open. If you didn't pick the prize, I have to leave the one with the prize open. Would you want to switch? I think you would. There's also a very specific probability analysis known as the Bayes' theorem that we could apply to show this exact 2 out of 3 probability. Or in this case, it would be a 49 out of 50 probability. You have a 1 out of 50 chance of it being your original pick. Or if you switch, you have a 49 out of 50 chance of winning. But you're probably not here wanting to listen to me drone on and on and diagram on the whiteboard about probability and the Monty Hall problem. We could build a P5 JS sketch in code that simulates the Monty Hall problem, run it thousands of times, and see if my analysis proves to be correct. Also, by the way, who is to say that the goat isn't the true prize, after all? I would love to have some wonderful, beautiful goats. My usual approach to this would be to start drawing doors in the canvas and checking where the mouse is clicking. But I think I'd actually like to try this with DOM elements, meaning HTML elements that are not canvases that appear on a web page. Which, if you didn't know, you could also do in P5. So I'm actually going to do something quite exciting here and say, no canvas. I'm going to write a little loop to create three doors. Let's make an array to hold the data for those three doors. And each door will be a Div on the web page. Let's start by putting a goat in each one. And then, I will pick one randomly and put the prize there. So every time I run this sketch, I see three emojis, only one of which is a train. Now, of course, they're really tiny. So let's work on some designy things. Let's create a CSS class. A CSS class is a way of designating a particular set of styles to be applied to any element on the web page. This isn't a full lesson about CSS, obviously. I barely know CSS. But I will put resources in the video description and up on the screen here, as well as some other videos I have that go through CSS in a bit more detail. But right here in the P5 web editor, I can go over to the style.css file. I can create a door class, and I can start to add some properties to it. Now, what I really like to do is center those emojis in the Div. Thankfully, the live Twitch chat that's watching along here has given me some tips of how to do this. Let's make the emojis a little bit bigger. Let's put a little margin between the Divs. And I want to see them in a row, so I think I can add display flex to the body. Great. Now, we've got our three doors there. So the tricky thing here is I want to make a Div that knows whether it's a goat or a train, but I don't want to reveal that goat or train. I could create my own wrapper. I could create a door class that has a Div. But I think since these are just JavaScript objects, a P5 element, I can attach other properties to them. So I'm going to make the Div with no text. And instead, I'll add a new property called prize, which is by default, a goat. Let's call this, winning door. I'll say the winning door's prize is the train. So now, I have three doors. Behind the scenes, there's a variable attached to each of those Divs that's holding on to either a goat or a train. But the viewer, the player I cannot see which one is which. Now, what I want to do is attach an event to each door to do something when I click on it. The clicking on the door over the act of selecting that one. I can do this with the P5 event mouse pressed. And whenever the mouse is pressed, I want to execute a function. I'll call it, reveal. One of the nice things that P5 does behind the scenes is it binds that particular function, reveal, to the DOM element that was triggered by the event. And that binding is embedded inside the key word, this. I have a whole video all about the this keyword and how this works. But for now, what you would see is if I just say console.log, this.prize, when I click on each door, we'll see the prize in the console. That one's a goat. That one's also a goat. And that one's the train. Running it one more time, we have train, goat, goat. So now, I need something to keep track of the state. There's the moment I pick. There's the moment I reveal. There's the moment I switch, and then, whether I win or not. So let's create a variable called state to keep track of the game state. And we're going to start with pick, meaning we're waiting for the player to pick. Now, I'm going to keep this console.log here, which will help me know what's going on. And this reveal is a little bit of a misnomer, actually, because we don't want to reveal the one that we picked. We want to reveal a different one that has a goat behind it. So something that would help me a little bit is to also have each Div know its index into the array. So here, the Div also has a property called index that I'm storing where is it in the doors array? So when I click, I should see 0, 1, 2. So once I've picked, I need Monty Hall to reveal one of the other doors. So Monty Hall need to know, which doors can they reveal? We'll make a new array called options. As long as it's not the door that the player picked and the prize is not the train I can make this a little less wordy by putting the door in a separate variable. Oh, this as long as I is not this.index. I don't know I was so confused there. As long as the door I'm looking at is not the one that was clicked on and that door is not the prize, then it's something that could be revealed. Now, remember, if the player didn't pick the right door in the first place, there's only going to be one thing left in the options. But I need to check all the possibilities because if they did pick the prize, then Monty Hall can choose to reveal one of two doors. But we'll pick one of the options randomly. If there's just one, there's only one it can pick. And we will put in the Div the actual prize itself. OK, I'm going to pick door number 1, and we should see a goat appear in either door 2 or 3. [LAUGHING] What did I do wrong? Oh, I did it if it's I have to say, if it's not equal to the train. OK, that was a disaster. Let's try this again. I'm going to pick door number 1. There's that goat. Let's run it again. There's the goat. So we always will see a goat no matter what I pick. Another thing I think I should add here is something to indicate which door was picked. So let's put a little green. So that's highlighting which one I've picked. Now is really the moment where some animation or some thoughtful interaction design would be a great addition, and I hope you, the viewer, will make it more intuitive and smooth way of playing out this game. But I'm just going to really quickly toss in a couple of buttons one button for if you want to switch doors or a different button if you want to stay put. So when I click on any of the doors, those two buttons will now suddenly appear. Now, they look a little weird here because I have this CSS display property as flex in the entire body. So probably, I should make a container for the doors. I'm going to manually put in a Div called doors, reference the ID with the hash symbol, put the flex display there, then, I can put the door Divs in the doors container by using the P5 parent function. Then, my buttons look a little bit more normal there just on the next line. They are kind of small, so let me make the font size a bit bigger and give them a little margin. OK, again, very crude interaction design. But now, I can choose whether I want to switch or stay. This is also, maybe, a good moment for me to now that I've got some code worked out refactor it. Maybe it would be nice to look at the code to see there's a pick function, a reveal function, a switch function, and then a win function. Right now, I only have reveal function, which is kind of doing both of these first two steps. So when I click on a door, what I'm really doing is picking that door. And let's have a variable called pick door, which is set equal to this the Div that was clicked on, which is held in the keyword this, based on P5 binding it to the mouse pressed event. Then, I can call reveal. Reveal looks at all the the doors and figures out, what are the ones that can be revealed, as long as it's not the prize or the picked door's index? This setting it to green is really a thing we're doing when we're picking the door. And here we are revealing one of the other doors that has a goat, creating the buttons. And the button's event will be the switch function. I'm going to make the door that was revealed also a global variable. So if the player switches, I need to reassign picked door to the door that wasn't picked and wasn't revealed. So by switching, the new pick is the door that hasn't been picked or revealed, and that is now the picked door. And then, we have to check, did I win? We'll call a function called, check win. And the players stay means, actually, you don't switch, so just go right to this check win function. And let's also reveal all the prizes. Here we go. I'm going to pick door number 1. Uhoh, I got an error. Door reveal not being defined. Oh, I don't remember when I made this mistake, but I called it revealed door and then said, door reveal. So the revealed door is the one that I want to put the new content in. OK, here we go. I'm going to pick this door. Oh, what's going on? Oh, revealdoor.prize. OK, finally, I'm going to get it. I'm going to pick this door. It's showing me the goat. So I could switch, or I could stay. Let's try switching. And I won. So this I think I should this should be a different color. I'm going to make this blue just to show that I've selected and green meaning I won. Pick this door. I'm going to switch. And I won. And let's get rid of the blue after I switch. I think I have everything now. I'm going to pick a door. I'm going to switch, and I lost. I'm going to play again. I'm going to pick a door. I'm going to switch, and I won. It's working. Could use a lot of improvement. Let's clean up just a few things. One is, I have this wonderful state variable that I never bothered to change. So the moment I pick the door, I should change the state. And I made it a const for some reason, which it shouldn't be. So I'm changing the state to reveal. The reason why this is important is that picking event should only happen if the state is pick. So now, if I were to click again in the middle of the game, it wouldn't change anything that's happening. This code would not execute. I am probably overusing global variables here. But it would be helpful to actually have these buttons be global variables that I could just show or hide as needed. So I'm actually going to take these and put them in Setup, hide them, and then just show them when it's time to prompt the user. Then, after the player has either chosen to switch or stay, I can hide those buttons again. Pick a door, switch, and I won. Let's add some CSS for the you win message. And let's create a Play Again button. Now, of course, a lot of these DOM elements don't need to be generated with P5 functions. In a properlydesigned page, you might want to do all of this with HTML and CSS. But this is just a quick way that I'm doing it to get this going. That said, to finish off this play again button, I need to write the start over function. What do we do to start over? Well, we need to pick a new prize, again. Start them all off as goats. Pick a random one to be the winner. Now that I've done this, I actually don't need to do this here in Setup anymore. I can just say, start over. I should also make sure I clear any background color or text that was in the Div and hide the Play Again button. All right, let's see if this works. I'm going to pick door number 1. I'm going to switch. Whoops, I think I forgot to show the Play Again button. playAgain.show. show One more time. Let's pick door number 3, and let's switch. I won. Let's play again. Still says, you win there. I need a permanent place for the win or lose message. Call that outcomeP for outcome paragraph. Definitely need to clear it when we start over in Setup. You need to create it. And then, the message instead of creating a new paragraph, we just put it in the existing one. All right, ready for this? All right, I'm going to pick door number 2. I never seem to pick door number 2 to start. The goat is revealed as door number 3. Should I switch? Should I say? I'm going to switch. Whoops, what just happened there? Nice little typo there. I would have lost, so good thing I got that error. I'm going to pick door number 2. The goat is revealed as door number 1. I'm going to switch, and I won. Let's play again, I'm going to pick door number 3. No, it's not working. Oh, I've got to set the state back to pick. So ultimately, I don't know if I really needed this state variable. Or I'm certainly not using it very effectively because I only have it as pick or not pick, essentially. But I'll let you figure out how to improve that in your own version of this. But when I start over, I definitely need to set the state back to pick. Here we go. I'm going to pick door number 2. I'm going to switch. I'm going to play again. I'm going to pick door number 1. I'm going to switch. I'm going to play again and pick the number 3. I'm going to switch. I'm going to play again door 1 and switch. I'm just winning over and over again. I am so good at this game. I'm ready to wrap this up. I mean, what I really would like to do and I'll create a version of it that just picks automatically and switches automatically, running it hundreds of times per second. And I'm showing that to you right now over here. But what I'm going to do in this video itself is just add some code to track the win rate for switching and the win rate for staying put. And if the math that I demonstrate it at the beginning to video is correct, we should see a win rate of approximately 2 out of 3 times for switching and 1 out of 3 times for staying put. So I need a variable for total plays, total switches. Actually, I don't need the total plays. I need to know, how many times did I switch, and how many times did I stay? So I'll call that total switch plays. Awkward variable names. Then, I need switch wins and stay wins. Every time the player switches, I need to increase the number of switch plays. Every time the player stays ah, but I don't have a function for staying. So let me actually go and put that in. So instead of when you stay going directly to check win, let's write a player stay function. And the only thing that happens in that function is we increase the number of total stay plays and then go to check wins. Oh, but when I checked the win, how do I know whether I switched or not? And this is a typo here. All right, again, so much to refactor later. But let's introduce another variable. Oh, no, no. I don't need another variable. I know exactly what to do. The check win function can receive an argument. Did the player switch or not? So when the player stays, we can say, check win false. When the player switches, we can say, check when true. If the player switch maybe should be player switched. If the player switched, total switch wins plus, plus. Otherwise, total stay wins plus, plus. And then, if the player loses I'm not keeping track of the number of losses. By definition, that's the difference between the total plays and the number of wins. So I think I'm good. I just need to put the stats on the page itself. So another paragraph element. Call it results. And here, let's show the win rates. The switch rate is the total switch wins divided by the total switch plays. The stay rate is the total stay wins divided by the total stay plays. Then, I can use a nice template literal to display a nicelyformatted message with the data that is in those variables. And for the win rates. I want those to appear as percentages, so I'll multiply them by 100. And then, I can use the P5 number format function to only show it to two decimal places. All right, I think we might be finished with this. Let's see if I have any errors. I'm going to pick door number 1. I'm going to switch. And the total switches is 1. The switch oh. I forgot that this is HTML. So even though I put these nice line breaks in here, that means absolutely nothing. I need to put actual line breaks. Let's give myself more space to see the canvas, and here we go. I'm going to just play this a lot of times now. [MUSIC PLAYING] After playing 44 times, I switched 22 times. I stayed 22 times. You can see my switch win rate is about 68% and my stay win rate is about 41%. So obviously, I've gotten extra lucky on both quite a bit luckier for staying. That should really be at 1/3. 68% is quite close to 2/3. But the math that we started with is what we're seeing play out here in playing the game over and over again. This would also be, by the way, a really great opportunity to use local storage. So if I stop the sketch and start it up again, I would then see all of the plays that I did before. I did happen to just make a whole tutorial about local storage, so if you want to go watch that then come back to this, I'll leave it as an exercise to the viewer. And I will add an extra code example for this video with local storage implemented. Also, if I haven't actually played a game, I get a divide by zero error. That's probably something that I should address. But as long as I play one switch and one stay, the error will go away. Before I leave you, let me attempt to tie everything I've done to Bayes' theorem. This is the famous Bayes' probability theorem. Let me first address what is meant by the notation here. So if we say something like P of a, this is the probability of the event, a, occurring. So if I'm flipping a coin and the event a, is it landing on heads? The probability of a is 50% 1 out of 2 times. This notation here, P, A line B this is known as conditional probability, meaning, there are two events, A and B. What's the probability of A occurring given B occurring. Bayesian inference is the idea of determining what is the probability of one of the events occurring given prior knowledge of a previous event. Now, I'd like to try to tie this formula to the Monte Hall problem, itself. Let's create the three doors and actually label them A, B, and C. So I'm going to start by picking door C. Monty Hall is going to reveal door B. What is the probability, then, that I win if I switch to A? Given the event that Monty Hall reveals door B, what is the probability that A is the winner? That is what this part of the formula is describing. Now, we just need to figure out each of these three components. Well, let's start with the easiest one first. The prior probability just given nothing, no information whatsoever that the winner, the prize is under door A is 1 out of 3. P of B B is the event that Monte hall reveals door B. What is the probability that Monte hall will reveal door B if the prize is under A? Well, that's 100% 100%. Because if I picked C and the prize is under A, Monty Hall has to show door B. So that's 100%, or 1. Now, we've got a slightly trickier one. Given no information, what's the probability that Monte Hall reveals door B? So I picked C, but I don't know the prize is not necessarily under A. We don't have that prior information. So the probability that Monte Hall reveals door B in this case is just a flip of a coin 50%. Maybe it's going to be A, maybe it's going to be B. We don't have any information to tell us one or the other. So now, 1 times 1/3 divided by 1/2 guess what that is 2/3. The probability if I started with C that A is the winner, given Monty Hall revealing B, is 2 out of 3. And there's a lot more to be said about this kind of probability analysis. I will include some excellent references to Bayes' theorem and the Monty Hall problem in the video's description, if you want to take a look at those. One thing that I really missed that would be fun to try is, could you make the number of doors a variable? So suddenly, you have a version of this with 10 doors or 100 doors. And how many doors are revealed? Oh, so many possibilities. Board the train, make your own creative twist on this, share it with me, and I will see you next time. Goodbye. [TRAIN WHISTLE] [MUSIC PLAYING]