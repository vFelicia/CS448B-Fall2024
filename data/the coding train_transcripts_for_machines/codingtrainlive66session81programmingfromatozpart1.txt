did you think that learning coding would be really rough throw your hands up in the air and say enough enough do you want to learn to code and make some awesome stuff learn that anyone can when you're with whether you're a pro or this is all brand new learn the overarching concepts and some fun stuff too and with Dan is your guide come along for the ride on make a crazy pixel mirror to reflect your face you can make it jump to light speed into outer space you can generate a maze that can go on for days you can make your own terrain and some purple rain you can make a retro game to see how it's done and then tweak a piece to make it yours for everyone make some fract trees or Twitter Bots if you please and when the Cesar are you can make them your own ride the colors of code you can follow the road to hello ah okay hello I think I'm broadcasting live I had the microphone muted which I often do while I'm getting set up to not record myself by accident um but I would like to hear from the chat I know I've been sort of on a big delay today so I would like to hear in the chat um if uh so I don't know how many people are there because I'm kind of much later than I said I would originally be but um if the sound is working if you can hear me and see me okay otherwise I'm going to kind of get started rather quickly I'm going to try to forego all of my introductory stuff Beyond two or three sentences so please if you are actually watching this live and you can hear me and there's no static and the sound seems fine please let me know in the chat I don't see a single message in the chat so I'm just going to keep going um my name is Dan schiffman this is a live stream that I do every week typically Tuesday afternoons um about creative coding and creative coding is kind of a broad term but um to uh think about creative ways to I'm still looking in the chat I don't see a message I feel like I'm just here by myself and there's no one out there in the world I'm going to see if there's anyone it does say 73 people are watching which is kind of unbelievable um okay I'm still keeping an eye on the chat so uh I do a lot of different topics um from animation and physics simulation um but this fall I have been going through a series of uh video tutorials all about programming with text generating text analyzing text that type of thing if you would like um to know more or um I just want to point you out to uh a couple resources uh coding rainbow you can subscribe um there is also uh I have a patreon running which is a way that you can fund what I'm doing and and and get membership into a slack channel for more discussion and I do send out email announcements when I'm doing the live streams here as well so I encourage you to sign up for any of those things I still don't see a single message in the chat which is kind of disturbing me I'm GNA I'm going to have to tweet um because I'm going maybe I'm going to reload my preview here because I just want to make sure this is working and I'm not talking to no one in thin air so I'm going to it let's say 100 people are watching I'm going to refresh my dashboard um and see if anyone comes ah now I see oh now I see all sorts of messages so somehow the chat had gotten um somehow the chat had gotten stuck okay so now I see there are a ton of messages so much for my awkward opening all right so what am I going to do today so um topicwise um topicwise I am here and it says um week nine here on this syllabus but really I'm on session eight and so the topic for today is how to build your own API in node so if you uh have been following this course over however many weeks I've been doing it I spent a week looking at working with data and apis so uh for example how to grab uh dictionary information from an API called wordnik how to get news articles from an API called New York Times API called New York Times there's so but what if you have data and you want to expose that data to other people or what if you want to collect data and then uh make that data open so there are a variety of okay possibilities hold on a second I'm gonna have to uh please um if you can um um if you can try not to uh post the same message over and over and over again um uh Abby is asking if I can go over modularity which I don't know what that means specifically but um chat wise I don't I can't watch I can't catch every message in the chat but I do look at it periodically and um I will try to answer them as I go mikolai asks what about the new channel name I don't have a new channel name yet I have to admit that things are just incredibly busy these days with the NYU semester and I hope to I'm I've been uh talking to some designers and and coming up with different ideas and brainstorming things and I hope to have something by the end of the year it's my goal in kind of relaunch in 2017 with a new name yes if it's Hearts In Rainbows that you can spam uh and and can you explain a rest API that is what I hope to do today now unfortunately it's about 310 I only have till 430 p.m. it's eastern time so I have about an hour and 20 minutes and I have this absurd list of topics so I'm making a commitment to at some point making videos around all these things on this list but today I'll be happy if I can talk about the basics of using something called Express in node and um as well as uh what a rest API is and how to set up a route to return information to somebody who's querying that API and then I would like to see if I can make a sentiment analysis API example that's going to be difficult but that I'm so I'm just going to going to get started um this is what we're going to do today and then you know at some point I and next week by the way I hope to be back to talk about Chrome extensions and at some point I am going to um I you know I'm planning to get to everything on this list in terms of videos one thing that's been I've been making examples of recently is how to use Firebase which is a database as service so I want to talk about that point these Emoji hearts in the uh chat are just the most wonderful things I've ever seen they make me so happy okay uh let's put on some music as always I always forget the this dot this dot this dot this do I'm do this looking here this this this this going to do this this do going to do okay so um I'm gonna get started with the first video which typically what I do so if you haven't watched these before what I do is I um I do a session which is a longer session which has all of my fumbling around and trying to answer questions in the chat and then uh the wonderful MAA takes this longer session which today will be only an hour and 20 minutes um and edits it into shorter tutorial videos so cuts out some of my like longer debugging problems and also it's helpful I think people find having the shorter video chunks more searchable and E easily findable on YouTube okay the hearts are wonderful actually I actually just enjoying them I was going to tell you to stop but I don't know I'm kind of just enjoying them anyway um okay so the first thing that I do usually is um since this is part I'm a little bit confused about this actually and I don't know if beta is there in the chat but um this is session nine of eight of programming from A to Z but um in a way this can operate as its own set of Standalone tutorial its own Standalone tutorial about making an API with node so I think what I'm going to do is is I'm I'm not sure yet so I'm just going to record these videos and I'll figure out how to organize it later but this first video will be just kind of an introduction to this session and all of the topics in the session and then I want to make sure I have a marker um and then the second video will start with how to make an API in node and that might end up being it sort of own playlist as well about node but we'll figure that out later okay um so thanks for all of you for being here I see so many wonderful messages in the chat supportive messages and I'm going to get started right now I'm a little worried about a light that I have here turn this off for a second yeah so I have to turn this light off unfortunately because um I just turned one of the hallogen lights off I I also just like looked at it and now I can't see anything I'm blinded by it I'm a little bit darker unfortunately right but that there's a problem with this light and it is um it's burning and I don't want it to catch on fire so I'm turning it off we will be in slight Darkness today but I still think I think you guys can see me okay yes um okay so that's just it's that's how it's going to be okay um so let me get started here did I cycle the cameras I can't remember that's too bad I brought an extra light but it's something is wrong it's oh I wonder if there's a way for me to dim it is there a dimmer on it and then it won't overheat but I'm okay I'm just not going to worry about it Safety First every everybody yeah okay it's fine um okay here we go um I here we go okay I still can't see you know when you look to the Sun and you see all the spots I went over to look at the light because it looked like it was smoking a little bit and I'm stared straight into it okay uh here we go hello welcome to session nine oh no no no no session eight let's try that again hello and welcome to session eight of programming from A to Z in this session I want to talk about and look at more deeply how to build an API using node so this whole course has focused on working with text reading text analyzing text generating text and most of the stuff almost everything that I've shown you happens in client side JavaScript so let's talk about a little bit just generally what the difference is so if you have a laptop that you're working on and it has a web browser in it you might be running your p5js sketch right there in the browser itself so this is going to get you very far there is so much you can do with just this as we've seen now you can do word counting and marov chains and all sorts of projects but there are some limitations here so for example let's just go back and think about word counting so one of the things we did is okay so you have some text document and you want to count how many times each word appears in that text document and visualize it in some way with your p5js sketch this will work just fine all client side unless and unless a couple of things one is where is this data coming from if you have a little text file that you can put on your server great but what if this is instead of one text file what if this is 1,000 or 100,000 or 1 million million one I need the the like Austin Powers music one million text files you know it's going to be kind of unreasonable to expect the client side just your P5 just guest in the browser to sit there and churn through millions of text files for 10 minutes a half an hour and then produce the result this is where serers side programming can come in and now the platform that I'm going to use for server side programming is no is no .js of course there are a variety of ways you can approach server side programming so okay so there's a lot of pieces to this so one thing that we've established is if you have a really large data set perhaps server side programming is going to help you here's another thing what if you have users entering in their favorite words and you or they you have your Madlibs application and they're entering words nouns adjectives to generate stories what if you want every time time the user comes back to be able to see what they entered before or what if you want when a user comes comes to the page to be able to see what everybody has entered this is also so large there's some reasons for server side programming is large data set another one is persistence and I don't know how to spell that persistence meaning saving data and there's a variety of ways you can save data but with client side JavaScript only while you can download data to that user's local computer computer there's no way to save data across multiple sessions using a particular web application so this server is a place where if we could send data to the server it could be saved on the server in you know what's known as a database so these are some pieces to why you need server side programming now here's another reason what if you want to expose everything your data or your algorithm or the thing you're working on to to other users as an API this is another reason why you might want server side programming and this is mostly what I'm going to focus on in this particular week eight session or session eight however I'm going to kind of look at all of these pieces by the time I get to the end of it but this idea of maybe you have uh this wonderful spreadsheet of all of this information about flowers and you want to allow other people to make queries go to flower ai.com SL chrysanthemum or flower ai.com sunflower and receive Json back with all this information about flowers this is something you're going to want server side programming for as well and this is going to be the focus here now there was one other thing on my mind and I'm trying to kind of come up with it uh uh API persistent large data set aha I thought of it I'm gonna I'm going to just say scraping but um and and with persistence by the way could be kind of like user accounts and all that sort of stuff but I'm kind of staying away mostly from like traditional web development here and looking at kinds of creative applications of this stuff but I'm saying scraping because one thing you might have noticed is in p5js if you try to the the bane of your existence might be this this is this thing called cores or you might see it as like XML HTTP request error you might have tried to load image from some URL or load strings or load Json you get this error I can't do it security cross origin resources sharing not allowed inaccessible stop stop stop so there's a lot of times where the client side for security very good security reasons is not allowed to reach to another server and request data but your server side program is allowed to do that so your server so for web scraping for example if you want to look at a web page download all its HTML parse it out pull out some things you want you can do that from server side and pass that to to the client side so these are kind of four reasons why you might want to use server side programming number three being make your own API this is where in many ways I want to start okay so what are the pieces of this the first thing that I want so I'm going to make a bunch of videos and they will eventually be here on YouTube for you to watch or I don't know what the platform of the future is when YouTube goes away but hopefully the videos will still exist um number one I'm going to sh talk about um I have a bunch of videos that I will um link to in this playlist of kind of what is node and what is npm for node package manager so you need to install node and get up and running with something called npm first and I already have the videos made for that which I will reference and link to somehow um but here I'm going to start with a node package called Express which makes building a web server which is what you're going to need the score the web server is the thing that's going to pass information to your client your p5js sketch or somebody body else is making an API query so we need to look at Express um I want to look at saving data and I got to have like a secret to tell you which is one of the easiest way I'm sure someone like I'm G to get struck by lightning for doing it this way but to a a really easy way to have a database is just save a Json file save a text file to the to the hard drive of the computer and then load it every time the server runs so I'm going to look at the simplest way you can have a database and then some other more complex ways maybe using a database system like couch DB or mongod DB and then something called Firebase which is a Google product that allows you to just send them information they save it for you and can request it later um I want to look at some point at scraping other web pages so how could you grab an image and then pass that to p5js or an HTML page and pass that to p5js um there's a lot of topics here about making an API there's this thing called rest I don't even know what that is but we'll try to figure it out together there's this thing called cores cross origin resource sharing which I think I do know what it is um and then I want to look at a bunch of different examples mostly around working with text to follow the theme of this course so what if you what if you had the sort of Big Data scenario where you need to load massive amounts of text and you want to pass to a user a word counting inform you want to pass to make an API for word counting information um so that's something that I'll look at as well as some uh I want to build an API for sentiment analysis using this um Ain 111 list of words um and I have a couple of examples that use of of a that use a node package called node natural which is another text analysis uh natural language processing um node package which has a lot of great features and I'll show you a couple of them uh here so I'm going to get started in the first next video you know this isn't the order that I'm going to go in I'm really going to focus on uh working with Express setting up this idea of an API and then see if I can transition that into a simple sentiment analys sentiment analysis API um and we will see see how that goes okay see you next video okay um H why would I want to make an API yay it's Ryan asks a really really good question um why would I want to make an API I I I I I guess I I wanted to address that in this but maybe I will um address that in the next video so I would say why would you I would love to hear from the chat why would you want to make an API let's see if we have some good suggestions from the chat while I get set up here okay okay Max musterman writes basically to allow communication between two parts of a system and that's right um you know there's a I I have sort of two ideas in my head and I I think hopefully it'll become clear um um um as as I start to make this example where are we at 325 I really have so little time I'm just letting you guys know that this is probably going to only be partially completed by the end of today and I apologize for the sort of late shorter um the late shorter uh live stream that I have going okay but I just want to keep on moving here so I have terminal let me get terminal up here's terminal I'm good uh here is I want to get Adam here here's my code I want to make sure I have my notes and I'm going to um keep this page open uh okay uh basically back for making popcorn okay uh good way to share communication easily share your data with your developers these are all great great great suggestions about why you'd want to make an API okay so here we go I am going to for no particular reason cycle these cameras and I think I'm going to do this in multiple parts so this is going to be building your own API in node and I think in this first part I'm going to get as far as having a uh route and then I'm going to do routes with okay so I'm going to do this in multiple Parts okay um here we go okay welcome to a first video in a little series about building an API with noes the question was asked asked in the live chat this is by the way you're probably watching this as a recorded archive but in the live chat why would you want to make an API and so you know I mostly right in the comments I'd love to hear why what your idea for an API and why you would like to make an i API is but there's there's a couple reasons that I think I could kind of start with here number one is you have uh data and you want to allow other people to use that data so this is a way of you kind of making a transaction a sort of handshake and saying like hey there is this means for for you to access this data and I intend for you to be able to do so an API stands for application programming interface it's a way for two it's a way for two different applications to talk to each other so there's the applic we're going to build an application a node application um that has data or something associated with it and it's other PE other applications will be able to talk to it so that's kind of the main reason now there is sort of this scenario which I also am going to show you with you might be making an API for one person in the world one wonderful singular person and who is that person it's you all right so there are lots of projects where you're writing a front end a client side JavaScript thing you're making pretty pictures and drawing text and all sorts of interaction stuff on the page but you need some serers side stuff to connect to download images to run long complicated processes to use other node packages so you might make an API just for your own project itself and actually that's what we might see in some of the examples I have to show you so that's kind of number one you you might just want to you know you you you have something and you want to allow other applications to connect or you might actually want other things being namely yourself okay um so hopefully that made soone sense of why you might make an API but really you know what the answer to that is let's try to make an API talk about it get to the end and um hopefully some creative ideas will emerge in your head as you're watching these videos um okay so first I want to point you to this web page which is part of the course um the things that you will that need before you're watching this video is what is node.js and what is npm so you're going to need to have both of those things downloaded and in this video I'm going to start with adding Express so I want to use this Express package which is a fast unopinionated minimalist web framework for no dutchs so first of all I just love anything that says minimalist because programming gets like really complicated and looking through documentation and apis is like so it's nice that what a lot of the things that I'm that I want to do in this application that I'm going to build is like oh host some files or oh receive a query from a user and no and express is going to have a simple function for each of those as opposed to kind of writing all the code for that in raw node so to speak so the first thing I need to do which is right here is install Express so I just so you know I happen to be uh in a project which is uh right here it's just a folder and it has nothing in it it has uh it all it has so far is a server.js file which is going to be the node program I intend to write but it's empty so let's come let's go over here and I'm going to go to terminal and I am in that directory right now which is Session 8 API 1 and I'm going to install Express I want to make sure that my oh and you know what I didn't do yet I need to have a package.json file so the package.json file for a node project is the kind of configuration file so I'm going to say npm init and yes uh oh this is bad timeout H there something wrong with my node installation uh that really would suck uh let's why did that um I'm just gonna I'm just going to do something uh you're I know this is like the worst thing ever to do what wait what what let me actually look at the error I'm getting uh cannot find module spdx oh did I upgrade not and uh oh dear um this is very sad my node is uh messed up on this computer I wonder if um let me just see if I can power through this for a second and see what's in here yeah that's pretty good now let's see oops no no no don't delete that I want to delete the debug log uh and um um I'm going to just say npm install Express D save okay so I just have something screw with my npm innit so I'm going to double back and just skip that in this video and I'll just have a package.json file uh API test I'm just gonna like pretend I made it by myself Mata this will be a um yeah I need to reinstall node thank you guys Mata this will be a little bit of a challenge for you but um I don't think it'll be too much of a problem I'm going to delete this um so I'm going to go back to where I said I have all I have is server and package.json it's going to have to get edited together somehow I don't remember what I was in but probably I was over here so I'm going to look at my directory where I'm have the project and all I have is uh two things I have server.js file which is actually that's where I'm going to put my JavaScript code which is empty and then I have this package.json file which you can make with npm in it but I already have one there that's your configuration file for the project and there's lots of important details about that if you go to publish your thing as a node package or an open source project but for now we can mostly ignore the contents of package.json um and I'll come back to it maybe another time um so you can see what's in it it's just like a little bit of stuff saying like hey this is the name of my project and this is the version but what I want to do is go and grab this and now install Express with this project so I'm going to say and I'm you can see I'm in that directory and I'm going to say npm install actually I'm just going to paste it in there npm install Express ddave oh I have an error in par so I I I messed up I have an error here I I wrote that package that so by the way if you get if that happens to you let that happen um trailing comma I got an error in my package.json file so that should fix it I'm gonna say clear and try this again Oh yay that looks much better so you can see it should now I should have a a new directory called node modules and you can see oh there's all this stuff installed in there I'm just going to have to trust that Express installed correctly so let's make sure everything's working I'm going to go into my server and I'm just going to say console.log server is starting and I'm going to say node server server is starting great so a node program is just like a program that that's written in JavaScript that just runs on your computer and it runs without Graphics without a window and actually there's a lot of stuff you can do with node I mean you know I should probably really Learn Python one of these days but I use node a lot to do a lot of batch processes on my computer like oh I could just write a little node program to rename a whole directory of files or I can do you know make a request to some other API and download a whole bunch of things so you know node is something that you can just forget about web servers and apis you can just use as a little programming tool to try do a bunch of things for yourself on your computer through code but what I want to do the first thing I want to do is create a web server and by web server I mean something that opens up a port and allows browsers to connect to it and this is very easy with Express now I have most of this documented on this page so I'm kind of going to go and kind of copy paste some of the like pieces of code the first thing I need is uh I need to say VAR Express require Express this is like an import state statement import the package express I want to be able to use express now the funny thing about this is I get requir Express I get this into a variable this whole package is actually a function Express is a reference to a function and I can execute that function and that's what I'm going to do here in this next line of code I'm going to say app equals Express so I execute Express and suddenly I get this web application this is what I mean about how great it is to use express it's doing all this stuff behind the scenes and at the first thing I can do is I say Hey listen for incoming connections so I'm going to say server equals app. listen Port 3000 now there are various default ports that servers will will use but since I'm just doing all of my testing you know this diagram that I have over here of this idea of a server and a client right now all of this is happening on one computer the server on the computer the client is that computer itself and that might actually for a lot of projects be all you need but at some point you also might want to deploy your server somewhere else so that other people could connect to it and I'll have to make some videos about that as well okay so now that I'm listening at Port 3000 um I can do uh I can do a few different things so one thing let's just run this server is starting and you know what would be nice it would be nice to like add a little call back here so I'm just going to write I'm going to add something called function listening and I'm going to say console.log listening so I'm just wrote a little call back so that and and actually there the the reason I'm adding this into the code is there are a lot of things you can do here you can get the host address and the port and various things but most of this stuff is unnecessary for what we want to do but I want at least sort of see this call back that it's working so I'm going to um I'm going to run this again server is starting listening okay here we go now uh so let's go to Local Host 3,000 this is where my server is I'm going to look at the web page I made Oh cannot get anything so there's nothing there but you can see that this is working because at least I got the message I'm listening but I don't have anything to give you right the me the web browser right now made a get request to this to the server and this is kind of an important concept so one of the first things I might do although this is a little bit NE unnecessary for this idea of an API but it's kind of worth exploring right now that we're going through this Express stuff is I can use an aspect of Express to host static files meaning I can make and this this idea of uh this word public in there is something I could make up so I could call this website instead of Public public being a kind of standard thing this is saying use out of the Express package its ability to host static files HTML files image files movie files all that sort of stuff so what I can do now if I go into here right into my project what I want to do is create a folder I'm going to call that folder website which is sort of a silly name and I'm going to put in that folder a file called index.html and then I'm going to say hello so in that file it says hello okay and then I don't know why I'm speaking in that voice uh and then I mean I do know why I am but I don't know why why I am why I am anyway now if I hit refresh now first of all I've got to restart the server so here's the thing there's actually a really nice tool you notice how I have to like stop the server restart it stop the server restart it every single time I change my code there's a nice little node module I'm sure this is um which um called node Monon and node Monon like node monitor I think monitors your code and restarts the server for you every time you change the code now this can be problematic and you don't always want to use it but in this case it would be a lot more convenient and dash g means I want this package this isn't a package associated with this project I want this as just a global tool that I'm use on my computer this probably is going to fail oh but maybe it's not I'm feeling hopeful now that actually this is going to work yeah so I got some error permission denied this is because I when I'm installing a global package it's got to go into like user VAR local bin some secret place on my computer where I need special permission so I'm going to say pseudo for super super super do uh npm install node mg and now I'm going to type in the password here and hopefully this works there that seemed to work or I'm getting some warnings I'm getting some things that look scary oh it's doing more stuff ah I think that worked so I'm now G to say nodon server.js and this is working so you can see that it is the server is starting listening and watch what happens if I go back and I say go to my server and I say um you know I make a just do a character turn and hit save you can see here look how many times it restarted the server so now I can kind of ignore terminal for a little while and just go from uh I can just go from my code to when I make a change refreshing in the browser so look at that by the way I now see the files that are in that directory website so this is this is step one we have now written a web server with like barely any code at all look this is like all the code for the web server and incidentally if you've ever seen me or do something like this like often I'll run a web server on my computer by just saying python DM simple htpp server that's running a web server there are lots of other tools there's um a node HTTP server there are lots of tools that just make a web server that hosts files this is what we have now done um in this exact program so Step One is completed we have written a web server that hosts files in the next video I'm going to add something to this called routes so in addition to hosting files I'm going to allow the user to send information or request information through something called a route a restian route by restian I mean you're going to want to take a rest after watching the video probably okay so I'll see you in the next video thanks for watching this one on setting up a basic web server with Express I'm going to take a look at the chat I'm taking a look at the time um this computer my computer that has the chat died I think the batter I only have one plug so I I I don't know if anybody's telling me anything or if everything has gone completely kaput I'm still smelling a little the smoke from that hin come computer wake up I want to see the chat uh I don't know I was going to put on some music ah the chat's coming back the chat's coming back come on wake up ah uh 1% I see I did run out of the battery life um and now cancel okay um okay um everybody I I I see a bunch of chat messages chat is coming back um okay so is everything working okay you guys can hear me and see me um hopefully everything is good um yeah no I'm using Mac OSX um yes okay all right so uh in the next video I'm going to start talking about routes now let's I gotta figure out what this why it's called rest so let's look a Wikipedia will tell us this is me like I just like oh soap I remember there used to be soap soap is a protocol rest is an architectural style why is it called rest though and why is it restful stands for represent representational State transfer uh I I can't bring myself to read this um but I uh architectural client server stateless oh this is like way too much so I'm going to um uh let's see let's see API apply to web services web service adhere the rest architectural constraints are called restful apis defined with the following aspects they have a base URL an internet media type that defines State transition data elements URL standard HTTP methods all right get put yeah yeah this is this makes sense to me okay okay so there's what what's the chance that I can remember representational state transfer whatever okay so now what we're going to do is I'm here and I am going to start talking about restian restful restful routes and I'm cycling these cameras um I really hope that we can kind of get still got 4 5 minutes today so I think there's a good chance of getting through a decent amount of material but certainly not everything okay here we go I'm ready I'm gonna start in the previous video I made a simple little web server it's like only got this much code in it and all it does is never mind let me start over in the previous video I used node and a node package called Express to make a very simple web server all it does is it spins up a server listening on Port 3000 and if I run it it looks it serves up anything that's in this directory called website okay and in that directory called website is a little index.html file that says this and now I see that in the web page in the web page I don't know if that even makes sense okay so what do I want to add to it the goal of this video series is to make an API now there are a lot of different ways and styles and flavors and designs and kinds of ways you could make an API I'm sure and the kind of API I'm going to show you is a restful API and I like to call it I like the idea of it being restful because I want it to be relaxing and enjoyable a soothing I a soothing API um but rest is like a essentially like a style so to speak of how um it's a broader term it stands for representational straight State transfer it's you can link to the Wikipedia page and you can read all about it but it's really a Style by which users of the API can make get requests and receive information back from the API so and let me try to describe kind of the basics of how it looks and works so I'm going to erase all of my diagrams from some other previous video and let's let's think about what's happening so let's say you have um you're making a API about flowers maybe it's about rainbows make one about rainbows but flowers I'm going to use flowers right now flowers ai.com so HTTP this is your website your web server your domain all that stuff you might go to flowers ai.com and you will see the index.html page that's there that's the web server we've written we've written you might go and say like uh slab and maybe actually you have in your website directory your public directory a folder called about with another index on HTML file and when you go there you see that one so this idea of paths with slashes is something that you typically see to navigate through directories of a website however these slashes and the things in here don't just have to be directories they can actually signify a route so for example what if I went to I'm just going to call it FL flower ai.com search sunflower right what if I went to this and this isn't actually a directories these are these are commands that I am issuing to the API I'm saying search for this particular flower called sunflower and I want to to get back maybe some big Json F all this information about sunflowers so this is an idea of a route um and when you build an API you might build different routes for different kinds of ways of accessing the data you might make a route for getting all the data or for searching for one piece of the data or a route that signifies I want all the data but I want it sorted in this manner or I want all the data but only if the data starts with the letter P for example so there's a lot of ways you can use routes so now here in the code this is not the code I need to start to manage how those routes are handled so right here I'm going to start adding that code so I'm going to add a bunch of carriage returns and right here I'm going to set up a route so please edit that cough out when a user goes to one of these routes or goes to in the browser types in a URL or clicks on a link to a URL they are making something called a get request please may I have something from you server can I get stuff back and you'll get images there's a dog barking images HTML files CSS all that sort of thing so if you want to handle a get request that goes to a specific route I could say app.get um uh get slash um I'm I lost my train of thought um let's just we're thinking about flowers right uh flower and then I need a call back um send flour send flour all functions should be called send flour send flowers okay so I'm going to write send flow so the idea here is I'm now writing the code if any user of this API user meaning a a not necessarily a person but a web browser some client that's going to connect to it goes to slfl then this function sflow should be executed that's the call back now the sflow has two arguments associated with it a request and a response every web transaction so to speak when I go and type you know google.com or rainbow somethings something.com I'm making a request to the server so all the information about me is in that variable called request the server then sends back a response all the information about the server's response is in that variable response and I'm using this idea of all the information very Loosely information data you know in request you could find like what was the operating system what was the browser what are the headers you know there you're going to see like were there any parameters sent also the response has things like ah I can send back some data so what I'm going to do is I'm going to now say right here response send I love flowers to so if the user goes to slfl rather than look for a directory of HTML CSS JavaScript files along that path this is a route that I'm going to handle programmatically and I'm going to say I love flowers too so let's uh hit refresh the server is still running I am now up here going to change this to say go to the route slfl and I see I love flowers too now there's no HTML page there's nothing there's just code and the response sent back the response okay so this is part one but remember this idea of like searching right the idea of using an API to search what I want to do is have a well there's a lot of things I can do but something at least to get started with is what if I were to search at a second uh a second tok a second I don't know what to call it a second element um to this route searchs sunflower but rather than oh I'm come back over here rather than say slash um search SLS sunflower what I actually want to handle is not the specific route I want if they go to search I then want the second element to be a variable so to speak something that changes every time so here I'm going to say colon flour so that indic Ates that this search that that search is the route followed by something that the user enters and that will be here found in the request so in other words I'm now going to go to uh searchs sunflower and you're going to see it still says I love flowers too that's what I'm sending back but now I can do something more I can say there's some data associated with this request something came in Beyond just search some type of flower I can say uh request. params there are parameters flower is a parameter and now I can say here send the response back I love data do uh data. flower to so I'm kind of I don't like this amount of space that I have here I'm going to fix this and make this a little smaller ah no no way too small maybe this will get edited for flow okay so here you can see that in I in the response I'm actually going to send back something that was sent now what I'm doing here has no there's no point to it I'm just showing you the pieces of how things work so we can get to the place where it has a point so let's see now if this works if I refresh here I love sunflower too and I can can put daisy I love Daisy too and I can put rainbow doesn't have to be a flower and I can put so in other words there's a round trip happening I'm making a get request with this route search SLS something the server gets that something as a parameter part of the request and looks at it puts it in this variable data then pulls out flow there so there could be a lot of parameters so I can add another one I could say slash num and then I can say VAR num equals data. num and I can then have a I was going to do a for Loop or something and have it say I love data. flower so many times let's just do that that's sort of silly but why not uh so I can say uh response equals this and then for VAR I equals z i is less than num uh i++ uh respon I can't call this response uh reply reply I'll call it reply plus equal this and then I'm going to send back that reply right so I've added a little logic So based on whatever number I get in I do that a bunch of times and now we can see I'm getting both a flower and a number and if I go search Rainbow 5 I get it if I do it slash 50 I get it 50 times right so the reply is now based on what has been sent into the server so this is the basic idea of how a route Works um with a get request now of course there's something later you're going to see there's also a post request I can say app.st and we're going to need that for this example that I hope to ultimately build but in the next example what I want to what the next video what I going to do is add a little bit of persistence to this so what I want to do is allow the create a set of routes where the user can retrieve data and then contribute to that data as well uh as well so we'll see that in the next video okay all of a sudden I have my cof is back it is five of four it's very hot in this room again I think the heat is on and then I have these Hot Lights um is this making sense everybody I don't know I'm kind of making these like really really short yeah I this like cold that I've had has just been lasting La lasting forever um okay um so what I want to do next is um I'm going to create a um okay good um I'm trying to think of what I mean I was going towards doing sentiment analysis so I think uh um sorry was I hope the cough didn't blow out your ears um search is sort of silly search is is meaningless it's something that I made up so I'm going to um change this I'm going to go towards the sentiment analysis example that I'm ultimately going to make although I was kind of going to do that all from scratch um but um can we have op yeah you can have optional variables absolutely so let me um let me add uh let me add some stuff to this and I think I will go towards the sentiment analysis example okay use Baker cat as an example I don't know what that is but I appreciate the how to manage a slash inside the search query yeah alesandro that's a good question there are ways of um URL encoding um various kinds of characters that cause a problem um so I would I I would have to look at that that specifically but of course there's always a way around it um optional variables in the middle of a URL is hard yes definitely hard it's at the end that kind of works best okay so I'm going to try to get one step further here with this at least if not two um and that's all I'm going to be able to do today um okay so um and what I want to do is um just add this oh really I guess it's uh is it rendering it as HTML yeah um and I wanted to actually have it be this okay um okay so I looking at my phone which is no reason okay so I got to get to the next stage the next stage of of this is I want to take input from a user and essentially save it to a database which is GNA I'm going to do in two stages um and then I also want to look at how to send that information back okay okay uh where am I here I will start here okay sorry why live I've got lots of uh this has the default YouTube Clean language settings I think you'll come I think it'll let you back in y live a if anybody knows how to let y live a back in okay here we go in the in the previous video I got as far as defining a route with parameters the route is search slash some keyword slash some number and the response from the server that comes back is always I love whatever word however many times the number is so if I were to change this to unicorn and a unicorn and put it just with Slash three I would see I love unicorns 2 three times so this is well fun and I like to see how much you love unicorns and rainbows do you love them as much as me I don't know probably not which is a very healthy probably much healthier than however I am but the point of what I'm saying is this is kind of useless let's turn turn this into something useful and so the example that I'm ultimately building here is a sentiment analysis API and so one approach to sentiment analysis is to keep a dictionary of words that either have a positive or negative uh score associated with them so I'm going to go to the code and I'm just going to right here at the top I'm going to create a variable and I'm going to call it uh words and I'm going to put some words in it with a score so I'm going to say rainbow has a score of uh five and unicorn has a score of three what are some sad words Doom has a score of negative3 okay so this is my very basic sentiment analysis dictionary I've got three words in it and what their score is so first thing that I want to do in making a sentiment analysis AP is Expos this data so I'm going to actually add another route here I'm going to say app.get all uh send all and then I'm going to say function send all and this is the call back which has a request and a response and all I'm going to do is say response. send words now notice what I did up here in this reply I just created this string and this string just kind of like spit itself out into the browser but somebody using the API is probably going to want to get the reply back formatted as Json so I better do something to format this as Json well what is words it's a JavaScript object what is jav what is Json JavaScript object notation so one of the magical things about using Express is Express will automatically format your JavaScript object that you send out into the world as Json so this is actually done so I can now go to slash all and I can see this is now me making an API request to my API and I'm getting the list of words and if I add another word to it like Gloom Doom and Gloom uh now I have another uh word there with a score of negative 2 I hit refresh I see that as well so what I want to do in addition to having this be an API so there's a couple things I could do one is that I might want to search for a particular word to see if it's in the API if it is get the score or I might also want to be able to as a user add words to the API so that that you know this is a sort of design decision you know what are you what are you doing here I'm just making a demonstration I think it would be useful to see how can you create a route where a user can insert data into the database and by the way that's my database right now so I as I go through these videos I'm going to get into per IST working with databases and there are various levels of that you know on the one hand this will persist it will never go away it's written there into the code my database is hardcoded not the best solution but it's a good starting point so I'm going to change this particular route and I'm going to change it to add word score add word so I want a route where if the user adds a word with a score It Go goes into the database so I'm going to change this to add word here are the parameters the word is Da uh data. word the uh score is and this is I'm kind of being very longwinded about this I can just say word equals request. pam. word but uh data. score and then what I want to do is say words word equals score look at this this is me taking in the data from the user the word in the score and putting it into that object right putting it into that object the with a key value pair the word is the key the score is the value and then I need to create a reply and all of my replies I want them to be written as an object so I'm going to say message thank you for your word okay so there we go so now if I run this and I go here to all we can see all of the data is there now I'm going to go to one more window and I'm going to go to add uh purple five purple is a very happy word I'm going to hit enter it's going to say message thank you for your word so I got that message back and if I go to all we can see purple oh and look at that it got the uh you know of course the way that it's working is um it came in as a string not a number so I I could correct that if I want let's correct that um so I could say let's make sure that is actually a number because I might want to do some mathematical operations with it later so let's convert that to a number and I'm going to add the word again hit refresh and now you can see I got purple five so there we go I have saved this word forever more in the API now let let's there's a couple things I want to add to this number one is what if I just go to add purple and I forget to add a number I run this it says it cannot get that um time out okay I have to look up in my example I thought it was gonna get this but give me an error on the server side like um like if the last one can be optional I did this I thought in one of my premade examples so I'm paused now I'm going to uh go look at my premade examples uh oops not here um uh where did I do this simple API Express probably here did I do it here oh no no this is not what I did uh I thought there was a way to determine to make it optional somebody in the um somebody in the uh chat might tell me before I figure it out oh no look at routes rest can I do that in here yeah do think so the last one should be optional that's the way I did it if it doesn't exist then just set it to one how come that didn't work for me um uh right can I just do this didn't get a zero all right I guess I'm not going to add this feature to this program right now and I'll come back to it later hold on let's see console do did I did I add an extra I thought I mean I know I could just do a route without it uh nobody in the chat knows this uh hold on let's let's see here uh console.log m i here uh so if I go to uh here and what if I do a slash no I guess I could do it uh whoops I don't want to get to stuck on this uh add I mean I can do something where if I do this right yeah I don't know am I here no okay um and not you destroy if there is any uh try yeah I know this do you add a question mark for an optional one I'm going to just not worry about the optional thing because it's not that fundamental to this I can bring that back later I just was going to do it because it seemed like an obvious thing to look at right now um mostly because I'm in a tri Crunch and I have to leave in like 15 uh minutes and I want to get this thing finished so I am going to go back and not worry about that I'm trying to think where I left off before I tried doing that uh I want to get to the um so there's the um there's the optional thing that I did um I'm I'm losing my train of thought um oh it's in a question mark for an optional optional param Express uh yeah I'm curious here um I don't want to get too lost with this key uh uh oh question mark So does that make it optional here question mark yeah after the parameter name okay all right um so I think if I add this now and I take this out y and then right just giving me no okay great sorry about that okay so um wherever that was I will be coming back to that now so whatever I wherever I was I was here and I was saying okay this is where I was it cannot add this because it's looking for this particular route and the route requires also a score however there is a way to make that score optional which could be useful for something you might do which is adding just a question mark to and this really only works for the last one although I'm sure there's some fancy ways around that and then what I could do is I could say if not score you know score equals five or I could say um I could actually say score is required so let's say score is required just to like I could add some error handling here like I could say VAR reply score is required else all of this so I'm basically saying whatever word comes in if I get a score so if not score and also I should probably check and I'm not going to do all this but you know if I want to be really serious about this I would also check like to make sure score is a number and if it's if you sent me the score as like friendship I would say the score has to be a number but here I can just create this variable VAR reply I can fill it if there is no score I can say score is required if there is a score I can add it to the table and say thank you for your word and then send the response so this is one extra thing that I'm adding to this and if I now run this it's going to say hey score is required so I can say now five thank you for your word and we can go back here and we can see purple is there with a score of five so there are a lot of ways to sort of check and see what how PE what what what's coming in and determine whether something is there or not okay so let's add one more thing to this um let's add a search route so that if the user of this API wants to query for a particular word and get the score back let's see how that would work so I'm going to add another route and I'm going to call it I'm just going to go down here to the bottom I'm going to call it a search for a word and I'm going to say search uh search word I'm going to add that fun a call back now search word with a request and a response and I'm going to say the word you're searching for is request pams word and now what I want to do is see does that word exist if if that word is part of our words table I need to make a reply I'm going to send back a message uh you know I'm G to say status found you know word word that's kind of probably a it's a little awkward what I'm doing I'm just going to call this yeah it's fine um it's a little awkward what I'm doing with these variable names and then score I'm going to say words word so what I'm doing here is I'm saying uh if it's found then the reply sorry equals this particular object so if it's found the status is found here's the word here's the score otherwise the reply is status not found and then there is no I can send back the word word there is no score and I can say uh response do Send reply so the idea here is that you know I'm just showing you an example now I'm making a route for the API where a user could say hey do you have this word rainbow in your database if you do could you give me a score if you don't will you tell me that you don't have it um so this is jet another thing search word check to see what word did the user set in is it part of the data if it is say it's found and this is often a good technique let me give you back the data you asked for because a user of this API might be querying like a thousand different words and all the all the responses are coming back and if the data that came with the request also comes back with response it's going to make it easier for the user to manage so now let's run this and I can see here uh I'm going to go now to search SL rainbow we can see status found the word is Rainbow the score is five search unicorn status found word unicorn score 3 search kitten status not found word kitten so this is how I am now making an API that allows a user to query the database so we have the ability and then by the way now I can say add kitten five and then I can say say search kitten and now it's found with a score of five so notice how I'm only interacting with this API via the URL address bar and ultimately as I get through more videos here I'm going to look at how do I actually interact with it from my client side JavaScript code which will really open up a lot of possibilities so I now have an API which has three features I can look at all the words that are in the database and their score I can add a word uh like uh purple didn't I already add purple so we're gonna have to talk about that and oh purple's positive give it three so I can add a word and I can also search and see if a word is in there purple is in there but perhaps pink is not so this is a good start I have this idea of persistence there's a database of information users can add to that database users users can request all of the data from the database or they can request one item from the database but you'll notice here I have this wonderful thing where I have I added kitten in purple so now what I'm going to do is I'm going to quit the server and I'm going to restart it and I don't have kitten in purple anymore so while there is persistence across do you hear the puppies barking about my wonderful API discussion um while there is this idea of persistence while the server is running as soon as I quit the server and restart the server I've lost any new data that wasn't just part of what was originally written in here so in the next video what I'm going to show you is how to keep persistence across and multiple times running the server how do I take what's here and actually not have it be hardcoded but save it to a database okay and I'll see you in the next video or I'll do that okay you guys can hear the dog barking okay that's going to be wonderful that's always hear okay it's 418 um I I I unfortunately I'm just going to check to make sure there was no change in my schedule uh oh okay oh I have to check I have to live check to see if I won the Hamilton Lottery that's really going to change my day Hamilton New York Lottery results unfortunately you were not selected reer tickets to the November 1st 7 PM performance of Hamilton okay that's good to know um so because I have to leave in about 10 minutes I would like to keep going through this but I also just don't want to rush it I feel like this is a good meaty uh vegetarian tofu topic um and let's let me go back to my list and sort of think about how far we really got which is which I have to admit is not very far um and uh where is where was my um main I'm go back to here um this is U so I was able to get really through the things that I would check off here if I were checking things off would be using Express and serving files um having a uh a query string uh actually I didn't use do the query string looking at a restful routes restian routes didn't really talk about cores which is something I'm going to have to and sending back Json I wish I wish there was a um a way I could annotate this um so when I come back for another live stream which gosh I really wish it could happen this week but it won't because there's maybe it could happen over the weekend I'm not sure um um you know in terms of the um the time I have and just this the amount of the the availability of this space um but I will continue this I want to get all the way through building out this API and saving the data to a database and then actually starting to use it to do symptomate analysis and then loading a preexisting list of words and their scores so um um so um I'm actually not vegetarian but I in spirit I feel like a a um you know we should I anyway I don't I don't have I don't know what I'm discussing here I've lost my lost my mind yes sorry um some is asking very an important question that this would this would actually look like this if you were coding along with me um and that I actually am using a Chrome extension that formats the Json that you get back kind of nicely which is just very convenient to use um so um um so anyway I have 10 minutes I would like to take some questions from the chat about anything really I can do that for about five or 10 minutes and then I'm going to have to say goodbye apologize for for the short session today um and we'll be back next Tuesday okay um shiffman do you know something about goang no I don't um but that's an interesting idea for me to investigate shiffman why not use a my SQL server for this so this is the discussion I want to have when I get to this idea of persistence so there are a lot of ways that you can store your data and probably the most sophisticated robust scalable way is to use a database a mySQL database a SQL database that's kind of the same thing mongod DB couch DB there are a lot of systems for doing that I'm here teaching about kind of creative projects and rapid prototyping for a lot of things where you're just sort of stitching stuff together and making an example learning a whole database system could be kind of Overkill when you could just save the data to a Json file so I'm kind of going to that's where the next step that I'm going to take which is actually quite easy and works quite well of course of course if there's scalability concerns massive data lots of relational data if there's um you know privacy and security issues you know you're going to need something more than just a Json file but that's actually going to be pretty powerful to use I also want to show you um and I do have all these examples already I just haven't um gotten a chance to go over it but I'm going to show you something called Firebase which is a database as service essentially where you can just sign up for an account and uh you know I've been able to do everything for free so far at least with my examples and sort of send the data to Firebase Firebase will save it for you and you can always request it back and actually you don't even need node to use Firebase you can do everything from the client side which is quite nice um okay um Mac brick asks shiffman how long have you coded um I think I probably started programming really in 2001 so that would be I don't know you do the math um but it was sort of late late late later in life than uh a lot of people I mean there's no time where you can't start coding but I was in my later 20s around then I think if that's right um I did a little bit of programming in Middle School uh using the basic programming language and also Assembly Language and I maybe took like one course on like C++ like when I was in college but I never really started programming till about 2001 uh okay um trying to think if there are other important announcements let me look at I'm kind of nearing the end so to speak of this course um so I want there's a lot more that I want to look at building apis and using these node packages uh for doing some other text classification text generation analysis stuff I want to do a whole session on Chrome extensions that's probably might take a twoe period as well this is taking two weeks um and then you know there's this time in my actual course at ITP at NYU where students are over four weeks are working on Final projects so um any of you who are interested in kind of of thinking about watching these videos and as if you're taking a course you could just do that and share with me on Twitter or in the comments any projects you make but I will say you can also uh subscribe to my patreon um and patreon.com coding rainbow and um there if you join that there's a slack Channel where you know it's kind of trailed off I think people are busy but I'm hoping that we can kind of revive it a little bit where people are discussing assignments and asking questions and that sort of thing ah um so oh yeah using a Excel for a database or a spreadsheet for a database is um quite useful and in fact I over that I would say and I have an example that I made previously of just using a Google sheet so you can actually and there is something called shetu uh shetu Doom I believe this is a commercial service I think you can use it for free but turns a Google spreadsheet into a rest API hey maybe you know what a rest API is now spreadsheet as database so this is something I should add to my list to maybe do a video about in particular um a lot of I've gotten a lot of requests for more kind of like classic arcade game coding challenges and I think what I might do is when I have time towards the end of the NYU semester where I'm not where I'm done with these topics I might just do a couple weeks where I just do those arcade game coding challenges because I find them to be a lot of fun and you know to be honest the snake one that I made which isn't really even that good as like hundred times more views than any of my other videos um what do you think about making a project in the type of a big collaboration of the whole Community I would be thrilled for something like that um uh I would be glad to support that and I would hope that that Community would include people from all sorts of backgrounds um and genders and ethnicities it would be terrific if we could make a community project like that um joining the patreon the slack channel would be a good place to start with a smaller Community there are other more open uh slack channels I believe there's a creative coding one um and um but certainly um uh you know send me a tweet I'll retweet it if you want people to get in touch with you about a project um um uh John is asking something about install no Damon I don't know what that is um oh and um but I'm using something called nodemon which you don't you can just use npm installed nodemon um are we called creative coding now it's well I don't have a short answer to that question and I only I have four minutes before I said I was going to go um will I do more generative art stuff yes so by the way this spring I'm going to at NYU be teaching a couple courses based on my nature of code materials which have generative algorithms physics simulation back to sort of graphic stuff and so I expect that once I get back up and running with videos in 2017 after this fall and winter finishes you'll see a lot more graphics and generative algorithm stuff on the um Channel um yeah creative coding is a strange term I you know I personally kind kind of like it to uh signify that the idea here is that we're doing that this isn't computer that this is different than computer science in the sense that computer science really about systems thinking and algorithms and this is really about um kind of playful experiments and applications um and I think of it similarly to um you know there's a little bit of a problem which make is it is it implying that other coding is not creative which I would say is absolutely not true I mean all coding is creative but you know there's a certain distinction that is similar to if you say creative writing you kind of get a sense of like oh maybe you're writing poems or novels or fiction which is different than maybe writing for journalism but writing for journalism is a creative as well but it just kind of codifies at least gives some context to what what the what the context is and so I I like to use creative coding as a term um yeah what did I miss um okay so um thank you everyone for tuning in again I apologize um that this was kind of a shorter session today I can see that it was an hour and 23 minutes long I did have a live stream once that was four hours long um I will be back next week next Tuesday um if I can squeeze a time in before then I would absolutely love to um I'm trying to figure out ways to have more time to do this because it's I quite enjoy it um but it does take a lot of time and energy and certainly having the support emotion uh the friendly feedback the constructive feedback the critical feedback is always helpful and appreciated um please uh if you feel so inclined and there's nowhere it's like I feel like if there was a place to write a review you know honest reviews only I would tell you to but I don't think you can write reviews of YouTube channels but you know share if you if you have a chance to share if you if you like what I'm doing or um hit the like button that kind of thing it certainly uh helps um other people find the channel which makes it easier for me to do this stuff with more things yeah oh by the way way next Tuesday oh my is election day and I'm about to have I'm me seriously where's my antianxiety medication um oh the camera went off that's good so I think I will be um broadcasting live on election day uh I don't think I'm going to do any sort of election themed content it is by the way um I forgot to mention that it is nano genmo which I think that I say that right um which is generate a novel month so all the stuff that I'm doing I I I maybe I should give that as a a challenge uh my t is at shiffman maybe I'll think of something election related but I think I'll probably just continue with this API thing and you know we'll see how it goes so thank you guys for tuning in I'm sorry to again today was a little bit shorter I would love to have a conference oh let me just plug something uh for no apparent reason but someone mentioned conference there is a conference coming up called codeland uh which is uh the code newbies conference maybe it is not uh maybe there is not a website for it yet but I'm I'm going to look here on Twitter um um so this is uh April 21st and 22nd 2017 in New York City the reason why I mentioned it is you know I don't want to be so bold but I feel like um uh I I I've gone to some code newbi event I listened to the code newbies podcast um sarin I think I just said her name incorrectly who siron oh my goodness why I'm just like blanking but she the who runs code newbie is absolutely wonderful she's created an amazing community so I feel like if I were to run a conference I would hope that it would have the spirit and community that I expect this conference to have um you can uh and so I would encourage you to think about that I hope to attend although you know I'm not sure 100% but um that would love to see any of you if you're in New York City and meet some of you who are watching um okay I yes it's a bit too far away hopefully there'll be some conferences in other parts of the world that we can meet or have a maybe I could do like a I was about to say coding rainbow I could do some sort of World Tour um okay I'm I MA brick says I have a question so I'm waiting for that one question before I go my song ended this is usually where I hit stop the live stream but the chat seems to be restful yes that's actually great advice from coder for Life everyone sleep is really important your health is really important take it easy don't try to do too much be with people give people hugs um um so uh uh yeah World Tour would be great all if you have questions so uh tweet at me your questions at shiffman um unfortunately I'm going to have to say goodbye right now um I have to go and pick up some small children from their after school activities and I don't want to be late great John says npl install noon worked for me did you include the dash G because you're going to need it to be a global module so I hope to see you guys next week or on the internet in some other fashion and and um thanks again for tuning in and thanks for um um school for poetic computation for having me in their space sfpc doio thank you ITP it. nyu.edu for the students that I wasn't having office hours this afternoon with and I'll see you guys all sometime soon okay