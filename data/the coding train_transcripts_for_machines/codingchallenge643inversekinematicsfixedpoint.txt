hello we're pulling into the station the kinematic station and what I want to do is I want to expand my previous inverse kinematics example I don't have expanded the right word but I want to change the way it works in a way so first of all this is the exact same example that I built in a previous coding challenge but I've changed I've changed a few things I've gotten rid of the there's only a few segments down there's only three segments the segments are longer and I've also gotten rid of that thing where the stroke weight of the segment changes so it has less of an eel or snakelike quality to it now and it just kind of has more about a robot arm like quality because what I want to look at is what happens if I take the base of it this right and lock it to a certain point much like an actual real robot arm would do so what if you need to figure out the kinematics for a robot arm to reach out and grab an apple because the robot likes apple oh that would be a great robot people should make just robots but like happens anyway um so a point to this which was and so how would you do that and so this is how we're going to do it now first of all I've got a little secret to tell you I actually just tried to do this and I'm clearly over engineered and wrote a really spaghetti problematic code I will link to the live stream where I did that and through writing that code I really realized this is a time where it's just going to be so much easier if I just use an array so it's kind of interesting to explore this problem as this kind of linked to list a where each object keeps track of its parent in its child and I did that in the forward kinematics but it's kind of unnecessary because the segments are just in an order and if there is an array I think all I everyone do is iterate through the boards or backwards and know which ones are next to each other and an array is going to just make that so much easier so let's let's talk about what I mean by that so this is what remember this is what inverse kinematics does so let's say this is the sequence of segments and this is a particular title actually let's put the target up here this is a particular target so what's this segment in the previous example is going to do is it's going to turn to point up top target so we do this and then it will shift its position all the way to here this is if it can place if the base is not locked and it can move then this one will turn to face the beginning of that and then it will move to there so that's what we did so what we're going to do to lock the base it sounds like overly simplistic but it works but what I understand is I'm going to do that with all the pieces so you know maybe I get this one here and this one here and then after I do that I have kind of a new arrangement and then I ship the whole thing back so just shift the whole thing back we're done I'm going to move this back here then move this then with this and there's pretty easy ways to do that I'm not so sure if I'm going to end up doing it the simplest wedge you know this is really today feels like a lesson in refactoring which is unique just writing the code to get it to work and then reorganizing and simplifying it and trying to do that a little bit but so this is the basic idea so let's start going to the code and let's make an array that each one of these segments has it indexed into that array 0 1 2 & 3 0 1 2 & 3 this way I could just do inverse kinematics by iterating over this way and if I need to iterate through it's forwards I can do that way I always know the base is 0 and the last one is in the length of the array minus 1 it's going to make things so much simpler ok let's try it Here I am ok so I'm going to make an array and I'm going to call I'm going to call it eggs let's call it tentacle it's fine the array is still called tentacle and I'm going to say tentacle index 0 is a new segment so I make the first one here and then it's probably still useful to have them keep track of their parent I don't know how necessary that is let's let's actually comment that out right now actually let's keep the parent thing because that is a way that I position the next one which is kind of useful let me keep that for a second bear with me so I'm gonna get rid of the child thing sort of a suspicion that keeping the parent might be useful but the child thing is kind of unnecessary what it note think I'm using that so I'm just going to refactor it to do the same thing first then what I'm going to do is I'm going to have this loop start it index one so I'm going to go from one to three and I'm going to say tentacle now index I and I cannot spell tentacle tentacle index I is a new segment made from tentacle index I minus one which is the previous one oh this is so much better forget about the child thing forget about next forget about this look at this oh I like to feel so relieved oh goodness oh this makes so much more sense to me okay so now we've got our array and then what should follow the mouse so tentacle so I'm going to just say end is tentacle length minus 1 so the tentacle and actually let's have that be a segment is the array the last spot in the array I could use an array list and use pop or there's probably some other fancy way to do this tend to cannot spell tentacle it's such a hard word to spell okay so that's the end segment and so now I just say n follows the mouse and Unruh move over here a little bit and update and the dots show okay I don't know that I need to do it all this way because ultimately I'm going to loop through everything but now what I do is I want to iterate through them backwards so what I want to do is say for sorry everybody I've got a little sound thing going on here for I want to start at the end of the array I equals I really I just want this to be in a variable in length int total because it's going to make my last really now trying to make the code simple total is tentacle dot length and so the last element is total minus 1 and I'm going start from total minus 1 now I'm not starting from total minus 1 and starting from total minus to go all the way down to 0 then what I'm going to do is say tentacle index I follow update show the reason why this is useful is follow and follow knows how to oh it follows its child so that's the relationship that I need not the parent it seems but you know what guess what I don't need the child because I can tell it which thing to follow right what if I just give it a segment to follow and then here I know what it's child is you know this child is its tentacle I plus one it's the one after it so this is so much nicer because I don't ever have to keep all these references because I can just have them I know that the one after it is the one that it should follow great so this should be the same hi I'm in the state which is no surprise it would be nice if I actually created the array in Java you've got to be quite strict about these things and I want an array with how many things do I want three total so I want to say tentacle length and it's not an array of tentacle objects it's an array is very confusing but it's an array the array is called tentacle the object in it our segment okay yes OOP there we go look I've got the same exact thing but I just feel much happier about the car much less stressed out now one thing is did I use parents anywhere do I use parent anywhere not really I mean I use it here in that that's how I get its initial location but I don't use it anywhere else so I can pass it in I don't actually need a reference to it just to simplify things okay so now I've really made things so much simpler I feel so much happier so now what I can do is I can introduce this idea of a base and what I think I base is where the thing is attached fixed so I want to have it be attached to the bottom so I'm going to create an object called people vector object which is the base and I'm going to set the base to be equal to a new P vector which is in the middle and at the bottom okay there we go the new P vector which is in the middle at the bottom yay okay feeling good about this then what I'm going to do is after I do all this nonsense I want the thing in the array that's first the first element which is tentacle zero and I want to set its location set a its start and end point I want to set a to the base so I want a to be the base and so I'm going to write a function called and actually I think I'm going to put this function near calculate B set a and there's a little bit this is a little bit overkill to just have a function just to do this but I'm going to say a equals but I'm doing this because you know I think there's a way to have the objects endpoint always one object's endpoint always has to be the other objects beginning points I think I could probably link those but I'm a little bit afraid to do that so I'm going to copy the data copy this vector to this one just for now maybe later we can do that okay so now that I've done that what I want to do is set its bait okay let's do that now okay so first of all why don't I didn't seem to work well setting it as its base doesn't really do anything because up here as soon as I update it's going to attach to the thing that's moving so one thing is I want to think I want to just take out show here and I want to have a separate function for rendering everything because that's just going to make everything much much easier to deal with so if I do that we can see that this works but looks bitten is not a realistic robot arm because the bottom can just stretch to wherever it needs to go because all I've done is set the base to the bottom but I didn't change B so what I need to do is whenever I change a I need to also update B which gets done in this function calculate B right remember it uses that polar to Cartesian coordinates formation to set B base we're a is and the angle so now that I do that you can see 12 it's attached to the base but the rest of the stuff you just go do whatever it was so now what I'm going to do and some people are asking why not use a for each loop and I do you just see me use this enhanced loop in Java but the reason I don't want to do this now it's because I guess precisely this I want to now say for int I equals 1 I is less than total I plus plus I want now tentacle index I set a to tentacle index I minus 1 I need dot dot we just type this in here dot B right what is this doing what did I miss that's totally tentacle what I want to do is I need when they're detached I need this one a to be set to the previous ones B and remember they're ordered like this in the array so that's what I'm doing here so I think this is a much nicer solution to just say set 10 index I have it's a be equal to I minus 1 B I think I did this right I want to play like a drumroll there's nothing the lips just see there we go look at it so now I have this robot arm that's following them out you can see that it's always if my mouse is an apple it's going to reach up to pick it now I can't it can't go very far you know I could easily make the segment longer I could make the segments longer well how would I'm to do that I could make them now so first of all let's let's add something let's say length is length the variable somewhere let's make them 200 and let's also figure out oh well up here is how many segments I want so we could see here this is what it looks like right like with if the segments are let's try another like 300 there's probably no we're in this pixel space that I can't reach now I don't know what the what it is exactly that I'm doing this is a I think it might be a bit more interesting to look at this if they were actually smaller and that there were a lot of them and here now we can see whoa there's 30 of them but they're really small let's make them a little bit twice as long so you can see now I've got this thing that's kind of reaching to try to catch catch up and you can see you could imagine now here's the thing what if where the mouth is what if it's following not the mouth but what it's falling some oscillating patterns or a bouncing ball or some other physics system you can see what the possibilities are so what I'm going to do in the next video is I'm going to take this example and package it into an object and then I'm going to make a bunch of them that follow some type of sine wave or noise or something to see what that gets okay so I think this video they says I'm so happy about using an array and I'm happy that you watched it I feel like I'm Shannon Apple I've got all this stuff here I'm going to go have an apple later if you like apples okay goodbye