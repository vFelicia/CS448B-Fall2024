hi okay so we're we're kind of almost there we're working with data and processing and we've seen what a string is we've seen how to draw text onto the screen and now we've also seen the function split the function split takes a string of text might be numbers it might be words it could be any sequence of characters and chops it up somehow the scenario that we're going to start with is let's load a large body of text and let's count the number of times every word appears in that body of text the the actual text I'm going to use in this scenario is to play Hamlet you can get a lot of stuff from a website called Project Gutenberg which has a lot of public domain text and that's a great sort of thing to use in this type of scenario so but what did we start with we had here in this example this sort of like rudimentary data visualization example we started with what's the data it's this string that's hardcoded into the the code itself this is not this is not a practical it's not the reality for us what we want to do is get that data that same data that text from a file a URL a website that has information about whether there's some external source we need to pull that stuff into processing the way that we pull that stuff into processing is with the function load strings now there are going to be other loading functions we'll see in a video or two from now because sometimes the data comes in a very specific format like comma separated values or something called XML or something called JSON we'll get into what those things exactly are in a bit and in those cases we might use bloat table or load JSON or load XML but for any generic just raw text load strings is going to do the job for us so what did we have so let's say we wanted to do something where we had Shakespeare play as a string to be or not to be and we know we could use the split function and say split this text up by spaces and now we have a token an array of where each element of the array is an individual in this particular text but I don't want to just hard code to be or not to be I let's say I have a file and that file is called Hamlet dot txt and the entire Shakespeare play is in this file why can I say string s equals load strings then the file name Hamlet dot txt this is just like what we did with images I have a JPEG in my data folder I'm gonna load the JPEG in is a PM edge and draw to the screen now I have a text file in my data folder right data is the data folder of the sketch is where any sort of media assets can go images fonts data files it's called beta after all Hamlet dot txt so that's where this file can go and if that's file is there I could use load strings and I've got it and now it's in my string only sadly this is not exactly right this is what we're looking for we want the entire play into a single string so we can split it into words but load strings actually does something slightly different which at this moment of our life will seem rather inconvenient and annoying but actually it's a it's a useful thing anyway what is that thing I'm beating around the bush here load strings actually takes a text file and loads it into an array of strings what why an array why would it ever possibly be an array well let's say this is my text file this is my text file this is what's actually in the file and each one of these is a line break or carriage return load strings will take each line of text and make it a separate element in an array so in other words the first element of the array would be this is the next element would be my the next moment would be text etc etc so there's a lot of scenarios where this is actually useful for example let's say I am want to load every word from the English language and I have a text file that has every word from the English language on a separate line I can just load it in and suddenly I have an array with each word as an individual element in that array and that could be a useful thing in this case we don't really and there's a lots of other scenarios where that array is useful actually with commaseparated values even though we can use table it would make sense that each row on a spreadsheet would be a separate line and we get that into an array however in this case we don't want an array we want the entire play in a single text file and right now we're gonna get every line from the play into it a different element so what can we use if I now say I want to put the entire play in a variable name that I named ham the join function the join function is the inverse of split so while split takes a string and chops it into an array join takes an array and joins it all as one string so what I'm doing here is it's kind of this strange thing is I I have the text file I load it into an array of strings I join it so it's one long string and what am I going to do immediately after that I'm gonna take I'm gonna I'm gonna call split and split that text back up into an array of words so this is the process text file for forward counting applications where we're starting with load the file it's a big array of strings join it together it's one long string with the entire play in it and now I want to look at each word in that string I've got to split it up again so its lines which goes to one string which is split again into words I'm saying it's way too many times okay I think I'm trying to convince myself that this makes sense so let's look at actually doing that so let's just let's actually just start with this scenario in this particular example and we revise and say to be or not to be and then what I'm going to do is say split that string not by a comma but by space and let's give myself a set up and let's give myself a draw and let's make this global variable and let's pink words sorry I have to I should have adjusted this in advance make that a global variable split it in set up and now in draw instead of doing an ellipse at every moment let's sorry let's draw each word so let's take a look at this run this what did I get wrong this is called words like ok and let's do text size 32 so we can see it a little bit better we can see there we go now we have a string we started with we used split to split it up into an array of tokens and then we're drawing each one of these words one at a time in an array so this is what we're kind of on the path here now let's think about this again so to be or not to be this was a single string let's look at the data folder and now you can see here I have the entire play Hamlet right here in a text file this is the text file so what I can do here is say load strings Hamlet txt and let's just print that out to the console we don't need this anymore well let's go leave that there and you can see that in fact there's a huge array and that huge array has like almost 5,000 lines in it every element of that array is a single line of text from the play so what I want first want to do is I want to join that whole thing together ok so now I'm gonna say entire play equals join lines and put a space in between each line now let's print the entire play now we can see here now all the text from the entire play is here down in the console it's all in this single string so this single string entire play is just like my string s up here so let's take this out and I'm not splitting up s anymore I'm splitting up entire play and let's do something slightly different let's have let's keep track of an individual index and let's just display I'm gonna say textaligncenter words doing I don't know if I like the way I'm doing this video by pulling this whole example from scratch maybe you find it helpful and I'm gonna say index plus plus background 0 fill 255 text size 64 ok so I just really really quickly in here just put a little algorithm to display a single word at a time like we split up that whole play which probably has thousands of words in it and we're gonna look at each word one at a time every time through draw so index is 0 draw the first word go index goes up by 1 draw the second word just and we don't need this location can just be we can draw all these words in the middle of the window so here we go we can see look this is every word in the plate now you'll notice something we slow this down let's just say framerate 5 if we slow this down you can see that there's question marks and apostrophes and colons and we don't really want that when we go to actually count words we want to we want um and we look at this before but we have we have a scenario where our text look something like this hello comma my name is Dan question mark yes so if this is our text what I want is hello I want my I want name I want is I want Dan I want yes I don't want any of the punctuation I don't want in any of the spaces so just to remind you again split the function split takes a sequence of characters that access a delimiter so if I put space in here I'm gonna get hello comma then I'm gonna get my name is Dan question mark yes exclamation point if I were to do something like say oh space space comma it's actually gonna look for a space and a comma as the thing to split which is not what I want to look for I want to say split anytime there's a space or a comma or a exclamation point or a question mark and to do that there is a function of processing called split tokens and what that does is it takes any character that's in it that's any character that's here in a string any one of these characters individual characters can be a delimiter so if I come back to this particular program and I change this to split tokens and I say you know comma period question mark exclamation point you know and the list goes on we could come up with a lot of other possibilities and I run this again we can see now none of the punctuation is there so the apostrophe is there because I didn't include apostrophe as a possible delimiter but we could say I'm getting one word at a time just to take a look in the console I think this might be worth looking at we can see everything is there there are twenty nine thousand six hundred and three individual words in this particular play Hamlet a couple things to point out here one is and if we look right here we can see an example of this we can see I've got cap T cap the capital T so ultimately what I want to do and we're gonna do in the next video is count how many times the word the' appears but the word the' and i probably already made the next video a priority said the next video do you might get this twice but so capital a sorry we want to count the with a lowercase t and though the capital case t could the capital t as the same word so one thing i can add to this by the way is i can use the function words index to lowercase so now if i add to lowercase here we can see every single word is now all lowercase characters which will help us in in the counting of them so I think this really kind of like wraps up this particular scenario what we with this video but I intended this video really to cover is simply how the load strings function works so what I would suggest to you is find some text maybe that maybe it's commaseparated numbers and you want to draw a graph by using split and a comma maybe it's a different finding something else on Project Gutenberg or find something you wrote or get all of your emails into a text file do some type of visualization based on the stuff that's in a text file and hear what one of the things we're doing here is every word is appearing on the screen no matter how many times it's into play so the next video we're gonna look at how do I know I'm looking through every word how do I know if this is one I've encountered before or if this is a new word that's kind of the next piece so you could you could try like your own version of that if you want or certainly just try doing this but visualize it different see if you can get every word up from the play like to fit on it in a single processing window or something like that so anyway I'm rambling and I want to get to the next video which and so this will be the end of this one hopefully this was somehow somewhat helpful even though it's only 14 minutes which isn't so crazy okay goodbye