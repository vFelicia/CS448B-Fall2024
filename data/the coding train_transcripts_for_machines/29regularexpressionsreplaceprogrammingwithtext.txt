hello welcome to yet another regular Expressions video and in this regular expression video I think this might be well I probably will never ever stop making regular Expressions videos but at least for this sequence that I'm making right now today who knows when you're watching this in the future this is the last one okay so this video uh what I want to focus on is the replace function so uh in the previous video I looked at the split function split function is a function that you call on a string you give it a regular expression and the regular expression is a way to match a delimiter which indicates where you should split that text up into an array of chunks tokens so to speak now I want to look at the replace function which is a function that you also call on a string with a regular expression but wherever that regular expression matches you give it something else to replace it with right just like find and replace in any text editor but because it's regular Expressions because it's code there are all sorts of powerful things that you can do that you couldn't just as easily do with your standard computer find replace so um you know what you might do with this is um come up with some sort of like translator web application so you know that you can find you know websites that take your text and translate it into pirate speak for example so if you're looking for an exercise or something to try to do write a web page like this where you enter in some text you hit submit you do some kind of crazy replacing magic and you get a new text whether it's translating into some other funny way of speaking or um that sort of thing so I'll let I'll encourage you to come up with some creative ideas from what I show you here so let's first just look at the basics of replace so I'm going to um make a string that's uh um just says uh equals um unicorns and rainbows okay so that's a string and now what I want to say is s. replace and uh here's a regular expression unicorns and I want you to replace that with cupcakes so sorry that this is kind of like breaking into a line weirdly so you can see replace anytime you match unicorns and replace it with cupcakes if I do this and now we've replaced it we have cupcakes and rainbows very very simple idea now let's just look at something look at the original string the original string is still unicorn and rainbows so one thing that's really important about this is you're not modifying the actual string if you want to modify the actual string in your code you're you're going to need to say s equals the result of itself replacing unicorns with cupcakes is this really me replacing unicorns with cupcakes I think it is okay okay so you can see now the value of s is cupcakes and rainbows okay um this definitely needs some sort of background music but whatever okay so this is how replace works now obviously it's more powerful than this because I haven't really done much in the regular expression other than simply um uh um simply um replace a literal word with another literal word so let's do this a little bit differently and say something like um by the way 1 2 3 4 5 6 7 1 2 3 4 5 6 7 wait eight so unicorns is seven okay so let's let's let's uh let's uh let's say uh s is unicorns and rainbows and uh cupcakes and what I want to do I'm going to clear this out is I want to say uh s s. replace and what I want to do is replace any sequence of word characters that is between six and eight characters with um rainbows unicorns cupcakes what else is there is there anything in this world um we'll just make him all I don't I'm really I'm waiting for the chat to like catch up with me and give me a suggestion but the chat is 15 seconds behind so you the poor person in the future watching this video with no live chat yes kittens thank you very much uh kittens uh I need to replace it with kittens so and I forgot my slash here um so I'm going to run this it was worth waiting for the kittens right so if we run this uh syntax error what did I what's what's wrong with this missing parentheses oh I forgot the parentheses here sorry that's a curly bracket kittens and rainbows and cupcakes so wait what's the original uh ah and guess what okay fascinating fascinating thing that happened I believe that rainbows which has eight characters and cupcakes which has eight characters should also be there like kittens no sorry unicorns has 1 2 3 4 oh they all have eight characters they all have eight characters so let's do this again replace any eight character word with kittens but still it only replaced the first one why because I forgot about the global flag so the global flag is very important the replace function is only going to replace the first instance of something it matches without the global flag kittens and kittens and kittens and kittens kittens and kittens and kittens and kittens kittens kittens and kittens and kittens I'm really losing my mind someone please make a song out of that okay um now okay so uh that's what replace does that's the basics of replace now let me show you that you can also use capturing groups I'm going to get a lot of thumbs down on this video I can tell already you know some people will like it but a lot of people won't internet doesn't you know okay um so you can also use capturing groups so let's just say that what I want to do is anytime I see a vowel anytime I capture a vow vowel I want to double the vowel so um I'm going to clear this and I'm going to do uh s so that's the string right so what I want to say is replace what I want to match AE IO U right I want to match any AE IO U and I want to replace it with what well what did I match so what if I put the parentheses around the whole thing so I'm not doing anything too sophisticated where I'm you know capturing subgroups but of course I could do that you could do that phone number that I showed you with capturing groups in a previous video but let's just say I want to capture the vowel and I want to replace it with what what I captured followed by what I captured so this uh I could probably think of a more clever example but you get the idea so here I am Capt taking replacing anything I capture with itself u whoops ah oops of course I'm sorry this always needs to be in a string so even though what's a little tricky about this is this is a regular expression so forward SL forward slash this is a string so it's in quotes but JavaScript is going to figure out that this is the secret code for the back reference even within the string itself I think unit ah but look at that it only did the first one why because I forgot the global flag yet again unicorns and rainbows and cupcakes there we go see so you can use back reference um you know maybe look at the sort of double words thing or double words or you know what how might you you talk about with some other clever way that you could um certainly do um oh and sometimes why yes I forgot about the sometimes why okay so um anyway so so that's something you can do with back references okay now here's the thing I'm really getting to something I need my drum roll sound effect that I don't have someday I'll have a drum roll sound effect this is the real magic of using regular expressions in JavaScript is what I have shown you is regular expression and the string that you intend to substitute but what happens if you pass a function into there this is incredibly powerful and somewhat unique to JavaScript that you can actually have a call back function so let's see how this works um so I'm going to do this in the code because I don't can't think of another way to easily demonstrate this using the console so let's look at this okay so I'm going to go to the code for a second and I'm going to write a regular expression I want to match any um I'm going to match a word boundary followed by uh word boundary followed by some amount of uh word characters one or more followed by word boundary okay so that's my regular expression then what I want to say and I'm going to give myself some line breaks here to raise this up now what I want to say is VAR okay um Here Comes Here Comes Here Comes uh no no s. replace with that regular expression and and I'm just going to say something like replacer now I can write an anonymous function right into there I can write an anonymous function right into there but just to make things a little bit easier to follow I'm going to write a separate function down here replacer and I'm going to give it an argument match and the only thing I'm going to do is I'm going to say console.log match and auto format gave got get got rid of all my line breaks it's going to do this again as soon as I hit command s that's very annoying to me I'm going to put something down here there thank you okay so what's going on here the replace function is going to execute a call back for every single time you um and I want to say the uh I'm going to say VAR new string and I also want to say console.log new string and I'm GNA say create P new string ah camera come back to me camera okay so I want to just sort of look at what's happening on the inside here so let me just run this hit refresh going to move this over a little bit I'm going to hit submit and then look so first of all it got it matched a and then it said undefined rainbow so that's a little bit crazy huh what's going on well first of all what did it do first thing is it executes replacer for every single match of this regular expression but notice the regular expression does not have does not have the global flag so it console logged the match which is the first thing it found a and then it replaced it with what it didn't replace it with anything it will replace it in the string with whatever you return uh blueberry so now let me run this again it replaced a with blueberry now let me do something let me give this the global flag Blueberry Blueberry Blueberry Blueberry Blueberry Blueberry Blueberry Blueberry right what it's doing is it's saying for every match of that regular expression return blueberry meaning replace it with this but do you realize what's now possible this function has two lines of code I'm console logging the match and I'm returning blueberry but now you have the entire known power of the programming Universe to put in here so any logic you could possibly imagine you could put in here so for example uh this is not going to be that interesting but I could say if match. length equal a equals 4 uh return match. two uppercase otherwise just return match what is this going to do this is saying if the thing you matched has four characters return an uppercase version of it otherwise return it as it is let's look at this now so you can see all the fourletter words are now made all uppercase this is not that of innovative of an example but imagine what I could do I could make an API query here I could check the day's weather here I could do anything every time this regular expression matches so I can't emphasize here enough how much is possible within here and I wish I could make this video hours long and just kind of go through all sorts of crazy ideas but I'm leaving it to you the viewer to try to come up with your crazy ideas right here so let's though let's look at a little bit more I'm trying to think of how I can make this a little bit more interesting let's go back to the phone numbers for a second okay uh so I'm GNA put some some numbers in here 999 D12 34 and uh you know 111 d 8765 and uh 8 8675309 okay so I put in a put a dot in there so I I just keep the dash in there so I just want to look at what happens with capturing groups because this is even more sort of crazy what you can do so now if I go back to my code and I change my regular expression to match the phone numbers so I'm going to say I've done this so many times now I want three digits followed by a dash followed by uh four digits and I just want to um I'm going to log that match I'm going to take this out and I'm going to just say return match so the replacer is doing nothing so I just want to make sure that this regular expression is working and I'm going to run this hit submit and you can see and I don't I don't want to uh log this in the console I just want to see the matches you can see there we go so I'm matching those phone numbers in the text now what happens when you add a capturing group and this really will unlock you know so much more I said the you know entire power of the known universe is right here watch what watch this so um so first of all let me make a capturing group I'm going to put a capturing group around here making I'm going to put a capturing group around that first group and now I'm going to run this again H nothing different happened why how do I get access to that group well let's look at this function notice how this function has an argument this call back replacer function has an argument it gets the first argument is match group zero the full match the full match is always group zero guess what the second argument is group one guess what the third argument is group two now there is no group two but I can just list them there because maybe I you know maybe I want a group two I'll have a group two right here so what I'm going to do is now I'm going to say console.log match console.log group one console.log group 2 let me run this again hit submit and you can see look at that I now am able to have the call back separate out the different groups if my brain works any better I would have all sorts of creative ideas what I would love for you to do I say this already tell me your creative ideas of what kind of crazy replacer stuff you could do with this and I'll come back and do some coding challenges with some of those ideas or share them with me and I'll um but but this is really unlocking a lot of possibilities for all sorts of strange text replacement algorithms that you can use um the last thing I just want to mention though is that instead of actually having to have these arguments listed as separate variables you can also use a secret variable in JavaScript it's not so secret called the arguments array the arguments array exists for any function that just stores all of the arguments passed into the function the the the values of the parameters as in an array and I I have a separate video which actually covers this which you can look at but I just want to show you what that looks like here and so you can see here um and by the way look at this if you look at that there's actually more stuff that we didn't even realize there's the full match group zero group one 15 I think is the the length of the string I guess that's just the length of the original string no what is that somebody tell me um and then the full string is there in case you needed that as reference as the fourth argument what is the 15 I'm trying to remember what the 15 is somebody in the chat tell me course the chat is 15 seconds behind me so I don't know I'm GNA have to look that up I'm going to get so many YouTube comments of telling me what it is because I can't remember um but uh you can see that there's Med it's the length of all the groups together okay position in string someone says position in string someone says length of all the groups together I I I have a feeling that um that it's probably is uh let's just quickly test out this idea let's add those groups all together 15 yeah so 15 seems to be the length of all the groups added together I don't know what that's useful for exactly but um seems to be useful for something okay so um this is the basic gist of it um um uh there's so much that you could do with replacing text um think about types of different sort of interesting creative possibilities of how you might do text mashups text translations uh API queries mixing up text reversing order swapping things out um but um and so I encourage you to play around with this replace idea play around with the groups and let me know if you have some creative ideas or some things that you make with it and I'd love to hear about it and I'm going to do a coding challenge where I use some of this just to show you how to sort of interact with words on a individual basis okay I'll see you in the next coding Challenge video