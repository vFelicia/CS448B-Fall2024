hello again okay this video this this this section of videos is going to be all entirely about something called box2d box2d let's read that over here box2d now why are we talking about box today okay so what have we been doing we have been making all these examples they have these mover objects the objects have these vectors they have these functions what do they do they move around the screen they respond to forces we've been building our own physics engine bit by bit slowly by slowly looking at different examples and scenarios for simulating physics and motion on the screen of course it's probably quite obvious to you that we are not the first people to have ever thought of this problem and ever done this and in fact physics simulation exists everywhere in computer graphics and there are lots of examples of ways of writing code and libraries that you can use so what we want to take a moment in this nature of code experience to say okay well there's value to us building our own physics engine to learning the ins and outs of it to kind of being creative with what we're making but maybe there is a time in place where we should just use somebody else's physics engine somebody else's physics library to control the behavior and motion of everything on the screen and so what I want to look at in this video is a what is what is the physics library what is box2d where do I get box oudy and what are the pros and cons of using something like box would be instead of custom baking your own stuff okay so this is going to be challenging I have made a list got eight videos to do it would probably turn into more honestly is a huge topic and it's not going to be easy but so this first video which you know which will just be a short hopefully I just want to kind of talk through the basic elements of oxygen look at a couple websites where you can get stuff I'll include links below wherever you're watching this on Vimeo or wherever of where you want to download the stuff and then you know we'll get into the details in in future videos so if you kind of already if you know what box 2d is and you've already up and running you could stop now and just go to the video okay so box2d let's think about why why is what is what is the sort of central reason why you might want to use a library like box today okay so I'm sure this scenario has come up for you before you you have all these circles moving around the screen and you're programming them with vectors and forces and they're all doing all this exciting stuff but you want to figure out you know you have got this circle in this other circle and they're moving towards each other and you know they're gonna they're going to get right next to each other and you're going to want to detect the fact that they are touching each other and they're bouncing off each other you want to do something with their collision if you have a program where the collisions of objects matter to you if you have this idea for something you want to make and you're walking down the street describing your idea to your friend you to do to do bla bla bla collisions bla bla bla collisions this is madness and that mat and then they collide and bla bla bla if you're using the word collision over and over again in your project description this is a moment where probably you want to use box2d we could start to go through the math for this and it's with circles it's not so bad we know first of all we know how to detect if two circles are intersecting or not right we can just look at the distance between those two circles and if the distance between those two circles is greater than the sum of their radii then they're not overlapping if it's less than the sum of the radii they are overlapping and then we could start to figure out okay well if if they are overlapping what do we do with them well we know their velocity vectors we could probably do some vector math and reflect their vectors and bounce them and rotate them and we could figure out what direction they're going to go and this would be a worthwhile exercise and somebody someday should make a video about how to do this scenario but this is the moment this is the moment in our life where we are choosing not to go down this road because this road leads to other more complicated and stressful problems like what if they aren't circles what if these are strangely shaped polygons oh and and one of those strangely shaped polygons should like are spinning and how do we know if they're overlapping when they hit each other should how are they going to bounce off each other and with friction and what if they're kind of elastic are not very elastic there's so many ways could make this problem so unbelievably complicated we could suddenly find ourselves dedicating the next several years of our life to figuring out just what to do about things colliding the good news for us is somebody else we spent many years of their life dedicated this problem and they released the solution in an open source library called box2d so one of the central reasons why we want to use box2d is to deal with stuff like collisions in two dimensions now if we're going to get into 3d that we get let's not eat what how do you going to get in this in the about box today we're sticking in two dimensions you might this is it brings up an interesting point though which is that is their effort what you could be asking yourself okay that's great why would I never not use boxes yeah I mean that sounds awesome I should just use that for everything and you might choose to now use it for everything but I do want to emphasize that this doesn't come without any any pain as well right using the library you've got to learn how the library works you got to figure out how to import stuff which functions which classes there's a lot of overhead and as we're going to see there's a lot of stuff we have to kind of learn how to use just a distant you know just to get a circle moving on the screen with box2d is a lot more effort than without it but when we once we get to the effort of having to deal with collisions it becomes worth that effort to get box2d up and running so it's this kind of balancing act and I'm very curious actually I don't I don't pretend to have the answer to this you this is a question you will have to wrestle with I have this idea for this project I want to make should I use this library should use this other libraries should I use no library and this is the question we hope to as a community where we maybe kind of solve together and talk about and discuss and I would be interested in hearing from you as to you know what what's what's work the box Rd and what hasn't so ok so this kind of gets us over the hump of why we want to use box 2d so there's two more questions we need to answer in this particular video one is where do I get it and how can I even be up and running with it and and then kind of what is the overview what's the bigger picture here what are the central elements that I need to learn about so let's first take a look at where it is that you get box duty and what box2d really is that the first thing I should mention though I'm going to clue this is so like kind of analog of me but um here's a website that you could go to box2d org and I'm gonna include everything that I'm going to show you them and include is links below wherever you're watching this you know probably on video in the description I'll include links okay so what is box UT that actually what I've hit to right here I'm just kind of rambling now is C++ so one thing we should be aware of is box 2d is a C++ engine it's written in C++ and if you go back to box 2d org that's where you can download it you can find the documentation there's a forum there's information about the project it's a C++ engine it was created by someone named Erin kaat oh I believe it's been around since 2007 something like that it's probably in many ways most famous for its use in the game Angry Birds and many many many many many many many mobile tablet games that you play are built with a physics engine and box2d is a very popular one especially for 2d games so one of the things that I think is most useful about this website that you might want to take a look at his preps rather dry reading but if you're like me and you like to find something to read you know quietly at night the flashlight while you're about to go to bed you might go here and look at the box duty manual so the box 2d manual is going to give you an overview of kind of all what are all the pieces of box D if you look at this it's all written for the C++ user now here's the thing box 2d is such an amazing and incredible library that does so much we are not the first people to discover this it's been ported to just about every language and environment you can think of there's a JavaScript version there's a flash version there's probably there's I can't even anything you can imagine there's probably a version now processing is built as you as you may well know is built on top of Java so if we could just find a Java version of Bach city we could probably use it in processing and in fact there is one so if you go to Jay box2d org you'll find a java physics engine this is a port of the Box D library for Java now you could we could be done here we could just say this is perfect I found this I'll download this I'll figure out I'll somehow get processing to recognize it and use it right on this job at you code and that's essentially what we're going to do but to make this a little bit easier I have put together something called P box 2d which I realized is sort of against the rules of library making because the P is sort of reserved for official things so maybe I should change the name of it but I don't know why I just got just occurred to me now edit this part out but anyway this what this is is it really isn't it's misleading it looks like it's a processing port of box2d but what it really is is a little it's really just a little it's a set of examples in a library that allows you to sort easily access J box 2d directly from within processing so that's the details of this this is what you know as I look through my list of videos there's like eight of them all that's going to use this library called P box 2d so you can see it's on github there's a link to download it I'll include a link below there's lots and lots of examples I don't know if I had the time and maybe I could probably go through all of them and hours of content here but I'm gonna try to whittle this down to the basics now I should mention that this is not the only way to use box 2d and processing in fact there are other libraries if you go to the processing libraries page you'll see a few box wrap 2d I think one is called but one that I wanted to point out which i think is particularly wonderful is called physica which is I hope I'm pronouncing that right I say it with enthusiasm though physica which is by Richard Marx err and this I think is terrific I'm not you choosing to use it because what I think it's useful for us as an exercise here to really dive into the guts of box2d physica is a little bit of a higher level layer in many ways makes it do it makes it a little bit easier to use but perhaps not every I actually don't know if this is accurate but not everything in the entirety of box2d has been implemented so I want us to kind of get into the raw box2d to really learn about how it works so but you know maybe I need to reconsider that because this is really a wonderful library and I definitely recommend you taking a look at it ok so this is the picture of where where everything is now let's just discuss for a moment though kind of looking at an overview of all of the elements in box 2d you know what actually that's going to be in the next video this is I think this is good here's the thing so this is what you should do you should go and you should download this library P box2d use the link below download it open get it running go through all the examples just run them take a look at them and sort of just see if it makes sense to you that this is something that you think you might want to use that's going to have add value to the stuff that you're making and if that's the case then continue and watch the next set of videos if not you know go and have a sandwich or a nice salad something you know take take a ticket take take relax and do something else ok so hopefully that gives you kind of a basic overview of what box Duty is and when you want to think about using it the next video we're going to get into kind of another overview but with more details about the elements of box today and how they're used and then finally we'll start digging into the code details as well and see how to actually write code that uses box 2d okay good bye