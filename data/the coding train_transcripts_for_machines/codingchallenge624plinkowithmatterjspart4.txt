hello welcome to the fourth part of this coding challenge now this fourth part of the coding challenge is just going to start in a sort of middle place and it's actually um a fourth part that I recorded last week where I add sound the reason why I'm here at the beginning of this video just to let you know about this is because um I made some improvements in the third part of the coding challenge where I uh increased the peg size and uh and fix some of the uh physics setting so um if you if you're curious about that you can go and you haven't watched the third part go back watch the third part otherwise stay here watch the fourth part where I add sound and then uh check the code on GitHub make your own version of this the code on GitHub will have all the pieces from all the parts uh combined together so thanks enjoy watching me add sound which will actually be some dinging which will be very annoying so if you don't like loud a lot of dinging please go go find some other vi video of some cute kittens snuggling or something on YouTube there's lots of those they have many more views than me which is fine there's no competition with the cute kittens I think I'm off topic enjoy the coding challenge goodbye so now what I have in the um the directory here uh I did this dur when I took a little break if I go to the Plinko example I have an MP3 file ding called Ding which makes a little ding I have a feeling this is going to be somewhat annoying that it's going to make a ding sound but let's let's give it a try anyway and see what happens I think it would be much more exciting to have them be musical notes and maybe in in a certain key or something and it plays a little song I hope you create that so um you can use sound synthesis so I am just going to add a function preload which is a an easy way to load some media assets before the sketch starts without a call back although I certainly could use a call back and I'm going to make a variable called Ding I'm going to say ding equals load sound uh ding. mpp3 now one thing I need to make sure is in index.html I don't see oh I do have a reference to p5.js so you need to also load the Sound Library and now what I'm going to do is uh go back to here and I just want to play the sound so what I want to do is I'm just going to add function uh mous pressed uh and I'm just going to say ding. playay so let's just see what this does oh I I so that's basically all I need is that really loud I hope that's okay okay um I I think I have the volume kind of turned down as it goes in um so now here's the thing I thought oh this will be an easy problem all I have to do is play the sound every time a particle hits a Plinko or a peg I'm going to have to look at the matter.js documentation because the problem is I'm not in control of the physics remember I just set up the world and said put these things in in these locations and and let it go about to sing a copyrighted song which I stopped myself to do okay you really don't want me to um so um how do I know if I'm not in control of the physics engine when a particle hits a peg you know I could start to look at their distance against each other but that's then I'm like the whole point of this I'm not um so Mo so I'm not the one I don't want to do that because then I'm rewriting the physics engine the physics engine is doing this so most physics engines come with some type of event listener a way that I can get a call back function that's triggered Whenever two bodies Collide so I actually have no idea how to do this CU I haven't tried to do this yet with matter.js I've done it with box 2D and other physics engines so let me come over here and I guess we're just going to have to start looking in the matter.js documentation um so I'm going to look in uh documentation what am I looking for events that sounds right Events off events on a callback function to a given event so this might be right trigger no event on I have a feeling that's it subscribe Now what are my possible event names and what is the object I need some more information here matter.js documentation so let me think about this maybe there's an example uh is there an example matter.js example uh Collision event uh so this looks like exactly what I want to do I I want to know when a when a collision has started and I want to know which things have collided so let's grab this code and put it in right here so and okay so matters. event so what I'm going to do I'm gonna I'm going to keep with our way of doing things and I'm going to say events equals matter. events just to keep that in my list of aliases and I'm going to say events on and I should I need to do this in setup so as after I've made the engine I can create I want to assign a collision start event and I'm going to take this out here and say Collision so I'm going to I think it'll be a little easier to read here if I have my own function called a collision that receives an argument called event so the idea here and I apologize for this not being let me see if I can move this over a little bit so the idea here is that I'm going to say I want to assign a collision start event event with this particular engine to this function called collision and then this function Collision will automatically receive an argument called event which is going to have information about what's collided so I'm just going to say console.log event I just want to see what those events look like so let's see if this works ah okay okay stop stop there's too many there's too many of you I just want to look at one so what I see is Collision start a pair the pair has ooh an object it has a body a and a body B I have a feeling that these are the two things that have collided body a and body B so that's good I need that there's probably other there's information about the Collision all sorts of par there's all sorts of stuff in there but I think it's enough for me to look at the event pairs index zero why could there be multip I guess there could be multiple pairs in the same time um that that come into one event but I'm going to so I want to look at the pairs are event Pairs and then the um Collision is the I'm going to do a loop I'll do a loop that's fine there could be multiple pairs so this is an array probably unnecessary it looks like there's just one pair each time but I'm going to say body a equals pairs index I body a and body b equals pairs index I body B now bodies can have labels and names and IDs which could allow you to uh and I think I'm going to need to do this actually I'm going to need to assign them a label um so uh let's just look at this for a second so let's look at what I'm getting and let's just look at console.log body a and body B oh maybe I need to do look at those separately let's just look at one of them let's just look at body a so here we go refresh wait hold on why is that stupid X thing there okay refresh so okay now I'm getting I'm getting a body oh look it even says Circle body it has a label and it has an ID so this one has a label it has a different ID so this is good so the thing that I want to know though is all these things can collide with each other I want to know only when a particle has collided with a Plinko I mean I might want to know when particles collide with each other or part collide with the the ground body or the wall these bucket things but just for right now I want to know when so so uh the way that I'm going to do this is there's probably a mechanism in matter.js that might handle this for me but here's the thing this is my thing particle my particle has a body in it and what I want to do is I'm going to say this do body dot uh I'm G this is what box 2D does actually box 2D allows you to sign user data so I'm just going to kind I don't I'm trying to think of what's the best way you know actually I'm just say. particle oh no no no uh I'm going to say type uh yeah I'm just say type equals I'm just I'm just going to use a string so I'm adding my own property to the matter.js body called type and I could use the lab maybe I should just use its label I'm going to overwrite its label how about that and I'll call it particle because I'm not using the label for anything else I don't think internally particle doj is is using the label so I need to give particle a label and then in the Plinko thing I'm going to say I'm going to give it a label as Plinko so now what I want to do is in that listener right where I have this Collision I want a console log body. a. label let's look at this particle particle particle particle poo particle particle so let me look at body. a label and body. B label so now we're seeing particle and Plinko particle and Plinko particle and Plinko Plinko and particle Plinko and particle Plinko and a particle particle in a rectangle body right that's the bottom so I only want to play the sound if it's a particle and a Plinko so what I can say now is if body a is a particle and body B oh label so hold on uh let's just call label a equals body A's label and label B is B's B's label got this whole extra Collision listening thing in this video tutorial all of a sudden so now I want to say if label a is a particle and label B is a Plinko uh what is what was it called ding. playay and then uh this is a very silly way that I'm going to write this because there's all sorts of nicer ways I can write this but also you know if the first one was a Plinko and the second one is a particle also play the sound so let's give this a try and see what happens oh my God okay okay stop stop please nobody ever run this program again you get the idea though so I encourage you to think be more thoughtful about this let's comment this out right now let's comment that out to think about how could you you know have a different label or different type for each row how could you have a bunch of different sound did that really hurt everybody's ears I'm so sorry um I there needs to be a warning is that going to be like do I need to do that again so hopefully this isn't ruining everybody's ears but I'm actually done with this this is Plinko I'm going to let it run uh for a little while uh thank you for watching this was uh I could have recorded my uh train whistle thing um so this is the Plinko coding challenge in matter.js I hope that you make a better version of this maybe you think of create I me you uh you think about the visual design of it you think about the sound aspect of it you think about why you're using it in the first place um perhaps you can use it as a part of a game or something else or a poetry generator um I'm sure there are like lots of inaccuracies in terms of like an actual perfect Plinko board that creates a nice normalized distribution you should see a nice bell curve so maybe you can make a variation of it where you really see that bell curve um perfectly um so share those with me um share share the versions you make and uh I'll see you in another coding challenge someday thanks for watching