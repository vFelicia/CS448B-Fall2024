hello welcome to another coding Rainbow video and in this video I want to look at how you can actually use all that stuff about regular expressions in your JavaScript program perhaps with p5.js or not with p5 GS but omni's it with p5 chess but this is really general JavaScript plus regular expressions okay let me come over here for a second so strings are probably something familiar to in JavaScript you could write create a string like this VAR s equals hello now as I started with regular expressions and hopefully you can read this this can also be a regular expression write this sequence of characters match the literal string hello but javascript does not consider this a regular expression because it's between two quotes if it's between two quotes it is a string object if I want it to be a regular expression I can say var R equals /hello so this is now the regular expression hello this is the string hello and just also in the same way that you can say new string you can also say new reg exp and put the regular expression in quotes as a string so for example if you ever wanted to build a web application where you take string input from a user and make it into a regular expression you would have to do it this way in fact if you look at the examples linked into A to Z github repository I do exactly this in one of the examples but for the most part I can create regular expressions like this so then the question becomes once you have in the same way that a string object you can say things like s dot index of right these are functions that you call on a string or properties like s dot length a regular expression has those things as well and to that I'm going to show you in this particular actually in this particular video I'm going to show you one when I get to another one I'm going to show you later I'm going to show you our dot test so this is a function that you can call on a regular expression and then I'm also actually going to show you a function that you could call on a string s dot match but you passed a regular expression so this is one thing you have to get used to in JavaScript there are times where you want to say the regular expression docked the function with a string and sometimes you want to say this string dot a function with a regular expression and in fact this might be more common use matches I use very commonly split and replace or functions I'm going to show you which are all functions that you call in a string that expect a regular expression as an argument but I'll get through all that as I make this video in future videos okay so let's start with test so I'm going to come back over here and you can see I have a list of these here in my notes that I'm following along but I'm going to switch over just I'm actually just going to switch to the browser which I'm in the browser already and I just want to do some stuff in the console just to test how regular expressions work so here we go I'm going to create a regular expression VAR R equals 3 up whoops backslash D 3 digits in a row so there you can see I made that regular expression it is three digits in a row the forward slash is indicating it's a regular expression not a string so I can say our test hello and false because hello does not match that regular expression I can say our test one two three and I am going to get to true because that is three digits in a row now let's ask the question one two three ABC what am I going to get also true right because that regular expression is found within the string so notice that test is just searching for that regular expression anywhere in the string let's say you want to use regular expressions to validate a full string well a trick to this is that I could change my regular expression and I'm going to just do this right here again I'm going to change my right expression to say the beginning of the string followed by three digits followed by the end of the string so if I use those position meta characters beginning an end now if I say our test one two three I get true but if I say whoops our test one two three ABC easy four five six that's not the words you'll say I get false because that regular expression with beginning followed by three digits followed by end does not match so this is something you can play with just to experiment with regular expressions what I would like to do in the code right here is I'm going to I'm going to do this right here in the code so let's say I wanted to do some sort of validator to say I've put in a valid email address so I'm going to go to the program and my sketch and I've already put in a lot of code from a previous example where basically the string I get is the value of that text field so now I'm going to say I have a regular expression which is any number of word characters followed by an at where's an at at followed by any number of word characters followed by a literal dot followed by net or calm or org right so this is my regular expression and then I want to say I'm going to just say create P the regular expression test it against that string so I'm just going to on the screen say true or false whether it's a valid email or not and you know I should I should probably test this regular expression out in the atom editor or some other form just to see before it works but I'm going to guess that it's about right so I'm going to now go to my code and I'm going to hit submit rainbows and unicorns is not a valid email address but rainbow at unicorns dotcom is a valid email address and I think by the way it got true twice because I have both I have two events I have the why did that happen twice let me just see here again that only happened once rainbow at unicorns calm I wonder why that's happening twice changed oh oh because I have both the changed event and mousepressed so the changed event is like I tab out of the out of the text field and that if I'd got so if I I'm going to comment that out just to a unicorn unicorns at rainbow calm submit true so you can see this is how I could use a regular expression in a piece of JavaScript code hooray okay now let's go back to over here and I want to look instead now at string match regular expression and see what we get with this particular function this is kind of interesting okay so now over here let's let's see if I could work this out I want to make a string no idea what I'm doing for RS equals when in doubt unicorns and rainbows and cupcakes hopefully vegan nutfree no not after I like not something I allergic to nuts maybe just vegan I don't know whatever I don't like dairies I have a problem with whatever that's really not relevant to programming videos right okay unicorns and rainbows a cup plus no sugar it's not very good for me okay anyway um so that's why straight that's really not gonna be good you know what you should all enjoy a buttery delicious frosting full strawberry flavored delicious cupcake please enjoy that if that's the kind of thing you like in your day today okay so that's the string now I'm going to make a regular expression where I'm going to say unicorn is my regular expression looks like though I'm going to say s dot match R so the match function unlike test where I say our dot test s right I'm going to do that really quickly I say our test s is true what happens if I say s dot match R so this is actually quite a bit more useful because what does it give me it gives me the actual thing that was matched for example let me let me change our whoops let me change R to be a regular expression that is backslash W plus whoops R is a regular expression backslash W plus and now let me say s match our huh I still just got unicorns so why did I still just get unicorns well in fact what is s unicorns and rainbows and cupcakes I got the first match only of backslash W plus this brings up a really really key and important aspect I don't know let's try let's try carpel of programming with regular expressions and that is this idea of flags flags are a way of modifying the behavior of a regular expression and there are two flags that I'm going to tell you about all right there's another one or maybe another one but two that are going to be relevant to these videos G standing for global and what that means is don't just match the first thing match all of them and I for case in sensitive ok g for global i for case insensitive so let's look at how it works with those flags i'm going to come back over here and i am going to clear this out and I'm going to say VAR R equals a z + /g so notice the flag goes after the regular expression the regular expression is in between the the slashes and the flag goes after the Reg expression so if this regular expression is now global and I now say s match are what will I get I get an array with every single match of that regular expression oh goody excellent yay ok I got a match with unicorns and rainbows a really easy quick way to just grab a whole bunch of things so you know as an exercise do the phone number thing and grab all the phone numbers and have them into an array now let's let's um let's do something with that text let's let's capitalize some stuff whoops let me capitalize unicorns with a U and ah oh my god cupcake I'm just going to do this let me capitalize these two letters and a company so let's look now at the case sensitivity flag so let's say I do G ok so let's say I just do this again I have to say now let me do this again s match our notice whoa okay I got up cakes what's an up cake and cupcakes so of course I forgot about the whole word boundary thing so you know I could be a little bit more thoughtful here and I could change this to have a word boundary followed by a word boundary right and now I can do this again I just got unicorns and and rainbows right I did not get and with a capital A or C because I'm only looking for lowercase letters so what I could do is I could add another flag I so if you want multiple flags you can see that right there one flag followed by another flag so if I both of those flags and I do this match one more time if I do this match one more time now I've matched everything so you can see here how the flags work I need a global flag to do to match the right expression multiple times in the string and the eye flag for case instance in case sensitivity now I could add this I should probably add this stuff into the Cobra probably going to save this for doing like a coding challenge a little bit later I think just working in the console it's kind of useful here and as an exercise you might take this example that I'll post and run the match and kind of display what it matches down here maybe I should add that in but let me go a little bit further before I do that because let's think about that phone numbers for a second okay so let me let me revise the code for a little bit I'm going to go to that phone numbers example I wish I had something more creative but it's kind of a useful example so I'm going to go to the HTML file and I'm going to say here and I'm going to make a simpler phone number here are two up like numbers 1 1 1 2 2 and 3 3 4 4 4 5 5 5 5 okay so I'm just going to use these two phone numbers so you can see and of course in this example I can mess around and type other stuff to play with it but that's what's going to appear there by default and then when I hit the submit button what I want to do is say matches you equals s dot match what a regular expression so I'm going to write a regular expression which is let me think about this okay three digits followed by a dash or a dot followed by four digits okay so this is my regular expression three digits followed by a dash or a dot and I want to call the match function with this string and that regular expression and that's going to give me the array of matches and then what I want to do is I'm just going to I'm going to write a little loop that says for everything everything matched create a paragraph with what it matched right so this is kind of a pattern here which create a rather expression match that regular expression in a string and then loop through and display all the things that it matched so if I run this now I'm going to see this now I only saw the first one why do I only see the first one because I forgot the global flag so if I add the global flag in the code and run it again I can now see I've matched both of those things and I could add another one and you know two two five five five six and I could hit submit and now I see all three of those okay now here's a question though what about those groups what if I want to capture particular groups you might be asking are you asking I don't know I'm asking it so let me add a capturing group for example I want to capture the first three digits how do I have access to that so let me go and refresh this page now one thing I can do is I can just mess around with this in the console so you can see the console I now have in the variable s I have those things now let me get this regular expression so I have that regular expression now and I can say look at this f dot match R where are the groups they're not there let me do something again let me take out that global flag I'm going to take out that global flag now I'm going to say s match R again look now now the group is there notice how this is group zero the full match followed by Group one so if you are not using the global flag the match function will give you the group's as an array if you are using the global flag you need to actually write the code in a different way and use a function called exec and I'm going to leave that for a separate video I'm going to show you how to loop through and capture groups with the exact function and I'm just going to do that in a separate video and that'll be exactly the next video that you can watch right after that one if you want but here I've shown you some basic ideas for how to take text and match stuff with a regular expression and you can hopefully come up with some more creative ideas of how to do that ok good bye