hello welcome to another coding challenge this coding challenge is part of the programming from A to Z course which is all about programming with text and so in this coding challenge I am going to implement from scratch a Markov generator so I need to talk about what it this thing called an Engram is I need to talk about what a Markov chain is and then how I use a Markov chain to generate text so we do all that and write the code from it in JavaScript from scratch in this video one thing I want to just plug our reference is this wonderful article online by Victor Powell Markov chains visually explained if you're looking for a supplemental resource to sort of think about Markov chains and how they work this is really terrific and I recommend you check it out so I'm going to come over to the white board first a Markov chain is a sequence of states so what could those states be actually in Victor powers article he references you could think of the states of a baby playing crying eating sleeping and you could imagine well what's the sort of typical sequence it does the baby first play then the baby eats then the baby sleeps and then the baby will cries and that's kind of like a typical sequence but sometimes it happens in other ways right we could kind of boil this all down and make the states you know we could think of sort of this very like in a sort of cold mathematical sense a B and the idea of a sequence means there's always a transition a moment where the state goes from one state to another so we could think about here that ah a could become B or maybe a could stay as a and B could become a or B could stay as B so if these are all the possible states and their transition to another state and we said that there is a 50% chance of this happening or a 50% chance of this happening or a 50% chance of this happening or a 50% chance of is happening we could then create a sequence that matches these probabilities I could say start with a I could flip a coin heads it's a I could flip a coin heads it's a I could flip the coin tails it's B I could flip a coin heads it's a I could flip a coin tails it's B right so this idea here is that I am generating that sequence of states based on existing States and probability of an outcome after that so this is used for a lot of different kinds of systems you could imagine looking at financial data as a sequence of state scientific data weather patterns predicting an earthquake based on some set of sensor readings in and how they sequence that's this sort of thing so Markov chains are used in a variety of fields to analyze a sequence of states and also generate or predict outcomes based on that sequence now what I want to use them for in this video is to think of text as a sequence of states so let's say I wrote the sentence this rainbow has a unicorn flying over it so on the one hand I could think of each character as a state so how many possible states are there well maybe there's 26 lowercase characters 26 uppercase characters different kinds of punctuation and I could say the state is T followed by H followed by I followed by s right followed by space followed by r fall by a fall by right so I could think of this as a sequence of states on the character level I could also think of this as a sequence of states on the word level well maybe there are however many tens of thousands or hundreds of thousands of words and in the English language each one of those could be a state the state is this followed by rainbow followed by has followed by a now in a small corpus in a small source text I won't see that many possibilities the word rainbow is the only word that ever follows this but if I were to evaluate a large body of text I would see this followed by rainbow followed by unicorn followed by this dot for JavaScript programming right and I might be able to say you know what comes after this a lot this rainbow and I could start to adjust these probabilities based on an existing source text and this is the idea if we can read in a text look at what kinds of characters come after a given character and how frequently I can start to generate a text based on those probabilities but there's one more element to this right now I'm talking about just each state being a single character or each state being a single word but there is a concept known as an Engram an Engram being a contiguous sequence of characters or words a continuous sequence of text and an Engram has something associated with it called an order we could say by Graham's being engrams of 2r trigrams being engrams of three and when I say that I mean let's look at all of the trigrams in this particular sentence this rainbow has a unicorn here's a trigram thi the next trigram is H is the next trigram is AI s space I'm doing an underscore for space the next trigram is s underscore R so what I could do is actually consider the states not to be single characters not to be single words but by Gramps our trigrams our engrams with an order of four or five or six in other words I could say if the state is th thi what are all the possible characters that could follow that so what I want to do is read in the text make a list of all of the engrams in that text let's just say an order of three to start with all of the trigrams in that text and then for each trigram make a list of all the possible outcomes then I have a statistical model of how the text is put together on a character level and I can use that statistical model to generate new text with those same probabilities and properties so this is what I'm to start to build right now and the I'm going to build it on the character level and maybe I'll do a second video where I adjust it to work on the word level okay so what's stepped on something so let's start programming this so I have a completely empty p5 sketch and I want to start with putting some text at the top where I will say this rainbow as a unicorn flying over it and I don't need draw and I don't need a canvas so the first thing I want to do is simply make a list of all of the trigrams so I'm going to include a variable called order and I'm gonna say order equals 3 and that's the thing we could adjust if later I want it to be by grams or in grams of order 5 that sort of thing and I'm going to just loop through the text so what I first want to do is just look at every single character one at a time text length I plus plus and then what I want to do is pull out the trigram so I can see plainly that the first trigram is thi and the way that I can pull out a piece of a string from another string is with the function substring so I'm going to say VAR gram equals text substring and I could say this right 0 comma 3 would give me thi now you might be wondering the index values are th is 0 1 2 3 why doesn't 0 comma 3 give me this an important thing to remember is substring the first index is included the last index is excluded so actually 0 comma 3 gives me thi 3 characters from 0 1 & 2 which is accurate 1 but I don't actually want to say 0 comma 3 what I want to say is I and I plus 3 because what I want as I'm loop a is thi then H is then is space then s space are that sort of thing and I can make a variable called engrams and I can make it an array and then I can say engrams dot push gram and at the end here I could say console dot log and grams so let's run this code and this is just a simple piece of code give me a list of every trigram in this particular piece of text and we can see there it is I can make this a little bit bigger for you in case you can't see that and you can see there all those engrams now there's a little bit of a problem notice at the end T period and just period so those aren't trigrams those are just two characters than one character that's because I let it loop all the way to the end and I actually want to say order plus one I think or I could just say less than or equal to text dot length order so that should give me our space I space I T and I T period so now we can see there's the list now here's the thing this is not a unique list of only of the trigrams this is just a list of every single trigram but ultimately what I'm going to want to do and I'm come back over here is what I want to build is a big table I want to build a table where I have you know trigram ABC points at all the possible things that could come after it and trigram f EG all of the trigrams that's not the alphabet efg ABC I forgot D if you cdef all the I'm not putting numbers here I kind of lost my train of thought there but I want to I want to build I want to build this table so what I need to do is pair a trigram and Engram with an array and guess what remember when I made some video about word counting we said hey let's pair a string with a count and I use the JavaScript object as a collection of name value pairs we can do exactly this year only the and the name the fields the properties of that javascript object are the engrams and instead of having a count with how many times they appear I want to have an array with all the possible outcomes after that so let me come back over here and start implementing that in the code okay so so first instead of having an array of engrams I want to have a object yes an object and when I find a gram I want to ask does whoops does that gram already exist right if that gram already exists well let's just do a count for right now I could say you know increase its count otherwise otherwise set its count equal to one right if it doesn't exist says its count equal to one if it already does you know I this is kind of silly of me but I feel like it's a little bit more readable if I write it this way right because if it doesn't exist said its count to one if it does exist increase its count so let's go back over here and see what do I get now unfortunately the text that I wrote everything only appears once so what I'm going to do is I'm going to artificially create some text where there's a bunch of things that appear multiple times so let's try it I don't give you guys is there some people watching a live chat can suggest things for me to write so all right the theremin is theirs okay yes it is this is a theremin that's like the weirdest sentence but now at the very least if I run this again you can see that certain certain um certain trigrams appear many times like space is appears three times space th appears four times this is an alphabetic order th e appears four times s comma space appears twice so we're seeing the frequency of these trigrams these collections of three care characters so all I've done so far is make a nice little table which counts how many times the engrams appear but I want boy I want more what I want to do is what I've got over here I want to have a list of things that come after and what do I need my after is what what whenever this trigram appears what's the character that appears after it so if I come back over here what I want to do is when I have found a new brand that I haven't seen before make an array the key the key for this I'm sorry here the key for this the value for this key in the object is an array and then of course what I want to do is put something in that array like the next character and what is the next character the next character is I plus three push.txt car at I plus three right because I'm looking at this sequence of three characters and the one that appears right after it is number that is three later and then of course if I have already found it I don't need to make a new array I just need to push that care you can see there's some redundancy here so let's clean up that redundancy I can actually just say if it's not there make an array and then always push that other character in it so let's see what happens now if we look at what I'm storing them data okay look at this now look at this if I go down to th e and look at that we can see look what are the possible things so after th e I could have a space I could have an R or I could have an AI and look at this R appears twice now in some cases when I'm programming I'll see that are appearing twice and think this is not so good there's some redundancy here I should just have R and a count of two we did this forward counting right we didn't want a list of all the words with the words in there multiple times we wanted a list of unique words and their count but there's something going on here which is that if this is my set of possibilities space R I our what if I said to you pick one random possibility pick space or or our or I or R well R is actually going to be picked 50% of the time I only 25% of time and space only 25% of the time the mere fact that we are duplicating the possibilities over and over again into the array the more times they appear the more likely they'll get picked when we generate text so this is actually a side effect that having this redundancy that we actually want so this is really useful you could kind of say like oh this is inefficient it's wasting memory and I could store a number and I could do some other kind of math and all of that is true and I encourage you to go forward and go forth and make a more compact version of this but the ease of doing it this way and come on these are individual characters think about how your computer stores images of millions of pixels and videos it's not that much of a memory overload there's a question of scalability and how much data you know eccentric setter but I think we don't need to worry about that right now this is going to work beautifully so let's look at this I'm going to come back over here right now and we are getting there we have now space RI r we have this list of trigrams and the letters that come after it so what I'm going to do now is I am going to build into this I'm going to I'm going to add some stuff to this example I'm going to create a button because I what I want to do is have a button equals create button and I'm using some code from the p5 Dom library which allows me to quickly mock up some interface elements and I'll call that generate and then I must say a button dot mousepressed and I'm going to say a Markov it so now I'm going to run the marker I'm going to I now you to write an algorithm to generate the text and then we will say create P the result so right now of course let's just make sure this works right now all I'm getting is the result but ultimately of course what I need to do is right here I'm going to write an algorithm that generates text based on the input so we have a question I mean I have a question you might have a question where how do we start right this is the text the theremin is there's okay yes it is um how do diss my grammar okay what's up I'm getting worried but um what do we start with now this is a question that I will think about and talk about and maybe about and think later either later in this video or in the next video because there's lots of different kinds of ways you might use a Markov chain or using a Markov chain to generate short phrases or a long bodies of text or how are you reading in the text are you reading in a bunch of short phrases are you on the character level the word level but for right now the simplest thing I'm going to do is start just with the whatever the first three letters whatever the first Grand Graham is of this text so I'm going to go down here and say var current Graham equals text substring 0 comma order right I wanted from 0 to 3 that's what I want to start with now what I want to look is say what are the possibilities the possibilities are and right I want to look up what are the possible next characters with based on what the current Graham is and that's what I just built this whole object to have it has an array so now I can say next equals I want to pick a random element from that array and guess what p5 since I'm using the p5 library it has a function called random if I passed it an array it gives me a random element from that array so it's going to pick that random function if it's this array it's going to pick space our IRR randomly one of those ok so once I have that I can say the result is I can say the result is the current gram plus next and I can create P result so let's just look at this and do some generation there there there there the space there their commune I they thi so you can see I got ARF about 50% of the time I got space 25% of the time and I 25% of time not exactly of course because this is probability based and I could run this again we could see the you know R is going to come up more often but I'm getting all these possibilities and I'm standing in front of this so I'm going to move this over a little bit okay so now I only did it once though the point is once I've done this now I want to look at the grand h ER and see what are the possibilities next and generate a new character that I want to look at ER and whenever I pick there and then what are the possibilities after that so I want to do this I want to iterate and continue to do this over and over again so when do I stop doing this that's another question that has knows a bunch of different possible answers but I'm going to say right now basically what I want to do is let's just say I'm going to do this 10 times I'm going to write a little loop to do this 10 times and what I'm going to do a result needs to be a kind of a variable that's declare right the things that I need to do before the loop are pick the starting frame starting Graham and Graham and start that result which is that starting and Graham then I will only have to add the next character so what I'm doing is saying 10 times give me the possibilities then pick a random one and then add it to the result but then I need to go and look at the next current Graham and what is the next try Graham it's the last three characters of whatever I've generated so far so I can say current Graham equals text dot substring text dot length minus 3 text blank oh not text the current result right what I've generated so far right yes excuse me sorry text is the original string which has plays no role anymore the original string was simply used to build the table of engrams and they're possible next States so now and I could um just to make this a little bit shorter just so you can kind of see it a little more easily I'm is going to write it like this so what I'm getting right is that I want the next gram to be the last three characters of the text so now if we do this whoops I have an error in line 30 plus result up result plus equals next there I don't know what was going on there but there I'm in the theremin there's okay there there are many uh so we can see here instantly how I've got these sequences of ten characters that have the quality of the source text but they're randomly new let's grab some different text and see what happens so I've got already here prilep remade like text about unicorns from Wikipedia because I don't have any other ideas and I'm going to comment this out and just say VAR txt equals and paste this text in and keep the order at three let's allow the N great let's allow it to generate 50 characters in length and let's refresh and hit generate we can see what do we get the erroneously beast with the unicorn is of nature the yonce of narwhal with a symbol of the unicorn wha and you can see it just sort of cuts off I can I can um let me actually let it go for longer if it can as well as let's make the order 600 K so we got an error so this this is not so this is quite likely happened so first of all what there's all these crazy numbers in there so I can tell you what the error is which is that if it can never if if this possibility is to somehow undefined then this random function won't know how to pick something from an array there's no array and the rhythm function actually is meant to give you a random number so that's why I suddenly got a number random number in there so one thing I can do to just add a little protection here is say if if not possibilities meaning if it's not defined then break this is a way of having the Markov chain end if it had no more possibilities so let's do this and I think the issue that I've got here is oh you know what I did actually I hardcoded in the number three so this should really the order right because I'm change the order meaning the length of the Engram so I can't just have you know use the number three anymore down there that's a big problem okay so now let me run this generate whoops oops I also put the hardcoded number three in up here oh this is awful you guys in the chat are already telling you this so now I can hit refresh it's not over yet Oh else oh look I have it over here I think this is gonna work now yeah there we go so you can see here I'm getting with with an order of six I'm going to get much really get less nonsense right because it needs to have sequences of six characters that actually appear in the original source text and so but if I were to give it something like an order of two we can see we're gonna get a lot more nonsense like the in its growl the symbol we can soda parable olara kumali alley are empty by the unique in yahwah okay so this is my favorite word right here so tension choochoo teamily anyone that's I got it that's the name for this channel so ten ten to nine milli coding rebou okay so laughs um so you can see that there's a lot to play with here so on the one hand this video is over and in fact it is over I'm good in the next video look at a few different scenarios of using a Markov chain to generate long text versus short text and in the next video what I'm going to do is um try to use a Markov chain to generate a new name for this YouTube channel so hopefully I'm going to publish the code with this obviously it'll be linked in the video's description and I look forward to seeing what kind of source text you might use that's different than the source text I'm using and what kind of how you might present the outcome is are you kind of appropriating another design to make it appear as if it's generating news headlines are you recreating a Twitter bot that generates text using a Markov chain there's a lot of possibilities there and I hope you will share with me your results thanks for watching