hello welcome to another oh my God I can't believe I'm making a fourth or fifth I've lost track video about context free grammars so in this video I'm going to do something a little scary um which is instead of using an engine or library or framework like tracery or Rita I'm just going to program a little context free grammar expansion system without anything at all just my own wits and fingers we're going to see how that goes right so remember the idea here is that I have a system a language that has valid elements of it valid letters of the alphabet so to speak there are um and a set of production rules so and I'm going to use a very simple set of production rules and try to write a recursive function a function that references itself to recursively expand this grammar tree it'll be like magic I think or or there's going to be a lot of problems that are going to happen okay so um I have preexisting examples where I've done this but I think I did that many years ago and I ported it from somebody else's examples namely Allison parish's wonderful python uh examples linked to um Allison's resources on a course called reading and writing electronic text in this video's description so the first thing that I want to do is um I know I'm going to need some sort of uh object probably a JavaScript object that has a set of rules in it so and I could I could just write these in maybe I'll just write them in um so I could say and if I'm kind of like going off of what's here I could say okay uh sentence becomes the EnV and a uh I have to go over here and look the uh a noun um is a cat or a dog and a verb is a uh woo a uh meow or barks so again this is my incredibly lame grammar boy we could do so so much better and we also have to think well what really is going on here should I be what syntax should I use like maybe it makes more sense I think it might make more sense I would sort of prefer to do this like have these all be an array because an array is going to be easier for me to work with ultimately so I'm going to do that right I don't want to like have to parse this like pipe symbol and all of that so what I'm going to consider is an array is an array of options with equal probabilities um and right now the only possible sentence is the NV the only possible ns are cat and dog and the only possible V is meow and bark so what I want to do is I want to uh figure out now I need some sort of expansion algorithm so what I need to do is I have a start so my start is just going to be the sentence s okay now what I need to do is um let's just make sure this program is kind of and I have some errors here like I'm missing a comma here so let me just um kind of uh say result equals start and see what happens here uh whoops I'm in I don't know where I am I you want to be I'm probably uh I'm probably running editing the wrong code don't I always do this no I'm in the right place uh oh I just didn't console log anything uh and I'm just going to say create p uh result so the idea here is oops s so I want to get more than S so how do I do this well there's a variety of ways I could it could sort of think about doing this but I think what I want to do is I want to sort of build out an array so I'm going to say expansion equals um you know I could try to use a for Loop and maybe run a for Loop a nested for Loop to do it multiple Generations but really this type of system I don't really have anything in here that's nested but if I add some nested stuff to it I'm going to need a recursive algorithm so I would love to refer you to some videos I have about the concept of recursion which typically in other videos I've made I've used for graphics drawing I could make a recursive tree structure and um a self similar shape a recursive something is a recur a function that's defined recursively is a function that defined it that calls itself so um I'm going to come back to that uh but let's let's just start let me start writing this code is this a coding challenge I think it is um okay so I have an expansion and what I want to say is I want to say expand start expansion because what I want to do is I want to call a function and I'm going to say here result equals that so I want to have a result and that comes from starting with this and I want to pass it an empty array because that I want that array to be filled as it's going through and and expanding based on the the rules so to speak so I'm going to write this function up here and it gets uh I don't know what to call this a an element a phrase I'm just going to call it um uh a start so to speak and I'm going to call this expansion which is kind of a little awkward that I'm using the same variable names but I'm going to do that anyway okay so what do I do here well first I need to determine is start something in the rules is it terminal or not terminal if Rules start right it does it exist is it something in the rules if it is what do I need to do well I need to expand whatever I need to expand one of the possibilities that it might pick so first what I need to do is I need to pick something and one of the lovely things I can do in P5 is I can pass an array to a random function so if I say give me a random value right that's going to be picking if if it's getting n it's going to pick one of cat or dog and then I need to expand that so then I need to expand uh what it picked and then I need to continue to pass this expansion array because this expansion array is just getting filled recursively as this kind of function unfurls this is I going have to like come back and and and this is going to be I can tell already this is going to be the not the kind of video that you need to watch over and over again but this is going to be the kind of thing that you're going to want to sort of like hand write this code and play act it out or something with a friend um to to sort of figure out what's going on here now what if it's not and something that expands then what do I want to do I want to add it to that array uh expand push what I picked so the idea is that I want this to keep going um and we can think about what the tree I I wonder if there's a way I can diagram this to help you to help make first of all let's just see if this works um and then I'm going to uh um what I want to do is I'm going to say result uh join with it's a it's a it's a let's console log the result it's going to be an array let's see if this even works because I might have made a mistake undefined hey undefined there we go taada um all right so what went wrong I'm looking at the chat uh rules tart no I thought I someone was saying I made a a typo there so let's see if we can um figure out what's going on so let's uh let's uh console.log pick see if that's even working ah so that worked we got the uh I don't know why I can't I'm zoomed out we got the nvy sketch line 10 so that worked um and then pick oh o oh so here's something that's kind of important right uh this would have this would work I I haven't been paying attention but these when it these are three different uh kind of elements that I need to expand so I hate to do this to you but I really kind of feel like what this should be is an array inside the array I could start to use split and stuff but I want to um I want to think about a way that might make sense and I've missed something here oh I need a quote there let me just make this change um and then we'll kind of discuss it this is my own strange way of encoding this I'm sure any of you watching will come up with a better way and you will share it with me in the comments and I will feel embarrassed that's part of programming feeling embarrassed although you shouldn't feel embarrassed it's okay if I I'm going to feel embarrassed because that's I generally operate in life by feeling embarrassed but coding is about figuring stuff out and playing around and and iterating to refine things later so the reason why I'm doing this wo look at that it autof formatted it for me the reason why I'm doing this is because what I want is to have a bunch of options but one of the options this is not three possible options this is expanding s into three tokens so to speak this is expanding n into one token or this other one token so you know I could say this or something like the funny cat whoops and it would look like this you know but the reason why I need to separate this out is because the N ORV might be things that need to be expanded and the truth of the matter is I could just do this but not if I need to treat these separately as things that might be expanded so you know I could do something different with splitting but I'm going to I'm going to keep my uh train of thought here and what I'm going to do now is once I pick something here I'm picking an array right and so what I need to expand is each one of these so I need to say four VAR I equals z i is less than pick. length i++ and then I want to expand pick index I so I want to go through and expand the then n and then v um and then uh push so let's look at this now and see what happens and we can see um I still getting undefined at the end so but I'm getting something promising where I got the NV then I got cat then I got barks so it looks like things are working correctly oh I'm consoling logging result really what I want to console log is expansion undefined undefined undefined this is promising so let's look up here ah pick H oh no no no no I want to push start so there we go sorry so this is the thing coming in if it is part of the rules then I need to split it up and expand it otherwise I need to add that to the end so that's what I was missing there and now we can see I get the dog barks and what do I want to do now the thing that it results in is a um uh an array of elements and I want to um and so I wonder by the way if it makes sense for me to just say return expansion um and in that sense I can have the function also sort of return that array which is sort of unnecessary but um yeah that makes sort of sense to do that and then what I can do is I can also say return expansion join with a space and then now you can see I'm getting these sentences the dog barks so now what I have is console log result create P oh there it is the dog barks so you can see I'm getting these and I could do this a bunch of times uh just to get a bunch of different uh sentences to make sure this is really working and now I'm going to run this and we can see oh look at this craziness ah what's going on here uh I made a mistake and I've got to start over uh each time uh so I want to do that 10 times so we can see the dog barks the dog meows the dog meows the cat meows so this in theory is working right now and what I would like to do is take somebody else's grammar and apply it in here to see if we can get something that's a bit more sophisticated so I'm going to pull a example grammar file from um Allison Parish um and I believe that is this so this is a much nicer uh grammar and what I'm going to do is I'm going to uh just paste it to the top here and I'm going to put it in comments just to sort of make the argument uh that and I feel like the this cooking show thing should happen where now this video is going to get edited where all of a sudden you see the result down here of me translating it but I'm going to walk through translating one at a time in the archived live stream and we'll see what happens in the video later okay so you didn't have to watch all that but I went and converted that this grammar which is from an example from Allison Parish thank you Allison parish and I converted it to this syntax that I developed which is probably um and you can see now I have a slightly more complex sentence first of all I have two two different options noun phrase verb phrase interjection noun phrase verb phrase and the powerful thing here is that a verb phrase can also include a noun phrase or no noun phrase so there's the recursive nature of this algorithm of kind of expanding this sort of nested tree is much more apparent now so let me go and um I think what I should do is uh quickly um create a nice little button to do the generation uh so where am I I'm going to say button and I'm going to say button equals create button generate and then button uh uh Mouse pressed uh CFG uh like The BFG but a CFG and then I'm going to say function CFG and I don't um I'm going to uh expand this grammar and create a paragraph So let's look and see I have a button the dichotomy that winds for grounds that Tam seagull the corsage foregrounds the corsage that foregrounds this amoeba the corsage amoeba whines I feel like I messed something up but I'm sure I probably messed something up in the grammar but um you'll have a um you get the idea here so this is the the key piece of this is a how are you deciding to format your grammar right how are you creating terminal and nonterminal symbols I've chosen to use this sort of set of nested arrays and the real key here of course is this recursive algorithm so as I'm starting with one element I expand that and then I look over those elements and call expand on those elements and call expand recurs this function is just calling itself calling itself and this like computer just keeping track of everything and then at the eventually it's going to finish doing all that and at the end it's going to have this big array of all of the terminal uh elements of this new sentence and will uh join them with the space bar and give you that result back which is displayed in the browser so so again just to summarize I think if you want to work with context free grammars using a um using a JavaScript library like tracery or Rita are both great options if you're interested in digging into the algorithm itself um this is now an example that kind of shows you that and just to kind of make this point a little bit more I want to show you that I you can also find a whole bunch of examples of mine that do this and a little bit more so if you go to the uh ad toz GitHub repository um you'll see that I have a context I have I have this same exact algorithm but packaged up into an object so this is a um a context free object that has the rules object it has an add rule function so you can even look at this if you want to kind of think about organizing this context free grammar into it its own kind of Library so to speak much like Rita does Rita is more sophisticated than mine um so you can look at these examples they do much in the same way of things that we this is the exact same grammar actually um you can look at this one which actually reads it from a Json file does the um Hau Generation Um there's this other example that is I want to show you because what it's actually doing is it's taking this is doing something more um it's using a text that I a file I could upload or drag or paste in but it's actually generating the grammar on the Fly based on input words so here I have the text from the rainbow Wikipedia page and I could sort of generate hauz uh with that particular text you know if I made up my own text if I refreshed this and said uh generate some hauz 1 2 3 1 one two three happy dancing rainbows unicorn uh um uh what else what else uh purple pink right we could sort of see I could generate the grammar and I could generate some haikus and you can see I don't have any I don't have enough stuff so I'm kind of getting some of the these became terminal symbols because I don't have enough stuff but if I had you can see hauz 2 unicorn pink pink dancing 2 so this is also something you might want to think of and this by the way also has a little button that allows me to save that and I can actually look at um the Json file itself the that the program actually generates that grammar and you can see here it sort of calculates and it it sort of it couldn't find any four syllable or five syllable words in the seed text that I gave it um so I'm going to see if there's any other um yeah so that's um I I want to make another video where I sort of maybe tie into into context free grammars with L systems I encourage you to sort of look at some of my other videos about L systems which are a context free grammar but the uh the idea of them is to um create graphics and I will do one wrapup video to talk about some exercise ideas that you might make and certainly one of the things that I'll talk about I'm mentioning this now because I don't know if I have time to make that video today but it'll come eventually is you might think of what if the elements of this grammar right aren't words but musical notes or Design Elements color form how could you use a context free grammar to generate visual designs generate music other types of things Beyond just text okay so I hope you enjoyed this coding challenge of kind of coding a context fre grammar from scratch and I'll see you in a future one at some point in the future