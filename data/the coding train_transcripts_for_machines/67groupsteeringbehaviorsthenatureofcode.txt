hi you may be wondering what's going on in the world today we've got a lot of videos about steering behaviors but there's two things about the steering behaviors that we haven't considered that are perhaps the most important and earthshattering exciting parts of working with steering behaviors what are those two things number 1 and number 1 is what this video is really going to be about we have all of the videos have been individual behaviors I need to follow this path I need to follow this flow field I need to seek this target I need to catch this thing flee from this thing what we want to look at our group behaviors uh what is this steering what what is it what does it mean to have a steering behavior where the desired velocity is determined based on the behavior of other vehicles in one vehicle given neighborhood that's what we really need to look at I don't know if you remember we started looking at thinking about raping Berg vehicles and looking at Casey Reese's process compendium all a lot of these behaviors involve entities sniffing out other entities around them and making a choice to move based on that that's what is going to allow us to ultimately build these unpredictable complex systems simple elements simple rules globally intelligent and amazing and exciting emergent behavior okay so I'm filled with hyperbole today exciting ok um so this is this for that's one thing number two is we haven't actually looked at what happens when we combine two behaviors what if you want to both follow a path and also seek a target or it's escaped from your neighbor but but while you're on a flow field so that's that's what we're gonna look at and kind of on the next video but but but what do we have here so here is a personal everybody I think I said this already everybody should have a favorite staring behavior so pause the video take a moment and try and decide what is my it's like your favorite color your favorite stare maker my favorite favorite steer maker is cueing so this is a group behavior it's actually a combination to number one there's a desired velocity of making it through this doorway but there's another velocity which has to do with not running into your neighbors so you see this really nice behavior of all of these vehicles going towards this doorway but also stopping and kind of jockeying for space around that doorway so how do we implement first before we can get to combining them how do we even implement a group behavior so let's take a moment the first one that I want to look at is a simple behavior known as alignment so what is alignment I am recording this video what is alignment alignment means my desired velocity is the velocity of my neighbors I wish to align my speed and direction with how my neighbors are moving so you can imagine how that might play out if this vehicle is moving like this and this vehicle is moving like this ultimately eventually they would hopefully align with each other and be moving in the same direction how is it that we can make make this work I mean you know it's not so complicated if I only have these two vehicles like I say hey what is this vehicles design this is its current velocity what is this vehicles desired velocity well this vehicles desired velocity is that once it wants to align with its neighbor and this vehicles desired velocity is that one so they each have this desired velocity they steer and we end up getting ultimately the Sayle to this every frame the same velocity moving in same direction it's a bit more complicated if this is a given vehicle let's forget about its curve velocity for a second and there are several other vehicles around it what is this vehicles desired velocity in the case of alignment in the case of alignment I'll write this all out a vehicle's desired velocity is the average no it's just it's not quote it stars and hearts I always want to draw Minds it's the average velocity of all neighbors now what does all neighbors mean this is an interesting question remember when we started thinking about the tongue is agents we were taught we we said an autonomous agent has a limited ability to perceive this environment so all neighbors could mean every vehicle in the entire world like imagine if you do alignment globally it'll be kind of interesting or it might mean just the things that it can see within a certain distance or within a certain range in front of it etc so okay but let's start with something simpler average velocity of all of its neighbors how do you get the average velocity of a whole bunch of vectors add all the vectors up I add 10 vectors together divided by 10 so let's take a look at this in action in code for a moment here we are over here and close out Reynolds and go back to whoops go back to alignment and let's take a look at this running run so you can see very very quickly all of these vehicles are circles are now moving in the same direction and as I add more that each are starting with a random velocity you can see that the the global kind of Direction starts to change based on some new ones ultimately there's not enough of them but you can see that they very quickly kind of like fall into place and this is odd result we almost feel like you're panning over a scene right when they're all moving at exactly the same speed in direction almost feels like they're still but we're panning anyway um so how does this work in the code this is actually a pretty simple algorithm if you look at the vehicle what is the vehicle doing it's saying hey let me look let me start with the sum of 0 let me look at every other vehicle let me add all the velocities together and let me divide by the total number of vehicles it's fine I'm gonna leave it this way there's a there's some extra stuff here like it seems a little weird that we're counting how many vehicles when we know the size of the ArrayList but we need that it because we're gonna add something period so the moment that's gonna make it much more interesting but you can see my desired velocity is the sum of the velocity of all of my neighbors and normalize that sum set it to maximum speed oh that's weird that's interesting I didn't realize I was doing this in this example but well we're actually doing years look at this this is an interesting question as we're saying hey it's not the average velocity of all the favors I just want to move at maximum speed in the direction of the average direction of all my neighbors that's one so something you could try doing is actually do not always try to move at maximum speed in your neighbors direction but move also according to their average speed so you'll get very different results but that's something you could try with this okay so but what is it that I really want to look at here notice again how the entire group moves instantly almost at the align to the same direction now this is because we haven't really limited the vehicles ability to perceive its environment every vehicle in this world can see all of the vehicles but what I would like to do which I think will be a more flexible and interesting simulation is say okay here are a whole bunch of vehicles this is a world of vehicles and let's say I this is the vehicle we're working on right now it can only see other vehicles within a certain distance so what it's actually doing is moving according to the average velocity of all the neighbors within a certain distance how do we do that as we're looping through we could find the distance between all of them and check is the distance less than some radius some lineofsight some neighbor distance we could call it so let's look at actually adding that to this program in real time a little live coding here so first of all we have that distance already so we have the distance between my location and the other vehicles location and what I can do here is I could say if that distance is is a little trickier if that distance is greater than zero when is the distance gonna be equal to zero I suppose there could be two vehicles somehow by accident in perfectly exactly the same location we're dealing with floating point values here that's gonna be so rare we at we check to make sure the whole thing distance is greater than zero because generally we don't want a vehicle to align with itself this doesn't really matter so much in this example when we look at separation where you don't want to bump into your neighbors you don't want to try to separate from yourself it's very painful I so there's a wake with the morning feel like I just want separate for myself but you know I don't I don't I never figured out how to do that yet okay so as long as that distance is greater than 0 or less then some neighbor distance and what is that neighbor distance I don't know what's a good number shout it out just shout out a number you're in your you know cave with your hood on and like the glowing light of the laptop is you're watching this video shout out a number okay thirty fifty hundred hundred okay let's try a hundred and let's so let's just check as long as the distance is within a hundred pixels what happens here so let's run this we can see pretty quickly again like I don't know if you saw we got a lot of the same location but you can start to see there so you like subgroupings ask the neighbors kind of find each other and get close one hundred was kind of a bad number to pick let's actually just bring this all the way down to 25 and you can see look at all of these sub groupings as they only now are able to align move this over here with their neighbors and I have with their sort of more immediate neighbors we add a whole lot of vehicles it's hard to like look and talk so you can see we're getting here even more interesting I would say it to me this is a little bit more visually interesting it feels more lifelike somehow and it's also kind of a little bit of a surprise we get these clumps so you can see eventually the whole world is moving in the same direction but if I run this again just from the beginning we can see these little small clumps starting to form and as the clubs get near then they align with each other they're within that distance okay so this works for you well let's briefly take a moment to just demonstrate separation and then I think we'll be done with this particular video okay so separation I don't know if you recall but earlier several videos ago we had a behavior called seek where we had a vehicle and we had the target and the vehicles desired velocity was in the direction of the target well so this is seek we could also have behavior we did I don't know how to demonstrated this but you could really easily make a fleeing behavior right here's the vehicle here's the target what's the desired velocity in the opposite direction of the target seek and flee separation is in fact a variation on Fleet so let's just say right now we have a vehicle and it has a bunch of other vehicles around it maybe this is too many we try drove this okay sorry everybody we have a vehicle and we have let's just do two vehicles that are around it so what can we do what we could do is say hey here's a desired velocity that is pointing away from this vehicle here's a desired velocity that's pointing away from that vehicle let's take the average of those two velocities and we have a desired and this is our ultimately our seek re separate set set bar rate desired velocity so we consider all the vehicles within a certain distance we create a vector that points away from those vehicles and then we take the average of all of those you know we that's pretty good I think we did a good job but we could make this a little bit better let's think about this from here's my vehicle here is a vehicle that's near me and here's another vehicle that's near me ask yourself the question which one of these should I be seeking from more vigorously he works right the one that's closer so we could actually wait the length of that flee force essentially that vector we could scale the vector that's pointing away from the target according to not the target away from the other vehicle it's too close according to how close it is and you'll see that in the algorithm that as we're averaging all of these separation forces the separation forces are weighted according to distance now I should point out that this is not collision avoidance you might start to think god this is collision avoidance but it's not let me explain to you why here is the vehicle and here is its velocity here is a vehicle that's really close to it and here is another vehicle that's close to it but not as close separate a separation algorithm will cause this vehicle to really want to get away from this one more than that one obviously it's gonna get closer to that one and then it's gonna want to move a collision avoidance algorithm might actually look at where it's going it is again and completely ignore this one so look at take its current velocity into consideration in separation we're not looking at whether it's in front or behind we're just trying to like create a perfect ring of space around ourselves which you know there's different scenarios that you want for different reasons but I thought that was an important thing to point out so let's take a look at this example running in action in processing okay so we have alignment here and alignment is by the way an extra example that I just added today to the github repository it's just called alignment but the separation one if you're following along in the book oops is actually example six point seven so I'm gonna put up example six point seven and we can just take a look at it for a second right now and just see as I add a bunch of vehicles you can see they're all trying to stay separated from each other you can see none of them are actually running into each other it almost has this kind of heating up gas particles like and they get all excited and jittery and moving around in a space sort of thing that's what you feel it looks like so you can see separation at in action here now let's take a look at the algorithm very briefly if we go into the vehicle class and we can see here we're what's really important is there is a desired there's a desired separation and in this case every ellipse has a radius and I'm saying I want to my desired separation is the radius times two and actually R if I look at how it's being displayed is not technically the radius fix that right now because I was using this the diameter so now if I run this again right we can see that this is actually what's interesting about this is it actually feels like this almost looks like these things are bouncing into each other we've created the illusion of like collision detection and collision resolution all that stuff that box2d did but in fact none of that is happening here what's happening is when they get close to each other a big force pushes them apart which is kind of like what happens with the collision so very similar outlooks and in fact you could probably do some kind of interesting circle packing algorithm here if you had them all different sizes and their desired separation varies according to their sizes that's a great exercise for you try to see what happens when you make them different sizes and see if you can have that separation force be weighted according to its size as well okay so but what I wanted to point out a couple things one is when I say if I say R times H for example you can see they're really trying to stay further apart there's not there's many of them so they can't do it perfectly but that you can see that they're not able to get as close to each other so that distance that they desire to be separated is is really quite important here and the other thing that we can see here is this is what we're doing again this is the algorithm that I said what we're doing is we're making a vector that points from the other from from me toward upstarting we're making a vector this is over here this is my location for very long time here this is my location this is the other location and separation says the force should be a vector that points in the opposite direction so we think of it as a force pushing it away we can see that's the calculation that's happening right here in this line of code and here look at this it's it's late its magnitude is being weighted by distance we're dividing by distance so if you divide by a number when that distance is big that separation force is smaller when the distance is smaller that separation forces bigger we add them all up we take the average of them we want to move away at maximum speed and then we implement steering equals desired minus velocity so this is exact this is very very similar to alignment the difference is my desired velocity isn't just a copy of my neighbors velocities it's it's a set of vectors that point way the average it's as if the average of all the vectors pointing away from my neighbors and so here we have separation so what's interesting about this and what we're gonna look at in the next set of videos is what happens when we start to combine these behaviors the last example we're to look at is this example the simulation of birds flocking bees swarming the swarming flocking behavior in FLAC in fact flocking is separation alignment and one more cohesion so as an exercise to yourself you've now seen alignment implemented separation implemented implement cohesion what is cohesion cohesion is my desired velocity let's is a vector that points towards the average location of all of my neighbors so let's say this is all of my neighbors and the average location is right over here each one of these objects desired velocity should point towards that center location so see if you can implement that it's there in the example if you're looking for the solution and we're gonna start looking at how to combine these different steering behaviors in the next video