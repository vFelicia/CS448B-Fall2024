hello welcome to another computer vision tutorial video in the previous video I looked at how to find of an object of a certain color and find the average location of all the pixels of that color which allows me to very easily track an object like this and you can see I can kind of move this around that I'm tracking it now what I want to do in this next video is look at something related but a little bit different to look at how do I find pixels that have changed so in this sense I'm writing a motion detector motion is pixels that are changing right because if everything is very still none of the pixels are changing but if I move those green pixels are suddenly becoming to my skin color and my skin color pixels or something on green pixels that sort of thing so I'm gonna start with this code example up but before I do that let's add just a little sort of simple optimization to it we don't really have a speed issue this is running very very quickly but this can as you move to higher resolution become an issue I did mention he in the previous video that this particular algorithm right I'm finding the distance seems weird distance between two colors where well just you can think of this threedimensional space as well that we live in as a color space and each color you know the xaxis of this space being red and the yaxis being green and the zaxis being blue and so colors that are near each other in the space are more similar so that's how this sort of idea of Euclidean distance works but the truth is this the distance function uses a square root so I'm going to write my own function here down here I'm just going to call it distance squared and I'm going to give it a six arguments whoops this should be x2 and what I want is to get that distance which is x2 minus x1 times x2 minus x1 plus and then I want to do the same thing with Y so it's the difference between X the x value is the difference between the Y values and the distance between the difference between the Z values all those values and added together now the actual distance formula would then take a square root of all that but I'm going to not do the square root thus this function is called distance squared I'm calling distance squared and so I can just change this to this and then what am i checking I'm not checking against the threshold anymore but I'm checking into the threshold squared and now I don't have any square root function which will make the code run a little bit faster and this could also I could eliminate having to square it by just like using the value that's already squared but I'm making the point here so you can see this works exactly the same way same exact math but I've eliminated a square root okay now that I've done that let's start moving on to thinking about thinking about how I can sorry how I can do this frame differencing okay so first thing I need to deal with is the fact that I have this capture event right in a separate thread the video library is calling this event function capture event every time there's a new image available from the camera video dot read here's a new image video dot read here's a new image video tree here's a new image so what I need to do is right before I get that new image let me copy the previous image to save it so I have the previous one and the current one so what I want to do is add actually a pea image object I'm going to call it pre eve for previous and then what I'm going to do here is say previous previous equals create image and I want it to be exactly the same dimensions as the video and I want it to be an RGB image so this is making a blank image in processing and then right before I'm about to read that image I want to say previous dot copy the video and then the copy function in processing says take what take the pixels in the video and copy them to this particular image but you can do all sorts of crazy stuff like you can take a little bit of this image and copy it here and stretch it out but I'm not going to do anything that interesting I'm literally just going to say copy the whole video onto the whole previous image so I'm giving it two rectangles and so and the other thing it's probably I worth doing is saying update pixels so this now I should have previous and the current video so if we run this let's just run this to make sure there are no errors but she was untied look I have a knee I've never I don't think I've ever shown my knee in any of these videos before and I'll get edited out okay so you can see this is still working nothing's changed but behind the scenes there's this previous image so what I want to do now actually is change what I'm doing oh and I think I might have messed up by not saving as let me do this right now motion detection so what I want to do right now is actually look at every pixel in the current image and compare it to the previous one okay so I'm going to lose this idea of a track color because I'm no longer tracking a color and instead what I want to do here is I want to get not only the current color but I want the previous color which is from the previous image and I'm going to call that R G B and then I can check the distance between those I can check if they're less than some threshold now this is a this is a difference threshold how different do they have to be to be considered motion and I'm going to leave all this average stuff in here because I'm going to use that in a moment but just so you see it right now what I'm going to actually do is say load pixels and in here I'm going to actually just draw to the pixels array of the display itself and I can use that same location and if it's a motion pixel I'm going to set its color to white otherwise set its color to black and then at the very end I'm going to say update pick SILS so oops we don't have track color anymore so now I'm going to run this and take a look at what happens come on video come alive whoops okay we got an error previous color goes previous pixels location now where did I miss I never said previous load pixels so because I'm going to look at the pixels of that previous image just like I'm looking at the pixels of the video I've got actually called load pixels okay let's run this again there's a lot of weight in here come on video ah it's 11 error what did I miss there array out of bounds exception I don't see why I should have an array out of bounds exception back after a moment of debugging there are two key issues that I had in my code that caused a lot of problems number one is something that's a little bit of a nuance to the the way the processing video library works but the video stuff is happening separately behind the scenes and by the time we get down to this line of code the video actually I the camera hasn't like opened its connection yet so the video width and height doesn't actually exist so I could be smarter about how I create that image but I think just to get this example working right now I'm just going to hardcode in the width and the height I know that my camera is giving me a 640 by 360 image so I want my background image to be that as well the other thing that I didn't notice I had as I went over here is right the current color is from the video the previous color is from the previous image the previous frame but I want those red green and blue second values to be not from current color but from previous color so I've got a I've got to fix that and now that I have that the other thing that I think might be necessary oh maybe it doesn't matter oh I might have not had this in there so I also make sure that I'm loading the videos pixels and the previous pixels and so now we should be able to see white pixels wherever there is no motion meaning the the pixel is the threat the distance is less and black pixels where there is motion so let's take a look that and you try to zoom in here so you can see what's going on come on image so you can see it's very very white and now you can see my arm is very very still there is no motion but if I move my arm the pixels are black you can see around the edges and I can kind of walk in you can even see like if I move the tshirt around you can see this and this would be a good time to see what happens with some dancing motion dance detection okay that was a good she weren't expecting that you ended up now you might be sorry you're watching this video okay um so there's a couple more things I want to do with this number one let me just show you something interesting about this I sort of actually also weirdly feel like reversing that so let's see the white is the black is the background and white pixels otherwise um but one thing I want to show you is I'm actually every time there's a new image from the video I'm copying the previous one but I could also by the way say hey let's take this code and just add it in mousepressed so what this is doing you'll see in a second is as this runs speed up here you're going to see uh it's all white I could click and it's now it's all black I'm going to click again there's a lot of auto white balance and going on you can see here that now it's just showing me pixels that are different from the background because it's memorized the background you know another way that I could make this a little bit more clear is at the end here I could draw the video and draw the previous one I'll make them kind of small at the top this is going to make things a little bit more clear are you running run come on computer vision time so you can see here now this is what it's comparing it's comparing you know visit image up here to the one on the right and if I go like this and then I move you can see that's now unfortunately the camera auto whitebalance so if I had a camera that didn't auto white balance could see I could come back into my spot and try to find it look I can't get there ah well there I have no okay anyway you get the idea so I could be out of the frame and save it now it's the background now that cup is shaking it stopped shaking save it again and I could move my arm in and you can see I'm getting a really nice silhouette so this is the kind of thing you could do also forgetting silhouettes but you want good lighting it really helps to have a solid colored background you don't need a greenscreen but certainly that's helping the cause here but really you need a camera that's not going to do all this auto white balancing stuff you can see how quickly it changes okay let's add one more thing to this now which is that remember how we were looking for the average location of all of the red pixels well I can now do exactly that here I can say anytime you find a motion pixel a pixel with a distance greater than some threshold then also what I want is to see that particular pixel and I'm going to fill it white with a black okay so let's make it um let's make it some like pinkish color so we can really see it and maybe make it a little bit bigger so this is going to be interesting because what I'm going to do is look for the average area of motion and let's see what that gets us oh I didn't mean to have oh whoops let me let me do a couple things here let's take these out we don't need to look at those right now and let's put this back in capture event so we're always always getting that previous frame awkwardly standing while waiting for camera to start okay but you can say onto move out of the frame and I can put my hand in here you can see this is actually doing a pretty decent job of hand tracking because you know it's not perfect by any means but you get a sense because my hand is the thing that's moving now if I stop moving it's going to completely go away but I could store that one thing improvement I could make to this at all is I could keep that location as a global variable and if there isn't any motion I could stay where it was last let's add that so let's make that let's make this average thing a global variable and over here what I'm going to do is only only alter it if there are at least let's say 20 pixels that have 20 motion pixels otherwise it'll stay where it was before and let's always draw it so this is just a slight improvement to this that I think will help make it feel like it's doing something more along lines of what you might expect or want it to do so you can see I can move myself around and now 20 I guess is not that much like if there's so many pixels there let's just say there are 200 I don't know what's a reasonable number there's probably you know there's millions of pixels so these are probably like such incredibly low numbers that I'm using and you can see as I move anyway you could play with these values and get something that's doing something slightly better but you can see yeah the other thing that I would do here and since we're here is I'm going to I'm just going to add a alert X a variable called alert I'm going to show you that you can use linear interpolation I have a whole video all about lerp that I should link to from here but I can say also the thing I can do is I can say let me actually take a alert point and always say and say lerp x equals lerp between average X and lerp X and actually let me I like to say lerp X first I think and then point one so what I'm doing is I'm always just going 10% of the way towards the new point which is actually going to smooth things out quite a bit and I encourage you to look up my video about the lerp function which would kind of explain how that algorithm works a bit more and here we go and that camera just went off but I'm going to turn that back on and so you can see the sort of final result that we have here and the final result that we have here is that I have something that's kind of smooth as as I move my hand around where does it go to why does it go somewhere else I don't know I have a bug in my program where it's like leaving and going somewhere else kind of want to fix that oh because it's to adding all this stuff up ooh okay yeah yeah so this needs to be average X I it's adding up all those points even and but only only dividing it by count when it gets about 300 so I get that like added thing when it's less than 200 that was terrible so what I want actually my global variable is to be the actual I'll call this motion X motion why and I actually only want to update those motion X and motion Y and then I want to alert that oops and this is now I think going to be a final version of this that works correctly so I was always adding up all those values for the average but then not calculating the average and so that was making it go way off the screen and you can see now I'm going to move off the screen and you can see I have sort of a very rudimentary like as long as I'm moving my hand around and I don't come in the scene I'm kind of getting it's it's kind of following me and it sort of like it nicely interpolated way okay so you can see that opens up a lot of possibilities if I'm in here you know it's going to kind of follow me around hi I could turn my music back on and I could do the pig dot dance I am a magic pink dot manipulator okay that's hopefully you turned this off and you didn't have to experience that so this is now a second video where we've looked at kind of how you can use motion frame differencing to sort of track a point around the screen and in the next video I'm going to return back to where we were tracking just this Cup and looking for the average amount of red pixels to actually thinking about this cup as a blob so that if I add a second blob second blob we can track both of them individually okay thanks for watching goodbye