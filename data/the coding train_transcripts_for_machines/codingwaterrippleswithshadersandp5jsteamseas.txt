do hello everyone good afternoon it is friday the weekend is upon us welcome to a special team sees live stream this is my sound check i will be beginning in approximately two or three minutes let me know how the audio is the music is probably quite loud right now okay my voice might be a little quiet i'm happy to pump it up if i need to know do do or should i say dude no that's the train how do you i don't know i don't know how to make that before gloria this is freaking out that i'm making gloria's my dog maybe you just you've never watched the coding drain before oh hello welcome it's today's friday live stream i don't have an applause that i was going to play oh i swear i had them where my this whole sound board is completely messed up but there we go welcome today is a special live stream uh for team seas a fundraising initiative that launched approximately 30 minutes ago on youtube i thought i would uh start 30 minutes late maybe got a chance to watch some of the other team seas videos that are out there um i am really excited first of all to say a huge thank you to curiosity stream all right so normally during my live streams i would talk about i might be here talking to you about nebula and curiosity stream and telling you to sign up for those things and you probably should maybe but uh curiosity stream has been super generous to donate their sponsor time here so i can tell you about team c's so let's see um if i can manage to do that and then i'm going to get started doing some fun coding challenges stuff with shaders so if i come over here uh i know um this is the tmc's website i think you can donate through a button right there on youtube itself um but you can also donate it here on the website it looks like the donations are up to 519 but i really i had to look at this so many times i was like okay wait this is in pounds so how many dollars is that then i remembered no no no the goal is to remove 30 million pounds from the oceans one dollar per pound is the magic math that's happening in here um it's a global campaign um to remove 30 million uh pounds of plastic and trash from ocean rivers and beaches team seas has partnered with the ocean conservatory and the ocean cleanup all donations to team seas will be split by the two charities 50 50. one dollar equals one pound of trash removed so every donation counts so team sees.org is live um um neon ichiro is asking is this a team tree a reference yes about one year ago there was a fundraising initiative to plant trees called team trees this is the followup to that and the campaign launches today 1 p.m pacific time and it will end on january 1st 2020 um so there's lots of team seas um videos going on i thought one thing i would just quickly show you um is um well you know as you know all my favorite youtubers are also on the nebula streaming service and there's a wonderful uh takeover right now of of the of the nebula page so if you're looking for other interesting educational entertaining uh enlightening uh videos to watch um take a look at all these the law of pirates from legal eagle the world needs you from ephos vox chords that sound like waves revenge of the ports uh look at all these uh excellent and amazing videos therapist reacts to jaws okay so um uh check out all this stuff uh links in the description to this video uh teamses.org etc etc i'm gonna open up the um like the chat over here so i can keep an eye on it um and yes as joseph says for one night and one night only or maybe now we're just gonna do this forever it is the coding boat there it is and i forgot i've like really worked really hard to kind of update all of my buttons and various animations things so if things i forgot to press the most important button when i said and welcome to the cutting train the coding boat uh team c's fundraiser isn't that cool like the logo it like went in front of me and now it's like animating animating teamses.org and here i am again ah boy that just you know makes me so happy okay now what am i going to do during today's live stream um i have been um my mic is hissing a bit thank you um yazreem if anyone can confirm that for me you know i swapped out this really old lav mic for this newer one and i think the old one was working better i also forgot to pull my sound blankets over here so it might be particularly echoey right now i'm going to just go move those just to improve the sound slightly i still got to put my sound foam on the ceiling but i'm just over here you can't see me moving some sound blankets um you know i have these like clothes racks on wheels and then i draped sound blankets over them thank you for the idea from legal eagle gave me this idea and um now i'm coming back over here uh and yeah so let me know about the mic i'm looking at the member discord chat over here if there's an issue with the mic let me know i will try to resolve it i can always switch to this um tabletop mic if i need to uh instead of the lav silver welcome silver says this is my first time watching coding train live uh it sounds like a chord issue ground feedback loop uh high pitched yeah you know so one oh why do i always have the technical difficulties why even on the team seas day i'm tempted just i think something i can do with these lav mics is change the channel like the the radio frequency that it's transmitting is that a thing i think that's a thing right but i'm gonna have to mute myself to do that um let's see well please please bear with me for just one moment um i'll give you a nice little like play of this logo again and i'll be right back and mute myself oh test one two what's the chance that that improved anything i changed what frequency i'm transmitting so the sound was fine okay uh let's see let's put the music down and get going so um if you've been paying attention recently to um my live streams first of all uh um thank you again to alethia and eliza from curiously minded on twitch who sent me on this journey because you know you know what i have lots of free time lots of extra spare cycles to learn new stuff i'm not busy at all with any of the regular daytoday things that i really should be doing so i thought now would be a time to dabble in shaders i'm not teaching any classes on shaders it's not part of my uh required sets it's not part of any recent playlist that i really need to get and keep updating so i'm very good at procrastinating by uh getting distracted by things so uh luckily for you you're probably interested i'm gathering based on just sort of anecdotal feedback in shaders and so i want to continue that journey today i thought for the tmc's fundraiser i would like to program something uh related to water and the ocean in some way you might recall you might remember me from my coding challenge coding ripples coding train i want to find the page here for it this was coding challenge 102 with a much more youthful uh oh you're not seeing my screen i'm such a um so this was an old coding challenge from what was the date of this one i wonder it doesn't say here on this page we could click over to youtube um what i did for this was implement this very um sort of classic water ripple algorithm which is only found on the wayback machine of the internet archive because the website is totally nonexistent anymore so i this has been like referred to probably so many times in um computer graphics and creative coding and pixel demos and animations so i did my own version of it if i were to click over to the p5.js version uh and run it you can see it run here now it's pretty slow frame rate wise it's working it's running but one of the things i always talk about is if you are working with pixel operations in the canvas i'm seeing that there's still a high pitch noise every now and then i have a like weird sort of idea that i'm just going to attempt i moved the receiver i'm sure i could also put it in input two oh i gotta stop i gotta it's fine you're all managing i'm gonna manage uh all right well tell me if it's gotten better um what was i talking about uh yes i always i'm always here on the coding train doing some kind of like let me do this algorithm where i set every pixel one at a time to a particular color to demonstrate a particular visual effect and i might do it in processing in java and it's like oh look at it go look at it go it's super fast um i would expect here just to make this point if i'm um if i do download code for the processing sketch um and let's see how long it takes me to pull this up uh let's see what if this opens i hope this opens in processing four it may not by default no it's not but that's okay we'll survive so far so good yeah cat king is the only here's the only downside to the team c's fundraiser it's kind of taking i guess i could have somehow dressed up as a pirate because it's also halloween or something but i i kind of had thought maybe i'd do something for halloween but i think this is my uh this is my stream for the week so team c's so if we look at this look at that speed look at the speed of these water ripples now this isn't making use of any kind of hardware acceleration or shaders this is just the fact that java running you know is a kind of you know even though java is was often thought of to be kind of slow compared to something like c plus plus uh still having that kind of native access to the operating system's graphics engine through java closer to native access we just have a lot more power and speed with doing pixel by pixel based operations so um and i'm seeing in the chat that maybe moving the receiver fixed the issue i do think that if it's too close to the focusrite device that i have it does cause an issue and if i'm quiet i'm going to make myself a little bit louder here so canvas is just incredibly slow javascript canvas to iterate over and set every pixel this is slow and i always in a video i'll just casually say but you could probably use a shader with webgl run the same algorithm and have it super fast and then i then i move along but i don't know how to do that or i pretend that i know how to do that but i'm not going to do it now who knows what i do today is the day pick up my train whistle for this to gesture where i put my donated money to team c's where my mouth is no i don't know what i don't know what the expression i should say is but i'm gonna i'm gonna really just dive in there into the muck in with shaders and see if i can port this particular example staying with p5.js but loading a webgl shader and see what kind of performance improvement i can get we'll see where that leads i'm going to be here until about 6 p.m eastern time which is now an hour and 10 minutes from now um and let's see how this goes about shaders when i uh someday uh you know part of why i'm doing this is i hope to in the new year do uh kind of proper set of recorded edited stepbystep shader tutorials i'm sure i will be drawing heavy inspiration from the book of shaders for that um i also you know should shout out uh curiously minded the twitch stream which is on saturdays let's take a look at uh what's coming up next it's still me you have to travel back in time but i think you can see the replay on their stream but there is there is there is coming a new guest in a new uh stream for their next one but um eliza and alethia who run this twitch channel introduced me for the first time to shaders and i just can't stop now so thank you to eliza and alethia and then more important the most sort of like important reference that i'm going to pull from today is this um set of tutorials from uh louise and casey uh rhys alumni of the itp program at nyu who did this research project to develop a whole set of tutorials around p5.js shaders and there is an example in here this one image effects and i believe and i'm going to hit allow to allow to use my camera i believe that this example this effect of taking an image from the webcam and passing it as a texture to a shader and then operating on that texture in the shader to redraw it back and make it incredibly fast because of the sort of parallel nature of processing all the pixels on a gpu accelerated shader i just want to throw as many technical glsl acronym shadery language things out there as i can but i believe that this is the key to unlocking the water ripple sketch so i did a little bit i took like one or two little steps earlier today to sort of see if this might be the right direction but i'm just like to be perfectly frank although my name is dan um i have not done this and i don't know shaders at all so this is going to be me stumbling through possibly failing and getting nowhere and looking quite inept at this um so just all let's just let's just get that out there we're all on the same page you've chosen to be here you can leave at any time if you leave you know maybe consider taking a look at teamcs.org normally i would just say don't worry about watching me just go but i would like to encourage people to participate in this positive initiative to clean up the oceans all right so let's discuss a little bit about p5.js and shaders so i'm going to go to the i'm going to let's leave this open because i'm going to definitely need to refer to this code i'm going to open up a new tab oh my god a watch talks to me every once in a while and it absolutely terrifies me it just like starts talking sorry i'm like no jump out of my skin okay um so now with a p5 jet with shaders typically what i'm doing is i am doing all of my drawing here in setup or draw set up i'm starting the sketch i make this 400 by 400 canvas draw i draw a background if i wanted to make that background red i might set a color an rgb color to 25500 and then i might draw a rectangle that fills the window i'm going to put on auto refresh so that it as i type it updates the code but i'm going to have to run it again we're going to call this shaders team trees oh c's sorry and uh so now i've got a red rectangle where was i going with this yeah now i recall so this rectangle is geometry essentially and in order to color it red i've used the fill function now this is a very convenient way and quite fast way to fill all the pixels of this particular piece of geometry but if i wanted to go lower level if i wanted to go deep into want to get on my scuba gear and go deep inside the engines of the computer under the water how far can i take this um i could operate a shader to work on every single one of those pixels and the big difference is even though we're not sort of seeing this in the code a computer algorithm a program being an algorithm being executed in javascript to operate on every pixel in a canvas is going to operate on every pixel one at a time we're going to operate on one go to the next one it can do that pretty fast but a shader which is operating on the pixels making use of the graphics hardware the gpu the memory the processing power of the gpu allows the pixels to be operated in parallel so instead of me painting every pixel one at a time i have a giant sort of like blaster that i can shoot a color at every pixel all at once that's the metaphor that i've kind of stuck in my head that eliza said to me in very different words and i i'm sticking with it so you know i'm definitely looking for those of you have experience with shaders to kind of help me oh yeah the meta balls challenge in shader says lori that is an excellent suggestion i mean if we could get this going today we could get them all going the meta balls one would actually be easier i should have but that's not very ocean is it kind of ocean wavy maybe i should do that one anyway uh i would love to i would love to like do all of them all of them i'm obsessed it's my thing now by the way my daughter who's 10 was like but isn't it like shading something and i was trying to understand like why is it called a shader like is it like you're in the shade like trying to understand that word shader because we were talking about shaders in relationship to minecraft and how you can have a shader kind of texture a block like there's a shader you can get in minecraft that makes the water very realistic water i should be doing that i'm not that far along in my shader journey yet but um so i'm really looking for your feedback and thoughts about how i am explaining and thinking about shaders because this is essentially practice and rehearsal for me to eventually make um sort of recorded set of tutorials that you could follow uh more quickly than my rambling streams which have you know maybe maybe you enjoy those more than the tutorials who knows okay um right in parallel so how do we do that well in order to work with shaders in p5.js i need to add different files to uh write the code for my shader now here's the thing in theory learning to code a shader is um kind of a language agnostic in the sense that the shader code is its own sort of syntax and set of functionality that you could then bring into any any environment whether it's processing whether it's c plus plus an opengl you could use 3js and you could put a shader in 3ds i'm just doing it in p5 because p5 is you know the sort of primary javascript library that i use on the channel it's one that i it's a community and uh initiative that i care deeply about um but and so but i would encourage you to think about could you take this shader and use it in whatever environment you're working with um and you most likely wouldn't have to change the code there i was learning today that if you write shaders on a site like shader toy they've adjusted certain things so you have hooks into different kind of features and functionality maybe the syntaxes or names of things are slightly different but overall the concept of a shader is across languages and environments but uh wherever you are you will need both a vertex shader we're going to call this ripples dot vert i think would be a good name for it and you need also a can you hear the little ding ding ding ding that's gloria just going back and forth today i have the garage door down so gloria can roam free inside the garage i do still need that dog cam then we need a fragment shader so i'm gonna say ripples.frag so what are if the idea of the shader is it's this giant blaster that's going to send a pixel operator on every pixel all at once in parallel the fragment shader is where that really happens the fragment shader is working on colors for every single pixel the vertex shader is manipulating the geometry where those pixels live and so in this case um if i'm you know i'm redoing what i did on my last stream my last live stream was getting me kind of warmed up here in this case instead of fill i want the shader to apply the red color to this particular rectangle so i will need to have a is it p shader no no i don't know there's no data typing javascript i'm so confused gonna have and i don't i don't i believe i don't want to use the variable name shader because i think the function name in p5 is shader so we'll call it um uh the shader is used in the p5 examples maybe i'll just call it ripple shader or i might call this like text no no let's just call it ripple shader yeah ripple shader and ripple oh and i will load it there's obviously you could load the shader asynchronously or in various different ways but the most convenient way in p5 is to say ripple shader equals load shader and then pass in as arguments to this function the first the vertex shader file actually i have no idea which one's first i'm just guessing and then the fragment shader file okay so we're everything's still working but of course it's just the fill let's take out the fill so we're waiting now to see this rectangle appear red i've got to get to that stage um and then i believe if i just say shader ripple shader just like the fill is being applied to this geometry now the there's a fly buzzing around me if anyone can like freeze frame the coding train and find the fly hopefully it's not gonna like land on my head in a very awkward and uncomfortable way um shader needs to be compiled and is language specific just not associated with what happens on the cpu side yeah that's a better way of putting it says gustavo thank you for that correction it is like c c c code basically the shader is is a language that you're writing i just meant you can apply a shader in different environments if that makes sense um oh right and i'm going with the glsl language ah okay yeah do i um so there's lots of great questions in the chat like do you always need a vertex and a fragment shader or can you just use a frag i think you always need both but in this case my vertex shader is going to be just like boilerplate sort of blank code that does nothing and i don't know it off the top of my head so i am just going to constantly be referring to um where am i going this particular example so let's look for the vertex shader first but actually i'm going to skip this texture thing um and so one the first thing we need for the vertex shader is to um whoops add an attribute so uh this is now specific to p5 um p5 has preloaded or preloaded wrong word but like preset a particular attribute called a position which i would love to like read the explanation on this um let's see getting started let's look at this page a position like where will i find this what are shaders setting up shaders in p5 a position assuming it's got b5 just code a position well somewhere it's got a like how to write a shader a position there we go for shaders and p5 we must make sure one thing is always done in the dot vert files in the vertex file the pixel must be told where on the canvas it belongs this attribute is called vect3a position you cannot change its name and the attribute is read only meaning you cannot overwrite it attributes usually is named in with a as in prefix a something okay so this is also the case i remember in eliza and alethia's shader that they were teaching me with 3js that there needs to be this attribute position so that the shader knows what pixel like where that pixel is but they actually set that position attribute in their 3gs code so presumably there's some way for me to do it in my p5.js code but since this is required always forever this is like sort of predone for me um in um in p5 itself so i could just create the attribute and by the way let's follow this tutorial the other thing that's important is to um kind of have this definition here of what kind of numbers i'm using what kind of precision i require so float a floating point number is like everything to a shader basically and lower position precision is faster rendering but the cost of quality so we could try a high precision float or but let's go with a medium precision float so whoops i'm going to also put that into my shader code so this is just defining i think this goes in both the vertex and the fragment shader i imagine you've got to specify that in both places i don't actually know what would make sense i don't know what the error i'm getting here is like what have i i assume it's just i haven't finished oh haha this is a so i forgot kind of an incredibly important detail which is that i can only i you know i don't like to be trolled by the chat and i uh you know i i i'm very like uh people asking me to say their name or give them a shout out makes me feel very awkward and comfortable but there is a chat message saying they'll donate a thousand dollars if i say the name p5 warlord or sarcar so anyway we'll see if that happens um uh okay so but a shader is only supported in webgl mode so of course i've completely forgotten that a very critical thing i need to do is tell the canvas to be a webgl canvas so that the shader can be applied uh and i think now there's another error which is i'm missing i probably just haven't like put all the stuff oh i didn't load the shader no i did did i do it in the wrong order well we'll figure it out i assume i assume like eventually uh don't not telling my name says don't go with midp there's no reason these days okay i believe you okay i believe you i'm going to choose to just believe the chat and let's go back and do what was it high p yeah i'm a high p i'm a very high p kind of guy whatever that means i am no medium precision fellow no i am high precision all right uh all right let's keep going through this tutorial uh more bugs uh yeah all right so shader vert yeah yeah yeah where am i is this the right place is this where i was looking i don't even remember um yes okay um now right so i remember this from before so now we need to scale the a the attribute position before it can be passed to the frac the fragment shader um and uh here we're going to need to know about vector math so if i recall this correctly which i'm sure i don't i think i always need a main function is that right i want to create my own vec3 called uh position i'll just call it position and i want to take the a position this cannot possibly be right i should just read the tutorial it's like i don't have this like loaded into my brain yet i've done this like this like the third time in my entire life i've ever done this so um let's just keep going though um let's look at this yeah position vect4 okay so that's what i let's follow the naming convention of this tutorial i find that and it should be four position vect4 no no yeah position vec4 equals uh position vector oh so what i what is what's happening here this is so i need to get the position from a position do i just do this position vec 4 equals a position which is a vec3 so i would say like vec4 a position and then just add like a fourth dimension and add the number one i'm sure that's right now i'm now i'm remembering something here there's something going on and uh let's see if let's see how the whiteboard is going today where the shader itself the geometry of the shader is such that the center is zero zero and the left edge is negative one and the right edge is positive one same thing from horizontal to vertical and i believe the y axis points up which is another difference then in a sort of standard p5 canvas the y axis pointing down so if this a position is a value between 0 and 1 if that's what p5 is giving us oh and i'm not i've come back yet if that's what p5 is giving us then i would like to multiply it by 2. i need to declare it make this position for vector from a position multiply by two and subtract one and of course i always need the all right so i believe this is now me setting the position for the fragment shader to operate on and set a color i don't know if i've got this right okay i think that might be all i need to do oh look at this oh now i need to put that into gl position because the fragment shader is going to pick up the gl position the vertex shader requires there to be a vec4 output called gl position so what i'm doing in the vertex shader aha the vertex shader could manipulate the geometry so it can move all the vertices around but instead i'm just taking the literal p5 position and putting it in the gl position so that i can set the color in the fragment shader is that right i think that sounds about right so let's put this in here and i think now i have a finished vertex shader so this is kind of like your standard boilerplate um in line eight i need a decimal on that float ah yes okay i'm still getting errors which i'm really wondering why um okay gl position is predefined but i need to gl position with vect4 is the way to output a vertex to the rasterizer so the fragment shader is like the rasterizer it's rasterizing my vertex are your vertexes rasterized if not call one eight hundred we rasterize for you maybe that's a 1 900 number no that's weird okay cancel that thought um so now i believe i am ready to move on to the fragment shader now i want to i'm a high i'm a high precision fellow we've established that so let's have that i need a main function couldn't i get no error why am i still getting an error an error compiling the vertex shader nine okay dimension mix mismatch oh no ah this has to be position vect4 sorry there we go have you probably been saying this in the chat so many times missing a dot x y in the second line oh because i only want to do this for the x and the y that would make sense so um that seems to make sense so i only i want i'm only manipulating this uh scale change and it's kind of ridiculous to walk all the way over here just for this and how's the lighting by the way on the whiteboard better same good whatever i'm only doing the scale change for the x and y uh uh dimensions all right now your audio is capturing your computer audio too oh it plays two times on top it certainly does it certainly does i'll fix that sorry about that okay i've got a i'm still my open broadcast studio and audio routing set up everything is still a little bit in flux here please bear with me all right fragment shader so now i have my fragment shader and i believe if i were just to do something like gl frag gl underscore frag color so what it is is a vec three oh it's a vec4 because we need alpha what's the chance no what did i miss undeclared identifier maybe it's like gl frag color ah yeah there we go look at that i remembered something i remembered how shaders worked so now here i am setting every color according to its uh just setting it to red so this is the same this is what we half an hour later i've replaced fill with my own shader so my own shader sort of sets up the geometry in the vertex shader and then sets the color and remember there's no for loop here because this code is executing on every single pixel all at once in parallel all right now i want to be able to set every color differently based on where it is so i think now it's time for me to create a uv vector which is a sort of normalized version of the gl coordinate thing as far as i've got i'm gonna have to i'm gonna have to look this up all right let's keep going back to the tutorial um right so we can make a color i can set the frag color oh right and it's it's uh that kind of makes sense for me to sort of think of the way i'm doing this as to always have a vec3 called color and there is where you know let's make it blue because this is team c's after all and then i can and it should be vect3 and then i can when i go to create the color i can just add the alpha dimension across okay yes so that's next step thank you again i can't i cannot tell you how useful this tutorial is everyone should just in addition to like donating to team c's should send some good thank you vibes to louise and casey who created this wonderful uh tutorial all right so now yeah that's i've got that one color fill i'm following this along now um if i want to do a gradient shader that's kind of um texture coordinates maybe that's what i want here no i do want texture coordinates but not yet let's do basic gradient so position on a canvas is defined as a floating point number between 0 and 1. so that's very important where does that come from oh that comes from somewhere else okay so what i need now in the fragment shader is ah yes i know i remember ah uniforms so what's very important here is that the resolution of this canvas being 400 4x400 is something that the shader now needs to know about because it needs to map all of the pixels it's operating on onto this particular piece of geometry so to do that i need to have something called a uniform a uniform is a kind of variable that you can set from your external code system that you can sort of pass into the shader so the shader's not able to pick up the canvas width automatically instead it's up to me from my p5 code to tell the canvas what i'm going to also do with this at some point during this is give it the mouse coordinates so to do that i need to both add a uniform i think i just do this uniform do i say like vect2 u and i think the convention is to do like u underscore resolution so i think if i create a uniform variable called u resolution then in p5 whoops i can say go back to sketch.js let's move this over here i can say um this fly is really getting on me you know next year might be like team save the insects i mean we should probably save the bees don't we need to save the bees i think so team b's i mean team trees team c's i'm calling it now mr beast and mark miss team bees um uh okay uh i've already forgot what i'm doing yes so now uh ripple shader set uniform i don't know uh width height i don't know if this is right it's not giving me an error but i'm pretty sure that this is now oh some people use uv and some people use st says nicole is here shader expert who i hear also does wonderful uh twitch streams about shaders uh nicole vela in the chat um what does st stand for i know uv is came out of kind of running out of xyz and i think it's if you go through the alphabet uv are kind of over there i think that's the origins of uv i don't know but what is s t uh s a b c d f g h i j k l n p q r s t s t u v ah it's just they're all those letters at the end of the alphabet um so i need to set the id right so i'm sure i need to give it like its name probably u resolution and then give it the values and i'm kind of putting some extra line breaks here oh oh um p5 is uh reformatting it to like it's fine i can i can i can manage this so i think it's something like this i mean i can obviously just refer to the tutorial yep look this looks right and then i have u resolution so now in the main function and they're using st here right the idea is take that x y which is now the newly mapped frag coordinate between negative one and one and divide it by the width and height that's to get the position of the pixel uh uh is a standard convention when writing shares to call this variable st yeah i still don't really like fully understand like what the values are that i'm normalizing here and why i'm normalizing it by like width and height because is it already between negative one and one and so why divide but anyway i mean it seems like it would be the other way around to scale it back up not really sure i have to think about this do some more reading um but i think the idea here now is that if i were to say vek three is is is gl frag position a vec3 or a vec4 i've already forgotten it is oh but i just want a vec2 ah and i can get the xy and the xy got it so i want to get an x y but that's the wrong that's definitely the wrong thing to call it i don't know why i feel like using uv uv is more comfortable important fix on the whiteboard the screen space is from zero to one not negative one to one oh that's why i'm multiplying it by two and subtracting one because it's from negative point five to five point five and adding one i'm so confused all right so there's a bunch of different screen spaces at play here maybe you can all help me this and unfortunately when i come over here i can't read the chat but i'll come back to it okay so i know there's my p5 p5 is between 0 and 400. the shader itself i thought the uv coordinates i want the for the gl frag coordinate these are between zero and one isn't that right so what's this middle step where i'm getting somehow a position and what did i do to it i multiplied it by 2 and i subtracted 1. so if i had a range between 0 and 1 multiplying it by 2 would make it between 0 and 2 subtracting 1 would make it between negative 1 and 1. so that's where i got that number is it because the shader itself is actually between negative 1 and 1 and this what i'm getting from p5 is between zero and one so do that operation to it in order to make the uv work like this is this correct i mean i didn't really put anything here i thought i might need a sort of separate interim step here but this is what i'm doing in the vert vert shader like i'm taking a position which is between zero and one uh like sort of and then when i'm over here i wanna why do i divide it by 400 by 400 if it's already between negative one and one that's where i'm a little lost like if gl frag is somehow mapped to this why does uv shouldn't i be scaling it up and like again undoing what i just did i'm gonna go look at the chat all right i see nicole writing a very important uh and the whiteboard is actually looking pretty good today um nicole says when you color your shader using its uv st coordinates you will quickly see how the coordinates work when you color shader by its uv location bottom left is black top right is white no what you get from p5 is from between zero and width shader is only between zero and one gl position is a 4d coordinate space all components would be negative one and one okay i'm kind of gathering so i'm going to say uv equals gl frag coordinate dot x y divided by u resolution dot x y right and then what we're doing here is to sort of understand this is if i were to say give me some red according to its x value oh u v x no um because the value is not divided by like why is this not a gradient like why is this not all right let's look at what's happening here x y use resolution x y this probably isn't right right no gl frag coordinate hmm uv11 you have the blue am i just like i'm missing like something really obvious here right uh that doesn't i want it like oh right i only need three sorry i realize now what i want right it's all white just bear with me i'm trying to understand this i guess the set uniform isn't right yeah the set uniform must be wrong let's go let's go back we should look at what the uh what the actual p5 code is u resolution with height oh do i need to do this in draw you'd think i'd only need to um do it once but i wonder if um oh i guess they have to set the uniform continuously interesting why did it not work in setup to set the uniform just once um and i don't need this yeah yes okay so i was doing it right all along so now is this precisely the middle it's not exactly so why so one thing i think that is kind of off here that i probably need to address is i might need to say pixel density one just to be sure i know what's going on here yeah okay so now how to understand this i want to understand this mapping more precisely so let's do uv.x 0 0. yeah this looks right that now the mapping is perfectly so this must somehow be a value between zero and one so if gl frag coordinates is a range between negative one and one how does dividing by u resolution dot x y make this somehow map to zero to one that's what i don't 0 0 is the bottom left that makes sense yeah so if we did this to if i took the y value right 0 is at the bottom 0 0 is the bottom left yeah that makes sense you do have to pass uniforms with each frame that's interesting to note um okay all right so i'm gonna come back to try to understand the scaling stuff more deeply um um but i'm gonna move on from that right now because it's 5 30 already just like where i was like on monday's stream like and i'm redoing exactly what i did before because i've got to do this you know this is the process right you've got to kind of write the code talk it through multiple times before it starts to sink in at least that's my process all right now what's really exciting here and i'm going to just i'm going to jump forward very fast is in order to make this water ripples thing work i need to have what in essence is like the equivalent of this um and where where is that this a twodimensional array right so i have these like current and previous dimensional arrays to keep track of all of the sort of height values of all the water ripples um the sorry i'm reading the chat um i'm reading the chat while i'm sort of thinking this through which i i shouldn't so i need to have this like data structure to store the height values of all of the points of water in this texture so one place that i could do that is in an image and so i believe that i can create this kind of like buffer or texture in glsl which is exactly what's happening in this particular example uh by doing the following so i'm going to make an image just a blank image i'm going to say image equals create image 400 by 400 then i want to make another uniform ripple shader dot set uniform i'm going to have a texture i'm going to have two textures so i called them in the water ripples coding challenge previous and current because i need to calculate the next frame of ripples from the previous and then i swap them so previous and current to draw the current then this becomes the previous and this now is the new current do the math draw that one back and forth back and forth so actually i think i do want to have two of these so let's have an image zero and an image one i'm not 100 sure this is exactly right and then i want to texture one and i can make those image zero image one so i believe now and let me comment out this texture stop talking to me let me comment out this image one for a second and go into the fragment shader and add another uniform and it's like a texture let's look at the code here i think it's called texture there's where is the uni sampler 2d oh it's called a sampler 2d that's interesting okay i'll take that a sampler 2d i don't remember that i was like looking at this earlier and i don't remember it being sampler 2d at all and i see that ilari is writing an explanation gl frag core is zero to 400 then dividing by resolution is normalizing to zero and one got it got it okay i'm gonna i'm gonna need to return to that i don't know tweet at me later so i can discuss this so i can understand it but i gotta move on so a sampler and then i believe that i should be able to and let's just look at this here like get the um so do i need to change something in the um yeah oh i need to get the texture coordinate so there's a new texture coordinate attribute okay so in addition to the position we need the texture coordinate attribute that goes in the vertex shader so we've got another attribute and it's just a vector because textures don't live in 3d space the texture is by definition a 2d image essentially buffer i don't know if buffer is means something else in shader world but that's how i'm kind of thinking of it i'm gonna have to read back the whole chat from the stream later and then we need to create now what is this varying this is new to me so i understand that we want to do the same exact thing which is essentially basically this is a way of getting this attribute from p5 into a variable that i can access in the fragment shader so why is this called varying because by definition otherwise a vector would be a constant it's like something that changes is that all that means basically the opposite of constant so am i in the vertex shader and then i just want to say v text coordinate equals a position so this is me getting like the texture no not a position sorry a texture coordinate so what's the error here v text chord what's this what's this standard variable naming that they're using here is it text or just tex so let's go with tex so just t e x here great so i'm good to go um i i want to go back in the fragment shader to just having the frag color everything be white so i just want to go back to everything being white because ultimately what i want to do here is pull the color from the texture so if i create this image in p5 like if it were the webcam i want to pull the color from the webcam and set it as the color for the pixel in the shader but i'm not going to i'm not going to do the webcam but let's see so what else how do i do that so if we look back to what they're doing here in the fragment file the texture is loaded upside down and backwards by default right because so vector oh uv i want to get the texture coordinate interesting okay oh that's simpler so in this case in the fragment shader i just want to get my uv is now let me lower the console here so i can see more my uv is the texture coordinate but that's not is um is but i'm taking the v text coordinate yeah my one the thing that i set so i'm creating this vtext coordinate it's a varying vector and then in the fragment shader i am putting that in uv and then now why do i have an error here parameter one is not of the type webgl program an error occurred compound on the fragment chair v text court undeclared identifier so do i need to somehow oh is that why it's like a varying i have to redeclare it it's varying because it's coming from the vertex shader okay nicole these comments you're writing the chat are so helpful but i i'm not able to fully absorb them while i'm doing this in real time so i'm gonna figure out how to get back to them um uh okay so i need to also say in the fragment shader that there's this varying variable okay so now i've got the texture coordinates so if i were to just do like uv.x and manually divide it by 400 no oh this has to be enough sorry i want to have a vec3 color which equals vect3 i mean i'm just trying to understand like what's in these values it's it's hard to like console log value is there a way to just easily console log values that would be nice um so i want to uh see if this works okay that's good ah so these these texture coordinates are already normalized between zero and one which is why i don't so the frag coordinate is somehow actually i know you've been saying this in the chat gl frag coordinate is actually this unnormalized values oh we're making it i think i got it i think i got it what i'm getting from p5 is like this range which then gives me a range between negative 400 and 400 which i then need to like normalize out oh i'm so confused yeah yeah zero uh and then i divide it by width and height yeah yeah yeah cause i could i think i got it i think it took me so long i think what i get from p5 in the attribute is a pixel value between 0 and 400. then i take may turn it into this range and then i divide by the u resolution uniform to get numbers between negative one and one did i get it but then why oh and that's why i'm seeing black black black black black black and it only picks up from here no i'm seeing red in the texture coordinate but if i go back to this yes so why oh i missed i missed the step i was close it's just zero to four hundred i i was close cool such a guy i was close but i missed it somebody draw me that diagram that i'm trying to draw but correctly tweet it at me thank you i'm going to get it i'm going to get it i just i can't be bothered with it right now because i got to keep moving so back to texture coordinates okay now the next step is okay flip this right that's fine because it's upside down that's fine no big whoop that's easy to invert and then create a 2d texture from the uniform from the sampler okay um oh give me the is this basically saying like give me the effect 4 from here at this uv oh it makes a co oh this is giving me the color in this sort of texture at this uv that must be what this is doing it's kind of like get so this is give me the color at this uv and if i were to just set the frag color to that color it's all black because i haven't set any colors so if i were going to go into the sketch now and i were to say 4 let i equal 0 i is less than image pixels.length i plus equals 4 right then i would say image because there's four uh spots in the array rgb alpha so if i were to say image dot pixels i plus zero is red then blue let's uh then blue then green then blue let's make it blue let's make it a random value of blue and then let's say pixels i plus 3 is 255 because that's the alpha what do i got still black maybe i need to say load pixels maybe i need to say update pixels okay what am i missing let's just very briefly draw the image to make sure without the shader okay that's fine so that is the image i mean it's off because i'm drawing it at 0 0 which is in the center so why how do i get the shader to set the colors correctly utex 0 is oh whoa whoa whoa whoa whoa whoa image zero that whole time all right everybody hold on i forgot that i called it image zero what a silly error that didn't fix it uh let's take a look at this oh duh okay oh i can't just give it this is giving it the brightness how come i can't just take the rgb this is doing like funky stuff to it which is not what i want to do i just want the raw color so what did i miss utex 0 is image 0. let's look at the fragment shader i've got text 0 vect2 vtex coordinate uv is that give me the vect4 color i'm using image instead of image utex not text zero ah i'm not getting an error yeah i forgot that you text zero okay and okay so now what's the error texture oh hello hello silly me fragment shader this has to be utex zero ah yes oh now check this out uh so if i were to take this algorithm and put it in draw i don't really want to do this but just out of curiosity uh and let's make all these from the colors of an image in p5 passing that image to the shader and then it's like tossing it into the canvas now the question is is this actually any opt speed optimization because the actual math and loop of all the pixels is happening here so ultimately when i do the water ripples i want that math to happen in the shader which should be quite possible so i'm going to go back to i think we're ready for the water ripples actually we are we totally are we totally are okay check this out so i'm going to do this and i'm actually going to set them all to black to start okay so all the pixels are going to be black to start now i want to add the mouse dragged function and in mouse dragged i want to get the index value from mousex so this is the index into the pixels and i guess let me call it just i so i can copy paste and use the exact same code and set it equal to 255 and i probably need to say load pixels and update pixels i never know when that's entirely needed but let's use it now to be safe so now what i'm going to do is and we're going to have to zoom in here i think that i should see yeah oh no no that's not working what did i miss those pixels should be oh no set up draw shader um did i miss something here i i should see white pixels as i drag the mouse let's just make sure that something is happening here i should be looking at the chat probably yeah i'm getting pixel values so if i'm altering the pixels why and i'm resetting the texture why am i not seeing them let's once again draw the image just manually this should be image zero maybe there's something in the chat oh times four times four ah thank you thank you i don't need to do this i forgot that there are four values for every pixel so when i pick this index value i've got to scale it up by four there we go so you can see i'm now using the mouse to set values in the sort of shader texture thank you everybody okay thank you everyone times four times four uh 547 all right we're actually not that far away i don't think okay so i also need to have now i need to have the the other image i'm pretty sure so let's create the second image um let's load it's can i just make it a copy i think if i just do um this is a little bit dangerous to do this but let's try it um image well i'm just going to be totally safe here there's probably a nice and just like redo this code obviously using an array would make a lot more sense copying the image would make a lot more sense but i just want to now i have both of these and i can set another uniform for texture 1 to image one and um in the fragment shader i can have a uniform sampler utex one and so now i have both of those right so now i'm drawing little white things but if i change it to utex one i'm not setting the pixels of that image so i don't see anything and if i were to in the sketch just to make sure set utex one to blue there we go okay so i have both those textures i don't know that this is the right path by the way i'm just going with what i think will work i have both those textures in my shader so now what is the algorithm i have to go to the water ripples algorithm because what i need to do and i should be setting actually this should be setting hmm boy this is going to be weird i'm not so sure about what i'm doing here but i do think i want okay image 0 is going to be previous and image 1 is going to be the next frame so i actually want to right now to do what i want to do i want to pull the colors from texture 1 but i want to set the values in texture 0. because i believe oh my god how do i do this the other thing that's weird is i'm getting three values all right let's all right i'm gonna really need help from the chat here because i'm i'm a little lost like i unders i know this algorithm basically if i go to my code let's go to my code and this is what i need to do i wanna there's this dampening because i need floating points all right we're gonna we're not gonna have any dampening that's fine to start so i basically need to cut do its neighbors all right so hold on just let me grab this for a second basically conceptually what i want to do is right here i want to get the height value okay i have okay this i want texture 0 to be the color values from p5 in texture 0. and then the new color value i going to set it here how do i i don't know how i'm going to do that yet so wherever i am oh ah i need all the neighbors so basically neighbor one is um so there must be like vec neighbors can i write an array of vectors so like this would be left would be vector negative one zero right and then the this is so hard right this is let's just do the left neighbor i just want a path the color to the left neighbor that's all i want to do we're going to simplify things then i want to oh no so if i'm getting it from the left i'm actually passing it to the right i guess so let's pull the color from the left neighbor so uh so vec so left equals left plus uv right this is where i am uh or or i could say uv equals uv plus left that's like give me the left neighbor so then get me that color from the left neighbor but so i want a new one like uv let's call this neighbor left can i just do this so give me and let's call this uv left okay so give me the color to the left text left okay right give me the color from texture 0 on the left of wherever i am now how do i set the color that must be something that i see here well but how do i set the color of another texture oh all right i don't know i mean i could just color it like i don't i can get back come back to this right then basically what i want to do the equivalent of is like i'll just write this like i want to say like set uv somebody donated 1 billion to team c's i'm seeing it seems crazy oh joshua noble i'm not in brooklyn this weekend unfortunately um but send me a tweet or a message or something i'm sorry that i'll miss you um okay you're going to need to set text 1 as the render target and run text 2 with your shader enabled that's what i want to do tasteful toasty i don't know how like what i want to do is say set the uv coordinate of text 1 to text left right what's the this is not glsl code if that's even the right acronym g s l s g l s l graphics language shader language i think that's right and then color is this like color is the left color kind of or whatever use the ripple shader on an extra p5 graphics object and set it as a texture input to the ripple shader again you can't set a texture in the shader oh hmm oh but i could i can't i could draw it and then couldn't i pick it up if i had a p graphics object okay wait see i was looking at um earlier i was looking at shader toy um game of life there was a nice i think it was this one this is what i was looking at which i think is doing exactly the same thing that i want to do which is it has two channels and we get the color from channel zero and then we create the color instead oh maybe because there's like two shaders operating on different images and then they get swapped yeah i really need help here isn't the entire point to give this computation to the jeep it uses a buffer so should i be using a buffer i could use a buffer that would work do i need to go back and use the buffer there's the concept of a back buffer oh did i did i go off in a direction that i cannot return should i go back to metaballs metaballs would be much easier to do if i have to i could go do this metabolise challenge just to have a win i think i don't even need this texture i thought like i could create the texture that is the water ripples and then have a secondary texture then i apply and i could just operate on it itself and then apply it and then like it could be like a sort of feedback loop back and front are swapped each frame i need a buffer i have no idea how to use a buffer i was researching this earlier and i didn't i don't know what to do can i just do the meta balls well let's put a quick poll because knowing that i have to go soon and uh feed my children dinner i promise to make pasta tonight no meatballs although uh my uh we um we're not like fully vegetarian but switch to metaballs but i kind of only eat fish i don't know why i'm talking about this now switch to metal balls be stubborn but keep going uh stick with what is it water ripples this pole is going to show up in the chat in a second oh okay just set the frag color and load the canvas okay hold on i want to read this i want to read this comment just set the frag color and load the canvas into image zero after the shader rendered it in the draw loop okay okay crab cakes then uh so far there's one vote wait wait wait wait okay ah what if i used oh i know what to do i think this will still work if i use create graphics what if i use create graphics instead of um i'm going to create graphics instead of create image create graphics webgl all right i think this might be the path to victory here probably a terrible idea for reasons i have not yet thought of and then the shader is apply to the image and then image zero uh uh draw the rectangle so the shader itself oh no but wait wait wait ah no no no no i still need an image which is the uniform to start right well i'm so confused yes yes okay hold on i got it i got it backing up for a second i mean this is way too much nonsense and it might not be right but just just bear with me i think i know what i'm doing i mean i definitely don't okay right this is what i want to do i'm going to call this previous okay let's keep my like i don't need the second texture probably the second image but fine previous equals create graphics 400 400 webgl in this sense i don't even need my canvas to be webgl but that's another story for another time then i want to apply the shader to this graphics object draw the rectangle there let's just make sure i put some blue color into image one because the shader is pulling the color from oh what did something weird here let's go back to what i had the texture color is the uv what is from the what's it called utex zero at the uv let's comment all this this nonsense out for a second the left neighbor and then set yeah this was not a thing you can do and set the color to this okay so now this plain vanilla shader which is pulling the colors from the pixels um oh is the vote is i don't see the poll results usually it shows up right here in my is it gone i think the poll disappeared what happened tell me if you see the poll i think it disappeared vote doesn't work okay i might have accidentally ended it let's try that again i'm i'm i'm quite well known for doing the opposite of whatever the poll says but i think it got ended by accident it ended after one vote okay hopefully it's going to show up again okay now um okay i see the pole again now okay now i'm applying the shader to that graphics object and then i am going to draw that graphics object do i need to hit play again okay what did i miss update pixels is not a function oh this is uh this should be image one okay great we're seeing it there whoops what just happened received three arguments oh yep okay no errors i thought i saw something when i did this yeah oh because it's just black okay so for whatever reason the um the shader is not properly picking up the color let's see if i can oh because it's getting it from text one there we go okay all right there there we go this is probably a terrible idea but you know we're gonna go with it i mean what i could do is just calculate the water ripples in p5 into an image and then render the image with the shader but that's not giving me any speed bump i don't think maybe a tiny bit because at least i'm using webgl to like draw the image but i might be doing that anyway just splitting an image to the canvas all right let's um i really want to do the computation in the shader that's the point okay so now if this is the okay okay okay i got it i think i got it oh my goodness oh my goodness i think i know what to do i think i can do this with one image right what if i have the image i start it i do the computation and i put the result onto the create graphics object then i copy it back onto the image and then do it again so we're going to go back to my sketch we're going to have only one image i'm going to comment out the other one in case i need to get it back and we're going to get rid of this one the shader should then pull the colors from this texture and i'm probably let's not set this uniform then okay and then just to be sure if i give this a green color great so now we are rendering the initial pixels from here if i were to drag the mouse no is that not operational why not i should always be applying it to this that's a little weird to me now why did i lose this the mouse dragged should still work the thing is i don't actually even need to i just want to understand why that's not working create image load the pixels set them all up update the pixels i'm going to really just get rid of this second one because it drives me crazy having this in the comments here let's put pixel density one earlier on and get rid of this previous is the create graphics don't need this uh it is working i just couldn't see it oh my god it is working okay it's just so tiny okay thank you it is working great so now what if i were to basically say image zero copy all the pixels from previous over so now it should still be the same oh but they're disappearing right because ooh now i now i don't understand the order of operations but this is what i'm thinking like what if i uh i put the new let's not do it here let's set some initially so if in setup just for a second let's get rid of this mouse dragged idea and let's just every once in a while i'm going to say like there's a if random one is less than like half the pixels this is like a really ridiculous way of doing it oh you know okay hold on hold on no this is a much better way so uh um let value equal zero if random 1 is less than 0.5 value equals 255. so now this is giving me fifty percent of the pixels are on let's do like ten percent uh one percent okay great i mean i'm gonna do 10 it's going to create a mess but i can see it more easily okay so now i really should go with the metaballs but people are voted for the water ripples i don't think i'm gonna get there i mean i gotta go with something like i'm already past due i don't think i'm gonna get to the one get there but we're gonna try um so if this is copying it in what if i were to in here very specifically do this i'm just curious like what if i were to do this again like do another like let's make this really one percent and then like i'm just gonna say like if mouse is pressed um like after you've sorry uh after you've copied it over i'm just curious oh because it's going to reset um yeah i only want to do like i want to leave the old pixels i'm just curious i'm kind of playing around here just to understand what's going on and by the way i should write like a set pixel function because this is ridiculous how often i have to do all four of these okay uh what just happened there oh yeah there we go so as i hold down the mouse more and more pixels are set and it's retaining the old one okay so i think now i just wanted to see that i should be able to do something like what i had before like why not add together my current color and my neighbor color like if i wanted to get the left color so this is the left texture and then what if i were to say text plus equal text left right if i'm getting the neighbor it's sort of passing the pixel along what so this what it seems i have a feeling what it's doing is this is somehow only if the leftmost one happens to be on it copied it the whole way across that's weird is it doing these one at a time i thought i was doing this all in parallel like and then i is it moving one pixel to the left it's not oh it's not it's not of course i need to divide by the resolution um no oh hey wait hold on no yeah i need to divide by the resolution right that's so weird how how did they get the neighbors uh okay hold on i lost that's not to the left like one let me just do this hard code this did i actually get an error there hold on what is the error uv redefinition oh whoops sorry i forgot i had this here text okay getting somewhere uh hold on nicole okay you should have permission now to post chat messages texture 2d new resolution got it uh so i'm getting right this is what i'm wanting to do so i what i was expecting to see is just like the colors slide across to the left because it's going to pick up the left color and then i i also should cap it at one so sample uh sample the left coordinate that's what i so how do i get the neighbors in a texture i'm looking for that link uh texture 2d yeah yeah this is what i'm doing right left oh do i need this to be 0.0 i mean i think text left uv left what if i just do just for a second here what if i just do left yeah that's one uh okay but why don't they like shouldn't this be like shifting over like all moving to the side because i'm copying the new render oh image zero update pixels maybe no um um interestingly enough though something is working in the sense that uh if i go to my fragment shader and have the color be added can i is there some kind of like max thing i can do or like min like whichever one is bigger keep that i really want to get yeah uh oneonone i want to do the components though component wise opera really makes sense for a scale max works so the min of one three four two is the lesser one and the um lesser one and the um i'm sorry the lesser one and the lesser two so i want max i mean this is sort of silly but like um right this is really i mean this should be the same maybe the copying book of shaders glossary okay um and maybe the copying is not actually working i don't understand the order of operations so when i apply the shader can i just update the image with the new thing that i've drawn and then we'll apply the shader again i really think like okay uh texture coordinate what is this called here in my fragment shader i'm using the uh texture coordinate text coordinate neighbor glsl texture size offset yeah this sampler 2d the texture map the offset is there a texture offset function ah texture offset there's a texture offset function well that's convenient well nobody told me that i'm not swapping the images i was just trying to swap it by copying it unto itself yeah i believe it needs a second pass first of all though let's use this texture offset function so i'm getting a 2d sampler the position and the offset okay so hold on where was i nobody this is new that i'm learning so texture left is texture offset back left is this not available to me here is it webgl oh can you have the shader output the uvs did i spell hi lee i don't know i'm not doing this right i failed i as i said in the beginning this is a total failure because i don't know enough i like thought like i'd be able to figure this out and i really have so okay so is is texture offsnet not not supported by webgl webgl2 uh when webgl 2 seems like from a while ago though is it texture underscore offset okay let's go back to my manual offsetting right i'm getting the left pixel and this pixel and doing the max and setting the color once it does that i don't understand how to animate i think p5 doesn't support webgl too usually opengl draws when the frame is swapped at the end oh oh finish oh i see that makes sense all right let's try this do i have a mouse pressed function i don't think i need that all right so now you can see though that it's drawing them both next to each other right look at that so i've definitely got something right in the sense that if right if i just use the raw texture color look at these one dot everywhere begin draw end draw if i use the max of either of them every single one of these is two pixels wide so i am doing something right i am doing something right i just can't get it to do the next one right why won't it do the next one so begin draw oh oh oh oh my goodness well no is begin draw not a function i don't know how to but it's not this that i want to do i need like a whole separate graphics instance um oh did i lose the copy thing i lost the copy thing hold on it hasn't redrawn it yet before it copied but no i'm copying it from previous so it should be fine no no all right i'm i'm i'm stuck redraw redraw i really want to go to the meta balls i had to look at my text message how how bad am i what's going on here oh oh i have to go everybody i think things are urgently falling apart i'm gonna come back i'm gonna come back oh this is sad that this is the end oh no whoops i hit the wrong team c's everybody um i'm gonna come back um i'm gonna sort this out and i'm gonna come back stay tuned to my twitter i really have to go i mean i i okay um i um um when will i be back i don't know i'm sorry everybody there's so many people watching too i really want to like what if i just try to do the meta balls in the next 10 minutes okay all right everybody we need a win this is probably going to like make things worse but i'm going to put this to the side i'm going to do some more research i have to think about this more nicole and other people in the chat let's try to do the metaballs i mean they're kind of wavy like the ocean okay let's get the code for this okay right look out look how low resolution this has to be there's no reason why we shouldn't be able to first of all i'm going to do this with just one okay which i know is like sort of defeating the purpose in a way but this is what we need to do in oh my god i can do this the good news is let's okay okay duplicate this i i'm going to get rid of all these textures we don't need the textures the texture coordinate it's going to make things much simpler just need the uv coordinate we don't need this left stuff we're going back to what i used to be doing vec3 uh color equals uh vect3 uv comma one we're going to set the frag to the color uh this we don't need the texture coordinate the varying we don't need we don't need this okay what am i missing here um equals i got him a syntax error you guys have really going to help me with this i'm going to make this happen fast fragment new resolution jail frag 1.0 um what am i missing here what am i missing dimension mismatch okay hold on let's go back to sketch.js get rid of this all this image nonsense all these interesting ideas gone to the wayside uh shader uh ripple shader and then rectangle with height let's get back to the start of things okay what am i missing vek4 color thank you there's like a weird equals error somewhere fragment shader error equal dimension mismatch vect2uv effect two use resolution back four okay colors of x4 frag colors of x4 back 3 vect4 make 4 vs an xy gl position what what did i oh boy we're not going to get very far if i can't fix this constructor not enough data provided for construction oh my god okay that's fine oh it's a vector oh my god i'm just like oh my goodness silly me silly me silly me okay we're back in business people okay got it got it got it got it got it okay so now um metaballs so i'm gonna just use this idea of a blob which is a i'm closing this tab this is speed coding create file blob dot uh paste this in here um i am going to go here and we're just gonna have two blobs there's gotta be an away oh no i can pass a raise i can pass a raise to a shader probably right but i don't know how to do that so oh i what did i click on here i don't know what i clicked on here to get this strange comment in here but such is life am i in is this the fragment shader no this is so in this sketch we're gonna create um just two blobs okay yeah um i'm actually just gonna do one to start okay so come back over here come back over here i'm going to say let blob zero blob zero equals a new blob random width random height and we're going to have a in the fragment shader uniform vect2 blob 0 and basically where am i and index.html needs the blob geez what is going on i'm doing this wait random is not defined what is even going on the blob dot js yeah that's what i'm doing new uniform blob to shaber then calculate what what anything with v gl uniform ending with v for vector what what is going on here okay check out those comments what's going on here what losing my mind here all right i'm gonna just do something very silly for a second and take this and put it here blob has already been declared what i'm like this is crazy okay we're going to do create vector okay okay we're just going to use a vector object i don't know what's going on i'm really losing my mind really i'm really i'm really losing my mind here this is like it's such a disaster import blob after importing pv p5 make make it the second import oh is that really am i like was it a simple uh that doesn't make any sense it doesn't make any sense right this is what i want to do something crazy is going on there that i cannot explain so then what i want to do is ripple shader set uniform u blob zero with uh blob zero dot x blob zero dot y okay i i don't know why my blob class wasn't working so now i should be putting the blobs location into the this um uniform blob zero then um blob u v equals blob zero dot x y divided by u resolution dot x y there should be a distance function is it called distance uv blob uv the color should be vect4 distance distance distance well color should be vec3 distance color 1.0 what did i get wrong here parameter one is not at the vector blob uv i've made things worse this is like the saddest day of my life you blob zero and in frag it is u blob zero view blob zero blob u v and sketch.js you blob zero line 12 in shader vect4 ah vect3 there we go there we go okay there we go aye metaballs we're in business okay uh sketch particle and i'm going to write update okay um so the blob should be moving right oh it is just very slowly um so let's make let's make the bob at zero zero and then uh have it be moving um one one okay so we should see this moving across okay awesome moving across there we go okay um oh blob is a class from javascript that's why you're getting weird errors with the blob class yes that's definitely the issue but how come i didn't have that problem before i'll never know why i don't care i'm doing it this way it's a particle um okay okay so now we just need to have it bounce okay this is some very fast bouncing ball logic okay we should see it kind of like and i think did i lose my um okay that doesn't matter did i lose my pixel density issue yeah pixel density one okay great now let's go to the frag shader and let's have i don't actually care about flipping it i'm gonna leave it um let's have that distance be like um the distance is some number between let's just do one minus that's sort of silly but oh one point zero yeah that's fine uh okay so um it's brighter near there so now i just need to have like two of these which is this is very silly what i'm doing so and there's got to be a way we're going this is going to get so improved after i leave later tonight i will tweet it leave leave a link in the description i don't know um blob one equals 100 comma 50. um let's also do another uniform blob one i mean this is a ridiculous thing that i'm doing here but it's gonna work in a sort of silly way um so we have you blob one uh we need to make update blob one and now i just need in here to basically do the metaballs algorithm with two different blobs i don't know how to use a raise with a uniform so we'll do that another time i mean i kind of have an idea of how i would do it but i'm already now i'm like i'm 45 minutes over but i'm like 10 minutes like five minutes over the extra 10 minutes i got but i've got it i've got to get this okay so let's go to the code and now the math is the square root do i have everything like that's weird the difference is x my oh that's the given pixel the difference got it got it got it got it got it okay so we need to sum all right we're gonna do this algorithm here here we go everybody um come back to me fragment shader i'm so there i'm so there so basically i need to have the sum equals zero then i need to have a vector difference equal the uv minus blob 0 xy right i want to look at the difference then sum plus okay oh oh the blob should have a radius so we're just going to arbitrarily make up a radius they're each going to be 0.1 i don't know if that makes sense that's pretty large the difference is these two things so now uh d equals is square root a function is square root of function in shaders we're about to find out it looks like it is uh square root of u v dot x times u v dot x i'm sure oh there's a length isn't there a length isn't it just this and then sum uh so this is diff 0 and d0 sum plus equal 10 times r divided by d0 okay uh okay what's wrong here float oh okay no just zero no d zero ten point zero no yes length so what's what's wrong here u v x y minus blob zero ah blob blob zero u v that's what i want blob zero u v okay blob zero u v is u blob zero u v x y oh okay don't do that okay okay great so i've basically got the distance oh i could have just done that with the distance function but fine no big whoop uh now we're gonna do the distance and of course i need to use an array and a loop this one uv effect to blob one uv is you blob one okay what am i missing here did i forget to set the uniform you blob one uh so close right ah okay now the question is uh now i can't tell if this is oh some okay don't scale up oh yeah metal balls yes i did i did i did it okay hold on everybody i knew i could win this i knew i could win this ah yes um hold on hold on hold on oh this is like not a relevant file anymore delete that file yes something happened after all of this oh my god i'm so happy even though i'm gonna have i'm gonna have to like i don't know okay i mean there's just so much more okay it's only two they have the same radius i'm not doing color yet but um oh that's so satisfying uh like i can make them bigger oh look at that oh look at this let's see let's see how how far can we push this because just to be clear about this just to be clear why we're here even though i've got to go it's a little slow but i think it's just slow because the things are moving slow um because yeah look at this hold on hold on hold on i just really want this to demonstrate what i want to ex there we go okay look at this look how fast that's running just to show you just to show you actually i just started with this metabolism just if i go to just go back to my metaballs code in p5.js right this is 400 by 200 if i just make this 400 by 400 this is raw pixel operations if i make this 800 by 800 i mean this runs so so so slow so now just to prove the point they're telling me bruno is saying make it full screen this is i've got to get out of here but i'm just so happy that this worked um no you know the thing is like it needs to be a square i mean i could have it not be a square it's gonna i'm not doing anything to account for nonsquare sizes but let's just do it anyway window with window height team c's everybody team c's everybody ah i've got to go goodbye everybody as always i always forget that this stock this stock it's stopping i hope you enjoyed this live stream don't forget about this stuff say goodbye adequately see you next time uh happy team seas everybody support tvcs goodbye never forget this stop i'm gonna do this you