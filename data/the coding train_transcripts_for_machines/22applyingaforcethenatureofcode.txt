so now that we have looked at the basics of Newton's laws of motion and seen this form of the force equals mass times acceleration which is the equivalent of saying acceleration equals force divided by mass and when mass equals one we have got acceleration equals force I don't know I need an exclamation point but I'm enthused though a little bit sleepy right now we now need to look at how we're gonna actually apply this in our code so let's just remember where we are in terms of our object oriented programming thing that we've been doing right we're making this object this class called mover that is our body that we're gonna move around the screen so it is a mover class and if you recall this mover class has three variables P vector we have a location we have a velocity and we have an acceleration the constructor initializes all those quantities and the update method the step through a moment in time method that we've built but we're saying over it over and over again does one a couple simple things it says okay acceleration is the change in velocity over time velocity dot add acceleration velocity is the change in location over time this is where we've gotten to this is every single video we're reinforcing this concepts and now we have this moment where we want to say we want to write code that looks like this so in our main program we have something you know we have a mover you know we have processing setup where we initialize that mover M is a new mover and then we have Processing's draw method and there is where we say m dot update m dot display etc etc so over here I've run out of space for myself over here this is a new place right here we want to start to say things like okay this mover object which updates and displays It's Made etc we could start saying things like hey apply this force to it apply wind to it apply friction to it apply gravity to it apply love fear whatever types of kind of strange ways you want to think about a force we want to make a vector and stick it in that object and have that go into acceleration right that force so one way of writing that code is as follows I got to get better at this whiteboard it's kind of like okay no it's one way of doing that is to say hey let's make up a force which is a new P vector you know one comma zero something like that and let's say m dot apply force that force this this this oh my goodness star star exclamation bells fireworks fountains hearts right this is a huge thing here what we're saying is any object at any moment could just receive a force when you click the mouse apply a force when you get it you know when the when the Kinect camera detects a human present to the hand when you get this information from your Arduino there's so many things that now this any inputs could come and go into that object as a force if we can make this work so this object can receive that force that force can go into acceleration and trigger that object's motion then just checking that recording as I do every time now then we've really got somewhere okay so how are we going to make this work in our code so let's add one I'm gonna stop here and we're gonna add so this tells us right right here this tells us we have to add an apply force method to our program okay little misshapen I'm back at it here we are okay so this is this new line of code we've written and that apply force force we've written this code if we were to run this right now we would say oh I don't know what the method apply forces an object doesn't automatically have that method no more than it automatically has an update method update is a function that we've written into our mover object this now says Newton's law is now I turn this off Newton's law is now telling us that we need to write a new method into our mover object what is that new method its apply force so we write a method for say the return type does this method return anything no it does not void now we need to know what is the name of that function the name of that function well we named it apply force apply force what is that object what does that function take as an argument well it takes a singular argument the arguments data type is P vector so we need to add P vector and for brevity here I'm going to say F right this is the function this now would run this would this would compile this would be happy it would run but it wouldn't do anything would pass that variable in and do nothing so what do we need to do let's look to Newton's second law as our clue as to what we're gonna do in that function a equals F that is our method on that is art that is our that is Newton's second law we could just write that and what can we do we're gonna just do exactly that acceleration equals F so what we're doing is we just took a separate we wrote it and we before we were calculating acceleration in update now we broke that out into a separate method called apply force so they can receive a force and it could it could pass that force into acceleration which would then go into velocity which would then go into location okay I think that's okay so let's actually implement this in our code right now and see what happens okay hello again so if we look at this I'm gonna just write up here I'm going to add something I'm going to say P vector F equals a new P vector zero comma zero point one now first let me run this for a second this sketch by the way I moved it back where the object is initialized with no velocity of no acceleration so it's just sitting there in the middle of the screen in the absence of any force or if the net force is zero an object stays at rest or staged at constant velocity that's what's happening here Newton's first law is happening so now what we want to do is say now now there will not be an absence of a force instead of an absence of a force we're going to apply this force to that object and that apply force F let's run it aha the function apply force does not exist right because we have not defined that force so now we can go over here and we can say that we have not defined that function void apply force P vector force acceleration equals force this is the beginning of Newton's second law the beginning so this actually in a moment we're gonna see this is woefully inadequate we need to implement several additional steps here to really get this idea of net force of force accumulation going but this is a beginning step so let's run this sketch and see what happens look that force has been applied well this is pretty exciting because watch this now what if I say any vector I apply to that that becomes a force on that object pushing it off to the side so one thing I guess that we left in here by accident is limit the velocity to five so I'm going to take that back out just so we can see that force being applied so we can see that you know I could make up I don't know why I'm just making up forces right and now look what we've got we're continuously applying this force to that object always pushing it to the right always pushing it down this is pretty exciting because this model is going to allow us to do so much even now we can see even just with the simple bit of code we kind of have a more dynamic system going on where it feels like lots of different things are at play here okay so the interesting thing though is that what have we done what are we simulating exactly nothing so the this this video series which I'm starting to regret but hopefully shouldn't we're at this moment where we're a out to do a string of videos and every one of these videos are going to answer the question what is the force use the Force something like that right the thing is this first beginning step that we've done we've just made up a force it's important to realize that you could just do this a force is a vector that causes an object with mass to accelerate and our first step here is just to make up P vectors and apply them to the object the thing that we're missing which I'm which I'm trying to decide but I'm think I'm gonna have this video go on with this and solve this problem is watch what happens for a moment if we add a second force okay so let's go back to our code did I would I never actually come over here was I over here who knows maybe I was just talking okay let's let's add um so let's simplify things for a second and say okay here's a force oops here's a voice pointing down the ball is bouncing excellent here is a force pointing and I'm gonna have a point to the left that's the right and let's actually do a little bit better here and say I know this is gravity and this is wind we want both of these forces to be applied to the object let me run this what happened to gravity I only see wind all right strange right well let's comment out wind and see what happened oh I only have gravity I have no more wind so scratch headscratching what's going on here well let's look at how we wrote that apply force method a acceleration equals force so let's have gravity and pass it in the object acceleration equals gravity let's have wind and let's pass it into the object acceleration equals wind now let's apply acceleration to velocity what was the value of acceleration it's equal to wind that's not what we want when we apply multiple forces we don't want to replace acceleration with a new value what we want to do is accumulate all those forces into into acceleration this is the concept of a net force a body experiencing multiple forces its net acceleration is acceleration equals the sum of all those forces divided by mass that's really the accurate stating of Newton's second law so we can actually make a very very very simple change acceleration I know you're thinking of it already dot add F acceleration dot add F so now no matter how many times we call this wind and apply force by the block friction matter how many times we apply that the forces come in get added into acceleration add into acceleration added an acceleration and then that acceleration gets applied to the velocity close we're still missing something sad because this is so clean and nice and it feels like we're done and we solved it and everything's gonna work the truth of the matter is conceptually were right on here but logistically practically speaking we're missing an important key factor in how code works right what are we adding these variables into we're adding them into a variable called acceleration that variable acceleration is initialized if we go back to the code for a second in the constructor as zero acceleration starts as zero that makes sense because when acceleration starts at zero then we accumulate the forces apply that to velocity then we start at zero and we accumulate the forces and apply it to velocity and we start at zero and we akuma it that's what happens at every moment in time our acceleration just accumulate to all the forces and gets applied to velocity right every moment in time we start accumulating all the forces into acceleration again the reason why I take this over to her again it's not because I'm a crazy person although I am totally a crazy person it's because that's not what happening and that's not what happened that's not what is happening in our code this acceleration is actually accumulating over multiple frames we add all the forces into acceleration in the next frame we add more forces acceleration the next frame we had more forces in acceleration each frame of animation is a new moment in time it's a time for new beginning for anything new to happen it is not the previous moment in time an acceleration in our model here is the net force at that moment in time so we actually just need to do something really simple which is right here at the end of update after we finish after we accumulator our forces we get our new velocity we get our new location we have to wipe out acceleration so that the next moment in time we can start again from zero and that a very simple way to make a vector cleared out to set its values to zero is just x zero if we multiply all the components of a vector by zero all the component of the vector will be equal to zero so this is now the complete picture right we have added a new apply force method the force gets sent in and gets accumulated into acceleration that accumulated acceleration goes into velocity and then at the end of every moment in time at the end of every frame we wipe out acceleration so we can start again anew on the next frame so now what I want to do is take this and implement this in our code and see the magic happen again you know by the way it's just a circle moving around the screen what can you do ok so now we're back over here let's go and look at this and we're going to change a few things first let's add force accumulation dot add force beautiful beautiful okay now we've got force accumulation and actually I'm just almost out of curiosity let's run this and see what happens and let's you can see it's quickly spiraling out of control that's because the acceleration is like all the forces that ever happens it's the dawn of time are now affecting me which is not what we want only the forces at that particular moment in time should be affecting the object and now what we can do is fix that by saying at the end we are going to knock velocity excuse me acceleration dot multiplied by zero this is going to clear out the acceleration and look this looks very similar to something we did before because before we had one force with that was pointing to the right and down now we have them as two separate forces from gravity pointing down and win pointing to the right but let's see just so we can prove that we really cook in here what can we do with this just to show this is working if I add if mousepressed I can show you that I can apply the wind force only when I'm clicking the mouse so here we have and watch I could do something really weird here which is that I can go I'm such a loser okay so so now you can see that whenever I click the mouse wind is applied and now it's just bouncing back and forth there's no other forces in the environment I apply the wind it's always pushing it to the right I let go of the mouse and it's bouncing back and forth again so this is a big moment and now you have something you can really work with and but the next set of videos we're going to say to ourselves maybe we shouldn't just make up numbers maybe what we really want is to actually look at a formula and could calculate something it'll be nicer it'll be more like science but this for the moment is pretty good because I think making up numbers is just fine you can get a lot done you can calculate something based on now you could calculate have something based on input from a sensor input from the mouse input from a connect sum the generative crazy calculated algorithm that you've come up with pearly noise you could have Pearlie noise wind force now there's so much you could do with even just this model but all we've done here is make up forces so in the next series of videos we're gonna actually I'm think I'm just gonna do one we're gonna look at air resistance or fluid resistance which is the same force and another one we're gonna look at gravitational attraction I don't mean this kind of bouncing ball gravity I mean actual mutual gravitational attraction between bodies else I totally what it's a second I forgot bear with me forces ah but before we can do that actually I think we need to introduce mass so in the next video I think we're gonna add mass into this so that we can have mass play a part in those other simulations that we're gonna do okay so sayonara talk to you later I'm gonna click a button where's the mouse there it is goodbye