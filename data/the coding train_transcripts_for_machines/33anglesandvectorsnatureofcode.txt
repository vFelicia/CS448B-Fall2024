hi again so the next topic that i really want to look at are the trigonometric functions sine cosine tangent and specifically something known as polar coordinates but before i get there actually i want to take a little break and look at something that's a really common problem in coding visuals in p5.js and it relates to that as well and will kind of ease us into looking more closely at those trigonometric functions and so the topic that i want to look at is what if what i want is things that are moving around in my p5.js canvas to point in the direction that they are moving let me be a bit more specific about that let's say instead of drawing a circle as my mover object i'm going to draw it as a triangle and that triangle is moving with a particular velocity so i know now that i can rotate something right if this is if this is my object i can rotate something relative to the xaxis by the way an angle is often written in a diagram as the greek letter theta so i i might be doing that so just mention that here i want to rotate this triangle by some angle and what if basically to lock it in the direction that it's moving i want to know the angle associated with a particular vector the velocity vector relative to the horizontal xaxis now you might have a more creative idea of how you want to rotate an object that's not keeping it locked exactly to its velocity vector maybe you want it to sort of approach that vector or spin in the opposite direction or do some kind of like strange or unique behavior but just to understand how do i have it pointing exactly locked to its velocity vector well a way that i could do that is i can take any vector and i can draw its components right this is its x component and its y component this is the velocity vector and suddenly you might notice aha i have a right triangle and this angle here is one of the angles inside of this right triangle and trigonometry the trigonometric functions deal with the relationship between the sides of a triangle the in this case the x y and magnitude of the velocity vector and the angles inside that triangle so if i know the x and y of the velocity then i maybe there's a way for me to calculate what this angle is and in fact one of the trigonometric functions is known as tangent in this case tangent of that angle equals the length of y over the length of x i'm going to talk about what tangent is in a bit more detail in the next video when i go through all of the trigonometric functions including sine and cosine but this should just give you an inkling of how you might then eventually solve for this angle in the nature of code book chapter 3 that's linked in this video's description i go through the full details of how to solve for this angle but i'm going to stop here and just let you know that one of the nice things about working in p5 is if i have a variable that's storing a vector like velocity i can actually just say velocity dot heading and it goes through the math using the tangent of the angle using the x and y components of the velocity vector to solve for that particular angle and i can take that value and i can use it to rotate a particular object that i'm drawing so let's see that in action in the code itself so here i am back in my mover object and i'm going to change the way i'm drawing it to be a triangle so i very quickly just use the radius value that i was using for the size of the circle to set the points of the three vertices of a triangle there's lots of different ways you could do that but i'm just saying negative r negative r for this point negative r positive r for this point and r comma zero for this point so not drawn exactly to scale but that's a quick way to make a triangle based on one single value i can add back in rotate by the angle and you can see now these triangles are spinning according to the arbitrary angular motion algorithm that i did in the previous video but that's irrelevant here so i can comment all of that out and ultimately i just want the angle to be the heading of the velocity i also just made a quick adjustment to say to like have this point be halfway down and this point be halfway down so that the triangle is a bit more elongated because i could see if it's really pointing in the right direction and you can see that here right now that it is this is where i'll stop for this example you can imagine the possibilities of where you might apply this in different projects that you're created and working on but before i go i do want to mention that the inverse is also true right here i'm getting an angle from a vector but i can also if i had an angle i can make a vector from that angle there is a way to do this with something known as polar coordinates and sine and cosine but i can also use a function in p5 called from angle this is an example of another static function you can go back and look at my video on static functions with p5 vector but i can make a vector from a particular angle this is really useful if you want to build a sketch where maybe you're using the arrow keys to drive a object around the canvas to quickly demonstrate this this is my mover sketch from chapter two the only thing that i've done differently here is change the drawing of it as a circle to a triangle and i've eliminated gravity so i've taken that out so there's no acceleration the object is not moving what if i just override the concept of acceleration and set the velocity to a manual vector if i were to set it as a vector one comma zero you can see it's moving to the right if i change that vector to one comma one it's moving down now i need to also add rotate by that angle and now we can see it's pointing in the direction and it's moving but what if i want the angle to be the starting point of where it moves i can say p5 vector from angle this dot angle so now i create the vector from whatever that angle might be so if i were to make that angle pi divided by 4 we can see now it's moving at a 45 degree angle what if that angle as it moves changes now it's moving in a circle maybe i increase the magnitude of the velocity and it's moving in this kind of circular pattern because it's always turning the angle is always turning what if i were to change the angle according to key presses for example in draw i can say if key is down based on whether i'm pressing the left arrow or the right arrow i can adjust the angle let me slow it down again to make this easier to demonstrate oh i did it in the wrong direction once again because i'm pressing you can't see which key i'm pressing but left i actually wanted to rotate counterclockwise so left should be a negative angle right should be a positive angle and that was kind of a lot to turn i can drive this object around the window so what i'm emphasizing here is that the angle is both something that can come from the velocity from a vector if we're calculating the vector based on some kind of algorithm or i can define a vector based on that angle and i'm going to unlock this even more in the next video and look at sine and cosine so here's an exercise you could try this is pretty difficult i think but i've shown you in this example right if i go back to the mover's code how to get the velocity from a particular angle that i'm manipulating with the arrow keys well if you've ever played the game asteroids you might recall that as you turn the object you can then apply a thruster which will push it as if there's a force being applied to it in a given direction it looks exactly like this so here i can use the arrow keys to turn this object when it's pointing in a given direction i can press z to push it in that direction notice it's not necessarily moving in the direction that it's pointing but i can apply a force in the direction that it's pointing so how can i turn an angle into an acceleration vector that's how it works in asteroids so of course i've linked to this example also in the video's description but this might be something before you look at that you try to see if you can implement yourself as well so hopefully this gives you a little bit more understanding of how you can work with angles in the rotation of an object that you're drawing in a canvas and in the next video i'm going to go even further with this by looking more closely at sine and cosine themselves and a concept known as polar coordinates see you there you