all right I'm back again I'm kind of going through my list of topics about 3d and WebGL with p5.js and I'm now onto camera so in this in this video I'm gonna talk about camera now there are three functions that are important to look at camera perspective and ortho I recently did a coding challenge which I will link to from this video where I made heavy use of ortho perspective but I just got a terrible job of explaining it so I'm gonna try to come back to that in this particular video but let's start just with the camera function so the thing about a camera actually so let me let's just pretend for example that this is the scene that I'm looking at right and that's the cube and what I want to do is there's this idea this idea this is a madeup concept of a camera there's a camera over there I should turn it towards I'm out of the picture there's this madeup idea of a camera which I'm gonna draw like this what might not be immediately obvious to you is there are a whole bunch of properties associated with this camera for example this camera is at a particular location it's at a particular X Y Z location it's also pointing in a particular XYZ direction so a camera you can think of this marker as the camera it's pointing directly at you and it might be closer to you or further away it might be up here but pointing it you know at the ceiling so do I need to define I have a camera I need to define where everything is in the scene then where the cameras are where it's pointing but that's not even all I also need to define a vector that points up because now if you think about it right if this is the camera and you were to this is a terrible idea for me to pick up this camera rotate the camera right oh this everything's gonna go alright apologies for the technical camera this half there but you can imagine right if the camera is turning is it looking on its side is it looking straight up so that vector pointing up tells us how we're supposed to turn so we need all three of those properties we actually need and this is also an X Y Z value so the camera actually needs to set a camera we need one two three four five six seven eight nine arguments so let's go back and do that now here's a scene that I've set up it's mostly the same as the previous video but I'm just using a normal material as opposed to the video texture now here's the thing watch as I magically add a camera to this scene without the camera function your this is gonna blow your mind at the very beginning right up here I'm just gonna say translate 0 0 Mouse X whoa look at that camera zooming in and out of the scene so it's really important to realize that this camera is an artificial concept created by us to create the illusion of a sort of pair of eyes or a single eye really in the scene I guess it's a pair cuz you're seeing depth anyway to look into this scene but if this is my three dimensional object and this is my camera what's the difference between moving the camera towards it or moving the object or the whole scene towards the camera those are the same things so you can make do a lot of camerawork and moving things around and changing the view by just manipulating the rotation orientation and position of everything in the world but sometimes the camera function can actually be quite useful to do certain things that wouldn't be as easy to do without it so let's take a look at how that works deep breath okay so now I'm gonna go back I'm gonna take out this translate and I'm gonna add the camera function now where is the camera let's put the camera at zero zero zero now where should the camera look let's have the camera look at zero zero zero oh and which way is up let's have the camera point up zero one one points upwards one point down I don't know one zero so this is just about right the default camera except for the fact that what this is again if this is my object my scene I just put the camera right here in the same place I actually want the camera to be a little bit out the camera is by default out and I think there's like a specific value for this and I always forget what it is so I'm gonna pull it from a processing tutorial that I will link to that has a lot of information about 3d I'm going to just grab this value so this is the default Z location of the camera 0 0 and then I put it here so it's the height divided by 2 divided tangent of PI / 6 it's probably a better way to write that some sort of magic number and I'm gonna now I'm gonna go back to the sketch we should see this is exactly as it was right so I'm using the camera function if I comment out the camera function there it is it's the same scene but now I can start to move the camera around for example what if I actually put the camera on its side like pointing to the right right now I'm looking at the scene I just turned the camera over we could actually animate that and have it bounce around as if it's like a shake and get a shaky camera that's kind of like a fun thing to try to do again this is no different than rotating the whole scene but I'm using the camera object to do it let's put that back to pointing up what if I were to move the camera along the xaxis so I'm going to say x equals map Mouse X which goes between 0 and with 2 between like negative 200 and 0 so I'm gonna kind of like move the camera to the left as I move the mouse I don't this is sort of silly whoops I have a syntax error 0 with negative 200 I owe this should have X here now so that you probably camera X just to be kind of consistent so now we can see the look it looks like it's spinning which is kind of weird but you have to remember they do where the camera is looking is still at the center so what I'm actually doing is this right I'm doing this right it's always looking at the cube it's just moving to the side of that plane you can kind of see you can kind of imagine that again if I were more thoughtful about this are gonna probably create a better visual demonstration but what I could also do at the same time is move where it's looking remember this is the sort of look at locations called Center X centralized centers needs to look at location so I have where the camera is where I'm looking and then the orientation of the camera so now if I did that this gives me a panic for some reason I did this in inverse I didn't mean to do that so let me let me just I think what I meant to do is this yeah so I don't have it backwards which is not a big deal but you can see now I'm panning back and forth and you know I could do something like change them I could have it rotate as I'm panning you could imagine there's a lot of possibilities so that's what the camera function does I this merits probably some kind of coding challenge where I attach the camera to some like moving things throughout a sea know we can make a shaky let's just make a shaky camera because that's kind of could be fun so how would I make a shaky camera let's have the camera camera X equal random negative five five let's see what this looks like and camera camera Y also equal a random amount we usually use Perlin noise to have it be and then I'm gonna give Ono the Z I'm gonna make that just like an offset so I'm gonna put this in and let's have it continue to look at the center so it's like a so you can see is the scene shaking is the camera shaking I don't know but you can see now I could probably I probably could have like do something weird like mix these values up so I could have it like look and slightly like also in a random Direction that's slightly off so I don't know we can see here earthquake earthquake so I've used the camera now to make kind of a little bit of an earthquake simulation okay so that's camera did a couple more things with that let's comment that out next I want to talk about perspective now what pretty this perspective is separate from the camera perspective is a function that defines how we how that three illusion of threedimensional perspective is created and it involves a couple of things it involves a field of view which is really a pyramid but I'm gonna draw it kind of like a cone or a twodimensional come right so that field of view could be wider or it could be smaller and then it also defines the clipping plane so in other words maybe actually anything that comes in front of this near point I don't even see or anything that's passed this far point I don't even see so there are defaults i also need an aspect ratio I think which generally would be tied to just the aspect ratio of your canvas but that there could be some nuance there I'm sure so I have to admit that I don't know that I'm not really a 3d person so you know I have done some examples of things I don't think that I've ever used the perspective maybe I've used it to kind of expand the clipping plane then you're in for points or to shrink it but generally I'm always working with the default field of view let's try to just at least add it though to see what we get so so if I were to add the perspective function let's get it working with the default perspective so the default perspective and I'm gonna go back to my processing tutorial to get these default numbers and I'm gonna just copy that in here and I'm gonna change that the processing p.3d renderer is a java programming environments I need to just quickly change this to be compatible to so basically the the default field of view is a 60 degree angle or PI divided by 3 the Z camera Z location right this is actually something that I already added up here right so the same is this right so that is probably um so that's kind of the default camera Z location and so that's how I'm defining odd that's how I'm defining the clipping plane it's the camera divided by 10 in the camera z times 10 so that's so but you know I could make these arbitrary numbers but let's just at least look and then aspect ratio is width divided by height so let's look at let's look at how this looks okay so now we have the the default perspective so the first thing we could experiment with here is like so these that that clipping plane is defined by where the camera is because you want to see something based on the camera but for example what if I just take the far end of the clipping plane and assign that to Mouse X I can now see right I kind of as I move the mouse it kind of clips it's sort of like taking away what I can render so this is generally something that I don't play with because I just want to like see the whole scene but sometimes in certain situations you might need to deal with it so another thing that we could play with is the field of view what if instead of having a fixed e degree field of view I had like a 30 degree field of view so it was shrunk or even like a 10 degree so this would be pi divided by six would be a 30 degree field of view and you can see it's the field of view has shrunk so it actually looks kind of like I'm zoomed in on it I'm also the the clipping plane was changed so because the clipping plane is being defined based on the camera which would be fine in the field of view so this is this is a little bit kind of nuts here but let's let's um let's try to let's try to do something by just say I'm gonna have the clipping plane between between between zero and two thousand and I'm gonna put the field of view back to sixty degrees and I'm not gonna actually move where the camera is I'm just gonna leave the camera at as if there was a field of view of pi divided by sixty degrees so that camera and actually so sorry oops what I want to do make back up for a second here what I want to do to demonstrate this I think this is gonna work is that I want that camera Z location to be fixed so I'm gonna store that and so I'm going to just put in pi divided by three here now what I'm going to do is I'm gonna have the field of view be a variable that changes with mouse X between zero and pi so now what I should see is look how that perspective changes like this is a hundred and eighty degree field of view and MIT right here is about sixty degrees and now it's sort of like my field of view is narrowing now the camera is actually not moving here but based on the field of view we're seeing kind of a different volume and it appears closer so this is kind of a complex topic and I think I'm kind of over overemphasize it because really what I want to talk about which I think is much more important or interesting to play around with is orthographic perspective or orthographic projection in other words with perspective with traditional perspective objects that are farther away appear smaller than objects that are closer that's how we create this threedimensional perspective with orthographic perspective objects that are farther away are the same size they're objects that are closed they might be different sizes but if they are actually the same dimensions they appear to be the same size and this creates kind of a flattened 3d look and this is a classic 3d look that you'll see in lots of game certain game designs like Qbert so here's an image of Qbert you can see how this has a kind of like flattened 3d flattened 3d perspective so and this is a this is also refer to as isometric projection so let's see if we can create and this is what a coding challenge I'll link you from this video where I do this and create a scene that has this kind of perspective projection so let me change now I'm gonna take this out and I'm just gonna write ortho in here and you're going to see oops as I go here I'm gonna refresh this is now orthographic projection and what you see it looks like it's skewed but actually as the cube rotates and it gets further away or closer it doesn't change its side so this will be a lot more obvious if I put a whole bunch of these cubes so what I'm gonna do is I'm going to take out the let me keep the rotate in there and I'm gonna make a little loop I'm gonna say for let X equal negative 200 X is less than 200 X plus equal 50 and what I'm going to do and I'm going to put push and pop inside the loop and actually I also want to put rotate for each one of these and what I want to do is I want to translate by X X 0 0 so what I'm trying to do let me take out all the rotate and I'm gonna make these boxes 50 what I'm trying to do is just put a row of boxes so there's a row of boxes we can't see that do I have it actually I have ortho on me take ortho off you can see there's my row of boxes now let's let's actually see this perspective a little bit let's make the boxes a little bit smaller let me give them actually like an ambient material and let me add a point light just that's white that is above that's like at 0 255 0 negative 200 and then from a little out front 200 so let me so we can see here now and it's I would like this love to this light you can see and let me make the background just a different a slightly different gray so we can see what again you can see there we go so you can see this perspective you can see how I've got this idea of sort of vanishing points at my eye looking at the center of this field of view let's change this to ortho let's put the rotates in and you can see we can see this perspective even more now let's change this to order and actually let me also translate along the z axis because this is going to be kind of key so I want to translate along the z axis so where do I do those translate I'm also going to translate that same x value minus 200 along the z axis and I'm going to make the boxes a little bit bigger whoops oh X there is no Z I'm just going I'm just reuse the x value so now you can see and let me actually say x times 10 whoops minus 200 oh X minus 200 anyway I'll keep them not so big okay there we go this is what I was trying to get for so you can see this perspective as they get smaller as they go back all right we're getting somewhere now bear with me let's turn on orthographic projection fourth though now you can see first of all so I run afoul of the clipping plane so if I go back to and look at Simon slips cheat sheet here which I seem to have lost I know here it is I can see here left right bottom top near far so I can need to define the volume the box where everything I see lives and so I can say right now I want to go left negative 200 200 top negative 200 bottom 200 or is the other way around I think it's the other way around top I don't know that's it I'm never just gonna give myself a really big space native house in a thousand just to not worry about it too much and I'm gonna go back to the sketch and we can see there we go so you can see even though those are going backwards they're all exactly the same size so again have I really made the something have I really does my design that I'm doing really merit orthographic projection again taking this out we can see this is what the actual scene looks like and for what I just did I wanted to look this way to be able to see that difference but there are some cases and certain kinds of flattened views of the world that are still have the 3d drawing would appear more flat that you want to use that orthographic projection for let me quickly correct one thing about ortho the the clipping plane near and far oh I can't believe I didn't realize this is relative to the camera so if I say the clipping plane is between zero that's here and between a thousand that's kind of a thousand units away this sort of like vague threedimensional units away from the camera so me saying like a negative thousand two thousand is kind of pointless because now the K that's sort of by but what if you like rotate the camera or something maybe it would matter but I don't know it but so let me actually just put this back at zero and you know I could say 0.01 maybe it's most accurate but just to see that that is yeah so that's what I needed to do I just need a further further far value and could start at zero okay so what am I missing I now have done some tutorials about we've looked at 3d geometry primitive shapes we looked at material being sort of the skin of that geometry lights being light into the scene texture being a way of taking image data and wrapping it onto that geometry so we've done all these things and now in this video mostly looked at the camera which is a way of moving our view of the scene around changing our field of view or even changing the perspective whether it's actual 3d perspective or orthographic projection the things that I'm missing are how to do some custom shapes in 3d maybe with textures as well how to load a model from another and and also I should add to this list something called a shader so this is something certainly that can be done in a 3d rendering environment a shader can be applied to geometry in a variety of different ways and so at some point I would like to come back and do that I will make a quick plug for the the book of shaders I think it's the book of shaders , I'll link to it in this video's description for engine shaders it's a great resource for learning about them ok thanks for watching this video about camera in perspective you