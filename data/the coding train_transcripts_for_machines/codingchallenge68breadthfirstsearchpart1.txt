oh hello welcome to a coding challenge this coding challenge I am going to attempt something called breadthfirst search now this is an example of an implementation in p5.js of breadthfirst search it comes directly from this book rocking algorithms by Aditya why bhargava it's a wonderful book I highly recommend it buzz marketing books here on my youtube thing but I do want to say that's where I learned more recently about this algorithm and in practicing it implemented the example so what is breadthfirst search so this video first of all is also placed in a series of videos about graph systems and search algorithms so you can image this video description go back to some of the introduction videos that will lead you up to here because just be here right now because I'm going to do everything from scratch with no knowledge but a graph system is a system of nodes and edges and you can see here the node now the nodes all have a name these names are exactly the names in that grokking algorithms book and they have edges so they have connections you can think of this as maybe a map of friends and their relationships you could also turn this into more like a maze type thing there's so many different ways you could sort of visualize this idea of a graph system and you'll see in some future videos that I actually made previously I do have some implementations of graph systems to create mazes but that aside what breadth first search is designed to do is find the shortest path between two nodes and it's something like this you know it's quite a simple problem to eyeball it we can see like if I want to get from you or me or whoever this person is to Tom I can see through Claire there are just two steps if I want to get to a node this through Bob is faster than going through Alice Peggy Bob onion so how do you figure this out it's called the ah1 algorithm for doing this it's called breadthfirst search and the reason why it's called breadthfirst search rather than something else that you might learn about or see in a future video called depthfirst search is breadthfirst search by definition looks at all the nearest nodes first sees it it finds what is looking for then looks at all the nearest one those first infuse what it looks as fines book as opposed to going all the way through I recently made a video about binary trees and search trees that's more like depthfirst search because in the binary tree you just keep going to the left all the way to the bottom but here breadthfirst we're looking at the nearest neighbors to start okay so what's the problem that I'm going to work with today you may or may not be familiar with I know if this is a thought experiment weird idea six degrees of Kevin Bacon there's actually a website it's called Oracle of bacon and I'm going to go to it right now and I don't know I needed I need an actor or I need an actor let's pick any Schumer and I'm going to pick a fine link okay Amy Schumer has a bacon number of two the shortest path between Amy Schumer and Kevin Bacon Amy Schumer was in the movie trainwreck with Marisa Tomei who's in the movie Crazy Stupid Love who with Kevin Bacon so this particular website has a massive database of movies cast and uses breadthfirst search to find the shortest path between two actors and the thought experiment Evan Bacon has just been in so many movies that anyone could be within six degrees of Kevin Bacon I don't think I have an IMDB what's the what's the chance that Kevin Bacon Daniel Shipman yeah infinity infinity we got to work on that come on help me out with this here I want my Kevin Bacon number to come on down okay so how are we going to do this now I would love if anybody so this is an experiment you I'm going to do this for you and hopefully teach you something about this and then maybe you could do something similar but with a different data set but I'm going to use just a toy data set essentially I manually created before coming here right now this data set so this data set has a few movies in it some of which have Kevin Bacon in it and some of which don't have Kevin Bacon it's organized in JSON format which is JavaScript object notation I do have some video tutorials about that if that's unfamiliar to you but I'll try to talk about that a little bit as I go through so let's let me move over to the whiteboard to figure out how we're going to work this so what I need to do in my program we're going to look at the algorithm itself on Wikipedia and start translating it into code but before we even do that what I need is I need a I need a node I need a node object so in the end there's going to be Kevin Bacon there's going to be some movie and there's going to be some other actor so and then there's lots of other stuff so in order to keep track of these what I need is I need some sort of object I'm going to call it a node and that object establish called a value or a label or say a value it also needs each object needs to keep track of its edges which other knows is it connected to so we need edges and this will be an array I don't like these dashes here that look like science so I don't know dot how looks like something else what they want these are this is the data now at its core this is very similar to my binary search tree that I mentioned which each node just has a left and a right but here each node could have just one connection zero connections ten connections now there's other pieces of data that the node is going to need I mean these are part of the breadth first search algorithm I'm just going to mention them right now because that whether in my mind one is we need to know a boolean has it been checked search or not like is this or looking for Kevin Bacon is this node been checked already to see whether it's Kevin take it or not so this is going to be true or false this is going to be a boolean and we're also going to want eventually we're trying to solve for that path so we're going to have nodes keep track of their parents meaning as I'm checking and good moving about through this graph system I want to keep track of where I came from what was the previous node so that when I find Kevin Bacon I can back up and find that full path so I want to keep track of the parent as well okay so we know we need an object that stores all this stuff so let me come back and start building that and I'm just going to put that so I have I have a JavaScript project set up if I go to the browser and refresh the page there's nothing on the page but I'm going to start adding some code so first thing I'm going do is I'm going to write a constructor function for a note object and I'm going to say I'm going to say this value equals something we needed that this dot edges is an array this dot searched is false it hasn't been searched and this dot parent I'm going to set it equal to no so I want to be able to whenever I make a node with this constructor function you know even though this by definition its parent will be undefined I mean it explicitly says the double just so I'm kind of keeping track of that okay so this is pretty good this is pretty good okay turtle it should be blank so maybe when I say new node I'm going to give it a value okay so this is good you know what I want to do I want to take this code and I want to put this in a file called a price shouldn't call it knows that should I find we call it no touching okay okay uh so now sketch doesn't use so in P 5 P 5 has a set up function set up function is kind of like window page loaded type thing so that's going to be in sketch I'm also going to make here's the thing I'm going to make a graph object so I might have two redundancy or some things in my code in the list without a fixture here that are a little bit unnecessary but what I would like to do with the graph object is I would like to store an array of all the nodes and then I would like of all the nodes and I probably need you know what the graph really should be as a data structure it would be something like I could look up each node by its a photograph by its label by its value so this mode typically be something like you know a hash table where the the key might be Kevin Bacon and then I could with that key I would find out all of its edges its harren and all that other stuff so I want to be able to have I might not need this array because I could only don't play the algorithms to traverse the graph to find what I'm looking for but it might be useful to have this array if I want to visualize it or do something that I could just iterate over all the nodes really quickly there's going to be we're super done here but this is what I'm going to do so let's go and do that and I look forward to hearing from everybody later about how I'm not doing terrific like I'm going to say function graph this dot nodes is an array and this graph is an object an empty object so if you're beneath this object essentially as an associative array or a hash table and has a video about that if you're interested okay now I need to read the data that's the first thing I need to do so I'm going to use p5 has a function called preload which I can use to missus a VAR data and then I'm going to say data equals and this is a p5 function called lo JSON where I could just pass in the name of my JSON file which is Kevin Bacon JSON Kevin Bacon jason jason jason ah what is it somebody will tell me I'm pretty sure from the comments that it's gifts though and not just I've been told that many a time okay so now I'm just gonna instead up I'm gonna say no canvas p5 makes the canvas by default but I don't need it and then I'm going to consult out log the data so let's just make sure the data is there we can see there it is so the data came in I'm an object which has an array called movies and each movie has a a property called cast which is an array of all the actors so that's great so now what I need to do is I need to make a node for every movie and every actor ok so I want to be able to parse through and read this list so the object has movies so I'm going to save our movies equals data movies then I'm going to loop over all the movies in that JSON file well I'm really not onto breadthfirst search yet I'm just kind of gathering the data and I'm going to get and what I'm going to do is I'm going to get the movie equals and what was the movie the movie has a cast title so the title is also a node so once the movies movies index I title and cast equals movies index I cast so first I need to make a note VAR N equals a new node movies index I title ok so excited we can say that again movie so I need to make a movie node and then what I want to do in the graph is I want to say oh I want to say I'm going to make a graph object and then write the graph object is the thing that's going to keep track of all the nodes so I need to say at the beginning graph equals new graph and then what I would like to do is add this node to the graph so I'm going to take this node object which whose value is a particular movie and add it to the graph graphs add node and now can I just do this and get this to run tada no grass is not defined okay so first of all I forgot a bunch of things one is I forgot I need to add a reference to my node object javascript file and the grass object javascript file that's one problem number two add node is not a function this doesn't just exist it's a function that I need to write so I'm going to attach a method to the grass object using the prototype I have a video about what prototype is if that's not familiar to you grasp that prototype add node equals function ok now what comes in a node so what do I want to do okay so I need first couple things one is I want to save this node dot push that node so any node that comes in I want to put it in the array because I want to store all the nodes in a range might be necessary stuff doing that it's a safety mechanism then I also want to have a lookup of the node based on the name so the movie name needs to be the key for that node object so this is going to look a little bit weird but I'm going to say title equals and dot title the dot value right no that title is stored in the nodes value then let's say this graph index that title equals that node so this is me putting this is node into array and node into you know it's not really a hash table cuz it's JavaScript but I'm thinking of it as like a hash table okay so that's good I've got the UM I've got see what do I have the movies okay let's now add the actors what I'm gonna do in this first part is I'm going to add all the data to get the graph set up and then I'll take a break and we'll be a second part of this video which will be the actual implement the algorithm okay so now the cast for I need another loop I can't use I so we use J the cast length J plus plus and now I need to make a node I'll call this a you know actor equals cast and that caught sorry cast index I yes the strings are just there in the array let me just console log everything so make sure I'm getting all the that's comes that's correct what I'm thinking here okay so we can see that okay I use index I like why is it Steve Guttenberg 14 times because this needs to be J okay so now okay so now you can see how that's be iterating over all the movies and the actors so now what I need to do is I need to say var actor node equals a new node with that actor name and then grasp add node actor node so just like for every movie add the movie then add all the actors wonderful okay so now let's also at the end of setup now let's say console dot log graph just so we can look at what's in there and I don't need to console log to data anymore I feel confident about that so look and I don't need to console that log the actors anymore so let me go ahead so this is the graph you can see it's an array it's got an array of 70 or nose it's also got a whole bunch of objects which all have that actor name or the movie name as a lookup so this is good I'm kind of almost there like what do I have so far I have a graph object which stores all these notes only it looks like this I haven't done any of the edges so what do I need to do every movie needs to be connected to every factor that's in that movie so I need some way of setting edges so the edges for each node should be a list of other nodes that it's connected to so let me see if I can do this so yeah if I'm thinking about this code wise what I want to do here is for every actor when you call this movie node I want to say something like movie node dot connect actor node so I want to connect the movie to the actor the other thing I want to do so this is a question that comes up with these kind of algorithms is the graph does the graph only go in one direction or your things going to directions so in this case I want to be able to go in either direction so let's let's we need to add this connect function or add edge maybe I should just call this add edge because I've add node now have an add edge function okay here in node so now I want to add to the node object a function called add edge and it gets another an alcohol to neighbor and then I just want say this edges dot push neighbor simple as that all I need to do push the name it now hold on a second we've got a problem I just realized we have a problem the whole point of this is that actors can be in multiple movies right so here I am always always always making a new actor node now I know I can't have two instances of the same movie in this data set but I could have two instances of the same actor so whenever I go through the cast I need to figure out if thick node already exists if the node R exists I shouldn't a new note so I want to say if graph contains actor then actor node let's save our actor note I was good set an actor no to null for a second if graph contains the actor then I want to say graph dot get node actor or something you know what I could do is I could say var actor node equals graph get the actor get node so I could just have a function that says get node and if that function will return null if the actor is not in there so then I could say if actor node equals null then I make a new actor node so what do I need to add here I need to add a get node function into the graph so let me add that so let me say graph dot prototype dot get node equals function and what do I you want to do I want to look up and so this is like a actor so I want to say what do I say VAR n equals this grass look up IV actor and then return n so this is going to get undefined right it's not going to return null so I should actually say in the main program if actor node equals undefined cloth exhausted this is exhausting are you still watching this video I need to take a nap but I've got to finish this it's also getting late okay maybe you just woke up and you're having a nice little sip of tea and watching this video okay I think this is going to work I might have made a mistake but let's take a look refresh okay no js' line eight there is an error oh this should say equals function and just have the wrong syntax so now let's look at this the grep the nose so let's look at any given node this is mickey rourke it doesn't have any edges so what did I forget the edges have to go both ways so this edges push neighbour and neighbor edges dot push this both directions so let's try that again refresh let's look at a just arbitrary node Kevin Bacon which is connected to that what did I just do like Kevin Bacon up which is connected to Flatliners Footloose and diner and if I look at zero which is diner it's connected to all these other actors which are also connected to other things so I think this is right I'm pretty sure I have the data correct anybody want to say otherwise instead I'm gonna move on to part two so now we could actually do the algorithm right so this we're really nice if I had a visual example right so one of the edge this I will link to this code example is that well which is using a force directed graph to like arrange it and as an exercise you can even stop here and just try to like visualize this graph not the easiest problem I would love to see your solution but I'm going to stop and what I'm going to do in the next video is I'm going to implement the breadth first search algorithm and when I come back at the beginning of it if I found any mistakes I'll let you know