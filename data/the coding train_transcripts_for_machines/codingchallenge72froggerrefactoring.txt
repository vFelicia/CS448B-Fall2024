hello welcome to what is now somehow part four of my Frogger coding Challenge Series of making the game Frogger so in the at the end of part three I have this kind of version of the game that I can actually play here and I'm uh in a second I'm going to get to the top yay um so what I want to do though so here's the thing I think the the part the first three parts were in some ways an illustration an example of what happens when you rush through code you're trying to figure out stuff on the Fly and things start to get very messy I'm like I'll fix this later and you know I try it's very I'm don't get me wrong I'm all for messy code and just having fun and trying what works but I do think this is an opportunity for me in my videos to take a look at what it means to refactor code so what I would like to do in this video is change very little really at the end of this video I would be happy if what you see is exactly this result but the code has been Rewritten in such a way that it's a bit more scary scalable right now if I wanted to make the window taller and add more log Lanes or more car Lanes I'm going to have a very difficult time doing that a lot of stuff was hardcoded in here so the main work that I'm going to do and again I haven't really done this before I plan this out I'm just going to be doing this on the fly as well so I'm sure I'll create new Problems by solving older problems is create a lane object so let me think about this for a second so let's think about what is a part of the lane so if this is the Frogger game an individual Lane has a bunch of elements to it it it actually could be an instance of a rectangle object right could also extend rectangle because it can have you know an x y and a width and a height But ultimately the things that I want to keep track of are number of uh cars or logs speed of those car speed of those cars and logs uh spacing of those cars are logs so a lane is going to keep track of all those things on its own it could have like a color a color for the cars a color for the background so you could start to see like what are all the things that are part of an individual Lane and another thing thank you to Mi am SOI who suggested this uh you might have noticed in my previous example that the cars and logs are actually basically identical I'm just drawing them in a different way and ultimately you know I haven't I'm actually not even drawing them in a different way that's something that's still sort of like left as a next step for this program but um I'm I'm interacting with them in a different way and that I'm checking whether the you know with the with the logs the frog has to land on it with the cars the frog has to avoid it but I think I could just use one object and just call it an obstacle rather than have these two different objects is kind of unnecessary at this point okay um so coming back over here let's start trying to do this so let's write let's try to write some code for the lane class so class Lane oh yeah and and um Simon is asking in the chat what about the safety Lane so I that's an interesting question I could just have a lane that has a number of obstacles as Z Z that could be how I indicate if it's a safety Lane and I could also um there was something else I was thinking of here um I could also have some sort of like a type variable whether the lane is like a cars lane or a logs Lane and the logs could be Turtles right and the cars could be cars or trucks there's a lot of possibilities here and again I'm just trying to to do a small simple version of this so coming back let's create this Lane class and um let's get rid of I'm I hesitate to do this I'm G you know what I'm going to do I'm going to save this as oh wait a second oh yeah no save this as Frogger 2 and I'm going to delete the the log class get rid of that completely it's going to break I'm going to call and I'm going to change this to uh rename by the way this is something that's in processing now see if this works if I go and use rename I can re name it to obstacle it's going to change it everywhere in the code so see how well that did um attach ah so one place where I missed it here because obstacle this should still be and this should be obstacle ah so many places okay so now I have at least the same program again and just obstacle instead of cars or logs now back to the Lane so what I want to have is I want to have some array of obstacles what else did I say I want to have a speed and maybe I said maybe I want this to extend a rectangle so I can have a location a speed what else did I say a spacing sorry and a spacing let's just do that for right now let's start off simple so in the Constructor this should say extends The Constructor should have a number of obstacles uh a um SPD for Speed and SPC for spacing so obstacles now is a new array of obstacles with n elements in it and speed is some speed and spacing is some and spacing is some spacing okay so this is the idea of a lane and if it extends rectangle I also need to call Super and I probably should give it an x a y and a width and a height X Y width height this is a lot of stuff for the constructure I don't love that might want to rethink that a little bit later but I'm going to just leave that for right now okay so now what I'm going to do is I just I want to get rid of all this nonsense so I'm going to comment all actually I'm just going to delete it I'm just going to leave Row one just going to leave Row one and I'm going to get rid of this the idea here is that instead of having two different arrays of obstacles I want to have an array of lanes now how do I know how many lanes I need well actually the way that I'm going to do this is I'm going to have have a lane object for every single horizontal bar even the beginning bar that middle Safety Lane and the end for example so if I know the height in pixels I can just say the height divided by that grid size is the number of lanes that I need so I'm going to say Lanes equals a new array of Lane objects with uh total Lanes is height divided by uh grid and I want that to be an integer so I'm going to convert that to an integer total Lanes okay we're getting somewhere refactoring refactoring very exciting um so I want to have a total number of lanes and here's the thing actually Simon in the chat is making a good suggestion I can really simplify this I actually don't need to pass in an X I don't need to pass in a width or a height because those the x is always going to be zero the width is always going to be the width of the window and the height is always going to be that grid size so I can create its rectangle with some hard goated values and I feel perfectly happy with doing that and there might be some reason I have to change that another time but that makes this much easier to read okay so this is the total number of lanes now what I want to do is I want to Loop through and create all of the lanes so every single Lane what do I need I need the Y position the number of obstacles speed and spacing so let's just pretend for a second that what I'm going to do is just put cars on all the lanes I'm going to say a new Lane at I * grid right so I * grid is 0 * grid is zero 1 time grid is Grid 2 * grid is two times G so 0 50 100 150 so that's going to give me all the spots and I'm going to just put what is the next thing I need in the lane the number I'm going to put three objects in each one then I'm going to um then the next thing is the speed I'm going to have all the speeds be uh one and the spacing is going to be 100 so I'm just kind of going to do this uh in an arbitrary way I'm going to delete this and what I'm going to do now is I'm going to comment everything out because we're gonna have to figure this out now everything's gonna get much better now so this stuff so what I want to do now is I want to Loop through for every lane in Lanes let's say lane. show so I want all the lanes to show so that means I need to write a show function and what does that show function say for all the obstacles have them show and by the way here when I made this array I kind of need to create all those obstacles so now I need to say obstacles dot um index I equals a new obstacle re boy isn't isn't watching somebody refactor their code wildly entertaining I oh my goodness I'm not sure this was such a good idea so what is it when I make an obstacle I did that I deleted all that stuff I needed to keep that because I needed to reference it but it's okay I can remember um I give it an x a y a width and a height and a speed so the obstacles get created at where do I do that in the lane they get an X the x is I plus sorry is the x is then what else the speed is the lane speed and uh width and height is um oh that's a uh okay okay I'm just going to make them Squares right now grid comma grid I forgot about something okay so we're going to fix all this what do I have so far all right okay here we go let's let's keep doing this why don't I see anything um I probably forgot something rather important uh I made a bunch of Lan so let's debug this so what's wrong here let's just see am I so it should be drawing a bunch of things ah look at this the width is one I messed up the width somewhere X oh speed is the last argument right the obstacle requires XY with height speed XY with height speed okay so I bunch I made a bunch of lanes that worked now let's you know I've gone a few steps backwards here unfortunately but we're going to get back we're going to get back to what we had this is going to be good trust me stay with me here please stay with me um let's say uh lane. update what was it do it not update no no oh yeah oh I should just make a run function let's just make it run I might regret this later and we'll do uh show update so lane. run okay so all the lanes are working now they're all doing exactly the same thing that's fine is it going to come back yes they're coming back okay so this is good my lanes are working one thing I realized I forgot is that the lanes could use uh a variable for how wide the the um so when I create a lane what do I have right now I have I have it's y position total obstacles speed and spacing you know one thing I sort of feel like doing is maybe just making the speed random I mean why not right so I have fewer arguments make the speed random somewhere between like 3 and three you know let's just um so I don't need a speed so that's sort of nice to see right so even just with the speed random I'm going to get a lot of kind of variation there and it could be hard there could be a specific configuration supposed to be but I'm going to make that random um then I'm also going to um uh what I want then as another argument is the total number of vehicles and the size of those Vehicles the width so I'm going to give it a variable called W does that mess things up though because it extends rectangle so I don't want that um so what is it I'm going to call it the length so this is the length of the cars or logs and that can be actually be an integer because I'm going to think of it as uh they all have to be a certain number of cells on the grid multiple of 50 so now when I create the lanes I'm going to and I'm actually let's just could just make that random also but no you know I might end up I'm going to let's just put um let's just put one in there I'm going to do this you'll you'll see hold on I got an idea here so I'm going to put one in there um and then the obstacles their width is grid times that length and guess what I don't think I need to actually keep track of these variables well speed I do because it's random like I don't really need to keep track of this spacing it's oh no anyway I'm really just using it to initialize but that's fine okay so now look at this that's with one now what if I say make say that two great so now you can see they're all double wide and um this spacing I could make 200 and you can see now they're all spaced out by 200 they're all D wide so now I have this ability to just put you know as many or as few things there's only one thing in each lane there's three things in each lane always with a random speed so I'm hard coding the number of things their width and their spacing but I'm making their speed random and I'm also going to add one more random thing which is just a little offset so they don't all start together um I'm going to create a variable called offset again this is doesn't really have to be I I can really just use this as a local variable here I don't really need this same thing with the spacing this can just be spacing I'm going to give it a random offset between zero and 200 just as uh giving it an offset so what I mean by that offset is if I don't actually move them they will all start slightly offset from each other okay now we're cooking so I'm able to now have all of these different different lanes and I I want to give them a color and some other things at some point that that can be an exercise for you here's the thing though what I love about this is I can run all the lanes but I still think on some level I want to manually configure them so it's nice that I can initialize them in the loop and I can make them random but just for demonstration purposes right now I'm going to configure them uh I'm going to configure them one at a time so Lane zero has zero things in it so the speed and spacing can be zero that is where the Frog starts Lane one which will be at grid spot is going to have three cars in it with uh what What's the second thing a a width of one and an offset of 150 so ah okay so Lane um I'm so I'm going just going to do this now really quickly then 2 three 4 2 three four will also be a safety Lane then what do I have left uh let's do this again uh five six 7 and eight I kind of wanted I kind of want four I think what I would like so let's make this uh the height 600 I would like four car Lanes Safety Lane four uh four log lanes and then a sa a last safety zone so what did I miss here uh oh I need oh no that's 10 that was right I don't need to make it 10 four four no no no that's three ah I do need 11 if I'm going to do four look at this you know got a little less hard cut some new hard coding everybody so let's make this now back to 600 and here we go what did I get wrong here people I should have 11 Lanes well that's 12 550 oh boy ah right and now they all need to oh this is awkward this is awkward um and here I'm going to give them just a lane index and then what I'm going to do in the lane object itself is set the Y location and this you really not Y is like index index times grid index times grid and uh index times grid okay so you can see now there we go there are all of the lanes and I want to make sure they update and so there we go all of my Lanes now I can start to individually configure them so I can say things like the second one should have two that are triple wide and spaced out by 350 pixels uh the third one should have uh four spaced out by 200 that are one then this should have a three that are two spaced out by oh and I don't want the speed to be random actually because they really should be like every other one oh and these are the top actually um so what's first two so I don't the the random speed is a bad idea so I'm going to go back to setting the speed manually because I want to configure this manually and I'm going to give it the last argument will be speed and I'm going to say uh three uh 2.5 one I have too many lanes uh 2.84 oh I could have made it I could have just had its direction and still have it be random and then zero so now we can see uh and this one they need to the last Lane they need to be spaced out by quite a bit more um so let's space them out by 250 so there we go so now I have and then uh some I want these to change like this should be uh four and this should be two and this should be one and this should be four and this should be one double wide uh triple wide uh single wide so there we go here is now my game of Frogger and I can go through now I'm not doing I'm not doing any of the tests now I also I want to give these Lanes a color I think it would be useful to give these Lanes of color the other thing I can do is I can uh yeah let's give these Lanes a color and let's make that the last um let's make that the last argument uh color and actually you know what I'm going to do I'm going to do something totally different I'm going to write a second Constructor second time today this was in a different video that I recorded earlier today I'm going to use something called Constructor overloading so I'm going to make a Constructor that optionally takes a color as its second argument and I'm going to use that just for all of the all of the uh the three lanes that have no obstacles in it and I'm going to say write a new function that has its index that can really be an integer and then a color and it needs to call Super and then it needs to say obstacles equals a new array of obstacles with zero things in it don't want to have any obstacles in this Lane and it's uh and I'm going to give it a uh each lane is going to have a color and its color is going to equal C so in this Constructor the color will equal black and here I can now uh and then when I in the Run function I'm going to draw a rectangle oh doesn't rectangle have a show no I have I'm going to create a I'm going to just draw a rectang I'm going to say fill that color and draw a rectangle at XY with height so we can see there we go oh I love this now I have a lane object I can configure the game Lane by Lane so I can create safety Lanes with a different color and I can create Lanes with with obstacles in them so now this is exactly the game the only thing is um you know none of the actual game playay is there so I need to go back and put that gameplay back in now I have all that commented out here I don't need to draw the these separately um this what I can do here is I can say I can now look at every lane so I can say lane. check frog so I want every lane to check the Frog this is really what I want to do do here I'm going to take this and in the lane I'm going to say I'm going to write a function called check which gets a frog and then what I want to do is Loop through all of the obstacles I'm going to call them o I'm going I don't need show an update that happens somewhere else and I just want to check if frog intersects that obstacle reset the game so I'm just now going to do that as if all of the lanes are obstacles okay see this stuff should happen really fast now that we've refactored I should be able to do this stuff really easily so see every time I intersect an obstacle I should get sent back to the bottom right okay so I'm able to play this game now I need to I I need to only check so I need to figure out whether the lane is an a a um a log lane or a Car Lane so maybe I'll do a type I could do let's do a type let's say uh I could make it a string that's probably a bad idea let's do a um I'm going to do this in a kind of a goofy way I'm going to say type and the lane is also going to get as its second argument uh and we'll do that here too it's going to get a type when I create the lane so I'm going to say type equals S Type equals s I'm going to create some kind of constants string safety equals safety string um what what other types could be car equals car string uh what's the other one log equals log so what I'm going to do is I'm going to create the lanes this way this one is a safety this one is a car car four car Lanes then I'm going to have log then I'm going to have another Safety Lane a log Lane and another Safety Lane okay so now we you can see here I've added this now I could have just put the strings directly in here but I made these like separate variables at the top to store the actual strings because and honestly I don't want to use strings I want to use numbers because I don't want to have to remember is zero or one so I want to have a variable and these I could say in Java awful Java monster language speak I would say like final constant in so I want to make these ins but I'm just going to be sort of lazy and have them be all capitals and integers so now what I'm going to do here is this is an integer for a type and I'm going to call it t just for type and actually I don't need to have this argument here uh by definition if it's getting if it's using this Constructor it is a safety Lane um and this should be an integer and I can take it out of here so these don't need explicitly to say safety cuz that's by definition right just refactoring refactoring refactoring okay so now what I'm going to do in the lane check function is I'm going to say if type equals car I'm going to do this right now otherwise if type is a log what is the thing that I did I had this like very we weird thing where I had to check where it was but now I don't have to do that I can just say take this all this code here I'm going to just grab this for right now and I'm going to put this in here this was the code for seeing if it's intersecting with any of these frogs and if it is attach that particular log so I renamed some of these variables and I'm just just this is all the same code that I worked out the last time I'm just and if it's not reset the game although this is a bit of a problem so I'm going to have to work this out there's a there's this is going to have to change because I'm doing it by Lane now so uh let me take this out for a second we're going to work that out later so let's just see right now this should work whoops where I should be able to oh look at that oh whoa so I I need to get my attach and detach going again let me run this again whoa it's already attached why is it automatically attaching in this Lane oh these are the logs ah I forgot oh my God that I did this the top I'm creating the lanes from the top to the bottom so these are all the logs and these are all the cars I forgot okay so now right if I intersect I've got to get through all these and now here's the thing though it's never going to detach so I need to get the detaching back in thank you to uh ala in the chat who said what I was thinking is one option would be to actually have the Frog register which lane it's in because I know which lane it's in based on its y position only check instead of there's not really any good reason for me right now to have all the lanes check the Frog I kind of want to do that but ala had a different suggestion which is just detach every time the Frog moves right because if you're going to if the Frog's going to jump it shouldn't be attached to anything so I could do let's try that that might actually be a really quick fix but I'm now realizing that this Loop for the lanes is kind of unnecessary um I I could just pick the one lane that the Frog needs to check against but let's do the detach thing real quick um on move I'm just going to say frog attach null so it's always going to detach I need to start myself in the center right so you can see now all of those behaviors are back and you can see it's so now I don't have the thing that's telling me to reset the game so uh the issue is and this is why I want the Frog to register its Lane the reason why I want the Frog to register its Lane is because if it's in that log Lane and not touching a log it needs the game needs to reset so what I'm going to do is I'm going to say uh and I can do the move detach thing int L which lane index equals Frog's y divided by grid right and an integer version of that that should give me the index that it's in right let's just see this print Lane index it's actually going to have to be inverted I just realized oh no that's right 10 9 8 7 6 so this works so now that's the only lane I need to check so I can just say Lanes index Lane index check frog so this way ah I got to start myself in the middle so when I'm testing it this is hard okay I'm starting myself in the middle height divided by two minus grid divided by two is what it should be yeah there we go sorry so now I should be able to oh okay so now I should be able to jump around but and get pushed off but I now need can go back and in the lane check if it's not okay you lost reset the game okay so now I should be able to jump around but if I fall off a log I reset the game okayo I think we refactored this pretty nicely somebody made a good point like well why should I have this type variable maybe what I should do is use inheritance and have three different Lane classes Car Lane obstacle Lane Safety Lane and actually that's a very good idea and I think it could be reasonable to refactor this yet again so I think this is going to be enough refactoring for this particular video all I did was refactor into this Lane and I don't know if you can really see this makes if you really want to see the beauty of what I've done not that anything I've done is really that beautiful what I love about this now is this is the draw Loop this draw Loop is so simple and I the one thing that I would actually say is maybe the lane index the Frog should actually have a function that just returns its Lane index because look what's happening here I just run all the lanes I just check the one lane the Frog's in and update and show the Frog even though this is a bit unwieldy um because I've initialized all the lanes manually and maybe there's a better way of doing the arguments that something should be random or I should have some type of algorithmic way of generating it that's yet another opportunity so with refactoring only comes more refactoring refactoring begets refactoring life is all just one big refactoring session so uh I hope you enjoyed my rather long refactoring session I think there easily could be a part five to this and a part six um what I want to say and uh is that check this video's just if you want to contribute to this there are a few things you can do so in this video in this video's description there will be a link to a GitHub repository that has this processing version that has a JavaScript version of this same code and then also a link to another GitHub repository that uh is got kind of a community created version of the game where people can add their own graphics and different things and if you make your own version and want to link to it in me there's all these ways you can share and contribute to this stuff I need to say it more succinctly but check the description and I'll describe it in there so thanks for watching this part four is it the last will there be more will there be another I actually have one thing that I was thinking of doing was redoing this whole coding challenge As One video um but in JavaScript now that I've done it in four parts maybe I could do it all As One video faster I don't know we'll see I'm thinking about that if you're interested in that uh say in the comments but I don't know that anybody's actually watched to the end of this video okay thanks for watching and I'll see you in a future video oh oh oh oh no don't leave yet sorry one thing I I left no no I think I think I might have left no no I I got it right oh no I left the wrong I left the wrong position so there's let's play this game one more time okay I'm gonna make it oh no ah shoot oh no come on maybe edit some maybe speed this up this is I made this kind of hard because the last one is so fast yay I win Frogger I win the prize of the internet prize thanks for watching I'll see you uh next time the train pulls into the station