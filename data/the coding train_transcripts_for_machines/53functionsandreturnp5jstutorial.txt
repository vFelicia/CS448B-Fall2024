There's a couple of missing pieces in our search for the meaning of functions in JavaScript. And so this video I want to fill in one little gap here, and I want to look at what it means for a function to return a value and what's the syntax for that and why you might want to use that. Now, this will be kind of like a short video. I'm just going to kind of really lay out the quick syntax of it. And I hope that in future videos, the scenario of needing a function that returns a value will come up a bit more often. And then it'll make more sense in a kind of more involved context. But let's just sort of see how this goes for a second. So I think to begin the discussion, the best way to begin the discussion is to look at these two functions that are part of the P library. There's the ellipse function. And there's the random function. What's the difference? I mean, there's a lot of differences between these two functions. But what's a key difference between these two functions? Ellipse draws an ellipse in the window. Random provides a random number between a range, between the minimum and maximum. And so when I say provides, what I really mean is it returns a value. It evaluates to a number. When the random function finishes executing, it hands back this answer. And that answer is often used to it's stored in a variable, or you might use it, fill random 255, right? This is using the random function to pick a random number between 0 and 255 and use it instantly inside of this fill function to set a color. Ellipse does not evaluate to anything. It just draws a circle and finishes. And this is that distinction. Random is a function that returns a number. So what does it mean these functions are in the P5 library. They were written by somebody. And this function was written with a new kind of line of code. That line of code is return something. So let's look at the syntax for that. And I'm going to kind of just make up somewhat of a silly scenario, and we'll just sort of build a quick example that does this. So the syntax for defining a function is function, the name of the function that's something that you make up the parameters to the function that's also something that you make up an open curly bracket and end curly bracket, and then the code that goes inside the function. So this is whatever code you want to be. And typically, if a function returns a value, that return statement, this new statement's going to come at the end of the function. Now, there's exception to this, of course. But here is the new line of code, return something. That's the question. What goes there? So this looks just like the definition of a function. And we wrote a flower function before, function flower with some arguments. It drew some stuff to the screen. Now this is the same, but we're adding a new line of code return. So let's think about conversion. So this is oh, boy, this camera keeps shutting off. Hopefully this will fix it. Hello. I'm back. So let's think about converting numbers. So something you can do in P5 that comes up quite often is you have an angle, and you want to know what its value in degrees is. I don't think I've talked about angles in any of these videos. Maybe I have. I talked about it in class. But let's just look at this for a second. Oh, boy, this is a bad example. So if you're not familiar, there are two ways of thinking about angles. One is degrees, 0 degrees, 90 degrees, 180 degrees. These are common degrees. Another is radians. So a radian's a unit of measurement for angles. Pi divided by 2 radians is 90 degrees. So what this function should do is it should take the value pi divided by 2, convert it from radians to degrees, and we should see 90 print out down here. And by the way hopefully I'm going to get this right. And you can see that that's what we got here. So this function converts a number to another unit of measurement and provides that and print it out. So the thing is let's look at something different, something that's not in P5. Let's say what you want to do is you know a marathon is a 26.3 or 26.4 I don't know. I can remember 26.3, something like that, miles. So I want to have a function. I want to know how many kilometers is that. So I need a function that converts that number from miles to kilometers. So if I run this, of course, we get uncaught reference error. Miles to kilometers is not defined because that doesn't exist. So it's up to us now to define that function. So how do we define a function? Function, the name of the function, and then whatever the parameters are. One parameter is miles. So when that function is called, 26.3 will get sent into that miles variable, the parameter to the function. And then what's the formula? Miles time's 1.6. So I don't if that's 100% accurate. But 1 mile to 1.6 kilometers is 1.60 [INAUDIBLE],, something like that. But you get the idea. This is a very simple formula to convert. And now we have the answer. The kilometers is miles times 1.6. All we need to do is say return km. So this is this new line of code, return a value. That means when this function finishes executing up here, it will evaluate to a number. And so let's look at this. And now we can do it again, km2, what is a ultra marathon? I don't know what an ultra marathon is. 100 miles? So we're looking at this function twice. So we can see 26.3 miles is 42.08 something, something, something kilometers. And say 100 miles is 160 kilometers. So this is how a function can return a value. Now, you might as an exercise just come up with some other type of conversion. Celsius to Fahrenheit is a good one. It has a bit more of a complex formula. Look it up online. If I can ever remember to do anything, I would put it in the description for this video. And your weight on the moon versus Earth is another thing you could think about. Kilograms to pounds there's so many dollars to some other currency. So you come up with some kind of conversion formula. Maybe try to implement this function. That would be something I think you could try. What I want to do in the next video that I'm going to make is start looking at how functions can be inside of objects. And in that case, I think there's another scenario that I want to demonstrate, which is having a function let me think about this for a second. If you have an object, and you want to know if the mouse is on top of it, could the object itself have a function that sends you back true or false based on whether the mouse is over that object or not? So that's what I'm thinking about. This wasn't the best video I've ever made. But hopefully it kind of succinctly just, at least, gives you a sense of the syntax and how it works. And I'm going to hit Stop now.