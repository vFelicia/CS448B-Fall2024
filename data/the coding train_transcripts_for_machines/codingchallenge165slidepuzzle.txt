thanks to curiositystream for sponsoring this video welcome folks to a coding challenge i have done one of these in a while i'm gonna set myself a timer here and i'm going to attempt to make a slide puzzle so this is the source image that i'm going to use i need to chop it up into a bunch of pieces allow you to like click to move the pieces around and see if you could solve it to put it back together and have something detect when it's put back together that it works all right so one of the things that we need to use that i need to use for this is the copy function um because what i want to do first is just take this image and chop it up into a bunch of smaller images so let me call those uh the pieces and i'll make an array and then in setup i should figure out how many columns and rows that i want so let's just make it it's right now it's a 400 by 400 so let's just make it 4x4 and i also i'm going to probably want to keep track of like the width and height of each piece i probably should do this in like an objectoriented way where there's like class piece and that's not happening right now four let i equal zero i is less than the number of columns uh j is less than zero j less than the number of rows w is the width of the canvas divided by the number of columns h is the height of the canvas divided by the number of rows and then for each one of these i need to make a new image or the new the image is a piece of the larger image so i need to take the source image and copy from it oh i think i could just use get i'm really obsessed with the idea of using copy because hopefully by the time this video comes out there will be an entire video all about the copy function in processing in p5 let's look at the reference get i believe it returns an array of rgba values which is not what i want i want an actual like image maybe copy is what i want i know copy will work in the sense that i can copy from this image onto this image let's use copy so this is fine i'm going to use copy because i know it's going to work and the first thing i'll do is create a blank image that is the size of one of the pieces i really want to use the whiteboard just because i have a whiteboard so the idea here is i have a source image and what i first want to do is on my canvas i'm going to chop this up one two three one two three into four by four and i want to take this section of the image and place it on the canvas but keep this as a separate variable like a piece so that these pieces can be locked to a part of the original oh i really need i just need to know i'm going to i got to do this objectoriented right because the piece should know where its home base is as well as where it currently is so if they're being shuffled when all the pieces are in the right place we've won so what do i need to make a class a piece class that has a current index like if i number all these zero one two three four five six seven blah blah blah blah i wanna keep track of where it currently is as well as where it's original spot it's it's home bases so we know when the puzzle's solved all right let's let's do that it's worth it it'll be worth it so let me uh i got to open this up here i'm going to make a new javascript file and i'm going to call it piece.js tile it's probably tile is what they are right let's call it uh tile dot js so i have a tile class what does it have in it it has the index so i'm going to pass that in as an argument and it has its image so i mean there's probably more to do with this but i'm basically just want to wrap the idea of the image's piece and where it's supposed to be in to this constructor okay good here we go so now what i'm actually doing is i'm still creating the image then i'm saying copy uh what am i copying i'm copying from the source zero zero oh no no no no no the in the source the x location is i times the width the y location is j times h and i'm copying from the source i j with height two zero zero with height so if this is confusing to you thank goodness i have a white board each one of these pieces is an image where this is zero zero and its height is with an h but if i'm copying this one and it's column two row one boy this is like so messy this whiteboard but that's fine um then basically i need to know what is this location this location is column times width row times height and then so take this section and copy it to this part of the piece and i think this is right right it's um it should be the source image source x source y source to the destination i want to copy the source image at this location to this destination which is image at this location great then i need to make a a tile is a new tile index and then the image now what is the index the index is the uh i'm not going to use any twodimensional arrays here i'm just going to keep track of um the the the individual index counting zero one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen zero 15 16 total tiles so the index is i plus j times the number of columns oh let's call this tiles let's just put all the tiles into an array just out of curiosity now let me loop through that array and okay i have an idea let's make a variable called board so this is the board the board is an array of all of the elements in the order that they're in so board push index so basically i'm going to have an array that keeps track of the positions of all of the tiles and then this is a little bit silly but i'm going to do it this way i'm going to just always use a nested loop just to get that index and then i'm going to say board index show so let me just do uh let me think about this for a second let me be a little bit more thoughtful here i'm i was trying to avoid using a twodimensional array but maybe that's silly so i want to have this array which i'm going to call board and it's going to have like it'll be all of the numbers shuffled in random order so as i go through i yes i draw the image at that spot like the zero spot what the zero spot would be x and y but i go look up image three or index three from my uh array of all the tiles i don't know if that made sense but i had to walk over to the whiteboard to sort of think through that in other words x is this is exactly what i'm doing x is i times w y is j times h and then the image i want to draw is board index it's actually like tiles board index i mean this is like a crazy way to write it but i basically want the number the index that's in the array called board to tell me which tile to look up so this is tile i'll call it like tile index or right now they'll be in order because i haven't shuffled it right i'm putting them all in order and then i should be able to say image image x comma y so i'm hoping that when i run this sketch i'm going to identically see the image because the only things that i've done is chop it up into a bunch of tiles put them into an array in order and then i'm going and getting them one at a time and showing them all right what happened uh oh oh am i supposed to do create image yeah so i think i did the dom image element by accident tile is not defined oh so no problem no problem yep tile.js that's a file i'm working with thank you very much uh failed to actually draw load pixels yeah create image load picks maybe i just need to call load pixels i thought to do copy i don't need to but i must and then let's do like image update pixels let's try that signature not supported what is going on oh look at this i deleted some stuff ah i when i was like mucking around some stuff got deleted i need all those numbers all those numbers and i want to sort copy it from x comma y nice okay i don't even know if i need all these load pixels and update pixels still good okay everybody oh image equals tile dot image so i need to pull the image property out of the tiles no okay let's take out all these like load pixels and update pixels yeah okay i didn't need any of the low pixels and update pixels there's a little bit of a mystery here i have a feeling here copy is doing the work for us so we're good now you might not believe me now this is actually showing it as separate tiles now let me let me prove this by just drawing some lines over it this is gonna be a slightly awkward way of doing it but let me just do stroke weight two no fill oh but this is silly if i change this to like width minus 10 height minus like if i make the images smaller right okay i just wanted to show you that i am actually they are separate pieces so i i visually it might help i think to actually just draw little thin lines over it with the rectangles and this is very silly this extraneous kind of code that i'm doing but um i think this will help yeah so i just wanted to draw some lines over it now now we are really getting somewhere because in theory if all i do is shuffle this array right have all of the elements of the array in random order then i should see the image chopped up and moved around so let's do that so i'm going to write a function called shuffle which receives an array uh and then i'm going to just say like um a hundred times pick r1 is array dot rand a random number floor a random number between zero and the length of the array r2 is floor a random number between 0 and the length of the array now in theory i don't want these two elements to be the same but i'm doing it a bunch of times i want to swap i'm just the way i'm going to shuffle the array is by picking any two elements and swapping their place so now temp is that arrays r1 value then and you know i'm going to need i'm going to write a swap function because i'm going to need that i think also when i move the pieces so function swap is uh swap index i and j of an array so temp is index i and then that arrays i element is the j element and the j element is that temporary value now you might be wondering like what what and there's a way i know there's some like object deconstruction way i can do a swap and i'll put it up on the screen if i ever make this into an edited video but basically the oldfashioned oh the old old way that we used to swap our elements in an array is we take element one store it somewhere temporary because we need to put a new thing in that spot and then we saved it temporarily we could put that thing we saved in the spot that just the other thing came out of so now i want to swap r1r2 in that array so let's shuffle i don't need to shuffle the tiles the tiles is just an array of elements i'm shuffling the array that's keeping track of the index indices of all of them maybe i didn't need these two arrays but it's the way that i'm thinking of it right now shuffle the board oh well good thing i wrote my own shuffle function p5 the reason i'm getting that error is there already is a global function in p5 called shuffle and it uses this fischer yates shuffle algorithm which i can only assume is better than whatever i did although is it the same i don't know we could read this page and discover we should it could be another coding challenge the fischer yates shuffle algorithm you know what i'm gonna do i'm just gonna call this a simple shuffle that way and i could use the p51 you should try it yourself there we go look i have mixed up the elements all right so one thing that for it to be a slide puzzle that i need to do is i need to be able to remove one of them so uh columns and then uh let's just delete the last one pop is it pop and that'll be empty okay great so as long as if tile index is greater than zero draw the image so now whoops greater than negative one okay so now i have made the board i could shuffle it i could still shuffle it now but this shuffling is no good because in theory now is it possible that it's unsolvable i need a move basically i need a function that like moves one element so function move so the function is going to receive a given index so the idea is i'm clicking on an index like i'm going to click on one of them and it's only a valid move if it's above below to the right or to the left so i do need this function like the column is index well you know what i could i could pick a random column or row i need to know where the negative one is so let's let's just have a variable blank spot is you know what i'm going to do i'm going to write a function find blank so this is a way to quickly check all of it to find which one is blank so the blank i the blank column is the blank spot modulus the number of columns and the blank row is floor the blank index divided by the number of rows that's the inverse of putting it back i should just use the twodimensional array okay so that's the blank column in row so i and j if i and j is a neighbor if is neighbor i j blank there's got to be an easier way to check if it's a neighbor right so if it's a neighbor then swap blank with i plus j j times columns of that array so the move basically the idea of doing a move is uh there's a spot that i want to move if it's a proper neighbor to the blank spot then it can be swapped with it oh no that's not yeah yeah when you move a thing and tile into it it becomes the blank spot okay so i just need now an is neighbor function you the viewer will write this in a so much better way i'm on a time crunch here i'm way over my 30 minute limit function is neighbor i'm just doing x1 y1 x2 y2 well let me do i j i j x y so first if i is not equal to x and j is not equal to y return return false it's either got to be in the same column or the same row so if they're both not the same then it's not a neighbor if the absolute value of i minus x equals one it's one spot away or the absolute value of j minus y if it's one spot away returned true and i know i could return like the result or whatever otherwise it's the same spot so i'm just gonna say return false if it gets the end i think this will work just did that kind of like awkwardly right it's got to both be in either the same column or row and one spot away so now shuffling is should be picking a move random columns and random rows i know i could just pick from valid neighbors to do a move but if i do it enough times i'll pick valid neighbors enough times that this should work so now i should just say move r1 and r2 and move if it's a finds the blank spot and if the blank spot is a neighbor it swaps it with i don't know if this is going to work let's just try it array ah move i guess move should the function should get the array i mean i'm only using one array so it's a little bit silly there we go okay so that that's a valid shuffling now i'm just curious let me make this a random move function again i will refactor this later i mean i don't know if i will let's do random move so like if i do a thousand moves oh uh array it's a little bit silly how i have to like i'm not using global variables as well okay so that should be a random shuffling that's possible but just out of curiosity in draw if i just said random move of the tiles but i don't want to shuffle it i just want to see it doing one move per okay cannot read properties of undefined image oh board it's the board there we go oh oh i'm not drawing the background so the old piece is there okay this is it shuffling the puzzle randomly oh i love this all i need to do now is have a mouse pressed function i'm going to go back to shuffling it to start so take out this and mousepress function is so the column that i'm clicking on is floor mousex divided by the number of columns right and the row and i'm gonna call this i and the row that i'm clicking on is floor mouse y divided by the number of rows and then move i j tiles now i'm not giving myself any feedback or i'm not seeing an animation all of those are things that i hope that you will add it should move if it's a valid neighbor what what did i so console log i j 60 oh whoops no no no no divided by w and h not divided by the number of columns divided by the width of the column is it zero one or two okay it's like what am i losing my mind here okay no oh not the tiles not the tiles the board the board yeah look at that now i'm pressing the buttons and so now it is solved if is solved uh if so console.log solved we will not have any fanfare just a console log solved so i'm gonna write a function is solved where i'm going to go 4 let i equal 0 i is less than board dot length minus 1. i don't need to check the last one i plus plus and then if board index i is not equal to tiles index i dot index right isn't that didn't i save where it's supposed to be yes in the tile class then that's a piece that's in the wrong place so return false and if you get through everything all of them are in the right place return true so if i don't shuffle the board at all it's solved it's showing me it's solved now if i shuffle it in setup it's not solved and i can solve it okay let's make it easier for me to solve oh my god i think i got this i think i did it so let's just shuffle it simple shuffle like five times okay no it didn't pick oh there we go okay great so in theory all i need to do is just click on this element it will move up and go into place solved yay okay awesome so um just for fun cause what are we doing but having fun i am going to have it be eight by eight and i am going to let it shuffle a hundred times like i guess there's more pieces it's not going to pick the thing randomly but hold on this is a little bit harder solved i did it no let's keep it but this is kind of fun because you realize you could do like you know a 20 by 20 slide puzzle here right and how many times do i need like you know obviously again i need a better shuffling algorithm but if i do it 10 000 times you know that's a lot of interesting moves there but let's go back to making it four by four and make this puzzle solvable for myself this is the last thing i'm going to do i'm gonna make it four by four i'm going to shuffle it just 100 times and let's see if i can solve this oh shoot oh wait a sec i think i did it yes i solved it all right so what can you do well you can be more thoughtful about what image you pick you could add animations there's a million opportunities to refactor this code to make it more s make more sense i mean this object could do so much i started like i need to make this objectoriented but i did not follow through with that but also one prompt that i would have for you is there's no reason you couldn't do this with a video or some abstract generative art drawing i mean so many possibilities there because as long as you have an image even if it's an image that's changing over time you can shuffle it and you can solve it and a move counter for scoring so many things if you like this coding challenge video and are wondering what happened inside all of those little cuts and edits i'd like to encourage you to sign up for nebula and curiosity stream nebula is a streaming platform for me and other educational creators where you can watch adfree versions of the coding train videos as well as the 45ish minute uncut version of this coding challenge with all that extra debugging time you'll also find adfree videos and bonus content from a variety of other great channels like jordan herrod tierzoo and practical engineering you'll also get access to nebula originals that you can't find anywhere else like better elevation a deep dive into new tools creators use to supercharge their productions the best way to sign up for nebula is through curiositystream who are kindly sponsoring this video curiositystream is a subscription service with thousands of documentaries and nonfiction videos if you like the coding train i have a feeling you are going to love watching calculating ada the countess of computing hosted by the amazing dr hannah fry along with numerous other films and series about mathematics ai and computing if you sign up using this link that's going to magically appear on screen or the one that's in the video description promo code coding train you will get 26 off curiosity streams hd annual plan as well as access to all of nebula that's less than 15 for the entire year not per month the whole year it's a great way to support the coding train find adfree and some uncut versions of my videos as well as discover lots of other wonderful creators sign up with this link or on curiosity stream's website with the promo code codingtrain thank you for watching this coding challenge and i will see you next time on the coding train you