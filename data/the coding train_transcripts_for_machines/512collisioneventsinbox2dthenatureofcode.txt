hi this is the last box 2d video I'm very excited about this one we've done a lot of videos about box knee this is I find a very challenging topic but hopefully you found it helpful clearly we're not covering everything you could ever imagine to do with box knee it's a huge library with tons of functionality but I hope that you got an overview and an introduction and and you know someday well you know maybe I'll add some or make this better or something like that but before we end all of this there's a huge thing missing a huge thing missing I mean if you even sat down to make a project with box and E and all you did was try all the stuff we've learned so far you would realize you're stuck why are you stuck so here's here's something interesting about using a library we were very thankful thank you about to be all this complicated physics and collision that could never possibly handle it ourselves we're so glad you're handling it for us but we have a problem we would really like to know when the things are hitting each other because you know when this hits that we want the user to score a point in a game or when this hits that we want it to explode into a beautiful fireworks particle system display we need to do something we need to know about when the gun who I'm talking to over there I we need to know about when the collisions are happening this is a trade off a library does a lot of stuff for us so we don't have our hands into the code to find those moments when the collisions happen but of course this is a problem a common problem and of course this is something that box for the opens its doors to and says you know what we're going to give you that information and it's done through something called listening you can listen for collision events in the same way that in processing you can say void mousepressed and trigger some code when a mouse print rip mouse press event happens you can also in box2d say void begin contact now there's a little bit more to it but this is really an analogous scenario mousepressed capture events serial event these are all functions that get triggered for you when an event occurs a click of the mouse there are collision events and when that collision occurs an event is triggered now okay before we can get to this point of what goes in this function we need to figure out how do we even make this function more like how do we even get to the point where this function is going to be something that we can use so there's a couple steps one thing that's really simple is we must enable collision listening enable have little awkward silence there as I write this down enable collision listening if I go to an example that we're about to look at we can see this is as simple as adding one line of code and set up box2d dot listen for collisions this tells the peabody library that you would like to listen for collisions the reason why this isn't on by default is there some extra overhead and managing this so why have it on if you're not going to use it but as soon as you as soon as you enable listen for collisions then this function is going to become activated if you write this method the code here will be executed at the moment two objects come in contact with each other now I should point out that this is the only one we're gonna work with in this particular example but there are other types of collision events there's something called end contact end contact is the moment when two objects that have hit each other stop hitting each other so you can also trigger events the moment that that collision is over another function is called pre solve one of the things box2d has to do is it has to solve that collision when those two objects hit each other what's the solution what's gonna happen to them one of the false forces the impulse what are their velocities what's happening you proxy will actually tell you hey I'm about to solve for this collision this is a way that you could disable a collision if you want to disable it for some reason there is also post solved if you wanted to dig into the guts of that solution as well I've solved the clue to the collision here's the solution if you want to manipulate that or analyze that you can do that in post solve but we are not going to use any of these in our examples these are sort of beyond the scope of what we're looking at we just want to trigger things that happen at the moment of impact a score goes up an object changes color breaks apart something some type of event occurs so if you recall here is for this example we're working with we have written this object called particle particle is the thing that's moving around the screen and I'm going to run this example you're going to see these particles when they collide they're going to turn red so this example is demonstrating the moment those objects collide they turn red we can see there is a function in this particle class that's called change which sets the color equal to red so how do we figure out here's the essential question the moment this begin contact function is triggered how do we know which two particles which two particles collide it well here's the thing the begin contact function sends this sends in as an argument an object called contact and in my examples I have a breviary blames CP not for any good reason just just think of a contact point that's what it used to be called that's the sort of this is okay you can pick a different variable name see contact con whatever you want I called it CP it's sort of arbitrary so here's the thing what CP will tell you is it will tell you I'm looking over here because I have some notes it will tell you here's our steps okay CP is going to tell you which fixtures collided remember the fixture is the entity that attaches the shape to the body and the shape is the thing that has geometry so really what box are the atom the moment of contact is two shapes coming in contact with each other shape one and shape to shape a and shape B but these shapes are really attached to fixtures so if we know that the fixture is what box2d is telling us these two fixtures fixture a and fixture B have come into contact so one of the things about fixtures is we could say hey which body are you attached to so step one is the contact will tell us which fixtures have collided the fixtures will tell us hey we're attached to a body now the box2d body is the physics engine that little point that's moving around that has the location the velocity all that stuff what we want remember is this particle object we want that to affect that particle object so what we need to do is say which particle now this is our thing object is associated with that body right so this is all given to us from box2d box2d says these two fixtures collided the fixtures say these two bodies are the ones that were attached to it's up to us to now figure out through some mechanism the particle classes are think boxing doesn't know about it how do we then pull up which particle is associated with that body because remember each particle has a body variable attached to it now this is there's a little magic in box2d that allows us to do this it's something in the body class called set user data and also get user data these are key functions set user data get user data they're part of the body class what do they mean we're allowed to say hey I made a box to the body I want to give it a name I'm gonna set its user data to the string Jane or the string Fred right you could assign any object as that body's user data anything arbitrary what we're gonna do is assign the body's user data that particular particle so that later when we know which body has collided we can get that user data back out right a sign let me say that again because I'm a little confused myself we have a body we will we have a particle which we've made a part of a body inside of it but look at we want to say hey we made that body let's set its user data to that particle so now we've bound those two things together the body is part of the particle the particles body part of the body they both have a reference to each other so that later when we finally figured out which bodies have collided we can say what's your user data that particle change that particles color hey other body what's your user data oh that other particle change that particles color kind of confusing but hopefully this is beginning to make sense to you because it's starting to make more sense to me as they talk about it okay so I think this kind of covers the game of there's one little missing piece that we've missed here but let's start to look at how this is done in the coda we're gonna see this missing piece so step one you can see is we've I'm already showing you here is that when we make the line of code that we're adding to our particle or box class is to always set that bazi bodies user data and now let's go back to the collision listening the main program right we've written a function down here in the bottom called begin contact and here's that first step step one which fixtures collided which fixtures collided okay step two which bodies are attached to those fixtures and now step three get the bodies user data get the bodies user data but look at this the body's user data is a generic object it's a generic object we actually now have to determine hmmm what kind of object are you right so the body the user data is not gonna keep track of what type of data was set for its user data just that an object was put in there so it's up to us to say hey if the object class is a particle if both objects are particles right because what we're doing here in this particular scenario if we look at bag this is we're only turning them red when a particle has hit another particle not when it hits a boundary remember there's boundaries in there also so we're saying if those objects are particles cast them as particles and call that change function so if objectoriented programming and Java EE stuff is all new to you this is going to look like gobbledygook I mean it looks like gobbledygook to me it's kind of horrible actually and I wish we lived in a world this isn't the code that we had to write but just you know you read this over even though the syntax is weird what we're saying is if the object is a particle if object one is a particle and object two is a particle then two particles collided make those object into particles and call the change function to turn them read so we could even just change like look at this if I just said hey if object 1 is a boundary then change object particle 2 now look at what's gonna happen now they're turning red when they hit the boundary now we got lucky here because we really should check well it could be that object 1 was a particle in object 2 as a boundary or object 1 was the boundary and object 2 as a particle so we probably should have revised our if statement in a slightly more flexible way but you can see where this is going we can start to determine which kind of objects collided are you a boundary or a particle you know break you know if enough particles hit that boundary break the boundary so that it's no longer there there's so much you could do here with collisions I mean I don't even have to give you an exercise just to make events happen when things collide in your box nice sketch that's an exercise for you make colors change fireworks increase the score there's so many things you could do so so this is a complicated area we've just covered kind of the surface of it but hopefully it makes sense to you and this is the end of box2d for now the next set of videos we're going to look at toxic libs which is another physics engine using something called verlet physics which is really geared towards springy connected systems and there's a lot of real benefits to using toxic libs over box2d and we'll talk about that for one it allows you to do stuff in 3d which you might want to think about the main thing the main difference is that toxic lips does not have collisions but now I'm just rambling this video should really be over and so I will say goodbye and good night and good luck and all those kinds of things and goodbye