hello welcome to a this is a coding challenge this is this is a coding challenge the coding challenge today right now is binary tree okay that's what I'm doing it's actually kind of an interesting thing so first of all what I've been reading this book recently I just finished it called grocking algorithms it's great uh by ADI I I'll put a link to it in the it's by Adara sorry I pronounced that wrong I'll put a link to it in the um uh this video's description and I it's been refreshing my brain about all these algorithms that I may have once learned and then never really bothered to use again even though they are vital and important and but what I really want to ask in this series because I'm going to have a bunch more related to this sort of similar topic is what kind of creative outcomes can you have with this so I'm going to come at this from a very uh a no no point of view approach let's just look at the literal binary tree algorithm let's make a version of it I'm actually not going to include any visuals I'm just going to show you the results in the console and I'm going to ask you the viewer to make some type of visual out of it or to do something more interesting with it so maybe when I get to the end I'll have some ideas for you CU I don't have them right now so look I have all these pictures of binary trees behind me and and let's go over here to the Whiteboard and let's make a diagram so so why would you need a binary tree first of all and and actually this is this is the example that's in this book so I'm going to borrow it Pretend This was a phone book it's not a phone book um but it's a big book it's a book of random numbers that's another story for another time and let's say I wanted to find where I am in this book by the way do you even know what a phone book is I just said Pretend This is a phone book people of the future aliens of the future a phone book is a book I'm speaking to you up there not you hold on people of the future a phone book is a book with people's names in it and everybody's phone number oh my God a phone number is a sequence of digits that you use to call somebody on a phone a phone let's just I don't know how far into the future you are hopefully you still know what a phone is anyway it's a let's say this book was a list of people dictionary maybe dictionary it's a dictionary a dictionary is a book I don't know list of words and I want to look up the word rainbow or train pick your word one way I could do is I could go to the first page and I could say oh apple and I could look at every single word on the first page it's not there and I could look at every single word on the next page it's not there I could look at every single word on the next page it's not there but I know rainbow is R which is going to be you know somewhere around in 2/3 so I have a sense of where it is but another way I could look is I could just go straight to the middle and I could say ah is um is the word that I'm seeing here now does it come before or after rainbow in the alphabet if it becomes before you can um if it becomes before then I'm going to go halfway towards the end then I can go halfway back then I can go halfway again so I could keep finding by dividing all the words up in half this is I play this with my kids all the time let's guess a number between zero and a th and I'll always guess 500 and they say well it's too small so I'll guess 750 well that's too big so I'll guess you know whatever's in between those two 625 I don't know 67 oh my God I can't do the math um so so that the point is a binary tree is a data structure that allows you to move through sorted data by dividing it in half now there's a lot more to the efficiency of of the of how of the binary tree beyond that let's just start by designing one and come back to some of these questions later so first of all what what do I mean by data structure here's a data structure VAR xals 10 my data structure is a single number here's another data structure far nums equals you know 10 10 11 12 this is an array it's a list of information there are uh I could have an object in JavaScript which is a mapping of keys and values um you know favorite color whatever purple so these are different kinds of data structures that are familiar with it's a structure where you store data and we could get fancy about it there's things like linked lists which each object each thing points to the next thing so you can only get to it from the beginning by going through all of them and boy I should make some other videos about all these things and there's stacks and cues and all this stuff a binary tree is a data structure that works like this there is a this idea of a node this is a node and I'm going to call this node the root of the tree and it and it has maybe a child two children two children nodes one the left one and one the right one it's a binary tree because each node can only have two connections two children other kinds of trees can have all sorts of variable amounts here here here so it looks like this now this is the way the data is organized but I said the data is sorted what do you mean that doesn't look very sorted I mean I could imagine this being sorted well strangely enough it's s it's it's sorted in quite a remarkable way and the way that you build a tree is by add adding nodes to it one at a time so let's use let's use numbers somebody shout out a number there's nobody there's nobody around I can't get anybody to give me a number oh well I'll have to think of one there's a chat going on but I can't see that far from here so let's say I have uh the number 10 I'm going to add these numbers 10 5 15 7 2 931 this is a list of numbers that I just sort of thought of in my head that I'm going to add so I'm going to add add to the tree first 10 so 10 the tree is empty so the root note gets the number 10 now I want to add five into this tree and right now the root node has two empty spots as soon as I make a node it gets two empty spots now five is coming in here and I believe if five is less than it should go to the left and if it's greater than it should go to the right Bo I hope I'm doing this correctly there's you know obviously it could work either way but there's a standard so five is less than 10 so it's going to go here and now this has a left and a right with nothing 15 15 is more than 10 it's going to go over here and this has a left and a right uh seven seven is less than 10 so it goes over here oh five it's greater than five so it goes over here and now this has a left and a right two two is less than 10 two is less than five two goes over here I'm I can't keep track of the way that I'm using dotted lines or not so this okay we got to get through the whole thing nine N9 is less than 10 it's greater than five it's greater than seven nine goes down here 31 31 is greater than 10 31 is greater than 15 so 31 goes here so actually I don't to just sort of erase these these are all the empty spots so this is the tree so how is this sorted let me tell you something this is most certainly sorted it's sorted because if I go all the way to the left watch this let's go to the left five let's go to the left two let's go to the left oh nothing left let's put out two now let's go back okay five oh now let's try oh sorry go to the left go back now we try to go to the right sorry go to the right nope so let's come back go up here five now can we go to the right yes seven go to the right nine oh actually Sorry Seven we should try to go to the left but we weren't able to go to the left um so we came back seven and now we go to the oh oh oh this is so hard let me do this again I don't know if I should edit this and come back but the algorithm of how we Traverse this tree is we want to visit every node visit a node and when we do that we want to go to the left which means that means visit the node to the left so we're going to implement a recursive algorithm a recursive function a function that references itself visit a node go to the visit the and so I should say start with the root and then visit left so we keep visiting left all the way as far as we can eventually we can't visit left anymore so then we might say you know uh print I'm just going to say print the value so we come up and print the value two what's the next thing we do is we visit the right so now we go down here there's nothing there so we come up here uh and then these are finishing where were we here now we we've finished visiting five so now we print out the value five and then we visit right seven what do we do when we visit seven we then go to the left nothing there so we come back and print out seven then we visit the right then we go to the left nothing there print out nine go to the right nothing there back back back here then we print out 10 then we go to the right and we try to go left nothing there 15 then we go to the right nothing there and nothing there 31 and we're done so this tree magically the way that the things are added to the tree end up in sorted order because what we're doing is we're basically saying I want to look here this is how it ties back to that phone book example oh my goodness can't believe I missed this if I want to find the number nine right let me find the number nine somewhere like I want to find this name in the phone book because the number nine might be associated with some actual important piece of information we need the nine just being like a key I can say is nine less than or greater than 10 and if this tree is balanced nicely meaning there's the same numbers on the left and the right I now have eliminated I don't have to search through half of the data whereas if I have an array and I need to try to find look through the array to find something in in unordered uh in an unordered array I have to check every single option so this is the structure how do we program this this is the next step okay so back over here we can see all of these nice visualizations of trees maybe I'll try to add a little visual something just so you can get how to would you get started with visualizing it but um but um hopefully that gives you an idea of what it's could be useful for talk about that okay um so now let's start to program this so what do I need how how would I even get started programming this well think about this I think I'm definitely going to need a node object so I'm going to write a Constructor function called node and it's going to have a left and a right and I'm going to set those equal to null just to sort of explicitly say when I make a node and the node should have some kind of value or label I guess I'll just use numbers maybe I should use text I don't know what's better but let's call it a label so I'm going to make it's like this sort of data at that node I'll call it value right so when you make a node it has a value and it has a left and a right which have no nothing connected so far let's make I think let's make a tree object to I don't know if the tree is really going to need anything but a tree is going to have a root node um and then also so that when the tree starts this do root equals null so the only thing when the things that's interesting about this data structure is I only ever need a reference to the root if I have a reference to the root by moving throughout the tree I can find any element okay so um uh what happens if two numbers are equal well we'll get to that that's a great question um okay so what I want to do I need a function I'm going to use prototype to attach functions so I want the tree object to have a function called add node and it gets a node as the argument and we first thing I'll do is just say if this. root is is equal to null then uh this. root equals n great so then let's say uh node n equals a new node well let's use numbers for right now because I think that'll be a little easier to see five and uh let's let's make a global variable just tree tree this should probably be called binary tree but tree equals a new tree and I have this node and tree. add node n okay so and then let me just say console.log tree so let's see so this should be um so by the way I'm using P5 here but there's actually nothing about this that I'm using there's nothing here that am I using P5 other than the setup function I have no canvas in there so it doesn't draw a canvas but I'm actually G to uh probably out and I have an error someone just pointed out if this do root equals null if I want to test if it's null I need a double equals and if I really really really want to test I could use triple equals someday I just want to make a video only about double equals versus Triple equals just such a funny little concept maybe I should do that before I leave today okay um so um there we go so now uh let's just take let's run this program uh where am I here uh oh I have an error error sketch touchs line one oh my goodness I've been programming in too much Java today this should be VAR tree right I don't need to give it a type and get this should be Varn boy I was programming in Java earlier today you can tell right okay oops wrong thing console.log not Capital tree tree that particular object there we go so we can see the tree has a root and has a node the root is a node with a left and right being null perfect okay here we go so we're in pretty good shape now what happens if I create another note and you know what you're I don't really need this variable here I can just do this I don't need a separate variable I could just say add a new node I could also if I really wanted to what if I just just to make things a little simpler I'm just say add a value five and I'm going to have this function create a node from it and uh and so this is really the same sort of thing but I this is just a little simpler now because I can have that function take care of that okay so what happens now if I say add value uh three now first of all was I write that things that are less than go to the left let's go back to the browser that binary tree yeah it looks like these examples uhoh whoa I don't know what this is oh boy I don't know what these what's going on with these binary trees what yeah this looks right so less than goes to the left uh some of these images are doing something slightly different than what I'm doing not should not rely on Google image search okay let's go back to my code so let's say I want to uh add node okay so I have another error this needs to be add I Chang this to add value I could just maybe I should just call it add but whatever so now what do I do if root is null it should be the root is that node so what if root is not null so what I need to do is say this do root add value so really what I should do this is interesting this. root add value um okay okay okay okay listen to this this is crazy so I actually um I'm losing my mind here ah uh okay otherwise here's what I want to do otherwise I got it this. root add add node sorry do add node n so okay what am I doing here so what I'm doing is I want to say if the root is empty tell to um just set it equal but what is this function this. root add node this means I need a function as part of the node that knows how to add something to itself oh this is great right so I need a node function node. protot type. add node equals function n so that's the node that's coming in now what happens if I'm a node and this comes in well I want to compare the value of n if n's value is less than my value if n's value is less than my value then this do left equals that node right it should be so if I'm adding it to myself if it's less it should go there otherwise this do right equals n but this isn't correct this is a nice idea right and it will work for just the root because when these two things are empty it will get added here but what if it goes to added to the left but there's something already there well needs to check against that one and that one it should then go to the left or and it should check against that one and then maybe that one it should go to the right so here's where I need recursion what I actually want to do is say this left add node um n or this. right add node n right because I want to just say keep going but what if this left is is null so if this there's probably more elegant way to write this if this left is null then it should be that value otherwise keep going same thing here if uh oh if this dot uh I'm I'm sure I I see a lot of chat messages telling me I'm doing something wrong so I'm sure I'll discover that in a second if this right equals null this. right uh this do write equals n uh else add no note line 17 uh oh Varn okay okay big deal that was all it was that was all it was because I keep writing note okay so I don't think I have anything hopefully I don't have anything majorly wrong now I'm sure there is I'm sure there's a way we could write this we could refactor this to be a little nicer but it is saying exactly what it's doing right if this value should go to the left if the left is empty perfect put it there otherwise recursively go and call that function again otherwise if um otherwise if it's um go to the right now here's the thing if it's equal I kind of want to do nothing right now so I think what I'm going to do with equal if the node is equal it just shouldn't go anywhere and so in that case I can say if else if this dot else if n.v value is is greater than this Dov value so actually in the case of those two values being equal nothing will happen so an equal value won't get added to the tree okay so let's take a look at this okay let's run this what am I what let's run this so the tree has a root which has a value of five and to the left of it has the value of three boy this is a really awkward way to look at it so we're definitely going to want to visualize this in some way to see if what we're doing makes sense but we can see that this is correct now if I were to then say add the value it's weird that I console logged it later and it was there add the value seven let's try that the tree has a root and the root has if I zoom into this a left the Root's value is five the left's value is three and the right's value is seven that's exactly right let's just try one more thing let's just I don't know let's add six that's a little bit tricky right but it should be six should go to the right of five to the left of seven so let me refresh this again the tree has a value of no the root has a value of five left is um whoops has a value of three sorry right has a value of seven and to the left of that has a value of six so this is no way to understand or see this is like I'm kind of used to this weird JavaScript console but the tree is there right and only thing I need to know is the root so remember remember how I said okay well what if I want to then look at all of the values or what if I want to search for I mean the whole thing was this is like a binary search tree the idea is we're storing all this information in this tree I could search for something in it so how do I Traverse the tree how do I Traverse the tree so let's just look at how we would Traverse the entire tree and this is exactly it to I want to start by visiting the root and when I visit the root I visit the left then I then I print out its value but and visit the right but that's done recursively so visiting the left means visit this left means visit this left until there's no left then come back then print out the value then visit the right Etc so this algorithm we worked out it's very hard to hold this into your head so recursion is new to you I think I have a video where I go over and look at like factorial fact the M make drawing some like recursive trees and fractal patterns you might look for some of those videos but this is a tricky thing to get but let's create a function now that's part of the tree prototype I'll call it Traverse and it is a function that says root. uh oh root. visit wait is this right so what I want to do is first visit the root node okay uh and then in the no you know what I need to do now I need to make some separate um separate files tree I'm going to make a file called tree. JS and I'm going to make a file called node node.js oh boy is that a problem uh node.js so if I go to sketch I just want to be able to pull this code out and look at it on its own so tree just has these three functions now the add value the're Traverse and the tree so the tree is just really a wrapper for the root that's all it kind of does the node is where all the sort of guts of the algorithm is is so I want to take all this node stuff and put it here in this file and here we go so now all I have is so far as the Constructor to create the node which has a value and a null left and right and then this add node function which recursively figures out where to to keep going through more and more nodes to where to add it now what I want to add is a function called visit and what does it mean to visit uh this. left dovisit this. right dovisit so I always want to go to the left first because I want the lower values first so that was definitely right and then I want to visit to the right but in between if I go all the way down to the left I if I want to actually do something I want to process the value or check what it is here's where I would say console.log this.v value so here's the problem is though I don't want to say this. left do this. left. visit if it's null so only if this. left is not equal to null and I know I could in JavaScript I could just say um as long as this left exists but just in Cas it could have the value of zero which is going to cause me a problem so um I'm going to I'm going to stick with checking to make sure it's null and if this dot right does not not equal to null uh this.right dovisit okay look at this so simple beautiful elegant I love this kind of stuff line seven I have something wrong in line seven no node. prototype thank you I love having a chat that debugs this stuff okay so here we go I think I just sort of typed this from scratch could this possibly really work so let's now um let's go here and see if in the sketch uh I'm going to now say tree. Traverse and I should just see all the values in sorted order okay tree is not huh tree is not defined oh of course I always do this I forgot to add a reference to these two new files I just invented a whole new JavaScript library called no. JS not really tree. JS there's a whole big serers side JavaScript programming framework called node so I feel like it maybe a little bit weird that I called my file node.js but we'll live uh okay root is not defined um do I forgot this dot clearly uh did I forget it anywhere else I don't think so let's run this again there we go look at those values 3567 okay let's try this in a crazy Funtime way because hasn't this already been so much fun let's say for VAR I equals zero I is less than uh 10 i++ Let's uh add a random number between zero and 100 and I'm going to floor it just so it's integers even though I don't really need to and I'm going to console log the tree and say tree. so I'm instead of hard coding the numbers I'm going to pick random ones and let's run it these look s sorted these look sorted these look sorted it's great and uh let's add a th that happened pretty quickly so I mean you know would have to now here's the thing let's let's go back to just doing this with 10 let's look at the actual tree the root has a node to the left which is 68 no the the root is 89 to the left is 68 to the right is 93 see again this is no way to look at it so we're done with the binary tree I didn't actually add a function that is um that involves searching the tree um which I probably should that would kind of make sense um but um so we could search so we could add that let's add that let's add a function that searches the tree and it's going to be very similar to Traverse so we're going to say tree. prototype do search equals function I'm GNA search for a value and we're actually just going to do the exact same thing oh sort of uh we're going to say this. root. search for Val so again the tree object is just a wrapper for the root and we're going to say search the root so now this visit function is going to be very useful because we're essentially doing the same thing um but what we're first doing is we're first saying does this. value equal Val right I first then I want to say console log found uh plus Val and then otherwise uh otherwise if this do value is less than no sorry if Val is less than this.v value then and and this. left is not equal to null then I want to and that's then I want to uh go and search for that value here and then I'm going to do the same exact thing for uh the right and I'm G to search for the value to the right so this is how I could just say hey is the root the value no but I'm less than it so just let's look at everything to the left so I don't need to this I'm not traversing the whole tree I only know need to go the One Direction that I need to go so um insert One Direction music right now okay so let's see if let's do this um let's see if this works so this what's in the tree right now all these numbers so if I say tree. search uh 53 this root search is not a function what did I do wrong uh oh I called it sorry I called it visit again this should be search let's do this again so I want to say tree. search um let's look for 61 found 61 can you guys see this refresh this again um well you can't see at the bottom there because it's cut off uh so let's do this ah sorry hold on um so let's do a tree. search and let's look for something that's not there so nine is not there undefined so that's pretty good I probably should have something where I mean that's fine I might want to explicitly somewhere say at the end return um return undefined or returned not found but I can basically say here now in my uh wherever I oh you know what I should just return so that's what I should do sorry when right when I found it what that's what I should do to make more sense right here I should say return uh I might as well return the node um return this so that's I found it at this node so I'm going to return the node and then at the end I believe if I just say return you know uh null so if it never finds it eventually it's going to recursively percolate through all these functions to get to the end and return null uh I think that's right so let's do this again so now let's say tree. search for 20 which I know is in there somewhere and oh I got undefined H uh uh oh you know what this is not the right place for this because right because it could be oh because it's equal no vertical bow TI mod wait wait let me take this out for a second I have to think about that tree. search uh four undefined what's wrong here what did I miss return this console.log found vow uh oh whoa this should say VAR found I don't know why I didn't have this in I didn't add the part I'm really sorry everybody my brain must have just melted uh I VAR found found equals this so if found is not equal to null console.log you know found and then I could uh I could put that object out otherwise console.log not not found I I don't know why I missed that so we're searching uh okay uh okay um so now I should say say tree. search uh 10 found 10 not found so why does that happen why does that oh oh oh no it didn't it found it but it said not found what am I oh oh oh oh oh my my returns is all my my return is all messed up let's think about this boy this is hard um search found oh no I'm in the wrong place oh I'm in the I'm I'm in the wrong place this is where I need I I just haven't really think thought about what I'm doing it helps to think about what you're doing what am I doing I want the tree this is the function I'm calling I want this function to return something it's printing out the right thing the whole point of this is not to print something out but to return the thing that's found return found that's all I need to do forget about all this I want to return found because I want to see it in the console somewhere else I might call it so that's I just kind of like got confused because I'm typing everything into the console which is a little bit confusing um so let's run this again and say tree. search 19 and uh hold on did I not save everything ah okay of course the problem is uh I need if I want to return a value you know one of the nice things about this visit thing is I I was just going through everything I wasn't worrying about returning a value so I would just call the next function but if I want to I I need to return the results of the recursive calls so I need this return and I need this return so this should really fix it so I'm going to refresh this now I'm going to say tree. search 12 and now I've got 12 but as I changed it to but I want to Let's return a reference to the full object doesn't really matter but uh tree. search Five and we can see I got the node now which has the value five I know what this laptop is kind of uh covering it so um so okay so that's how you search the tree and if by the way I search for something that's not in there I'm going to get undefined however I can put this back in just to be sure and I can get null so if what I want to do is is um you know now actually here I could say you know tree. search you know 10 let's just see if this tree has 10 in it and um and I could say now if result equals null console.log not found else uh console.log you know result so now I'm going to run this and 10 is not in there 10 is not in there 10 is not in there How likely is it it's going to put 10 in there oh it had one that found 10 so you know about one out of every 10 times there I can't can't stop Hing refresh stop find it find it find it find it please find it oh come on oh no what's wrong with me okay you guys get the point okay so this is a binary tree um hopefully what you've seen now just to summarize I think I'm going to in a separate video make a part two where I just add some visuals to it so that but that's what I want you to be thinking about well why would you this is an important data structure um that you can use to store information for binary search for sorting uh for dictionary of words there's so many possibilities but the key thing is what what kind of creative outcomes could you have here could you create some type of game which involves a binary tree and you have to add things and find things sort there's the sort of Plinko thing I made before make a binary tree we added some Physics to it just visualizing it is there something beautiful in the way that the binary tree you Traverse the binary tree recursively could you do some kind of nice animation I think there might be some unique possibilities there so I'm not very good at this kind of stuff any of it really but especially the visual stuff but in the next video I'm going to at least try to draw some of the tree so we can see um how it looks if we if we draw the sort of basic elements okay I'll see you there