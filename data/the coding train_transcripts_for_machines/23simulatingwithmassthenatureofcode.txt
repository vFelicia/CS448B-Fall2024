okay so we're now ready for it I think we're ready to talk about mass right mass what is mass mass is the amount of if my prop again mass is the amount when to eat this Clementine afterwards mass is the amount of matter in an object right this object has the same mass here on the earth out in outer space on the moon it's the amount of matter in the eye and an object we measure it say in kilograms weight by the way which is often confused for mass is the force of gravity on an object that's why we weigh a different amount less on the moon versus on the earth weight typically as measured in Newton's of force it's a force of gravity on an object so we're looking at mass now I think it's an interesting discussion but it kind of doesn't matter because we're gonna just go look at our processing sketch and look at a circle on the screen and think okay what's the mass of that object oh that one looks like 0.75 to me right so we're just kind of making up numbers for mass most likely it would probably make sense to have mass be tied to the size of something we draw so the diameter of a circle the width and height of a rectangle those might be values we tied to mass the bigger it is the more massive it is we could get into density which is you know if it's not very dense it's gonna have a lower mass even if it's big but you know we don't need to get that far into it all we want right now is to have objects that seem like bigger and more massive and some that seem smaller and to see different accelerations that vary according to that object's mass which we are ready to do so right because we did I say this already I'm confused cuz I tried this before it doesn't know what I'm talking about but where we are is that we understand that force sorry that that the net force is equal to mass times acceleration or acceleration is equal to the net force divided by mass so we've been doing that already the net force gets accumulated into acceleration every frame of animation every cycle through draw but we haven't divided by mass so you know what's interesting here when you make these videos I'm realizing that there's something we didn't cover back with the vector videos I'm gonna go back and make a video so by the time you see this it'll have already existed it's like I went back in time and like solve everyone's problems but for right now you need to go back and review the video on static methods in the P vector class because something that's very important here is that if a force let's just look for a second let's say we have two objects m1 dot apply force it's a little bit of a digression but I think I'm gonna go with it for a moment let's say we make up a P vector F which is some force right and we're gonna apply it to two objects and in a moment I'm actually going to change our example to have an array of objects so we can at least see a variety of masses right so if we're taking a force and applying it to two objects let's just say we first wrote this code force dot divided by the object's mass oh by the way we probably should introduce a variable into the mover called mass and just to be obnoxious I'll make the mass equal to one no okay let's say we make the mass equal to two and this force is a new P vector say with values 5 comma zero now if you are familiar with objectoriented programming in Java you might know that whenever you pass an object into a function it's the object itself it's not a copy of that object so if this object goes in here and gets divided by mass this force has been effective and divided by mass before it goes into the next mover and gets divided by mass again no we want both movers to receive a force with the same value for those of you who might be new to some of this objectoriented programming stuff I have this stupid screen on I keep staring at it this might be a little bit confusing to you and so I don't know how to solve that problem right now but I might kind of make some I'll figure out a way another video an email you can call me on the phone I don't like to talk on the phone makes me very nervous but email is very comfortable with ok but for now what we want to do is when we pass it into the object we don't want to actually pass it into this function we don't want to divide it directly we want to ensure that we make a copy of it and the way that we're gonna solve that is by using this static version of the divide function P vector I'll make a new variable called f equals P vector dot divide force divided by mass kind of ran out of room here I hope you can see that we're gonna type it out in a moment so and then that's what we're going to add into the acceleration again perhaps a little bit confusing but in a very important detail if we have multiple objects when we apply a force to an object we want it to say like oh thank you for that force III know that is with this force I could ruin everything for everybody else so I'm gonna make a copy of it so I can divide it by mass and do stuff that I need to do to calculate how I'm gonna move I don't know what I'm looking at over there there's a person that I'm talking to right so that we object is going to say it's gonna receive this this OP this the object to receive this vector and make a copy of it so that it can mess with it and that's what's happening here we don't we're actually not making a copy of it but this force divided by mass makes a new vector this vector force remains unchanged so this is a kind of an important detail but now if we could get kind of get past that detail for a moment let's return to the real reason why we're doing this the reason why we're doing this is to before we accumulate into acceleration we divide it by mass so bigger objects accelerate less it takes more force to accelerate a larger object I'm looking for some sort of device here right you know I have a box right this you know here's a little force boom I accelerate it not that much force if I try to pick up this giant box very heavy box right I can't like boys I'm just gonna be very hard to accelerate that box okay as you can see I need to go to the gym okay so that was a terrible demonstration you probably made all sorts of horrible audio uh but you know whatever I'm tried it okay so let's go to our code and see what we're gonna do next there okay okay so first thing I want to do before we kind of go forward with this is I think it would be useful to actually well first to make an array of these objects so I'm gonna do that really quickly it's very simple thing I just want to declare instead of one object I want to declare a array of movers I want to make you know maybe I'm gonna start with just five of them and I need to initialize them with a loop and then and then what I'm gonna do is I'm gonna make another loop here I'm gonna use the enhanced loop and see this it's gonna be very exciting and I'm gonna let this run and we're gonna run it and what's interesting here is that it looks like I only have one right so what I did here really really quickly it by the way if you're not familiar with this enhanced loop it's a really nice loop for mover m for every mover m in the array movers do this to it so M it's this nice way instead of having to count through the loop like I did up here to initialize I can just say hey for every mover m apply this force update display so very quickly I just declared an array initialized all them and and and apply the same action to all of them so why do we see only one well we didn't do a very good job of making them have any variety so let me start them all at a random location and we can see now look we have a bunch of movers when I click them house they're all behaving quite similarly because they're all experiencing exactly the same force so what's interesting about this is now we could add mass so let's go into our mover class let's add a variable called mass let's initialize mass as something random I'm going to be really simple about this and just say they're values between one and two and then what I'm gonna do is when I draw the circle I'm gonna say mass times 20 so I don't want huge values for mass because remember I'm dividing by mass so it's gonna make all the forces incredibly weak so I can use some small numbers and then scale up to draw the objects and when I run this we can see here oh well we have a bunch of objects with different sizes but I forgot to actually implement what we did over here so now I need to actually say hey when you get the force divided by mass so let's go back over here and I'm gonna go back into the mover class in my update I'm sorry in my apply force methods second law with mass I'm gonna say P vector F equals P vector dot divide force divided by mass and once I have that I'm going to accumulate that new vector the new vector that was divided by mass gets accumulated into acceleration and now when we run this we're gonna see something is going on a look the smaller ones accelerate faster that's actually correct right and you know there's not that much variety here so I don't know I feel like making this just a little bit more varied so we can really see this that seems something about this seems off though right so we're getting pretty far in that all we did was add mass and divided by mass and now we have an even more dynamic system where the objects have different accelerations based on how big or small they are but something strange has happened and and I wish I wish I was like a I don't know a prepared physics teacher that like had bowling balls and kind of marbles and stuff but you might notice right if you drop two objects that if one's really big and one's really small they fall at the same acceleration the acceleration due to gravity is not different with different masses now why is that am i recording I am recording so something interesting and we're gonna get to this in a future video but the formula for the except the formula for the force of gravity involves mass so it actually is if we want to look at it this is kind of foreshadowing something we're gonna look at in future video the force of gravity the magnitude force of gravity is the mass of one object times the mass of another object times something called G divided by distance squared incidentally the mass of one object in our scenario is the earth the mass of the other object is that circle bouncing up and down a little word the audio is too loud in this video but I see a bar spiking up and hopefully it's okay and so my train of thought yeah but notice something if okay so let's just say that here's the thing I got it I got it I got it let's just say the mass of earth is a continent the mass of the Earth is a constant in our world you know G is called the universal gravitational constant it's got the word constant in it it's also a constant distance yeah this is further away from the earth than this right now but it's not that much further and you might as well consider it the same or the center of the earth is really far and certainly if we hold two objects at the same spot the distance is equal so we can consider this to be a constant so really we can say the force of gravity is some big constant times the mass of the object so if acceleration due to gravity is equal to force divided by mass right then we're saying hi I think one of the constant times the mass divided by mass oh so if we're dividing by mass when we get acceleration we've just got that constant right if the magnitude of the force is scaled by mass and then we're dividing by mass then the acceleration is constant no matter how much the mass is so how do we implement that in our code just to simulate gravity accurately so let's take a look at that we can kind of apply what might be considered a little bit of a cheat in a way we can say look this is where we're creating the force of gravity the force of gravity is zero comma zero point three some vector we basically made up let's scale it according to the object's mass so before we apply to the object if we scale it according to mass when we divide by mass it won't have even if it's as if it never happened let's run this again look all these objects are now falling together what's interesting about this and I don't know why I feel the need to do this but I just want to give them a little bit of alpha so it's a little easier to see what's going on look at this they're all falling with the same acceleration but let's apply wind notice now how wind is of course knots I have to hold my mouse down here what I've done wind is not scaled according to mass write a smaller object is gonna blow in the wind much more quickly than a larger object it's going to be much hot mud is gonna accelerate much less so this is really key to sort of beginning simulation now what are we really simulating again like is the scream like this 2d world and things are falling down and is they're afraid you know what's going on it's very weird actually what we're doing but and from a starting point this is sort of useful thing to look at to realize some forces might actually be scaled according to math like gravity and some wouldn't be in their acceleration would then be affected okay so now that we've done this we kind of got through this this video is really just adding mass so if you've been kind of making something hopefully along with all of this what I would say to you as an exercise is go and now add mass to your simulation and see what happens if you can make an array of objects with varying masses okay and in the next there's two videos I think there's only two videos that we're gonna do left in this section I probably four might think of something else but there's two videos left we're gonna do in this section we're gonna look at a drag force era fluid resistance and then we're gonna look at gravitational attraction we're gonna look at two case studies that will actually involve formulas and then I don't know we'll be done for a little while I could take a break between this for like hours oh okay talk to you soon that's just something I said you say to be polite right I mean but yeah well maybe okay goodbye