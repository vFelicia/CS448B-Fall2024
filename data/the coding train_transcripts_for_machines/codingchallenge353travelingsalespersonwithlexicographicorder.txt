hello and welcome to part three of an of a coding Challenge and I don't know they're individual coding challenges or part of a sequence of coding challenges who knows but in this particular one what I'm going to do is I'm going to look at this traveling salesperson problem again a list a random list of eight cities and right now the program is just randomly trying possibilities to see if it can find the best one and I'm going to look at how we could combine that with this thing I worked on in the previous challenge which is looking at every permutation of a list of numbers or letters sorting in lexical order which is like an alphabetical order type thing so here you can see this is running uh it's going to take a very long time to check every possibility but I want to take this code and I want to combine it with the traveling salesperson problem to check every possibility in order which I think will be an interesting thing to do so let's let's look at that so the first thing that I want to do and honestly there's probably I can tell you for sure that after I finish this I could easily make another 10 or 15 minute video that's just kind of like refactoring the code to sort of organize it nicely in my you know hyper desire to have like things always organized but I'm going to just I'm going to let it be loose in this video so I'm just going to like copy paste code around move stuff around and kind of use stuff together in a bit of a halfhazard way just to demonstrate it working and then uh you should remind me when I publish the code I'll make a nice neat version for you with some comments and things organized in a way you could kind of compare those two but anyway let's just keep moving and so what I want to do is I want to basically start taking things so I want to take this array vals from The Lex lexical order example and I want to bring it into the traveling salesperson example and if you haven't watched the previous two videos you don't need to but you might want to go back and see how where the how these pieces of code were developed um and what I actually don't want to do here is I don't want to initialize it hardcode it and I think I'm goingon to call this order now because really this is going to be the thing that's keeping track of the order for me and I need a number for every city so all I need to do add here is right here in this Loop is say orders index I equals I so I just create an array oh and I need to initialize it as an array so in JavaScript I've got this array and the array is going to start if there are eight cities and let's just do it with um four cities just to see it's going to be 0 one two 3 right 0 one two three four cities okay so that's good so that's the first step now what I want to do is I'm actually going to take this entire algorithm and I'm going to put it in a separate function I'm just to say copy and I'm going to go into my lexical one and I'm going to just go to the bottom and I'm going to add a lot of line breaks just paste it down here and I'm just going to say here like ah uh this is my lexical order algorithm and I'm going to write here I'm going to call this a function now next order so I'm going to put all of this in a function called Next order could be just called Next or next ordering and what this is going to do is it's going to take actually this is this is going to be this is much easier than I even imagined and maybe I don't have to refactor this that much I I called it order instead of Val so I'm going to have to be I could probably do a find and replace or something but I'm just going to kind of eyeball it for a second and put order everywhere now uh so I now have this algorithm and what I want to do is I want to make my canvas taller I'm going to make it 600 but I'm still going to only pick points in the top and then what I want to do is I want to use this quick little algorithm to write text to the screen so I can see I want to put this at the very end and I know I'm doing this kind of quickly so I'm kind of tring to talk to you through what I'm doing it'll make more sense once you see it um and this again is order I'm just combining the Cod I'm not actually logically combining the code I'm just taking all the code from one example and putting it in places in a previous example and then what I want is to have this be at like the bottom of the window somewhere down here and if I hit refresh whoops I'm in the wrong example uh oops I got to go to uh Local Host and find that example again uh tsp lexical and I have some errors here so orders is not defined sketch. JS line5 uh it's called order thank you and you can see okay so now so okay so what I have now is the random selecting and the order being displayed below o and by accident because I have a stroke in a fill I have these nice outlined characters that make me me kind of happy um so now all I need to do in draw is say next order like in draw I want every time I want to try the next possibility so vals is not defined sketch. JS line numers 97 that's a place where I forgot it which would make sense for me to have done a find and replace 109 but this is a perfectly fine way of finding those spots uh 119 boy I really did a terrible job I could see I can see some other spots now I I barely got anything uh oops and I don't want this anymore that was the drawing part so we can see here now it looks like it's working right because it looks like it's trying every possibility here but it's not actually using this order as the order of things for the traveling salesperson uh order of cities so now I need to instead of randomly picking an order of cities I need to try the order based on what's here I want to try City three then two then one then zero okay here we go so now what I want to do is where so where do I get the order from um the order basically so this is kind of an interesting thing that's happening here my what I'm going to do is change the pro right now I was actually moving the vectors around in that cities array but the cities or the array now is no longer something that I ever need to touch the thing that I'm keeping track of is actually the order array so I'm going to redo this first by just saying um what I want is to go through every single element in order actually so here is me just drawing all the cities so this is actually not the path so this I can leave I'm just drawing a circle where every city is and I'm going to take out the best ever thing for a second because I'm GNA have to adjust that but what I want to do here is not I want to go through that order array and the particular City that I want to draw City n for lack of a better word is at order index I so I want to go through the order array and set the order as three then two then one then zero whatever is in there so now the index that that's that order array essentially becomes a lookup so I I think this might be I have this sort of like gut feeling even though you're just somebody on the internet watching a video and I'm a random person in a room talking to myself that that this is not entirely clear so let's clarify this these are the cities quala Lampur Rio uh Oslo I'm trying to think of a diverse set of cities from around the world um so those are the cities but I'll just call them uh a b and c and this is the order which is an array that has something like 1 two 0 so a b c what I want to do is start here and say okay the first city is one which means it's B so I'm here right now then the next city is two which is C which means I travel to here and then the next city is zero which is here which means I travel to here so this never changes this is the thing that's changing around and what we use to inform the order we draw here okay now I've come back and uh this should hopefully make a little more sense to you and I could run this now and we can see it's doing every possibility now I'm not getting the best possibility cuz I actually fixed that testing yet but you can see that it's kind of checking every possibility and drawing in that order and I might be able to if I reduce the frame rate hopefully we could see that kind of happen um as you see it checking each order and then going to the next one um and there's some other weird goofiness going on the way that I'm um because I haven't gotten to the next step so the thing that's the best ever now is no longer actually a copy of the array of the C it's a copy of that of a particular order so best ever distance can ah ah Cal distance has to change because now when I calculate the distance I need to calculate the distance between these cities based on a particular order so let's go to that calc distance function I'm going it's going to be a particular order and now as I go through the order I'm going to say uh City uh City a is points order index I woo right because I need to get go into that array and find the one that's at the spot in the order this this would let's write this in two lines of code city a index is order index I and then the actual City and let's just uh no let's write is the actual point at that spot right so I need to use that order to look up what city am I at and then I want to do that with B City B index City B City B index and that's I + one remember that's the next one in the order and then I want to get the distance between uh City A's X City's a is y City BX I like have to like think about this while I'm doing it City b y okay that makes sense so we've got to use that order again now to calculate the distance so it became a little more complicated and of course you could condense this code and I might think about it later of a different way to write it but I'm writing it in the most number of steps to try to make it as clear as possible okay so now we have that distance so that works I have calculated the distance between these cities based on this order and if it's the record distance I want to save not the cities but the order then I'm drawing the cities based on uh based on sorry the uh I'm just drawing all the cities then I'm based on it drawing them based on the order that I'm currently checking and then now I want to draw them I want this exact same Loop but I want to draw the best one so instead of getting the order from the current order array I want to get it from the best ever array and we should see now if I run this and I've done it correctly oops length of undefine sketch. JS line 86 what problem have I done uh uh order is undefined ah I must have I have a second place where I'm calculating distance based on the order and swapping oh no forget about this swapping get rid of the swapping that's I don't want to swap I'm not ever swapping that's that would have been a big bug if I left that in there by accident found that luckily uh am I not going to next order no okay so what's going on I got to debug this do I have no Loop somewhere I'm back it actually was working I just was impatient my frame rate was at one but I do have an error here sketch. JS at line 48 what's happening line cities and uh okay so n is okay so why did I get an undefined uh so hold on let's look at cities has four things in it let's look at order 0213 let's look at best ever ah something's wrong still for whatever reason I'm not getting the order the numbers in best ever so let's see where let's see everywhere I'm doing something with best ever there order. slice ah I still had cities. slice here so this has to be order and so now we can see here we are checking every possibility one frame at a time and you can see the current thing that I'm checking is drawn in white and actually that should be after so you can see it um um just so you can see it on top I'm just going to switch the order round for a second uh of the drawing stuff and I'm going to make the frame rate uh five just so you can see that a little better so you can see it trying every possibility and essentially it'll get to the end and um when it gets to the end you know I kind of in a way like just drawing the current order I don't have so this could be a CH this is a challenge for you guys to sort of visualize this better and actually I have a I have an idea I have a better idea so what I'm going to do now is actually uh translate zero height divided by two I just want to draw these in different places so uh and uh whoops for the uh second one and then the uh where I'm drawing the text is actually uh just by two minus 50 so what I what I what I think is work would work better here is for you to see um and I don't think actually to be honest like I don't feel a huge need to draw the permutations but you can see at the bottom I'm trying every permutation and the current best one is at the top and was it really the last one let's so let's run this with uh let me take out um no let me just run this a few times I wonder if that's a bug in my code no okay good that was just a coincidence so here the last one is not the best one and what we can do first of all I want to take out uh console I want to add a couple things to this I want to take out um I want to get rid of this test to see if that was working and I want to um uh I want to sorry I was looking at the chat for a second I want to make the total cities uh eight and let's take the frame rate up to as fast as it'll go and we can see here it is trying every single possibility and every time it finds one that's better it it puts it up top so you can see I don't know maybe that's the best one actually it might have found it and at some point it's going to stop now I don't know where it is so one thing I would like to do is um is be able to uh calculate the percentage uh finish now the thing is uh the thing is we might run into so this is kind of done and you could stop you could stop watching this video and kind of take this and think of a more creative way to visualize this or do something interesting with it um but I just want to have a sense of how far I am to being done so one thing I want to do is I want to know I want to know uh total permutations I want to calculate that total permutations equals I have no doubt this is not a function in JavaScript math. factorial total cities now what's the chance that that gives me something yeah math. factorial is not a function so let's write our own I'm just going to go to the bottom here writing a function for factorial merits its own video but I'm going to do it uh really quickly here uh and just say that if n equals 1 return one otherwise return n * n minus one and that's uh not right n * factorial of n minus one right so factorial is five a five is 5 * 4 * 3 * 2 * 1 factorial of 4 is 4 * 3 * 2 * 1 so factorial of 5 is 5 5 * 4 factorial which is 5 * 4 * 3 factorial which is 5 * 4 * 3 * 2 factorial which is 5 * 4 * 3 * 2 * 1 factorial and one factorial is equal to one and this is a little recursive function which just does that so um I think I have another video where I actually go through that in detail I'll try to link to that here but so we can say total here uh with eight is factorial of totals uh so I'm going to say total permutations I just want to see what number I get 40,320 so percentage I can also say now I can have uh account going and I can say where I can say in draw our next order really I can say uh count Plus+ and maybe that should go at the end but I'm feeling lazy right now and I can say now what I want to actually do is is calculate a percent which is 100 times the count divided by the total permutations and I want to see um perent completed and let's make that um let's make that a little bit smaller uh it'll just be there at the bottom and see what happens uh and you know it might be nice here to uh number format that I think P5 is a function number format NF where I can say just give me two decimal places to look at and we can see now and and you know I could say uh percent so even with eight you can see how long this is going to take doing only one possibility 60 frames per second let's at least uh make sure that this is kind of working correctly by reduce this number to five and we can see here we're going to get through 100 and my my counting is off and where I'm calculating in no Loop but you get the idea here so now I'm able to see this is now me checking every single possibility and getting the fastest one let's look at six and just out of curiosity is this program even going to run if I go up to like 20 cities oh something is ABS oh you know why it's not working is because 20 factorial is a number too big to store in a variable and I would need some sort of JavaScript library I think for big numbers I think that's particularly correct because this I ran into when I was working in my Java example on my Java example um I needed to use Longs and I even you I might have even needed to use like a big number Java library but that's only for the percentage calculation because I don't actually need to know the total number of possibilities to check every possibility I just need to check every next one so this 8% calculated is absolutely wildly incorrect but uh I think if I do 10 am I going to get something 10 I'm still going to get something about right because that's a reasonable several million so you can I encourage you to run this on your own for a while see if it comes up with something that looks right um and but you know honestly what I would like is can you make some kind of interactive system that allows users to place points can you make a game or a simulation where things are following all the points can you actually have it act out people searching for Pokemon or sales people walking to sell things or I know you you should music playing as you should be more creative with this okay thanks for watching I've got one more left to do which is do exactly this but use a genetic algorithm to evolve the best path thanks for watching