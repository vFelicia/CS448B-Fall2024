I'm here to tell you about something that's kind of exciting that I really should have known about when I made this video. But it's new to me. And it's now going to be new to you, or maybe you know about already. But I'm going to show you this new loop in JavaScript called for of. That's what I'm going to call it, for of. So very, very often, the previous example that I just made, this happens all the time, all the time in programming. Hey, I've got an array of things. Let me count through the whole array to act on everything in the array. And this can happen with arrays of objects, like I want to move and show all these objects. It could happen with arrays of numbers, like, ah, let me double all the numbers in this array, or let me add up all the numbers in this array. And there's actually other ways of doing that too that I'm going to get to in other videos. But what I want to show you here is the for of loop. So really what this is saying here is, for every bubble in the bubbles array. The problem is I think "in" already meant something else in JavaScript, or "each" always there is a for each thing. So I'm speculating here. But I imagine that when this feature came into JavaScript, the developers needed a word to pick. And that word is "of." So what I'm actually going to say is like, this bubbles index i stands in for every element of the array bubbles. So I can actually do the exact same loop by saying for let every bubble of bubbles, and then bubble.move whoops, not bubbles and bubble.show. Now, so this is what I want to emphasize here. These are exactly and I'm going to step to the side here. These are exactly the same. Let me move my mouse out of the way. No. It must look perfect on the screen here. This is me counting with an index to address every element in the array and moving and showing them. This is me just saying, hey, JavaScript, I don't feel like counting today. Could you take care of this for me? Just give me every single bubble in order in the array bubbles, and move and show them. Now, I'm going to do things in later videos where I start deleting things out of the array, or maybe I only want to use half the array. Then those are cases where I really need the counter. There are often cases where the counter plays a role. But if the counter doesn't play a role and I just want to do something to every element, this is what I could do. Now, what I don't love about this then is I do this all the time and lots of programmers do this. I have a class called Bubble. That's capital B down here. I have an array called bubbles, lowercase b with an S on the end, plural because it's many. And then I have bubble, which is like an individual bubble that's every bubble of the array. So I just want to emphasize that this could just be called if the bubble's names were unicorn, this is just a made up variable name. It is the word that stands in for every element of the array. And so like I could say, let element of bubbles, for example. But this is kind of a convention that I could adopt. The class, the type of thing is capital B Bubble. When I have an array of them, I'm going to call it bubbles with an S. When I have an individual one, I'm going to call it bubble. But there's no reason why you have to call things that way. I could call this bubble class, single bubble, bubble array, that kind of thing. So that's really it. I'm going to use this I'm going to use this kind of loop in other videos. And then I guess I can reference back to this one when I do. Hopefully this made sense. I'm looking around to see if anybody has any questions. But you are in the future. I don't even know who you are, watching this video. But you are there someday, watching this video. I'm probably not standing here anymore. I'm somewhere else. This video has ended. [BELL] [MUSIC PLAYING]