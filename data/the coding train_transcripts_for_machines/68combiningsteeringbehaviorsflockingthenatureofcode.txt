so it's a little bit tragic that we've saved but is arguably possibly the most important aspect of all of this steering Behavior stuff till this video which is essentially at the end I don't know what number we're on here but if you're still with us if you're still with me here we go we've got something we've got something that's really going to allow you to use this stuff um in a much more flexible way in in all sorts of kinds of projects and what we what I'm talking about here is combining multiple steering behaviors this this may seem like an obvious thing to do and and I hope that it does but I want to look just briefly in this video at what it means technically to do that so you know we could list all the behaviors we've done so far like seek arrive flow field uh we did path we did separate alignment I think these are all the ones we've kind of looked at in the particular videos one at a time so in our first demonstration what I'm going to do is demonstrate for you combining seek and separate so this may seem this so first of all the idea of combining forces is absolutely something we've been do we've done before and I've been doing continuously throughout all these examples it's the whole reason why we wrote this apply force method right we wrote this apply force method so that we could call on an object apply Force gravity apply force wind apply Force nervous energy right we could just keep applying forces of the object it would accumulate them into the acceleration and move according to the net result of all those forces so essentially this is all we want to do we want to say things like um I'm going to write this down here apply Force seek and apply force uh separate so this is where hopefully this notion of combining forces is obvious to you right yeah we did this we did seek we did separate all I got to do is bring on both of those in the same example and call apply Force twice and that will in fact work but one thing we should add onto this remember we are thinking about autonomous agents and autonomous agents have this ability to make their own decisions According to some set of rules that govern their behavior and a rule a way of thinking of a rule that governs how you combine these for is is a weight right how important to a vehicle how important to think about yourself what's more important to you that you get to some Target or that you don't run into anyone on the way there you know for me I don't want to like bump into people and knock them over I'm very happy to move around them and I'll take longer to get to the Target somebody else might want to just Barrel through and knock everyone over they just want that you know cupcake or whatever is at the end of the line so this is something that we need to factor into how we program what are the weights of these forces and how can those weights be flexible so that different uh flexible either from vehicle to vehicle are flexible over time right think again about the simulation if the target is food and the separation is like avoiding other Predators when you're really hungry maybe seek is much more important than when you're not so hungry so we need some mechanism for doing this for how we can go buy these forces again this is a kind of a simple thing to do the hard part is figuring out the algorithms for each one of these forces is it's not too hard to look at combining them so let's look at a couple different scenarios in code and I think this video will hopefully be one of the shorter ones I always say I should never say that that means instantly it's going to be the longest one ever okay so first we're going to look at separation and seek so first I just want to run it and we can see here that these vehicles are both seeking the target which is the mouse the mouse and they're also trying to separate from each other right we could imagine what would happen without separation they're all just going to L right onto the mouse they're not going to care about occupying the same space so here we have an example of two steering forces combined great so let's take a look at this in the code so one thing that I'll point out here just to like only look at this for a second is we are calling apply Force twice this is the point apply Force separation apply Force seek that's what we're doing where are those forces coming from they're coming from two functions separate and seek now one thing I should note about this is look here is the seek function here's our seek function if you look at the seek function in a previous example what it will do is it will at the very end it will say apply Force some Force so we calculate we go through all this desired velocity calculate all this stuff get the steering force and then boom apply the force to the object put it in its acceleration but in this example we're not doing that in instead of saying apply Force we are returning steer to wherever it was we called it so we have a new function this new function is called apply behaviors apply behaviors is a function that I have added to this example to be the sort of centralized location where we manage all of the forces and the weights for those forces so first we ask for this from the separate function the separate Force then we ask from the seek function a force seeking Mouse X Mouse y then what do we do with those here this is the crucial crucial two lines of code we wait them separate ation force is weighted by a factor of two seek force is weighted by a factor of one now admittedly this is probably the worst possible way ever to do this because what are what are my weights they're hardcoded numbers that means they can never change over time and they are the same for every single vehicle ever in this system so this is my challenge to you my exercise to you is do something different you know you could think of having sliders or keyboard control to like control various weights you can control them by pearing noise you can make them all Rand random you could have some logic you know the the vehicle each vehicle has like a health value that like goes down over time and according to how fast it goes down it scales the weight of the different forces later we're going to see we're going to look at genetic algorithms could you evolve the like Optimal weights for this vehicle to behave a certain way there's so much potential just in these two lines of code of course all I've done is put the number two and one there but at least we can kind of begin to see a little bit of what's going on right what if I set the weight of separate to zero we can see here this is seek with no separation it's as if that Force doesn't exist if I go and put that to two and put seek to zero now we have we just have that separation example they don't care about the mouse anymore we could say hey let me have separate these super important and seek be just a little bit important you can see like maybe they're kind of seeking the mouse a little bit you can see they're like kind of coming into cluster but separation is so much more important so the varying weights of these objects is crucial to how this system behaves okay so let's take a look at a couple more examples the next example I want to look at is a crowd path following so this is just actually adding um there's not a lot to this one this is just adding separate to path following so you can see I can add a bunch more Vehicles here and what do we have here but just doing that just those two forces creates a very very Dynamic simulation because not only go back and compare this to path following without separation what we have is is something you could start to imagine modeling how people flow through a space how cars travel along the road again this is not a scientific model we're just trying to create the almost the illusion or feeling of that but you could imagine how um how powerful this could be by just adding multiple forces in here and and and and and altering it so this is another scenario where you can play with those weights and try to figure out ways of controlling them um what if all of a sudden their path falling goes off and they all go to seek something else but then they are they you know at every once in a while they leave the path and go do something else and then come back there's so much I can't I just I could just stay up all like the rest of my life program different combinations of steering forces and I don't I'm not going to do that because it's nice outside today but you you know you should think about that for when it's not so nice outside okay um now let's look at the the ultimate I say this is the pen ultimate the ultimate example of this which I was going to make a separate video about but I think we'll actually just look at it a little bit briefly because we already covered separation and Alignment in quite a bit of detail so let's just look at what happens when you combine um and I'm going to go to uh there's a sort of example here called flocking sliders which is just a version of the flocking example that allows me to control the weights so here we have our flocking simulation and we can see that we have this is full screen version with lots of little tiny boids oh so first of all Craig Reynolds went in in developing the flocking system called the vehicles now boids um is as a kind of variation of the word Birds I guess I think that's right anyway so I'm now I'm going to use the word term boy to talk about these creatures in this flocking simulation so what's going on here is we have the three rules so in case you didn't uh look at some of the earlier videos although I guess I should instead of saying that I should say or just a recap the three rules we have in flocking are separation alignment three cohesion and each one of these rules is incredibly simple on its own and produces a very simple obvious result what's amazing about this complex system is these rules for each object are very simple we put them together we put them together in a group we get a highly complex result not an an unpredictable result not a simple obvious one so separation means try to stay separate from your neighbors alignment means try to align your velocity with your neighbors and cohesion is the only one that we didn't Implement in a previous video mean steer towards the center of your neighbors so we have some like we have a tension here in a way between cooperation you could think of cohesion as cooperation stay together and competition separation compete for space so I think one of the things about complex systems that really makes them tick is this idea of competition and cooperation together in the same system so all of these three rules together produce this schooling like Behavior which we're seeing over here so a couple things that I will just demonstrate really quickly um you can't really see this but let's add a whole bunch more vehicles um up here I have a few uh sliders to be able to control the various forces here okay I'm going to talk through what I'm doing here and control some of the forces so I'm going to make the maximum Force higher a little bit lower maximum spe and I'm just going to show you first of all what happens when we only have separation so I'm going to make separation very high and we can see with separation the only thing going on here is don't run into your neighbor this is just exactly the same as the example we had before just all the little things are really tiny and there's lots more of them so that's separation that might be and now if I take separation off and I turn alignment all the way up you can see we get these clusters of objects trying to align with themselves again simple predictable result and eventually over time they're actually all going to move in the same direction now if I turn alignment off and I turn cohesion up we can see look these clusters come together they're trying to move towards the center and as they get within a certain range they suddenly come together this is kind of an interesting result just on its own you can see we have these kind of funny behaviors the point is once we combine them all together if I add a little alignment and I put separation back on and look at this like even now there's a bunch of different weights than what we started with and you almost have this more kind of frenetic insect like Behavior whereas the weights were more tuned towards uh more of a schooling or flocking like Behavior so this is something you can really really play with forever and and and use to for a variety of different effects and just to show you briefly so that's the um the actual example that's in the repository um connected to the book is 6.9 that you can find the one with the sliders as well which looks just a little bit more like this so you can see this kind of this is with a certain set of weights with a schooling like Behavior you can see it's alignment seems to be pretty strong in this one right they're really aligning with their neighbors but there's also a little bit of jockeying for space as well as I'm staying together as a group okay so one thing I want to point out so first I should say to you there's a couple exercises you could think about doing I had that list that I erased of all the forces here's something you should think about doing make a project that has every possible steering Force you can Implement have examples of or could Implement on your own and create an array of weights for all of those and see how you can um control those weights through some set of logic so first just try to control weights According to some set of rules don't have them hardcoded whether that's user interaction algorithmically through pearly noise or Randomness or by some logic according to how each vehicle behaves or what it's it sees in its environment another thing you might think about doing which I actually have an example of um is implementing well I don't have a full example of it but implementing Reynolds V so not Reynolds so if you read the book The computational Beauty of nature by Gary William flake I believe is the author um there's a long discussion of flocking systems in that book and Flake points out that what you don't see in Reynolds flocking system is all of the vehicle all of the birds or boyss in a formation that looks kind of like this which you might actually see in the sky if you look at birds flying together and he proposes what's what is unique about this there is nothing blocking the view of any of these vehicles and what he proposes is adding an additional Force additional steering Behavior which is that if a void is in front of you within your view steer away to get that vehicle out of your view keep your view clear and uh if you implement that you will get this formation which is really quite interesting so just to show you this actually involves the dot product and looking at the angle between two vectors and just to show you um uh the beginnings of that exercise 617 in the repository there's an example which implements just the beginning of that so the force is not implemented here the vew force but what you can see is um that any other vehicles that are within this blue vehicle's view um are colored red and one thing that I'll also say that's really important about these is you might be used to debugging your code by putting lots of print line statements everywhere when you figure out the locations print this if it's in it view print it's in my view another way of debugging that's really crucial for these steering Behavior like these scenarios that you're working on physics models is actually just draw stuff the screen so I know this is working because I'm able to to change the color of only the vehicles that are within this um Arc that I've drawn on the screen so anyway I've gone on a bit too long about this exercise but there's a bunch of stuff that you could try to do and hopefully um discuss somewhere when I when um someday these videos have more of a way of um sharing work and asking questions and discussing say with them right now they're just videos but there are comments anyway um so I will see you uh later in um whoa this is the last video so I think this actually marks the end of the steering Behavior stuff I I have some another example about optimizing flocking systems if there's too many elements in there which someday I will get to but you can take a look for those examples as well okay