hi so I'm here with another video about things that come up when you've got arrays of objects and those objects are things that you're drawing in the screen so the topic for this video is looking at collision detection dealing with collisions now I should emphasize there's two things that play here there's collision detection meaning are those two circles overlapping which they are right now and then there's collision resolution meaning what do you do when the two things are overlapping do they bounce off of each other and I'm going to really be staying away from the physics side of this I'm just going to when they overlap how to change color when they don't overlap have them not change color but the reason why this is so useful is you know it's not going to be too hard for us to do this with two objects but ultimately you might have a system where every object in the system is checking itself against every other object and I have an example of this this is from a set of examples called from the nature of code this is agent modeling all of these agents are moving around the screen and they obey one simple rule don't bump into your neighbor so every single one of these has to check the position of every single other one and move out of the way if they're too close so you start small with these two objects then build a scenario with lots of objects and look at what we how we can make something happen based on how far apart those objects are so let's first I think a diagram here would be helpful just to sort of look at first how do you determine there you are I mean you're it's a camera looking at me but how do I determine how do you determine if two objects two circles are overlapping or not so in previous video I looked at how do you know if a point is inside a circle this is actually quite a similar thing so if I have circle a and I have circle B and then I have circle a and I have circle B you can plainly see that these two circles are overlapping and these two circles are not overlapping so obviously to a human being visually it's quite obvious so how do you determine that with code well the there's only two key pieces of information that you need you need to know you know X a Y a X B Y B you need to know where is the center of each of these circles and then you need to know how far apart are they what is that distance between them because if the distance between them is greater than the sum of the two radii here's a radius here's a radius this radius plus that radius is only like a line about that long you can see the distance is greater than that it means they are overlapping if that distance right you can see here is shorter than the sum of these two radii you can see that it is because this radius goes all the way to here this radius goes all the way here if it's less than the sum of those two radii then they are in fact overlapping so what we need is a way of calculating the distance between a sermon hat I lost my train of thought there for a second we need is a variable to store the distance using the p5 distance function that I previously referenced between you know X a Y a xB YB now this I this is sort of like math notation I'm mixing it was kind of like code but we'll name our variables in a different way in the actual thing if that distance is less than you know RA plus RB I wanted to make an Arby's joke here but that's just i watch too much TV show I'll skip that nobody knows what I'm talking about anyway if the distance is less than RA plus RB then those two circles are in fact overlapping okay so this is the algorithm that you need I kind of losing my steam here and try to get some energy going and now what I want to do is look at show at least very first how do I put this algorithm in code so one thing that I've done here with this particular example is I've simplified for a bit so starting out this idea I think it's easier for us to look at not at an array of objects but instead simply just two objects so you can see I have object b1 an object p2 here's a bubble there's a bubble update both of them display both of them so what do I want to look at first I want to look at the distance between both of those objects so how do I do that I could say give me the distance between what b1 x b1 zwei and b2 x and b choose Y now another thing that I did is I've added a variable for radius R meaning this circles this bubbles radius it's 48 now remember the ellipse function expects a diameter so in the ellipse function here you can see excuse me I'm multiplying radius by two so if I'm going to use this concept of a radius in a math calculation that's something to do with geometry I better be consistent about what I'm doing so radius is 48 the size of it is 48 times 2 so now that I have that I can say if the distance is less than and let me give let me add some carriage returns here just so I can kind of look at this if the distance is less than V 1 dot R plus B 2 R then now do something what do I want to do maybe I'll say B 1 dot change color and B 2 dot change color right so this is the central idea first all I want to do is check the distance what's the distance between this objects X and that objects X based on that distance if it's less than they're two radiuses they're intersecting do something to them if it's greater then don't do anything right there's nothing in the else situation here so let's look at how what does this mean I just made up B 1 change color just just a bubble just automatically change its color because I say change color no this is something I made up I need to add that function to the object itself so I'm going to go back over here and I'm going to add a function called change color is a new function now of course I did this in a previous video but I kind of like lost it and I start over I should add a variable for color right so the let's give it a color to start just white and then when I want to change its color let me make a new random color and I'll just do three random values you can be more creative with this and something that you actually change its size or something else but you can see here now all I'm doing is adding some functionality to the object the object kind of display function it draws as an update function which moves its x and y now it has a change color function which gives a new random color to the object and when am i changing its color only if its intersect right now notice by the way if I comment all of this out let me zoom back out here and only call the change color function in draw as I might and I have all these extra carriage returns put those back right so now I'm just always calling change color we can just make sure that feature Weavin works okay so that picture didn't work why didn't work oh my god I think I made the classic blunder which I really should have done this on purpose but I actually didn't do this on purpose like I added this dot color and then added change the color why it's not changing so this happens all the time in programming you think like just because you put some stuff in there stuff should happen but I forgot a really crucial step and let's just cancel that right I added a color variable I even changed that color variable over and over again but look what's happening here the fill its 255 if you don't use again if the tree falls in the forest and there's nobody there whatever that is if the variable is initialized but you don't use it does it does it make us hound it doesn't change the color that's for sure so what I really need to make sure I do is add this dot color here so if you're going to add a new variable you better use that variable for what you intended to use it and I made that mistake and I forgot it so it's good that we check to see if that feature would even work first before we tried doing the intersection so now if I run this you can see they're just changing color like crazy now randomly if they would just spread apart a little bit come on randomness now look at that no oh wait of course they're doing it all the time I forgot so I forgot just testing to see if they would change their color I don't have that if statement in there yet so we could see that feature works so let's go back to the sketch and now let's add in distance let's add in this if statement and let's see what's going on here now they're not intersecting so they're not changing color now come on randomness come on randomness I got I like time lapse in this video oh they're so close oh please please please do this for me oh gods of computing random numbers I think I'm gonna have to just refresh get some new random numbers here there we go okay so you can see when they're touching they're flickering and flashing and now above hopefully they'll randomly spread apart at some point and you can see that they stop changing colors so this works now once again so we kind of have the basic idea here we know we can check the distance between these two objects and we could do something based on that distance so it could be map of force you know push them apart if they're close pull them together if they're far you know this is a whole other set of videos that we need to make about how to do that but at least we're seeing the basic idea there's two things that I think that could be done better here number one I think that we could take this idea of checking the distance between two bubble objects and put that into a function inside the object itself again this idea of object oriented programming like out here I don't want to mess with the wiring of the car there's no car the car is often the thing people use to talk about objectoriented programming right this I just want to say something really nice like if b1 intersects b2 then change their color right all of this distance calculation and all of that that's something that really should be inside of this intersects function I should add a new function to the object that can check if it's intersecting another object the reason why I want to add that is I might have a lot of objects I want to check intersection with a lot of other objects I want the objects functionality to be inside the object and conceptually an object should be able to know is it intersecting with another object it's not happening out here in the main program it's called out here in the main program but the algorithm itself happens in the object so I think this is good practice whatever you do whatever you want to code I don't believe that good practice nonsense but I think this will help and be an interesting thing to look at at least so first I want to look at how do we do that so that's step one step two is once we're doing with just these two objects how do I do it with a hundred objects so they already been going on for 10 minutes I've gotten got the got that like lay of the land here but I'm going to try to push through these last two steps in this video so first let's think about what this means so this is particularly tricky so I think I don't go over the whiteboard for a second like if I say b1 intersects b2 what does that mean like what am I actually needing to write so we erase this and I will say I said in the code if B 1 dot intersects B 2 so what does this mean intersects made it with an S is a function that you can call on a bubble object that means in my bubble constructor I need to write a new function called intersects this intersects equals function now notice how I'm passing into that function an argument what is that argument it's another bubble object so I need to send that value into the function so the function definition now requires a parameter what is that parameter some other bubble so I could call that parameter other so the nice thing about this is this should be a generic function that can test if this particular object intersects any other object so I could say if b1 intersects b2 or if B 5 intersects b7 or FB 9 your sex be 27 right and this can be executed with any two objects and then the function is generic this object checking the other object and what does this function need to do it needs to return true or it needs to return false based on what the distance between this object and the other object okay so this is the idea that I'm trying to now that I now would like to go implement I really want to stop and ask see if you have any questions but I can't okay so here I'm over here and so I'm going to take this is kind of like we know this is what works so I'm going to just comment this out though and come back over to the bubble right I need to add that intersects function to the bubble object so here we go and I'm going to say this intersects equals a function with a parameter other right so this function should check if this XY the distance between this XY and the other XY it's a general function for for all the objects can check if they themselves this intersects with another so I want to get the distance between this X this dot Y and other X and other dot y right this object is the object here that's being made the other object is the one that's being passed in and if that distance is less than this objects are plus the other objects are right then they are intersecting right this is that algorithm we worked out if the distance between the two objects is less than the sum of the radii of the two objects yes they are intersecting so return true return true otherwise return false this is very similar to what we did when we had a function in the object check if the mouse was being clicked on that object which preparing the distance between this objects X and mouse X Mouse Y now we're checking the distance between this objects X Y and the other objects X Y returning true or false based on the those radiuses so if I come back over here I now don't need this anymore and look at this program it's like just like the most lovely little thing it's just like two objects make the objects update display them and look at this it almost reads like English if b1 intersects b2 b1 should change its color b2 should change color notice how everything is really in the object so this is kind of the magic of objectoriented program you just have kind of like a macro view of what the program is doing here and the guts of it are in the object so if I want to change what it does I just changed this change color function if I want to change how the intersect test works I change that intersect function if I want to change how it updates itself I change that function we've got a really modular reusable program so let's make sure this still works and you can see they're white they're white now they're intersecting so they're flickering and when they go apart they don't flicker anymore that sort of thing okay boy are we trucking along here at 15 minutes so we really got far but I think I just got it like I should just wait to go to the next video if I'm just going to go right now so the next thing that I want to do is change this from only two objects to an array of objects and this is not the easiest thing in the world so what I want to do here is stop you stop you don't I'm going to do yeah I'm gonna do this in the next video I changed my mind because this is a good point to stop because if you're if you're like working with this I would suggest setting this up first with just two objects so get this sort of same thing working for yourself maybe do something besides change color change size play around with what this intersect test means like are you I could you'd like do if they just get kind of near each other like what you know what what strangely shaped thing what you have so try to get this working in the next video and to make us another video I'm going to change it from just two objects to an array okay and stop