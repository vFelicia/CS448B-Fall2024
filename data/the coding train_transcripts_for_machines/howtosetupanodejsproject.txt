All right, this video, I'm going to show you how to make a Node.js project and run your first Node.js code. You could just start right here, if you already have an environment set up with terminal and Node installed. If you don't, I just spent quite a bit of time talking through all the various things that I'm using on my computer and what some other options on Windows are, for example, that you could use. So you could go back and check that video. But I'm going to start right now. Let's just, though, make sure if you can type node dash dash version into your terminal window, if you see version 18.18.2, then you're in good shape. You don't actually have to use the exact same version I'm using, but you might like to. That way, we just know we're together in some sort of strange connection between us with the version of Node that we're using. So you might have heard the term runtime. Node.js is a JavaScript runtime. What does that mean? Well, JavaScript is a programming language that needs a context. It needs a place to run. Most of the time certainly, what I use it for is to run JavaScript code inside the web browser. In particular, I'm using the p5.js library. Maybe I'm using the P5.js web editor and making fun p5.js sketches and running that code in the web browser. If you want to execute JavaScript code on your computer outside of the web browser, you need something to run that code. You need a runtime. Node.js is that runtime. So, often, Node.js is thought of as a thing to write web servers. And that's what it is quite often used for, and I have video tutorials that do that. But Node.js is just a platform, if you have it installed, that will execute JavaScript code. And it comes with a set of functions, and packages, and things like that you can use for all sorts of purposes that I'll be getting into to make a Discord bot, for example. So one of the first things you could do with Node is open up a console to that runtime just with the command node itself. And I could just start writing JavaScript, like let message equal it's trying to autofill things for me. This works just like the developer console in the browser. I could say, hey, what is the value of message? So I can test out a lot of things, like, is 5 greater than 2? Yeah, that's true. So don't use this too often. But if you just want to experiment with executing some code that you're writing in real time in an interactive way, you could do that with the node command. To get out of this, I think I need to hit ControlC twice. The other thing I can do with Node is execute the code that's written into a file. So remember I created this choochoo.js file? I can open that up in Visual Studio code with the code command. And what does it have in it? A console.log. So if I want to run the code that's in this file, I go back to terminal, and I can type "node" and the name of the file. And it executed it and console logged choochoo.js. Why did I put .js there? It's like some weird, JavaScript Freudian slip. I meant to just put an exclamation point. Let's run that again. There we go choo choo! Now, more often than not, instead of just using Node for the interactive JavaScript console or to execute the code that's in a single file, you often want to create a Node project, which is a collection of files and packages that, all together, create something. A Discord bot will be the one that I'm going to do in the next videos. To make your first Node project, it is time for the npm command. So we had nvm, which I have now put away, shelved to the side. That was just for installing Node. We have node, which is a window into the interactive console or to run the code that's in a particular file. npm is Node Package Manager. [DRAMATIC MUSIC] It allows you to do all sorts of kinds of things to manage a package or a project in Node. The very first thing you might want to do is npm init to initialize a new Node project. But before I do that, I want to make sure I have a fresh, clean directory. So I could, through the finder, make a new folder. But why not use another Unix shell command make directory? That's a little bit of a longwinded name. You could do something shorter. I used dashes, just because didn't that's what I felt like doing. So I'm going to make that directory. I'm going to cd into that directory. There's something I actually forgot to show you. When you are working with directories through the shell commands, a dot or a dot dot can mean things. So dot typically means this current directory. But if I want to change directory and go back up one level, I can say dot dot. So if I say, cd dot dot here, that's going to take me back up to the desktop. And then if I want to go back into codingtrainnodedemo, cd the name of the directory, and if I want to open this directory in Visual Studio Code, I could say code dot for this current directory. Now, there's no files yet in the directory, so you see nothing listed under the File Explorer in Visual Studio Code. Let's make this folder into a Node project with npm init. Now, I'm going to hit Enter here to show you all the questions it's going to ask me. If you want to just bypass all those questions, you can do just y, which is just like, just say yes to all the questions. But let's take a look at them. This utility will walk you through creating a package.json file. So, actually, what makes a Node project is a file called package.json. You don't actually have to say npm init. You could just create that file. But this command is going to create it for me with, and it's going to make sure I don't have any syntax errors. So it's kind of a useful thing to do. So what is the package name? Eh, yeah. Yes, I'll hit Enter. That looks like a good name. What is the version I'm on? Well, sure, I'm on I'm just on 1.0 already. This is ready to go. I'm going to hit Enter. I could write a description, now, an entry point, which means, what is going to be the main JavaScript file? It's, what is the sketch.js for a P5 project, for this Node project? Index.js is a typical file name for the default JavaScript file. We can leave that. And I can just keep hitting Enter. I mean, these things are important in terms of who's the author, what's the license, and all sorts of things you might want to consider that you put into your package.json file. But this is not your only chance to write things into the package.json file. You can always change it and adapt it later. In fact, if I go into Visual Studio Code, I now see there is a new package.json file, and there it is. I'm going to be returning to this file a lot. Anytime I want to install some other libraries or dependencies I'm going to use for some other kinds of configuration settings for the project, you'll see me return and edit this file manually. But the npm init command is just a mechanism for creating it initially. Now, it says that the main JavaScript file is index.js. I could certainly rename it here, but why not just create a file called index.js? I can use this button here to create a new file. I can call it index.js. And, once again, I could put in just a console.log, just so I have some code that's working. Now, I have what I had before just a JavaScript file with code. But I have a package.json file that goes along with it, setting up the foundation for building out a larger project. Most of the time, if you're working in Node, it's because you also want to import a lot of other packages that allow you to get additional functionality, connect to a web service like Discord, all sorts of possibilities. There's a package called express that is for making web servers that I've used in videos. There's a package called canvas for rendering to making graphics in Node, like you would do in P5. So, briefly, let me just show you how to install and work with Node packages, and then you'll see this again and again as I work on different projects, like making the Discord bot. Your first stop might be the Node.js documentation. So on the Node website, if I go to Docs and, in particular, I want to look at the version 18 docs. And I can start to see there are lots of kinds of different things here that I could look at. I'm going to start with file system. So file system is a package, a library that you can use in Node to access the local files on your computer. If you want to write out a file, an image, or a JSON file, you can use the fs Node package. And you don't have to separately install it because it is a package that is just part of the Node system itself. But in order to use it, I need to import it into my code. Any Node package that you're going to use, you would typically write the import statement at the top. This is one way to do so. I'm going to declare a variable with the name fs. It's going to be a constant because I don't ever want to mess with this. It's going to be the name for whenever I want to access anything from this package. And I can require everything that's in the file system package and put it into this variable. The thing is, this is what is called a CommonJS module. This is the oldfashioned way of importing a separate Node package into your code by using Require. And previous videos that I've done, I used Require. I want to now show you the modern way to do it with an ES module. This line of code is now saying, import star, meaning everything. You're going to see later why I only want to import some particular functions or classes from a library. But, now, I want to import everything from the file system package, and I want to import it as the variable name fs. Let's see what happens when I run this code. Warning to load an ES module, set type module in package.json. So if you're going to, now, be like me and use ES imports in your Node.js projects, you need to make sure that the package.json file is set up in a way that will accommodate that syntax. You can also name your files, apparently, .mjs, but I categorically refuse to do. Somebody convince me in the comments that I should consider that as an option. Instead, I'm going to put type module into package.json. This is just a collection of key value pairs in a JSON file. So I can put it anywhere. And I've got to make sure I have the comma afterwards. And there we go. Now, let me try running this again. It worked, but I'm not using that file system package. Let me just show you a quick thing that I could do with it. [MUSIC PLAYING] I haven't actually tested this code. We'll see if it works. I think I got it right. I'm just showing you, oh, I could use the write file function that's part of the fs package. And what I want to do is I want to write a file called words.txt. And I'm going to create a string of text which has these words that are in this array joined with line breaks. And then I have a callback function for when the file is finished being written. Let's run this and see if it works. Console.log choo choo. Console.log file.written. Look, there's a new file here called words.txt, and look what's in that file. So, thankfully, I did write this code correctly. I happen to know about the right file function. But if I didn't, I could read through this documentation and learn about how it works. Now, there's a lot to the file system package. I did it with a callback. It also supports something called Promises. I used the synchronous version of functions. I've covered some of this stuff in other videos. It's beside the point right here. But what I'm trying to show you is that I can take a builtin package that's part of Node itself, import it into a variable, and then execute the functions on that variable name. More commonly and this will be the case as soon as I wade into the territory of making a Discord bot you will want to import a Node package that is not part of the Node runtime itself. The website to find all of these is npmjs.com. It's what we used to initialize our Node project, and it is also the command that allows you to install other Node packages that are hosted on this platform, made by people all around the internet. [MUSIC PLAYING] So, for example, let's say I wanted to make a Discord bot. Search for Discord bot. And, actually, the first one that came up, discord.js this is the Node package that I wanted to use. So you'll see in a video or two later me installing and working with this package. Another Node package that I think I briefly mentioned is canvas. It brings in a whole graphics API. I wonder if there's a way to work with P5 in Node. That's an interesting discussion that maybe we could have outside of the bounds of this video. But, canvas, I will also be using in a future tutorial to show you how to make a Discord bot that renders images from Node.js. Let's look at a package that I just learned about today called cowsay. Cowsay is a configurable, talking cow. Sounds perfect for us to use. You can see right here on the right are the instructions for how to install the cowsay package npm i cowsay. I like to type in the full word install, just to be quite explicit about it. But just i works fine. It's giving me a little information in the console about it being installed no errors, no vulnerabilities. I'm ready to move forward. Let's take a look now at what's in package.json. Look at this. There is a new property called dependencies. And inside the dependencies is the name of a package called cowsay. And the value for that, key, cowsay, is the version number. So any time you install a Node package, it is automatically added to package.json. You also might notice there's a new directory called Node modules. All of the code and other files associated with the cowsay Node package are now all inside of that Node modules directory. It's actually got a lot of other stuff because packages tend to depend on other packages, and they all start to install each other. You don't really ever have to look inside there. But as soon as you start working with other Node packages, that folder will be created and full of directories and files. I'll be showing you more about how to manage this and think about, what if you want to publish your code somewhere? What do you do with that directory? We'll come to that later as we get into some more actual project examples. But, now, let's just look at, how do we import in our code the cowsay package and use it? Well, your ability to do so is only as good as the documentation. So I've actually not used this package before, so I'm going to try to just look at the documentation and see if I can figure it out. That's kind of what it's like to be out there in the wild working with Node packages. Generally speaking, I like to look for something that's maybe published a little bit more recently, that is actively maintained. I like to also sometimes take a look at the associated GitHub repository. And I can see, how actively is this being maintained? Is there active discussion, recent commits? But I'm not worrying about that too much right now because I'm just trying to use this just for fun, just to demonstrate the idea. So, sometimes, Node packages can actually be installed as global. I will come back to that in the future. I didn't use the g I am not interested in having the oh, I mean, I am interested in it. But I wasn't thinking of this as demonstrating how I could now have the cowsay command universally available to me on my computer through terminal. Instead, I want to use it as a module, meaning I want to import it. Oh, but I don't want to use Require. I want to use an ES module, this new way of doing it. It's not that new, but I'm trying to keep up with the times, man. Ah, import star as cowsay. Now, I've imported that. Now, this you might notice says Typescript, so we're going to glide right by that. This is not a video about how to work with Typescript. So I'm going to look down for some more documentation usage in the browser. I'm not using it in the browser, but this code will show me plain JavaScript, which is what I want to do. It looks like there's a function called say. Let's comment out all this other stuff about saving the file. So I think the way this works is I call the save function, which is part of the cowsay package. And then I give it an object with a property called text and whatever I want the cow to say in this case, moo. I think that's right, based on my quick reading of the documentation. Ah, OK. I think I expected that to console.log something. But, of course, it's not going to. It probably returns something into a variable. Now, let's console.log that output. And let me use constants. This is not a variable I intend to change. Let's see what happens now. Hey, there we go. We got a nice little ASCII art with the cow saying, moo. Fantastic. This is also useful, now, for me to show you, you don't always want to import everything from a particular Node package. So, here, I imported star as cowsay so I could access everything that's under the cowsay package as this variable name, like the say function. But I could import individual functions one at a time into individual variables. So instead of importing everything, I can import the things I want in between curly brackets from the particular Node package. And, now, I don't need this anymore. I can just call the function say that I imported from cowsay. Still works. Apparently, there's other things like think and squirrel that can import. But I'll let you investigate this particular Node package yourself. What I'm trying to show you here is that you can both import packages that are builtin with Node by looking at the Node documentation, like file system. Or, depending on what the needs of your project are, you can find a hopefully wellmaintained and friendly Node package, install it with npm install, and then import the functions and things you need, as long as you put in "type module" into your package.json, you can then do that and run the code and make use of that particular Node package. When you install them, those dependencies will be here, also, in package.json. Before I go, I should also mention that it's quite rare for me to actually begin a new Node project from scratch with npm init. Usually, I am downloading an example Node project that already has a package.json and a bunch of things configured for it. I'm downloading it and building on top of that. So let me show you how that works. For example, I'm teaching a class right now where we're making guess what Discord bots. I made an example Node project. I put it on GitHub under a repo called Discord bot examples. Now, of how you download this repo, whether you're using GitHub Desktop or terminal commands, that's outside the scope of what I'm doing here. But it really does strike me that I need to fill in the gap and maybe do another video that fits in here to look at some basic Git and GitHub commands. But what I'll do right now for you is just show you that, what happens if you just found it and wanted to download it? I can do that by clicking Code and then Download ZIP here. Let me unzip it, and there's a whole folder here called Discord Bot Examples Main, which has a Node project right here. You can see there's already a package.json file, but there's no Node Modules folder. That's important. When I publish this example to GitHub, I don't want to include all the Node modules. It would make it a huge, giant thing to download. I just want my custom code. And the expectation is, when you download it or me, in this case I'm going to now install those packages. And that's what I'm trying to show you here. So first thing back into terminal. Let's cd up a directory. I'm on desktop. What was it called? Discord Bot Examples Main. I already had a folder called Discord Bot Examples because I've been doing this a lot of times. But let's just go into the DiscordBotExamplesmain. Let's ls that. We can see now, I happen to know that the Node project is actually in this subfolder called 01discord.js. It's my intention that this repo would eventually have multiple Node projects in it as different examples. So let's cd into that directory. Let's open this directory in Visual Studio Code. Now, there's a lot of stuff in this directory that I haven't explained yet because I'm essentially going to build this example as a set of tutorials following this video. But let's look at package.json. One thing you'll see here is that look at the dependencies canvas, discord.js, and dotenv. These are very important packages that I will be working with. And before I can do anything with this particular example, here's a very common error you'll get. Let's say I try to just run the Node code right now. It's going to say error module not found, cannot find package discord.js. That is because the project depends on discord.js. The code is doing imports from discord.js a lot of other things, too. But there's no Node modules folder with those dependencies installed. So what I would need to do, you might think, is say npm install discord.js. But that will only get me so far. If I download example code that is, a Node project already built for me to work on top of all, I have to do is type npm install. What npm install will do is it will look in package.json. It will see what the dependencies are and install them. I got an error. Why did I get an error? So this is pretty unfortunate, but, in a way, I'm super glad this happened because this is probably going to happen to you. I didn't expect to get an error. But look at all this stuff. I can see, reading through this, that the error is related to the Node canvas package, and it's having trouble building and installing it. So first thing, let me just just for demonstration purposes take that out of here. So if I take this out of here, pretend for the moment that this project didn't depend on canvas, and run that again, you can see no problem. It installed just fine. I can go back to here. I can see there's a Node modules directory now, and it has all the various things like discord.js, dotenv, and other things that it depends on. I'm putting it back. So it turns out that for this canvas package I don't know why I'm covering this in this video. We'll come back to it later you need to have some other stuff installed on your computer for it to work, namely, this other thing called cairo. And, in fact, if I go over to the GitHub repository and look at, under Wiki, under Installation Guides, under Mac OS X, there's more information about other things I need to install that are here, which I just did. And then, now, if I do npm install, everything works. So I didn't want to make this about how to install canvas. I might come back to that in a separate video. But I'm sort of glad this happened here. You can run into issues when installing Node packages that could be based on compatibility or other things that have to be installed or your operating system. And you've just got to do the detective work of reading through the documentation or find a helpful and friendly community that could try to help you out. I hope that The Coding Train can be that for you. You could certainly ask in the comments here, but those don't always get seen, so I would suggest joining The Coding Train Discord, which is at thecodingtrain.com/discord. And if you have questions and need support for figuring out how to get your Node project set up, how to install any dependency that you want for your project, feel free to ask and try to get help there. But, now, at least, I think that I have covered how to create a Node project from scratch with npm init, how to use Node modules from builtin ones to ones that are just part of the npmjs.com ecosystem, as well as some examples of where things could go wrong. So, next up, guess what? I'm going to be doing this again, starting with a fresh, new project to build a very basic Discord bot. If you want to keep watching, I'll see you there. [MUSIC PLAYING]