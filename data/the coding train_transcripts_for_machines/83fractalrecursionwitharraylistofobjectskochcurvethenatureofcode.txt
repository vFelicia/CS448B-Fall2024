in this video we're going to look at the cotch curve and ask ourselves the question if we're using recursion to generate a fractal pattern what if we want the parts of that fractal pattern to move or change or animate or do something after that pattern's been generated if you go back and look at the previous two examples we made it wouldn't be so easy to do that the recursive function just kind of draws all that stuff to the screen and it's just there we don't have access to all of those positions but there's a way that we can do that let's first start though let's use a diff why not let's use a different fractal this time and we're going to use the cotch curve so the cotch curve has uh is has has some similarities to the caner set which we just looked at um the cotch curve which can be used to make nice little snowflake patterns incidentally is we we also start with a line start with a line so here's our line now what do we do we also the next step is divide the line into thir so the same thing we divide it into thirds this is just what we did with the caner set but now what do we do we erase boy this looks really the same erase the middle third okay I get my Eraser here erase that middle third and then the last thing that we do though however is connect middle section there's probably a better way to write this with an equilateral equilateral triangle so this is the last step what do I mean connect the middle section with an equilateral triangle what does that mean it means right we could imagine an equilateral triangle sitting there where each side is the same length of that third but we're not going to use the bottom so we're going to connect it like so so I guess connect the middle section with this sides with two sides of the equilateral triangle so that's our production rule we went from one line and at the end we got to this and what do we have now we have four lines what do we do with each one of those erase the middle third erase the middle third erase the middle third erase the middle third make and I didn't do this very well but make an equilateral triangle make an equilateral triangle make an equilateral triangle make an equilateral Tri go hey let's do that again erase all that we have 1 2 3 4 5 6 7 8 N9 we could do that over and over again this is a fractal you could figure out you could go look at that caner set example you could expand it a little bit and do a little more math and you could be you could have the cotch curve but we want to do something slightly different what if we now want all the pieces of that cotch curve to move what if we want all of these line segments essentially to be objects objects that could have physics after all we spent all this time figuring out a lot of physics stuff we might as well figure out a way that we could apply it to a fractal shape not all scenarios do you need this certainly if you're doing a print design and you just need a static fractal pattern through some recursive algorithm you could make it but this is an important consideration that does come up in a lot of different scenarios so how are we going to do this and I call this because I've come up with lots of fancy names the array list technique um okay so what do we mean by this array list technique what's the difference well let's say for a moment that we had an array list ah and we're back that we had an array list uh that's the other camera I'm G to have to fix that that we had an array list and inside and we have also we have a line object a line object maybe just has a two P vectors A Star start and an end so we have this line object and it has a start and an end and we have this array list and what do we do is that we put that line into that array list we make a line object and we put it into the array list the recursion isn't a function that calls itself it's going to be an array list that iterates over itself so this is the array list we can say at generation zero in a way at the very beginning what do we start with we start with one line object and now we say hey in this array list let's take this line object use its start point and endpoint and figure out what are all the points for the next line object and then we have one two the array list suddenly has four line objects in it and it's now at generation one then it's going to have 16 line objects in it if I did the math correctly it's at generation two whatever the state of the array list is we're going to iterate over all of the elements and for each element in the array list produce four new elements and I the way that I drew this I'd like to draw it a slightly different way remember when we did if you go back and look at the cellular cellular automata videos we had this idea of a of a generation and we're going to do the same exact thing we have an array list which is essentially current and it might be represented by this singular line and then we're going to have an array list which is next and we're going to use that line to generate the next array list which will have four line objects in it and then that becomes the current one and we could do it again and again and again okay I hope this is somewhat clear um so I I but I have no way of knowing other than my own sometimes in accurate intuition but let's take the next step forward and look at this in the actual code and see if we can understand it a little bit better ah okay Darkness sadness light happiness okay I'm back camera was off so first let me just run this and we're going to see it in action so here is the first line right and notice here what do we have we do have a cotch I called it a cotch line right a cotch line object which has two P vectors start and end okay and now if I go back to the main tab we can see hey what are we doing we are making a cotch line first at Z comma height minus 50 and then at width comma height minus 50 we add that to the array list and then hey there's one line let's display it and there we go just that one line now notice also that um in there's a key press function right here which calls a function called generate so when I press a key there you are that's the camera when I press a key look I generate the Next Generation I took those that one line and somehow turned it into four then I took those lines and turned each of those into four again and again and again and I could do this to Infinity but you can see there's a limit to the kind of resolution we have here and how much look at this interesting kind of quality that we've got already this giant arrow whoa um okay so we can see that this works Works we're getting the fractal pattern we could imagine that there's some math involved in how do we take that one line and turn it into four but rather than look at the math let's actually look at the guts of this generate function and see if we can understand what it's doing so here is all that code and I want to talk through it in a moment but first of all it looks a little bit like gobleg so let's kind of clear up one aspect of it look for every line get points a b c d and e and make a bunch of new lines let's see if we can make sense of that for for a second right if this was our original line and this is what we're going to get right this is start and this is end and what do we need to make these four line segments we need all of these points so we need to calculate a b c d and e and we can call this I don't remember what I said in the code uh A B C D and E okay that's all I did so we need to get all how many points is this five points if we have start and end how do we get all five points and then we can make a new cot line that's between a and b and a new one that's between b and c and a new one that's between c and d and a new one that's between D and and all of those line objects should go into our array List look that's exactly what's going on here for every line we know when we started there's just one but for every line let's ask each line object where where's your A B C D and E points then let's make a line from A to B A line from B to C a line from C to d a line from D to e and add those all to the array list next next is the new generation lines is the current generation but once we make the Next Generation the Next Generation becomes the current generation right that's what we're drawing we're drawing all the current lines so when we start current lines is one line then we generate we make the next array list with four lines and that becomes lines and we see all four of those there okay so this is the process again it would be worth digging into the math behind getting all these points but that's not what I'm concerned with right now I'm concerned with this overall process which I think I've kind of covered well I was going to say one more thing about it but now I forgotten okay so so this is um what's going on so let's actually okay sorry let's just briefly pause and take a look at how those points are calculated because I think it's it's something worth looking at you can see that some of them are quite simple right a point a is exactly the start Point e is exactly the end and if we go back into the code we can say A and E are quite easy point B is not that hard either right point B is just hey it's a point 13 of the length from the start sorry 1/3 of the length from the start that's point B and we can see here we're just using reviewing our old Vector math days we make a point from but we make a vector that goes from the start to the end we divide it by three and we move from the start and that's that location so you can see C is a little bit harder what do we have to do is C we have if we're here we can make this Vector we can rotate this Vector 60° and then move from here to there and that's that point right the angles in an equilateral triangle if you don't remember if you make a triangle each side being equal each angle is 60° maybe I didn't want to go over this math stuff but I just kind of talking you through it very quickly you can see that's what's going on start at the start divide by three go to there then rotate that vector by 60° and then go from there so again the part of this process of making a fractal pattern is kind of mapping out the shape and seeing if you can figure out how to turn that shape into vectors so that you can subdivide move along get to this point that's what we're doing but okay so I just wanted to briefly point that out whoops but back to back to this so why did we go through all that trouble after all all I have on the screen is my static fractal shape but we now have if I go into this if I zoom in every single one of these line segments is an object and I know it's beginning point and it's end point I could grow flowers from there I could suddenly put characters at all those points I could have them all wiggle and move around let let's try that right what would it mean to add a function here right the cotch the cotch line is a start and an end first of all I could start adding physics I could add velocity I could acceleration I add an apply force method but we're not going to go that crazy all we're going to do is we're going to add a function I guess I'll do it towards the top which is just called Wiggle and what I'll do is I'll say hey give me a random velocity a random Vector which I'll consider a velocity and then hey add that velocity to the start point right so that's wiggling and I'm only wiggling the start point you know you can wiggle the end point will probably be more interesting looking but let's just anytime I wiggle I'm just moving that start point and okay I can't resist let's get another random vector and let's also wiggle let's also move the end point so what we're doing is we're making two random vectors and adjusting the start and end location so now if I go back to the draw and if I want to say hey when the mouse is pressed let me also Loop through and Wiggle all the lines so right here I'm just adding a little bit of code that anytime I click the mouse whatever lines happen to be the array list move them around so I could run this sketch and it's not doing anything different it's exactly what it was before and I could also run it but I could also click the mouse and look this line is kind of moving it around once that line moves around I could go a few more gen ations and look those lines can now move around but I could continue doing the fractal and those lines could move around so we've kind of completely we haven't completely lost the shape of the fractal but it's gone a little bit arai but and now we have some like weird Randomness and maybe I could wiggle it but actually remember which objects end point is actually the start point of the other object which would be super interesting there's a great exercise for you to try um but this is the power of what we're doing all these fractal shapes that we've created if we make the parts those broken parts that are approximate the whole shape if we make those objects in an array list then we can start to apply things to them or know all the positions to generate things from those locations there's lots of things we can do all right I think that's the end of this particular video um I've got two more things to look at one is what happens if we want to translate and rotate in the process of making this fractal shape it's kind of interesting and also I want to look at this concept of an L system which is a recursive algorithm for generating um sequences of characters that can be instructions for drawing so those are the two other things we'll look at um soon enough uh okay