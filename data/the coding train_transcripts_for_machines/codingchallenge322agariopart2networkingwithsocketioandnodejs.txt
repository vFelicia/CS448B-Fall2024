hello welcome to part two of the agario coating challenge in this challenge I am going to attempt to add networking so this is where I last left off obviously this is not the fully formed game agario it will not be by the end of this video but it'll give you a lot of the tools and Basics if you wanted to recreate it but hopefully you're watching this to learn about how to do some of this stuff and invent your own idea anyway so this was what I had before I had this sort of like world that I'm in that I can move around and I can start eating other little dots so but now what I need to do is take this this is a oneplayer version of the game there's no uh all the dots are just created randomly I need to make a version where if I launch it in one in a browser and you launch it in another browser we're both seeing each other in each other's canvas so I'm not going to start from the very very beginning with this because I do already have a playlist and set of tutorials about node and websockets so I'm just going to show you the uh that tutorial makes this example see how this in this canvas I am drawing a little pattern here um I'm going to refresh that because really what I want to draw is a nice rainbow that's the worst rainbow ever drawn in the history of time but you can see as I draw here it shows up over there as I draw here you know it shows up uh on the other screen so what is the um what is the uh um schematic what's the diagram of the things that are happening here there is browser instance one that's a browser there is browser instance 2 and in this case both browser instances are on my laptop and that's how I'm going to demonstrate everything today but certainly the idea here is that I could be playing this here in New York and you could be playing it in London or in Rio or in Tokyo or in Istanbul whatever any city that you could think of around the world I don't know why those cities popped into my head but they did so um and then there is is a server which is written in node.js and the canvas the game itself is written just in using p5js client side and what's Happening Here is there is communication these clients don't talk to each other they both talk to the server and when one talks to the server I can send my position to the server and the server can then send my position back to the other one so I think this is the way there's a a lot of different ways you could probably implement this I think what I'm going to do is have each client drive around its own world and broadcast its position to the server and then the server will broadcast the positions of all the other clients back to all the other clients so they can draw those other clients in their own window that sounds a little bit like loopy loopy but hopefully it'll start to make sense once we start to program in okay I'm going to come back over here and this is where I have the code for both of those projects so this is this is the code for the first agario example and this is the code for that sockets example um that does the shared drawing canvas so now what I want to do is I want to grab there's this public folder right here this public folder is where the client side code lives so what I'm going to do is I'm going to take the agario folder and I actually um I want to leave this I'm going to I'm going to do something a little weird I'm going to do uh canvas I just want to be able to refer to this code I'm going to put that in a different folder and I'm going to take agario and put that into here so now you'll notice um uh the node server is running uh on the port 3000 so if I type Local Host 3000 it's like I don't see anything but now if I go to Canvas you'll see this is that program and if I then go to agario uh that didn't show oh because you know why it didn't show up no let's check oh agario one I forgot that I called it agario one there it is there so I'm just now my node server is serving both the shared canvas client code and the agario code and that's useful to me because right now I want to be able to um pull pieces of the code from the shared canvas into agario so I can um uh so I can uh get not have to retype all that socket code from scratch okay so now let's go back to Adam and what I want to do is uh so I'm not going to adjust the server at the moment this is all the code for the server and again it does the sort of basic stuff of setting up a port listening for connections spitting something out to the console when somebody connects and then there's some messaging stuff the messaging stuff is all going to have to change the messaging stuff is what is happening uh for the shared canvas drawing I'm going to have to change that but what I want to do is I really want to look at the Cent Cent code so I want to look at uh the canvas sketch and I want to look at my agario sketch so I have both of these open I have the agario sketch and the canvas sketch and what I want to do is add a socket first I want to add a socket variable and uh and then I want to uh connect I want to connect when the sketch starts to the server so this is the basic idea the first thing I want to do is add a web socket to um add a web socket to my agario code now I'm missing a piece I believe because now I believe if I were to run that we're going to see an error message where it's like IO is not defined so I actually in addition to that I need to uh make sure I actually access the um sorry I'm in the wrong place I need to make sure I actually access the socket Library as well so I can access the socket Library by referencing a link to socket.io in the index.html so I'm also going to take that and go to the agario index HTML file and add a reference to the socket.io library and now you'll see there we go and if I look back at the server you can see we have a new client so I'm going to uh restart the server and I'm going to refresh agario and you can see this agario sketch has now connected to the server great uh okay so now we've got step one we've got the sketch connecting to the server are you guys with me here are you with me please be with me um I'm very happy and that's really like just an exciting moment just to have a connect so let's look now what one thing we've really got to think about is I've got to look at my agario code now this should go away notice how I had this bit of code at the beginning that just makes a whole bunch of blobs but there's no point in making these random blobs anymore the blobs should only actually exist if they're actual people playing the game so I am going to get rid of this in addition when I connect I should in addition to just connecting create a new instance of a Blog the server is going to have to keep track of a list of all the clients that are currently connected and I think we're going to have to figure out some way of giving those clients an ID number and there are probably some very clever and sophisticated ways I could come up with assigning IDs I might just to get started use a counter 0123 so we've got something that's going on here that I want to just think about here the server needs to keep track of list of connected clients this is data that the server needs to keep track of and that list is essentially going to be mirrored in the client as well and then the server is just going to update the positions continuously so when I go back to the server code right remember now it's very tricky to keep track of what's the server what's the client especially because they're both written in JavaScript there's a nicity to that but I'm going to go back to the server and what I want to do is add a variable so I want a variable at the top and I'm going to call it blobs okay so that is all of the blobs that are currently connected okay okay and I think it would be useful probably to create a blob object a little unsure about this but let's let's do this for right now what if I create um I don't know if I really need a Constructor function but let's just do it just for the sake of argument a blob has an x a blob for the a blob has a y and a blob has an ID so I don't know but in other words that list should always be keeping track of what's the blob's ID and where is it so I'm wrote a Constructor function just in case I need to use it but I'm not entirely sure I do just yet because I'm just doing this on the fly so when we have a new connection oh the socket gets an ID what a one I have an idea why don't we use that and we might end up using like some kind of like hasht thing where we look up where we look up the client in a list based on its ID there's so many things we could eventually add to this we'll see but basically at this moment when we have a new client what I want to do is create a blob which is a new blob object with socket. now I don't know how I'm going to get the XY position just yet so we'll figure that out later I'm just going to type in z00 right now and then I want to say blobs do push blob so in other words the moment that someone's connected we then have a new client now I think that actually to the truth of the matter is even better I have now have an idea maybe there the client should in addition to just connecting send a message like start so maybe there should be right because can I get um when a user socket uh okay hold on I have to think about this um when the server gets a message called Mouse does the do we yeah yeah yeah uh yes we should get the particular so we should still have access to that so socket ID so let's let's try something let's say there's a message called start and the message that comes in is uh rece uh is datax data doy and I don't want to broadcast that back what I want to uh I want to leave that so what I just want to see is I what I want is for and I want to see uh socket sorry I'm figuring this out as I go it's hard to like talk it through and do it okay this is what I want to do I don't actually want to create the blob the moment the connected I mean the I want to I want the client to explicitly also send an additional message because here what I want to do is is make a new blob object and have the client send in its XY position so let's now go to the client's code and here what I want is to send bro how do I send something ah I need to go back to my previous example which uh this is how I send something to the server so I'm going to grab this code and go back to my agario sketch and I want to send into the server uh right the server is going to make oops the server made that uh I lost a little bit of code there sorry sorry sorry let me get that back socket. emit so and I want this to be start so I want the data to be blob. X blob doy and by the way the blob's all need a size so does the server keep track of the size does the client keep track of the size I guess they both do for right now they're both going to keep track of it so let's make a size uh which is I think blob. R I assume um which by the way can I just emit The Blob it's going to have all this other stuff in it so I I'm going to do this right now so there's definitely a way I can clean this up right so essentially what I just made this blob object and then I make this data object which is what I'm sending I can clean clean that up in a bit but uh okay so I make the blob object and just to be sure it's R yep and then I want to send that so let's see if this works let me go back to the server code and I realize what I'm going to get I in addition I also want the blob to have an R to keep track of the size and I want to see that here as well well just to make sure it's all coming in and make it with a data. r so there's a lot of redundancy here but this should give us the basic idea right if I restart the server and I now refresh the client we have connected I got undefined undefined so I got the ID and I got 64 why did I get undefined for the x's and y's so I'm going to have to debug that where's my debugging music someday else have it um let's look into this so where where are things being sent oh I bet you I know why so the blob is actually using vectors so it has a position Vector so instead of um uh uh there when I'm sending the information I actually need to see blob said blob. p.x blob. p.y so now if I were to refresh this and see we can see now the client connects and it sends its ID it's X and it's Y and its size so just to make things kind of have a little variety right now what I want to do is I want the The Blob to send in a random location and a random size and the size will be smaller between 8 and 24 so let's refresh this again and uh and interestingly there's a zoom thing happening because um everything's based on having a size of 64 but that's fine I'm not going to there's that thing where we're zooming I'm GNA just leave that b for right now um so whoops I went to the wrong place and we can see that uh you know it's very hard to debug in node because now I'm printing out these floating Point things we're getting all these values but you can see the stuff is in different places so this is really good right we both have a uh we we have now a client who connects who gets a unique ID and who broadcasts its starting oh I'm attached here who broadcasts its starting X and Y and size okay here we go let's keep moving everybody I'm excited we're getting we're getting to this uh so okay so now here's the thing every time through draw the block updates its location so what I think we need to do right now is update the server sense of where I am so what I need to do here is now say in draw I want to do this again but I want to emit an update message so I could probably combine these two but in the beginning a start message means I'm a new blog and now in draw I want to update my X and Y location continuously now latency and scale and all that are going to be complicated questions we're going to have to deal with at some point or maybe I won't deal with it but you will have to deal with it but this is kind of getting started right uh the chat um someone writes don't forget uh don't forget to delete Blobs of disconnected clients which I'll certainly have to do at some point okay so now what I want to do is in the server I need whoops sorry I have too many things open I'm going to just go to the server in the server code I need to deal with another message so that's the start message and this is an update message and I'm going to leave this in here and now instead of instead of um in instead of creating a new blob and putting it in the array what I want to do is find the blob with that ID now I'm going to do this in a terrible way I'm going to do this in a brute force method of just looping through the array to find the correct blob later I would love to improve this by using kind of like a Dictionary lookup um but I'm going to just to have the Simplicity of having an array right now I'm going to just leave it this way so uh which is I'm going to start with a blob called which which is the one actually I'm just going to say VAR blob and then I'm going to Loop through the length of that array and I'm going to say if blob. ID oh sorry if a socket. ID equals blob's indexi do ID right I want to find the blob who has the same ID as the socket then I want to say blob equals blob's index I and then what I just want to do is update the location so I want to say blob .x equals uh data dox blob doy equals data doy and blob do again I could certainly improve this and just copy the object or make it the same object but for Simplicity I'm say blob. R equals data. R so this is essentially here now updating that array so what I'm doing now is as the blobs update their location the array keeping track of where all the blobs are gets updated as well okay uh now I don't need pause. X here this is I this is accidental because the way that I programmed it maybe you could do this in a different more better way but I'm using a vector in the client but I'm not using a vector in the server uh Vector object that is okay so uh let's see what happens now when I restart the server and I also do this we should see now you can see here the you can see that the location is moving continuously and it's just I don't know it's going down let's see if I move let's see if we can I can like move into the client to see it now it's going back up so we we're not seeing anything move right because it only moves that it's drawn um relative to itself but you can see that this is actually working on some level and I by the way I'm going to have to put some you know constraints around where the blobs can move to okay uh so we're good we've got now every blob and you can see now if I were to connect a second one you would see here and if I kill the server for a second we should see I only see one ID so let me try that again let me hit refresh here and we hit refresh here and there should be h I have a new Cent Oh okay hold on there's an error here cannot set property X of undefined so I got some sort of error uh ah it must be oh the if I don't restart the server no we did get two client so this is I I really have to always just restart the server because the server's got this persistent uh list of clients and if somebody connects uh and then can't find that um can't find that in the list we're going to have a sends an update message so restart the server so you know there's some cleanup here I need to do um but I don't know why I'm not seeing more than one uh client message um I am back after some debugging which I realized aha browsers will play tricks on you sometime notice I'm only seeing the updated location of one client it's not because it's not working it's because my browser is actually only showing me client and the other tab which is hidden has gone to sleep this is a smart thing because why update an animation in a tab you can't see but if I pull this tab out and make it visible now you can see that I have both of them showing up as they're both neither's asleep so this is something I just have to keep an eye on as I develop uh things further so okay so I'm going to put this back I'll I'll pull it out or just actually close it I'll pull it out later when I need to so now we need to add a feature there's a problem here which is that um uh I'm letting these blobs just go infinitely off into like an infinitely large space and you can see its location currently is um its location currently is like negative thousand, something so I need to put something in the code to constrain them to a fixed space in the screen and the uh I could be um there's a lot of ways I could do this but I'm going to just do it in a really uh I'm just going to write a blog bl. constrain and in the blob object I'm going to write a function called this. constrain uh and I'm going to make that blob. dox equals constrain blob. dox zero and width uh and actually I'm going to say negative width to width and I'm going to say uh y negative height to height and because it's 0 I think is technically the center the way that I've written this if you remember from the previous tutorial so again I could make a bigger world I could make a smaller world I could make it a flexibly sized World depending on how many blobs are there but I'm just going to do this and this should give me a nice now if I refresh this you can't see me moving but if if I look at this location at some point I don't remember what the size of the window is I think it's around 600 uh you're going to see that it sort of stopped at 600 so this is really useful because as I'm testing it I don't I want to be able to see things within sort of like a similar World okay so now what I want to do what I want to do now aha so I have everything working I have a server which is receiving information from clients each client having its own blob that's moving around the screen what I'm not doing is broadcasting back to the the clients where everything else is so oh boy I'm realizing there's a big complication that's going to arise in a moment but it's okay we're gonna we're gonna we're gonna get through this together be in a happy place figuring this out but what I'm at least want to be able to see a step two here I want to see somebody else's blob appear on my screen I want my blob to appear on their screen okay so here we go let's figure out how to do that what I need to do is I need the server to do broadcast and if you look uh if you look here um I'm trying to think of the best way to do this to start um let's go back to the the the sorry the server code or have I I think the server code I've destroyed it I need to go and grab sorry uh so what I want to do is what I want to I just want to create a I want to create I'm trying to think here I want to think that I want to do is create just a heartbeat that every so often the server sends a list of all the current blobs in their location so I am going let's go back to the canvas example which I uh sorry I lost my original code let me find it ah let me find it this way uh uh sockets uh server so what I'm looking for is uh this io. sockets emit sorry I could have this was what I want to do is I'm going to write a function called set interval and what I want to do is have have a heartbeat function happen every I'm going to have it once per second now just to make it really slow to update and I want this function heartbeat to emit uh heartbeat uh I call it a heartbeat I think that's a common word in networking like it's like your heart is continuously beating at regular intervals this is something that the server just going to do at regular intervals and what's it going to do it's going to send out the full list of blobs and actually right now it's just going to send out hello so I just want to see and I I I just want to see a message I want to see that I can get the client to receive a message from the server every second okay so let's see how that works so I'm G to go back to the client code and the client code I need to go back into the canvas and see I I need to add this uh this on method I want to do something when I receive that heartbeat so I'm going to bring that in and I'm going to put it in setup and when I receive the heartbeat I just want to say console.log data so I just want to see that message come in okay so now I've added a heartbeat to the server and a heartbeat to the client so let's run this again let's run the uh client and we should see hello hello hello hello hello server is sending that now let's change the server to do something else instead of sending hello I'm got to go back to the server let's actually send that array let's just put the array in there let's see what happens if we just put the array in there we might have to stringify it I'm not sure but let's just put the array in there and see what we get oh that was a loud noise um okay uh so I'm going to restart the server and I'm going to to refresh the client and object object let's look in object there it is it's an array with uh so it's actually sending it as an object which is terrific you can see the ID R so I'm actually getting all this information in the client now bear with me here let's connect a second client and a third client and a fourth client and let's look at what that heartbeat looks like now I got to go look look at this an array of four things there we go all four things right there so what is it that we want to do all I've got to do now is Loop through those four things and display them on the screen the server is sending me here's where everything is here's where everything is here's where everything is oh this is wonderful so let's go ahead and do that so I'm going to add to the client code um where's my client code so many different things here it is I'm in draw uh okay so here so I need an array oh that array blobs I already have it I'm going to say blobs equals data so that was an array and then what I'm going to do is I'm going to say for VAR I equals zero I is less than oh I have that there so funny that I have this here already and I was going to backwards but I I they're not actually blob objects boy I'm just going to draw just to see that they're there I'm just going to draw an ellipse blobs indexi dox blobs indexi doy blobs index i. R * two and I'm going to draw it and I'm going to make it a different color and I'm going to say uh let's just make it like a blue or something so we see it as a different color so let's just see how that works there we go look those are the other blobs and I can kind of walk around and try to find them those are from the other clients and I could go to the other client and I could try to find probably presumably I have to refresh I could find the other blobs now one thing I might like to do is actually display the ID is that's going to kind of um kind of help things I don't know what's going on there if new blobs are connecting continuously uh let's just see blobs do length whoops there we go yeah I don't know why I have so many um so I there's some debugging that I've got to do here uh seven no it's right I guess I have seven tabs open do I have oops do I have seven tabs open I can't keep track uh you know what though the server hasn't been restarted and I've been doing all sorts of crazy stuff so in these kind of cases it's generally good to start over so let's just do two blobs and see if things are working so I'm gonna oops and I went to the wrong server the wrong project 3,000 here we go Okay so back in I'm drawing myself and I'm drawing myself only once per second so as I move around uh it sort of looks like I it's like I I'm still drawing myself in a previous historical location so that I'm going to fix as I stop drawing myself which I need to do so one thing I want to do is I want to draw the blobs with their ID so let me just for a second see if I can make that happen really kind of quickly in a in a like a not so awful I'm going to say Phil 255 text blobs index ID and then I want to say blobs index i.x blobs index i.y plus r blobs in uh index i. R time uh three let's have it appear below and let's say text align Center am I getting the ID yeah okay oh way that's not so let's make the idea a lot smaller I think probably the uh window yeah uh text size uh 12 and uh the times three was unnecessary uh okay so uh I want to see uh let's make this six what's going on with text size okay that's kind of what I wanted to do so I just want to be able to see quickly the ID below each of the blobs okay we're getting somewhere we're getting close now here's the thing I want to not draw myself there's going to be a third part to this clearly we're getting pretty close and I'm going to release this code and you guys can kind of get further on your own and I'll come back and do the third part at some point but the couple things I want to fix here number one is I want to uh I want to know my own ID and not draw myself so I need to have um in this particular uh sketch my own ID and I would like the uh I would like to send from the server a message just back to myself now um so when I send this first start I want in server to um I want the server to send a message back with the client's ID like the client needs to know its ID so the question is how do we in uh how do we use uh node websockets to send a message only to this particular ular client and uh it's probably something like socket. emit or something but I'm just going to look this up uh Set uh node uh sockets send message to one specific client uh so here uh so uh so how do we do this you have to grab the client ID uh and we just say io. client session ID uh. send let's see if that works um uh so let's see if this works like what if I then say this and so I want to say uh uh socket. I wonder if the client has this built in somehow does the client have this built in somehow let's look at this oh look there's the ID look the client already knows its own ID isn't that wonderful so I don't need to send it back the client knows its own ID now why does the client have to have it as um without the without the extra slash a number but that's fine we can work work that out so what I want to do here now um so I don't need this what I want to do in the client is I want to when I'm drawing them I want to only draw them if the ID is not my own ID so uh I want to say as long as blobs indexi doid does not equal uh socket. ID but the problem with that is is blob's ID has a couple extra characters at the beginning so I'll just do this I can just chop those off I think with substring substring is a method that will give me a part of a string and if I go back to the sketch and look please don't move around uh you can see that there are there are just two extra characters 01 so I want the substring to start at two um so I want the substring to start at uh two comma uh and let's just uh let's make this simpler let's say VAR ID equals blobs indexi doid and then I can say um id. substring two to the length of the string so I want to make a substring from the second character all the way to the end uh and as long as that's not the case then I can draw that particular blob okay so let's see here so we should be good in that um well there's a whole lot of blobs now we can see that I can find other Blobs of varying sizes if I kind of poke around the screen but I am not drawing myself um so we're in pretty good shape here let's let's change a couple things first of all let's restart the server I think that we can now in the server do a way with this console.log that's happening over and over again as everyone updates itself and we can um what we can do is now really test out two particular clients so to do this what I want to do is kind of divide my I'm going to get rid of the I want to divide my wi screen in half here and I'm going to to uh just go to have two windows open that aren't connected yet to the server then I want to run the server connect this one to uh sorry agario one and you can see there's a client connected then I want to connect this one to agario 1 and there's another client connected so we can see what their location starting locations are and I should be able to now move around and try to find it anybody anybody where are you other blob okay okay I am back okay so I'm gonna um just uh console.log the blobs X and Y position uh so I can take a look at that and the other thing I was going to do here is only say if Mouse is pressed then uh update the location so I'm actually not going to move a particular blob unless uh unless you click the mouse so what I want to do is I need to find terminal again this is going to help me debug so I'm going to kill the server I'm going to uh re hit refresh which uh we'll make it so that it doesn't actually connect uh and then I'm going to restart the server I'm going to start one blob and it's saying undefined so hold on I need to fix that uh blob. p.x blob. p.y uh so let me refresh again uh you can see okay so uh and that's now showing both of them uh so hold on I'm got to restart the server and refresh this okay so you can see here this particular blob has shown up at this location 150 comma 24 and let me make this a little bigger there we go and now I'm going to go to the other blob I'm going to start a new one oops and you can see there it is so now I want to move this blob a little bit whoops uh and let me see if I ah and that worked there we go and it the the thing is it's only updating it's only updating once a second uh and so I can move closer and you can see ah okay so let me fix that this is totally working by the way uh but uh let's kill the server again I'm going to make this look a little bit better so I should I don't know what's reasonable but I'm going to have the server have its heartbeat um 30 frames per second is and uh um and there's a th000 milliseconds in 1 second so let's say let's have the heartbeat happen every uh like 33 milliseconds let's see if it can handle that so I'm going to restart the server and I'm hit refresh here and I'm going to take that out and I'm going to hit refresh here whoops I'm hit refresh here and we should see now as I move and let's get a third one going let's get a ah this I'm going to get a third one going and one more come on you can do it agario there we go so we can see here uh if I were to move around uh they're all responding to each other we've got a multiplayer kind of beginnings of a multiplayer agario here so okay everybody this is the end of part two I don't know how long this video was or if it was at all understandable or useful at the very least you sort of saw how difficult this is and the and I will release the code for what I've got so far so there's a big missing piece here which is that I've got to check intersection and figure out what to do actually uh add the game mechanics where you when they intersect the bigger one eats the smaller one the your game the smaller one's game is over maybe you can start again there's a lot more steps to add to this but this I think is going to get you a little bit further as you can see the sort of basic mechanics of having a server keep track of a list of everyone connected have the clients Implement their own motion physics update their location to the server and if the server send those new locations back to the clients so that they update so you know there's a question of you know how do you deploy this what would happen if you suddenly had 100,000 people playing this all at once is node and websockets going to support that but you can sort of see the basic ideas of how you can have this more sophisticated networking multiplayer networking um working um so um thanks for watching this particular video uh this was part two and at some point I will release a part three which I do a few more steps although it might be a while before I get to that thanks again