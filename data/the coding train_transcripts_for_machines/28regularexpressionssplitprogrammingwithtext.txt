hello in this particular coating rainbow video I am going to show you how to use the function split and replace excited or what split and replace to do some very common operations that are gonna be needed for lots of examples I'm gonna make in the future in JavaScript with regular expressions so whoops oh this camera is off but I could turn it on and Here I am so what are these functions these are both functions that if you have a string you can call split and it takes one argument which is a regular expression or you could call string dot replace and it takes another argument it take replace takes an argument which is a regular expression followed by a string or oh my goodness oh my goodness oh my goodness oh my goodness function so replace is gonna be his splits gonna be very simple for us to look at I'm gonna look at it rather quickly and I might sit in a different video look at replace and look at how you can actually pass in a callback function so while the regular expression is matching things it's triggering a function which allows you to implement highly sophisticated logic for how you replace text within a piece of text I'm just gonna show you the basics of it but I hope that you will go and make all sorts of weird and strange creative experiments by you know mashing up and replacing text so let's first look at split so the scenario that I want to look at is I have a web page it has a little text box and I want to take that text box and whatever is in that text I want to split it into an array of words an array of tokens this is very very common in the flesh index example that I talked about in a previous video I looked at okay well how do you take a text and split it up into an array of words or an array of sentences or what about an array of syllables so this this idea of splitting a text into tokens chunks of text is very commonly something that needs to be done so let's just look at it very briefly here in the console I'm gonna say unicorns and rainbows and cupcakes that looks good to me so what I'm gonna do is I'm going to say s dot split and I'm going to pass in a regular expression now what goes in there what's the regular expression that goes in there well let's say if I just say backslash s what does that mean now the regular expression is a regular expression in order to match a delimiter so whatever the rate expression in the delimiter is the thing the the character or the sequence of characters that marks where you should split the text up so notice that look what I get I now get an array that has unicorns and rainbows and cupcakes I split it up by all the spaces now let me do something let me do something and let me put a comma right here and what I'm gonna do is I'm going to call that split function again and I'm gonna and look but look it's and comma so what if I want to split by a space or a comma so you know watch out what if I do this comma backslash s look at this my array only has two things in it now because I split by the sequence together of comma space which only appears in the original string and comma cupcakes so if I want to replace by a comma or backslash S or space or a white space then what I want to do is put that in a character class so any comma followed by oh it's now not not any comma followed by space a comma or white space and now you can see uh that was invalid syntax I forgot the knot there and let me just put that up higher for you so you can see it again you can see and now look what happened here what did I get here why this so I got a little extra empty space between the that that's between the comma and the space because I'm actually splitting that so here's a way that I could fix that think about it how could I fix that I want to split not by a comma or a space but by any sequence of com and spaces so in other words if I put a plus here now a valid delimiter is a single comma or a single space or comma space or space comma or space comma space comma comma comma space right so now if I do that look at that I lost that little extra empty thing so essentially if what I want to do is split a text into words and I can go into my code here and I can say all right now what I want to do is I want to say words equals s dot split are and I'm gonna make this a separate variable R equals a regular expression with I don't know a comma period exclamation point question mark or a whitespace any number of those so if I do that and if I do create P words and I do submit you can see it now you can see that this worked now let me do this let me actually I think it would make sense for me to write a loop here and I'm gonna do something a little bit different I'm gonna say create and I'll show you why I'm doing this in a little bit I'm gonna say create span words index I submit now look what I got I got it's clearly split into words and you know actually just to just to show you that this is an array I'm to say create P I'm gonna get into the create spam thing later so you can see this this worked and I think it would be useful also just to see that array in the console so I'm going to say console dot log words and you can see there it is so now I split this up now what makes a good regular expression to split by words or to split by sentences you know this is up to you to figure out I mean interestingly I could say well what if I just want to split only by periods question marks or exclamation points now in theory what I've got is hmm what did I split by oh I didn't get a period in there now I've got every sentence so I split the text up sentences so you can see there are different ways that I could choose to split you know I could split by this is gonna seem weird but by any sequence of capital letters and now it's just split anytime there was a capital letter so it's up to you to sort of figure out what's the best sequence what's the best thing to do but but a but but I would say thinking about one way to split a text very sort of quickly and easily up by words is to say split by anything that is a non word character and so there's certainly flaws to this but remember /w is any number or letter slash capital W as anything else so if I do this you can see this is a nice way for me to get all of the words in the text in a big array so there's okay so there's one other aspect of this and I'm gonna do this as a coding challenge in a bit but I want to mention it to you what if I wanted to split this up but actually retain the punctuation like look what if I wanted to know still in the array that a comma comes after reflection a period comes after arc so there's a little secret trick here which is that if in the regular expression if I use capturing parentheses if I put capturing parentheses around the delimiter regular expression then those des limiters that are that the text is split up by are saved into the array so let me show you what I mean by that I'm gonna run this again and you can see look at that right here there's an element a comma is saved you know this the period is saved the spaces should be saved too but those aren't showing up just in the way that I'm that the the text is being rendered with HTML but you can see that they're here in the array themselves all those spaces and this is going to be really useful the coding challenge thing I'm gonna do in a couple of videos from now is show you how to take a text split it up and then interact with each word separately by clicking on it or hovering over it and I'll show you how that how that works okay so in the next video what I'm going to do is show you not just how to use split but how to use replace with a regular expression okay thanks for watching