welcome to a multipart coding Challenge series on kinematics this is an example from processing processing a Java based platform open source creative coding environment that I use in a lot of my videos this is an example by Keith Peters from coding math of the coding math YouTube channel which are also highly recommend I believe that Keith Peters has some video tutorials on the exact same topic with and if you're looking for the video tutorial where it's somebody who really understands the math and doesn't make any mistakes I recommend that video that gel so just go leave and watch that channel but you can see this is an example called reach 3 and what you can see is that there's this bouncing ball moving along and that there's this kind of tentacle thing that's just reaching out trying to touch it trying to catch it and then move along with it and it behaves in this very I might say robot arm like fashion so this is an implementation of something called inverse kinematics which refers to the motion of a connected segments from the front to the back so the front is what's really controlling it it's trying to reach and how should all these other segments be oriented so that that front can get as close as possible to this target versus forward kinematics which is like you know I'm going to move this how should the rest of my arm move when I move this part of my arm which is different then well I want to inverse which I need to move my hand how does the rest of my arm move in order to get there so I want to do both of those things with the goal of thinking like a swimming fish or a weird goopy tentacle thing really the goal of like showing how these things work and then you making someone that's creative and colorful and exciting and lifelike and crazy and weird or beautiful or whatever so let's get started let's look let's so this video I'm gonna do forward kinematics and then I'll do some other videos so I'm not sure yet so let me move over here and let's discuss what the core stuff that we need to build into our code is so we need so the idea is if I think of it as tune segment but I need to have these I think I'm going to call these segment objects so I'm going to have segment objects that almost as if they're connected with a joint now by the way you could probably do a lot of this using a physics engine like box2d and a revolute joint which I have other videos about but I'm going to do this without a physics engine just kind of with the raw trigonometry math that we need so the idea here is that I have a segment in every segment would have a kind of starting point and we'll call this point a which is an XY point it also has an end point which I'll call B which is also an XY and one of the crucial pieces of data that I'm going to need is this angle so first all I want to do is create one segment with an angle change the angle and a length sorry would keep the distance between these two points is the arms length of segment blank so I want to discrete one segment with its a and B points and an angle and I want to be able to turn it let's just do that to start so to do that I'm going to get out of this example here I'm going to create a new tab and I'm going to call it segment I probably think of something better but segment I think is a good and actually that's probably from Keith Peters example I'm sure that Millman clay Chur is used there so to make a segment class and what did I say each segment needs it needs a big start point and a a I'm going to use a P vector object to store an x and Y for that point it needs a B and use that's its end point it needs a length which is the distance between those two points and it needs a angle which is the angle now here's the thing now what I'm realizing if I go back to this drawing is really the information is a length and angle B is the point that I calculate based on how that angle is changing and this relates exactly to this idea of polar and Cartesian coordinates and I just made a separate video about that if the trip what solar entities and coordinates are I would find a link to that video in this video's description but the short version of that is if I have a point here and I have an angle and have a distance the length of radius from here to here I can get this point by by by saying R cosine of theta R times cosine of theta and R times sine of theta will give me the how far we move along the x axis and how to pardonable on the y axis to get to here so those Hartman's I derive an explainable in a separate video that you could look at ok so if I come over here what I'm going to do now is say ok what when I create this segment what does it need well you can get an x and a y like where is it and it can get a length and so I'm using just different variable names for the parameters that get passed in and it can get an initial angle so what I'm going to do now is I'm going to say a equals a new P vector at XY lengths equals whatever length we specify and the angle equals what a variable we specify that's pretty good and then what I can do next is that we just write a function called show where I'm going to draw it as I'm going to say stroke 255 stroke weight 2 or 4 and then I'm going to say line from from ax a dot y to be X B naught Y okay so now the idea here is I can say something like segment seg four segment seg segment is a new segment and maybe I'll have it start on the left hand side of the screen and point to the right so it's going to be at something like 10 comma 200 with a length of 50 and an angle of 0 and then I want to say segment dot show so now I have this idea of a segment it starts at you notice but if this is my canvas it starts right here at like 10 comma 200 it has an angle of 0 and the length of item Marissa so I should see something like this on the screen now I've missed the key stuff here I just it on purpose but let's let's just see what happens to that a background and now let's run this okay I got an error I got a nullpointerexception so what does no pointer exception mean by the way null pointer exception means you're trying to use something whose value is actually no and so you can't use it the value is no nothing sad this boy fads dullness let's let's get it out of being null and the thing that's null is not a a is a vector B was never calculated so like I said being is a thing that you calculate based on where a is what the angle is and what that length is so I'm going to write a function I think I'm going to write a function called calculate I don't know this probably enter name for this calculate B update and something like that so I'm going to do that calculate B and so how do I do this now I could do that math all I need to do is say hey DX the change in X is the length times cosine of the angle and the change in Y is the length times sine of the angle and then B is a new P vector which is X plus DX y plus dy so I now have a I start ax a dot Y so I now just calculate what is the change along x and y from a based on the length and the angle and then give me that new P vector and if I say now in setup in the in the constructor calculate B we now see there it is there's that segment with an angle of 0 now let's let's see if this is really working let's change the angle to and I need to work with a unit of measurement called radians so I find if I just want it to be 45 degrees or negative 45 degrees converted to radians now it's pointing up so we got the idea this is working I have one segment yay now okay so what's the next step here hmm I need a break I'm going to keep this like okay what's the next step here Liz there's a few different things what is really we should see maybe we should make that angle change so I'm going to write a function called I'm going to say in draw I'm going to say uh let's let's leave that to later actually I was thinking like we would use curly noise to make the angle change or just have it turn around that type of thing but I do kind of want to move it a little bit over and maybe make it a little bit longer so let's do that okay so now what I need to do is I need another segment I need another segment that connects to that segment hmm let's think about this do I want to enjoy but it also needs the segment's to have an awareness of which one they're connected to so actually first let's add something the segments need to know the segment's are going to need to know who they're connected to and I'm going to call that a parent so this particular segment idea so this particular segment that I made has no parent the parent is null but I'm going to make a new segment that's connected to this one like I want to say segment segment two I really want an array but I'm going to do it this way just for a second I going to say segment two is a new segment and I'm not going to give it a position I'm just going to give it a parent right I want to be able to say I sometimes want to make a segment at this exact location but I sometimes just want to make a segment that's connected to another segment so there's two different ways of making a segment and guess what in Java which processing is you can have two different constructors you could just write both of them so the second constructor is going to be just like the first one but instead of taking an X Y a length in an angle it's going to take another segment I'm going to call that up harren and a length of an angle so it's a position is actually so first of all its parent is not null its parent is equal to its actual parent right the one that was assigned and its location where it is is what this segment location a is that the exact location where this segment location B is so all I need to do is say its location a should be at parent BX parent B dot Y okay so that's another way and then the rest is the same length angles calculate B okay so this I think is good and now I'm going to say segment to say go to show hey look at that and it's angle is also 45 well let's give it a different angle just so we can see let's give it an angle of 0 looks like there's our two segments now here's the thing I haven't really connected these things like one of the things I want to do is I would like the what if I just wanted them to spin so what if I put them more in what if I put them in the center and so that's that should be in the center and I'm just going to say I'm going to write a function called like update where I say angle equals angle plus 0.01 just so it rotates kind of slowly and I'm going to say segment 1 update is that too slow so one of the things it's doing it the angle changing but guess what whatever the angle change I need to recalculate the end point I don't see anything because I haven't updated I haven't calculated B so any time I change the angle I need to recalculate its end point so the angle changes recalculate its end point now let's run this again there we go but that other one is not moving it's not connected to it that's no good right I need to say that I need to say basically like if I have a parent when I update myself if I have a parent our parent is not equal to null then what I want to do is and then what I want to do if pair is not equal to null sorry I like thinking about this what I want to do is get my angle okay couple things first I need to set a my point a is equal to parent B copy so that's by the way another way I did this here like I just made a new vector from parents at B so another way I could do this actually that's a little bit more less code to write as I could say parent B copy which just makes copies of function as part of the P vector object that copies it so I could always update by making saying that and then I can now now I need to update both of these so now we can see that they are both that that is connected so as one turns the other one is connected so this is really forward kinematics yeah I could do someone in the chat is saying I could say child not parented and that's actually a very good point but you know I just thought of it that way probably because I somebody else implemented it that way so you know notes that might be a good improvement maybe I'll double back and kind of see if that's a good refactoring but encourage you to try that as your own exercise to use to create a child rather than a parent and so now what I should be able to do by the way is yeah because when I iterate over them I guess I could start at the last one but if I had a child I could iterate forward through them so now you can caught me but I'm going to keep going with the way that I'm thinking about it and let's see if I have some time at the and I'll refactor it okay I'm actually going to keep the parents thing but I think this idea of having child references versus parent references is something that is worthwhile considering here's the thing though I just realized this is kind of working in a way that it's supposed to by accident and so one thing I want to do is I'm going to I want to segment out this idea of it wrote of the angle changing from it's updating based on its parent so I'm going to just I'm going to write another function I'm gonna call it like wiggle or something or another like yeah let's just call it wiggle because eventually I'm going to have the arms wiggling maybe and so that that's where the angle changes and then I want I'm going to call update separately so because I want to show you what's really going on here because what happens if I only wiggle segment one and it's not wiggling it's turning you can see that it's actually that segment is always keeping it's not it's not it's not moving along with it realistically it's always keeping its original angle pointing to the right so one of the things when you update in forward kinematics as I'm moving forward from arm to arm from segment to segment to segment I always need to bring the parents angle along with me or pass the angle from the parent to the child so that happened accidentally because I was rotating both of them equally but once they're rotating in different ways that won't work anymore so what I want to do here in addition to a update just pulling in the parents location I also want to take my angle and offset it by the parents the parents angle is that enough that all I want to do let's take a look at that No oh that's kind of interesting though so this is this is way off as you can see because I'm accumulating all the time I want to pass off the parents angle but just as an offset to whatever its own angle is at really doing so in a way I kind of need two variables here which is I need it to do its own thing and then always just add so you need to calculate its own angle based on some something that it's doing which ironically I think if I and then add so if I just said angle equals if I just start with angle equals zero and then add the parents angle oh I think that I think the issue is actually that I do need to it the issue is actually that I'm going this rotating the arm thing is sort of not that necessary because I'm going to calculate things in a different way but I do need two variables self angle and parent angle yeah so what I need is yeah yeah okay okay okay okay I need its actual angle and then I think what I would do is I'm going to say a self angle I'm going to create a variable called self angle that's a good suggestion self angle and I'm it I'm sure there's it easier there's a slight cadets way of writing it but just the way that have created this example I'm have self angle start at that same angle and then angle is always self angle is the thing that I might have some algorithm to change it and the angle itself is always so what I'm going to do is angle equals self angle right everything that's updating takes its own current angle as itself and then adds on there we go adds on the parents angle I think this is going to work there we go so the angle is zero and this is exactly what I want it's zero relative to whatever its parent is and now if I actually gave it instead of you know also negative 45 degrees we can see now it's moving in there we go this is what I want so this this angle turned what the the parents angle turns and the other angle updates whatever its own angle is relative to the parents so they can accept independent independent calculations for calculating their own angle so now what can I could start to do some interesting stuff here so for example I can say segment 2 dot wiggle and that one is going to rotate itself along so it's rotating relative to the other one now I don't really necessary have something that interesting here they're both just rotating and this is literally very similar to my solar system example where one bigs rotating around one thing and other things rotating on another thing but I think where you get something much more interesting if we use a sine wave to rotate them or purling noise let's try using Perlin noise so I'm going to add a I'm going to add a variable called X offset which is just going to be some random value and I encourage you to go back and look at some of my curly noise tutorials it's probably noise is a smooth randomness and then in wiggle I'm going to say self angle equals the noise function I'm going to map noise of X offset which has a range between 0 and 1 to like between negative 1 and 1 and those are some arbitrary angles and radians and then I'm going to increase X offset over time so now okay so that's too fast so we can see here now I have this kind of arbitrary moving almost like wiggling tentaclelike phase so now I have this wiggling tentacle and I kind of mostly done with this idea forward kinematics but I want to improve on this a little bit so I very least this is not great this is not a very sustainable path so what I want to do is either create an array or some other mechanism and actually I think I'm going to try doing this without an array so I'm going to and I'm going to use kind of a concept called a linked list where every object is just linked to another object and I can iterate through them that way so I'm going to create a something called tentacle I'm going to make my variable called tentacle and tentacle is a new segment tentacles a new segment that's that starts at 300 200 with a length of 100 and radians of negative 45 so now what I'm going to do is I'm going to say for int I equals 0 I is less than 2 I'm just going to add two segments to it segment next okay so hold on what I want I want I want to say something like books say clips hold on I want to take something like segment current equals tentacle okay then segment next equals a new segment whose parent is the current one and then the same thing length 100 let's just do angle 0 and we're going to start this with an angle of 0 2 there's no reason to to have that anymore okay so and so the next segment is a new segment attached to the current segment current being the tentacle which is kind of like the root and I could call this route if we're seeing about of a tree and then I can say current equals next so what this will do is say I have a segment attach the new one to that then make that the current segment so the new one attaches to that so I think this algorithm should work and I should be able to just say now I could just say tentacle wiggle tentacle update tentacle show what this should do is I run this it's working but I'm only seeing that root one the root segment I don't see the one that's attached to it so what I can do now is I could say segment kurz I can use the same thing equals I'm going to call it next actually because I just for this look as a segment next equals tentacle while next is not equal to null then I can wiggle update and show it and then I can say a I could we'd all update and show it and then I could say next equals next dot oh wait I have to go backwards this is why people were telling me to use parentchild so how can i select add child I'm going to have both let's add and you probably don't need both but I'm going to add a child reference as well so this is like a that called double linked list where they're linked forward and backwards so what I'm going to do here is when I'm creating them next is the new segment and then current child equals next so I'm also going to link it that way and that way now as I iterate through stem I could say next equals next child so I dig it a little bit awkward way maybe so in other words okay this is hard to keep in your head but let me try to say it again I'm starting with and actually it might make sense by diagram this but I'm starting with the the root note the root segment the first one I make a new one that's attached to it and its parent gets that current one and the current one's child is the next one so they're both linked to each other and then current becomes this although I knew once I linked up with the same parentchild relationship so that I think should work and now I can iterate them I start with the root and I wiggle and update and whalen update going from iterating through it eventually one of them will not have a child right because it next index it will be no so I should I should say just here by default it's no because at some point we'll get to the end but some way in this loop we'll get to the end and then it won't come back and so the last one won't have that child so as long as as long as it's no okay so this should work yeah there's all three of them okay all three of them wiggling with their weird curling so let's make this a little bit more interesting let me think about let me I kind of want it to feel more like a tentacle from the bottom so I'm going to give its initial location with divided by two and the height so at least it's kind of starting from the bottom there but now I need to think about how that range of angle so the range of angle should actually be between around around a negative 90 degrees right but because that's pointing up so I want to offset that so that the what I'm mapping to is like it looks the max angle is something like negative pi divided by 2 plus you know 1 and the min angle is negative pi divided by 2 minus 1 so I want to map the noise to max angle mid angle I have a feeling like a sine wave might actually work better than this and now we can see okay we can see what it's doing up okay it's got a pretty broad set of possibilities in terms of its angle so let's make this let's make this like a quite a bit smaller oh wait why is it what did I do wrong here oh because oh I don't want them high we want the first one pointing up the rest are all relative to the ones below aha I don't know why I decided I had to do this like kinematics thing so let's actually leave it at 0.1 negative point 1 I'm just going to do something kind of like hacky which is to say if it doesn't have a parent if it if it doesn't have a parent I just want it to point up because I want the whole thing to point up I'm going to say angle plus equals negative PI divided by 2 all right so that should yeah so instead just has the first one pointing up but the rest point to the left and the right okay so the quick little fix and now I can make this much much bigger of a range and the other thing that I really wanted to do here is I can make a lot more of these so let's make 20 of them and let's just make the segments like 10 pixels long and so now we have this wiggling tentaclelike thing with curly noise I don't know what it's going to do I kind of want the range to be bigger you know this is the kind of thing that it can play with forever so let's make the range bigger and let's maybe have the offset we know would be interesting to do here I have a weird idea which is to have the offset move a little faster yeah so we can see this now I don't know what this is crazy creeping up why is the first one did I make the first one it's still I still have 100 dots so let's make this one 10 right so we can see here's my crazy creepy tentacle arm thing that's a little one trying to do but there you go that's forward kinematics let's change it to a sine wave just to see what we get so instead of using purling noise I'm going to map a sign between max angle and min angle let's try that okay and that's like way too much so let's give that much smaller angle so we can see now oh and they're all starting so actually what I want this is I'm getting ridiculous here but let's all start them with this yeah so this actually if I give them a perfect sine wave it's just going to curl onto itself but if those sine waves are slightly offset from each other I've got it off the rails here it's the Train is be revealed for sure but let's let's let's make this a little bit more interesting what I really want to do is add this as a parameter to the segment so I don't want to just have them all be 0 or all be random let me show you what I need I want that X offset which I'm using essentially I think in decoding math YouTube channel I know that to use used a variable called stays which is kind of what I don't know if that's right though but it's like it's the saying that you're passing into sine or cosine alpha think of it as time so let me use let me use a t4 time and I'm going to add another argument here and I'm going to set T I'm going to do this T equals T and I could I could really improve the weight of these constructors are I could combine the constructors and that's in a probably in a in a better way but so let me just let me just add a limb l last argument here where now each of these each of the descendant always gets its time that that the thing that you're passing in to sign and always whatever to set the angle and what I'm going to do is I just pass in 0 here let's pass in 0 for all of them and we should have the same exact thing except for I want to call this P now and T moves up by a certain amount ok so now you can see this is what happens when I have the sine wave there we go because people in the chat are asking what his goal I have no idea this is by the way a way to think about creative coding it says it's a stream of consciousness improvisational I don't know where I'm going I'm just playing around it I really should stop sneeze now so okay because I'm kind of off in the weeds here but I think there's an interesting aspect here that I could do so now everything starts at 0 but what if the phase we're going to use the word phase here maybe or I can just say T actually T equals 0 T goes here and then in this loop I say T plus equals 0.1 so what if they're all just slightly off phase from each other now you can see I'm getting a sort of more a bit of a different kind of quality to this now it's very much of an exact repeating pattern so I think if I also changed you know not only the period of these oscillations must be not sorry not only offset the where they are in terms of their oscillation but change their period which is a frequency so that's that's this variable here ok I'm going to stop now and I'm going to let you I'm going to let you guys play with these ideas but I would I have a suspicion that if you mess around you know look what I did sine has a range I using the range of output from the neues function which is absolutely not correct the sine function has a range between negative 1 and 1 so that's why by the way it was going so I think I'm getting close to this swimming fish kind of quality too as well so I kind of want to put the pearly noise back in also now that I have this ideas I'm being slightly offset from each other so let's put noise and we can see who we can see I kind of got this also this wiggling quality to this to it and I kind of want to make the range a bit wider to see what the sort of possibilities are so you can see I think that you will probably come up with a more creative way to make use of this forward kinematics idea and you know it'd be really interesting to now put an array of all these across the bottom or you know map them to the F this would be great mate you could make a creature like a circular creature that has all the tentacles attached to the edges of it and it kind of Wiggles along like a centipede try to make a new no in the chad is saying trying to make the segments go shorter as they reach the tip and that's certainly an interesting idea let's try adding that really quickly so right now the segments are all so I could do something like float length equals 50 and start with that here and then I could also shrink the length so I could say like length equals itself times 0.9 so there's like 10 percent shorter each time okay let's make them half as long each time so you can say let's make them 75% as long each time so you know I'm not making it obvious to see how that is because I'm not drawn I could make them different colors but you can see there's a lot of variables you could play with here so I hope that you enjoyed this forward kinematics coding challenge and in the next video ever do is do the reverse of this where I actually am starting where I want the end to be and how does the rest of it behave okay thanks for watching and see you in the future video