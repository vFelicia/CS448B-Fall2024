this video now is going to focus on removing elements from an array list what happens when an array list gets too large or there's certain elements that are in the array list but we don't need them anymore we want to delete them from that array list so that our program can run smoothly so an example of that is is right behind me this is where we left our sketch off that we have this empty array list that we initialized and set up and now what I added to it is every time through draw a particle is added and this looks like hey that's the particle system example we wanted to make we're done all it is is adding a new particle every time and draw and then saying hey all of those update and display them but here's the issue this array list is getting larger and larger and larger we're adding and adding and adding particles to it we're never deleting them so we need to figure out how do we delete them so in order to figure out how to delete them this is going to cover the last two methods of array list that we that we care about so let's take a look at that list right we already circled it because that's this is the second time I screwed it up the first time around but um we are uh we are looking at remove and size so what we want to say right now is hey let's just start with this simple uh way of doing it if the array list gets too big delete some elements out of the list so how do we first say if the array list gets too big well within a regular array we know we can say that array. length will give us the SI the length of the array with an array list we call the method the method is called size so that's sort of an easy thing to do we can actually just say something like if a do size is greater than 100 right now do something if the number of elements in that array list has somehow exceeded 100 this will happen very quickly if we're adding a particle every frame what do we do we need to remove an element from that array list so the remove function deletes elements from that list what do we have to tell it we have to tell which one elements in Array list are in an array list are indexed just like in a regular array so if this is kind of a representation of our array list and we can sort of think of there are like these particles floating in each slot and each slot has an index if I ask if I say to remove one a. remove now which one should I remove I could say let's remove zero or one or two it doesn't really matter but in this case what I'm going to actually do is say remove zero I want to remove that first element from the array list why because when you add elements to the array list they get tacked on to the end so you can see this array list sort of drawing is expanding with slots for particles it gets bigger and bigger each time we add one if we take away the first one that's the oldest particle so in this case I'm saying it's gotten very big find the oldest particle and delete it so a. remove zero so this is a sort of first little quick example of what of how we might keep an array list from getting too big so let's go back to our example over here and we can say hey okay let's add that bit of code if particles. size is greater than let's just do something really simple right now greater than 15 arbitrary number particles. remove zero let's do that now let's take a look at it you can see there actually it's like making them but it's like deleting them very quickly like because we can only have 15 total and so you know something more H reasonable hello again I dropped something um something more reasonable might be 100 and we can see okay it's giving us 100 particles and we you can kind of see that they're getting deleted so maybe we want it to be larger this is not the point of this you can tune your program to figure out what the right size and when you want to delete the point of this is this is a really simple way basic demonstration of how we can just keep an array list size to a maximum as well and to a maximum and and remove elements from that list at when we want now this is not the this is not the implementation we're going to use in our first particle system example that we're building what we actually want to do is something different we want to say hey when a particle is finished remove it so it's not about just saying oh we can only have a 100 we might say like hey only the particles on the screen let's keep only the particles whose Alpha hasn't faded away let's keep so we want to make this a little bit more advanced we want to figure out when a particle is finished let's remove it so we need to talk about this a little bit and then we're going to add that code um to this example so over here let's figure out how we're going to do that okay so here's the thing ah oh this this very very sad thing to tell you we were so happy about that enhanced Loop right that enhanced Loop that we over here for every particle p in particles we don't have to have in I and any of that stuff the problem with this enhanced Loop is we can't modify the array list while we're in that Loop and what we want to do right now is modify the array list while we're in that Loop we want to say for every particle in the array list particles check everyone if one of them is finished delete it from the array list so we want to delete things While We're looping through the array list so we can't use this Loop but hey we know how to write a loop that counts we can use a loop that count so let's figure that out we could say in the case of our array list called a over here we could say in I equals z i is less than how long is the array list a do size a do size I ++ now we can say particle P equal a. get I so right this is what the the enhanced Loop does for us it just says hey do something to all the particles we can be more long winded about it we can actually count from zero to the end of the array list and we can ask for each particle at its index I individually so we're good we can do this and then we can say things like remember we had that function if particle is dead remember that function we wrote in the particle class that said when lifespan is less than zero when lifespan has gone all the way down to zero we're done with it we can delete it well now that we have that function we can then say a. remove I right this is this is our new algorithm that we have for looping through an array there's going to be a problem with this we're going to get to the problem with this in a second but this is whenever you want to manipulate an array list add delete alter the order of things while you're looping through it you have to Loop through it manually in truth you might see you might see some examples in processing that also use something called an iterator there's an iterator object in Java and in fact if you read the nature of code book it goes through it but I I've now decided that I think it's best and simplest to just look at two scenarios the enhanced Loop and we just want to hey let's look at all the objects for every particle p and the array list particles boom we're done if we want to manipulate or do something more kind of fancy to the array list during the loop we have to count through the indices ourselves and access each particle this is a case of that when we want to delete particles so let let's actually put this in our code and it's going to work but then I want to talk about what's there's something a little goofy going on here that's that's a bit of a problem that'll be where we'll kind of finish this video so okay let's go add this to our code here we are we can say all right instead of using the enhanced Loop we need to replace this enhanced loop with a loop that counts for in I equal z i is less than particles. size i++ particle P equals particles. get I if I run this you can see exactly the same instead of the enhanced Loop looking at each particle individually but now down here I can say hey let's make sure right remember we have this function is dead we have this function is dead that says when lifespan is less than zero give us the value true awesome that's exactly what we need if p is dead then particles. remove I right because if We're looping through the array list we're on particle I if particle I is dead remove particle I and let's run this and we won't see anything different it just works the reason why we don't see anything different is we're removing them kind of surreptitiously in the background when they faded out we don't see them anymore you know as an exercise if if you would like an exercise like right now pause do an exercise go get this example which is 4.2 or something in the nature of code book um and change it to instead of when a particle has faded out when it's off the screen if it's y value is greater than height or it's x value is greater than width or less than zero try removing a particle in that case so but we we're so we're kind of done here except for a rather important detail that in many ways hey it works it doesn't seem to be going too slow it's fine who cares why should we go deeper and worry about things that we might not need to worry about but it's my obligation I have under contract to show you that there is a kind of subtle flaw that in the end might not really matter but in in some of the things that you build could really matter so I'm obligated to point that out to you right now let's go take a look at what it is um okay so let's create a scenario we can get rid of all this stuff that we written up here let's make an array list and I'm going to put hello I'm going to put letters in this array list so here is my diagram of an array list and I'm going to put the letters a b c d and e in it and we can consider those particles particle a particle B particle C particle D and I'm going to say to you that particle C is the one that's dead right now so all of the other ones are alive and particle C is dead so particle C is the one that we want to remove and they each have an index 0 1 2 3 and four can you see those numbers if not you can count from 0 to four I bet 0 1 2 3 and four so we're going to for a moment like we're going to pretend to be the loop we are the loop I we are I I am I well that's weird I I am I I I okay I is equal to zero I don't like that over there I is equal to zero zero is a is a alive yep update this display we're done I is now equal to one is a alive is one alive B yes it is update display I is now equal to two is two alive no it's dead we need to delete it from the array list so we're going to say a. remove two now what happens to that array list when we delete that element let's draw that array list again here is what the array list looks like now once we've deleted that element it's a b d e because we removed c d and e slide over to fit into the spots next to B that's what the array list looks like now let's look at its index values 0 1 2 3 well what are we on now we just checked two now we have to check three is three whoa wait a second here if you're following along we're checking e we never checked D we checked C we removed it D slid over so we we're not checking D we're checking e next so if you what's happening here when because of the way the elements slide over as We're looping forward through the array we could be skipping them by accident now in the end it doesn't really matter maybe we didn't check D and we didn't display it we'll display it next time big deal you might see a little blip on the screen but this could you know in other programs this could be a disastrous you know cat catastrophic consequences so you have to be very careful if you are looping through a list and manipulating that list I mean just think about it what if you were looping through a list and adding things to it while you were looping you could never get to the end of it so you'd have this infinite Loop that would never get to the end and your program could potentially crash there's so many things that can go wrong when you're manipulating a list while you're looping through it so you just have to be careful and be aware of what's happening with those elements how are you adding how are you subtracting where are you in the loop in this case there's a very simple solution The Simple Solution is if we go backwards through the list we won't have this problem right because if we start with E then with d then with C you know we could delete stuff and all these things can Shuffle around b and a are unaffected so going through the list backwards is the solution in this case in other cases it might be something different so how do we go through a list backwards oh it's it's no problem I mean you know how to do this trust me but let's look at it right here's a loop where you start at I equals z okay instead of starting at the beginning let's start at the end what what is the last element of the array list a do size minus one right if there were 10 elements in the array list the last one is index 9 0 through n here we want to go all the way until we get to the end of the array list now we want to go just down till we get to the beginning what's the beginning zero so I is going to Loop until it gets down to zero instead of going up by one we're going to say I minus minus now oops oh and it's not called a excuse me in this example the r list is called particles now if we run this we can see here we go and now this is our example we have done it oops oh didn't knock over the laptop ah I'm dropping things okay uh only thing I could do next is fall um but uh what we've done it right this is exciting we now have our particle our basic simple particle system example and the next step that we need to take with this is say we actually now want to encapsulate the idea of a system into its own class that's going to allow us to have multiple particle systems right particle is an object right now we have an array list of objects but we want to have an an object that is the array list of objects right particle is an object the system is an object and then we could eventually have a system of systems a list of particle systems then we could have a system of system of systems could go on forever but this is our goal and that's what we're going to do in the next video