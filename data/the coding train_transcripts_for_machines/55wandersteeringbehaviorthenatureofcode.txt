i am back to continue my quest to complete all of the craig reynolds steering behaviors and today in this video i am going to do wander wander happens to be one of my favorites not necessarily because of the motion it produces but because it emphasizes the inherent creative thinking involved in designing steering behaviors and i hope will lead you to realizing that you can really invent your own what does it mean to wander reynolds uses the term wander to describe a random steering so he writes one easy implementation would be to generate a random steering force each frame okay let's try that let's begin with the base steering vehicle code from the previous videos i'll call a new function called wander then i need to implement that function in the vehicle class itself and let's try just a random vector applied as a steering force each frame and there we have it wonder record for the shortest coding train video ever obviously i'm not done looking back at reynolds paper he writes this produces rather uninteresting motion it is twitchy yeah that's pretty twitchy if you think about it what does it mean to wander now of course the idea of what i'm trying to emphasize is that it's up to you the designer and coder of the simulation itself but following along reynold's system he proposes that wandering isn't about making lots of decisions every frame to go in a random direction but picking a way to go for a while and then maybe changing and then changing again so the approach proposed is to retain a steering direction and make small random displacements to it each frame this is reynolds original implementation in a java applet of wander itself and you can see that the steering force is constrained uh to this dot that's kind of randomly moving around the perimeter of a circle let's draw all the components of the behavior wonder start with the vehicle traveling at some velocity project a point some fixed distance ahead of the vehicle according to the direction of the velocity place a circle at that point of some radius r now pick any random point somewhere along the perimeter of this circle i'm just going to pick this point where i drew the radius then the steering force is equal to a vector that points from the vehicle to that point along the circle i'll draw a line like this to represent that now the magnitude of the steering force we'll get to but you'll see how the steering force here is slightly clockwiser to the right of the velocity vector if i didn't do anything else this would result in this vehicle turning slightly to the right and just forever and ever and ever and ever doing that now i should note this is kind of an exception to what i might have said in a previous video where everything boils down to a desired velocity we could do this a slightly different way which is to say that this could be a target and this is the desired velocity and then do steering as desired velocity minus velocity and i think actually that's probably the way that i've done this in the past but reading reynolds paper precisely this is the actual steering force itself so what makes it wander well let's sprinkle in a little bit of randomness what if every frame i move this dot that is controlling the steering force a little bit this way or a little bit this way randomly if the displacement is small we're not going to see a lot of twitchiness because it's generally going to be moving in the same direction but over time that randomness this circle might wander over to here and then the vehicle itself will start to wander in the other direction and back and maybe further and this kind of thing so we're going to get this continuous motion wandering about a space so this is a definition of wander that reynolds proposes we can see all those same components in the diagram in the paper itself i did miss one additional element which is to draw a circle here emphasizing the maximum displacement that this dot can move any given frame if it's going to move big steps will get more random motion if it's moving only small steps the direction won't change randomly as often let's implement the code i'm going to comment out the previous just random force let me give it a starting velocity just so it's moving in some direction and step one is project that point that some fixed distance ahead of the vehicle according to the velocities direction i'm going to set that point 100 pixels ahead by making a copy of the vehicle's velocity and setting its magnitude to 100 and then adding the position there we go maybe i'll call that the wander point now i need a wander radius so we have the point projected out and a circle of radius 50 around that point now how do i want to keep track of this point here well i think i would like to keep track of it as an angle relative to the horizontal axis we could call that theta then thinking back to my video on polar and cartesian coordinates i can find the point on that circle by taking the radius and the angle and converting it to an x and y offset now i have that green dot on the perimeter of the circle let me change the angle to 90 degrees or pi over 2 radians just to make sure this is really working the way i think it should there that point is now 90 degrees relative to the velocity of the vehicle now i want to use that point as part of the steering calculation so i think i'll actually add to the wander point vector itself then the steering force is just that wander point now minus the vehicle's position now look at that i'm going to run that again for you it steered really really fast and is now going straight down hmm i should note here that this angle that i'm talking about theta is actually not the raw angle relative to the horizontal axis of the world but it really it really should be the angle relative to the velocity vector itself so as the vehicle starts to turn this steering point stays on the same position of the circle relative to the vehicle's direction now i've done that now as you can see that the vehicle is just making really really fast loopy loopty loops turning to the right 90 degrees continuously the main reason for this is that i've allowed that steering force's magnitude to be of of the of the length between the vehicle's position and that point itself so i should be reducing that magnitude or limiting it to the maximum force variable let's annotate this a little bit more with two lines now i have almost all of the elements from reynold's original implementation in my version there the critical sort of crucial piece i'm missing of course is moving this wander point as i'm calling it randomly clockwise or counterclockwise or clockwise but i think i've actually made a mistake here i described this all as an angle and then randomly offsetting the angle but reynolds if we go back and look very closely there we see that extra circle that is surrounding that point that's moving to complete the wander behavior reynolds actually displaces this point randomly anywhere along the path of this circle so it could end up here and then constrains it back to this circle this has the result of making it more likely to have a smaller displacement than a larger displacement since what i want to emphasize is the creativity involved in exploring these steering behaviors i'm gonna go with the way that i started basing everything off of this idea of an angle relative to the velocity after i do that i'll return to reynold's more formal vector displacement and see if if that improves anything so the first thing that i need to do is this pi divided by 2 starting angle needs to be a variable it needs to be an angle that i can keep track over time and manipulate it so i'm going to add it as a property to the object and call it wander theta and let's start it at pi divided by 2 replace it here still the same looking at this i think it would be easier to follow what's going on if i reduce the maximum speed down to two and as well as the maximum force down to 0.1 so we've got something moving a bit slower now that i can view and finally i just need to change that angle by a random displacement every frame now you can see with that very small displacement it hasn't really moved from where it started and so the vehicle is still kind of going in this loopdeloop i'll make a variable to keep track of the range of displacement and now i have something that looks much more like craig reynolds original implementation let's take a look and compare looks pretty good it's not 100 identical using different values for the different radii and properties of the system but i feel like i'm getting a similar kind of wandering motion while figuring this out it's super helpful to draw all the lines and circles and various properties of the system but let's look at what the wander behavior looks like without drawing all that extra debug stuff and there's my wandering vehicle looking at the diagram in the original paper i'd like to trace the path and see what it looks like now add a property to the object called path which is an array then every time in update i'm going to add a copy of the current position finally in show i'll draw all those positions as a series of vertices of course i forgot that this dot i just realized it would have a big problem here as soon as it crosses over how do i deal with this problem what if i think about it as a series of paths and every time i reach the edge i end a path and start a new one so i have all the paths and the current path now this is a loop for just one path and that could be inside of a loop of all the paths paths should actually start with the current path in it and the position gets added to the current path we're getting for this dot again all right this should be exactly what i had before however what i can do now is any time i hit one of these edges i'll make a boolean variable called hit edge which is false and then it'll just get set true in any of these so any edge and then at the end if i hit the edge then we need a new current path and add that current path to the paths oh boy did i make this complicated or what let's see if it works where'd it go oh it's push it's push still stuck in java arraylist land this looks like some pretty nice wandering to me let me give it a much bigger canvas space to work with and speed up the vehicle this is obviously going to slow down quite a bit eventually because i'm not removing anything from the history of this vehicle's path so deleting positions eventually would be one thing to add as well as possibly saving every third position or fifth position i don't necessarily need every single frame to create a nice connected set of line segments let's take a closer look though to produce the steering force for the next frame a random displacement is added to the previous value and the sum is constrained again to the sphere surface so first of all hello this would be great to try in 3d right what if what you are steering towards projected out ahead of you is not a circle in a twodimensional plane but a sphere in 3d that would be great to try i'm going to try to do that later and show you a version of it here next to me looking back at my implementation i have to start over to some extent because i've based everything around the idea of keeping track of an angle over time for the displacement implementation i wouldn't be keeping track of an angle i'd actually be keeping track of this particular vector which i've called in my code the wander point offset it randomly constrain that back onto here and then that is the new wander point for the next frame am i really going to get that much of a difference in the behavior that it's worth doing this i'm struggling here let's compromise i'm going to show you right now a version of this wander sketch running with this particular displacement algorithm of moving the point rather than the angle i'm otherwise going to wrap up this video now with a few suggested exercises for you first as with any of these systems the various parameters by adjusting them the behavior of the vehicle itself will radically change take the radii of these two different circles right the size of this particular circle maybe perhaps also the distance from the vehicle itself is tied to the wandering strength the size of this circle even though i'm i'm doing the angular displacement now the size of the angular displacement is the wandering rate like how much does it change direction so could you make a version that has sliders that control both of those parameters reynolds also notes that pearl and noise could be a way to implement wandering so how about a version of this where the steering force is just calculated via perlin noise or maybe some other noise algorithm what ideas do you have how would you implement wander what does it mean to you to wander throughout this universe that we're all sharing let me know your thoughts in the comments or better yet create your own p5.js sketch and share it on the coding train website where you can submit your variation to every video that i make so check off another steering behavior from the list wander i've actually already recorded a couple videos on path falling i'm going to put those next into the sequence it's not really a big logic to the order here other than i'm just kind of taking on the steering behaviors that i feel okay with on any given day like what's what's in your heart what's in my heart what steering behavior did i wake up this morning wanting to implement and see you in the path falling one next goodbye you