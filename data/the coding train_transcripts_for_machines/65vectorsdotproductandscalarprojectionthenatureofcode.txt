this video is going to be about the dot product so here we are sitting in the middle of a section of videos about steering behaviors Craig Reynolds steering behaviors implemented in processing using the P vector class we're about to look at the path following example but before we can get to the path long example we really need to know about the dot product and something called scalar projection so this video I hope it's my hope that it will also stand on its own and is really just a discussion of the dot product with vectors in particular using P vector in processing so okay so first of all why might you even want to know the dot product so let's take this scenario so we have a vehicle and it's driving or flying or moving in that direction and we want to know what can it see what kinds of things can it see in front of itself for example there are other vehicles in this world and it can't see these but it can see those how might we determine whether it can see one or the other well let's look at this what if we make so this is its velocity what if we make a vector the points from its location to this other location well what is this angle what is that theta what is this theta what is this theta it turns out we could say something like if the angle if it's sort of angular relationship a relative to the axis of its velocity to a given vehicle is less than pi divided by four right let's say that's 45 degrees then it can see it so it's often in lots of these scenarios that we can diagram for ourselves we often want to know what is the angle between two vectors well the dot product is a function that will give us the angle between two vectors there's also a function and processing called angle between but it uses the dot product and we're also going to see other scenarios where we need the dot product more directly so I didn't start timeing this but it's maybe a minute or two so let's take a look at the formula for the dot product so first of all the dot product is like is it I'd like to say it's a a multiplication like activity for vectors like vectors we they want to get that we like to add vectors together we've got xcomponents get added and the Y components get added and then you're like I want to multiply vectors and that doesn't really make any sense so when we talked about vector multiplication we said hey here's a vector let's multiply it by two we always multiply vectors by a scalar quantity a single number and that just affected the length of the vector but now we're actually going to look at something that is really like multiplying two vectors together and it's the dot product so let's say we have a vector a and we have a vector B now we know a is really a sub X comma a sub Y and B is B sub X B sub y so we can say that a dot the dot product B equals a sub X sorry times B sub X plus a sub y times V sub y boy I hope I got that right if I got that wrong I'm redoing this video later this is the formula for the dot product now you might be asking yourself what are we talking about the angle between two vectors well in fact we were there's another way we can write the formula for the dot product it is the magnitude of vector a time's the magnitude of sorry a vector B times cosine of the angle star star green boughs flowers explosions happiness the angle between those two vectors right so now you might be asking yourself where do these formulas come from and you know this video is not going to cover it we're not gonna derive the formulas and prove that they're equal to each other and all that stuff that's way too hard for me so but I will link to some places below that you could go and explore that but if we start here and say how we know that the dot product can be expressed by this formula or this formula let's take a scenario where we have the vectors you know 3 comma 4 and 1 comma negative 2 well let's let let's think for a second we know the components of the vector the magnitudes of the vector we can get very easily from the magnitude function the square root of the X component squared plus the Y component squared the thing we don't know is theta is the angle between but we can say ax sorry times BX plus a Y times B y equals the magnitude of a time's the magnitude of B times cosine of that angle and if we do a lot of math here we could say hey theta equals inverse cosine of ax times BX plus a Y times B Y divided by the magnitude of a time's the magnitude of B right so if we set those formulas two together and we solve for theta and again I just hope I got that right we can solve for theta we can now find the magnitude the angle between two vectors hooray so this isn't valuable information this is the formula but you know we you know this is great and it's nice to be able to draw things on the board and we can pretend that we look like we know about math and vectors by writing all these formulas out but practically speaking how we're really using this in processing well let's take a look at let's take a look at them for a moment at what code for this might actually look like let's say we have a P vector a which is some K vector and a P vector B which is some P vector we can get the dot product by saying a dot the word dot write the function name is dot but we're always putting dots in our code so don't be confused a dot dot B we also know then that we could say theta that angle between is equal to a Coast's so inverse cosine in processing is a coast of the dot product divided by a dot mag times B dot mag so this is just one use where we can use this dot product we can use the dot product to get the angle between two vectors and let's take a look at this in our processing sketch so there's a couple demonstrations I'm gonna put this one oh I'm not oh haha a pause okay and we're back there are two I'm gonna put this one off to the side we're gonna look at that later and we can see here look at this we now I always do this it's so awkward today I'm gonna have a better system in this we can see that I now can get the angle between two vectors that could be very useful and we can see how is that happening I can say hey I have vectors a and B give me the dot product give me the inverse cosine of the dot product divided by the magnitudes multiplied together the truth of the matter is I'm just going through this to demonstrate what the dot product is how do you call the dot product function in just a scenario where you might use it but this is a common enough scenario that if you were actually doing this in your code I wouldn't manually calculate the dot product then used that formula that formula is encapsulated into this function called angle between so there is a function in processing called angle between which allows you to find the angle between two vectors and again there's a lot and you just think to yourself we're looking at what is the relationship between two vectors how similar is their direction knowing the angle between them would tell us that okay wow this this is like much longer than I imagined but there's another thing that we need that we want to use the dot product with is it's it's really exciting I think I'm you know I cautiously I'm kind of aware of how not exciting this is but I'm enjoying this and if you're not you can just go and watch kittens cuz there's lots I wish I had a kitten we could pet the kitten anyway okay so let's look at a different scenario what we're gonna look at now is something called scalar projection and scalar projection is something we're going to need in the path following we're going to need it for sure in the path following example but we're gonna look at it just kind of abstractly on its own for a second so what is scalar projection let's say we have this vector and we're gonna call it B and let's say we have this vector and we're gonna call it a well imagine for a moment that there was like a lamp right up here like a little light shining a light and a shadow was cast from this vector onto this one well we would make this little dotted line right here that meets this line with a right angle and we now have this vector this vector this is the scalar projection right it's as if we projected this vector onto a flat surface onto this vector this is what we get now interestingly enough this relates to a scenario you're going to find all over the place in particular in steering so let's say we have this is a path of this is a wall or this is something in a physics world and we have the vehicle that's over here we have a vehicle that's over here what if we wanted to say how far are these vehicles from that wall well what we need is the distance between a point and a line what is the distance between a point and the line well here's a point here's a line how do we define that distance I could say like oh the length of that dotted line does it meets the line over here or I could say I the length of this dotted line or whatever I could make a lot of stuff up that's not correct I'm just making stuff up the way we define the distance between a point and a line is we take that point and we find the line that is perpendicular the intersection that's perpendicular to this line the normal this vector is the normal it points out perpendicularly towards that point this is the shortest distance between this point at any other point along this line this spot here well look at these two graphs what if I made a vector that goes from here to there what this is we find that point by the scalar projection of this vector onto that line so this is a scenario that's quite common and what I'm going to just show you over here let's illustrate this there's a processing example which I haven't yet included in the github repository but I suppose I will now that I'm making this video I made this just 10 minutes ago we can see here that no matter where I move my mouse we see the scalar projection and even if I go past that line segment onto that line where do i project down to make a perpendicular line to that line so how do we find that point for any arbitrary line we use the dot product so let's take a look at this over here a little bit more so let's ask ourselves the question let's say there's an angle over here say no that's the angle hey between those two vectors sound familiar let's say we have we want to know that length this length let's call that I need a good name for it I'm gonna call it SPE oh that's terrible okay come up with something yeah for scalar projection we want to know the length SP the length of this well let's ask ourselves a question what is cosine of this angle cosine of this angle is adjacent over hypotenuse SP divided by the magnitude of a SP therefore equals the magnitude of a times cosine of theta this is this is a little fashion stuff we did this many videos ago chapter three polar to Cartesian coordinates that's basically what we've done if we know that angle if we know the hypotenuse we can get this side by saying that scalar projecting the length of that scalar projection is the magnitude of a times cosine of that angle well this should look kind of interestingly familiar let's say we have a let's look at this formula a dot B equals the magnitude of a time's the magnitude of B times cosine of theta boy these formulas sure do look similar what is this formula this formula is the dot product if B is a unit vector right because if B is a unit vector it's length is 1 which means the magnitude of a times 1 times cosine of theta is just the magnitude of a time's the cosine of theta so this equals a dot B if B is a unit vector well is it hard to get a unit vector in processing no we just call the function normalized so what we're actually able to do if we have these two vectors to get the scalar projection is we can just normalize B take the dot product with e and scale with a and scale up it's so simple we normalize B we say B this is going to look a little weird normalize which now we have a unit vector pointing in that direction and then if we just say B dot multiply a a dot I hate that I'm using capital letters I could have violated every I'm writing actual code here a multiply the dot product of a dot B then we've got this vector now normalized at that length brilliant boy do I love this so okay so this was a lot of math and I have no idea how that's made any sense because you're not here and this is a video and that's just a camera and I I think I explained it to myself in a way that made sense I hope you got it but if not we're gonna you know I'll figure something out because I would really like this to make sense but I think what would be useful to you is probably to go and take a look at this example and kind of you know try to actually make this this is I kind of imagine this as an exercise and if we go look at the code for this you know what I'm saying is make two points right let's sorry which one am I looking at okay here make two points this is point a to any comma three hundred this is point B five hundred comma 250 this is where the mouse is can you find that point and the fact is you can and if I just skim down below here you can kind of take a look at this but what we're doing is we're making a vector we're normalize it we're scaling it by the dot product finding that spot and returning it so I'm kind of not explaining this as thoroughly but I'm gonna put this in the github repository but this is really your exercise if you want to try to understand the dot product try to create a scenario where you are constantly needing the distance between a point and a line so even just put even even just like draw a line in your sketch draw a bunch of vehicles flying around and are moving around and always have them always map they're scalar projection onto that line see if you can do that it's a very difficult exercise it involves math and I don't know I would enjoy it but I don't know how much fun this you know I'm just locked in a room with lights and processing so what else am I supposed to do okay no so in the next video we're actually gonna put this stuff to work and we're going to use it for path following