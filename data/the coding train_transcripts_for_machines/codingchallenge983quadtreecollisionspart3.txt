hello and welcome to part three of my quadtree coding challenge and in this coding challenge what I want to do is I want to see can this work will this work I have this very very very slow sketch that has 1000 particles each particle is checking every other particle where it is in the window and if it is overlapping or intersecting one of them it's highlighting itself white and if it's not it's keeping its color to gray and you'll notice this is running at about 5 frames per second can I use a quadtree to reduce the number of cycles computational cycles I need to do to check every particles location against every other particles location and get this running at 30 frames per second let's let's go okay so I'm actually gonna refresh this and when there's nothing there now because I actually do I had all that code I deleted it I'm gonna write it now so what I do have already is a particle class so I have a very simple particle it just has an X a Y and a size and it's drawn as a circle so let's do this let's say I'm thinking about this I'm thinking about this let's make an array of particles and I'm gonna say for let I equals 0 eyes less than 1 and let's just start with 100 because I don't want to deal with it running slow until it's time to really implement the quadtree and I'm gonna say particles index I is a new particle and I'm gonna give the particle a random location on the window then I'm gonna say for let P of particles and I think it's like P dot update probably and P dot I don't know what it is let's look move and render all right who knows what I call these things move and render and I must say background 0 ok so now we can see there we go no problem look at all my beautiful particles I'm moving around and so we can see by the way just even with like a thousand of them drawing a thousand particles is no problem P 5 canvas I could draw a thousand circles any old day of the week 30 frames per second whatever nice frame rate but now what if I to say four and I think I could say let I'm gonna do this again this is I'm gonna separate this out into a separate loop let P of particles for let other of of particles and I want to now check if P intersects other then I want to highlight this particle P dot highlight so this is the idea right I want to check I want to do a nested loop for and also I should I got it make sure as long as P is not equal to other so as long piece shouldn't check itself and again there are plenty of ways to optimize this nested loop like I don't if P is checking other I don't need other to check P but that's not the point here I'm gonna let this be as inefficient as possible is right now do I have an intersect function do I have a highlight function I don't think oh it would be nice if I kept those so let's write an intersex function intersects other so what do I need to do I need to know the distance between this dot X this dot Y and other dot X other dot Y and then I'm going to return distance is less than so they're intersecting if the distance is less than this dot R plus other not R right so this is going to tell me then I'm going to just do I'm going to make a variable called highlight and set that equal to false I'm going to in render if highlight fill white otherwise fill just this sort of grayish color and that should be this dot highlight and then reset highlight and I'm gonna say this highlight equals and then value so I'm gonna write a function that's like set highlight that's going to turn highlighting on or off I could do a better job of this but this will work right because basically what I want to do is first I want to just set the highlight false for all the particles right they're all not highlighted then what I'm doing the check if it Chile is intersecting I can set the highlight to true so now let's go back to just 100 particles and we can see perfect when there okay now the distance oh you know what I'm not drawing them I'm drawing them with the radius as the diameter so they're actually half the size so I should fix that in my render function I'm not being consistent this should really be radius times two if I'm using R as a radius for the math so now we can see right when they are overlapping they're highlighted white when they're not overlapping they're not okay so this is working fine I can actually let me look here in the oh there's like oh I got a deal with that for a second hold on I have a little extra bit of code in there by accident I can look at the framerate no problem 27 frames per second let me just ignore what I'm doing for a second in my quadtree code I was adding some unit tests and stuff and I'm gonna just get rid of that okay so we can see here look at the frame rate 26 frames per second now let's see that if I go back to my sketch and I add a thousand particles let's look at the frame rate now five frames per second also now that I have so many I'd probably want it to be them not to be as big because so let's actually make them half the size and now frame rate is still five frames per second okay we're here for the quadtree right let's add the quadtree so the thing is what do I need to do right here this is what I need to replace I'd say I'm still want to go through every particle but now instead of looking at every every every every particle I want to just query I'm gonna say let others equal oh wait half that I have to create a quadtree so I'm going to first I need a quadtree variable quadtree then I'm gonna say quadtree is a new quadtree I haven't I did that color coding John so long ago I forgotten what I need I think I need a boundary so I'm gonna say a boundary is an rectangle like my quadtree example has some geometry classes like a rectangle and the rectangle I'm going to make it 300 comma 200 that's the center and it's 600 comma 400 so I probably should use width / height / with light but that's fine I'm just gonna leave that so I'm gonna make a new quad tree with that boundary then what I'm going to do and I think this got added after so one of the things that actually this is a bit I can't believe I'm not even at I forgot about this but these things are moving so if I build the quad tree with all of those particles as soon as they move how my god I'm missing so many pieces here there's more to this video than I thought all right hold on here we go this is gonna be good I knew I knew there was something going on here okay so what do I what does what does this quad tree expect the quad tree if I look at it it expects me to insert a point a point is a particular object with an x and a y oh look I already added this oh so this is so if you follow the last tutorial this won't be there let's take this out so here's the idea let's watch watch and learn okay here we go this is where I left off in the last tutorial I forgot about this now I'm gonna go back to my code save this and I'm gonna say okay what I want to do is I want to build this quad tree so what I'm gonna do is I'm gonna say quad tree I'm gonna say let a point be a new point at particles index I dot X and particles in X I dot Y and I'm going to say quad tree insert that point right this is where I last left off I'm creating a point object and putting the point object in the quad tree the quad tree is going to organize itself to keep points together that needs to be together but here's the thing I've now made this new point object I want to put the particle in the quad tree so really I want my quad tree to store the particles and then the particles are moving some kind of like update their location in the quad tree how am I gonna deal with this well there are a variety of solutions to this number one I wrote the quad tree code so I could just rewrite it to work with my particle object and set the point object but something I could do to make it more generic is I could this is a this box2d works this way and some physics libraries do I could add a property to the point object called user data and what that means is when I create a point object of court my data that I need for the quadtree is its X Y location but I could also say attach yourself to this other object so that when I find this X Y location I can know that it's attached to this particular particle so in other words what I can do now is I can say make a new point with this particles X&Y referencing also this particle again there's some redundancy here but this will work well enough it's also very generic so if somebody else is using this quad tree as a library they could kind of use it with whatever classes they've they've they've created so but here's the thing this created that quad tree but as soon as I call all the points move they're going to be in a different location they're not where they originally were so actually I don't want to do this here what I want to do is do this here in draw and I this the nice thing about this is I have the particle and a variable called P so I want to create a new point whoops what is going on here give me back my coche okay I want to do a new I want to create a new point add an x and y with a P and I want to insert it into the quadtree but draw looping over and over again so when I insert the first time the next time I don't want to reinsert it I just want to update this location well the truth of the matter is while that would be a nice way of doing it updating the locations and probably most efficient it actually is a little bit simpler if I just remake the quadtree every frame the quadtree is the thing that I'm just going to recreate every frame for the purpose of optimizing the collision detection so again I could be more thoughtful about this and have a global quadtree I think there's even maybe a clear function by now in that quadtree class that I wrote but I'm just gonna remake the quadtree object every frame build it from scratch every time through draw okay so now I've inserted all of the points the quadric let's just run this to make sure it's like still working no syntax error sketchiest line 29 oh I forgot that I was doing something down here okay another error quadtree nine your capacity should be a number but is undefined ah I forgot about the capacity so the quadtree each node of the quadtree has a limit to how many particles can go in it let's just use four that's what I've been using we might get better better or worse results depending on that number so let's and let's let me give myself some more space here with all this okay so we can see that this is working but running slow so while I've got the Quan building the quadtree I have it lost even though there's computation involved in building the quadrat for rebuild at every frame there's so much less involved in doing that then checking all the locations and now here's the thing that I want to do let me just shut this off so that I don't like kill my computer what I want to do now is here I started here instead of looking at every other particle in the whole particles ArrayList I want to query I want to say I'm gonna say let others equals QT e dot query now what do I want to quit I think query is the name of the function query query class query query query query query quick query range and found but and also worried about found found a member when I wrote that found is the array that's being recursively added to but I want to query a range and the range could be and Moraine could be a rectangular range or a circular range and actually I have this this has been added since the last tutorial but this geometry object for a circle I'm going to use a circular range Y if I have a particle and has a given R and my other particle has a given R I only need to look at particles within what a range that is are I drew this kind of bigger R times 2 right because the particles are intersecting only if they're within R times 2 of this particle now if the particle were different is we'd have a more complicated problem and I encourage you to implement that as your own exercise but because my partners are the same sizes I've got a pretty easy easy scenario here so what I can do is I can in sketch I can say quit okay so first make a circle there's a new circle object where it should be at P X P Y and it's sizes PR times two this is the range I want to check for any other particles within the range the distance of this particles radius times two I want to query that circle let's call this range I want to query this range then others is now a smaller amount this is all I just needed and the other of others so I'm no longer checking the full particles list I'm querying the crud quadri for a smaller subset of particles for me to check intersection and now I think we might be done I don't know I don't know I don't know they look at this this was remember this let's let this run again this is it running before really slow five frames per second I'm gonna hit refresh I hope I don't have any errors oh that looks good it's running fast but it's not highlighting so what happened there P does not equal other and P intersects other why okay hold on I have a bad feeling that oh the particle thank you I forgot so that's the thing right right right right right so this is the whole thing these are points I called them others well let's call them points I'm getting the points for every other of points for every point of points other equals point dot user data I need to actually look at the that object right the member of the particle which is the thing that works with intersects had said highlight and all of that is this Quadra is giving me an array of points and as I look at each point I need to pull out the user data okay I can't I can't bring myself to use that drummer there we go so now whoops framerate oh look at that 48 frames per second it was five frames per second now it's 48 frames per second whoohoo so you know there's issues with this well I've really set myself up for success here these particles have a really nice even uniform distribution across the entire canvas they're all the same size there's only a thousand of them I'm not actually like having them bounce off each other or any kind of complex collision resolution but this is the basic idea what you can see is that with a quadtree right if I just quickly like all I have to do now to to switch them on and off right is to say let me comment this out and if I say for other let other of particles this is so now no quadtree right I'm just looking at every other particle super slow super slow frame rate of about 5 and now switch to using the quadtree super fast so good bye everyone oh thanks for watching this tutorial I encourage you to try to make a version of this where the particles on a somebody already has done this a pull request on my quadtree repo but making it a version of this with the flocking simulation can't you know how is that going to work what if you have you know what if the particles aren't so evenly distributed how could you do it with different sizes Oh could you visualize the quadtree so draw the quadtree dynamically as it's like changing and updating that might be a beautiful thing to create make your own quadtree visualizations I hope you do all those things share them with me and I will see you in a future coding challenge something or other a video goodbye subscribe like I don't know that kind of stuff goodbye