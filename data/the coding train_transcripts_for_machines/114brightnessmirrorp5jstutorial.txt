hello and welcome to another video about pixels in this video I'm going to change this rainbow set of pixels behind me to the pixels from a live video stream and from that I'm going to show you how to create abstract mirror from that video stream based on just the brightness values of the pixels so let's just dive right in and go ahead and do this so I'm going to pull up the code for this one and the first thing I want to do is just add a video Dom element here so I'm gonna create a variable called video I'm going to say video equals create video create capture video and I'm going to say video dot size 320 240 so I'm going to just run this again and we can see there we go I now have my canvas with random pixels next to the video Dom element so the next thing I want to do is say instead of making these pixels random I want to actually just pull the pixels from the video itself so if I go into the code here you can see this particular nested loop is looking at every single X and every single Y finding the pixel giving it and setting its color and I covered all how this works in a previous video link to that now magically the rule but if I make a weird sound than a pair I hope that a annotation will pop up that will link there so so but if I want to look at the videos pixels a first thing I have to do is just say video dot load pixels video dot load pixels now in addition to the canvas pixels I want to look at the video pixels okay and here I can actually just say hey the red pixel for the canvas I want it to be the red pixel from the video and the green pixel I want it to be the green pixel and the blue pixel I want it to be the blue pixel and the alpha I could get the Alpha but I know it's 255 why bother looking it up let's just put the number 255 in there so now if I were to run this we're going to see look at that video in there and the canvas but notice we've got some stuttering now so it's a pretty expensive thing if you've worked in Java or C++ before you be like what I can look at a 320 by 240 image and look at all the pixels of no problem the truth of matter is this is a little bit slow in the browser so even even though it's working we've got some performance issues here so I'm gonna deal with those performance issues in a hidden way by saying like well I wanted to make something artistic anyway so I'm gonna do this at lower resolution but that's gonna sort of be the main thing that I'm gonna do but before I get to that one thing I want to show you how to do is just look at the grayscale or brightness value of each pixel now there is a function in p5 called the brightness function which takes the color gives you its brightness value I'm gonna do it sort of in a manual simpler way which i think is just going to be a bit more efficient here and what I'm going to do is I'm going to take those values I'm going to say R this is the red value from the video this is the green value from the video and this is the excuse me and this is the blue value from the video and one zero one and two so really what I could do is they are this is I'm just breaking this out into different lines of code by the way this is like hello image processing 101 I've got an image I look at it's red green and blue value I do something to that red green and blue value and set a new pixel so this is really image processing here if the thing that I'm doing to that red green blue value is nothing but if I wanted to manipulate them or swap them so I could go off on another tangent here but I'm not gonna go off on that other tangent what I want to do is actually just look at the brightness value and the brightness value for a given pixel is really just the average you know it could be more complex than this if you're like a black and white photographer who cares about the nuance of how you grayscale something but a simplistic thing I could do is just add all the RGB together and divide by 3 and say let me set each pixel to a brightness value so there we go and now if i refresh this you're gonna see I've got the image on the right live from the video and a kind of grayscale version I've taken out the colors because I'm making the red green and blue values all equal all equal to the average of their sum okay so this is pretty good but we've got this issue here where I've got a performance problem and I want to do this abstract mirror thing anyway so there's a there's a solution to this so I'm gonna come over here and talk about what that solution is let's say my window itself is 800 by 600 it's not but let's say how to camp sorry the canvas itself is 800 by 600 what if I were to capture my p5 video at 80 by 60 so you can see here and I'd you know not drawn perfectly to scale this is onetenth the size of this one well it's actually not 1/10 because it's twodimensional but the width is 110 the height is 110 so really it's one one hundredth the size that's right boy it's somebody correct me if I'm wrong the point of this is there is a relationship between these two if I take any x value here its corresponding place there is x times 10 if I take any x value here its corresponding place here is X divided by 10 so I need a new variable like scale which is going to keep track of that relationship between my source material and the place where I'm drawing Oh just not too late that I looked at light I've got a half blinded everything's gonna be okay uhhuh so but this would be a terrible terrible terrible name for a variable terrible name for a variable because scale is actually a builtin p5 function so you really want to watch out not name your variables things that already exist in p5 and cause all sorts of problems there's all sorts of interesting ways around that a topic for another time so I'm gonna call this a V scale for video scale so I'm gonna come back over here and I'm going to go back to my co hello go back to my code and I'm going to add a variable called V scale and I'm gonna make it the value 16 because I think that will kind of do the math work the math out nicely I'm actually gonna make my canvas 640 by 480 and then I want my video size to be the width of the canvas divided by V scale you know and the height of the canvas divided by V scale so I want the video to be smaller the canvas to be bigger the video to be 1/16 of the canvas the width and height that is okay so once I've that now you know for a second here let's just comment this out actually let's just leave it in there it's gonna do weird things and run this you can see that the video is here small very low resolution and who knows what's going on in here all that broke because my math is now way off well actually what I want to do is not even bother to set pixels anymore I do want to look up pixels in the video but instead what I want to do is for each pixel now draw a big rectangle that's 16 by 16 so here we go instead of I want to fill that rectangle based on that brightness and draw a rectangle at X at Y that is V scale V scale and let's run this and you can see whoops and let's get rid of this update pixels we don't need that anymore come on I think I might have frozen what did I do here okay well there's some mistakes here I just realized terrible mistakes I was trying to are you paying attention what have I missed so first of all now that I'm looking I'm looking at the videos pixels right the video thing this is the small thing I want to iterate over its pixels and do things bigger in the canvas so I've got to go back and I was being very looseygoosey about all this I've got to look at the video height in the video with and in my formula in looking at the pixels I need the video with as well so now and I think I might have crashed the browser so let's close look at this look at me crashing you're not really doing p5 unless you crash your browser every once in a while doing p5 I don't know what that means you're not really programming p5 this was going well a second ago there we go so you can see something happen but whatever happened doesn't make any sense why I forgot a really really crucial detail looking at my code the x and y values are the x and y positions in that low resolution video but I want to see them in their in their spots in the actual canvas itself so we I need to do is multiply scale back up by V scale these scale and now magic of magic we should see and just we should see that I have exactly what I expected now you can see their performances pright quite good I don't know what the size of that is 32 24 or something like that it's pretty low resolution plenty of resolution to get some sense of the image and you can see I now have this pixelated version of myself and I could go back to their RGB values I could do you know I can start to do all sorts of weird things so this I think is the moment where I could stop and say hey now you be creative why don't you draw circles instead or strange hexagons excellent hexagonal shapes or other images to make this other kind of mosaic but you know text you could Patek stin there whatever you want to create this sort of mirroring effect that's abstract but I think something that I'll show you that I think is worth looking at is what's the sort of bare minimum and the reason why I chose brightness this brightness of each pixel is kind of the bare minimum value to convey the information of the image so what I want to do is just draw each pixel as a rectangle with its size relative to brightness and I can use the map function so let me create a variable called W for like width of that rectangle and I want to map the brightness of each pixel which goes between 0 and 255 to a size of that rectangle dark excuse dark pixels should be small rectangles bright pixels should be large rectangles so between 0 and V scale itself and then I want each pixel to be white and I want its size to be that W so you can see what I'm doing now is I'm saying look at every pixel in the lowresolution image get its brightness map that brightness to some size and draw a rectangle in the higher resolution canvas according to that particular brightness and here we go so let me hit refresh and you can see this is what I've got now so you can kind of see am I in there can I create a pose that you can recognize but if i zoom in here right zoom in really close you can see that what's happening is these are just little rectangles that are getting bigger with brighter pixels and smaller with darker pixels very very simple idea a little bit information you'll notice that the rectangles are kind of growing from the corner so really I should probably use if I you know was thinking about symmetry and design and all that sort of stuff that maybe somebody else knows about I should probably use rect mode Center and then if i refresh the page you should see that now the rectangles are growing from their center if i zoom in and kind of move around to create some various effects and you know they're a little bit it's a little bit off now you can see at the bottom the math is off so I could surprise if to everything to the right and down by V scale / I'll let you add that part if you want to play around with this but I would say this is the basics of an idea of how you might look at the pixels of a video and redraw them in a different way while remaining on that grid so one of the next things I'm going to show you is how to just forget about this idea of the grid entirely and create a painting system that paints the pixels of a video and that's what I look at next I should mention one other thing though even though this looks correct to you right I stand here I move my arm to the right my arm moves to the right behind me a little bit of a lag but it moves to the right nonetheless it's not actually mirrored if I were in some kind of art installation and I'm looking at it as I move my arm to the right what I'm seeing on the screen is it moving to the left so I'm actually just gonna reverse that even though it'll look reversed here but I think this is useful for you in case you don't know how to do this well because a way to reverse it by the way is if I'm looking up if I'm gonna draw the rectangle here I could just look up the pixel over here and then the rectangle here I look up the pixel over here so for every pixel on the left look up every pixel on the right and the way to do that is just to say with the x value minus one right because if I have an image here over the hair if I have an image that's 320 pixels wide zero should map to 319 one should map to 318 two should map to 317 etc etc so I can just without having to actually manipulate or flip the image I'm looking up every pixel I could just look at the other side a quick way of doing that is to say video dot width + X oh sorry sorry x + 1 + y and I think parenthesis wise that you know just to be more clear I might put parentheses here but think it should be fine anyway so now if I hit refresh we can see here it's reversed so it looks reversed to you like I'm gonna give myself a highfive hey by five I'll do that on my own time later but it's actually now looks mirrored properly when I look at the screen here okay so this concludes this tutorial of making a brightness mirror with p5 GS create capture rectangle rec bud center and a whole bunch of other things and I'm gonna go over here and hit stop and see you soon