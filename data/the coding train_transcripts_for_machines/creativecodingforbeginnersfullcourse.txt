learning processing 10 years later take one do you have no idea what it means to program that is going way too fast take two totally just press the wrong button on the teleprompter take three I'm I'm really going to get this this intro this time hi welcome first this is a really long video I'm about to introduce it and kind of talk about myself my background and what's going to be here but if you kind of know why you're here already and just want to get to the tutorials check the time codes in the video description you can jump right there but maybe you have no idea why you're here that's the case I would really like to know so why am I here making this video have you ever wanted to learn programming do you have no idea what it means to program to write code to create your own software do you want to break free from the bonds of the tools that other people have made for you and learn to build your own software to make things with code so that kind of sounds like a sales pitch that was not my intention I'm not trying to sell anything here you can go you can leave there's lots of other recommendations and things that'll probably take you somewhere else but if I've piqued your interest if you're interested in learning to program this is why I'm making this very long video series full tutorial about learning to code when you first start learning to code trying to pick a programming language to use an environment uh figuring out what you want to make it's a giant complicated mess of questions and possibilities it can be very hard to get started so I'm going to take care of all of that for you right now and there's one way that you can learn how to program not the only way not the only way you can or should but it's my favorite way and that's with something called processing I have been working with processing since 2003 I have made a lot of online tutorials and textbooks and lots of workshops and classes and in fact in 2012 I was teaching a class called introduction to computational media and I started making a video about how to learn to code with processing and it was just as messy and confused as I am right now but this is who I am take it or leave it it'll get hopefully a little bit more focused and organized once I'm into the actual coding lessons itself so I really was just asking myself the question should I remake those videos the quality wasn't so great although I did look much younger over 10 years ago but enough time has passed a lot has changed in the landscape of tools for learning to code I've learned some new better ways to sort of teach some of the concepts processing most recently came out with version 4 which has many new and exciting features I have a lot more gray hair I got these like Stripes here so I figure why not let's just do it all again so it's my hope that this video will help you learn to code for the very first time I mean I suppose you could watch this if you already know how to code but I'm really looking for the beginner I'm about to get started but I want to talk to you a little bit more about just sort of me in my background and also a little bit about if you'll indulge me a little bit about the history of processing itself so I think I said my name if I didn't it's Dan uh Daniel schiffman is also another way to say my name in a longer way I work and teach at currently at a program called ITP and IMA which is part of Tish School of the Arts at New York University and that is in fact where I discovered that I love programming I was 28 years old it was uh 2001 and I enrolled as a master student in this prog prog ITP where I teach now and I took a class called introduction to computational media and I learned the basics of programming with the lingo programming language you might not know what lingo is but it is the programming language from a piece of software called macromedia director and it was invented by the incredible John Henry Thompson so I encourage you to learn more about John Henry Thompson's work um he actually appeared as a guest on a coding train video I'll show a clip of that right now you can watch that um but the point of what I'm trying to say here that you might be surprised to know is that Beyond some small experiments I did programming on an Apple 2 in the 80s as a kid I never actually got interested in programming until that time I was interested in other things and maybe you are to what is your passion maybe you're interested in biology or economics or painting robots music movies hiking social justice the law travel sociology dance food you like to cook I don't know I'm here to tell you that learning to code is something that you can do and it may just expand the way you approach and think about whatever the passions are in your life so I think there is this question of why should you learn to program the computer and the first thing that I think is important to say is you know maybe you don't need to or want to that's totally fine you're interested in lots of stuff this does not interest you other videos to watch other skills to learn no problem I don't mean to say that everyone needs to learn to program or certainly everyone should watch this video to learn to program but if you're interested and you think you might want to learn to program then I want to say that it is for you there are no restrictions no prior knowledge it's really something that everybody can do and here's why I think it might be relevant like you probably I mean you're watching this video probably on a computer you probably use the computer a lot maybe use it as a tool for work for family and social interactions you do your taxes on it you use different software you want to write an essay you need to manipulate an image so much of the stuff you do in your life requires a computer so what are you using on the computer you're using software who made the software not you I mean it's great that there is all this software but if you want to be creative if you want to express yourself if you want to make your own things on the computer without the limitations and features that other people who have made the software particular large corporations that are selling you the software then you will want to learn to code everything that you do on the computer starts with that software so why can't the person who makes the software to do the things on your computer be you what kinds of things could you invent what kinds of ideas could you come up with if you weren't limited by what already runs on your computer now I have to admit something I'm making this sound very very Grand and in just a short while as I start doing the tutorials we're going to be really excited because you and I together writing some code Drew a circle that appeared on the screen so don't get me wrong this is going to be a slow process programming is hard and this is just the beginning I'm going to show you the basics and you're going to need to take it much farther but it's my hope that this video series will get you going in the right direction so how am I going to show you about code how are you going to learn to code so honestly I really wish that I knew the secret uh the perfect way for everyone to learn I don't and I'm the first to admit that my style of presentation might not be the right fit for you there are lots of online resources books and videos how do you know what to pick in my view the best way to learn programming is to try learning the programming language that's right in front of you what do I mean by right in front of you I mean maybe you have a friend who's also learning to program why don't you just learn the same language that they're learning so you can do it together maybe you've had a teacher who you just find inspiring and they love this language and they've got some lessons in this language try that one don't worry too much ultimately to learn you're just going to have to try it yourself I could try to build a very fancy online learning platform but nothing beats being with people and talking through those ideas nothing beats learning from your mistakes and asking for help and even better helping others so maybe maybe this video and me I can be that person for you on some level maybe processing can be that platform for you it was for me and so I'm really excited to share my experience learning to code with you it was right around I learned with lingo as I talked about I was learning Java and some other programming languages and right around the time I graduated from this program in 2003 I discovered processing and immediately started learning everything I could about it in 2004 I taught a class called procedural painting as an experiment to a small group of students at NYU and there I attempted to take everything I had learned in lingo and translated into the process environment so that syllabus and set of tutorials made their way into a book called learning processing which then made their way into the 2012 video series about learning to code and launched ultimately this YouTube channel called the coding train which is where I am right now and I hope that this video will be the new one on the channel to help everybody get started learning to program with processing let me give you a quick primer on the history of the processing project so it began in June 2001 Casey Reese and Ben Fry were studying under John Mida at the MIT media lab now maida had created something called designed by numbers and they were inspired by it designed by numbers emphasized Simplicity in creating images and animations with code and Reese and Fry wanted to do something similar they wanted to make an environment that would match the ease of beginner friendly languages like basic and logo in a 2009 rise.org interview fry explains our goal is to emulate Design By Numbers Simplicity and focus but we wanted to exceed the limits of dbn so Design By Numbers could only render 100 by 100 pixels it was all grayscale it only allowed for integer whole numbers so recent fry settled on using the programming language Java to build a new processing environment which would allow for full color higher resolution but because it was Java it could also connect to this giant world of packages and libraries so processing programs could communicate on the network they could interface with hardware and microcontrollers they could render Graphics to a PDF and so much more the name processing actually comes from a journal idea that rys and Fry were considering publishing with the MIT press they wanted to write about computational work and the process behind it the journal never happened but the processing name did stick you might be amused to know that other names that were Tred around I think were seal and bagel I really like the idea of bagel actually so processing 1.0 was released in 2008 and in 2012 the processing Foundation itself a nonprofit was formed with a mission to maintain the software platforms and support people in learning how to program especially those who might not otherwise have access to tools and resources the foundation has expanded its offerings there's python mode for processing created by Jonathan fineberg processing for Android created by Andre cbri and p5js created by Lauren Lee McCarthy if you've watched theod coding train before you've probably seen me use both processing and p5js across countless tutorials and coding challenges with p5js I'm able to link to the code running in the browser right there because it's JavaScript now you might be surprised to know that while Java today seems like the farthest thing away from the web browser in 2001 Java applets were the primary way to share processing sketches on the web so Java applets are no longer supported today but the newest version of processing processing 4 which I am celebrating in this series includes many new features well suited for desktop applications so full Screen Graphics across different screens and projectors connected to thirdparty libraries hardware and more so whether you want to use processing explore JavaScript or python or try your hand at any other language or environment it's my hope that processing for is a place for you to learn and play the concepts the fundamentals the core principles of coding are the same across all of these places Beyond learning a specific language I think what's important about learning to program is learning about how to think about a problem and break it down into parts and solve it and let me tell you when it works it is very very satisfying okay so now it's time to get into this video itself I want to talk to you a bit about how I've structured things how you might watch and move your way through what is a very very long video so ordinarily in the past I've made uh courses or video tutorials or sequences like this broken up into many many many short videos you know 10 to 20 minutes each this is everything all in one it is not meant to be consumed in one sitting I've divided it into different chapters organized with a table of contents I'll include information about that in the video description on my website but hopefully if you're watching this on YouTube you are seeing that as part of the interface the experience of watching it so it's a bunch of lessons all sequenced teaching you the fundamentals of computer science and programming with processing and at the end everything culminates with a mini project that I'll show you how to build that synthesizes all of the concepts from the series while the video is going I will prompt you to take breaks I'll offer exercises it is meant to be watched in order but there's no reason why you couldn't skip around find your place using the time code links maybe you want to skip some things reinforce other things I leave that up to you all of the code that I write everything will be at the codington now what are you going to learn exactly my Approach is probably different than a traditional computer science course certainly there's no tests here I mean this is all selfdirected selflearning but the goal here is for you to experiment and play it's okay for you to not understand everything to have those happy accidents to move forwards and backwards and just discover what it is is that you're interested in trying to make without worrying about it too much you will need help there's no way to just learn all this stuff just completely on your own without talking to another human being so maybe you have a support system for yourself maybe you have some friends you're learning with maybe you're taking a class I'm not sure but if you don't I certainly would encourage you to use the comments here or whatever platform you're watching this on but the place for you to get help in terms of the coding train Community is the coding train Discord itself I'll put the URL for how you join and obviously in the video description as well that's it that's all I've got for you before it's time to get started it's time to get started you're going to write your first line of code thank you for watching thank you for being here I can't wait to see what you learn what you make and what you think of this series okay I am now going to show you how to download processing onto your computer which you will need to do before you start following the coding portions of this video I should also say that I've been recording this whole long video at different times on different days so my outfit and clothes and lighting might change here in there so I apologize for that but hopefully you'll be able to follow it's going to all be pieced together in in the perfect way that lets you just follow it all the way through but the part you're at right now is downloading processing so you will need a computer it can be Windows Mac Linux those are the computers that support processing you're going to want to go to processing.org and there's a lot on the processing website that you can look at I'm going to very specifically cover quite a bit about the uh reference under documentation but you know I certainly would encourage you to go to the tutorials examples books uh learn more about the people etc etc but here right now what I want to look at with you is download so the page should autodetect the version it thinks you should download and it is correct for me I want processing 4.2 on Mac OS you will actually probably see me using processing 4.1.2 or 1.3 when I'm doing the coding because I've recorded those already but what you will see is either 4.2 or even a later version of processing depending on when you're watching this I am on Mac OS I am using an Intel it's an older Mac so if you have an M1 or an M2 Mac you'll want to click on the Apple silicone version instead and then also here if it's not autod detecting properly you could go to Windows to grab the windows version Linux and oh there's even a Raspberry Pi version of processing which could be something you want to try someday so I'm just going to click right on here it's finished downloading I'm going to unzip and I have the processing application there so I can actually just double click and run it or maybe on a Mac I might want to go to my applications and actually move it in there and then once it's in there and you can see I have some other versions of processing that I'm keeping there I could double click it and it's asking me to make sure I want to open it which I do and there we go there's processing I'm going to show you very quickly a screen capture of the same thing happening on Windows and also in case you're curious this is what it looks like on Linux and if you have any trouble downloading and running processing there's places you can ask for help the comments here the coding train Discord and the processing official Forum as well all of which I will link in this video reference materials it's time to start talking about coding any moment now we're going to get to writing code but because this series is about learning to code through the lens of drawing images and animations I need to start first by talking about pixels and a computer Graphics window this is a rather poor drawing of any window that you might open on your computer maybe it's a browser some game and in fact processing the programs you write in processing the code will generate a window like this that you get to draw into so the first thing that you need to think about is the dimensions of this window and what do I even mean by that let's start by drawing something that looks like this maybe one day in your life many years ago maybe just yesterday who knows you took some kind of math course where you talked about a cartisian plane named for the mathematician Renee deart a cartisian plane is a flat twodimensional space with two axes an X axis and a y AIS the center of the plane is known as the origin or the point0 comma 0 an X of zero and a y of zero if I were to Mark any given point in this plane like this one I could specify the location of that Mark by its x coordinate and its ycoordinate so this is actually the point five comma 6 0 1 2 3 4 5 0 1 2 3 4 5 6 the x is five the Y is six so there's units of measurements there's a space that we're defining but the key thing to note here is there are no quote unquote real world measurements instead the measurements are in pixels so the question for you to ask yourself right now is if I were to draw a dot in the center of this window what is the x coordinate and the y coordinate of that dot you might be thinking to yourself oh I know where you're going with this look how in the center of this the origin is 0 and z and you just just drew that dot in the center that must be 0 0 and in some systems it could be but a standard rectangular computer Graphics canvas one that is in two Dimensions the origin is typically in the top left that's where 0 0 is other thing that's a little bit odd about a computer Graphics window is that here in the cartisian plane I could easily draw a point right over here which would be something like 6 for the X positive one for the Y they're negative spaces along the X and Y AIS relative to the origin point in a computer Graphics window while the xaxis is the horizontal axis and the vertical axis is the Y AIS positive numbers Point down it is essentially flipped from the cartisian plane and that means there are no negative pixels within the canvas itself now there will be a time where you want to expand quite a bit beyond this there are 3D renderers there are all sorts of ways of transforming the space that you're drawing into but at its core when you first begin there is a canvas where the units of measurement are pixels z0 is the top left we count to the right for x and count down for y so I return again to the question of what is the X and Y coordinate of this particular pixel almost all the way there to answering this question we need one more very important piece of information which is what is the width and height of this particular window there is no answer to that it's whatever you happen to Define it to be most of the processing examples if you just open them up you'll see that they come with a predetermined width of 640 and a predetermined height of 360 which which would mean if this is in the middle the X location is half of 640 the Y location is half of 360 let's all say it together now the XY location for that point is 320 comma 180 I don't know why I drew the line like that but there it is guess what it's time I think we can write the very first line of code that I'm going to write in this entire series and maybe just maybe this might be the very first line of code that you write in your entire life oh this is a momentous occasion let's all just soak it in and savor it for a moment assuming you've been following this whole series so far you've already downloaded processing as of the time of this recording I'm using the most recent version of processing 4 it's showing me a wonderful welcome message where I could click through and look at some different examples which I would encourage you to do but I am going to uncheck show this message on Startup and click get started just going to move my window around for a little bit there's quite a bit more that I should probably say about the processing environment itself how to save your code and organize your files you can change the colors and the font and all of that stuff I'll try to come back to that at some point in this series hi Dan from the future here sorry to interrupt you might be wondering why your processing window is a lovely blue and mine is this glorious pink sunset color scheme well there happens to be a theme selector built into processing I forgot to show it to you it's under Tools theme selector and there you can change to whatever color scheme strikes your fancy but I don't even want to worry about that right now I just want to write that first line of code and there it is size open parentheses 640 comma 360 Clos parentheses semicolon my program is called needed tapioca to run the code all I have to do is press this play button here and there we have it a window of size 640 by 360 just to see that this is really working what happens if I were to change this to 960 now I have a much taller window I should also note just right now I don't know why I'm showing this you now it should come back to it later but instead of writing size I could just write full screen and run it again and whoa now I have a full screen processing window but that's a bit of an aside now if you're wondering how the window just magically appeared there I'm on a Mac so I can hit command r as a shortcut to run the sketch I kind of do that just intuitively having done this for 20 years I'll be doing that a lot throughout this series rather than clicking the play button if you're on Windows it's controlr and then if you're on Linux I don't know you tell me in the comments what's your shortcut back to this first line of code let's unpack it a little bit there are lots of different kinds of lines of code that I'll be showing you how to write but this kind of line of code with this format is going to keep us happy for a very long time this is what is known as a function call for right now let's put that word function aside and just think of it as a command what is the command the command is size I hereby command you processing to create a window of size size what size what I'm waiting for you to finish that command many commands need to be modified or specified with arguments it's as if I gave you the command to walk I could tell you to walk fast or walk 10 steps or walk in the Eastern Direction here the arguments are the answers to the questions that the computer needs in order to be able to execute this command you're telling me to make a window but I don't know what the width and height is these are the arguments also sometimes called parameters and there's a kind of distinction between arguments and parameters but I'll get to that another time so for this first part of you beginning to learn to code this is all you need to know every line of code that you write for now will be a command or a function the name of that function so I'm just going to say name followed by parentheses open parentheses close parenthesis ending with the semicolon because processing as I mentioned earlier is based on the Java language you really are writing Java code with Java syntax the semicolon and I drew that in a weird way but the semicolon indicates end of line programming languages have a variety of different syntaxes some of them require semicolons some of them don't that's for you to explore As you move past this video series for now every line of code must end with a semicolon and processing will give you an error if you forget it then you optionally need the arguments remember when I showed you that full screen command it didn't need any arguments because full screen just means go full screen I don't care I don't need a size I'll just do whatever the size the screen is but here I need to have some number of arguments zero or more arguments separated by commas what are those Arguments for now again they're mostly going to be numbers but as you will soon see there are other kinds of things that can be arguments to a function to a command so here's a question for you now this is kind of fun because we can sort of play the creators and designers of processing we are inventing processing we've already invented the idea of the size command let's say I want to draw this point now in the center of the window what would you make the name of that command and the arguments for that point think about about it how about point and then I want the center which is 320 180 let's run that again do you see it let's look in there there's that point I have now drawn a single point at the center of the window at pixel x 320 pixel y 180 guess what what if I wanted to draw a line instead of a point well I could draw a line with the command line what do I need to draw a line let's think about it I need another point so maybe I need to draw a line I need to have two pairs of XY X1 y1 X2 Y2 that's the Syntax for drawing a line now where is that point on the Whiteboard let's just estimate something interesting like 520 100 look at that beautiful line so you might be asking yourself a question which is why is the line black and why is the window itself gray well those are default colors and certainly if you're a designer or if you're anyone really watching this you probably want to know how can I change the color I'm going to get to that but before I get to that let's just sit here for a moment and think about how we now learned the commands size point and line there are a lot more of these for example if you want to draw a square there is the command Square there is the command Circle there's a command for rectangle for ellipse for triangle oh we can make custom shapes like different kinds of polygons I will be covering more of these and I'm constantly going to go back and look at different shapes and I should probably talk about Arc at some point which is a way of drawing part of a circle but the thing is right you're here learning to code and I hope you're enjoying this and learning something and maybe I'm doing a you know halfway decent job of making this video but the real skill the real thing that you need to practice is not listening to somebody else tell you how to do it but kind of trial and erroring your way through it and reading the documentation which covers all the ins and outs of all of these functions CU there are a lot of them and coding is not about memorizing them or just knowing how to do it it's about figuring out how to look things up and trying it yourself so let's look at that one wonderful thing about processing is I can highlight any name of a function rightclick or control click and go to find in reference it's going to take me directly to the reference page on the processing website that explains this code there's a wonderful paragraph description there are several examples that show the function being used and here you see the syntax describe what is the name of the function line and what are the expected arguments now functions of the same name like line can take variable amounts of arguments and this is something that we'll see right now we're not drawing with a 3D renderer but a line can be drawn in a 3D space in which case it needs an x a y and a z something I'll come back to in some other video some other time but both of those are covered here once you see that syntax it's important to look under the parameters again parameters being another word for arguments X1 being the x coordinate of the first point and importantly there notice that word float that's in parentheses that might be a very strange word to you it's actually something that's going to become quite important a little bit down the line I don't want to get into all the details about what a float is right now but that is a term for number oh also point out that functions can have a return type we'll be coming back to that later and then this is nice to see like related functions that I'm not using right now but for example stroke weight is a function that allows you to vary the width of the line is it a thicker line or a thinner line um and you could look into that yourself let's click back to the reference homepage and we can now see this is all of the functions that are available in processing see what I mean there's a lot oh look size is right down there there's one we know I could look for one by typing into the filter but right now what we are covering are shapes so I'm going to go here under shape and specifically 2D Primitives there are lots of different ways to draw in processing but if you're just beginning I recommend that you start only with these 2D Primitives Arc Circle ellipse line point quad rect square triangle so let's take one that we haven't tried before how about Circle first thing I can do is I could just copy this code right here and paste it into processing there's my circle now certainly I want to scroll down and see what are the arguments and what do they mean but I could also just play around with the numbers like what if I change 220 to 100 the circle's smaller so that must have to do with the size of the Circle what if I change 224 to 500 the circle is further to the right that must be the X location of the circle and in fact if I scroll down we can see the circle function or as I'm referring to it now command takes three arguments an X location A Y location and this is kind of a technical coding term here extent extent is a generic term for size but as you're going to see with the circle if this is my circle at this particular XY location a way of measuring the size of the circle it could be radius radius is the distance from the center to the edge of the circle but processing is actually using the diameter of the circle so the extent is how wide is the circle what is the or you know a circle is uniform so the width and the height are the same essentially the arguments for Circle are X Y and diameter let's go back to 2D Primitives and let's try Square let's take this example Square copy it into our code run it and there's that square now interestingly let's think about this for a second just imagine this window is 640 by 360 the circle is at X500 y 184 let's do something to make things a bit more uniform let's put them both at 180 and let's have them both be the same size only the circle is at pixel 500 and the square is at pixel 100 what I'm expecting to see this if this is approximately xxel 100 and this is approximately xxel 500 and this is 180 we know the circle appeared here so I would expect to see the square here let's go see what we get huh kind of doesn't look like what I just drew instead it looks like this well every shape has a reference point for a circle the reference point is the center of the circle for a square the reference point is the top left of the square if I had just read the document mentation page it would explain that by default the first two parameters set the location of the upper left corner the third sets the width and height the way these parameters are interpreted however may be changed with the wct mode function scrolling down we can see yes the Syntax for the square is X comma y comma extent and related wct for rectangle and wrect mode there's a lot of information about all the possible ways you could draw a square or rectangle but I just want to talk about Corner versus Center and the default mode that we just drew is Corner because the reference point is the top left corner but if I want the reference point to be the center all I need to do is change the wct mode to rect mode Center I want to put this line of code before I draw the square and the order is really important I'm going to get that to that in a moment and now we can see I have my Square centered at 100 comma 180 and my circle centered at 500 comma 180 just for fun let's put that line between those two connecting them 100 comma 180 to 500 comma 180 and there we go look at this drawing I made if you're following along I think this might be the first drawing you've ever made with code congratulations it's very exciting let me show you an important detail I'm going to take this line of code which draws the line and I'm going to just change it and place it after drawing the square think about what is the difference going to be the line is now on top did you catch that processing is following the lines of code you are writing in order and layering the shapes on top of you each other now there is such a thing as transparency and color and I'm going to get into all of that but that's a very important detail for you to explore right now if I want to design a particular pattern what needs to come first and What needs to come second what needs to come last in order for me to execute that particular pattern so this is a great stopping point for now my assignment to you this video is going to keep going so you could just keep watching if you want but you could pause right now now and create your own design maybe make a selfportrait a little alien some kind of spaceship some kind of abstract design a flower perhaps can you design something only with lines points circles and squares or maybe you're feeling a little ambitious do you want to try one of these other shapes that is listed under 2D Primitives a rectangle for example is just like the square only we have an extra argument instead of one argument for the width and height we have an argument for the width and the height separately a triangle is three points a quad is four points probably the most difficult one on here is Arc so I'll come back to that at a separate point to look at it specifically but see what you can create here's my version of the assignment a character named z that I created for the learning processing book which this video series mostly matches looking at this I realized there's a couple things that I really should mention here number one is you're going to want to save your code so here is the code that I wrote while I was going through this tutorial if I were to go to file save it's going to pop open with a prompt for me to save my sketch every sketch has a name and is saved into a folder on your computer so I'm going to call this coding train example one maybe I want to think of a better naming convention but for now I'm going to call it that and I'm going to hit save if I go to file Sketchbook you can now see processing has its own window that's showing me all the sketches I've saved to my Sketchbook Zoo which I already had preloaded in there and coding train example one if I were to click on it and say show folder it's going to take me to the SketchBook folder itself there you're going to see a lot of extra stuff because things like different libraries you might use we'll get into that later examples that are there there's modes there's tools all sorts of stuff that we don't need to worry about right now but if I go and look in the zoo directory or the coding train example one you'll see a file with the pde extension that is a raw text file with your code stored in it how you want to manage more broadly the file system on your computer computer that's for you to sort out easiest way to work with processing is just to use the default sketch folder and you'll also notice something else in here body head eyes legs that doesn't look like code it doesn't follow this syntax that we've described and in fact it's kind of grade out well these slashes at the beginning of this line of code that says head indicate to processing that this is a code comment a comment is a note to self something you're writing in there to annotate what you've been working on that's for processing to ignore as it's executing the code itself this is incredibly useful and I highly encourage you to overdo it right now and put comments all throughout your code it'll give you a nice habit for later this is really good if you're teaching because you can put explanations in there but it's even good if you're the only person ever working on this piece of code because you might take a break from it you might come back to it you might say like oh to do let's add some hair so I can add a little note to self of something I want to do later code comments can be anywhere you want with anything in there they've just got to be all on one line because if I try to continue that comment onto the next line without a slash slash and run the sketch it's giving me syntax error processing has kind of got it wrong this isn't a missing semicolon this is like you forgot to add the slash slash for the comment so let me put that in let's take out the semicolon here and run it ah now we really are missing a semicolon weirdly it highlighted the line below because even though the semicolon is missing from here it discovered it as it got to the next line and there was no semicolon before telling it to stop so this is what I want to emphasize to you when you have a mistake in your code an error message will pop up Below in the console but very often that error message will be misleading because it's just doing its best job trying to guess what your intentions were processing is actually pretty good and has a bunch of friendly error messages in it I'd be curious so you can add into the comments of this video of like what error messages are you finding that I haven't covered this is probably also a good time for me to remind you that you can join the coding train Discord where you can post Forum messages to ask for help and of course there's also an official processing Forum where you can also ask your questions as well let's try to see if we can get one more error let's leave out the diameter parameter for Circle run the code and here we go this is a great error message the method Circle float float float in the type P applet oh my goodness what's paet well pet is sort of a fancy name for your sketch as a whole we could get into why that is but that's going to send us off on way too many tensions is not applicable for the arguments INT in wait but I put in two numbers that should be float float oh data types we're coming we're going to get to data types what's an integer versus a floating Point number but we can see here that this error message is telling us we're missing a particular argument we're missing that last argument for the diameter of the circle all right I fixed the errors took out those extra comments there Zoo take some time to try your own and when I come back I'm going to look at adding color to this sketch okay how did that go how'd your drawing turn out I'd really like to know in the video description I I'll add some information about how you can share that with me if uh if you feel so inclined but now it's time to make our world a bit more colorful if you've watched any of my videos before you know I love a good rainbow so now is the time to make everything rainbow themed if we can so before we were looking at the Syntax for issuing a command or function call and I made a list of some of the 2D primitive shapes you could draw let me now make a quick list of the commands that you could use to specify colors background stroke fill so here are three to start background stroke fill there are more but these are the three sort of core basic ones and each one sets a color for a different aspect of what we're drawing in the processing window and I I'll be getting to the details of that in a moment but all of them require arguments that specify what color it is we want to set so how do we Define color as an argument can it be a number yes the simplest way to start with color is to Define color as a shape of gray or grayscale a grayscale color value is defined as a number with a range from 0 to 255 and I'll get into why that's the range in a little bit zero is the value for black 255 is the value for White and everything in between is some shade of gray so maybe 127 is a medium gray it's useful I think to think of this as a dimable light if you turn the light all the way off total darkness all the way up bright white light for any of these functions if I were to put just a single number inside the parentheses as its argument it's going to set the color to its corresponding grayscale value let's look at that in practice circling back to this example that I've been building let's add the function background I'm going to put it right after size again I'll come back to the order in a moment a background of zero fills the entire canvas with black 255 fills it with white so background is the function to place a color over the entire canvas of the processing window stroke is a function that sets the outline color of any shape so in the case of a rectangle stroke sets the outline fill is a function that sets the interior color now let's try to change the color of the circle so I can give it a stroke of 127 let's give it some gray value and maybe a fill of zero let's see what that looks like I could zoom way in on that Circle ir and I could see that there is a gray outline there but this is probably a useful moment for me to let you know about an important function to modify the thickness of the outline of shapes or the thickness of a line color and that is stroke weight I'm going to write it down here because it's technically not a function that assigns color but it is quite tied to the color functions by default the thickness of any line that you draw in processing is one pixel so if you want it to be more than one pixel that's where stroke weight comes in so it's probably more visible to you now the fact that the line is gray and it's a bit thicker but wait a second what's going on the rectangle also has a fill that's black and an gray outline that's thick and the line is thick and gray order of your code is very important anytime you call any of these functions it's as if you know processing picked up the pen the pen with a certain color I mean this one's purple and of a certain thickness it's going to keep drawing with that forever until you tell it to switch to something else for example if I were to take all of these lines of code and now place them above the square you can see that the square is black with a gray outline and the line that I'm drawing after the square is also thick and gray but the circle has a thin black outline and a white interior that's because I drew the circle without specifying so it used the defaults and then picked up that new pen for everything that came after it so if I want the circle and the square to look different to have their own stroke and fill I just need to add the right function calls before each of them make a stroke weight of eight a stroke of zero and a fill of 51 let's make that fill 175 so we can see it more clearly now we can really see the distinct stroke and fill of each one of those shapes and I can also be specific for the line I'm going to say a stroke weight of one and a stroke of zero there we go this is all well and good but you're not here just to make grayscale designs although there's something kind of nice about that you're here for the full rainbow of Glorious wonderful color as I will get to there are plenty of ways to specify the full range of possibilities of color in processing but the core the foundational the basic starting point for you and me right now at this moment is referred to as RGB color unlike gray scale which just has one value RGB color is indicated by three numbers 1 2 3 RGB or red green blue I talked about the cartisian plane as something you might have done while back or currently in school something you might have also studied or tried at some point maybe when you were really little is like finger paints and they're primary colors and you can mix them and you can get different colors out of mixing the primary colors it's been a while since I used actual finger paints but this is all operating under the same principle the idea is that with a some amount of red some amount of green and some amount of blue I can create any color of the rainbow but the key concept here is this is not like mixing paint this is like mixing light as if I had a red FL flashlight a green flashlight and a blue flashlight and was turning them up and down and on and off and Shining them on various surfaces each one has a range from zero to 255 and again put a pin in it got to come back to why is this the range again and how do I change that if I don't like that range it's coming so let's think about this if I wanted pure red I would put the red dial all the way up to 2 55 and the green dial down to zero and the blue dial down to zero in practice that means I'm going to give three arguments to the function background or stroke or fill the first one being 255 second being zero and the third being zero look at that red background now what's your favorite color mine is purple so I think I could get a purple by adding some more blue let's give it like 150 and a little more than halfway way a blue that's a lovely purplish tint there I'm going to make up some numbers to put in the various strokes and fills so we can see that as well look at my design actually I'm quite pleased with that guess that's more of a pink than a purple but close enough I want to talk about a few more details related to color the range how I would adjust the range but before I do that this is probably a good time for you to just pause and see if you can add different RGB colors to the design you made previously take your time I'll still be here actually I'm just going to keep going but you'll have to pause the video all right how did that go if you have questions again leave them in the comments or the various places that you'll see in the video description where you can get additional help before I move on let's unpack this a little bit more I'm imagining that this seems kind of odd to you like why 255 well one thing you might have to realize here is if we're counting all of the possible numbers from 0 to 255 the total possible amount of numbers is actually 256 I know this is like what what are you talking about right now this is actually really important because this is going to come back again and again in various things we do with code think about it if the range of numbers is between 0o and four and I'm talking about whole number so obviously there's the distinction there there are five whole numbers 0 1 2 3 4 that's five numbers 256 might seem like an odd number but it's actually kind of well it's an even number but it might seem like a strange choice but it's a pretty important number let me show you why let's start with the number two let's double that number and make it four let's keep going then we've got8 then we've got 16 32 64 128 two oh 256 it is a power of two this might be something you're unfamiliar with depending where you are in your life's journey around mathematics but a power of two is any number that you can get starting with two and multiplying Itself by two and two again and two again and two again this is actually two to the eighth power why is that number two important now you might be familiar with the idea of binary numbers this code that we're writing is all this kind of highlevel language written with some words in English some strange syntax but it's all a mechanism for us to be able to write the instructions in a language that feels somewhat more humanlike than machine language because the language of computers is just zeros and ones a single bit one little switch onoff switch inside the brain of the computer is a number zero or one the sun is coming in by the way did you notice that there are two possibilities so if I were to have two bits I have four possible ways I can configure two zeros or ones if I have three bits I have eight possible ways if I have four bits I have 16 possible ways well it turns out that we are going to store color values in eight bits of the computer or one bite there's one bite in memory of the computer in its brain where it can describe the red where it can describe the green and where it can describe the blue so this is why you have that range we are so far removed from the lowlevel machine language in processing that this is something that we can alter if we don't want to think about it this way if we prefer to think of the red value as a number between zero or 100 we can like 0 to 100% we can in fact we don't even have to only think of color as RGB there are other ways to Define color another system for defining color is known as Hue saturation brightness this is a bit Beyond where I want to get right now I will put in the video description a link to the online book programming Design Systems by run Madson which has a wonderful chapter about color goes into HSB or sometimes called HSV color in more detail but for our purposes the function that I really want to make sure to add here where you can alter and customize how it is that you define color is called color mode and I realize I forgot two other functions that I need to add to this list but let's go back and look at color mode for a second color mode changes the way processing interprets color data again I don't want to get too far into this this is something that I think will prove more useful later and um a lot of the examples here are using Code Concepts that I haven't covered yet but if you're really interested in how color is defined and can be customized I would certainly encourage you to read through this in more detail here's a really nice uh version of this uh that I think we could use right now just to see how this works if I were to call color mode and set it to RGB 1.0 this means that the range of color is now no longer between 0 and 255 but between zero and one so 0.5 or 1/2 essentially would be like 50% red for example to make this a little more understandable let me adjust this a little bit and change it to 100 what this means is the range is now between zero and 100 for every color value of course it's doing weird things because I've written numbers that are bigger than 100 so it's going to just like consider those as maxed out but you can see that already are the colors changed just for background I can change this to like 100 0 50 and this would be full red no green and half blue okay so let's put color mode aside now there's a really important thing that I've neglected to mention and let's get to that right now transparency otherwise known as Alpha you could also think of it as opacity something being fully opaque means you can't see through it something being fully transparent means you can see completely through it almost as if it isn't there at all in fact fact I can essentially modify this idea of RGB color and call it RGB a color for red green blue Alpha so this is adding yet another bite to the way we Define a particular color Alpha also having a range between 0 and 255 Again by default reason why I mentioned color mode is I actually often like to change this to between Z and 100 cuz it's useful to think of transparency for me between 0% and 100% let's see what this becomes in practice now it doesn't make sense at the moment for the background to have any transparency this is something we could come to again later but what if I want the square for example to be slightly transparent The Fill of this square is currently a nice yellow full red full green no blue let's add a fourth argument for transparency and let's give that value 150 remember the full range is between 0 and 255 so that's just a little bit transparent hm it looks kind of orange now why is that well it's mixed essentially with the pink that's behind it to make this a little bit more clear let me remove this line I'm going to move that square all the way over to pixel 400 and let's make the circle a little bit bigger as well look at that we can now see how the square is transparent it's blending with whatever color is behind it and again to be clear only the fill is blending the outline is not transparent the default value would be 255 fully opaque for any shape let's make it even more transparent set that value to 50 now there's barely any color there from the square put it back to 200 make it more opaque and there we can see so again this is something you can really play with the relative transparency of different shapes and how you place them will create all sorts of different designs the order of course is again very important I think it's also important for me to say here and maybe this is obvious to you that it's not actually transparent right this is still just a flat screen and each pixel just has one color but processing the rendering engine behind the scenes is saying okay you have this yellow color it's on top top of this blue color this one is transparent I'm going to do some math to blend those colors together and this is something I could also get into more there is something called a blend mode and there are different ways to blend color but the default way is just by essentially averaging the colors together and they're they're only averaged if I took 50% of one or 50% of the other but that's essentially the math let me take 75% of this color 10% of this color depending on the relative transparency levels oh I'm almost done with color but I realized two more two more functions I really want to mention before I move on whiteboard is getting to be a bit of a mess here but let's add them in no stroke no fill now the reason why I just thought of them is because I can essentially create no fill by setting the transparency to zero setting the alpha that is to zero that is no fill if it's fully transparent 0% opaque there's nothing there I just see what's behind it but it's rather silly or inconvenient to write it this way when instead I could just say no fill so Phill zero remember is not no fill that's black that's putting the fill of black no fill means fully transparent for example for the stroke for the circle I can also say no stroke so now I've got a circle that's fully opaque with no stroke and I've got a square with no fill that has a stroke all right as with everything that I'm going to be doing there's so many more ways we could expand on this stuff but this is a good foundation to start with about color I have taken my Zoo drawing added some RGB color some transparency I even threw in a color mode there to change the alpha range between Z and 100 why don't you try doing that now with your own design give that a try maybe take a break for a little while come back guess what we're going to do next this drawing this Zoo character it's static nothing about anything I've done here animates or changes as the program runs this is what I would like to tackle next and we are back and ready for the next step did you take a break if you didn't take a break maybe just get up stretch move your body around if you can take a little break for yourself because speaking of moving your body around I have something to say this is pretty exciting you've drawn with code you've added color you have some kind of design that I am just picturing as just beautiful and wonderful in my head but it doesn't move we'd love to see Zoo do a little dance Bounce Off the edges of the window all of that is possible but we're missing a key fundamental concept here a concept that I will refer to as the flow of the program the processing flow if you open up a website you're clicking around interacting with things things change a game it starts the score is zero you press some buttons you move around you increase your score programs happen over time they run over time this drawing of zoo is essentially a static program it executes one thing this single drawing and stops how can I create a processing sketch that runs over time where things change over time based on interactions or some kind of algorithm in processing the flow of a program at its core is defined by two fundamental concept ceps welcome to your two new best friends setup and draw let's think about them this way let's say you're designing a game when the game begins a lot of things must be initialized maybe you start with a score of zero you have three lives your health is at 100 the level is level one those are all the things that happen once at the initialization point of the game that is setup then there are other things that happened if the game is Space Invaders for example there's a lot of things that happen over time the spaceship moves around and flies the aliens come in this you increase your score you lose your lives all of that happens over and over again over time forever essentially until you quit the program that is draw setup is initialization it's things that happen just once draw is things that happen over and over again forever the forever of course being in quotes although it would be an interesting challenge to see if we could get a processing sketch to run forever these are two fundamental concepts that we need to introduce to our processing sketch and the way that I am going to bring these into the sketch is with something known as a block of code a block of code is a organized collection of lines of code that sit in between two curly brackets it's going to be hard for me to draw these but I'm going to do my best we have an open curly bracket and a closed curly bracket and some number of lines of code in between those two curly brackets so we are going to define the setup block with curly brackets and the draw block with curly brackets if you're following along you could expand on whatever design you created so far but I might suggest right now you start over or at least heavily simplify that particular design I've taken my example and taken out the line and the rectangle just simplified the color and now I have just one single Circle appearing in the center of of the canvas I am now going to add the setup and draw blocks of code to this example I have typed in quite a bit of new strange unfamiliar syntax which unfortunately it's going to feel kind of wonky and weird and uncomfortable for you for a little while still don't worry by the time this video ends however long it is I will have covered all the ins and outs of everything I just typed in there but for now I want you to focus focus on two things I want you to focus on the keywords set up and draw they're bolded there by processing and the open and Clos curly brackets associated with those the setup block and the draw block notice also how the lines of code that are inside those curly brackets are indented I typed that all in quite of quickly so you might have missed how did they get indented well I could have manually done that with spaces or tabs oh boy spaces or tabs but actually what I did is use one of my absolute favorite things in the world of coding and processing it's right up here under edit and it's Auto format command or on Windows probably control T but this is the key thing I want you to focus on setup and draw open curly bracket and close curly bracket blocks of code it might seem like I'm overemphasizing this but this kind of a block of code is going to extend to so many things that I show you throughout all of these fundamental building blocks of programming the computer in processing so if the flow is defined by setup happening once and draw happening over and over again forever if you will what kinds of lines of code should go in the block of code that is set up versus the block of code that has drawn in this case I'm programming just a simple design so there's not a lot of options but let's consider first the line of code size well certainly size is an initialization condition for my processing sketch it's a thing that defined at the beginning it's not something that I'm defining over and over again so size should go here background is kind of a really interesting question should it go is it something that I Define at the beginning the background of the sketch or is it something that I Define over and over again in draw hm think about that there's no right answer to this for right now I've placed background in setup which is a little bit odd but let's go with it let's go with it usually I do it the other way around when I'm demonstrating this but let's see where this leads us draw is named draw even though it's a loop a forever loop it's name draw because it's typically where you will draw the stuff it again for any design that you're animating you've got to draw it move stuff draw it again move it draw it again we haven't gotten to the moving thing but we are we have gotten to the drawing thing so maybe in this case we we've got a call to fill we've got a call to Circle uh Etc so this is what we've got we now have a program that runs forever over time let's get even more detailed about this for a moment what's actually happening remember processing executes the lines of code in order it was very simple for us to follow that order when it was just a linear list of lines of code now we have these two blocks but I'm going to talk you through it the first thing that happens is size the next thing that happens is background then set no stroke set a pink fill draw a circle what happens next draw Loops back to the first line of code so we set no stroke we set a pink fill we draw the circle no stroke fill Circle no stroke fill Circle no stroke fill Circle no stroke fill Circle this is what's happening but because nothing ever changes no stroke fill and circle are executed with these same arguments every single time we never see anything different and Visually it appears static to us what we need for it to animate for it to change is to introduce variability into our sketch now at some point in a moment I'm going to erase this whole whiteboard I'm going to write variables across the top and we're going to unpack all sorts of details about how you define variables and use variables and all of that but a quick little entry point we just gonna dip our toe into the variable water here is to use something that is known as a builtin variable in processing processing comes with a whole bunch of these and they're quite fun and quick and easy to use two variables that are really going to just explode the possibility space of what we can do even right now are Mouse X and mouse y so I'm going to write variables we got a little bubble here and these are two variables that we're going to get to use right now we can use them anywhere want in our code but they're going to make the most impact if we use them in combination with the circle command inside the draw Loop where am I going with this let's think about it wouldn't it be nice if I could just say hey you're about to draw this circle instead of saying draw it at pixel 320 draw it at whatever pixel wherever the mouse is whatever pixel wherever the mouse is now of course if I run that it's going to tell me crazy syntax error it can't figure out what the heck I'm talking about that is not code that might be something I like to write as a comment and the way to do that within the function itself is to actually use the builtin variable Mouse X Mouse X is a standin for whatever value is stored somewhere in the computer's brain essentially the right word for that is memory it's keeping track of where your mouse is we can gain access to that value through the reference name Mouse X and processing behind the scenes has defined and set that up all for us let's run this sketch now oh whoa what is going on so first of all I'm just smearing this circle across the window let's get a let's let's let's try to do a bit more here at the mouse X and mouse y y position let's add Mouse y let me also make it a little bit smaller just 50 pixels in diameter look at that I have a painting program think about this wait a sec why is it smearing the circle to answer that let's go back to how we divided up the code why do I see the previous Circle well let's follow this again size background fill Circle fill Circle fill Circle size fill the background draw a circle draw a circle draw a circle draw a circle I never said Erase the previous Circle the computer is always going to literally follow exactly what you say to do so I would need to if I want to see the illusion of it moving I would need to disappear that circle before I draw the next one is there a like erase Circle or should I draw the circle the same color as the background guess what I could try to do goofy things like that but this is exactly why this placement of background is so critical if I were to move background into draw what that says is draw the background draw the circle draw the background draw the circle and look at that now I have this circle that moves perfectly with the mouse the but this opens up another kind of weird question at least in my mind that I really wondered when I was first working with processing many years ago if it's drawing the background and then the circle and then the background and then the circle shouldn't I see like this flicker like background Circle background Circle well the answer to that is is no because we we're not seeing it but but also yes if that is exactly what we were doing here we would see that flickering but processing knows the raw block of code is very special it's actually doing all the steps off screen like in its brain in its memory and at the end of draw it then updates the display this is referred to as double buffered animation because the next frame if you will is being rendered in a separate buffer offscreen and only when it's done it gets displayed then we render the next and display it so again I'm getting a little in the weeds of the sort of lower level mechanisms of the computer but it is an important detail to understand and this is going to come up as you do more things within the draw Loop itself that it only updates when it gets to the end okay I've now defined the flow of the program let me move background back into setup what would happen do you think if I add some Alpha transparency to the circle let's actually make it very light like I'm going to just give it an alpha of 25 look at that if it sits in place it's rendering that Circle over and over on top of itself blending with itself which thickens the color but as I move it it's a very slight fuzzy color so even with just this one simple addition we've created this really fun quite Dynamic drawing program there's so few lines of code here maybe this might be a good moment for you to pause and play around and make your own version of this how did that go I don't know you're probably just still watching the video that's fine that's fine too I leave it up to you I think there are some other really important aspects to the flow of a program for me to discuss before we move on and really unpack all there is to know about variables I said that the processing sketch is organized into two box of code setup which happens once draw which happens over and over again but there are other things that could happen specifically there are events that could happen let's talk about a certain kind of event what about if you were to click the mouse so I am now adding to my list three different blocks of code a setup block initialize the program a draw block just do it always whenever you can you should be doing draw Mouse pressed is what I would call an event this is something that's just sitting and waiting it might never ever run if a mouse is clicked in the forest does anyone run the mouse pressed code I don't think that that's that goes but this is the idea this is code that's just sitting there and waiting if the event is triggered by in this case the user the person who's clicking the mouse run that code so maybe something that we could try is what if background gets moved into mous pressed let me add one more block of code mous pressed again what is void why are there parentheses there let's get to that later for now focus on the name of the block of code Mouse pressed and the open and close curly brackets which Define the block of code itself and any lines of code that are inside there will be ex executed whenever you click the mouse background zero so rather than remove background now from setup I still wanted to draw that background when the program starts I just wanted to draw it again whenever the mouse is pressed making my pattern clicking the mouse I'm G to draw d a and what fun I'm writing the letters of my name clicking the mouse and erasing it and drawing some more another thing you might be wondering about this the order of the code is obviously really important right do I draw the circle on top of the square or the square on top of the circle which one comes first square or Circle that order that I'm referring to is the order inside of a block of code but these blocks of code setup draw and mouse press the order that I write them does not define the order that they run the order that they run is defined by this builtin understanding of the flow of a processing sketch so setup could actually be down here and mous pressed could be up here and this is the identical sketch nothing has changed processing is always going to look for the block of code called setup run those lines of code first then look for the block of code called Draw run those lines of code then look for the block of code called Draw run those lines of code so on and so forth and if you ever click the mouse it's going to Skip and look for that block of code called Mouse press so it's important to not that however you absolutely want to keep these as separate and make sure your curly brackets are in the right place if for example I removed this curly bracket here and put it down here by accident then my setup block is actually defined inside of the draw block I'll hit autof format so we can kind of see that indentation now this to me looks horrifying I am about to like jump out of my skin here but for you like well that seems fine like setup is there draw is there who cares but this is actually quite important these blocks of code need to be Standalone we will see nested blocks inside of blocks of code that's going to come up as we get further down this road but not with setup draw and mouse press let's just run to see what happens yeah fortunately it's giving us a syntax error so it won't really run it that error is not super helpful but I can see that this setup lock of code needs to be here uh separately outside of draw now here's my challenge to you Mouse X and mouse y are incredibly useful in all sorts of weird and wonderful ways I have used them here in probably the least interesting way it's very intuitive it feels like what I'm supposed to do right the circle follows the mouse but Mouse X is just a name for a number Mouse Y is just a name for a number I could switch them Mouse y Mouse X oh this is really weird as I move the mouse left and right it goes up and down as I move it up and down it goes left and right I clicked by accident there by the way that's why it cleared so look at that this is very hard for me to do it feels wrong but the processing doesn't care it's just going to take the number and use it wherever you use it I could put this back at the center and give Mouse x to the red value and mouse y to the blue value and we can see the color is changing as I move the mouse around because the value of red is increasing and decreasing the value of blue is increasing and decreasing maybe wherever I click the mouse will determine the next background that is drawn so now the mouse position determines where the circle is as well as the background color when the mouse is clicked okay let's click the mouse who click the mouse click the mouse let's think about this a little bit I kind of like what I've done here but what is the range for example of mous X the range of mouse x is 0 to 640 the range of mouse Y is 0 to 360 but the range of color is between 0 and 255 so processing kind of figures out something to do regardless but wouldn't it be nice if those ranges matched remember that color mode I told you about before the color mode is something that I could switch while the program is running but this is another good example of something that very typically would go in setup I am defining how I'm going to use color over the course of this entire program color mode the arguments to color mode are what kind of color in this case RGB then what is the range for red I want to match it to the width of the window the range for green the height of the window and then I'm not really using blue here but let's just leave that as the default now when I run this sketch if my mouse is all the way over to the right and all the way to the top I should have all red and no green all the way to the bottom all the way to the left no red all green if I'm all the way in the bottom right that'll be yellow right all red all green perfect it's probably pretty rare that I would want to have a different range for red than green and blue that could get very confusing but I'm just showing you you have a lot of flexibility here this is also a really good moment for me to mention that there are more builtin variables in processing Beyond just Mouse X and mouse y here are two that are also incredibly useful width and height these num numbers although they stay constant over the course of the sketch dynamically reference the width and height of your window whatever the numbers you originally put into size simplifying this program for a moment taking out Mouse pressed putting background back in draw and getting rid of color mode let's say we want the circle to always be in the center of the window 320 180 get rid of the alpha now if I were to change my window size the circle's no longer in the center it's still at 320 comma 180 relative to an 800x 600 canvas but I can use those variables width and height as well as apply any kind of arithmetic operation plus minus multiply divide and in this case I want to say half the width or width divided by two to do that I use a a slash for divide height divided two no matter what size the canvas the circle is now always in the center I can also use the same technique to place an object's location relative to the mouse here I now have a circle that's Mouse X plus 50 and a circle that's Mouse xus 50 the use of these simple mathematical Expressions is going to appear constantly throughout all the rest of this video series plus minus multiply divide these are what are known as arithmetic operators Plus for addition minus for subtraction asterisk or star for multiply and slash for division all right I have now covered everything I wanted to say I'm sure I missed a few things about the flow of a processing sketch I'll leave it to you whether you want to go back to an earlier design that you tried if maybe you can make a smile into a frown by moving the mouse or wiggle some antenna of some kind of alien creature you designed around but I would encourage you to simplify what you're doing in the next section after you've tried a little bit of code your own hopefully taken a nice break for yourself I am going to cover everything there is to know about variables specifically how do you go beyond using the builtin variables in processing to defining and creating your own variables see you there in just a moment all right I'm back I hope you tried a few things with code I hope you took a nice break for yourself and are ready to dive in to variables in processing now we've already been using variables Mouse X Mouse y width and height but what are those technically speaking well the computer has something called memory it's a place where it can store information I talked a little bit about how information at its lowest level is encoded at zeros and ones we don't really need to worry about that here the point of why I'm bringing this up is when you use the term Mouse X in your code what that actually is is a Alias it's a word that stands in for an address in the computer's memory at that address in the computer's memory is the information you're looking for the exposition of the mouse on a technical level that's what a variable is it's a word that points to an address in the computer's memory where information is stored it's what lets your sketch keep track of information over time time if you are making a game you need a variable for score what level you're on how many lives you have left all of those things and here we see this in action in this sketch I've got the variable Mouse X wherever I put that into the code processing will then go look in memory find the location find that number and use that where it draws the circle itself but what if and there's another sketch I have running here right above it I want that Circle to move on its own and I want it to bounce off the edges as it move around this is a goal I have at some point I want to write all the code for this bouncing ball sketch and this section about variables is the start of that in order to execute this Vision I have I need to have my own variable one that I make up and that I bring to the program not one that's built in let's simplify and replace Mouse y with just a number 180 and now I have a circle that just moves its Exposition according to the mouse What if I I wanted to make up my own variable let's call it Circle X if I run the sketch now I get an error message Circle X cannot be resolved to a variable if I want to introduce new variables into a processing sketch I have to follow Three Steps step number one declare the variable in order to declare a variable in processing I need to specify two things the type or more specifically the dat data type what is going to be stored inside the variable and then the name of the variable what do I want to call the variable in this case it's Circle X followed by a semicolon let's go and add this into the code now this is a variable declaration int Circle X int is the data type int stands for integer that's what's going to be stored in the variable an integer is a fancy word for number or whole number so 1 15 0 3 these are all integers the name is circle X let's list out a bunch of common data types that you might use int for integer any whole number positive or negative float is for any number that is a decimal number so something like 4.31 926 that's a floating Point number string is a data type for text a string of characters so rainbow for example in quotes is a string text and strings are really important but in this series I'm mostly going to focus on using numbers and actually floating Point numbers are the most convenient things to use because it allows any kind of mathematical operations to work for the time being we can actually think of let's just use our data type as float for everything there I've now declared Circle X as a float so what just happened by the way when I say float Circle X semicolon what happens processing tells the computer it needs some space in memory however much space it needs to store a floating Point number it allocates that space and then assigns the word Circle X to that memory address so now Mouse X will always pull up whatever data is at a particular address in memory associated with mouse X and circle X will always pull up whatever value is in memory associated with circle X but what is there that brings me to The Next Step initialize the variable I need to give it an initial value to be stored in memory coming back to the code I'm going to do that inside setup this is what is known as an assignment operation I'm assigning the value 320 to Circle X the variable name equals some data that must match whatever the data type is that I declared the variable as I can't say Circle x equals rainbow because Circle X is a number not a string processing which is built on the programming language Java is strongly typed if you're going to make up a variable you've got to say what you plan to put in that variable and you've got to stick to it by golly other programming languages are weekly typed or Loosely typed like JavaScript and there are pros and cons to each I don't want to get into that right now we can have a long discussion about that in the comments if you want but if you are going to work with processing you have to get used to the idea of specifying data types so if I have initialized Circle X as having the value 320 that means 320 is now stored in the computer's memory associated with the variable Circle x what is the last step use the variable I mean technically this is optional you could declare a variable you can even skip initializing it never use it and no one would be the wiser but ultimately the point of doing this is because you want to use the variable you want to draw this circle at the value Circle X so to get there you're going to first need to declare it initialize it and then it's time to use it let's go make sure we have all three pieces of these in our code and there you have it step one declare the variable of type float name Circle X step two initialize the variable use an assignment operation to say Circle x equals 320 step three use the variable I'm putting Circle X as the first argument to the function called Circle to draw The Circle at x value 320 here's a couple more really important details about this number one the name of your variable so there are requirements things you can can and cannot do in a variable name and then there are conventions things that would work if you put them in the code but are maybe not what programmers typically do first thing requirements start with a letter no spaces or special characters other than underscore and actually the underscore is also okay as the starting character Circle X is fine Circle uncore X underscore Circle X but you couldn't have a variable called 2 Circle X that would not work now those are rules there are also some conventions start with a lowercase character so don't capitalize the first letter of a variable name capital letters are generally reserved for something that we're going to do later later in this course when I start talking about classes and objects you also might notice here how I capitalize the X I just did that instinctively Circle capital x the reason why I did that is there is a convention it's called camel case to if your variable name joins multiple words like rainbow unicorn you would capitalize the first letter of the second word so I'm just going to write right here camel case Some people prefer to use underscores to join multiple words rainbowcore unicorn the truth of the matter is everybody has their own personal style and tastes about how to name variables you'll see how I'm doing it over the course of this video that you're watching I expect you'll develop your own style your own kind of way of naming variables maybe English isn't your first language and even though you're kind of stuck using a lot of English words for programming in processing right now your variable names don't have to be English words another important somewhere in between a rule in a convention is don't name your variables other kinds of reserved words in processing so I'm just going to write that over here avoid reserved words for example you wouldn't want to name your variable float processing will be completely confused used and won't work you probably don't want to name your variable Circle or stroke because those are names of functions inside of processing you can get away with that sometimes but it's just going to cause confusion so I would just avoid it at all costs okay one more very important detail I gave you these three steps and I kind of showed where in the code I put them but I didn't really talk about why I put them in particular places let's think about where it is is that I am going to declare a variable the placement of the variable declaration is critical to how you able to use the variable throughout the course of your sketch notice how I put it at the top float Circle X it's on its own outside of the blocks of code setup or Draw this is because I want Circle X to be a global variable meaning I want to be able to use Circle X anywhere in my code in setup in draw in Mouse pressed and all the future things that you haven't learned yet you can decare variables in other places in the code I could declare it in setup or I could declare it in draw but it then becomes something known as a local variable we don't have any need for local variables really right now so I'll come back to that when it comes up in future examples that I'm going to write where they will be needed for now it's simpler to just say let me make all my variables Global let me just list all of the variable declarations at the top of the code but I'll make a note here Global versus local just to remember to come back to that at some point now where should the variable be initialized in this case it makes sense to initialize it in setup this is the initial value of circle X I want to assign it when the program begins the code that runs when the program begins is in setup however even though I took all this time to talk about declaring the variable and initializing it as two separate steps because technically they are two separate steps and there are many times where you need to separate those steps it's typically much more convenient to do them all in one line of code so if I want to adjust this code and simplify it a bit I can actually say float Circle x equals 320 I can delete this out of setup and I can say declare there and initialize the variable there same exact result while I'm at it I should also point out that if I forgot to initialize the variable and I run this sketch look at where the circle is it's at the pixel zero in the case of numbers processing will actually assign variables an initial value of zero but generally speaking I prefer to explicitly initialize to a specific value even if I want to initialize it at zero because then there's no confusion I don't have to question what is the default value for this all right now the last step use the variable where to use the variable well if it's a global variable you can use it anywhere in your code however you want to and what it is that I want to do right now is I want to see that Circle move from left to right that's why I'm here that's why I made up my own variable so the value of circle X can vary this is another way that a variable can be used we've used it as an argument to a function now I want to use it in an incrementation operation I can take advantage of the fact that draw is looping right right now every time through draw Circle X has the value of zero but what if it has the value of zero the first time through draw but then it has the value of one and then two and then three and then then four it'll start to move across the window how do I do that Circle x equals Circle x + one now this looks odd what H something can't be equal to itself plus one this kind of incrementation operation which is another assignment operation just like I'm saying Circle X is equal to zero now what I'm doing is I'm saying Circle X should be equal to itself + one anytime I write a statement like this in code I always evaluate the right side of the equation first so if Circle X is 100 I evaluate 100 + one I have 101 and that's what the new value of circle X is equal to guess what draw Loops again it's equal to 102 Loops again Circle X is equal to 103 let's give this a go look at that Circle move what if I wanted to move faster well I could say Circle x equal Circle x + 5 now every time through draw it's moving five pixels oh goodbye Circle we'll never see you again now in order to have it change direction and move back I'm going to need a whole other concept that I'm going to be covering later but for right now this is a good moment for us to remember that we have the mouse pressed event so what I could do potentially is I could reset the value of circle X back to zero whenever I click the mouse so now I'm using the variable in multiple places I'm using it as an argument to the circle function to draw a circle I'm using it in an incrementation operation to increase the value of circle X every time through draw and I'm using it in Mouse press to reset its value run this sketch circle's moving to the right anytime I click the mouse it goes back to its original position okay it's about time to take a break and let you play around with this and maybe try adding a y variable a size variable multiple shapes all sorts of things you could do but inevitably as you start to do this Things Are are going to break and not work as expected and this is one of the big challenges of programming and one of the things that's almost impossible for me to really demonstrate to you and it's something you have to just kind of struggle through yourself is how to debug your code one of the tricks of the trades for figuring stuff out as you're working is using the print or print line command for example right here in setup I can say print Ln for print line hello and in fact in a lot of programming courses and learn to code types of environments if you're working purely with text this would be the very first program you would write print hello world but a hello world in processing is more like draw the circles to the screen but we can get a version of that well now when I run the sketch you can see right there in the console the word hello is printed out now so far the amount of code we've been writing is very little I've done this multiple times over many years so I haven't made it any mistakes yet you will no doubt make mistakes and I at some point in the course of this whole series will make mistakes so I'm going to try to leave those in and show you little debugging bits as I go but right now I'm going to have to artificially engineer something so let's say I hadn't really been paying attention and I put in uh a th as the initial value for Circle X and I ran the code and I don't see the circle at R I'm really just wondering like well why don't I see the circle it should be there I meant to draw it on the canvas so something that I could do is I could say like hm why don't I look at what the number that's stored inside of circle X is so right at the beginning of draw or at the end of draw anywhere really I could say print Ln Circle X this is now going to display the value the current value of circle X in the processing console see it down there and this might lead me to realize aha well that's a really big number my my canvas is only 640 pixels wide that's why it's not there H oh I initialized it too high again this is something of an artificial scenario that I'm creating but this is the kind of thing that can happen to you I would then realize I wanted to start it at zero so I'm going to fix that to zero and then haha the sketch is working again as expected all right this is a good moment to take a pause I haven't given you a lot to work with just yet but I think you could expand on this sketch could you add a variable for the Y position of the circle what kinds of mathematical operations can you make something Fade Out by using subtraction rather than addition maybe the circle grows in size or shrinks in size it moves from left to right or up and down lots of stuff for you to explore when I come back in the next section I'm going to cover a few more details and tips and tricks about working with variables and look at how you can initialize variables with random numbers all right welcome back I am about to talk about random numbers which is very exciting but before I get there I just want to look at this statement circle xals circle x + 5 a bit more and talk about a kind of odd syntax thing that occurs in a lot of processing examples that you might have already seen or certainly will see so this kind of statement where you're taking a variable and increasing it by some amount by one by five by 10 Etc this is something that is all everywhere it's just you write it all the time in code and so anything that's really common in programming typically there are programmers who have figured out a shorthand way of writing it and this is no exception a shorthand way of writing this is actually the following Circle X Plus equal 5 and this means that if I wanted to increase Circle X by 1 I could say Circle X Plus equal 1 so this is take the value of circle X and set it to itself plus one well this operation is so common by whenever you want to increment something by one that there's even a short hand for the short hand which is the following Circle X x++ this might be familiar to you maybe you've heard of the programming language C++ well the reason why it's called C++ is because there was a programming language and still is a programming language called C and the next version of it the expanded version incremented by one it's a little fancier it's brand new it's not C it's C++ and there will come a time even in this series where I start using these short hands but generally for me for my for what I'm trying to do in teaching the basics of programming and certainly I think when starting out I find this to be a more readable line of code that says exactly what it's doing and finally I'll also mention that these kinds of shorthand operations also work with multiply divide and minus so I could say Circle x minus minus which means Circle x equals Circle x minus one or I could say something like Circle X divide equal 2 which means Circle x equals Circle X ided by 2 coming back to the code just to prove that this is the case I'm going to change this to plus equal 5 and run it exact same result and if I change it to Circle x++ there it is only it's just increasing by one because plus plus means increase by one I'm a little torn about what I'm about to do but this is also probably a good time for me to just change the variable name Circle X to just X and then say X plus equals 5 this is also another personal style thing what should I name the variable well if I'm going to have a circle and a square maybe I want to have variables called Circle X and square X to really differentiate them but if I just have one thing and I only have one thing for which I need X maybe calling it X is fine I could have if I had multiple things I could have an X1 and an X2 there's so many different ways to name your variables and frankly I could just call this kitten and I could copy paste it here and use kitten everywhere because I love kittens and that's what I feel like today I feel like calling my variables kitten probably not a great idea because it doesn't really tell me about anything that I'm actually doing with the code even though it brings me a little happiness to see the word kitten there but I can't tell you what to do you should name variables in a way that makes sense to you that will be helpful to you as you work on the code more as you take a break from it and come back to it later think about what is going to have the most meaning for you and for me right now I'm going to go back to X because that's the least amount of typing and I have one thing and I want it to be at its Exposition that's going to work just great all right I don't know what you've made so far watching this video although I certainly would love to know so check the video description for how you can share stuff with me but I don't know about you I'm feeling a little bit like sad like all I've got is this circle yeah it's moving I mean this is a huge accomplishment but there's not a lot of possibilities here don't worry I haven't forgotten about figuring out what to do when that Circle reaches the edge and have it move back Bal off of The Edge if you will but before we get there I've got something really exciting to show you which is going to just explode the possibilities of what you can create right now in processing and that is the random function up until now we've looked at two different kinds of lines of code that you can write one a command or more precisely a function call this is anything like background it's got the name of the command followed by parentheses and some number of arguments and a semicolon line stroke ellipse Circle all of these are the same we've also now seen with variables assignment operations here are some examples we're setting Circle x equal to 100 or set Circle x equal to the result of some type of mathematical expression there is a way to do both of these in one line of code with certain kinds of function calls at the moment every single function call that I've shown you just performs an action set the background color set the fill color draw a circle draw a square but some functions actually answer a question and I think the most one wonderful function that we could begin to demonstrate this concept is the function random the function random in processing ends with a resulting value it doesn't just perform an action the action it performs as it picks a random number out of a hat but it gives you that value back the function itself evaluates to a random number meaning we can take the result of the random function and assign it to a variable Circle x equals random now random also does require arguments if we want a random number we need to specify the minimum value and the maximum value what is the range of numbers we want so for example if I wanted a random exp position anywhere in the window I might say the minimum value is zero and the maximum value is 640 so now I am both performing an assignment operation I'm giving a new value to Circle X but I'm also getting that value not from a hardcoded number or a mathematical expression but rather from the result of a function the technical term for this is that this function returns a value in fact it returns a float a floating Point number the first thing that we might do with random and a sketch like this is well every time it runs it does the exact same thing but if I added something random like give me a random Exposition now every time I run the sketch there it was kind of in the middle there it's all the way to the left run it again oh now it's more toward the right but let's make a little bit more Dynamic version of this so I've got a sketch right here that draws a single rectangle in the middle of the canvas I have two variables one for the size of the square and one for the width of the outline of the square I'm calling it Square size and line width those are my variable names how am I doing variable name wise pretty good I think so if I were to change Square size to some random value between 50 and 150 and line with to some random value between say four and 16 now every time I run the sketch I get a different size square and a different thickness for the outline demonstrating this by rerunning the sketch over and over again is kind of awkward so a nice trick I can do is in Mouse pressed I can put these lines of code in there there's something that I've done that's really wrong though remember in our three steps about a variable declare a variable initialize it use the variable well this is me declaring it this is me initializing it here I'm using it I do not want to redeclare it instead I just want to use it so I want to set the value of square size and line weight to something new run the sketch so something I forgot also interestingly enough is background is in setup put background and draw and now here's what I got every time I click the mouse I get a different Square this might seem kind of basic but if you had designed an entire house you could actually vary the house randomly every time maybe the size of the building the number of Windows where the door is positioned these are things that you could do by having more variables and more calls to random and I don't have to limit myself to picking the random numbers when I initialize the variable or in Mouse pressed I can actually take these lines of code and put them right inside of draw it's a little jarring how much it's flickering but what if I add some nice Alpha to both the stroke and the [Laughter] fill why am I not seeing anything I have the background in draw for this effect where I'm trying to demonstrate the blending of all these random shapes I need to draw the background just once in setup just with adding some Randomness we've got a more Dynamic pattern and shape let's look at another example here's an example that just draws one Circle in the center of the window first another shortcut if I have multiple variables I want to declare that are of the same data type I don't have to say float X float y I can actually say float X comma Y and here I divided X and Y and RGB up separately because one's for the position one's for the color but I could actually put these all in one line of code so now I have five variables all declared at once and then in draw I'm giving all of those variables a hardcoded number so we have a white circle in one spot but what if I were to allow each of those to be random look at that every time through draw a new circle is drawn at a random location with a random RGB value maybe I want to constrain the range of color a bit more at a minimum the blue value will always be 150 and the red value will always be 100 and maybe the green value is always going to be very little just between zero and 50 varying degrees of pinkish purple I like that oh what if I add some Alpha over time the shapes are blending it's a nice poist effect something else to mention is that while I said that the random function takes two arguments a minimum and a maximum if your minimum value is zero you can actually give random just one argument so this can actually be written as random just 640 and it will assume some random number between 0 and 640 so back to the code I can remove that this and this here and there we go and while we're at it I should probably use the builtin variables width and height so that if I resize the sketch it will always still spread the dots out all over it so let's say x equals random width and y equal random height okay hopefully you have so many ideas percolating in your head you just can't wait to add random all over your code maybe you're going to make your own poter lless design like this try other shapes besides just dots what happens if you put random lines all over the sketch oo that's a nice idea could you make a random design like my example of a new random house every time you run the sketch you could also go back and explore that painting program the one where the dot smeared around based on moving the mouse what is if every time you click the mouse you started painting with a new color or maybe there's some other way you could use random in combination with the size of the dot or the color that I can't even think of right now so go and explore the random function see what types of designs you can make take a break for yourself and then when we come back oh it's going to be time we're g to get that ball that ball is going to hit the edge it's going to bounce it's going to turn it's going to be a thrilling moment I'll see you then welcome back I had a break for a few days wearing different clothes I am just full of energy raring to go because even though I say this a lot this section might be the most important part of everything you might ever learn to do as it relates to coding you haven't really been able to do very much you can make drawings you can add some color you can animate things but without the ability for a program to make DEC decisions and take different paths based on conditions that are happening within the program itself there's very little you can do and this is what we're going to cover it is called a conditional statement the grand finale of this section will finally answer the question how do we tell this circle that when it leaves the screen it goes past the edge of the canvas how do we tell it to turn around and move in the other direction this cannot be done without a conditional statement you might recall back when I was talking about setup and draw I said oh this thing about a block of code with an open curly bracket and a closed curly bracket that's going to be very important a conditional statement is a new kind of block of code for you to write it has an open curly bracket and a closed curly bracket and lines of code that go in between those those lines of code are only executed if a certain condition is met so we have a new reserved word in processing if and in fact I often say an if statement rather than a conditional statement because that's what I'm doing I'm saying if this condition is met execute these lines of code so this begs the question what goes inside here what goes inside these parentheses what goes inside side Here is known as a Boolean expression a Boolean expression is any code that evaluates to one of only two options true or false let's think about this concept just with things that we might say to each other I mean you're not really there but I think that you're there I might say I'm wearing a sweater I mean that's true I'm wearing a sweater it evaluates to true this learn to program video that you're watching is Absolut Ely a fantastic oh ow so in these statements I'm making sure yes some of them might be factually true or factually false but there's also maybe some subjectivity to things that I might say know maybe it's true or maybe you might disagree it's an opinion none of that is the case in an actual Boolean expression that we would put in code a Boolean expression that we put in code is always true or false one very common way to create a Boolean expression is with something known as a relational operator an operator is something that acts on numbers I talked about arithmetic operators like add subtract multiply divide a relational operator is an operator that compares two numbers greater than less than greater than or equals less than or equals equals and not equals now these are a little bit funky I'll come back to them another time but let's just consider right now greater than less than greater than or equals and less than or equals let's say I were to write 18 greater than 10 this is a Boolean expression does it evaluate to true or false yes it's true what about 18 is less than 10 that evaluates to false what this means is if I were to write a Boolean expression inside the parentheses like if 18 is greater than 10 run this code this code will only run if this is true now you might be thinking what the huh ah this doesn't make any sense why would you do that in there that's always true this code always runs this is not the point the point is I want to somehow use a relational operator in combination with a variable if that number is changing based on what's happening in the code then sometimes it will be true and sometimes it will be false here's a really good example what if I want the background color of my sketch to be blue when the mouse is on the right hand side and I want it to be red when it's on the left hand side if I have a canvas if 320 is the exposition of the center of the canvas if Mouse X is greater than 320 execute this code let's see how that works in practice let's start over with a brand new sketch the only thing it's doing is drawing a black background and let's add that conditional statement remember I need the key word if I need parentheses with a Boolean expression inside Mouse X is greater than 320 and then any code inside the curly brackets will run if the Boolean expression evaluates to True okay remember setup runs once draw is looping over and over again so it's going through and saying hey I'm going to draw the background as black okay let's check where the mouse is oh that's false skip that line draw the background his back oh check where the mouse is that's false skip that line so this line of code line 10 is never being executed now I'm going to slowly move the mouse this is very dramatic maybe we need a drum roll some dramatic oh nope it's too late it happened already uh this might be helpful if I were to draw a line with that line now I can see as soon as the mouse goes over here oh and look at this I always forget about order of operations where did that line go well because this if statement is happening after Drawing the Line it's covering it this is actually kind of an important note about background which I never specifically said background doesn't draw a color in the background behind things it just fills the canvas with a color which typically you use to set the background but it's only actually going to be the background if it's at the beginning of draw and you're drawing everything else on top of it so that's kind of an important thing for you to note here we go white background black background white background black background that is the core idea of a conditional statement now this might seem a little bit insane to you but I would make the argument that I could actually stop this processing course right here and I've given you the tools to program anything you might ever think of or imagine everything else that we do from here on out is something that will ultimately make things easier organize your code better and be able to build much more complex and sophisticated Concepts but this is a good time for you to sort of play around with this idea of an if statement think about the painting program what kinds of things could you do with the painting program if you had the ability to use a conditional statement do you have any ideas how you would get that ball to turn around based on a conditional statements see if you can experiment use Mouse X use Mouse y use your own variables try greater than try less than all of these things see where you can get to I'm going to take a little pause and I'm going to come back and continue showing you more about what you can do with an if statement in fact I'm going to show you something about a word oh it's a wonderful word in programming called else all right I am just dying to know what it is you're able to accomplish with just a basic if statement but there is more to just if let's look at this example yes the background turns white when I move the mouse over here and black when I move there but it's written in kind of a strange way like I'm always drawing the background black and then as long as I put this mouse X is greater than 320 thing next it will cover it with white but really what I'm saying is if the mouse is greater than 320 draw a white background otherwise draw a black background and this concept of otherwise is something you can actually write into your code only you need to use the keyword else an if statement can be combined with an else by placing the else right after that Clos curly bracket and then putting in a new open and Clos curly bracket now any code inside here will run if this Boolean expression evaluates to true if it evaluates to false it will skip this code and go and execute this code instead there we go same exact result only I feel like the code makes more sense now and is more readable and understandable while it totally doesn't matter here it's also a bit more efficient it's not drawing the black background and extra time when it doesn't need to I think what I'm trying to emphasize with else here would be a bit more clear if I drew shapes instead of filling the background color the if statement here is now going to draw a circle whenever the mouse moves past the halfway point but that square is always there if I want the shape to change I could write another if statement now this is working as I intended circle square circle square but I wrote it as two separate if statements completely unrelated now this is something you might want to do for conditions that you're testing that have no relationship to each other but in this case there is a relationship if it's over here draw a circle otherwise draw a square that's where the else really makes the most sense there we go another example of how the conditional statement the if statement can change what is rendered each time through draw depending on what I'm doing with the mouse What If instead of just having two areas one for a circle one for a square I were to think about the canvas as divided into three and I'm going to change the width to 600 because 640 doesn't divide evenly into three okay just because I drew the lines there still the exact same behavior but now I want to see maybe a line for here a square for here and a circle for here so it turns out that in addition to having an else that is paired with your if statement you can also have an else if once again a nice way to think about this to help you understand it is to look at this word else and substitute the word otherwise if the mouse X is greater than 320 do this thing otherwise if the mouse is greater than 400 do this other thing and otherwise in all other cases do this last thing so for any conditional statement I'm thinking about this whole thing as a conditional statement you always have to have at least an if option you can have an else but you can only ever have one else that otherwise in all other cases now you could actually insert as many other else ifs as you want in between this beginning and end let's take a look at that in the code okay let's change 320 to 200 let's say else if now Mouse X is greater than 400 draw the square and then in all other cases I'm going to draw a line so I just did some quick math in my head to draw a diagonal line we'll see if we got if I got that right okay great all other cases draw that diagonal line now if the mouse is greater than 200 draw the circle and otherwise if the mouse is greater than 400 why is that wrong take a look at that code syntax wise I have not made any error the program runs processing's not telling me anything is wrong with this code but the result is not what I intend why is that it's very important for me to mention that only one of these things can ever happen only a or b or c it can never be both a and b or a and C or B and C or all of them so why is B never happening well let's think about the number 450 is the number 450 greater than 400 yes so if the mouse is at 450 this would be true but we've got to start here 450 Starts Here is 450 greater than 200 yes it's also greater than 200 so shape a is going to be drawn the square once a Boolean expression in an if statement in a conditional statement evaluates to true you immediately skip to the end and go on with the code so only if this is false do we ever come and check this and then only if this is also false do we ever execute C knowing that how would I fix this think about that there's two solutions well there's more than two but there's two solutions that I'm thinking of here that I'm curious if you're thinking about solution number one I could check 400 first if I check 400 first 450 is going to trigger the circle and I wanted it to be a square so maybe I should be consistent not that it really matters these are arbitrary choices but 450 is going to trigger the square and then skip to the end 250 is not greater than 400 so the square will not be drawn but the circle will line circle square yes now the other solution I was thinking of was changing the greater than to a less than now again where which shape goes that's made up but I'm trying to be consistent although I wouldn't be surprised if I got it wrong now if I run it line Square Circle exactly the behavior I was looking for I also kind of like this because I'm used to the English language and I read from left to right I realize that might not be the case for you but now I actually have also the code in that order so I'm checking this section then this section and this section is the all other cases which kind of makes it a easier for me to parse it's also maybe worth noting that this kind of behavior would be really hard to do without the concepts of else if and else linked to an if statement if you only could make separate if statements you'd have to jump through a lot of Hoops to have one thing happen but not the other thing all right here's an exercise for you how about you take my code maybe instead of columns you try making rows that the mouse moves up and down and changes what's being displayed could you create four sections the reason why this is a really good thing for you to try is that you'll need to have two else ifs if else if else if else so give that a try and after you're done if you keep watching I'm going to demonstrate yet again one more thing that you can do with these statements it's not about changing the if or the else if but it's actually changing the way you form your Boolean expression with a logical operator okay now it's time to look at logical operators and by that I mean and or or not so why are these needed let's consider this Square I want now to implement a basic rollover functionality when my mouse hovers over the square it lights up and just brings a smile to my day so how do I know if the mouse is hovering over this Square well if this Edge is 280 I could say if Mouse X is greater than 280 now I'm not going to draw the square in the if statement I'm always drawing the square the only thing I'm going to change is what the fill color is fill 255 and now I'm going to have an else and I'm going to say Phill 175 all right let's try this oh beautiful look at my rollover well it's not perfect because it still lights up if I go up here over here it's lighting up I only am checking that one left edge of the square what if I want to also check now if it's less than 380 which would be the other side of that square well something weird that I could do that I don't really suggest although it's good to know that this is possible is I could put an if statement inside of this one so I could also say if Mouse X is less than 380 Phil 255 so look at this aha oh wait a sec ah wow I really messed up this logic here in such a weird way I would actually now have to put another else in here that would say Phill 175 I would have to put the else there right now I'm saying okay first check if it's greater than 280 oh no but in all other cases I also need to fill 175 oh this is awful I hate what I'm doing but at least now it works still the vertical edges don't change anything but now the horizontal edges do but this is really awful and convoluted what I really want to say the reason why I put that extra if statement inside is I want to say if Mouse X is greater than 280 and mouse X is less than 380 that's when I want to light up the square and is an example of a logical operator the three logical operators are and or and not and you can use them to join more than one Boolean expression together if you have two Boolean expressions with an and they both have to be true for the end result to be true if you have two bullan expressions with an or only one of them has to be true for the end result to be true now let's get rid of this awful if statement inside of an if statement and just say and mouse X is less than 380 now I have some bad news for you you can't actually just say and it's not going to be that bad but this isn't going to work syntax error it's not actually missing in parenthesis it doesn't know what and is so in some programming languages The Logical operator and is just the word and but in Java which processing is built on this is not the case and and is written as two Amper Sands an or is written as two pipe symbols I'll try to show you where that is on the keyboard if that's unfamiliar to you and a notot is an exclamation point but again we're not really talking about the not just yet we'll come back to that in a little bit because I also want to talk about not equals all right drum roll please there we go working as expected but would really like to have the Y's working also I only want it to light up when the mouse is within that box luckily for me I can keep joining ANS I can have four things if all of them are true that's the only time you'll ever execute the code within that block within those curly braces so I can actually say and so I don't love how long that line of code became and there are other ways to reorganize and reactor is a kind of a fancy word for reorganizing your code to make make it a bit more readable but this is going to get me the functionality that I want right now if all of those things are true and only if all of those things are true Phill 255 otherwise Phill 175 I must have an error here oh my goodness I'm like it's not working this is not 180 that would be half the height the height of the square is 100 so this should be 230 but really we could protect ourselves against these kind of errors if I were using variables because I could say I'm going to use W to indicate the width of the square which is the same as the height so now I'm checking if Mouse X is greater than x and it's less than X plus W and if it's greater than y and less than y+ W now draw the square x y w and the reason why this is awesome is because now I'll just change the X and Y of the square make it bigger and it still works all of the code is pulling from those three variables look at this we just programmed a rollover it might seem like a lot of extra effort to have to program all the pieces of a rollover from scratch essentially as opposed to just saying put a roll over here and in some environments like if you start to work in the browser there are lot of builtin interface elements that you get for free depending on where you're programming and what you're creating but this is a really nice way to learn coding is to say what are the basic kinds of interface elements I use every day a rollover a button something that toggles on and off or something where you hold the button down this happens and I have two other things that I think would be interesting for you to try one is What If This Were a circle and not a square how would you detect if the mouse was inside the circle to accomplish this it's a little tricky you're going to need to think about the circle's radius which is half of the diameter the diameter being the argument you put into a circle to draw it and then you're also going to want to look into a function called dist for distance I'll make sure I include an example of how that works and if you've got questions about it definitely leave those in the comments as well but I've got another interesting challenge for you let's put the square back in the center and by the way the correct x value for it to be centered was 270 not 280 my math was off before the Y would be 130 and let's make it 100 in width there the square is at the center okay here's the challenge instead of it turning white when I roll over and going back to gray what if when I roll over it still turns white but then when I roll out it fades away how would you accomplish that it's not really about if statements but this is a nice way to synthesize a couple different concepts that I've been showing you I'm about to give you a clue so if you want to try it without the clue pause right now if you do want the Clue the clue is and usually whenever I ask a question like this the answer is always is you need another variable so you need another variable what is changing now it's not just white or gray it's changing over time you're going to need a variable for that so give that a try and then I'm going to come back I'll show you the solution and we're going to look at some other things we never looked at or for example and I think a nice place where we're going to need ore we can finally get back to that ball that was flying off the edge and left let's see if we can make it bounce back and forth it's going to be an exciting and momentous occasion for us both all right how'd you do let's see if anything you did resembles the way I just coded it just now I didn't actually check to see if my code worked but luckily for me it is working whenever I move outside of the square it fades away so how did I accomplish this I added a new variable I called it Square bright maybe you could think of a better name for that for the brightness of the square it starts at zero which is why when the program first runs you're seeing it as black now critically I am always calling Phil by that brightness and always drawing the square so it's not about do I sometimes draw the square or not draw the square do I sometimes fill it not fill it I'm always filling it always drawing it the difference is that brightness value changes it always every time through draw Fades away so even if it's right now it's start at zero and is fading away negative numbers for processing are the same as putting in zero for color not for everything but in the case of Phil neg5 is the same as zero but anytime I hover the mouse inside the square the brightness is set to 255 now it's not fading out even though I'm saying Square bright equals itself minus 5 I set at 255 I draw it at 255 then it becomes 250 repeat draw set it to 255 draw it at 255 then it becomes 250 it only will render it at 250 if I move the mouse outside of the square and then it's going to do that many times per second here's another version of the same concept but with the window divided into four quadrants each one fading out as you move from one to the other if you want to give that a try pause right now here's the solution I just need four separate variables one for each quadrant and I need to use if and else if to figure out which one am I hovering in and which variable get set to 255 then I'm drawing all the rectangles decrementing all the values etc etc this one's a bit longer there's more stuff to it maybe you want to print it out and put it under your pillow to sleep with it at night and let it soak into your brain a bit but I'm here I'm ready to move on it's time to finally see what can we do to make that ball turn around when it hits the edge as promised here we are the ball is moving it's about to hit the edge what do we do well let's think about it what is the condition that would evaluate to true if the ball hits the edge The Edge is pixel 640 of course I always say that but technically if the width is 640 the pixels actually go from 0 to 639 it's just say 639 is sort of a not a fun number to say so let's just go with the edge being 640 even though that's technically one pixel past so let's start with something simple instead of having it turn around let's just have when it gets to the edge for it to reappear back on the other Edge this is actually easier and in fact we know how to get it to reappear by setting X to Zero we're doing that with clicking the mouse so let's actually get rid of this mouse pressed function and let's add an if statement in draw if x is equal to 640 then set X back equal to zero now this is incorrect and processing is already telling me it's incorrect why is it incorrect remember how I kept saying I was going to come back to this double equals wa we know equals is syntax you can use when I want to initialize a variable I set it equal to zero when I want to increment I set it equal to itself plus two so equals is the symbol you use when you want to set a variable to equal a certain value it's an assignment operation but that's not what we're doing we are writing a Boolean expression I don't want to set Mouse equal to 320 I want to know does Mouse x equal 320 that's a question in Java or processing which we're working with in this case the Boolean operator for checking if two things are equal is two equal sign a double equals so that's how we differentiate between asking the question does this equal this or saying I want this to equal this add another equals and let's run this sketch I'll wait yes this is awesome let's have it move a bit faster oh that's too fast let me change that to seven huh wait wait what happened there we're thinking the same thing again right if I'm adding seven every time to X it's possible that X is never going to actually equal 640 I mean 640 divid 7 does not result in in a whole number so the ball is actually going to jump over pixel 640 so this is a case where even though I wanted to demonstrate double equals as the Boolean expression for checking if two values are equal it doesn't really make sense to use here what I really want to use is greater than or equals this will account for any time the Circle reaches the edge and hits it exactly or jumps over it so there we go now this is a perfectly looping Circle it will never stop it will always reset but it's not turning around is it how do we get it to turn around I don't know how you're thinking about how to do this but a common mistake and I think the way that I sort of like initially thought when I was first trying to learn this stuff was okay I got it I know that it should be plus seven to move to the right and it should be minus 7 to move to the left so why don't I put plus seven in here and then I'll use that fancy else that we learned about to otherwise say it minus 7 all right let's see what happens ah what well clearly our logic is flawed so I already know what's wrong maybe you do too but this is a nice opportunity for me to look at the print line statement again I want to look at the value of x every frame and something else that I could do here is I could could slow down the program quite a bit so this is something that I haven't explicitly addressed I mean I've talked about how the draw Loop happens over and over again but how fast does it happen over and over again on some level it's just trying to do it as fast as it can but it's actually locking it into a certain number of frames per second this is the way we talk about animation typically how many times do we redraw the image per second to create that illusion of motion it's going to be smooth smoother the more times we draw it per second so if I say one frame per second it's actually we're going to see it happening much more slowly and it's just going to the left it's just going negative and negative why is that well X starts out at zero and if x is greater than or equal to 640 oh oh my logic must be wrong I only want to go negative if it's greater than so let's let's fix that okay no problem this must be right now right all right this is promising the circle is moving to the right I mean I left the frame rate at one I probably now want to like let it run faster but good thing good news for you I can just speed up the video and then slow it down to see what happens when it gets to the edge I mean is it going to turn around when it gets greater than equal to 640 X will equal x 7 let's see what happens okay it's at 602 here we go it's going get to 640 really soon what happens oh 64 what what what 644 637 644 look at it's just moving back and forth like that it's stuck well I'm really glad I printed out the values because I can really see what's going on and it kind of makes sense if it's greater than 640 slide it back but then the next time it's not greater than 640 so it's going to move again oh it's greater than 64 you slide it back that's why it's moving back and forth so this logic is is wrong I don't just want to decrease the value of x once I want to decrease it continuously and then maybe when it hits the other Edge increase it continuously you know what we need we need another variable we need a variable for that value seven I'm going to call that speed so X is always going to change by speed I'm going to take out the frame rate I'm going to take out this else take out this I'm going to run this X always changes by speed what do we want to do when X gets to the edge we want the value of speed to change the value of speed should now be 7 if speed is 7 x = x +7 is the same thing as x = xus 7 whoa oh oh so close but now we should know what we could do right if x is less than equal to Z Z speed equals 7 yes bouncing ball back and forth now this is something we can improve one thing that's a kind of clunky here is I wrote speed equals 7 here let me take the print line out we'll put it back if we ever need to debug what if I don't want it to be so fast let's make it four all right here it goes here it goes here it goes oh hope sudden it's faster so I changed this speed to four oh but now I got to change it in other parts of the code which is fine I could but ultimately I don't want to set the speed to a specific value I want to just take the speed and reverse its direction so if I have a positive number that I want to be negative whatever that number is what's an operation that I can apply to it to turn it into a negative multiply by negative one speed equals speed time * 1 okay but what if it's negative and I want it to be positive well guess what a negative time a negative is a positive number so I can also put here speed equals speed * nea1 and there we go it's working and whatever value I start the speed at it's always going to be the same speed look at this I've got the same exact line of code in both of those if statements if x reaches the right side reverse the speed if X reaches the left side reverse the speed what am I really saying here I'm saying hey either case if it's on the left or the right reverse the speed I'm did you hear what I just said I just said or we used and before that was kind of logical right we wanted to have the mouse Exposition greater than this value and less than this value now we've got a situation where an or makes sense if x is greater than equ Al to 640 or X is less than or equal to Z invert the speed oh that's just beautiful I love a good oldfashioned bouncing ball what is next let's add a y and of course I should really be using width and height not the hardcoded values there we go I've got an X and Y and now I need separate variables for the X speed and the YP speed oh I also want to draw The Circle at X comma y then I always change X by X speed and Y by yped and then I've got one if statement if it's on either the right or left Edge reverse the xeed if it's on either the top or bottom Edge reverse the YP speed there we go if you feel so inclined you can replace that circle with a nice DVD logo all right I don't know about you but this is very satisfying to me the fact that we have this circle bouncing beautifully off the edges using conditional statements is really a matter of practice I all I've done is show you all of the components I've covered if else if else we've looked at what a Boolean expression is how you can make them with a relational operators how you can join them with logical operators you're just going to need to rinse and repeat this over and over again and in fact that's what I'm going to be doing as I get to the next example the next example the next example in future sections of this video I do have a couple more things I want to show you I think before I move on let's take a moment to pause how about you try expanding this bouncing ball a little bit now you might be thinking oh I know I know what I want to do I'm going to add a second Circle maybe a third or a fourth I would say hold that thought I mean certainly if you want to try having two that just means you need two sets of variables X1 y1 X1 speed y1 speed X2 Y2 X2 speed Y 2 speed you can see how that could quickly become unwieldy and I'm going to look at specific techniques for duplicating a concept in your code multiple times later what I might suggest is think about other things that could happen when the circle hits the edge of the canvas for example what if it changes color every time what if its size is always changing it hits the edge it gets bigger and it's like shrinking till it hits it again maybe the speed changes each time it hits the Edge O I know this is a hard one what if it was accelerating as it moves down almost like a gravity simulation give that a try see how you can expand this bouncing ball sketch I'll come back I'll show you some solutions and kind of wrap things up there's some missing pieces here I'm going to talk about what it means to have a variable whose type is Boolean that's kind of an important concept that I have it explicitly covered here so that will wrap up the conditional statement stuff and then we'll move along from there so take a little break and see you in a moment all right how'd that go for you this is what I did while you were working I made it so that every time it hits the edge it picks a new random color I also made the speed random every time you run the sketch so you can see here initializing xpeed and YP speed as a random number I've got new variables for RGB oh I did another thing I added a variable for radius which means when I draw the circle I need to say radius times two because radius is half the diameter why wasn't my variable called diameter you say I could have done that but the reason why I picked radius is I'm now checking the edges as the width minus the radius half the size of the circle or instead of at zero I'm checking the radius half the size of the circle that has a result if I slow it down to show you of the circle actually really bouncing off the edge feels a bit more realistic in terms of the walls of the canvas you can see here that in addition to reversing the X speeed and the yspeed I'm picking all new random values for rg&b and otherwise most of the code is the same so what do I want to show you next let's think about this feature that I might want to add what if whenever I click the mouse the ball stops if I release the mouse it keeps going well I know I have a mous pressed event but before I get to the mous Pressed event let's look at something else in the processing reference look here under Mouse so first of all there's a lot of other functions related to interacting with the mouse but I want to point out that there's a mouse pressed parentheses and then there's just a mous pressed on its own well the mouse pressed parenthesis is the documentation page for that mous pressed event that I've already talked about mous pressed not the function happens to also be a built in variable just like Mouse X tells you where the mouse is mouse pressed tells you whether the mouse is down or not now this brings up a really fascinating question what is the data type for mous pressed Mouse X the data type for Mouse X is integer any whole whole number mous pressed the data type is actually Boolean meaning the value of mouse pressed can only be one of two things true or false and right here on the processing reference page that if statement the Boolean expression is checking if mous pressed is equal to true now this is a very um verbose way of writing that let's put it in the code and by the way I only want to move the X and Y value if the mouse is pressed so I'll put those statements inside if Mouse pressed equals true oh I wanted to do I wanted to do the other way around but I'll show you that in a second so now I click the mouse and it moves I release the mouse and it stops X and Y are only changing if Mouse pressed equals true equals false now it's moving but if I hold down the mouse it stops release the mouse and it goes I was saying this is verbose because if a variable's type is Boolean you don't actually need to check if it is equal to true or false it's evaluating itself as true or false so I can actually just say if Mouse pressed same exact result but quite a bit simpler and this is fin finally time now for us to fill in this last logical operator not is an operator that you can apply to a Boolean expression to invert the tress or the falseness of it not true is false not false is true so right here I can say if not mous pressed not mous pressed is false because Mouse press is true so not is false so I don't move it okay there's so much more to this we could I could just be here for like weeks at a time but I'm just trying to show you the core basic components and really it's just going to be about practicing mixing and matching things trying out your ideas asking questions and so on and so forth hopefully this is helping you but I still have more even in terms of just these fundamental pieces the building blocks of conditional statements and Boolean Expressions here's the last bit I don't want the ball to stop when I'm holding down the mouse and go when I release the mouse I want to be able to just click the mouse and have it stop or click the mouse and have it restart I wanted the clicking the mouse to actually toggle it on or off using the mouse press variable inside of draw is a way of determining if you're holding down the mouse you're like checking it continuously Mouse press the function the event that I talked about earlier is a way of knowing if you just did a single click and once again the answer to this problem that I'm trying to figure out is I need another variable I can't use the Mouse pressed variable which is always going to go on and off based on whether I'm pressing the mouse I want my own variable my own switch is the ball going I want to be able to turn that on and turn this off so that's where I could create my own variable of type Boolean let's call it going and have it be set to false if going change X and Y run this code it's never going to move going is hardcoded to false nowhere in the code anywhere do I set it to True add the mous Pressed event and in here I'm going to say going equals true ready drum roll here we go press the mouse and it starts now I'm going to press the mouse again well anytime I press the mouse going is still going to be true I never said going back equal to false so how could I have it the next time I go through Mouse pressed I said going to false well if going is true then I want it to be false otherwise if it's false I want it to be true so I could actually say if going then going should be false otherwise going should be true so I now have this extra if statement that's checking whether they're going oh this is another thing I need to print out and put under my pillow I think if going is true it becomes false if going is false I go to the other and then it becomes true let's see if this works there we go it's not moving I click the mouse going is now true it's moving I click the mouse again going is false it stopped and so on and so forth there's another way we could write this and this is another one of those things like H this is kind of like a lot of lines of code for a very simple operation of just like flipping a switch well the not operator is our friend here because what if I were to write Noto what does this mean to you if the value of going is true then not going is false if the value of going is false then not going is true not false is true not true is false so what I really want to say inside of mouse pressed is going equals it not itself I want to take this Boolean variable and invert its truthness false becomes true true becomes false not moving click the mouse moving click the mouse it stops it works that was a lot this by the way unlike the rollover functionality or the holding down the mouse functionality this is like a button toggle it is something that happens and sets a state every time you press that particular button so here's an exercise for you maybe you can take a bunch of these Concepts and put them together could you now create a square somewhere on this canvas there's a bouncing ball and every time you click in the Square maybe it changes the color maybe it stops IT and starts maybe it changes the size could you create an interface to control the way the ball is bouncing give that a try this is actually the end of this whole section on conditional statements it's an incredibly important fundamental part you could really stop here not do any of the rest and just make lots of stuff with drawing and variables and conditionals and I encourage you to do that for quite some time before you come back if you've been frustrated by the fact that I'm only ever drawing one thing onto the screen stick around because when I come back I'm going to look at something called a loop now a conditional statement test a Boolean expression and does something or doesn't do it a loop can test a Boolean expression and repeat something over and over again so just sit with that for a minute take a break come back and I'll be showing you all sorts of stuff with loops welcome back one beard trim later and it is time to tackle Loops in programming we just spent a lot of time talking about if statements or conditional statements an if statement is what is known know as a control structure in programming it controls the path that the program is going to take if some Boolean expression evaluates the true then execute this code otherwise do this otherwise do this and so on and so forth this even has yet another name if we're talking about it as a control structure it's often referred to as a selection control structure but there's another kind of control structure for iteration or repeating something multiple times and if if is for a selection control structure the word for an iteration control structure well there's actually two options a while and a four now a four Loop is probably the one that I use 99 times out of 100 and most likely you're going to find yourself using four Loops over and over again so you could make and I've heard this argument before just skip the whole while loop thing but I actually find the path to best understanding the for Loop is to take an if statement transform it into a while loop look at all of the details of how the while loop works and then move on to the for Loop so that's that's just how I've decided to demonstrate this to you today so why do we even need Loops in the first place let's write a nice sketch that draws a whole bunch of circles on the screen and there we go five circles each 50 pixels in diameter and spaced out by 50 pixels each this is all well and good but you could see where I'm going with this it's one thing to type out five separate lines of code for five circles but what if I want to have 50 circles or 500 circles or 5,000 circles this is a totally reasonable thing to do in processing draw lots and lots of the same thing over and over again and it would be pretty insane for me to have to write 500 lines of code just to draw 500 circles this is where a loop comes in again I'm starting with the while loop within if statement I would say if some Boolean expression evaluates to True execute some lines of code a while loop looks exactly the same while some buan expression evaluates to True execute some lines of code the key difference here here is that if this is true the code's only going to execute once this code will continue to execute over and over again as long as this Boolean expression whatever it may be continues to evaluate to true so let's say at the top of this program I'm going to declare a variable X and I'm going to start that value at 50 now in draw I'm going to say while X is less than width as long as the value of x is less than the width of the canvas draw a circle at X Y 180 and 50 pixels in diameter now looking at this code I have an immediate problem let's see what happens if I run this it's it's very dangerous what I'm about to do I do not recommend if you're following along with me you also run it especially if you have lots of other important things open on your computer but I'm going to take that risk right now we don't see anything the background hasn't even been drawn black no Circle appear it is stuck in what is known as an infinite loop at the moment we are testing if x is less than with and we know we initialize X to have the value of 50 so we're essentially asking the same question over and over again is 50 lesson width is 50 lesson width and the answer is always true shouldn't we at least see one Circle maybe the background by the way the fan on my computer is starting to really go now we don't see anything because the sketch hasn't even made it to the end of draw for the very first time remember everything that happens in draw is happening off screen and then at the end of draw it updates it to the display you're actually looking at so while there's nothing syntactically wrong with what I wrote it is fundamentally flawed logic wise and I'm I'm spending a lot of time showing this to you because this is going to happen to you even once I show you how we break out of this Loop what is the proper way to think about and write a loop it's impossible not to make the mistake of writing an infinite Loop every so often and fortunately for us even though this particular program is frozen it hasn't shut down or messed up our entire computer I can still go to the browser and click around and then come back to processing and hit stop to get out of that Loop so whenever you write a loop you've got to make sure that you're thinking about something called an exit condition and here the way that I can have an exit condition is to manipulate the value of x during the loop so maybe the first time through the while loop X is 50 then it's 100 then it's 10050 so at the end if I were to say x = x + 50 then every time through this Loop by the time we get to the end we increase the value of 50 draw the circle again increase it by 50 draw the circle again and eventually at some point x is going to be greater than WID this will evaluate to false and we'll exit out of the loop and continue with the code let let's take a look at that I don't see any circles but I do see the background we're not stuck anymore you have to remember something that's really odd about what we're doing here so even though here I am in a vacuum this little section of this long course all about processing I'm just talking about a while loop but I can't forget about the context that I'm in I'm writing the while loop in this draw Loop so draw is actually looping oh this is very confusing but let's follow the code I have a global variable X which has its initial value of 50 then I draw the background I say I'm going to draw anything white and then I draw a circle at 50 then at 100 then at 150 then at 200 250 etc etc till eventually get past 640 the Y Loop exits and we go back to draw again what's the value of x the next time through draw the value of x is now already greater than the width so really what need needs to happen is every time in draw I need to start with X having the value 50 and there we go this is the result I was looking for I only have one line of code that calls the circle function but I've wrapped it inside of a loop to implement some logic to call Circle many many times within one cycle through draw I could make these circles 10 pixels and now I have many many more of them looking at this code it resembles very closely the code that I wrote just to move something across the canvas itself look there's a circle it's drawn at the value X and every time through draw X is moving up by one but we want to see just one Circle and want to move it one time every cycle through draw to create the illusion of motion yes draw is a loop but its Loop is for the purpose of Animation if what we want to do is repeat something multiple times inside of Any Given frame of with that animation that's where we need a while loop and eventually in just a moment a four Loop but before I'm ready to move on I want to point out something really critical here in this sketch I've declared a global variable float x equals 10 that's the way I've been declaring variables all along they're always at the top I use them anywhere in the code setup draw Mouse pressed Etc but here the value of x has to be reset back to 10 every time through draw in order for this while loop to perform the way I want it to perform so while this code works and it's really fine there's nothing inherently wrong with it this is a really good time for me to introduce another concept about the way that variables can be declared and used and there's a reason why I spent all this time talking about the variable as a global variable because you can also have what is known as a local variable and in this case I really only need that value X just for the purpose of this while loop X exists solely to draw a whole bunch of circles at once and then I'm done with it so that means I can delete float xal 10 at the top and just make sure that in draw when I'm first going to use x I give it a data type I'm essentially declaring X inside of draw this means if I were to say something like x equals 10 in setup the error is the variable X does not exist because it doesn't exist in the land of setup any variable declared within a block of code between any given curly brackets is only available to you inside of those curly brackets now this might just seem like some conceptual thing right now like why do I care why would I use one versus the other I think this will make more and more sense to you over time but I would say that the reason right now I don't want to have it as a global variable is just much neater and TIY like I just want my X to be right here with my Loop that's all it's for I don't want to use it anywhere else and maybe I actually might want a different X somewhere else in my code and this would allow me to do that variable scope this is the concept of scoping your variables there's no reason to scope your variables in a wider way than where you need them because that only introduces a little bit of extra confusion let's turn now to the for Loop so we've established an example while loop that looks like the following we have a variable called X that we initialize to zero then I use the keyword while followed by a Boolean expression open and close curly brackets and inside those curly brackets inside this block of code I perform some action like draw a circle and then increment the value of x so that at some point the buo expression evaluates to false and the code can move on this style of loop is so commonly used that the for Loop exists to take all the parts of it and condense it into one line let's take a look at how that is written I'm here to tell you that these two Loops are exactly the same a for Loop is created with three parts there is the initialization the Boolean test and an incrementation operation the order of these is precisely the same as what I've written here the very first thing that happens is a variable is initialized X is declared as a floating point value and initialize to zero then the Boolean test is evaluated if x is less than with then we execute whatever code is in here like draw a circle then at the end the incrementation operation is performed X goes up by 10 the bullan test is done again if it's true we draw the circle do the incrementation operation check the Boolean test do the code etc etc so on and so forth until this Boolean test finally evaluates to false in which case the loop is then exited and whatever code happens after is then run in some ways I really love the while loop because it's written in a way that's more clear to me this initialization happens at the start then we check the Boolean expression draw the circle increment X check it again draw the circle increment X check it again maybe it's false exit the loop the things happen in the order that they're written but this for Loop is exactly the same and it's just a very very common conventional way of writing a kind of loop now we're just kind of in the place where it's useful to practice them both there are some rare occasions where you really need to use a while over a for Loop and probably as you get more comfortable with programming you're going to focus on using the for Loop most of all so let's go and try adding that into our code itself now I'm going to comment out the while loop so that we can keep it there for reference and by the way I can comment out a whole block of code by highlighting it and then using command slash or control slash on Windows okay four initialization condition semicolon Boolean test semicolon incrementation operation open curly bracket close curly bracket and then whatever code I want to happen over and over again inside that loop I put between the curly brackets so when I hit run we should see the exact same result as what I had with the while loop and there we go this is also a nice moment to just be reminded of the fact that there's always a shorthand for these incrementation operations instead of saying xal x + 10 I can just say X plus equals 10 for the exact same result also just to be consistent I I'll have X start with 10 since that's what I did with the while loop okay this is a great time to pause why don't you try and see what kinds of designs can you make with a for Loop or a while loop could you make colorful stripes maybe vertical ones horizontal ones what other kinds of shapes can you repeat could you make a set of concentric circles where the loop is altering the diameter of each circle every time through another thing that's fun to try is what kinds of designs can you place onto a grid like a checkerboard feel free to give that a try but when I come back I'm going to show you how to do that by nesting one for Loop inside of another one all right I hope you had fun experimenting with loops let's take a look at a particular scenario that is incredibly common in computer Graphics a grid I I admitt this is a rather poorly drawn grid but I think you get the idea a system of columns and rows this could be relevant for a game that you might be designing an image made up of pixels is organized into columns and rows so many different scenarios that you might find yourself wanting to program are going to involve something like this so a good place for me to even just start is how would I draw a grid of squares filling up a canvas let's begin by creating a variable called spacing spacing will refer to the size of every Square every cell on that grid I want X to begin at zero I want to go all the way to the edge and I want to increment X by spacing then I want to draw a square instead of a circle and the size of the square is spacing there you can see I have a line of squares across horizontally I'm going to say no fill and stroke 255 there we go now what I need to do is I want to take this concept of having all of the columns and I want to duplicate that for every row so this value 180 if I have that be zero we'll see the squares across the top if I change that to 20 we see see the squares across y equal 20 so instead of a hardcoded value for y what I want is another loop and I want that Loop to wrap around the X Loop and then this 20 becomes Y and there we go there's our grid essentially what I'm saying is for every y draw a whole bunch of squares for every X start with a y and do the X Loop then increment Y and do the X loop again then increment Y and do the X loop again and so on and so forth and here we see that outer loop y with an inner loop of X and that actually doesn't matter because I'm drawing the whole thing at once I could have the X Loop be the outer loop that has the exact same result but now conceptually what I'm doing I'm starting with One X drawing all the Y's incrementing X drawing all the Y's and so on and so forth what's fun about this is I could just adjust that spacing variable there it is with 50 now notice the width and height don't divide evenly into 50 so it's a little bit offkilter here's some exercises you could try and I'll include solutions for them what happens if you take that spacing variable and change it over time can you zoom in and out of this grid how about making this a grid of circles instead of squares you might discover that the reference point for of a circle being the center is going to make this a little trickier than you might imagine this is a little bit of an aside but this is a wonderful spot to look at something called Ten print a really famous pattern in the history of computer Graphics which originated from one single line of code on a 1980s Commodore 64 computer to get there let's look at what happens if we add some Randomness remember the random function into our grid I'm G to take out no fill I'm Gonna Fill every square with a random color grayscale value now notice how much that's flickering this is because remember there's a draw Loop and every time through the draw Loop I'm picking new random values for every Square I could move all this code into setup so it only happens once but just quickly right now I'm going to add the function call no Loop in draw which causes processing to run draw only once there now I have a grid of random grayscale squares What If instead of a square I draw a diagonal line from the top left to the bottom right of each cell of the grid so that would be from XY to X+ spacing y+ spacing it looks like I've just drawn a series of diagonal lines across the space but really these are lots and lots of small diagonal lines in every sing single cell of this grid I'm going to make the stroke weight two so that they're a bit more visible now what if I wanted to draw all those lines in the inverted Direction so instead of from the top left to the bottom right what about from the bottom left to the top right and this Phill random is no longer relevant so that would be from x y + spacing to X Plus spacing y there the line lines are all now shifted okay the pattern that I want to show you emerges when the lines are now randomly drawn either one way or the other way essentially a forward slash or a back slash this is how it was done on the original commodor 64 with printing forward slash and back slash now we're just drawing lines so I need some way of essentially flipping a coin well what if I pick a random number R is a random number between 0 and 1 it's a floating Point number so there's a 50% chance it'll be greater than 0.5 and 50% chance it'll be less than 0.5 so I can actually just put that into an if statement if R is less than 0.5 draw the forward slash line actually that's the backward slash line but just pick one of them otherwise else draw the forward slash line all right you ready to see what this looks like wow suddenly we have a maze pattern so just this simple idea of random lines one way or the other on a grid pattern we can create this incredible intricate maze this is one of my favorite patterns you can do with a simple for Loop now is a great time for you to make your own version of 10 print I've actually done an entire separate video about coding ten print and many many people have submitted all sorts of beautiful variations on this pattern if you make your own I'll make sure to include information in the video description on how you can submit yours to the catalog of coding train 10 print designs all right so we're now at the end of the section on Loops I've given you just the basics of how a while loop Works how a four Loop Works we've looked at a few different examples and how we can even Nest them to make a grid it's certainly something that you're going to have to take quite some time of practicing that I'm going to have to come back to over and over again in future examples that I'm demonstrating down the road but I think we can safely move on so take a little break for yourself practice different patterns and Designs make your own 10 print and when I come back I want to look at something called an array which is highly linked to the concept of Loops all right folks we are really starting to put all the pieces of the programming puzzle together I have talked about variables conditionals Loops there's not a lot that just those Concepts you can't program but let's take a look at what I have going on here on the screen next to me I have this bouncing ball it has some variables an x a y and x speed a yped it has some conditionals if x reaches the edge multiply X speed by ne1 and so on and so forth below there are sevenish bounc balls we know that a loop is something that can be used to iterate to take this idea of drawing a circle and draw one multiple times but there's a lot more steps in between just this idea of a basic Loop and taking this concept of a bouncing ball and duplicating it I mean if I have an X and Y for one bouncing ball then do I need another X for the second and another X for the third I'm going to have so many variables ultimately and I want to mention it now because it's really important I want to package up everything that has to do with that bouncing ball into something called an object but before I even get there I want to just talk about what it means to have a variable that can store a list of information because this is going to be something really important eventually I want to be able to have a list of bouncing balls so I'm not going to get all the way there in this section but I am going to look at this concept of an array a list of data and look at how that relates to Loops that we just covered where to begin we're comfortable with this idea of a variable float x equals 100 I want to introduce now the concept of an array now in truth an array is a kind of variable it's a kind of variable that stores a list of things as opposed to a singular thing but just for the sake of argument right now let's think of the variable X as having one number and what if I have an array let's call that array values and I want it to have multiple numbers the way that I can hardcode a list of multiple values is once again using curly brackets now these curly brackets are not a block of code there's no code that goes in there I mean there's stuff I'm going to type in there but nothing executable the curly brackets in this case Mark the beginning of the array and the end of the array then I can store multiple values separated by commas but this begs the question what is the data type of values the data type of the variable X is a floating point value the data type of all of these inside of this array are floating Point values so I must write float here right but that's not enough to declare an array and specify its data type you need both the data type itself float but also you need an open and close square bracket yeah I know we've been using curly brackets a lot in our code now is the time with arrays to use square brackets in case it's not obvious to you there's a space there so I'm saying just like float X I'm saying float values but I'm putting an open and close square bracket next to float to indicate that this is an array now I will say that this is a pretty rare way to initialize an array with a predetermined set of values but it's a really good way for us to just ease our way into the concept of arrays by having a prefab it's all finished it's a list of four values let's go put this in our code now actually I want this data to mean something right now so that we can come up with an arbitrary example scenario I really love fruit do you love fruit let's think about this as an inventory for fruit I've got five mangos 22 blueberries seven kiwis and my favorite I've got 11 plums now that I think about it let me make these values bigger because I'm going use them to draw stuff and pixel wise these are going to be kind of tiny I'll multiply everything by 10 now I'm going to draw a bar as a thick line in the center of the canvas so really I wanted a rectangle here to demonstrate a bar graph but I decided if I just make the line thick that might make things simpler but I noticed by the way when you make a thick line the default way it draws it is with these rounded ends so I can actually call the function stroke cap and change that to a square and there now I have my rectangle which is just a thick line that is 50 pixels High because I'm drawing the line to connect the center point to a point that is 50 pixels above the center point why am I doing this the point is what if what I want to do is draw this line pulling values from the array well notice how I have height divided by two minus 50 there that's the bottom of the bar minus 50 to the Top If I Had a variable like mangoes because I have 50 mangoes or let's just say 75 right now I could put the variable mangoes in there and the bar would be 75 pixels High I could say 25 and it's 25 pixels high but how do I reference a value that is inside the array and let me call that array fruit so it has a more specific name or I'll say like fruit inventory what do I put there one of the fundamental principles of an array is that it is an ordered list of information meaning this is not just some bag full of numbers where they're just all a clump together the order is something that is fundamental to the way this array has been defined and every single value in the array can be specified by its index what do I mean by index if I were being super informal about this I might be well this is the first element the second the third the fourth and while that is true the index the indexes of an array start with zero so this is actually the zero element sure it's the first element in sort of traditional counting but in programming with arrays we always start from zero zero 1 2 3 and remember these square brackets well these Square brackets are very important throughout the lifetime of an array so if I have a variable called values that is of type array of floating point then I can work with any one of these values that is inside the array by referencing its specific index so if I were to say values square bracket to closed square bracket which element of the array am I talking about I'm talking about the third element or index two 012 and this is the answer to what I put where those question marks are I can now say fruit inventory index0 what will I see I'll see a bar of height 50 pixels oops I forgot my close parentheses there we go let's change that value to one let's not use values that will go off of the canvas so let me just change that to 100 great and if I used index two I'd see 70 index 3 I'd see 110 now here's a question for you what would happen if I typed the index 7 in here 0 1 2 three there is no index 7 let's run the sketch and see array index outof bounds exception welcome to an error message that you will see a lot starting today fortunately it's pretty helpful here it says says index 7even out of bounds for length four the array is of length four and we just tried to reference index 7 so referencing an element that doesn't exist breaks your code now what if what I want to do is every time I click the mouse I see the next element of the array visualized I know I need the mouse pressed event and now what I need yeah the answer again is a variable I need a variable to store the current index into the array that I want to display so if I add a variable called index oh wait what's its data type my example is a little silly in that I made my array of numbers floating Point numbers so technically I could say 100.3 that would be a valid number here although in terms of like a fruit inventory does it make sense to have like 10 three mangoes but this is not what's critical here the point is what I am trying to demonstrate is that I can have an array of any kind of data in a moment I'll show you an array of strings of text because I think that's a useful demonstration and I'm mostly just using floating Point numbers in all of the examples because it's kind of the most general purpose kind of number however this is a moment where I must use an integer because if I am going to use a VAR ible to talk about the index into an array this index cannot be 2.2 or 2.7 it has to be a whole number and processing the Java programming language will not allow you to put a floating Point number in as the index to an array so at this moment I now must create a variable let's say I'm going to call it index of type int for integer int index equals 0 let's plug in index here and let's run the code we're seeing the first element index zero into the array that's what's being drawn the height of 50 change this to one the height is now 100 I can now add in Mouse pressed index equals index + one so now when the sketch runs fruit inventory Zer is 50 I click the mouse fruit inventory one is now 100 70 110 not the most interesting demonstration visually but I am showing you how this works I now have a list of numbers I have a variable that tells me where in that list I want to currently be examining and looking at in order to draw something and then when I click the mouse I change that number and anytime I want to access something from the array I have to give the name of the array square brackets and the specific index into the array just for fun I mean maybe this is all just for fun I have no idea but just because this is a nice moment to do so let's look at a different data type besides just a number so I've been looking at floats for floating Point values I just talked about how an integer is for whole numbers only a string is a data type for a string of characters a piece of text so data type is string then I need a variable name maybe I call it message then I set that equal to a string of characters which is enclosed in quotes and I'll call it rainbow that's my message my message to you all is Rainbow semicolon to end the line of code let's look at that in our code so I'm going with fruits so I'm going to say string fruit name equals mango and then if I want to draw text to the canvas your friend is going to be the processing reference where you can see all the functions having to do with text I happen to know them most for the most part off the top of my head so I'm just going to put them in I'm going to say text align Center because I want my text to be centered text size I'm going to say 64 because I want to use a font size of 64 point then the text function will draw my fruit name and I want to give it a location I'll say in the middle but maybe down 64 pixels and by the way fill is what would set the color of the text so it's using a default fill of 255 but I could be more explicit and actually put it in there so this is showing what I want it to show and when I click the mouse it's going to go to the next element of the array fruit inventory but the fruit name is still mango because I just have a singular variable however if I wanted it to be a list of strings then I can add the square brackets here that tells processing that fruit name is going to be an array now maybe I want to add an S there that's just for my own personal code hygiene because it's going to be a list of things I'll give it a plural name but that's not at all required then I need the curly brackets and I can say mango strawberry kiwi Plum now I have an array of strings and just like I can look at every value from the fruit inventory array one at a time via an index I can say fruit names square bracket Index close square bracket run this sketch mango strawberry kiwi Plum a fruit inventory data visualization now you probably can guess what the problem with this sketch is what's gonna happen if I click the mouse again array out of bounds exception now it this looks like a very strange message index 4 out of bounds for length four well if this length is four shouldn't index four be right remember if the length is four the valid index values go from zero to three very important how would you fix that I think I'll leave that as an exercise to VI the viewer maybe you put an if statement there if index reaches the end of the array set index back to zero cycle backwards through the array so many things you could try what I would like to do next however is is look at what would it mean if I wanted to show all of the values of the array all at once instead of one at a time instead of having index be a global variable that changes every time I click the mouse what if I were to iterate through all of the values of the array and draw all of them did you just notice that I Ed the word iterate are you thinking what I'm thinking maybe this thing we just spent all this time discussing called a for Loop could be used in combination with an array what do I mean by that let's say for the sake of argument that what I want to do is print out all the values of the array to the console well I know there are four values in indices 0 through three print values zero values 1 values two values three done of course if my array has a lot more stuff in it this is going to get very unwieldy didn't we just go over all of this if I want to draw a lot of circles I don't want to have to say Circle so many times ha I could use a for Loop four I need an initialization condition I want to iterate over the index values of an array starting with zero so need a variable oh and the index values have to be integers so it should be type int I'll call it I short for index and give it the initial value of the beginning of the array zero then I need a Boolean expression I'm going to want to count through the array all the way up until how many elements do I have four and then I need an incrementation operation I want to go up by one I ++ so this Loop if I were to just put print lni in here what would this Loop do I would start at zero Which is less than four so it would print out zero then it would go up by one which is less than four so it would print out one then it would go up by one which is less than four so it would print out two then it would go up by one which is less than four so it would print out three then it would go up by one four is not less than four exit the loop so we would see in the console 0 1 2 3 funny that looks just like these index values so if I were to put in here print Ln values index I this Loop is performing the exact same functionality as these four lines of code sure I needed three lines of code instead of these four but if this were a 100 values I would still only need three lines of code I want to talk about the number four in here a little bit more in a moment but right now we can just understand it as I'm saying I is less than four as the Boolean test because there are only four elements index four is invalid and four is not less than four that's why this is not less than or equal to so coming back to the sketch I now want to include a for Loop inside of draw and all of the stroke and fill settings are not going to change so I'm going to move the line down here and just put the two drawing functions inside of the loop 4 in IAL 0 I is less than 4 I ++ notice how a for loop again is a block of code so the lines inside of that block it's convention to indent them helps make the code more readable and now instead of fruit inventory index let's get rid of this idea of a global variable index and instead I want to display the bar associated with fruit inventory index I and the name index I oh so it worked it iterated over every single one but it drew them all on top of each other I don't mean for this to be an elaborate demonstration of best practices for design and data visualization I'm just trying to show you a very basic example that shows how arrays work but I think I could do something here where I could space them out at least horizontally by doing something like let me create a local variable internal just to this Loop called X and I'm going to say x equal I * 50 so they're going to be spaced out by 50 pixels then the line is at X and the text is also at X whoops that's an interesting mistake I still have the top Point always in the center so the top point also has to be by X and let's space them out by more than just 50 better maybe the first one shouldn't be at pixel zero so let's add 100 to it 100 plus I times 100 maybe that text is just too big make it 24 point there we go again not the most amazing bar graph data visualization ever but you can see how with all of the data stored in arrays fruit inventory is four numbers fruit names those are four strings now I have a loop that just goes from zero all the way up to four but not including four and draws a line fruit inventory index I and text fruit names index I let's add one more thing I'm feeling very hungry today and I would like some more fruit blueberry sounds good I've added blueberry there and let's have 25 blueberries not too much I'll run the sketch oh I added another value to fruit inventory I added the string blueberry but I don't see it here why don't I see it there oh that's because the loop is only going up until 4 but now there actually are are five elements in the array so obviously I could just delete four and type five but something that I think is important to note is arrays actually store as part of themselves their own length and this is foreshadowing something I'm going to get to later this idea of properties inside of a variable what does that even mean don't worry I will talk about it in great detail but right now we can understand it as okay fruit names I want to make sure I iterate over all the fruit names I can actually instead of hard coding the length of the array I can say fruit names. length and now there we go we've got the blueberry as well now there's a flaw here which is that I could make a mistake and not have a matching number of fruit inventory as fruit names in which case everything would break and maybe there's a way to like package those two values together instead of having two SE seate arrays yes all of these are really good points but for right now I think this is an adequate demonstration of the core concept of an array of being able to initialize an array of numbers an array of strings an array of anything and be able to use all of those Elements by referencing it with a specific index whether it's one at a time or a loop iterating over all of them I'm trying to hold off on all of the details because they're going to be important later after we've talked about objectoriented programming but I do think it's worth me mentioning that this is fairly atypical it's not so often that you're hardcoding a list of numbers into an array you might be generating them pulling them from a data source creating them out of some mathematical function what if what I wanted to do right now is see all of this fruit visualized but it's a random inventory each time one thing that I could do is I could write another for Loop in setup to iterate over the array and reassign all of the values here we see that same for loop I starts at zero Boolean expression I is less than the length of the array incrementation operation i++ 0 1 2 3 4 five elements we picked five random values if I run it again five new random values so this worked this did the job of what I was just trying to explain however it's a little weird like why did I pick all those values and then randomize them a moment later and also if I was going to have a thousand fruit things am I really going to type in a thousand numbers first just to write over them with new random values no so one of the things that I can do when declaring an array is just say I want to have an array with this many spots in it and then in a moment I'll fill all those spots and the way to do that is with the following syntax new this word new is important and I'm going to talk more about it again when we get to objects float because I want to make a new array of floats seems very redundant but that's just the way life is in a strongly typed language we've got to be very specific about everything everywhere and consistent square bracket 5 n s bracket so this is the syntax of declaring an array of a certain data type with a certain amount of space in it I want to declare a variable of name values whose data type is an array of floating Point numbers and the thing that I'm going to store in that variable is a new floating Point array with five spots in it this syntax is a little wonky Tak some getting used to but it also I think will be a bit more clear to you especially what this new word is for once we get to this thing called objectoriented programming which is coming oh I can't wait till we get there new float 5 let's just make sure this still works and there we go maybe you want to practice playing around with this try adding an element taking one element out changing the way it's drawn just use this code and sort of get comfortable with the concept of arrays maybe something you could try ey is having a sketch that you made have an array with several different colors in it and that could be your color palette for various things you're drawing what I would say is don't try to do that bouncing ball thing just yet don't try to make some animated behavior of a shape that's moving around and bouncing and then duplicate it a bunch of times with all sorts of different arrays for all the x's and the Y's don't do that stick with me because the next sections where I look at first the basic concept of a function and then this idea of an object is going to lead us to having arrays of objects and that's going to be the most powerful way to take an element that's in your animation in your scene in your processing sketch and have many of them all working together but I think it is worth taking some time to just practice the nuts and bolts of arrays with a sketch like this that's graphing a set of numbers using some strings maybe something you try is display playing the number associated with each fruit at the top of the graph so it might say you know 25 35 45 o and then could you do this this is a little tricky could you total all of the values how would you iterate over an array and add up all the numbers together and then display the total amount of fruit or maybe the average amount of fruit I don't know what that means exactly in this context but see if you could just try manipulating the array by adding all the numbers together by showing the values on screen trying it with color lots of things you could do take a little break for yourself and I'll be back to talk about functions in processing yeah yeah I know maybe you already know what a function is circle line fill stroke background those are functions what I'm talking about is writing and creating your own functions that's what's coming next welcome back I hope you had fun tinkering around with four loops and arrays those are fundamental concepts that are going to come back very soon as I build towards the final example that I'm imagining in this video series we got a ways to go still but we're getting there we're over the hump we're past the halfway point for sure there is another fundamental concept a building block that we need in order to realize all of our dreams and make anything happen in programming and those two things are functions and objects now for the moment I've only written functions here on the Whiteboard let's write objects also and maybe I want to briefly return back to this bouncing ball sketch to illustrate what I'm talking about look at this program there's like a whole lot of variables all at the top I'm doing some stuff in setup I've got some stuff in Mouse press all this code and draw there's no clear organizing principle to how I have built this sketch in processing which is fine the ball bounces I love it you love it but but what if I wanted to have more than one ball bouncing how can I get a handle on this sketch divide it up into parts and reuse aspects of code I've already written to duplicate Concepts within the code itself imagine if I could write a sketch that looked just like this what if I could have one variable and somehow inside that variable are all the properties of a ball and all the code that manages how that ball operates I could create a new ball in setup and I could execute commands on that ball bounce off of the edges Show Yourself draw yourself in the canvas this is where I'm going with this idea of encapsulating all of the properties and behaviors of something that's in a processing sketch into this idea of an object and that brings me to the concept of modularity how do I take a program and break it down into its separate parts and organize it in a nice clean way the second core concept of functions and objects is this concept of reusability maybe this has already happened to you where you've been writing a processing sketch and you wrote six or seven lines of code to do something and then all of a sudden you realize like oh I want to do that again that same thing let me copy paste those lines of code change it a little bit then copy paste it again and change those a little bit there's got to be a better way if I have written the code to execute some kind of idea what if I want to reuse that code several different times in a processing sketch so my goal here is to get all the way to explaining all of the details in terms of how this little preview of objectoriented programming works but right now I want to set all of this completely to the side before I can get to all of the details I'm much too excited to talk about objectoriented programming but we're not ready for it yet before I can get to that I need to just talk about what is a function and how do you define and call your own functions it would be completely reasonable for you to say to me right now what are you even talking about I know what a function is here's an example of one here's an example of another one this whole time all throughout this coding Journey we've been over and over again calling functions the circle function the background function The Fill function the stroke the line the triangle those are all functions that are defined inside the processing code base our use of them demonstrates the power of modularity and reusability if I want to look for the part of the code that draws a circle I can find the call to that function if I want to draw more than one Circle I can call the circle function twice somewhere behind the scenes in the larger code base that is processing is written all of the underlying code to set the background color to draw a circle on the screen so if these are processing defined functions how could you define your own function what if you wanted to write the following code there is no unicorn function in processes thing but if you want to write all of the code to draw a unicorn and name that function unicorn you could call the Unicorn function so how does this work how do you define your own functions maybe you remember way back when several hours ago at this point I talked about the functions setup and draw setup and draw control the flow of a processing sketch setup Begins the processing sketch runs once draw then follows and happens over and over again mouse pressed is one you could also have it executes the code anytime you click the mouse and when I looked at those I said don't worry about the parentheses and the curly bracket and that weird word named void someday I'm going to talk about what those mean now is that time those are actually function definitions this is the code that defines the setup function this is the code that defines the draw function and this is the code that defines the mouse pressed function the odd thing about these functions setup draw and mouse pressed is that they are special in the sense that processing is asking you to write those functions processing knows to look for the setup function for the draw function Mouse pressed and knows when to execute those functions you don't actually have to say call setup call draw call Mouse pressed but if I wanted to draw my unicorn and call the Unicorn function I would have to look for the definition of the Unicorn function and to Define your own function the syntax is exactly the same as defining setup draw Mouse press Etc defining a function involves four parts void I'm still not going to tell you why it says void there but I'll get to that and I'll just tell you right now this is known as the return type then there is the function name in this case unicorn it is a name that you choose to make up the convention is for it to be just like a variable name start with a lowercase letter you can't start with a number and don't use something that's already part of processing like don't call your function Circle next is an open parentheses and a close parentheses what goes in here are the functions parameters now you might have noticed anytime I Define setup or Draw or Mouse press there there's nothing between the parentheses there are no parth ders but whenever I call the circle function I've got to say hey this circle should be at this XY with this diameter the background should be this grayscale color the parameters are what Define what arguments are expected to be sent into the function when it's executed so setup draw and mouse press don't have any parameters and maybe when we start our first function definition when I start to demonstrate this with code we'll leave that blank and then slowly fill it in I said there were four parts so we have the return type the name of the function the parameters and then I guess the fourth part is really just what is the code that should be executed when the function is called and that is written inside the curly brackets it is another block of code maybe this could be called the body of the function I'm not sure if that's actually a term or if I just made that up right now but it's the code that goes inside the definition all right so I'll unicorn is probably way tooo much for me to try to draw right now let's think of something else delightful that we could draw that's not just one shape how about a lollipop it's a little bit of skew there we go lovely lollipop maybe it should be blueberry delicious so what I'm doing right now is essentially going back to the beginning of this series is where all we did was draw shapes in a canvas in processing and just for the sake of argument here let's just imagine that I also want to draw the sun shining on this lollipop because it's a beautiful day outside the lollipop looks delicious and the Sun is bright and making us feel warm and happy Oh what a beautiful scene the sun shining on a lollipop so this is where I want to demonstrate first the principle of modularity what if I want to break my program into two parts the Sunshine part and the lollipop part I need to define a function called sunshine and one called lollipop I have no idea how to spell lollipop I think that's right so here we've got the first three parts of each function definition the return type which is void got to explain what that means the name sunshine or lollipop the parameters which are empty just open close parentheses and then the body of the function so what goes in the body of the function well for sunshine I want the code that draws the sunshine for lollipop I want the code that draws the lollipop now it just so happens that I wrote These functions in between setup and draw but actually they could be anywhere I could put sunshine and lollipop after draw before setup I could put draw first then setup then the functions these are all Standalone blocks of code that execute a subsection of code the order that they happen has to do not with where they are written in the text file itself but the flow of the program setup is called automatically by processing first draw is called automatically by processing second and looped over and over again and then wait sunshine and lollipop are never executed there is no sunshine there is no lollipop because those are functions that I have defined so if I want the code the body of those functions to be executed I need to explicit call those functions and the way I do that is with the function name followed by open and close parentheses with anything in between that needs to be there based on what parameters are in the function definition in this case there are no parameters so all I need to do is inside draw maybe I want to call Sunshine and I want to call lollipop and there we go same exact sketch it does nothing different but I've now reorganized the code I've made it modular I have a sunshine function and a lollipop function if I want to change the way the sunshine works I know oh let me just go work on the sunshine function let me move it over a little bit there I like that a little bit better so next I want to focus on the concept of reusability what are parameters why are they there how do you define them how do you use them but before I get there for you maybe now is a good time for you to pause the video find a sketch that you wrote previously anything really and see if you can take something that was in draw or something that was in setup and break it out into its own function name that function define that function then call that function could you take your sketch and make it more modular by having different parts of it executed from within different functions that you define and maybe you will have a unicorn and a cupcake and a puppy and other things besides just a sunshine and a lollipop all right and then when I come back and you come back we'll talk about reusability all right now now I think that that lollipop is melting under the heat of the sun too much I want to move it over to the right so I'll just move the circle over to like a different X position 350 and then I'll move the rectangle over to 340 oh I didn't get that right I guess it's 345 you can see this is kind of awkward and this goes back to again the beginning of this whole series when we introduce the concept of a variable I want to be able to store values in variables so that I can manipulate them and update one thing which updates other things more easily this really ties in to this important principle of reusability with functions what if I want to draw more than one unicorn or really in this case what if I want to have more than one lollipop I can call the lollipop function twice it's executing the code twice but I only C1 because there's no way to modify the way the lollipop function happens it's drawing two lollipops one right on top of the other the result is US seeing just one this is exactly where parameters come in when I draw a circle I want to give it an X and A Y well this is ultimately what I want to do I'm essentially writing another shape function in processing the difference is it's a lollipop shape and I want to be able to Define it the same way that the circle is defined in processing by being able to draw a lollipop at a given XY and so par parameters are ultimately variables that are defined inside the definition of the function and they are initialized by the arguments that are passed in so I probably earlier in this video was using arguments and parameters interchangeably I don't remember when I said which but now is a moment for us to be very strict about that definition the parameters are the variables you define in the function definition and the arguments are are the values that you pass into the function when you call the function in other words if I want to introduce the Lollipop being drawn at an XY location I could Define an XY variable inside the parentheses in the function definition it's the same as any other variable declaration I need a type and a name and then if there are more than one parameter I need to separate them by a comma so that is new syntax the parameters are separated by commas processing is being very helpful to me right now in a couple of places it's telling me down at the bottom the value of the parameter X is not being used I Define the parameter I need to make sure I use it inside the code and what do I want to do with it I want to say the lollipop is drawn at an X and Y location and if I'm right the rectangle should be at xus 5 because the stick is 10 pixels wide and I want it to be centered under the circle now let's look at this area is tabbed and we can see here at the bottom the function lollipop expects parameters like this float float when I run the code the error is telling me that I have not specified the correct arguments that match the parameters in the function definition however you define a function you must call it in a way that matches it precisely so what I need are two floating Point numbers 320 240 400 240 let's try that and there we go two lollipops and this is it that's the basic principle at play here I can Define my own functions in order to divide the program up into different parts to help me keep things organized I can also add parameters to the functions so that those functions can be called multiple times and modified making the code reusable so now it's really just a matter of practicing this if you want an exercise what I might suggest is adding more parameters to the function definition of lollip Lop maybe you want to add a size parameter so you can pass in how big the lollipop should be you could do a flavor which would map to a color so give that a try I know it's going to be really hard to pause the video right now because when I come back I am going to finally explain what this word void means and why do function definitions have return types all right it's time what does it mean for a function to have a return type and why is it that every single function that I've showed you so far when I'm defining it has the return type of void what does void mean to illustrate this idea let's consider two functions that we've used quite a bit already in processing the circle function which takes three arguments the X the Y and the diameter of the circle and the random function which typically takes two arguments the minimum and maximum of the range of random numbers that you want to get out both of these functions perform a task the circle function draws a circle to the screen the random function picks a random number but as you may have noticed most of the time when we write the random function we're taking that value and putting it into a variable writing some code like float R equals random you could think of the random function as answering a question and then that answer is sent back out of the function and stored in the variable R it returns notice the use of the word return there it returns a random number between some minimum and maximum the circle function doesn't return anything it just performs its task drawing a circle to the canvas this is the idea of a return type the random function has a return type that return type is a float it returns a floating Point number the circle function does not return anything but it still has a return type what is that return type you've probably guessed it by now it's void functions that return something return some kind of data an INT a float a string Etc functions that don't return anything return void so if I were writing the definition of a function that returns something like a float instead of writing void I would write float I would put float as the return type if I have a return type I must have a statement at the end of the function that starts with the keyword return and then includes whatever value is actually being returned so presumably the random function has some amount of math or algorithm that picks the random number and then returns that value back at the end of the function definition so nothing that I've actually shown you so far in terms of the code that we've been writing requires a function that returns a value I have a feeling that this is going to happen pretty soon especially once I get into objects so hopefully this will begin to make a bit more sense once there's a scenario where we really need it but let's create an artificial one right now just to look at that syntax how about I write a function that receives as its argument a number let's say it's a distance in miles and it converts that distance to kilometers so the function has a return type float I'll call it miles to kilometers and the definition includes one parameter the value in miles and then it's my job to do the math and properly return the converted value from miles to kilometers the formula for converting from miles to kilometers is take uh the value miles and multiply it by 1.69 34 I think that's the precise value then I can take that variable and return it let's test it a marathon is 26.1 it's more like 26.2 I I don't know if that's the precise amount but you get the idea okay let me run the code and actually I I have an error here it's telling me the function miles to kilometers does not exist it does exist I've written it there I made a mistake I can see what it is do you see what it is there should be a capital T I don't remember whether I specifically said this earlier but if I didn't this is really important everything in processing is case sensitive so I'm GNA get an error unless I capitalize that t and then I realize also let me actually print the value out so we can see the result run the code again there's nothing being drawn just to wrap up this example let me draw two lines one in length in miles one length in kilometers and now we can see I have two lines one representing a distance in this case 100 in miles and the other in kilometers all right I really want to move on and get to objectoriented programming oh it's going to be beautiful it's a topic that will just bring everything together it'll help us wrap up this whole intro video series and we'll just launch you off into the rest of this journey of a lifetime programming and processing and Beyond but you should probably take a break for yourself get some fresh air stretch move your body around and also take a little bit of time to practice this idea of functions that return a value you could try something similar like converting Fahrenheit to Celsius maybe you have your own favorite mathematical equation that you could put into a function that returns a value maybe you're thinking of something even more creative that I can't possibly imagine give that a try take a little break and then we'll be ready ready for classes and objects hi again welcome oh this is a momentum this occasion I know I say this basically every single time I take a break and come back but this is the most exciting and important section of this whole video thank you for sticking around I mean it's been hours and hours for me it's been actually days of trying to record all this and we're finally here I'm finally going to talk about objectoriented programming classes and objects and it's going to just revolutionize the way that you think about and are able to organize your code and make processing sketches hopefully for the rest of time or however long you choose to program in processing or whatever you choose to program in remember this example that I made back in the section on functions we have these two lovely lollipops and the sun shining down on them I mean maybe we should think of them as flowers because it's a little weird to have the sun shining on the lollipops but that's not the point of what I'm saying what I want to talk about now is how we think about the elements that live inside a processing sketch learning about functions introduced you to the idea of reusability and modularity and in fact we have a modular program broken into parts and we're able to draw the lollipop twice reusing the same lollipop function but if I want to carry this idea forward and I want to start to have those lollipops or flowers animate maybe they grow maybe they bloom I want to have the sun maybe the sun sets and then the sun rises it would be very hard for me to continue this line of thinking with only functions I need something more let me go back to another previous example this is the bouncing ball sketch from the section on conditionals the code the way I've written is probably unrecognizable to you but just just look at it for a second let's just read it ball equals new ball wait where's the X where's the Y where's the X speed where's the Y speed there is none of that there is just the this idea of a ball ball. update ball. show where's the code where I call stroke and fill and circle to draw the actual bouncing ball all of that code is actually in an entire other part of this processing sketch a different tab I can click here on Ball and suddenly I see those variables and I see those calls to fill and circle and all of that logic to move the ball this code is the embodiment of the first principle of objectoriented programming encapsulation what do I mean by encapsulation so every example that I've written so far generally just has one page of code and it has a setup function and a draw function at the top of the code are usually many variables the global variables for the sketch another way I could describe those variables is the data of the sketch then inside setup and inside draw is typically all of the logic of what's happening in the sketch how are we manipulating the variables what are we using the variables to do are we using the variables to draw things to test some logic to perform interaction with a person who's operating the sketch many lines of Code full of assignment operations conditional statements Loops all that stuff that I might refer to as the behavior of the sketch or the function ality of what the code is doing encapsulation refers to the idea of packaging the data and functionality together into one thing an object now to be clear even though I'm talking about a processing sketch I'm not suggesting that we take the entire processing sketch and package it into an object a key element here is thinking about what are all the different parts of the processing sketch and how do we divide them up into a collection of different kinds of objects but for Simplicity sake the examples that I'm starting with are things like the bouncing ball where the whole sketch is just one ball so I'm going to make one ball object and that's the whole sketch but keep this idea in the back of your mind because as we move forward I might have a sketch that has lollipop objects and sunshine objects and all sorts of other kinds of things inside the sketch all right let's think again about a flower what are the data of a flower another way I could ask that question is what are the properties of a flower well maybe the properties are things like the number of petals maybe what color is the flower what is the height of the stem I could keep going obviously but this is the data now I want to ask well what is the functionality of a flower and again another way I could think about that is what is the behavior of a flower maybe I could come up with things like the flower will grow maybe the flower will Bloom and I'm writing those with parentheses because they are functions these are variables these are functions and remember the idea of objectoriented programming is to take a concept like a flower and package encapsulate all of its data and functionality into one thing but there is a really key element that I have not yet described to you I keep using the word object here I have a marker object I have a glasses object I have a shoe object I'm talking about things in the real world the physical world that I inhabit as physical objects they exist I can see them I can touch them I can operate them that this is going to sound weird is very different than the idea of a marker the idea of a shoe the idea of glasses in objectoriented programming we have the concept of a class and an object right here on the board this rectangle this box is not an actual flower it is just the description of what it is to be a flower in the world the concept of a flower is a thing with this data and a thing with this functionality this is the class an actual flower itself I don't have one sadly I really should have thought of that in advance but if I could walk in here and show you a flower that would be an instance of an object the class is the template the source code if you will for making an actual instance of an object of the type defined by the class this is also a key point anytime you declare a variable you need a type and a name for that variable maybe there's a score that's a floating Point number that has a initial value of 100 when you make a class when you build the template for an object you are defining a new data type it's not a float it's not an INT it's not a string it is a flower this is really exciting and is exactly what I want to slowly step by step show you all the bits of syntax you need to learn and how to write your own classes and generate your own object instances in your code okay I have a confession to make I'm very tired of the bouncing ball let's try something a little bit different honestly something a little bit simpler that will help me focus on the important details about classes and objects I have a sketch here that I have just made and it is called a bubble I'm going to run it and we have this lovely little circle floating up to the top and off it goes in the code I can see that I have an XY that is where I am drawing the bubble as a circle and then I'm manipulating the XY by moving it up by a random amount and also moving it left and right horizontally by a random amount my goal is to write a bubble class from which I can make a bubble object and then another bubble object and another one and just fill the screen with bubbles all the while only having one set of X and y's in my code because of objectoriented programming and encapsulation now I'm going to approach this kind of in Reverse you can't have the object without the class the template so it would make sense to write that template first but I want to look at the code for operating the object because it will actually give me the instructions for how to design the class the variable in my sketch will be of type bubble I haven't been explicit about this yet but anytime you write a class defining a new data type that data type the convention is for it to start with a capital letter this allows you to easily differentiate it from just any other variable name this is a type it's a type that I'm going to make up but it is is different than an actual variable the variable should start with a lowercase letter this is like any other variable declaration I have the name of the variable bub it's a little bit of a weird name but it's what I picked right now and then I have the type which is a new type that I'm about to Define in a class the type is bubble to initialize a new object there's a new keyword for you to learn and guess what that keyword is actually new bub should store it should equal a new new bubble object yes this is a little bit redundant but this is the way of the world we Define a variable of type bubble and then what do we store in that variable a new bubble object and I will get to more about what's really going on here and why we have the keyword new and why are we saying bubble again here why are there parentheses here I'll get to that soon now remember an object has both data and functionality so we don't see the data right now I'll tell you that the data is all being initialized as part of this call to new bubble but I do want to see the functionality the functionality the behaviors of an object are accessed through a new kind of syntax called The Dot syntax I reference the variable bub and then I can execute any function that is part of the bubble class with the dot so maybe I'll have dot update I'll call my function update to update the location and properties of the bubble I could call it like Ascend or float I probably don't want to call it float because float would be confusing since there's the data type float but you get the idea it's the functionality anything that you might choose to call a particular behavior of a bubble and then I also want to have another function called show I could call it render I could call it display I could call it draw even but I'm going to call show meaning that's the functionality of the bubble that draws itself to the processing window so this is our goal I want to take this program that has set up and draw all these variables change it to look exactly like this and have it produce the same exact result so now let's talk about how you write the class a bubble class is yet another block of code we start with the keyword class to say we're about to define a class we must specify the name of this class again the convention is to use a capital letter it'll work if you don't but it'll make me very uncomfortable so I really suggest you capitalize the names of your classes and then we have an open curly bracket and a closed curly bracket so everything that goes inside those curly brackets is all about defining the data and functionality of the class bubble so what data do we need well this is a very simple sketch I'm just starting with a bubble as having only two properties an X and A Y there we go now you might be saying to yourself oh I know these are local variables right they're not Global they're not outside of setup and draw they're local only to the class bubble while that is correct in a way the term for these is actually instance variables it's a fancy way for saying these are the properties of any bubble object anytime I make a bubble object there will be an X and A Y that are properties of that bubble object now I haven't initialized those variables yet I'm going to come back to that put a pin in that let's look at how I would Define the functionality of the object well guess what all of that work we did to learn how to define a function it's exactly that same syntax the only thing that's different is we Define the function inside the bubble class so instead of there being a setup or a draw or a mouse press or a lollipop or a sunshine function a sort of global function if you will I am putting a function inside the bubble class and inside those functions is where I can Implement my logic maybe in update I want to decrease the value of y by some random number so that the bubble floats upward in the processing window and then maybe in the show function I want to display the bubble as a circle with some given hardcoded diameter but if you're thinking what I'm thinking it probably would make sense at some point to make this also a property of the bubble but I'll leave that to later maybe even as an exercise for you okay we're almost there I have pretty much all the pieces I have the main sketch where setup and draw is where I am declaring the bubble object initializing it and operating it with functions update and show I've written most of the bubble class to find what properties are part of the bubble the data the instance variables and I've implemented the functions update and show right here that manipulate the data and use it to do things like draw stuff onto the window but I missed a really key part I left it to the end because it is a little bit confusing and it's the newest aspect of all of this I never initialized those variables I never talked about about why I say new bubble here the missing piece is something called the object's Constructor the object Constructor is a special function that's called with the keyword new when I say new bubble with those parentheses it executes the code that is inside these curly brackets the functions name is bubble with a capital B matching the class name the parentheses are where I might Define some parameters which I'm going to show you in a little while and then the curly brackets Define where the beginning and end of the function is and what goes in there well lots of things could go in there but typically speaking that's where I want to initialize the object's variables The Constructor you can think of as the setup function for a class what happens at the moment that the object is created and here maybe I just want to define the location of the bubble and there we go this is it this is everything we have all of the Syntax for how to write a class a template remember there will be no object if all you do is write the class the class is the instructions for what an object should do when you've actually created one by calling new bubble the name of the class then you have that object stored in this variable and you can operate it with different functions all right it's time to put that code into action so the question that you're probably wondering is well where do you write the class A Class like all the other things I've been talking about is a new block of code and I actually could put it anywhere I could put it at the top I could put it in between setup and draw I could put it below draw but something that I like to do and is is somewhat conventional with processing is to use use the feature of the processing editor that has multiple tabs to write your classes in a new tab it just helps you keep the code nicely organized so I'm going to go up here and click this down arrow I'm going to select new tab I'm going to name the tab it doesn't have to be the name of the class but that's going to make things easier to follow and understand so I'm going to call it bubble and then now right here is where I'm going to write the bubble class I've kind of gone over all of it already so I'm mostly just going to type it but I'll try to talk and give you some reminders as I'm typing it out I'm declaring a class the name of this class is bubble and I've got an open and close curly bracket a bubble has two properties an X and A Y and the Constructor is a special kind of function it doesn't have a return type so I don't ra to write void or figure out what it's returning it's actually returning an objective type bubble but we don't have to specify that because that's just what Constructors do they construct the bubble object and they return it I'm going to initialize the variables X and Y in there and then I want to write the functions for the bubble update and show both of these functions don't return anything so the return type is void they also don't have any parameters so there's nothing between the parentheses as we move forward and I make a few additional examples you'll see when oh I might want to have a function inside of a class that receives arguments oh I might want to have a fun F inside a class that returns something so all of that is possible but in this basic foundational example I'm not having any return type or any parameters what goes in update and show well the nice thing is I actually already have that code written I want to manipulate the variables in update so let me take this out and paste it in here and I want to draw the bubble in show so let me cut this out and paste it in here now again again the names of these functions update and show I made those up it's something that I tend to do a lot with things that are animating I want to have an update function and a function that draws it and the fact that I'm putting these statements in one function versus these statements in another again these are all personal style choices in the way that I like to organize my code they're not rules you might like to write and organize your code in a different way and there we go this is the entire code for the bubble class unless I made a mistake that I haven't yet discovered but when I run it we'll discover if I made a mistake I don't think I did though I guess we'll find out now no longer do I want an X and A Y here in the main part of the program instead I want one variable of type bubble I'll use my silly variable name bub because it's hey Bub my friend the bubble and then in setup I will initialize the bubble again I could write that up here but I'm just sort of writing things in the longer way just to demonstrate and then in draw I want to call update again remember the dot syntax bub. update I'm accessing the function update that is part of the class bubble and then bub. show okay ready everybody a drum roll please we did it we took that entire sketch that was not objectoriented and in some short amount of time turned it into a sketch that has a bubble class and a sing single bubble object one of the things that is really wonderful about this in the sense that we've made this program modular we've separated out the different functionality of the bubble into two different functions I can do things like comment out just one function that I'm calling on Bubble this can really help with debugging because now if I run it the bubble isn't moving you know again this is such a simple scenario there's nothing really going on here but this ability to be able to turn on and off different pieces of the functionality very easily because I've separated them and encapsulated them into the bubble class can be really really helpful all right I have an exercise for you actually I have two exercises for you you can you do both do one or just keep watching because I'm going to move on with this to the next step but one thing I might suggest is find something that you've made previously in processing that was not objectoriented could you examine and analyze that code to try to figure out how you would encapsulate the concept of what it is that's in your sketch into a class so maybe you drew a beautiful flower could you make a flower class that has the variables you need for that flower and the functions that you need that are presumably animating and drawing that flower exercise number two take a look at my bubble sketch here could you take this sketch and add a second bubble what would you need to do to add a second bubble could you add another property to the bubble what about the size what about the color what would it mean to add another property to the bubble maybe you add another function to the bubble could you add a bounce function or some type of check edges function what do you do when the bubble reaches the top of the window so give those things a try when I come back I'm going to specifically look at both of those things I'm going to add some functionality I'm going to look at making more than one bubble and that's going to lead me to what is perhaps the most confusing aspect of all of this I'm going to show you why you might want to include arguments in the Constructor to find the Constructor with parameters in order to initialize and create your bubble objects welcome back while you were taking a break I added something to this sketch a new function that's part of the bubble class that checks to see if the bubble leaves the window and then restarts it at the bottom in the code you'll see there's a new call to that function bub. edges and then in the bubble class you'll see I've added a new property R for the bubble's radius I'm drawing it with the diameter so that's radius time 2 that's actually going to become important for something I'm going to demonstrate to you in a little bit and here's the edges function if Y is less than negative radius reset it to the bottom height Plus radius okay so when you were playing around with the sketch maybe you tried to make more than one bubble I wonder how that went I'm going to do that right now I'm G to call the bubbles bub zero and Bub one I could call them anything I could call them fun bubble and curious bubble or I could call them bubble one and bubble two but I'm choosing zero and one because you can probably imagine remember that thing called an array that I talked about a little while ago at some point I'm going to make an array of Bubbles and remember when we're counting through an array we start at zero so I think it's going to be a little more clear we kind of practice that even with our variable naming right now bub zero should should be a new bubble bub one should be a new bubble then I need to call all the functions on bub zero and Bub one now I just said this I'm going to say it again you know about an array so an array would certainly make more sense if I want three bubbles four bubbles five bubbles am I really going to keep duplicating the code like this but for right now just to demonstrate the idea of more than one object let's look at it in separate variables time to run the sketch and there we go two bubbles I cannot emphasize this enough this is kind of incredible I didn't make a single change to the bubble class the bubble template has remained the same it was that easy for me to add a second bubble to the processing sketch because of the way I organized the code with objectoriented programming so let me ask another question what if I want the bubbles to be different sizes okay no problem in the Constructor that's where the variable R is initialized I could make it a random value wow I picked two very similar random values let's try that again a little bit better now what if I want them to start at a different location I could also make the X position random okay there they are they started in different locations kind of close to each other try again oh oh boy different locations but all the way to the right what if I really want to specify where they start you know I want one on the left and one on the right of the processing window how would I do that I know that I need to initialize the objects variables in the Constructor but in the Constructor I don't know which object I am I can't have it do something different I mean the random function works but I can't set it to be a specific value if I give it a specific value here they both start with that value this is where Constructor arguments come into play okay I've removed a lot of the extra details about draw and the other functions part of the bubble class from the Whiteboard just to focus on the bubble Constructor in the class and the initialization creation of the two bubble objects bub zero and Bub one remember I want bub zero to start at a pixel location maybe 100 and then I want bub one to start at a pixel location along the horizontal axis maybe 500 essentially what I'm saying is I want to say bub zero equals a new Bubble at xal 100 bub one equals a new Bubble at xal 500 so why don't I write the values 100 and the values 500 there inside the parentheses I'm going to create a new bubble with an argument that is a floating Point number to indicate the starting X position of the bubble The Constructor if you remember is a function just like update or show or edges but it is a special function that always returns the new bubble object if I'm calling a function or in this case calling the bubble Constructor with an argument I need to make sure there is a matching parameter that means I need to define the type for the parameter it will be a float and then the name oh this is where things get really wonky so ultimately what I want is to fill this value x with this value 100 so this variable whatever I call it is just going to be a temporary variable this local variable to the bubble Constructor the parameter to the bubble Constructor that receives the value and immediately passes it to the important variable the instance variable X so since I'm thinking of it as a temporary variable why don't I call it temp X then I'm going to set x equal to Temp X now I could add a second one comma something and then I could have a temp Y and set the value of y but I don't have a lot of room on my whiteboard and I want all the bubbles to start at the bottom anyway so this is how I'll do it let me remind you one more time of the flow here bub Z equals a new bubble with the value 100 the value 100 is then sent into the Constructor it fills the parameter temp X and then the value of temp X is assigned to the property of that bubble X so bub zero has an x value of 100 now bub one same exact thing happens has an x value of 500 let's put that into the code and see if it works okay first step add the parameter to the Constructor set X now equal to Temp X coming back to the main sketch I can add the arguments now to the bubble Constructor 100 500 then I can run the sketch and there we go two bubbles one at pixel 100 one at pixel 500 before I move on I just want to say a couple more things about this in my experience teaching processing objectoriented programming like this for many many years this whole thing about initial izing variables inside of a class through Constructor arguments is very confusing it seems really weird to have this variable whose sole purpose is just to receive this value and then immediately pass it to this other variable Why Can't This value just go directly into this variable well this is actually one of the principles of objectoriented programming that I would consider under that topic of encapsulation one of the core principles of objectoriented programming is that to operate an object you never mess with the data directly you just call the functions on that object this has a lot of benefits it's kind of way beyond anything we're doing right now and it kind of doesn't matter right now oh who cares if I'm going to access X directly or not or what I'm going to do but there is a level of protection here if I wanted to set up some rules to make sure that a value that's passed in is constrained within a given range then I can put all of that logic into the Constructor so this idea of sending the value in through the object's Constructor is actually quite important and Powerful that said in the same way that you call a function on an object bub zero. update bub zero. show you can also access the variables of an object through the dot syntax so if I really wanted to I could say something like bub one doy equals 200 and now if I run the sketch that second bubble bub one is starting at the yv value of 200 ah so this is making me kind of uncomfortable I don't recommend you write the code this way it will work and probably in some of my other examples and future other videos and tutorials and things that you might look at there are reasons why it can be very convenient to just access those properties directly as a constraint right now to practice try not doing that and instead initialize the variables through the object's Constructor so with that here's something you could try what about adding a second parameter to the object's Constructor that sets the value of the radius so I could say hey I want a very small bubble and a very large bubble what would you need to do syntax wise to make that happen The Next Step I'll take is adding an array which you could try to do right now if you want to but don't worry I'm about to do it hello again you can see that I have added a second argument to the Constructor to set the radius we've got one bubble with a little radius of 20 and one larger bubble with a radius of 100 in the bubble class note how I renamed the parameters of the Constructor uncore X and underscore R it looks a little bit odd underscore is one of these weird special characters that you actually can use in a variable name and you can even start a variable name with and it's typically used maybe for what I might consider a throwaway variable or a variable that you don't want to change the value of and use and in this case that's exactly what these underscore X and underscore R are doing they're just there to receive the value and pass it to the important variable the actual X and the actual R all right with that out of the way let's Implement an array of bubbles First Step instead of individual variables bub zero and Bub one I'm just going to have one variable called bubbles I'm going to use the word bubbles bubble with with a plural just to indicate to myself that it's going to be an array but really remember variables can be anything you want to call them I need to make sure I put the square brackets in to tell processing that this is going to be an array and now here's where things get a little wonky I need to both create the array and specify the size of the array and then I need to individually go into each element and create a bubble object and place it there in the array so up here I'm going to say new bubble and let's just have two for right now so that makes an array with two spots in it and just to ease our way in we don't need a loop just yet let's individually create bubbles index zero and Bubbles index one then I need to call update edges and show on each one of those bubble objects in the array and there we go exactly the same sketch I had before only the two separate bubbles aren't aren't two separate variables they are inside of an array at index zero and index one so I'm not going to add a third bubble or a fourth bubble here if that's what I want to do I really am going to want to use a for Loop to iterate over all the elements of the array so this is actually something you could try right now remember all that stuff we did with arrays and for Loops see if you can get it to work I'll pause and wait but then I'll come right back and implement it and show you how to do it adding a for Loop let me first do that only in draw so around where I'm saying bubble zero and Bubbles one I'm going to put a for Loop four now instead of referring to specific indices I don't need this second call to Bubbles one and instead of zero I want to say I so the loop is going to start with i equals 0 call the functions set I equal to 1 call the functions once I gets to two we're done done out of the loop same exact thing it would also be better if instead of hardcoding the value two I just accessed whatever the length of the array is okay let's try adding 10 bubbles so the array will now have 10 elements in it I do not want to initialize every single bubble individually so I will also do a for Loop in setup then I'm going to say bubbles index I equals a new bubble and let's just leave it at 100 comma 20 for now there we go I have 10 bubbles all floating up but I've lost something here I lost the fact that I had the bubbles placed at different spots with different sizes to be honest it might make sense for me to right now just remove those Constructor arguments and go back to initializing the variables with a random value but I think this is kind of a nice opportunity for me to show you something that you can do to make use of that iterator I while you're initializing the elements of an array for example even though I is really just there to count over the index values of the array there's no reason why I can't put I right here as the first argument to the Constructor oh look well it kind of looks like they all start at the same spot because pixels 0 1 2 3 4 5 6 7 8 9 they're kind of very close to each other what if I were to multiply I * 10 so now I'm starting the Bubbles at pixel 0 10 20 30 40 50 all the way up to 90 pretty good let's try 50 look at that oh let's add 50 and look how they're spaced out so nicely so if what I want to do is initialize the variables with some regular spacing I can use the fact that I'm counting through the array to do that but I can also continue to use random and since I have Constructor arguments already there's no reason for me to remove them because I'm leaving open lots of different options by having them but instead of hardcoding 20 right here I could say random 20 comma 40 so now all the bubbles have a random radius between 20 and 40 pixels maybe you can read that line of code and understand it just by looking at it but I find having these equations and other function calls inside of the arguments themselves to be kind of confusing so just for readability purposes let me pull those out and put them into separate local variables and there we go I've named those variables X and R and that could be kind of confusing but remember just because I'm using the same name doesn't mean the variables have anything to do with each other these variables are local only to the for Loop and I'm using them just to send values into the Constructor and what happens to those values they get passed into the underscore X and underscore R variable and those get passed into X and R here the parameters should not be named X and R because they are being used within that same block of code The Constructor and that would be a conflict but I could have called them like I did before temp X and temp R and everything works just as it should I don't know maybe you have a better idea for what's a nice naming convention for your Constructor arguments I would love to hear about that in the comments all right I'm getting close to the end of this very long video All About Learning the foundational concepts of programming in processing got a few more things I want to demonstrate this is though a nice time to take a little pause take a little breather maybe you could try enhancing this particular sketch with adding color another property to the objects maybe what happens if you introduce a different kind of object could you have two classes and two arrays oh my goodness so many things you could do take it easy on yourself when I come back what I'm going to show you how to do and you could try this yourself is how to interact with these objects with the mouse what if I want to click on each object and have their color change when I click on them so while you were taking that break and I was taking that break I added color to the sketch did you if you did WOW because I realized while I was doing it I forgot to cover something kind of important earlier when I was looking at variables and that is what if I want to store a color in a variable so the examples that I made previously I would store the red green and blue values in separate variables and then if I needed to call fill or stroke I could just pass those variables into the function but there is a data type in processing called color that will store the red green and blue values together I'm making the case to you that these are both equivalent here three separate floating Point values fill R comma G comma B here one variable maybe I could come up with a better variable name than just call but call for color the data type of this variable is actually color and I'm creating the color value with a function called color so both of these things are built into processing there is a color function that receives three arguments or four or one depending on whether it's grayscale or has Alpha creates the color itself storing it in a variable of type color and then I can just say fill that variable name now perhaps there's a little bit of irony here in that I'm talking about this idea of packaging three variables into one in the section about objectoriented programming because you could design your own color class and a color object would have three properties and you could Implement all this functionality to manipulate color and that's definitely possible and kind of interesting but that's not what's going on here in processing processing has a special data type called color which is actually just an integer when you call the color function and give it three different values it takes those values and puts them together into one much larger number that processing knows how to interpret and set the pixels to the color that you originally specified there's a lot more to this it has to do with bits and bites and how numbers are stored in the computer's memory but I think that's a topic for another time I can try to make sure I include some reference material for reading more about that and maybe even link to another video that I could make or that I have already made about that particular our topic for now what I want to focus on is the fact that there is a color data type and a function called color that can create a color value that I store in a variable so now coming back to this code if I go into the bubble class you can see I've added a new variable of type color and in the bubble Constructor I've created a pink color with some Alpha and then I'm calling Phill and show with that color I could have also had separate RGB properties of this bubble object but I already had a value called R for radius so let's use the color variable now what if I want to do is whenever I click on one of these objects it changes color so what if inside the bubble class I add a new function and I'm going to call it over and I'll explain why I'm calling it over in a moment my idea for this function is that it's going to receive two values an X and A Y and it's going to determine if that XY position is in inside the circle only oh boy I do not want to call these variables X and Y because remember the bubble has instance variables X and Y so because I know my intention is to use it with the mouse I'm going to call it MX and my y I could access Mouse X and mouse y directly in the bubble class but I'm not going to do that and maybe I'll talk a little bit about why I've chosen not to do that in a moment so now the question becomes how do I determine if that point MX comma my Y is inside the bubble Circle itself and I guess in a way as we wrapping up this video I'm just giving you a smattering of some additional tips and tricks it's a small selection it's not comprehensive but will allow you to do a little bit more with this bubble example than just draw a bunch of bubbles floating on the screen all right so let's say I have a circle I also have a radius which is defined as the distance between the center of the circle and the exterior of the circle the perimeter of the circle I'm calling that R now I have a new Point MX comma my y maybe I click the mouse over here so my point is MX comma my maybe I click the mouse over here and my point is MX comma my y if I were to be able to calculate the distance between the center of the circle remember this is XY and that point MX my I can determine if that point is inside the circle how let's call that distance D and I'm just showing you two different examples of a d if D is less than R what if the distance between the point and the center of the circle is less than the radius that Point must be inside the circle if it's greater than the radius it's outside the circle so this is the code that I'll need to write only I need to figure out how to calculate D well guess what there is a function in processing called dist for distance that I can give it four arguments the XY of one point and the XY of another and this will return the distance between these two points and and I can store that in my variable D adding that into the code and I'll just for now print out the message Mouse is over so why did I write this as a function inside of the class ultimately what I want to implement is something like a mous pressed function for the class and you might have been thinking oh we have a function called Mouse pressed could I just write Mouse pressed into the bubble class and anything in there will be executed when you press the mouse on the bubble object it's a nice thought but think about what processing would have to do behind the scenes to do that it would have to know so much about your code and your intentions the only thing processing can do is tell you that the mouse has been pressed and what the location of the mouse was when it was pressed and that happens in the global function mous pressed so I wrote a function in the bubble class called over and I can call that function when the mouse pressed event happens in other words if I come back to the main program now and I add Mouse pressed what do I want to do I want to Loop through all of the bubble objects and then I want to say bubbles index I over Mouse X Mouse y one of the reasons I'm showing this to you is to emphasize that those functions in a class are just like like the functions we wrote earlier you can pass them arguments this is a way for you to communicate from one part of the code to another part of the code and there's so much more to it but this is a nice starting point let's run this sketch and in theory whenever I click the mouse on one of these bubbles I should see a message down in the console if I've written the code correctly so I'm first going to click over here where there are no bubbles no message great now let me click on this one it's kind of big ah yes I'm seeing Mouse is over multiple times in the console it's working okay but I don't want to just print to the console I want to change the color and certainly I could just do that right here let's do that right now actually and I'll give it a new random color just three random values but leave the alpha hardcoded let's just leave green at zero so it's some different shade of pink purple so you can see that anytime I'm clicking on a bubble the color changes but this is a nice opportunity for me to show you a little bit more just to practice this idea of functions that return something of different kinds of data types what if what I actually want to do is write another function called a change color in other words I want to really think about the code AS even more modular than it currently is so in this function that's where I actually set the new value so one option would be for me to just call change color here right now and I could do that same result but I want to show you something different the function over in my mind is really not about changing the color it's about one thing and one thing only knowing if any given point is over that bubble so in order to constrain it to only that functionality I'm going to have it return true when the point is over the bubble and false when it's not but what did I miss this function is no longer void it's now a function that Returns what a Boolean I can now say out here if bubbles I over Mouse X Mouse y right what goes in a conditional statement anything that evaluates to true or false this function over now evaluates to true or false if it evaluates to true I can say bubbles indexi do change color so in a lot of ways this is just an excuse for me to reinforce some things one I kind of forgot to tell you a little bit more about color so let's look at that there's lots more functions in processing distance is just one example remember that mous press function how could you use that with objects and all that stuff about functions taking arguments and functions returning things I'm showing you all of that just in this one particular scenario but I can't stop let me show you two more things about this particular example that I think would be nice to know about and help make the code a little bit more succinct personally I love the way that I wrote this if D is less than R return true otherwise return false it says exactly what it's doing it's a little bit longwinded and I feel it's important for me to show you this because you'll see it in a lot of other examples D is less than R is actually something itself that evaluates the true or false so there's no reason for me to specifically ask what its value is and then say return true I could just say return whatever you evaluate to so in that case I could write this function instead as return D is less than R so if I had shown you this first maybe that would have been a little bit confusing but I do want to emphasize that return return D is less than R is exactly the same as what is there commented out now return true or return false based on if D is less than R is true or false okay one more thing it's really good to practice using for loops and arrays and understanding what the index value means and how you count through all the elements of the array and you can see how I was able to make use of the variable I in setup for initializing the exposition of every one of those bubbles but this idea of saying hey I got an array of things can I just do something to every element of the array is so common there is another way to write this Loop that you might consider a little bit simpler to type or a little bit more clear and it's what's known as an enhanced Loop what if I were to say to you for every bubble B in the array bubbles update show and display it that's what I want to do here's the the Syntax for exactly that for every bubble B in the array bubbles update that bubble check its edges and show it and B doesn't have to be B I could have called it bub or again whatever I want to call it let's call it bub because that's what I used before when I had a single bubble object comment this out run this code and it's exactly the same thing so just to cover this syntax I have the variable bubble bub which will stand in for every single bubble in the array and then I have the array named Bubbles and I put those in a for loop with a colon in between and then instead of having to say bubbles index I I can just say bub. update bub. edges bub Doo the same exact Loop could be used in mous pressed I'll leave that as part of the code examples that I released with this video you could give it a try right now if you want to pause and just adjust that syntax yourself all right don't worry before I go I'm going to make nice long list of all the things I didn't get to cover in this video series and provide you with links and resources and ideas for what you can do next to continue your coding Journey one of the things you could choose to do is watch any one of my coding Challenge videos where I'll build a project from scratch you have all of the foundation for just about every coding challenge now that I have on my channel varying degrees of difficulty your mileage may vary but that's the idea let me give you a taste of that now let's build a project together I'm going to start with this blank sketch right here I'm going to make a burst of confetti to celebrate finishing this video and then I'm going to ask you to make your own version of it and share it back with me on the coding Train website social media wherever you wherever you can find me on the internet so to create this burst of confetti I want to have a lot of shapes probably just circles maybe I'll make them Squares bursting out from this one spot in the processing window so I need an array and an array of objects I'm going to make a confetti class I'm G to add the Constructor I'm going to pass in an X and Y location and the confetti is going to have an X and A Y so now let me make an array and I'm going to put a 100 elements in it usually if I'm programming something I'll make a single object first but we just spent a lot of time doing that in the whole bub section so I think I'm going to start just with the array right now am I spelling confetti right oh whoops I made a mistake do you see the mistake I made I forgot to specify that the confetti variable is of the type array I need square brackets there as well now let me set the background to White and then how about we start by just adding a show function I'm going to say fill Z and I'm going to draw a square at XY of size 10 and that's it now let me use that enhanced Loop to say show all the confetti so what I should see now when I run the sketch is 100 squares all in the center c. show does not exist oh I forgot to I forgot to put the return type void I also want to add rect mode Center so that the square is uh drawn uh from the center point perfect now if the confetti is going to burst out I'm going to need variables to keep track of how the position changes along the xaxis and along the y axis so I'm going to add an xeed and a yp speed and let's set those when I make the confetti to zero because how about I write a new function called burst that when I call burst the speed kicks in and let's make it some random value between 10 and 10 and same for yspeed and my idea here is when I click the mouse let's call burst on all of the confetti so running the sketch all the confetti is drawn at one point I click the mouse and in theory it should burst because I set those variables but I'm not using those variables anywhere guess what I need I need an update function to change the value of X and Y based on X speeed and YP speed and if in draw I'm always calling update then when I first run the sketch xpeed and yspeed remember are zero and only when I press the mouse do those values get filled with a new random number then I should see the confetti start to move oh look at that burst that was cool Tada okay I need to do more I want the confetti to fall down as if there were gravity this merits a longer discussion and I have a whole set of videos about doing physics simulation that you can find Linked In the video description but right now basically what I'm saying is that in addition to the Y value changing I want the YP speed value to also change because the objects the confetti are going to be pulled down more and more every frame yped equals ype plus let's just say a little bit 0.01 oh it's already falling we burst it okay so one thing is that is happening immediately so now I need this concept of the confetti only actually kicking into gear the moment that I click the mouse there's a probably a lot of different ways you could approach this what I'm thinking about right now is having a Boolean variable and I'll call it uh Party Time party time excellent excellent and I'll set it equal to false so in draw I'm actually only going to run through all the confetti if party time is true so this for Loop can actually live inside of an if statement if it's party time show an update all the confetti and then when I click the mouse what do I want to happen party time should equal true okay let's see how this goes hey that kind of worked I mean it did work but I don't there's some things about it that I don't like number one is the gravity should be much stronger maybe the um values of xpeed and Y speed should be a little bit smaller that's great another thing I would like to do is have all of the confetti start wherever I click the mouse so burst could actually be defined with two parameters I'll call it MX and my and when they burst I should pass in Mouse X and mouse Y and that's we all set even though I'm setting the confetti initial values in the Constructor I'm going to reset those values here and in truth maybe their initial values shouldn't get set with the Constructor and I should just set them to somewhere way off the processing window as initial values so here I no longer need width divided by two height divided by two instead when I click the mouse party time is true and the confetti is going to burst starting at Mouse X Mouse y click there we go and watch this what happens if I click again look I get the confetti again wow I mean here's the thing it's not as magical as you might think because if I click really fast it's reusing the same objects it's not creating a whole new set of objects oh that's something that I didn't get get to cover so many things I didn't get to cover what if I want those confetti squares to spin and rotate I didn't talk about transformations in processing how do you rotate a shape what if I want to add elements to the array so every time I click I create a new set of confetti 100 more 100 more suddenly the array has 200 then it has 300 well I can't actually do that easily with a regular array I need to use something called an array list that's another thing I didn't cover all right I have one one more segment I need to take a break and organize my thoughts and figure out what it is I want to tell you about I'll be right back I'll have changed my close it'll be a new day I'll probably do this tomorrow and I'll see you soon hi you are at the end of this very very long video All About Learning to program in processing congratulations making it through I hope you enjoyed the little mini project there at the end I hope you're already think thinking about making something to submit to the coding train passenger showcase so I'm here just to kind of wrap things up tie a little bow around this video and talk about what it is you might want to do next so maybe you're done that's totally fine very reasonable you don't have to watch any more videos do any more programming ever in your life if you don't want to but if you are interested in doing more there is a ton of stuff that I left out just to name a few things I didn't talk about loading images and reading the pixels of the image I didn't talk about using the processing 3D renderer or about how Transformations work which refer to the functions translate and rotate and scale I didn't look at data how to load text or how to load a spreadsheet and how to visualize that data into your code how to connect to an API meaning another service somewhere on the web that is feeding data that you could connect to and then talk about playing sound or loading video or about typography or or simulation and physics and all sorts of other things that you could do with code in processing or other environments but good news for you if you enjoyed the series I have so many more videos that touch on a lot of these Concepts so I will list with this video a lot of next things that you could look at one thing I might just suggest is go to the coding train coding challenges page you can sort and search and find all the project videos you are now set up to watch any of those although I should warn you that many of them use Java script so you might want to learn some of the basics of p5js before going to those videos which I also have videos about so there are so many different paths you could take obviously you could go to a different language uh python might be one that you're interested in you might want to find other resources and books and videos I'll try to collect as much as I possibly can and the coding train Discord is a great reference and place for you to chat about this and discuss this but really the main thing that I want to say to you is thank you it means a a lot to me that you sat through all of this that you're trying that you're learning to program I don't know how many people will watch this who knows but I would love to hear from every single one of you so join the Discord say hi say hi on social media if you've made something send me a screenshot a short little clip those are the things that I love to get and um that's it that's all I got for you thanks thanks um I'll see you again in 10 years 2034 is about when I'll be redoing the series again we'll see all right bye thanks for watching