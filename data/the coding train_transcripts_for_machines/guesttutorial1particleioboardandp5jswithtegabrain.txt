hello welcome to another video tutorial in this video tutorial you will not be listening to me as I've mentioned on many of my previous live streams and other videos I'm hoping to have a playlist of many guests coming in to present on a variety of topics in particular topics that I might not use in my regular programming life and um uh so I'm excited to try this new experiment with essentially we I had a guest before an interview but this is the first guest tutorial uh with TGA brain so this is tga's website uh TGA is an artist and educator she teaches at a variety of places including school for poetic computation which is the school where I am standing right now um sfpc doio that you're interested in if you're interested in um that's the URL and um 's going to show you some stuff about physical devices and sensors a topic of which I have a sort of patholog pathological fear of anything um physical which is why I tend to stick with software so um excited to introduce and have TGA here in the studio with a couple different video tutorial tutal and here she is hello um today we're going to be talking about environmental sensing um and how to connect a couple of different forms of microcontrollers to p5js and we're going to be making datadriven animations so because we live in this time where there's a lot of excitement about the Internet of Things there's a lot of excitement about Wireless Technologies there been a whole lot of different options and different boards that have come out that allow us to connect a microcontoller wirelessly to a server somewhere and then using P5 we can connect to that server and use the data or control that little microcontroller to that little computer in various ways um this is exciting because it means basically if you think about a microc microcontroller as a little computer it means that that we can um build circuits on these microcontrollers that allow us to collect data and place sensors in different weird places um to collect information about the world so imagine if you wanted to create some sort of Animation that is using data from a particular environment or a particular location of your choice um if you can set up a wireless network here in that place you you would be able to set up a sensor Network or collect information from that site put it onto um the cloud you know on online and then create some sort of um p5js uh animation that can um allow you to use that information coming from that particular site so this stuff is really interesting and there's been lots of sort of examples of communities who set up um environmental sensing networks in order to like find out more about what's happening in their in their local environment so we can sense things like pollutant levels we can sense things like noise levels light levels um motion if you're interested in looking at sort of um I don't know animal populations or like sensing something that's happening in a bird box or so on um these sorts of Technologies might allow you to prototype that sort of thing so the two boards that I'm going to look at first in this tutorial and then the one that follows is the particle board which is a little microcontroller that plays really well with WiFi and has a whole lot of um gpio pins general purpose inout pins that if you're familiar with Arduino you will have used um and so we can set up our own sensors and circuits on the particle and then put this data in the cloud so let's just walk over to this whiteboard so basically what we're going to do is we're going to set up a circuit on this is the particle and we set up the particle to talk wirelessly to you know our WiFi router wherever that is in our in our situation in our house or whatever and then that WiFi router is connected to you know the the cloud or the internet out here and then we uh have our little computer with P5 running on it that then is going to be getting information from the the internet right so I'm just going to show you uh particle board with a a light dependent resistor so a light sensor that is attached to it so this light sensor is on a little circuit and basically it's going to give us a value that indicates what the light levels are at the location of the board and so this value is then pinged up to our WiFi router and the nice thing about the particle is it comes with this whole um platform that deals with the management of the data on on the server and on the internet um so it saves us from having to set a lot of that stuff up for ourselves and so the data that we collect on the light sensor goes through our router to the internet and then at the other end we will use that data in a P5 sketch to animate something um okay so the exam as I said the ex the circuit I'm not going to spend too much time talking about setting up the circuit on the actual um particle board because I'm just using the sort of basic example that they have very well documented on their website so if you end up getting one of these and working through their sort of getting started tutorial what I'm working with here is of is um a circuit that has the light sensor on it and a circuit that has an LED on it so I'll just spend a couple of minutes going through the actual particle documentation and website just so you've we can have a look at it um so it's at particle.io and uh the boards look like this there's a few different types of them there's also one that actually can connect um to cellia net cell cellular networks I can't I can't talk today um and so that that if you use um the cellular one it means that you could set up say a sensor somewhere where there isn't even a WiFi network and if you buy a SIM card you could get data that way so if you wanted to do some you know online project where you need information from like a remote site somewhere um this is is an option for how you might manage that um because the data can come over the network that our um mobiles operate on so we're going to be using the photon today um and there's all these sorts of information about getting set up connecting um I'm not going to go through the whole WiFi connection process cuz it's pretty straightforward um so these this um board is already on the WiFi network that I have have we've got here in the studio um the we program the particle board using their web API so they actually have an API online sorry their web IDE so their web integrated development environment so this is a place where we can actually write the code that we want to run on this little microcontroller you know listen to this pin send me this data turn the LED on turn the LED off all that sort of stuff um and this code is uploaded to the particle via the WiFi network um so it's there's quite a nice workflow because they have this web IDE we can use um and down here you see the examples that you know it ships with so you can go through and have a look at the various things it can do by uploading these examples to it so if we just have a look at the you know 101 physical Computing example which is always the blink LED if if I bring that up you can see the code there in the editor and up here these icons are sort of the place where we send it to the board so if we're writing code for ourselves we would verify this code so that we're not sending you know terrible syntax errors to our board um and then once we've figured out all our debugging and our our errors we then flash it to the board so if I click flash you can see that the code's now going going over through the WiFi network and hopefully it's arriving down here at the particle and we can see some lights flashing it should the data is coming in and the LED that I've get set up now you can see it's blinking so we know that we've got our WiFi network set up correctly and we've got this blinking LED which is awesome um so that's that's basic setup this example is the standard um example that is explained really well on the particle website so I didn't write this code um and you can see it's commented really well um so I don't want to spend too long on it um but if we have a quick look you'll notice that the syntax is very is basically the same as using aduino so if you've used any kind of like aduino um board and done any sort of projects with Arduino you'll be quite um comfortable with the functions you see here so basically we've got a variable called LED which equals d0 so this is referring to the pin that our LED is on on the particle board we've got one for our photo resistor as well on a z so that's on one of the analog pins on our particle board we've got one some dealing with some power and we we we've also got a variable called analog value that is a variable that we're going to capture the value coming from our light sensor if we jump down to void setup you'll be seeing all these you know nice familiar um functions if uh that you'll recognize from uino so pin mode we're sending all our pins to either output or input output if it's if they're going to be pins for actuators things like lights or Motors input pins if they're listening pins or if they're listening for data from sensors so you can see that our photo resistor is on an input pin um what the the the line that I think we need to talk about is this particle do variable function So within the particle environment there's a class the particle class that has a whole lot of functions in it that allow us to program how our board is talking to their software that's running on a server you know in a desert somewhere um and this particle dot variable so we're using a function called variable that's in that class and you can see that it has three arguments the first argument is Def a string and it's defining our variable name so the variable name that we are setting up on the actual particle cloud or particle server is called analog value here um um there's a I'm zooming out um there is a second argument which is analog value and then we're saying that this is an INT so this uh function is unique to this particular system we're using and it means that we can then call that variable analog value when we set up our P5 um sketch later because it's actually like a spot in memory that we're kind of like reserving on their um system on their environment um so just jumping quickly through this uh you can see in void Loop we are reading values from the photo resistor pin there's a delay so that that we don't do it constantly and then there's also a little bit of code at the bottom where they're also toggling the LED off but basically that's irrelevant to us so so once we're happy with this program and it's sensing and we've set up the reading and writing to the particle board as we want it we then go up here we verify our code it's going to tell us if there are any errors in it you can see code verified great work so we're good to go and then we can Flash this to our board so the code is going up into the internet and is arriving at our board now we're going to look at this part so we're going to look at writing the P5 code that's getting the data that's sitting um on the particle Cloud okay so now is the p5js part and I have this really simple example setup in P5 that it allows us to get data from the internet from our um the variable that we set up to holds our light sensor data back into our P5 SC sketch so we can do something with it so how do we do that let's have a look at this sketch so you can see I have a number of global variables set up we have one that's going to contain our data we have one that's going to specifically contain our um Light reading and then I have a variable called current M which is containing the milliseconds the that the reading takes place so I've got a canvas here of 500 500 as you can see and then this is the important bit this is the interesting bits so we have this URL call so as I mentioned particle uses the rest a rest API and if you don't know what a rest API is go and watch some of Dan's videos on rest apis um but a rest API allows us to call it and get some data from it um and so we use an https call to do this and let's take a look at how we construct this http p ps call so if I jump back to my browser um we can have a better look at what what how to construct this URL so this H you can see https api. particle.io so we're talking to the particle um API and for the different ways you can construct calls that is documented in their API V1 devices and then this number so this number has to reflect the device number that is associated with the board that we are sensing on uh if we jump back and have a quick look you're you I think I mentioned before that this device number is listed on their web IDE and we can copy it and then paste it into this URL um analog question mark so we want to specifically get the variable that we set up called analog value on that server and then we need the access to token so we need that authentification part again which we can see here on their web um URL access token so you will have your unique one you need to copy it and place it in this um in this URL and so if I call that um URL that we've constructed from using all the different um uh values that we have for this board you can see that it's returning to me some Json data and it's returning to me the data in this Json format that is specific to that analog value variable that we set up before again if you're not sure what Json is or you can't really remember how to deal with it Dan's done some videos on that so pause this go check them out and then come back to us um but you can see that the particle API returns us these values in the format with the name value um of name value pairs which is you know fundamental to to the Json um data structure and when we ask for that information you can see we get some information a thing called name which is our sense our variable name the value and it has a bunch of other information in it like the last time that the data was logged is it connected or not some more information about time and the device ID and some information about the product so all that's there coming into our P5 sketch so after we put that um URL together we can then use the load Json function in processing in in P5 and so this load Json function is really handy when we need to talk to rest apis and again there's a number of videos on how to do this so if you need a refresher on apis go and have a look at them but the load Json function is that lovely that lovely thing called a callback function right so helps us deal with the asynchronicity of JavaScript and in this case we want to send that specific URL that we're using out to the internet and we don't want to do anything else until we've got the data back so that we're going to use the the call back function to manage that process so we send the URL load Json sends the URL and waiting waiting waiting eventually the data comes back and the data then gets passed into this variable we've got got set up called Data so it's going to have all that Json stuff that we just looked at in it and only once that data's come back will it then run this second part this second argument which is a function that we can see set up at the bottom of the code here called past data and so this second function then gets the Json data we just specifically get the reading the do result part of the Json data route and we put it in a variable called reading jumping back over here you can see that the there's this line three there's this value called 429 and it's its name is result which is why we are going data do result right so we get that number and then it's going to just print out in the console so if I run that you can see that ooh it's a little little bit um little bit hard to read there so you can see we're getting this thing called reading and it's 418 so if I um shade put shade over my sensor eventually we will see that number oh then I have to reload my S my um sketch you can see that it's come out to be a different number because I'm you know playing around putting my hand over it getting lower if I completely cover it up we should see that reading go way down so there it is at 41 right so I'm doing just a little bit of like um checking that everything's working as I think it should but we've successfully set that up so from that Json we're pulling out the the reading result and then just printing it out in the console so what can we do with that now um you can see there as I was playing around like it almost updates in in real time there's sort of like a a a little bit of a latency but it's not too bad I'm a little bit cautious of doing this whole API call in draw because we know that draw runs you know about 50 60 um Loops per second and most apis have rate limits on them and so if you violate the rate limit you know sometimes you can get blocked or whatever so I'm going to set it up here so that we are querying the API like maybe once every second or two just in case um so basically our sketch at the moment is just calling the API once and then printing that reading out to our console so we want to call it multiple times now so what I'm going to do is I'm going to write a new function called call Api and basically it's going to have all of this stuff that's in setup in it um it's going to take our URL it's going to use the load Json function to get the data back it's then once it has that back it's going to use the function pass data uh and it's taking note of the time so it's putting the current milliseconds so the amount of time that's passed since the start of the sketch into um this variable we've got called current M to understand what moment this happened in and so now if I want to um um see that data respond um we need to set up an if statement so that we can call it every second or or so so if we go if and I'm going to use the mlie function which is the millisec since the start of the sketch so if mlie minus um current M which is the milliseconds that the the moment the value for Millies when we took the data reading so so if Millie minus current m is uh greater than 2,000 so that'll do it every 2 seconds because there's a th000 milliseconds in a second then uh I want to call my API so then I want to call that that lovely um function that I just wrote that will get our data in so let's let's see if that works for us um so I've got the reading if I cover up my you can see that right so now I am printing it out to the console in every second or so as as my data is changing so that appears to be working so let's now then do something with that data I'm putting the data in the in the um variable called reading so if we want to just print it out to the screen we go reading and we'll just place it up there at 2020 and then how about we also write an ellipse so uh that changes size maybe with the um value that's coming in off the sensor so width height is reading reading and we'll just place it in the center of the screen width on two height on two um and then perhaps I want to just refresh my background every time I get some new data so that it doesn't look too crazy so I'm just going to put a background call at the top of my past data function which is the function that only gets called when the data comes in um and I put it made it made it red there so what's going on I drew my ellipse at 0 because there wasn't any data there yet um and we can see so I've got I've put my background in the wrong place again so let's just pick it up and I think if we put it at the top of call Api it should look a little bit better there that looks a bit better doesn't it oh and I've done this I've got my ellipse functional mixed up we actually want it to be XY width height so it's actually going to be width on two hide on two reading reading so that will fix my ellipse location that's looking better all right so now you can see that my lips is changing size just slightly with my different readings coming in um if I put the sensor in darkness so I'm covering it up you can see that my lips gets really nice and small and then bigger again so it's it's responding quite nicely if I wanted to be a bit more responsive you know instead of every 2 seconds I might say every 500 milliseconds or every half a second so there you can see it responds much much quicker and so I mean the great thing about this sort of setup is even though you know I have this particle Tethered to my computer the only reason I have it tethered like this um is for power so we could get a battery pack pop it on the particle and throw the particle up into a tree nearby and as long as it can hear the WiFi it will then broadcast these light sensored values to us which we can then play around with in a sketch such as this one so it really um kind of expands the questions you can ask and the sort of information that you can collect about the world and then use in in your projects to create you know things that are interactive and responsive to um a a particular environment so I think there's lots of potential for this um in the world of data visualization and also I you know sometimes I make public art so thinking about um making interventions that respond to their location or respond to a site of interest um these sort of technologies will allow you to do that all right thank you