yeah do you remember a time oh not so long ago when we were writing code that looked like this mover M and then setup m is a new mover and then in draw we would say things like m. apply force wind and we would make a T Vector called wind we would calculate it somehow we would send it in we would say acceleration add force and force divided by mass and all this stuff we learned it was a nice time back then so here's the interesting thing we said that aha let's let's try box 2D as a way of replacing our physics engine instead of keeping track of our object's location velocity and acceleration on our own let's let box do it through a boxd body but what what thing that's interesting about doing this is now that we've done all that we can Circle back and say okay well once we figured out our own physics Engine with location velocity acceleration we were able to apply forces to those objects and move them around the screen according to forces like wind and traction or whatever we came up with the interesting thing is in box 2D even though box 2D is handling our physics we can still make up our own forces and apply them to those objects we can apply forces to bodies so let's think about this we're writing a box class that instead of location velocity and acceleration it has a body object what if we want to write a function called apply Force now one thing we should note when we previously had an apply Force function we passed in a p Vector a force is a vector that causes a an object with mass to accelerate so the argument to the apply force method is a p Vector here however in box DD we still want to apply a force as a vector but we want it to be a VC 2 object VC 2 force and what do we do with that well we can say body which is B do apply force it so happens that the body method has an apply Force function so just like we were writing our own apply Force function for our what we're doing is we're say our apply Force function will receive a vector and pass it along to that body and we can pass it on but the funny thing is box DD is more sophisticated and not only do we need to apply a force but we need to say where on that box to De body do we want to apply the force right it's going to be quite different if we apply the force on this corner which might cause it to spin around versus right in the center so for Simplicity one thing we can do right now is just say you know what no matter what we're going to always apply forces to the center of that body and we can say VC 2 pause equals body. getet World Center so we can ask for that body's Center then we could say apply that Force to That Body Center so this is very simple we're actually this hopefully the shortest video ever this is all we're adding to our examples if we just add just this one function suddenly we can start applying forces to the objects but key thing that we're adding here in addition to applying the force Vector we need to apply the force to a specific location in this case we're going to simplify things and say always added to the object Center exercise to yourself try adding forces to other parts of the object so try creating a scenario where you apply forces to the corner of an object and see if it spins that sort of thing another thing we should mention about this is this the Assumption here is that this is a world Vector right the unit remember the unit is meters not pixels so when we start making up our forces or calculating them we have to remember are we in pixel land or box Dy worldland so let's take a look at how this actually works in a code example oh come on switch there we go hello Okay so let's just run this simple example which this looks like lots of the examples we've made in box 2D I'm just going to move the window over here for a second it's got a bunch of boxes being made fall and falling there's some boundary objects they're static now watch what happens when I click the mouse we're going to apply a wind Force to all these objects click the mouse and you can see suddenly the wind is pushing them all to the right they're piling up it's a very strong wind I let go the wind is gone they all start to fall down how does this happen well one thing we should look at is in the main program here this is just like what we did we could go back to the chapter 2 examples and this looks exactly the same the difference is that Vector seems kind of extreme 200 comma 0 remember we need a world Vector not a pixel Vector so I'm kind of making up numbers just to try stuff you know if I said five comma 0 and ran this we can see the wind isn't very strong I'm clicking the mouse as hard as I want but um the number 200 is going to give us kind of a value that makes more sense you know obviously that could be a variable I don't know why all I ever could think of is pearing noise but you could you could have the wind shift from right to left it could be a sine wave there's so many ways you could kind of augment what this force is but the point is just in the same way we used to make up forces we can make up vectors and apply them to the objects and again the only thing that changed from our box class is just adding this method just adding this method receive the force find the object Center apply that Force Vector to the object Center that's all we've done just this little bit of code is the only thing that's added and this little bit of code to from our previous examples it's that simple to start applying forces and one of the things that's exciting about this is if I minimize this we can go back and here is example 2.7 from chapter 2 you you can see here is a bunch of things being attracted to the center this was the attraction example this is without box 2D these objects are experiencing a force and we're updating the physics oursel through location velocity acceleration now let's look what happens when we take that exact same scenario oh this really bothers me that it's not the same size oh it's so sad that I didn't do this in advance edit this out someday when I have my magical editing machine okay look at this so there's a lot objects there's a couple things that are inconsistent but you can see the there actually now we have ATT traction but we have it with collisions and you can see what's interesting here as the things are attracted to the center they're also colliding with each other and piling up um and kind of getting stuck based on how the behavior has worked out so this is pretty interesting and if we look at the code these two examples both look at this attraction function and this attraction function I'm going to step to the side here this is how we're we used to do it with P vector now we're doing it with v 2 the fun it's exactly the same look we we a force with which is between the location and the other object's location now we're saying hey this force is between one position and the other object's position we're just using the vect 2 syntax now um the strength of the same mole local instead of multiply you could go and compare look at exercise 5.10 look at example 2.7 and you'll see that the exact functions are in there just one over here uses the V 2 syntax and over here uses the P Vector syntax so this takes a little getting used to but we can do this stuff really easily um with box 2D so one thing you might think about doing is go back to stuff you used to do what did you what kind of forces did you make up how do you control the motion of objects with forces can you bring some of those forces over into a box2d sketch what if you tried adding a friction Force um uh what if you tried making a PE noise wind there's so many ideas that you can uh think about okay um great I think this covers this topic and there's only one more box dut video left to go we're going to look at how to determine when two objects Collide and cause an event to happen when they've actually collided okay