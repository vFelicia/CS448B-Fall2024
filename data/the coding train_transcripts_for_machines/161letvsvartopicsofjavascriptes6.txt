this is a video sort of about var but this is a video about bar in 2017 now I should admit that I'm really way way way behind the times because in 2015 something came out called es6 what is es6 well es6 is short for e c MC a script 2015 what's the chance that I got that right hold on a sec this is an extra seat ECMA it stands for something some kind of consortium of Hmong mango loving astronauts I don't know but this is a consortium of people who come together to talk about what what is the syntax of the JavaScript language and how should it work and so in 2015 which was quite a while ago at this point the the consortium came together and thought let's instead of saying var to declare a variable let's declare a variable right instead of saying var x equals 100 let's declare a variable by saying let x equals 100 and also quite possibly let's offer an alternate option by saying Const x equals 100 so currently right now if you were to write this into your code all three of these would be valid JavaScript statements but they would all do something slightly different and I should also mention that one of the reasons why it's taken people like me years to get with the program is because even these aren't necessarily supported by every single web browser that people are using in the world I think at this point you know most modern web browsers support es6 natively and if you're a web developer their professional web developer there are all sorts of ways to put something behind the scenes that so that if somebody is if the code is written in es6 but the web browser doesn't support it it works anyway this is the subject of this video but this is a subject of what are these things they're in by the way isn't there like es8 like I'm already way behind so I'm like here making height yet yes six video somebody in the future when it's like es 712 would be like amused by this old historical antiquated like video this human being with actual like human body instead of robotic whatever anyway I'm off track now yes six is a standard I'm starting to use it in all my videos so what is the difference why so I'm gonna just tell you what the difference is in technical terms and then I'm gonna go and explain it var X uses something called block scope let X oh my god I said it wrong it did it totally wrong oh by there's like there's like so many people watching this video we're just like screaming at their screen for like the last 30 seconds bar uses function scope let uses block scope and if you program if you learn to program in Java okay drop by sorry folks in Java in C++ in processing which is built on top of Java and this is how I learned to program everything was always block scope it's the only way that I think I actually just when I even use var I'm just assuming it's block scope and writing code as if it is block scope but it's not and that's what's prone to error and block scope I personal mean they know I don't want to I don't want to be too down on function scope I'm sure function scope is a very nice scope and I would love to hang out with function scope and have some time together but I prefer block scope and so let's let me get to skip you this is way too long of a video to explain this let me get to the computer and start to explain what I mean here okay I'm over here so I have some code and I am going to start writing some code so what I'm going to do is I'm going to say var x equals 100 okay let's say var x equals 100 I'm going to say console dot log Exce console dot log X this is a look a weird example to start with it I'm gonna get to some examples that will hopefully help a little bit more but what should happen when this code runs set up starts this first line of code should execute and what should say I don't know what X is are you nuts I haven't heard about anything named X now I'm gonna say what X is and if then if it was able to go on to the next line of code would say what X is and then it would console.log 100 but that's actually not what's gonna happen I'm gonna hit refresh all I care about is the console here I got undefined in 100 well that's that's so unreasonable right because X is something that's undefined but shouldn't I really maybe possibly get an error there let's look what happens if I switch this now to let uncaught reference error X is not defined so you might say oh I like the other way better because it didn't break but here's the thing the fact that it is not letting you talk about that variable above where it was declared and initialized is is a is more is is a situation which is less prone to error let me show you some reasons why so first of all one thing that's interesting is I could do this let X then I could say x equals 100 and then I could put the console log here this would now give me exactly what var did so why why what's going on here well there's something in JavaScript with var called hoisting hoisting I'm so proud of myself my posting is because there was a long period of time where people would say on what that is but now I do I think and I'm gonna explain it so if I'm hoisting what is hoisting so I'm gonna write some other code I'm gonna say I'm gonna say for VAR i B's bar I equals 0 is less than 100 I plus plus I'm in rate OOP and I'm gonna like some stuff will happen here and then I'm gonna say VAR x equals Mouse X plus 100 and then I'm going to say if X is greater than 50 then VAR Z equals 20 and Y and and then draw an ellipse you know whatever bar y at X comma Y 100 100 so this is sort of nonsense code but I'm writing this code to make a point there is a point when you write code like this in ES fought previous to es6 in JavaScript what the interpreter actually means you're actually modified before it runs it does this thing called hoisting and it actually does this I don't think right and then I'm going to take out it it adds like a line of code at the top of the function that declares all the variables and then deletes all the variable declarations so this is why this is why those variables with var there's variables with var have function scope because even though if I declare var down here VAR y equals 20 the hoisting process puts the declaration at the top and it's a variable that's available for the whole for the entire function setup it has function scope even though it's declared and only used inside of this if statement so I can say things like console.log Y up here and I can do things like console.log I at the bottom so I'm gonna get undefined because Y doesn't have a value yet and then I'm gonna get what am I going to get down here console.log 100 because that loop is gonna have finished and left eye with the value 100 so that's exactly what I got and even drew part of an ellipse and then so technically like this code is sort of problematic because I've declared two variables I've wasted two variables called I right so now the so this is really the this is really the issue this wasting process which happens behind the scenes and lets variables be available to a broader scope beyond where they are actually declared and used makes big code prone to error at least in my experience so you know for example if I'm writing a loop here if I'd simplify this like and I want to have a separate variable for I somewhere else I'm really just I'm running into trouble the fact that I can actually use this variable I afterwards is there's all these problems that could happen by accident if I had another variable that was more global called I and the scope can get really confused so I should probably do this video so using let is a nice solution to this problem now I don't know so why is it called let versus var I mean in my understanding of this is well why not just change the behavior of bar well if you change the behavior of bar then you're possibly going to break all this code that has been written over time so in order to write order to have a new version of a JavaScript that has variables that only have block scope block scope they're only available within whatever curly brackets they're declared and whether that's if whether that's for a new name has to be invented so we just have to all change over and say like now let's just all use let let's use let I can't remember but let's use let let's use left let's use yeah I'm gonna just let them to use let let again this video could have been made 30 seconds by me just saying hey remember that thing called var it's called let now but there is actually a technical difference and let's look at that again right right now I'm gonna run this code and we see 100 i console log I as 100 if I change this to let I will get an error I is not defined and that's the error that I want I is only available inside of this block this is the block that's the block I has block scope if I put an if statement in here if mouse X is greater than 20 let J equal 20 console.log J I will get an error here because J is only available for this and you want your variables to only be available for I mean sometimes you need global variables I'm not saying all variables should have the littlest scope as possible but they should have the smallest scope that is needed it helps you organize your code helps you be less prone to error I mean they're making errors is fun everybody should make errors but this is a helpful thing okay huh what do you guys think did I explain that what questions do you have I guess write them in the comments and I didn't get to talking about what Const is so let me try let me try to talk about in a separate video in the next video what Const is and if there's anything that I missed or some questions there's a live chat going on right now if you're watching this as it edited video later is there anything that I missed I'm gonna go check that live chat and talk about at the beginning of the next video and there's a lot more es6 stuff that I want to talk to talk about so there's classes and there's promises so I want to get to that stuff eventually but I just wanted to talk about in this video let