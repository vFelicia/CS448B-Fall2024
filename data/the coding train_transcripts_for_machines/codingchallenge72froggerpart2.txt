hello welcome to part two of Frogger so what I made so far in part one if you can believe it I don't know it's all I got so far was a rectangle that I can move around the screen by pressing the arrow keys and now what I want to do is add some cars so I want to add the cars that are moving across um where which I have to avoid so what I want to do is first I already have a car Tab and hopefully I'm hoping boy am I hoping that all the work we did to figure out this rectangle thing and this frog thing will pay off when it comes time to program the car and it's going to be really simple so let's just first do one car eventually I'm going to need an array I'm going to have multiple cars but let's just have one car and I'm going to say car equals new car and I'm going to put the car at zero it's going to start at zero and it's going to be it's Y is going to be height minus grid * 2 and its size is also just is going to be grid now the car and the truck could have a variable so and I'm going to I'm going to make it uh and this is having the car start at the bottom uh two row two rows up from the bottom and having its width be the side of the grid and its height being two no I want its with if it's a truck it's going to be longer so I'm going to have it be a little bit wider just to try that out and its height be just the grid then I'm going to say uh car. show and let's just see if we can see the car now the car is not showing H what if what if I dare have the car no this is a bad idea because ultimately on some level probably going to be drawing the cars in different ways let's just have the car extend I was thinking about having the car extend frog and I would inherit the show function but I'm actually just going to leave that here and I'm going to make the car like a slightly different color just for right now uh and I'm going to I need to have the same exact Constructor basically uh except I'm going to include a a height and so this now is the car so if I run this we should see okay what happened here ah whoops with height there we go uh what did I get wrong ah whoops just the way that I'm drawing it there we go that was just a little bug and now there we go so there is the truck there is the truck or the car now what I need is for the car to have maybe an update function and the car should also have its own variable called speed so let's just set the speed equal to two so this is one of the wonderful things about inheritance is I can inherit all of the properties from rectangle and then add my own so the car is also going to have a speed and then speed is going to say x = X Plus update is going to say x = X plus speed so I'm going to say uh car update and now we have the car moving yay and I can go past it as it moves by now when the car goes off I probably want it to reenter so what I Pro in update I'm going to say if x is greater than width then x equals Nega height never negative width so I want it to start off the screen and reenter so what I mean by this is when the car's X which is its left side gets past the right side then it should reemerge on the other side and I might want to you know maybe have that be more of a delay or something so I could like you know maybe if it's you know further off the screen I could use W uh I could actually probably let me just use the grid size which is probably um oh but that I definitely want to do uh negative w u you know negative w minus grid there's just so many ways I could do this but I just wanted to have a little bit of buffer so it's got to go more than just with and then it reenters so you can see now I've got look at this we're moving along now we've got the car moving so what do I need I need to have multiple cars okay so let's just think I could use an array list which allows me to have a flexible amount of cars but I for Simplicity I think I'm just going to have a fixed amount so I'm going to say car equals cars cars index zero is that new car and cars index zero show and cars index zero update I want to make sure that just works what did I get wrong uh I didn't initialize the array cars equals new car with you know 100 cars so let's say there's well there's not going to be let's just let's go look at Frogger for a second what's a reasonable number of cars so you can see there's 1 two 3 1 two 3 1 two 3 1 1 2 there's some configuration but that's 3 6 9 10 11 12 13 13 what a lovely number let's have oh uh no no that's actually 12 but whatever let's just have 10 10's a nice round number right now there's only one car okay now what I need to do is okay so how many um how many rows of cars let's say I have 10 cars and I have five rows that would give me two cars per row I mean this is sort of all arbitrary making this up but let's let's think about how many rows there are so I'm going to say for in I equals z i is less than let's just say there are going to be three rows for right now i++ so I'm going to say row equals zero row is less than three row ++ I almost kind of want to maybe I should should do this much more manually let's do this let's configure this manually let's just say I'm going to do um let's keep track of an index which is zero then this is going to be the first row I'm going to put three cars in the first row so the three cars they're they need a starting X location uh x uh equals uh uh I time 100 + 50 so what I want to do is arbitrarily space them out and let's just say those are there's only going to be three cars right now there's only going to be three cars you'll see where I'm going in a second so I'm going to and you know what I can actually I forget I can use this enhanced Loop which is like a for each Loop for every car in cars car car show car update so this is a nice way I could say well whatever amount of cars there are show and update all of them okay so now what I should have here is three now you can see I didn't do a very good job of spacing them out so let's space them out more I * 200 uh I don't know why I have this plus 50 there I'll just take that out right so now we can see there are there's the bottom row right so I can now that looks like really hard it's probably too hard so let's just have uh two cars in this row and space them out by 300 pixels uh and um I just need to match that I only have two so far there we go so we can see that's one row yay yay this is working I got distracted by my own game so let's now new so I'm going to have to put a comment here oh and the whole point of this is I wanted to do index I want to keep track of the index boy an array list might be easier here because what I'm going to do this is Row one I'm doing this and again this could be optimized I could do this less manually I'm going to do row two which is now uh I'm going I'm going to also add two cars to Road two so now I have a total of four cars let me move this down here and for row two I'm going to add those cars height minus grid times 3 right because I need to go up another row I want to make these just square and they are separated by uh 200 pixels uh and let's take a look at this now I probably want to offset that by some amount so they look and again this could be random and they're oh they're moving at the same speed so each row should also get a different speed and and rodc in the chat is making a really great point which is I should make an object which is just like a row or a Car Lane object and it can keep track of its own cars and its position and speed I'm going to say that's like a refactoring thing that I'm going to suggest maybe people do as a exercise for after it because I'm going to keep things kind of simple here but that is a really great suggestion so one thing that I want to do is give these a speed so let's say for also so I'm going to add a fourth argument here so this has a speed of two and this is going to have a speed of 3.5 uh and so now the car should also get a fourth argument called speed s the car Constructor should get a fifth argument so I'm going to want to be initialized so now also these cars which are all in row one have this particular speed and these cars which are all in row two have a different speed okay let's run this now and there we go we can see this looks a bit more like Frogger let's see oh right whether this is difficult or easy I'm not sure let's add one more row row three let's put in uh four cars they're going to be their height is going to be one more spot on the grid up and their speed is going to be uh really slow but um they are not spaced out by as much I'm just picking some random numbers this is Row three and what did I mess up uh so I have 2 + 2 + 4 is eight cars total there we go so now I have again now I have a whole bunch of of cars and that you know again I could also have them each have an image associated with them it's their own animation but is this playable that's the question yeah that looks like I made it but have I actually you know so we've got a row of cars I'm going to just keep three but what I need to do I've got one more feature I've got to add to this part which is that I need to check that intersection thing but guess what I don't know why I spent the part one of this video's tutorial series on making Frogger doing the inter intersection CU I could have just waited now but thank goodness we did that because I have this function already so what I want to do is now say here if car intersects frog or maybe I want to say frog intersects car it doesn't matter frog and car both extend rectangle rectangle has in itself this convoluted but it works we don't know that it works I never tested it intersects function so now I could say if they intersect then let me do something like um let me just print let me just do a print line you know game over or something so now we should see if I look down here in the console oh so we have a problem here which as you can see I see the game over already which is that it's actually intersecting when they're right on top when it's when they're right next to each other and that's because I because in my intersect function I'm actually checking right remember I'm negating whether they're not overlapping and so they shouldn't be overlapping if those edges are equal and so I think if I add this in here that should fix that problem oh and it's less than or equal uh not equal less than less than or equal okay all right game is not over okay so now let's see if I can do this can I get through them I did it I saw no game over down here now let's make sure the intersect function is working game over game over aha so we have actually what do I want to do let's let's actually just have If instead of game over let's um let's just reset let's call a um let's call a function called a reset game and I'm going to make that function I'm going to just put it up here at the top reset game and what I'm going to do is and I think I'm just going to just reset the Frog's location uh and I'm I'm gonna I'm just going to put this here I'm going to make a new frog object and then I'll just call reset game here so I could be more thoughtful about this there might be a lot of other things you know ultimately I'm not really doing lives or levels and this isn't really a reset game but one thing you can notice here if there are a bunch of things that you want to re set that happen when the game starts but then also happen later when you make when something happens like the the frog and the car Collide I can have a separate function that does all that call that both in setup and also down here so let's see now if I can make it through not too hard to play actually let me run it again and mess up yeah so you can see if I mess up it just puts me back at the beginning so we've got we've got the basics of Frogger now part two done I'm going to end this part two and in the second part I'm going to add the logs the third part that is I'm going to add the logs at the top that instead of avoiding the frog has to actually jump onto and and ends up sticking to okay thanks for keeping going with me and I guess there will be a third part to this okay