hello welcome to the first video in a new chapter of the book nature of code chapter 11 only strangely chapter 11 does not exist so I'm doing something a little different here where all my previous other nature of code videos that go along with this nature of code book the book was written first came out in 2012 and and this is the current version of its and then I made videos after the fact now what I'm going to do I want so chapter 9 is about genetic algorithms and chapter 10 is about neural networks and I have a set of video tutorials that go along with both of those chapters today I'm going to start talking about something that I want to be in the next edition of the nature of code in chapter 11 called neuro evolutions so I want to take the idea of a genetic algorithm and a neural network and use them together in a magical way to make wonderful things happen on the screen or or doesn't have to even be on the screen and some other capacity that I can't even imagine right now so what is it that I am going to do so first of all ok so if you are on keyboard if you have watched some of my previous some of my other neural network tutorials you the most recent thing before the recording of this video that I made was a doodle classifier it's kind of the classic machine learning classification example I have some images maybe they're handwritten digits maybe they're doodles of cats and rainbows and unicorns and all that sort of stuff and I want to feed those things into a neural network and I want the neural network to classify them and if you've watched those videos you might have noticed that there's this whole elaborate training process the training process involves making that guess having some labeled correct data and then feeding that and then looking at the error like what is it supposed to be versus what a guest and feeding that error back through the neural network looking at the guests output versus the correct label calculating an error and setting that error backwards through the network through a process known as back propagation where all of the weights are tuned in so while this is the most well known and probably most common and sort of standard technique for training a neural network back propagation with gradient descent very fancy sounding there are many other ways I mean there there's other ways that you can train a neural network one of which is using a genetic algorithm so what if we just threw away all of that calculus math at all this sort of like error this error that and back propagation this and we just said hey I've got an idea why don't I make it's never having one neural network why do I make a thousand of them and I'll try them all maybe some of them will classify image maybe one will classify images better than another one does maybe I'll keep that one and one just really gets everything wrong maybe I won't keep that one at all and maybe I'll pick from the ones that kind of do well and take those and duplicate them or mix them up to make a new population of neural networks and see how those do and this is the central idea of a genetic algorithm now I might suggest if you want to if you if netic albums are totally new to you you might want to pause this video right now and go watch a genetic algorithm tutorials if the concept of a neural network is totally new to you you could pause and go watch those tutorials but you could probably also just keep going good I'm gonna I'm gonna cover almost all of this stuff anyway and if as I try to sort this out so I'm gonna take a break for a minute I'm gonna erase this whiteboard here what's there right now left over from the doodle classification and then I'm gonna diagram out how a neural network can be trained using a genetic algorithm and then through that diagram I will discover things I need to add to my neural network code base and at some point if all goes according to plan you know I have this particular this was the doodle classifier example which you see it's classifying my rainbow but what I want to do is take this version of the game flappy coding train it's not very flappy I guess and see if I can use a neural network that is that evolved to play this particular game so that's going to be the goal of this series and then I have sorts of other ideas for other types of neuro evolution tutorials I believe this is often also referred to as neat neat algorithm because it's neat neuro evolution of it see here's the thing I was just saying gyro evolution and all the while that could sound so much smarter by saying neuro evolution of augmenting topologies that's totally neat alright be back in a minute now that I have a blank whiteboard let me review the steps of a genetic algorithm and think of them in the context of a neural network so the first thing in a genetic algorithm that I need to do is create a population and the population is going to be a whole lot of neural networks neural networks are the individual elements so maybe that population is 100 neural networks I need to evaluate fitness of neural networks okay so this is kind of like again this is kind of like the setup I know that's kind of getting close to the top there it's the thing that I'm going to do once at the beginning of the program I sort of initialization state then this is this thing that I'm going to do for a loop you know generation after generation in you know in p5 this might be called the draw loop I mean to evaluate the fitness of all the neural networks and then create a new population and the way I will do that is by pick quoteunquote parents based on my handwriting is getting worse and worse over time based on pick parents based on fitness scores maps of probability it's so much room in this direction probability and then I want to apply crossover which is a way if I pick two parents for example I can half of their socalled digital DNA of one and half of the other or some random amount of one random and another and combine them into a new entity and then I can apply mutation which would be which is the step of saying hey let me look at the D let me I have this child DNA that is made from two parents let me randomly just change some of it up as if it's spontaneously mutating to continue to have variation in the system so again you could go watch my genetic algorithm tutorials where I describe all this stuff in much greater detail of different techniques and why and how but this is the basic idea but you might remember if you did watch those tutorials that this is kind of like the algorithm and it you know obviously you could change it and be creative with it but it's kind of somewhat of a standard the really tricky thing when you're making your own genetic algorithm and applying it to your own project is as follows number one is this idea of genotype versus phenotype what is that socalled digital DNA the genotype what is the data of that DNA and what is that data do how does it express itself into a system so this is really key in thinking okay well the neural network is somehow the genotype what could be the data so in fact thinking back to my simplest neural network which is just has a to two layers really a hidden layer and output layer the inputs come in to the hidden layer they get processed from the hidden to the output they get processed and then we have a final result so the core elements of those layers are weights and biases so all the weight matrices and the bias vectors those things which I described a detail of my neural network tutorials make up the genotype of the normal neural network the core aspect of it now the phenotype is the expression it's really really what am I using the neural network for so for example the expression of the neural network might be in the game flappy / bird the decision whether to jump or not jump that's the expression that's how it's going to be used applied in the given scenario in a classification example it could be its classifying an image that's how the data from the neural networks going to be used to make a guess based on this image and and and turn it into a string so that's aspect number ones we've got that so what that means is when I write the code I need to somehow figure out how to do crossover and mutation with weights and biases I I think I can create probably a population of random neural networks that's just gonna be like the new neural network new neural network new neural network evaluating the fitness I've got to get to I can pick two random ones but I need to apply crossover mutation and to be honest what I might do it first in my first implementation is not even bothering with crossover and not even bother with picking more than one parent so one technique to simplify the genetic algorithm is just to make copies so I can pick the good ones and make copies of them mutate a little bit and keep going it may not work as effectively as if I use crossover but it'll certainly be easier to code so the other thing that's tricky with with when you're making your own genetic algorithm applying it to your own project is the fitness function question mark when you're smart question mark so this is crucial if you don't have a good fitness function this whole selection process this quoteunquote natural so it's not very natural here it's like digital selection this I'm not gonna be able to distinguish between members of the population that do really well that should be that their digital DNA should be passed down the next generation versus ones that don't so I want a good fitness function that gives me a good range of probabilities and so in this case we could think about the classification it could be okay well this neural network give it 100 images its Fitness is how many of those it classified correctly and we could even go into it deeper and somehow score the fitness in court according to its confidence level without classifying them correctly but that might that might be flawed in some ways also so that's one thing with the flappy bird scenario if we think about the flappy bird game what is the fitness here well the fitness could would simply be the score so I am a neural network I am a neural network playing floppy coding now peepee poopoo inputoutput P books that my soul like cordial so it could just be like how long am I able to go through this world without running into a pipe so that could be the fitness so I could say hey why don't you thousand of you try playing this game a thousand of you electronic neural network magic machines try playing his game and and your fitness is how long you last before you run into a pipe and so that is the fitness function so we have all the pieces so what do I have already like if I'm going for this flappy bird example I already have the flappy bird game so I have the flappy bird code I have my genetic algorithm examples but ultimately there's not really I don't really have a genetic algorithm library per se so I'm probably gonna have to build the genetic algorithm stuff in the code but I do have a neural network library so I don't have to write I don't have to write the flappy bird game I don't have to write the neural network library however it might make sense for my neural network objects to know about crossover and mutation that might be something that probably should go into the neural network library so that any moment I could say like hey you neural network a new neural network get together make another one or hey you neural network mutate yourself so I probably should that's something so that's the first thing I think I'm gonna do in the next video is add crossover and mutations or maybe to start more simply I'm just gonna start with like a copy function just to kind of get going here a copy function and mutation um so those things need to go into the neural network library and then the third thing is I just need to apply the GA so this I really need to do a lot of work to write the genetic algorithm code so I'm gonna start with my flappy bird code import the neural network library add crossover slash copy mutation and then start to implement the idea of a genetic algorithm in this particular program that started with the flappy bird code that imported internal dialog library that my father bought for two zeusie anyway nevermind random reference ok because it's like the flap bird that imported the neural network library that that added the genetic algorithm that there's that there's a song going on there that somebody else will finish for me all right um Passover is coming up okay so that's that okay so you've made it to the end of this first video for chapter 11 of the nature of code which doesn't even exist yet but maybe by the time you're watching it oh I'll be so happy if it exists by the time you're watching this and so in the next video I'm going to revisit the neural network library and add functions for copy and mutation I'll see you there you