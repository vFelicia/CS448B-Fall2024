This video is brought to you by Nebula Classes. Hello, and welcome to a very special coding challenge right here on The Coding Train. Now, I'm not sure when you're watching this. If I had to guess, it's probably, maybe, 40 years or so into the future. I'm going to attempt to program my most popular coding challenge ever on this Apple II Plus computer in Apple Basic. Now, if you've never programmed in Basic before, don't worry. I'm going to show you all you need to know, step by step, as I attempt to make this game. Let's get started. (SINGING) Coding together. We'll always be best friends forever. I'll be there whenever. If you feel down, then I'll make it better. No one can measure the for loop we have the joy, the pleasure. So let's go to enjoy the weather. These are the days I'll always treasure. [MUSIC PLAYING] Oh, baby, we're coding together. We'll always be best friends forever. Coding together. Coding together. OK. The jig is up. These are fake glasses. There's no prescription lenses in them. I can't see a thing. I'm putting on my real glasses, OK? Today is shoot. This Casio watch doesn't tell me the correct time or date. It's August 2022. Here I am. This is my childhood Apple II Plus computer. Let's get started looking at Basic code. So the first thing I want to show you is that just at the command prompt, with that blinking cursor, I can type code, like Print [KEYBOARD CLACKING] Oh, listen to that beautiful keyboard "Hello, world!" I can also put a line of code in a program by writing a line number. That's right. I actually have to specify a line number, like line 10. No text editor for me with automated line numbers and all that fancy future stuff that you have. Now, I can type List, and I can see the contents of my program. I can type Run, and I can run the program. It prints out Hello, world! I can even add another line of code one of my favorite commands ever GoTo 10. I can put that at line 20. Type Home to clear the screen, List, run this program. And here we go. It's going to print Hello, world! forever and ever until I turn the computer off and turn it back on. [BEEP] Oh, beautiful beep. So there's a lot more to Basic, of course, than that. I've got an entire manual here. I'd love to do a lot of videos about this. So if you like this one, let me know in the comments that you'd like to see more Apple II videos. But let's see how far I can get showing you everything that there is to know or that I know about AppleSoft Basic just by making the Snake game. Now, one of the things I would find in this manual is the fact that there is a graphics mode. And I think if I type GR, it's going to enter graphics mode. That was kind of cool. And there's even HGR, which will enter a highresolution graphics mode. Maybe that's for another time. Today, I'm going to try to make Snake just by printing characters to specific locations on the screen and animating them. So the first thing I want to do oo, I've got to exit that graphics mode. Plot, PDL, Text ah. I think I just type Text. And I'm back in text mode. OK. I don't need Google! I have a manual. Take that, future programmers. So I'm actually going to start my program on line 10 with Home. So whenever I run it, it will start by clearing the screen. I also want to keep track of the data associated with the Snake program, the width and height of my canvas if you will as well as the x and y position of the snake itself and the piece of food that it's trying to eat. So I need some variables. This happens to be a 40 by 24 display. And Let W equal 40, that's me creating a variable, assigning it the value of 40. And I can actually also say Let H equal 24. So I can put two lines of code, essentially, in one by joining them with a colon. And we can take a look at the program. And we see what I've got so far. Now, it's important here that I'm leaving space between line 10 and line 20 because guess what? If I want to put a line of code in between those, I got no copypaste. I got no move things around, no edit. I would have to actually type in a new line of code. And now, I could only put 1, 2, 3, 4, 5, 6, 7, 8, 9 lines of code in between 10 and 20. So far, I don't need that. Let's start with the snake's x position. So I'll just say x and in the middle of the screen y. OK. Then, how do I place a character at a particular location? I could look it up in the manual. But I happen to know the commands are HTab and VTab for horizontal and vertical position. And then, I can just say Print, and let's use S. And let's just quickly say GoTo 40 on line 60, so that the program keeps running kind of like a draw loop, if you will. [DING] And there we go I've got an S right in the middle of the screen. And I can hit ControlC to quit out of the program at line 60. Next thing I would like to do is animate S. So instead of just printing it out at one location, I want to increment the value of x and print it again. Increment the value of x and print it again. Or actually, y or decrement based on keyboard interaction. Now, I'm noticing that I only have left and right arrows. There's no up and down arrow on this keyboard. So let's use W for up, S for down, A for left, D for to the right. I need to handle the keyboard interaction. Ah ha. I would like to have a separate function that takes care of reading input from the keyboard, and then changing the values of x and y based on whatever input it's getting from the keyboard. How do I write a function? Well, another word that I could use is subroutine. And in fact, that's exactly what I'm going to do. And if you think you liked the GoTo command, well, I have news for you. There's another command which I love even more called GoSub, or Go Subroutine. So I'm actually going to just wipe out line 60 and say go GoSub some line number far, far away that I can't mess up with the lines of code that I'm writing right now let's say 1,000. Then, I'll add my GoTo line 40 back at line 70. Now, I need to write my subroutine, my function, at line 1,000. What do I do? I need to write a line of code to tell me what key was pressed last on the keyboard. And that information is sitting somewhere in the computer's memory. And if only I could get access to the computer's memory. I know it's in this manual here. But it's also come with me. It's also over here on this poster Peeks, Pokes, and Pointers. If I want to read the computer's memory directly, I can just peek into the memory. If I want to write to the computer's memory, I can poke the memory. We have direct access to the computer's memory. And somewhere on here, it's going to tell me that to read the keyboard, I need to look at memory address 49152. So I'm going to put in a variable, let's call it K. Peek let's peek at memory address 49152. Then, just for debugging purposes let's print that value out. And then, when the subroutine has finished, we need to return back to where we were previously in the code. That's line 70. And the way we do that is with Return. Let's take a look at the whole program again. And let's give it a run. So the last key pressed was 13. I'm not sure what I pressed to get the value of 13. But let's see what W is 215. S is 211. 196 is D. 193 is A. So on line 10 I'm going to query If K is equals and by the way, this is an if statement. That's how you write an if statement in Apple Basic. I think 196 was D? Then x equals x plus 1. So let's just only check for pressing to the right. So I think if I press D there we go. Whoa! OK. So S's filled the screen. But this is exciting because this is working. And it did some wrap around, and then it came to an illegal quantity. We'll deal with some error handling in a moment. Let's start adding, now, to the left. I think that was 193? 215 was up, I think. 211, I think, was down. I need my Return. Let's try giving it a run. Look at this. Oh! Whoa! That was fun. OK. Now, it's animating kind of fast, which is fine. But I would like to be able to slow it down. I think it's going to be quite hard for me to play this game with it running so fast. So I think, if memory serves me correctly, the way that this is actually typically done is by writing a for loop that just counts through a bunch of numbers before it can move on to the next line of code. And you would think that wouldn't cause much of a delay. But on this computer, it's quite a nice solution for this. So let's actually, right before line 70 where I say GoTo 40 so let's put this at line 65 let's write a for loop. How do I write a for loop? Let's say For N equals 1 to 100 let's just try running from 1 to 100 Next N. So nothing will happen in that for loop. I'm just going to run it. And let's see. And look. Now, it's running a bit slower. And I could sit here and draw a beautiful spiral. So what else do I need? I need to add some food. And then, I need the snake to grow when it eats the food. But right now, the snake is just growing because I'm just seeing all of the S's. What I need to do is clear the S after I print it. So I could add, at line 35, Home. And then at 70, I could say GoTo 35 instead. Let's try that. It actually works fine. I was worried I would have too much flickering there. And that might become an issue at some point, in which case, what I would actually want to do is just print a space over the old location of the S. But let's see how far we can get it working just by using Home essentially as a background clear the background. And then, I'm realizing here hold on. I'm putting my thinking cap on no wait my thinking glasses on. Ah ha. Let's add an array. So the snake, instead of being one x and y, should actually be a series of x's and y's, depending on how long the snake is. Now, I don't have the ability to have a resizable array. I just have a fixed array. But if I ask for, say, 100 or 200 or 1,000 spots in memory I don't know how much space I actually can ask for then I can just assume the snake's never going to get longer than some fixed amount. So let's actually change line 30 to, instead of Let x, let's say Dim x Dim for Dimensionality. What is the dimensionality of the array? And It could be multiple dimensions. I'm going to stick with a onedimensional array. And let's just go with a fixed length of 100 for right now. So now I have an array with 100 spots for x and 100 spots for y. Then in line running out of space for my lines of code. Then, let the first element of the array be 20. And the first element of the y array be 12. But I don't actually want to use 1. What I want to use is what is the current length of the snake? So I need another variable, which I'll call L. How about I call it L for Length? So let's put it at line 15. Let L equal 1. Then, what I want is to say x index L. I probably should have kept my x and y variable and just put the new result into the array because now I got to fix it everywhere else. But I feel good about doing that. I can do it. I can manage it. It's just typing. And in fact, this line 40 is going to change soon, as you'll see. But let's just get what we had before working. [MUSIC PLAYING] Is this the same program we had before? Let's find out. Looking good. Now, we need to pick a location for the food that the snake is attempting to get, and then print that to the screen as well. I'm running out of lines of code here. So let's write a subroutine to deal with initializing the food. I'm going to put that right at line 17. I'm going to say GoSub 2000. So 2000 will be my work with the food thing. And I can actually put in comments in my code with REM, Rem, for remark. Then, let's pick a location for the food exposition. I'll call that Fx. And I need to get a random value. So I'm going to look in my manual here, again. RND for random is on page 102. "Returns a random real number greater than or equal to 0 and less than 1." Oh, and it takes an argument, where if I pass in a number greater than 0, I get a new random number each time it was used. This is going to be some number between 0 and 1, multiply that by the width, and convert it oh, no. [LAUGHS] This is not a text editor. And then convert it to an integer because the food position can't be a decimal number. I think this is good. Then, the yposition for the food OK. Then, Return. So between line 50 and 60, I would now want to print F for the food at the Fx and Fy location. So let's do that at line 55. Oo. Oh, boy. Something crazy is going on here. Oh, look at that! HTab Fy that's a mistake. You probably noticed that. I did not. VTab. Illegal quantity error in 55. OK. Line 55. Did I just pick a bad random value? Let's debug this. [MUSIC "EYE OF THE TIGER"] We can join more than one thing while we're printing with semicolon. So Print Fx, colon, space, then Fy. And why are those values 0? Ah! [LAUGHS] I can't believe I missed this. OK, look at this. Line 17 GoSub 2000. What happens in 2000? Set Fx and y based on a random number times W. What's the value of W? Well, I am initializing the value of W on line 20! That's after line 17! All this time! OK. I've got it now. Let's switch those two lines around. So 17 will be Let W equal 40. Let H equal 24. Line 20 will GoSub 2000. I can get rid of a bunch of other debugging things I added in there. Clearing the screen, Home, back. And let's go. There we go. I've got my food. See? It's blinking. It's bothering me. The blinking is bothering me. I'm going to get rid of the Home clear screen at line 35, which if you'll recall, now I'm seeing the full trail of the S. Let's take line 40, where I go to the x and y position and print S, and let's put that in its own subroutine. Because ultimately, that's where I'm going to have to do a loop for the array and everything anyway, so I need to do that somewhere else. Line 3000. And I don't lead line 50 any more, then, either. So 3000 what I should do is say ah. Ah ha. Wait a second. Wait a second. This go sub 1000, which moves the snake, should also be part of what I'm about to do. So let's get rid of line 60 as well. If I just had what I had before, I would say HTab x index L, VTab tab y index L. Then, Print now, this is a little bit nuts, but I'm going to print the space because what I'm going to print first is erasing the previous S. Then I can go and move the snake based on the keyboard interaction, which is GoSub 1000. And then, I can update the location. This will ultimately be a loop which I'll do a next, Print "S". And 3050 would be Return. OK. So the S is blinking. That's what I want. But notice, the F is not. Now, just to have this work more properly, instead of doing HTab x(L), VTab y(L), Print "S", that should be a loop there. Let's have 3025 because I want to add the loop in before that HTab. For I I'll use Index, I equals 1 to L. Then, 3030 needs to be HTab x(I), VTab y(I). And then, Print "S". And then, 3050 is Next I. And 3060 would be Return. Now, eventually, the snake is going to have its older positions in the array. Maybe its recent position should be always at the end of the array, and it's oldest position at the beginning of the array. In which case, line 3000 should actually be HTab x(1) index 1 because I always want to erase just the oldest position of the snake. Now, let's figure out if the snake has eaten the food. Right before I go and do the keyboard input no, right after I do the keyboard input I'm going to do another subroutine 4000. And then, I want to say If well, actually, I only want to do this subroutine if the snake has gotten the food. So instead of the If being in the subroutine, let's actually just say in line 3022 If x index L, which would be the most recent spot for the snake, equals Fx and y index L equals Fy, then GoSub 4000. And right now at 4000, let's just say Print "Yum". Let's see if I can get that food. Yum! OK, so that's working. But instead of printing yum, what do I want to do? I want to say L equals L plus 1. Then, I need to say the snake's new Lposition is equal to what the most recent position was? L minus 1? Let's try this now. Whoops. No, not Run, there. Return. Oh, yeah. OK. This is good because now, the snake is off and running with an extra spot, and I'm not erasing correctly. No problemo. Every frame of animation, I need to shuffle all of the positions down in the array. All right, I'm looking at my subroutine 3000. I'm erasing the oldest spot of the snake. Then, before I go to animate the snake based on the keyboard, let's slide everything down in the array, which will be a subroutine at line 5000. I will refactor this later. (SINGING) I will refactor this later. For I equals 1 to L minus 1. X index I I plus 1. Y index I equals y index I plus 1. This is shuffle everything down in the array. Now, here's the question. When L is 1, is it going to do this? It shouldn't. But I don't know what this For loop is going to do with For I equals 1 to 0. So let's say only if L is greater than 1, then GoSub 5000. Right? I don't want to do this if L is 1 because this is not going to work. Those values don't exist. OK. That makes more sense. Now oh, my god what's the chance this works? No, go down. OK. Yeah, there we go! Look, my snake is of length 2. My snake is whoa. It kind of worked. Wait. All right. So one thing should also happen. When I GoSub 4000, I also need to move the food. And I think that's going to be it's maybe causing a problem. So I need to just GoSub 2000 again, also. So 4000 before I jump out of here, 4025, let's GoSub I'm pretty sure it was 2000 that picks a new food location. Let's try this. Yeah. OK. The food moved. It jumped after I ate it. Oo, why it worked for the first two. I don't know if this is the problem, but I'm realizing that the fact that I'm printing F over and over again is unnecessary here. Where do I print F? Line 55. Since I'm not clearing with home anymore, I only need to print F the moment I pick the location for the food right here, line 2000 subroutine. So let's add 2025. And then, line 55 is no longer necessary. So let's see. So that the food is there. Capture the food. I've got two S's. Oh! Wait a second. You can see that it's continuing to just erase that same ah. Somehow that first spot in the array is not moving along with it. Right? Because it's only blinking there. That's actually a nice clue. Oh! (LAUGHING) I know what the problem is. Why was it only working when the array had two but not three? I'm missing a key aspect of the loop here. Look at this loop where I'm printing all the S's Next I. Look at this loop no Next I. All right, folks. OK, two S's. Three S's. Can I see a four S? Four? Five? I think we have our snake game, people. This is running really, really slow. Right here, let's double the speed. Now, of course, I've built nothing in to test if I'm hitting the edge of the screen or if the snake is going over itself. But that would kind of ruin the fun of just being able to play this forever. I'm going to get rid of that loop entirely. Actually, I'm not going to get rid of it entirely. Let's just make it a loop from 1 to 2. I guess HTab and VTab really slows things down. I think it's just an old computer. I mean, I don't mean to be mean to you. You're my friend, Apple II Plus. [BEEP] Oh. Illegal quantity in 2025. Ah. So it picked an invalid location for the food, probably because one of the positions it could pick is 0, which is not a valid column or row position. So there's more that I need to do here, right? I need to do some errorchecking to make sure the food is always picked between 1 and 40, and 1 and 24. I need to make sure the snake is not allowed to go off the edge game is over or run into itself game is over. I'm going to write that basic code, reorganize this, clean up the line numbers, add some code comments, show you what that looks like here. I'm also, in case you don't happen to have your own Apple II Plus just sitting around and you want to try this yourself, I'm going to include links to a bunch of different emulators I found on the web that you could try running this code and modifying it. And I really hope that you make your own version of the snake game in Basic and share it with me at the link on the Coding Train website that I'm showing you right now. But if you like learning about AppleSoft Basic programming on an Apple II Plus, maybe you have a friend who's never coded before and wants to learn to code from scratch in Basic. Guess what? I just made an entire course all about how to code what is code with Basic, relating it to modern programming languages as they stand today. And where is that class? I'm looking at it right now. It's on the world's first curated library of practical handson classes owned and operated by creators. There are new classes launching all the time. If you're interested in making videos, like me, one of the classes that I'm watching these days to improve my game is Rene Ritchie's Rapid Turnaround video. I mean, certainly if you're interested in Apple, you might know about Rene Ritchie's YouTube channel. He's got a course. The course I've been watching right now, since I do a lot of live streaming, is being yourself on camera with Luria Petrucci. There's Philip Damico's course on nextlevel animation. There's business 101 for creators. So many classes and nebula talks, which are inspirational shortform guest lectures. If you already subscribe to Nebula, which I've talked about before on my channel, you could upgrade to Classes for just $5 per month. If you're brand new to Nebula, never heard of it before, go to nebulaclasses.com/CodingTrain. It's $10 a month, or $100 for the year. However, through that link you can get it for $80 for the entire year. Subscribing to Nebula Classes also gets you Nebula. There's over 14,000 videos from your favorite creators, as well as dozens of highproduction originals, content that you can't find on YouTube. By signing up for Nebula and watching my class All About Apple Basic and What is Code you're supporting The Coding Train. And I think you'll also discover a ton of other content that you really love. I hope to see you there. Thanks for watching. And see you next time. I don't know where JavaScript, Basic processing, who knows? You tell me. Goodbye. [THEME MUSIC]