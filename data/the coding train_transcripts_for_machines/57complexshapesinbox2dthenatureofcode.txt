okay so there comes a time if you're using box2d where you want to put things on the screen than aren't just a box or a circle right well an important thing to realize is first of all that what we are actually doing is all of our examples so far are literally representing the box 2d physics on the screen so for example when we set up a polygon shape which is a box with a width and a height this is what box 2d thinks is in its physics world and then we go and draw it on the screen literally this way glasses are dirty so we we are representing that box literally just as a rectangle in processing but we very easily could have you know loaded a p.m. edge that had you know some hearts in it and we could have even you know drawn a few lines on the side to give it like some fur so it's like this furry pillow with hearts on it and it's gonna look right right the key thing here is that what we tell box2d about the physics only needs to approximate the way we visually render on the screen and for the most part it's gonna look right you know certainly the creators of angry birds aren't modeling every single nuance of the birds design there's really just a circle under there that's knocking into a bunch of boxes so this is one of the things that we need to think about and later on once we look at joints we're gonna see even more elaborate ways of creating skeletons for complex designs that we might want to actually visualize in the processing sketch so but there comes a time we're just a mere rectangle or a mere circle is not enough of an approximation so there for example let's just say you wanted to make some type of creature like thing or a little alien design that you know looks like this so it's sort of a terrible drawing but how would you implement this in box Edie certainly we could kind of use a bounding box approach and create a box that just kind of approximate does it not but we could get much more specific about this and there are two ways of doing it so the two ways that we're going to just that I'm going to describe and look at in a couple examples one way is to use set the vertices manually of a polygon shape so I'm going to call that cusp polygons so that is strategy number one we could create a custom polygon strategy number two involves multiple shapes attached to one body so these are two strategies we can do one is we could create a custom polygon two we could create multiple shapes and attach them to the same body the truth is two could also include one we could create multiple custom polygons and attach them to the same body so let's look at how this works let's think about first the custom polygon and then we'll look at the multiple shape scenario in a moment so custom polygons what do I mean by that what I mean is instead of just saying hey the polygon is going to be a box with a width and a height we're gonna set the vertices individually this is very similar to the way that we set the vertices for a change shape the difference here is we have an enclosed polygon shape so we could set vertex vertex vertex vertex vertex and we want to set all of these vertices using remember world coordinates so if we think of these as pixel coordinates we're gonna have to convert them to world coordinates before we set them and we're gonna use the same exact method we can create an array of ektu objects all with these locations and the polygon shape right polygon shape object has a very simple function called set where we can pass that array in so we can say so before we said set as box we give it a width and a height now we're just saying set the vertices according to this array of vertices now there's two important aspects of this and I guess I'll just erase this down here and come back to this in a moment that we need to remember one is convex shapes only well I hope this is still true in box 2d stuff kind of changes sometimes but convex shapes only there's actually a new version of J box 2d so I might have to update all of these someday but I haven't haven't haven't updated yet but convex shapes only a concave shape is a shape whose surface turns inward right so this is a convex shape if I'm drawing this correctly and here's a concave shape box2d cannot handle collisions for concave shapes however can for convex shapes and your ask yourself but I want to do pacman and how do i do pacman how could I do this well one thing that's interesting remember we just said there's a multiple shape approach well interestingly enough any conduct have notes over that so I keep looking any concave shape you can make out of two convex ones so right if I just draw a line here this is a convex shape a this is a convex shape B stick those two together and we have a concave shape I can't remember the difference between concave and convex this is very much of a struggle okay so that's one thing that's important the other thing is box2d expects the vertices in clockwise order so when you're giving the vertices in this array you've got to start in clockwise order however you're most likely going to be thinking of the vertices in pixels as we're gonna see in the example in a moment so you actually want to create the vertices in counterclockwise counterclockwise four pixels because if you're converting them one at a time they're going to be remember the yaxis is flipped they're actually gonna you're gonna end up giving them two vaak siddhi in clockwise order you know all this stuff sounds like a real big pain in the neck and the truth of the matter is it is a big pain in the neck and that's why you know we want to be careful about when do we use box2d when do we not use box a' D it's totally worth all this extra effort when when you really need box D for a project and when you don't need it it's not worth all this extra effort so okay so this is strategy number one the custom polygon approach let's take a look at the example this is example 5.4 I'm gonna run it and you can see oh I forgot to change the size but you can see here all these shapes their custom polygons and look at this I'm setting all of these vertices in the code in an array and converting them and then converting them there aren't coordinates they're vectors these are vectors that are all pointing from the center of the shape so that's one thing that I didn't mention is that what we're thinking of is if you think of this as like zero zero these locations you can think of them as vectors pointing from the center of the shape again you want to think of them in o'clock counterclockwise so you get them in o'clock and you can see them here you could you know as an exercise to yourself is like go and get this code try to like get a piece of graph paper and draw out those vertices see if you get the shape that's appearing in the examples and right here we can see we make the polygon shape and it's very simple pS set so instead of set as box with a width and height just set with an array of vertices so that's how you can make a custom polygon shape and then again we're just drawing it begin shape and shape with the standard drawing ways that you do in processing but you might choose to visualize it in a different way so that's option number one now option number two in some ways this actually maybe I should have started with it in some ways it's a little bit simpler I think so the example that I have just creates something that resembles a lollipop is I think what I called it the lollipop object so we could make an object like this a little kind of person with no legs or arms right out of a rectangle a polygon shape and a circle shape so what we're actually doing in our steps here define a body create a body create a shape create a fixture attach their body to attach the shape to body with fixture we're gonna do this in times so we have to we have to define the body and create the body then we create the polygon shaped box and attach it to the body then we create the circle shaped box and attach it to the body now if we just went ahead and did that without thinking it through what we might end up getting is a shape that looks like this right because these shapes are always attached in a way to the center of the body and one of the things in the example that you're going to see is that the circle is given an offset location along the yaxis so one of the additions we're going to have to do here when we create the shape is set an offset if in fact we want these shapes to be offset from each other in some way so again it's really up to you you know what do you know try to come up with some scenario like maybe you want to make a three leaf clover and you could do that out of a rectangle and three circles or something I don't know there's come up with some type of scenario where you want to make a complex shape figure out where's the Center what are the shapes one of their properties what are the radius of the circles what's the width and height of the rectangle what are their offsets on the x and y axis from the center and let's take a look at a scenario that of that in code if I come over here this is example five point five multiple shapes and if I just run it we're gonna see here that as I click oh and I forgot someday I will edit this out that there's a mistake in here and I'm gonna go back to this and run it again oh and I'm not even over here hi okay you know these aren't gonna be perfect especially not today because I have a cold and been doing this for hours if it's volume but okay so here you can see if you can like kind of zoom in there we can see we have these nice shapes which are a rectangle attached to a circle two shapes attached to the same body so I'm going to zoom back out and we can see how is this done here well we have step one to find the body crea and step to create the body and now look at this create a circle shape and create a polygon shape two shapes and right here this is a kind of key line of code this is where we're defining that offset the circles MP dot set so this is like again wading through all this documentation you know hopefully it's in an example if not you're gonna have to sort of look it up detect it but a shape object has a variable called M underscore P which is its offset position as a vector and we can set it to our offset which we I guess had previously had defined oh no we defined it right here and converted it we made a vector in pixels then we converted it and then we assigned it so there's all these steps right this is that same thing this offset we're probably think of eating n of us pixels like oh this circle is 50 pixels above the rectangle so if we look at that right here we create the vector with a height above that then we have to convert it from pixels to world and then set that as its offset so there's a lot of these steps a lot of these gobbledygook kind of steps to get comfort with and then remember this we need to attach both shapes of the bodies each with its own fixture and one of the things that I haven't mentioned by the way is there is a thick there's code for a fixture shorthand look at this remember in the other examples we would say fix your definition equals new fixture definition set the friction sat the restitution set the set the density you can do that if you need to custom manage those physics parameters but one thing that you can also do is if you just want to use the default friction and the default restitution you can in one line of code attach the bot the shape to the body with a fixture and it's just called body create fixture pass in the shape and the value one there is the density so the one thing you can set is the density so another thing that's just in this example that I'm noticing right now is a body can have an initial velocity you can also have an initial angular velocity so that's why when we run these you can see that they're already kind of moving and spinning just when I click the mouse and adding them to the screen okay so this is Alyssa's a lot but hopefully you have a sense of okay if I just want a box polygon shape CETIS box if I just want a circle circle shape with a radius if I want a more complex shape I could define a custom polygon or I could stick multiple shapes together and these examples five point four and five point five will kind of lead you down that path so if you're looking for an exercise design some kind of crazy alien looking shape that you think you could never make in box 2d and see if you can build it up with custom polygons and multiple shapes okay