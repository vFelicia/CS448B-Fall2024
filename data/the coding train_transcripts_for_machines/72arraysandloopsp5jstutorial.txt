So this is the second in a series of videos about arrays. And what I would like to look at in this video oh, yes. I'm in the right place is this particular piece of code and augmenting it a little bit. So let's look at this for a second. And I've got this sketch here that's drawing two circles. So before, I was demonstrating here's a single variable. I can just use that single variable directly and draw a circle with the value of that variable as the width. Or I can access an individual element in the array via its index, 0, 1, 2. So this ellipse has a diameter of 46 pixels. So what I would like to do is I'm going to get rid of this, which was just for showing the difference between a variable and an array. And what I'm going to do is say, OK, well, let's actually draw all these ellipses, use all the values in the array. So I'm going to start at 100 and use the zero element. Then I'll go to 200 and use the index one element. Then I'll go to 300 and use the next two. A little bit of copypasting. And we can see here, 200, 300, 400. I should probably make the canvas 500 pixels wide. And run this. And look at that. Wonderful. I have four eclipses, each with a diameter using a value from the array. The first value is 100. The second one is 25. The third one's 46. And the fourth one is 72. And those ellipses look like they're right. So you can see here that I can use every element of the array and repeat the same thing over and over and over again with the elements of the array. And with a little copypasting, it works just fine. And everybody's happy. You do a little dance, like the little code works dance. And there you go. But there's a problem here. This works with four. But if you had 400, you won't be happy dancing. You'll be copying and pasting. You'll have carpal tunnel syndrome. And things will be very uncomfortable in your life. However, there is a solution to this problem. And you might remember it from a previous video, the for loop video. So we could use a loop. A loop is a method for counting and repeating a task. And you can see here that this line of code is repeated. It's really the same line of code every time. The only things that are different are the x location and the index into the array. So let's come over here. And let's remind ourselves whoever we are, I'm going to remind myself and maybe you're watching what a for loop is. So I could write for and then I could say var i equals 0. I could say i is less than 4. i plus plus. Now I should mention there's no actual requirement that you use the variable named i. It's just sort of a convention. You could say j or n or cat or apple. It doesn't matter. This is a variable name that you're making up. And the way a for loop works is if you start with 0 then you check to see if 0 is less than 4, you execute a task, go up by one, check to see if it's still less than 4, execute a task, go up by one, check to see if it's still less than 4, execute a task, go up by one, check to see if it's less than 4. By the way if it's not less than 4, you're done and stop executing that task. So if I were to say something like print ln i right here, I would start at 0. i is less than 4. So I would see 0 printed out. If this is the console, I would see 0 appear in the console. Then I would go up by one. i would be 1. 1 is less than 4. It would get printed out. I would go by one, 2 is less than 4. Then it would go up by one, 3 is less than 4. Then it would go up by one, 4 aha 4 is not less than 4. The loop would exit. So this is the result that I see. This line of code executes four times first with the value of 0, then with the value 1, then with the value 2, then with the value 3 in i. Look at this over here. I'm coming back to you. Over here, this line of code executes four times, first with the value of 0, then with the value 1, then with the value 2, then with the value 3. Exactly what we did here. So there's no reason why I couldn't instead say for var i equals 0, i is less than 4, i plus plus, and then take this line of code and say, i and i. Remember, the index into an array can be a variable. So let me comment this out. And you can see I'm making the case to you that this is 100% except for one thing that I forgot which we'll fix in a second equivalent to this. This I wrote each line of code out manually, manually typing in the index 0, 1, 2, 3. Here, this line of code is being repeated four times. And the index is dynamic. It's 0, it's 1, it's 2, it's 3. So I should see four ellipses in the window, just like we had before. I see kind of like a couple. And I don't really what's going on there. Let me add something here. Let me say, stroke 255 and no fill. Let's try to look at what's going on. So this really did work. Wow, I really sized those in such a lovely way. But there are four circles there. And one is 100 pixels wide, one is 25 pixels wide, one is 46, one is 72. The issue is they're all in the same location. So here notice how x changed 100, 200, 300, 400. But x doesn't change here. It's 100 for each one. How do we deal with that? Well, interestingly enough, if I come back over here, these values I had 0, 1, 2, 3 what if I were to multiply each one of these values by 100? What would I get? And let me give myself a little more space here. I would get 0 times 100 is 0. 1 times 100 is say it with me, even though we're not together but just do it 100, 200, 300. So that's close. 0, 100, 200, 300. What did I have? 100, 200, 300, 400. Let's add 100 to each of these. If I add 100 to each of these, that means I have 100, 200, 300, 400. So by taking that index value, multiplying it by 100, adding 100, I have the values that I want. So I, even though I'm using it to count through the indices of an array, it's just this like counting number, I can use it for good, for other purposes. So here we go. I could say, instead of drawing them at 100, I could say i times 100 plus 100. And now if we run this, I kind of want to have them have a little more weight to them. I'll make them kind of grayish inside. You can see there are my five circles. This worked. This is a way of using an array to have many elements but applying the same action to all of those elements. And if you remembered, this is kind of where I began. If these things were objects not single numbers and I had 1,000 of them, I could just say display all of them, move all of them, run all of them. And that's the topic that I will explore in the next video. For now, I might say, just make that array of strings perhaps. See if you can display like five different words in some pattern on the screen. Make a color palette. You have six colors and all the things you're drawing, you always pick a random color for a bunch of those. Actually, that's what I said before. Loop through and draw I know, make another array with colors for each one of these. And use the color for it. Although in that sense, I almost would rather use an object for that. But you get the idea. Like make a little riff off of this as an exercise. But really, I think, the goal that you might have in your mind is, as you start to have multiple parameters for things you're drawing on the screen, maybe those should be inside objects. Because objects is a collection of properties. That's the end of this video, which is eight minutes long, which I feel like is a victory in some way. Thanks very much.