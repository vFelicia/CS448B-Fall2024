oh it said in the net previously I said in this video we'll be getting to actually writing the code and making our first box of the example but this is the thing you know box CD it's it's it's this sound so amazing and it's just gonna solve all of our problems but it might it might solve some of our problems I have many problems which it has not yet solved but it it's complicated so here's the thing I forgot something and but so before we can get to this writing the actual code into our example and making bucks unique having bought you to calculate the figures to us for us we need to talk about one more thing what is that one more thing we need to talk about box 2d z coordinate system so you know we have this processing window and it has 0 0 in the top left it has a width you know 640 it has a height maybe it's 360 it has all that stuff it's all pixel coordinates its pixel coordinates on the screen here's one of the wonderful things about box 2d vaak siddhi is a physics engine in the purest sense of the world it knows nothing it cares nothing about our processing window it's actually doing all of its calculations in meters in seconds it thinks about the real physical world we are creating we have to give box2d numbers that correspond to things in the real physical world well here's this you know object it's 3 centimeters long and it's it's a meter away from this other object we have to really work in those terms which is a little bit strange because everything we've been doing all along is like you know in the middle of the screen is three 6180 and it's draw this and pixel word at that so we've got to take a whole new way of thinking in and in fact this little diagram we have which is sort of describes the magic of how simple box2d is which is you know make a bunch of objects set them up in the magic box box to these world and then every time through draw just ask where are they I'm gonna draw them where are they when I'm drawing them so but we need to add two steps here convert from pixels to world so whenever we say world that's gonna refer to the box2d world but you know corresponds something to like our actual world but in two dimensions and then so we create our objects we think in pixels we convert them to world coordinates send them into box a day when it's time for us to draw them box it is going to give them to us in world coordinates so we have to convert from world to pixels so what does it mean to do this so one of the things that the P Basu T this helper class that I've created does for us is it has a bunch of bunch of functions for these conversions they're not that complicated it's just a matter of translating and scaling back this is this is our processing world box today's world is just the Cartesian coordinate system you might have done in a high school geometry class you've got zero zero at the center and you've got the y axis pointing up and the x axis pointed to the right this is the same as our processing world except you know in a processing world the zero zeros in the top left X points to the right the y axis positive points down so it's the same but flipped and much smaller so box 2d is not tuned for large distances it's kind of works well for like you know the Angry Birds thing we have this little tiny bird flying across and bouncing into a bunch of boxes so generally we're using small numbers so something that might be a hundred pixels wide should maybe should not be a hundred meters wide that would be somewhat insane so but all of that is gonna happen for you behind the scenes there's absolute ways of digging into that and and tuning it in a custom way but we're not gonna we're gonna sort of stay in a comfortable soothing and relaxing place we're gonna let the PBOT CD helper class kind of manage that conversion from for us now there's another aspect to this oh my goodness so many things this is definitely gonna be an entire video just kind of about this little topic here which we need to prepare ourselves we're gonna ghin what is the syntax how are we using that that's gonna happen in the next this this moment that I keep saying is going to happen eventually but before we can even look at implementing this there's another piece of this puzzle right we spent all this time learning about something called pvector I guess I'm just gonna erase all this we spent all this time learning about something called P vector we box2d we now need to learn about something called Veck so this is just a kind of hard truth of the world that we live in this idea of a vector is a general concept in physics simulation motion programming computer graphics all that stuff and when we are in processing so we're using P vector if you use you know if you ever programmed or something called openFrameworks you might be using ofx ofx vector when you're in box 2d using something called Veck when we use toxic libs a little later we're gonna see vector 2d vector or vet 2d mech 3d so there are lots and lots of implementations of vector classes everywhere that you can look the good news is the concepts are all the same everything we learned about adding vectors scaling vectors normalizing magnitude all that stuff it exists in P vector it exists in the Box 2d vector to class the thing that's a little bit unfortunate is this syntax is always gonna be a little nuance a little different and I don't know maybe we like that syntax maybe we like that syntax I'm not really sure which one's better but we just have to we don't have to look memorize them both but we have to feel a little bit comfortable with them both so just to show just to kind of cover this in a little bits here you know whereas when we said in processing and pre vector P vector V equals a new P vector right with some coordinates in in in them where whatever we make vectors when we're using box2d we're going to make Veck two objects so it looks the same exact way you know an x and a y but instead of being a p vector object it's a vector object and there's a lot of other things like we did location dot add velocity added velocity location if we go look at how the syntax works in vet 2 you'll see that it's location dot add local sorry I didn't write that very well local velocity right so the you know it's in in toxic lives we're gonna see that it's ad self what's going on here velocity is being added to location velocity is being added to location so it's just called ad local to emphasize that location is changing here multiplied is the same thing instead processing it's mult back to it's just mu L you know you normalize it's the same normalized it's the same in both places magnitude however in processing we could get the magnitude of vector V mag in infect I believe it's V dot length so we just need to feel a little comfortable with all these differences and I want I really really desperately want to point you to a place right now where you could just see a list of these if you look in the nature of codebook there's a little section that's where the link that I'll include that has kind of the functions and and their corresponding names you can also look in the J box to the documentation so if you download J Buc city from the J box2d website it'll have the Java Doc's which will have all the functions for Veck too so this is just something we need to be comfortable with so okay so we know there are two things we're we're getting closer now we know that we're gonna make bec two objects we're gonna have a vet two object may be called position we're gonna want to tell box2d about it and then later we're gonna want to ask for the new position back so remember we need to do a conversion conversion so how do we do those conversions the p box2d helper class has a set of functions that will take a world coordinate and convert it to pixels or a pixels coordinate and convert it to world these functions are somewhat really I just have to bet they're really awkwardly named and I'm this open competition to anybody has a better naming convention for these functions that want to suggest more I'm totally thrilled to to rewrite this library to be a little simpler but just to kind of go through what those are for example when we are converting when we have a when we set up we were thinking okay I want my X Y to be it I'm I want my object to be right there on the screen that's its pixels coordinate but I need to tell box2d about its world coordinates the functions going to be called chord pixels to world and then we pass in the X Y so this is going to be how we're going to convert from a pixel location and out is going to come the world location that we're gonna pass into box2d when it comes out we're going to get that world cool occasion because Bach City is only thinking in a world world world knows nothing about pixels then it's going to then then we we're going to get that world location and we need to convert that to pixels so to convert that to pixels we're gonna say coordinate chord world to pixels and we're gonna pass in and x and y these functions these conversion functions can take x2 arguments the X and the y separately is floats or they can take a vector object so it can take a vector object and give you the converted one back so we're gonna see there's lots of functions like this we're also going to need to do this for sizes if we set up a box if we set up a box with a given width and a given height we're gonna have to convert that pixel width like we know we want our box to be a hundred pixels wide and fix 250 pixels high but what is it in box 2d world units we're gonna have to say scaler pixels to world W so you can start to see the convention here we might convert a coordinate we might convert a scaler we might convert a vector there's a list of functions and we're going to see them in the examples and as we look through the examples I'll point them out again this is a big topic lots of code lots of things for you to work out there's the book there's what I'm talking about there's the examples let me know what's missing but hopefully we'll gonna figure this out together ok so you can see all these functions but ah there's one little detail that's kind of important when we draw a rectangle in processing we think of the rectangle as having a width and a height the full height the full width box2d thinks about the width and height of a rectangle as the distance from the center to the edge right so that's the width and that's the height so when we convert in the code examples you're going to be seeing that we think of our pixel width then when we convert that we need to divide it by two so these are just the little details we're going to see as we start to build this processing example that's actually going to have elements that we're going to create and put in the box through the world and get those locations back out okay so this is a lot of jumbled stuff here what would I hopefully want you to take away from this is we need to understand about converting between pixel coordinates and box 2d world coordinates we're going back and forth a lot we'll see this in the examples and we need to realize that all of this math that we're going to be doing with box 2d vectors is going to use the effect 2 class which is very similar to P vector but with different syntax so you know if you're confused about this every watch this maybe that'll help take a look at the section that I'm linking to in the nature of codebook but we this is now we kind of gathered all the pieces and we're gonna actually look at the code implementation and make our first box 2d sketch in the next video okay