hello you are about to watch a coding challenge that is in three parts and this is an intro to the intro so to speak it's my version of the game snakes and ladders this is what it is so you can now decide if you want to keep watching it you know there's a lot of room for improvement here but the reason why I'm recording this extra little bit is that while I'm doing the challenge I'm doing it on the fly I don't realize that I'm gonna end up ultimately having it be in three separate videos so I just want to let you know if it ends abruptly check the video's description and look for the link to the next part alright thanks and enjoy hello it's me I'm going to do a coding challenge I'm actually quite excited about this coding challenge I'm going to attempt to make snakes and ladders a very well known ancient Indian video game I in this country of the United States where I live I'm I know it it's chutes and ladders but I'm going to make snakes and ladders stay true to the original version of the game so I'm gonna do this with out a lot of like animation design I just want to get the mechanics of the game going and I want to kind of think about some interesting properties of the game I saw a presentation by Naomi Clarke here at the game center about snakes and ladders and got me thinking just about all sorts of stuff so maybe that stuff will come up as I try to make it now well I'm gonna I'm gonna read this Wikipedia page to understand the game but I'm gonna try to diagram it first in my own way to see if we can think about how kind of data structures variables classes what kind of things we need to program it so the game is a simple game and let's actually start with it I'm gonna start and make a really simple version of the game it's called and because there are no snakes oh there's a ladder so it's just and this is the game called and and let's make it four by four obviously the grid size the board there's so many ways that you could sort of consider the board but I'm gonna consider the board of the game to be a four by four grid and each spot is going to be a certain number and the numbers are gonna look like this I am count whoops how about four by three so apparently for me to start very good lesson learn number one is that if I'm starting over here on this side of the board by wrapping around like this I can't have an even number of rows so the idea of the game is if I am a player I roll a die or maybe spin a wheel maybe and maybe so maybe I get maybe I can move one two or three steps maybe there's just three possibilities so if I get a three I will go one two three and then if I get a two I will go one and I will be here if I get a one I will move to here if I get another three element to here another three I move here forget a one once I reach here I win I have a question do you have to roll the exact number to reach to win or do you can you over roll the end well we can kind of make the game work either way so this is the basic mechanic of the game no strategy pure luck two players one goes first one goes second alternating turns represents the end first wins now there are snakes and their ladders but this basic idea let's first implement this and I'm going to talk about what makes it interesting once we kind of go past that now there's a variety of different ways we could do this I think what I want is I want a player and a player just has a what's the what's the terminology for the spot that they're on I guess I'll just say a player has a spot that's the spot they sell the tile that they are currently on and then we have this idea of a tile which is each one of these and the tiles maybe just have which tile they're connected to next as well as perhaps an x and y location and a size like a width and a height for rendering them on the canvas or ever drawing graphic surfer we're gonna do yeah that's enough description talking about the game I probably lost eighty percent of the viewers but now let's go over and start coding some of this stuff okay oh yeah pure hmm okay I have no code I am using p5 GS library that's gonna help me with a lot of drawing stuff I've got a set function a draw function and I'm setting the background so let's first let's think about this I'm gonna actually make a couple other JavaScript files I'm gonna make one called tile Jas I am gonna make one called a player s and I'm going to use objectoriented programming es6 classes so I'm going to say a player when I make a player the player has a spot and the spot they're in is zero all right so that's the idea of a player now I'm going to make the idea of a tile and what did I say a tile is going to have some x value where it is some Y value where it is and maybe the tile that it's the next one that you would walk to next so now and maybe it has a width and a height let's have everything be square so I'll just call it WH for square now what I'm going to do is here looks like this 300 by 400 let's have the width be 300 and the height before would be 300 the height be 400 this will kind of oh well the with these would be 400 and the height should be 300 that allowed me to have makes 100 by 100 tiles Oh baby I'm gonna program is so you could just plug in any numbers and I'll make a big complicated board but for right now let's start with it this way 400 comma 300 I'm quicker than this and now what I want to do is make some tiles so I'm gonna create a variable like I know that they're all gonna be a hundred by a hundred let's let's actually just make a variable called like resolution and I'm gonna call I'm gonna say that's 100 so we have the number of columns is the width divided by that resolution and the number of rows is the height divided by that resolution and I am also I need an array of tiles and eventually I'm gonna need a player so I got an array of tiles and I've got a player I the a grid that I'm thinking of columns and rows but my tiles it's just gonna be an array so what I'm going to do is I'm gonna say for let I equals 0 I is less than columns times rows that's how many tiles columns times rows I plus plus I'm gonna try to get myself some more room to see the code and then what I'm gonna do I'm gonna make a new tile let tile be a new tile and I'm gonna give that tile I hear right now but just give it like our arbitrary location like 100 I have to think about the location in a second and then I'm going to say the next tile is I plus 1 so it gets a location and the next tile is the next one I plus 1 so I make this tile and maybe I give it its size is also that resolution variable let's make that resolution so the idea is now I go into my tile constructor I need an X a Y a size and the next tile so those are the arguments of the constructor every time I make a tile XY size and the next tile okay what what how am i doing is this gonna work I think it's gonna work now I really got to think though how do i hmm I have an idea why don't I what would make what would actually be a little bit better here is for me to think about how do I get that XY location so I know the first tile is down here right so how does that work the first tile the X is zero and the Y is the number of rows minus one times that resolution right so that's where that starts and then each X just goes over a hundred more so let's try that so let's say the first tiles X is zero and the first tiles Y is the number of rows minus one times resolution and I'm going to then make the tile at that X&Y and by the way I'll object I better do something with it so I'm going to once I make it put it in my array so I can access it later now once I make that first tile all I need to do is say hey x equals x plus resolution so the next tile is in the next spot right here now what happens when I get to here once I get past the width I need to move up and then start going that way hmm so I'm gonna need a direction that's keeping track of where I'm which way I'm going I'm just saying let Gir equal one so it's plus resolution times the direction and then when when when I'm by the way I'm sure there's lots of much more efficient ways of doing this it's like my caveat that I have to give constantly while I program terribly if X is greater than width or equal to if it gets to the end I don't want then what I need to do is say X minus equals resolution go back and say y minus equals resolution so I want to move up and only back and direction x equals negative one so now it'll what that's gonna do is gonna I'm gonna get to the end so I move back move up that's my next tile and then the next time I'm gonna start moving X this way so that if X is less than or equal to zero same thing I'm going to go pull plus the red no I'm gonna stay I need to stay there because I'm doing this thing where I'm going to be drawing the tiles from their left side that's why I'm gonna got to the end I just kind of slide back when I get to here though I'm fine right there x equals resolution Y goes up and direction switches so you know there's there's a nice way I could probably combine these if statements to one let's leave it like that for now I have no idea if this algorithm is right and what I'm going to do though to find out is just go and look at all the tile and draw them so I'm gonna say tiles index i/o and I've been using my of loop let's use the of loop why not right so I'm gonna say for let tile of tiles and then tile dot you know render display and uh let's let's call it render show as a show like show put it on the show its tiles tiles tiles you know anything I can do to somewhat tie myself to musical theater I attempt to very poorly okay there was an edit point there because we're some nice comments from the chat pointing out that the actual original version of the game does in fact start here and end at the top a perfect square which so that's the actual version of the game I also got a good comment which what I could do is you said two loops for the columns and rows and then check if the Y is an odd or even row two like move this way or that way but I'm gonna leave my goofy system in there but I will actually have an end up there so it's I would you want to say that the peppa pig version of chutes and ladders that I play quite often actually I think ends over here I'm gonna check that tonight when I get home or I'll put something in the copy in the comment about the Peppa big chutes and ladders everybody wondering I'm sure okay so so here we go let's let's do this let's make it a square then let's call show and so now what I need to do is I need to write that function show and I'm gonna I'm gonna give each tile like a random color just so just so I can see them and I'm gonna say draw a rectangle at the x value of the y value at that width and height and then I'm going to draw this color okay so we should see point by way what I just did here is kind of terrible I wrote so much code before I actually attempted to run any of it my advice that I would give anybody when I try to do is and I'm sorry for my green paper bleeding out there there is I should I should have been testing stuff more frequently but here we go okay tile is not defined well why is tile not to find number one is I didn't bother to include in my HTML file the tile javascript file and or the player javascript file and I don't think the order really matters here but I want to put the player first in the tile second in the sketch last okay hey that looks pretty good let's write the numbers in of the next tile in the tile so let's say text just for justice just for debugging text this dot next actually I kind of want to know its own index just out of curiosity right why not have the tile I don't know that I need this but I will kind of want to see I want to see this dot index and this dot next kind of in the tile and let's say text size 64 no text size like yeah 48 32 and what am I looking for I need to give it an x and y location so I'll give it its X and it's Y location so I just want to see that this is working correctly and one undefined that's not good oh because what I forgot that I made I did this idea of having the tile know about its index but I didn't bother to pass in I why is only this one showing me the text so hopefully I can use my matrix what did I do wrong here that I'm only seeing the so let's look at the tiles this is there's 16 of them these look like reasonable locations for them these look like reasonable index indices and next values what is wrong here look at this there's some negative Y stuff that can't be right so Y starts at 0 100 200 300 that's right 100 200 300 then goes to 200 the X is 300 200 100 uhoh one there's no zero there so how come the zero oh I need to mmmhmm okay so my algorithm is wrong I had this like idea in my head that I was not going to get that my algorithm is just totally wrong because I want to basically what this should say is negative resolution right I'm in a place where I don't want to be if I gone all the way one off and then I do need to add back the resolution so actually this can be one let's make this one if statement if I'm at the either end then I should add the resolution times the direction times negative one then I mean I could change the direction first let's change the direction first then I could add the resolution times the direction and then go up a row and then I don't need this now let's try this okay I have them all there they look like they're in the right spot am I not draw oh you know why I'm not seeing them because I'm actually drawing the text at the top which is it's going to appear but then the other one draws over it so for example what I want to do is say actually to draw the text at this dot why how come I can't get to this part of my code right Oh cuz I moved it no oh yes what have I done this dot y plus resolution boy am I making this silly and complicated ah resolution is not defined why why is it not too fine I believe it to be defined it is this wh resolution was the variable that I used in my setup function the height the dimensions is called wh in the object okay there we go 0 goes to 1 1 goes to 2 2 goes to 3 3 goes to 4 4 goes by the way the reason why I'm doing this is because if it's a snake 4 is not going to go to 5 4 would go down to 2 so that's why I've set up this structure but at least I have all of them there and I have now the next things alright alright so we don't need this debugging stuff anymore and in fact what might be useful is I to make it maybe I should just make it just so we can view it like a checkerboard pattern let's that might make it easy to see so what I could do is say here in the constructor if I modulus if index if it's an even one then make the color white otherwise this color equals black so now if I do that we see the nice little checkerboard pattern I'm not drawing the text anymore and there we go let's be a little less extreme about it and say 200 and 100 there we go so this is now the board now I need a player I need a player I have a player object so I'm going to go to the sketch and I'm gonna say after I've set up the board player equals a new player then what can the player do the player can be seen the player can roll so the player can roll so what is the roll mean by roll I mean like roll a die die or spin a wheel roll so I want to pick a random number and I'm gonna use the p5 random function to give me a random number between 1 and it's 0 an option in snakes and ladders what are the what are the actual roll possibilities one I'm just gonna say for right now between 1 and 4 and I'm going to make that floor and I'm going to say this dot spot plus plus equals R then show is and I I guess what I want to do is I need to maybe if I give it the show function the array of tiles what I need to do is say current equals tile index this dot spot so I can look up where it is which tile and then maybe in that tile I can say draw an ellipse let's make ellipse the player could have a color I'll just say white for right now let's draw an ellipse at maybe what I'll do is I'll write a little function that like equal tile get center and it can give me like a little you can just give me a little array with the X and the y back of the center of the tile just so I can and so you know why not let's write Center here and I can say the center x equals this dot X plus this wh divided by 2 and the center why is this dot y and then return a little array with both those values in it could make a vector object or something I'm gonna call this get get Center and then oh this might be a good opportunity to use like the es6 getters and setters who I'm not gonna bother I'll come back to that some time so then in the player I get the center and then I could say Center 0 for X and Center 1 for Y and I'm gonna make a little nice little 32 by 32 diameter little circle okay so tile is not defined in player dodge yes line 12 why is it not defined in player Dutch yes line 12 well because when in the sketch I call show I didn't pass it in the tiles and let's do this tile is not to find still in player yes oh this is tiles thank you very much wow how many times can I have tile not defined Oh current this is current gets enter and now there we go oh look did you see that will you see a little game get played so now I need an any condition let's just say roll is rolling and moving so I should have a roll yeah it's probably will roll and then a move but uh maybe I'll separate those out later I need a condition for ending the game so maybe what I'll do is I will do that just out in the main program and I will say if player dot spot is greater than is greater than tiles lengths then are greater than or equal then not lengths minus one that's the last rater than or equal to right then the player is there at the end and I could make a more complex logic that you have to land on the last spot just go let you overshoot it equals that and console.log game over and I can say no loop alright just gonna do that for right now yes I'm gonna change it to a 10 by 10 grid in a second all right so this is great so now the game is playing I could slow down the frame rate I could show what the role is so many things I could do to make this nicer let's at least make this 10 by 10 there we go so now we're watching the game being played a simulation of the game being played now here's the interesting thing what's interesting about snakes and ladders and the reason why it's is it kind of like relevant to a discussion of Montecarlo systems in this book is because and thank you again to namely Clark at the game Center for talking about this last weekend is that in this scenario we can actually write a mathematical formula to compute the mean average amount of rolls it would take to win the game let's at so we could do that right we could figure out like well if you can only roll a 1 2 or 3 and there's 16 spots so your average roll is a 2 so maybe that'll take on uh maybe about eight eight rolls on average I think that's probably the appropriate mat I probably got it wrong you could fix me in the comments but the whole point of snakes and ladders is I could add a snake here I could add a ladder here this is going to increase the drama the fun of the game make it seem more complex but then there's not I mean try to come up with a formula that if you have a big complicated board lots of snakes and ladders that's going to compute the average amount of rolls it takes to win the game not so easy however what I could do is just run the thing randomly hundreds of thousands of times or at times or hundreds of times however many times I need and compute the average that way so that's what's known as kind of a Monte Carlo simulation and before by trying just running something through randomly making a lot of random selections before there were computers there were books of random numbers like this one all right so let's go what am I gonna do now let's have it run many many times and let's have it continuously display the average amount of rolls so so I don't know I've kind of gone a little I'm kind of gone off in a little tangent here if you're watching this make us into a creative fun game that you could actually play I'm gonna go this simulation route ok so now so now let's keep track of rolls average rolls alright and games plate so rolls are the number of rolls during one version of the game game played increases and average rolls is the number of rolls a minute I could keep a running average I could keep trying to keep track of a history let's let's say rolls is it hey we'll make it array and then I don't need games played it's just the length all right so so but I do need the current rolls all right you just have the current yeah current I'll just have a variable called index into that so every time every frame is every time I roll then rolls index plus plus all right then so I'm increasing the number of rolls then when the game's over the index goes to the next spot in the array I don't say no loop rather what I do is I start the game over so what do I do to start the game over all right so here's the thing what's happening here I'm done stick at the end the game is over go to the next one well do I want to see that finished would be nice to see so what I probably should do is what I'm gonna do is actually just say game over this is terrible MIT say game over equals false game over equals true and then I'm gonna deal with the game over logic separately down here if game over I think all I need to do is player reset the player right reset the player and have the index go up all right reset the player have the index go up and the player then needs a function called reset where this dot spot goes back to zero there we go all right I think I might have gotten all this stuff in there let's just try running it see what happens yeah the game's playing over and over again let's see rolls numbered a number Todd enough further that's not a good sign ah did I not did I forget to initialize the roles at zero so what I need to do is when the game starts I need to say roles at index and I want to put the game by the way back to a four by four just sort of play faster roles index equals zero and then when I increase the index I should say roles index and there's probably more elegant way terrible disarray but the next role starts at zero okay so now let's look at the roles there we go 9 9 8 9 8 8 8 3 does that make sense that's taking about that many roles that's kind of like wow did it in three roles whoops how could it's do it in zero something's wrong with the lehto because the last one is the current one I'm actually looking at it before it's finished so now when I do the average that makes sense so now what I want to do is calculate the average and you do that in sketch so sum equals zero I should use one of those nice array I could use the reduce array function and I need to go all the way up to roles dot length minus one because the current role does not count in part as part of the average and then I need to say some plus equal roles index I and then the average is the sum divided by the roles dot length but minus one because there's one fewer and then what I can do is I can just say console let me let me actually make a Dom element on the page I will just say in the sketch I will say average P average P equals create P and now I'm gonna say average P which is the average paragraph HTML average okay okay everybody settle down so this is the average amount of times it is now taking which I didn't I say eight so I think I'm about right but average amount of times it's taken to complete the game and it's probably a little bit less because I'm starting on the first spot that's why it's a little bit less I didn't actually should start at negative one let's start at let's start at the player should start at negative one and it would make sense from you by the way in the constructor to just call this dot reset right here I think that'll work so we can see now we have that math that I did in my brain appears to be correct because we're kind of through the Monte Carlo method getting that number of eight okay so that's the end of part one where I made just the board with no snakes and ladders if you check this video's description there should be a link to the next part where I start trying to add those snakes and ladders and it doesn't go as well as I might have hoped but you could just watch it if you want