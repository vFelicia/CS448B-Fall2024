hello I am pleased to present another guest tutorial here on the Cody crane and today's guest tutorial is from yuning she and yuning she is an artist and researcher she's an alum of the program ITP where I teach she was also a resident researcher for a year here at ITP and she's done a lot she made a lot of contributions to p5.js org notably this project called p5 playground just totally amazing because usually you think about oh I'm gonna write some code and I'm gonna change the code and then I'm gonna see a new result but here watch this I'm gonna move this ellipse around and watch what happens to the code the code is changing so this is p5 playground which allows you to manipulate the shapes on the canvas to see the code changes in real time she also have something called p5 live coding which is the other way around I encourage you to check out yuning's website to learn more about her work with p5 and other projects that'll be linked to in this video's description but what you are about to see is unique showing you a clever twist how to build a brick breaker like gamesome now maybe do my own code challenge of brick breaker but you'll see yuning's it's really wonderful and this brick breaker game was actually featured on the p5.js dotorg homepage as well so enjoy this video tutorial thank you yuning and I will see you all in another video bye hello everyone my name is Ian I am a researcher at NYU ITP I recently made a break breaker game in p5.js which was featured on P files homepage for two weeks in June the original inspiration for this game was Daniel shipments asteroids coding challenge so now I'm here at dance studio where he makes out his coding training videos and I'm going to talk about how to make a brick breaker game in p5 before we start let's take a look at the final result this is the original game and today we are going to make a simple version of it which is this one you can see the results the code my github account I will make sure to includes all those links in the description below so in the game you can press us to start the game and press a with the key to move the paddle around once the ball hits a break the brick will either become smaller or disappeared depending on the size of the break and we're going to use p5 to make this game in case you are not familiar with p5 p5 is a JavaScript library for creating animations and graphics in the browser so here I have a basic p5 code template I have my index.html here which includes the basic structure of the web set and I am importing 3p5 libraries here and I'm also including for JavaScript files that I created let's go to the whiteboard to outline the gameplay first we have three key elements in this game paddle a ball and breaks a paddle can move to the left or to the right and a ball can bounce around the canvas and if the ball hits the paddle or if the ball hits the break the ball can bounce off and a larger break will become smaller and a smaller break will be destroyed if it's hit by a ball let's keep it simple for now and assume that if all the bricks are destroyed the player will win this game now we have our game play defined let's think about how we can approach each of the dynamics in a PFI sketch so in a PFI sketch we at first we need to draw a paddle can move to the left or to the right when we press a wordy on the keyboard and we also need to draw a ball that can bounce off of the surfaces and some bricks of different sizes and we need to write some logic to figure out what will happen if the ball meets the paddle or if the ball hits a brick finally we need to write some simple logic to start work into the game so as we discussed first we need to draw a paddle in order to better organize my code I have created a file called padded areas and in this palette or ES file I have a function called paddle so in this function I am going to give the paddle its weight and height this width equals to 160 this height equals to 20 and I'm also going to assign the paddle its initial XY position there's the part equal to MP 5 there is a function called create vector that can create vector objects so we are going to use that function create vector and we are going to pass the XY position to this function which will be with divided by 2 and height minus 40 the weight and height variables here are the width and height of the canvas and I'm also going to have display function this that is a play because to function this disappear function were actually draw rectangle on the canvas in p5 there is function contract which will take four arguments which are XY weight and height and we're going to use Rex function to draw a rectangle on the canvas so react we're going to pass the XY position of this pedal which is this the post ax this post why this with this the height and now we have our pedal class defined let's go back to sketch Dodgers to create a pedal object out of this pedal cause so at first I were have a variable capital and then in the setup function I will say title equals to create not create pedal equals to new pedal and then in the draw function I am going to call the display function of the pedal object to actually draw a rectangle on the campus so now if I save my code and run my code we should be able to see a rectangle at the bottom of the canvas we are also going to have a function curve based on move this function is responsible for changing the exposition of the paddle also I want to be able to control the amount of disappointments of the paddle so I'm going to pass a variable called step to this move function so if so in this motor function we're going to change the x position of the paddle this has the ax plus equals two step so we we were at step two the x position of the paddle and now if I if in the now if in the sketch that is if I come paddle that move save the code when we call this move function I'm going to pass twenty to this function so in this case that will be 20 and we were at 22 the x position of the paddle everytime when the draw function is called so if we run the code again we will say the paddle move moving to the right but we don't want to move the paddle unless we press a wordy key on the keyboard so in the sketched ideas we were have function cards key pressed this key press function comes from p5 it were big it were because every time a key is pressed so in this key press function I would say if he echoes to lowercase a were the key equals to uppercase e if the key is a I will move the paddle to the left else if the key is D I will move the pedal to the right in order to decide the moving direction of the pedal in the pedal Dodgers we're going to have two more properties for pedal so this is moving left this is moving right there are boolean Flags so at first they will be false and back to sketch ideas we will say if the key is a we were set paddle is moving left to true and if the key is D we were set peridot is moving left moving right teacher so now we will know the moving direction of the paddle so back to paddle dodges we will have another function called a star update this function were updates the exposition based on the paddles moving direction so in this function I would say if this dot is moving right is true I will call this the move function and pass 20 to this function to increase the exposition by 20 every time and also if this da is moving left is true I will also call this move function but I were passed negative 22 it to decrease the exposition by 20 every time back to sketch DOJ's we will replace pedo dot move function with paddled update function and save the code and let's run the code again to see what happens so here is the paddle and if I press a key they should move to the left and if i refresh the page and press D key it will moved to the right but you might notice that once we press the a key the paddle da is moving left will always be true so the paddle will keep moving to the left so we need another function to detect if I release this key once the key is released we were change Pagoda is moving left to false again to stop the paddle from moving so in the sketched areas we were have another function cut he released it was set paddled is moving left to fuzz pedal that is moving left right to fuss this key the key release function is from p5 to this function will because every time when we release okey so let's run the code again so now if I press a key and then release it the paddle should move to the left and then stop and if I press the key the Paulo should move to the right and if I really said I should stop yay it works okay the last thing that we need to do for paddle is to check the edges because for now if I move the paddle to the left so the paddle will move out of the canvas and we don't want that um this is the exposition of the paddle so we will say if the exposition of the paddle is less than 0 that means the paddle is definitely out of the canvas we were set the exposition of the paddle back to 0 and here this is the exposition of the paddle too and if the exposition of the paddle is beyond this point we will know that the pedal is definitely out of the canvas 2 and this point is actually the width of the canvas the width of the paddle so it's this one and if this happens we will reset the exposition of the paddle back to with the width of the paddle in the paddle Dodgers we are going to have another function called check edges I just because to function and we will say if this the pasta X is smaller than zero this the pass docks will be zero if it's out of the canvas we will reset it back and the house if they stop has the ax it's more than the width of the canvas the width of the paddle we were reset it back to the width of the canvas the width of the paddle ok and now if we call check out this function in the draw function there Chuck I just see the code and run the code again now if I press a key to move the paddle to the left even if I'm still pressing a key the paddle cannot move out of the canvas same with the D key if I keep pressing D key the pedal cannot go out of the cameras either cool so this is the end of the paddle that is the next step is to draw a ball the power have its initial XY position and so moving direction and they took can move around the canvas when it hits the edges it can bounce back so now I'm going to give the initial X Y position to the ball so the start pulse equals to create vector and I want this ball to be the center of the canvas so I will say with / right / and I also want to give the ball its radius so there's the R equals to 30 then let's have a display function to actually draw a circle on the campus so this that is a play he goes to function I'll give you five there is a ellipse function that can draw a circle so we will use this ellipse function it takes X Y width and height so this post dot X this the past why the star are multiplied by two this dot R multiplied by two because ellipse function takes the diameter of the circle so we need to multiply a by two okay so now back to sketch ideas we will use this ball class to create object so here we will save our ball in the setup function similarly we will have pi equals two new ball and in the draw function we will say part out display and if we save the code run the code again we should be able to see a bar in the center of this campus so the next step is to move the ball in order to move the ball we need to give the bar its direction and velocity so back to Patraeus we are going to add two more properties and they're both vectors this that direction equals to create vector 1 1 this means the direction of the ball is 1 on the x axis and 1 on the y axis so the power will move towards to the right bottom of the canvas at first and then let's give the ball its velocity because to create vector and we are going to multiply this vector by 8 we use this number to control the speed of the ball so the bigger this number is the faster the ball were moved and here let's have new function call today's star update so we will use this function to update the position of the ball based on its previous position and its velocity and direction so here I will say this pasture ax plus equals to this the verdict x multiplied by its direction the ax so this means the ax position of the ball is itself plus the velocity and multiplied by its direction so the same with its Y position there's the pasta y plus it goes to this the velocity dawai fly it's why cool so now we have this update function so in the sketch Taj is let's call this update function to update the position of the ball the update and we save the code and run the code again we should be able to see the ball moving towards to the right bottom of the canvas but now the ball would just move out of the canvas after a while we want the ball to bounce back when it hits the edge of the canvas so like the paddle function we are also going to have track address function in the power function so this the track address equals to function and in this function we're going to check if the ball hits the edge of the canvas or not so in in this game if the ball hits the bottom of the canvas the game will be over but let's come back for this later and for now we are going to check our for sizes so for this one we were saying if the Y position of the ball is less than it's the radius of the ball and the y direction of the ball is less than zero we will know that the this ball is hitting the top of the canvas and also it's moving towards to its so in if this happens we were reverse its y direction by multiply its Y direction by minus 1 similarly if the ball is here and it's we were saying if it's the y direction of the ball is more than the height of the canvas the radius of the ball and also if it's Y direction is more than zero we will know that this ball is hitting the bottom of the canvas and we were childress its y direction and here we were saying if the ax position of the ball is less than the radius of the ball and it's moving to the left in this way is ax direction will be will be less than zero we will reverse its ax direction and here if the ax position of the ball is more than the width of the canvas the radius of the ball if this happens and also if the X direction of the ball it's more than zero we were also reverse its ax direction so here in the body is in the chalk edges function I will just say if this the pass that Y is less than the radius of the ball they start and this direction the Y is small a is smaller than zero then we will know that this ball is hitting the top of the canvas we will reverse its y direction they start direction Y multiply minus 1 and similarly if this top has that Y is more than the height of the canvas the radius of the ball and the direction the Y Direction is more than zero we were also reverse its y direction also similarly for X position X direction we will say if it's x position is less than the rate its own radius and also its X direction is less than zero we will note the ball is hitting the left side of the canvas we will reverse its x direction similarly for this one if the ax direct if the x position is more than the width of the canvas minus the radius of the ball we will know and also the X Direction is more than 0 we will know this ball is hitting the right side of the canvas we were also reverse its x direction so this is our check address function and if we call this function in our sketch ideas but check I just and save our code and drawn the code again yay so now we have a bouncing ball great so the next step is to make the ball interact with the paddle when the ball hits the paddle the ball will bounce off to let's see this is our paddle this is the X Y position of the paddle and this is the X Y position of the ball actually we will know that if the if the Y position of the bar is in this range and the ax position of the ball is in this range we will know that the bar is meeting the paddle so let's take a look at those two ranges for this range this range so this is the Y position of the paddle so this is y and this this point is the y direction of the paddle minus the radius of the ball and for this range this point is the ax position of the paddle minus the radius of the ball and this point is the ax position of the paddle plus the width of the paddle plus the radius of the ball so here back to barrage is we're going to have a new function cut meats histamines use to function and in this midst of function it will take paddle as its parameter and it will return true or false to means the bar is meeting the paddle fast means it doesn't and remember we talked about those two ranges if the axe is in this range and if the Y is in this range we will know that the ball is meeting the paddle so now here we I'm going to say if this the pass that Y is smaller than the paddle top has that Y and also this top has dub why is bigger than paddle top has the Y minus the radius of the ball which is this art and also this the pasta X is more than this paddle the pasta ax its art and this the pasta X is smaller than the ax position of the paddle plus the paddles with plus its own radius if this happens we will know that the ball is meeting the paddle so this function will return true otherwise it will return false cool so let's save the code and then back to sketched ideas in the draw function we are going to check if the bow is meeting the paddle at a time so we will say that meets and we pass in our paddle object so this function will return true or false so we were saying if bow meets the paddle and also we are going to check the y direction of the ball if the y direction of the ball is more than zero that means it's moving down to the paddle so we will say about direction why is more than zero in this way we know that the ball is hitting the paddle and then we were going to reverse the boss y direction so the ball can bounce back so we will say about that direction the Y multiplied minus one now if we save the code and run this code again and I am moving a wordy key to move the paddle and the paddle can catch the ball awesome so now we have we have a bouncing ball and we have a paddle that can catch this bouncing ball so in the prodigals in the chalk address function we don't need to check the bottom of the canvas anymore so we can just come we can just delete this line out cool because if the ball hits the bottom of the canvas the game will be over great so now if we run the code again the ball can bounce around but if it hits the bottom of the canvas we're not going to the ball won't bounce back great the next step is to draw some breaks of different sizes and when the ball hits one brick the one break will either become smaller will be destroyed depending on the size of the brick so here I have my break dodge as file and in the break function I'm going to give each break its radius this star R equals two random p5 has this random function that can generate a random number between 20 and 80 and I'm also going to give each brick its initial XY position so I will say this that pause equals 2 we will use create vector again and the ax position of each brake will be a random number between 102 with minus 100 the width of the canvas minus 100 and the the Y position of each brake will be a random number between 100 to height divided by a minus 400 okay so now we give each brake its radius and its position and we are also going to have a function called display in order to draw a polygon the first thing that I need to do is to translate the origin of the canvas from zero zero the left top corner of the canvas to the actual position of the current polygon and the four and we're going to draw hexagons and for hexagons we have a six six vertices here and since the center of the hexagon is zero zero now and we do know the radius of this hexagon and also we do know this angle this angle is 360 divided by six which is 60 degree and this is also 2 pi multiplied by 6 and the things we know the radius and this angle we will know for this were just vertex it's x equals 2 our multiply cosine angle and its Y position is our multiply its sign and go so in this way we know we will know the X Y position for all the six vertices and all we need to do is to connect our six of them and then we will get a polygon as we discussed first we need to translate the wording of the canvas to the XY position of the polygon so here in the study spray function I will say translate this the past axis the pasta Y and we are also going to have another property they start total equals to 6 since it's hexagons and you can change this number to a torch off to have other kinds of polygons and after translate we are going to have a for loop for I equals to 0 I is less than this total I plus plus and in this for loop I am going to use a function called map from p5 to get the angle so I will say that angle equals to map and it will take a variable I which is from 0 to this total and it will give me an angle which is between 0 to 2 pi and cool so we have the angle now and according to our calculation we will have the exposition of the first vertex which is 4x equals to the star R multiplied by cosine angle and for y equals to this R multiply sine angle cool so now we know the actual position of the first tag vertex and we're going to have call another function called vertex to create some vertex out of this XY position and we're going to pass x and y in and after this for loop we will have 6 vertices and now we are going to call begin ship and end shape after the for loop to create to connect all six word vertices and we are also going to pass close to and ship function so the polygons were closed itself the last thing that I need to do is before I translate the origin I need to use PF eyes push function to save the current translation rotation and join settings and after I finish drawing my first polygon I will use pop function to restore those settings because the translate function were translated the wardroom based on its previous position which won't be zero zero after we draw the first polygon so after I draw the first polygon I will move the wardroom back to zero zero so when I'm joining the second polygon the wardroom will be translated correctly let's now let's go back to sketched ideas and to actually create some break objects I will have an empty array card breaks equals two empty array and in the setup function I will have a for loop he goes to zero is less than 20 so we will have 20 bricks I plus plus and in this for loop I am going to create a new break and push this new break object to bricks array and in the draw function I'm also going to loop through this BRICS array which will be i VAR j equals to 0 J is less than breaks the left J plus plus and break J is each brick object in this breakaway and I will call break J dot discipline to actually discipline the hexagons on the campus so now if we run the code break is now defined sketch 30 you think I'm missing ass and that's wrong it again okay now if I save the code cool so now we will have 20 bricks on the campus and the next step is to to make the bricks either smaller or destroy this break when it's got it gets hit by a bomb so in the barrage as we were also going to have a function cardbased are hits and we will pass the the break to this function and this function will return either true or false true means the ball is hitting this break this is the actual position of the break and this is the actual position of the ball and in p5 there is a function cuttest that can calculate the distance between two points so by using this function we can catch the distance between the brake and the ball and we will say if the distance is less than the radius of the brake plus the radius of the ball we will know that the ball is hitting this brake so here in the apologies in our head function we will say at first we were create distance function for the distance equals to dist and we were passed through those two points there's the past acts this type has the Y and the brakes the past acts brick top house down Y and we can get the distance between those between the brick and the ball and then we were saying if distance is less than the radius of the brake plus the radius of the ball plus the radius of the break we will know that the ball is hitting the brake so we will return to otherwise we will return false cool so now in the sketch that is when we are looping through this breaks away before we display each break we were call this function if the hits we passing this current brake if ball hits brick is true we were we were delete this this break objects in this breaks array in JavaScript there is a splice function so we will say break start splice I won so in this way the splice function can delete one element in this array as the index of I call so now we see the code is not defined because I should be J okay so if the ball hits the break the break or disappear the break or disappear the break or disappeared the procore disappear next we're going to add one last feature of this game so when the ball hit hits one large break the break where becomes smaller so and if the break is small enough the break were be destroyed so in the Skagit Egeus when the ball hits the break we were also going to check the size the radius of the break so I would say if this break like J dot R is more than 40 I will change its radius to itself divided by 2 so if the radius was 60 then new radius will be 30 and if if the break is not big enough we were just deleted cool and now if we save the code and run the code again we should be able to see the break will become either smaller will be destroyed when it got hit by a ball hmm it does look very weird because the ball doesn't change its direction when it hits a break so come back to our work hold here we're saying if the ball hits a break the break will either become smaller where it will be destroyed and also the the power should change its direction so here we will also say about direction Y multiplied itself by minus 1 and let's save the code and you we run the code again so now when the ball hits a break the ball can bounce off great yes okay we're almost there bear with me the last step is to add some logic to this game in this game if the ball goes below the canvas the game should be over and we'll all those bricks are destroyed the player were win this game so in the sketch ideas we will have two more variables cut for playing game and it will be false at first and VAR u wing will be false and here when people press us on the keyboard the game should start so here I was in the key press function I would say if key because to us or capital s I was sad playing game true and I will also reset to you wing back to false to here the other thing we're going to do is to check if there is any breaks before we start the game the reason that we are going to check this is because even though we create 20 blocks at the very beginning but if the user destroys all those bricks and the game will stop and then if I press s again there won't be any breaks so here I will also say if breaks the length equals to zero I will create 20 he breaks objects and then push it into the bricks away so I were to break stop push new break so in this way we can make sure if there is no break we were create 20 more break anyway I need to wrap this in for loop in this way we created twenty new break break objects if there is no break anymore so so here if the user press s we will start again and at the beginning if user if playing game is false we're not going to move the paddle where the ball so here we're going to add another condition saying if playing game is true and were updated to the paddles position and if game over if if playing game is true our check paddles edges otherwise I won't if game if playing game is true I will update to the boss position if game playing is true our check I just for this ball otherwise I want to do anything to move the paddle or the bar so in the draw function if the ball goes below the canvas the game will be over so playing game will be false and also we are going to move the ball back to the center of the canvas so we will say if Bob position that Y is more than height playing game will be false and we were same bad position because to create factor with / right / so in this way we move the ball back to the center of the canvas and also if there is no breaks on the canvas anymore that means you win this game so I will also check if break stylus is zero if this happens you win it's true and I were also and also and and I will also stop the game so playing game is false cool so now let's show some text on the canvas when player wins the game p5 has another library copy fight Adam that can do a lot of Dom manipulations kind of like a jQuery we already includes this PFI Dom library in our index.html so now we can just use peer item to create pain HTML element so at first we are going to have a variable called wind tax that holds our text that holds our text and I will have a function called create text here I would say point ax equals to create P you wink and this creates P function is from PF item it will create a HTML P element and also we work if this HTML element position the position equals to width / 2 height minus 50 and 80 and at first your wing is false and we are going to hide this tap text we're going to do it later and in the discipline in the draw function we will say if your wing is true we were going to show the tax and if you win is false we're going to hide this text so with pivot on library we can just say win tax dot style DISA play if you want is true we're going to show it so it should be block and if you win is false we are going to hide this tax so we win tax that style display no great so I think this is the end of our code and then let's save the code and to see if it works okay can now raise property Y of undefined 44 now position its paws and this is positive okay so now can have a proper taste I often define 57 oh because we didn't call this create tax function so here in the setup function we're also going to call create text to create this text first and then in the draw function we were hide or show this text depending on the variable you win now if we refresh the page we will see this game and the power stopped at the center of the canvas and so when I press as the power start moving and the breaker becomes smaller will be destroyed by the ball and this it will take a while for me to win this game yes okay so now if you win this game the you win text will show up on the canvas okay awesome this is just a basic version of the game there are a lot of more things that you can do to improvise you can create different kinds of breaks you can add colors and animations to the ball and to the brakes you can also add some the effects on interactions you could also design difficulty levels and rewards for example you can make stars for them when a break got hit by ball and if the paddle catches the star the squirrel will increase and the github with me there is a place for you to link your version of the code a feel free to submit a pull request to share your game with me thank you so much for watching bye bye you