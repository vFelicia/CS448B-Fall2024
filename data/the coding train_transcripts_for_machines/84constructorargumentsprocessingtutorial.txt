Okay, hello. Where are we? Let's take a look. We have gone through a lot of exciting trials and tribulations. All for the sake of having a gray circle flowing up the screen. You know, what can you do? You will eventually do something much more exciting than this, But I will live my life in this strange room with a green screen and a little circle that floats up and down. Oh well, that's the world I live in. Anyway, um, here's the thing we want to have more than one of these That's the point. That's where we're really... We're getting... we're going to go you know videos from now where you get to this point... am I recording right? Where we get to this array. So now when we have thousands of bubbles on the screen. That's we're going to go, but right now we have a simpler goal in life. We just want to two. Just any two bubbles. So how could we do that? Well we know one way we could start to do that is by saying Bubble b1 and Bubble b2 let's Say b1 is a new bubble and b2 is a new bubble And then all those functions that we did for b1, for the first bubble. Let's do them for the second one. Now you probably can already imagine in your head What's about to happen when I run this two bubbles... two bubbles... two bubbles... one bubble. Now, truly there are two bubbles there. There are two bubble objects. There are two ascending, there are two displaying, there are two hitting the top. But they are the identical bubble. So they're on the same spot. They're moving at the same rate nothing will change We need a way of introducing variety. How can we make two different bubbles if the code for the bubble is the same for every bubble object... How can it do something different? Well... There are several different ways we could approach this the first simplest way is to say well we could, we could do something... we could have them move differently Randomly, we could introduce random. So let's just go into here for a second what if in the ascend function in addition to y going up I said x equals x plus a plus some random amount Now let's run this code again. We can see there are two bubbles there. They're moving up together. They started in the same spot, but they're, they have a little sort of random motion along the xaxis. So there. I don't know how much those look like bubbles or balloons or whatever I'm making but actually a balloon simulation is kind of an interesting thing to do. But I'm able to do a bit about that sometime. Okay anyway, so this is a good first step. We could just vary the way things happen. We could have some kind of if statement that based on some interaction with the mouse or something random. This is step one, but what I want this video to be about which I have to admit is probably one of those sort of this is going to be a hard one i just probably... it's going to not go very well but We're going to make it and we've been going for like 4 minutes already. So we're going for another 3 minutes and then you're done. We want the bubbles to be... to start different. We want to be able to say make a blue bubble. Make a big bubble, make a small bubble. We want to do it this way. We want to be able to say make a bubble with the size of 64. Make a bubble with the size of 16. Let's just start that off to start. We want to pass arguments into the constructor. Now, we know about passing arguments into a function. We pass arguments into a function and let's think about that for a second. Let's we don't need to get this Let's just make up an arbitrary function for a moment. Some function... void doohickey float blah and here's the function right if we say doohickey 160. This value 160 goes in to the variable blah and blah Is a local variable that can only be used in here, so we might do something like fill blah We are using, we're initializing the variable blah which is the argument and using it inside this function. We want to do something very similar here. We can see this is similar doohickey 160. We're saying bubble 64. So it's got to be similar, but what does the constructor look like? Eraser is gone. It's gone. Oh wait, it's over here. I found it, ok. Okay, so what does the constructor look like? This is, this is, this is hard. It's not hard actually but it's, it's weird. And it's awkward and lots of people probably say it's Java, Processing, all these programs are horribly designed because of this weird thing I'm going to show you. Okay. This is what the constructor looks like. The name of the Class Bubble Open parentheses, close parentheses, open curly brackets, close curly bracket. Right now it says things like x equals width divided by 2 y equals height. What if we want a third variable to be initialized? What if that third variable is called diameter Diameter equals something and so here is what we need. This is, this is where we're going with this. So first Let's just put that variable into our program. We need another variable called diameter. Diameter is going to equal something. Which I'm going to say is 64 right now, and then we're going to use diameter in a couple different places. It's the size of the circle and it's also telling us... Where to stop, as the bubble floats up to the top? So you can see now. This is the sort of... the way we've done it before. x is initialized, the width divided by 2. y is initialized with height. Diameter is initialized with 64, but here... we're saying new bubble 64. We are saying can I fit over here? b1 equals new bubble 64. We need this value to go here and somehow get down here to get assigned to diameter So in this case a constructor with arguments. The arguments of the constructor become this sort of like hand off layer. That... this like... we're going to put something... I'm gonna call it float I'm gonna call it temp D. What it is, it's just a variable. tempD is like sitting there and saying okay, okay, okay.. give me the value, give me the value. OK I got the value. I got the value... here you go diameter, right? It's only job is to take this value 64 And then we're a diameter equals tempD. It hands it off immediately to this variable because this variable diameter is the one that really matters. It's the one up here. It's the diameter. That's the thing that we're actually using... To set the ellipse's size and where to stop. It's quite important. That's the variable we want to set. Now... I imagine one... Let's just put this in there.. Then we're going to come back to the weird that you're imaging that you can make this so much better. Yeah, I know you could. You could. Everyone could. Nah, I couldnt. I can't. I, I'm stuck. I only live. This is the life I live. I just, it's the way it is okay, so um Where are we here? We're going to add float tempD? tempD And... the value comes in to tempD and tempD is used to assign the diameter. We're giving one 64 and one 16. Let's run it. There we go. We can see we got a little bubble and a big bubble. A little bubble and a big bubble, okay? And they're moving randomly still but they have different sizes they were assigned here. We say make a bubble with 64, make a bubble with 16. So... I don't know if I should even mention this. Maybe you should... maybe I should just stop. Quit while ahead. I don't think I'm ahead. Quit while I'm not so far behind? I don't know... But you probably imagine why couldn't you just put diameter up here? Why couldn't you say float diameter and somehow that would be the variable? It just this is not what arguments are. The variable that is the variable for the class is the thing that's defined at the top. Arguments are local variables only to this function. Because we want to use diameter down in display we can't make diameter an argument to bump. To the bubble constructor. Instead we got to make up some temporary thing. It's only local to here. It receives it, passes off. So if you put float diameter in here, then you're making diamter only a local variable to the constructor and you can't use it and display anymore. This is just the mechanism we're offered. The mechanism we're offered is we have arguments... We can give something to an argument... we want to fill this variable... I know let's have the argument receive the value and pass it along to that variable. That's just the way it is. So this is just what... Pandora's box is open. I don't know... That's not a Pandora's box. I don't... Maybe.. Can of worms. Are there worms coming out of the box? I'm not sure, anyway the point is now You could start to have... this is what the exercise you should do. That has something to do with a box being open or something... Let's really go crazy with this. What if you want to make a bubble that gets an x a y... a size, a color Right what... let's try to create bubbles with lots of different parameters. Maybe four or five tops. Work on this code. See if you can make different bubbles try making three bubbles. We're almost there actually I think this wasn't so bad. Was it that bad? I don't... It was... Okay So, but this is something you should try. I don't know, I dunno know. I'm just looking at this and thinking about how that Brett Victor post where You know you don't know what any of these arguments mean, but you know we have to live with this I guess it's what we're using right now. Hope someone will cut this video off a while ago That's your exercise. So um there's a bunch of just tons of other stuff with objectoriented programming and There's going to be a few more videos about how to have Objects talk to different objects if you want to see what these bubbles collide with each other. We are going to do a video about that. I want to do something about using push Matrix and Pop Matrix in an object for transformations something about Just really rambling at this point. They're just waiting... now I'm just waiting for the camera to cut me off I... There was another one. those can be really good objects Communication. Oh objects as data to other objects, right? An object has data in it But it doesn't just need to have primitive... very... you know an object could have other objects as part of its data. There's a whole lot more to object oriented programming. There's inheritance... it goes on and on this is just a little beginning. I can't believe it hasn't cut me off yet...