hello welcome to another video tutorial this is part of session s programming from A to Z and I'm all these videos are about grammars specifically context free grammars so today I want to talk about a particular uh grammar generation library for JavaScript called tracery tracery tracery is by Kate Compton at Galaxy Kate on GitHub It's a Wonderful project it allows you to be really creative with generating text generating stories making a Twitter bot um just by putting together a bunch of possibilities in a way uh a grammar so to speak so um first I'm going to show you an example um this is actually um this is called once upon a time stories It Is by a 5yearold and an 8yearold who happen to be related to me they're my children and they didn't write the code for this but they wrote the grammar so I'm going to uh just generate a story and read it to you once upon a time there was a princess and that princess was very happy and the princess liked hamburgers the princess was very jealous then the princess meta lovely sad chupacabra and she killed the chupacabra Yahoo and then the princess ate the burrito and she was so sunglasses and she was heart eyes too today I don't know let's generate another one oh there's a princess again ah Dragon okay once upon upon a time there was a dragon and that Dragon was very angry and the dragon liked shrimp so you can see this is one way of using a grammar likee tracery to generate and there's a little bit of like color and emojis and stuff going on here but to generate text so let me just look into the code for this for a second so that I can point out to you what the grammar actually oops I'm in the wrong place what the grammar actually looks like so this is what the grammar actually looks like and the grammar is simply a JavaScript object and remember if you watched my first video about context free grammar everything is about production rules take this and replace it with this and if you have this replace it with this and if you have this replace it with this and you got to start with something so if I come back to here you're going to see here there is a start now there's some strange syntax there's a hash symbol and a bracket colon and a character there's a story there's characters but you can see there's a selection of food options a selection of monster options that sort of thing and I should point out to you one thing you'll notice by the way is you can in JavaScript if you want to have emojis you can just stick emojis and they are read just as text like anything else I mean they're how they're interpreted and displayed depends on what the environment you're living in and but the Unicode charact the characters themselves uh um um are there for you to use okay so okay so let's make our own let's let's make our own tracery grammar and and then we'll come back to this one okay so what am I doing here I want to go to my example which is over here this is some blank code I'm going to go here make sure it's running great so the first thing I need to do is get that tracery library and tracery as a library is just this Javascript file tracy. JS so I'm going to um grab this file and I'm I'm going to do something silly which is just copy I could download it I'm just going to copy paste it into a new file uh which I'm going to call a tra I guess I could have done this not in the video tracy. JS I'm going to copy it there and then I need to make sure if I'm using another uh JavaScript library that I want to make sure that I um also reference it in the index.html file so just like I'm using on jQuery so it uses jQuery behind the scenes so I also should make sure I download and grab jQuery so I also have a reference to jQuery here one thing I'll note by the way is that you can reference JavaScript libraries either as local files like I have a local copy of p5.js here in my folder but you can also reference libraries through something called a CDN or content delivery Network meaning if it's a really popular Library somebody might have just hosted it somewhere instead of having to download it I could just reference URL and you know there's good reasons for doing one or the other and I'm kind of mixing and matching here but I just want to get stuff working so now I should have the tracery library and the jQuery library and I'm ready to start making stuff happen with tracery okay so let me at least just go here back to my uh example and where wherever that is I lost it here it is I'm hit refresh um and I'm going to go back to my code and what I want to do is start writing the grammar so I'm going to make a variable called and let's make it a story and what I need is to have now tracery by default looks for something called start so I'm gonna you don't have to name it start but I'm going to call it start and I'm going to say start is and and I'm gonna I'm going to need the chat by the way to start giving me ideas for story things but I guess I'll just be making this up as I go right now um it was a dark and stormy night so now if I have this JavaScript object which essentially holds the grammar I should be able to make a variable called grammar oops I misspelled grammar AR okay so I'm going to have a variable called grammar and I'm going to say grammar equals equals Tracer do I think create grammar uh story boy I don't actually remember if that's correct so one of the things when you're working with a JavaScript library is you've got to look at documentation so I'm going to just go back to the um uh GitHub page for tracery and just to like kind remind myself uh yes tracery doc creat grammar Spellbook by the way if you're looking for an idea certain things like a cooking recipe or a spell book there's a wonderful Twitter bot called art assignment bot I don't know that it uses a grammar but these kinds of um highly structured um types of narrative scenarios can work really well to have a grammar generate um different possibilities I'll also show you at some point that you can use a grammar to generate um you know houp patterns or certain patterns of certain Sy aables it's another way to use a grammar grammar okay so uh Tracer doc creat grammar story perfect so now I want to look at the result and I'll say uh I'll say VAR result equals grammar. flatten so again why the word flatten so there's two words that involve generating text from a grammar one is expansion and the other is flatten so this is the idea of an where am I here this is the idea of an expansion right I'm expanding out from the sort of start and you iteratively applying these replacement rules now trer behind the scenes or any grammar system is probably keeping track of the entire tree that's being generated but all I want is the end result so I want to flatten it and get the end result and that's what's happening over here so I can say uh console.log result and if I run this uh come back to my example uh that didn't work now I thought it would automatically use start maybe it doesn't so I'm going to to um add this in there and I'll oh yeah okay the point is what I want is to give that Axiom that seed phrase start in um I want to pass that to the grammar and the grammar the the grammar object the Tracer grammar object is then going to expand it out based on all those production rules now right now and you'll notice that the Syntax for tracery specifically is a nonterminal element is wrapped in the pound our hash symbol so this means please replace me as opposed to the word start um and so if I did something like this we would have a real problem because this would kind of generate to Infinity I almost want to run it to see what happens I do let's just do it what's the worst thing that can happen maximum call stack receive so you can see that this idea of replacing but what I can do is say it was an and I could say adjective and then I could add another rule adjective um some possibilities are uh it was a dark shout out your adjectives in the live chat that's going on right now dark sleepy somebody wrote uh it was uh um quiet so right if I give all these adjectives now now I have two nonterminal characters uh elements I should say they're not characters start which generates this sentence um adjectives which has three possibilities and so now if I run this you can see it was a sleepy and stormy night it was a sleepy it was a dark it was a sleepy it was a sleepy it was a quiet so each time I refresh I get a new possibility okay so this is level one here of using a tracery grammar and even this is like plenty to play with couple one thing I should mention is that each one of these has a one out of three chance of being picked and another reason why you you might use a system or you know modify Tracer you know think about programming your own sort of grammar generation system uh from scratch is you might be interested in playing around with those probabilities what if it's 60 but of course I could do that also right here by just now I've played with the probabilities that dark has a 50% chance of being picked where sleepy and quiet only have a 25% chance of being picked okay so let's write a story with a character and what I'm going to do actually I'm going to do something different is I'm going to say I'm going to have a story um a uh and I'm going to just use the same kind of story that my uh children wrote last night which is a and I'll call it a hero a hero fights the monster go hero go but what I want is for this hero to be picked so what I um and I'm running out of space here so let me open this up a little bit what I want is what so so let me give some options for a Hero and I'm going to say uh dragon unicorn uh rainbow these are the possible Heroes okay so the story is a hero fights the monster go hero go so what I'm going to do now is I am going to change this to story so I want to flatten starting with story and I'm going to hit refresh a dragon fights the monster go dragon go so that's good a unicorn fights the monster go unicorn go well this is kind of working by accident a rainbow fights the monster go dragon go so you'll notice here what I haven't done is secured that I pick the same hero both times so you know in the sort of mad lib's way of thinking about this sometimes I want to have a different adjective so I could say a adjective hero fights the adjective monster and so in this case right refresh a sleepy unicorn fights the dark monster go unicorn go go a dark dragon fights the quiet monster go unicorn go so I do want a different adjective I want a random adjective for the hero and the monster but when I say hero I want to get the same hero twice so one of the wonderful things that tracery has is it has a mechanism for you to assign a uh production rule essentially like almost have like a variable that holds something that's picked in the grammar over time across the entire sentence that's story that's being generated so in that sense what I can here is I want to I want to start with start and what I want start to to render so to speak to expand is the story so start expands the story which is this so this should be the same I'm just getting these little stories here and now though what I want to do is put in here bracket I'm going to assign hero and this is the the hero actually is going to come from this list so I need to give this list another name um the this is uh let's just call this characters hero character so what this does it says render the story with a character being picked as the hero so first it will pick dragon unicorn or rainbow assign that to hero and then use hero throughout there so now as I render this you can see a dark rainbow fights the Sleepy monster go rainbow go a dark unicorn fights the quiet monster go unicorn go so this is basically it um this is how tracery Works um you know I could keep going and it would be sort of like an interesting experiment maybe what I'll do actually is we could create on GitHub some type of collaboratively edited grammar if I I publish this example maybe I'll include a link to the grammar in um in this video's description if people want to contribute to it because really the creativity Now lies in how far can you go with this how long can you make the story what is it what is the story how what types of other things might you assign and pick randomly or assign in advance but I I just want to show you one other thing um there are um also tracery also includes modifiers so for example if I put s here um I can s will pluralize whatever uh uh character is picked so this isn't going to make a lot of sense but you can say as sleepy dragons fights the Sleepy monster go drag and go but the reason why this is a nice quality is I don't have to include you know a a particular rule that that's like plural character or um I don't have to like include dragon unicorn rainbow dragons unicorns rainbow so there are a bunch of modifiers um I can also use I believe capitalize um is a modifier that's built into tracery which will uh capitalize the particular word so if I'm picking that hero and putting it at the beginning of the sentence I can always make sure that the grammar generates in such a way that that word is capitalized and if you look through the documentation um I believe here we'll find also some um uh probably there'll be a list of modifiers um okay I also should mention here by the way right one thing you might look at is under here there are many new examples of Tracer in use and I also have an exciting new interactive tutorial so I'd also encourage you to check out this torial tutorial excuse me which allows you to sort of type the grammars into these boxes and hit reroll and see what kind of possibilities you can get and the features are uh kind of explained through the various um various possibilities here um okay so there's so much more here that I want to look into that I haven't so maybe someday I'll come back and show you some other additional Advanced so to speak features of the Tracer Library so this example will be published for you I encourage you to write your own grammar um of course you can use emojis as possibilities as you can see and and we can go back now by the way I might as well go back just to return to the beginning of this video and show you now the code which um we can see here that this now we can understand how this works that this story starts with a hero picked from a character a villain picked from a list of monsters and then the story is once upon a time there was hero. a which means a hero it's always going to modify it with a and that hero was very adjective and the hero liked food and the hero was very adjective and then the hero met an adjective adjective villain and she killed the villain exclamation and the hero ate the food and she was so adjective that she adjective that she was adjective to today and if I go back to uh this we can generate One More Story thank you uh once upon a time there was a bear and that bear was very funny and the bear liked ice cream and the bear was very pretty then the bear met a happy lovely dinosaur and she killed the dinosaur monkey face and then the bear ate the acorn Walnut I don't know what kind of nut that is and she was so smart and she was green heart jealous too today okay so thanks for watching this uh video on um tracery um if you make something with tracery please uh thank uh Galaxy Kate on Twitter I would say or contribute to the tracery project or support it in some way um and and I and I look forward to um hearing what you think and what you make and in the next video I'm going to look at uh the read a library with uh context free grammars oh oh before I leave you can also use tracery as a node package so maybe someday I'll return to that but you can npm install tracery um and there's documentation for that on the tracery GitHub as well okay thanks and see you in another video sometime