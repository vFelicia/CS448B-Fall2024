[WHISTLE BLOWS] Hello, and welcome to another coding challenge. Ooh, I'm excited about this one. In this coding challenge, I'm going to attempt to make this fern, the Barnsley fern, named for the British mathematician Michael Barnsley. I encourage you to read this Wikipedia page, which will give you more background on it. What I'm going to do is just look at the algorithm and try to write that algorithm into code and see if we can get that result. And then you, the creative viewer of this coding challenge, will make your own version with different colors. And you'll think about animating it and do all sorts of things that I couldn't possibly even imagine. So what is the algorithm here? So if we look down here, I'm just going to skip down down here. It says, the first point is drawn at the origin x equals 0, y equals 0. So what this means is we need some sort of twodimensional space. It could be a processing canvas. And I want to start at 0, 0. Now, I'm going to think of 0, 0 in the center here, and I'm going to have to probably figure out some ways of of well, the pixels are here, and then 0, 0 on the pixel space is here. But I'm not going to worry about that right now. And then, what's the next step? The next step is and then the new points are iteratively computed by randomly applying one of the four following coordinate transformations. And here they are defined. Now this is the kind of stuff that you might see and think, ah! OK, I'm going to go do something else. This looks like matrix math and linear algebra. But this is actually first of all, if you watch some of my matrix videos, this is going to, strangely enough, make sense to you. But let me actually show you that this math is actually quite simple. Let's use just this second one, and let's rewrite this over on the board. So f of 2 x comma y equals so I have to go back and check it. [LAUGHTER] 0.85, 0.04, 0.85, 0.04, negative 0.04, negative 0.04. I should have made up my own numbers 0.85, 0.85. Then we have x, y oh, no, I'm running out of space. I'm running out of space plus, I can fit this in. I can fit this in. You can see that. 0 and 1.6. What does this mean? Well, this is actually the matrix multiplication or the dot product. What it means is I want to find the values. If this is x1, y1, what I want to get is the next values for x. So I have one point, and I want to know where does that point go? What's x2, y2? So this being x2 equals this number times that, 0.85 sorry, times x1 plus this number times that. The row gets multiplied by the column, 0.04 times y1. And then plus this number, plus 0. And then y2 then equals negative 0.04 times x1 plus 0.85 and my handwriting's terrible times y1 this column times this column plus 1.6. So it's really just this formula. If I have an xy coordinate, I get the next xy coordinate with this math. And we can just double check that this is right. Look at that for a second with my horrible, messy handwriting. And then, let's go down here and see. Look at this. It's the same thing. The next x is this number of times the previous x plus this number of times the previous y. And the next y is this number times the previous x plus this number times the previous y plus 1.6. So we just need to do one of these four, and each one of those four we do according to a particular probability, right? All right, a, b, c, d, e, f. I could have written it this way. That's the generic way of writing it. So all right, so let's go back into let's start writing some code. All right, so I have a processing sketch, a javabased programming environment with a nice API for drawing stuff, and lots more, processing.org. I am going to say background equals 0. I'm going to have an x and a y. I'm going to set those to be 0 to start. I'm going to draw, I'm going to say, stroke 255, stroke weight, stroke weight sorry, stroke weight 8. And then I'm going to draw a point at x comma y, OK? And then, what I need to do is get the next value. So next x equals some number a times x plus b times y plus c. And actually, so let's just use these numbers here. Let's just copy these 0.85, 0.04, 0.85, negative 0.04, negative 0.04, 0.85. And next y is negative 0.04, 0.85, 0.85 plus oh, this is very tedious 1.6. OK, did I get that right? This is positive y. All right, ha! Ha! Ha! I must line all of these things up, ha! No, what's going on? OK, everything's fine now. [EXHALE] Breathe, everybody, breathe with me. So this is applying that particular transformation. And then, I could just say x equals next x. y equals next y. So what if I were to do this and run this? I don't get any errors, but I do see this circle over here being drawn. So here's the thing. I'm only applying one of those transformations. I need to pick one of four. And I also am not thinking thoughtfully about the pixel space. So I need to do a mapping, right? x with pixels goes from 0 to 600, 0 to 600. But maybe I want to think of this as a space between negative 1 and 1 and negative 1 and 1. So what I want to do is say, when I actually go to draw it, pixel x equals map x, which goes between negative 1 and 1 to 0 and width, and pixel y between negative 1 and 1. And I'm going to flip the axis, height comma 0, and then I'm going to draw the point at px py. Let's run this. And then, ah, and then I only want to draw the background once. And we can see. There we go. So if I apply that transformation over and over again, we can see the point going up that way. Now, is that right? [DING] That looked weird to me. This has to be y. Yes, this needs to be y. I was mapping the x value. I was like, why is it all right, so all right, it's not moving very much, but that's fine. I'm just applying this one transformation. Let's look at the values just to see what those values are doing. And we can see, there we go. Now, it settled. Interestingly enough, it settled to a fixed point. Hmm? But here's the thing. We need to do one of four transformations. So I need to do the tedious thing now. Now, I could probably write the code these into arrays and automatically. But I'm going to do this in a very longwinded way just to see the code. I'm going to have four of these possibilities. So this is actually number two. I need to have 1. I need to have 3, and I need to have 4. And I probably should put these in a function, but oh, there's just so many ways I could organize the code to be better. But I'm going to just do it this way right now. And maybe I'll refactor it later or I'll let you do that. So let's go back and look at the algorithm. This is just 0 and 0.16 times y. So this one is actually just 0, and this is actually just 0.16 times y. That's option number one. Option number two we did. Option number three, option number three is 0.2, negative 0.26, 0.2, negative 0.26. And then 0.23, 0.22, 1.6, 0.23, 0.22, 2.6. Was that what it was? 1.6. And then option number four is negative 0.15, 0.28. [LAUGHTER] You really watching me do this? Negative 0.15 and 0.28. That's not right. Yeah, it is right. And then 0.26, 0.24, 0.44. 0.26, 0.24, 0.44. Let's auto format all this. Now, this is the really important part. I need everything to line up. It's not lining up the way I want it to. Help me line up. No, no, this plus has to go here. This has to go there. That's OK now. This is OK. That's fine. That's fine. OK, it's fine now. Everything's OK, everybody. Oh, wait! No, no, no, no. I need a 0 here. I definitely need a 0 there. OK, what's wrong? Oh, no, no, these have to go over because there was no negative there. Oh, and this has I don't like this. This has to go over too. Yes, yes, this has to go over there we go. OK, that's much better now. Now, the other thing is I'm just going to say float next x, float next y. And then I'm going because I just want to declare the variables once, I'm going to get rid of all of these. Yes, you're watching me do this in the most tedious, ridiculous way possible. But it's good. This is good for you because, even in your frustration, and like, oh, arg. You're going to improve your coding skills by doing it in a different way, by watching me in my poor, poor, poor way of doing this. OK, so this is good. Now, I need to now, I'm going to pick a random number, and I'm just going to say I'm going to just do this. If r is less I'm going to do a one out of four chance for each of these. If r is less than 0.25, do this. Otherwise, if r is less than 0.5, do this one. Otherwise, otherwise, if r is less than 0.75, do this one. And then otherwise, do the last one. So now, I'm just doing a one out of four chance of doing any of these. OK, all right, so let's run this and see what happens. We're not going to get the fern, but we should ooh, look at this. I'm getting something. It's just look at this. Oh, it might even be tree like. So one thing I want to do is I want to pick the I want to take this, which is sort of like next point. And I'm going to put that into its own function. Next point because I'm probably going to want to also do this. Oh, and then I'm going to take this and draw a point. And then because I might want to do these multiple times in draw, so I think just and I could probably do this in an objectoriented way. I should probably store an array of all the points. But let's just look at this. So now, let me let this go a little faster. So let me say do 100 of these transformations per frame. And we can see and by the way, 0, 0 should be at the bottom, I'm now figuring out. So I'm going to put 0, 0 at the bottom. So I'm going to map this from a 2 down to 0, right? Oh, well, I did that no, 0 to 2, I mean, 0 to 2. There we go. So here's my weird tree thing that I'm making without being thoughtful about those probabilities. Let's go look at the Wikipedia page for those probabilities. And you can see they're actually right here in this table. So this table is actually defining all of those coefficients, and here under p, probability. So we have a 1% chance of the first one, 85% chance of the second, 7% chance of the third, and 7% chance of the fourth. So I'm actually going to put this I'm going to amazingly do this in an array. Well, actually, so let's think about this back here. There's 1% chance of this first one, so I know that should be this. Now, I want to have a 85% chance of this second one. So now I actually need to look and see, is it less than 0.86 because, if it's less than 0.01, that's a 1% chance. And between 0.01 and 0.86 is 85%. Then I need to do less than 0.93, right, because there's a 7% chance of this third one. And in all other cases, the fourth one. So let's look at this now. And are we going to get a Barnsley fern? This is looking pretty good. Now, everything's way off the screen, right, because I wasn't I was like, oh, I'll just make it between negative 1 and 1. But you might have noticed that everyone in the chat is telling me, plus 1.6. So clearly, the point can go further than that. So let's give ourselves some more space. So where are the mappings? The mappings are here. Let's go from 0 to 4, and let's try negative 2 to 2. And let's make the stroke weight a little bit less. Let's give ourselves much more space. Ah! Look at that. Beauteousness. [DING] [WHISTLE] The Barnsley fern, that looks about right. OK, so I'm done, even though I want to do so much more. But I'm not going to. I'm going to let you do more because how could you animate this? How could you pick color? How could you consider the space? How could you connect the points? How could you render this in a different way? There's so many possibilities. But I'm going to leave this at this. I've just done the core algorithm, and we have this Barnsley fern. And by the way, you can see here. There's variations of this. Why is mine different than this though? So first of all, I'm discovering here. This is actually giving me the correct range, so let's actually do this range. Let's go into the code and implement the range that was on the Wikipedia page. So a negative to there, and then 0 to let's try this. There we go, OK. [DING] So I was not mapping the proper range, so it didn't curve to the right. But now I am mapping the full Barnsley fern. Thank you very much. [WHISTLE] I really want to make it rainbow colored and do other stuff, but we have completed it. This is the Barnsley fern fractal in processing, in about 3 hours and 42 minutes. Thanks for watching this entire video. And I hope you make a variation of this in some way that I couldn't possibly imagine and share it with me. Share it in the comments. There's a way you can go to TheCodingTrain.com and submit a link to your contribution and on Twitter @Shiffman or @TheCodingTrain. Thanks, and I will see you all [KISS] in the next coding challenge. [DING] [MUSIC PLAYING]