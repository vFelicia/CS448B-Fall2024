it's 20 21. i have a new train whistle that's right welcome to the first coding challenge of 2021. i'm very excited to do this one i am going to program a swinging pendulum in p5.js starting from a blank sketch now this particular challenge this concept fits quite nicely and neatly into my nature of code playlist which has way too many videos about trigonometry and oscillating motion and vectors and forces so while you don't need to go back and watch those to follow along with this i will be building on top of a lot of the concepts covered there so uh if anything is confusing or i'll try to like refer you but you know check the video description there'll be links uh you can ask questions in the comments i'll help you along with this so what do i need to do to program a swinging pendulum well first i think i need this idea of a bob and then a arm so a line so i need an ellipse and a line great so i've got the visuals down for my pendulum now i just need to figure out oh how am i going to move it around and how am i going to have it swing i also was bothering me i want the center to be a little bit darker okay definitely going to need to do some white boarding here so the way that i'm going to work this out is that i am going to do this i mean there's definitely multiple ways that you could approach this problem and i'm also going to do a coding challenge about springs and you could take a look at that for a way of like you know i could also probably have a springy pendulum and i'll get to that when i get to that but ultimately what i want to do is i want to have this idea of an arm which i'm going to represent as a line and i can think about that as a vector and i want to have a bob which is just a circle right here and a very very important piece of information is the angle of the arm relative to the xaxis why is that the way that the pendulum should work is that i should figure out i need to calculate right the idea is if it swings it's swinging along a circular path the arm i'm talking about an idealized pendulum with an infinitely rigid arm that can never ever be stretched or contracted or broken so this distance this arm length is always the same no matter not drawing particularly well wherever the pendulum might be so the way that i go figure out how to draw the pendulum is all based on a particular angle and this is the important angle right here theta so let me actually first add that to the code like what if i happened and i'm going to use radians if you're unfamiliar with radians those nature of code play videos that i refer to at the beginning we'll cover that but let's just imagine first that i have the radians radians of pi divided by four is this particular angle uh well actually it's relative i said relative to here but i'm actually looking at relative to this yaxis to the center so i'm going to look at that particular angle and see if i can just change my drawing to have it start in the right place so i'm going to make a variable called angle and i'm going to say in setup angle equals pi divided by 4. now eventually i might want to do this in a sort of thoughtful objectoriented way but i'm just going to have a variable called bob and bob is going to be a vector and then i also need an arm length which i'll just use the variable len and i'll say that is 100. so i feel like i need to draw this again now with those three variables in mind this is the arm length 100. this is the angle pi divided by 4 i'm just going to write 45 degrees as that equivalent angle in degrees i need to figure out where is that point so i need to figure out what is the y offset from here and the x offset from here well guess what trigonometry is the answer to my prayers here if i know this angle and i know this value well sine right if this angle again is theta sine of theta equals opposite over hypotenuse x divided by 100 cosine of theta equals y adjacent over hypotenuse y divided by 100 multiply each side of the equation by 100 and x equals 100 times sine y equals 100 times cosine now you might be thinking oh that's a little bit backwards isn't x usually associated with cosine and y associated with sine yes if you look at my polar coordinates video it's absolutely true but i've kind of drawn things on their side here because i'm looking at this particular angle relative to the vertical axis rather than the horizontal axis i'm going to create a new variable for the origin point like where the arm is attached and we'll say origin equals create vector 300 comma zero like it's attached there at the top and so now the line should be from origin.x origin.y to bob.x bob.y and then the bob is at bob.x and bob.y the problem is i now need to calculate the bob position well that's why it just worked out bob.x equals the length times sine of the angle bob.y equals the length times cosine of the angle hmm that doesn't look right so why is that wrong the reason why that is wrong is these values are relative y offset and x offset from that origin point itself i just added those things to the origin point of zero zero so what i need to do here is say add origin.x and add origin.y there we go now i can make i probably want to make the pendulum a little bit longer let's make it 300 we can see and there we go all right so this is good if i have a particular angle value then i'm visualizing the pendulum correctly whatever that angle might be for example if i were to just say now angle plus equals 0.01 the pendulum is not swinging in a realistic fashion but it is swinging around you can see that angle is changing so i just need to figure out how does that angle change realistically assuming that there is a force of gravity pulling it down noticing here to get it to move i'm changing the angle by some constant value that can also be thought of as an angular velocity once again a topic that i angular motion is a topic that i cover more extensively in the nature of code videos but for right now i'm just going to add two additional variables i'm going to say angle v for angular velocity and then angle a for angular acceleration acceleration is a concept that's tied to force newton's second law force equals mass times acceleration i'm ignoring mass here the obviously mass is very important the fact that that bob has a mass to it um but i'm going to kind of just assume its mass is one as of now um but so i could simplify newton's law and just say force equals acceleration so the idea is the gravity force will somehow go into the acceleration which will then alter the velocity so the math here would be the velocity changes the angle and the acceleration changes the velocity so if i were to just add a little acceleration value here we would see it's going to start it's as if i'm swinging it around and around and around and around but i need that acceleration to be related to the force of gravity itself so back to the whiteboard let's figure that out the force of gravity can be represented as a vector pointing down at least in the world that i'm deciding to visualize it's a flat world where gravity points down i can think of the force of gravity just as a constant uh i'll make up an arbitrary number obviously in the real world there are actual units of measurement that are quite fundamental to the laws of physics but you know for right now i'm this is going to be some arbitrary constant i saw they're going to be really strong really weak to um in the um in the actual simulation that we eventually create you know but maybe for now it's going to be what why doesn't the bob just fall to the ground well it doesn't because it's attached it's attached to this arm so there is a force a tension force of the arm that is keeping it from just falling down and there's so much more to how this might work in terms of tension and maybe torque and all sorts of other factors that we could bring into this ultimately the way we can work this out is to make a nice right triangle right here out of this particular force of gravity where the right angle is relative to the axis defined by the arm of the pendulum so in other words you know i have before i was making this right triangle up here to figure out where to position the bob now i'm making another right triangle to take this force of gravity and separate it into two components what are those components there's this component here which we can think of as the equivalent force holding it locking it in place uh not in place but um to its sort of swinging path the arm itself and then this right here is the angular acceleration the sort of component of the force of gravity that is applied to the swinging of the pendulum itself and guess what look at the way that i've drawn this right over there this angle theta is exactly the same angle as this so this right here is what's known as the pendulum force force of gravity this component of this right triangle is the force of the pendulum and let's go back to our trigonometry formulas sine of theta equals opposite the force of the pendulum divided by hypotenuse the force of gravity and therefore force of the pendulum equals sine of theta times the force of gravity which i have just by the way mentioned is just a uh constant what number that i can make up let's see what happens if i take this exact formula and apply it in code the force of the pendulum equals and i'm going to make gravity a constant gravity times sine of the angle then i'm just going to say angle of the angular acceleration equals that force now look at this whoa it's kind of going crazy why is it going crazy we have to remember this is not anything close to resembling the real world this is a canvas in javascript in the browser uh that's everything is a flat world measured in pixels so while the and the force of gravity the value one is a really really large number to ultimately start applying to an angular acceleration so let's go back and play with that number and make it much much smaller oh look it's kind of working but what's going on it's flying in the opposite direction whoa this is going kind of crazy this always happens right because though in in in the sort of typical mathematical diagramming of things we have a cartesian plane the yaxis points upwards zero one two three four five but in a computer graphics p5 canvas zero zero being in the top left y points down so i think i've got things flipped sorry sorry sorry i have to interrupt uh this is dan you recognize me uh because i'm the person in the video you're watching but i'm i'm coming to you to issue a correction i was after recording this video i've been looking around at some of the past material related to chapter three and i found some comments on the internet and i found out that i've been kind of making a mistake in the way that i've been describing the pendulum and i want to issue that correction here in this video what i was just discussing is why i need to add a negative one why do i need to multiply this formula that i derived the force of the pendulum equals the force of gravity times sine of theta why do i need to make this negative 1 or negative 1 times this and i was kind of just going with my usual shtick about how well it must be because y points down and p5 and y really points up in a cartesian plane but that's actually not really the case here the point of confusion is much more about the way that i'm looking at this angle relative to the yaxis so let's look at this usually like if you go back to my polar to cartesian video about those polar coordinates you'll see that yeah i talk about an angle and it's relative to the xaxis and that's much more typical but here because the angle is relative to the yaxis as the ang as the pendulum extends outward the force of the pendulum is negative sine of that angle so that's really why it just has to do with precisely the way that i'm drawing this diagram right here with the angle relative to the yaxis and while the force of gravity is pointing down causing it to accelerate back in this direction which is causing it to spin quite out of control so i think an easy uh fix to this is to just um add a negative one and we can see now it's swinging back and forth now uh oh oh my god it's ringing faster and faster and faster that doesn't seem right sorry hi um you're not going to believe this here i am again a different saint dan different time actually almost a full week later i've been working on this pendulum video it's been such a journey but i figured out with the help of the coding train members in the discord a couple things about this pendulum simulation that i never actually understood before right now and i'm really excited to share those things with you and sort of just finish off the last few minutes of this video with some new found knowledge first this spinning out of control why is it doing that well this happens in a lot of physics simulations where a system can be very unstable and there's various reasons for that i talk about euler integration as one of the reasons but actually i have a very subtle but unbelievably significant error here in the order that i wrote this i am calculating the angular acceleration based on the angle then i change the angle and then i change the velocity based on that angular acceleration there's a issue there's a threestep process here calculate the force update the velocity according to the force update the position according to the velocity and i have done that out of order here all i need to do is do this in the proper order where as soon as i calculate that angular acceleration based on the current angle then i apply that to the velocity and that velocity is what applied to the angle i don't change the angle based on the velocity from the previous time before the other position it's all out of whack so now if i run this again we'll see that this pendulum there are definitely inaccuracies to this due to the large time step of my p5 simulation but it is a much more stable pendulum here there's another aspect to this that has been a breakthrough in my mind that just just literally happened in the last 10 minutes which has really bothered me for a long time in the way that i position this example the pendulum example in the nature of code book itself after all i spent two entire chapters talking about vectors and forces as vectors and moving mover objects around a canvas in a twodimensional space according to their xy position and the xy vector of their velocity and acceleration and then all of a sudden i say ah never mind about that let's just work on one angle angular acceleration well in the case of a simple pendulum right this idea of this sort of idealized pendulum that has no friction and like the rod is like massless and there's just this bob it kind of is a nice case study in working with angles so i think that's why it makes sense but i kind of never really understood something about it which i want to get into right now so what is that thing so there's a big missing piece here and i think that i could demonstrate it to you briefly for a second let's take a look i'm going to give myself more vertical space to work with and put on auto refresh and then i'm going to try just playing around with this arm length variable let's make it uh 600. all right that seems kind of weird right that doesn't really feel right well let's make it 60. oh that's kind of right what's going on here why does that not feel right when it's longer but it feels more right when it's shorter if it's in between what's going on if you look at the derivation of how the angular acceleration of a simple pendulum is calculated i will refer you to two wonderful websites that i'll also put up on the screen right now that have more detailed explanations what i'm giving you right now you'll see the angular acceleration which i could sort of say like theta acceleration is equal to the gravitational force times sine of the angle divided by r r being this arm length why is that after all the force of the pendulum is equal to the force of gravity times sine of theta i've worked that out just previously like in the video you were just watching just now so why does that change that force of the pendulum is the same well that force of the pendulum is the same and if i were looking at linear acceleration in terms of the cartesian space it would accelerate and therefore move the same distance but guess what let's say this is the arc path of the pendulum here with this arm length now let's say i have a much longer arm length this is the arc path well if it moves this amount of distance here that references this change in the angle but let's say i move that same amount of distance down here notice that i need a much smaller angle to get that far so the longer the arm length the less the angle needs to change to travel a certain distance when the arm length is shorter the angle needs to change more to travel that same distance so the angular acceleration is larger shorter arm smaller longer arm divide by the angle divide by that arm length okay i think i finally understand this now hopefully i explained this in a way that was helpful to you i admit that maybe i didn't um hopefully some of the resources that i'll put in the video's description will be better explanations it took me a long time to sort of sort this out i can come back and follow up on it more in a live stream or some other videos but let's just take a look let's add that now to the code so the next piece that i need to add is to divide by r or in this case my variable is called length so if i look at that angular acceleration calculation divide by length now it's moving incredibly slowly of course because now that i'm dividing by length i need a larger force to begin with to make it sort of feel more natural so let's go back and just change this to like one that looks pretty good so let's see now if i make the arm shorter versus longer versus medium does it feel right i'll just sort of do this quickly and you let me know well you won't be able to let me know but i'm gonna watch you let me know in the comments arm length six hundred right feels pretty good arm length sixty arm length two hundred i would say this feels pretty good now because this is an idealized frictionless pendulum it will swing forever you know with some other inaccuracies so one thing you might want to consider is adding some damping to this for example if i were to just always every frame take the angular velocity and multiply it by like 0.99 reducing that velocity by one percent each frame eventually it will swing less and less and come to a stop personally i like it kind of swinging forever so i'm going to comment that out right now what's next for you well if you're looking for a technical exercise one thing that i would suggest is just try to turn this into an objectoriented sketch what would it mean to write a pendulum class in fact that's the example that i have in the nature of code book and i'll i'll provide a solution to that in the video's description if you're looking for a way to take this idea and make more creative visuals out of it just making many pendulums is a great place to start so what if you make many pendulums and vary their arm length their period their frequency all sorts of properties of the pendulum i actually did a whole half an hour hour in a recent live stream where i tried this a few different ways i'll link to that in the video's description so you can go watch that kind of like extended cut of this video if you want to check that out then of course there is the double pendulum or triple pendulum or quadruple pendulum what does it mean to take one pendulum and then attach another pendulum to the bob of the first pendulum this is actually quite a bit more of a complex problem than just adding two pendulums to one sketch i did this in a previous coding challenge which just runs through the uh porting the differential equations associated with the double pendulum to code in a p5.js sketch so you could explore that if you want and then future videos where i'm looking at other types of physics libraries or even in the next one the springs what does it mean to take one spring and attach another spring to and attach another to it though that will also kind of get you in that direction as well if you're interested so try all this stuff please make something i would be so happy if you did share it with me you can share it in the comments but better yet move on over to the coding train website where there's a system that you can link your creative version of a pendulum simple pendulum and share it with the coding trade community all right so thanks so much for watching and i will see you in a future coding train video goodbye you