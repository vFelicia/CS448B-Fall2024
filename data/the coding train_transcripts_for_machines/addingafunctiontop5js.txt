I'm giving a quick intro to the video you're about to watch where I attempt to make a pull request to the p5.js project and what I'm at trying to add is the load bytes feature now all that will be explained in the video but I ran into some like debugging issues that are not really relevant for the pull requests aspect of the video so there's gonna be some strange cuts in it of me trying to where I've did a lot of debugging in between you're welcome to also check the video's description for the link to the full hourandahalf livestream but hopefully this video is much shorter and you're gonna get sort of like the essential parts of it okay enjoy this pull request video hello welcome to a special video that's part of my whole set of videos and things about contributing to open source so in this video I'm gonna attempt to do something that's not very visible because I'm Adhan doing I'm doing this and this is also a live stream that's going on right now even though you might be watching this recorded I am going to attempt to make a pull request to this project called p5.js now if you don't know a lot about p5.js i mean if you watch any of my videos you probably know something about it but I encourage you to check out processing foundation.org p5 GS dot org all those links are in this video's description I little while back was creating a doodle classifier example based on the quickdraw dataset and while I was doing that I needed a function called load bytes now if I go to github p5.js and I search this repository for a function called load bytes which the idea of this function is a function that I can call just like load JSON or load strings or load XML or load image but what I want or just the raw bytes from a file a digital file if I search for this you're gonna find oh it's nowhere in the code it's nowhere in the commits but there are a couple issues about it one of which is here under finish file IO implementation this is from 2013 right it wasn't finished and one is from me twelve days ago implementation of load bytes because I filed this issue describing exactly what I'm talking about right now and published some code that accomplished it now here's the thing in the discussion here there's some nice discussion here Linsey why kenneth commented saying that using HTTP do which is a function that's part of the p5 library would be more consistent with the rest of the loading code it's a nice to have I'm going to submit this pull request without doing that just with using my code that uses the native JavaScript HTTP request because I don't want to because using HTTP do is going to require adding and rewriting the HTTP do function as well and I want to kind of keep the scope of this particular video small now it might be that later it might be that this pull request doesn't actually get merged into the project alright I did a different way but let's just sort of see if we can at least make it happen using this code that I have that load bytes and the other point of this I won't you be able to watch this and not really care about what it means to load bytes and how this implementation works just to see the process of adding some new code to kind of a large open source project that is all sorts of dependencies and build settings and things let's see if I can figure that stuff out while doing this in theory I should know how to do this but even if I do know how I'm probably gonna get tripped up and have all sorts of problems I can tell it's gonna happen so let me say a couple things first number one is this this wiki is going to be really important this is on the p5.js wiki under slash development this is gonna have some instructions that I'm going to need to follow to how to build the p5.js project which I'm going to need to do to test the new code that I want to implement and then also I would highly recommend you check out this video series from Luisa Pereira where she created a video series called looking inside p5 I believe there's a Spanish language and English language and these videos go through in great detail with a beautiful animation of drawings and animations how the p5 library is structured and built so that will give you an excellent background to what I am going to about to attempt to do ok so what is the first thing that I need to do so what I'm actually going to do is I'm going to go right here to p5.js and i'm gonna go over here to clone so what I'm gonna do is I'm gonna start fresh I certainly have on my computer the p5 just repository already I work with it I probably have different branches and forks ah you're running to do it I'm not gonna clone it I am first gonna hit fork so what I want to do is work in my own fork so I'm gonna hit fork and I want to fork this oh look at this let's fork this to the coding train and I'm gonna fork this with a coding train it's gonna take a little bit of time oh it already finished okay so now what I'm gonna do is I'm gonna clone and this is good because even if this goes totally haywire maybe I don't want to actually submit what I do here to the actual p5.js project I just want this to be a little sandbox playground for me to learn about open source so here we go I'm going to grab this now I am going to clone from this particular URL I'm using git at github calm because I have already done this crazy SSH key passphrase thing which I would be happy to show in another video if you haven't done that step you might want to clone just using this the HTTP URL so I'm gonna do this I'm gonna hit copy and then I'm gonna go to my terminal where I am a weirdo who actually just uses the plain Mac terminal with no extra settings I aspire to do better I will do better someday and I'm gonna say git clone wait I first got to see where I am sure I'm gonna go to the desktop I'm just gonna put this on the desktop and now I'm gonna say git clone that so this is step one step one is clone the repository oh it's already done okay great now I have clone the repository step 2 deep breath step 3 change directory into the repository and then I'm going to open up all the code in a cook text editor and I'm going to use the atom editor for that I have my computer configured in such a way that I can type atom dot and it opens atom automatically and so now you can see I have the entire p5.js project here so first what I want to do is can I even just build p5 the way that it is without making any changes to it okay I don't want to make any changes I don't want to worry about my pull request and all that stuff should want to see if I can build it so I'm gonna go back now to this particular and oh I did this first step right fork and clone right fork and clone fork and clone I did that now I'm gonna oh I did see the npm install so npm node package manager install is a command that's going to I have to have node installed on my computer check out my videos about nodejs but i'm gonna use no to install all the other libraries and other things that p5 the library itself depends on so I'm going to say npm install now I'm really definitely gonna have to wait well we finished okay that was 33 seconds and we add added 1584 hooks and people are saying in the chat what about yarn you know someday I'll you know I you know me I'd like to kind of like live in the past for a little while so I'm using no yarn is another package manager' though that you could use instead of NPM and apparently it's like faster and better for some reason now okay to create the Creek complete library from source run grunt so one thing that I should emphasize here is that when I go look at the code like where do I actually want to change the code somewhere right I want to add the load bytes function all the code for p5 is all here color core data events hmm i/o input output probably the code for load bytes should go in IO and if I look here and I go down files Jas maybe that's where it is let's look at files Jas and you can see here is there like a load JSON is here solo JSON is here in files dot j s so I just need to add p5 dot prototype dot load bytes to add that function but the thing is if you've ever used the p5 library right you don't have like a directory of all of these you just have that p5.js file or that p5 dot min dot JS file so there is a build process it would be unreasonable to try to develop this big library all from one file and be like oh I want to add something to it let me go to line you know 70 2421 so everything's broken out into separate files and then there's a build process the build process happens with where am I here via this other tool called grunt what's what's grunt grunt JavaScript let's look for that the JavaScript task runner so grunt is a task runner that will look worried that you could configure to do a lot of things like run all the unit tests check the linting for style bill put all these files all together minify it all that kind of stuff that I have some video tutorials about in my github series in my lip linting and testing series but basically all the kinds of things that you might do with a JavaScript project grunt something that can allow you to sort of sequence all of that and a lot of this work was done by sakshum Saxena for last year's google Summer of Code 2017 we did a lot of work to improve the infrastructure alas pecs and operations of the p5 library itself so that all the sort of build stuff so let's try now and see can we run npm run grunt and let's see what happens oh this is exciting so let's see if I can talk through the things that it's doing oh ok so what am I missing oh I just said I actually I just I need to say npm run the grunt I just typed and chim grunt if I type NPM grunt it goes like this and all right here we go so it's running grunt its building some docks and the reference then it's running in a min task it's running some sort of type right it's building it it's linting it it's testing it all sorts of exciting stuff is happening oh it's running browserify which is something that people do and it's running uglify which is also something but it's doing all these different tasks then boy wouldn't it be nice mocha to go through it so look at the little kitty cat and it's running all the unit tests the value of X is 10 boy this is gonna take a really long time false false so it's gonna take a really long time to do all this I think probably I'll just be back in a second one is done it's complete and it passed everything passed it was done without errors so now we can start to add our own code to it now maybe I want to like makes it duper oh yeah I'm gonna make a branch so I think I don't know I think what I'm gonna do is I'm gonna say git branch load bytes I don't call it fix or at load bytes add that's a good name for the branch I think I'm gonna add load branch maybe I should call it add load bytes ok so I'm going to create that branch and then I'm also going to check out that branch so now working on the code I'm in a different branch which is going to be helpful for me later when I want to compare pull request send echo there's a lot of stuff that I'm kind of you know this isn't like I've this is the first video you're ever watching about git or github or open source a lot of this is gonna be unfamiliar to you hopefully you can pause here and find some of the background links and come back but ok so I'm in a separate branch now all right now I'm just gonna go to the code I'm gonna write some code code code code code code here we go alright so I'm gonna write some code stressed out alright ah so here's the thing let me give myself a little bit more room here one thing that's interesting to note about p5 is to look at all what's all this stuff oh my goodness there's like this is just the load JSON function first there's these comments then there's some like crazy notation here there's like this looks like an example so there's a lot that I need to do just to add load bytes beyond just the load bytes function itself because I need to also make sure I include the documentation and eventually I'm gonna want to also probably add an example to the website and all sorts of other stuff but let's do one step at a time I think what might help us actually amazingly is let's use this load JSON implementation as a template so I'm actually gonna copy everything from load JSON like this and I'm going to put it I don't know if it if there's a correct order I'm gonna put it at the bottom I'm gonna put it at the end because I'm gonna put it after look at me I'm just like scrolling like a crazy person I'm gonna add it after before hgp do and I'm gonna add it before HTT p oast oh this is very silly what's going on now HTTP GET load xml so i'm gonna add it after load xml before after load xml before HTTP GET that feels like a good place to put it I paste this in here now then what I'm going to do is I'm going to make sure I'm in the right place this is the load JSON function and it's right after the XML one okay so now I will really need to rewrite this quite a bit and I need to make this a little smaller can you still see this is this too small for you now I think I'll survive here loads a binary file from a fire all a URL and returns an object with a byte property containing a so what is it that it's containing when I my load bytes function it if I run the load bytes function it actually creates this with this you into eight array okay a array note that even if the JSON file contains an array and object so this is irrelevant this method is asynchronous meaning it may not finish before the next line in your sketch okay don't need JSON P so that can be removed now the method is called load bytes the parameter is a string which is name of the file or the URL to load object so I don't think I need to JSON piece stuff that I don't need a callback and an error callback so I own a string a callback and an error callback function to be executed after load bytes completes data is passed in as its first argument function be executed if there's an error responses passed as the first argument that makes sense return an object it only returns an object because the object has contains and a you int array bytes field property I'm going to say property and then I'm going to say calling load bytes inside preload guarantees to complete the operation before being set up and draws called that is the case now there's an example here unfortunately I'm good what I'm going to do right now is I'm gonna take out the example maybe I can add one in later but I'm just going to say to do add example and then outside of preload add example with preload outside of preload you may supply a callback function to handle the object to handle the data I'm gonna say and then what I'm gonna do here I'm going to delete this and I'm gonna say to do add add example without with callback wonder why it's syntax ting ha syntax highlight how because it's inside of this oh maybe this will this will just do oh yeah this is all I need to do okay so this all I need to do is add sorry I need to put this in comments I'm trying to figure out what it's expecting expecting JavaScript code here which I don't have ready to put so I'm gonna put this to do note with JavaScript comment okay what is this alt oh this is alt text I think this is like leftover from something that's not exactly right so this is a mistake I think I need to like take a look at this I'm gonna leave that there but this I don't think is right I'm gonna come back to that okay now I'm gonna get my code so I'm going to change this to load bytes and I'm gonna go now to the code that I wrote another time and I've been sort of mucking around with it trying a few different things so what I'm gonna do is I'm gonna do this I'm gonna tape I'm gonna I'm gonna do this bit by bit I'm sure I'm gonna just take out I was playing around with HTTP do I'm gonna take that out so I'm gonna grab my code which is this and I'm going to copy it and I'm going to go back here and I'm going to I'm going to leave this stuff here so you're gonna see why in a second because I actually uh what I want I want to retain this check for the data type argument so this is some code from load bytes which is checking to see here's an argument if it's a string I don't need to worry about this json p stuff so if it's a if it's a function and there is no callback then it becomes the callback otherwise it's the error and i can get rid of this and I can say I can say path should always the arguments index 0 so this is actually this is probably more complex than it needs to be so I don't know if this is really necessary I but I'm gonna leave this like this so this is saying like oh this is already there you know what I'm gonna say yeah I'm gonna do this so this is a nice way I'm gonna leave it like this this is a way of just checking are there additional arguments if so put them in the right place then I don't want to do this anymore what I want to do is my own whoops load bytes code which is this and I'm gonna paste that in here now the difference is I wrote my code with a variable called data and the the convention in p5 is returned so I want to say our return equips return equals an empty object and then when the data comes in I'm gonna say return bytes equals that array I'm gonna do the callback and then I also need to how do I have an error so on request dot on error this is my guess lower case on error but being told that may be lower case on error actually works so let's see if this is a function H HTTP XML Roksana HTTP request on error yeah there's a non error there we go equals callback so that should work we're gonna test all this stuff before I submit a pull request don't worry okay so now I think I've written my code I'm happy with it I don't have the examples but I have the stuff that's needed for the documentation I have a little description ah I am missing something though weirdly enough the way that p5 works when you have a function that it supports preload is I also need to register that function with load bytes I'm sorry register that function with preload so this has to go somewhere register a preload method now where does that go does that actually just go is that in this no so where does that happen in the p5 library hmm let's go back to the p5 repository and search for register preload method and let's look for code oh it's in core preload methods let's see hmm yep it's here it's in core so what I need to do is add it to this list we can see there's no load bytes in this list so I also need to go to core which is here under core core jf let me look for a load JSON and find that here and now what I'm gonna do is I'm gonna put it right here as this in alphabetical order no I don't know that there's a particular logic to this order so I'm just going to put it your load XML I'm gonna say load bytes I'm being told there might be a bug in the way that I called the date called the callback thank you for that so let me go back to files J s go back to my load bytes and I am calling the callback I with data which I renamed based on the p5 convention to ret okay so I think that's good alright so look we did it we're done goodbye I'll see you later no no there's so much more to do this is I think I have written all the code for adding the load bytes function to p5 now I've missed two important things one is I haven't finished writing the doc example documentation and two it's possible you know it is as in that thread that get up issue thread this isn't perhaps the ideal implementation of load bytes but it hopefully at least is one that works so now what I'm going to do is guess what I'm gonna do I'm just gonna run again npm run grunt so let's just rebuild p5 i also haven't written any tests so I'll be back when this is done hmm okay this is good so this is no surprise there's no way I could have done that without getting any errors so I got some sort of error yes lint source failed so what did I do I wrote on so I have some some some code that doesn't that doesn't work that doesn't fit the styles defined by the p5 opensource library oh boy boy there's a lot of stuff oh no oh no oh no something bad has happened I forgot I have Adam beautify package installed and it happens anytime I hit command s it read formats all my code with some styles defined by my Adam beautify which don't match up with the p5.js library whoo so I got to undo out of this I did undo sorry I was confused so I undo out of that and save it now I've got to go to files dot yes now on fortune what I'm gonna do here I'm gonna do something a little bit insane which is that I'm going to grab my load bytes function I don't care if there are errors I need to fix there I'm gonna grab my load bytes function I'm gonna hit command X to get rid of it I'm then I'm gonna undo I'm gonna do undo all the way back to how this file was originally today wow I made a lot of changes this is insane good thing I know I couldn't use get stash I probably just use good stash like stash all that now okay now I'm gonna hit save now this is if I if I if I do get diff I have made no changes from the p5 library I'm gonna make those changes again I'm gonna paste in my load bytes function I'm gonna hit save now I'm gonna go to court ASI told you this would go awry and I'm gonna look for lo JSON and I'm gonna add in my load bytes function I'm not no beautifying it's gonna happen this time load bytes and I'm gonna hit save and now we can see Jorge s has changed you can see by that Adam changed the color and files such as have changed but beautify didn't run I hope so now what I'm gonna do is I am going to try to run this again and hopefully I mean I'm sure I'm gonna be back he'll be some other error you'll see me in a minute when the next error comes up I am back with more linting errors but at least there are only these linting errors in files yes so what is a path is assigned a value but never used ah I forgot like I've made mistakes in my code here that this is this is so good that it has linting because I I created this variable called path but then here I'm using file this needs to be path this definitely needs to be path here so that was a mistake you know I'm tempted to just run this again just to do one fix at a time more linting errors replace get with get so it wants me to use a single quotes I agree with you thank you p5 for making my dreams come true this should probably be single quotes as well okay so now that's good let's run it again I probably could run just the command for linting separately like instead of doing run grunt the whole time okay another linting error insert a semicolon line 752 align 752 oh really really okay all right hey you want a semicolon there yeah that's the end of this onload being equal to is it gonna want another one yeah oh yeah like I have one here that makes sense okay I'll buy that I'll buy that semicolon all right one more let's see if it gets past it let's see if it gets past the linting okay told to be request for the music up nope alright it didn't get past it we've got one more on Rick one our EQ is not defined oh oh I just like have a total typo I have this as onr EQ when the variables name is o req so this by the way is good evidence I have a lifting tutorial by the way that well that that is out you can go check out my tutorial about linting this is why having linting especially than open source library it's good I might have liked well I probably would have tested this at least tried to run an example before I submitted the poor request but this has really helped me clean out and fix a whole bunch of things Thank You p5.js and your linting configuration let's try this one more time I'm feeling good feeling like it's gonna make it all the way through okay look it built no errors I have actually now completely rebuilt the entire p5.js library with my new code all the tests pass you know with the caveat that I didn't actually write any tests for load bite so but at least I didn't break anything else that's in existing tests no linting errors my code style is right didn't complain at me that I'm missing something important so I can feel somewhat confident that I've done something that's reasonable now let's let's look let's see okay so let's go into let's go into Lib so the built file is actually you can't see it here because it's actually in my atom editors configured not to show me files that are in git ignore but I can actually go here and open it up manually file open Lib this is the new p5 just library that I have now built manually and there's also this empty example this is wonderful because I'm gonna be able to now mess around in this empty example folder to test to sort of manually test to see if the code works so I'm gonna open this up and we can see we can look this has been built on March 12th that's today 2018 and I can look like I can do a fine now Adam is my complain at me because it's a really big file but I can look for load bytes look at this there's a there's a low byte that was that's not in p5 the code there's another load bytes there's another load bytes there's a load bytes is there and look at this here it is the load bytes method actually online 59 thousand something 575 so this is now a version of p5 library it's not a rule it's not released it's not merged it's not part of the the actual p5 project yet but it did work to build a library so now what I'm going to do is I'm gonna go into this empty example now this empty example you'll notice point to those new built library files so I can start to test that code so what I'm going to do is I'm going to go to terminal here and I'm going to where am i I am in p5.js I'm going to go to to Lib I'm going to go into empty imple I'm gonna run a little server just so the just so I can sort of see oh there's already a server running let me run a server on a different port then I'm gonna go to the browser and now now I can see okay didn't find these files hmm let's think about this oh you know why because I've got to go i its it needs I need to run the server I need to run the server from the from this directory right because empty that empty example points to these files so let me run the server from this directory and go to empty example now let's just see I'm in empty example let me do some stuff like create canvas 400 400 background 0 I won't make this part of my commit I don't want the empty example to be part of what I commit but I'm just messing around the code here just to test so here we go I can see okay so stuff is running now here's here is the real test let me just write the load bytes function in setup okay this is good that's an error I want if low bytes didn't exist is the p5 library we've got an error saying I don't know what load byte this so now I can I can kind of go what I have a some test code on my desktop where I have a data file this is some this is a binary file was 1000 cat drawings so I'm gonna copy that I'm gonna go to empty examples I'm gonna say just show and finder and I'm gonna go to empty examples and I'm gonna paste that in so now I have a binary file there I want to see that that so that binary file is there and what I want to try doing is I want to say load bytes cats 1000 dot bin so let's just see if I get any error there no error this is a good sign now here's the thing function let me put this in preload so did my preload integration work VAR data I'm just gonna be es5 for today equals load but I'll say let cuz that's how I can't say bar any more load bytes and then I'm gonna say console log data so let's make sure this works great the data is there that's the correct amount of data you know looking at some of the numbers I can see that this makes sense that I knowing what this file is this is the right kind of stuff there's a lot of black pixels and then some gray and white outlines so this looks like it's working and you know just to make sure preload is really doing what it should right it's empty there but by the time it gets the set up now what if I take this here and put it in set up now this shouldn't work because I'm no longer using preload right I'm no longer using preload so it's empty but I can add a callback I can say got data and I can write a function called got data with an argument data so this is the callback and I don't need to set it equal to anything anymore so this should now I don't need this draw function it's nice that that was there so this should now work I can see the data is there that's good and then I also want to let's test the error I'll so I'll call it got error so I have to make an error happen let's see if I can think about how to do that so let me consult log the error so let's see so this there shouldn't be in it no error happened that's good what if I change the name of the file there we go sketched so interestingly enough oh this is a problem so it called got error sketched out yes no it didn't it it passed the error into got data so I have a mistake I'm pausing this video because what happens next is me spending like a really long time trying to figure out what to do with error codes and the error callback and that's not really relevant to the pull request aspect if you want to see that part check the video description for the whole hour and a half livestream but I'm just gonna jump now to the part where I figure out what to do with the error codes and continue alright hope you're just playing this video can you keep watching maybe okay it's done let's do some more checks okay so let's see here let me check now my empty example again let's just first see if it works correctly so I've got the got data and the got error callback so I am now going to check the example and we can see okay it works if I give it a nice binary file it if I give it the wrong file name great it gives me an error that's what I want the callback never happens because there is nothing to get file not found that's what I want let's see if I give it a URL that's like doesn't exist what does that do all right Oh got a 404 and it also got a No so this is fine and it got an error so that's fine I'm getting everything getting everything I want with the error callback maybe I want something more specific here but I'll leave this here and then what I'm gonna do is let me check preload again let me just check make sure preload is not broken and so I'm going to say function preload and let data data equals load bytes with this madeup URL and let's say let's console.log the data okay so now I just want to check preload this is the preload code with let me check it first with an actual correct file whoops oh I own a console log the string data I want to console log the data perfect now let me check it with a file that doesn't exist hangs and this is the actual this is what p5 does natively it hangs if the file doesn't exist it doesn't keep going so that's what it should be doing and then let's if I get a cours error across origin resources like I try to access some URL great perfect not found and that error so this is all perfect this is exactly what I wanted to do my tests have passed guess what I'm pretty much done that was a very loud Bell okay so now what happens now I want to say git status just to see what's going on in the repository so whoa where am I here modified oh yeah sorry so I've modified a bunch of things I modified empty example sketch dot yes that's not part of the work that I'm doing I've modified cord uh chance that is part of the work I'm doing I modified files that yes that's the work that I'm doing I am NOT if I've added this weird binary file that's just for my own testing I don't want to deal with that so what I want to do now is I want to say git add source core cord is because I want to add these changes to cord a s then I want to add a source I Oh files Dutch ass okay then what I want to do is I want to say git commit oh boy it's gonna run something for me wow so there's and now ooh it is giving me now I can write my commit message okay implementing load bites this is relevant to issue two six seven four so then I'm going to write this pull wrote this pull request I'm not gonna say pull request this commit adds load bites adds the load bites function to p5.js as demonstrated during a live stream on the coding train there are some there are some remaining issues here for example there are no tests and I am also not using HTTP do which would be more of the convention here for p5 as discussed in issue 2 674 I also I am also handling errors like 404 or cores in perhaps an odd way and would be happy for any feedback okay so this is my nice long commit message and what I'm going to do is I'm now going to so I have I have my git commit tied to Adam so I can now so I can write a nice long thoughtful commit message this will all be ignored this is just information for me I'm gonna hit close and now I'm gonna look at terminal and the commit has been made to the add load bytes branch and now I am going to say now I'm gonna say git remote V so the remote that this is tied to is the coding train a fork so I can say I'm going to say git push origin load what did I call this branch git git branch add load bytes git push origin add load bytes so I'm going to push if I have been made this to master by the way I could have said push my changes to master to a new branch called add load bytes but since its I mean a branch already gonna say git push origin add load bytes I forgot dear diary should I amend I definitely think I need to amend that I forgot okay so here we go I pushed it there now I'm gonna go to I'm gonna go to my fork who here is it so many things open I'm gonna hit refresh and look at this less than a minute ago I pushed this add load bytes branch I can now do compare and pull request compare pull request I'm eyes right so this is now saying hey I'm going to I want to pull request add load bytes from coding train /p v yes to processing p5 just base master and then I think what I want to do is I want to suggest some reviewers so Kenneth Lim should definitely be a reviewer Kenneth Lim posted some great comments I don't know if oh I should definitely add something so when I did my commit message it had these like line breaks in it which are bothering me here and I also want to add some formatting like this the back ticks to format this I should say a thanks to for for for this branch which was a nice reference for me so I just want to add a little thank you here too and I'm gonna go back to my my code where I kept a little this URL to remember it so and then I'm gonna write Oh it's okay if this doesn't get merged hopefully doing this on a live stream was helpful to somebody all right so now we're gonna look and see like look there's the change I made here's the load bytes function Oh also also an example code is missing finally I am not using rewriting my message dear diary Sincerely Yours the coding train okay so let's now go back and say preview and this can actually because of a nice way that it's rendering this can just go like this let's read this over implementing load bytes 264 dear diary this commit adds the load bytes function to p5.js as demonstrated during a live stream on the coding train there are some remaining issues here for example there under tests also example code is missing finally I'm not using HTTP due to Norfolk EQ vention for p5 as discussed I'm also handling errors like 4/4 and perhaps an odd way bababababababababa it's ok it's ok if this doesn't get merged hopefully doing this one lashing was helpful to somebody okay all right I think we're ready everybody I think we've now come to the end of this video drum roll please we are going to create the pull request and that was a 73 and full hour and 42 minutes to submit a pull request to p5 yes live on YouTube you