hello and welcome back to another video in Chapter two the nature of code about forces so the last video I look at it friction and modeling friction and in this video I want to look at a drag force which is quite similar to friction but also different isn't that that's why I'm looking at it but what I'm really doing here in these in these four wrapup videos to chapter two is it's taking doing some case studies what are formulas that you might find in a textbook or Wikipedia that you just sort of like feel like I'll order those mean how do I even use that try to unpack those formulas and apply them even code so the case study that this video will examine is drag drag force sometimes called air resistance it's a kind of friction and it's part of the field of study of fluid dynamics and there's all sorts of interesting fluid simulation crazy stuff you could do and there's lift and all sorts of a lot you could get into but I'm gonna spoil things down and try to look at this particular formula for calculating a drag force I brought that formula right here into the nature of code book and this is what I'm going to use so let's come over to the white board and replace the friction formula this is the formula we want to implement and the context of what implemented in is a two dimensional p5 canvas where we have a body that's moving with a current velocity point it down once again we're calculating a force so we need to both determine the direction of the force and the magnitude let's start with direction identical to friction is the direction of drag we have the velocity unit vector and negative 1/2 so the drag force points in the opposite direction of velocity so that's something we already know how to do it's scaled with this negative 1/2 because you know science but to us in our p5 world whether this is negative 1/2 or 5 it's gonna be less important because this is madeup units of measurement anyway then we have to start looking at other aspects of this let's go through these one at a time so this Greek letter Rho is stands for density so what is this moving through well if I were to take this marker and drop it there would be air resistance it's moving through a gas the air so what is the density of the air versus if it landed in water what's the density of the water versus mud or jello or whatever kind of thing it's moving through in our p5 world assuming this circle his body is moving through a kind of homogeneous uniform space it's all the same stuff the density of this air or fluid or whatever it is is a constant so Rho the density is a constant skipping V squared for a second let's go to a so a this is surface area so if I come back to the diagram in the nature of code book we can see here the idea is what is the surface area of the object coming into contact with the fluid and you can think of it like is it aerodynamic or not does it come with like a to a sharp point where there's a very little surface area or is it kind of like a wide load and there's a lot of surface area moving through this fluid oh wow this is something I absolutely could try to model based on thinking about different shapes and different sizes of those shapes I could also just consider that a constant and maybe I'll just say all of the objects in my world come in with a surface area of one but I'm really just going to consider this to be a constant so if I were to mana it might make the ultimate simulation more dynamic and more realistic but it's one thing that I think it's a detail that I can mostly ignore especially if I have a lot of circular bodies of relative similarsized then we have the coefficient of drag itself what's that that's a constant it's a constant it's a constant that maps to the relative strength of the drag force itself what I'm saying is all of these these three elements with this negative 1/2 which is literally a constant I could consider to be a constant in my simulation so I can actually take this formula and simplify it greatly drag force is equal to negative 1 times some constant I'll call that the coefficient of drag it's in a queue it's a constant that takes into account the negative 1/2 the surface area the density and the coefficient of drag times V squared times the unit vector V so once again the direction is in the opposite direction of velocity and it's scaled according to some constant times and this one is really important this is the speed squared it's the magnitude of the velocity vector and this is key those faster the object this was not the case with friction not the case with kinetic friction doesn't matter how fast the object was moving the friction force is proportional proportional to that speed but in the case of drag it's absolutely proportional if I were to hold this marker absolutely still it's not moving at all there is no drag force on it but if it's moving very very fast that drag force will be stronger it's moving slowly it'll be weaker and that's absolutely wanna model so we want the magnitude of this vector squared in our formula I should also note that another way that you might see another notation for writing the magnitude of the vector is the name of the vector with two bars along each side so you could also could also rewrite this formula like this to demonstrate how to implement this I'm taking a exact duplicate of the code I wrote in the previous video demonstrating friction and all I've done here is I've renamed the friction function and I'm calling it so what are elements is there anything here that I want to keep well actually there is one thing that I want to keep which is that I want to when I'm getting the direction of the vector I want negative one times the velocity unit vector so this is what I want to keep I want the direction now of the drag force and I've got it here in this variable called drag what's next I need the magnitude of the drag force speed squared times the coefficient of drag well let's make up a coefficient let's call it zero point one the speed is this dot velocity dot mag and then set the drags magnitude to C times speed and apply the force this is actually quite incorrect remember it's not proportional to the speed it's proportional to the speed squared V times speed guess what though there's actually a function in p5 called mag squared for magnitude squared so it'll be a little bit more efficient if I just call this like speed squared and use the magnitude squared function we can see that these objects that have less mass have a more difficult time accelerating let's see what happens if I take C and make it like a really high number like 5 you can see this all of these are like really having trouble moving they're just like slower if I make it like 500 can I get them just like the force to be so strong that they don't move whoa so one thing I really have to watch out for that force could become so strong it will actually push them back up in the opposite direction and which wouldn't actually happen but you know again with all the various inaccuracies of things that I'm doing I probably need to put some constraints on this but with something like a coefficient of drag of like 0.1 in this context with that I'm getting kind of realistic behavior but I really want to emphasize this in in a sort of more meaningful way so I think what I'm going to do is consider half of the canvas to have like a liquid and a thick liquid that has a strong drag to its rack coefficient and the other half to be Bisley a vacuum with no drag so let's draw it go to the canvas and draw a rectangle let's say fill 255 with an alpha of 50 a rectangle and we can make it even a little bit brighter okay so I want to draw on half of the canvas this rectangle that shows sort of like as if these objects are falling and land in water or land in some liquid so in this case I'll just say if mover dot position dot y is greater than height divided by 2 mover drag so we should now see them all fall at the exact same rate but once they hit the water the fluid resistance will affect them differently pause dot y let's make that drag force even a little bit stronger oh look at that see that's the issue if it's too strong you can see it's kind of like that's not very realistic it's like bouncing it's like bouncing off of it which is kind of like a weird this is sort of fun a little like bug it's a feature not a bug but obviously it doesn't feel very at realistic maybe it might make sense for me to have this like drag coefficient be a global variable and actually perhaps even it's something that gets passed in to the function itself let's make it point to so this wraps up this particular example to demonstrating a drag force here's some exercises of things you could try one is I'm not being very thoughtful about how I'm considering the twodimensional space that is the canvas I just kind of used height divided by two as this arbitrary marker between vacuum and liquid maybe I would actually want to create a liquid class an object that describes a density a coefficient and a area of the canvas where that liquid or gas is present and then I could build a map right of having different liquids with different coefficients and different parts and have a much more dynamic system of things experiencing different amounts of drag depending on where they are and maybe it's all color coded there's lots of possibilities there another thing that I might consider what's is thinking about surface area here I'm assuming that all of the objects have the same surface area which isn't true and I can visually see that they don't and there's probably at least a very basic way that I can consider the size and have that be a factor in how I calculate the magnitude of a drag force so that's definitely you would something I would suggest trying as well so let me know if you have questions about this particularly implementation try to make your own version of it think about just even the sort of like visual design interaction of the system but also what kinds of adjustments could you make to how the drag force behaves and what types of results might you get from that and go to the coding training com where you can share your versions of this particular example and I've got one more chapter to video to make where I'm gonna look at the formula for gravitational attraction and look at orbiting orbiting bodies see you there you