all right videos 7260 three of my making your own color classifier with previous video previously on making your own color classifier intensified yes I worked in the model dot fit function so I'm fitting the model according to my training data with these options now what I want to do is I want to be able to basically see an animation graphing the loss function while it's doing the training so right now I just get a report when it's done so there's a few steps that I want to take to do this the first step that I want to do is I actually want to move this into a separate function so I'm gonna just write a function I'm gonna just make it a global function called train nice train and I'm gonna put model that fit there then I'm gonna call train here so that's everyone and let's let's uh oh and I'm gonna put the options here in this function and I'm gonna just go back to 2d box and I'm gonna run this Oh X is not defined oh boy I did all sorts of goofy stuff here so let's let's make these global variables X's and Y's I'm gonna need to do again just could use some refactoring but now it's training and to me box done oh we can see the loss functions great but still I don't have an animation so what I want to do is I want this to be an asynchronous function I want this function to be an asynchronous function to happen and let things keep going and guess what I have a video series about I do that with the keyword async and then if I say 8th if I make a function async I can use the keyword await meaning this function will wait for model that fit to finish before it's done and it returns a promise by the way so I can actually take this now I could say return a weight and then I can put my then up here right because it's going to return that same a promise but it will happen a synchronously meaning it will the code up here will be allowed to move on while this is happening in the background in theory but I've got to do more here it's the same behavior hmm so why is it the same behavior well I've set myself up for success but I don't have success yet and the reason why is that tensorflow TAS he's using something called WebGL to do all of the calculations and it's ticking over basically your animation or drawing capabilities while you're fitting the model however tensorflow j/s comes with a function called next frame which returns a promise that resolves when a request animation frame has been completed it's simply a sugar method so that users can do the following a weight TF next frame so what I can actually do is kind of trigger the animation letting drew the draw loop go the p5.js draw loop is just using requestanimationframe itself by adding a weight TF next frame somehow in this async function so where do I add it so I have an idea I'm going to add something to this called callbacks so and I gotta spell callbacks correctly for this to work so let's go back to look at model dot fit model dot fit and we can see that oh look at this this is new as of like Alissa I was looking in the wrong place but last night when I was looking this up it wasn't actually here um these are optional callbacks that can be called during training for example on train begin on train end on epoch begin on epoch end on back begin on batch end so let's just let's add on train begin on train end just for real quick so I'm gonna say I'm gonna have a callback on train begin and this needs to be a function it's gonna my life's going to be easier if I just use this yes 6 arrow notation and then I'm gonna have another callback called on train end and I'm gonna say training complete so I'm gonna just add these two callbacks so these are functions that are going to be executed during the training process let's see if I did that right training start and try to complete and I see the results wonderful let's try a different callback let's try on epoch end and on epoch and well it takes two arguments I'm looking over here on this computer because I have some notes there which I don't typically do but it's the documentation here doesn't actually if we look here it's not telling you what the arguments are for these callback functions but I I looked them up and so the arguments are the number of epochs so I can say num and then a log which is like a report so I'm gonna say num and logs and then what I can do so what I'm gonna do is I'm gonna do console I'm gonna write a function here with multiple lines of code I'm gonna say console.log epoch num and then I'm gonna say console log loss a logs dot loss loss so there's a property of loss that's in that logs object so these are the arguments do every time it finishes an epoch so I'm gonna now give it 10 epochs let's see what happens if I add that call back all right epoch zero epoch one epoch to epoch three epoch four look at that so I am now getting I'm getting a call back for every one of those individual epochs and we can see the loss going down and then of course we see all of the lost values when we're done if I want to draw something at the end of each epoch I want to allow the animation to proceed I can go and use that function TF next frame its whoops TF next frame which allows me to which allows me to sort of unlock the drawing thread and and let draw update itself so I'm gonna go and I'm gonna say a weight TF next frame right here at the end of each epoch and then this is also an async function so this now has to be an async function as well is that gonna allow me to do that I think so yes okay let's try this oh yeah look it's drawing now let's actually add an animation so let's do something like stroke 255 stroke wait for line a frame count modulus with 0 frame count modulus with height so I just want to draw a line that is that is moving across so for example if I don't bother calling this train function at all we can see here I have an animation that's running okay so now let's call the train function and see if that animation runs waiting waiting waiting waiting waiting waiting let's get to epoch zero I'll look at it so the animation is going but it's only able to draw once at the end of each epoch so while it's training if I want to let it unlock that drawing more often maybe a different callback would work better and in fact one something that tension voce s is doing behind the scenes and modeled fit sorry is in the callbacks right it's actually batching the data so I have 5600 data points it's actually running the gradient descent algorithm in batches that's what stochastic gradient descent means and there are also on batch begin on batch ends and I could sort of specify the batch size I'm letting it use a default so what I actually think that I want to use it's gonna be able to it does a batch pretty quickly a full epoch takes quite a bit of time so I can actually do on batch end what I'm going to do here is I'm gonna add one more callback on batch end and I'm gonna make this the async one so it also has a batch num number and a number of logs so it's the like epoch end but I'm gonna put the await next frame in there this one no longer sort needs to be an async function so this should unlock the animation much more quickly because it lets it draw every at the end of every batch so let's go to this now and we should see yeah look at this so the animation is running just fine and we should see now it got a little glitch there when I got to the end of epoch 0 let's see if it does that again no I don't know what so the first epoch they must have had to do some copying onto the GPU I'm not sure why but you can see that animation is no longer studying stuttering from epoch to epoch ok so now we have it trading the model with an animation going let's at least so what I really should do is graph the loss function and by the way I can look at the loss function at the end of each batch so I can get a much more quickly updated loss function so I'm gonna leave that as an exercise to the viewer but I'm gonna just what I'm gonna do is I'm gonna say let loss P and I'm gonna create a paragraph element again I'm not really being thoughtful about design and interface here loss so what I'm going to do here is it's just going to have a paragraph element that says loss in it and what I'm going to do is instead of logging the loss to the console I'm gonna say loss P dot HTML and this is using the p5.js dom library I give you this native JavaScript or jQuery going to put this loss information into that paragraph element so now I have an animation going and then as soon as I get to the end of the first epoch I have to talk for a bit here I see the loss function so now I'm training and getting a report of the loss function so for you I'm in the next video what I'm gonna add is inference or prediction I'm gonna allow the user with sliders to specify a color and have the label returned to me and what I would say to you is an exercise and see what happens if you can query the loss function with the batches and graph it over time and so you see that will be an exercise to you as the viewer and I'm gonna publish a github repo with this finished project so you can look for the Co this is very confusing but you can look for the code it'll be linked in the description in two different places there'll be the code that matches exactly this video and then there will be the code that's in a separate github repo that and somewhere in the future people will be contributing to that we'll have maybe the graph and other kind of designing things that people have from the community have added okay great so one more video to go I think and and then some other ancillary ones that I forgotten about but one more core video to this tutorial series which is adding the prediction and I will see you if you're really gonna watch all of these I will see you in the next video you can check the video description for the next video link you