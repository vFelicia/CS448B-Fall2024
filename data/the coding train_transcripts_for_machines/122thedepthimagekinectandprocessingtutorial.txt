hello have a prop in this video I'm going to look at how do you use this I'm going to actually look at the code for using this Microsoft Connect in processing using the open connect for processing library now uh one thing I want to mention it that I did not mention in the previous videos that is if you install the open connect for processing Library you need nothing else whatsoever it just works with the connect there is one exception on Windows 8 with the connect version two you do need to install an extra dri libus I will put that in the description below um but so this is the connect version one model 1414 it would work with this example but I'm going to show you instead I have the connect version two over here and you can see the only code that I've filled in so far is having a variable called connect 2 so if you're using the connect version one the only thing you would change this code would work mostly identically um is just say connect uh instead of connect two so it's not connect one and connect two it's just connect and connect two I'm pretty sure about that if I get that wrong somebody will correct me um okay so uh let's look at how you get started so I filled in a little bit of code but the only things that you need really to get started are an import statement at the top that import statement is saying hey I'm here to use this Library uh you need to declare a variable this variable is going to like hold all the information about this connect that you are using so it's the thing that you're going to create and I create it by saying new connect to this now there is a way to use multiple connects to use a version one and a version two to specify which connect you want to use that's beyond the scope of what I'm doing here in this video I'm only going to look at you just have one connect connected one connect connected to your computer it's the default one all you need to do is say equals new connect to this so once you've got that going what is the next step well you need to decide what it is you want to do and in this example all I want to do is use the depth image so I'm going to say init depth so the connect uh the connect doesn't the library doesn't start all of the feeds automatically it's not going to start getting the infrared image the raw depth the depth image the video image it's only going to start using what you ask for so in this case I want to say init depth and then I also want to say uh init device which will kind of get things going and by the way this is where if I had multiple devices I could put an argument in there and say init device zero one or two that type of thing so once I have that I'm ready to go and I can run this program and we will see nothing on the screen so but a lot of stuff like spit out here which is kind of promising device firmware serial the library is going to like put a lot of stuff in the console which is um some basic information that you can see if it's working it will say like no nothing connected uh if you if you if you don't have it um connected I realized some other things I forgot in the first video but that's okay okay so uh what's the next thing that you want to do so let's just make sure things are working one of the things the connect gives you is that depth image because I said init depth so in nit depth there are two ways I can look at the depth I can look at the raw depth values with the connect version two these are numbers between 0 and 4500 with the connect version one these are numbers between 0 and 248 U these relate to millimeter measurements um but what I want is get depth image and you can see I what I'm you doing here is I'm asking the connect to give me this depth image and store it in a variable called image and now what I can do is just draw that image on the screen to make sure things are working so we can see here and there it is so there is the depth image you can see I've got it and now it's on the screen so this is the goal of the library it's pretty easy to work with in terms of just getting the data so let's think about what you might want to do so I think most almost all of the uh almost everything that you would do where you're working with the raw depth data or with the depth image involves iter ating over all the pixels you want to look at all the pixels and see which ones are the ones that are closest you want to look at all the pixels and see what's the highest point of the closest thing or you want to look at all the pixels and say what's the sort of topology of the entire thing so all of those statements I said involved look at all the pixels so before I get to doing anything here let's talk about what it means to look look at all look at all the pixels so this is something that I've covered in some other videos a whole set of videos about just image processing um from you know jpegs pngs webcams that sort of thing you can refer back to those I'll I'll make sure I link to those at this moment in the video um but just to remind you if you have an image whether it's a depth image or an RGB image that image is a grid of pixels and we typically as human beings look at this as a thing that's twodimensional and it has a bunch of columns and it has a bunch of rows and usually we think of the columns as the X values and the rows as the Y values so you might think of this as like the columns numbered like there's five columns numbered 0 through four and there's uh four columns numbered 0 through three and so if I were over here this is pixel 3 comma 1 so this is how uh I think of pixels and images and this is the this image over here this depth image is a big grid of pixels columns and rows the thing that you have to remember when working with stuff like this is that the computer is actually storing all of those depth values all of those brightness depth values in this singular onedimensional array 0 1 2 3 4 5 6 7 8 9 Etc and those numbers correspond like this the counting goes across comes down here uh comes down here comes down here so you can see I've got 20 pixels because I've got a 5X four grid 5 * 4 is 20 the pixels are numbers 0 through 19 so what we need is a methodology for if we're thinking of the XY how do I convert that to the location that's in this onedimensional array the index into that onedimensional array and the formula for doing that is x + y * width and you can see how that works because if I look at this column index two over here 2 + 5 is 7 7 + 5 is 12 12 + 5 is 17 so the width defines those numbers as they go sort of down row by row by row so if I say 3 + 1 * 5 that's 3 + 5 which is eight and you can see that's eight right here so this is the formula that you're going to have to get used to because what I'm going to add is Loops I'm going to say Loop through every column and loop through every row row to look at every spot in this depth array so if I come back over here we can now add that to our code so for example I can say right here for every X from zero to and I'm going to say image. width uh not I and I'm going to say for every Y and again if this this idea of a nested Loop is confusing to you I would refer back to some previous videos about image processing but what we can see what I would like you to see here is how this is the loop to say I want to look at every single depth pixel so it could be I want to search for the closest one or I want to search for the for the the furthest away one right or I want to just visualize every pixel in threedimensional space so for every X from zero to the width for every y from zero to the height and now what I could do is say what is that index how to apply that formula now x + y * image. width and then the color is the color that's in that pixel even though it's a depth value it's turned into a grayscale color is the image. pixels at that index so this is now a loop that you will see in just about all the examples I intend to make today where I'm looking at every single Pixel and finding its index into the depth the the into that depth image and pulling out the color that's there so what might I do with that I could make a point in threedimensional space Let's do let's okay let's do something here let's turn what we're seeing on the screen let me run this let's turn this into a lower resolution grid so let's look what I'm going to change this program to do right now is just look at every 10 pixels or every 20 pixels and draw a rectangle with that particular uh color there so let's do that real quick and I'm going to say so what one thing I'm going to do is I'm going to change this to uh brightness I'm just going to look at the um I'm going to look at the brightness of that pixel which is just a single value between zero and and 255 and I want to draw a rectangle at XY now I'm going up by one pixel so what I want to do and you'll see this in some of my examples is I want to introduce a variable called Skip and I'll say skip equals 20 because that's how many pixels I'm going to skip instead of looking at every single Pixel right now I'm going to look at every 20 pixels um and then I'm going to draw a rectangle at every 20 pixels and I'm going to fill that rectangle with that particular color so if we run this we should see exactly what I had before but just it's much lower resolution so that you can see I'm still looking at all of the pixels finding its color uh uh from the from the pixel array and then drawing a rectangle of some size arbitrary size 20 at that spot so you can see as I move around in front of the connect you can see my hands here and you can start to see like ah this is the kind of thing that computer visionwise it might be easy to pick out my hands as the sort of singular Blobs of black shapes up in front so um okay so this is getting us started now what's the thing that you might want to do next let's think about how you might turn this now into something that's three threedimensional so what I might do here is say like first of all I want this program one thing I should note by the way is the connect the depth image that you're getting from the connect version 2 has a width of 512 and a height of 424 with the version one it's actually 640 by 480 which is a little bit strange that it's higher resolution but it's a little faster a little more accurate here I guess there's like this beam of sunlight coming in which is so lovely okay so I'm going to add p3d because what I want now is for this program to actually start rendering something in 3D the other thing that I'm going to need to do is add push Matrix and pop Matrix because what I want to do is not is set the location of these uh squares not by uh the coordinate of the rectang angle but by through a translation because ultimately I want to translate along the threedimensional axis so I use push Matrix and pop Matrix to save and restore um that transformation State these might be Concepts that are unfamiliar to you I will refer you to a different video about Transformations but you can see I have the same exact thing here so instead of drawing the rectangle at XY I've now translated to XY and drawn the rectangle at 0 0 why am I doing this because now I could add something I could add a z here so the first thing I might try is just say okay well what is this Z let's make this Z equal to brightness and you can see here what do we got we've got as I uh it's kind of hard to see but you can see some uh some rectangles are further in front than other ones that are further away so the brighter ones are closer and the darker ones are further back this isn't really this isn't really doing me any good because actually I think what might make more sense is to have the closer ones be more forward and the further ones way be more behind so I want to essentially position all these rectangles about where they actually are in physical space and so to do that I might do the map use the map function right because we know the brightness has a range between zero and 255 but what I want is to now have a z value this zv value that's coming out of the screen I want things that are dark to appear close and things that are bright to appear far away so maybe I'll have the things that are dark to be at 150 units along the z axis and the things that are bright to be at negative 150 so I'm taking that range that's between 0 and 255 and flipping it to have it map between 1 15 150 and negative 150 and then also let's draw those rectangles a little bit smaller and honestly I think it might make sense to also just make them all white so let's sort of see what we get here uh oh and I have the image behind it um so you can see here as I come forward uh boy this is uh this isn't the best demonstration um let me uh let me do something here first let me let me comment out drawing this image and uh let's let's leave the colors back in um but I but let's um let's invert the colors which I'm just going to do that way try to make this a little bit better so you can see here as the problem is there's this wall here which is what you're seeing there ah and something else is coming up but skip this version of java let's see if I can turn the connect a little bit this way and you can see as I go back you can see as I come forward we're getting these uh slightly larger uh larger rectangles now there's a moment actually where the connect stops seeing anything and that's if I go way too close to it um but it's since it's giving me a value of zero it's actually still working here so you can see that as I move the hand that things are coming closer and maybe this range isn't so great I should have practiced this beforehand so let's like make that range a bit more extreme uh and you can see ah this is getting a little bit better now so you can see as I come forward these rectangles get a little bigger there's a lot of noise here I don't have this connect in like sort of a nice spot because there's all this other stuff in the room like this wall and this table and this laptop but I'm kind of you can kind of see my form here uh and my hands there as they come forward so this is the basic idea of how you might start working with the connect I'm going to try to show you some more practical uses of the connect and the next set of videos but this is the basic idea of looping through all the pixels look looking at their brightness value and mapping it now the truth of the matter is if if I was really doing this what I probably would want to do is actually just look at that raw depth data if I'm trying to visualize the data in 3D this is not exactly the quote unquote correct way of doing it so that's what I'm going to show you in the next video how instead of using the depth image how you might make use of the raw depth data those numbers which are between zero and 4500 okay thanks for watching and I'll maybe see you in the next video