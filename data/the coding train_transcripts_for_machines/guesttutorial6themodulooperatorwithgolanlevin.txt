hello I'm so excited for you to watch this next tutorial video which is a guest tutorial video because the guests always make more sense to imparied a little less insane in a good way trust me today we have goal on leaven a inspiration of mine in fact he was the inspiration behind the clocks coding challenge that I recently did and port of the John Midas twelve O'Clock project goal on 11 has been making art with computers and a variety of things for a very long time you can see all about him more about him on his website which will be in this video's description he is a professor at the Carnegie Mellon University the director of the studio for creative inquiry there I hope you decide after watching this video that you want to learn all about goal 11 and he's gonna talk to you about something that I can't believe I don't have a tutorial about somehow I don't I don't even know how to say it modulo modulus something like that good thing I'm not making the tutorial all aboard the modulo coding trade thing with goal 11 enjoy hey everyone I'm going on 11 and I am so thrilled to be here on coding train today thanks so much Dan for having me here here's over here and today we're gonna talk about the modulo operator which is this weird non alphanumeric character when I first started learning the program I was looking over the shoulder of programmers and I saw you know lots of these strange characters and like plus I understood and I understood but like this weird % huh like what does that mean and so today the topic is the modulo operator modual oh okay so but you might see for example a sentence that looks like this you know like a equals 5 mod 3 or something like that and if it's processing you might say like int a or if it's JavaScript with p5 it might be like you know var a but the key here is this 5 % 3 what's that that's what we're gonna talk about ok so what we should really do is talk about the different parts of this this part here is called the dividend just so we know this part here is called the divisor okay this part here is called the remainder okay so the modulo operator is remainder after division and what does that mean well after you divide something by something else sometimes it goes in evenly but sometimes there's a little bit left over and that's the spare change that we're interested in so to do this we're gonna look at a table of the mod operation and it's going to look something like this I'll say here's the mod and here's the remainder after division and we'll start with five because I've got five fingers okay and I'll start to be here with five mod five now what is five by five one way to read that is to say I'm going to take five divide it by five and look what and look at what's left over well when I do that I have five divided by five well that goes in exactly once and there's nothing left over five goes into five perfectly so since there's nothing left over the remainder is zero now how about six mod five what's that that's a funnylooking five there all right six mod 5 well 5 goes into 6 once and what's left over obviously one one's left over so that's cool that is the remainder after division right how about seven mod 5 well 5 goes into 7 once and there's 2 left over right you know after you divide it and there's still five then six and seven so there's 2 left over how about 8 mod 5 easy there's three left over 5 goes into 8 once and there's 3 left over 9 mod 5 okay and well 5 goes into 9 once and with 4 left over okay and how about 10 mod 5 10 mod 5 be careful here 5 goes into 10 twice but the answer is not the answer is zero because there's zero left over after 5 goes into 10 right 5 goes into 10 twice zero left over now the thing I want to bring your attention to is this interesting pattern here which is 0 1 2 3 4 0 right because it's going to keep repeating that way if I say 11 mod 5 5 goes into 11 twice that's my bottom here ok 5 goes into 11 twice but there's one left over and back up the other way if I say 4 mod 5 what happens when this number is less than this one that's ok 5 goes into 4 zero times but there's four left over and three mod five well easy there's three left over after five goes into three zero times to mod 5 gives us two left over gives us one left over and here we see this pattern one two three four zero one two three four zero in fact if we're taking something mod five we will get a pattern that goes from zero up to five minus one or four we'll say 0 1 2 3 4 0 1 2 3 4 0 that's the pattern we're going to see so let's hop over to the code so I have p5.js up on the screen and we can you know just try and see what happens when we print something like 5 mod 5 does it actually check out let's try it out oh look it prints out 0 but if I say 6 mod 5 and I run that I get 1 let's run a little for loop and just kind of verify this for ourselves I'll say for VAR i equal 0 I is less than let's say 20 i plus plus and we will print something like i mod 5 okay i run that and if we look at what the result is we'll see this pattern we talked about 0 1 2 3 4 0 1 2 3 4 0 right now that's because we're taking something mod 5 let's try a different number over here in this in this mod place let's try I mod 3 we can extend this window down and extend this up and we see 0 1 2 0 1 2 0 1 2 remember I said it's gonna go from 0 up to the number we're taking the Motta of 1 so the remainder is 0 the remainder is 1 their major is 2 and the next one is a multiple of 3 so the remainder is 0 again alright in fact to make it even more clear we can print out I plus a space plus I mod 3 and we'll sort of see what this looks like together right we'll see o 0 mod 3 is 0 1 mod 3 is 1 2 mod 3 is 2 3 mod 3 is 0 again because 3 goes into 3 once with 0 left over so why are we really here today well I've seen Dan do a lot of lectures where he sort of mentions the mod operator in passing I thought be nice to focus on that and actually like see what we can do with it in its own way look how can we use it to do interesting and creative art and so I we're gonna set up some examples where we sort of see what the mod operator can do okay so here's a real simple boilerplate application let's get started with a nice little mod project I set up the canvas at 600 by 400 pixels and then I've set the background to white let's draw a series of lines whose lengths are based on a mod of an iterating number I'll say 4 I'm not typing what happened there okay for VAR i equals 0 i is less than let's say the width of the screen i plus plus and let's just draw a little line we'll say something like i'll say that there's a VAR i'll call it y and it'll be equal to i mod pick a number like 5 like we did before i mod 5 and we'll draw a line which is located I across starting from the top zero down to I across Y down and let's draw that now do we get anything hmm actually it looks like we did but you have to zoom all the way in do you see that oh it's happening there we're gonna have to kind of zoom in on that to see it better though let's choose not I mod 5 but I mod 50 and if I run that now we can really see it so what's this strange pattern well in fact it's counting up remember 0 1 2 3 4 0 1 2 3 4 when we were looking at I mod 5 here it's counting up from 0 1 2 3 4 all the way to 49 when it repeats again and then it repeats it jumps back down to 49 so from 49 to 0 so one thing that mod is really useful for is taking a number which is counting up indefinitely for example and producing from it a periodic pattern ok which is constrained tightly constrained to a region that we care about so here for example I have a number it's going up to the wid and which you know extends in this case up to 600 but even though the width extends up to 600 I which is going up to the with mod 50 keeps going 0 to 49 and 0 to 49 0 to 49 0 to 49 if I make that I mod 37 I'll get these smaller triangles to go from 0 to 36 right ok so let's look at another example of what we can do with mod so let's doubt this time we'll use the position of an object that's animating I'm gonna say that there's var X will be equal to the frame count mod let's say mmm 100 now a frame count as you may know is a number which is counting the number of frames since the program was executed if we want we can print it out so let's print just to see what this looks like we'll print X plus a space to separate it and then we'll print out the frame count so we can see what what it actually looks like so X plus the frame count and if we were to run this okay we'll see oh it's counting up to 100 but then X is keeps is is constrained to the range from 0 to 99 even though the frame count continues up indefinitely as long as we run the program okay which means we can use this for animation in some interesting ways if I were to draw an ellipse which is located at X across and height over to down which was let's say 50 by 50 pixels and I'll set the fill to my favorite color which is like a pink 200 200 then we run that here's this little circle as you can see over here and it keeps moving across this way and then repeating so I've gotten periodic repetitive motion in the same way by using mod of a continually increasing quantity so for my next trick we're going to use mod to determine whether a number is odd or even and use that to create a different kind of repeating pattern in this case a checkerboard so let's go I'm gonna say 4 when we turn off my little pink dot there okay for VAR i equals zero I is less than let's say 8 for a checkerboard 8 squares across I plus plus I'll set my background to middle gray so that it's a not black nor white and let's just draw a square I'll set my fill to white for the start 255 is white in a grayscale color now let's draw a little rekt will say that there's a rect and I'll draw it at I times 50 located at height over 2 down and we'll make it 50 across 5050 use its width and height and let's just draw that here we go ok great so I've got 8 squares as you can see right there 8 squares but they're all white now suppose I want to have every other square be black right black with a white black white black white black how do I do that well I can tell whether something is odd or even by looking at I'm odd to think about it I'm odd too if I were to be 0 0 divided by 2 well 0 and the remainder what's left over is 0 1 mod 2 2 goes into 1 0 times with one left over 2 mod 2 2 goes into 2 one time 0 left over 3 mod 2 well 2 goes into 3 one time with one left over and so we see that pattern again 0 1 0 1 0 1 that's our odd even odd even odd even pattern and we're going to use that so let's say the following let's do make let's make a little a little test for this we'll say if I mod 2 is equal to 0 which is to say if it's an even number if it has 0 left over then I'll set the fill to white else I'll set the fill to black so there we see the fill is white if I mod 2 is 0 otherwise the fill is black and we run this and look there it is white black white black for my final trick I'd like to show you just a kind of one last program that kind of summarizes in a way what we've already learned today about mod and this is a program that begins in the following way I have a constant called number of elements n elements and I'm gonna say it's ten for the time being and I have a variable called my counter which is gonna count the number of times that I press a key on the keyboard I set up my canvas that's a standard kind of boilerplate thing and then over here I have a in my key press function you'll see that I'm going to say my counter equals my counter plus one so every time I press the key I'm going to increment my counter for those of you who like to save a few keys on key pressed you can say my counter plus plus same thing and I'm also gonna make a little a little bell or a little a little click sound whenever I do that so downstairs I have some some playing stuff that plays a sound so let's just run that and here's the program the draw is we'll get into the minute but it's basically it draws some stuff based on the mod function we'll talk about how that works in a second down here and display text I serve show what the text is and then I got some stuff to load and play the sounds but the goodies are really all up here and set up and keep pressed let's let's just kind of run so here I am and whenever I click the button on the keyboard it's going to increment my counter so now my counter is 1 and of course my counter mod 10 in this case is 1 and then now I click it again in my counter mod 10 is 2 7 8 9 now when I press it one more time my counter is gonna increment to 10 but my counselor mod 10 will be 0 I can keep doing this and you'll notice here that when I say something mod 10 I'm actually just looking at the ones digit but if we change the number of elements to something unusual and prime like 7 then I'm looking after the remainder after division so this has all sorts of efficient uses if you have for example an array of fixed length and you're putting elements into it and you want to sort of constantly add to the end and you maybe pop off the beginning of pluses other kinds of ways of doing that with data structures in JavaScript but this is just a way that I can I can constantly what make sure that as I ain't come in something I'm constrained to arrange while producing periodic to agent finally some last quick remarks can you take the mod of floatingpoint numbers that have like fractional bits like can you do a mod 2pi or mod of 5.3 and the answer is yes but it depends on the environment you're in so in processing and in p5 you can but for example in Arduino you can't because it's an integer only system and that's actually more common and if you're using open frameworks which is a sort of C++ based environment you actually can't use the mod operator it with a little % for doing mod instead if you want to do floatingpoint mod you have to use a function called F mod which is a little a little different function specifically for floatingpoint modulus operated operations lastly what is something mod 0 mmhmm well actually it's undefined because you're asking for the remainder after dividing something by zero and there it depends on how your environment treats the division by zero in the case of of p5.js if I say over here if I say void setup oops excuse me functions that have a little bit of Java there and if I say print 5 mod 0 what's gonna happen in p5.js I'll get no it's actually kind of saving your but there but in processing let's run that here's processing ok what do we get if I say print line 5 mod 0 what happens oh I get an a RRIF arithmetic exception division by 0 so be careful you can end up with with problems if you do mod 0 and that's all for today thanks everyone