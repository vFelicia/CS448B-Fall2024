hello I am back in this video I am finally going to start to build the neural network architecture to make this color classifier I am going to take this data over here which is a long array of many many RGB values normalized to arrange the ER to one which matches with all of these one hot encoded labels and if you don't know what I'm talking about then you might want to go back and watch the first seven yes that's right seven parts of this tutorial series so it's getting very very long but this I think is I'm really getting to the good stuff I don't know maybe it was good stuff before maybe this is bad stuff I don't really know but this I'm really excited I'm excited because now what I'm gonna do and I'm gonna use tension flow yes but I'm going to create the neural network architecture so let's just remind ourselves what we have we have a data set most of the first seven videos of the series was all just about collecting and cleaning that data set and that data set is many many RGB values I think I have like 5000 which is actually is kind of very small for a data set but it's fine for this particular demonstration I have 5,000 RGB values each one is labeled with something like blueish or reddish or purplish these were crowdsourced but those got converted to one hot encoded vectors meaning if there are nine if there are nine labels well let's see then I have a vector that looks like this 1 2 3 4 5 6 7 s 10 9 9 and maybe this one refers to purplish if this particular element of this array of numbers has a 1 in it it is that that and that one is for a particular label this one sort of ok so that's what I have so what I I know that I need to have some kind of neural network and the inputs has have a shape of 3 there are 3 inputs are G B the outputs have a shape of 9 1 2 3 4 5 five six seven eight nine this is the output layer this has a shape of nine inputs of the shape of three outputs have a shape of nine because the goal of this is by what once this whole thing is trained and finished if I send in some RGB values what I'm gonna get is a bunch of numbers all between 0 and 1 and I'm gonna find the one that's the highest and and those numbers are gonna be the probability of this particular data point being a particularly Bowl and I'm gonna find the one that's highest in front of sign at that label who classification we're doing classification so now what goes in between all this now this is a big question and many different scenarios might call for multiple layers different kinds of layers there's something called a convolutional layer which I'll get to but I'm gonna do something really simple I'm gonna have a basic dense layer which is kind of the standard building block of neural network systems and I'm gonna give it some number of nodes so for the sake of our even right now let's pretend that I just gave it four nodes and a dense layer this output is also going to be a dense layer dense layer means fully connected meaning that every input is connected to every node and then every node in the hidden layer this dense layer is connected to every output now I'm going to let your imagination draw the rest of all these connections but so this is what I want to architect so let's now go and architect this now I'm going to do this using tensorflow dot yes and the layers API if you don't know about the layers API you're gonna watch my three or four part series about the layers API tutorial but I'm bookin I sort of talk you through it while we're doing in here so you don't necessarily have to watch that okay so if I come back again this is what I built so far I have all of the training data in tensors and you can see the shape of it I have 5643 RGB values and 5643 labels nine with nine possibilities okay so the first thing that I want to do is and I'm gonna do some goofy stuff with some global variables that I might not know that you know just to make my life kind of easier I'm gonna create a variable called and my model which I'm going to create in setup at the end after I've prepared all the data I'm going to say model equals T f dot sequential TF dot sequential so that now that's that's me creating a sequential neural network model it's sequential because it's a feedforward the layers go in this order so now what I need to do is create some layers so the first thing I want to do is make the hidden let's make the output layer now let's make that we should do it in order we have to do it in order and I make the hidden layer hidden equals TF layers dense and then I put some configuration stuff so I'd make a layer by calling TF dot layers and then I specify the kind of layer this is gonna be a dense layer and then I can pass an object in as an argument and that's where I can configure things like input so I don't remember any of this let's go look it up so let's go to the documentation let's go to TF TF layers and let's go to dense where do we see that sorry I'm looking around for it and it's right there in front of my face under basic so I'm gonna make a TF layers dense I'm gonna click on that and now I'm gonna see these are all of the things that I can pass into the configuration so I need to specify the number of units the number of units is like the number of nodes and I made up four right here maybe let's try 16 maybe we want to have some more than four whatever we can make up anything we want so I'm going to now say units 16 one thing that I know I need is an activation function again I can't cover everything in this video I have other videos where I've talked about what an activation function is and how it works but the idea is the activation function is the function that takes all the sum of all of the things passing through the network being multiplied by the weights and squashes them into some range and so there probably is a really useful interesting discussion about we could have about what would be the best activation function to use right here right now maybe later hello try some different ones but just for simplicity I'm gonna use I'm gonna make a bad decision and just use sigmoid this sort of like historically original activation function of neural networks I want to use the activation function sigmoid let's see what else do I want input dimensions so this is something that I definitely need to do here because remember this this this these inputs this is not actually a lair this is a twolayer Network it looks like there's three but I'm just drawing it with three things and the inputs being but that's not a lair but I do need to specify that three things are coming in so I need to come here and say the input dimensions input dimensions is three because I have an RGB value this should do me just fine for right now so then I want to also create the output layer output TF that's gonna be dense that's going to have nine units because there are nine labels again that's completely arbitrary that's just how I happen to prepare my data set now I don't need the input dimensions because the input dimensions can be inferred by the previous one the input dimensions to the output or the number of units of the hidden so I don't need that but I do need to specify an activation function and guess what I am going to use a different activation function softmax so I'm just gonna type that in right now I will come back and explain what softmax is in a separate video which I think will be the next video of this series I'm just gonna push this a little bit further now I'm gonna say model dot add the hidden and then model dot add the output so this is now me this is now the code for exactly what I diagrammed right here three inputs into a hidden layer with number of units with some activation function into an output layer with some number of units and an activation function okay so we have now built the model here's the thing the next thing that I need to do and I'm gonna do this in the next video what I need to do is create an optimizer so let's just put this in comments create an optimizer and I need an optimization function which typically in the past I've used mean squared error but I'm gonna use something called categorical cross Troup I don't know no no but it sounds really scary but it's not and I can't its I also can't spell it so I'm gonna create the optimizer and then I'm going to compile the model and then I'm going to train the model these are the next step so they need to do this is the architecture for the model people telling me I have an error oh yeah I have something extra extra comma here but so this one we do the next video and so what I need to do in the next video this is like just a few lines of code but I need to I mean I could just add them but I would like to try to understand a bit more about what why am i have softmax here instead of sigmoid or you or any of the other activation functions and why I might choose categorical crossentropy instead of mean squared error which is if you have happened to watch my ex or tensorflow TAS coding challenge or some of my other layers tutorials I I always just use mean squared hair so that's what's coming the next video I'm going to create the optimizer I'm gonna compile the model and I'm going to talk about softmax and categorical rules and true oh wait wait wait let's actually run this and see if there's a syntax errors no okay and if I just say if I if I look in the console here at model we can see there it is this is the object and it's got all this stuff in it alright see you in the next video you