hello in this video I want to talk about something called polar coordinates okay what are polar coordinates and I've been I've been making all these videos coding challenges where this scenario comes up over and over and over again I have a point here call this point XY I have relative that point I have some sort of angle call that angle angle what if I want to find a point out here based on that angle and a distance to that angle so this is what I mean by polar coordinate a Cartesian coordinate is an XY coordinate in a name for the French mathematician for any dickon's XY coordinates in a two dimensional space so we move over x spaces we move up Y spaces in computer graphics system you know we've got the we've got the flip thing where we move over X spaces we move down X basis and that's X Y a polar coordinate is thinking about a coordinate that is defined by a radius or a distance from a distance and an angle often using the Greek letter theta to define that angle the proper reason so both of these are useful ways of thinking about points in space if I want to do a spiral pattern polar coordinates are gonna be really useful because I could just change that angle and maybe shrink to the radius and I've got a spiral pattern the issue is that all drawing functions in computer graphics things like p5 KS or processing I'm filling the blank there think about core really only think about coordinates and Cartesian coordinates so the ellipse function which draws a circle takes an X Y the point function which draws a point the line function the rectangle function all of these require X Y so what if you are thinking about R theta and you want to you want to have your program run with this idea of r theta but you have to draw with X Y so we need a formula to come from polar to Cartesian we also sometimes want to convert from Cartesian to polar I'll maybe I'll talk about that in a separate video but in this video I just want to look at polar to Cartesian and the way to do this boils down to trigonometry trigonometric functions if I have this triangle I have a theta an angle here this is my arm right so I know this point what I want to do this is some X Y what I want to figure out is what is this point and I'll call this x2 y2 or whatever if we call this x1 y1 how do I get this point okay well if I knew what this was I'll call this DX as in like Delta x2 change in X and this is dy that change in Y if I knew these two values then I could say x1 plus DX equals x2 and and y1 whoops plus dy equals y2 so if I could get these two values then I could move from here to there so how do I get these two values from these two values and this is where's my eraser this is exactly what we need to do okay I've drawn the same diagram so many times now let's just let's just make the math happen okay so do you remember at some point in your life you might have heard of a function called sine or cosine sohcahtoa sine equals opposite over hypotenuse cosine equals adjacent over hypotenuse that's referring to the sides of a right triangle and guess what this is a right triangle right here this is opposite to the angle this is adjacent to the angle so sine of theta equals opposite D Y divided by hypotenuse which is R in this case cosine of the angle equals adjacent which is DX divided by hypotenuse which is R and these equations can be another way I can simply say D Y equals R times sine of theta now you might be asking how do I get from here to there one of the things you can do with an equation is you can multiply both sides of the equation by a number so if I multiply this side by R and this side by r this side becomes R times sine of theta and this side becomes just dy because dy times R divided by our our divided by R is 1 so this just becomes dy and DX also becomes R times cosine of theta so now I have those two formulas so if I have this XY point I have an angle and our distance for a radius or a length what to call it then I can calculate DX and dy based on that and get that point let's make that happen in the code so I have a very simple code pen here open I'm using the p5.js library and so the p5 just library is already loaded into this code pen project and the link to this code pen project will be in this video's description okay so if you want to know how to do that I have another video about how to set up a p5 just project in code pen so what I want to do and actually just very very simply is I'm gonna say what if I have let me just do this all in setup I think right now we can or orange raw it's fine what if I have an x and a y which is like 100 100 can you see this font is very very small ok I'm back with a bit smaller a big commitment larger font so now I just want to draw a point at that X Y and I must say stroke 255 to make it white there you go look at that tiny little point point okay now it's a happy point I wouldn't want you to say that for so long okay stroke wait let's make it a little bigger stroke weight 8 ok there's my point uh that's not a good location for this point let's put it further down at 300 ok now what I want to think about is let's say at this point I want to have an angle of 45 degrees so I'm now going to make an angle equal to 45 degrees now here's the thing so I want 45 degree a 45 degree angle 45 degrees because because Y points down will actually rotate me this way and I want to rotate up so a negative 45 degrees now I keep saying degrees because that's the way I tend to think about angles 45 90 degrees 360 degrees most computer graphics systems will think about angles in a unit of measurement called radians 360 degrees is two pi radians and that that's something that that I'm gonna just sort of ignore for this particular video and I'm just gonna say angle mode degrees so now P five is gonna think in terms of degrees and I'm gonna say angle negative 45 okay now what do I do here I remember I have a distance so I'm gonna just say maybe a hundred pixels out a hundred pixels and I need to calculate VAR whoops R equals 100 and I need to say VAR DX then equals R times cosine of that angle and dy was R times sine of that angle and now I can simply just now I can simply just make another point at X plus DX and y plus dy and let's see what we get there it is 45 degrees and I could also connect those and I can connect those with a line and you can see oops and you can see there have this line now I could change that angle so now I could say let me have the angle be mapped you know I should actually let me have it just be mapped to Mouse X so Mouse X which goes between zero and width I'm gonna have the angle between negative PI and PI whoops oh no no sorry negative Nydia 90 because I'm doing this in degrees and you can see here as I move as I move the mouse it's changing that particular angle okay so this is the idea there's a lot of applications of this you're gonna see that one of the reasons why I'm making this video now as I'm about to do a coding challenge about something called forward at inverse kinematics where if you think of this as one segment of a robot arm what if it's attached to another segment and another segment and how do those all rotate relative to each other so this is the kind of thing that you need for that I should mention that you can also I could have made this exact same p5 sketch with just the actual rotate function so there's a rotate function a draw a line align I could rotate it by an angle and that would actually be a wonderful perfect way of doing this as well I have some videos about that probably as well about how to do transformations using rotate and translate but I in this case for this kinematics example that I want to make having having the doing doing the polar to polar to cartesian cartesian conversion in the code is a good thing okay I will see you guys in a future hope this video was somewhat useful to you