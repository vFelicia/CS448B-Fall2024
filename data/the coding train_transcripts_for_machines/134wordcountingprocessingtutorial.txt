okay in this video I want to talk about the last piece of the puzzle for doing for for making a word counting application and processing and and then kind of talk about some ideas and some directions to go in applying uh uh this AB this new found ability to count Words in a body of text and what types of things we might do with that so just to start like this is I you know this is I I could probably stand here for like the next three hours and show you example after example after after example of visualizations of word frequencies in documents um this is a project from 2003 by Jonathan Harris called word count which is just looking at the frequency of words in the English language and we can see here number one the um the most common word the' number two of number three and and I could uh scroll through uh and and look at different words and I could find a word like hello and see where that word ranks um the the the reason why I'm looking at this though a this might be the type of thing as an exercise uh you find yourself um sorry let me just get back to the beginning here the this might be an uh something you take as an exercise to build a visualization of word frequencies and I'll show you a couple examples of processing that do this for you the other thing that I want to point out here though is in a lot of in text analysis uh there's a concept known as stop words junk words common words these words that seem meaningless that if we're trying to figure out you know is this a positive text a negative text is this a text by a very conservative author or a very liberal author what what might be by by uh what gender is the author of this text um word counting can unlock a lot of Clues to these types of questions or mysteries in fact and often there's this concept known as stop words okay well I need to count all the words in a text and then these words that are like really common in everything these pronouns these junk words I should just throw them away because what I want are the the meat the content words what words like happy or sad or or or words that have like a lot of meaning to them what what's interesting is that there's been a lot of recent research and I want to point you to uh this book called The Secret Life of pronouns uh the author James pennebaker goes through and disc and discovers the the the power of actually just counting the junk words themselves uh and there's also if you link here there's a lot of um exercises that you can try and you show you a picture and type some text about it and it will count your words and give you a clue into what you were feeling or thinking about or what some personality traits based on what you wrote so I just want to encourage you to take a look through some of these scenarios I'll try to have some more examples of different visualizations and different analysis topics this might be the kind of thing that you think about um uh doing an experiment around in processing but before you can do any of this stuff before you can do some type of analysis or some sort of visualization you need to figure out how do I pair a string of text with a number it's count okay to start this PA start down this path let's go back and think about a data structure a way of storing information that that hopefully that you that I that all of us are somewhat familiar with by the way I'm very selfconscious about what pronouns don't read that book if you ever want to just talk talk and not just think about am I saying I or we too much am I detached am I connected okay but I'm going to put that aside let's let's let's you and me I you we whatever let's think about an array what is an array an array is an ordered sequence of information an array of numbers for example might be like 32 91 3 13 14 67 90 these could all be counts 32 could be the number of times the word hello appears 1 could be the number of times the word goodbye appears so maybe we could have another array with strings in it and the the strings in that array match up with this array and that could kind of work there's there's a nicer way of doing this these an array is ordered by and and each element can be referred to by its index 0 1 2 3 Etc but what if I could name elements of an array what if I could say this element is named Dan this element is named James this element is named Joan etc etc etc what if I could name each one of these elements and this is actually quite useful if I were making an inventory list um I want to know like how many markers do I have I have 10 markers uh how many pencils do I have I have three pencils right this is the way we often store information in like a database I have this many of this thing this many of this thing the temperature on day was this Monday is 72 degrees Tuesday is 81 degrees there's a lot of scenarios where we want to pair strings of text with a value naming the elements of an array is one way of doing that and if I could say Dan appears 32 times in a text Jane appears 91 times Joan appears three times then this type of data structure an array that instead of numerical indexes has names would be very useful and in fact this is a very data structure in the life of a person who works with code and programs and that sort of thing um in Python this is known as a dictionary um it's also sometimes referred to as a hash or a hashmap and probably lots of other terms we could come up with to describe this type of data structure in processing processing has something called an INT dictionary and an INT dictionary pairs a string with an integer there's also a float dictionary which pairs a string with a floating Point number there's a string dictionary that pairs a string with another string so you know name and address these are useful data structures for storing information in a generic way so in dictionary is what we can use for uh oh associative array that's another way this is it's another term for this sort of thing anyway in dictionary is uh the perfect thing in processing to take care of storing words and their counts how do we use an in dictionary well it's an object like anything else uh I'm going to call it words for example is a new int dictionary so this is just making an empty int dictionary and then I can do things like say words. set you know hello to 50 so now I've set the i' I've paired the number 50 with the word hello in this data structure 50 and hello are stored together and I could always ask I could say words doget hello much in the way with an array we would have said like word if this was you know words index two that gives me the number three words. get hello that gives me the number 50 there's also a function which is going to be very useful in this particular example which is just words uh. increment so if I say words increment hello whatever the value of hello is increase it by one and this is the key piece that that that I'll use that we'll use oh my God that we'll use to build this word counting uh example for every word in the play Hamlet increment its value in my in dictionary look at the first word increment it look at the second word increment it and if it's not there um the the pro the in dictionary will know if it's not there give it its first value of one if it is there increase its value to two the next time it increase its value to three so this is exactly the data structure to we can use to do word counting so let's go and finish this example um and I quit out of the browser and remember where we were this is where we last left off every single word one at a time well now what do I want to do what I want to do is have an INT dictionary and I'm going to actually call it uh concordance so concordance is a term uh to store a list of all of the words or tokens in a document and something about their context where they are in some ways somewhat similar to the idea of an index uh and in our case what we what what I'm going to store in this particular concordance is every single word and the number of times that appears in that document so the first thing I want want to do is make a new int dictionary then what do I do let me go through every single word remember we what did we do in the last example we took the play Hamlet we joined it all together we split it up into an array every single element of that array has uh every single element of array is an individual word that appears in the play Hamlet so what can I do I can say concordance do increment where words index I um but let's let's actually uh let's start in a slightly simpler Place forget about Hamlet for a second if I say concordance do increment hello concordance do increment goodbye and then let's increment hello two more times imagine that this is the L I mean not imagine this is the code we're going to run right now increment hello increment goodbye increment hello two times let's let's now look at the concordance in the console and we can see what do I have down here I have oops I have sorry I have Hello three times and goodbye once so the dictionary the size is two hello is three times goodbye is once this works so instead of doing hardcoding all these words and Counting them I just need to go through every single word in the play Hamlet and call increment on it so let's come back oops and get rid of this and put this down here and comment this back in whoops and now let's run this and let's look in the console look at this most of the words almost all of the words in Hamlet appear just once but I can start scrolling up and we're going to find like oh yeah the' is 133 times so the this is not sort of is 576 times so you can see this is very very easily a very quick way to use this dictionary data structure to store um all the uh the counts of all the words okay so what are some things that we might do next so first of all I I want to stop doing this drawing thing which is making me totally crazy and we don't need index anymore so now Okay so something one a nice thing that we can do with in dictionaries it has a lot of lot of functions that'll that'll let us do more stuff one one thing we could do we could sort so I I I this kind of a a key piece of information here so what is the in dictionary doing for us pairing a string with a value pairing a string with a value a term a ter terminology that's important here is this is known as the key it is the key to unlocking the value and this is the value so if we want to sort our dictionary to give us all of the words in alphabetical order we would sort by key if we want to sort our dictionary to give us uh you know the most infrequently used words first or the most frequently used words first we would sort by the value so uh keys and values you're going to see and if you look at the documentation and and actually let's just go do this together uh if I pull up the uh Pro if I pull up the processing site and look for in dictionary and look at a lot of the possible functions here you can see uh has a key increment there's a lot of these functions refer to sort by Keys sort by Keys reverse sort by values so being getting feeling comfortable the idea of which is the key which is the value the key is the string the value is the number that's something you definitely want to get used to um so let's go and say concordance sort values reverse uh so sort values reverse should hopefully I spelled that no I did not spell that correctly uh sort values reverse will sort by the counts in reverse order meaning uh descending order meaning the highest counts appear first so if I run this and we look down into the console and kind of scroll up to the beginning we're going to see the most frequently used word is the the followed by and followed by of if I kept going through this though we're going to find though the capital T was counted separately those are not the same string uh processing is going to consider strings as case sensitive so though with a capital T absolutely different than the with a lowercase T So something that I'm that I think would be worth doing with the code here is saying two lowercase this function two lower case takes the string oh boy did I miss that important detail which I I want to fill in at some point takes the string and converts it to lower case so now what this is doing is any word that's in that text let's before we put it into the concordance let's make sure it's lower string so we should get more than just 860 times for the' because it's now going to be a combination of the lowercase and the uppercase so let's run this one more time and we can see here the' is now 993 times so we can see that now the words are sorted by their counts here and that's what we've got in the console okay The Next Step would be to visualize this information somehow well how would we possibly visualize this we need to somehow um go through every single word that is in that dictionary how do we do that I I think this is right so um there is a function called key array which gives all of the keys all of the words that are in that dictionary into an array of strings the reason why we need that is there's no um we need to look and look through all of the words in that dictionary and we need something to Loop through something that's easy to Loop through is an array so we can ask the dictionary to give us just give us all of the keys and once I have all of the keys I can say and I could say print line the key followed by and now the count is using the get function oops I can get the countown okay so look at this if I say get on a dictionary and we give it the key it's going to pull out the value associated with that key key whatever that string is give me back that value and that's in count so if I were to just say print line all the keys in their counts and um I'm going to say no Loop so it only does this once we can now see that I've got everything now here um and if I scroll somehow if I make it all the way back up to the top we can see there we go the ah oh I lost some of the uh console oh well anyway you could see that this is a way of iterating through the entire dictionary and getting every string associated with the account getting very it's very hot in here under these slides I'm getting very tired so I'm going to take a break in a minute you you don't really care about this but um anyway okay so uh so I'm gonna stop here actually what could I do I'm printing everything to the console but I could use the text function and I could use the count as the font size that would give me something very very close to exactly what uh we saw with that first word counting example that we looked at on the web and I think what I'm going to do is just show you also I'm going to pull up there some of these examples are there for you if I go to uh I'm sorry uh word counting example of so if I open up this example I don't remember what text this is using uh we can see here A Midsummer Night's Dream we can see here is kind of showing us a simple visualization you might try to create something like this the' is the most common word and is the second most common word uh I is the third most common word uh another scenario that you might look at which is kind of interesting to think about how you would accomplish something like this uh you can take a look at this example uh this example is um doing the same exact thing but it's actually animating over the text as it's counting all the words so for each word that it o those words should be wrapping to the next uh oh yeah they are um I I forgot that I just zoomed in so um so each word it's sorted and as it's going through the words are growing based on its count and the spacing is being worked out manually so this is something you could think about doing as well how could you create a visualization of the number of times a word appears in a document how could you make that visualization animated um you know some other things you might think about are what what does it mean like what if I compare this text with another text how do those words look next to each other um there's a concept known as TFI DF term frequency inverse document frequency so let's say I look at Midsummer Night's Dream and Hamlet they're both probably going to have the wordthe in it a lot but Midsummer Night's Dream is going to have the word puck in it quite a bit but that won't be in Hamlet Hamlet will have the word hamlet in it quite a bit and it won't be in midin stream those are two characters that are in those plays F IDF term frequency inverse document frequency is a means for looking at words that appear a lot in one document but not in the other and this might be a way of determining key words associated with a piece of text if you looked at all the New York Times articles uh what are some words that appear across all the articles but certain words are appear a lot only in certain articles would might give you a clue to the key words sort of automatic way of tagging those articles with some type of concept so you know we could go very far with this and you know I spend hours and weeks and video after video of of talk of of different word counting and text analysis scenarios um so this is just a little bit to get you started um and I encourage you to try some try some stuff out and look at the examples and we're going to put this aside and in the next set of videos we're going to start looking at other uh types of data sets besides just plain old text what if the what if we're getting a numerical data from some uh from some data source okay uh boy this was this video is 16 minutes and 49 seconds long right now if you're still watching okay