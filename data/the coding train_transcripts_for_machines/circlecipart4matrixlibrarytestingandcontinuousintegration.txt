(bell dinging) Alright, so, here we are. I am in another video in my series about unit testing, testdriven development, and continuous integration. And I have been building, I have another playlist where I'm building a simple neuralnetwork library in javascript to make some examples. This video is not about how the neural network library works or what a neural network is, you can go watch those videos for that. But with this video I'm going to do is I'm going to add tests to the library and then solicit contributions from the community to add more tests, and I'm going to have those tests run using circleci, which is the sponsor of this video. You can find out more about circleci here. And then we're going to have learned something cause this is new to me, I have never, other than the contributions I've made to P5.js, really done a testdriven development workflow before, but I'm excited about it and I think what's exciting about it is to make, contributing to open source, to open more pathways, to make people feel more confident in being able to review pull requests, to submit pull requests, to be able to run those tests. And also, writing the tests is a way you can contribute to a project, even if you don't know how neural networks work, you might be able to contribute to this project by helping write a single test for it. Okay, all that said, I've set up a bunch of things already. So I have this GitHub repository, ToyNeuralNetwork in JS, it's on GitHub. I have it locally. I have a package.json file which has a... Which assigns jest. Jest is the testing framework, open source testing framework from Facebook that I'm going to use. That's pretty much all I need. And that's, the dependencies are there. So, I need to write a test. So, the first thing, oh, let me first mention, thank you to Carla de Beer on Twitter, who did this already, kind of gave me the idea for this, in a way. I set up a series of easytouse automated unit tests for the current version of your Artificial Neural Network matrix library code. So, here are a whole bunch of tests. Now Carla used a framework called QUnit, so I'm going to click on her tests here, and I'm going to look under unit tests. And what's useful about this is, you can see, Carla's doing something smart, which I'm not going to do, which is actually creating an html page to probably run the tests in the browser to see how they work. But we can look at this, this idea of testing to see if matrix addition is working. So we can hopefully use exactly this test, but convert it to the syntax of Jest and get it to run. Okay, I'm going to attempt to do that in this video. So what other pieces do I need? So, this is the matrix library. The matrix library is a class called matrix that you can create matrix objects with and you can multiply those matrices, you can add things to those matrices, it's a math, a bunch of math code that I need in the neural network project. So, with Jest, something that I can do, is I can create a new file and I can call that file matrix.test.js. And this is where I'm going to write any tests that go along with matrix.js. And so let's go to the Jest, again, I don't really know what I'm doing, so this is going to be a bit of a struggle here. So, in my previous videos, where I went through a lot of steps of this, I just used this toBe function, right? Expect two plus two toBe, which toBe is like two plus two equals four. But there's actually a function in Jest that I'm just learning about now called toEqual, which'll check like, oh is this object equal to this object. It'll recursively go through and check all the properties of the objects or all the elements of an array. So this should be the code that I can start with. And, if I paste this into my test file, now what I really am testing is adding number to matrix, and I'm going to go and grab Carla's code, and just kind of grab this much of it at least. And I'm going to do this. And so what this is doing and saying, okay, make a three by three matrix, and these are all the numbers in the matrix, and add, and instead of having a variable right now, I'm going to just be simple about this. I'm going to just add one. Let's just add one. So the new matrix should be two, three, four, five, six, seven, eight, nine, 10. So, I want to expect a to, a.data, and I'll call this m, m for matrix, I think. M, m, m, m. toEqual and I should be able to now put in a twodimensional array with the values in it. Two, three, four, comma, three, four... Five, six, seven, comma, eight, nine, 10. So this, I believe, is now the test, right? Let's take a look at this all together, right? I could be doing something wrong here, but right? I want to create a matrix object, adding, and going to say adding a scalar, that's the name of the test, to a matrix. I'm going to add the number one to it, and then I'm going to check to make sure the matrices' data actually equals all of this. And I probably could have said expect m equal and then maybe done something like when object with data in it? Would that be better? I don't know. Well, let's do that. Let's try this. So, just out of curiosity, let's try this to see if it works. Now, I'm not saying this is the best test. There's probably more ways in Jest to structure this, to have it be more generic. I need to make lots of tests, this is just one, but let's just see if this even runs. And I'm missing some important pieces here, clearly. So, first thing I can do is just write npm test. And what it's going to do, it's going to find that file that says Matrix is not defined. So I need to make sure I export Matrix, and I say, modules.export equals Matrix. And then in matrix.test, I'm going to say, constant Matrix equals require dot slash Matrix. So this should be exporting the Matrix class, and then importing it here, so now it should know what Matrix is when I run that test. Running the test, now it failed. (laughing) Now, oh modules.export, okay. I can never get anything right. It's module.exports, can never remember that apparently. Let's run the test one more time. Failed. Matrix is not defined. Oh, funny thing! Funny thing, order is important. Matrix doesn't exist yet cause I haven't defined the class. So this actually has to be at the bottom. Let's try this one more time. Alright, so we got further, look at this. It failed because this is what it got, it got those correct numbers, two, three, four, five, six, seven, but what it received also had columns and rows and I forgot that in this case my matrix objects, if I look at the constructor, have not only the data, but columns and rows. So I need to go back to my test and say, expect, what do I really expect? It should have data, columns is three, and rows is also three. And, you know, the order shouldn't matter here, the properties of an object are not ordered, but I like to put columns and rows first. And really, rows should be first, just in terms of my mental thinking, it's always rows by columns. Okay, so this should, hopefully the test should pass, right? And, this would be interesting to not have those be equal. Okay, so let's run this again. Let's run the test and the test passed! Awesome! So we've written our first test. Now, have I done the best job ever in terms of optimal, thoughtful, testdriven development? No, but I've got a start. I've got an actual test here. If somebody were to try to refactor, if I were to try to refactor my add function, and do it in a different way, and it didn't actually add the numbers up correctly, this would fail and I would know. But, I don't want to do any more testing, what I want to do now, well, there's a couple things. There's one important detail that I've missed because this is, right at the moment, just clientside code only, but this requires stuff, and this module.export stuff is going to mess that up. But, let me at least get this building on circleci. So this repository is already on GitHub here, and now I'm going to go to circleci, and I'm going to say add a project, and I want to add toy, why is it not showing up? Oh there it is, I just had to refresh. I want to add the project ToyNeuralNetworkJS. I'm going to set up the project. It's going, I'm going to copy... So as you might remember if you watched the previous videos, I need to create a new folder called .circleci, and in that folder, I need to create a new file called config.yml, and then I can go here and copy to clipboard all of the setting stuff. Now I'm going to leave more stuff in here this time. So, I'm going to check and just I want to use the same version of node that I'm using here, 8.9. So this is the version of node that it should run the TestWiz. I'm going to leave this working, I don't think I need this working directory thing, that's optional. I definitely need to checkout the code. Restore_cache, let's see if this helps speed it up. So this should be a thing where it saves a cache of previous dependencies that it's already installed, so it doesn't have to reinstall them every time it needs to run the test. Run is npm install, I'm using npm, not yarn. And then run the test is npm test. So I'm going to leave all of this here, and then I need to push this to GitHub. Git status, let's just make sure. Oh, I modified all this, I added the test, I modified matrix.js. I'm going to... oh and look at this! I've got a problem here, I've got a typo. That's got to be circleci. The e key (laughs), as anyone who watches my videos knows, the e key on my keyboard only works about 75% of the time, so, often misses it. So that should fix that. I'm going to say git status again. There's .circleci. I'm going to say git add ., git commit m, adding unit tests with circleci. I'm going to push this to GitHub and there it is, it's on GitHub. I'm going to over here to GitHub just to make sure. I see .circleci is here and I should be able to say Start building. So I'm going to click Start building, and make sure this test runs. (light rumba music) Npm install is happening right now. ♪ Npm install song. ♪ It's creating the cache. Yah! It's pipe failing! Oh no fail, ah! So why did the test fail, let's take a look. Cannot find module dot matrix from matrix.test.js, hmmm. Must be a path thing. Oh, no it's not! I just made a silly mistake. A very silly mistake. It is kind of a path thing, it is a path thing. I made a silly mistake which is that I was thinking capital M because it's a matrix class and I want to reference it as capital M, but the filename is actually lowercase m. That file is called matrix.js, and on my Macintoshy computer thing, it didn't really care about that, it worked, but the circleci servers are obviously, clearly casesensitive, in terms of what they're running. So let's git add, git commit, fix uppercase issue, (laughing) that's the worst description ever. Git push origin master, and I think it will autotrigger a rebuild. (light rumba music) I'm waiting to see if it does it automatically. Yup, it's running. Still running, still running, oh, fixed, check, check. (laughing) So exciting, look, look, look! It checked out the code, it restored the cache, it ran npm install, saved the cache, and it ran npm test, and my test passed! Woo hoo! So now, I am going to make it a moment where all of you can now contribute and give me some better tests. So what I'm going to do here is I am going to do, there's a bunch of settings I need to configure. I need to go to Settings, I'm going to go to Branches. I'm going to protect master, Protect this branch, Require status checks, I want to make sure circleci is checked, and I'm also going to include myself. I don't want to be able to do anything, even though I'm the administrator, I still have to have my tests pass. I'm going to do Save changes. I need to add, I need to do one more setting, which is very important. I'm going to go back to circleci. Look, I have these two projects, TestingTestTest was the build project I made in previous... In my previous video tutorials where I did this a little bit slower, stepbystep, and I want to check the settings for ToyNeuralNetworkJS. I want to go to Advanced Settings, and then I want to check, here's the really important one Build forked pull requests. I want to run the tests for people not just from the coding train official organization, who are kind of contributing to the project, who can make a branch within the repository, but people who are just from the community who have forked the repository and then are sending back a pull request, I want that. So I'm going to click that to on, that will live save. There might be something where you have to like go back and rebuild any pull request that was like submitted before I clicked that, but now, going forward, they all should be fine. And so, I'm pretty much done, except I forgot something important. So, here's the thing, what I'm actually working on here is a clientside javascript project. (coughing) At some point I might want to make this a neural network library that could be a node nodule and I could have more elaborate, fancy build process to deal with all of this, but right now, I've just written these tests just for this matrix.js file that lives as part of this web project. So this is actually where it's being deployed and used as part of a webpage. The problem is, I'm running a web server already. If I go and refresh that page, which I just did a second ago, this is the error I'm going to get module is not defined. So while the test might run, because I've set up this export of matrix properly so the test won't run, the clientside javascript knows nothing about node modules. And again, there are sophisticated and better ways to handle this, but I'm going to do this with a slightly, just like a quick trick here. And I'm going to say, here, is that I only want this to happen if the environment I'm running is within node. And a way that I can do that is, I can actually, I mean ideally I would just say this, if module, like if it exists, then I can do that, but this actually won't work cause it's still not defined. But a trick that I can do is, I can actually ask for the typeof it. Because the typeof it will return, I could say, if I'm just like here, if I say typeof module, I'm going to get "undefined" in quotes. So I can actually just check, hey, as long as it's not equal to undefined, then go right ahead. So now, I should be able to not have this error in the browser, and, watch this, git st... Let me add this change, git status, git add, (deep breathing) checking if node environment for module. And now, oh, I did mean commit, yes. Oh, two m's, three m's, how many m's are there in commit? I like m's. Okay, now, remember, git push origin master. (dramatic orchestra flourishing) I cannot do it, I have protected myself. So I am now going to say, even if I feel, so one thing I probably want to do is I might as well run. I might as well make sure the tests still work. Yeah, so the tests work so I can feel pretty confident, it's fine even with that change. Notice the recognizing the module, and I can say git push origin master and then I'll call this branch, modulefix. I sent it up to GitHub. I am now going to go back and I'm going to go here. I'm going to say Compare & pull request. I'm just going to Create this pull request and now I am going to wait. (light rumba music) C'mon, circleci, tell me that my test has passed. Ah, somebody approved these, thank you. Okay, now I'm going to hit merge. Merge! Wonderful! So now, I have a project that involves testdriven development. It has unit tests for the matrix math, though it is as a protected master branch on GitHub, and only pull requests that run passing tests will be able to be merged. So I am now opening this repository up to the community. Obviously, I have a lot more work to do on it to make all the neural network stuff work, and you can imagine what other tests do I need to write. But this is why this is important. This matrix.js library is pretty terrible and inefficient and slow, so ultimately, I might like to continuously refactor all these math functions, and so I might start using like things like reduce or fill, and I want to make sure that I didn't break the actual math. And this process of testdriven development will allow me to do that and will make it easier and nicer for those of you who want to, to contribute as well. You know, maybe I'll swap out this whole thing with another matrix math library, and then, but use the same function names and does the code still work? There's so many possibilities. So, I hope you've enjoyed all of these videos about unit testing, continuous integration, and testdriven development. Is it possible that I've actually done this? Because I am the least testdriven development person in the world. But I think it's a good thing and I'm hoping to use it more in project in the future. Thank you again to circleci, if you're interested in signing up, you can check out this link here, and for sponsoring these tutorials, and I look forward to seeing you in future ones. I have one more that I want to make at some point, so hopefully, there might be another video on this playlist. If you're watching this right now, you can check. If it's not there, you can complain in the comments. I love complaints. Warms my heart. Goodbye! (kissing) (bell ringing) (upbeat techno music) (bell dinging)