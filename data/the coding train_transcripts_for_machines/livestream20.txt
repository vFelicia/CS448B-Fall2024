school for poetic computation here in New York City it is Friday March 16 or is the date on this computer it's gone whatever its 17th oh my god this is terrible hair I can look over here I have the date over here 18 I knew that this friday March 18 about 440 eastern time and I'm here this sort of like a lastminute effort to record a video this week I have not been able to have been sort of fiddling with lights and trying to get things set up and life gets in the way next week I hope that I will be having too much longer sessions and I hope that next week I'm actually get started and doing my git and github tutorials which i plan to do but today I'm also more to sort of starting doing another test here in this space I have a different whiteboard set up here I'm going to see how this works I'm probably a little knocked it over oh my goodness it's very I'm gonna get one that's mounted to the wall but this is just a test where's a pen I'm probably out of focus which I need to deal with but maybe this is not out of focus and readable tell me in the chat if that's the case I don't know if there's anybody actually watching right now let me go check this live dashboard to see if there is anybody it says there are five people who I can see that that looks pretty hard to see tell me feedback wise about how that whiteboard looked how is that hello everyone in the chat so i thought i would do i had on my list here I'm trying to look for like a little quick and dirty topic to do i thought i would do I could do p5 Jess instance mode actually just I'm over here sorry i thought i would do si not contrast isn't great okay let me look over here see if i can improve this I wonder if actually I'm going to change the lean on the camera here for a second that's probably a little bit better that that looks like that's a little bit better like it's the lighting in here it's not good i need to work on that there's all these like shadows let me try pointing this up and putting this up boy oops I turned that off and I turn that off boo what did I press a and press anything now I'm in the dark but this might be better hey I have an idea sorry let's try to get the lights here put this over here oh this doesn't oh my goodness this is riveting for you to watch I'm sure this is I need a piece of cardboard or something here we go here is a piece of cardboard I'm going to put that over here and see if I put this here and point that light at me from over there there we go there's a little bit of glare here but I feel like that's a little bit better this here how's that how's how's that okay that's gonna have to do for right now gonna have to work on this over here hello I'm back over here uh yeah I should get I should get somebody who oh good people are saying it's better maybe I made it worse in the meantime I should get somebody to come in here help me which I will but mostly I just don't have a couple lights that I plan to have and I don't have the right plugs I don't have the right whiteboard but this will do for today ok so I was going to do and something called a minimum spanning tree let's see if I google that this is perfect and let's look at the definition of this it connects all ok so what is the minimum I so first of all I'm interested if you can tell me in the chat what this might be useful for I'm not doing my video tutorial just yet I'm just kind of doing my prep so and I don't have a lot of time but I think this will manage so what you can see here is that a minimum spanning tree is a spanning tree of connected undirected graph it connects all the vertices together with the minimum total waiting for its edges so in other words translation if I have a whole set of points and those points are just randomly in a window in a canvas how can I have all the points connected to each other and if you add up all the distances you have the minimum distance so you can see that here in this light oops you can see over there in that image there's lots of different ways you could connect all those points but those the particular darker edges that are there it happens to be a path through all the points which has the minimum distance okay oh look on this page is even gonna say there are quite a few use cases telecommunications company which is trying to lay out cables and new neighborhood okay I that makes sense okay that's good that's a good so this is like a computational geometry problem so I thought what I would do is build a p5 there's a algorithm called prims algorithm let's see if we look up that it's a greedy algorithm that found a minimum spanning tree for weighted undirected graph so the way the prims algorithm works i'll diagram this out and we do that tutor I'm just sort of talking this through to practice is that you could start with you can start with any random point and you find the point that's closest to that and then you go to the next one and you find the one that's closest to that etc etc etc I know that's not right you find the one let me look let me look I don't have I have my example that I made the other day if you're you start with a point and you look at the distance between all the yeah maybe that is right and then you then it's reached you draw a line are we're going to try it we're going to try making this hmm this sound about right let's read this by building this tree one vertex time from arbitrary starting vertex adding each step at each step adding the cheapest possible connection from the tree to another vertex that is what i said ok I think this is going to work this is a very simplistic algorithm it's not the most efficient but it's an easy way and it's kind of a visually it's kind of fun to see what happens once you start clicking around the screen and seeing it happen in real time so I think that anybody have any questions about that i think i'm going to try to just build that i'm going to the quality is good everything's good i'm going to try to just build this i'm going to diagram it i'm going to build it hold on we get p5 open i almost want to like do it yes it is if i do want to open it let's see here and i'm going to save this as i made this the other day but i have it on this other computer over here i'm going to save this as a prim our minimum spanning tree and I want to just see I'm going to maybe get a few things set up in the code already i'm going to look at my example because i need to have a variable called vertices which will be an array for all the vertices i'm going to create a canvas 600 x 400 or something like that or i usually do 640 x 360 i'm going to do that and i'm just going to say background 0r like 51 something like that and i'm going to i'm going to what i'm going to do is add also mousepressed vertices dot push so VAR v equals create vector i'm just getting this setup and here i'm going to say at the bottom of this right so that now i fill 255 ellipse VX v dot y 16 16 and stroke 255 something like that so every time I click oops I don't know what I'm writing their vertices index I vertices index I every time I run it will see there's a vertex there so what I need to do now to add to this program is connect all those with lines where everything is connected and you add up all the distances together so it's the least amount of cable that you need to connect all those if this was some sort of like electrical or telecommunication system and then we're going to I'm going to look at my solution again just to like kind of make sure draw the points reached unreached all the ones are first unreached and then start at the first one at find the record so you need the one that is the huh reached I'm o for everything in unreached find the shortest ah ok so acts a little bit less it's a little bit more complicated than let's see then for everything that's in so I'm thinking this through I have to have be ready for this I don't know if anyone's like I'm sure that just have maybe I can get this open over here so you guys can see what I'm thinking of so P five dot so i made this example the other day p 5 ide oo KU app com / yeah that should work I made it in the web editor the p5 has a web editor which is a very very alpha e project i need to login let's see if you guys are have any other questions for me or anything in the chat people or somebody asked last time you talked about summer internships but never got around to describing it well somebody had asked about google Summer of Code and unfortunately the processing foundation was not selected for google Summer of Code this summer so we don't have our usual summer internships but I'm seeking other sources of funding or other mechanisms for having them so I don't have an answer to that right now but if you're interested feel free to send me a message on Twitter or if you're a source of funding for the processing foundation please let me know okay open recent sketchbook I should have something in here minimum spanning tree open does this work open sketchbook come on oh wait me left it okay open sketchbook Oh doesn't seem to be working spanning okay let's see let me do something crazy here well you really oh wait which is I'm going to read some i'm going to read off the number the hashcode 5695 5695 d s f18 593 140 300 14 f to ec almost there everybody let's see ah there we go okay I think there was just like some sort of caching issue so this by the way is it the finished version of what I'm about to try to make here you can see that this works and I just wanted to kind of peek at the code a little bit to remind myself how this works are going to build it from scratch though so let's let me let me talk this through for a second so we start with a copy of all of the current vertices every vertice every vertex is not a one that's reached unreached one being one that we've used already we have a line connecting it unreached being we haven't connected it so we start with them all unreached we pick a random one or the first one I heard a door I don't know if somebody's here I should go look I still have my mic on oh hey how are you good okay just the neighbor okay um I'm going to get to the video tutorial soon the part that will actually be recorded and saved for posterity okay so all of the all of the knows lots of hearing noise down so all of the vertices start out as unreached except for one and we just picked the first one which we could pick a random when we pick the first one and then we try to find as long as there are unreached vertices go through all the all the ones that are reached and find okay for every reached Fort vertex which is just one at the start will diagram this out once I remember how this works I shouldn't this before this is a bad idea that's complicated algorithm it's not that complicated and we see if they're doing the chat wow there's still 16 people watching me try to like remember how this works as long as there are unreached vertices start off with a large a large random large distance we're going to fight try to beat that distance so we have a reached an unreached so for every reached vertex find all of the check the distance between that reach one and all the unreached if the distance ah got it got it got it so this is for the case that it's only for the IC so here we go now if I click here I cannot can let's rerun this okay this totally makes sense now so here if I click here and I click here these two get connected and then this one here this gets connected now the issue is as I'm going through and trying to fight I'm and there's a new point right if there's a new point here I'm about to click a new point here I don't want to connect the last one to it I want to connect whichever one of those happen to be closest which happens to be this one and same thing if i go here you're going to see you then those two get connected so okay so this makes sense in my head now it might not have made sense to you but I just had to figure this out so that I could explain it from scratch okay here we go so now i'm going to minimize this i'm going to have this set up we're going to talk about i'm going to run run this over here and i'm going to start i'm gonna hit record in a second and I'm going to make a video which shows how to solve the minimum spanning tree of just recording video tutorials yeah just this ignore me this is actually live right now live on YouTube it's okay there's only there's only 15 people watching but it gets recorded more people watch later yeah you come say hi if you want ya see so this here is me and this is the code this is the neighbor Joe yes awesome my calls okay thanks for stopping by you later okay alright that was exciting moment you have here happen okay so I'm about to it's good that that happened before i actually hit the record button so now i'm going to do the record the tutorial for posterity which is solving the minimum spanning tree problem which connects a set of vertices all connected with the least amount of if you add up all the distance you have the least amount of distance ok and then we're going to diagram it going to code it and got this example going and that's going to be the video tutorial ok all right anybody have any last and this was this was this is very dangerous here I don't know this as well clearly ok but alright so here we go I'm hit record hello this video I'm going to give myself a headache I can tell already but I'm here to describe to you a problem called the minimum spanning tree it's a problem from computational geometry kind of thing and I'm going to describe that problem we're going to look at a solution to that problem known as Prince algorithm name for somebody big print presumably and then we'll implement it in pjs and as always I will also upload a processing version of this as well but i'm going to use p 5 GS to actually write the code so first let me just show you before i describe to you what the actual problem is and the solution let's just look I have a simple example preset that's gonna that's the foundation for what we need so if I just look at the code for this example for a second first there's just an array a blank array calling it vertices because every time I click the mouse I'm going to create a vector a vector being an object that stores in X and a why so I'm going to create a vector with mouse x mouse why where the mouse is and then I'm going to add that vector to an array and then you can see in draw here I'm just drawing an ellipse for every single one of those vertices so if i run this program and i click you can see here that every time I click a vector gets added to that array and I draw a circle for every one of those spots so the question is what is what is the minimum spanning tree problem and this is a temporary whiteboard that I'm going to see how it works so bear with me please what is the problem how what is this problem once you have these points so let's say you have the points and I'm going to make some random points the minimum spanning tree problem says how can i connect every single one of these points every single one of these points must be connected to another point and if i add up all the distances i have the smallest amount of distance so there's lots of ways that I could connect them all like I could just do this and they're all connected but I could also have done this and they're still all connected and I could have also done this and they're still all connected and if I have these I made these pretty evenly spaced out so probably if I hope moose is scary probably if I were to draw a diagram like this and then if i put other one here right they're all connected like this but that's probably if I add up those distances it's going to be a lot greater than if i connect to them like this so and it doesn't have to be a closed shape it doesn't have to be a continuing path the only thing that has to happen is that every single point has to be you have to be able to get from every point to every other point somehow so this is the kind of application that you could probably create some kind of interesting visual art project out of but it's used it's a relevant practically as practical applications for example if you wanted to connect everything with some kind of like electricity or telephone telephone people use those anymore telephone signal you know and you only had a certain amount of cable like what's the way to have them all connected and using they'll you're saving the most money using the least amount of cable and I'm sure you could come up with all sorts of other scenarios for where this is relevant so how do you solve this problem okay so there's a variety of different solutions to this problem some of which are more efficient some of which are less efficient some of which do it you know it more quickly or less quickly but the solution i'm going to show you sorry is called prims algorithm and it works as follows what if we start with a random point essentially let's start with this random point okay now what if what we do and we have this i'm going to introduce this idea of an unreached vernet vertex or a reached vertex so at the start all of the vertices are unreached there's no line connected to it they're all unreached vertices I can't get the telephone signal to them and we're going to start with one single and this is now a reached vertex so what I want to do is say okay what can i connect this one to that has the least distance so this particular vertex I can check every other one and I can see and I check the distance and this one actually has the least distance so now I have two reached vertices this one is reached and this one is reached now what I need to do is the same thing I need to find not just the one that's closest to this one but the one that's the least distance between this one or this one so in other words if if this were here I'd but you know this is a little bit longer than this but shorter than this and this I'm going to go and i'm going to go ahead and connect this here but if this one is if this one is closer to this one I'm going to go ahead and connect this now i need to say is this shorter than this then this then this or this and this so everywhere i have to check every single reach vertex against every unreached vertex and find whichever pairing has the least distance and then that gets and maybe maybe right now it's this one and all these are reached and then maybe right now it's this one and it's this one and then maybe it's this one maybe it's this one I don't know if that's exactly right but you can see that eyeballing it that's probably a big solution so this is the problem now let's go and write the code to solve it ok I'm coming over here ok so what is the first thing that we need to do well the first thing we need to do is is implement this idea of reached and unreached so I'm going to create in the draw loop I'm going to create two new arrays 14 to store all the vertices that have been reached and one to store all the vertices that haven't been reached at the beginning what's going on here every single vertex should go in sorry in unreached so i'm going to write a loop here it so i'm gonna say unreached dot push vertices index I so this is me just essentially cotton and I'm sure there's up somebody in JavaScript land could tell me a better way to copy an array into another array but one way to do it is just say hey let me go through everything in this one array and put it on this other array so at the beginning all the vertices right all the vertices are unreached every single one ok come back over here now I want to pick one vertex to start being the one that's reached I need something to go in the reached array so i'm going to say var start equals unreached index zero and then i'm going to say reached dot push start I want to put i'm sure i could you know whatever this is silly to have a separate variable i'm going to just put a unreached index 0 0 not o i'm going to put one the first verdicts from unreached in reached just to get us started okay once we have that i need to do something else if I'm taking a vertex from unreached and it's going and reached I need to remove it from unreached so i need to say unreached splice 0 so the splice function set is like delete delete the zero element only I'm not done yet the splice function wants you to say not just which element do you want to remove but how many so so I want to just remove one element from that zero spot okay now now I have an algorithm I want my algorithm to go as well I want the goal of this is to get everything from unreached to reached and unfortunately this camera shut up because i forgot to start it at the beginning this video so i want everything to go from unreached to reached so here we go i'm going to say as long as unreached dot length is greater than zero I can keep going so maybe there's another way in JavaScript to test if the array is empty or not but basically what I'm saying is as long as there are still unreached vertices we haven't finished the algorithm yet so every single cycle remember every single cycle we need to say what are the reached vertices for every reached vertex check the distance against every other unreached vertex and find the shortest distance so in order to find a shortest distance amongst a bunch of candidates we always have to start with something that's kind of the record if I was trying to find the longest distance it'll be easy i say this is the distance bigger than 0 then it's currently the longest distance so the first thing I need to do is just come up with i'm going to call it record some like large number a hundred thousand so there's not going to be any vertices that are a lot more than a hundred thousand pixels from each other in a 640 x 360 window then I need to say for every oh and I probably shouldn't know it took use I for every vertex in the reached array check every vertex in the unreached array okay for every vertex in the reached array check every so ever every reach vertex check every unreached vertex and what do I need to do the thing that I want to know is the distance between and let's let's say v1 is reached index I and v2 is reached index J and I want the distance between v1 x v1 dot y 2 V 2 X + v2 dot y so the core algorithm here is check every distance between every reached vertex and every unreached vertex now if the distance is less than the record then the record is the distance so what we're doing is we're saying I want to find what is that shortest distance at the beginning the shortest distance is a hundred thousand and the first distance is like 300 oh it's less than it that's the record then the next one is 250 oh that's less than it that's the record then the next one is 400 oh that's not the record then the next one is 100 oh that's the record so we're doing every single one always if we have a distance that beats the previous record we have the record so this is the core algorithm for finding that shortest one but if I find that shortest one what do I need to do i need to store also the two vertices that are involved in that shortest distance so I I need to have in addition to just the record i need the reached i'm going to call this the our index the reach index and the unreached index so if this is the case if I found that record our index is I that's the index from this array and you index is J and in fact I don't I could actually instead of storing the now what we'll do that we'll do it with the distance with the index so I got those so so now you can see here I now AM store I've Luke chef ever checked every reached every unreached found the shortest one and once that's done once that's finished what happens I need to do exactly what I did up here right I need to say put take take the unreached one and put it in reached and then remove it and then remove it from unreached so this is my algorithm to i found that new vertex remove it from reach moved from one array and put it in another array there's probably I probably could like do this all in one fancy line of code but it's nice to have it in two and then while I'm here I might as well draw a line oh I don't I don't have those as global variables that's fine I might as well draw a line between reached our index dot X so this is going to get very long very quickly alright next dot y and then unreached unreached index dot x unreached unreached index dot y ok so let's see I don't know did that work ok so line 45 I'm esta Leo because you know what I better not here's a problem right i mucked around with the arrays and then I drew the line after so that's definitely not going to work right I need to if I'm drawing the line right before I start moving them around I should do that so let's just see here ok so we got kind of something happened and then and then something didn't happen ok so so let's think about this for a second what what so this is the core idea let's let's review for a second how long have I been at this only 13 minutes that's not terrible so we started with every time we every time there's something slept and unreached we start with a record we have two indices we go through everything in the reached check it against everything and under cha look at that that's not right v2 equals reached so the one of the second one is to pull something out of the second right that's clearly not going to work and yeah this looks like it's working look at that and I don't like the way the lines will look here so i'm going to say stroke 255 stroke weight too and here and you can see there we go we have our minimum spanning tree as i add points and conceivably by the way you know if i wanted to just demonstrate this in a different way i could say i could just add like 50 random points right when the program starts and I could say random just with a random height and do this you can see every time I run it we get a new and the one thing I'll mention about this is I'm doing in this program you notice the whole algorithm is happening in draw so it's recomputing the minimum spanning tree over and over and over again it doesn't need to do that it but you know it conceivably if the points were always every time you add or subtract a point you would need to recompute it and I'm so you might be if you were using this and something you might be more thoughtful about only recomputing it at a certain point the other thing I'm not doing here is this particular like drawing is just sort of drawn I can't do anything with it so if I were if I wanted to go further with this I would probably make edge objects so in other words I might have an array of points or vertices or like a vertex object I'm just using the p5 vector object with create vector but then I might create these edge objects so the things that I could animate or change color and put those in an array as well you and the place that I would do that is right here right instead of just drawing a line like I just said I figured out the vertex I'm just going to draw a line there I could actually create that edge object alright so this is pretty much the end of the video I'm actually going to look though I don't know if people are posting quit i have this even though if you're watching this you might be watching this like 10 years from now i actually am recording this live and there are some people watching this live so I'm going to you could shut this off now if you want but I'm gonna just looking to see if there's any questions somebody points out that okay there are two improvements that are pointed out in the chat which I'll mention let's see if they still work so first I just want to make this with just 20 so one is that I could copy the array by saying reached reached equals unreached the JavaScript function can cat which I guess is like concatenate no but then that doesn't it's not an array it just joins them I'd have to then split it or something but and then Oh reached push unreached shift is another way to put the first one in some people are so there's all these other array functions but that one's not going to work I'm sure there's another thing to put it in the comments who read the comments absurd will be fixed in there there are all sorts of other kind of array functions is there anything else I'm missing here I think we did it I'm gonna post this code a link to this code please post your questions in the comments because I I don't know how well this was explained or if this makes any sense at all but I'm glad to have me in a video today on Friday it's fivefifteen I got to go we just look is the code available somewhere yeah the coat someone asks the code is going to be there be a link in the description it's not available yet if you're watching this live I'm going to stop the recording and then talk to the live people okay bye thanks for watching this okay uh so I've got to go but the live chat yes the code is not currently available but I'm hitting save on this and I will um i will go i'm going to post it later tonight when i post the video recording if you want to find it now you can actually go into this particular URL you're going to probably pause take a screenshot of that but I do have a version of it at that URL that's up top that I did the other day okay any other questions that's okay sorry that could cat it was a good idea though does anybody have any other questions they want to ask I'm going to poke around here and see if I have any other notifications any Twitter questions okay I'm hoping that this one will get that people will find my youtube with this particular video because I feel like this is kind of like a minimum spanning tree kind of thing that people would search for all right thanks I'm going to be back next week tuesday hopefully friday hopefully maybe thursday i'm going to talk to do a bunch once i get a new whiteboard in here this whoops this whiteboard it wasn't the best solution but it worked hopefully for today once i get a new whiteboard in here and get the lighting better i will i will be back and I'm gonna hope to do some git and github tutorials ok what's the best way to contact me about a question youtube comments if if you have a question that's related to one of the videos i always try to answer them there twitter is fine but if you have a complex question what I often suggest is posting a question 24 m dot processing org it's p5 Jess there's a p5 Jazz category and then you can tweet me or email me the link that waits I like to answer programming questions if I can in like a public forum just so you know it so there's like a record of it and helps other people too but my email address is on like my website you could dangle at Schiffman net oh I'm not if you can't even see me this whole time I've been talking and you can see me at all but hopefully you heard that ok twitter is at Schiffman ok thanks everybody i'm going to hit stop now and i'll be uploading the 17minute video chunk soon