good morning welcome I'm here live uh on what will be um uh I think this is coding rainbow sauna Edition I forgot the episode number but it's very very hot today in New York City um this is my last live coding rainbow episode for a while I'm going on a brief couple week Hiatus I may be back the very last week of August if not not I will certainly be back the first week of September and I have lots of exciting what I hope to be exciting and interesting plans for the fall but I have a limited amount of time today approximately two hours and I have a particular particular example scenario I'm going to check the chat I I'm actually not looking at the chat right now hold on uh uh okay um I have a particular uh example scenario that's been requested for a while to look at a kind of classic computer science I don't know all that was the wrong sound effect this is my bell uh a problem called The Traveling salesperson I want to look at it in a few different contexts to talk about the difference between gr Forest algorithm talk about a genetic algorithm again and also really with you the viewer watching kind of think about and come up with some you know creative applications of this so how might you make art with the traveling salesperson or how much you make music with the traveling salesperson or how much how much you make a game or an Interactive exhibit with a traveling salesperson Beyond just the fact that it's this um algorithm so I see that the chat is going I I assume that means that you guys can hear and see me okay um Albin writes are you able to answer some questions so I would like to answer some questions today I think what I'm going to try to do is break my record it's I've been streaming for about two minutes and go right into today's topic usually I spend a long time introducing stuff and talking about my morning and how hot it is outside and different things that I've been thinking about you know what what M what Broadway musical lotteries I didn't win the day before but I'm going to kind of put all that stuff aside and try to go straight into the topic um so um uh but but you should uh if I can get through stuff quickly at the end I'll take and answer kind of general questions but you know as as the chat's going ask questions away I kind I pop and peek at it and that sort of thing okay so did that did you guys just see what happened I have a Seltzer that I don't understand what happened to it because I had opened it previously but it got shaken about and now there is a giant bottle of water on the bottom I'm going to put some music back on for you guys fortunately I have some paper down fortunately the water didn't get fortunately the water didn't get on anything technical there's no cables I'm just wiping it up hello wait that wasn't a very good track let's uh uh let's play The Pear and noise song So This Is Random this is noise pear and noise that is in the core random algorithm the actual random algorithm itself those papw at all you pick I'm picking random numbers between 0 and 10 9 2 7 6 1 9 how how how bad is the water on my shirt with pear and noise I might pick numbers like this it's going to be permanently forever in my traveling sales video okay there's a little bit of water here on the keyboard not the laptop keyboard which just on this other keyboard that I use to play sound effects and switch um and that sort of thing okay well today's going well so far isn't it today was the day I was like you know what I'm going to try to be kind of professional and not and just kind of do the topic and not wander off into weird ideas and and start like doing things like I'm you know just at home washing the dishes or something while you guys are watching but I wasn't able to do it okay um now let me try this again I was a little bit thirsty there we go so I'm going straight into the topic with one caveat for those of you who are new I like to just refer you to coding rainbow.com where uh you can see the latest uh challenge was a Flappy Bird challenge I'll play that over here oh can you hear that I don't know if you can um so and then you can if you want you could subscribe to the YouTube channel you could become a patron on a crowdfunding site called patreon and be uh there's a slack Channel you can then join for further discussion and you can also put your email in here uh if you would like to um sign up for email alerts um and I will probably send some announcements over the next couple weeks as I add in the fall I'm hoping to have a regular schedule ah let me ask you something hello from Portugal hello from Germany I know that there's folks in the UK if I did an evening show show is the right word but if I did an evening broadcast which might be the time that works out this fall for sometimes around like okay I think I am back hello everyone am I back please tell me I'm back and hopefully that problem is not going to happen again I did however while I was away uh get myself set up to start coding and we've got to get moving it's 1048 and I want to really get through this topic today because it's an interesting one and one that I hope everyone will enjoy so welcome again welcome back this is coding rainbow episode sauna New York City sauna Edition or the episode where I take a bottle of water and pour it on my head I won't do that now but I sort of did it by accident earlier okay so the first thing we're going to do is I'm going to turn on this light I'm going to check to make sure I can switch to the other camera which I can I'm going to get a marker and we are going to start with uh the traveling sales person uh oh uh and I've got to get ice bucket challenge is a good day good idea okay so hold on a second oh shoot I need to get a new version of processing that's okay ah so so many things uh okay I'm not going to get it right now and I'm going to open and I'm going to go I know where it is um just give me a second here uh uh tsp challenges uh so I I dug up some of my old examples of traveling sales in um processing and I want to open those up so I can have those running as a reference uh yeah here we go and let's do it with uh uh 12 12 12 and I want to make sure random seed five random seed five okay so okay so I just want a visual reference to start with um let me minimize these hold on a sec ah hey is everybody still hearing me and seeing me just give me a moment here to um adjust what I'm doing here to get I want to have a nice visual reference to start with um and I just want to make this better okay uh oh read only whatever that's fine I don't care about that uh okay so hold on everyone I'm about to get going with this first topic and I'm going to run these again Brute Force okay so let me move these over a little bit and this is now so as uh most of you know who have watched any of my live streams before what I do is I have this longer live stream where I watch a chat and answer questions if I can and kind of fumble my way through stuff and then after the live stream is over uh parts of the live stream get edited into separate video tutorials that get uploaded as Standalone videos somewhere between 10 or 20 minutes each and I imagine that this particular uh sequence about the traveling salesperson is going to have about four videos to it let me describe those to you uh and it's 1052 I think I can do all of them number one I just want to talk about what the traveling salesperson problem is and kind of build a quick example that just picks random paths and tries to find the best one by picking random paths then I want to talk about sorting this thing called lexographic order which is kind of like alphabetical order and how you can sort something uh so take all the permutations of ABC right a b c a c b b a c b c a and I'm you know c a b CBA right I think I got them all right how do you take so how can we actually and that's what this this example over here has just done it's checked every possible path and found the best and then this one over here is using a genetic algorithm to solve it so I want to look I want to talk about what the problem is just kind of get a example that's running look at lexographic order how can we check every possibility then look at a genetic algorithm that can eventually hopefully evolve to the optimal solution this genetic algorithm is performing I would say rather poorly I'm kind of surprised uh because I thought I had kind of tuned it to work fairly well although maybe there's still some errors in it but I'm not going to worry too much about that okay um so those of you who are reques in topics in the chat this has been kind of decided for today based on feedback that I've gotten on the slack Channel but um if if uh uh Oliver if you're watching if you could post a link in the chat to the rainbow topics uh GitHub repository there the issues list there is where you can suggest topics for future videos and I'll talk before I leave I'll talk a little bit about that as well okay so um so I think actually I'm going to close this is I don't want to I I think for reference sake what I'm going to do uh what I'm going to do is I'm going to try 15 and I'm G to just want a visual reference to start I'm going to take this out and then delete this I just getting myself set up here uh to get started actually programming uh terminal uh let's run this and uh um and then I am going to Local Host uh tsp I'm looking for tsp1 great I'm going to go back to I'm using the adom editor for those of you who are wondering uh I'm going to um uh just make sure everything is working with the p5js library so I'm going to add a little bit of code here just to see that I have an actual sketch running which I do I want to have my JavaScript console uh there's a little bit of an error where I'm referring to an extra Javascript file which is unnecessary so that's good okay we are ready to go this is now oh lexicographic yes uh when somebody downloads this video and edits it someday what you should do is um is um dub over me so I when I was saying lexographic something something lexor lexicographic with a different voice let's let's just confirm that thank you Oliver lexicographic order yes this is what I'm looking for in mathematics lexicographic order or lexicographical order oh also known as lexical I might say that dictionary order alphabetical order it's actually different than alphabetical order but that's s of a subtle distinction is a generalization of the way that alphabetical order of words is based on the alphabetical order of their component letters so anyway um okay here we go so I believe this is I'm trying to think of where this fits into my YouTube playlist okay third try is a charm okay I'm back live again and uh I was fiddling around here to get ready and I'm just kind of I want to just keep going here not uh oh okay and I want to um uh uh I was going to make this 15 and run this and we can see here oh that's too much too much let's make this uh 13 lucky number 13 uh okay so excellent so I am ready now here we go are you all with me are you all seeing me can you hear me okay I've got my bell ding ding uh and hopefully what's this over here uh just the back sound went off um I just want to before I get started I just want to hear confirmation from one or two people that you can hear and see me okay in the chat so please let me know everything working here okay great all right I think the traveling the CPU running on this laptop probably just like we're going to have like a New York City blackout you know uh I I said I wasn't going to tell any stories but um many years ago there was a big blackout in the United States across the entire Eastern seabo Seaboard I don't know if you guys remember this and at the time I was working as a uh Tech consultant so I was like a freelance computer consultant kind of person I'd go to offices and I help fix printers and that kind of thing and that's literally what I was doing I was fixing a printer in an office on near Lincoln Center in New York City I don't remember the year of this and I was fiddling with the cable shaking with the cable and the Lights Went flicker flicker and I like unplugged it and I plugged it back in the Lights Went flicker flicker and I unplugged it plugg it back in and then the lights went out then the power went out and I looked around the office and I realized oh the power is out in the whole office oh no what did I do and then I heard the power was out in the building and then the power was out basically in all of New York City and then all of the East Coast and I for a moment in time you know mostly jokingly felt like I had caused the entire blackout by like jiggling this printer cable okay font size is a bit small don't worry about that because this is not where I'm going to actually be doing the code um that's just a processing window for a demonstration this is too slow too slow we're going to go back to 12 okay uh so all right what I was saying before the power went out here was uh I don't know where this fits into my YouTube playlist I think the traveling salesperson is going to be a coding challenge but it will be in several parts okay uh here we go hello welcome to another coding rainbow coding challenge in this challenge I'm going to explore something known as The Traveling sales person problem which is admittedly a kind of classical computer science problem that's can feel a bit dry or not so interesting but what I my goal here is to into doing these videos is for you the viewer to watch and understand it and think about creative applications can you make art can you make music can you make what can you make with the traveling salesperson algorithm uh what might you apply to that's your sort of field of Interest so what I have here running right now is and it appears to be frozen pause wait what's going on oh no it's just not updating me very much oh because I'm doing it in a separate thread that's weird I got to start I got to start over again what's going on with this poor little example oh I am doing it in a separate thread that's what I forgot I don't know why it uh stopped updating oh because it starts running slower and slow okay I got to start over with go do this video again let's just uh let's just use 10 points oh it's too fast all right fine I'm not going to worry about it ah I meant for this to not run in a separate thread but actually just but I did something Goofy with this particular example I forgot okay sorry everybody here we go we're going to make this happen now what whatever happens here hello welcome to another coding challenge in this coding challenge I'm going to explore the traveling sales person algorithm it's a classical algorithm that you'll find from kind of this thing known as computer science uh I want to talk about what the algorithm is I want to build a quick JavaScript example to demonstrate how to kind of program the problem and then I'm going to do several followup videos to look at different solutions to this particular problem and for you the viewer I want you to think about what are some creative applications could you make some kind of interesting line drawing visual art with it could you create a musical system uh could you use it for some sort of uh data visualization scientific simulation creative project in your field of Interest so I hope that you'll watch these videos get the example code play with it and make an application with it and share that application with me which I might share then with other people but whatever that's not the point the point is let's talk about this algorithm so this is currently a processing sketch I'm going to program this in JavaScript which is TR checking every single possible solution to what so let me walk the traveling salesperson so you know I think that um Pokemon go in the future some many years from now when somebody's watching this video of Pokémon go is the most irrelevant thing it'll be so annoying to watch this but um the problem is let's say you have a space and this could be a twodimensional or a threedimensional or an ndimensional space but we're going to work with a twodimensional space and the problem is usually framed as there are a bunch of cities so here are several City a map of a bunch of cities or perhaps they a map of a bunch of Pokemon that you want to catch but you're a salesperson and you want to go sell your you know cating rainbow stickers or tshirts or whatever in every city so you know I could go here and then I could go here and then I could go over here and then I could take the train here and I could fly here and I could go here and I could go here you could see that would be a path that hits every single City but it wouldn't be the shortest path and I could try to eyeball it and this might be an interesting application by the way idea what if you build a computer algorithmic system solving the optimal fastest solution and you have it compete with a person trying to draw that solution that could be an interesting interactive exhibit but you know we could try to say like oh maybe the optimal solution is something like uh this but you know that's just kind of a guess so we don't have to guess I could go back over here and this is a program that checked every single possible solution uh for and this is 12 points now you might think big deal how many possible ways are there to explore uh how many possible ways are there to connect 12 points well there's actually quite a few and it it it it and let's kind of explore that for a second so let's say there are only three points and the points are a b and c well let's look at all the possible ways a b c a c b b a c b c a I'm doing this in a specific order for a reason which will become relevant in a future video c a b CB a and if I did this correctly these are actually sorted in alphabetical order which is a kind of piece of this that's going to come up as I explore exp this further so you can see did I do this right there were three possibilities and there are there were three uh cities or three Pokemon there are one 2 3 four five six um six possibilities so the way you can actually calculate how many possibilities is 3 * 2 * 1 which is also known as 3 factorial and why is that because there are uh there are uh three possibilities for the first for the first letter and with each one of those there are two Poss possibilities for the second and for each one of those there's one possibility for the third so actually if you are if there are 12 points there are 12 factorial possible ways of connecting all of those dots which if you pull up your calculator is a really really big number and when you go to 13 it's a really big number so actually like if I change this program right now to try to uh use like 20 points watch how slowly it's going to complete all the possibilities we are going to be here till the Dawn Till the time the sun envelops the Earth and we we won't be alive then I guess but you know you get the point this is going to take a really long time um and if I even just go let's just go from 12 to 13 just to make this point a little bit more explicit um you can see now come on computer um you can see that it's still checking all the possibilities but even just to get to 1% of the possibilities is taking quite a while and this is a program that's written in Java that's running relatively fast okay so um people in the chat are posting the answers to these factorial questions I'm glad because I don't have them I don't have those numbers in my head so now let's let's start to program how how do we think about this program in a visual simulation this idea in a visual simulation so I'm going to move out of processing you'll be able to get this Java based processing code also in this video's description but I'm going to quit processing here uh I'm going to don't save that and I'm going to work in the browser which admittedly job JavaScript HTML 5 canvas is not the place where you're going to find your greatest power and speed from your computer but it's a place that we can kind of explore this idea and so what I have here is a simple JavaScript program it makes a canvas and it has a draw Loop so what I'm going to do is I'm going to create an array and I'm going to call that array cities but this could be anything please think more creatively what are the what are the things in your world that you need to find a pathway through and then what I'm going to do is I'm going to say uh let's just have three just to be simple about this I'm going to have three cities I'm going to say cities index cities index I equals create vector and I'm going to create a random vector and I'm going to do this as a separate line of code uh random width random height so a vector is just an object in p5js I mean it's you know the concept extends Beyond p5js but that stores an X and Y position it does more than than that but that's what we're using it for and so I want to create a bunch of those and then I just want to see those points in the window so I'm going to do that same exact Loop but I'm going to say Here cities. length and I'm going to actually make that a variable like total cities so it's something we can vary equals three and uh then uh instead uh then what I want to do is say I want to draw a circle at cities index I uhx City index i.y we make it Circle 4x4 pixels we'll say Phill 255 so it's white and I just want a little bit more room to write my code and then uh I'm going to hit refresh here whoops hit refresh here and you can see there are three cities picked randomly refresh the page I get three random cities so and you can see here you know if I just now go and say total cities 20 now I have 20 but I want to work with a small number so I can sort of visually see see that things are working okay um am I recording this yes excellent all right so um let's go back to three cities let's make these a little bit bigger so you can see them and let's also uh whoops let's make this a little bit bigger and and I can make the console a little bit smaller okay so now what I want to do is start exploring possible orders well I have an order already actually the order that I have is in this City's array so I could sort of say this is an order and what I might actually do Beyond just draw those cities is draw a path between them so I'm going to say a begin shape end shape and instead of drawing a circle at each point I'm going to say vertex cities XY and I'm going to say uh stroke 255 I'm going to say stroke weight two just to give it a little bit of thickness so it's a little easier to see and I'm also going to say no fill and so now I'm going to run this and and we can see there we go now I just realized something what I want to do is Shuffle the array so what I want to do is I want to try these are now I'm getting uh I'm getting random uh every time I refresh but what I want to do in draw in that draw Loop is I want to shuffle that array to try different random orders so how do I do that so I have a feeling if I go and look up the Milla documentation for the array object in JavaScript there might be a kind of function that's part of the array prototype whoa what's a prototype did I just say prototype in a video um but in other words when I say prototype prototype being the sort of like thing that is in charge of every array that's ever made ever in JavaScript and there are some functions that I've explored in other videos like remove or splice or push that allow you to manipulate that array I I'm wondering if there's one that's called Shuffle whether or not there is I'm going to write my own function so I'm going to write a function and I'm actually going to call it swap not Shuffle and you'll see what it's going to do in a second it needs an array and it needs two index things so something that's going to be very useful in just about every scenario that I explore with the traveling salesperson is this idea of a Swap and this comes up all the time in different things you might want to program and do so in other words a swap is if I have an array that says a b c what if I want to pick two random elements like oh this one and this one and I want to swap their position so now the array is CB and I might use this if I do this with a genetic algorithm as later as a mutation so the mutation of a p path through all the cities is swapping two R cities randomly so let's look at how I might do that and uh I am going to say well so what you would think you might do is say a index I equals a index J and a index J equals a index I right this is the idea of a swap oops a index I this is the idea of taking an array and swapping two elements right put the element number three at element zero and put element number zero at element three the problem is if I set a index J equal to a index I I just reset a index I to a equal J so I'm actually setting a a index J to itself so in order to perform a swap I need to say this actually I need to have some temporary variable which is holds a index I so I keep track of what a index I is and then later once I I replace index I with j and then J can be equal to Temp so this is just a really simple uh a really simple algorithm for taking two elements of the array and swapping them and let's look at what happens now if what I do every time through draw at the end is I say swap cities and then oh I need two random IND indexes so I'm going to say uh I equals uh floor random uh uh cities. length and J is also a random value so I'm going to going to uh swap I and J and of course I you know I'm not guaranteeing that I don't pick the same one and swap an element with itself but big deal it's going to do this a bunch of times let's run this program again and you can see you know with three things there's not a lot of order possibilities but if I make this total cities 10 you can see now you can see how elements are being swapped and so it's doing this very fast but I'm exploring a whole lot of possibilities okay so now what can I do what I want to do just to kind of explore this in a Brute Force way is as I'm trying all these different possibilities I want to calculate what is the distance traveled through this particular order and if that distance is the best one I've gotten so far let's save it um so let's do that uh as the following so one thing I need to do I think it might be useful to write a function that calculates the distance uh between every point in an array so I'm going to write uh another function down here at the bottom and I'm going to call this function uh Cal distance and it's going to get uh a list of points right so I'm getting a function it gets an array of points and the whole point of this function is now to return the total distance between all those points in the order that they are so I need some sort of sum that starts at zero I need a loop where I start at zero I go all the way through the length of that array and I say what so if this is my uh this is my order I want to know this distance plus this distance plus this distance plus this distance so I always want to know the the distance between I and I + 1 and then this becomes I and this becomes I + 1 etc etc so if I come back here I'm going to say uh VAR D equals distance between points index i dox Points index I doy points uh index I Plus 1.x points index I + 1. y okay and then I'm going to add that sum plus equals D and then I'm just going to return the sum so by the way this is a function in P5 that calculates the distance for you between two points so I'm giving it points index I X and Y points index I + 1 X and Y so that should be the now later I'm going to optimize this because this is actually going to be kind of a slow oper to calculate distance and there's a way later that I may I could speed this up and when I'm trying to do this zillions and gazillions of times speeding it up could be a good thing okay um now what I'm going to do is I'm going to say uh I want to have a variable called record distance now uh so the first thing I want to do is whatever order this array is calculated in first I want to know Cal distance of cities right calculate the distance for this array cities and then the record distance is that first distance so I'm going to try I'm going to get a random set of points I'm going to get a distance between those and that's my best so far then remember down here I did a swap so I shuffled it around so once I did a swap let's calculate that distance again uh of cities and and then if that distance is less than the record distance then record distance equals that distance so this is me just checking all like randomly swapping things around this again is not going to be an efficient algorithm for solving the traveling sales person I'm building it this way just to show what the problem is and how kind of impossible it is to find that optimal solution uh with a with a certain number of points so what I want to do here is just say uh console oops what I want to say is console.log record distance so we can kind of look at these values as I'm finding them so let's run this program now oops uh sketch. JS line 55 what mistake did I make points uh okay uh I get a list of points ah of course I meant to I I made this mistake on purpose and because wanted to correct it later and then I forgot about it so what's the problem here remember I'm checking in the array element I and the next one i+ one so I can't go to the end of the array because if I go to the end of the array there's no i+ one there's no element after the end of the array I don't actually care because that's the end of my journey that's the end of my traveling to catch all my Pokemon or whatever is I'm doing so later somebody will dub this video over with whatever is the newest thing like um I don't uh never mind I don't know what the newest thing will be won't be Pokemon it'll be okay uh so I need to add a minus one here so I don't go to the last one okay uh now we can see uh I'm getting these nice uh so far uh I had a distance of 105 uh which was the record and at some point it got a distance of 76 and then it got a distance of 19 pixels through all of those points that seems kind of insane to me that must I don't know if we're ever going to beat that record in a while so let's run this one more time uh and see like yeah so you can see that's optimizing now I'm not saving what that optimal uh what that optimal uh path is so that's the next step that I want to look at so I might need your help in the chat here I'm not really a JavaScript programmer that's a confession I have to make to you and I know I feel like in the let's look actually so there must be a way I want what one thing I want to do is make a copy of an array I'm going to need to be able to do that because if I have an array with an ordered list of vectors I I want to be able to like save a version of that if it's a really good one and I could write my own function to copy an array and I'm kind of tempted to just do that to know that it works but let's let's take a minute in this video to and somebody in the chat will um oh did I forget return some oh thank you no wonder this is a big bug I just had by the way somebody in the chat just mentioned I had another bug where I was returning D which makes no sense at all because I'm just returning the last distance which of course why that value didn't make any sense so return sum is correct so let's run this again to take a look at it there we go these values make much more sense right so you can see like it's you know thousands of pixels between all these points and you can see the the best one that I've gotten so far okay so I'm running that now let me go back to what I was doing is I'm going to go to a Milla uh uh developer doc array something like this I'm Googling that to get to here and what I want to look for is like what are all of the available functions things that I've used I've used push which is a function in Array that adds an element to an array reverse o I might need to use reverse later unshift there's so many things I might use but I'm looking for one I think slice might do this for me the slice method returns a shallow copy of a portion of an array into a new array object let's explore if this is what's going to work for me so I'm just going to go over here this is how I like to figure things out I'm going to go into the console here while this is running and I'm just going to make an array that's like 1 5 six uh and I'm going to look at that array it's 156 now I want to say b equal a do slice what does that give me B is also 156 that's good that's what I need what if I say now B uh index uh 2 equals 7 157 and a is still 156 so this should work for me and I believe shallow means because I'm actually not putting numbers in there I'm actually going to put arrays in there sorry vectors in there that though those it won't copy the vectors it's just going to copy the array and that's exactly what I want because I want to keep that same list of vectors it's just the the arrays are pointing to the same Vector object but in a different position in the array so this is going to work uh po perfectly uh for me uh it's uh so uh hopefully I got that explanation right and things are going to work people in the chat are giving me good advice about shallow copy I might have messed up that explanation I'll correct it as I continue to talk in this video yes you are watching a video of a person teaching about programming who really does not know what he's doing okay so um let's come back and let's say what I want to do is I'm G to say best ever and what I want to say here is uh best you know you know there was a show that I used to watch back be when I watched television which I don't have time for anymore which was called best week ever so this is best I guess that's from you know there's the whole Simpsons thing best anyway whatever never mind best cities path ever is cities to start and then every time I find a record oh no it's uh I want to actually say do slice I want a copy of it and then uh every time I I get a record I want to say uh best ever is Ci's slice so just to see if this is working what I want to do is I want to draw the path twice I want to draw the current cities and I want to draw the best ever and I'm going to make the best ever uh thicker and some uh pinkish purplish color and I'm going to make the current cities thinner and white so let's run this yeah this is working so I think it's I believe this is doing um uh what I wanted to do which is just randomly swapping things and every time and we can look here and see that oh I took the print line out but you can see the pink path is currently the best path that it's got now with 10 points I can see here like this is no good like over here this part is like terrible because look at them Crossing I could easily myself just design like go here I can't I can't do this like people who do the weather on television are like so good at this I could go here then I could go here then I could go there then I anyway you could see how you could easily design a more efficient path so this isn't going to get us that most efficient path that's what future videos that I'm going to go into the next steps are going to explore but let's just see that this program is working by just having Four Points because I think we can probably visually see that looks like the best path between those four points same there it looks like it's kind of finding it rather quickly right you can kind of imagine you know arguably is it going to be better I don't think so but you can see it's going to randomly kind of try every possibility with Just Four Points rather quickly we can even try five cities and you can see that it's kind of finding it so you know you know if I slow this down if I draw it more artistically if I allow the user to interact with it by adding points I mean that's sort of an interesting thing right um a dare I I don't um you know these are might be some things that you can explore so I'm kind of finish with this first video demonstrating the traveling I don't know what the Bell does but it's a thing um uh uh with this um traveling salesperson problem in the next video what I'm going to do is show you how to not just randomly swap points to try a bunch of different possibilities but actually sort an array of numbers with every single possible premutation so we can actually just try every single possibility in order which I think has some kind of interesting creative applications to it as well so I'm going to do that in the next uh next video okay so thanks for watching this one and the the next video will follow up on this uh okay talk to you soon okay everybody hey I felt like that was a kind of reasonably good video how are we doing TimeWise 1130 okay we've got a lot to sort of solve and do but it's not out of the question to finish this so I'm going to pull up a um I'm going to see if I'm gonna um today the way I was trying to be professional but you know I have to do a little bit of dancing to kind of get my energy going here as always I always forget the this dot this dot this dot this okay so the next thing I want to do and there was I was reading on the subway this morning as I'm apt to do uh lexo graph I'm not getting this right I why kind I how come I can't remember what it's called but there was ah here we go this was like a really really good post kind of uh which is and this is like really killing my my computer so this I want to refer to which is how would you explain an algorithm that generates permutations using lexicographic ordering so I want to talk about what lexor graphic ordering is use it to get every possibility and then write the program to check every possibility so Christopher Freeman asked what is the point of the traveling sales person so I you know this is that's a really good question this do this do never forget this Dot and whoops hold on I can't see myself in my preview window now I can um so this is a good question and you know on the one hand the problem is just an interesting uh theoretical exercise in looking at a a search problem where there are so many possibilities how can you check every possibility how could you use a genetic algorithm could you use another machine learning technique to sort of solve it so in some sense it's an academic exercise now I have a feeling if you go to the the Wikipedia page there are lots of actual real world applications to the traveling salesperson you know efficiently placing you know markers along a like Marathon route or something you know I'm like sort of making up something but you know kind of like almost like you might think of you know computational geometry problems uh you know how do you how do you see every painting in a museum you know most quickly um that type of thing but what I'm asking you I think the viewer is to think about um is to think about creative applications you know how might you just create an an interactive system you know not the goal here for you watching this might not be to say like I just want to solve the traveling sales person as fast as possible but I want to make some kind of like musical composition tool that plays a song where each point is a note and the notes are changing order based on like some sort of like traval sale you know would you could you what kind of you know you know in the genius that is Mozart all of these you know kind of like fractal patterns exist in music you know and not try the sales person doesn't have anything to do with that necessarily but that's what I'm kind of looking for you to kind of think of okay so I got to get moving here uh as you're thinking about that um and I I was running late this oh I'm I'm I'm out of paper towels because of my water explosion hold on a second I will be back I think I can actually still talk to you okay here I am back uh here I am back uh so I am erasing erasing erasing and I want to talk about lexic lexicographic order which is basically similar to uh uh which is very similar to um uh alphabetical order with some subtle distinctions and I want to do a CO okay so let me get myself set up here traveling I need to go to here I need to duplicate this uh and I'm going to do uh Lex Lexi I should just say alphabetical lexicographic order uh and I want to look at this so now that's in my Adam window I'm going to get rid of everything here uh um you have to excuse me for a second as I work this out to get ready uh oh I might need swap I'm Gonna Leave swap as a function okay so what I want to do and yeah okay I'm thinking I'm thinking I'm thinking I'm thinking I'm thinking uh uh oh no I want to leave this and now I need to go back here and refresh okay let's do this okay so I think I'm not going to explain away the entire um algorithm uh lexical order thank you uh be but I'm going to refer to this page and it'll be a link in the description you can read this through it's super thorough and uh Fascinate great explanation of this problem but the sort of answer to how to do it is right here and I'm going to read that through and follow implementing that in the code which will kind of be uh at least demonstrating how to do it and for those of you that are interested in more uh and um I just want to kind of like practice in my head for a second ah forget it yeah no no no let me think uh I want to do this twice never mind I'm just going to do this live in the video tutorial how bad how bad could it be forget about this practice thing okay here we are let me cycle the cameras and I have about an hour or so left to go I think that's pretty good this should be 10 to 20 minutes tops hopefully there won't be any like power outages or sound blowing up things and here we go oh let me um hello welcome to another coding challenge video in this coding challenge I'm going to look at something called lexicographic ordering and look at an algorithm for solving lexicographic which for some reason I can't say but you can say lexical for short so I'm going to say lexical ordering just kind of like alphabetical ordering um and we're going to look at how that works make a little algorithm that solves it you might have some creative ideas about how to visualize it or make something out of it and then I'm going to apply it to the traveling salesperson problem to look at how we can look at every possible path through a set of cities okay so let's just talk for a second about what lexical thank you very much or ordering is and I'm going to come do that over here so let's just say I kind of did this before but um let's just say I have the letters a b and c so these are actually sorted in alphabetical order right a comes before b b comes before c but what if I want to know the next ordering of these that's also the next order in alphabetical order like I could say like here's another order C ba a or here's another order b a c but neither of these are the next order in alphabetical order now I could tell you that the next ordering in alphabetical order is a CB right because a should come first well B already came second the only other possibility is C and then the only thing left is B and then we can think okay well I I tried all the a possibilities so the next in alphabetical order and by the way lexical order and alphabetical order are very similar Concepts is a sort of subtle distinction which has to do with how numbers or dates are kind of treated in the way you might sort things in kind of the computer way this is this is by the way my version of the computer way um so uh but I'll let you read about that in this page that I'm going to show you that has more information so um uh so I could say B and then what would be next in alphabetic order would be a and then all I have left is C so B is next and then C and then a and then C then a then B then C then B then a so I could do this rather easily myself but you know if I have a b CDE e f g hi I it's going to be a little bit harder although not that much harder because honestly it's just going to be a b CDE e f g i then H right you can sort of imagine and there's this swapping so what we need is an algorithm to do this for us and then print out every single possible ordering because what I'm ultimately going to do with this is actually use these as indices into an array that has different cities in it so you know Baltimore New York London I don't know I shouldn't be so us Europe Centric everybody in the comments give me some better cities to use in my next example um um but so you could see you could imagine this going to be 012 02 1 uh 1 02 1 2 0 two I don't know if I'm getting this right two one 2 one0 something like that so hopefully I got that right but this is what I want to do and I want to try the cities in all of these orders so let's go back over here and I found this wonderful page on the subway this morning that I read in my Google search which was a quora post that says how would you explain an algorithm generates permutation using lexographic ordering so the wonderful thing about this answer by Michael for which I'm sure I'm not pronouncing correctly somebody will have to um oh people are giving me great cities quala Lampur Rio Coventry UK so uh let's be International uh coding rainbow here in this uh thing that I'm doing YouTube but so for the impatient here's the actual algorithm so what I'm actually going to do in this uh video uh is just kind of read through this algorithm uh and sort of talk you through it and implement it and I would suggest to you that if you want to find more about it you can kind of read further down this page where the author provides uh an example scenario of an example order how the algorithm plays out with that example and then also deres this algorithm but I'm going to kind of leave that aside as kind of and I just want to kind of like I think you might have an intuitive or kind of sense of how it works just by implementing it so first let's get ourselves set up to do this um what I want is to have an array I'm going to start with an array uh I'm going to call it uh valve yeah that's fine and I'm going to have it be 0 1 two we're just going to start with three numbers so that we can see that it works and what I want to do now in draw is uh first I want to um what happens if I do uh console.log vs so let's just look at that uh and run this we can say okay so that's good I'm getting I'm seeing here in the console the current order of the array so I want to see it as I do each permutation one at a time so if I go back to this explanation first find the and let me zoom in on this so you can see it better find the largest X such that P index X is less than P index x + one okay so what does that mean I you often we think of i as the index not X but what we're looking for is what's which where is there something in the array the highest the the the the element closest to the end of the array where its number is less than the last number so and intuitively right now we can say like which one is that it's this one right and if honestly if this were the array 3 four five six 7 it would be this one right right now the last element of the array who is that is less than the one next to it is when it's in order is always the second to last one but we should write an algorithm to make sure of that so the first thing I want to say is largest I largest I I'm going to assume it's zero then I'm going to Loop through the entire array and what I want to do is say Okay um if Val's index I is less than Val's I + one then largest I equals I and I can't can't go to the very end right so I want to find what is the largest and you know what I really need to do I want to start with this as negative one because I want to start with an invalid index because if I don't find anything that's going to be important if we go back to this algorithm if there is no such X that means we finished so what I wanted to add here is say all right here after I do this Loop if largest I equals ne1 no Loop you know uh console.log finished no Loop is a function in P5 that just stops this animation loop from from going okay so we can see that here I've kind of implemented let me let me I've implemented step one of the algorithm and let me just in the code here just add a link to this article that I'm using just so I don't forget to do that later uh okay now find the largest y or you might think sort of in this I'm going to use J because I'm used to using I and J as index values find the largest y such that the index X that I just found that's the largest one is less than y so let's think about that right so let's say I think I might need a diagram for this oh yeah I have my uh so let's say we um let's say we have a bunch of numbers 0 1 2 5 6 8 four three right let's find the first let's find that largest X which I'm calling largest I such that the uh such that the that the uh the value in the array the the index is less than um less than the one after it which would be here so uh 0 1 two 3 four so this is four now so what's the next step whoops the next step is find the largest y such that P of X is less than P of Y not of P index X so I now need to find whichever one in here is high is actually less than this number six and that's actually here right this one is the largest one that's less than the number six so uh so if we come back to the algorithm and I Implement that what I want to do is for I need to go through and I'm going to use J I'm going to go through the array again and I'm going to going to say uh largest J equals uh uh 1 so what I want to do is here the largest y such that P of X is less than P of Y P index X so if if Val's index J is less than Val's index largest I which was X then largest J equals J so now I have largest I and largest J I have both of those and I don't think I need length minus one here because I can check all of them we'll find out now ah swap P index X and P index y now you might have come to this video without watching the previous one I made on traveling salesperson but in that video I look at a quick little algorithm for swapping two elements of an array and here's the function that does that right I I have a function called swap I receive an array I receive an i and a j I save the value that's at a index I I put the value that's at J in I and I put the value that was at I in J so now all I need to do is say swap largest I largest J right and then reverse oh boy so this is kind of a funny thing but what I also now need to do is reverse everything that's between x + 1 to n now how do do I do that this is going to be a little bit goofy um okay I'm thinking here I kind of want to have an edit point in this video I'm gonna have an edit point in this video this will be all for you live streamer archive viewers now um because I know how I could do this I know I know there's a reverse function what I'm curious about is I I uh does the reverse function take arguments no it only you can't reverse a certain section of the array but what I could do is slice out that section reverse it and then put it back in that might make sense right um I'm waiting for the chat to give me some good JavaScript uh suggestions so let me let me explore this for a second um oh wait whoops uh let me take out this concept . log oops no not that one uh slide o somebody is telling me there's a function called slide no I don't see that here is that yes splice reverse and append right that's what I was ah great idea thank you Oliver in the chat so let's explore that uh I I think that's enough for me to just now put it go back into the video rather than explore it okay so where was I I don't know what I was looking at when I said I was gonna I think I was just looking at the code yeah okay splice index reverse well that really but that um uh there's some people are talking about the titles of these live streams that's interesting I think I'm going to do it the multistep way even though I'm sure you could be there's so many things you could do in JavaScript in fancy functional programming array map reverse SCE splice but uh it's too much for me okay oh boy I want to get to genetic algorithms which I which I've got to I got to move this along here okay so um okay so yeah maybe I was looking at this yeah I was here I'm back from thinking about and talking with the chat about how to do this last step reverse so but first first let me let's see we did we did steps two and steps three let me at least add some this is a step two and this is now step three and what I want to do for step four and let me write this out is uh reverse from X oh largest I + 1 to the end right so what I want to do is reverse everything that's from largest I + one to the end of the array okay so one thing that I could do I think a way that I could do this thank you to the chat again is I can say um I'm just going to call this end array uh and I'm going to say I'm going to say val. splice now if you remember I don't know what you remember this from but if I go back to the uh my array documentation page I'm going to look at splice not slice splice what splice does is it takes a start index and then an amount of things you want to delete out of the array but not only am I deleting them out of the array I'm actually getting them as a separate array so what I can actually do is say vs. splice from largest I and then how many things do I want I want um I think that the length is the array's length minus largest I is that right like if the array has five things in it and I want and my largest I is uh that's 0 1 2 3 4 is at two 5 minus index 2 O minus one right Val length minus largest I minus one I believe is right that's the length that I want to splice out um let's let's uh let's confirm that let's let's debug this to be sure uh one uh you know 5 6 7 8 n and what I want to do is I want to say a do splice what happens by the way if I just give it the index like two so two should be uh 0 one2 5 six at seven ah so I don't even need that last argument splice will do it for me I don't need to calculate the length brilliant then I can say end array uh. reverse now does that actually change the array itself a. reverse whoa oh oh a Is that ah start over let's worked it out a a is this array now B is a. Splice 2 so now I have that as B maybe I need to make this bigger so you can see this now I want to try to reverse that b do reverse but what is the b h it does actually reverse the array itself not just create a new array that's returned back so now all I need to to do is say end array reverse and then what I can do is say vs. append I can just put it back so what I did is I took the end of the array off I reversed it and then I put the end of the array back on which is essentially doing exactly this piece of the algorithm reverse uh X plus one and did I add the plus one in there I think I did ah plus one okay so I need to add that plus one in there so this is done I've done step one step two step three and step four now what we should be able to do is look at those values and um whoops and I should be able to run this again and sort of see what happens whoops uh aen vs. append is not a function hey append is not a is not an array oh push must be push there's no aen function must be push push must you must be allowed to uh push a full array right the ele elements to add to the end of the array and you can push you probably can push another array right I'm pretty sure you can so let's try push and see if this works uh and okay this is too many things for me to see let's just do it with let's run a quick little test here and oh no no no no no no no no so how do I concat maybe it's concat concat because you can see what it did is actually just push the full array on there which is not what I want to do so let's go back and fix that it would be nice if I knew what I was doing wouldn't it uh I guess you're seeing the process of how things are figured out by people who don't know what they're doing uh oh no no no vows. concat let's look at concat we're getting close uh concat uh the concat method returns a new array so I've got to set it back equal to itself there's probably some sort of slightly more efficient way of doing this but this will do just fine for us right now there we go up all right so I'm getting something but I'm missing something so uh I have got to uh uh I could use push. apply but I'm trying to so there's some fancy JavaScript ways I could do this but I'm going to I'm going to try to uh kind of get around those ways so something is going wrong here um so what I want to do is I actually want to take this I um what I want to um actually just uh say uh no Loop and I want to be able to look at this running one at a time so a way that I can in P5 by the way is is run each draw Loop one at a time one as I can just say redraw I thought I could at least oh I have do I have no Loop in here let's take that out do I have console.log maybe I took out the console.log whoops console.log vals yeah okay so I'm getting the same array each time and maybe the call to swap is incorrect someone in the chat is saying so let me look this up this I'm now in a debugging portion which maybe we'll edit I'll edit maybe this should get edited out but I guess it staying in swap so let's look and see what we're getting if we're getting values that make sense so the first thing I want to look at is largest I and then I want to look at largest J which is probably I'm guessing I did something wrong there and then I want to look so let's just look at that for a second so the largest I is one which makes sense that's the largest index where it is less than um two uh now the largest J is if we look at the algorithm is the largest J such that ah I have my code code is wrong look at this this should be largest I is less than J if we look at that algorithm again that makes total sense that I'm looking for the the element of the array furthest along that's actually greater than the one that I just found so that should uh that should fix things up here uh and then if I say redraw okay so that's a little bit better i' I've made an improvement here that um I'm finding let's uh Let me refresh this uh that the largest is one and then the largest J which is two which is greater than what I just found is the last element that's correct and ah I've got a terrible error here bad bad sad little bug I just like had a brain malfunction when I wrote this swap function it's like swap largest I and largest J but swap it with what and the chat just pointed it out to me the way that I wrote this function is I've got to say here's the array that I want you to swap these elements in so I've got to actually put that array in there which is vals so let's redraw and we can see ah there we go now we can see the order is happening so I can take out some of the console logs I can put in no loop back here and I can uh take no Loop out here and I can run this and we should see there we go 0120 0 2 1 1 02 1 12 0 2 1 2 1 0 we got it yay now let's be a little fancier here and let's put something let's put something in um on the in the window I'm going to say uh text size uh five no uh 64 I want to create a string and I want to Loop through uh the current values and I want to say s plus equals I and then I want to say Phil 255 and I want to say text S so I'm just want to draw the text at like 20 and height divided by two uh so I just want to see uh and did I put that I want to see um oh I guess it just happened so fast oh not of I I want V's index I there we go I want to see it do all the Poss possibilities there so I want to be able to see that happening in the window and now we can try 3 4 5 6 7 8 n to see how this goes and we can see here we go I am now looking at it's almost like I'm counting down backwards in this weird way this is now every single possible permutation of 10 numbers now you'll notice this is going to take a really long time to finish it's running at 60 frames per second so it's doing 60 possibilities every second and how many possibilities are there 10 factorial which is this particular number which is like 3, 628800262 might be some interesting creative ways you could sort of visualize this these permutations what might be another scenario where you use all these permutations and what I'm going to do in the next video is I'm going to use this to try every single possible permutation of the order of cities in the traveling salesperson uh problem and once I do that I'm going to look at an evolu after that I'll look at an evolutionary strategy for solving the traveling salesperson problem okay thanks very much see you in the next video okay okay boy I am Trucking along here it's noon I got to keep moving because I want to get through the next video should be kind of short because all I'm doing is combining this with the other one 16.8 hours to calculate says Gat in the chat um oops no no don't quit I will hit the wrong button here I was about to quit the broadcast I was just going to uh put on some music for you guys which one that I haven't played yet today uh all right little background music here add the number 10 to the array hey what did I do to make why will it break it doesn't break I don't see it breaking I mean it's doing something weird because there's no spaces or commas so you can't see where the 10 is it's going to do crazy stuff still works right okay oops okay so now I need to go to here tsp 1 tsp two two lexical that's going to be the next one and what I want now actually is to just open the whole tsp folder I don't have time for this is my last broadcast for a while I got to get through this material uh okay um so let's see what I've got here let's see what I've got here save save let's go to here uh this should be this great okay and I can make this a little bit bigger uh wonderful Wonder wonderful wonderful okay I think I am ready I need a little bit of water uh as always I always forget to this so by the way my one little announcement I have to make which is that the theme song of which the instrumental are now playing in the background uh we'll be out after Labor Day with a full music video associated with it because I'm kind of like relaunching again in September to try to really treat this uh be back every week with weekly live streams and um a kind of set of topics that are going along with a fall course but I'll talk about that stuff later okay anybody watching Olympics by the way super exciting I hope your home country wherever you're from is has some fun people for you to watch root 4 um yeah okay uh but no time for that discussion here we go so I think I'm ready to do this going come back over here uh do I I don't think that I'm going to need to use the Whiteboard for this one um but it is what it is so let me actually make this like eight just for a second and one thing I want to do is I'm going to just see random seed one just want to see something here huh random seed doesn't seem to be yeah it is it's doing the same thing each time okay I don't care about that okay here oh you uh verto has a friend swimming in a few minutes from Spain maybe or uh or from I don't know where you're from verto but uh cool send me the name of this person so I can check later and see how your friend did Belgium okay everybody here we go hello and welcome to part three of an of a coding Challenge and I don't know they're individual coding challenges they're part of a sequence of coding challenges who knows but in this particular one what I'm going to do is I'm going to look at this traveling sales person problem again a list a random list of eight cities and right now the program is just randomly trying possibilities to see if it can find the best one and I'm going to look at how we could combine that with this thing I worked on in the previous challenge which is looking at every permutation of a list of numbers or letters sorting in lexical order which is like an alphabetical order type thing so here you can see this is running uh it's going to take a very long time to check every possibility but I want to take this code and I want to combine it with the traveling salesperson problem to check every possibility in order which I think will be an interesting thing to do so let's let's look at that so the first thing that I want to do and honestly there's probably I can tell you for sure that after I finish this I could easily make another 10 or 15 minute video that's just kind of like refactoring the code to sort of organize it nicely in my you know hyper desire to have like things always organized but I'm going to just I'm going to let it be loose in this video so I'm just going to like copy paste code around move stuff around and kind of use stuff together in a bit of a halfhazard way just to demonstrate it working and then uh you should remind me when I publish the code I'll make a nice neat version for you with some comments and things organized in a way you could kind of compare those two but anyway let's just keep moving and so what I want to do is I want to basically start taking things so I want to take this array vows from The Lex lexical order example and I want to bring it into the traveling salesperson example and if you haven't watched the previous two videos you don't need to but you might want to go back and see how where the how these pieces of code were developed um and what I actually don't want to do here is I don't want to initialize it hardcode it and I think I'm going to call this order now because really this is going to be the thing that's keeping track of the order for me and I need a number for every city so all I need to do add here is right here in this Loop is say orders index I equals I so I just create an array oh and I need to initialize it as an array so in JavaScript I've got this array and the AR is going to start if there are eight cities and let's just do it with um four cities just to S see it's going to be 0 1 2 3 right 0 1 2 3 four cities okay so that's good so that's the first step now what I want to do is I'm actually going to take this entire algorithm and I'm going to put it in a separate function I'm just to say copy and I'm going to go into my lexical one and I'm going to just go to the bottom I'm going to add a lot of line breaks just paste it down here and I'm just going to say here like ah uh this is my lexical order algorithm and I'm going to write here I'm going to call this a function now next order so I'm going to put all of this in a function called Next order could be just called Next or next ordering and what this is going to do is it's going to take actually this this is going to be this is much easier than I even imagined and maybe I don't have to refactor this that much I I called it order instead of vow so I'm going to have to be I could probably do a find and replace or some but I'm just going kind of eyeball it for a second and put order everywhere now uh so I now have this algorithm and what I want to do is I want to make my canvas taller I'm going to make it 600 but I'm still going to only pick points in the top and then what I want to do is I want to use this quick little algorithm to write text to the screen so I can see I want to put this at the very end and I know I'm doing this kind of quickly so I'm kind of tring to talk to you through what I'm doing it'll make more sense once you see it um and this again is order I'm just combining the code I'm not actually logically combining the code I'm just taking all the code from one example and putting it in places in a previous example and then what I want is to have this be at like the bottom of the window somewhere down here and if I hit refresh whoops I in the wrong example uh oops I got to go to uh Local Host and find that example again uh tsp lexical and I have some errors here so orders is not defined sketch. Js line5 uh it's called order thank you and you can see okay so now so okay so what I have now is the random selecting and the order being displayed below oh and by accident because I have a stroke in a fill I have these nice outlined characters that make me kind of happy um so now all I need to do in draw is say next order like in draw I want every time I want to try the next possibility so vals is not def find sketch. JS line number is 97 that's a place where I forgot it which would make sense for me to have done a find and replace 109 but this is a perfectly fine way of finding those spots uh 119 boy I really did a terrible job I can see I can see some other spots now I I barely got anything uh oops and I don't want this anymore that was the drawing part so we can see here now it looks like it's working right because it looks like it's trying every Poss ibility here but it's not actually using this order as the order of things for the traveling salesperson uh order of cities so now I need to instead of randomly picking an order of cities I need to try the order based on what's here I want to try City three then two then one then zero okay here we go so now what I want to do is where so where do I get the order from um the order basically so this is kind of an interesting thing that's happening here my what I'm going to do is change the pro right now I was actually moving the vectors around in that cities array but the cities are the array now is no longer something that I ever need to touch the thing that I'm keeping track of is actually the order array so I'm going to redo this first by just saying um what I want is to go through every single element in order actually so here is me just drawing all the cities so this is actually not the path so this can leave I'm just drawing a circle where every city is and I'm going to take out the best ever thing for a second because I'm going to have to adjust that but what I want to do here is not I'm want to go through that order array and the particular City that I want to draw City n for lack of a better word is at order index I so I want to go through the order array and set the order as three then two then one then zero whatever is in there so now the index that that's that that order array essentially becomes a lookup so I I think this might be I have this sort of like gut feeling even though you're just somebody on the internet watching a video and I'm a random person in a room talking to myself that that this is not entirely clear so let's clarify this these are the cities quala Lampur Rio uh Oslo I'm trying to think of a diverse set of cities from around the world um so those are the cities but I'll just call them uh a b and c and this is the order which is an array that has something like 1 2 0 so a b c what I want to do is start here and say okay the first city is one which means it's B so I'm here right now then the next city is two which is C which means I travel to here and then the next city is zero which is here which means I travel to here so this never changes this is the thing that's changing around and what we use to inform the order we draw here okay now I've come back and uh this should hopefully make a little more sense to you and I could run this now and we can see it's doing every possibility now I'm not getting the best possibility because I actually haven't fixed that testing yet but you can see that it's kind of checking every possibility in drawing in that order and I might be able to if I reduce the frame rate hopefully we could see that kind of happen um as you see it checking each order and then going to the next one um and there's some other weird goofiness going on the way that I'm um because I haven't gotten to the next step so the thing that's the best ever now is no longer actually a copy of the array of the Cities it's a copy of that of a particular order so best ever distance can uh ah C distance has to change because now when I calculate the distance I need to calculate the distance between these cities based on a particular order so let's go to that calc distance function I'm going to it's going to be a particular order and now as I go through the order I'm going to say uh City uh City a is points order index I woo right because I need to get go into that array and find the one that's at the spot in the order this this would let's write this in two lines of code city a index is order index I and then the actual City and let's just uh no it's write long is the actual point at that spot right so I need to use that order to look up what city am I at and then I want to do that with B City B index City City B City B index and that's I + 1 remember that's the next one in the order and then I want to get the distance between uh City A's X C's A's y City BX I like have to like think about this while I'm doing it City b y okay that makes sense so we've got to use that order again now to calculate the distance so it became a little more complicated of course you could condense this code I might think about it later of a different way to write it but I'm writing it in the most number of steps to try to make it as clear as possible okay so now we have that distance so that works I have calculated the distance between these cities based on this order and if it's the record distance I want to save not the cities but the order then I'm drawing the cities based on uh based on on sorry the uh I'm just drawing all the cities then I'm based on it drawing them based on the order that I'm currently checking and then now I want to draw them I want this exact same Loop but I want to draw the best one so instead of getting the order from the current order array I want to get it from the best ever array and we should see now if I run this and I've done it correctly oops length of undefined sketch. JS line 86 what problem have I done uh uh order is undefined ah I must have I have a second place where I'm calculating distance based on the order and swapping oh no forget about this swapping get rid of the swapping that's I don't want to swap I'm not ever swapping that's I would have been a big bug if I left that in there by accident found that luckily uh am I not going to next order no okay so what's going on I got to debug this do I have no Loop somewhere uh What's Happening Here uh people in the chat are telling me um various things uh I think this is I think this is a pause point I gotta like find this problem now boy it's G to be really hard to do the genetic algorithm the amount of time I have did it just do it really fast no so hold on let's just see um what do I want what's happening here let's just make sure this is happening oh it only happened once oh I the fra frame rate was at one okay I'm back it actually was working I just was impatient my frame rate was at one but I do have an error here sketch. JS at line 48 what's happening line cities and uh okay so so n is H okay so why did I get an undefined uh so hold on let's look at cities has four things in it let's look at order 0213 let's look at best ever ah something's wrong still for whatever reason I'm not getting the order the numbers in best ever so let's see where let's see everywhere I'm doing something with best ever there order. slice ah I still had cities. slice here so this has to be order and so now we can see here we are checking every possibility one frame at a time and you can see the current thing that I'm checking is drawn in white and actually that should be after so you can see it um um just so you can see it on top I'm just going to switch the order around for a second uh of the drawing stuff and I'm going to make the frame rate uh five just so you can see that a little better so you can see it trying every possibility and essentially it'll get to the end and um when it gets to the end you know I kind of in a way like just drawing the current order I don't have so this could be a CH this is a challenge for you guys to sort of visualize this better and actually I have a I have an idea I have a better idea so what I'm going to do now is actually uh translate zero height divided by two I just want to draw these in different places so uh and uh whoops for the uh second one and then the uh where I'm drawing the text is actually uh just two minus 50 so what I what I what I think is work would work better here is for you to see um and I don't think actually to be honest like I don't feel a huge need to draw the permutations but you can see at the bottom I'm trying every permutation and the current best one is at the top and was it really the last one let's so let's run this with uh let me take out um no let me just run this a few times I wonder if that's a bug in my code no okay good that was just a coincidence so here the last one is not the best one and what we can do first of all I want to take out uh console I want to add a couple things to this I want take out um I want to get rid of this test to see if that was working and I want to um uh I want to sorry I was looking at the chat for a second I want to make the total cities uh eight and let's take the frame rate up to as fast as it'll go and we can see here it is trying every single possibility and every time it finds one that's better it puts it up top so you can see I don't know maybe that's the best one actually it might have found it and at some point it's going to stop now I don't know where it is so one thing I would like to do is um is be able to uh calculate the percentage uh finish now the thing is uh the thing is we might run and so this is kind of done and you could stop you could stop watching this video and kind of take this and think of a more creative way to visualize this or do something interesting with it um but I just want to have a sense of how far I am to being done so one thing I want to do is I want to know I want to know uh total permutations I want to calculate that total permutations equals I have no doubt this is not a function in JavaScript math. factorial total cities now what's the chance that that gives me something yeah math. factorial is not a function so let's write our own I'm just going to go to the bottom here writing a function for factorial merits its own video but I'm going to do it uh really quickly here uh and just say that if n equals 1 return one otherwise return n * n minus one and that's uh not right n * factorial of n minus one right so factorial is five of five is 5 * 4 * 3 * 2 * 1 factorial of 4 is 4 * 3 * 2 * 1 so factorial of 5 is 5 5 * 4 factorial which is 5 * 4 * 3 factorial which is 5 * 4 * 3 * 2 factorial which is 5 * 4 * 3 * 2 * one factorial and one factorial is equal to one and this is a little recursive function which just does that so um I think I have another video where I actually go through that in detail I try to link to that here but so we can say total here uh with eight is factorial of totals uh so I'm going to say total permutations I just want to see what number I get 40,320 so percentage I can also say now I can have uh count going and I can say where I can say in draw our next order really I can say uh count plus plus and maybe that should go at the end but I'm feeling lazy right now and I can say now what I want to actually do is calculate a percent which is 100 time the count divided by the total permutations and I want to see um perent completed and let's make that um let's make that a little bit smaller uh it'll just be there at the bottom and see what happens uh and you know it might be nice here to uh number format that I think P5 is a function number format NF where I can say just give me two decimal places to look at and we can see now and and you know I could say uh percent so even with eight you can see how long this is going to take doing only one possibility 60 frames per second let's at least uh make sure that this is kind of working correctly by reduce this number to five and we can see here we're going to get through 100 and my my counting is off and where I'm calculating in no Loop but you get the idea here so now I'm able to see this is now me checking every single possibility and getting the fastest one let's look at six and just out of curiosity is this program even going to run if I go up to like 20 cities oh something is ABS oh you know why it's not working is because 20 factorial is a number too big to store in a variable and I would need some sort of JavaScript Library I think for big numbers I think that's particularly correct because this I ran into when I was working in my Java example on my Java example um I needed to use Longs and I even you I might have even needed to use like a big number Java library but that's only for the percentage calculation because I don't actually need to know the total number of possibilities to check every possibility I just need to check every next one so this 8% calculated is absolutely wildly incorrect but uh I think if I do 10 am I going to get something 10 I'm still going to get something about right because that's a reasonable enough several million so you can I encourage you to run this on your own for a while see if it comes up with something that looks right um and but you know honestly what I would like is can you make some kind of interactive system that allows users to place points can you make a game or or a simulation where things are following all the points can you actually have it act out people searching for Pokemon or sales people walking to sell things or I know you you should music playing as you should be more creative with with this okay thanks for watching I've got one more left to do which is do exactly this but use a genetic algorithm to evolve the best path thanks for watching all right oh boy oh boy oh boy oh boy oh boy oh boy so here's the thing I said I had to go at 1230 which is 7 minutes away kind of knew this might happen um I I definitely can't do the genetic algorithm is the most complex thing to do um so um but in a way it's not as hard as you might imagine having done so much of the work already I really honestly could go until 100 and I wouldn't it wouldn't be a total disaster for me in terms of the time today so I'm going to try to extend and I'm going to take a brief break to go pee I was like trying to think of what I should say but that's what I'm going to do because I've been doing this live stream for a couple hours now um I am going to uh put on some uh music for you you can enjoy um the um instrumental coding Rainbow theme song which is 1 minute and 20 seconds in which case I will be back and see how far this gets and um then I will uh see about doing the genetic algorithm no I'm still still I'm going to go till 1 o' going to go a little longer yeah and I just have a live mic here which I'm going to mute myself but I think you still hear me talking and I'm whispering for no reason oh it's so much cooler where I am right now okay now I'm going to mute my mic okay I'll be back soon okay here I am back can you hear me can you see me uh is everything going okay I don't see a lot of messages in the chat uh oh okay I did see someone I'm just curious how many people there 70 people how are we doing here on this we got through uh 36% so you can see how long this takes now certainly if I was doing this in Java and a separate thread and kind of crunching it faster than 60 frames per second um it would go a lot faster and so but I think it's interesting to see this in JavaScript nonetheless okay okay I got to move quickly here uh half an hour I have I think realistically so I'm going to do which one am I in right now tsp2 lexical I'm GNA keep this one and uh genetic I'm making a another folder called genetic algorithm and I'm going to go into that one and I'm just going to clean up the code a little bit kind of like quietly myself to move things along a bit faster I'm going to get rid of all this permutation stuff I don't need anymore a factorial I don't need permutation stuff I don't need uh the calc distance oh I forgot I was going to make calc distance more efficient without a square root but I'm not going to worry about that um what does this program do now uh um okay I think this is going to work for me uh I'm tempted to grab my previous web workers yeah I'm tempted to grab my previous genetic algorithm code to make this go faster to start from a template but I think that's unnecessary I have a oh oh I have an oh oh there's too much to do can I come back I can't uh I just I got to move forward here there there was there's another thing that I wanted to do which I might have to skip here uh maybe um because I I had a bunch of suggestions about my um uh selection algorithm uh to improve it and uh I kind of would like to do that but I'm I'm not going to okay uh I just got just going to move forward here I'm just going to start this don't know what this does uh hold on uh let me just let me just get no errors here uh line 62 there's some unnecessary code okay okay um all right uh boy it's so you guys have I don't know if you have any idea how hot it is in here right now okay so I have about a half an hour I honestly I'm I'm I'm feeling like this is quite unrealistic I did I feel like I got a good amount of done stuff done today in two hours um and I wish I had more time wish I had the whole day honestly um because there's a whole lot more that I want to do but I'm going to just see what happens and I I'm guaranteeing to you one thing which is that I will publish code for doing this so that if you're curious and want to investigate it even if I don't finish this as a video tutorial um that code will be published and then um you know I will obviously pick this back up again in a couple weeks or we'll answer questions on a forum or something somewhere people have particular questions about it okay hello uh one last challenge with the traveling salesperson I want to take the traveling salesperson problem and I want to solve it or try attempt to solve it or get close to solving it with the genetic algorithm the issue being that when there are so many cities I can't can't possibly check every single possible uh Point oops as illustrated by uh the example I made in the previous video where there are more than 3 million possible uh ways to go through all of these points you can see I'm checking every possibility and I'm only at 0.1 0 1% completed right now even after a little while sure with a faster computer and code written not in JavaScript in the browser I could get it to go faster but you know this is only eight cities imagine as you get to 9 and 10 and 11 and 12 a genetic algorithm involving the optimal path through these cities is a is a is a way that we that you can explore to get get some results so let's look at how we might do that I have a lot of videos about genetic algorithms I think almost 10 so I'm kind of piggy bagging I'm kind of assuming knowledge and kind of moving through this quickly but I'm going to and also program it from scratch but I encourage you if you haven't watched those to go back and watch those other videos about genetic algorithms okay the first thing I want to do and I'm going to do it all sort of insanely in one um part particular uh Javascript file just to keep things simple and I'm not going to use objects or any of that so I want to make a population and that population is an array and um and actually I do want to use I do want to use on some level an object so I want to create a DNA object and what that DNA object has in it is an order so that order being the um the order by which we're going to go through the cities so uh so the DNA object has uh an order variable in it which I'm going to say this. order I'm going to use this as a Constructor function to create these DNA objects and what I want to do is go through the amount of total cities there are and what I want to do is say this. order index I equals I so I'm going to start making a DNA object that just has the literal order of kind of uh 0 1 2 3 4 5 however many there are so I have that so now what is my population and I want to say uh population total let's say we're going to have a population of a 100 elements so what I want to do here now in setup is I want to say I want to go through and based on that total population I want to say oops uh I want to say population index I is a new DNA object so I want to fill a population with orders now all those orders are the same right now so I should Shuffle and randomize them right we want a genetic algorithm to start with some variety but we'll get to those steps as we go now what I want to do just to see that things are working is I want to visualize uh when I go to draw the stuff I actually want to draw the entire population I think that might be interesting that's probably a terrible idea for a variety of reasons that's going to make things run really slow but we we can take that out out whenever we need to but just to see that things are working I want to draw that entire population uh so and I want to say the order is each member of the population order and now so this is me saying instead of just we were just trying one at a time I'm going to try a 100 at a time so if I run this uh boy I don't know what it's do oh I'm in the wrong I'm in the wrong example uh I'm going to go here okay so I've got some errors can't read property length of undefined sketchs line 42 all right so this I got to comment this stuff out yet because I'm not I haven't done the evolving part yet uh and I'm not seeing anything because uh why am I not seeing anything um population. length oh I'm using I twice that's a terrible idea so let's use J in the outer loop here I'm surprised that I I think I oh I crashed I crashed the browser everybody good for me uh let's Force quick Chrome um okay so we can see all the possibilities are being drawn down at the bottom here okay so let's shuffle them so we can see that there's 100 random possibilities um so one way of shuffling an array I already have this swap function which just swaps two elements I could just swap like a certain number of times and I'm sure if you look in textbooks and on Wikipedia you would find some optimal number of swaps for a perfect Shuffle but I'll just do it some amount of times so where in My DNA here I'm also just going to say uh Shuffle or no swap order uh and I need to have VAR uh uh I equals floor random order. length and J is another random one so swap I comma J and do this you know 10 times this is to randomize it uh I don't know how good 10 times is but oh I still have an infinite Loop here why do I have some weird infinite Loop what's going on in draw okay all I should be doing is drawing the cities and then drawing the population let's make the population 10 uh crash the browser again I think I might have to quit this for today and just I think I might what I might just do uh for loop I is less than population. length someone's telling me an error that I have uh uh oh thank you J is less than population. length thank you very much that was a good catch uh still have some problem here uh do I have an error at least I can't see so what's what's infinite looping here uh I population J order uh j++ what if I comment this out I is less than population. length is in one of the fours I think you guys are behind me I already fixed that uh uh in the beginning uh let's uh let's comment this out ah I know have a way if I wonder if this will be able to if I restart the server so you guys I'm starting to feel like and I really apologize for this that this is I'm not doing this Justice by this is a sort of complicated thing uh and um that uh oh what's this best ever stuff I don't want that I'm starting to feel like this was not meant to be for today I did a solid amount I'm going to have to come back and finish this fresh um and maybe what I'll do is use the time to uh talk you through how to do it and show you the work a working example in processing and those of you who want a fun exercise am I just like editing the wrong oh there must be a loop in the in setup that's crapping out whoa I don't need this order thing this order is messing stuff up there's like a global array order which I don't want and I don't I don't want to do this best ever thing right now um I just want to least get to the point I feel like this need to fix this like little weird problem that I'm having right now hello ah orders not toin sketch. J line 93 oh this. order hey this.org order yeah this do order this do order uh I'm going to get it looks like it's like still not uh like I'm not I'm not seeing background zero so something is getting stuck in setup forgot an i where where where where did I forget an i 92 should have n++ not i++ oh thank you there we go there was my infinite Loop there's got to be a better way I could probably force quit a tab right like if I go in Chrome to uh task manager and then uh this one and process yeah that's better and uh okay I at least want to just get the start of this going uh back and uh draw the PO the population there we go okay so I I got to the point that so you guys I I AP I think that I've I've made this m this is a classic mistake that I do in teaching regular actual class if I want to get through a certain number of topics and I have it in my head how to do it and I've prepared all of it no matter how much time I left I try to rush through the last thing and as much as I feel a little bit disappointed to not get through this last piece um I think the this YouTube channel would be better served by me taking the next 10 or 15 minutes to just kind of wrap things up talk you through a few things talk about what's going to happen later in August and September I need some time once I turn off the stream to make sure the files get uploaded properly so that the tutorial videos can get uploaded so I am going to stop doing the genetic algorithms um but I'm uh exam but I am going to however take five minutes to show you the uh an example that I made at one time or another in processing and I'm running the latest version of processing here um I want to just show you it working and talk you through so what what what what my intention here of the next steps which I'm not going to program from scratch anymore was that I would look at all of these paths calculate their distance and their Fitness would be tied to their distance so the shorter their the distance between all the points the higher their Fitness now the really really tricky thing uh that merits quite a bit of discussion that would have taken quite a bit of time oh you know what I'll do I have a short video to do which maybe I can fit in but um is before if I had some sort of DNA like this and some sort of DNA a that was like this and I wanted to combine them and do crossover in all of my previous examples that I made this would be totally valid right because I could take this half of the DNA and this half of the DNA but notice this is not a valid order of cities right so we have to invent a new crossover function and by the way now that I'm going to be on a little bit of a Hiatus for a couple of weeks I would would love to hear your suggestions for interesting crossover techniques the one that I've chosen to use I believe if you Google it you'll find it listed under something like an ordered crossover that's essentially what we're doing is I might take and so let's let's make a a longer example 0 1 3 2 4 and here's another uh 4 3 1 2 0 so let's say I need to make a new order out of these two and let's say I decide I'm going to take this section from a so I'm going to take this section from a and put it in here keeping it in order because the sequence of things is important now what I need to do is fill these remaining spots from here so I'm going to say four is that already here no so four goes here three is that already here it is one is that already here no no so one goes here two is that already here yep so I don't pick that one zero so that goes here so what I do is I take a random section of the first one and then I I put it in the new child in that order and then I go back to the second one and pull pieces out pull them out in order uh filling out the rest of the empty spaces so if you look at my processing example which I hopefully should be able to open up right now and I will it's already actually on GitHub um you will see an algorithm for doing this and I I feel like I could have done this whoops I could have done this in uh JavaScript using slice and all sorts of interesting ways uh in uh the processing version you will see that here that particular algorithm under crossover and so you can see that I'm picking a random start and an end and I'm making the new DNA go between that start and the end and then I have an algorithm for filling out the rest of it so this is I could I I I i' I've you know started to feel like um oh yeah Oliver makes a great suggestion in the chat which I want to read in a second um but uh I realized that this is kind of like almost a whole topic unto itself which would take a significant amount of time and I don't want to rush through these this stuff I feel like this could actually be a good video and if it doesn't happen for a few weeks it will live on YouTube forever as a better video than the rushed one I would have made today um ah um so Oliver writes you can actually have the problem Space by enforcing lack of reflective things 012 is the equivalent of 210 um and so that's actually quite important and that does actually help quite a bit but when the numbers get so big half of like a giant number is still like a really giant number but it but it is quite that is a good optimization that be worth implementing Akash asks any technique to do permutations using bit shifts um absolutely you could kind of get into the nittygritty of doing this kind of genetic algorithm uh Crossovers and sort of shift bits and you know I'm kind of staying at a higher level to make things more readable and kind of uh fun and easy to play with but certainly that is a possibility um so um so I I see lots of great suggestions in the chat and I'm going to hopefully get feedback from you guys and explore this stuff and improve the example maybe I'll actually build this JavaScript example out and publish it and then come back and do a tutorial about it later the one thing that I want to mention um and see if I could take a few minutes to do this is um let me go so by the way if you are interested in suggesting topics for future videos whoa my computer is just crawling to a halt uh let me quit processing let me quit the web server um um so this is a GitHub repository that I use to keep track of suggestions and you can see there's currently 135 suggestions I do like one or two per week so it's gonna take a long time to get to all these topics um I also sort this list typically by this and you can see that there's like a lot of interest in machine learning fluid dynamics is getting higher which is interesting I'm excited to do videos on Chrome extensions um so but um the one that I want to look for here right now is uh select um and this comes from uh Spectra now there are two um there are two issues here and I'm going to show you this one for a second so this uh by Sinclair zx81 I I would suggest you take a look at this particular issue it's issue number 119 in the repo um and this has a very this shows a really nice fancy JavaScript possibly es6 using uh uh way of saying ah you have the population of these elements unicorn popcorn a and isotope and each one of those elements gets a score how do you pick them randomly with their score maap to probability and there is this like kind of unbelievable using map and uh um um uh creating this select function uh here uh using sort of enumeration and all sorts of stuff I don't know if I'm saying that correctly but uh so I encourage you to take a look at this this is a pretty complex and sort of advanced JavaScript notation way of looking at this and I you know read this through and thought about it for a while and uh and I actually did a video about it where I kind of did it incorrectly Sinclair wrote a wonderful thoughtful reply to that i' would love I'd love to read this but I'm kind of running out of time uh and then um this is uh and so this is the algorithm that this is a sort of simpler way of writing this particular algorithm and I and I do want to do and I'm going to save till next time but I'm just going to mention it now in the live stream I do want to kind of mention this and it's a really interesting algorithm I'm going to come over here to the Whiteboard because what it's able to basically the algorithm that I implemented was an accept reject strategy where I pick two random numbers and I either throw away or accept the first one based on the second one I have to maybe try a whole bunch of times if you normalize the fitness scores right if I have three members of a population and I normalize their Fitness score so they all add up to one so let's say I have like 0.53 and . 25 so I can kind of almost draw this bar where this is element a this is element B and this is element C let's say I now pick a random number between zero and one I think I'm doing this right let me think we'll see so let's say I happen so I pick a random number between zero and one let's say I pick and let's look let me look at the algorithm here because I implemented this and now I'm kind of losing my mind while selector is greater than zero so that's the random number subtract okay yeah so I'm So Okay so this this is the selector in that algorithm R and I want to like continue while R is uh while R is less is greater than Z go back to that again while selector is greater than zero okay and I'm going to start with an index I'm going to assume that the index I'm going to pick is zero in the array and so uh so let's say I pick 08 and a is zero so now what I do is I say I subtract A's score from the random number that I picked so rals itself minus .5 and what do I get. 3 so that is still greater than zero so what do I do I increase the index by one and then I do that again I subtract then B score which is.3 that's a little unfortunate let's make this uh let's make this4 and 01 just to make the math work a little bit better I subtract B's score and which I would then have .1 so I am no longer greater than zero I skip out and I use this particular index or I actually have to subtract one first because of the way that it's being added but basically the idea here is that you're going to um the I'm not explaining this very well I'm kind of I'm going to come back and do a whole video on this when I do the next genetic algorithm video but the idea of this table is the things that are um you're going to get people are there's the right you're you're going to um because this one takes up so much more space in this kind of table we're going to like live within this one for longer before we escape out and so this is going to end up being the index more often so it's this way of saying pick a r you know if I pick a random number here and I sort of like Escape out I'm kind of stuck with this one um in a way you can sort of Imagine like picking a random number some am I in here or am I in here or am I in here and the way that I determine that is by seeing how long it takes for me to like subtract the scores and suddenly be below zero so that's the way this particular algorithm works I have to think about this a bit more and it's a really nice one for using a fitness score with a sort of selection probability okay so that's an improvement and you're going to see that pop up in my examples as I publish the code for the traveling salesperson genetic algorithm okay so um let me talk to you guys a bit about schedule I wish I had a generic uh calendar September calendar 2016 what does this give me um okay so uh these I don't know what is this August 31st was that right so most likely I am going to be coming back with live streams again the week of September 5th if things go well I would love to come back Monday and Tuesday the week before sometime that's the earliest but right now I'm I am committing to coming back with a live stream the week of September 5th although September 5th is Labor Day so that's going to make things a little bit trickier but that's my plan live stream the week of September 5th uh in fact I know that I could do it the afternoon of September 6 if I had to so that that will be the and then one live stream every week I am going back to teaching fulltime at this place called New York University uh there is a program there called ITP uh their program starts to begin in the fall it's a master's program uh and one of the classes I will be teaching at ITP is called uh uh programming from A to Z this is last year's syllabus it meets every Tuesday and so what I'm going to do is after the class meets and maybe every Tuesday afternoon although I think I have a do I have another commitment Tuesday afternoon no Tuesday afternoon oh no that well anyway I have to work this out but um uh to after I teach the class at ITP I'm going to come back here and kind of do the class live on the YouTube channel and there'll be videos on all these topics that are available for you to watch you can ask questions in the chat live and then um I also if you want to have further engagement you can go to um patreon which is a crowdfunding thing that I'm using and if you sign up here or you can see some of my videos I don't do a good job of keeping this up to date uh better place to go is probably coding rainbow.com if you sign up for the patreon what I'm going to do is I have a special slack Channel where I will engage and discuss the class assignments and answer questions also in that slack Channel but really it's more to be a not I mean I'll be there you can engage with me but you can engage with me however you want on Twitter on the YouTube chat but it's really to try to join a smaller community of people asking questions and discussing some of these topics so I encourage you all to think about joining that if you want in the fall um you know this is kind of I don't know how this is going to go for me in the fall I've been doing this now kind of more regularly since around February um and I've had I had a semester of leave to kind of ramp this up and I also have this recording studio space at least through September and it's sort of uh uh un I'm unsure whether I'm going to uh use this space after September so I might have to find a new space to broadcast anybody has any suggestions around that but hopefully it's going to work out to continue to use this space it's sort of it especially be nicer in the fall when it's not as hot um but I had a wonderful time I've been so thrilled to engage with the school for poetic computation a community here in this space and the other thing I'm really planning for the fall that you'll hopefully see crop up is I have a list of guests who are going to come on and do some guest tutorials or show project projects of various folks in the New York City area so that is something you can look forward to as well um so um that's kind of My overall thoughts I I have a backlog of videos that hav't been released you can find all the content in the archive of the live streams but so you will see new videos so subscribe to the channel you will see new videos released periodically uh every day or two over the next couple weeks there might be a week where you don't see any activity on my YouTube channel but I will come back I am planning to come back in September and if for some reason things go arai and I'm not able to do this content as regularly for a period of time I will kind of like shut down the patreon thing um uh or or pause it because I hope to not be I'm you know I'm I'm I'm firmly I'm in it to do this I'm having fun with it um I'm getting good feedback from people uh positive and negative constructive criticism which has been really helpful and I just to me this is an experiment to create content that is accessible and friendly and playful and experimental and creative um and also to engage uh and create communities you know I find video content for learning to be useful but I find the most powerful way of learning is the the sort of community of people together talking to each other and that can happen physically in space which is an incredible powerful thing but it also can happen online through social media through YouTube chat through slack Channel and so I'm experimenting and I'm always looking for feedback and ideas about how to do this better um and one thing that's on my agenda is to get a more inclusive community of people uh also kind of joining the stuff that I'm doing and participating in processing and P5 J and processing Foundation activities which is a separate uh my YouTube channel exists as a sort of separate thing but obviously is interrelated and there goes the camera uh interrelated with my work with the processing foundation so I hope more will come I I'm kind of uh I feel like I need to play you guys out with a little bit of dancing which seems to be a thing that people enjoy I I I should turn up the volume here so I can hear it I don't know what I don't have all my songs uh I guess I should preview you the uh coding Rainbow theme song so I'm sorry I wasn't really able to answer a lot of questions or or I I have my I I can't wear these any anymore cuz it's too distracting for people with my weird cut off head oh I have stickers tweet me if you want to get stickers I I'm give them out whenever I see people in New York City um and uh but you can also order them online it supports you know I get like 10 cents or something if you order sticker um and uh yeah so my kids were telling me something about the na neigh what's your na ne which apparently is old and out of date and the fact that I don't even know what it is shows that I'm a really old weird person this is season finale not unlike Game of Thrones nothing bad will happen the worst thing that happens is water will get poured on my head which I actually just did but I cooled off a little bit I'll wipe I'm going to wipe it up it's a rubber floor here so everything's fine hopefully this microphone is not getting wet and being rude on the season finale on the season premiere stay tuned for next season of coding rainbow um uh okay this I'm really signing off now whoops no I hit the wrong button bye everybody see you next time have a great rest of your summer enjoy the outdoors do something fun that has nothing to do with cating hug your neighbors in your friends