Oh welcome to part three of my neuro evolution flappy bird coding challenge alright so jump oh yes oh that look like it should probably should have hit the pipe there but anyway that aside look at these birds they're really trying to get through those gaps in the pipes alright so I want to do a few things to improve them number one this is a little bit ridiculous that I have to sit here and wait and let it run it's kind of enjoyable I mean I'll have to go soon so I got to speed this up so here's one thing I'm gonna do to speed this up I am going to I don't need to like all of the logic that's driving the game I could just do that many many times per frame right I don't actually need to draw and show the animation so for example if I were so one thing I need to do is separate out all the logic of the game from the drawing so one thing I'm going to do is I'm going to take out pipes show here let me just this is like counter is part of the game logic looping through all the pipes and checking them that's part of the game looping through all the birds if Birds this is part of the game so what I just put I book drawing is not so let me take out bird show and now I'm just gonna at the end here set say let for let bird of Birds bird show for let pipe of pipes pipe dot show this should be exactly the same nothing has changed but now and I might as well take the background and put the background here so this is all the drawing stuff and now what I'm going to do is I'm gonna say for let n equal 0 n is less than cycles a call it cycles see n plus plus I'm going to do all of the game logic stuff many many times oops which goes all the way down to here so and then I'm going to say let cycles equal 100 so watch this so now this is just like doing it really really fast Oh time but I want to be able to like speed it up and slow it down also so one thing that I can do to do that is I am going to say let slider slider equals create slider I'm gonna make a slider that goes from 1 to 100 and starts at 1 and that I'm just gonna say slider dot value so instead of a variable called cycles I'm just gonna use the value of that slider so now I've got a little slider here I can speed things up and I can slow them back down so this is gonna help me a lot where instead of having to like speed up the video that you're watching if I'm editing this after the fact I can actually just do this so in fact I could let this go for a little bit and then I could come back and see like how we doing here we got one that's doing pretty well so but here's the thing I also think there are some things that I really need to do to help the help the evolutionary process along one thing is I'm gonna go into the neural network code and look at how I'm doing mutation so this is the mutate function so first of all I'm a little suspicious here I want to make sure that mutation is really happening so let me at least console.log test I just want to see I'll call it I just want to see that this is happening in the code somewhere and I'm gonna go back to sketch digest and just have like three birds because I don't want it to go crazy so as soon as the three are done I should see mutate mutate yeah so I got a bunch of mutations that's good so that is being called so hopefully the weights are being changed but you know what might work better I think I have a sneaking suspicion is that it might actually help me to rather than when I mutate pick an entirely new weight so you know what's going on here the internals of the neural network are something that I haven't talked about in this series that's really something reserved for my other videos about how neural networks work the only thing that's relevant in this series is the inputs of the game come in the outputs come out and the output tells me whether I should jump or not but what's actually stored inside the neural network or a bunch of numbers between negative 1 and 1 for all of these connections and so mutation means just pluck one of them out and give it a new value but if it's one that's doing sir pretty well I just were to like tweak the value a little bit instead of just giving it a whole new value and also what if I were to just tweak it a tiny bit so use one way I could do that is use a Gaussian distribution of random numbers random numbers they cluster around like a mean of zero but are often like so just like I want to give each a little bit of a nudge so let me come back over here and I'm gonna have to build in Gaussian random number generation into the library the neural network library but right now since I have p5 involved just to fix that I'm gonna comment this out and I'm gonna say return Val so this would be just like me adjusting the value a little bit right return the actual value changed by a little random amount but I think I'm gonna because when I did this for my class last year actually I remember using random Gaussian which is this is now a p5 function from the p5 library this doesn't exist in JavaScript so gotta implement that into my library that'll work for now the mean would be 0 and the standard deviation would be like point 1 let's try that so let's see how this goes oh and let me I took out the console.log and let's give this a whirl now all right so I'm gonna speed this up and I'm also oh wait there's only like 2 of them so the other thing I need to do is let's get myself a nice population let's try 500 of these all right so there's 500 going I'm gonna speed this up and I'm gonna let this run for a little while and I will be back all right so it looks to me like we've done it there you know there's so much variation in here but I've evolved it for now 76 generations and what we see here is that we've got a bunch that are still alive and they're probably one in there that has pretty optimal weights and it's making it through now one thing that I would really like to do is it's kind of more fun to watch this if I show only the one that's kind of doing it bet doing best but at some point there will only be one left but I think we're pretty much there here's some things that you might want it that I would love to do with this in another part but I'm gonna leave them as exercises for the viewer come on oh yeah over um so a couple things one is that I can keep track of the single agent the single bird that has done the best overall time over all generations and I could save that in a variable like the best bird record bird and and what I could do is actually I could download those weights I could save those weights to like a JSON file it's neural network configuration to a JSON file or even just save it in memory and I could always just click a button or something and say let me just see this one so that's something I would really love to add to this it's actually I might as well just show it to you because the example that I made for my course which is here is essentially exactly the same but there's a couple different things so one is I'm gonna so let me just ramp up this speed here so let me let this run for a little while the games may be a little bit different in this one and but so one of the things that I like about this is once I've let it run for a little while I can just click run best so far so now it and I could speed this up a little bit but I think I better train it more because I didn't get a really good one so so this is the idea of being able to just run the best one that's done you know that that has the best high score look at this okay so I'm gonna now do this so we can see this one that kind of has a pretty good sense of how to play the game kind of running just watch that one on its own it's very satisfying to watch like amazed that it's doing it so that's one thing that would be worth as an exercise trying to add to this implementation that I made now once I even do that I could save it to a file so there's actually in the toy neural network library there's a like a save Jason I think function so I could save it to a file to reload later so if I'm training it all day or for an hour I could save it and bring it into another biome that's one thing another thing that I might want to do is I could probably optimize the fitness function quite a bit for example what if and this is a thank you to versatility for this this suggestion what if I actually scored not just how long it lasts but how well it maintains its look why location in between the top and bottom of those two pipes so that would be there you could probably think of many other ways that you could optimize this so saving it making the interface you know now we could also take this and we could go and add all the fun coding train design elements from the original from that flappy bird clone repository pull request now start the floodgates are open so we could make a version of this that maybe has even like a saved pretrained flappy bird agent another suggestion that just came in from the chat is the actual Y velocity as an input as well because if I'm already moving up maybe I shouldn't jump verses by moving down so that's something you can add oh and here's another one what if actually instead of my own manual feature extraction where I'm kind of evaluating the flappy bird scene to make inputs what if just the pixels what if it was just the pixels of the game itself that became the input but now we have a problem right we have a problem which is that I am looking at a scene let me just speed this up with come on let me just refresh right I am looking at a scene with many many many many birds playing all at once if I want to use the pixels of the game as input I cannot have the whole population there I need to have just the one current bird that is playing so I have to create a graphics context for every single member of the population and in fact this flappy bird game is so simple that actually as the player plays the game it doesn't affect how the game plays out imagine if I were doing my asteroids coding challenge I can't have them all play in the same world because if one shoots an asteroid the other one hasn't shot that asteroid the game is changing for all of them so another thought experiment could be how could I actually make this work where I see instead of all of them playing within one canvas a grid of the whole population lots of little little little versions of the game all playing together you know to be honest to make this work I don't have to see anything at all but try doing this with another game can you find my snake challenge my asteroids challenge my Frogger challenge any of those now could be trained a bot could be trained to play that game using the exact same technique all right from the chat I also just learned that I have a couple mistakes one is that supposedly I guess in the game flappy bird if you go to the bottom you die so I don't have that implemented be interesting to see if it could solve itself with that also the way that I'm finding the closest pipe it's no longer the closest pipe right as it gets right up to it and so I really should not consider to be the closest pipe until it's gone all the way past but there's lots of little tweaks and minor things so I would gladly encourage you to create your own versions of this and submit them as community contributions and I'll look at them and maybe do another live stream next week or whenever I do the next live stream going through and showing some of these community contributions all right so thank you very much for watching this threepart to fuel coding challenge if it was really in three parts a penalty three I look forward to doing more many more coding challenges hopefully maybe around a more neural evolution coding challenges because kind of one of my favorite topics okay thanks for watching and I'll see you in the future video