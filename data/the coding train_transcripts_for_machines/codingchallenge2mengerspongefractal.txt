Welcome to another 10 Minute Coding Challenge. I have 10 minutes to program a Menger sponge fractal. Now, I did spend a few minutes before I started this video thinking about it, so I'm not totally starting from nothing. I have never actually programmed this before. I have seen it before, but basically, what I need to do is make a box. And then what I need to do is, from that box, make lots of other boxes, and then cut holes in them, and then do that again recursively over and over and over again. And I kind of worked out some math. I really shouldn't use the time, but I got to come back over here. What I did is, thinking about that diagram, there are 27 one box can be cut into slices by 3. You get 27 boxes that fill it, and these are the ones that I need to remove. I need to remove the center ones on the top and the center ones on all the sides. If this is the middle, this is the top, middle, and bottom, And then also that very middle one. So let's just see if I can even make that happen. So how am I going to deal with this? Well, good thing that I'm working in the Processing programming environment because, at the very least and I can see that I'm not going to get this done in 10 minutes. So let's see what we'll see how this goes. So at least the first thing that I want to do is draw a box, and I should probably add Peasycam or something, which is a Processing library that I can move the camera around. And let's think about the box should be in a window that's 400 by 400. That box should be let's make it 200 and see what I get. Box is not available because I need to make this p3d because I'm doing things in 3D. Now, this is going to be a little bit of a problem. Processing sketches take a little bit longer to start up in 3D. And I want to say no fill, and I guess what I could do, just for the sake of argument, is I could do something like rotate x by an angle just very, very slowly. Always have the sketch rotating, so you can see that there is actually a three dimensional box there. So I have this three dimensional box. What I want to actually do is make a box object because I'm going to need to keep track of a box, and then that box makes other little boxes, which make other little boxes. So I'm going to add another tab here, and I'm going to call that tab box. And I'm going to make a class called Box. And for the box, I need to have the location of the box, which I'll call position, and I need to also have the size of the box. And so when I make this box, I should give it an x, a y, and a z, and its position will be a PVector at that XYZ. And I should also give it a size, and its size will be size. And then if I want to see that box, I need to translate by the position x, y, and z. And then I need to draw a box at that location, and I should probably also include push matrix. I had a technical mishap, and I lost sound. So I'm picking back up from where I was, and what I did is I made a box object. You don't need to you remember. Yeah, I already got the box object. So what I need to do now is use a box object instead of just hard coding a box. So I'm going to say Box b, b equals new Box, and I just want it to be at the middle of the screen with a size of 200. And instead of actually drawing a box, I can just say b.show, and this should be exactly the same. So now, I have my one box as a box. So now what I need to do, and I'm always looking over. I see green bars. Audios is working audios? Audio is working. What I need to do is take that box and chop it up into lots and lots of little boxes. So how am I going to do that? What I need to do I'm going to make a function inside the Box object that has three FOR loops. I want all the x's, all the y's, all the z's. It doesn't really even matter which is which. So I'm going to say 4 into x equals 0, x is less than 2. And actually, I'm going to start at negative 1. I was going to say x is less than 3, but I'm going to start at negative 1 and say x is less than 2 because what I want is, if 0, 0, 0 is the center, I want to go negative 1, 0, 1, negative 1, 0, 1 for the x, the y, and the zaxis. x++, so I have this, and then I need to do the same exact thing with y, z. How am I doing on time, everybody? Five minutes left. Here we go. y, z, and then I need three closed brackets because what I need to do now is make a new box. And the new box is going to be at these new locations, but not directly at x, y, and z. x, y, and z times how big should this box be. Well, this box should have a new radius, which is the each little box has the original box's radius radius is the wrong word, but size divided by 3. So r divided by 3. So x times new r, y times new r, and z times new r. Now, there's another thing I'm missing here. Each one of these boxes isn't just that size relative to 0, 0, 0. It's relative to where the actual box is. And by the way, it needs a fourth argument, which is the size of the box, so I actually need to offset it by this box's current location. So this has now become quite I probably should have used i, j, k, and then I could have separated this to three lines of code, but it's too late now. You can see what I'm doing here, which is that pos.x plus x times new r, pos.y plus y times new r, and pos.z plus z times new r. So what I'm doing is I'm making I have three nested loops, and I'm making all nine boxes. So what do I do with those boxes? What I need to is have an array list of boxes, which is a new ArrayList. Unfortunately, ArrayList require a lot of typing, and I'm going to say boxes.add whoops. I'm going to add all those new boxes that I make, and at the end of this function, I'm going to return it. So the whole point of this function inside the Box object is to know how to just say, hey, I'm a box. I'm going to give you 27 boxes that are inside me, and give them to you as a big array list. And now, what I'm returning is an array list of type Box. So let's now, over here, what I want to do is I want to say ArrayList Box sponge. So the sponge is actually going to be an ArrayList of those Box objects, and sponge.add, so it starts with just one box. And then in draw, I loop through all of the boxes and show them. Sponge I called it sponge, not boxes. So this is still the same exact program. Come on give me a I got, what, a null pointer exception? Oh, because I forgot to say sponge is a new ArrayList. Boy, what I wouldn't give for some JavaScript right now. Array would be so much easier to deal with. So now, I've got an ArrayList with one box in it. Now, what I need to do is, in mousePressed, what I'm going to say is do exactly this thing again. I'm going to have the next generation, a new ArrayList. Actually, ArrayList next equals, what? b.generate, and then sponge equals b oh, no, next. So I'm going to take no, no, no, no, no, no, no, no, no. sponge.get 0. So sponge is an ArrayList with one thing in it. This has got to change in a moment. I've got a 1 minute 40 seconds left. We're going to get close. Sponge is an ArrayList with one thing in it. I'm going to get that one thing out, make a whole bunch of boxes from that, and replace the sponge. So if I do this and run this, come on, give me a click. Boom, I got 27 new boxes. That's really, really good. That's what I want. But this is no good. What I really want to do is start with a new empty ArrayList because I need to have more than one generation. And what I need to say is, for every box that's currently in the sponge, give me the new boxes by generating, and then in next, addAll. So in Java, ArrayLists have a function called addAll, where you can add an entire array list. So if we look at this particular algorithm here, what this is saying is, when it's a new generation, make an empty ArrayList. Make an empty array. Now, for every box that's currently in the sponge go and divide it up into 27. Take all 27 of those, and add it into the next, and the sponge becomes the collection of all of those. So now, if we run this, click, click, click. I'm just subdividing and subdividing and subdividing, and I could do this forever. And it would probably if I did it one more time, I might even crash my computer, which I really shouldn't do when I only have 11 seconds left. So I only have 11 seconds left. I'm not going to finish this in 11 seconds, but I'm giving myself a bonus two minutes. It's all about bonus time here on Coding Rainbow. So I give myself a bonus two minutes, and I'm going to click over here, and then I come back. And now, what I need to do I've done it. All I need to do now is remove the boxes that are not part of this is a battery. This is why I lost my sound. I need to remove the center box out of all of the sides and the middle. And I tracked all the indices, but think about this. Somebody, and I can't remember who, suggested this in the chat, on the live chat, so this wasn't my original idea. I'm sure this is but if I go back to this Menger sponge, you can realize that what is the same what about all of these boxes that are being removed is the same? If any two values, its x and y are in the if any two of the axes are 0, it should be removed. This has an x and y as 0. Maybe this has an x and a z of 0, and this has a y and z. And the middle has the x, y, and z as the 0. So I just shouldn't add a box if where's my code? Where's my code? I just shouldn't add a box if so there's got to be a better way of doing this. But let's just oh, you know what I could do, is add up no, no, no, I can't do that. Oh, yeah, yeah. This is a crazy way of doing it. Sum equals absolute value of x plus absolute value of y plus absolute value of z. So if two things are 0, it'll be 1 or less. So I shouldn't add the box if sum is less than or equal to 1. I should not add the box. That should do the trick. Let's see if this works. I'm very proud of myself for thinking that. Well, I did it the opposite. I'm just getting those center ones. That's kind of cool, though. Look at that nice little fractal shape. I've got going here. That's kind of cool. That's the inverse. So I guess if it's greater than 1, I should add it. I just had it reversed. So let's do this, and we can see oh, this is exciting. Oh, I ran out of my two minutes, my bonus two minutes. It's fine. Look at this. Now, you can't really see that this is working, but I think it would be helpful if, in show, I gave it a fill. Let's just try that. I should make it a rainbow somehow. Oh, oh, look at this. I really need to rotate by some other I'm going to just do some random other rotation just so we can see this better. Can I give some alpha here? There we go. I'm pretty sure this is working, but I'm not getting exactly the visual effect I was hoping for, probably because I just need lights. I wonder if I put some sort of lights in the scene, that would help things. Oh, yeah, there we go. There we go. Look at this. There's the sponge, one, two. Oh, this is really exciting. I did it! Well, it's quite slow now, you can see, but there it is. And I kind of want to get rid of the stroke. And I kind of want to add Peasycam. And I'm just going to do this, this, there we go. This is lovely. So you can see, here, we now have, in probably about 20 minutes in total when all is said and done, the Menger sponge in Processing using p3d, using a lot of ArrayLists. I will upload the code that goes with this example, and there will be a link in the description. And hopefully, I don't know, make something with this and send it to me because this was very this was kind of like some sort of birthing experience that I just went through. It is 400. I have to hit stop over here. Goodbye.