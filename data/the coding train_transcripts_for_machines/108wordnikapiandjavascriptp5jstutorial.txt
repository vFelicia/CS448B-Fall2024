Hello, welcome. In this video, I want to look at an API called the Wordnik API, which is an API that allows you to get lots of information about words in the English language. So on the one hand, this might be relevant to you in that you're interested in the Wordnik API. On the other hand, you just might be interested in how do you work with APIs, how do you work with data. So I'm really looking at this as a case study of one particular API, and I'll do a few more videos after this with other APIs, like The New York Times API and maybe some API that involves images. So where do we get started here? So I'm using the p5.js JavaScript library. I'm the p5.js editor, which you can get at p5js.org. And let's get started. So first of all, what is this Wordnik thing? So let me go to my friend my friends are things on the computer apparently the browser, and look at the Wordnik website. So here I am just at wordnik.com. And I could type in a word like rainbow. And I could see hear that Wordnik is giving me lots of information about this word. It's giving me definitions. It's giving me examples. I can see here etymologies, where does the word come from, related words, synonyms, equivalents hypernyms. So there's lots of information, lots of data associated with a particular word. So Wordnik is a vast dictionary and resource for gathering information about words. And I don't pretend to be an expert in it at all. I'm no expert on anything, actually. But looking at it from the lens of I'm a person who is talking about JavaScript code and data APIs, this seems interesting to me. Let's try to make something with it. So now, this is just the Wordnik website. There's all this data there. So you have to ask the question, how do you get access to that data? Well, the lovely thing here is that Wordnik happens to say to you, oh, look, we have this data. We want you to have it. And there is this thing called an API, Application Programming Interface, a way for Wordnik's server, the programs that run in its server, to send your program data through this format known as JSON. And if you don't know about how that stuff works, you can go back to the beginning of this video series, which kind of gives you an introduction to that sort of data format how this stuff works. But I'm going to click over here, and I'm just at developer.wordnik.com now. And if I went to that, you'll see there's a lot of information and things that you can look at. But what I'm looking for is this. I'm looking for this thing that says Docs. So how easy it is to use an API is only as good as the documentation and examples are. And I think Wordnik is a nice example of an API that has good documentation. And so I'm going to walk you through how you can I'm rambling way too much. But I am making a point, in a way, by rambling, which is that a lot of the work involved with working with data and APIs doesn't even have anything to do with writing code. It has to do with reading the documentation, playing around with the website, clicking on things, and figuring out how it works so that you know, by the time you get to writing code, you know exactly what to put in your code. And that's the stage that I'm at right now. So let me click I don't know where to look. Let me click on Docs, and here we are. And you can see this might be unfamiliar to you. Like. What's going on here but? You could see, hmm, ah. So I've looked at this before. So I'm trying to get I'm like doing like a method acting thing, where I'm trying to pretend I've never looked at this before. But I'm seeing here, OK, there's a bunch of options here to click on. And this is quite common with APIs, in that they're sort of commands that you can execute with an API. Like, maybe you want to ask for information about one particular word. Or maybe you want to get a list of words back. Or you want to ask for information about a group of words. So these, what what's what what's being shown here are the different API commands that you can kind of start with. And I know for a fact that in the scenario that I'm imagining in my head, I want to get information about a particular word. So I'm going to click on this, and it's going to show me, aha. So in one of my earlier videos, where I looked at Open Weather Map, the whole thing was figuring out how to put together this API query out of a bunch of pieces. So what the documentation is showing you right here is what are those pieces. And in fact, you could see, like, mm, if I want to get the definitions of a word, there's like this part of the path, then there's that part of the path. And what's this thing here in between curly brackets? Oh, that's the thing that I set myself. So if I want to get the definitions of the word apple, I need this part of the path and this part of the path, and I want to put apple in there. If I want rainbow, I want rainbow in there. If I want porcupine, I want porcupine in there. It's just some words I'm thinking of in my head. So for this particular example, what I want to do is look for related words, so words that are synonyms, words that are antonyms, similar words, opposite words. Those are the things that might be intuitive to you. But there's lots of other ways that words are related to each other, something that's called a hypernym. Like, furniture is a hypernym for chair. It's like a broad category. And there are hyponyms, which are the things in that category. So they can have these relationships of hierarchy. So there's a lot more to this. And somebody with more knowledge about it, come and join me someday and talk about that. But I don't even need to be an expert on that. I can click on this Related Words and start to see, ah, OK. Now. this is something that makes me personally super happy. And it should make you happy, too, if you want to work for an API work for work with an API which is that this is a tool. So in order to figure out how to use the API, this is now an interface where I can start to do things like, OK let me put the word rainbow in here, use canonical. Hmm, that must mean something important. We can kind of read about that in the documentation later. But false default, that's my relationship type. Ooh, I could pick a relationship type. Or I could just leave that blank. Limit per relationship type, that must be how many things I get back. So you can see I'm sort of configuring the API call that I'm going to make. And then look at this button. This is the greatest button I've ever seen. And I've seen a lot of buttons. And I'm sure I'll see a greater one later today. But right now it feels like such a wonderful button because it says Try It Out! So all I need to do is click on this. And you could see first of all, look what I've got. I've got the full path to the API query. So this is that API career that I spent all this time figuring out with Open Weather Map. The tools of the Wordnik website are helping me make that query already. So I can just literally copy/paste this into my code. And then it's also showing you what the response is. So you can see, ah, look at this, equivalent a sea bow. Oh, a rainbow is equivalent to a sea bow. I don't know what a sea bow is. I guess it's a bow over the sea. And you can see the hypernyms, right? Arc is like a broader category for a rainbow. Bow is a broader category. What other kinds of bows are there? My whole life I only ever thought there were rainbows. Now I know there's sea bows and other kinds of bows. I mean, there's the both you wear and your head. Cross reference, spurious rainbow style, synonym, bow. So this is like to me, this is just fun. I'm getting some moments of surprise here, getting some data. You might have a real reason why you're doing this. But the next thing I want to do just to really be sure that this is working the way I want is I can take this full URL, and I'm going to just copy it again into my web browser just into the address bar and hit Enter. And you can see, look at this, this is indeed the data that's coming back. So I've now done essentially all the work that I need to do before I start writing code. I found the API. I looked around the website. I enjoyed it. I found that it has documentation and an API tool to help me configure a query. I did that it. It made the URL address for me. And I put that into the browser, and I see that I'm getting data. So once I've gotten through those steps, my next step is to start writing some code. So really, I need to use the load JSON function to get this data. And then I need to practice all the things that I've looked at in previous videos, which is how do I get this is an object. And then there's an array called words. The whole thing is an array. So how do we dig into the data? And I'm going to get to that. So let's get started. So one thing that I want to make a point of here is that once again we have this idea I feel like I have to use the whiteboard in the video, which is sort of silly. I don't really have to use the whiteboard. But again, I need to do this thing where I think about this API call in pieces. So I might have the path to the API. I might have my API key as a particular variable. And then I'm going to create that API call as like the API plus the API key and then something that goes here in the middle. This is the word that I want to search for, like rainbow or something like that. So this is one of the things that I'm going to have to figure out is now that I have that really long URL you can see it up at the top there how do I break it into pieces to make the query in the code? So let me come back over here, and let's start writing some code. First I'm just going to grab this URL, and I'm going to go back to p5. And I'm going to say var URL equals. And it's this long thing. Now, one thing you'll notice, by the way, is there's an API key in there already. Like, whose API key is that? Now, what Wordnik actually, I don't know that this is true. But what I'm speculating is that Wordnik, when you're using their tool, just generates a temporary API key that you can use to try out the API. So hopefully this will work in my code for a little bit. If not, I have my API key saved in a file. But again, to do this yourself, you're going to have to sign up for an account, developer account with Wordnik, and get your own API key. Or analyze this video and use mine, which is fine with me. My API key, your API key, that's how I feel about my API keys. So couple things I want to do is I want to first realize that this is the thing rainbow, right there, that's the thing that I need to put into the query myself. So I'm going to put an end quote here. And then I'm going to make another variable that stores a rainbow. And then I'm in and make another variable that says URL 2. So I'm going to just divided into two parts. So this is one way of doing it, right? That big URL has the beginning and the end and the one thing in the middle that I need to change. So I think this is kind of a way of doing it. So next what I am going to do is I'm going to create I'm going I want to have a link on the page, which will be like a button. And I'll put the word rainbow in it. Sorry. I lost my train of thought for a second. I, like, went into some sort of trance state, forgot that I was making a video. Let me come back. What am I doing here? So first of all, actually, let me just check to make sure this works. So I just want to add load JSON URL 1 plus the word plus URL 2. And then I need a callback where that data will come in. So then I'm going to add that callback. The callback, the variable, the argument that's part of that function, that's what gets filled with the data. And I'm going to say print line data just to see that this works. So oops, and I better save this as something, Wordnik. So let me run this and see if it works. And you can see, ah, good, something is happening there. I got some data back. So first of all, we can be happy. We know that this idea works. Now what I want to do is what I want to do is put something on the screen that when I click on it, it makes that API call. So I'm going to make a I'm just going to call it like a link. And I'm going to say link equals create A with that word in it. And it's going to link to nothing. So I'm kind of jumping around here. But in the p5 library, in the DOM library, there's a function called create A, which makes an anchor link. You might say A href equals Google.com and then Google. Here I'm doing I want the word rainbow to link but to nothing. I'm just putting the pound sign in there because it doesn't actually link to another URL. I'm going to handle the clicking on it. So if I look at this now, if I run this sketch, you can see here, there it is, rainbow up at the top. And I probably should add no canvas, because there's like an invisible canvas there that's making the spacing weird. And I can run this again. You can see, there it is, is up at the corner. So I don't any clever styling going on here. But there it is up at the corner. So now what do I want to do? I want to make it so when I click that link, I'm going to write a function called askWordnik. Then, in that function, askWordnik, I'm going to make that call to load JSON, right? So here we've got a if I can type. I can type. So here we go, right? What do I have now? I have this web page that has a single link on it. When I click on that link, this askWordnik function will be triggered. That askWordnik function we'll make an API query to Wordnik, and the data will come back. So the question is, what do I do when the data comes back? So first of all, let's just see that this is even working. So I'm going to run this again. What I want to see right now what happens when the data comes back. I just should see something in the console down here. So I click on Rainbow, and I see something in the console down here. Perfect. Now what I want to do is look into that data and pull out a related word to the word rainbow. So let's go back to here where I had that data open. Now, what is this? What is this? OK, I don't know. This is an array. You can see that square bracket at the top means that it's an array. What is each element of the array? It's a kind of relationship. So each element is a kind of each element of the array is, like, equivalency, hypernyms, maybe cross reference, you can see. And then what's in each element of the array? A property called words, which has another array, which are the actual words that are related. So for example, if I wanted to get to this particular word, sea bow, I would say data index 0 dot words index 0, right? Data is the whole thing. Index 0 is this first object. Dot words is that property. Index 0 is that sea bow. Let's try that. So I'm going to go back to my code. And I'm going to say print line data index 0 dot words index 0. I think that's what I said, right? Let's just look at that. I'm going to run it. And when I click on Rainbow, boom, ah. And look at that, the most beautiful two words in the English language to me right now this is working sea bow. So what could I do with that? Well, if I have access to this link, why not just change the content of it? So I'm going to say link dot HTML oops, this is the wrong place. I don't need this draw function. I'm not using it. Link dot HTML is that data. So there we go. And now when I save this and run it again, let's zoom in here. I'm going to click on Rainbow, and I'm going to see sea bow. So I queried the Wordnik API. And I got back a related word. What happens when I click on Sea Bow? Mm, nothing. I'm still getting sea bow. So what I want to do is now when I query again, I want to get a related word to sea bow. So I'm kind of playing a game of telephone with the Wordnik API 15 minutes into this video. If you're 15 minutes into this video and still you're watching, #seabow. That's I don't know. I don't know if this is really working, my whole hashtag thing. I feel like such a doofus. So what do I need to do? This is always querying. Oh, my finger disappeared. This is always querying the variable word. The variable word is always the word rainbow. What I want that word to be is now sea bow. So what I really need to do is update the variable to be that word. And then I'm going to add update the variable to be that word and then update the content. So now the next time it asks Wordnik, it's going to pass in sea bow. So that feels like a very strange word to say. So I'm going to click here. I get sea bow. To click there, I get rainbow. I click here, I get sea bow. Oh, rainbow, sea bow, rainbow so there's a flaw in what I'm doing, right? The flaw in what I'm doing is I'm only ever getting exactly the first related word of the first related category. So what could be a better solution here? Think about that. Think about this. Why don't I pick a random category and a random word from that category? So something you might do right now is pause the video, stop, and try to implement that yourself. I would wait for you. But that doesn't make any sense. So I'm going to go on and do this right now. And that's going to wrap up this video. But this could be something you could stop and try to implement on your own. But you can see that there's two numbers in here. I'm getting the zero element of the data array and the zero element of the words array. So what if I want to get a random element of the data array and a random element of the words array? Well, I just need to use the p5 random function. I could use the native JavaScript math.random, but I'm using the p5 library which has its own random function. I could say index, and maybe I'll call it index 1 equals a random number between 0 and data dot length, Right data dot length is data is that first array. So I want a random number in that array. But remember, random gives me a floating point, a decimal number. So I need to use the floor function to chop off that decimal. I don't want to be mean to the decimal, just to remove it nicely, kindly, put it to the side, and I'll talk to it later, decimal friend of mine. So then I'm going to now once I have that, what do I need? But a random word from whatever I picked. So now data index 1 dot length dot words dot length, right? This is now right? I picked a random index into the data array. So I need to look at that array, that element in the data array, and get a random index of the words array from that particular element. And I'm going to call that index 2. So I'm going to say data index 1 words index 2. And I did this kind of quickly, but hopefully this works. And now I'd run this again. And I've got rainbow, arc, flash, bash, bashed, clashed, clashes, dashes, dash, foil, frustrate, nugatory, slash. I don't know where this going. I'm going to stop now. I'm worried I'm going to get a word that's very embarrassing for me to say, like pumpkin. That's not embarrassing. But I kind of I couldn't I didn't want to say the embarrassing word because then I'd be I'm easily very, very easily embarrassed. I already am so embarrassed right now. So I think this wraps up this video. And there's so much more to Wordnik. I really only showed you just this one aspect of it, of using this particular API call, which, remember, is related words, word dot JSON related words. But I might encourage you, if you watch this video and want to do something yourself, go back to that API tool, come back here. I'm going to click Back in the browser. Look at all these different possibilities. I could get example sentences, definitions, top example. Wordnik has this huge corpus of lots of source text. And you could actually get word counts per year, I think, of frequency. So you might look at something, like how often is a word generally used in the English language over time? So there's so much possibilities there. I don't know. You probably better ideas. Write in the comments. This is like the longest video I've ever made, 20 minutes. And I thank you, if you actually are still here watching. And in the next video, I think I'm going to look at The New York Times API, which is yet another API. I wish I could stop and hear a question from you. If there's actually a live stream going on, maybe there'll will be a question. But I'm going to instead just hit End Record. Goodbye and until the next time.