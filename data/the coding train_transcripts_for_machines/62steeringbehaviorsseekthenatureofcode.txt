I forgot what I was going to say hi um steering behaviors this video is going to we're going to walk through our first we're going to make out an autonomous agent it's going to have a steering Behavior moded off of the work of Craig Reynolds and it's going to be very exciting so let's take a look we're going to start with a basic scenario let's say we have a vehicle which is represented by a triangle this vehicle has a velocity also in this vehicle's world is a target as represented by this Plus with a circle around it this is our Target the behavior we are choosing to simulate is seeking remember Reynolds says there each vehicle is going to follow three steps action selection steering and Locomotion Locomotion is just our physics engine we've got that um action selection we are the action we are selecting is seek this target so now we need to calculate the steering force and here we go we have a formula for that steering and this is like the greatest formula ever written in the I just love it it's so beautiful so simple and yet so powerful it's just like a happy formula look at that desire steering equals desired minus velocity I can do that it's subtraction right so we this is going to be our formula steering equals desired minus velocity here's the thing there is something a little more complex at play here and that is this desired desired desired velocity this means what when we go to calculate a steering Force we need to determine what is that vehicle's actual desired velocity and this can actually be quite a complicated thing to figure out fortunately for us in this scenario it's not going to be too hard so let's try to imagine for a second I desire to seek that Target what is my desired velocity let me think about that for a second okay I got it I just the target's over there I want to move in the target's direction as fast as possible so we could represent that as a vector by saying a vector that points from the location towards the target and what is the length of that Vector it is as fast as possible or something we're going to call maximum speed or Max Speed so one of the things we're making a new class in our code in our examples called vehicle and again we've just doing this is like some strange sopian like thing we're doing like let's just make the thing class over and over and over again this is just another mover another particle another thing whatever it is it's got location velocity acceleration but we're going to add two new param to our vehicles one is maximum speed and one is another one is maximum Force so um this is useful I mean there's lots of the these these parameters these values that are are going to allow us to really tweak the behavior of our system so maximum speed you can think of as a top speed like how fast is this thing able to go is it a race car versus a truck same maximum force is like how good at how good is it at turning um what's its handling car racing example is a perfect scenario for this hopefully you're thinking of some more creative use but car racing we have a car as a maximum speed and a handling that's what these variables are going to control but this is how we're going to scale calculate our desired velocity so once we have our desired velocity we need to apply a steering Force now deep breath and pause for a moment and stand over here and look at it from this direction we we did something like this several many videos back another time in our life in fact several times over we have looked at attraction behaviors what is an attraction Behavior it is when an object is attracted to some other object or in this case this thing that's moving is attracted to another location on the screen so with an attraction Behavior with a gravitational attraction or something you might have found a toxic lips we could have just sto there and said hey this Vector we made up that's the force that's going to point at the Target I mean that's the force that's going to be applied to the object but we're doing something more here remember I really want to write this down an a ton but I'm not going I'm just going to say it an autonomous agent has the as as a as a as an ability to perceive its environment to know more about its environment than just um than just sitting there and experiencing a force in other words it's able to look at its current velocity as it relates to its desired velocity and it's able to say like what's the error here what's the difference here that's the force it's able to compensate for how far off the path it already is going I mean think about it if your goal is to move as fast as possible to a Target over there and you're already moving as fast as possible to a Target over there why do you need to apply a force to yourself you don't if your velocity equals your desired velocity your steering Force has a net steering force of zero now okay so let's actually take a look at what the force looks like that we're now applying to this vehicle so let's let's do this um desired minus velocity so this is our desired velocity right here and remember when you add vectors you put them end to end so that's desired and now this is is our velocity if I were adding it I would put the velocity over here but to subtract it I just need to reverse the velocity's direction and put it and and point it the other direction so this is desired minus velocity and this is the resulting Vector that we get so you can see here that this is the actual force that we're applying which makes sense if we're already shooting in this direction we need to compensate back to steer towards that Target so this is kind of the power of this formula this formula says let me look at what it is I want to do let me look at it how I'm currently moving and let me apply a force to myself um which is the difference of those two so in this scenario pretty simple stuff but um as we're going to see when we start to look at flow field following and path following and flocking behaviors and all these other steering behaviors how we calculate that desired velocity is going to sometimes get a little bit harder okay so um let's kind of map this out a little bit um let's write let's let's sort of figure out a a little bit about how we're going to actually do this in Kota we're at six minutes which I think is pretty reasonable for a video we just have a few minutes more perhaps so I'm move the target a little bit closer so I have more space over here so let's just remind ourselves how this kind of calculation works with code right we know we we need to get um we need to calculate I erase that the steering Force ultimately is what we want to calculate but first we need to calculate that desired velocity so that we can calculate steering okay so how do we calculate that desired velocity first we just need to Vector the points from the location all the way to the Target how do we do that I'm going to say p Vector desired equals P Vector do subtract what Target minus location Target minus location now I have a vector that points all the way from here to there now I need to make its magnitude maximum speed this is so easy desired do set magnitude to max speed now behind the scenes What's Happening Here is that Vector gets normalized and then scaled normalized to a length of one multiplied by maximum speed to scale to maximum speed but here we have a a quick function in the processing P vector class set the magnitude at maximum speed once we have this now we just need to apply Reynold's brilliant formula P Vector steering equals P Vector do subtract what do we now want to subract desired minus velocity once we have that all we need to do is send that Force the resulting Force through our physics engine oh oh I forgot a I forgot a step so this is sending it through the this is calculating it this is sending it through the physics engine but we do want to add one little extra step here and that little extra step is saying hey this is not this perfect vehicle that can just steer however much it needs to steer that force that this force is magnitude is limited and so what the step that we're going to add here is say steering. limit maximum Force so we're putting some limits if that maximum force is very low it's kind of like a I'm really trying to turn I can't do it if that maximum force is very high I can turn on a dime really really fast so these variables as we're going to see in the code example maximum speed and maximum Force are really really key to tuning how your how your vehicle is going to behave all right so hopefully this scenario makes sense to you hopefully you now see how Reynold's formula is applied how it is that the crucial thing here is saying this vehicle has a goal that it it it wants to accomplish and that goal is translated to a desired velocity Vector once you have that you got R's formula you got a force and your vehicle's moving so let's take a look at how this actually happens in processing and I'll meet you over at camera 2 is that camera two I don't know maybe that's camera one there's only two cameras so I it's anyway hi um so here we've got the uh sketch excellent let's run it I hope I didn't like screw it up before um no it seems to be working so you can see here icept the fact that my head is in front of it this something I need to work on here I'm sure I can improve this okay so as I move the mouse around you can see that this vehicle is moving towards it you know it's not nothing too thrilling but it's it's an implementation of this Behavior what one thing it's interesting to see is hey it's always sort of flying past it then it has to turn around and come back this is something we're going to investigate in the next video when we start to look at an arriving Behavior what it means for that vehicle to slow down and stop when it reaches the target which is something I want to look at I think at this point in the next video although if you're looking for an exercise that might be something you try to implement just on your own come up with a scenario for that before you move on okay um so let's look at just a few key things in the code code here number one is here we have our vehicle class and you can see what I'm talking about we've added just a couple variables maximum speed and maximum force and not to overemphasize this point but um if I make that maximum Force really really large you can see how this vehicle now is able to just instantly turn and one of the things that we're that I want to emphasize here is that you know you have to ask yourself a question like why are you doing this in the first place is your goal to have something just move as fast as possible towards a Target if that your goal then maybe this kind then maybe you don't need all of this elaborate steering Force stuff you could just like set its velocity headed straight there the point of what we're doing is to create this kind of lifelike and improvisational movement and and the fact that we have these parameters maximum speed and maximum Force really allows us to have a wide range of possibilities or remodeling a cheetah or a turtle or a ant or a a tricycle I don't know there's so many possibilities and how these how how the system behaves you know can be can be AFF fed by these parameters and so um yeah so um so that's I think mostly all that I wanted to show you oh yeah let's just take a look and just prove the point that here we now have a function in our class which receives a Target we make our desired velocity which is Target minus location I did it in two steps here normalized in scale by maximum speed but actually we can just as we saw over here we can simplify that by saying set magnitude um and uh then we like the steering Force desired minus velocity limit it to maximum force and apply it so this is hopefully a kind of a good model it's a beginning First Step hopefully you can understand it see how it works you know your real project here is to come up with your you know why are you doing this what's your what are you building why are the things moving what are what are the goals of the elements in your system and how can you translate those goals into desired velocities so you might have some creative idea here that you're already ready to explore come up with your own Des way of calculating a desired velocity and then translate that into steering but if you're looking for an exercise in the next video I just said this we're going to change the desired velocity so that it slows down so that it's the closer it's to the Target the smaller it is that's the arrive bavor right when I'm close to the Target I desire to be moving very very slowly at that point so see if you can add that actually into this example and get it to slow down and stop at the Target in the next video I'm going to um talk through that um fairly briefly I think okay um this is this I was recording this whole time which is good and soon you will be watching this maybe and I I think okay