oh hello welcome to another coding challenge with me coding challenge person YouTube thing okay this is a game called Frogger I'm going to play this video here oh oh so Frogger is a game where a frog tries to get from the bottom right there there's the Frog the Frog is supposed to get from there all the way up there the idea is the Frog needs to avoid the cars but then the Frog going to get to the river needs to land on the logs or the lily pads wherever they are to make it across so I would like to make this game now I'm going to make it in something called processing which is a programming environment built on top of the programming language Java that you can download from processing org I will also release after the this video is finished in this a probably video we have a bunch of parts it will also release a JavaScript version of the code so you can make a browserbased version of this game okay I have to stop this because it's distracting me too much let me take another couple things I'm going to keep things very simple so I'm not going to implement all the features of the game there won't be any sound all these little like beautiful animation details I probably won't implement and you know as well sort of the graphic and visual designs but it is my hope that the Internet the wonderful world of the internet will watch this video and take this code and make all sorts of crazy fun extra interesting versions of this game so let's get started okay so let's map out some mistakes we need no I didn't just do this a few minutes ago I messed it all up let's back out of some of the things we need to program Frogger so I'm going to consider everything in the world of Frogger to be a rectangle so the Frog is a rectangle the cars are a rectangle soon there may be a long rectangle it's a truss our actual square you know the Frog is going to be a square the same thing the logs the lily pads everything is a rectangle because what I want to be you know inventing I was like I put my own image in there there could be a little animation I hope that's what you guys will do if you make a version of this after watching this video but the only thing that I need is to be able to know does the Frog intersect a car or does it intersect a law so I need rectangle rectangle intersection and it turns out I feel like a messing they're getting a little confused and doing a little research there's a really nice way of doing that so um I could actually do things so if I have a rectangle and what I keeping track of is the left side the right side the top and the bottom and if I had this is our one for example and if I have another one that's our two that also has a leftright a top and a bottom I could say something like well it's the top of our two in between the top and bottom of our one if it is and also like the left side but that's actually going to be a lot trickier than just what if instead of trying to determine if they're intersecting what if I just try to determine if they're not intersecting right so if they're not intersecting is a much easier thing to test because I know they're not intersecting if the left of rectangle two is greater than the right of rectangle one right that means the rectangle is somewhere over here no matter where it is vertically it can't be intersecting or if the right of rectangle two is less than the left of rectangle one that is over here same thing to the top if it's above it it's a so same thing from the bottom if it's above it and the top if it's below it so if I can determine if it's not intersecting then not not intersecting it's intersecting so let's go write that code really quickly so sad music playing that you guys can't hear but I can hear it and it's not just in my head there's a room back here okay so what I'm going to do this is a little bit silly and unnecessary because there is actually a Java class can you hear now it's much laughs it records it there is actually a java class called rectangle that i could make use of but I am going to just make my own and I'm going to give it a left a right a top and a bottom so I'm going to create a rectangle that has a leftright the top and a bottom and when I make that rectangle going to write a constructor for this object where I can what I'm actually going to do is I'm going to allow the rectangle to be defined with an X a Y and a width and a height and then left is the X right is the X plus the width top is the Y and bottom is the Y plus the height right so often well let me save this as frogger so often in programming which you guys can hear the sound so the recovery is not talking about them because it could be weird for people who are watching this and can't hear them and do you think I'm a great person with sounds in my head which would not be such an unreasonable thing for you to think if you've watched any of my people but nonetheless I digress typically in pro in a lot of computer graphics environments if I'm going to define a rectangle that's going to appear on the screen I'm going to define it with an X a Y and a width and a height but here I want to actually keep track of the left the right top at the bottom for this intersection test then what I'm going to do is I am going to write a function here called intersects and that function how could people Chatta tell you they can hear the sound really really just you know mildly of boolean intersects I want to function it returns true and and let me zoom out here and it receives another rectangle so I want to function that tests a particular rectangle against another rectangle whether or not they're intersecting so the big expression that I want is I want to say I know they're not intersecting if I say that this dot left is greater than the others right or right so I actually don't end job I technically don't have to save this dot but you come on if I have an opportunity to write I'm going to write this top so I want to look at this rectangles left versus the other rectangles right or this rectangles right and maybe I can just put a line break here is less than V is less than the other rectangles left or this rectangles top is greater than the other rectangles bottom or this rectangles bottom is less than the other rectangles top so if I return the results of this boolean expression if any one of these things is true right if this last is greater than that one's right or this right is less than that one's left etc etc then I know they're not intersecting and the inverse of that would be if it would be they are intersecting so actually all I need to do now is say return the result of not that whole expression and this is a really fast operation to determine if two rectangles are intersecting alright so now I think it's time right we have our sketch what I ultimately want to start with is I want to be able to write some code like this frog s or frog frog and then I want to be able to say size and I want to have a canvas it's like 640 by 480 and only because a frog equals new frog and I want to say things like frog show and maybe frog dot update or something like this so I want to write the code in an objectoriented fashion or I could just create this frog object now interestingly I made this rectangle object just to keep track of the properties of a rectangle so there are a couple options here things I could do I could make a new class right I want to make a frog object so to make a frog object I need to say class frog and then I need to you know have a constructor function and I need to have a function that's like show and a function that's update so this is the skeleton of the Frog class the last being the template for making an object here I have the Frog object and now you can have no errors in my code now there's nothing I didn't like right the actual information that needs to go into the Frog class but I have a question I have a question a frog is a rectangle so there's two approaches I can take care of Airy excited about this because I haven't covered this in a lot of my videos I'm going to look at something called inheritance what I might have done previously in other videos to avoid talking about inheritance is I might have said ah a frog has a rectangle associated with it so the Frog keeps track part of its data is the rectangle which defines where it is and in some ways I kind of want to do that because I think there will be some simplicity to that however something else I could do is I could say frog extends rectangle meaning meaning the Frog is actually a rectangle and if the Frog itself has an intersex function I don't have to retype it the Frog inherits all of those properties left right top bottom the Frog inherits the intersect function and now I can add additional functionality to the Frog and the reason why this is maybe will be so powerful is I'm going to say car class car extends rectangle two so the idea is that the rectangle is the foundation for all the other things that will be in the world the cars and frogs behave differently so they also need their own code so this is how it's going to work so let's comment out the car for a second and let's start working on the Frog now we do have an error here it's giving me this red squiggly line the red squiggly line of dururu three boys so let's at least look and see what is that error here and it's going to say oh boy we do not like this error Lex I know that might sound detective this error display this one implicit super constructor frog or rectangle is undefined so one of the odd things about working with inheritance is I need to define the constructor the way an object is made in a somewhat of a special way so the frog I'm inside the rectangle has a constructor make a new rectangle what I want to say is that the Frog also gets a an X Y and a width and a height right that's how I want to define a frog but I need to figure out how when I define a frog with those values do its inherited properties get set and the way that I could do that is with a keyword called super super X Y WH and what this does is this says when I say new frog with an X Y width and height then make sure you also call the super super being the parent the super classes constructor function passing in those values so this initializes the inherited properties of frog so now that I've written the Frog constructor which essentially just calls the parent constructor the super constructor in rectangle I can now give it let's have the Frog start somewhere arbitrary 100 150 let the Frog is a square so let's do one little goofy thing here which is the Frog is never not going to be a square so I can just reuse that I can just show you a little trick here the Frog only needs three variables and then what it makes the rectangle it uses that width for both the width and the height a little optimization there for no real good reason and then I'm gonna get rid of this update function I'm going to say background 50 background zero let's just make it black and then frog show so I want to see that frog so I'm going to write a function now that says fill 255 a rectangle left right top bottom left right no no left top right bottom right I want to draw there's a way that I can draw a rectangle and I haven't actually done it yet by referencing this point which is left comma top and this point here which is right comma bottom left comma top right comma bottom and processing will do that for me if I say rect mode corners the left right top and bottom come from the rectangle okay so now I should be able to run this and there it is guess what you've watched a video now for insert number minutes so far here and what did I do I programmed school a white square on a black background so I in a way I'd kind of disappointed with the way that I'm doing this but hopefully you know because I spent all this time setting up all this structure and all I've got is a square on the screen but hopefully this is going to give us the foundation to really start getting the game going so let's try and move a bit more quickly here and let's start moving that frog so I think okay so here's the thing if I go back to that gameplay video what at the front you can see the Frog always moves a distinct amount of space with each movement and it looks like the Frog is actually moving essentially based on the grid which is about the size of the Frog itself there's some nuance to that but so what I want to do here is create a function I'll call it move and the Frog will move by some amount or maybe a direction so let's have a global variable which I think I'm going to call it grid so let's think again I'm going to be very fast and loose with this idea of a grid some games operate entirely fixed and locks to a grid system like Tetris for example I'm going to kind of just sort of think about this grid in the loose informal way and use it when convenient and not use it when we can convenient but let's just say the Frog right the frog's size was 50 so let's also right now have the grid be 50 and I'm going to say the Frog size is the like minus four so I'm going to kind of think of just this idea of there being grid over the window over the whole window and but the Frog kind of being a little bit smaller than that actual grid and it's going to be like centering issues forget it other B I'm going to keep things really simple I'm just going to have the Frog be the exact same size of the grid you know eventually someday if you ever use like a sprite or an image you could actually just have some transparent kind of like buffer border that keeps it a little bit smaller but I'm going to keep things simple here so we're gonna have the Frog being the same size of the grid and so the Frog when it moves a given direction which we could say given X direction in a given y direction it can only be can't move diagonally but let's just write it this way we're going to say X plus equals oh no left there is no X right I've defined this frog entirely by its rectangle which is the left and the left and right and top to bottom now maybe I want to have some redundant variables to keep track of its XY maybe one it's Center oh there's so much I could do here but let's just let's just keep going let's just fast and loose left plus X direction and then top plus y direction okay so that's what I want to move it now I want to move it when I press the arrow keys so I'm going to write a function global event called key press this is part of processing I'm going to say if the key code equals up and this is all built into processing else and I could use a switch statement here I know everyone in the comments the switch statement but I started writing an if statement and I just never remember the syntax for those switch statements so I want to just check all four possibilities up down right left so I want it I want the Frog to move if it's moving up I want to move 0 comma negative 1 if it's moving down 0 comma 1 if it's moving to the right that's one comma zero if it's moving to the left that is a zero negative one comma zero and then when it moves up the whole point of this is x grid x grid so I always want to move it by the amounts that I've considered this grid there is no actual grid here a grid is just a figment of my imagination that I'm using to think about it when convenient but I'm not actually keeping track of like a 2d array of cells with States and all that kind of thing that I might in a more tile based system okay so let's run this now again ooh okay so what's going on here so obviously I chose pink something very silly which is that I'm only moving the left and so no moving the top so if the top moves up the top moves down and I'm just growing or shrinking the rectangle so this is a problem and I could get around this by saying like oh let me move both the left and the right and the top and the bottom but I think what I'm realizing is it's just going to be better for everybody involved it for the future of this group gave a Frogger for me to just actually consider the rectangle itself to have an X a Y a width and height and then when it comes time to test for intersection that's where I can just calculate these values on the fly and so I need to do that for this particular rectangle and then for the other I'll call it oh right oh oh right Oh top oh bottom which would be other X so what I'm doing is and again I'm sure this could be optimized in some way but if the rectangle itself keeps track of an x and y and width and height then I can very quickly just calculate the left right top and bottom of one rectangle to the left right top and bottom of the other rectangle and then I can test those so I'm doing a little refactoring and I'm sure I'll come up with a reason why this was a terrible idea sometime later but for now I can rewrite this code like this so this is exactly the same but the rectangle is keeping track of XY with night now have a little bit of an issue here which is that I made the arguments here to the constructor X Y width height and so honestly what I what I need to do to different I'm going to say disk X this dot wha this dot this dot W is w this dot Y is y and this dot H is H and this is because in Java if I have variables with the same name and the temporary Quran arguments to this constructor the parameters are XY Y and H and I want to use those to set the rectangle objects actual XY w X Y WH then a that's what I want to use the fist stop here to differentiate them and I don't have to down here because there's no confusion so if I don't say this dot is this dot but I could if I wanted to add to this dot here okay so just dot that is that I'm always talking about the dist dot okay now everything's good I don't have to define it by I could just define it by X Y and W and then I could just move the X and the y so now my frog is just so much simpler the rectangle can have all the gobbledygook about the how the rectangle is being considered but the Frog just has an x and a y which I move and now there we go I am moving the Frog around the screen okay so I think that this is going to be the end of part 1 of programming Frogger I in the chat that's going on live right now I have now been told that I have an error in the rectangle which I forgot to say oh right I just said right where this should be oh right and then the other thing that I want to add to this is that I want the Frog to start at the bottom center so I am going to have the Frog start at width / 2 grid / that's the center half the grid as a little bit know but what and then I'm going to say height no no I just want to say with / Q grid and height grid I want to put it right there I guess I in the center so that should be grid / right yeah so I want it to be there so now that I can start playing Frogger my screen is not divisible by 50 so let's fix that let's use a let's make this I don't know it maybe should just be a square for simplicity 500 by 500 there we go so now hey I won Frogger yay okay so that's the end of part 1 in the next video I'm going to add the cars going by once we and that's going to be part two and then eventually part three I'm going to add the logs and the turtles so see you in part two you