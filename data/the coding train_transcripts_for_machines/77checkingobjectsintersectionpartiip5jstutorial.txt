so this is kind of part two of two videos where we're looking at collisions between objects collisions is really wrong word intersection how do two objects talk to each other how do two objects know where the other one is in relation to each other so I have a simple example that I started with with just two objects update and display both of them I check to see if they're intersecting and if they're intersecting they change color you can see they've kind of moved far apart from each other so they're not but I could refresh the page and randomly they're moving randomly you can see they start to flicker as they overlap so what I want to do in this video is move from two objects to an array of objects so how do you have 100 of these on the screen all checking if they're overlapping any other object so the first thing that I need to do and I'm just do this all in the code the first thing I need to do is change this from two separate variables to an array so let me close this because it's like flickering like crazy and let me change this to an array called bubbles so now I'm going to start with an empty array now I'm going to keep this kind of a sane just for a second and I'm going to say bubbles index zero is a new bubble and bubbles index 1 is a new bubble bubbles I probably should have done this in advance index 0 update and and now I want to say 0 and 1 update 0 in one display if bubbles zero intersects bubbles one change both of their colors so you can see I've actually done nothing new here instead of just having two separate variables I now have two spots in an array so here you can see great it's still the same exact program it's working now that I have an array I could use a loop so instead of manually referencing index 0 index 1 what I want to do is say for VAR I equals 0 I is less than 2 I plus plus and make 2 bubble objects and let's give them like random locations and then here the same thing in draw I could have a loop that says looping all the way to bubbles dot length yeah it should have premade this but that's okay like this and then I update and display all of them now I didn't put the intersects thing in there yet cuz like how am I going to do that right like okay so first let's just see with what this does it so there's two objects on the screen and they're not anywhere near each other so they're not changing color but that's fine if I change this to 5 there's 5 objects on the screen a bunch of them are overlapping but they're not changing color right because I'm only checking if 0 is intersecting one so let's think about this for a second so let me come over here and let's say I have this array and what I have I had 5 let's just do four I have a B C and D what do I want to check I want to check if a is intersecting b c and d right and actually let's just say for a second i want to check if a is intersecting a b c and d and then i want to check to see if b is intersecting a B C or D and then I want to check if C is intersecting a B C or D and I could go on and do D as well and I've kind of run out of space here but you can imagine what it is I want to check each object first I want to check a and then I want to check B and then I want to check C and then I want to check D and every time I check a I want to check all the other objects and every time I check B I want to check all the other objects and every check of C's I see I want to check all the objects so how do I loop through how do i iterate through every object with a for loop for i goes from 0 0 1 2 3 but when I get here I also want to do another loop so for every I loop for every I loop so what I need is a loop inside a loop for every object for every other object now I do want to figure out a way to eliminate a versus a B versus B C versus C and we'll get to that in a moment but let's come back and look at that right so here this loop all I want to do is update and display all the particles bubbles sorry but after I do that I need to say let's loop again for every bubble update display and then check all the other bubbles now oh boy I did something terrible here right I used I to ice so I is the variable that's keeping track of this iteration 0 1 2 3 but I need another variable to keep track of the inner loop so 0 0 1 2 3 0 0 1 2 3 0 0 1 2 3 0 0 1 2 3 kind of like kept some like rhythm to it so over here what I need to do is say something like and I could use anything I want but I'll use J it's kind of typical so here what I'm saying is for every I for every J for every particle check every other particle so I have another picture of myself over there I can't look at ok so now I've got this piece of code here now this code makes sense I can move that into here auto format which is command T by the way I think I lost a bracket now I've got it and you can see there's a lot going on here but what's going on for every bubble update and display and then I'm done check every other bubble and check not at 0 in your sex 1 what am I on the outer loop is I for every I check every J for every I check every J then change if they're intersecting change I and J now let's look at this and run this now no matter what they're all just flickering right there all intersecting somebody why are they all intersecting somebody because they're all intersecting themselves right I need to deal with the fact that for every object is going to check every other object I need to deal with the fact that I don't want a to check aI don't want B to check B there's a really easy way to do that right I don't want to do any of this if I is equal to J so as long as I is not equal to J and the bubbles are intersecting right so you can see that as long as they're not the same object and they're intersecting each other change both of their colors so if we run this you can see that if they're overlapping somebody they're flickering if they're not overlapping they're not flickering this is kind of an awful example in the sense that design wise it just got these white circles and something they go crazy flickering colors when they're overlapping so I kind of want to like leave this to you to do something perhaps a little bit more interesting here but this I think is a structure that you can really play with you've got this function that checks the relationship between these objects what can you do based on that relationship when they start getting closer do they start moving faster when they start when they hit each other they move away from each other or do they try to glom on to each other when they intersect do they make a new object that gets added to the array so they're kind of like duplicating or mating in some sort of strange way so there's a lot of possible things you could do that and this is a lot to wrap your head around here but this is kind of like a core idea of dealing with this idea of nested loops and it will come up again in other scenarios in terms of looking at pixels on a grid or every column in every row there's a lot of times this nested loop comes up for every object check every other object there's another way I'll leave you with sort of like a thought experiment is another way you could make this a little bit more efficient which is that if you start with objects 0 you could just count through right we in fact I'll be coming over here and say there's another efficiency here you could add so this I could leave as an exercise for you and someone will remind me in the comments I'll make this exact solution but if a is checking B C and D right it's actually also checking a we've now found a way to eliminate this check but now B is checking a B C and D we've eliminated this check but we don't need to check B versus a anymore because we already checked a versus B and in terms of intersecting if a intersects B B also intersects a so there's another way we could simplify this to eliminate some further checks but that's really just a technical exercise that kind of works either way so I this video is a kind of a good stopping point I think and hopefully you got something out of this idea the other thing to remember is one of the interesting things about this video is I never all this is good I never ever touched the code over here the bubble object never had to change this is the wonderful thing about moving all of the code that really operates the object into the object itself all I did is change the way the world works instead of having two single bubble objects I made an array of objects and the logic for how I had to check all the objects changed a lot out here but I never ever had to change a single line of code in the object its constructor function of the object itself so I think that's kind of a useful thing to note as well and something you might aspire to in terms of rewriting your code to keep these objects as like kind of robust entities that can kind of stand the test of massive code changes but they still just sort of work as they they're they're they're selfsufficient okay so I've got one more video that I would like to make in this objects and arrays discussion which is looking at how to load a bunch of images and so these bubbles how do you display these bubbles as images instead of just circles which I think several people had asked me about over the last week so to make that video now and then I'll be ready to do videos about p5 Dom although I don't think that's going to happen today at this point okay uh and I'm hitting stop