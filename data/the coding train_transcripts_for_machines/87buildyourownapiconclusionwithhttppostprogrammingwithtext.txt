welcome to another and what might possibly actually be the last video in this playlist about how to build your own API in nodes so if you remember it uh you might have just watched the last video but it's been a while since I made it so I'm going to just kind of set the stage here very very briefly we have so far an API made in node that saves words and a score a a kind of positive or negative veilance the idea that we're going to do a sentiment analysis um application um that stores those words over time so I have a particular route where if I go to the uh server all I can see all the words that are in a particular in that database I also made a little front end that if I add a word like uh kitten and I give it a score like four and I hit submit and I don't um then I can hit refresh here and we can see now kitten has now been added to that database now it's not actually a database it is simply just a a uh a list a Json file but the node program is receiving the word and score from the client saving it to the Json file and loading again for later use so there are two things in this video that I want to add to this particular application number one I want to use the I want to add a preexisting list of words and veent scores and this list is known as the a111 so this will just make the sentiment analysis work a little better by giving us seating it with a preexisting list of words um I made a a separate video where I went over this in more detail but um which I'll link to in this but um this list comes from uh um this particular uh website and it was developed by Finn Arup neelson and uh if you use it you should uh credit it and um there's links and information about how to do that here okay so that exists that's number one I want to bring that list over let's actually do that first I'll see what the number two is in a second number two is I want to look at a post to the API what's the difference between get and post so that's going to be part of this video too so I'm actually just going to absurdly just do save as and I'm going to go to my um node folder and I'm going to save it as a1. Json and then I'm going to go to the server and we're going to look at where the server loads uh where does the server load that file right here VAR data equals readfile syncwords Json so I also want to load Apen what is it a1. Json into a variable called Apen uh actually um and I I'll call this aan data and then I want to say VAR data equals json.parse aen data oh no so sorry VAR aen so now my node server has both the word list that's being saved and the apin list now here's the thing so I think what I want to do is just change this I'm going to change this to additional I think I'm going to keep these in separate files because this aan 111 is never going to change and what I want to do is um um but I'm going to call that file additional just to uh just for clarification um additional and what I want to do now is um uh in the server so so I have them as two and and I I must have a save uh place somewhere else so I need to change this to additional as well where I save that file because what I want to do is when it comes time to do this sentiment analysis I need to look both in both of those I need to look in the apan word list is it there if not look in the additional word list and um and I should decide if one overrides the other in this case probably the additional should override the apan so I'll look in additional first okay great so actually done we did it yay but I guess I could in all let's look at that all route again uh let's uh here let's actually do something kind of a little goofy I'm going to do um I'm going to say uh the data is uh additional is uh words and Ain is the uh uh is the Apen list so then so I'm changing the server when you ask for All To Not Just give you the the words that are in the database but look at both of them so this is just changing the response of the server um and what I'm going to do here if you go here now like oh I have to restart the server uh where oops sorry everybody I'm going to restart the server and I'm going to do this and we can see now I have both the additional list and the a fin list wonderful okay so now and but this probably broke this part because it the way I was parsing I was using that all root but you know what I'm going to get rid of this drawing thing it's sort of unnecessary right now I just want to have this word score interface so let's go back to the client uh which is here and let's get rid of uh the draw data thing uh which we don't need to do anymore um because we're going to do some different stuff here so I just want to see that this uh and I don't need to draw data anymore I want to see that this works so I want to see what's another word that I could add uh puppy and uh three hit submit and uh we can see that that worked success although I probably again should add something to this page it says thank you I added that word to the list um that's a great exercise for you but we can just confirm IR now that if I go back to here under additional puppy is there okay so everything is working but my API behind the scenes has access to both the full apan list and any additional words that have been added notice how things are a little bit different here I probably should have been more thoughtful about fixing this up so that these are actually numbers and not strings but I can deal with that later so okay now the thing we need to change now is how do we send a large body of text from the client to the server and so I'm going to come over here for a second to oh boy this camera is off G to come to the void and I want to talk about the difference between a get and a post so HTTP which stands for hyper text transfer protocol I don't know if that's right it's probably right um the uh is a request and response protocol hi I'm a web browser could I please I'm making a request have have some information about where I could get some nice apples this time of year and maybe I would ask that to Google and Google being the server would say hey here's a response here's some information and the way that I can talk to that server in this request and response protocol you know if we have server and we have client is I can make a get request which is like could you please give me some information back or I could make a post request which is would you please take this information and save it onto your server or do something with it so if I'm logging in with my username and password that would be something I would want to send with a post request if I want the results of a search I might ask use a get request to get the results back here's the thing even if even though this is how this protocol is designed and how it works you'll notice something in our program a little bit strange if I go back to the code for a second you might ask where are these happening well right here when I set up a route I'm actually saying this is handling a get request if the browser asks with a get request for slash all send this information back as the response information that comes with the request is in this variable stuff that I want to do to respond is in this variable this is a get request and it makes sense I would like all of the data in the database please could I please have that thank you I really wish it was this get please but um it's just get I guess there's no need for politeness between computers um kindness there's something that said to be said for kindness between computers though and people anyway I'm off track here but you'll notice something this is also a get request get adword score now it makes sense that uh you would have parameters for a get request like search so this is a get request search do you have the word kitten in your database if so could you please tell me its score that's what's happening here but in this particular route this is a get request and my get request is saying here are this word and this score we please add those to your database and according to my discussion over here that should really be a post right if you're sending data to the server for the server to save that's really a post and not a get the thing is though it's just so darn convenient to use a get why is it so convenient because that's what the browser does natively on its own I can actually now Sim I can actually just make a get request by saying Local Host uh 3,000 add um you know yellow which is maybe a neutral color or slightly positive um so this is me now making a get request that get request is done it saved into the database I can use the fact that I can add parameters to a get request through the route or a query string there lots of ways to do it to actually have the server save to send stuff to the server for it to do stuff with as well and because it's just like a little bit of data it's just so easy to do it in the route with a get request why not but there are times where this get request isn't sufficient and you really need to use a post well one is like username and password like so if security matters you don't want to have the username and password just in the URL path as part of a get request that anybody could potentially hack and get access to so this is really where for hidden data it really needs to be a post the other thing is like media if you want to upload an image to a server or upload a sound file you can't do that through a get request you can't easily although there's some tricky ways you could like base 64 or encode your image into like a number string that goes into the URL but basically for media but really what I mean in a lot of ways is like large data so if I want to send a full paragraph to be or a full many paragraphs a thousand words to be analyzed and have the server send me a result back I want to send that data through a post rather than a get because it's going to be much too awkward to try to like encode a full paragraph of text into some sort of route or URL query string so this is really the difference between get and post post is for sending data it happens behind the scenes in an invisible way get is for making a request and it happens right in a visible way because it's really basically the same as what you would be doing to type in a URL into the address bar okay so now that we've covered that how do I there's two things I need to figure out one is how do I handle a post in the server the nice thing is you could imagine that it might be something like this app. poost analyze analyze and analyze this right so this is now I'm going to write and I have a function to handle that post request so this is now how instead of a get request in a node program I can handle a post by saying app. poost analyze this and then what's the other part how do I make a post request well there are countless ways you could do it because you could look at jQuery and you could look at Native JavaScript and you can look at any JavaScript framework you want in P5 there's a very nice lovely little function uh called HTTP post and so let's I'm going to add something what I'm going to do is in the uh here I'm going to add a uh text area um so I'm going to say I'm going to make another paragraph and I'm going to say uh text area ID equals text input text area let's just do columns equals 40 and rows equals 5 so we can and so if I go now to here we should see there's a text area there so what I want to do is when I and I'll add another submit button I'll call call it uh analyze so now I have an analyze button what I want is when I analyze this button to make a post request to the server so what I need to do is I need to also in JavaScript get access to the analyze button uh button a for analyze and analyze and uh Analyze This I'll say um function analyze this and here what I want to do is get the text which is the um I can select the text input area and say value and then I want to make a post and the way I make a post is with the pii function HTTP post so when I wanted to make a get request load Json was all I needed to do because load Json by default is a get request just like load image or load um any of the load functions there is by the way an HTTP get method which allows you to uh uh have more control over that get request but here I just want to make a post so um okay so I'm going to do p5.js reference and I'm going to look at HTTP post and let's look at this page the difference is and boy does this look confusing the difference is is when I make a post I need to send it a whole object which is all the data that I want included as part of the post so this allows for a lot of possibilities because I can have multiple fields and I have multiple kinds of data so really there's there's a bunch of stuff I need here but what I care about most right now is the um is I need to give it the path which is the route the data that I want to send I guess what kind of data it is which I'm going to make it Json based data and then a call back for when it's finished so let's do all of that and I'm going to say uh where where was it HTT post so first I need to say data is uh uh the text is the text and uh that's actually all I need to post is just what's in there so but I could add a lot more things into this object and I want to go to uh Slash analyze is that how I did it in uh like the low Json add I need the slash in front sorry analyze and then I need to say it's going to be Json and then I need to say uh uh data posted and then I could also say data error but let's uh let's skip the error right now I should actually probably data a post error so let's write those functions function data posted uh result I'm going to say console log result and in the server now so now I've posted this data to the server and again this could be a lot more stuff than just that text and um in this function and um and uh post I should have a call back for error and so now I just want to look at what comes back after it's posted okay uh so now in the server uh I'm just going to say response. send thank you uh and actually let's make this a a reply message thank you uh and send that reply and let's just look at console.log request so we're going have to figure out how do we get the stuff that was posted right here in the request okay here we go uh so let's see how far did we get here first I need to restart the server and I want to go to this page here the uh here which I should see this I want to look at the console and now if I this is a test and I hit analyze I got the message back so the round trip happened the question now is let's look at what's in the request oh my goodness how am I ever going to look through all this and find the data that was posted so here's the thing how do I find that text this is a mess of data that comes in with the request now we know if you go back to the server when I had a get request I can simply just look at the requests parameters because these are the parameters that come in with the request with a get with a post request it's not so simple there isn't just the parameters there's this part of it called the body which has all this information in it and I I actually and I have to parse it luckily for us there's a node package which will do this parsing for us and this parsing uh this package is called body parser so what I need to do is I need to install that package body a parser and I want to save that as part of this project so I'm saving it now I have the body parser package and then what I want to do and I'm on I'm on the I'll include a link in this video's description but I'm on the GitHub repository I just want to look at uh I just want I need to require it uh so I need to add it to my code at the top or it doesn't really I'm going to add it uh here where I require Express and then after I create the app uh this is serving static files I now want to use this body parser package so I'm going to just scroll all the way down here on this documentation page where I know there's a quick example and I can grab this code and I can add it in so I now am telling this app this web application which was is an express application that's listening on this port which uses static hosting for the stuff in the website folder now also has the body parser and I want to use uh Json because I want to get the stuff um I want to parse everything as Json okay so now that I have that I should be able to say oh boy do I hope that that's true um uh in the where where in the post where I'm handling the post I've already lost it right here let's say console.log request. body and so I'm going to uh restart the server whoops and I'm going to uh refresh this page I'm going to say this is a test I'm going to hit analyze I got the message back and oops the bug is fixed this is blank because I forgot to actually pass in the data I had a mistake which some of you might have been screaming at your television system I not why you're watching this on um in my client code right in my client code right what do I need to do I need to send it the route I need to send it the data what the format of the data is and I had call backs for when it's finished or if there's an errow what's missing I just listed five things I forgot to actually send the data data goes here so I forgot to post the data so there's no way for me to read or receive the data if I didn't post it so that's done now and I I I think it's going to work so let me uh oh actually don't have to restart the server because I just changed the client code and you know what I this is driving me crazy I just want to in the client I just want to say uh uh just add something here like uh I am happy today because I saw a rainbow and some kittens okay so now I have some text prefilled in I can hit analyze uh I got a message saying thank you and I can go look at the server and I can see that that data came into the server via the post we have a post we have a post working that is awesome okay so now all I need to do is do sentiment analysis I really should just give this to you as an exercise and end this video now but I'm going to uh finish it up myself so the nice thing is um I uh all I um I can this isn't too hard for me to do now in the server I'm going to go to the server code and right here instead of console log I want to look at and say VAR text equals request. body text then I want to split it up text. spit and I'm going to use just a regular expression here uh to split it up into words by anything that's not a word a letter or number um I explained this in so many videos but this uh this is pattern matching and back slash capital W is anything that's not a to z or 09 and so now I can Loop through those words and I can um I can say now what I want to do is I want to First Look I need a total score so I'm going to have a total score started at zero I need to say if um words oh boy I should call this I need to call this uh additional so because that's going to be a problem uh let's look everywhere I use words because um additional additional additional oh boy additional okay I just don't want to confuse my variable names um so here uh I should have just called that token so I wouldn't have had that problem but if additional has own property and I want to see if word equals words index I has own property word then total score plus equal additional that word the value and a number I'm doing this kind of fast I should uh reference you I did this exact sentiment analysis entirely in a separate coding vid uh challenge which I went through in a little more detail um so I can check if it's there if it's not there then I should also check if it is in the aen list and if it's in either one of those I also let's get make a word list um uh we'll just make it yeah a word list so uh we'll actually make it a word list sure an array um I could say either of these cases word list. push an object that has word word score and then uh and the score is VAR the score is oh I can say VAR score if it's in additional oh yeah yeah yeah score equals number additional and then add that this is not interesting to watch anymore and otherwise if it's in Apen that's the score and um um and then uh sorry uh if I've and so number okay so I'm just cleaning this up because now I can say total score plus equal uh plus equal the score so the score can start for every word can be assumed to be zero and if it's in additional add the score at you know actually so I don't need this here anymore get the score from additional if it's in apan get the score from apan and now what I could do let's just get this working I could say reply is score uh total score and comparative comparative comparative comparative in in the aan 111 sentiment analysis the comparative value is the total score divided by how many words are in the text words. length so now we should see that I'm getting the text so my server is now receiving the text as the post request chopping up into words looking at every single word seeing if it's in one of the lists and then spitting back a total score so let's run this oh I need to restart the server oh I have an error words is not defined where in line number six which uh is here I don't actually need this console log it was just for debugging earlier so let's run the server again refresh and hit analyze ah and we got an error uh false I got some error so what happened let's look at the console oh yeah I got an error uh comp is not defined um so I made a mistake because I'm trying to do this so quickly and I'm not being careful and where is where I I've lost where the code this is oh comp oh wait comp and then this can be comparative I'm just not naming things carefully so this is the reply that I want to send back um uh oops I have to restart the server there we go and look at this every time I analyze I get both the comparative score and the score now I really want to also send back a list of words and I want this to be an exercise I'm going to do it anyway because I want to see it here so what I'm going to do is I am going to also say I'm going to make a variable called found and say found is true found is true and then uh I'm going to have a word list and then if found so if it's found then I want to add it push and I'm going to make an object um that has I'm going to just add into an OB I'm going to make an array of objects with word word score score which is a little awkward but now what I can do is I can also send back the list of words so I'm just saving every word and its score if it was found in one of those lists because now if I run this again and I hit analyze array zero so I did something wrong let's look at this again whoops I initialized the array in the loop which means I kept clearing it out so of course there's nothing in the array let me take that out there run this again refresh analyze and now we can see this is what it got this is the comparative oh this is very small for you to read oops you can see here that this is the comparative that's the score and this is the list happy and rainbow so what I could say is H Why didn't it get kittens so what I would like to do is add kittens and kittens should have a score of four so I'm now going to hit submit and now when analyze it again oops we can see that I got a um I got a score of 14 and let's say today is really positive with a number 100 I can add that to the database and analyze again and now I have a score of 114 so now I have both in on one page I have both ass system wow we've really finished this example where I can submit to the database using a get request I can post to have text analyzed I can submit to the to the um to the API with a post and I can get back the results now here's the thing as a challenge as a as an exercise take this exact code and really work on the interaction here and how this works how could you actually effectively crowd Source a full word list how could you uh use an animation or use design to show the results in the word list you could click on them and what if it showed you all the words here and the ones that are missing and it let you type them in and hit submit so you could kind of like how could you train this to have a larger database of words for more sophisticated uh sentiment analysis this would be I think a challenge for you to take this and take it further but this is a fully functioning API there's one piece of this that I think I should mention this API can be accessed by my so the server the node server the thing running right here can be accessed by this web page because they this web page is hosted on this server but what if you wanted to make a sentiment analysis API that is running somewhere but anybody could access it from their own web pages and their own programming without being the programmer of the server well to do that you what you want to do is open up on your server something called cross origin resource sharing you want to say I want other people to be allowed to send get requests or post requests to this server not just me the programmer of the server who also is hosting like HTML files packaged with it and to do that you need to enable cores which stands for cross origin resource Shing you've probably encountered the flip side of this error anytime you've tried to request something from a server and you got this like XML request H not allowed cross origin resources not enabled so if I want to enable cores I can search for Coors node package express this is something I can enable with Express and I can actually just install uh uh this chors package and uh I can say uh npm in install cores D saave now I've installed that node package and I can go here and I can just grab app.use oh I can say cores require cores uh right up here the same place that I used body parser VAR cores equals require cores and app use body parser app use Etc and app use cores so now I now have enabled cores so if I put this if I deploy this to Heroku or digital Ocean or whatever web server hosting environment my whatever my server is now if I handed out the IP address or the URL other people could call low Json or HTTP post from their own p5js code running on their computer to your particular server so this concludes my uh series about how to build an API from scratch using node and a front end to that API using p5js hopefully you found this useful if you make an API if you build something share it with me ask in the ask ask in the comments like share this video I guess those are the things I'm supposed to say and I look forward to seeing you I'll do some followup videos as part of this playlist if there are some good questions or other features that I think of adding okay see you soon goodbye