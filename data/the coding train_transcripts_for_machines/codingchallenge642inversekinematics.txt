hello how are you doing welcome to a coding challenge where I'm going to make something called inverse kinematics you might say hey look at that did you do it already and I'll say though I have not this is actually from the previous video where I did a simulation called forward kinematics so one of the main things I need to do before I get started coding is talking about well what's the difference between forward and inverse and why I let you use you one over the other one thing I will mention if you watch the previous videos I did change one slight thing about the code which you might be interested in I added something to make the segments have a different stroke weight based on where they are the higher stroke weight towards the bottom and a smaller stroke weight towards the top so that's kind of an interesting little variation that you could look at ok now let's talk about let me come over here and let me see let me erase some of this oh I'm going to leave this up here ok so this was a diagram I had based on forward kinematics here over here where the idea is I have a bunch of segments they're all connected to each other maybe these are segments of a kind of alien tentacle or they're a leg that's walking or whatever they might be robot arm we're getting to that the idea what forward kinematics is if I turn this one then all of these should rotate with it so the angle that changes here gets passed along to all of the segments that are connected so this one turns and they all and then this one turns doesn't get packed the one behind it it gets passed the B's and so that example is a tentacle they're all kind of moving a little bit randomly with some Perlin noise or I also use like a sine wave or whatever whatever Al's I'm using to move them the point is as you move one it affects the other ones inverse kinematics does well as the name is stated B inverse in other words what if you imagine this arm this I'm calling an arm for reason against if this connected set of segments needed to reach and grab something and this is a problem that happens in robotics you create a robot arm that's a bunch of things connect to each other with some kind of like hydraulic rotational mechanism thing that I don't nothing the house and you need to figure out I want the arm to pick up this thing so if my hand by hand is the robot arm to get that I know my hand needs to be there what should the rest of me do how do i if I know that this needs to go here how do I figure out how all of these should be oriented in order for to do that and you might plainly see that this is you know the best orientation for reaching something far away in that direction but what if suddenly needs to grab something here well we can plainly see maybe a good way for to do that would be this but how do we calculate that we know the end point how do you pass the angles back inversely through the segment's impersonally is that even a word that's what I'm going to do hope I hope I felt this before I think but it's been years I think I have no idea okay so we'll coming back over here I am now looking at my forward kinematics example and I'm not going to I'm going to start the code over from scratch and I'm going to say setup I'm using processing which is a development environment and a Java library for doing creative coding graphics and animation more more yada yada yada okay so what I want to do and I'm gonna say sighs 600 400 and there we go we've got the window and then si background 51 so I want the same sort of idea that I had in the previous example where I have this idea of a segment object so let's take let's let's make this object called segment and I want to make a new I want to make a new segment and I'm going to give it a location I get the segment class doesn't exist I'm doing this reverb sort of thinking like okay I want to give it an X Y and a length and maybe an angle so this is similarly to what I did before we're gonna have to deal with some kind of like Parent Child stuff let's just start there now I'm going to say I'm going to make a new tab called segment to create a segment class and I'm also going to want my segment class to have what I think I wanted to have a and B let me describe what I'm doing here so if this is one segment I want to have a meeting the point over here be meaning the point at the end length being how long the segment is and angle being what's its angle of rotation relative to the xaxis so those are the properties of this object a I'm going to say what am I doing here I'm Matt hi hi how did I keep what I was doing angle and length and I'm going to create a constructor function which gets an x and y usually X well keep it the way and an initial angle which ultimately is an initial on an initial angle and an initial links now you'll notice length just got highlighted as like length blue because linked as a keyword as a property the length of an array the changes to le n for length is I don't want to it would be fine but I don't want to make it unnecessarily confusing so I'm going to say a is a new P vector it's at X comma Y its angle is that angle and it's length is that length that I specified so now is that what I said so now if I run this I got no errors but nothing's happening the next thing I want to do is I want to say segment dot show and this is just about exactly what I did before and I'm just doing it again to kind of get started I'm going to write a function called shell and I'm going to make a line between ax and a dot y + BX and B dot y NS a stroke 225 stroke weight for and now if I run this I'm gonna get the same issue I got before where I haven't done I figure out where B is so I read a function called calculus a lot of this really is the same calculate B and this is I'm going to use my polar to Cartesian coordinate transformation again I have a feeling though I'm after me I'm going to start eating to calculate a based on B because I'm going to move the arm to the point that it's trying to grab so anyways Bullough see we'll see I'm going to what am I doing here I'm going to calculate B which is saying the X offset from a is equal to the length times cosine of the angle and the Y offset is equal to the length times sine of the angle and then B is a new P vector at X plus DX y plus py one thing I'll mention here is oh sorry a dot X and a dot Y let me now mention here that I don't love is that every time I calculate B I make a new peeve Ector object any Java on my desktop computer which you know gigs of RAM is never going to be a problem there's a little bit of issue it might make more of a set more sense maybe I'll just do it right now for the sake of argument for me to make a an empty P vector and then what I would do is I would say B dot set so that would be I'm not making a new object but I'm just setting its values to these two values I think this will work exactly the same way it's a bit more memory efficient so to speak and doesn't really matter okay so now what I want to do is I'm on an update function we're all going to do is just calculate B which is quite redundant right now but it's like calculate not calculate and then sag not update so okay this doesn't look right what did I miss hmm length o I put these in the wrong order so this is like this is angle so this is length and this is angle has the length that's 0 and maybe I'll just for consistency change the order there and there we go so now I really haven't gotten very far but I've built my segment now here's the thing that's different though what I'm going to do now this is why I didn't want to this is why this is quite different now what I'm going to do is let me zoom in on this segment here the first thing that I'm going to do is I just want this segment to follow the mouse so wherever I move the mouse I wanted to turn to move towards the mountain so actually what I want to do is I wanted to I want it to be two points at the mouth so I went to grab mouse is what it is I wanted to grab the mouse what's the point at the mouse so how do I do that so this is yet another example of needing this polar to Cartesian trigonometry stuff so I'll have it move according to the mouse which is a good way to start so if I have this segment and then the mouse is down over here what I need to do what I want to do is turn it so that it points this way and then move it all the way so that it's here so so that's so that'll gives the sort of motion that we're expecting I think so I want it to point at and then you know they're going to be different one thing it could be fixed and it always just points this in the sort of tentacle case I wanted to turn but so what I need to do is figure out this angle on languages guess what we've now got to do the know where that is inverse kinematics we also have to do the inverse we're not converting from polar to Cartesian we now have to convert from Cartesian to polar because what I need is I need this angle based on knowing the and I think I want to use this endpoint so actually I think the angle I want is this right or is it from a know what's that somebody else Billy in the chat will tell me because I could calculate an angle of it pointing from B or from a I think I want it from a I think I wanted to turn and go there so I want to start so what I want to do is calculate this angle and what is that angle it's this dy and this DX so it's Mouse X minus this object ax and mouse Y so that's those but if I have those how do I get the angle now here's the thing I should do another video about this because I can use something called arc tangent inverse tangent the trigonometry function to get the angle from the x and y value and there's even a special way to do that with code functions or something called atan2 so to remind me to a separate video about that but I'm going to do this just with vectors because of the P vector P vector object does this by the scenes if I can create a vector that points from here to here then I can call a function in the P processing vector object called heading and that heading function gives me this angle if we look at the source code it's got a tan two in it so it's doing this but I might have a function that does this math for me already let's just use that okay so now I come back over here hello hello inverse kinematic thing and now what I'm going to do is I'm going to write a function that called segment dot follow Mouse X Mouse why okay so I want this segment to follow the mouse so I'm going to go here into segments a void follow and I get a target X and let me just call it TX and ty4 like target X target y probably should use the full word target I'm trying to keep my code within the space that you can see and so now what I need is I need a vector the direction which points from so here's the thing I could do this a number of different ways I'm going to say target equals a new P vector that's at that T X and T y and then I say P vector dot subtract the target minus a so this is what I want I want a vector that points from a to the target that's the direction that I wanted to point and then now what do I do I say angle equals DRG heading so that's all there is to it so now if I if I run this we can see it's always pointing towards the mouse so that's just making a vector getting the angle and using that angle of this that here's the thing what happens now though if not only do I point towards but I actually move B to the mouse location so now what I'm going to do is I'm going to say B equals target dot copy now this is going to do something weird okay first of all so actually I don't want to calculate B here's the thing I make this a little bit weird what I'm doing here but I have a function that calculates be based on a so actually what I want to do this is actually easier than I thought what I want to do is write what I did is I rotated it to here I want now this vector to have the magnitude of length and then I just want a to be positioned where it's distance from the target is that length does that make sense I think I need to draw this again so this is the this is the segment this is the target so the segment goes here and I have this as a vector and now I need to figure out where is a so that if I lined it up with here B would end up right there so all I need to do is take this vector and put it right here right put it right here then multiply it by negative 1 and then I have a vector right leg that goes this way and then a goes right here so now I want that arm to be positioned at this angle but where a is there there's probably some redundancies in the way that I'm thinking about calculating this as there always are but let's just do this so forget about moving B what I want to do now is say directions set magnitude to length right then I want to say Direction multiplied by negative 1 so I wanted to be as long as the segment and I wanted to move in the other direction because now all I need to do is say a equals P vector ad target plus direction right so I want a to be positioned I'm going to change the angle and then position a that distance away from the target and now we should see there we go so now as I knew of this you can this particular segment is following the mouse in a somewhat life's like way and here's the thing this is going to get much more exciting right this is inverse kinematics and then I'm starting with the thing at the end but there's nothing connected to it so now what I need to do is now that I figured this out oh this is exciting yeah this is going to be beautiful you're gonna make all sorts of wonderful Houston squiggly little snakelike colorful creatures a little antennae I can't wait to see all of them right if I have this now here and let's just say for example it started like this so this got moved to here what I need to do is point this now this one does exactly the same thing that this one did ah this is what inverse kinematics is menlo does exactly the same thing that this one did but its target at this point so it points towards it and then it shifts there so we're actually done we've done all of this already we just need to add a segment that's connected that does the same exact algorithm but not would be first target but would once attached it let's go add that so now here what if I add what if I do the same thing I did before where I make this segment one eventually we need to make this an array or a linked list whatever we do and I need to make this segment two it segment two okay segment two to do this segment two equals a new segment and guess what it's parent I'm thinking of it in the inverse way it's a parent of the thing at the end is segment one and it has a length of 100 I don't know if it really needs an initial angle the way the stuff is going to get calculated but let's leave that in there this might be completely unnecessary in this scenario so now I need to write another constructor function just like this one I need to give them all a parent and I'm instead of getting an x and a y it's going to get up parent and then so here parent is always know if it's the first one I'm gonna have the same issue I'm going to need the child thing to go but I mean I can go forward this them anyway we'll figure it out then what I'm going to do is say almost their parent is that parent and then a is always sick we don't actually it doesn't really matter where a is because what I need to do now is just follow the parent so I want to follow I want to follow parents a and this just a right I want to just do that algorithm and I better set my length and angle before I do that right so the first thing I do is just attach myself to it wherever it is and then here yeah so this should be good I can see that this is really going to need to be refactored but I'm going to just keep it right now so now what I want to do is it's kind of terrible what I'm doing but I'm going to say segment one update okay let's let's just make sure they're both they're segment to update and show okay what did I get here target parent a X oh oh oh no hold on I got a nullpointerexception what's wrong here news segment segment one follow okay hold on listen dad I should definitely get why am I getting a null pointer in follow is it when I it's up heat focus okay I've got a nullpointerexception with targeted age eight what's target is not null because I can see that I made it right here a is null and why is a Mel because I'm doing something wrong ah and you know I'm setting the parent because I know it needs to be tested but even though I'm doing inverse kinematics I don't want I'm thinking about this incorrectly what I want to do is this is still the root the first thing it's gonna be a lot easier if I then attach the next segment here attach the next thing Here I am going to do the math backwards by starting with the last one but they need to have some initial configuration that makes sense so when I make the next one its parent is actually the thing behind it still so that's what that's what I'm doing wrong here so let me come back and it's just about the way that I'm building it so this is actually not in front of it this is not behind it it's actually in front of it so let's let's do that and segment two is actually the thing that's going to follow the mouse if you if you catch my drift so hold on a second so what I'm going to do when I make that thing from the parent a is still located it's at the end segment two is at the end of segment one so Sigma choose a location gets the B location from segment one so that's fine and forget about this follow thing that's not happening here so what I'm going to do now is let's just make sure that these both show themselves in the right location get rid of this follow okay so those okay well looks like there's a segment up here why is that because 300 200 segment until it's the Oh Felicity here what went wrong there ah so the first segment didn't get it's be calculated in set up in its constructor so so that messed up the second one and in that sense I should probably calculate it be here so look so there so now they're connected and we can just we know that this is correct even though I think the initial angle isn't really going to matter here if I were to give it you know an angle of saving like negative 45 degree radians and just we can see you know negative attend so we can see this is now these segments are connected 45 degrees and then 10 degrees okay because here's the thing its segment the whole point of this is that I want the end to follow them out by the way the parent thing is going to work so much better here they start the end and I just go back to the parents I don't actually need the child like I needed in the forward one okay so now we can see segment two is following the mouth but segment one is not coming along with it so what do I need to do I could just say segment one follow segments to a x segment to a dot Y and now we're going to see this there we go we can see now I have this inverse kinematics where it's all about the other figuring out where the end is and the angles get calculated kind of rippling back the first one falls the mouth the second one falls the end of one and you can see not this this is it this is kind of feels somewhat like a realistic skeleton arm like thing of course there's scale you're using this Forks but we've got the basic idea oh good so now what I want to do is I want to add I want to make this I don't want to just have two separate variables so once again I'm going to call this tentacle or snake or whatever we call it tentacle and tentacle is a new first segment then I'm going to say I'm just going to make just for simplicity I'm just going to have three and add three and the same kind of thing I did before where what I want to do is I need the current segment is starts with tentacle the next segment is attached to that tentacle and let's just give them all an initial angle of 0 again that makes just things a lot simpler and then next current is next so once again I'm making a linked list where I'm saying the first object is connected to the next object which is connected to the next object so I can iterate them could just go through them and but yeah so but I'm actually connecting them backwards which is perfect it's all perfect yay okay so make the next one based on that and then current becomes neck and this should not say tentacle here that's a mistake this should say current right because current is changing next is based on current the next becomes current so now I should be able to do the thing that I was hoping for where I say for no no I I make say just a current or next I don't know next equals tentacle while next is not equal to null next let's not do the follow for a second next up update next show and then next equals tentacle dot parents oh I see what the problem is will send us on a function so this is a problem why is this a problem this won't work oh it's always gonna work out so beautifully I need the last one I need to start from the last one I wonder why I'm spending all this effort avoiding putting them into an array because my just what I was doing array I have the end has a beginning but since I'm spending all this effort voiding and putting them into an array I'm going to say I'm actually going to say I'm going to do this this is crazy current it's just this first one right I don't need to keep track of anything that tentacle is actually whenever this finishes it's whatever was current 10th Cole right so I don't actually want to save the first one in my variable I want to save the last one so it will start at the end and go backwards okay so now I could say next is that tentacle and then get the parents I'm going backwards so this should show all of them didn't why didn't it next oh this is totally wrong next equals next dot parents of course so this is what's wrong this the whole point of this idea of a linked list kind of system is that you run this again there we go I would say next equal tentacle net net so I was only saying next is the first one so what's stuck in a kind of infinite loop there so I want to show it and then get its parent then show it to get its apparently now if I call update that will should do anything because update is just calculating the end and now what happens if I have though this one follow a mouse X mouse Y so you can see that one's working that last one but I heed now I need to do some kind of following here so I'm gonna say next dot follow and it should follow the it has to follow the if the previous one so what I can do is oh this is why having an array would be nice or having the child allowing is the child relationship because it's got to follow it childhood put that back in let's so maybe I do like this double leg delisting I'm really over engineering this I think but I'm going to give them give it a child and then so I have that reference so what do I do here when I make them the next one is based on the previous one and then what I need to do right now I have the relationship that every segment knows its parent but in this inverse kinematics it's got to follow the one that's in front of it which is actually its child so right now the way that I'm creating them is that the the next object parent is current but the current object child is next so I also need to say current child equals next and then here I can say follow right so the first one just follows it's now flawless amount and then and then what I might do actually is say next equals next parents just to go to the next one and then at the beginning here I should call next follow so if I give it follow with a particular target it'll follow that but I need another follow function I can overload functions right I want the same at all but I don't want to redo this math all I need to do is say void if I just call follow then what I need is target X is child dot as follows to a child a x rays kind of follow it and target why is child dot a dot y and then follow target X target Y so this is a target x target watch so this is kind of an interesting technique that I'm doing which is I have that follow algorithm where this segment can follow any arbitrary point and then what I realize is what I wanted to do is follow it's child point a so rather than write a whole other function that does this in a different way I can just write another function that calls this one with the chalk that that particular child x and y so this is the two functions both names follow if I just say follow without any argument it follows its child if I say follow with arguments it will follow that so now if I go back to here I should be the first one it's following them now and actually this is silly what I'm doing I should just say this will be tentacle tentacle follow the mouse right we know the end the tentacle object is the end of this whole tentacle thing then next is going backwards whatever the tentacles parent is and then and so this is a segment and now I have my loop as long as there is something there follow its child update and show and now we should have we will hold on hold on ah look I forgot to say that next equals next dot parent so I've got to keep going right I've got to go on to the next one otherwise I got a need for the loop stuck there again so now we can see it's doing that right we can see that if this whole thing is following the mouth oh you know it's a little bit off and like laughter oh I'm not drawing the tentacle because that everything is shown in that loop I also have to I'm kind of I have to show the tensed up that front element whoa what did I do here ah that's crazy what's the bug what's this bug I've got a weird mistake because I forgot to call up Kate that's what it is okay okay so this is again refactoring is a wonderful thing but I could see this loop the idea of this loop is to do all the three steps follow updates show I didn't fall in show but I forgot to update it what happens in update it's kind of important it recalculates the end point which is also silly now by the way that I have an update function that that's all it does I thought it might need to do some other stuff so but I guess it's good in their case it needs to do some other stuff so I need to say tentacle update there we go and now there we go so now I have this thing that follows the mouse and kind of like a real little slightly realistic skeletal like way and what I can do now is I could say hey guess what I want to have ten of these connected I want to have the first one and I want them to all and again knee should all be variables I should I want them to be separated by only ten pixels and have 20 of them connected and you can see what do I have now you know I have something that looks like this and you can see this is different by the way then a particle that keeps track of its own path right there is an aspect of it kind of keeping track of its own pets but it's actually you know in a way more like a rigid body of connected joints so so there's a lot of possible ways you can vary this and just thinking about this is why I think we could maybe get a nice fish simulation especially there were some added Wiggles to it there's a sort of almost like the muscles where all those joints are in the face that they trigger and close me there's some sine wave oscillation also as it's moving so this is what I want to maybe try to do it in next a second part I don't know I'm going to edit this a minicourse web card I've on but but that's something to think about now I think it would be worth just out of curiosity let's try adding that thick thickness stroke weight thing to it so it could be useful for every segment and I don't need the angle so I'm going to reuse the item instead of having the angle the angle could just default to zero because it's just being calculated so I'm going to have all of them have a default angle of zero and I'm going to make this last thing pass this index into the array because what I can do with that number I have each segment knowing whether it's 0 1 2 3 4 whatever it is in the total number of segments and so what I can do is for example if I wanted to have stroke weight as a variable and whenever I draw it that's it's drawn with a variable stroke weight you know if I were to just say right now and I think that I have to do this in two places so this is something I really need to refactor stroke weight equals like a random number between 1 and 10 and I'm doing this in two places which is terrible and I don't need angle anymore you can see they all have like a range of the stroke weight but what if I want to say and I want to map the index which goes from 0 to the total number of segments which in this case is 20 0 to 20 and I want the stroke weight to go between 1 and 10 so I know this is terrible there's good put these in both places now we can see it's thicker at the end closer to the mouth and thinner thinner thinner as it gets further to the back so you could think that's a nice little variation I could I could also alter its color based on the same exact algorithm we've got this kind of feel like thing that we could start to work with in our sketch when I look at this snakelike thing I see a one object and in a way I kind of have that because they just have this one variable called tentacle which in a way because it's a linked list refers to everything but I really could organize the code in such a way that if I made another class called snake or creature or something and I could take everything that's basically and set up and draw and put it into that other class this would allow me to more easily duplicate many of these on the screen and that's something that I like to do in maybe the next video so I will do another one where I have more than one of these and maybe they move in some way because what if instead of following them now mouth they follow a bouncing ball or if you look at any of my just take the flocking example for example what if instead of having a triangle moving throughout that flocking example you have this snakelike wiggly creature thing moving through so that's so that there's there's a couple things I think you could think about doing as an exercise if after watching this number one refactor the code just have the two constructors there's some efficiency there putting everything that has to do with this one creature into a class if you get more than one of those on the screen and then thinking about those things not calling them out so what are those things move independently through some other particular kind of logic so I hope you will do that I hope you will make cute and cuddly and rainbow colorful and Tenant new creatures and share those with me in the comments at shipment on Twitter by submitting it to the github repository and all that sort of stuff that people often do when they're watching these videos thanks and I'll see you soon you