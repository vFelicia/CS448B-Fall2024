hey everybody so I haven't been making a lot of videos recently I've been deep into the throes of writing the new version of the nature of code book and I'm pleased to report that I am making progress at the end of this video maybe also go back to that and let you know more about what you can find but this wonderful thing happened I was busy rewriting chapter six a chapter about rigid body and soft body physics with different kinds of libraries matter.js and toxic lips.js and I saw this tweet it was a month ago from yuhani hakomaki this incredible beautiful world of blobs all collided with each other and I just thought to myself this reminds me of a project that really got me inspired to write the original nature of code back in 2008 called Nokia friends this was a project by Karsten Schmidt with a bunch of cute cuddly little squishy characters that bounced around now that project was built with a library called toxic Libs toxic Libs started I think around 2005 a sweeping and pioneering open source library for computational design it wasn't just one little Library it had multiple packages geometry 3D 2D audio color utilities physics so many more things and it was available for processing which was the environment I was learning and using the most at the time now that library is no longer maintained and you should really check out what Carson Schmidt is currently working on at fingthi.ng I'll put links all over the screen and in the video description but I just can't stop using toxic Libs it has a special place in my heart it's critical to the history of computational design and generative art and there is a wonderful Port of it from Kyle Phillips haptic data online into JavaScript so toxiclibs.javascript is still on the internet today it works it's supported I am excited to use it so I want to make my own squishy cute soft body character as a coding challenge in this video using toxic Libs JS before I dig into the code let me tell you about some really important references that you might want to dig into if you want to know all there is to know about soft body physics so the seminal paper in my mind is called Advanced character physics it was published in 2001 by Thomas Jacobson as part of the game developers conference and Jacobson was working for Io interactive a game design company and developed these algorithms in this methodology for the game Hitman code name 47 and the implementation of what's called verlit physics in the toxic lips Library would match exactly what's in this paper you might have also heard of a game called jelly car and there's a recent wonderful YouTube explainer that goes through everything about how the soft body physics in that game was implemented and how it all works now in this video I'm going to be using toxic Libs as the physics library but there are plenty of other physics libraries that you could consider doing something similar with two that I would mention that I've made videos about before quite old videos box 2D and maybe a little bit more recently matter.js so I will include links to all of that material in this video's description as well all physics libraries tend to come with some number of elements that Define the world and the things in that world in toxic Libs in the toxic lips of verlid physics there are three four or maybe five things that I want to talk about foreign the first element that's critical for the physics simulation is the world itself and you can think of the world as the P5 canvas then there is the concept of a particle a single point in that world now I'll probably choose to draw the particle as a circle but in the actual physics itself it is considered to be a single point Mass it does not have any geometry this is a pure soft body world that we can build geometry in out of particles but if you're interested in rigid body physics that's where you want to go back and look at some of these other examples of physics libraries if you have two particles particle one and particle two they can be connected with a spring other terms for this might be joint or constraint the idea is that there is some relationship between these two particles governed by a force that obeys hooke's law Springs and if you want to learn more about how to implement your own spring Force oh yeah guess what I have a coding challenge video all about that for you to watch a behavior is the idea of a force that can be added to either the world or to an individual particle so there's such thing as a gravity Behavior if I put that in the world then all the particles experience gravity there's an attraction behavior that I could add to an individual particle and then all the other particles are attracted to it make it negative it's a repulsion Force lots of possibilities there we'll get into that as I start coding I should also mention that there are classes in toxic lips for geometry so I'm not going to be using P5 Vector which is what I typically use in most of my examples because toxic lives has its own vec2d object and there are other objects for other kinds of geometry and I'll get into them as I need to use them all right let's dive in and see if we can create a sketch that has a physics world two particles and one spring that connects them and maybe a gravity behavior that I think we could do pretty quickly and easily and then we'll move on to seeing if we can build an entire character out of particles and springs I'll be demonstrating this with the P5 web editor if you want to follow along I'll link a sketch that is blank but has the toxic Libs Library imported as well as the p5.js library and then of course I'll have a link to the end result of whatever I code in this particular video alright first up I want to make a physics world so I'm going to create a variable call it physics the full name for a physics world with toxic lips is verlit physics 2D I imported the library and yet it says Verlin physics 2D is not defined the toxic lips JS website has a getting started section which will walk you through how to get going with the toxic Libs Library the original documentation for the Java version is no longer online but I see it as a personal mission to keep these things alive so I have actually hosted that Library revived it at a GitHub repository that I've set up that I'll link to in the description and what you'll see here is that the verlid physics 2D class is part of the package toxic.physics2d toxic lips if you remember is a suite of many many different libraries all bundled together if I want to create a virlyph physics world I've got a reference the full path but this is fairly inconvenient to have to do all throughout the code so I'm going to use something called object destructuring to pull out the classes that I intend to use from the toxic Libs packages foreign make a short little quick video on object restructuring if you want to see that let me know in the comments but what I'm doing is toxicity.physics2d is an object with properties and I'm pulling those properties destructuring the object out into individual variables with the same name through this syntax and even though I like to just use let everywhere to make things friendly and less confusing this is probably a case where I really should declare these variables with const because they're never going to change now in addition to pulling out the verlid physics 2D class I also have access to the verlit particle 2D and I have made a verlid particle at x320 Y100 let's draw that particle and there it is but it's not experiencing any physics yet how about we add a gravity Behavior to the world oh I didn't import the gravity Behavior there we go now I have access to gravity Behavior now to make a gravity Behavior I need a vector to say what direction is the gravity pointing in and how strong is it this would be a vector pointing down oh but I've got to import that vector class the vector class is actually part of toxic.geometry rather than physics now I'm not seeing the gravity yet this is a really critical thing about toxic Libs and most physics engines just because you create a particle a behavior a spring it doesn't automatically activate within the world unless you explicitly add it to the world so I need to say physics add Behavior gravity what did I miss here okay so I'm getting a weird error here it's undefined I made this Vector but I forgot to create the gravity with that Vector so that should go there and there we go still no gravity now I like to write things out in many separate steps because it makes it a bit easier to follow especially if you're new to this but I do want to point out that I don't have to make a separate variable for V in a separate variable gravity just to prove that point I could create the new Vector right here when I make the gravity behavior and I could do the same thing with the gravity behavior in the add Behavior function but I'll leave that to you still though no physics happening guess what I'm missing I made the gravity and added it I made the particle but I didn't add it everything that I make I have to add explicitly to the physics world but I still see no physics I've forgotten a critical step and in fact that word step is maybe a clue if you are used to P5 you're probably used to the idea of time moving forward by the draw function looping over and over again you've always controlled your animation and behaviors through that fact through the fact that you have a variable that you change and you draw something one way then draw loops and you draw something another way and so on and so forth the draw Loop is continuing to Loop but the physics world is not moving forward in time it's up to us to specifically tie those two concepts together the physics World takes a step forward in time when you call physics dot update the easiest way to have this all work then is to just have physics update happen every time through draw there are all sorts of ways we could get more sophisticated about that but this is going to do the job for us and as you see now gravity is in play let's add a boundary to the world I need that rectangle object from toxic geometry there we go I can create a rectangle that is exactly the dimensions of the canvas and I can make that the world bounds of the physics world and sure enough the particle stops when it gets to the bottom let's add a second particle okay so now I created two varlet particles added them both to the world and I'm drawing both of them it's time to return to this diagram and look at how I would add a spring to connect these two particles now when I created a particle I only needed two arguments an X and A Y for the coordinate of the particle on the canvas a spring needs four arguments the two particles that are going to be connected let's call them A and B then the rest length of that spring what is the length that it wants to be call that length and then the strength of that spring this is a number between zero and one where one would be very rigid as if there's a metal rod between those two particles and all the way down to zero very elastic as if it's just gonna the particles are going to melt away and not be able to hold together I'll make a new variable called Spring and spring is a new verlit spring 2D that connects particle a and particle B maybe a rest length of 100 pixels now let's try a strength of 0.5 what did I forget I also have to add the spring to the physics world and there we go did you see that lovely little bounce it's kind of amazing that it just stays perfectly upright I assume if I move maybe the particle over a little bit yeah it's going to fall over now remember there's no geometry here the spring is just a force that's acting between those two particles but I could draw a line to help me visualize what's going on let's add a third particle and let's connect particle B to particle C foreign just happened there it's really hard to understand what's going on without all the elements being drawn which is something you could use to your advantage depending on what application you want to make but let's draw that other line aha oh next I want to show you how I can make this interactive so something that you can do with a particle is you can lock it into place for example if I were to say particle a lock now everything is going to swing from particle a and in fact I have a nice little double pendulum simulation already going but once I've locked a particle I can also manipulate its X Y position without it participating in the physics and then unlock it so now as I move the mouse around I can kind of Swing this lovely little double pendulum all over the place let's have that only happen if I'm holding down the mouse The Logical Next Step would be I've got a connected to b b connected to C let's connect a to c foreign I've got a nice little squishy triangle now that I can toss around and enjoy now if you look at this code it's a lot of repetitive stuff I mean I'm numbering things ABC one two three I could definitely use an array I've got to say add particle for everything I've got to draw all the circles and lines separately there has got to be a better way so what I want to do is completely reorganize this code in a way that will allow me to expand it to create much more sophisticated soft body shapes let's take a minute to think about what it is that I want to do here I currently have a shape that has three points all connected with springs but maybe what I really want is to make some kind of Blobby cute character and it squishes and squashes and moves around the canvas I've got to think about where are all the particles how many do I have and if they're all connected with springs this could be a good starting point but the whole thing is probably just going to collapse unto itself so what if I built some sort of shape but added some additional Springs just kind of across the middle maybe I don't draw those to hold the thing together so in order to be able to build something like this I need to First reorganize my code so I can manage all the particles and springs in arrays and then I need to think about the design of the skeletal structure of this particular character and then how I'm going to layer a drawing on top of it so number one every time I make a particle I'm using the toxic Libs verlit particle 2D but I want to have my own particle I maybe want to keep track of things like its size maybe I want a function that draws it I want to have my own particle class so I can create a particle.js file add a reference to it in index.html and then go about writing my own class so this is boilerplate code of a base particle class it's got an x a y an R for radius all of those are initialized in the Constructor and a show function to draw it as a circle but I also want this particle to have everything that a Verlin particle 2D has now if you happen to watch some of my other physics Library tutorials I would often do something like this in this case I have as part of the data of the object a reference to another kind of object so it's essentially a wrapper class my particle class is a wrapping the idea of a virulent particle and in this case I could probably get rid of the X and the Y and then in here I'd have to say draw The Circle at this dot particle.x this dot particle dot y but there is another way this makes sense in some scenarios but here I can use the power of inheritance this is something that I cover in chapter four of the nature of code and you can go back and watch the particle System videos where I look at inheritance and something called polymorphism in more detail but for right now all you need to know is that if I use the keyword extends and say that my particle extends verlid particle 2D then suddenly it's as if I copy pasted everything that's part of verlid particle 2D into my particle class only I don't have to copy paste it it's invisible it's inherited all of it and in fact this is all the code I need except for one more change it's not up to me to initialize the X and Y properties of that particle I want toxic lips to do that for me so I can reference the parent class furlit particle 2D with the keyword super the parentchild relationship is often called the super class to subclass relationship so now I have my own particle class which is exactly of earlier particle 2D but I've added a radius and a show function and I could go back into sketch and replace all these code still works now look at this every particle I'm making I'm adding to the physics world and that's really going to be the case 99 times out of 100 if I'm making particles I want them to experience the physics I'm not making them just to leave them out so a nice feature that I could add to my particle class is for it to be responsible for adding the particles to the physics world so when I create a particle the Constructor is called and right there in the Constructor I can say physics.ad particle now what is it that I'm adding I'm not adding a specific particle I'm adding this particle inside the class the way you reference any generic particle is with the keyword this this particles X this particle is y this particle now I could also replace the calls to Circle and draw with the show function great we're still cooking here let's give the Springs the same treatment I gave to the particles okay here's the spring class which extends verlit spring 2D calls the super Constructor adds itself to the physics world and then draws a line now you could make the case that I've done a no no here in that I'm referencing a global variable the physics world inside of the class maybe that should be passed into the Constructor but I just want to keep things simple for myself in this case I have one physics world for this whole project and I'm just okay with referencing it as a global variable here in the class even though that's not necessarily the best object oriented programming practice now back in sketch I can change these to my own Springs and I can call the spring show functions and we've got exactly the same functionality working but I am now using my own particle in spring classes which is going to open up a lot more possibilities in terms of how I design and visualize them how they behave what other properties they have and so on and so forth all right next up let's change three separate particles in three separate Springs into arrays foreign there we go I am now putting the particles and the Springs into arrays I'm still individually making them you might have your own ideas for how you might automate that process but I want to design this character by hand but the really nice thing here is I can iterate over the arrays to draw all the particles and draw all the Springs let's take out the Gravity from the world right now and let's make the Springs a little bit softer all right what could be a simpler version of this I have a triangle what if I did the following what if I design my character to be something like this let's start with that let me number how I'm going to put them in the array and then I need to think about which spring connections I'm going to need and what the lengths of those Springs are so first thing is if I turn off the physics I can see actually where the particles are being drawn originally let me try to make up some points that I think might work all right there's all my particles and there's all my Springs let's think about what I need the lengths to be so the particles zero and one so I totally drew it in P5 differently than it's here but zero and one and three and four need longer Springs so it can maintain that shape so let's give those 150 and let's see what happens if I just let the physics go now oh boy so you can see that there is no structure being kept so I've got to start thinking about what are some other Springs that I might add internally to keep the structure uh maintaining its shape how about a spring that connects five and two maybe that's a little bit better what if I connect zero and three and one and four a little bit better here's the thing though I'm making up these lengths of the spring maybe what I should actually do is have the rest length of the spring be the actual distance of the particles as they are initially placed in that case I can actually get rid of this fourth argument completely and then in the Spring Class itself the length is the distance between a and b look at that so now the physics is active but it's not doing anything because I have created it with all of the Springs already at their rest length which is particle zero this one so now we can see how this one is maintaining its shape pretty well so this is what is known as debug view in the sense that I am drawing all the particles and all of the Springs But ultimately I want this to feel like it's a character I don't need to see all the dots and all of the lines so let's actually comment out the show functions let's say begin shape and shape and let me create a closed filled shape out of all of those vertex points let's run this and see what happens look at that instead of drawing the particles in the spring separately I just drew one shape with a fill and look there's my little soft body character I hope that what I've given you here is the foundation to build your own character I think an interesting question is what if I wanted to add little eyes could I use two particles and another spring connection to make antennae or legs or other kinds of appendages that are flopping around three days later all right thanks so much for watching today's coding challenge I have taken some time to clean up my code I added some eyes a little antenna to make the soft body character more fun and I really want to see what can you do what can you build upon that I've done so far in this video to make your own character think about adding more points more Springs maybe you want to make a dancing skeleton or a squishy soft body letter form so many possibilities you also might want to take a look at other kinds of Springs that are part of the toxic Libs library in addition to the plain verlitz bring to D that I used there's a verlet constrain spring 2D which is a spring whose maximum distance can be limited and then there is also the verlit Min distance spring 2D which is a spring that only enforces its rest length if the current distance is less than that rest length so both of those might allow you to increase the stability of your system or constrain it within certain ways now at the beginning of this video you might remember that I said that I would follow up about the nature of code book if you're not familiar with that project negrovecode.com has the original book that I published in 2012 you can even buy a print version of this book online but I would suggest you don't stop wait because I am almost through a complete rewrite with many new examples p5.js code I have stopped promising what date I'm going to finish that pie because that date that I thought I would has passed so many times but I have finally made real significant progress with this new version of the book I'll link to the website where you can read the work in progress version there's a GitHub repository which has all of the material for the book as well as the code for how the website is built and the new PDF will be generated so I don't have a mailing list or anything I guess I do have this YouTube channel there's social media if you're following me if you're subscribed if you have your notifications on you can be sure that when the book is finished you will hear about it and in fact I just went through editing chapter seven which is All About Cellular automata a word that I absolutely cannot pronounce and I'm going to do the next coding challenge all about the Wolfram one dimensional the elementary Wolfram CA the sort of CA that of of all Cas thanks for watching I'll see you next time up