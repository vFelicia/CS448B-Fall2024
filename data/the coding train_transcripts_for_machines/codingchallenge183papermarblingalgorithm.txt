IM missible imiss what does that mean I don't know that word not forming a homogeneous mixture got it today I am going to tackle a p5js simulation of the artistic process known as paper marbling this is an ancient process it involves water taking ink or paint and floating it on top of the water and then applying that to fabric paper Ceramics and all sorts of incredible and beautiful patterns emerge the earliest accounts of marbling date back thousands of years to Japan where the process was known as suminagashi a wonderful reference is the 19th century Japanese artist tokutaro yagi who developed a method using a piece of bamboo to stir the colors new marbling techniques were developed throughout the Middle East and Europe and continued to this day I encountered the concept of marbling through the work of computational designer and artist Amanda gasai who collaborated with the studio nervous system on a set of marbling Infinity puzzles now if we're talking about taking ink and swirling around in water the first step might be to look at a fluid solver and this is something I did in my coding challenge fluid simulation and that was a bit of a mess and it's incredibly computationally expensive on Amanda gai digital marbling post she shows this wonderful webgl fluid simulation demo that she built back in 2017 she goes on to reference this incredible paper by Aubrey Jaffer and coauthors called mathematical marbling where Jaffer suggests that simple deformation formulas can produce a marbling effect without the need for such a computationally expensive full fluid solver this method is also outlined on jaffer's mathematical marbling website and that's the primary resource that I'm going to use as I begin to write the code for this challenge all right so this is how I'm going to approach the problem I'm going to consider my p5js canvas as a tray of water I then am going to drop a circular blob of ink into that water and I want the ink to have two properties the second property is a word I just learned I don't know a minute and a half ago and I don't remember how to spell it I m m i s c i b l e this ink should be both incompressible meaning its density never changes and the same amount of volume of ink will stay within this canvas regardless of what happens as well as imiss meaning if I were to pour another drop of ink over here they aren't going to mix instead one will push the other one out of the way so my first step will be just to create an object that is that drop of ink itself let's create a file called inc. JS for that class and the drop of ink should be created at an XY position with a given radius I'll write a function to draw it as a circle and then I'll make an array where I can add drops of ink just by clicking the mouse okay now I have a sketch with an array of drops when I click the mouse I add a new drop to that array and then in draw I show all of the drops whoops of course I forgot to put ink. JS in my HTML file and I forgot the this dot do do do Dot and there we go drops of ink so this is a nice start but there's no actual marbling happening I need that ink to be displaced when new ink arrives in other words imagine that I drop a blob of ink we label that a then that second blob B is also dropped overlapping part of it on top of a remember the ink is incompressible and the new ink is going to displace the old ink now this isn't exactly right but visually I'm going to get something like this and this area should be exactly the same as the original area of The Blob a there are two approaches I could take here one would be to actually look at all of the pixels inside of this circle and move each one individually to a new position essentially creating this new shape instead what I would like to do is consider this a closed shape and move all of the vertices of that enclosed shape according to the displacement from this new blob of ink this is accomplished with jaffer's formula given a point p a Vertex on that blob of ink and a new blob of ink a new paint drop of radius R centered at C that point P has to move so what direction should it move in well it should move according to a vector that points from the new blob of ink to that point P minus C but how far should it move well if that blob of ink is really big it should move farther that's accomplished by scaling the vector by R squar but how far away is that point if it was really really far in the first place maybe it shouldn't move very much if it was close maybe it moves a lot this is accomplished by dividing R 2 by the magnitude of that Vector P minus C so hopefully that gives you a bit of intuition as to how this formula works you can read the web page and the paper for more details let's write that formula on the board so P represents any pixel inside of a but for our purposes just the vertices around the perimeter of the circle and C represents the center of the new drop of ink and R represents the radius of that new drop of ink let's look at how I can apply this transformation formula in code so first thing first if I'm going to deform that Circle I can't just use P5 Circle function instead I need to draw it myself calculating all the points around the perimeter of the circle so let's add a vertices array and let's calculate all the vertices using polar to cartisian coordinate transformation and let's start with just a small number of vertices just 10 so if I'm counting from 0 to 10 I want those angles to go from 0 to 2 pi so I'm iterating over the angles around the perimeter of the Circle I'm making a vector from the cosine and S of that angle scaling it by the radius and putting it into the array these points should also be offset by the original XY the center of that Circle I might not actually need to save that Center as separate X and Y properties but let's leave them that way for now and then instead of using the circle function I'll use begin shape end shape and iterate over all the vertices this is the same but you can see the circle looks more like a do decahedron is that when you have 10 because I'm only using 10 points let's make that a global constant I'll call it like Circle resolution that is much too long of a name let's call it Circle detail and now let's up that to 100 and this looks much more like what we had before okay adding the first drop of ink there is currently one drop object in the array now when I add the second one I need to process all of the previous drops in the array before that second drop gets added to the array that needs to happen right here I'll call them other so the idea is that I create a drop then I marble all the other previous drops from that new drop and then put the new drop into the array so all I need to do is write that marble function with that formula so what is c that is oh a vector you know what ah okay let's actually have the center be a property of the drop I do need it after all but let's not let's have it also be a vector because that'll make the math stuff work better as I embark on implementing the formula in the code I will be making heavy use just as I did with the center variable of P5 Vector if the concept of vectors is unfamiliar to you if you've never used create Vector on the P5 Vector functions I would suggest taking a look at my nature of code chapter on vectors as well as the accompanying videos but the quick version is a vector has an X and A Y component when I add two vectors together I'm adding both the x's and the Y's same with subtract uh the magnitude is the length and so on and so forth and then here I can just say add this do Center still working now I need to say take the center and add oh wait wait wait wait wait something is off here I'm writing the code inside of the drop class and I'm going to modify this object's vertices which is not what I wrote here because what I wrote here is I said hey the drop is going to modify the vertices of the other how to reconcile this who is marbling whom I think it's fine other is going to get marbled from the drop that's fine it's fine all the other drops get marbled from the new drop and now I can iterate over my own vertices and C is the other drop Center and P is this drops Center and what I'll do is I'll make a copy of it this way I can say p subc and that now p is now the vector P minus C which is in both of these places so I have C I now have P minus C and I have P minus C I have r which is uh uh R is a other do R and square root I could do so I I have all the components of the formula now that I need so P should be multiplied by and let's call this root is the square root of 1 + r is other. r r * R is R 2 / P magnitude time so let's let's put that in in a variable called M and in case you're wondering that's what these absolute value symbols mean that means the magnitude of the vector P minus C the square root of 1 + r^ 2 divided the magnitude of P minus c^ 2 startor to interrupt there actually is a P5 Vector function called mag squ and that would be better to use here so so you use that okay all right as you were so P which is actually T minus C should get multiplied by the root and then a c should get added to it and that is the new values of V let me try running this uh okay I've messed something up here okay this is a major mistake that I made what is p remember p is the point that I'm trying to displace it is all of the vert veres around the perimeter of the circle in my code I just set P equal to this. Center which is this point here that's not what I want to do although it shouldn't have totally disappeared but anyway let's fix that it's a copy of the vertices ah there we go whoa marbling amazing uh this is a little hard to see let's put some color in it or at least gray scale let's say no stroke and let's see what happens when instead of clicking the mouse to add drops of paint I do that automatically and let's put this whole idea of what it means to add a new drop into a function whoa that's a bit insane but it is working let's make the canvas a little bit bigger maybe I won't don't want the drops to be able to be so big oh I'm liking this better see it has that stonik quality to it this is a good start I need to certainly think about where this is going at some point the deformations are going to become so skewed that the quality starts to suffer the performance will eventually suffer because I'm never deleting any of them but I think there's a lot that you could create from this alone what if you add the drops of ink with some orderly geometric pattern or perhaps you think about other modes of interactivity maybe what if you were to drag the mouse around as you're adding ink so coming back to my diagram all that I've done so far is displace existing ink by dropping new Blobs of ink into the canvas but what if I were to take a comb over the canvas and wipe the ink how could I get a displacement from doing that and this is something that's referred to as a tin line what would that math be the formula for this is outlined here the simplest place for us to start would be to just think about a single vertical line going down the middle imagine taking a toothpick and dragging it over the ink let's look at this Formula F ofx of Y equals this is my new point for every XY vertex in any drop of ink I need to calculate a new XY if the toothpick the timeline is perfectly vertical there is no X displacement only a y displacement only y gets a new value let's look at how I might do that now in order to figure this out let's not randomly add all of this ink anymore instead in setup let's start by adding just one single blob and let me go back to a slightly smaller canvas great now I need a new function to add a Tim line and what do we need we just need that X displacement x l if you will so what does it mean to add a Tim line at x = 300 so we need a new function called time inside of the drop class that just receives the X location of that line that's going to cause the displacement and I'll just call it X here again I need to go through all of the vertices each vertex is going to get a new value v.x is just going to equal the original X then V doy is going to equal o what's Z well Z is a variable that I'm going to make up let's actually pass that in as an argument and looking at the image here there's actually two properties there's Z and C these are controlling the displacement and the sharpness of the bend so uh let's use those two variables and let's try just with 20 and one those are the first numbers from the image in the top left here so I'm calling tin line with an x value of 300 a z of 20 a c of one then that gets passed into every drop and then we get those values here but the formula has u in it what is u u is 1 / 2 to the^ of 1 / C now that I have youu the new y equals the old y plus Z * U to the power of the absolute value of x XL well what is that the absolute value of what is X x is v.x and I don't actually need this because v.x isn't changing but it's nice to kind of have that in there just to remind ourselves the absolute value of v.x minus X okay so this should be that formula for a vertical timeline let's see if it works huh yeah look at that now it doesn't look like much yet but let's add more drops so let's put in a whole bunch of drops that will all displace each other in the center so there's 10 of them now let's add that timeline there we go and let's play around with these values like give it a much higher C oh look at that we've made a lovely uh latte I I really need some coffee right now this I think would be interesting to animate so what if I actually took this timeline function and put it in draw I'm just going to only do it if the mouse is pressed oh okay that was way too much so let's turn Z all the way down to one because I want to apply the displacement over and over again there we go now I should be able to also apply that wherever the mouse X is right so if I click the mouse here yeah look at that whoa let's add a lot more drops that's too many you can see how I can start to make all sorts of interesting marbling patterns now you might be noticing there's some harshness to the geometry on the outer edges which is quite different in quality to the smoothness of the Contours towards the center that has to do with the amount of detail that I'm using to draw each particular shape the larger ones now have fewer vertices their vertices are spaced out they all have the same number of vertices but those vertices are spaced out more I could certainly consider upping this circle detail and we could see it's much more refined now so it's going to be kind of a performance tradeoff but right now it's working fine even with a much higher Circle detail already I'm really loving this pattern that I've got here just out of curiosity let's try putting the Blobs of ink in random spots rather than all in the Center maybe I should speed up the marbling can make the zv value higher to do that yeah but I have only now allowed myself to apply those tin lines vertically I could certainly do it horizontally I'll leave this as an exercise to you but horizontally would just be swapping the formulas here essentially applying that same transformation to the X and no transformation to the Y but what if I wanted to apply a tin line in any Vector Direction here is the answer under generalizations this looks a little bit intimidating in terms of the new math that might be applied here but I think we can handle it especially if we lean on chapter six of the nature of code where I look at a concept called scalar projection and the vector dot product that's what's being referenced here on this page let's make our own version of the diagram P represents any one of these vertex values on any of the Blobs of ink then I have a vector we'll call it m which is emanating from a point called B that is where the toothpick if you will will be dragged across the ink surface you can actually if we can get this to work an exercise for you to think of it more as a comb having multiple timelines all at once but let's not get ahead of ourselves here so the formula is the new P needs to equal the old P plus Z time U to the D Power Times the vector M so we have P that's this point we have M that's the vector the question is what is d well D is actually this distance this is called the normal a vector that's perpendicular to this line and we can actually get that Vector very easily by just rotating M by 90° and this is where scalar projection comes in if we think of this Vector P minus B we can actually compute D with the dotproduct D is equal to the vector this Vector which is p minus B dot this is different than multiply it's a special Vector operation known as the dotproduct dot n the normal so the this is the very first thing that we need to calculate so I went through this whole effort of writing the timeline function But ultimately I want to replace it with a timeline function that receives a vector instead of just a single X value so let's take that out and it should receive a vector as well as Z and C ah but it needs more than just a vector because this is the vector that I want to put in but it also needs a position where that Vector is originating B these are weird variable names maybe I need to rename them but I need that Vector which is M I'll call it V let's call it V and then I'm I'm going to use something called position which could actually just be an X and A Y let's do that and then Z and C so ultimately what I want to do is have a timeline let's just recreate the one that points down Okay so let's let's go back to what we had to see if we can recreate The Latte effect so I've got and we don't need so many of them we've got 20 Blobs of ink and I want to add a timeline that points down from the center uh and then I need to give it a z and a c we'll just start with 20 comma 1 and this would be exactly the same it's a little bit redundant what I'm doing here we're just going to pass all these same variables into the function in the drop class so now in the drop class comment out this version of the function and add a new one with the new arguments U is the same 1 / 2 the 1 / C's power this is now going to be different first I need to calculate D so what is p minus b b is this XY position and let's make a vector I'll just call it PB for p minus B and what do I do I take this vertex minus B so PB is now P minus B and D equals the dotproduct of PB Dot N oh oh I need n so what is n well V is this Vector M here n is that Vector rotated by 90° I'll make a copy of it I don't know if I need to do that and rotate it by a half pi so now I have d d is the dotproduct of the normal and P minus b v I need to displace what do I need to displace it by oh I've done something bad I've got a real serious issue here so I should call this M oh I don't like that so much but that's what it's called I'm going to use the notation of the formulas and then maybe I'll think about renaming the variables later but I can't use V in two places V is uh the variable that's the placeholder for every one of my vertices m is the vector that is the direction of the timeline I need to do this operation Z * U to the D power time M so the first thing is I just need the magnitude of the vector which is Z * U to the D power okay that's what the magnitude of the vector is going to be and then I need to add to p a copy of M that is scaled by that magnitude what's wrong here oh dot subtract I forgot the subtract I said it but I forgot it and then I have another error here P oh there's no P it's V oh look at that I chopped it in half oh D absolute value right right because that dot product could be negative so where did I get that wrong this has to be the absolute value of this ah look at that let's go back to like 16 great now my timeline function instead of being only vertical or only horizontal can take any arbitrary Vector as well as a position now I I I did get that a little bit wrong I think I was talking about the position being exactly the point where the vector originates but it really is just any point along the line you can think of the Tim line as an infinite line and I just need to at least have one point along that line to know where it is not just the direction but where it is relative to the Blobs of ink so for example if I were to change the direction to horizontal I get that or even diagonal it it does need to be um a unit Vector so if I'm hardcoding in it I mean it worked anyway but technically um I've written it where it has to be of length one so I should say normalize and now that looks a little bit more correct let's try the following what if I were to drag the mouse to create a timeline so I'm going to say I'm going to have a vector called start and when I click the mouse start is a vector at the mouse Mouse location and then when I release the mouse I'll finish the vector and apply the transformation so I'll make a vector called end and I'll say end subtract the start end normalize and then I should be able to say tin line with that Vector end uh at Mouse X Mouse y with some uh Z and C so I'll just use the numbers I've been using Medan 16 all right let's see if this works drag the mouse o what did I get wrong oh I forgot that I had this in here still that has to go away that's no longer relevant okay it's a little unfortunate that I don't see it while it's happening but look at that now I can arbitrarily deform it okay this challenge is done I have developed the building blocks a class for a initial drop of ink the functionality for a new drop of ink to displace a previous drop the math for a timeline to Marble that ink along a vector path and I think that's enough for this video my challenge to you is even with just these building blocks how might you think about choosing a color palette for your drops of ink how might you place the drops of ink in a regular or geometric pattern as well as apply the tin lines in a particular pattern like tines moving through a field of view in clockwise circular motions or maybe arcs of increasing radius there are also other kinds of displacement formulas that you could apply like this vortex one I think that I've given you the building blocks to go through and read further and apply some of these additional techniques what about attempting this Serpentine marbling like outlined here you might also look at how Jaffer explains that paint drops can be raster rendered meaning instead of displacing the individual vertices of a shape what about iterating over all the pixels of a canvas and displacing those pixels based on an algorithm you might even then move Beyond abstract geometry and apply this technique to photographic images or realtime video I think there's also lots of creative ways you could animate the ink being added to the cam maybe it's not being added all at once but slowly over time how could you interact with the canvas Beyond just the mouse through gesture or other means also take a look at the link to the code that's in this video's description I will go and revisit it rename some of the variables annotate and comment it to make it a little bit easier for you to follow and match it with the mathematical descriptions that are in the marbling paper I I say this all the time with the coding challenges that I'm curious to see what you you make but this one I actually actually like I don't even know I I barely scratched the service of this particular algorithm so please if you make something based on this mathematical marbl en coding challenge share it with me in the passenger showcase uh let me know your questions in the comments or things that I got wrong or missed this is definitely one that I'm going to want to come back and revisit on a live stream and look at some of your creations and try to make more stuff myself so have a great day thanks for watching this coding Challenge and see you next time on the coding trade ch