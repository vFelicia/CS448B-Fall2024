hello in this video I plan and hope and am excited to look at the raw depth data meaning not the depth image not the depth values um converted to a grayscale image but actually the raw depth data that's coming out of the connect itself so again with the version two connect you're getting numbers between 0er and 4500 with the version one connect you're getting numbers between 0 and 248 and to demonstrate this what I have over here is a simple processing sketch that's drawing a whole lot of dots on a plane in threedimensional space and that plane is rotating rather slowly so what I want to do is and this is what's known as a point Cloud I want to take every point on this plane and give it its actual physical real space no wait wait wait let me say that again okay the connect is seeing all these points I am all these points in a room and the connect is seeing me and I want to move these points around what this is like the weirdest thing I've ever had to explain and it's like the it's like totally simple it would just make sense if I just showed it to you yet I insist on trying to explain it in this weird way but I want to take all the points that the connects are seeing in this physical threedimensional space where I am and I want to move these virtual dots which are on the screen in this virtual 3D space and that's known as a point Cloud this is how you might start to build a 3D model of what the connect is seeing in the space so the the the the key difference here uh so one thing that I had before in the previous video is we were looking at this pixelbased image right this idea of each image each pixel of the depth image has a value between 0 and 255 and it's a brightness value based on how far or close it is now the information is stored in exactly the same way inside of this a big array um but uh instead the numbers are between zero and 4500 so how do we work with these numbers so let's come over here and uh going to do a couple things in this video but this first point Cloud example I mostly have the code already so you can see here that what I'm doing is looping through the connects width and height again I'm skipping because I don't need to do every single point I don't need to do all the points just to visually get this effect um and then I'm finding the offset offset into that array so x + y * connect 2 width so that's how I'm going to look up into that big array of all those depth values now what is that array that array is called is I get that array by saying connect 2. get raw depth so when I said get depth image that gives me a p image object with pixel values all in it now I just get a big integer array again those integers are between zero and 4500 so they're in that array and I can say the depth is uh I already use the depth is is the offset into that array now there's something else going on now in this function what it's doing is there's a function here called depth to point Cloud position xyd X is the pixel X Y is the pixel y d is the depth that the connect is seeing there's sort of there's a strange thing that's happening which is that the pixel we we look at all these these uh pixels in a grid and we get this raw depth value but the connect itself um there's some math involved in how that can actually convert it to real measurements in physical space like where is the actual X where is the actual y based on like how the camera is seeing it so in order to do that this particular example has just this function which essentially you want to download these examples and copy this verbatim um but this function is using all of these kind of uh parameters that are built into the hardware itself so these are like a whole set of num numbers and values that are just part of the connect calibration and you kind of multiply and divide by these numbers and you get the actual value of where it is in space sort of an interesting problem I would love to like go through it at some point but right now I'm sort of inclined to sort of skip it and say the interesting thing is what you're getting is if you give the raw depth value the pixel X and the pixel Y and use that function you're going to get the X Y and depth values in millimeters back of where those things are in physical space so I don't want to in fact draw the this is what you're seeing in this particular visualization right now is just all of these pixels at their exact XY and XY value with a zero depth so what I want to do is change this program to say this actual physical point this P Vector the P Vector is an object that has an x a y and a z i want to draw the vertex at point dox point doy and now point point doz and in order to make this a little bit better I'm going to skip fewer pixels I'm going to skip only four and I'm going to run this again and now you'll see here I am this is the point Cloud this is me in threedimensional space so if I zoom in on this you can start to see like what's going on this over here by the way is the wall it's funny how I can like put my hands on the wall it's almost as if I'm distorting the wall but really what I'm doing is I'm casting a shadow um so it's a little bit strange to see this view of me and my connect I can like no I I would give myself a hug that's a little bit weird too I was like punching was weird hugging anything that you do I don't know just scratch all that but you can see here this is now a visualization in threedimensional space you could connect these points with lines you could color them there's a way of actually getting the RGB values and so you could see like the colors that are on my shirt on these points as well this is a road you could go down and I find this road to be particularly interesting but what uh and uh you can see that I'm I'm using just a simple y rotation so now I'm kind of like spinning around this image which is now gone off screen um but if I zoom back in you can sort of see it's over there um so this is kind of the start of sort of thinking of like what can you do with these raw depth values I think what would be a useful demonstration now is to look at how might I actually pick out just me so you can visually see just me but there's a sort of mess there's like all this stuff over here there's this over here um there's actually like this pole over here that's being picked up by the connect so what I you know what if I just wanted to like even only get my hand right here what I want to do is try to calibrate a threshold so what if I want the connect only to see the connect's over here remember so it's it's to the left of me I don't know what what side that is you're viewing but what if I want to say only look at the pixels in between here and here and that would conceivably get my hand right how would I do that how would I look only look at the pixels between a certain minimum and a certain maximum let's look at that so one thing I'm going to do is I'm going to save this as um I don't what to call this min max threshold um and I'm going to get rid of all this 3D stuff for right now uh because I'm not going to do this with you could do this with visualizing the point Cloud still but I'm going to do this with just uh and I'm going to look at all the pixels so I want to do x++ and y+ plus and somebody remind me what's the size 4 512 484 is that that right I don't know if that's right um and so hopefully that's right and then what I want to do is I don't need end shape I don't need I don't need begin shape I don't need any of this stuff what I want to do again and I don't need this depth to point Cloud thing I'm taking all of that out because what I want to do right now is just go through this double nested Loop and look at every depth value zero and 4500 but I only want to like count the ones that are between 200 and 400 or between 500 and 800 what is that what's that minimum and what's that maximum threshold okay let's make this happen so the first thing that I should do probably is uh I would like to make myself just to be able to see this I'm going to make myself an image and I'm going to create a blank image which is the same as the width and height of the connect uh and it's an RGB image so this is a function in processing create image that just makes a blank image and then uh whoops and then what I'm going to do right now is I am going to in here I'm gonna right here I'm going to say image. load pixels because I want to operate I need to operate on the pixels of that image I'm going to set pixels in that image based on the raw depth and at the end I'm going to need to say image. update pixels and I'm also then going to want to draw that image so just to make sure that things are working what I'm going to do is right here inside sorry this is where all of the important code needs to happen right now it needs to happen right here inside this double Loop right for every X for every y I want to set a pixel in the image image. pixels index offset equals and I'm I'm just going to set it to be you know some color right now some purplish color and run this and we should see that that's working U okay so you can see this purplish color I clearly got the size of the window rung let me just let me just get that for you guys really quick so if I go back and look at my RGB depth test um ah this isn't telling me Oh actually you know what let's just be smart about this um I want to just know what those values are I'm going to print out I'm going to print out the the the depth width and the depth height really quickly uh we can look in the console 512 424 I knew I had some was close so let me just get that right now and I I don't need this much of the console here and I can get back to the important part of the code we can run this we can see okay purple so I have now filled every pixel on the screen with purple but what I want to do is fill every pixel on the screen based on the depth so for example what if I were to just say if D is greater than 300 and D is less than 1500 image. pixels offset uh is that otherwise image. pixels offset is black so what I'm doing is I'm saying only if the only if the distance is between 300 and 1500 let me see a purple color otherwise let me see a black color and when I run this we should see oh my God I can't believe what I guessed I'm like genius here I somehow guessed a pretty reasonable uh threshold so you can see here that now what I've done and now you see like all computer vision problems Melt Away in a way like uh what I could do now is like it's so easy to find the I mean not easy but it's much easier now to find the Contours I have this problem of this wall over here so how do I get rid of this wall well first of all the real way that I get rid of that wall is by not doing my connect stuff right next to a wall so unfortunately this is like a bad I need a better setup I think for doing these videos which someday maybe I will find but what I want to do let's at least see if I can get the hands so one thing you'll notice here is that the hands go away once you're about a foot and a half from the connect so what I really want is between about I don't know between zero and maybe like 500 so there's probably a better way for me to calibrate this than just randomly picking numbers but let's give this a try you can see nothing nothing nothing nothing nothing nothing nothing nothing nothing oh that didn't do much any good so so so let's uh uh so I you know I whoops that's not going to do me any good either uh let's do between like 200 and a th000 nothing you can see uh like right but if I come in the bit so you can see here how like I'm able to pick out only my hand uh again I've got this problem with the wall so I'm going to do something about that in a second uh to maybe try to like just like not look at the pixels on this side of the window I guess um but you can see how you I'm starting to find this idea of a minimum and a maximum threshold and really I should make these variables so I'm going to say A Min thresh is 200 and Max thresh is 1,000 and you know I might as well make these floats because what could be also useful I think the way that I could calibrate this right here's a great way I could calibrate this so in between the minimum threshold and the maximum threshold what I might do is up here I might say Min threshold equals map the mouse's X value which goes between zero and width to between 0 and 4500 uh and the maximum threshold I'm going to do Y which between zero and height 0 and 4500 and then I'm just going to print out those values I could draw them on the screen which would probably be let's draw them on the screen so then down here I'm going to just fill 255 text size uh 32 uh text Min thresh plus oh I got it I use um double quotes Max thresh you know 10 comma 64 so here we should see on the screen these values so now what I need to do is figure out like what's a good uh whoops wait X is going between I'm doing I'm lost what I'm doing something is wrong here uh Mouse X between oh this is Max thresh yeah that's a problem uh okay so now you can see I'm able to like calibrate the minimum threshold and let's calibrate the maximum threshold like how far back am I seeing but the minimum needs to be higher and then I don't want to see too far back so there we go so this I feel like is good if I'm getting my hand right now it's between about 480 and 827 so let's like only if I'm standing right here of course but you know you could design an interactive exhibit where you put some footprints on the floor and the person has to stand there so I'm now going to keep my hand boy this is a long video I'm at 15 minutes I'm going to keep my hand around here I'm going to make the minimum and maximum 480 and 830 so now I can comment these lines of code out and I'm going to say uh 480 and 830 and I'm going to run this again and we can see I'm kind of I'm getting my hand like really I'm getting a pretty good tracking of my hand so one thing that I'm going to do now of course which I think would be useful is try to get rid of this wall over here so you know the Wall's a bit of a problem but I can kind of uh do a little bit of a cheat here I think which is also to say if and and X is greater than I don't know what how many pixels do you think that was that was probably about uh 75 pixels so uh maybe it's a little bit more so I'm just like not allowing me to measure anything that's like 100 pixels over so you can see I kind of got rid of that wall and now I have my hand so this is great you can see like this really nice clean outline of my hand because this is my other hand coming in it's not inside until it gets there right it's outside of that maximum threshold and now it's inside of that minimum threshold it's funny how it like oh no my arm is coming in so of course if my whole body comes in now you can see my whole body is here which is another thing that I want to look at so um you could see how this minimum and maximum threshold is working pretty well so I think this is this wraps up this video I'm going to continue this exact example you could try this on your own as an exercise before you get to the next video how would I actually just find the center of my hand so I could control a processing sketch Now by moving my hand around or moving this hand around or what if I do both hands so how would I do that this is I feel like I'm like I'm some sort of like magic person here um so that's what I'm going to look at in the next video how do I find the center of my hand and control something else like a little like snake that's moving around the screen or make a particle system come out of my hand we'll look at that in the next video and another thing I want to look at is how would I find the top of my head so if I'm the human being here how do I know if I'm bending down or standing up okay so we'll look at that in the next video thanks for sticking with me here I think this is actually starting to come together okay