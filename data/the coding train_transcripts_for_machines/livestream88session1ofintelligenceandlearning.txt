can you hear me right let's try to pick the time of the week when I am most exhausted and that's when I'll live stream on YouTube that's what time it is right now this I I have to say that you know I if you'll just bear if you will bear with me and allow me to have a little uh therapy with you um few dozen people who happen to be watching this right now uh I would say that this week and through the next six or seven or eight weeks somewhere to the middle of May are are probably the busiest weeks for me of the whole year so um I'm here and I'll hope probably be here next Friday but I'm only I uh but and I'll probably be here the Friday after that but we'll see I might miss a Friday but I'm I'm looking forward to Springtime end of May June and hopefully then you'll be seeing a lot more of me so if I seem a little wobbly a little tired if you don't see me on a Friday know that everything is fine but I I do have um this like a job thing that I do and it's a it's a busy time of year here at New York University okay so uh first of all I have a very important announcement to make I have some new uh new hydration technology that I have been working on all week asking for recommendations typing in credit card information onto Amazon actually you don't have to type in the credit card information it remembers it but I present to you a purple water bottle okay this the nice thing about this is a little less dangerous I don't know if you remember I had a pitcher one week um so this is good I'm going to step off stage I'm off stage right now it's not really a stage and drink some water okay now um I have to get moving here because um I've got to leave in about an hour and a half um and you know first of all I think it's one hour is a pretty good amount of time for a weekly live stream I would say um I like to do two hours if I can two and a half hours even sometimes been having a um a thing where like the last few weeks I did like five or six hours each Friday so um I audio up maybe turn your audio up because I see lots of green I see people asking if the stream is crashed everything looks like it's working for me so um I don't have a lot of time today but I have two um I'm going to try to um over the next several weeks get started with content more quickly uh I still do would like to do something where I share work from the community but I'm going to uh put that aside just for today hopefully next week I'll have more time to do that um and um I'm going to try to pick essentially one project to do each week I don't know what what I mean by project but one thing to focus on as opposed to trying to do four or five things and then and then I will um hopefully once things calm down when my schedule opens up a bit more in May and June maybe I'll get some do some more other stuff and extra live streams and all sorts of that stuff hopefully I'll have some more guests if you didn't watch uh Saran yarak was on this week talking about uh how to give a good Tech talk um sum it up in one sentence like about it as a story not Tech techn you know I I I deal with this all the time here I guess with uh listening to people present about their work here at NYU and you know some one thing that I think is a pitfall is you get up you want to talk about your project and you say okay so I made this thing uh I did it with illustrator uh and then with a pen and then uh purple and pink colors and that this doesn't work the wallpaper here's my website I made it with jQuery but then I had to uh use a node Sear server because I wanted websockets cu the thing about websockets is they can talk real time in two directions and instead of this is my story this is who I am this is why I care about this idea and this is the thing that I want to communicate to you today so anyway I'm off topic uh toot toot is absolutely right okay uh Dan in the chat asks oh hey princi hi Dan my name is also Dan how long are you live tonight let's say 530 p.m. that is about 1 hour and 25 minutes from now uh okay but as all of you know there will there are always um after this is over an archive is always uploaded and um shorter edited versions of the stuff that I do in this one and a half uh hour time period are also uh put together and uploaded separately because why not just have redundant content more views um so what did I want to say ah I in fact last week I've been behind on so many things that I haven't even released two videos two edited versions of and one of them is not edited at all because it was my pong coding challenge which took me a little over one hour um I see people everybody's having sort of issues but um book of random numbers please I don't have my unfortunately I don't have my um sound effects today actually while I get set up here for a second I'm going to let you guys in on something I was noticing I know that everyone is a big fan of the always I don't know that everyone is a big fan some people enjoy this Dot Song little known to you there is a second uh this Dot Song and actually this I I don't know if this was actually the first this Dot Song but F Looper also made the pear and noise song that I often play by F Looper F Looper also made a version of the this song song which I will now play for you while I um oh sorry it's not at the beginning yep as always I always forg I get set up here that song for me okay firework firework is not defined okay line six as always I always forget the this dot thisor firework is not defined okay line as I always forget to this do this do this do this dotor is noted okay line it's funny cuz I can't really hear it is it is it too loud I made it a little louder but maybe I shouldn't have I always dot this dot do this dot dot do this do song never forget this do somebody compose that song for me all right I think I'm ready so uh it's too quiet if anything okay so it's not too loud louder a little quiet okay um so what am I going to do today in this short amount of time that I have I would like to do two things one is as a lot of you have requested and know I am teaching a course here at ITP at NYU uh called intelligence and learning so I'm going to do a what I hope is just a 15 translate it to three hours a 15 to 20 minute introduction to the uh that course what topics I'm going to cover in that course what are my goals and sort of themes behind that course what are some of the references that I'm using for the course and then um a so so I'm going to do that and then after that I am going to do um a quick introduction to week one of the course which involves uh search graph systems and search algorithms and then I've already made videos on the the next videos that would go in the sequence would be binary tree dep uh maze generation AAR traveling salesperson those videos then I'll do um and then I want to do one new uh video One new tutorial for this material on breath first search and then if I have time I'll do a quick five minute like here's some ideas for an exercise that you could do for next week um so um that's my plan let me come over got it sound is off on the Whiteboard thank you guys for letting me know that I'm going to fix that uh hold on a second I have to switch to the I have to switch to the Whiteboard um it's going to take me it's G to take me 30 seconds to fix this the funny thing is I bet you I'll keep playing no let me just fix this quickly uh test test okay so you should have uh audio for me now in the Whiteboard shot yes okay and then still have audio here okay uh okay um that should be good now I'm afraid to take the top off of this because I'm going to knock it over but it'll be a little bit easier to drink if I did okay let's see okay so I've got to get moving here um I'm sure the cameras are about to shut off not I'm not about to okay so this is the syllabus for the course let me let me give this a little bit let me do this I think um okay I think what I want to do is is this example available I want to discuss this okay and then I also want to have this oh no no no wrong thing sorry everybody almost ready here it's not really readable is it and I wish um well it will be what it will be I will zoom in on things things so that's going to have to do and same for here okay um okay uh this is the real live stream experience okay uh everything the audio is working fine now correct I'm seeing old messages I think um okay so what gonna do was gonna cover Big O notation I don't think I'm going to get to that today that's okay though uh yeah we're not doing all this today but this is this is my schedule for the next seven weeks um I'll probably be slower to get to it on the YouTube channel so maybe you might consider this the schedule over the next 10 weeks or so but um I'm going to do my best but this is my schedule in preparing materials and information so if you want to follow along with this GitHub repository there'll be stuff each week um okay so boy one of these days you know what I was gonna do I had this idea that I would prepare slides for this quick introduction and then I'd be organized and I'd have like a plan for it oh well next time you you know those courses that are on corsera they're very organized I highly recommend them okay um so here we're gonna do I'm gonna get started okay I just press some buttons on the cameras to see if that happens okay I don't know what the best thing I guess I'm Gonna Leave This right here okay here we go I'm going to get started uh somebody hey so those of you in the um chat if anybody wants to do me uh some a help oh this is not going well if anybody wants to help me out a little bit one thing you could do is kind of just keep track of the time it's something that I don't do a very good job of I prefer for my videos to be between 20 and 30 minutes long and then when I have a longer topic to break them into parts so you know it's hard a little hard to keep track because sometimes I'll pause and then I'll edit out the pause but you know you might have a sense of that um if anybody wants to um kind of send me send me a little nudge hey it's been 20 minutes uh let me know if only I had a JavaScript timer yeah if only I had a timer or some sort of computing device that could keep track of the time I'm I'm just I'm not okay here we go 415 I do not need to look at my phone too many random unnecessary alerts here we go hello welcome to the first video in a new course I don't know series set of videos that I am here me Dan shiffman presenting to you on my YouTube channel the coding Trin okay so what is this uh you might be aware you might remember me from such videos as the nature of code um I have a playlist of videos most of these videos were recorded probably several years ago um they cover um I'm going to zoom in here all of these topics one through eight and I I have a book which covers all of these topics one through eight and I've been teaching a class at uh about this stuff for a bunch of years many years almost like seven or eight years in fact and so this year I am trying something new with this course and therefore also on this YouTube channel now what is this new thing that I'm trying what always happens when I teach this course is if it's a full semester course at a like kind of University like place um there are where am I over here there are these 10 topics oh you can't see the bottom let's see see um I'm not zoomed properly okay there we go there are these 10 topics and what happens is you know this here the first half of it is really about physics simulation animation moving things on the screen um and all the kind of stuff you could do with that and by the time we get to this people are on their way and they've been overloaded they're trying to learn all this stuff that what's here in 9 and 10 chapters 9 and 10 gets lost so what I'm doing this year is and starting right now is I would like to take what's in this book here 9 and 10 chapters 9 and 10 and expand the material out over to something that would be several you know many sessions about seven five or six or seven or eight I have no idea some amount of sessions of content where I take a closer look at topics related to and here's the title of this course intelligence and learning so I'm going to come over here and I'm going to write that down this is like what people who are teachers I've been watching some like open course Weare uh you know you have a big chalkboard and then you just like make a point and you write it down so I'm going to do that uh intelligence and learning now I am specific first of all well there's I'm specifically not calling this a course like artificial intelligence nor am I calling this a course like introduction to machine learning nor am I saying it's a course called say introduction to deep learning so what's one reason why I'm not calling it that well first of all I'm afraid of all these things so I feel like if I call it this is a course on artificial intelligence or machine learning that's a little bit scary to me um you know but also I'm I want to make the point in this course and and and that about let's ask let let me ask you a question for a second what's the difference between a computer that is intelligent or a computer that appears intelligent or has a piece of soft let's say piece of software what's the difference between a piece of software that is intelligent versus a piece of software that emanate that that gives off that has the illusion of intelligence I don't know and so what this course to me is about is creating systems examples interactivity projects CRA strange useless experiments that relate to the concept of my computer program oh crap let's let's uh the other computer does I like I didn't like what I was saying and um I'm just I'm taking a break for a second all right I'm going to come back to that Mato is going to do some magic editing I'm going to go from after I'm afraid of all this stuff other reason that I want to call this course just intelligence and learning is as I've always done with my materials I'm not necessarily looking to um create a perfect scientific simulation of the the um give me one more chance you're not over here everybody bear with me give me one more chance this is what happens Friday at four o'clock I'm gonna get through this this is the kind of stuff I really struggle with i' much rather just be coding right now but I'm gonna the thing is I'm GNA move more quickly the answer is to move more quickly thank you thank you for your patient live audience um okay so the other reason why I want to call it intelligence and learning is I want to take the broadest approach possible so you watching this course whether it's you implement the latest and greatest perfect machine learning neural network convolutional recurrent magical system thing that does something you read about in some academic paper or you make some crazy project where it seems like the computer is playing this goofy game with you and it and how could it possibly be doing that so there's a lot of space in between and for me I want to just really take a broad approach to and this not just look at only you know neural networks and machine learning and not just look at only these Topics in artificial intelligence and and okay so first of let's I'm kind of blending all these terms let's try to at least Define them so uh let's I saw this chart in a book somewhere so I'm going to recreate it so artificial intelligence is a topic so what is artificial intelligence well I actually just uh uh recently watched uh a lecture by a professor at MIT Patrick Winston Patrick Winston I think says at the opening of the lecture uh models someone will correct me if I'm wrong for thinking perception and action so this is a very broad term so let's think about this for a second let me go back to some of my other examples going to come over here and I'm going to open up where if if we were following along with the sort of pre if we stopped here at week six or session six or chapter six whatever you want to call it and I ran this flocking simulation I could ask the question is this artificial intelligence wait nobody can answer this question I want to hear from you so I I want to I'm I'm asking this question that but what's interesting whether or not you want to say yes or no I'm going to go back to here for a second models for thinking perception and action so one thing if you remember if you look at steering behaviors and steering behaviors pioneered by Craig Reynolds uh uh what is it um a uh action steering Locomotion so I've really been focusing on steering how do you calculate a steering Force how do you do the physics for that and how do you actually make that triangle move from one pixel to another uh and steering in Locomotion kind of cover all those pieces action this is a place where well what is the what are the goals in the flocking system the goals are stay with your neighbors but don't crash into your neighbors and also stay stay in proximity of your neighbors and also move in the same direction as your neighbors but don't crash into your neighbors and other kind of um action things that you might select is follow this thing or chase this thing or run away from this thing or try to get through this doorway the fastest as you can so what's interesting here is seeing this link is what are models for thinking and perception that might lead to action to govern the types of an animated systems that you might create so this to me is the link here whether it's enough to say I am going to kind of Define the rules almost known as a like a rulebased system feature engineering so to speak like I don't need a learning based system I'm going to define the rules of how all these things should behave but they're going to appear intelligent versus something like a learning system which has to learn over time so machine learning being something that uh crosses over with artificial intelligence you know I think of machine learning as uh something that you have data and you make meaning from that data so how do you how do you and and the you know two there's there's more to it than this but you know one of the most uh classic applications of a machine Learning System is classifying data classification so here's a bunch of pictures which ones are cats and which ones are dogs and there's more you know the the other type of system that you uh classicc of machine learning is regression which instead of categorizing into a discrete set of labels you know cats or dogs you might say you know here's all of these um you you want to arrive at a more continuous result so here's all these properties of a house how many bedrooms where is it located how many bathrooms and can the m can the system take that data and determine predict a price so um these are two classic uh tasks in machine learning now what's in the news and what's all the rage what's everybody working with these days uh are neural networks so you know a popular and powerful and exciting so much new research in this right now recently of creating machine Learning Systems to do these tasks with neural networks however in this course I want to look at other systems that do the same thing that are simpler um that might not be as powerful but might have opportunities for Creative possibilities but also if you can use the simpler system for the same result it's going to make it a little easier to perhaps dive into what in my mind might be the most difficult I might cancel this part actually last time I mentioned machine learning a fire alarm went off which saved me nothing happened this time but um so so we'll see so now so these are these are areas where I want to just look at and cover in this course um now what's this thing down here under DL this is deep learning and you know what I'm going to put deep learning in here so as I just mentioned uh one technique for performing these machine learning tasks is using something called an artificial neural network so an artificial neural network is a system where the data flows in as inputs and there is there are some set of connected neurons that that we so it's a how am I doing on time everybody the birds have no feelings I'm looking at the chat uh okay um let me come back let me let me erase this for a second let me do that again for a second CU I lost my train of thought uh 430 okay got to keep moving um okay so in the case of an artificial neural network that data that you're trying to classify enters as input to something called a neuron and then passes through a network of neurons to have some sort of output and I spelled that wrong but close enough cat dog price of a price of a house that sort of thing now an artificial neural network is a system and I'm going to get more into this in another video that's specifically just about this so I kind of want to just actually kind of move ahead and skip over this but the reason why I was mentioning this is there's a quite there's a long history of this and the very first discovery of an artificial neural network and we're I'm going to build one of these in a future coding challenge is called a perceptron which is a neural it's it's almost wrong to call it a network because it's a single neuron so a model for a single neuron an artificial neural network being a model for many interconnected neurons maybe it's a fully connected Network maybe it's like a partially connected network but the reason why so much that there has been a revolution in research and applications uh neural networks when they were first discovered this idea of a perceptron couldn't solve very simple problems so there's a famous paper the perceptron paper Mulla pittz I believe I'm getting that right so me the chat will confirm I'll try to have a link to that information in this video's description um and there were various steps along the way but there was a long time before anyone was really able to do a lot of work with uh neural networks and so deep learning refers to the idea of a neural network which has a lot of depth to it so in between the inputs and the outputs output and these could be both be plural or singular there are many many many layers it is deep very deep um so you know you can imagine all of these connections and so the idea here and and and you know the training systems and how it works and how the Learning System oh we got to get into all that but that's not for this video right here I got got off got off on this tangent um about neural networks so this is these are the different aspects of the pieces of this course that I would like to look at now let me come back over here um okay I'm coming back over here uh anybody um um oh do someone someone sent me a an amount of time so far I'm about 10 minutes a few minutes ago great uh okay that's good um okay so anybody want to fact check my Mulla pittz reference uh perceptron Maka and perceptron models Mulla pittz model so I must be right okay good uh okay all right um okay so history of the perceptron I'm going to do like stuff about the history and all that when I actually do neural networks I think so I'm coming back over here what was oh this would be open and this was open okay and I probably zoomed in on this okay so let me come back okay so let me take a look at the uh list of topics I'm going to skip uh week one for a second oop so this is the course if you want this URL will be in the video's description um this is the uh the uh syllabus for the course it's kind of my working document boy do I accept any and all contributions and help so feel free to um uh file GitHub issues and pull requests and things and if I come down here to the oh and I'm kind of in a place where you can't really see it I'm going to uh skip I'm skip over week one and so here are my topics so I'm going to go through these kind of quickly um again this is very survey oriented and Bo and I'm missing a ton of stuff you know so this is just a selection but I'm also still figuring this out so next week I'm going to uh talk about genetic algorithms which is an evolutionary based approach to uh solving problems with which is a way of solving problems in software uh taking inspiration from evolutionary processes in nature so I already have a bunch of videos on that and I'll do some more content about that as well and that will be in next week um oh this should say classification and regression um and recently I learned um that the term regression comes from uh regression to the mean and this is like a 19th century uh concept but anyway uh I'll talk about where I'm getting all my in I just read a bunch of books in the last week I got to thank all these people that I'm you know probably messing up all the stuff that I read um but uh I want to get interested in those I want to get started with those tasks without using uh neural networkbased models so something called K nearest neighbor uh one of the things I would like to do is build a simple uh movie recommendation system with K nearest neighbor is an idea if you have an idea for a data set or an interesting creative application for K nearest neighbor that's very simple with a simple data set that I can work with I would love that suggestion uh and also linear regression so I want to do um I want to do an example of the sort of simplest form of regression uh and we could think of that in um uh uh with an input and and and having an output um that's a continuous floating point value so um I want to look at that and when we'll do that we're going to get all this stuff like oh there's a learning rate what's this gradient descent thing and all this stuff so hopefully kind of defining some of the terminology and understanding those pieces as we look at k k nearest neighbor and linear regression will um will give us a leg up for the next week when we look at neural networks so I'm would like to build some simple neural network examples from scratch uh and when I all of this stuff I'm going to do so far probably in processing or JavaScript using the p5js library some combination of those things so I definitely want to build a perceptron you know if I'm feeling ambitious we might look at what happens if instead of a perceptron we have a multilayered network and uh you know all of this you can think of the neural network as like you're tuning all of these knobs so that the output gives you something that's correct you know you there's a whole training process that we're going to have to discuss called supervised learning supervised learning unsup supervised learning reinforcement learning interesting topics that I'm going to get into um but uh with one of the most complex aspects of neural networks is what do you do how do you train all that stuff that's in the middle and so there's a concept known as back back propagation that I that's like almost almost like querian for me but I'm not running out of the room just yet um and once I get to there I want to investigate some other platform so I might if I'm I might all this is I might but my plan and hope is to look a bit at um once we built some simple examples from scratch to look at other tools uh um for some more sophisticated applications like tensorflow uh and then be able to get into certain specific kinds of neural networks that can do different kinds of tasks what is a convolution network what is a recurrent Network and what is reinforcement learning so those are some aspects of things and you know I don't plan on building those larger more sophisticated systems from scratch but if we can build some basic ones understand how everything works then my thinking is then we'll have a leg up to using Frameworks and tools to do some of the other stuff um again all this is subject to change one of the things I mentioned this last week that I'm hoping to do because even though I might move to some something like tensorflow and python to demonstrate some examples in some of these other areas I would love to work on a simple web server that runs tensorflow in the background that processing or P5 could talk to there are also examples of some of these written in JavaScript wellknown examples by Andre karpathy the recurrent rn. JS and convet con convet I to pronounce that. JS so uh people are telling me time's up I told people I'm doing this live but you might be watching this as an archive that I wanted to keep this to 20 minutes uh sound is low okay hold on time out okay hold on let's people a lot of people are complaining about the sound fortunately for everybody I have a dial here that I can just turn it up is that better is that better for everybody and is there any peing or Distortion let me know uh sound is fine okay well now it's up a little bit I guess I maybe I shouldn't have changed it for the um okay everyone saying sound is fine I turned it up a little bit okay I forgot what was saying um okay so I think I'm I'm wrapping up then okay so that's my introduction uh I you know here's the thing I'm learning this stuff so if you want to go watch a course from somebody who really knows this stuff I will uh link to lots of resources and that's what I meant to uh what I wanted to um I wanted to mention some resources that I'm using ah very important that I will include in this video's description um and I think here under the Wiki under related projects and resources um here are um here are some resources that I want to specifically mention so one is a website called machine learning for artists it's got videos ex uh video tutorial video lectures uh examples written descriptions lots of wonderful thing by an artist and researcher named Jean kogan absolute expert wonderful in this field uh I watched a lot of Rebecca fbr's machine learning for musicians and artists videos Rebecca febr uh has made something absolutely Wonder ful called wekinator which is a tool that allows you to send data it does machine learning stuff and it sends it back out all with something called osc open Sound control I would love to do some video tutorials on that or have some guest tutorials from Rebecca febr um there's also a Caden course on a creative applications with tensorflow that I tend to look at and get some resources from um I also want to mention um the let's see what else ah uh Andrew Glassner is writing a book about machine learning and deep learning it is not out yet but he was generous enough to let me look at some preview drafts so uh thank you very much follow at Andrew Glassner on Twitter uh if you want to find out about his upcoming uh book that's coming out it's been really helpful to read and I'm sure there are um uh yeah also uh oh I uh grocking deep learning uh is a book from Manning and grocking algorithms these are books that I've mentioned that I have kind of have been looking as well as a make your own neural network which is a a book that walks you through programming your own neural Network in Python now people in the chat are giving me lots of suggestions for other uh deep learning and machine learning and AI books I don't have my props I have these old uh textbooks I'll bring those another time on artificial intelligence which are great um but the other thing I would recommend is uh these are three comp compilations of resources so this is one that's put together by this community this is awesome machine learning there's a lot of awesome blank lists um that I've uh are put together let me let me see who puts this together just cuz I forgot uh from Joseph MTI on uh GitHub and uh also uh this is a a list of resources from memo Atkin okay so uh please I'm accepting all suggestions and help and examples and ideas I look forward to all of the uh hopefully not so angry letters I will receive as I screw everything up over the next six or seven weeks we're going to um uh you know I have I guess what I didn't really say is I have you know to wrap up here what I have is these two chapters in nature of code which deal with genetic algorithms and the basics of neural networks that's where I've kind of left my knowledge behind and I'm embarking on this journey here on YouTube to try to expand past what's in there and we will see how it goes so thanks for joining me and I look forward to seeing you in some future videos okay uh great stay hydrated all right so that was my introduction I um I there was so many things that I wanted to talk about and cover but I think it was good good that I didn't uh okay I'm okay on time it's 440 so now what I want to do is introduce the first week oh I'm there already okay um okay yeah see I had all these other notes about these are my notes of things that I want to talk about in my introduction that I didn't really uh remember oh I wanted to talk this is so important well what are we going to do another time I will maybe I'll do a separate video about this and we'll come back to it as we get further along somebody remind me about this um I don't think I need to reinsert this into that introduction but I think it's incredibly important when studying and working with these topics to ask to be critical and ask questions if anything we're doing is actually a good idea um David ha who's a researcher at Google I believe our Google creative lab who makes lots of great machine learning projects tweeted one point I thought what happened to making the world a better place see I'm doing this now it'll just be in um you know what let's do an addendum what do you think Mata you said it was under 20 minutes I'm going to do a quick addendum I'm GNA do a quick addendum okay oh I'm back I do this a lot I'm back because I forgot that I had this page of notes instead I just rambled and you know it's got a few more links about thinking about the definition of artificial intelligence and machine learning I'm still working on stuff you'll find this also linked but you know something really important here that I wanted to just mention was uh you know it's it's very important when studying and I'm really just going to be looking at the algorithms and making stuff and trying to be creative and wacka doodling my way through this if that's a verb but it is really important for you the world of people who are going to to be using these tools using these algorithms making projects working for companies to be critical and think about what you're doing and whether it's even a good idea and is it hurting anybody is it helping anybody and so um there are some uh you know some uh uh one thing I'll just mention here is there's an organization called AI now which I just learned about recently um I thought I just clicked on them yep over here uh which is a initiative to research the social impacts of artificial intelligence to ensure a more Equitable future um so I encourage you to check out there's going to be a Symposium in July uh check out about this I also just love this uh quote from uh hard Maru on Twitter uh which is um who makes uh uh David Hoff from Google makes a lot of wonderful I have a recurrent neural there's a wonderful recurrent neural network handwriting with p5js example uh um that uh um you can find I'll try to link to that as well but you know whatever happened to making the world a better place so you know when you talk about what is your goal with building an AI system with using machine learning why are you doing it and so I'll leave you with that are you making the world a better place I hope that you are and come along uh I'll see you in the next video okay you can decide whether to include that or not uh we can decide that later but that was something that I wanted to say here at least in this longer live stream it will be here in this video okay so now what I want to do uh is uh yeah I talked about this I didn't go over my sort of glossery of terms but that's okay um we'll come back to those and now here we go so I'm going to do I'm going to now okay okay okay so here we go I'm looking at the chat um okay so now this video so that was an introduction to the whole course this video which I hope will just be 5 to 10 minutes if not even shorter than that uh will be just an introduction to to the topics for week one and one of the things my dream has always been that I just make all these coding challenges and random videos but they're modular pieces that could be assembled into a course so I'm kind of trying to do that to some extent here like most of the stuff that's in this week one are video or topics I've already made videos about traveling salesperson AAR uh binary search tree so you know the only thing that I'm going to have time for today really is H the camera went off is breath first search but but um but as I go on and make more videos someday I'll do a video on Big O notation I don't think I'll get to it today I'll insert it back into this course so in the introduction I want to sort of first lay out what the topic is but also explain to people that these aren't necessarily sequenced but they're if you're watching in this playlist they are okay so sorry I'm going to say everything twice but I have to like sort of figure it out but okay um here we go let's uh let's begin so I'm going to leave this here let me actually so I will oh yeah okay oh this is a mistake I'm not logged I always forget that I'm not logged in at GitHub I need to fix this bottom link um wait I can do ah never mind it's fine I got to time is of the essence okay okay so maybe you watched the first the introduction to this uh larger playlist the intelligence and learning set of videos but now this video is an introduction to just the first session and the first session is about search and graph systems now why why why should that be the first session I don't know might be a bad idea first of all I wanted a warmup so I wanted something to kind of get us thinking about algorithms and data and things that seem intelligent or that solve problems in an intelligent way so um and also there are some very you know in some ways common unsolved problems of computer science like the traveling salesperson problem which is one of the topics of this week's that could could use a a new newly invented machine Learning System to solve it so anyway I'm off I'm off track so where where does this fit in so if you go and grab I I wish I had my props can we get some like post production here I'm going to hold up uh the um um what what's the book that I always use hold on time out um it's the um it's the norvig artificial intelligence um I just want to get the name of it correct artificial intelligence a modern approach by Russell and norvig okay that's what I was meing uh good luck editing this um okay um I'm GNA like pretend I'm just GNA like pretend I'm doing that again which is so ridiculous I'm do it anyway oh God I can't believe I do these live um you know oh I don't have my Pro if I had my book uh artificial intelligence the the uh modern approach the norvig Russell book yes I know hopefully I got that right um you know you would see a lot of I don't have my pen anymore ah continuity error um you would notice um that uh there's a lot of algorithms in these books about search because one of the first one of the kinds of problems that artificial intelligence algorithms that intelligent algorithms often need to solve in computer science in applications interactivity all the sort of kind of projects that you might be thinking of making is there's a problem I need to figure out the answer to this problem but there are so many possible answers I couldn't possibly check every single one and so search refers to the idea of searching for the answer in uh in a sea of possibilities now one way is to search every single possibility I mentioned the traveling salesperson problem let's talk about that for a second so I want to talk about uh search and graph systems this is kind of loosely the topic for right now there goes that eraser oh my God sorry everybody the eracer is okay everything's fine okay so um The Traveling salesperson problem says oh I have videos on this already so you can go watch those there are some number of cities and let's say there are five and that A salesperson needs to visit all of the cities in the shortest amount of time or taking with the shortest distance in any order starting with anyone ending with anyone so I might be able to eyeball this and say like okay well maybe that's the path it's probably not the path it's probably more like this whatever the point is we could have a computer algorithm figure this out let's just check every single possibility so first let's pick a city how many cities should I pick how many cities could I pick oh there's five of them okay now if I pick if there's five possibilities now once I picked one city how many possibilities are there left four and how many are left three and how many are left two how many left one so five factorial 20 60 120 120 possibilities for five cities and this is 5 factorial so this is the kind of problem that doesn't seem like such a big deal but if I just have 10 cities what's 10 factorial I don't know a computer could probably crunch through that number uh what about uh 50 cities okay that's a three with 64 zeros after it it's like a really really really big number I mean what's the what's the uh the um age of the known universe it's just 13.77 two billion years that other number is a lot more than that so and you know even if we could do like a million per second or something it's trust me we're going to have some issues and we'll talk about that so what are some solutions to this next week we're going to look at genetic algorithms which is a technique for trying to optimally find a solution and there are ways we might say something known as a greedy algorithm I went off put a tangent here we'll see if this is a problem maybe we'll edit this part out but a greedy algorithm which you might say like I don't know let's just pick a city and then pick the closest one then pick the closest one to that it's probably going to get us a pretty good answer even if it's not the exact optimal answer the point of what I'm saying is this is the application that I want to look at in this first week so the things that we need to learn about to be able to do things and work with problems like the traveling salesperson are number one graph systems and number two search algorithms okay now what is a graph system a graph system is something a system that is made up of two elements node and an edge we could name these other things but I'm going to call them nodes and edges um one of the next videos that you'll watch if you follow this playlist will be on something called binary search tree a binary tree is a graph system where every node is connected to two children nodes a left and a right and those are connected to two and those are connected to two etc etc etc so this is one example of a graph system so what you'll notice is we need some sort of data structure to store what are all the nodes and what are all the edges and this depends on the problem uh a common example also of a graph system similar to The Traveling salesperson problem is a subway map so let's say I need to get from this station to this station well there are all these other stations and routs and maybe they all are interconnected and there's many ways to get um this the subway map makes no sense there's many ways to get there but they all take different amounts of time like maybe I could go from here to here to here to here to here which is hold on let me re let me redraw this timeout editor okay I'm back I'm going to redraw that to make more sense let me just draw it like this so let's say we I wanted to get from here to here we could see like oh I'm going to get from in one step to here and it's going a two steps I want to take two trains to get to here but what if this train takes 60 Minutes this train takes 30 minutes and each one of these this takes five this takes two this takes one and this takes six so even though I have to go on 1 2 3 four trains this is optimal this will get me there faster this is known as a weighted graph system so the grph system is a bunch of nodes those nodes might have value so a binary search tree you can use to organize in alphabetical order a lot of words or numbers and other variety of things you could think of this but the edges here don't necessarily have weights at least in a standard binary tree but here they do now there's an algorithm for searching for that optimal path in this scenario in a weighted graph and it's called Uh dyra algorithm uh there's also another algorithm called uh AAR and etc etc so these are different examples binary search algorithm dyis algorithm a star and the one that I'm actually doing today but that doesn't really matter to you because you're going to watch these videos and sequence which I'll talk about in a second is something called breath first search so breath first search is a good algorithm for finding the shortest path between two nodes in a graph that aren't weighted so the shortest number of steps and I'll talk about the example that I'm going to use for that in a bit so this week is all about learning how to program a graph system and learning about different algorithms to efficiently solve a some type of problem associated with the graph system like the shortest path and you and so now now once you stop watching this video there's going to be a bunch of others in this playlist that I've made at all different times under different circumstances so this is experiment that I'm trying trying to put together a sequence course with all different coding challenges so you'll see there's a binary search tree example there will be a breath first search example there's uh there is no at the time of this recording but there might be at the time of you're watching a Dyas algorithm AAR so you'll see and I'm going to be filling stuff in as time goes on once you get to the end of all of those if you choose to watch them all I'll make another video that kind of wraps up and shows you a bunch of examples all together and um gives you some ideas for some homework exercises that you might do that you could share with me in the comments and that sort of thing uh if you want to participate in a slack Channel that I have that's going on for this course you can sign up at uh patreon.com coding train it's a crowdfunding thing if you want to participate in that slack Channel but you can also always hit me up on Twitter at shiffman and uh in the comments here which I do read okay so that's what's going to happen next and I will see you uh if you decide to come back in a wrapup video where I um kind of summarize a bunch of this stuff and give you some exercise ideas uh great so I'm going to go and actually record a video right now on breath first search uh but you might watch some of these other ones first thanks very much um let me see uh oops how was that um um people are talking about quality okay so how are we doing here how long was that would you say that was probably way too long okay um okay oh Big O notation is something I I didn't mention that's fine that's fine um 9 to 10 minutes wow all right I don't have my sound board today I forgot it sad okay so I got to get set up for this coding challenge oh I knew something I forgot to mention does anybody have any questions because one thing I should do is answer questions um I totally forgot to mention something important that's fine um that's fine because the thing that I want to mention ah shoot I'm going to mention it I'm GNA come I'm going to do my addendum we can if it makes no sense that's just it's what I always do uh week one read me here um okay I didn't really talk about pre prequisites it's a very hard word to say prerequisites pre prerequisites okay don't really talk about prerequisites PR pre prerequisits maage anyway um how many of you get that reference okay you want to see the mug oh I didn't bring the mug because I have my water bottle my purple clean canteen sponsored by would that be great if they would sponsor me I need a water I actually I make that joke but I really should get a water company or something to sponsor me product placement oh my god um you know what I think maybe I should just leave things as they are uh let me do a little maybe this will get added on maybe it won't but um this is important so I'm going to mention it here okay oops I'm always back at the end of my videos when you think they're over so one thing I want to mention that if you're about to watch some of these the rest of the videos in this sequence first of all you should um you know if you don't know uh JavaScript programming in p5js um you might want to take a look at some of my intro to p5js videos but more importantly than that if you have experience with um two things that I'm using in these videos is one is this uh concept of prototype as a as a a way of attaching methods to an object in JavaScript as well as this idea of an associative array or hash table and how that works in JavaScript so those two things might be videos that you might want to go and watch first before you start looking at some of the graph systems and different search algorithms okay just in case that matters to you you know um but you don't really have to know very much to follow this stuff along if you know a bit about programming you've tried you've watched some of my other videos hopefully you'll be okay if not let me know and I'll see what I can do okay see you soon okay uh okay so oh I ignore questions I'm trying to not ignore questions oh uni Kitty uni Kitty is in the chat um what sometimes might the YouTube the YouTube chat Scrolls pretty fast and it's very hard for me um to um watch it continuously but but I do um so sometimes if there's a really important Salient question and somebody who's in both YouTube and slack wants to paste it over I'm I'm uh that could be a way okay uh okay um so where how are we how are we on time five o'clock so this is the thing that I'm now hoping to do in a half an hour it'll take longer but we'll see okay um I got to get myself ready for this now so what I need is a couple things I need to get a data set um okay so first okay hold on ah uh I need to go here I'm so I'm I'm going to clone my repo and I'm going to run a server and now I'm going to get the browser back open oops wrong thing and uh oops I'm I really don't want to run the server from the desktop that's a little bit silly uh oh shoot um ah sorry everybody uh I will run it from here um sorry that I'm standing in front front of what I'm doing I'm just kind of getting some examples ready to go oops uh okay so this one we're going to need uh okay um thank you somebody contributed the force directed physics of this I should I want to make sure I thank this person let me look at poll requests I made a bunch of changes to it but the original implementation was done by so first of all thank you to there's a bunch of let me thank all these people uh Kay weekman who has added a lot of like links to references and other uh information that's been really super helpful um somebody uh contributed a better uh a better way of laying out the binary tree um example that I made which was like in my videos as well uh which is D um drw on GitHub and then our hacking contributed the force directed aspect of this particular um uh breath for a search example um um I want to also go to the Wikipedia page um because we can follow along with the algorithm here um okay and then what I also need is oh so now I need to make my own thing what I'm going to do let me just get any random example let me just grab this one I'm going to do this from scratch so I don't need any of this code I'm going to call this uh six degrees of bacon by bacon I mean Kevin Bacon uh and I'm going to open that in adom I'm going to delete all of the code I am going to make a new new file call it uh Kevin bacon. Json and then somewhere I made what I already did is I made a little data set uh here it is uh whoops let's do this I can put in here and there we go okay so now uh yeah okay so I'm just about ready to talk about uh can you code it in Java you know I'm going to do this one in um JavaScript in P5 because I wanted to just make it quickly interactive in the browser um but I'm not opposed to making a um oh the Chrome extension by the way that I use it's really really good for the I love this Json formatter Chrome extension got to get this Chrome extension you got to get this Chrome extension let me tell you uh Json former I believe it's this one first one that comes up in Google uh okay um but I I I'm happy to make processing versions or come back and do it again but I'm today is going to be um um okay okay um all right so this is okay so that I wanted to demonstrate just as a diagram uh okay so I don't know wait no what am I doing uh hold on everybody six degrees I'm going to just run this on a different port that'll do uh there we go and let me actually just change the title Six Degrees of Kevin Bacon uh so I can see that that's different and uh there we go okay um okay so I I want to reference this book which um this particular example comes from make this bigger um and then oops then I have this then I have the breath first search page so I think we are good I'm going to go erase the Whiteboard uh and so um I think much uh in terms of editing this I think this well it doesn't we have to decide this right now but I think this is a coding challenge I could make it one video where I explain the algorithm and another video where I code it but I kind of prefer to just do them both together so I think what I'll try to do is um uh there's a pole now going on by the way somebody pointed out that I can use straw pole for polls uh and Nadim in the chat asked will this video be available after the stream ends yes it will be um I think what I want to do is try to do this all at once like describe the problem and the algorithm and write the code all at the same time and if it is taking a while I might break it into two parts um this is probably I mean this is in theory much more complex than my pong example but I don't know why I think in my head this is like not going to take very long to program but we'll sort of see okay um so here we go me let me uh see if I can get these cameras to not go to sleep and where am I on this other camera uh okay uh here we go okay here we go everybody ready this is the last thing that I'm going to do today just so you guys know although I'll happy to if assuming this goes okay and it's not a total and I don't go running out of here with like my hair on fire or something um I will maybe try to answer a few questions boy I'm really exhausted but we're going to go through this anyway I had no tea I got no coffee but I do have my clean canteen of water okay here we go hello welcome to a coding challenge in this coding challenge I am going to uh what am I going to do ah breath first search what's breath first search why should you care first before I even get into it I would like to thank the author of this book grocking algorithms because this particular example um that's not the thing exactly the thing that I'm going to build but it's something that I did recently after reading this book this is a version this examp do I get my do over okay maybe I should use the whistle whistle is good luck okay hello welcome to a coding challenge uh this coding challenge I am going to um attempt something called breath first search now this is an example uh an implementation in p5js of breath first search it comes directly from this book grocking algorithms by a did y barava It's a Wonderful book I highly recommend it Buzz Marketing books here on my uh uh YouTube thing but I I do want to thank that's where I learned uh more recently about this algorithm and in practicing it implemented the example so what is breath first search so this video first of all is also placed in a series of videos about graph systems and search algorithms so you can in the video's description go back to some of the introduction videos that will lead you up to here but you can also just be here right now because I'm going to do everything from scratch with no knowledge but a graph system is a system of nodes and edges and you can see here are the nodes now the nodes all have a name these names are exactly the names in the grocking algorithms book um and they have edges so they have connections you can think of this as maybe a map of friends and their relationships um you could also turn this into more like a uh a maze type thing there's so many different ways you could sort of visualize this idea of a graph system and you'll see in some future videos that I actually made previously I do have some implementations of graph systems to create mazes but that aside what breath first search is designed to do is find the shortest path between two nodes and in something like this you know it's quite a simple problem to eyeball it we can see like if I want to get from you or me or whoever this person is to Tom I can see through CLA there are just two steps if I want to get to an this through Bob is faster than going through Alice Peggy Bob anou so how do you figure this out it's called the one algorithm for doing this is called breath first search and the reason why it's called breath first search rather than something else that you might have learn learned about or see in a future video called depth first search is breath first search by definition looks at all the nearest nodes first sees if it finds what it's looking for then looks at all the nearest ones to those first and sees what it looks at find as opposed to going all the way through I recently made a video video about binary trees and search trees that's more like depth first search because in the binary tree you just keep going to the left all the way to the bottom but here breath first we're looking at the nearest neighbors to start okay so what's the problem that I'm going to work with today um you may or may not be familiar with I don't know what this is a thought experiment a weird idea Six Degrees of Kevin Bacon there's actually a website it's called Oracle of bacon uh and I'm going to go to it right now and I don't know I needed uh I need an actor or I need an actor um let's pick um Amy Schumer and I'm G to pick a f link okay Amy Schumer has a Bacon number of two the shortest path between Amy Schumer and Kevin Bacon Amy Schumer was in the movie train wreck with Marissa to who's in the movie Crazy Stupid Love who with Kevin Bacon so this particular website has a massive database of movies casts and uses breath first search to find the shortest path between two actors and the the thought experiment here is that Kevin Bacon has just been in so many movies that um anyone could be within six degrees of Kevin Bacon I don't think I have an IMDb what's the what's the chance that Kevin Bacon to Daniel schiffman n infinity infinity we got to work on that come on help me out with this here I want my Kevin Bacon number to come on down okay um so how are we going to do this now I would love if anybody uh so this is an experiment you I'm I'm going to do this for you and hopefully teach you something about this and then maybe you could do something similar but with a different data set but I'm going to use just a toy data set essentially I manually created before coming here right now this data set so this data set has uh a few movies in it some of which have Kevin Bacon in it and some of which don't have Kevin Bacon it's organized in Json format which is Javascript object notation I do have some video tutorials about that if that's unfamiliar to you but I'll try to talk about that a little bit as I go through so let's let me move over to the Whiteboard to figure out how we're going to work this out so what I need to do in my program we're going to look at the algorithm itself on Wikipedia and start translating it into code but before we even do that what I need is I need a uh I need two I need a node I need a node object so in the end um there's going to be Kevin Bacon there's going to be some movie and there's going to be some other actor so and then there's lots of other stuff so in order to keep track of these what I need is I need some sort of object I'm going to call it a node and that object needs to have we call it a value or a label we're going to say a value it also needs each object needs to keep track of its edges which other uh nodes is it connected to so we need edges and this will be an array I don't like these dashes here they look like minus signs so I don't know dot that looks like something else but anyway these are this is the data now at its core this is very similar to my binary search tree that I mentioned which each node just has a left and a right but here each node could have just one connection zero connections 10 connections now there's other pieces of data that the node is going to need um and these are part of the breath first search algorithm I'm just going to mention them right now since while they're on on in my mind one is we need to know a Boolean how has it been checked searched or not like is this we're looking for Kevin Bacon is this node been checked already to see whether it's Kevin Bacon or not so this is going to be true or false this is going to be a Boolean we're also going to want eventually we're trying to solve for that path so we're going to have nodes keep track of their parent meaning as I'm checking and go moving about through this graph system I want to keep track of where I came from what was the previous node so that when I find Kevin Bacon I can back up and find that full path so I want to keep track of the parent as well okay so we know we need an object that stores all of this stuff so let me come back and start building that uh and I'm just going to put that so I have I have a a JavaScript project set up if I go to the browser and refresh the page there's nothing on the page but I'm going to start adding some code so um first thing I'm going to do is I'm going to write a Constructor function for a node object and I'm going to say I'm going to say this.v value equals something we needed that uh this. edges is an array uh this do searched is false it hasn't been searched and this. parent I'm going to just set it equal to null so I I want to be able to whenever I make a node with this Constructor function uh you know even though this by definition its parent would be undefined I'm going to explicitly said to no just so I'm kind of keeping track of that okay so this is pretty good this is pretty good okay first all this shouldn't be blank so maybe when I say new node I'm going to uh give it a value okay so this is good you know what I want to do I want to take this code and I want to put this in a file called I probably shouldn't call it node.js should I fine I'm gonna call it no DCH uh okay um okay uh so now sketch doesn't need so in P5 uh P5 has a setup function setup function is kind of like window page loaded type thing so that's going to be in sketch I'm also going to make here's the thing I'm going to make uh a graph object so I might have some redundancy or some things in my code hello I'm sort of out of the picture here that are a little bit unnecessary but what I would like to do with the graph object is I would like to store an array of all the nodes and then I would like of all the nodes and I probably need you know what the graph really should be as a data structure would be something like I could look up each node by its uh um I I'll call this a graph by its label by its value so uh this mode typically be something like you know a hash table where uh the the key might be Kevin Bacon and then I could uh with that key I would find out all its edges its parent all that other stuff so I want to be able to have I might not need this array because I can always the whole point of the algorithm is to Traverse the graph to find what I'm looking for but it might be useful to have this array if I want to visualize it or do something that I could just iterate over all the nodes really quickly you know there's going to be some done to the here but this is what I'm going to do so let's go and uh do that and uh I look forward to hearing from everybody later about how I'm not doing this correctly uh I'm going to say uh function graph graph this. nodes is an array and this. graph is an object uh an empty object so if you're going to use this object essentially as an associative array or a hash table and I have a video about that if you're interested okay now I need to read the data that's the first thing I need to do so I'm going to use P5 has a function called preload which I can use to uh I'm just going to say VAR data and then I'm going to say data equals and this is a P5 function called Low Json where I can just pass in the name of my Json file which is Kevin bacon. Json Kevin bacon. Jason Json Jason ah what is it somebody will tell me I'm pretty sure from the comments that it's GIF though and not GIF I've been told that many a time okay so now I'm just going to in setup I'm going to say no canvas P5 makes a canvas by default but I don't need it and then I'm going to console.log the data so let's just make sure the data is there and we can see there it is so the data came in I have an object which has an array called movies and each movie has a a a property called cast which is an array of all the actors so that's great so now what I need to do is I need to make a node for every movie and every actor okay so I want to be able to parse through and read this list so the object has movies so I'm going to say VAR movies equals data. movies then I'm going to Loop over all the movies in that Json file well I'm really not on to breath first search yet I'm just kind of gathering the data and I'm going to get um and what I'm going to do is I'm going to get the movie equals and what what what was the movie the movie has a cast and a title so the title is also a node so I want the movie movies indexi tile and cast equals movies indexi do cast so first I need to make a node Varn equals a new node movies indexi do tile okay so oh actually I don't need to say that again movie so I need to make a movie node and then what I want to do in the graph is I want to say oh I want to say I'm going to make a graph object and then right the graph object is the thing that's going to keep track of all the nodes so I need to say at the beginning graph equals new graph and then what I would like to do is add add this node to the graph so I'm want to take this node object which whose value is a particular movie and add it to the graph graph. add node n now can I just do this and get this to run Tada no graph is not defined okay so first of all I forgot a bunch of things one is I forgot I need to add a reference to my node object Javascript file and the graph object Javascript file so that's one problem number two add node is not a function this doesn't just exist it's a function that I need to write so I'm going to attach a method to the graph object using the Prototype I have a video about what prototype is if that's not familiar to you graph. prototype add node equals function okay now what comes in a node so what do I want to do okay so I need first a couple things one is I want to say this. node push. node so any node that comes in I want to put it in the array because I want to store all the nodes in an array which might be unnecessary but I'm doing that as a safety mechanism then I also want to have a lookup of the node based on the name so the movie name needs to be the key for that node object so this is going to look a little bit weird but I'm going to say uh title equals n. tile no do value right the node the title is stored in the node's value and then I'm going to say this do graph index that title equals that node so this is me uh putting this is node into array and node into you know it's not really a hash table because it's JavaScript but I'm thinking of it as like a hash table okay so that's good I've got the um I've got the what do I have the movies okay let's now add the actors what I'm going to do in this first part is I'm going to add all the data and get the graph set up and then I'll take a break and there'll be a second part of this video which will be the um actual implement the algorithm okay so now the cast for I need another loop I can't use I so I'm going to use J uh the cast. length uh j++ and now I need to make a node I'll call this uh you know actor equals cast I'm not call sorry cast index I yeah the strings are just there in the array let me just console log everything to make sure I'm getting all the uh that's that's correct what I'm thinking here okay so we can see that oops I used index I I'm like why is it Steve Gutenberg 14 times because this needs to be J okay so now okay so now you can see I'm that's me iterating over all the movies and the actors so now what I need to do is I need to say bar uh actor node equals a new node with that actor name and then graph add node actor node so just like for every movie add the movie then add all the actors wonderful okay so now let's also at the end of setup now let's say console.log graph just so we can look at what's in there and I don't need to console log the data anymore I feel confident about that so whoops and I don't need to console.log the actors anymore so let me go here so this is the graph you can see it's an array it's got an array of 74 nodes and it's also got a whole bunch of objects which all have the actor name or the movie name as the lookup so this is good I'm kind of almost there like what do I have so far I have a graph object which stores all of these nodes only it looks like this I haven't done any of the edges so what do I need to do every movie needs to be connected to every actor that's in that movie so I need some way of setting edges so the edges for each node should be a list of other nodes that it's connected to so let me see if I can do this so the if I'm thinking about this codewise what I want to do here is for every actor and let me call this movie node I want to say something like movie node. connect actor node so I want to connect the movie to the actor and the other thing I want to do though this is a question that comes up with these kind of algorithms is the graph does the graph only go in One Direction or do things go in two directions so in this case I want to be able to go in either direction so let's let's we need to add this connect function or add edge maybe I should just call this add edge because I have ADD node now I have an add edge function okay here in node so now I want to add to the node object a function called add edge and it gets another a I'll call it a neighbor and then I just want to say this. edges. push neighbor simple as that all I need to do push the neighbor now hold on a second we've got a problem I just realized we have a problem the whole point of this is that actors can be in multiple movies right so here I am always always always making a new actor node now I know I can't have two instances of the same movie in this data set but I could have two instances of the same actor so whenever I go through the cast I need to figure out if the node already exists if the node already exists I shouldn't make a new node so I want to say if graph contains actor then actor node so I want to say VAR uh actor node I'm just going to set an actor node to null for a second if graph contains the actor then I want to say graph. getet node actor or something you know what I could do is I could say VAR actor node equals graph get the actor get node so I could just have a function that says get node and that function will return null if the actor is not in there there so then I could say if actor node equals null then I make a new actor node so what do I need to add here I need to add a get node function into the graph so let me add that so I want to say graph. prototype. getet node equals function and what do I want to do I want to look up and so this is like a uh actor so I want to say uh what do I want to say VAR n equals uh this. graph look up by the actor and then return n so this is going to get undefined right it's not going to actually return null so I should actually say in the main program if actor node equals undefined oh I'm so exhausted this this is exhausting are you still watching this video I need to take a nap but I've got to finish this it's so uh it's getting late okay maybe you just woke up and you're having a nice little sip of tea and watching this video okay um so I think this is going to work I might have made a mistake but let's take a look refresh H okay node.js line8 there is an error oh this should say equals function and just had the wrong syntax so now let's look at this the gra the nodes so let's look at any given node uh this is Mickey roor edges it doesn't have any edges so what did I forget the edges have to go both ways so this. edges. push neighbor and neighbor. edges. push this uh both directions so let's try that again refresh let's look at a arbitrary node Kevin B bacon uh which is connected to ah what did I just do like uh Kevin Bacon H which is connected to flatliners foot loose and Diner and if I look at zero which is Diner it's connected to uh all these other actors which are also connected to other things so I think this is right I'm pretty sure I have the data correct anybody want to say otherwise because then I'm gonna move on to part two so now we could actually do the algorithm right so this it would be really nice if I had a visual example right so one of the this I will link to this code example as well which is using a force directed graph to like arrange it and as an exercise you could even stop here and just try to like visualize this graph not the easiest problem I would love to see your solution um but I'm going to stop and what I'm going to do in the next video is I'm going to implement the breath first search algorithm and when I come back at the beginning of it if I found any mistakes I'll let you know okay 530 um yeah I Mark in the chat writes can you visualize this I'm have a hard time understanding this setup it's a very good point it's not the best um so what I'm going to do um uh K weekman asked there's no inherent set data structure is there um set node type you know what I don't actually need to set the node type to movie or actor um um yeah no I'm not I'm kind of just if you if we look when I get to this it's going to say empty set wait what's the empty set oh that's for searched so I'm doing it differently so I just need need create a Q and The Root okay um so I'm doing it a little bit differently but um yeah these are the data structures I'm using okay sorry I'm fading here but I'm going to I'm going to push through and finish this but it was a really good point in the chat about visualizing this maybe I'll start by drawing this out a bit more okay okay nobody sees any mistakes here let's just double check this this is a terrible way of looking at it but I'm pretty sure it's right if I look at this particular actor it's these edges which is eat pre love which is connected to all these other actors and I don't see any there's no duplicate there shouldn't be any duplicates so I think this is good okay s is a tab with visited nodes yeah yeah yeah yeah yeah um okay why don't I make games anymore I don't know I wish I was doing that I agreed to teach this class on artificial intelligence and machine learning and I don't know I thought the search algorithms would work and really I just want to take a nap and read some nice fiction but this is what I'm doing I'm definitely with you there though okay so let's come back here and um okay so graph okay I'm gonna I'm GNA try to finish this now uh uh okay uh here we go let me I know that wasn't a half half an hour because the cameras didn't go off so that's good okay take a nap poor Dan I don't mean for all your sympathy here I just it's thank you though that's nice of you okay uh all right let's go here know what to start with Okay um okay so I'm back here for part two of this breath first search algorithm thingy so um you know somebody in the chat had asked um this is really hard to follow you know could you visualize this it's a very very good point and unfortunately the way that I'm building this example right now um I'm not going to sort of build in a lot of graphics features that's a great exercise for you to do and I do have other examples that do have those features that you could that I'll link to you could look at but I think that we could at the very least I could draw it for you what this is looking like so um without using actual movie names or actor names I'm just going to I'm going to say like movie one movie Two movie three I'm going to have you know actor one actor 2 I should probably use real names to make this make more sense actor three actor four actor five so maybe these actors were in this movie uh these actors were in this movie uh oops the actors don't have connections to each other and this right so the actors just it's only in this particular example the actors only have connections to each other through movies and somebody else in the chat mentioned you should distinguish between movie and actor nodes and that could be an interesting thing to work with and you know depending on how you're visualizing it you probably would want to do that for for just finding the short shortest path I don't actually need to do that so let's say that actor one uh let's say actor four is actually Kevin Bacon so what the depth sorry not depth breath first search algorithm looks to do is I want to pick any actor and find the shortest route to get to Kevin Bacon and this we can see here is actor 2 was in Movie 2 with Kevin Bacon actor 3 was in Movie 2 with Kevin Bacon or this is the same distance Act five was in Movie 3 with Kevin Bacon and actor one was in movie one with actor 3 who was in movie two with Kevin Bacon so this there's not a lot of possibilities here but you could imagine a much more complex interconnected Network and if you think about actors and all the movies they've been in in full cast list it's massive okay so now let's come back here okay so now I need to do is actually implement the breath first search algorithm now before I do that I need to I need to um I need to add a beginning and end so I need somewhere to start and somewhere I want to finish so always the graph always wants to end I'm going to just I'm G to have a graph have this do end and um this. start so I'm going to give the graph object an end in a start node um and what I'm going to do is uh in after I've added all the data I mean I'm just going to hard code this in which is a little bit silly um and I'm going to say uh graph. set and I'll just do it this way set end Kevin Bacon and graph. set start uh let's just pick some actor from whoops let's pick some actor from that list wasn't Mickey roor in that list let's see if I get this right uh so Mickey work to Kevin Bacon okay uh so now I'm going to go and in gra I need to add those functions set start set start equals function and I'm going to say you know actor and then I'm going to say set end and then this. start equals this. graph now if actor doesn't exist we're going to have a problem but I'm just going to uh assume that actor does exist so I want to pull I need to get the node um I need I mean maybe I could just keep it as a string but I want to get the node the particular node that is the start associated with that actor and the particular node that is the end associate with that actor okay we've got that should have put that in the last video but we've got that now we are ready for breath first search so I'm going to use I'm just going to pull I I referenced before this book which is a really great visual explanation uh grocking algorithms of this particular algorithm but I'm just going to try to write the algorithm from um the Wikipedia page but you know I could also just explain it to you so what we're going to do if we're starting with an actor is we're just going to say breath for search means check every single edge connected to this actor is that Kevin Bacon no is that Kevin Bacon no is that Kevin Bacon nope so all of these that aren't Kevin Bacon should get added to something called a q a q is a kind of data structure that's first in first out so it's like lining up to buy tickets if you got in line first you get to buy the first ticket so if this is not Kevin Bacon it gets added to the Q then M2 is not Kevin Bacon it gets added to the Q then M3 is not Kevin Bacon it gets added to the Q now when I'm done checking all those edges I go to the Q and take the first thing off which is M1 and check all its edges well this I don't have to check that anymore because it's been checked so I got to Mark things checked when I check them and then I got to check its edges nope so that's not it so this goes off the Q now this is next A1 actually then gets added to the Q as well uh then M2 I'm going to check all his edges that's not Kevin Bacon it's been checked it's been checked oh that's Kevin Bacon I'm done so now I'm done and all the while I was doing this by the way I was keeping track that M2 came from uh actor 3 and then Kevin Bacon came from actor 4 so that I will then be able to back up and create a list a path of those nodes so the idea is check everything nearest and add that to a queue and when you're done checking everything nearest just keep pulling from the queue to check what's nearest to that and keep going until you find Kevin Bacon okay so hopefully that helps you understand it a little bit and now we're gonna now okay so empty set s the way that this is described as Wikipedia on Wikipedia is to keep a separate list or set of things that have already been searched but I'm going to do this a little bit differently um in my node object I have a buan to keep track of whether it's been searched or not so I could just flag it when it's been searched I don't need a separate data structure for that but I KN do need a q now here's the thing I could actually like Implement a que and have like in a fancy way but it's this I'm in JavaScript it's late I'm tired I'm just going to use an array because an array is something I can add to and I can pull off from the beginning so what I'm going to do is I'm going to call it a q I'm going to say right down here VAR Q equals n array okay V Q equals an array and then what I'm going to do is let's just keep following this algorithm uh okay so the root we got to start with the root so the root is the start so um VAR start this is a little silly that this is kind of redundant but graph. get so I should have this return the value of r start VAR end so that way I can have a reference to it out here so I'm going to go to the graph and have it also return this. start so I can have the node return this. end and now what I'm going to do is let's now I've got the start let's look back at the algorithm the starts parent is already null add root to S so Roots now going to be searched start. searched equals true that's the first thing so I don't need to add it to the set I'm just going to flag it as searched oh then I need to add it to the que q. push the start so uh now I'm adding it to the Q okay what else do I need to do now I'm going to keep going as long as the Q has stuff to look at now it is possible that there is no connection so you saw that in my in the quick demonstration in the previous video there could be Infinity there's no connection but as long as Q is is not empty which I could say is while q. length is greater than zero sure there's a more elegant way to say that DQ which means get the first thing off the Q I think in JavaScript that is uh I'm let just call this current um equals a q. shift I think it's shift is that right hopefully that's right somebody correct me if that's wrong um okay now if current is the goal we're done okay if current equals end uh console console.log found uh and then I'm going to say current. value so just to make sure this works I'm going to set temporarily the start also to Kevin Bacon because now when I run it it should set it to search put it in the queue get the first thing off the queue and check to see if it's the end I don't know what this is here okay so let's run that found Kevin Bacon so things are working if the start and the end are equal we're good what's next I want to check uh if it's not I want check all of the edges so let's go through and say um and so I probably want to say break here too break is a way of getting out of the loop once you're done so I want to say uh VAR edges equals current. edges then I want to Loop through all of the edges right I want to check them all and I want to say first of all I need to check was edges so let's um let's call this like neighbor equals edges index I so if neighbor. searched already skip it skip so maybe I go to say if it's not been searched what does it say here if it's not in s means it's not searched now it's being searched so I'm going to say neighbor because I'm searching it now do searched equals true I'm checking it then I also want to set its parent like where did I just come from from neighbor. parent equals current so where did it just come from and then I want to add it to the Q on Q so what's that q. push push adds it to the end neighbor so we can see how this algorithm is working it's really very simple it seems so compx such a fancy name but we're just saying start with the beginning look at everything next to it did you find it nope look at everything next to that did you find it nope look at everything next to that did you find it nope and all the while make sure you don't double check anything you've already checked before that's really all that's going on here okay now let's see um what am I missing what else nothing H let's run this so let's let's run this uh here we go hey found Kevin Bacon now let's change the start to Mickey Rook now whenever I do these kind of things I often end up with an infinite Loop and the browser crashes let's see if I made a mistake somewhere uh and let's see nope found Kevin Bacon now is this really working let's look at um so let's every time we check a node let's console log it and let's say console log. value so we're check Mickey roor who's in diner and then we checked a bunch of actors oh and found Kevin Bacon and we're done great let's use a different actor that is kind of further down here these are actors that are in movies without Uh Kevin Bacon so let's pick uh Rachel McAdams uh wow I think we might be done uh I I'm gonna add some more stuff to this in a second but let's uh add uh set start Rachel McAdams we're not actually done because ah I copy pasted the wrong thing sorry Rachel McAdams sketch r ah why is this not working why can I not copy paste ah oh my goodness I copy pasted the file this is falling everything's falling apart help me Rachel McAdams and Mickey roor and LEF shriber okay Rachel M there we go okay let's do this again we can see what's going on Rachel M in Spotlight with all these actors oh my goodness which was eay love all these actors all these actors all found Kevin Bacon so I can't really follow this this is why I need to now go backwards through the parents so when I'm done so let's take this is not helping us follow this but when we're done here we should be able to say I'm going to create a variable called path which is an array and I want to put the full path in that array and I'm going to say um so uh path. push uh graph. end right uh or no end that's where we're starting end and then I want to say next equals end because I want to do a loop to just go from next equals end. parent and I want to say while while next does not equal to null I'll explain this again in a second while next does not equal to null path. push next and then next equals next. parent okay let's I think this is right right what I want to do is I want to start with the end and then go backwards go to the end's parent then that one's parent then that one's parent and that's one's parent to trace back to find that path that was found so that's what this particular algorithm is doing we start with the end then we get the parent of the end and as long as it exists put it in the path and then we get the parent of that and as long as it exists put in the path and keep doing till eventually something has no parent anymore because it's where we started so the start has no parent so now I should be able to say um and I'm going to actually uh create a Dom element I should be able to iterate over the path do I have to iterate the bath path backwards because what's yeah the last thing is the beginning so I'm going to say path. length I mean I could do this a number of different ways minus one I goes all the way down down to zero and I'm going to say uh node equals path index I then I'm going to say I'm going to say uh VAR uh text equals an empty string and I'm going to say uh text plus equals um n.v Value Plus uh like an arrow I should get the right arrow key and then I'm going to say create P text so what I want to do here is just the reason why I'm doing this instead of console loging create p is a P5 function that will create a paragraph element in the browser so I can see it written out there so let's see if this helps so we can see there we go Rachel McAdams was in Spotlight with Billy crudup who's an Eat Pray Love with Julia Roberts who is in flatliners with Kevin Bacon now I should also have something that I don't need that last Arrow um so if I is not equal to zero then also add the arrow did me just correct that uh and there we go now let's just quickly while we're here we're almost done H people are asking the chat wouldn't this be a good time to talk about Big O notation definitely I got to make a video about that sometime and it'll come before this one maybe you already watched it because you're in the future okay very quickly just to make this a little bit more interesting uh let me do something I'm going to use a P5 function oh this is going to make it harder though I should really just stop I'm going to do this anyway I'm going to say VAR dropdown equals create select um so uh what the create select function does is it makes a little drop down uh menu and uh there's some silly uh CSS styling here which um is causing it all to have no like margins which is unnecessary okay so it makes a little uh drop down uh but I need to put stuff in the drop down I want to have I want to be able to select any actor and see the results so now what I'm going to do is while I'm going through these actors this is where I get every actor name as long as it's a new actor I'm going to say dropd down. option actor watch this very simple in P5 create a Dom element and add some options to it number of other ways you could do this I'm adding this part kind of quickly now you can see I have little menu where I can pick other any actor now I need to be able to know when do I pick a new actor when I pick a new actor when I pick a new actor it's an event on this Dom element so uh the event this is a P5 function I'm going to call changed so anytime uh I'm going to say run I'm just going to say BFS so anytime the drop down change just run breath first search and I'm going going to now go down and take everything here that's the entire breath first search algorithm and put that in its own function function BFS there we go so now just to see if this works I'm going to um what we're going to do is we're going to run the page again I'm going to change the actor and it Rand breath first search but it ran it with Rachel McAdams so the point is what I want is to have it run with Paul Riser so where do I um so this dropdown needs to be a global variable and the drop down needs to be a global variable I've got a lot of messy code here but someday we'll clean that up a little bit and I'm going to change the start set start to drop down value so the actor's name for the start will actually come from there now let's do this again I'm going to pick Paul Riser again Paul Riser was the diner with Kevin Bacon now let's pick somebody else ah this not gonna work Paul Riser it didn't work so first of all that's why didn't it work well a couple things remember one it's weird that it's starting with Paul Riser again I don't know what the bug is specifically but there's a major problem see this node object remember I was setting parents and searched I got to start over all the searched has to be set to false and all the parents have to be set to null so I need a function in graph which essentially is like a reset function and what I'm going to do in this reset function I knew I needed that nodes array for some reason I'm just going to go through all the nodes their edges all stay the same and I'm going to say uh nodes indexi do searched equals false and nodes index i. search oh no no parent equal you still with me are you with me I'm barely with myself here but it's about to be the weekend for me okay no okay here we go Steve Gutenberg Mickey roor was in diner with Kevin Bacon uh Lin Marta was in sad trombone okay what did I miss uh okay what did I miss um path. Joo oh I could use join that's right uh what did I miss oh I didn't call reset I wrote the reset function but I didn't call it oh classic horrible error here graph. reset oh my God coding coding okay here we go Steve Gutenberg Oh Ellen barin oh nodes is not defined uh this dot this Dot this dot it's got to be that right the this Dot Song never forget the this Dot Song never forget the this Dot Song okay Ellen barin was in diner with Kevin Bacon and Lin Marta was in foot loose with Kevin Bacon and Mark Ruffalo was in Spotlight with Billy cotop who was in E pray love with Julia Roberts who is in flatliners with Kevin Bacon okay so this is breath first search in two videos if you watch this the whole way through that is amazing to me thank you very much # Six Degrees of Kevin Bacon breath first search algorithm whatever you know there's a lot of details about algorithms things I'm sure I've missed here you thinking about the interactivity you could visualize this so many wonderful possibilities um I am going to be done for today and um I will see you in a future video sometime uh as always the code for this particular challenge is in the description as well as links to other videos and things that I've referenced if anything's missing just let me know in the comments thanks for watching all right everybody oh my God unfortunately I don't think I can manage right now to do the um homework assignment video but the good news is any of you who are watching this live if you want the homework assignment to sort of think about it it's just on the um I mean one thing I should say is this um this website is for the actual NYU course but you're all welcome to read and and participate and make poll requests but this Wiki that has the homework assignment um with some ideas um um um here so let me um it's just for students here at NYU but you can share your stuff with me in the comments and that sort of thing so these are my um exercise ideas which is really just you know if you look through a bunch of the things that I've done already um um you can think about I have this animal guessing game which uses kind of like a binary tree like thing to to do a 20 questions like thing read use a bigger data set with this six Dees of Kevin Bacon um your own data set visualize it these are the kind of things I'm looking for people to try to do what's your own cre you make a piece of art with this um and then other examples that I have that I want to just quickly show you that are in the repository so there's the binary tree stuff which is uh which I have other videos about which don't have as nice of a visualization in them but you can see this one um this is uh the same exact um breath first search but using Force directed graph um I have a Dyas algorithm example that's just straight from the book but it just console logs the answer so I would love to make a video about that at some point um this I have a whole separate vid set of videos about which is depth first search to whoops to uh make a maze and then as you guys might have seen I have some videos on AAR to kind of like pathfind within that within and then I made this as I made an example of um I made an example of actually AAR with the maze generation so solving for the path so these are things you can play around with and I have other videos that connect to that and then oh I have uh the traveling um salesperson problem so this is just doing all possibilities with five nodes and I'll come back to that next time that I'm around okay um so that's my quick if people like work with this stuff and make stuff share it with me on Twitter share it in the comments um that sort of thing um Okay I uh phone is ringing which means it's time for me to go um I I it's six o'clock I'm a half an hour late which I said I need to leave by 530 so I'm looking to see if there's any am I ever going to code straight Java I do Java in processing and uh but and I will I do have on my list to do some uh Java in Eclipse uh videos that use processing libraries but I just haven't had the time to get to it yeah uh okay um thank you everybody for sticking around for this session I'm done I hope that I will be back next Friday like I said the next month um is going to be kind of rough and so I expect to miss a couple weeks here and there but I am determined you know I would say if I'm giving myself a personal deadline that I feel is realistic I'm quite determined by um you know by the sort of middle of the summer to have gotten through all this stuff uh and certainly I'm going to be preparing and working and researching all this stuff whether the videos happen we'll see for those of you who are supporting me on patreon I thank you if I miss weeks and you want to like turn off your patreon that's completely understandable um uh it's it's nice to have but I don't want anyone to ever feel obligated to it um and that sort of thing so okay um I will see you guys all later I'm going to turn off this live stream good night good weekend and keep in touch okay okay goodbye people are requesting the choo choo sound I'm going to read you since I didn't do any random numbers like Sesame Street this episode was brought to you by the letter or the number this coding Train episode was brought to you by the number 965877502 by