hello and welcome to another programming from a toz video tutorial in this video tutorial I want to talk about the JavaScript string object um so what is the JavaScript string object well if you've ever written code like this bars equals hello now I have a variable and it has a string of characters a sequence of characters in it h e l l o this is a string object so on the one hand I can use this string object to put text in a Dom element I can use it to paint text onto a canvas I can use it to print text to the console but what I'm going to be doing in future videos is manipulate string objects so if I load all the text from a file and I have this big string object with all paragraphs and paragraphs about rainbows and I want to like chop it up and mix it up or analyze it or make poetry out of it I need to learn how to manipulate string objects in JavaScript so this is what I want to look at the basics of and then next week or in the next videos that you might see in the future that might already be there I'm going to look at something called regular Expressions which is really going to uh just like explode the possible things you could do with um text and uh JavaScript but for right now we're going to live with just the string object itself and so if you want to learn about all the possible things you can do with string objects um one the place that you I I would say that you can go to is the um Milla document the Milla uh document JavaScript documentation look under reference global object string I'll include a link to this page in this video tutorial and you can see ah there's like a nice little tutorial here that kind of runs through a lot of stuff you can see all of these functions that you can call on strings like index of and normalize and repeat and slice and strike and blah blah blah so I'm not going to go over all of this with you I'm going to give you a little bit of a kind of like weade into the Waters of manipulating string objects you can also find my not on this on um this particular web page the a toz programming website which uh I'll also link to this page in this video tutorial so I made a list over here on the Whiteboard of things that I want to look at um in this video so I'm going to look at um uh really just three pieces of functionality that have to do with strings a long list of the Milla documentation there's a lot of other ones that I encourage you to investigate and play with but three that I find useful to some things that I might do one is index of another is substring uh the length property of strings is something that you need quite often and then I want to also look at splitting and joining which are operations that I'm going to be doing continuously throughout many uh tutorials and examples in this video series there's a little bit of funny business about this that I have to uh get to and talk about at some point but I'm not going to right now okay so this is my list let's start let's just start like let's go in reverse order or some sort of strange other order let's talk about length so I have a example set up already uh right here that you can see first of all I can just say s. length right here I should just be doing all this in the console really if I say s. length you can see I get a length of five because hello has five characters h e l l o let's just look at how we would do this in code right I have a simple sketch which all it does right now is it has a text input box when I hit submit I create a paragraph element with that text input box I can go to my code and one thing I can do is I can say I'm just going to say VAR s equals text field. value so this is pulling what's in that text field and placing it into a string object and now I'm going to say uh create ps. length so now when I run this code again you can see that text has 42 characters so if you want to build a check to see if your text can fit into a tweet application you can see how if it's greater than 140 characters you know spit out this is too long to tweet or whatever so you can see that's one property we can use now here's another property here's another function that's really useful index of so let's say I say VAR s equals hello whoops and I say s index of rainbow what am I going to get ne1 index of is a function that searches for some text like rainbow in some other text S I'm looking for Rainbow in the text hello well rainbow doesn't exist in the text hello so what do I get negative one negative one means I can't find that substring in that larger string so this can be quite useful to you if a user types in some text and you want to figure out did they type in this word or search for a word in that piece of text now what else how what does it work how does it work if that text is actually there so let's look at that so let's actually add this so I'm going to say um VAR index equals s. index of rainbow and then I'm going to say create P index so I'm going to run this again and now I'm going to hit submit and I got 33 why did I get 33 well I'm going to say rainbow rainbow rainbow rainbow rainbow rainbow rainbow rainbow rainbow rainbow rainbow rainbow rainbow rainbow okay and now I'm going to hit submit and you can see I got zero so what is it doing I'm going to say 0 0 1 2 3 4 rainbow I got five so what index of is doing is it's saying hey this is the index of the substring you're searching for 0 1 2 3 4 a rainbow starts at index number index five so this can be really this seems sort of like trivial and silly right now but you might load a massive amount of text in and you might want to find where something and this can be good for scraping and parsing ah I want to find stuff that's in between this so I have to find this and where's that and then I want to find something else and then I'm going to use another function I'm going to show you substring to plot something in between so you can see this is what index of does um so let's look at um actually that's fine right now I'm going to leave it at that oh one thing I should mention though is what about the case where I said rainbow rainbow boy do I love rainbows right in this case I always get zero how and but there's only one instance of it's always giving me the first rainbow but look what I can do what if here I say index of um and hold on um let's put this one thing I want to do is sorry I'm gonna put this as the default text in the text box and then here I'm in index of I'm going to do something weird where I'm just going to say comma 10 and I'm going to hit submit and look I got 30 why did I get 30 let me take out that comma 10 I got zero so here's here's something that the index of allows you to do it allows you to say search for the first instance of rainbow after a certain index so by default it'll start searching from zero but here I'm saying just start searching from the 10th character so here's a difficult programming exercise for you write an algorithm that searches using index of for every instance of rainbow so find the first one then search for the next one after the first one then search for the next one after that one and keep doing that until you get a negative one maybe I'll try to post a solution to that or make that as a coding challenge but that's something that you could try to do okay that's index up one more function that I want to show you in this particular video that I think would be useful to you is substring so what I'm going to do now is I'm going to say VAR new text equals s. substring uh 5 comma 7 and I'm going to run this it's submit o uh index is not defined uh create piece sorry new text run this again you can see I get o w why because 0 1 2 3 four five five is the O I want a substring starting at five and where do I want it to end six oops oh w67 oh it's ending on a space bad coincidence there so let me change this and change this to um actually I'll just change the text so I'm going to take out the spaces am I going to get o WR or am I going to get just o w think to yourself what's it going to be I still get o so this is a little goofy thing with substring but let's say I have the text h e l l o 0 1 2 3 4 if I say substring between one and four I'm including one but I'm excluding four so I'm guess getting L there so this is how substring works you might ask yourself well that's annoying that's weird why is it done that way there's actually a pretty good reason which is number one what's the length of this string three substring three what's four minus one three and often something you want to do is get a substring from some point of the text to the end of the text and in that case all I need to do is say give me a substring and here's something I could do I could say substring from s. length divided by two all the way until the end s. length so this is now my code right give me a subring between the middle of the string and the end of the string you can see do I love Rainbow do I love rainbows there is an answer to this question I don't have a sound effect or anything but the answer is I think it's you not it's yes okay so uh um do I love rainbows yes so you can see no matter what I this is the first half this is the second half and I hit submit and look at that that's amazing I got this somehow those worked out to be the exact number of characters I don't see how that's possible but it did uh this is the second half you can see how that works getting a substring of the second half so you can think of a lot of here's an exercise for you um what if you have something like this the temperature outside is 72 degrees fit write an algorithm that pulls out the number 72 without knowing that it's going to be the number of 72 so no matter what I type here every time I hit submit I get 72 21 50 how do you search for and and by the way also I could change this to a temperature or well the temperature outside is so it's not a fixed length how do you search for where is colon space is so that you know where the number starts and how do you search for where space degrees is so you know where the number ends and by the way it should still also work if I type in 101 so that's a programming exercise for you create a generic phrase of any length that and you need to pull out a subset of text of any of any length out out of that phrase um this is just one scenario this has to and by the way next week when I do a video tutorial about regular Expressions you're going to see a totally other magical powerful way of doing it okay so um this is the end of this uh video tutorial about strings there's all sorts of other things that I've missed this is just a small taste of it try some of those exercises try looking at the documentation page you know pick a random uh function like slice or search and see what a lot of these might require reg Expressions um and see what you get ah I forgot something on my list over here I want to briefly talk about briefly before I leave you in this video I want to talk about splitting and joining so let's just look at this this is an incredibly common operation that I need in so many videos and I could make another video about it but I'm going to leave it in this one so let's look at this because and and I'm going to get to more about this next week with regular Expressions so this is just a little bit of a so I'm going to use so I'm going to use right now there two functions that are part of the P I'm going to show you two functions that are three functions really that are part of the p5js library one is split one is split tokens and one is join now next week I'm going to show you how to use the native JavaScript split function to use regular expression so I'm going to kind of redo this but in this video I'm going to look at the p5js function split and we show you why this is so useful all almost all of the text analysis algorithms that I'm going to demonstrate later are based on word counting and one of the things you need to do with word counting is split a paragraph of text and a multiple paragraphs of text into sentence chunks into word chunks that sort of thing so um I'm going to do that right I'm going to show you how to do that with split and it's actually quite an easy operation so um basically I'm going uh and I'm just going to go to the uh sketch right here um whoops there's a a uh something whoops just missing here so I'm GNA leave this this this this gives you half the text but I'm just going to do something over here in the console which is vars equals uh text field. value so now I have in the variable s rainbow rainbow boy do I love rainbows and I'm going to say split s just see what I get so look at that I say split s on its own I don't really split it but I get an array and I get an array with the entire sentence in there the whole point of splitting text is to take one chunk of text and split it into an array so what if I say s and comma space in quotes you can see now look what I have I have an array with each word as a separate element so I'm going to do a few things here I'm actually going to do that right now in my code I'm going to say VAR words equals split s by space and then I can Loop through all of the words and do something with them individually I can say uh create P words index I so now you can see I get a different paragraph element for every word in there now let me add a comma in here and I'm going to hit uh I'm going to hit refresh and I'm going to add a comma in here notice how the first word has a comma H so what might I do in this case I might go to my code and I might say Okay split by space comma or comma space now look what happens I'm going to add the comma in there I'm going to hit submit now I just got two things rainbow and rainbow boy do I love rainbows because it's split by comma space and the only time a comma space appears is Rainbow comma space what I want to do is not say split by comma space split by comma or space and again a regular expression is going to be a nice solution to that but for right now without it there's a p5js function called split tokens and if instead of using split use split tokens it'll actually do that for you so I'm going to do this I'm going to put the comma in there I'm hit submit and you can see now it worked there's ways of retaining the delimiters not retaining the delimiters I'm going to show you more stuff about that uh in a future video but these are just the basic idea split and split tokens and join by the way does the absolute inverse so one thing I can do is I could say I could now say words. sort I think it'll sort it in Array I think it'll sort it by the default sorting and then I could say uh uh s equals um join words and I think I probably might make a new array so I need to say words equals words. Source sort and then I can say create PS and I'm going to comment this out so what I'm doing now is I'm taking this turning it into an array sorting it in alphabetical order putting it back together and then displaying it and you can see boy do I love rainbow rainbow rainbows and we can see this should be in alphabetical order alphabetical be in order should this so you can see here's a quick algorithm I've done something here to take a a sentence split it up sort it by alphabetical order and display it back to the user I'm sure you could think of something much more creative to do with this Paradigm of text input and text output and in the next video I'm going to show you uh do a coding challenge about how to implement Jackson mclo dastic uh which I'll explain in the next video as well um as text input text output okay uh thanks very much and yes I apologize for not using Celsius in this video okay thanks for watching and I'll see you soon in the next one