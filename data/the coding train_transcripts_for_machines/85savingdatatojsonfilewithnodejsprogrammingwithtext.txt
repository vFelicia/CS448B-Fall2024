welcome so this video continues the series about building your own API in node and in this video what I want to do is add a very important very key piece of functionality which is persistence so right now this particular API that I'm building in node if you recall in the code at the top of the code just has hardcoded essentially a database a database of words and their sentiment score rainbow 5 unicorn 3 Doom neg3 Gloom 2 so that there but there and and I can add um and I can add to it so I can I can go to a particular route and say add purple 4 and then if I go back to all I'll see that purple is there but as soon as I go to terminal quit and relaunch the server and go back purple is gone so I need some mechanism by which I can save the data forever whether or not I'm running the server quitting the server not just in memory and the way that this is done is typically with a database now a database is a big topic and I expect that in the uh what I imagine future amount of time that I have in my life to make videos I'll get into a lot of different facets of it so what do we have so far is we have just like uh data in memory that's what I have so far quit the program the data is lost one quick and dirty way to save data to have data persist over time is simply to save to a text file it's easy to forget that you could just have a text file as a database right I can have a text file that has a list of words in it word comma score word comma score and I could just save all the stuff and load that when I when I run the program a way to make this even easier is to actually save this to a Json file Json standing for JavaScript object notation so uh this data if you look at this this is this is Javascript object notation this syntax of having a variable full of key value pairs that's Json so I can actually nice option is just save the data to a Json file and then uh load that Json file every time the server starts so this is actually the way that I'm going to do it in this particular tutorial but this is very limiting first of all if I have a massive amount of data huge data set this isn't going to work for well I have to like load this like giant text file and like save this giant text file all the time that's not going to work very well you know if I if I care about security and I have like private data just having it all just sitting there in a big text file like text file full of everybody's like logins and passwords that's not going to work very well so there are a lot of reasons why this isn't a particular great solution but for a quick and dirty project for understanding how things work playing around in node I think this is going to be a great demonstration but I will be making videos in the future that look at other database systems namely one one called Firebase Firebase is something that's referred to it's a Google product database as service meaning fireb you don't have to have your own server you're just a program and you're like keeping track of stuff and you're like hey Firebase can you save this for me I'll ask for you later and then later you come back and say Firebase got I have that data so you get an account you sign up you send a data you ask for data and it has a lot of sophisticated um features so that's certainly one thing you can do and then of course you could use a quotequote a real database or some type of database system there are other database that service uh products by the way so you can find those but you could use something like uh couchdb or mongod DB uh or uh another uh database that I actually like which is very simple which is called nedb I think so these um are all database systems that you can use with node or other server side programming Frameworks so U at some point somebody remind me hey weren but I'm definitely I have a whole bunch of examples already for Firebase so I intend to do that but I'd love to uh look into this kind of stuff and make some examples with that as well but in this particular video let's look at even just what saving a Json file gets us okay so uh back over here I'm going to go back to the code and the first thing I want to do is let's just actually make that Json file ourself so right here I'm going to in my node project where my server code is I'm just going to create a new file and I'm going to call it a words. Json and in that file instead of um instead of having this in the code I'm just going to take this and I'm going to comment this out and I'm going to put this into words. Json so here is now a Json file uh with the initial data that I want for my program to start with so now what I want to do in the in in the program is instead of having VAR words equal the hardcoded data I want to just load from the file I want to do do something like you know if I were in like client side P5 land I would just say like loadjson words. Json right I want just to load whatever in that file and stick in words but this is not node code this is uh P5 code so I need a different set of Syntax for that so how do I do that in node well what I need to use is the fs uh module so FS node um uh node I'm just going to Google fs and node which and here I'm going to get the documentation for the file system API which is built part of node it's not an extra thing I have to install so this is the documation documentation for it there's a lot a lot of functions what I'm looking for is one called read file and right here so you can see first of all there's fs. readfile and Fs read file sync so why would I use one versus the other this is something I definitely want to talk about but let's just at first and actually I'm going to start with using read file sync so what I'm going to do is I'm going to say VAR FS equals require FS I think that's right this is like importing the file system package it's builtin part of node I don't have to install it but I do have to reference it in an import or require statement and then I want to say words equals FS read file sync words. Json and let's just see and then I'm going to say console.log wordss let's see what's happening here ah okay so it runs and look I read the file there's the file perfect there's my contents what is that so one thing you have to realize is the node file system package is just reading the raw data of files and writing the raw data out it doesn't know oh I want this to be like Json and all of that so if I have that raw data from the file but I actually want it to be JavaScript and JavaScript object I need to parse it and there's a quick and easy way of doing that so actually what I want to do is I'm going to say I'm just going to say VAR data equals that and then I'm going to say VAR words equals Json parse data so this is something you're going to see once I'm using a a local files when I want to read a file I need to interpret it as Json when I have a JavaScript I need to interpret it as a JavaScript object before I can use it when I have a JavaScript object and I want to save it to the file I need to convert it to just plain old text and then save it to the file so let's look how that works now and you can see there we go so now my server is reading that stuff so we've got step one in that everything should work as it did before all and I could add something but I'm still going to have the problem as soon as I quit the server and relaunch it anything that I've added will be gone so how do I now have persistence where in my code do I want to save data to the file itself well I want to do that anytime I add something new to this list and if I go back to the server program the only time I add something new to the list is right here under adword add word so this is where I want to save data now this brings me to another important point which I glossed over which I will come over here to discuss for a second sync versus no sync so there are both read file sync that's a function as part of the node file system package and there is also read file without the word sync there's also write file sync and just write file what's the difference the difference is this is synchronous or also known as like a blocking line of code meaning if I come back here if I'm using the sync function the next line of code will not execute until that action has been finished and in this case that's what I want when the server starts up I don't want to do anything actually until the data has been read so I want to use the synchronous version so I load the data and it makes I don't have to have a call back and it makes writing the code a little a little bit simpler however if I'm going to perform an action where I'm reading and writing to files while a user is making an API request I don't want to use the sync method because that'll actually lock up the server while it's waiting to do this operation I want to use the nonsync asynchronous version so a call back will happen and the server can still listen for other connections and that type of thing so this is now a moment where right here under um ADW I want to write the data to back to the file but not but asynchronously so let me show you how that works so first of all um this is a little air handling that we built in last time so I don't want to write the data if there a score wasn't given so I want to write the data right here so I can say now write file uh words oh let's let's look at the documentation uh let's look for for WR file WR file so it looks like write file I need to give it the file name and the data and there's some other options and that sort of thing so but I'm going to do it simply I need to say write to words. Json and now a call uh the data which is words and then a call back uh finished I'll call it and then I could say function finished you know maybe it gets an error or something I don't actually know I should look this up just going to say console log all set so let's look at this now and see what happens now now first of all I've made a a big I've made a big mistake already but let's just see what happens anyway even with my mistake probably going to get an error or something like that so the the server has restarted it's listening and waiting let's go to the add route and I'm going to say uh I want to add the word purple and the score three now right file is not defined okay oops silly me I actually just made a mistake in my code where I need to say FS I need to refer to that file system module that package fs. WR file but that's not the error I was expecting uh the server should restart okay it has hit refresh H thank you for your word but let's look at ah crashed unexpected token blah blah blah object object it couldn't figure out how to write that to a file right because once again just as if I'm reading data from a file I'm getting the Raw bytes and I need to parse it as a JavaScript object before I can use it now what I need to do is I need to turn it into text based Data before I write it to the file and the way to do that I can say just VAR data equals json. the opposite of parse or the inverse is stringify so I can say stringify words and then write that data to the file so now that I've done that now one thing I want to do actually is I want to stop using nodon because nodon restarts the server uh every time um oops uh I have oops what's going on here error uh undefined one unexpected token Json oh you know what I I messed up the file so this is what I wrote to the file because when I made my mistake so that's why it's not working um so the reason why I don't want to use nodemon right now is because every time I rewrite that file it thinks like oh something changed it's going to restart the server which will mess things up so right now I just want to manually stop and start the server myself to make sure things are good so okay so now the server starts it reads the data from the file then uh what I'm going to do here is I'm going to now go to this route again and I'm going to hit enter thank you for your word I'm going to go back and I'm gonna look and look it's there oh but I lost the formatting like my Json file is all just one long thing so one thing that that's I mean this is sort of like a a small point and sometimes it it could matter in various scenarios but since we're talking about it I might as well talk about it um this stringify function takes the JavaScript object and kind of makes it a string with as few characters as possible so no white space to make it kind of human readable but I can use some other arguments um and I can add like uh I forget why you put null there to look at the documentation for stringify but uh two meaning that I want to use two spaces for an indent um so if I if I do this and I restart the server and by the way purple is already there so purple's now there forever and I can go to uh Pink and add the number six thank you for your word and if I go back and I look at that we can see there we go so every time I go to that route it rewrites the entire file with the current list of words every time I quit the server and start the server back up it reads the list of words so this is the full round trip you know there's lots of inefficiency and issues again with scalability and privacy but this works for a simple project where you just want to save a high score list or a table of words in their sentiment score you can do something like this and I'm sure you can imagine some other scenarios where just this basic idea is plenty good enough let me say another few things about this though before I move to the end of this video one is that I've kind of made a little bit of a mistake here which is that even if something goes wrong here I still send the reply like thank you for your word so really probably I should wait to send a reply to the client who added this word until that file has finished being written so I would say it probably makes sense to um to put that in here and I'm going to send the reply actually and and because I had this error checking I have to send the reply up here I could think about if there's a better way but I'm going to have if there's no score I send back a message scores requ required and if it gets the data if it gets the word adds it writes the file and all that is successful then I'm going to say and you know what I think is useful in an API is for a word to actually um for an API to just send you back the data that you've sent it and then I could say something like status uh success so in other words sometimes when you're making an API request or you're adding something you're sending some data to an API and you're doing that like many many times as a client when you get a reply back you need to match it with which one you sent so if you get some information back that you can match that can often be helpful so even though this is redundant and I don't personally need this information I think it's useful to add so and I did sort of a very awkward thing where my variables all have the same name but this will this will actually should work so let's uh restart the server one time we can see I've I've got all the words that I added before and now if I go back and I say add um uh uh um flower uh seven and I hit enter success the word flower was added and if I go to all we can see flower is in there pink is in there purple is in there and I can even restart the server I restart the server and there it all is again so this is the full round trip of how to receive from a get request through a route data from a user save that data to a file and have the server always keep track of that data so um I'm still got more to do in in terms of building this API which is actually like get some text and produce a sentiment score I need to look at well how would I build like a client a front end that would actually like interface and interact with the API but this at least now we've seen a little bit about saving data thanks for watching