good morning there was a bit of a little technical hiccup there I don't know why but open broadcast studio likes to crash when I switch from that wallpaper to me on camera talking to you so I'm hoping that everything is working kind of keeping an eye on things here looking at the chat I am here out of the black hole which is me to simulate a Rubik's Cube in processing I have been thinking about this do you know about this these images of the black hole really astounding really amazing beautiful stuff I hope that maybe I could do some type of video or coding challenge or simulation about it I didn't get a chance to kind of watch the live stream although I hear it's kind of wrapping up just about right now so everybody welcome from just seeing the first images of a black hole to watching a completely inept awkward person on the internet try to program a Rubik's Cube inprocessing hi alright people are saying hello to me I see Simon is typing so I'm gonna assume that I am here talking to you live on the Internet this is the coding train my name is Daniel Schiffman thank you to the sponsor of the coding train livestreams brilliant org to go to brilliant org slash coding train you can sign up to find lots of courses and puzzles and practice problems around all sorts of topics from computer science and mathematics and various things I will come back and look at today's daily challenge from brilliant org a little later in the livestream and see if we can solve it live on air do a light ray simulation that's a good idea so if you have you know I guess I'm gonna be lagging behind if I were just if I could really just be in the moment I would just right here open up a code editor make some kind of black hole simulation but no I have to I have an obsession with this thing called a Rubik's Cube and I must get a little further than I did last week and that's what I'm gonna do today so I am going to do an take them all again make another attempt at programming this Rubik's Cube in processing with an eye towards maybe someday looking at how I might use a genetic algorithm to try to evolve a sequence of moves to solve the rubik's cube for a given configuration perhaps even use some type of reinforcement learning or maybe some type of algorithm with tensorflow j/s perhaps to see if I can get make a guess so which move might be the best towards a solution for any given state oh so many possibilities I'm sure none of that will work particularly well but somebody watching this channel will be inspired to take my ideas further and do something with them so good good news for you watching I came in today with my cube solved already I'm getting pretty good at it like the the parts that I know how to do I can do quite fast for me I mean you know we're not talking less than five minutes here or anything yet but I still need to I need more time in the day to practice my cubing cuz I am a u Qbert you already here first I have a u cuber I have water a little bit of coffee which people in the comments like to write to me I drink too much please less coffee you know I didn't actually drink coffee for years and most of my videos where I'm much too hyper I was not having coffee of course now I am having coffee because I had to get up at 600 a.m. this morning very early day and I was at a little league game last night quite late so 730 p.m. and it was raining and I was freezing it was very exciting was a tie game five to five go blue all right go o's shifting face others all right hi Mohammed from India where are you now asks dear bomb I am in New York City at New York University at Tisch School of the Arts in downtown Manhattan near Washington Square Park my fulltime day job which a lot of the stuff that I do on this channel relates to is teaching at a program called ITP which is twoyear master's program there was also a new as of this year undergraduate program called ima or interactive media arts you can apply if you're in high school and thinking about a place to go to learn this is probably one of the more practical useful things that I've done there's so much here in what I'm about to do to learn about computer graphics multidimensional arrays matrix transformations oh this is gonna exciting and also I really want to see if I could get the code somebody suggested putting the coding train logo on one of the cue bees did you know that these little things are called cubies one of my new favorite words okay now before I get started I wanted to highlight a community contribution that came in recently and this is unlike any community contribution I have seen before and so this is not one of my typical community contribution which you might find say if I go to Ruby's cube part one and scroll down here and see a couple other versions of the Rubik's Cube hey let's look at this p5.js one from xx Novak's let's see what happens here oh wow well toggle access stop whoa cube size four five look at this rotation access common I don't know what's going on but this is cool Wow all right great work xx knoppix that is really cool all right and then this one rubik's cube using processing 3 so this is i probably should look at this because i'm sure it's doing smarter things that I did in mine so thank you but that's not the community contribution I wanted to highlight by the way if you want to submit a version of any of my any of your own code version of any of the challenges that I've done you can add your own version and go to any challenge page there should be some links on how to do this and that's not the easiest thing in the world it's a little confusing and tricky if you get stuck I'm here to help members of the community here to help go to the github repository file an issue asking for help now this is what I want to talk about I think I need my ukulele for this Oh my invisible laptop is quite visible what what's like oh this is the water cup alrighty my ukulele this one requires the ukulele so I have this video series on git and github which I probably need to revisit and redo because I use the github website so much and so much has changed it's just a lot of its outofdate and people watching the tutorials will often file an issue or make a pull request to this Rainbow poem github repository as part of the lessons of how to work with git and github and I've been stopping myself from explaining more about that and recently came in a poem an entire poem by Kyle R Conway which summarizes the entire video series I'm pretty sure this moves along following the video series pretty precisely so I think this needs to be set to song unfortunately I am not prepared for this so I have not written a song I've read it I have not practiced this so probably what would be really someone from the community with musical talent perhaps could put this tune suggest some chords that are pretty easy to play on the ukulele I like see Jesus seven and a half but I can can do what like a c7 I can do like some I can do some other chords that's like a anyway whatever I can stretch her this and we can make this into a song like this I I need help I'm not gonna torture you anymore people are here for the Rubik's Cube last week was I think my most watched livestream ever even more watched than when smartereveryday came into the chat I'm speaking for a series and started trying to get everybody to come watch the Rubik's Cube on its own the popularity of youtubers I know that there were there were a lot of people watching last week and now I have lost all of those viewers thank you very much so let's let's work on this song we'll make a folksy music video about git and github but let's move on to the Rubik's Cube alright I think I want to try something a little bit weird which is that I think if I press button 3 here yes you see that a little behind the scenes were a little behind the scenes here on the coding train and what you're seeing now behind the scenes is me standing in front of the actual greenscreen you'll also see a very hightech captain disillusioned would be so proud of my very high deck please everybody screenshot this and send this to Captain disillusion I'm sorry I'm obsessed with cats of disillusion did you see the new series about framerate and aspect ratio they're so so so so good oh I wish I could be I wish I had that talent and ability but I get my own thing it's my own thing it's fine I do what I do everybody does what they do I I just have to be I am Who I am I'll be well be I've got a ukulele that I play very poorly anyway look hightech solution for invisible laptop it's not that I'm trying to hide the laptop from you it's just that it was like too much stuff so anyway so what I think that I'm gonna do is I'm gonna introduce this topic of the coding challenge today about the Rubik's Cube and let me come back to this here for a second so but but I'm gonna leave the green behind me because this is going to be used later in an edited version of the challenge in which case and and then I'll add like clips of some of my failed attempts in last week's livestream maybe behind me as I'm talking I won't add those machiya Blanchette who is the editor for the coding train will do so so that's my plan so if you will if you will humor me with this I would appreciate it I've actually been doing this quite a bit recently for patrons and YouTube members I've been doing some live streams of recording sessions with just green behind me because I'm making a new series about working with data and api's coming out in May or June whole bunch of videos that you have no idea I'm making because I'm not doing them in a live stream which is crazy but join patreon join YouTube membership if you want to get a peek into that okay but the videos will be out water okay here we go okay I think we got a relaxer the way I relax I need something more Zen like things would instruments and bells that shakey guided meditation can play I like to relax by reading seventy one thousand and four forty eight thousand nine hundred seventy three sixty two thousand and fifty four one one it's twelve thousand two hundred and twentytwo feel Zen feel relaxed I feel ready to tackle what has been incredibly difficult for me to make a Rubik's Cube simulation Japanese flute yes thank you I'll look for some new sound effects and stuff okay the whole pie is way too loud sorry about that everyone it was really loud right I don't know why the volume is so loud right now hello and welcome to part 2 of my Rubik's Cube challenge now if I'm being honest with you this is actually the second time I'm trying to make part 2 of the Rubik's Cube challenge I went down a very strange road road paved with all sorts of problems and bugs and strange ways of coding things with awkward switch statements and things and I did this over a three hour livestream and rather than try to actually release that as an edited version of the next step of the Rubik's Cube I'm just kind of showing you bits and pieces if it behind me sped through and you can go check me let me do this again let me do let's do this again hello and welcome to part 2 of the Rubik's Cube coding challenge in this version of the coding challenge I just want to take my existing rubik's cube simulations and be able to make some turns i want to shift the faces of one side of the cube e's like the yellow faces to turn maybe clockwise and be on the other side and everything follow suit so I'm gonna do that with matrix transformations here's the thing I have to be honest with you my second attempt at doing this I did a previous livestream where I went down a different road and I was keeping track of arrays and different arrays and trying to ship things and have like custom hardcoded things for every possible way the Rubik's Cube could turn and it was a total disaster actually got it to work you can see it spinning around and working here right now but I I had some excellent comments most notably bought from Michael Rafael Panna here I can actually this is this is what I'm looking for the comment I'm looking at but I'm gonna keep the green screen here I had some excellent comments most notably from Michael Rafael Panganiban Panganiban I had some really useful suggestions most notably from Michael Raphael Panganiban who suggested that I use matrix transformations and I'm gonna try this again I'm gonna try to really think about refactoring that gobbledygook code I wrote before and trying to set myself up for success in the future all right so I also want to highlight this website I am the cube wait hold on I also want to highlight this website I am the cube made by Stuart Smith and other collaborators from Google this was made for the Google Doodle about the Rubik's Cube a bunch of years ago and its really phenomenal the code is available I I really should just not bother doing what I'm doing and just play with this but I have a mission and my mission is to make this Rubik's Cube turn and move and so I'm gonna do that okay so by the way this is the this is the comment that I got ok so now let me open up processing and here is my Rubik's Cube from before all right please try to use enums I can't promise that I'm gonna use enums I appreciate everybody wanting me to use enums the things that I can't promise are be using enums or switch statements I am Who I am I'll be you I'll be Armour asks I wonder I'm just wondering does he read random numbers in his classes uh no I mean I would but no I mean maybe I should but I don't I have not done that yes I appreciate that people in the chat are telling me that the audio and video is not in sync this is an ongoing problem that I'm having that I have not been able to solve yet the only saving grace here is that when we put the videos together after the livestream we fix those issues so it's a little extra work for Mattia and someday I and you spend a day doing that how to use inos thank you yeah we'll think about it well think about it what am I looking for let me cycle the camera okay let me is this working yes I mean cameras in a little bit off let's see if I turn it like this that's better let me erase this we're going to start coding we are going to start coding all right so this is what I left off Whittle in the input this is what I left off with in part one and one of the things that I did part one was a little bit weird is I really was thinking in terms of cube notation and if you're a cube er you look at the cube in a certain direction you're thinking about what's up what's down what's left that's right what's clockwise what's counter clockwise and that really led me in some strange directions I think it's useful maybe to double back and add that in once I have the cube working but the Syst the thing that I'm actually working with here in this code is x axis y axis z axis I'm and the thing is well the thing that I'm working on with the code is x axis y axis z axis and it's gonna be much simpler for me I think enough to keep track of things and think in those terms and the rotation might not be clockwise or counterclockwise it might be in the positive direction or in the negative direction the first thing that I want to do to really figure this out and to have a more effective way is actually keep track of the cubes location not in a vector but in a matrix so I have done a lot of videos about matrices and matrix math and some of that's going to come up here most the ones that you might want to check out if that's the totally new concept to you is the video where I made my own 3d renderer using matrix transformations and I made a little like bunch of functions to do to store matrices and to multiply them I also used matrices in a bunch of videos I made about neural networks because matrices pop up there in the math of machine learning with neural networks but here what I want to do is I want to have a transformation matrix for each one of the cubies to keep track of where it is in the world and so the way that I'm going to do that is I'm gonna change the QB to have a to receive a matrix and for its position to be that matrix rather than a rather than a to be that matrix rather than a P vector luckily for me cubelets oh these are also called couplets apparently luckily for me processing already has built into it matrix classes so I don't have to write my own matrix 3d object I don't have to write a matrix to the object I've got one in processing so it's going to be AP metric P a P matrix 3d object and so when I create the cubies the other thing that I think I'm going to do here is I am going to keep all the cubes in a one dimensional array I think there's that there's this triple nested loop everywhere there might be some use to that in certain aspects but it's gonna be simpler I think in refactoring this to actually just say let me how many cubes do I need I need people in the chat are yeah so I got distracted for saying I'm too easily distracted by the chat I probably shouldn't look at it let me go back actually because I'm realizing also I'm thinking about this I am going to need to have these nested loops in order to initialize all of these different cue bees or cubelets as I just learned that they're called but I think it's gonna be easier if I actually just keep track of an index and put everything in a single a single one dimensional array so hold on a sense let me go back for a second because like I realize I'm I want to do this differently then I thought okay alright why am I doing this I'm refactoring this first so I can move the stuff the other thing that I want to do now this is head so this is how I made the cubes before I made each QB each QB with an x y&z but now I want to do this I want to make each QB with a matrix B matrix 3d and then what I want to do is translate that matrix so in other words each cube it's a way like each cube is going to keep track of its own 3d world and it has the full matrix of where what is the translation what is the rotation what is the scale and so if I translate that matrix to that's X Y Z location then I'm initializing the QB with that particular matrix I'm also gonna well let's leave this length I think there's some other things that I can refactor to simplify remember the whole goal of me doing this is to think about it in a different hopefully more succinct way that's going to be easier when I need to move those things around so I wasn't really thinking about moving the things around what I did the first version and I gave it made some tries I've thought about it got some suggestions and I think this is gonna be a good path for us some other things I think then while this nested loop is useful it's gonna be much simpler for me in the end I think if I actually keep all of the cubes in just a single array the multidimensional array is interesting but let me so let me change that too I'm just gonna make it no I'm not gonna make this I I'm gonna make this like index oh actually let me make this I'll make this index and I'm gonna say cube index equals new QB with the matrix index plus plus so that I'm counting and then this will now be a single array that has dimensions times dimensions time dimensions 3 times 3 times 3 or 27 of course there really isn't a QB in the center but you can't see it anyway so we can imagine it's there now the other thing that's really important here and I'm gonna change I think this will be helpful I'm gonna change this to X Y & Z X Y & Z and which whose this X Y & Z I'm not gonna worry about this figuring out the actual position of the cube with its length I just want its position in a threedimensional world and what are those positions so if I just think about one face of the cube for example maybe this is a face of the cube where Z equals 1 so there's if I get the cube right if we're looking at the cube with green facing us facing you this could be the z axis this is Z equals 1 so we've got the x axis along the horizontal and the y axis along the vertical so the what I could think about this is really the location X y 0 0 so it's 0 0 1 so all of these have a Z location of 1 but this one is negative 1 negative 1 sorry 0 negative 1 0 oh sorry 1 negative 1 right so Y is negative 1 the X is negative 1 0 1 so this is negative 1 0 and this is 1 0 this is negative 1 1 this is 0 1 and this is 1 1 so these all the locations and these can actually be the XYZ values that I apply to translate each individual QB QB to blitz matrix so if I come back to the code what I'm doing here is I'm saying have the X go from negative 1 all the way to 1 same thing for the Y same thing for Z create a matrix for each one create the QB I don't I'm not going to worry about this leg thing right now and then say index plus plus the QB then is just a thing with its matrix and this should say P matrix 3d I've got to specifically use I'm gonna be using a 2d matrix in a little bit you'll see is it's crazy but right I'm gonna use the 3 min alright so look how look how nice this is now look how much simpler this is why am I still having an error there oh I still have this length variable here okay the other thing I want to do is while it was really useful that I had this whole way of doing these quads and coloring them I'm gonna get rid of that right now because I think that what I want to do is think of each of these cube 2 B's as a box and then it's also going to have faces and I think I'll draw the faces as it has a separate object with a quad so right now to keep things very simple simple I'm gonna show you something kind of nuts I am going to take out all of this I'm gonna get rid of this translate I am actually going to call this function called apply matrix so what's going on here if you've learned or watched any of my videos about matrix transformations in processing or p5.js I'm almost just using translate rotate scale push translate scale rotate pop all of those transformations all the math of those transmissions happens in the matrix that the matrix that's keeping track of the world that sells the the processing 3d world but I could just apply all of those transformations to a matrix object and then apply the matrix to to apply that to the world that made no sense emails people I mean ups let me play try explaining that again slow mode is not on you slack chat let me know I Peter asks did you get a pyramix I did get a pyramix I got a skew I've got a peer mix duo I've got all I've got them all I've got them all if I need to do anything about slow mode in the chat or anything please let me know thank you to those of you who or have the patience and ability to moderate right now so in this case what I'm actually doing right so what am I doing here I'm taking the matrix and I probably shouldn't call it pause as in position let's actually call it matrix let's call it matrix HQ B has a matrix which really contains all the information about where its position and rotation in the world of the cube itself and this is actually the same as just calling translate at this point but because I'm story in a matrix instead of calling translate directly it's gonna give me some more possibilities later as I need to keep track of all of these cubes separately or in smaller groups and that kind of thing so if I do this and then if I just say box and I'm gonna say box one it's gonna be a small box pop matrix then and here the nice thing about this also is I can change this to cubed lengths and get rid of this nested loop I can say cube index I'd show and hope that we see the Rubik's Cube where is it oh look I think it's there I think that's the Rubik's Cube oh it's look I visualized the black hole of the day of this is the second image of a black hole now okay so the reason why it's so tiny is because scale so let me say scale a 100 and let's see what happens now where's that cube look so let's think about a stroke weight 8 now that's lunacy here so let's make the stroke zero let's make the stroke weight small because I'm scaling up and let's also make sure we say fill 255 I can that's there already oh that's a really big one but there it is so I don't want to scale that much let's scale it by 50 and let's just say stroke weight 0.1 and there we go so now I have exactly the same thing I have exactly what I had before but I just have a matrix for each one of the cubies now I need to figure out how am I going to debug this right now if I move them all around but I could move them around they're all white they're all going to appear in the same location so what I'm gonna do is I am going to make a ver I'll just call it highlight false and I'm gonna say if highlight Phil zero and then let me say let me say cube index zero highlight and oh no highlight equals true I didn't make it a function or anything okay so there we go we can see uh that one see look this one is now highlighted I can address any individual QB it's not really highlighted cuz it's black it sort of looks like it's removed you know I could make it maybe I should make it like red or something just so it's a bit more obvious because everything's everything right now is just white okay but let me actually highlight the one that's in the front cuz that'll be I mean I could always spin this around let's highlight the one that's in the front so that would be which one is that what am i doing I'm doing X first Y for the X then Z oh this is the worst it's a light gonna be like 24 no it's not 21 I think that's that one 21 first 2103 it's that's why they had that right okay I this is helping me 0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 I think is gonna be 15 I think I'm going in that direction X is wise nazies no I already tried 15 no I should just do them one at a time somebody chat will tell me Oh Nathan growl I'm happy to give you moderator privileges how do I do that are you will you post a chat message if you post a chat message I can do moderator privileges I guess I could do these one at a time let's find it in debt index let's actually cycle through all of them that'll be kind of fun to see so I'm gonna say int index equals zero and I'm going to say a cube index dot highlight equals true and then at the end I'm gonna say that and then I'm gonna show it then I'm gonna say it equals false and then I'm going to say index plus plus let's make the framerate one and print the index array out of bounds exception oh it's frame rate one how come it didn't go slow oh whoops stop turning 12 Oh 30 14 15 17 18 Wow it's a weird order that I didn't expect three it's it's number three why is it number three how come I didn't realize that all right it is oh I made the frame rate point five that's not what I meant to do cube index three highlight is true no what is going on no it's too oh it's too good this one before oh it's just it's going that way well I just lost like two minutes I'm getting very sweaty here huh some things I like can do really well and other things that's right Matthew they could edit all of that out I used to say that it wouldn't get it out not really well alright the answer by the way in case you were wondering was I'm counting with Z first so it's going hero one two so perfect boy that was a lot of time I spent trying to figure out that it was you're lucky you didn't have to watch that okay so now I can see that I'm highlighting a given QB wolves I forgot what I was doing this okay yes I'm just thinking about this for a second yeah okay okay sorry I'm thinking about this I'm thinking about this because I did this a week ago and I'm I'm not sure I love the way that I did it but I'm gonna keep it that way for right now so let me do let me rotate along the zaxis first because it's gonna make the most sense okay I'm gonna do that okay okay okay okay all right the next thing that I want to do is take one of these faces each one has its own 3d matrix with an XY and Z and rotate it I want to apply a 2d rotation to this particular face so any face whether it's the front the back the top the bottom if we look at it it ends up becoming twodimensional so I just want to rotate two of I just want to rotate along one particular axis and so a way that I could do that is actually take any given face of the cube can become a 2d matrix a 2d sorry any given face can become suddenly a 2d world that I want to do a rotation to so if I suddenly have this point here which is that negative one negative one and I want to rotate that relative to the center ninety degrees or half pi then it's going to end up where in one common negative one it's going to move and rotate there so how can I do that I can apply a 2d rotation so let's look at how I would do that if I come back to the code let's write a function called turn Z and I want to avoid using rotate Z because even though I'm doing a z axis rotation of rotate Z is a builtin function in processing so if I say turn Z first let me look at all of the cubes so I always need this particular array this particular loop I I'm starting to regret that I kept it because I could actually just do the loop along the z axis but whatever I'm gonna do it this way and what I'm gonna do is I'm gonna say oh oh I see I see what I'm doing here oh I see I just realized something I know I sort of regret I'm Kai I'm regretting taking out that nested loop because I just want all the faces that are in the zaxis and if I had that nested loop I would be able to keep it that way but actually I'm gonna do something slightly redundant which is that I am also going to keep track in a separate variable I am going to keep track of going back I'm gonna keep track of its XY and Z index values I'm gonna keep track of what those values are within what would be a threedimensional array and so let me actually add those as arguments here and I'm going to say x equals x y y equals Y Z equals Z and then when I create each cube I'm going to say X Y Z great so I have those extra variables because now I can say if cube Z equals 1 right I want only the only the cubes that are in the z axis 1 negative 1 0 1 those are the ones and this is cube index i z these are the ones that i want to rotate so now i need to make a 2d matrix this is what I was saying 2d matrix out of that face so the 2d matrix is just a new 2d matrix I want to do a 90 degree or 1/2 pi rotation of that matrix and then I want to translate out to the cubes X and let me actually let's use a variable I saw somebody on code pen who I'm sorry I saw some man sponge man I know people argue that I've got to going backwards and forwards sponge man on code pen who made a version of this I saw used actually a really cute variable name which I'm going to use right now Q be like the letters Q beef the Q B equals cube index I so I can actually just use Q B if Q B Z equals 1 translate by QB x and QB y essentially what I want to do here is I need to rotate before I translate I want to I have this thing here I make this matrix I rotate the matrix and then I translate out to here and I have my new location where x and y should be so what is going on here let me let's look at I think I'm gonna need to do some console logging here of this I think in order to I think I don't want to make this more clear I want to do a little bit of console logging because what would this matrix like what's actually in there so let me first make I'm gonna call this matrix 1 and I'm going to call this matrix 2 and this is just for debugging purposes and I'm gonna say matrix 1 dot translate qbx qby so I want to show you what does it look like when I just apply this translation to X&Y with out a rotation and what happens when I rotate and then apply that translation so to show you that I could do matrix 1 print and matrix to print processing has a nice print function associated with the nice print function associated with matrices and let me also just do print line something like this and let's also just so we can see do print line QB x QB y so we can see what those values are so let me run this oh I need to call this function I'm gonna call turn Z right here and setup and now we're gonna look at all these look at this when the XY location is negative one negative one you can see it as the third column in rows one and two of this matrix right this the this is the matrix that keeps track of translations and rotations for a 2d world in processing when I rotate it 90 degrees where does it end up one negative one negative one negative one ends up at one negative one when it's negative one zero it ends up at 0 negative 1 when it's at negative 1 0 rotating 90 degrees it ends up at where did it end up 0 negative 1 which is right here so you can see this rotates to here so actually in those matrices are the new index values of where it is in my sort of 3d array that I'm imagining so here we go so I and these values are all stored in properties of the matrix object which are indexed by its row and column so I can basically say right I don't actually need this matrix 1 I did that just for debugging so I'm gonna leave some of this debugging stuff in here I can basically now say hey QB you should you have a new location update your location to matrix 2 dot M I think it's it's row column so 0 to matrix this matrix 2 m 2 basically I'm getting and I could have just done the matrix math with like sine and cosine probably but I kind of like the idea that I'm using the built in matrix math of processing so you can see here that this these are these two values update by oh sorry m 1 2 and then qbg because I'm not affecting the Z so I there's no update function but this is really what I'm doing I'm take there's no update function yet that's a new thing I have to write but this is what I'm doing I'm taking the XY actually I want to get rid of the debugging stuff because this makes it so much simpler to look at now and I'm just gonna call this matrix I don't need matrix 1 and matrix 2 what I'm doing is I am taking I'm making a 2d matrix out of the XY then I am rotating it and then I am getting the new XY and replacing it in theory in my QB object and in my QB object then I need an update function which does something like first of all I'm just gonna there might be a more thoughtful way of doing this so I'm just going to reset the matrix and this needs an X a Y and Z and I am going to and somebody in the chat was telling me and I should probably get a habit of doing this if I if I have the same variable names of things I can make sure I'm referring to the object instance variables with this dot which is of course the thing I like to use on this channel let's be consistent and do it here so I can say matrix really I don't say reset matrix matrix reset matrix translate XYZ and then let me update again I've got like a serious bit of redundancy here but let me just update those XYZ values as well so now this should update why is update not working oh you know what these values in the matrix are floats and Kuby wants an int so I'm gonna I could just convert it to an int but I'm gonna use round because I want to make sure I ran into this in another project just in case like it's for some reason gives me like 0.9999 999 it would if I used converting it casting it to an integer or floor it would make it zero so this should work let's get rid of turn Z here and I'm gonna add a key pressed and I'm just gonna say if key equals just the key one turns E so now all right ready when I press the key one that cubies you're right now here's the interesting thing I should now be able to say give this turns Ian's index whoops int index which would be here so for example now if I were to say turn z 0 else if I know you want me to use a switch statement everybody turn z 1 right I should be able to rotate oh I'd the middle is technically I while I could program it with a rotation of the middle of the cube that's not really a thing so I'm actually just going to use 1 & 2 to rotate 0 & 2 let's highlight both cube 2 and cube 0 and let's see what happens so I should now be able to if I press 1 whoops but what happened here if key equals 1 is that actually happening hold on this is world sophisticated debugging going on here what did I do wrong wait a sec oh oh sorry everybody the indices are a negative 1 and 1 negative 1 0 & 1 of course all right let's try this again get rid of my print line hello all right here we go right oh is it going around look there it's going around look at that that one's going around it's going around look at that it's going around yeah yes okay now look at this now there's got to be some sort of way I could make this function into any I just like I'd like to keep this function generic and do any given axis but that's too hard for me I'm gonna though this will definitely right now I'm just going to copy paste and I'm going to say turn Y and so now if y equals index then what I want is X and z ah x and z cube cube ey I don't need to reckon that so this should be exactly the same for a y rotation right and then oh and I need I'm gonna add one more thing and then X I'm gonna just check the xaxis and this should be y and z then I need to keep qbx and adjust the y and z so I'm turning any face like this year with turn Y now it was it was kind of obvious to us that when I have the x axis that I turn this face into a 2d matrix but when I'm using the y axis just let's just take this face and turn it into a 2d matrix I need the Y values and the Z value I mean sorry the X values and the Z values that's what's changing Y is fixed at negative 1 0 1 so this should allow me to alright alright I'm gonna use a switch statement switch statement looking up the syntax for the switch statement up for here probably gonna have to come back to my if statement but let me I know it's just too painful I can't bear to deal with the comments switch key I'm looking at it over here on my invisible computers case 1 no no case 1 turn Z negative 1 break right and then I just keep doing this right case to turn Z 1 right and then all right now actually here's the thing let's see if I can get clock and counterclockwise there's how many moves right there's like I could rotate in this direction or the other direction so I'm going to consider that to be a direction in my rotate but well let me just get this to work first then I'll add direction it's too many things case one and two case three and four which is turn Y case whoops whoops case five and six which is turn X no yes is that a switch statement oh I know I know some of you like I just can't bear all right is that actually a switch statement what's the chance that that's actually a sort of switch statement that works okay so one is just turning the the back row that still works two is turning the front row oh my god three oh that's not right is that it look right hold on x4 we can't see that five all right something's wrong all right let's take a look what did I get wrong here so why this should be a wire rotation so I should see if I'm doing a wire rotation now this should end up here and this should end up there oh that is right that's correct I just didn't see it it's totally it's correct it just looks weird that's why thank you very much and X right yes that's right no that's that's Z now X is rotating around the alright X 4 4 does nothing I don't know act 5 oh that's right I should just met I need to make those different colors so let's do something a little different let's make give these a color and let's do the following let's set the color equal to red and the color equal to this just see the color equal to blue and then in the QB itself let's just fill it with its color that makes much more sense so now I think it'll look right to us now so if I go and do a Y rotation right that's correct now here's the thing I want to will this all keep working will this continue to work if I do multiple combinations so let's do my Z rotation we're now the that's there now I also let me also rotate that there but let me put it down here or let's you leave that there now let's do a Y rotation yes that still works let's do X all right yep that one's going around there and then the red one is going around the cubes move correctly now that I have all this working I just need to color well now now that I have all is working I need to actually color their faces correctly so if I put the actual colors of the cube on the faces then I can start to move those as well so in order to do that I have an idea what I would like to do is I would like to make a face class and what I'm going to do the face class oops why is those what's 1130 getting close wait come on sorry I think I have a loose cable here everybody sorry there we go just a loose cable the idea of how I'm going to keep track of a face so every single QB will have well in an actual rubik's cube there are you know center pieces which just have one face and they never move they spin but they they just stay permanent there are these corner pieces which have three faces and I don't know what these are called these little like middle pieces I'm sure there's a tech name for them that have two faces I'm gonna be simple about this for now and I'm just going to give every single QB six faces and I'm just getting there's gonna be a lot of redundancy like you will never see you'll never see the fact that this QB does not actually have a white face on the side but I'm gonna give it that and the way that I'm going to define each face each face is going to have a color like was its actual color and it is going to have a normal so its normal is a vector that points perpendicularly perpendicular from the face so if it's the frontfacing face its normal will be 0 0 1 it's pointing forward in the z axis if it's the backwards facing face zero zero negative one to the right one zero zero so on and so forth so here in the face class we're gonna have a we're gonna have a P vector called normal and then we're gonna have a color called C for color and when I make the face I will give it a normal and a color and I will say this dot normal equals normal and this dot C equals C then every single QB in addition to have them all this information will have an array of faces with six faces again a thing that I would want to do later and maybe you can do this in your version is to have a the correct number of faces for each QB but let's just do them all with six and then in that case I'm also just going to hardcode this so each face faces index zero would be left so I'm going to consider the z axis as green forward so the the back is blue the zero the negative one of is zero so that's going to be a new face with a new P vector that is zero zero negative one and the color is zero 0 255 so right so this is the blue face this is the green face this is wait let's up up would be zero one zero this would be white down yellow how do I do yellow it's a little red and little green like that no no red a lot of red and red a green green yeah but this is zero okay that's yellow or yellow so then left and right positive right is orange one zero zero is well I think that should be orangish somebody will get in the chat will give me some better colors and then the other side is red so this is now me making all of the faces great and then guess what I could do here in show after I apply that matrix I can draw the faces for face F in faces f dot show and now all I need is a function here that knows how to draw a rectangle pointed perpendicular to the normal with a particular color how do I do that 250 255 255 100 is yellow up is yeah all right how am I gonna draw each face I've lost the chat here oh yeah I also need to add the reverse rotation I will do that for each for the win how can you use tint on a box alright so the first thing that I know I need to do is fill the color then I need to draw a quad or a rectangle let's use sister's rectangle let's just try using I'm just drawing a 2d rectangle and I need to rotate it according to the normal let's just draw the rectangle rectangle at 0 0 1 comma 1 actually 2 square I can use processing square function I think it's size is just 1 so what if I do this oh okay first of all let me go back to my QB and let's just say no film well there's the red one it's in the wrong place oh they're all just on top of each other right of course oh I do need to translate out I do need to translate I can translate by the normal oh of course ok so I can translate by the normal X normal dot y normal Z and I'm gonna want to add push matrix and pop matrix and let's do no stroke here so now that should be there they are they're all the faces sort of are they in the right place they kind of are right white is back there yellows there then blue then red but they're all there all the problem is they're all not I need a rotation can I rotate like along the normal or something like can I do something like say rotate normal dot X normal dot y normal Z half pi is that like gonna work no hmm don't think about this oh is it oh maybe it's the other way maybe half PI goes first that's the angle and then this is the axis of rotation oh look at this something's right sort of furtive all their dare I should be translating by normal X 1/2 of that so let's multiply all these by 0.5 okay green and blue are those opposite sides yes white and yellow are in mmm the right orientation everything's in the right orientation but they're in the wrong place oh do I need to oh I should translate before I rotate okay closer ah ah 1801 that's a negative one right okay now I'm really close in the sense that orange no these all have the wrong the way I'm doing the rotation is not right you need the angle and AXA wrote for us it will become your normal vector yeah yeah don't copy paste kids yeah all right well let me I know there's a way I could do this I was trying to avoid this but just so I get it right look if I were to say if normal dot X if the absolute value of normal dot Z is greater than zero right if the normal is along the z axis I need to rotate I actually don't need to rotate at all the rectangle is drawn correctly so I could say like rotate just I could say rotate Z you know by half pi else if the absolute value of normal dot X is greater than zero then I could rotate I should I think it's by X else if absolute value of normal dot Y is greater than zero there's got to be a better way but this will work pretty sure then I can draw the face that's the same thing wait translate and then rotate right look at the chat dot product rotation should come first oh right what if I just do I don't I don't need so close I am I know another way to do this I think rotating is oh wow I want to translate out and then I want to rotate according to where I am and do I have this wrong Oh oops okay so of course of course if I'm if I'm along the xaxis I want to do a I'm drawing the quad like I'm always drawing the quad face forward huh so if this is my quad if I belong the its here and along the xaxis I need to actually do a Y rotation if I'm along the yes so of course so that's it so what I needed to change here was not not and and this doesn't this I don't since I'm drawing it forward I can just basically skip the whole Z thing so I only need to do a rotation if I'm on the x axis of a Y if I'm on if the normal is along the y axis rotate by X and then here we go now we have the Rubik's Cube and guess what I can turn it wait huh so now I'm turning it and nothing's happening guess what now that I have these faces what happens when I actually turn a rubik's cube the faces also rotate the normals need to rotate this is the last piece i need to i want to animate it turning but this is the last piece to at least have it so that i could do all the moves Oh actually I need to add directions and maybe make the keyboard controls make a little bit more sense but so now what I need is I need inside the face I need a turn X I need a turn Y and I need a turn z so I need to be able to rotate any given face they saw the shot just went a little crazy yeah so once again I can just use I can just use matrix transformations so once again I can use matrix transformations only this time and I have done this before I did this in my video about doing 3d rendering without the 3d render with our own matrix math and so what I need to do here let me get to pull up the Wikipedia page no I want 3d rotation where is that here this is basically what I want to do don't that where was I looking for that where it has all three rotation matrix so I'm looking for ah there we go this is what I'm looking for yeah here we go these so here they are these are the three rotation matrices for doing an X rotation or Y rotation and a Z rotation and all I need to do is apply those rotations to the normal vector so I can use P matrix for this but for whatever reason I think I might have an easier time just writing this out because ultimately what I'm saying is let me make a new P vector I'll just call this v2 and then v2 dot x equals the normal dot X times sine so I need an angle here sorry a normal on except scope it will equals normal times X times cosine of the angle plus or minus four minutes are here somewhere what is it where's that formula minus minus will be one Y times sine and then it's sine plus cosine a normal times X time normal dot x times cosine an angle minus normal dot y times sine of the angle and then v2 dot y equals normal dot X times sine of the angle plus normal dot y x times cosine of the angle and then v2 dot Z equals Z and now I should have and then I could say normal equals v2 so I have just rotated the normal according to the xaxis o equals actually this should be normal sorry this should be normal dot Z now here's the thing I'm a little worried we're gonna run into some rounding weirdness so what I probably should do is say hmm let's just put round around all of these I think that will kind of do the trick I just don't want to be stuck in a situation I really just care about zero one one becomes zero one zero that kind of thing so this should be turning the face and if you add this math I sort of did by looking at the formula a little bit by memory but I go through this particular formula in detail in that other matrix transformation video so now and somebody in the chat will point out if I'm a wrong so now I should be able to take exactly this same thing and put it in turn Y and the difference is with turn why I am changing X and Z so this is x times cosine and this should have also a float angle this would be X and this will be Z this will be sorry this is Z this is X and this is Z and this is y right so that's just the matrix take in apply to X and Z because Y if I'm turning along the y axis Y stays the same oh wait this was Z by the way I don't know I've got got them in place this was Z because Z is fixed this is y because Y is fixed and now let me copy this into here and this will be X so X is fixed this is y y + Z this is Z y and z so I think I've got this right yikes I think this should turn all the normals and if it's turning the normals they'll display correctly so what's a rotation that I'm doing so how do I have this working when I say turn Z for example I say Q be update so I should also say here probably QB turn faces Z let's just do that this is yeah I mean this is awkward naming but I need to oh and I yeah I need to turn the faces well I'll do that afterwards it doesn't really matter which and so then I would add a function here turn faces Z and I would say for every face F faces in faces f dot turn Z half pi what's the chance this works very little oh wait a sec wait a sec that's that's right orange goes to there goes to there goes to there goes to there yes oh that one's working too right one two one two one two one two so close all right so I need turn faces why and again I think I there's probably a way to refactor this so that these functions turn faces X okay let's do Y which was oh no that was X wait oh wait wait wait wait I need to call those turn faces Z turn faces Y turn faces X and I forget what my key commands are by the way guess what we can get rid of this thing all this nonsense that I had before I'm not using this anymore my code is so much nicer okay so now where's my key commands let's just put this in its own tab I'll just call this controls and there's clearly going to be a better way to do these controls but this will help me remember so right now if I do why that should be this should be the top four oh that's the bottom but that's fine five is X 3 is the top three and then can I start combining these yeah I'm shuffling the cube I think this is good I I got to do something like real testing of this to make sure this is really working but let's be let's the one thing I need to do is I need to add direction so I need to be able to add a direction for turning it so in these turn functions I should also have a direction so each one should get a direction then the direction is half pi Direction times half pi and turn faces Z with that direction so rotate according to the direction and then rotate according to the direction so now in turn phases these should also have a direction so I should be able to go either direction okay and then now alright so let's think about this so Z is forward so let's use F hmm what's a good set of key commands for all the moves what's a good set of key commands for all the moves oh I don't want to use WASD because that's gonna confuse me I mean it so I have forward back left right up down but then I have clockwise counter I guess I could use shift I'll just use lowercase and capitalized okay I'll use lower kids kept low all right all right so all the moves that I have are forward back up down right left so I'll use those keys and a lowercase will mean what a positive direction uppercase will mean negative direction so the case F is turns e11 the case capital F is turns e negative 1 negative 1 that's forward then case B would be also turns E but 1 1 and B would be 1 negative 1 all right I'm gonna do this silently and this could get fast forwarded if it needed to then so that's front front back back and then so let's do let's do up up down one negative one all right that's oh and these should be Y up up oh my god what's going on forward forward backward backward up up down down left left right right so let's see turns F F BB it's all turn Z negative 1 negative 1 1 1 1 negative 1 1 negative 1 I'm gonna be consistent about this up up up down down 1 one up is 1 1 so this should be just to be consistent and down is bottom 1 negative 1y left because I should do whatever that's fine left is negative 1 1 negative 1 right is 1 1 there should be 1 negative 1 let me make this comments are your friend I mean front is really the positive number up is positive right as positive all right I have now put in every possible move front is turn Z with a Z of one either direction back is a Z of negative one either direction then Y then X those are then up then down is y then left and right is turn X you know it does occur to me that I could just have a generic turn function and I give it the the the normal vector of the axis or there's the vector of the axis itself but anyway this I believe should work let's see so if I want to do a front I should just see that front face which is the green face turn which I am seeing back should be the back face up o up I got the is the is down so up is down whatever cuz I the Y points in the other direction down is the top ah you know spin it around up is the top consistent down goes this way right okay now this is right and left now are my clockwise and counterclockwise things working so front which was the green face goes this way and capital F should go the other way yep so now let's see if I turn front and then now let me do the left oh that which is there that's the right yeah it doesn't matter as long as it's one side that's working I think this is good here's a way that I could test this what I'm going to do now to finish off this video is run a set of moves shuffling it and then run those moves backwards and it should unshut alit if that works then I think I've done it correctly and then I'll be ready to animate this so to do that let me get let me make a car array all moves is a just F front back up down left right and I could deal with the capitals you know I should make these individual strings because then I can use the to uppercase function so what I'm going to do and then I'm going to I'm going to make a string called sequence and what I'm gonna do is in setup I'm gonna say four into I equals 0 I is less then let's just do ten moves sequence index I equals int so let me get an index which is a random number between all the that's an index into the all moves array sequence plus equals oh I'm already using index so let me just say our sequence plus equals all moves are so if I do that all movies all moves this would be you can see there should be a sequence here you can't really see that this is my sequence up forward right right right left up right down back and just for plausible deniability here let's just say if random I'm gonna give random is less than 0.5 we'll do this otherwise we'll do that too to upper case so now I should have my sequence and there you go there's my sequence down up right up down forward up back left left okay so now what I want to do is I want to run through that sequence so whatever I put this in index that was for something else right don't need that anymore do I so I'm gonna use I'm actually gonna use that int I must use counter equals zero and I'm going to say in draw a car move equals sequence car at counter counter plus plus and I'm just gonna do this if counter is less than sequence dot length okay if counters lesson sequence not linked I'm gonna get the move and then I'm gonna do apply move move and now in controls this should really be apply move car move and then switch move so I could if I want to control it by key pressed I could still say key apply move key but I don't want to control it by key pressed I want to control it by day's move so let's run this it did it really fast because it see the problem is the rendering engine takes a minute to to spin up so I'm gonna do this I'm gonna say boolean started equals false and then I'm gonna you know what let's just change the frame rate no no no because I want to be able to turn it around boolean started equals false and I'm gonna say in key pressed if if key equals the space then started equals true so if I press the spacebar start things going and then I'm gonna say here in draw if started so it won't do the shuffling now it won't do the shuffling right now until I press the spacebar because he shuffled it but don't slow that down just so we can see it if frame count modulus you know 20 equals zero that's going to only do that every 20 frames so I hit the spacebar and you can see it should be I mean it should be doing this sequence right now right it should be doing the head secrets so when it gets to the end of the sequence I should go backwards through the sequence so if sequence is less than so what actually here's what I'm gonna do after I make this sequence now I'm gonna say for int I equals 0 I is less than sequence length I plus plus now what I want to do is say seek so but now I need to say that move but the other direction so car move or actually so string next move equals sequence car at i/o but I want to go backwards so I want to go from sequence length minus 1 all the way down to 0 I and then I want to get each one of those characters what's wrong with car at I it's not a string it's uh so I'll just convert it into a string whoo that's I can't can I do this oh wait oh how do I flip the case how do I flip the case because I can't just do two lower case or two upper case hmmm how do I flip the case six bit of the string XOR with 32 subtract some value but I have to add or subtract based on what it is X or 0 X 32 I don't think you could do X or in oh yeah that like that I like that I like that alright so if somebody just gave a suggestion who was that I get I like Mike this crazy way of doing it mixing Nick seen in this shop thank you to MC seen in the chat who just gave me a really nice suggestion I'm gonna say flip case sequence car at so I'm gonna write my own flip case function it's going to be kind of ridiculous flip case of car any given character C and what I'm gonna do is if so first I need to give make it a string sure I could just do that if está lo I know it's lower case if it equals itself right if the lowercase version of the string is the same as the string and I think I want to say it this way if s equals s this is just a little clearer if s equals s to lower case then return s to upper case otherwise return s to lower case and people were giving good suggestions about using X or flipping bits or adding the ASCII values that would be a nice way of doing it apparently that's not a way you can make a string I'll just do this think that works that's one way to make a string okay plus equals flip case oh no just next move up so oh no next move yes next move equals flip the case and then sequence plus equals next move alright let's have it shuffle pretty fast like every five frames and let's see what happens I got an error of lexical oh I have hit the spacebar to started shuffle shuffle shuffle shuffle shuffle let's do let's finish this off with just doing like 200 moves let's forget about slowing it down and let's just enjoy this beauty let's make it fullscreen and thank you for watching part 2 oh I have to space Bihar thank you for watching part 2 of my Rubik's Cube coding challenge where I am now shuffling the cube moving all the pieces around then unshunned it backwards to make it appear as if it's solving of course it's not actually solving itself it's just doing a sequence and then turning it back and there we go so the next step that I need to do is I need to be up I want to see it animate I think would be much more interesting to actually watch the faces themselves turn that's just a little animation thing that'll come in part three once I have that then I can start to think about are there different techniques that I can try to apply to have the cube solve itself automatically thanks for watching this very long part 2 if you make your own version of this if you figured out clever ways to refactor my code to visualize it in interesting different ways to make it more generic with different scales you maybe can make one of those pyramid it's not a cube those Rubik's pyramids oh that would be great and I'll see you in a future video good bye yeah okay alright so I'm gonna take a break in a minute and I'm gonna I'm gonna do the animation part today it's 1215 I've got a little more time in me today and I'm gonna do my sponsor segment now and then take a short break and then come back and do the animation and yes genetic algorithm is the first thing I'm going to start to do I'm recording this to disk I've got green on the stream I've got my Rubik's cube here I hope there's not a mistake in here there easily could be a mistake I have really looked at this super closely but they're lovey but the code is much it's problems but this is this is better this is like there's more to work with here alright so I'm going to tell you about brilliant brilliant is the sponsor of brilliant work is the sponsor of the coding training live streams for the last several live streams have been really enjoying this collaboration and really thankful for this opportunity to have the sponsor brilliant our work is a website that has a lot of daily problems in math science computer science lots of interactive courses algebra quantum computing I'm sure there's gonna be some stuff about black holes on brilliant sometime soon I wouldn't be surprised and what I like about brilliant is it's a chance a one I use it for now looking through it and getting ideas or things to do it's coding challenges but it's really a way for me to practice to learn through practicing and I've really especially also been enjoying the discussions that I find about people solution to problems so last time a couple weeks ago I looked at brilliant and it looked at what was the thing that I saw oh right it was a problem a set theory problem set which looked at the intersection between multiple sets and I made a p5 jazz sketch that visualized it and pretty really there's a lot of computer science courses now let me go to the website and you know this is probably the stuff that would be the most relevant to what the kind of things that I'm doing on this channel computer science algorithms computer science fundamentals and what I want to highlight let's what I like to do now during the sponsor segment is to pick one of these challenges and try to solve so the one that I I'm not gonna I think what I'm gonna do is I'm so this is the challenge from today it's about decision trees how long is this journey through the trees we'll come up with an answer in the next five minutes or so but I'm gonna actually step back for a second so this is a little trio of challenges started on Monday with computer classifiers cataloging ceaselessly so if I go to this one and this is looking at a decision tree so let's let I don't want to like talk about decision trees and the a challenge that I have that's the most similar to this is probably the binary tree challenge and I should probably do a video on making a decision tree so let me let me get the whiteboard going again and find my marker so I'm gonna go through Monday's challenge and Tuesday's challenge and then I'm gonna talk to you about today's challenge and then I'm gonna take a break and if you're interested you can sign up for brilliant and put your answer in there so here's the thing I have a coding challenge all about binary search trees a binary search tree is a data structure for storing info I'm not in the right hello I have a coding challenge about binary search trees so a binary search tree is a data structure for storing information in a in a binary tree and if the information I'm storing for example is numbers I might put numbers that are bigger on the left side and smaller on the right side or vice versa texts I could do it by alphabetical order and so visualizing a binary tree might look something like this and the information is going to be in sorted order and make it easier to search through it find things you go check out I think it's a coding challenge I don't know what the number is where I do a binary search tree a decision tree has this same exact structure and it's really good think of it like a flow chart you've seen these where you're answering yes or no questions so I might say something like you know if you if I were trying to classify animals or fruits these are the guy you can use it for a classification or actually a regression problem definitely do videos on this so a decision tree for example if I was trying to classify animals the first question might be I actually this is exactly this is what the example on brilliant is oh no they're using bigger than a breadbox literally a breadbox that's there that's much funnier and more clever than me let me come up with some animals so I might say do I have fur so if I say yes I would go in this direction the question here is fur question mark if I would say no I would go here then I could either arrive at the answer or another question so fur I might say now do I walk on I don't know Am I am i bigger than a breadbox right breadbox and if I were to say yes then maybe I am a what's an animal bigger than a breadbox with fur a large up dog papi I really been I'm so bad at coming up with these examples on the fly she's done fruit I'm really much more familiar with fruit so let's say let's say I say no then maybe I'll say Mouse you know nice that fur right so this would actually be known as a leaf it's no longer a question it's actually an answer you've arrived at a leaf and these are nodes so the decision tree you can either have nodes and leaves and this these can be quite complex so let's look at this first challenge so if a decision tree I've actually already answered this 100 good I've already answered this one and of this camera went off so I won't reveal I won't scroll down too far to reveal the answer but decision tree has 15 nodes how many leaf leaves couldn't have so we could diagram this all right if there's 15 there's actually a relationship between the number of nodes and the number of leaves the binary tree can can kind of have any number of things but in but so so if they're like let's let's oh I'm not at the whiteboard again so dirt with the decision tree let so there's what was the question 15 nodes so we know there are 15 nodes so if there are 15 nodes how many leaves are there I'm looking at yeah no it's good I guess the question that I'm asking now is oh but okay so actually in this case we're talking about total nodes so all of these are nodes so I'm actually describing it a little bit differently all of these are nodes but three of them are leaves so you can see there's five nodes but leaf nodes are the ones that no children so in this case if there are 15 nodes total and we're gonna this is going to reveal what is the relationship between nodes and leaves so there are kind of two extreme cases we could look at it at a diagram of decision tree and this is has to do with like how trees are balanced balancing trees trees perfectly let's make a perfectly balanced tree with 15 nodes what I mean by that is 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 oh how nicely that works out excuse my poor drawing here but you can see there are 15 nodes how many leaves are there all of the leaves are all this bonding this by the way is root is a term that's known as depth so the depth of this or this orientation of the decision tree is this depth one is this one I don't know whether I should count from 1 or 0 but let's say we count from 0 0 1 2 3 4 so it's either 4 or 5 depending on how it's technically referred to and I'm probably on early a tourist Wikipedia page we could find that out precisely but this how far is the depth and we can see that there are 1 2 3 4 5 6 7 8 8 leaves so but what if I do the tree in a different orientation let's take the most extreme unbalanced version like what if this is the root if I answer yes I'm going here if I answered no I've already got a leaf so this is the least so then here if I answer yes here no yes no yes so this is like this the depth is as this is as deep as it's going to get so let's see 1 2 3 4 5 6 7 8 9 10 11 12 13 oh I'm gonna run out of space 14 I will just go higher oh but that's I messed that up all right there's one well can you see this here oh it's perfect I have just the right amount of space 15 right so look at this these are all the questions yes always leads me to another question right this is question question question question question question question and these are the leaves 1 2 3 4 5 6 7 8 once again there are 8 but the depth is one to try 1 2 3 4 5 6 7 8 so the depth here is 8 the depth here is 1 2 3 4 4 so you can see how no matter how the tree is organized we still have 8 leaves 15 nodes total 7 question nodes 8 leaves so if we come back here we can see oh look I got it right so that bit so now we can move on let's move so that that's I would love to program this and we could visualize it that's the thing that I would look you should tackle and try I like to program little JavaScript versions and then take a screenshot and put it in the answers you can see here ok so this is a nice by the way answer that's like going through the same exact thing with some formulas applied let's go to Tuesday's what questions lie deep in the trees so I'm gonna stop here I'm not gonna scroll down wait oh no oh sorry I I can't reveal the options without showing you the answers but it's fine because I already look at this but that's ok you have a decision tree with 2,000 leaves that allows you to distinguish 2,000 different animals which of the following could be the depth of the deepest leaf in the tree select all that apply oh and look at this nice helpful guide so we should be able to have a way of figuring this out right if there were eight leaves this would be the minimum depth if there were eight leaves this this would be the minimum depth this would be the maximum depth eight so one thing we can know is the maximum depth if there are what did what did we say there were two thousand leaves the maximum death would depth sorry impacts of of death the maximum death kids ahead the maximum depth depth such a hard word to say especially if you've been talking for two hours straight would be two thousand because we're gonna the first the first the first answer would be at depth equals one then two then three the fourth and five and six and seven it's actually one less I guess it would be 1999 if this is counted as one I really should I maybe somebody in the chat is telling me the answer of this already nobody in the chat has told me whether I should be counting from zero or not when actually considering the depth but so I might have it off by one error but I'm pretty close it's gonna let us answer the right now what's the minimum depth well if there are two thousand leaves we can think about it how many if they're eight eight divided by 2 is 4 divided by 2 is 2 divided by 2 is 1 how many minimum steps do we have to get to the answer well 2,000 divided by 2 is 1500 250 125 etc etc you know so I could do keep doing this and count it but there's another way to do this log base 2 of 2000 that should give us the minimum depth so we know that the tree could be organized anywhere between this minimum depth and this maximum depth and so if we look at the answers oh well let's look at what log log base 2 of 2000 is doesn't Google won't just tell me that log base 2 of 2000 is 11 basically so it should be anywhere between 11 and to 1990 not 2000 and you can see this is the correct answer it can't be 10 it's got to be at least 11 but it could be 15 150 or 1500 let's see if I did that right yes so it has to be greater than 11 and the number of leaves 1 1999 so that's the way to consider the depth anywhere between 11 1999 thank you Gordon Chan who has answered this and there's a nice discussion of that here all right so now today's challenge which this is from yesterday I'm gonna go back is how long is the journey I have an answered answer this one on purpose so now let's look at this you have and I'm gonna let you think about this while I take a break and get some water and you know do some other things you have two decision trees little tree has 41 nodes 20 question nodes and 21 leaves 21 leaves that's hand of the key number for you there big tree is 2001 nodes a thousand one leaves you don't know anything about how either tree is organized right it could be a perfectly balanced decision tree or it could be a sort of like the worst case scenario where there's you know a depth row essentially of that tree for every single question so you know so you're gonna ask each tree a question and you don't know it could it in the case by the way of this tree it could take just you could get lucky and you get the answer after just like one question so but you have you know you could also get unlucky in this case and a half to go dick you know 2,000 asked like 1999 questions if it were balanced you would know that you always have to ask 11 questions but that's so the so the minimum would actually be one the maximum will be 1999 for if it's unbalanced if it's balanced it would be 11 so in this case with these two trees what what which of the following statements are true would little tree always be faster than big tree think about that easy if you don't know how they work isn't there a way that you could organize big tree and organize little tree so that big tree was actually sometimes faster not always but sometimes faster I don't know think about that for some tree shapes using little tree is sometimes slower and sometimes faster and then for some tree shapes using little tree is always slower so this is so I you know I think a way to think about this question is just to think about those two extreme cases what if both trees are perfectly balanced what if those both trees are perfectly unbalanced what would the answer for all three of these questions be so think about that we'll I'll come back in about five minutes and do the answer write your response there you can sign up for free at brilliant org slash coding training please go to that URL lets you know that lets them know that you found brilliant from the coding train and that that helps me out if you're if you feel so inclined and also if you're interested in a premium subscription to get access to all of their courses and all their materials the first 200 subscribers to sign up from that link will get 20% off okay so I'm gonna just I'm gonna mute my microphone let me make sure this is oriented so you can see it I'm gonna mute my microphone and then we will come back and discuss the answer I'll be back actually I'm just going I'm gonna take away my image and place the music oh if I'll do that correctly this time as always I always forget this stop this stop this stop this done and then this stop this stop this stock this stock is fun never forget this stuff I'm gonna do this this dot this dot this dot this dot song never forget the Vista but somebody composed that song for me I'm gonna say once again coordinates it's our new coordinates and autotune and the internet will fix that for me coordinates it's the Cartesian coordinates and it's not for do Cartesian coordinates its Cartesian coordinates setting my mic back on boom I am now visible so let's talk about this problem all right hopefully you've thought about this maybe you have an answer maybe you already submitted an answer on brilliant if you did I hope you signed up through brilliant org slash Cody crane but let's talk about the answer to this problem right now you have two decision trees little tree has 41 nodes so 21 leaves big trees 2001 nodes so a thousand and one leaves we don't know anything about how either tree is organized so if answering any single nodes question takes the same amount of time so it's like you don't have to think about the questions for a longer period of time wherever you are on that tree which of the following statements are true for some tree shapes using little tree is always faster than using big tree let's think about that so remember I talked about previously in the case of a balanced tree a perfectly balanced tree it takes log base 2 of the number of leaves then a log base 2 of the number of leaves so if we're thinking about log base 2 of how many leaves were there again 21 and a thousand and one log base two of 21 is always gonna be always going to be less than log base two of thousands this is true I would say all right now the third question I mean the second question for some tree shapes using little tree is sometimes slower and sometimes faster than using big tree so let's think about that this is relevant to the case of the the worst case scenario where every single level of the tree results in leave so it's possible that sometimes you're just gonna get even in the tree with a depth of 2,000 that you're gonna get to the answer off the first question whereas in a tree with the depth of 20 you're gonna you could take 15 questions so while on average you would get to the answer more often faster than I would be an interesting probability to compute and we can run some simulations we could code with this that it is possible that sometimes little tree will be faster so that is correct for some tree shapes using little tree is always slower than using big tree could that be true I'm trying sir I'm just checking the chat to make sure no what's telling me okay could that be true could little could you could we come up with a shape where little tree is always faster no I don't think so I don't think so how could we prove that they get about this how could we prove that we're little tree lowing we could come up with a shape where little tree is always faster is there a shape where little tree is always slower no because no matter what the shape no matter what shape we pick it's always going to have a big tree is always gonna have a maximum depth greater than the maximum depth of little tree right they could have a minimum each have a minimum depth of one or they could have different minimum depths so that you that that the that you could possibly sometimes it little tree could be slower than then big tree but the maximum depth of big tree is always no matter what the shape is always going to be greater than the maximum depth of little tree I think that's right so I think this is false pretty sure I've gotten this right okay hit submit correct you I'm not getting fired from my sponsorship job here uhhuh you know but getting it wrong is actually the point learning is trying to think this stuff getting it wrong and let's look at the explanations so we can look at the explanation ah here we go this looks like a nice one so what looks like what happens is you can like sort of react to the explanations and some of them bubble up to the top and I've been seeing yo ah Pedro Alfonso quite a bit bubble up at the top here so if we look at the minimum depth and the maximum depth with a balance trees we have four and five and nine and ten wit and we have 120 and one in 1,000 so for some tree shapes so starting with a bounce little tree at depths of 4/5 we can only increase depth of one or more leaves if we decrease the depth of the other leaves if some increase to more than four or five others must decrease the less than that so it is not possible to put everyone with a depth greater than the depth of the best big tree the balance victory so this it's really unlocking this is really about looking at the minimal minimum depth and possible maximum depth let's see if some other explanations so uh I would love to see anybody watching if you're if you're so inclined to add your explanation there I'm going to check this later let's make you know if you make a p5 sort of sketch that animates this or explains this please share that with me all right thank you again for this brilliance please if you're interested in more about brilliant go to brilliant org slash coding trained to sign up and let them know that you found brilliant from the coding train and the first 200 subscribers do if you're interested in the premium service will get 20% off all right so I think before I go it's almost 1 o'clock and I always say I've only got a live stream for two hours I seem to make it to 3 I think I would like to take this Rubik's Cube simulation that I just previously did and actually on animate it I'm feeling a little it's a little warm in here I'm gonna move my microphone to the shirt I don't think I'm gonna wear this sweatshirt anymore this wrote animation requires so let me move the code back to so a couple things I want to do is let me do save as this is gonna be part 3 and then let me what do I want to do safe either save data sparked 3 oh and I don't want to fullscreen let's just go back to let's just go back to here and you let me do something I think it'll be a little nicer if I just like add those rotations so let me just actually do some things turns there's so much code here let me take these three functions and put them on a separate tab and what I let me try like rotate X by like point two and rotate Y five point three and maybe like rotate Z I like negative I just want it to start actually so let me rotate Y down so I can see it at the top well that didn't work Oh cuz I'm we do that first oh no that's rotate X that I want to do down look let me do that a little bit more I'll just do these arbitrary I'm just trying to put it in some kind of let me rotate Y a bit more also that's pretty good do a little more Thanks there we go I just want it to I wanted to start in a slightly rotated position so that when I do this I can watch it go okay so oh by the way I shuffled my cube so maybe I'll work on solving it maybe I'll work on solving it before I go do I still have my overhead camera oops yes but I'm not gonna do that right now although this would be good for me too I should have I should be using this when I want to like talk about the cube because if I look at it over here it's a it's not close up and whatever okay all right oh wait a second are the sides wrong yellow red so I'm looking at it yellow red green oops ah yellow red green orange white no no they're they're in the right orientation I might have updown leftright messed up but you know whatever it does all the parts okay I want to do the animation alright so actually let me erase my decision tree stuff in case I need to use the whiteboard I'm gonna be really glad when this Rubik's Cube project is over there's all this other stuff I wanted I was like intending to do this month but I'm like totally obsessed welcome to part three of my Rubik's Cube coding challenge what I have currently is a Rubik's Cube simulation where I can do all the moves updown leftright clockwise counterclockwise all that stuff and I can make a random sequence of moves then I can play out those moves do them in Reverse and I can see the result of that the Rubik's Cube is shuffling and unruffled however I guess I have to it won't do it again unless I how come I won't hold on I want to make it I want to be able to hit the spacebar and have it do it again so if I do the spacebar key pressed controls what did we call it counter equals zero yeah alright ok welcome to part 3 of my Rubik's Cube coding challenge but what I have so far oh wait wait wait I want this to be here I'm really gonna I'm gonna get it don't have to blow my nose hello and welcome to part 3 of my Rubik's Cube coding challenge so I've done two parts already if you watch those I'm very thankful to you and but I'm gonna do something really important in this and it's really not about the Rubik's Cube at all it's really about animation and I want to be able to just do something to make it a little more visually pleasing to watch it do stuff so what it does right now is if I hit the spacebar it's gonna shuffle a whole bunch of moves all the possible moves up down left right clockwise counterclockwise it could do any move along any axis it's also then going to whatever it's doing a random sequence of 100 moves and then it's gonna do those in Reverse and you can see it looks kind of like it's solving it of course it's not just doing a random sequence and then applying it in Reverse it's the spacebar again it's gonna go again it's actually doing the same sequence again so this would be I think more what a I would be a little more confident that it's working correctly if I could actually watch the the cube the cube ease rotate themselves to actually turn so in order to do that I need to add an anime I need to add animation you actually use the rotate function to do that so I have to figure out how to do that add double turns yeah that would make sense okay all right I think good I think a way that's going to make sense to do this is to create a class called move and each move is what it's a given axis like what's the axis that's moving what's the direction it's moving and then if I'm going to do an animation I need to animate an angle from 0 to 90 degrees so I need an angle which will start a zero I need to have an axis and maybe what I'll do is just do x y and z mmhmm so I know what axis it is is that what I want to do yeah yeah angle axis and axis yeah an angle an axis and I'll have that access just stored in variables XY and Z so so the X will be one or negative one if it's right or left the Y will be one or negative one it's up or down the Z will be one or negative one if it's front or back so that's kind of I think how I'll deal with this right now so when I make a move I have to give it an x y&z and that's all I have to give it oh in a direction so I need to know whether I'm rotating well then I'm rotating clockwise or counter clockwise or the angle is going up or the angle is going down so this dot x equals x this dot y equals y this dud C equals Z the stock Direction equals direction and this so ultimately I've kind of done this already in the sense that I have these functions called turn Z turn Y turn X and those actually move the cubes around and rotate their faces but they do it instantaneously so what I think I want to do is create an animation that happens then I finish that animation then I quickly move everything around and it will look as if it's happening seamlessly so let's just say for the sake of argument I'm gonna have one move move em I'll call it move and move em and forget about this so I'll leave the sequence thing in here second move is a new move which is going to rotate the z axis the front face so that is 0 0 1 in a clockwise direction that's a move then I want to say move dot start I think I'll have a function called start and what does that do it sets a variable I'll have a variable called animating and it sets animating equal to true I don't know that I'm gonna need this but I feel like I might need a flag to know when I've started or stopped so then I need an update function and what update will do is I could use lurk for it to like interpolate from zero to ninety degrees or I could just increase the angle so let's just increase the angle right now I'm gonna say angle plus equals direction times you know some amount like point one so I'm going to increment the angle by 0.1 and if angle is greater than half pi then angle should go back to being zero actually and then I'm gonna say animating equals false so let's just see if I can get this to happen so basically if I have a move and then I say move dot start then in draw I just want to say move to update and if I run this so the data of the move is happening that that angle is changing but I need to actually rotate these so the way that I could do that is right here when I'm showing the cube I could check and say if cube well right here just a if cubed Z equals move Z let's just do that right if cube dot C equals move Z then I want to rotate Z by move dongle and I'm gonna want to have a push and a pop here alright that should then move Z cannot be resolved or is not a field move has a Z Oh cube index i if cube index i right if cube index i dot c we go look at it it's turning kind of doing something what's it doing why does it keep going so a update should only update the angle if it's animating so once it reading and it stops animating so now we should see it turn oh you know what I think I'm having this weird issue with processing which is that it takes a little while for processing to start so what I'm actually gonna do is I'm going to have move dot start go into when I when I press the spacebar just so I can be sure it hasn't started yet so I'm gonna run this sketch I'm gonna hit the spacebar there we go look at that it moves but look at this it moves but the red stuff doesn't stay there because all I'm doing is creating the animation of the movie I'm not actually updating the data but I need to update the data so I can do all the future moves but I think there's an easy thing I can do here which is I can say move dot update if move dot finished then what do I want to do turn Z move dot direction turn Z isn't that a function Oh turn Z move Z moved out direction so I think there's got to be a way I can encapsulate this into one function there's no finished so I probably just used the animating boolean right mmm that's another one finished is false finished is true and then boolean finished returned finished so now what should happen is it should animate oh that's weird why is it going back and forth so move updates if move is for oh because it's doing this over and over again so ultimately I want them when the move is finished I want to turn it once and then be done so really what I should do is put this z Intendant move yes so actually I don't know if I need that boolean variable at all what I want is when it's done I won't actually just say turn Z move according to this Z and this direction right and then I don't need this finish stuff I'm gonna keep that in there just in case I need it so now it's your turn there we go look at this oh so now I'm turning it so this is the idea this is the logic I just want to hit the spacebar it's doing every single move now the question is now that I've got this working how can I make every move work in the same way so there's some things that are kind of hard coded in here for example this shouldn't always be turn Z right this should sometimes be turn X or turn Y our turn Z we want to deal with this so before I do that though let me just make sure it works in other directions so for example if I were to say a negative one that should be the back of the cube okay so that's working and if I were to say one negative one that should be the front of the cube but going now in counterclockwise direction okay ah so that doesn't work so why doesn't that work because if I'm going in counterclockwise direction I'm going all the way to negative half pi so that's something I need to fix so here if angle so I could say if absolute value of the angle is greater than half pi so if I'm going in the negative direction I need to check negative half pi that should fix that great so now I can go in either direction only in the z axis so what if I make a move that is now the xaxis oh so if I say 1 0 0 1 this should be right I think I have things flipped so it might end up being the left and the way that we're looking at it but if I want to rotate along the x axis so if I do that now it's confused it's doing something totally nonsensical that's not the correct rotation so the issue here is that if cube Z equals move Z right cuz so here what I really want to say if absolute value of cube index i z is greater than 0 so i probably should have a variable that's keeping track of the actual index but really what i want to just say is is cubes if is it the z axis then do this so now nothing should happen if something did happen oh because whoa oh it's still doing this but that we shouldn't see that animation ok so let's try to get the x axis else if the absolute value of cube X and cube x equals move X then I should say rotate X moved on angle all right so this now would do the xaxis and this should be an elseif because I'm never gonna do two at the same time so this should be rotating the xaxis the issue is now and move update when I get to this part I don't want to do turn Z I want to do turn X hmm so that I could do the same thing I guess if a by callback functions or something would in JavaScript would really help me here it's probably way to do that in Java but I'll just do the same thing if absolute value of Z is greater than zero turn Z otherwise if absolute value of x is greater than zero turn X X direction so let's oh this should be X so I'm I'm kind of getting lucky here because there's only three possible axes but it definitely would be useful for me to use like and a new a new robo if I get indexed to the axis but let's just see if this works so now this should be the x axis awesome so that works I've got the x axis so now I should be able to do the y axis turn the y axis axis axis all right now I should be able do the y axis turn the y axis let's just check a y move let's make them move 0 1 0 oh it's not animating why is it not animating so what did I do wrong oh I didn't I didn't do that here I need to add the y so now this should do the yaxis oh no something's wrong Oh I'm going the wrong direction so I think this should be negative angle cuz that my yaxis is flipped yeah there we go you know I I might have whatever it works there might be something that I'm actually done wrong here but I I want the data is moving correctly I just need to make sure the animation matches that so now instead of having this all moves be just these letters now all moves is an array of move objects move new move array with new move so up is 0 1 0 in the One Direction you know what let's just do I might as well just do them all I mean I can always invert them but let's do it let's just actually do them all so this is this is up in both directions this is OK hold on I'm gonna I'm gonna speed through this so you don't have to watch all this up in both directions down in both directions right oh shoot Oh right and left and then I need I did up down right left front back that's what I need now so front front back so now all right I put in all the moves up down left right front back clockwise counterclockwise this should be everything it should be 12 in there 1 2 3 4 5 6 7 8 and I tell him 12 that's all the moves so I should be able to now pick any give and move and all moves and animate that one and just sort of see oh wow this sequence this sequence stuff has to change so the sequence stuff I'm going to do in a second but I was using strings before that won't work we take this out so any given move I should be able to do so this is move 3 index 3 0 1 2 3 so that should be the bottom oh I've already spun it that should be the bottom in a certain direction whatever great so hopefully that's the right one that matches up now the sequence is let's make it an ArrayList an ArrayList of move objects this will be the sequence and I know if you're a cue bird there's actually like a back to which is right ologist consider that back in the same direction twice for now so we can consider this to be an ArrayList of moves and when I'm making that sequence if I'm going to make let's just do 10 I'm gonna pick the size and I'm gonna say pick an index then I'm gonna have move and equals all moves get that index this has an extra weight inte R and Amol moves sighs isn't that what what's wrong with that errors oh oh all moves is all moves sorry all moves is sorry all moves is an array moves is an ArrayList so that's index all moves index R that stays the same and then I'm going to say sequence dot add so this is me putting in ten moves in a sequence so let's not worry about inverting the sequence let's not flip case I think is no longer a thing anymore and then I need a current indexes current move which is counter so I also need this to be let's call this current move so there's a current move and current move starts at current moves equals sequence get counter so it gets the first one then I'm going to say current move update guess what this finished thing is going to come in handy perfect if current move is finished then index load echo counter plus plus and current move equals sequence get counter and I definitely need to make sure that I only do this if counter is less than sequence length so I'll put this if statement in here I don't think and I'm gonna do this whoops put this sequence in there and then I'm gonna say if started around here so this is how sequence dot size not length so this is the same exact algorithm but instead of the move being indicated by a single character it's now this object so I'm updating that move when it's done as long as I'm not the end of the sequence go to the next one and get and then get the next one and then this current move is what determines the rotation and so I called it just move before but let's call it current move and I think this should work now but moved out to start okay I'm not gonna worry oh this should be just started equals true so now it's just a believe I'm not starting to like oh oh oh this could be current move start this actually could be current moves start so because this this can actually current move update could happen if it's not animating so yes so I just want to start painting the spacebar starts the first move which does all of these and then each one because I have this start function needs to actually explicitly call start okay this I think should work so if I press the spacebar you can see the move happening oh why if counter is less than oh it's got to be less than size minus one because this is where I increment so I'm going to the next one the last one is size minus one so that's good so let's give it 50 random moves and let's get it started so now it's playing 50 random moves it's a little silly that sometimes the moves are inverted so now I should be able to add that sequence well what just happened there what just happened oh I'm not making a copy of the move so a move is like animated and finished and then it went to gets it again if it does that move again it's not like a copy of the move so this should actually be ha when I make that sequence oh yes this should be like all moves clone or this is a way to clone objects but I'm just gonna write my own copy function so all moves index are copy or when I call start I could set I think it's actually as simple as just setting you know what I might be able to just not do a copy but set the angle back to zero couldn't I do that animating equals true finished equals false like that might actually work so I could have made a copy of the move but I think just in start since I have to do that with everything that might fix it let's see let's see if that fixes it munch moves its gonna do the same move again just to by the laws of probability I think this is working dare I say and I can still spin around it I mean it doesn't look like it's making any mistakes alright so I want to make an animation speed now I want to make an animation speed oh and I should fix this faces thing because you're seeing though there's like extra faces I should you gotta make the cubes at the beginning only include the actual faces that are on there that's the thing that you can fix when you make your version of it so now let's make a speed let's just make that a global variable and right now it's 0.1 so let's make it like 0.5 to make it kind of faster and then in move this I mean I suppose that could be a property of the move itself but let's just see it do it faster cuz that's more fun to watch it do it faster so let's see if now if I add the moves in Reverse when it's done it should be solved and it should be solved oh and yes this is a good idea Fabian is suggesting use a move ID so I could just use that index instead of a move object there's so many different ways to do this I'm excited to see what people how people refactor this and make it more interesting or better or different in all sorts of ways okay now that I have all the moves now I need to do is go through the sequence backwards right start with the last element of the sequence go down to zero oh this is where I kind of want to I do need to make a copy because I need to make it a completely different move in the opposite direction so I do want to say move next move equals sequence get I and I really actually need a copy here so we'll see this both ways because then I want to say like next move dot reverse so in the move object or though I could just point to the other move but I'm gonna do it this way I'm just figuring on this I've been fun figuring this out I'm gonna make a function called copy which returns a new move with what XYZ and give direction and then I'm gonna make a function called reverse which just says Direction x equals negative 1 so this if I make those two functions as I'm going through the sequence I'm copying all of them but reversing them and now I have it should be twice as long so let's just do this with just like five moves just to see if it works wait oh wait where did I do that oh I've got to add them no wonder I've got to add those moves want walk okay let's go here we go so it should do those moves in Reverse and boom there's the Rubik's Cube back in its original state now here we go let's make a full screen and enjoy this make it a little bit faster enjoy this rubik's cube doing 500 moves then in Reverse this is gonna take a long time let's not do 500 let's just do 100 and you will get the feeling of the cube solving itself you know I really should do something where if I pick a certain move I'm not allowed to pick the reverse of that move next cuz that's gonna make it look really weird like why is it doing that but that's neither here nor there here we go thanks for watching this coding challenge enjoy the end of this video when I come back if I do a part for which I intend to do I'm gonna try to work on some algorithms to actually solve the cube so I should I should put a counter so I know what moving camera went off let's do this again all right hold on well everybody let that let me actually add something that I can see the text of the of where I am I think I'll just console.log it so let's just do just so I can see it let's just do print line counter so I have a sense and then I am going to print line counter oh no but if I do it fullscreen can I hold on let me take a break for a second here can I actually draw text if I say fill before I do any of this if I say fill 255 text hello oh that's fun that's actually kind of fun all right that's fine we'll just leave it like that let me actually draw the counter so I can see what move are on because that'll be somewhat useful so I'm gonna say fill 255 text counter I don't know it's just gonna end up being in 3d space in some weird location let's just say 100 counter 100 100 well the scale is gonna be weird let's just try that text size 32 and let's there it is okay look look it spins with it so now we should see it's going through the moves so when it gets to 100 it'll start doing the thing in Reverse all right so I hope you enjoyed this coding challenge I hope you make your own version of this when I come back to do a part for if I ever come back to do a part for which I do hope that I will there we go oh look cube solved um I will try but won't do it again hold on I had to reset the counter back to zero for it to do it again alright let me put this let's have some fun with this let me put this on speed of 1.5 let me make it do a thousand moves and here we go and thank you for watching this coding challenge oh it's hot you're not really seeing the rotation it's just like shaking okay that's too fast let's try a speed just of like 1.0 alright thanks for watching this coding challenge where I am shuffling the Rubik's Cube with random moves then playing those moves back in Reverse it's gonna when it gets to 2,000 moves it will actually look be back in its original orientation I hope that works I hope you make your own version of this if I come back and make a part for which I intend to do I'm gonna see if I can use a genetic algorithm to take any shuffled state and evolve a solution within maybe a certain number of moves I suppose 20 might be the number of the pick to pick in terms of the genetic information which will be a sequence of moves this should be similar to what I did with searching for the phrase to be or not to be in the space of all possible random phrases we'll see if that works I've no idea if that will work but I'm gonna come back and do more with this in part 4 in a future coding challenge and please share with me go to the coding train com look at the link in this video's description to if you make a version of this whether it's in JavaScript or processing or some other programming language or environment you can submit a link to your version so that I can see it and the rest to communicate as well alright thanks very much goodbye alright I might as well let this finish whoa I like how the counter is just spinning around its eye there's probably way for me to do this within turn off peezy cam but it works alright I'm I'm good for today it's 130 we made a Rubik's Cube oh I got to solve my cube there's one algorithm that I don't really have memorized that I might have to look up I'll put it on my hidden computer where am I let's see oh I have an idea we're gonna make this like I'm racing the cube this is gonna be fun uh all right let's get rid of the counter and oh no I think I want the counter there so what how long how long was that oh I bet I need more time I'm gonna race the cube first let me just make let me just show you that this is shuffled right so this this is shuffled I don't know what sequences then I'm not keeping track of this in my head you know me I can't possibly do that first of all it's embarrassing you've allowed to all do two cubers out there who really know how to do this my my ability to do this is quite embarrassing okay so now what am i doing what do we think what's the overunder on me being able to solve it in ten whatever that takes into ten thousand let's actually leave it at a thousand let's do it slower let's leave it at a hundred but make this sequence much like let's leave it at 100 but do it at what was it a 1.0 at like 5% of that okay ready wait no I need to put it back to not fullscreen I guess this is gonna be fun I'll play some music okay ready well I should have it do the first part to shuffle it so what I really should do is just apply all the moves should start it shuffled I'm too lazy I'm too lazy I'm just gonna do it this way okay ready here we go are you the other side YMS up the yellow side again where are you right there you are oh that's not ready wait just set myself up for success way where No oh that would be much more exciting if I wait I already messed it up again I have I just given myself a little bit more time I would have gotten it so that was wait guys how long was that total cuz that's song under five minutes but I was looking up there were two there's just two algorithms that I was looking up that I don't have memorize for this way of doing it all right so I'm gonna go I'm gonna check the chat here Oh a lot of people are pushing for the inside faces to be black the computer cheated this was these are comments from a little while ago that I missed all right thank you everybody what method did I use I don't know I used some method of a combination of a bunch of different videos that I watched I can turn off my overhead camera no that's here I'm gonna so this code will be online very shortly if you want to use it for anything and yeah so I let me I can take a couple questions before I go it's 135 it's been a three hour livestream I feel accomplished apparently that was approximately four minutes which and I was doing that at the beginning I had a lot of trouble her because I was so nervous so that's pretty good I would like to see if I would like to learn see flop everyone's telling me see fob beginner see fob is that's what I was using okay like what I was doing the the parts that I know it are memorized but what I know how to do is I know how to make the cross cross white cross on the yellow side move it to the white side do the white corners then do the middle row that I can do then I also know pretty the men thing I know how to do is to make the yellow cross on the yellow side and then I hope that I get lucky and I try think I try soon algorithm a bunch of times I get that fish thing and then I point the fish this way and then I do that some more and eventually I get the top and then I will then I had to look up some other algorithms for moving the moving the center and corner pieces around but I where I basically stuck is at the I can get the yellow cross from memory not in the correct position every single time so I'm not tied but I've tried a few different things after that and I have them all mixed up in my head so so you learn f2l which is part of see top for the first two layers if you know that you will be a lot faster I prefer something that is like less memorizing algorithms and more actually able to kind of because like I'm I the thing that I like doing the most is the middle layer like that I just I do it by sight but I'm not doing it by memory but it's like a quick algorithm that I have to do so many Jase in the chat I don't know if I'm pronouncing your name correctly Jase asked what algorithms are you considering for solving the cube in Episode four so first of all I don't know that any of these algorithms that I'm gonna attempt are really gonna do a good job the first thing that I'm going to do is try to use a genetic algorithm like is it true I think there's like God's number or that any the cube from any configuration can be solved within 20 moves is that true I don't know if that's true somebody told me that I have a saw a YouTube video read an article I hate to research that so what is the minimum because I can create a genetic DNA string for a sequence of moves but it needs to be a fixed number it's okay if it solves it in less than that but it needs to be a fixed number and then what I can do is I can create a population of those move sequences run through them and then I need some fitness function the fitness function I'm going to need is to evaluate basically how close I am to the solution it would be lovely if just counting the number of pieces in the right space would be a good enough fitness function that's what I'll try first I think that's going to be problematic and the I did read a paper about machine learning to solve a Rubik's Cube and the methodology was basically the reward system or the fitness function how to do with distance from the solution so you kind of needed to know how to solve it from where you were in order to figure that out so but I would like to try to do it without that because I would like to see if I can solve it without your pre knowing a way to solve it but we'll see there's no known algorithm for getting those moves from an arbitrary configuration well I don't think it's gonna be me who's gonna figure that out but this is what I'm gonna try 20 and a half turn metric 26 in quarter turn metric 20 turns with 180 turns I think 24 with only 90 okay so I'm not gonna learn a strategy for any generic any random configuration what I want to do is solve for the sequence of a particular configuration if I can do that that's at least a first step maybe 50 it took until 2010 that God's number existence so people had shadow telling me it has to do with whether I'm allowing for 90 degree moves or just quarter moves I suppose I'm sorry 90 whether I'm allowing for full 180s or just 90 degrees all right what is the sense of p5.js and p3 what are their names mean Macario part three please I'm sorry that's very nice of you to ask and then I'm also being asked what's the plan after the Rubik's Cube series so the reason why I went down this road is I am working on the thing that I'm interested in pursuing is more machine learning examples with ml five and ten to flow Jas and I I wanted to try some more neuro evolution examples and maybe more genetic algorithm examples and I sort of thought the Rubik's Cube would be like a nice thing to try with it became a much more complicated project and I became kind of obsessed with it but I think I what I should be doing today because it's what I taught in class this week at NYU is I did Abner Oh evolution with flappy bird but using tensorflow J s instead of my own toy neural network library so that's probably what I would come to soon I'm also working it's happening offline not during the live streams but I'm working on a bunch of videos about data and API it's a little bit of some redundant contents of things I've done before but updated and so those videos are will actually come out just as like edited videos in May and June so is this the hardest longest challenge you've done on your channel maybe maybe what's been some of the other ones I mean there's a bunch that arrived like five six parts but whether they were harder or just took longer you should watch my palm challenge and see how much trouble I had if it pause okay this that fitness function would make it exploit way more than Explorer that's kind of true that's a good point there's a fine line so I got to do some thinking in some experiments kenya's can begin HUD and can and HUD oh that exists oh I didn't know you could do that thank you hold on where did I'll be doing the text let me have that cam begin HUD cam and HUD ah there we go that's definitely I wish I had known about that I would have done so much debugging on the screaming with that thank you not pong pong P Ong um thank you everybody for tuning in this is a delight for me to get to do every week I will be back I mean I am keeping this regular time every Wednesday at 1030 a.m. next week is April 17th I think I'm gonna miss April 24th if you're just sort of keeping track of your calendar that's not a hundred percent yet but there's that I have a conflict that week so and I'm certainly gonna probably miss a date or two in May so I'm gonna try to do once a week every Wednesday and I've got old kind of stuff to do and get to and thanks for your continued support your questions your comments your feedback I really appreciate it I am going to put on my wallpaper and get turn this stream off so this is random this is noise / Lee noise that is in the core random algorithm the actual random algorithm itself those numbers aren't related at all you pick like I'm picking random numbers between zero and ten nine two seven three six one one nine nine four eight one nine two one three but with curly noise I might pick numbers like this two three four three four five six five four five six seven pair asked what's next week I don't know yet I mean in theory I might just continue the Rubik's Cube it probably a good idea for me to take a break for a minute but we'll see I don't know what next week is yet but stay tuned I try to put it in the title when I schedule a live stream or are tweeted out of that kind of thing I'm sick seven five six seven eight nine look like pearls in boys 4 3 2 3 4 3 4 5 6 5 these look like girls and boys but with curly noise I might pick numbers like this 2 3 4 3 4 5 6 5 by purling noise that it's early noise so this is Hurley noise that is Hurley no this is this is Hurley noise that it's Hurley no so this is Hurley noise that is her purlins know her Perlin noise that it's Hurley noise this is Hurley noise that is Hurley this is this is Hurley noise that it's her little so this is Hurley noise that it's her early early early early early early early early early but with pearly noise I might pick numbers like this this is like Perlin noise performance part later