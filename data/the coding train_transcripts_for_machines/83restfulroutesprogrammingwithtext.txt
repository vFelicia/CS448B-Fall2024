in the previous video I used node and a node package called Express to make a very simple web server all it does is it spins up a server listening on port 3000 and if I run it it looks it serves up anything that's in this directory called website ok and in that directory called website is a little index.html file it says this and now I see that in the web page in the web page didn't make sense ok so what do I want to add to it the goal of this video series is to make an API now there are a lot of different ways and styles and flavors and designs and types of ways you could make an API I'm sure and the kind of API I'm to show you is a restful api and i like to call it i like the idea of it being restful because i want it to be relaxing and enjoyable a soothing soothing api but rest is like a sensually like a style so to speak of how it's a broader term it stands for representational straight state transference your link to the wikipedia page and you can read all about it but it's really a style by which users of the api can make get requests and receive information back from the API so and let me try to describe kind of the basics of how it looks and works so i'm gonna erase all of my diagrams from some other previous video and let's let's think about what's happening so let's say you have a deer making a API about flowers think it's about rainbows think what about rainbows but flowers I'm gonna use flowers right now flowers API dotcom so HTTP this is your website your webserver your domain all that stuff you might go to flowers API comm and you will see the index.html page that's there that's the web server bees written we've written you might go and say like slash about and maybe actually you have in your website directory of your public directory a folder called about with another index.html file and when you go there you see that one so this idea of paths with slashes is something that you typically see to through directories of a website however these slashes and the things in here don't just have to be directories they can actually signify a route so for example what if I went to a Minnesota call it flip flour API comm slash search sunflower right what if I went to this and this isn't actually of directories these are these are commands that I am issuing to the API I'm saying search for this particular flower called sunflower and I want to get back maybe some big JSON fudge all this information about sunflowers so this is an idea of a route and when you build an API you might build different routes for different kinds of ways of accessing the data you might make a route for getting all the data or for searching for one piece of the data or a route that signifies I want all the data but I want it sorted in this manner or I want all the data but only if the data starts with the letter P for example so there's a lot of ways you can use routes so now here in the code this is not the code I need to start to a manage how those routes are handled so right here I'm gonna start adding that code so I'm gonna add a bunch of carriage returns and right here I'm going to set up a route when a user goes to one of these routes or goes to in the browser types in a URL or clicks on a link to a URL they are making something called a get request please may have something from you server can I get stuff back and you will get images there's a dog barking images HTML files CSS all that sort of thing so if you want to handle a get request that goes to a specific route I could say app get o get /im that's my train of thought let's just we're thinking about flowers right flower and then I need a callback send flour send flour all functions should be called seven flower sunflowers okay so I'm gonna write send flower so the idea here is I'm now writing the code if any user of this API user meaning oh not necessarily a person but a web browser some client that's gonna connect to it goes to slash flower then this function send flowers should be executed that's the callback now the send flower has two arguments associated with it a request and a response every web transaction so to speak when I go and type you know google.com or rainbow something something calm I'm making a request to the server so all the information about me is in that variable called request the server then sends back a response all the information about the server's response is in that variable response and I'm using this idea of all the information very loosely information Dave you know in request you could find like what was the operating system what was the browser what are the headers well you know there you're gonna see like we're there any parameters sent also the response has things like ah I can send back some data so what I'm gonna do is I'm going to now say right here response send I love flowers too so if the user goes to slash flower rather than look for a directory of HTML CSS JavaScript files along that path this is a route that I'm gonna handle programmatically and I'm gonna say I love flowers too so let's hit refresh the server is still running I am now up here going to change this to say go to the route slash flower and I see I love flowers too now there's no HTML page there's nothing there's just code and the response sent back the response okay so this is part one but remember this idea of like searching right the idea of using an API to search what I want to do is have a well there's a lot of things I can do but something at least to get started with is what if I were to sir at a second a second toke the second I don't what to call it a second element to this route search / sunflower but rather than come back over here rather than say / search / sunflower what I actually want to handle is not the specific route I want if they go to search I then want the second element to be a variable so to speak something that changes every time so here I'm going to say flower so that indicates that this search that that search is the route followed by something that the user enters and that will be here found in the request so in other words I'm now going to go to search / sunflower and you're gonna see it still says I love flowers that's what I'm sending back but now I can do something more I can say there's some data associated with this request something came in beyond just search some type of flower I can say request dot params there are parameters flower is a parameter and now I can say here send the response back I love data dot data dot flower so I'm kind of I don't like this amount of space that I have here I'm gonna fix this and make this a little smaller ah no no picture small maybe this will get edited for flow okay so here you can see that in it I in the response I'm actually gonna send back something that was sent now what i'm doing here has no there's no point to it i'm just showing you the pieces of how things work so we can get to the place where it has a point so let's see now if this works if i refresh here I love sunflower and I can put Daisy I love Daisy and I can put rainbow doesn't have to be a flower and I can put so in other words there's a round trip happening I'm making a get request with this route search / something the server gets that something as a parameter part of the request and looks at it puts it in this variable data then pulls out farther so there could be a lot of parameters so I can add another one I could say slash num and then I can say var num equals data dot num and I can then have I was gonna do a for loop or something and have it say I love Dana dot flower so many times let's just do that that's sort of silly but why not so I can say response equals this and then for VAR I equals 0 I is less than num i + + response you can't call this response a reply I call it reply + equal this and then I'm gonna send back that reply right so I've added a little logic so based on whatever number I get in I do that a bunch of times and now we can see I'm getting both a flower and a number and if I go search rainbow 5 I get it if I do it / 50 I get it 50 times right so the reply is now based on what has been sent into the server so this is the basic idea of how a route works with a get request now of course there's something later you're gonna see there's also a post request I can say app post and we're gonna need that for this example that I hope to ultimately build but in the next example what I want is what the next video what I'm gonna do is add a little bit of persistence to this so what I want to do is allow the create a set of routes where the user can retrieve data and then contribute to that data as well as well so we'll see that in the next video