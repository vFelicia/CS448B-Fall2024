hello now if you watch the previous video hey boys thank you well I hope you're not too mad at me and I didn't file too many complaints in the comments there but in the previous video I talked through the feedforward algorithm they attempted to map it and graph it I attempted to get all the indices right to explain why we use matrix math for it all that sort of stuff now we've got to get to something we got to get to the interesting part which is actually to use the neural networks for something it's taking me a while to get there I will get there but I have something to confess if you thought that was bad I actually uh wilderness Dan over here tried in a live stream previously to go through all this and got all the index values and everything wrong was so bad it couldn't even like get it together to turn it into an actual tutorial video that I'm making in the playlist but it does exist if you're interested I got a haircut seemed to fix a lot of things I look like a much more professional person you can go back and watch that previous those previous attempts so actually done so this is my second try I'm just being honest here all right so what is it that I want to do oops in this particular video we can close all this stuff what I want to do is I have a matrix I have a matrix class that I've developed I have a neural network class that I've developed what I want to do I want to be able to write code like the following I want to be able to go into my p5.js sketch or any JavaScript program and say something like let neural network let n equal a new neural network maybe it has maybe I want to solve X or so I want to have two inputs I just want to have one two hidden nodes and one output so I want to make a neural network object and I want to give it an architecture then I want to do something like I'm going to make an input like I want to send in true false 0 1 comma 0 I want to be able to say let output equal neural network feedforward that input and then I want to say console.log output so this is the this is what I want to be able to do I want to be able to use the neural network on a kind of higher level and once I can do that then I can have inputs that are all different kinds of things where I'm doing data science or some kind of like learn to play flappy bird or whatever it is that I'm doing okay so let's do this what I have so far here is just I have that feedforward function it takes an input and returns that guess now there's no code there I need to fill in the code all that matrix math I need to take everything that I have here and I need to put that all into here so how do I do that all right well my neural network needs some more stuff for example all that it has right now is the number of input nodes which is I just sent into the number of hidden nodes I sent into and the number of output nodes I sent in one well what I need is I need to keep track of those weights right I need to have weights and what do I need to have weights between we need to have the weights between input and hidden and the weights between hidden and output so those we've established our matrices weights between input and hidden is a new matrix and now it has a certain number of rows and columns it has a certain number of rows sorry columns based on the number of inputs and rows based on the number of hidden nodes so we're gonna say it has this dot hidden nodes is its number of rows and this dot input nodes is its number of columns so that's one wait mate ryx and another wait matrix is between hidden and output and that's going to have the number of rows which is the number of output nodes and the number of columns is the number of hidden nodes so I've created these weight matrices now oh oh you have an interesting question when we create a neural network how do we pick the weights again the whole point of this is we need to have some interesting wonderful exciting complicated weird algorithm for tuning the weights for finding the optimal weights for whatever type of application we're trying to build but to start we just want to give it random weights and I did the whole fields of research dedicated to figuring out like good ways to see the neural network with good kind of beginning weight so that you can get the optimal weights more easily blah blah blah but for us right now I just want to give it random weights so I can actually just say we've already built a randomized function into the neural the matrix library so I can say randomized so this will randomize the weights and actually though if you recall I was reminded by this in the chat that my randomize function for some of my demonstrations I was actually picking a number between 0 and 10 and it would make much more sense to get a random number between maybe negative 1 and 1 to start at the weight so I could take math dot random which is 0 to 1 x 2 subtract 1 and I've got a random value between negative 1 and 1 okay so we're doing well what else do I need I should probably I should probably keep track of the bias the hidden bias and the output bias again as we saw when I'm sort of talking about it could put that into the matrices but I'm going to keep track of that separately it's a little easier for me so I'm gonna say this dot bias hidden equals a new matrix that has how many biases do I have I have o based on the number of hidden nodes right that those are the rows and then one column is it yeah because it's one column vector and the bias or the output is based on how many output nodes so for every I need a bias value for every node in every layer so I need to bias values for each hidden node and one bias value for each the single output node but you know again my neural network library allows me to create neural networks with any number of hidden nodes any number of inputs any number outputs it is just has these two layers and the inputs but so at some point it might be worth expanding it so I kind of multiple hidden layers that sort of thing but this is gonna work fine for now okay so what else do I need now ahhahaha there's something we're missing so for example let's just what am I what am i feeding in here feedforward input this is just an array but technically in order for me to be able to do the first stop right the first thing that I want to do is I want to say this dot hidden I'm sorry I'm gonna make this let hidden this will be the output right I want to compute the output of the hidden nodes that's going to be a one dimensional of one column matrix that is going to be that is going to be the matrix product between the input and this and the weights and the weight weight matrix between and actually I have to say the weights first sorry the weights remember the order in matrix multiplication really matters the weights input hidden with that input then I'm going to say hidden dot add this dot bias so I do the matrix product of the inputs and the weights then I add in the bias and then I'm gonna do activation function I won't do that just yet but even this is no good so far this is no good so far because this input what does this matrix multiply function expect matrix multiply in my library expects two matrix objects and this the way I've written my sketches I just made the inputs an array which is an incredibly convenient thing to do I don't want to make my endusers have to like figure out they just want me I'll send the inputs in in a simple array so one thing that I should do here I mean I could test I could check if it's already an instance of a matrix I could skip it but what I want to do is I want to say I'm going to call this input array I want to say inputs equals matrix from array input array and the reason why I'm writing this out is because I've thought of this already I need to be able to make a matrix object from arrey so I want to be able to have a matrix object so that my matrix multiply function will work and I could create a different constructor that takes an array but I think what would make sense is for me to add right up here in the beginning right and a static function that's that's called from array it takes an array and what I want to do here is I want to say let may n equal a new matrix that has just that has a number of rows based on the arrays length and one column right I want to create a matrix that looks like this it has a number of rows based on the arrays length and one column and then all I need to do is say for let I equals 0 I is less than array dot length I plus plus and I'm going to say data oh sorry sorry m dot data index I index 0 equals equals array index I and then return n so this is just again oh I'm sure every lots of you could probably think of some type of array functionality that I could use really easily but this is creating that matrix and then just that matrix and then putting the input into it so just to be sure about this let me let me say m dot print okay let me just make sure this works so I have some errors here oh that actually nicely printed something out for me that I didn't realize it would so what I want to do is I want to say let a array equal a 1 comma 0 comma negative 5 and then I want to say matrix dot from array array and we should see there we go we've got a column a single column matrix 1 0 negative 5 so that function is working the way that I hoped it would so I can take out this debugging and I can keep this in here and now if I go back to this code I can say okay we get an input array we turn that into an input matrix and then this needs an S here we multiply we do the matrix product of the inputs with the weights we add in the bias we one more step left to go we need to do the activation function so we need the sigmoid function well it so happens that there isn't a magical sigmoid function that exists in JavaScript however there is in the math library a function called exp JavaScript math let's find this documentation page this exp Euler's number or also known as Napier's constant does for us e to the X so I can write my own sigmoid function so I can just um and and at some point I probably will allow the neural network library to use different activation functions but right now I'm just globally gonna write a function called sigmoid it's going to take one input X and it is going to return one divided by one plus mass of X somebody factcheck for me but I believe that is the sigmoid function and so the wonderful thing now is once I receive the inputs once I've done the matrix product of the weights and the inputs once I've added in the bias I can generate the outputs with the activation function just by saying hidden dot map sigmoid if you recall I wrote into my matrix library a function called map which just allows me to apply any arbitrary function to every element of that matrix so so there we go now we're done so this is this is all the code for generating the hidden outputs and this is the activation function now where are we in the diagram we've got the inputs we did the matrix product we added in the biases we passed the activation function now those outputs are coming in here what do we need to do now take those hidden outputs and do the matrix product with these weights so we're gonna do exactly that same thing we're going to say let output equal matrix dot multiply this this dot weights now I need the weights between the hidden and the output H oh I need the hidden outputs which is drug just calling hidden then I need to add in those output biases did I call it bias oh yes in each oh and by the way I just realized I never gave these any initial values so it would make sense for me to also randomize these so I'm going to randomize those biases so right so now I've got the weights times they hit the matrix products with the weights and the hidden outputs I'm added in the bias and then output dot map sigmoid and guess what return output that's all I want that's done that's the last piece I want to send in the inputs in my actual code I want to be able to send in the inputs and then read out the output but here's the thing I sent in the inputs as a simple array and then internally converted that into a matrix so I could do all the math properly now before I get the outputs back I don't want you want to send out a matrix it's gonna be simpler if I just send out those outputs as an array so much like I wrote that from array function I am going to create a function called two array and that doesn't need to be static because I'm gonna take any given matrix object and return in the right now there are some way I could probably transpose it and and do some fancy way or use the slice function I'm again I'm gonna do this just in a way that I know will work will catalyze refactor this later in the end I'm gonna refactor all this using somebody else's matrix library anyway so let me think about how I would do this first I want to make an array I'll make it empty and then really all I want to do is I want to loop through every element of the array every element of the matrix and what I want to do is I want to say array dot push every element of the matrix and say return alright so this would actually take any twodimensional matrix and flatten it to one mention array the question is though one thing we should ask ourselves here is it appropriate to have the columns as the inner loop so if I think about it if I wanted to take I mean obviously doesn't matter if it's this matrix because I just want to take all these and put it into an array but if it's that if I want to take like this array and flatten it do I want to go dodododododo or do I want to go doodoodoodoo doodoodoodoo I think I want to go this way dodododododo I got distracted by my own singing of the iteration song is just doo doo doo doo alright sorry I'll get back to this I apologize I think I want to iterate through the columns on the inner loop which it looks like that's what I'm doing so I'm gonna keep it this way except for yeah okay so I'm gonna keep it this way and I'm gonna say here now in the neural network I can say return output to array okay everyone this is it this is the whole feedforward algorithm this is receiving the inputs generating the hidden outputs generating the output output and then sending it back to the color alright so this is the whole algorithm layer this is like layer 1 and layer 2 the hidden layer the output layer okay what do we do now let's try running the code I mean it's absurd but because this does nothing but let's actually let's just run this let's just see can I create a neural network give it some are very input and get some output can I get it with no mistakes it seems very unlikely that I'm gonna have no mistakes and this is a reason why I shouldn't use my drum roll effect but I'm gonna do it anyway here we go let's run this code it worked the first time thing it worked is a strange thing to say cuz relay to get any errors and probably one reason getting errors because it's actually my second try of building this out you might be wondering like oh okay so I just watched like two and a half hours of like eight videos in a row about matrices and neural networks and you just went for point five nine three one zero seven the thing is we have none you gotta start testing this we've got to come up with a server we're getting close we're what I want to do probably the first thing I'll do it's not that interesting but at least allow us to test whether this code works is can I train it to learn and and operation or operation or X or exclusive or which is one that I've talked about that can't be solved with a single perceptron so can I feed it in one zero and train it to get the number one out can I feed it in zero one train to get the number one out but if I give it zero zero one one I get the number zero out so I need to attend that but I am missing a lot of functionality from this neural network class I have this feedforward algorithm function now what I need is to write a function called train and what I'm gonna do with the train function is I'm going to give it some inputs and then I'm gonna give it a known answer so the idea here is like with feedforward I'm really just saying take these inputs and give me an output with training I'm gonna say take these inputs that I have an owned labeled answer to and do something to yourself based on that and that's where I'll start getting to in the next video I have to talk about back propagation and gradient descent I have talked about this in previous videos will kind of return to that then I need to finish implementing this function and then I'll do a coding challenge where I try to solve XOR and do like a simple digit recognition or something with this particular neural network library okay thanks for watching um just them going through this I'm trying it out and see if I can make this room that would still happen doing a guy's being us Abby thanks Abby but all things all things will come eventually so thanks for watching and as always I don't know subscribe like that helps supposedly and because then YouTube's neural network I'm just copying three blue and brown stroke at this point you should watch three blue one Browns videos they're good and I learned so much just from like watching those and I'll be back in the next video it's a boy thank you