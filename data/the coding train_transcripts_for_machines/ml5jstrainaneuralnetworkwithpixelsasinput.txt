and you thought we were done with the ml5 neural network tutorials but no there is one more because I am leading to something I am going to you'll will soon see in this playlist a section on convolutional neural networks but before I get to convolutional neural networks I want to look at reasons why a convolutional layer I have to answer this question like what is a convolution I've got to get to that but before I get to that I want to just see why they exist in the first place so I want to start with another scenario for training your own neural network that scenario is an image classifier now you might rightfully be sitting there saying to yourself you've done videos on image classifiers before and in fact I have the very beginning of this whole series was about using a pre trained model for an image classifier and guess what that pre trade model had convolutional layers in it so I want to now take the time to unpack what that means more and look at how you could train your own convolutional neural network again first though let's just think about how we would make an image classifier with what we have so far we have an image and that image is being sent into an ml 5 neural network and out of that neural network comes either a classification or regression and in fact we could do an image regression and I would love to do that but let me start with a classifier because I think it's a little simpler to think about and consider so maybe it comes out with one of two things either a cat or a dog and some type of confidence score I previously zoomed in on the ml5 neural network and looked at what's inside right we have this hidden layer with some number of units and an output layer which in this case would have just two if there's two classes everything is connected and then there are the inputs with PostNet you might recall there were 34 inputs because there were 17 points on my body each with an X my position what are these let's just say for the sake of argument that this image is 10 by 10 pixels so I could consider every single pixel to be an individual input into this ml 5 neural network but each pixel has three channels an r g and b so that would make 100 times 3 inputs 300 inputs that's reasonable so this is actually what I want to implement take the idea of a two layer neural network to perform classification the same thing we've I've done in previous videos but this time use as the input the actual raw pixels can we get meaningful results from just doing that after we do that I want to return back to here and talk about why this is inadequate or not really inadequate but how this can be improved on by adding another layer so this layer won't look sorry the inputs will still be there we're always going to have the inputs the hidden layer will still be there and the output layer will still be there but I want to insert right in here something called a convolutional layer and I want to do a convolutional a twodimensional convolutional layer so I will come back you want to just skip to that next video well if and when it exists that's what I will start talking about that but let's just get this working as a frame of reference I'm going to start with some prewritten code all this does it's a simple p5.js sketch that opens a connection to the webcam resizes it to 10 by 10 pixels and then draws a rectangle on in the canvas for each and every pixel so this could be unfamiliar to you how do you look at an image in javascript in p5 and address every single pixel individually if that's unfamiliar to you I would refer to my video on that topic that's appearing over next to me right now and you could go take a look at that and then back here but really this is just looking at every X and y position getting the RGB values filling a rectangle and drawing it so what I want to do next is think about how do I configure this ml5 neural network which expects that 10 by 10 image as its input let me make a variable called pixel brain and pixel brain will be a new ml5 neural network I should have mentioned that you could find the link to the code that I'm starting with in case you want to code along with me the both the finish code and the code I'm starting with will be in this video's description so to create a neural network I call the neural network function and give it a set of options one thing I should mention is while in all the videos I've done so far I've said please yet you need to specify the number of inputs and the number of outputs to configure your neural network the truth is ml 5 is set up to infer the total number of inputs and outputs based on the data you're training it with but to be really explicit about things and make the tutorial as clear as possible I'm going to write those into the options so how many inputs think about that for a second the number of columns times the number of the rows times RGB maybe I would have a grayscale image maybe I could just make it I don't need a separate input for RGB but let's do that why not I have the the 10 by 10 in a variable called video size so let's make that video size times video size times 3 let's just make a really simple classifier that's like I'm here or not here so I'm gonna make that 2 the task is classification and I want to see debugging when I train the model so now I have my pixel brain my neural network oops that should be three let's go with my usual typical terrible interface meeting no interface and I'm just going to train the model based on when I press keys on the keyboard so I had a key press function and then I'm let me just lay a little goofy here which I'm just gonna a when I press the key ad example key so I need a new function called out example label so basically I make the key that I press the label so I'm gonna press a bunch of keys where I'm standing in front of the camera and then press a different key when I'm not standing in front of the camera now comes the harder work I need to figure out how to make an array of inputs out of all of the pixels luckily for me this is something that I have done before her and in fact I actually have some code that I could pull from right in here which is looking at how to go through all the pixels to draw them but here's the thing I am going to do something to flatten the data I am NOT going to keep the data in its original columns and rows orientation I'm going to take the pixels and flatten them out into one single array guess what this is actually the problem that convolutional neural networks will address it's bad to flatten the data because it's spatial arrangement is meaningful I'll start by creating an empty array called inputs then I'll loop through all of the pixels and to be safe I should probably say video dot load pixels the pixels may already be loaded because I'm doing that for down here and I could do something where if I'm drawing them I might as well like create the data here but I'm going to be redundant about it and I'm going to say ah but this is we this here's the weird thing I thought I wasn't going to talk about the pixel array in this video and just refer you to the previous one but I can't escape it right now for every single pixel in an image in p5.js there are four spots in the array a red value a green value of blue value in an alpha value alpha value for transparency the alpha value I can ignore because it's going to be 255 for everything oh there's no transparency if I wanted to learn transparency I couldn't make that an input and have ten by ten times four but I don't need to do that here so in other words pixel zero starts here 0 1 2 3 and the second pixel starts at index 4 so as I'm iterating over the all of the pixels I want to move through the array four spaces at a time there's a variety of ways I could approach this but that's gonna make things easiest for me so that means right over here this should be plus equals four then I can say the red value is video dot pixels index I the green value is at I plus one and the blue value is at I plus two and just to be consistent I'm gonna just put a plus zero in there so everything lines up nicely so that's the r g and b values then I want those are G and B values for this particular pixel to go in the inputs array the chat is making a very good point which is that I have all of the stuff in an array already and all I'm really doing is like making a slightly smaller array let's removing every fourth element I could probably do that with like the filter function or some kind of higherorder function or maybe just use the original array not really sure why I'm doing it this way but very emphasize the sort of data preparation step so I look forward to hearing your comments about and maybe reimplementation to this that just used the pixel array directly but I'm gonna keep it this way for right now so I'm taking the are g and b and putting them all into my new array then the target is just the label a single label in an array and I can now add this as training data pixel brain add data inputs target lets console.log something just to see that this is working so I'm gonna console.log the inputs and let's also console.log the target just to see that something's coming out so a yeah we can see there's an array there and there's the a and now if I do B I'm getting a different array with be there so I'm gonna assume this is working I could say inputs dot length to make sure that that's the right idea yeah it's got 300 things in it okay next step is to train the model so I'm going to say if the key pressed is T don't add an example but rather train the model and let's give it train it over 50 epochs and have a call back when it's finished training let's also add an option to save the data just in case I kind of like stop and start a bunch of times and not not collect the data again and I'm ready to go except I miss something important I have emphasized before that when working with neural networks it's important to normalize your data to take the data that you're using as inputs or outputs look at its range and standardize it to some specific range typically between 0 and 1 or maybe between negative 1 and 1 and it is true that ml5 will do this for you I could just call normalized data but this is a nice opportunity to show that I can just do the normalization myself for example I know this is another reason to make a separate array sort of I know that the range but of any given pixel color is between 0 and 255 so let me take the opportunity to just divide every RGB value by 255 to squash it to normalize it between 0 and 1 let's see if this works I'm gonna collect it so I'm gonna press this is a little bit silly but I'm gonna press H for me being here in front of the camera then I'm going to move off to the side and I'm going to use n for not being in front of the camera so I'm not here and I'm just gonna do a little bit right now and then I'm gonna hit T for train and whoa lost function going crazy but eventually it gets down it's a very small amount of data that I gave it to train but we can see that I'm getting a low loss function if I had built in the inference stage to the code it would probably start to guess Dan or no Dan so let's add that in when I'm finished training then I'll start classifying the first thing I need to do if I'm going to classify the video is pack all those pixels into an input array again then I can call classify on pixel brain and add a function to receive the results let's do something fun and have it to say hi to me so I'm gonna make this label a global variable with nothing in it and then I'll say label equals results label after I draw the pixels let's write either write hi or not write hi so just to see that this works let's make the label H to start it says hi now let's not make it H and let's go through the whole process train the model and says hi no I forgot to classify the video again after I get the result so it classified it only once and I want to then recursively continue after I get the results to classify the video again just so we can finish this out I actually saved all of the data I collected to a file called data JSON and now I can say pixel brain load data data JSON and when the data is loaded then I can train the model so now I've eliminated the need to collect the data every single time let's run the sketch it's going to train the model I don't really even need to see this when it gets to the end hi I'm pleased that that worked I probably shouldn't but I just want to try having three outputs so let's try something similar to what I did in my previous videos using teachable Machine to train an image classifier and we'll look at this ukulele coding train notebook and Rubik's Cube so let me collect a whole lot of data open to press you for ukulele RF rubik's cube and and for notebook save the date in case I need it later and train the model all right so now ukulele you and for notebook and can we get an R I wasn't I stood to the side when I was doing the Rubik's Cube so that is pretty important so it's not working so well so that's not a surprise I don't expect it to work that well this is why I want to make another video that covers how to take this very simplistic approach and improve upon it by adding something called a convolutional layer so what is a convolution what are the elements of a convolutional layer how do I add one with the ml5 library that's what I'm going to start looking at in the next section of videos but before I go I can't resist just tweak one more thing because I really want to look at and demonstrate to you what happens if you change from using in pixel input to perform a classification to a regression so I took code from my previous examples that just demonstrated how ml5 and regression works and I change the task to regression I had to lower the learning rate thank you to the live chat who helps me figure this out after like over an hour of debugging I had to lower the learning rate to get this to work I train the model with me standing in different positions associated with a different frequency that p5 sound library played and you can see some examples of me training it over here and now I am going to run it and see if it works so I said save the data and now it's training the model and as soon as it finishes training you'll be able to hear all right so I will leave that to you as an exercise obviously include the links of the code for this in the video's description on the webpage on the coding training comm with this particular video I can come back and implement it you can go find the link to the live stream where I spent our over an hour implementing it but I'll leave that to you as an exercise see if you have you follow this video and have image classification working can you change it to a regression and have it control something with continuous output okay whoof you made it this far what thank you and I will be back and start to talk about convolutional neural networks what they mean in the next video