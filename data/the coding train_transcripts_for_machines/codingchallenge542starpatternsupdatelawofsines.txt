hello and welcome to a followup video on the Islamic star patterns coding Johnson I did so did this I don't know if this is really technically a coding challenge or what but I had some so many wonderful suggestions and ideas that came out of that coding challenge that I thought it would be worth doing a follow up video just to add some features to it as well as correct I don't know if errors the right words but certainly a major sort of flaw in the way that I built that particular example so this by the way is the current state of the community created version people have submitted pull requests where now there are sort of nicer sliders for controlling the Delta and the angle there is it can turn on and off the grid I can try different types of tiling pattern so I encourage you to check this out and contribute to it the link to this the github repository for this particular version of it is in this video's description now where I left it off if you were watching just the actual coding challenge was with this and so just to remind you to the way to one technique as pioneered by a paper that I'll also link to you by Craig Kaplan to create these star patterns okay so the way that the paper describes how to do this algorithm is to take a polygon the quad hexagon and to emanate rays these are called sort of a technique called a Hanken technique which I talked a lot about in the previous fruity code strange word to say but it works to send out rays from the side and then send out rays from this side and then connect them so where they connect and you'll see if you do this from all the sides and you tile the polygons in all interesting different ways you'll get these beautiful starlike patterns and they're wonderful I enjoyed them they're nice tiling pattern so what I did I over engineered it I believe in that I made just like polygon objects edge object is Hanken object and then I said every edge send the Ray out check every other edges ray and figure out where they're all in your second and final one that's the close kind of interesting there's a lot of like useful math in there and good thinking but really with these types of regular symmetrical polygons those rays are always always always going to meet along a very specific along the sort of the I don't know what to call this the bisector of they're going to meet at a very precise location that we can calculate pretty easily with something called the law of sines so this was suggested by Gabriel on Twitter who sent me a tweet saying hey you know what you could do you could use the law of sines to calculate the length of the Hankin just because you know the angle and you know the length of the edge of the polygon and with some math you'll be able to calculate that length so that's what I thing I want to do is really simplify the code to use this law of sine so let's look at what is the law of sine this is the law of sines now we could derive this from de picking a triangle dividing it into right triangles but simplest way to sort of define it is I'm gonna I'm gonna I'm going to come over here gonna press this button put a couple over here I got this I'm going to draw a triangle and the triangle is going to have three sides a B and C it also has three angles we can call this angle maybe alpha this angle we'll call beta and this angle I'm gonna call theta I don't know I've got the CD off I'm like Greek letters aren't starts the best so these law of sines states that alpha start not sorry sorry sorry a divided by sine of alpha equals so a look at the the side that's adjacent that's opposite the angle and by a I mean the length of this the length of this equals B divided by sine of beta equals C divided by sine of theta so this is a formula we could figure this out because you know if we put a right triangle here we're going to see that we're going to be able to do things like sine is beta equals this length over a sine of alpha equals this length over B and if we do some math we're going to end up a bit this equation so this is quite of a useful equation a lot of geometry scenarios now why is it relevant in this particular scenario okay let's go back to that polygon let's say we have and I'm really just going to recreate the diagram that Gabriel so nicely sent to me so let's say we have this polygon and let's say we have a ray emanating from here I'm also going to draw a line that splits this particular angle in half so now I'm going to draw an ominous send that Hank in out this is the hanket it goes out like this and the other one goes out like this right so these angles are equal and we call these angles theta these angles are the angles in my application that I'm setting with that slider that's changing the direction they're always going to meet right here as they turn in turn out they're going to meet somewhere along this path so we know this angle theta what can you see this zooming on it and now this angle I'm going to call alpha we know that angle because we know the angle the interior angle of a polygon actually there's a formula I think this is right for any polygon of n sides the interior angle equals n minus 2 times pi set right because it's got four sides the number of sides minus two times pi divided by and that's the interior angle cuz this is the sum so if you think about this this is equal to it with it with a quad this is equal to two pi divided by four which is n pi divided by 2 which is right that's a 90 degree angle okay so so that's leading me today we know alpha because alpha is the interior angle of the polygon and also divided by two so what do I really need to know what I want to know is the length of the hanket because I know the direction of the Hank because I'm calculating that myself I'm making it up it's a line with an angle so I need to know the length of it so what I do know is right that length Hanken length I'm going to call it H length divided by sine of alpha equals what well here's something else known right I know this length this is that mid length path length this is the edge length so I'm going to say that's the edge length divided by 2 equals edge length divided by 2 divided by what's this let's call this angle beta sine of beta but how do I know that angle I don't know that angle I know theta because that's an angle I made up I know alpha because that's half of the interior angle of the polygon but what's this angle well actually that angle is really easy to figure out because alpha plus beta let's start state uh plus beta plus alpha equals PI right the sum of all the angles of any triangle equals 180 degrees or PI so now I can actually just change this to sign of right what am I trying to figure out beta beta equals PI minus beta minus alpha PI minus theta minus alpha and then what I can just do is multiply both sides of this equation by sine of alpha and I can say now times sine of alpha so this is now a formula to calculate that Hanken length the second length I need I think it I got a hanker for angling the Hanken length is the edge length divided by two times sine of alpha divided by sine of PI minus theta minus alpha ok so let's see now if we can actually just graphically simplify the code by implementing this particular formula and seeing if we get it right okay coming back over here so let's go to the code now again this is I think quite overengineer in the sense that I have a separate object for each edge a separate object for each Hanken a separate object for each polygon and it's maybe that's maybe a little bit much for this especially as the formats get simple but I give that as a challenge if anybody wants to help submit something to like really simplify this you know I don't know that we need all these different objects but I'm going to use them and the first thing I'm going to do is go into the edge and if you recall the code in this Hankin does all this work to first find the first thing that's fine is the midpoint then we need a vector that points from the midpoint to the edge and then what we're doing is using Delta to offset those things so this is all the same the difference is and then we rotate by the angle so now the question is here this is what's totally unnecessary this find end this function this fine end function was checking everything because I can actually now I can just do law of sines right here this is all I need all I need is once I've got those vectors normalized and pointed in the right direction I just need to give them a length right right here in this top part is where I am here so I've calculated both of these vectors and I just need to figure out what their lengths should be so I can actually do that math right there which eliminates the need for this whole find ends function and also in the maybe in the polygon object right this whole like every edge check every other edge totally unnecessary we can just actually tell them all calculate your own Hanken and use that calculate your own Hanken and use the law of sines so let's go here and let's use that law of sines so what did I say I'm going to look back over up that formula for a second I said that the Hanken length hank in length equals now let's let's make some things a little bit simpler so let's say bar beta right I need beta is what I say it's PI minus PI minus beta minus alpha so of pi minus angle with theta minus alpha now we don't have alpha what is alpha so right now I'm just going to say alpha equals PI divided by 2 and this is a silly way to write it / but really I'm going to need later I'm going to need some formula I'm going to calculate actually you know what let's just assume let's do it this way alpha equals so interior the interior angle equals size minus 2 times pi divided by sighs this is me calculating the interior angle for a polygon now then also I want to say then alpha equals the interior angle divided by 2 or multiply by 0.5 so beta equals pi minus the angle minus alpha that's that so now H length equals the edge length now what is the edge length the edge length is what well if this is a vector up here this is a vector that points from the middle to the edge so the length of these two vectors right is is actually just the magnitude of that so I can get the edge length right here edge length but also plus Delta right remember that Delta is the thing that offsets it from the middle point so the edge length is actually the length from the middle to the edge plus Delta so that I have up here so I already have a length so I could say the Hanken length equals and eel eggs and you know what I said in here I this was a for a generic formula which was a length divided by two but I already have that built in because the vector I calculated is this thing plus the Delta so in my form and I don't need this divided by two here if this is length divided by two there okay so what I have is edge length time sine of alpha and then divided by sine of the angle what's the chance and then I could just say v1 dot set mag each length right those two vectors are the hankins and b2 equals set mag so all you do is set the magnitude of those vectors okay now aha I'm going to make that new hanket object so the Hanken object did all this elaborate stuff because it was trying to figure out the end of all the blah blah blah I don't need this be anymore this is the end the end is the point from where it starts plus the vector that Hank and vector and I don't need this previous D any of this stuff anymore so I believe and I don't need this find end function which is all this elaborate math for looking at point intersection I've got a much simpler scenario now so that's why this Hank an object is perhaps not so necessary because I've got this very basic object now that just has a beginning and an end point and I could really call this I might call this B to be honest with you just to simplify things okay let's go back and run the code looks the same to me so nothing has changed but I know you can't really tell but if this were like a much larger polygon or pattern I think the performance wise it should be a little bit faster it's not specific more flexible so so this is working we added the law of sines to the star pattern so this video had that this concludes the discussion of how to improve and make life simpler calculating all the Hanken vertices with the law of sines and hopefully you also just sort of learn something about geometry that you might apply to your own scenario that you're figuring out in some time now what would be useful is to also as another step to work out different tiling patterns and again I can show you a bunch here here's a hexagonal tiling pattern and if I shape makes the delta much smaller and the angle like this you can see right you can see this is a hexagonal dialing pattern and you can see how those Hank and vertices connect and make these star patterns so so I encourage you to experiment to contribute this repository there's a nice way in this repository that you can just add a tiling pattern if you take a look at it you just make your own JavaScript file that implements the tiling pattern and it folds right into the so I encourage you to contribute to this and I will if there's enough interest come back and do another video which just goes through other tiling patterns and I really actually want to do something about a periodic tiling patterns at some point so I'll come back so thanks for watching the small addendum correction with the law about the law of sines and Hanken star pattern you