hello and welcome to session seven of programming from A to Z and the topic for this session is generating text with something called a contextfree grammar so what I want to do in this video is just talk a little bit about the broader topic of what a grammar is and then specifically what a contextfree grammar is and look at some different and give you an overview of what code libraries and algorithms you might use to generate text with a contextfree grammar and as soon as I'm done with that I'm gonna just move into the next video and actually start to implement a grammar to generate stories and texts or poems or whatever and you will see how you can do it so if you want to just jump to the code you can skip to the next video but here I'll give you kind of an overview so if you're interested in the topic first of all so what is a grammar this is a page about grammars buy at Matt might on Twitter I find it a useful overview of grammars I'll link to it in this video's description and Matt might makes the point which is grammar you could think of it as the language of languages right so we have language but how do you describe the syntax and structure of a language what's the language for a language and that's what a grammar is and if I were to scan through this page there's you know diff bacchus now form grammar and a buck is now extended bacchus now there's all these different syntax syntaxes how do you say house what's the plural syntax some people write in the comments for me and a variety of ways of expressing grammars for a language one thing I'll point out to you whoops is this is a grammar programming languages are made actually with this thing called a contextfree grammar so I haven't described what a contextfree grammar is but you can see here this is a contextfree grammar for C++ statements so you can see what is a statement could be if expression and statement or if expression statement else statement what is a statement a statement could be do statement while expression so this idea of fitting things in to a grammar a defined structure so let's think of okay and so there are a variety of kind of now that sort of seminal work on grammars you can real link to the paper by Noam Chomsky where you can think of grammars divided into four categories so there's this kind of unrestricted grammar type zero which is just basically every in English languages are like highly sophisticated complex grammar but there are also contextsensitive grammars which I think will actually make a lot more sense once I describe what a contextfree grammar is so there's a bunch of different kinds of grammars and I Accord you to explore this hierarchy of grammars and think more deeply about grammars beyond what I'm gonna do in these videos but the classic grammar that can be used to create generative text is a contextfree grammar so let me talk up to you a little bit about in general what a contextfree grammar is maybe we'll look and then I'll show you some tools that allow you to generate with contextfree grammars and then I'll just start writing code so contextfree grammar is made up by I'm gonna say you could we can use different terms for these things but there's an alphabet or there's a set of valid elements in the language like you can only say the cat you know meow and puppy all right those are that's the alphabet of the language it only has four possible words right the there are also in a grammar there some of these are what are known as terminal and some of these are known as non terminal so the alphabet is terminal and non terminal now this is probably a bad idea but I'm going to just use like sort of generic characters for this alphabet so let's pretend that we have an alphabet which is a B and C and those are this is the alphabet and these are nonterminal characters I don't know what I put these little quotes around them for for no particular reason and then we also have terminal characters and those will be D E and F okay so these are terminal characters now the grammar will also have production rules a production rule is a rule and these are also referred to as like replacement rules so a production rules are ruled by which if you have a certain character like eh what does that get replaced with let's say egg gets replaced with B D E and B gets replaced with a F and C gets replaced with a so this now could make up the entire grammar and I kind of hate what I'm doing here and I'm doing it anyway and I knew this morning when I was having the same discussion that I shouldn't do it this way because I think this makes so much more sense if I have content here right but let's look at it let's just think about it in the abstract sense and as I start to go through code examples we'll get to well I think it might if this is confusing to you when we ask some actual content it might click in for you okay so these are the production rules so now what I need is this is sometimes referred to as an axiom or maybe a starting sentence but what I'm gonna call it an axiom just to be formal here what I need is an axiom so what do I start with so let's say I start with the axiom a C so what that means is I start with a C and then I start to go through my replacement rules what am I doing here a becomes B D E so this becomes b d e and c becomes a now we do this again B becomes a F and D is terminal so D stays as D E is terminal so e stays as E and a becomes what B D E so I could keep going now event I didn't do this very smartly because my non term might nonterminal characters all all get replaced with something that is also non terminal so this is kind of this this way this this is known as an expansion I'm expanding out the grammar by iteratively running these replacement rules over and over again and when we write the code for this you'll see this happens with this fancy thing called a recursive algorithm but you can see here that that that this is going to get go until infinity but if I were to do this in a slightly different way for example I'm going to show you a grammar created by Alison Parrish for a class that she teaches called reading and writing electronic text I encourage you to check out those examples a lot of my code is ported from her code in Python and you can see here here are here are the sets of production rules sentence becomes noun phrase noun phrase verb phrase or a sentence becomes interjection noun phrase verb phrase a noun phrase becomes determined or noun or determiner noun that verb phrase so you can see these are all the possible and these are all nonterminal nonterminal elements of the grammar and then here you can see um here are some terminal elements for example interjection could be O or my or Wow or Dan sort of like a cursed on my youtube stream I just call it my YouTube stream that's also a little bit weird determiner is this that are the so if I were to just go to the example I'm going to not bother looking at the code but we can see here if I go to week eight a contextfree grammar reader this example generates is this the right one that I was looking at yes this example generates sentences based on that grammarly move this a little bit over and zoom in here and you can see Wow the bald restaurant sneezes my the smug corsage computes that overstaffed corsage this corsage inter inter interprets the blue restaurant so there's a lot of course notches in this particular generative system so it's interestingly enough typically what you might use a grammar for I'm over here now and I kinda want to leave this but I think I want to refer to this later what you might worth you use a grammar for is you have an existing sentence maybe you have a bit of code like for example what if I go to a code editor I'm jumping around like a crazy person here let's see if this works with code pen I'm gonna go to code pen and we make a new pen and I'm gonna say something like if for VAR I equals zero let's make this bigger I is less than I plus plus now where's my JavaScript linter to God here we go here look at this unexpected token so look at this how does the code environment understand that this semicolon is unexpected it should be there so normally not normally but one way of using a grammar and in this case a contextfree grammar is to look at an existing sentence like this block of code and see if it fits right the reverse see if it fits the structure of the grammar going in Reverse and if it doesn't right then there's an error like oh there's got to be something here like let's look at it without the parentheses we can see here right unexpected token so it's a lot expected tell you it's getting some new thing that doesn't fit doesn't fit the grammar so this is one way that grammars are used to evaluate text and that might be something you explore but what I'm exploring is the reverse which is saying here is the grammar start with a sentence start with an S turn that in to either noun phrase verb phrase or interjection noun phrase verb phrase and let's see what we get again now we I showed this to you already but let me make a new one and we can see that seagull right that is a noun phrase determiner noun that seagull so that can see that that fits that computes this corsage is a verb phrase right which is I probably ended up getting oh you know it that it actually made the noun phrase determiner now that so you can see how this gets complicated right I'm trying to I could diagram and run backwards but the point is I don't need to do that I allow you to do is write the grammar and then if I have a system that generates text it habit so one of the nice things about working with this and it's say you're gonna do a exercise or try some playful experiment based on these videos that I'm making is you could just write your grammar you don't need to write any code potentially because there are a lot of existing systems that will read a grammar file and generate text based on it and so let me give you an overview so I'm going to show you three things um the first thing I'm going to use is a grammar called tracery a grouse are a grammar story grammar generation system called race tracery for JavaScript written by Kate Compton at galaxy Kate here on github and you can see there's a syntax to it which I'll go over and talk about in the next video there's some nice examples I'll just pull up this is one of my favorite ones I don't know if this is going to if this is called interruption Junction so I don't I encouraged so this is you know I don't know if you guys can hear that but but you know you can't cuz I haven't I haven't piped the sound of this laptop in through the stream but I need to click and need to click so you can see this is one of the things that's interesting about working with these generative systems whether you're doing the Markov chain or contextfree grammar or combining them in some way is really not just the algorithm and what it generates but the context where you display those results and I think thinking about dialogue or interactive animated story system there's a lot of interesting possibilities there and if you look through tracer e's the github repository for tracer you'll find a lot of links to a lot of fun and interesting projects made with these kind of crazy grammars so tracery is the number it's the first video that I'm gonna make after this one will be showing you how to build and generate text with a tracery grammar another JavaScript library read a digest that I have mentioned before has a limb grammar object right it's called RI grammar you can add rules to it you can expand those grammars you can check if there's a rule you can load text into it you can remove a role reset so you can see that there this is essentially a JavaScript library that it allows you to generate those grammars I'm sorry that allows you to generate text based on an existing grammar from a file potentially so I'd encourage you to look at tracery and the reader library finally I think for educational purposes and ultimately if you really want to play around with this idea of grammars and contextfree grammar that is and customize it highly you might want to write your own code or at least play around with my example code and modify it for example what if while the text is being generated you're querying an API to grab words from say word Nick or something like that you might be limited with using some of these existing libraries or frameworks but if you've written all the code yourself you can kind of add in sort of features that are more procedurally based inside of the algorithm itself as it's running so in that sense the last thing that I'll do besides tracery and Rita is I will show you how to write your own sorry how to write your own grammar object and so I have an example that makes a contextfree grammar object and that you can add you can simply just add rules to it whether it's coming from a file or whether it's just directly in the code so those are the things I'm going to show you I'm gonna make up probably two or three or four little video tutorials all about contextfree grammars somewhere in there I'll try to make sure I mention the whole idea of a contextsensitive grammar but I think it'll be it'll make more sense once we start looking at their nitty gritty okay so I hope you enjoyed this brief overview check some of the links in this video's description for more reading and materials about the background in theory of using grammars with text and hopefully I'll see you in some of the actual coding tutorial videos next