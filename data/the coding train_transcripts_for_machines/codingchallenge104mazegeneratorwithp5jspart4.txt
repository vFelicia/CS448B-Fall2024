part four of depth first search recursive backtracking maze generation algorithm this is the last part the final part by the end of this particular video I will have we will have finished this exact simulation and be drawing a full Maze and hopefully you will come up with some creative ideas and things you could do with it so where are we so far so this is what we've got so far if I hit refresh you can see we have this cell that's marching from marching around the grid removing walls and eventually it gets stuck because there's no cell that it hasn't visited already around it this is where backtracking comes in while it's marching around it needs to keep track of where it's been previously so when it gets stuck it could go back to a spot that still had available places for it to go this is the backtracking aspect so um so yeah so there's a lot of pieces to this and uh first uh and and so let's look at the algorithm and actually see what it says so look at this we let's what have we done so far so choose randomly one of the unvisited neighbors if I go to the code and if I go to the part where we are I've done that this is me choosing randomly one of the unvisited neighbors now push the current cell to the stack this is what I'm implement in this video remove the wall between the current cell and the chosen cell I've done that make the chosen cell the current cell and Market is visited done that so actually all that we need to do is add this step number two and then this other case down here of for what we're actually doing with the stack and this is actually going to be quite easy and uh actually writing the code I'm going to just only add like four lines of code to this program and suddenly it's going to be working but before I can add those lines of code what I would like to discuss to you is what is this thing called a stack and what do I need it for so a stack is a I I I like I have a little like um issue where it's I like if I I'm like allergic to the word computer science and if I say it I get like a little bit congested but stack is really kind of a term from computer science so to speak so what do I mean by that so uh if you're watching this video you are probably familiar with the idea of an array right I'm sorry like if I'm hungry I'm tired but I'm I'm going through with this right this idea of an array is like a list of things and each spot in the array has an index this is a data structure it keeps track of a bunch of things in a linear list each with an index a stack is another kind of data structure to keep track of information and a stack is a data structure that acts very much like a stack of things a stack of paper you could imagine you in olden times times of your when people had inboxes and outboxes that were actually physical things you'd be sitting at your desk and someone would people would keep coming in and adding things to your stack of paper so things are getting pushed into the stack added on top on top of top now you then arrive to work and you see your stack of paper what's the first item you're going to work on the thing on the top the last thing added to the stack that is referred to as popping so taking things out of the stack this is sort of a strange idea of the last thing in is the first thing out this is the polar opposite of this idea of a queue right if there is a uh I'm about to draw a tickets Booth right if there is a tickets Booth with a ticket salesperson I don't want to go too far with this and then you could imagine a queue of people waiting in line to buy tickets it's Q I totally spelled that wrong but whatever the the first person in line right the this if you're pushing if your people are lining up kind of like pieces of paper piling up on a stack is the first person to get tickets right you would never sell tickets to the last person in line um but a stack we're not using a queue in this particular pro project we're using a stack the idea of the last thing in is the first thing out so how do you program a stack well there's all sorts of different ways we could do it but honestly I'm just actually going to use a Java JavaScript array because a JavaScript array has a push function which adds things to it and in fact I'm pretty sure we'll find out we write the code it also has a pop function and the pop function allows you to pop things off so even though an array has all sorts of features like indexes and things can be added deleted from the middle we don't we're not going to use any of that we're just going to use an array to keep this stack of objects that we push in and pop stuff out so hopefully that clears up for you if you haven't heard about a stack before what that is and now let's look at number two here push the current cell to the stack let's add this to our code so I'm going to go over here to the code one thing I should mention is I moved the cell Constructor function to a separate file cell. JS just to keep things organized a little better so when you go download the code you'll see that and um I'm about to sneeze we'll see what see if I make it through the rest of this video ah so now I want to create a stack so I'm just going to make it an array and make a global variable called stack and I'm going to set it to be an empty array if I look at the algorithm again item two push the current cell to the stack let's go back to the code and where do I do that step two is right here it's not there I'm going to add it step two and I'm going to say stack dot stock stack stack. push current so there we go there's very little code to write here push the current cell to the stack I have done it now let's figure out the next piece so this here we need to deal with now remember when do we suddenly need to make use of that stack we're carving out this Maze We are a we are we are like a digger thing going underneath the Earth and carving a tunnel and at a certain point we get stuck we have to backtrack and find a spot that we kept track of in our stack to try going a different direction so we want to go and use the stack when we get stuck when do we get stuck we get stuck if there are no available neighbors remember this check neighbors function returns undefined if it has no neighbors that it can give back to you so if next is not undefined do all that normal stuff otherwise now we're stuck let's go and make use of the stack so what's the first thing that we do oh but it says else if stack is not empty right we can only use the stack if it's not empty so here I should say else if stack. length is greater than zero it's an array so we can check the length is greater than zero that's how we know if it's not empty what pop a cell from the stack VAR cell equals stack.pop this is when we find out if uh JavaScript arrays have a pop function I'm I'm like I I know that they do I being factious here because I recorded this video earlier but the sound didn't work and now I'm redoing it you don't need to know that because you're watching this at sometime in the future when robots have overtaken you anyway and you're a robot watching this hopefully not maybe anyway ah pop a sell from the stack and make it the current someone in YouTube is someone in the comments going complain that I'm off track but I'm back on track pop a cell for the stack and make it the current cell Uh current equals cell right and you know what what am I making this two lines of code for all I want to do is basically say if we're stuck go to the stack and we've got a new current spot so there we go and guess what I'm pretty sure that we've now made this work because it's notice how it's not getting stuck anymore because when it gets stuck it goes back now it's happening so fast it's sort of hard to see what's happening but you can see that it's eventually and the sound is still working that it's going to revisit every single spot now I'm not going to add too much more to this this is basically done and you can see eventually it's going to find its way back to the beginning and it sort of solved the Maze and now it's aaz that you could actually work with and do other things with I might if I were you trying to add some stuff to this you know as an exercise you might try highlighting the cells of different color that are currently in the stack you know another thing I could do this really quickly um just uh is I could set the frame rate again to something slower and here now we might be able to see like oh we might be able to like pinpoint the moment it gets stuck and goes back I'm watching it doesn't seem stuck yet doesn't see we get we're not getting lucky here uh come on get stuck get stuck oh there's a lot of room for it to go get stuck get stuck get stuck get stuck just my luck okay it probably now it got stuck and you can see how it's backtracking and going a different way and now look it's backtracking again moving along that stack and finding a different way now it's backtracking again so you can see now you can see what it's doing so you could sort of slow it down to watch this process um you know you might sort of see like how does this work uh you know with a much lower resolution and like a I mean this is kind of crazy what I'm about to do it's probably going to run really slow so this is this is a drawing problem like you know I could sort of generate this whole like super high resolution maze I mean you really can you know I might move to processing for this and I could render out a PDF of the Maze and I could have a website where people just log on and get infinitely generated mazes sent to them what kind of creative things could you do with this in terms of color and application and that sort of thing so I hope you will continue to explore that uh send me your questions in the comments share with me things you make from this but this I think really concludes I just want to make this work in a very simple way this really concludes um the uh tutorial on how to do the depth first search recursive backtracker we know what a stack is and all that kind of stuff algorithm for Maze generation I will mention that if you look at this Wikipedia page there are many other algorithms for generating mazes and if you look through it and have some interest and Implement one of these share it with me or write in the comments that you would really love a particular video doing a different algorithm uh try it in 3D make your maze happen in Minecraft I don't know whatever you could think of please do and let me know how it goes for you and I will see you in some other video in the future when I am hopefully not a robot goodbye