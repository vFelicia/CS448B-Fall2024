Welcome to the last video for the Data Selfie App project. There are so many things that I haven't covered or talked about. And to some extent, the next module with another project will address some of these. Namely, what if you want to load data from another API, like get the weather information? What if you want to do that from Node, itself, rather than the client. Why would you want to do that? And what kind of possibilities emerge from doing that? So that I'm really going to address in the next project. The other thing that I really need to address is, OK, well what if you want to take the thing that you made and put it on the web somewhere so that people could see it and use it? How do you deploy? How do you deploy a project that involves node server and client code? So, there's so many different ways that you could do this and different services, that cost money, that are free. I'm going to look at a couple different basic options for doing that in the next project. The next project, by the way, is called The Weather Here. And it's also a project by Joey Lee for a course at ITP that I'm basing my examples off of. So, thank you again, Joey Lee, for all of your help in preparing material for me to use in this series. But before I do any of that, I want to just, in this video, do a little cleanup, reorganize the code a tiny bit, and suggest a bunch of technical exercises, or creative exercises, even, that you might try to tackle yourself before you move on to the next project. The first thing that I want to do as a simple cleanup step is to give myself a bit more to work with in this public folder. Right now everything is in two HTML files. So one thing that I think would make sense to do is to make, maybe, a directory called logs. And then have this all.html live in there. And then, maybe, call that index.html. So, in other words, right now I'm changing it so that you can just go to the Home page, index.html or /logs to see maybe the logs from the database. So that's a little bit nicer to put that in a separate folder, which becomes like a path on the server itself. Navigating over to Visual Studio Code, I can see that I have my Public directory. Now, I now, have the Logs directory with index.html. And then I have just, in the Root directory, another index.html file. What I want to do is add and I'm going to do this in public I'm going to add a file called I don't know script.js, main.js. Let's call it sketch.js. So I like to use sketch.js because it's a sort of naming convention for the p5 library. Maybe atypical for JavaScript. But ultimately, the goal here is to put my JavaScript code in a separate file. So I'll call that sketch.js. And then I also want to put in the Logs directory a file. And I'll just call that a logs.js just to give it a different file name. I now have separate JavaScript files for each one of these pages. I'm also going to create, just in the Root directory, another file called style.css. CSS, which stands for Cascading Style Sheets and is where you can define a lot of information about color and layout and fonts for your project, is well beyond the scope of what I'm doing in this series. But I'll show you how to put a little boilerplate in there to get you started with redesigning the page, if that's something that interests you. So step one, let's go to index.html. And let's find all of this code that was in the script tag. And let's remove it. So I'm going to save all that code. I'm going to remove it. And I'm now going to put it into sketch.js. So I just copy/pasted all of the code that was right there in the script tag in index.html and put it in a separate JavaScript file. Then in index.html, where I have that script tag, I can actually just say src="sketch.js". So, really, this is identical to what I had before. It's just that instead of having all of it in there, I'm now referencing a separate file, which is going to make things a lot easier to maintain and develop. And I'll do exactly the same thing here with the Logs file. So let me grab all of this. Let me put this in logs.js. Let me go back to index.html and save. And say src="logs.js", great. So, hopefully, the project is just going to work as it did before. I'm going to test in a second. Before I do that, let me also reference style.css. To add an external style sheet to a web page, I can use the Link element with two attributes. Well, more than two, but the key ones that I want to point out are the rel, or relationship attribute, that says, oh, this is going to be a style sheet. And then the href attribute, which is short for hypertext reference. That's just the file the text that I'm referencing, itself. And I can insert that right in the header tag of the HTML page, right where I'm referencing the p5 js libraries. I'll put that right here. I'm just going to paste this line of text in here. You can see it's a link. It's a style sheet. Its type is CSS. And the href is the file style.css. So if I put that here, and then I also if I go to index.html in the logs directory, I can put that here. But if I want to reference the same style sheet, it's up one directory from the Logs directory. So I need to say ../ which will say look for style.css one directory behind this one. The real question, now, is is anything going to break? All I've done is move the JavaScript code into a separate file and added a blank style.css style sheet. So hopefully nothing will break. It will work as is. I'm going to go over to the web page. And I'm going to refresh it. You know, one thing that I want to do, just I think, is make this image a little bit smaller. It's a little bit silly that I'm doing this now. But just to see that we can continue to edit the code, I'm going to go here and change this to 160 by 120. And refresh the page. OK, there's the image. Let me add a few things to the database. They're all going to be rainbow. And now, if I go to list Ah, OK, so one thing broke, right. I have, in the Nav bar, going to something called /all.html. And now, what I want to do is go to /logs. So, that's important for me to fix. So, let me go back to index.html and change this to logs. Also, it's worth noting that here, while I'm entering in the path to the logs, I should use something called an absolute path, which would have the slash at the beginning. So this means it's always going to go to /logs. A relative path wouldn't have that slash and would be going to wherever you are /logs. In this tiny little example doesn't make that much of a difference. But that's an important thing to mention. And I'll also go and add that into logs the logs file, here, as well. Let me go back and hit Refresh. And I should now be able go to List. It takes me to Logs. And there we go. There's all the logs from the database. And I can go back to Enter. Just to make sure this is still working, I'm going to hit mango. And then I'm going to go back to List. And I should see there's mango, there. So let's do one more thing. Let's add a little bit of CSS, just to see how that affects the layout. Well I'm going to go to style.css, which is completely empty. And let me add something for paragraph elements. So I'm going to say p and then put curly brackets in. I'm going to say padding. And I'm going to give it a padding of 10 pixels. I'm going to say backgroundcolor. And I'll give it a nice background color of #FFAAFF. I'm just making this up on the spot. I think these are semicolons, not commas. Oh, we can see, actually, Visual Studio Code is telling me what what color it is. Perfect. And so, now, if I save that, and I go back to that Logs page, we can see there we go. I've now added a little CSS for a little bit of layout. So, this is now my exercise to you. Think more carefully about the design and view of these pages. Manipulating the CSS is a good segue, also, into thinking about accessibility. In order for a website to be accessible, it should meet the Web Content Accessibility Guidelines requirements. One of the things that I use for this is a Chrome extension called WAVE, which is from WebAIM, or web accessibility in mind. I'll include a link to the WAVE evaluation tool in this video's description. And I have it already installed here in my browser. Once you have the Chrome extension installed, I can see up here in the top right, I have a little button with a W. I'm going to remove the JavaScript console and click this button. And we can see, here, ah, I have five errors. Five things about this page don't meet the accessibility guidelines. So I can hover over here and see, Image alternative text is not present. So anytime you have an image on a web page, it should have Alt text, which is a alternative text, a text description of what's in that image. That's so a screen reader somebody who uses a screen reader can hear that read out loud the contents of that image. I'm going to add that into my code. It's as easy as saying image.alt. And I'm going to say "Dan Schiffman making silly faces." And once I do that, I can go back here and refresh this page. I should build it hit the Checker again. And we can see, I have no more errors. So that's great. And you can see that the alt text is being shown here. Let's also go to the Data entry page and check for accessibility there. And we have one error, which is right here. My form doesn't have a label. So it's important for again, for a screen reader for this form to have a label to say what should go in there. So that's an easy thing for me to fix. I can go to index.html and find where I have that input. I can go here and I can add a label element. So I can just say label. Then I can say for=. And I want this label to be for this input element, so I put "mood" in here. And then, I'll just say what the label is, enter your mood. And if I go back to the page and hit Refresh, hit the WAVE checker again. Now I have no more errors. Now, of course, there's a lot more to web design and accessibility. But I just want to emphasize this as something that you should consider and think about with every web application you make. And I will include some links to resources for more about web accessibility in this video's description. So what's next for you? You can move on to the next project. One of the focuses there will be accessing data from external APIs from Node, itself and sending that information to the client. And that opens up a lot of possibilities. But there are some exercises you could try to expand what I built in this project. So one simple thing is the data logs, they just kind of are shown on that page in arbitrary order, whatever order they come back from the database. So, how might you sort them? Could you even create buttons to sort them in different ways, sort them alphabetically by mood, sort of descending by time stamp? That's something that you could try. You also might want to consider what happens when there's hundreds or thousands or, potentially, millions of entries in the database? Of course, our simple database system, with saving the base64 encoded image into the database, might break down at such scale. But even thinking about how you might have to page through all of that data, or just show the first 10 entries on one page, is something you could think about doing. In terms of thinking about how you're working with the image data, the looking at how you would save the image as a file, and save the path to that file in the database, would also be a nice exercise to try. Finally, you might think about doing something more creative with the image. After all, p5 has the full capabilities of HTML Canvas built in that library. So you could have the user draw on the image, save it to the database. Maybe you could incorporate another type of computer vision JavaScript library. There's one called faceapi.js, that can analyze the expression that the person is making in the image. So there's a lot of possibilities of sort of creative twists you could explore on just having the image from the webcam, itself. I hope you enjoyed watching me build this project. Thanks, again, so much to Joey Lee for the original Data Selfie App. Which I used to base all of this material on. And, if you're interested, I've got one more project to build as part of this series. Also, based on material from Joey Lee. And it's called The Weather Here. So stick around in the next video. I'm going to start making it. [MUSIC PLAYING]