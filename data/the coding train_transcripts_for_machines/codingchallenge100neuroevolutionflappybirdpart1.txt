oh it's time for coding challenge number 100 here we go uh in this coding challenge I am going to do something that I have been wanting to do on this channel for uh know about 100 coding challenges I am going to make a project that involves neuro evolution I am going to combine both neural networks and genetic algorithms into an agent into a simulation of a simple game and I'm going to train choochoo train that agent to play that game effectively by making decisions with a neural network and evolving its neural network with a genetic algorithm wait a bunch of explanation so this is a demonstration that versatility on github coding train contributor Eric made this is using the flappy bird clone github repository that various folks have contributed to design ideas too and it is actually running neuro evolution right now you can see these trains are kind of getting better and better at making their way through these little gaps so I'm going to program this myself now I'm gonna make a version of this in this coding challenge the difference however is I don't want to work in a sort of a simpler place so I am going to use the code from I think it was coding challenge number 31 which just is this simple version of flappy bird that I'm playing with the spacebar right now so I took out all the design stuff just to see if we can get the oh god I'm terrible at this the mechanic the mechanic of the game working now I need to move over to the white board to it for a second before I can write any code I want to talk about all of the pieces going on here alright so number one I need the I need to have the flappy bird game so you can look and find you if you wanted to recreate this coding challenge you can go and get a coding challenge number 31 I've actually made a few minor tweaks to it but I will I guess after this is over I'm gonna update those so coding challenge 31 will mirror the code as I start with then I also need the toy neural net work library which has two files associated with it matrix is and also neural I think it's just called n NJ s so this is the code for the neural network and a some code for some matrix multiplication math that's part of the neural network if you're interested in how this library was made boy do I have a lot of tutorials for you link to those somewhere in this video subscription and this by the way incidentally just just has a file for the main sketch I believe it has a file called pipe touch a s and one called I know I'm probably writing off the side here but close enough pipe digest and one called bird s so this is all the code that I'm going to start with now nowhere in here is there anything about a genetic algorithm so most of the code that I'm going to write during this coding challenge I'm going to put into a new file and I will call it GA j s there are a couple features that are that are in this neural network class that are that I put there for the purposes of being able to apply a genetic algorithm and those are a function called copy which allows me to make a complete copy of a neural network in its like current state as well as mutate which is a function that allows me to make some minor random changes to the state of that neural network and when I say state I mean all of the weights so these are some things that I'm going to definitely need to make use of what I will not be doing is I won't be training the neural network in the sort of traditional way that you might have seen in some my other videos like the doodle classifier or the XOR challenge where I'm using this thing called back propagation supervised learning what I want to do in this video is something that's akin to this idea of reinforcement learning now reinforcement learning is a field of research that's been around for a very long time it predates deep learning neural networks that sort of stuff and there's I would love to UM do lots more tutorials about reinforcement learning the recent advances that you might have seen with things like deep mind and it's Bach that learned to beat all of the Atari games those were developed with a style of reinforcement learning called a deep cue learning which uses a neural network and trains the neural network based on this reward based system so you have this idea of in reinforcement learning that you have a world the world is going to be in our case the world of flappy bird the world has a given state the agent or the entity that is being reinforced or train that is learning based on that state just taught just decides to make an action I'm going to jump up I'm going to not jump up in this case the fly bird is very simple and then based on that there is a reward that reward is fed back into the system and we kind of repeat here now here's the pig this is what makes deep reinforcement learning and other reinforcement learning scenarios very complicated let's just think about this in the case of flappy bird I am a bird I am over here I now this is the state the state could just be the pixels of the display and that's in fact what was used in this in the deep mind project I am a bird and I am looking at the state and evaluating the state I'm going to choose to make an action that choice is to jump up I now expect my reward please everybody shower me with your gifts I have made this wonderful decision to jump up the problem is how do I know if that was a good or bad decision I don't really right now I don't until much later I don't the payoff for certain things that I might do in a game scenario how do I know if I'm playing say the game chess if this move is really gonna be a good move for way down the line this is something I really need to be to figure out I think it's very calm located very quickly the good news is I can use a different system I can say you know what instead of trying to actually figure out whether it was a good or bad decision I'm just going to make a whole lot of these birds maybe like a thousand of them they will all have random neural networks random neural networks they will just make random decisions and maybe some of those random decisions happen to be better than some of the other random decisions I will then take those into a new generation and repopulate the world with a hundred new birds based off of those ones that did well over and over and over again this same principles of a genetic algorithm so now I might refer to if you have not ever worked with a genetic algorithm before I prefer to you to my the gatherer of the tutorial series okay so let's go and write a little bit of code and then we're gonna have to come back here just with the white board I know in a second but let's let's start doing a little bit of code here so I'm gonna go into the code I'm gonna go into the bird class and right here I'm noticing okay this is the function that causes the bird to jump up how is that currently decided that is currently decided in sketch KS here when I press a key this will no longer be the case this entire function is now going to be commented out I want the bird to make its own decision whether it should jump up or not so now I'm gonna go over here and I'm going to say this dot brain equals new neural network so the idea here is that the inside the bird object the bird object will have its own neural network and its neural network will be the thing that makes the decision whether it should jump or not I'm remembering this is not an original idea I have of course I will include some links in this video's description to other references and papers on neuro evolution but I also want to briefly just point out a bunch of these links which are here these are some other neuro and demonstrations that are on github from various other github users there's a flap elearning one an asteroids learning one the steering agent snake neuroevolutionary Lucian plague super mario so I'll include links to all these as well as well some of these papers and other resources in the video's description ok so now here's the thing if you watched any of my neural network tutorials you might have might remember that what do I need to put in here I need to say how many inputs I need to say how many outputs and I need to say how many hidden nodes so what goes in there this is whatever we have to return to the white board ok so here's the thing this is the game flappy bird I'm going to now architect my neural network down here I need a bunch of inputs I need a bunch of hidden and I need a bunch of outputs let's go with the easy part first the easy part here is perhaps the outputs so let's say I was playing I wanted to train an agent to play a game that used the arrow keys so the the player of the game can either move up down left or right there's four option I would have four outputs I want a vector with four outputs each representing the probability or the confidence score of whether it's the play the agent should move up move down move left or right in this case I don't need for the only decision is jump or don't jump in this case I really only need one output right I can have one output that ranges between 0 and 1 if it's greater than 0.5 jump if it's less than 0.5 don't jump let's just do that so let's do that that's gonna make our life so much easier so I'm just gonna have one output oh so simple we'll do some other I'll do some other examples in other videos with more complexity one output now how many inputs this gets a little harder now wouldn't it be nice if I could write some generic code that's basically gonna work for any game as long as I have a way of evaluating the score the game the same code will work for everything and one way of doing that would actually be the pixels of the game as inputs so maybe I take the the visuals of the game i sample it down to a lower resolution image i flatten that into an array I take the brightness of every pixel I feed that in as the inputs that's certainly one thing I could do I would love to try that as an experiment in as a counterpoint so the way I'm going to do it in this video I'm instead going to take somewhat of a higher level approach and I'm gonna do some feature extraction manually with my brain I'm going to say that I think I'm going to decide that I think that the important properties the inputs should be the Y location of the bird the X location of the closest pipe the Y location of the top pipe and the Y location of the bottom pipe how many inputs is that 4 so I'm going to have 1 2 3 4 inputs and 1 output so I've decided how many inputs and how many outputs so now the other question is how many hidden nodes should I have this isn't a very complicated problem this might work was just one hidden node it might work with no hidden layer at all even in fact it might work with just two of these inputs and be able to figure it out but let's just decide that we're also gonna use four just for the sake of having some hidden nodes we can experiment does it work better if I make 64 hidden or four or eight trial and error is your friend in machine learning systems okay so now this is now the diagram of the neural network I must sit here and connect all of the various lines alright so the inputs come in here and the output comes in here for inputs for hidden one output if you want to learn more about how a neural network works all of the internals that are going on here what all these connections are in the weights refer you back to my neural network tutorial series but this is pretty similar also to what I did in the color predictor there were three inputs and two outputs I can't remember alright so now we've decided that I want to have four inputs four hidden nodes and one output so we now have the brain of our bird and then in updates the bird is going to decide oh well this is more complicated than I thought let's write a new function let's write a function called think so in think basically what I want to do is I want to say let the output equal the this dot brain predict and I want to send in the inputs so for example the inputs have to be an array of four numbers right so they would look like something like this I'm gonna put them in there and then I'm just going to say and if the output is greater than 0.5 then this dot up right so this is the idea here that the neural network library that I'm using has a function called predict when I call that function I send in the inputs the inputs go feed through times the weights some activation function times the weights some activation function I get the output and based on that output if it's greater than 0.5 the bird jumps if it's less than 0.5 the bird doesn't do anything but this is no good here right this is just me let's just see if this works though I mean these are hardcoded inputs that never change that's not what I want but let's just at least see if I don't get any errors so I'm gonna in here now I'm gonna I'm gonna add something I'm gonna say bird dot Fink and I'm going to run the sketch again look look at that it's thinking it's jumping right it decided every time it's basically always going to be up at the top or at the bottom right because it's getting the same inputs over and over again now what I need to do is actually make inputs out of these values these values it's yposition top bottom and the exposition of the pipe okay let's do that so now I'm going to say digit I did it back in the bird I'm gonna say let inputs equal an empty array I'm going to say inputs 0 is this Birds Y position Y position inputs one is oh boy okay here's the problem now I need to know about the pipes so I am a bird and I need to know about the pipes how do I do that so maybe what I'll do is I'll take in as an argument to this function I will take in the pipes array so that is sent into the pink function now I'm gonna go here and I'm gonna say I'm just gonna do pipes index 0 this is a bad idea but let's just start with this pipes index 0 top inputs to equal pipes index 0 bottom inputs 3 equal pipes index 0 X right so this is the idea here I want all of those things to be the inputs to the neural network I don't need this anymore right because I am getting them from the properties that say and now let me run this and see what happens yeah it's kind of jumping all the time alright so this did enjoy seem to Bravo look oh it's doing something now it actually cannot look did something and making its own decisions this that was very exciting all right well what I've got some problems here number one is when I sort of made my pretend version of it I purposely made numbers between zero and one so one thing I should really do is normalize all these values that's a pretty typical thing to sort of clean your data so what I'm going to do is I'm say this stop Y divided by height this dot top divided by height and this on the pipes bottom divided by height and the pipes X divided by width so let's do that and identify opes let's get rid of this now you know does this nothing really different is gonna happen here I'm gonna run this a bunch of times oh it's true that was a good one right those are pretty good one all right so you can see that it's doing something it's trying to think but I've got another problem I don't know is pipes zero the right pipe I think I need to I probably need an algorithm to check which pipe is actually the one closest when you remember let me look at the main sketch how do I add the pipes yeah so first of all the pipes are getting added to the end and when did the if the pipe goes offscreen it gets deleted from its spot which would typically be the earliest one so he might work but let's let's be smart about this let's actually let's just say that I'm probably this is probably overdoing it but let's actually find the closest pipe so I'm gonna assume the closest pipe is pipes index 0 then I am going to look at all of the pipes starting with 1 and I'm gonna say oh actually you know what let's do this and I want closest different closest D being the closest distance to be the absolute value of this X minus closest X ok then I'm going to say let D equal we can start with 1 here absolute value of this X closest closest X and if d is less than closest D then the closest is that particular pipe and the closest D is that new distance so this is a little quick algorithm find the closest pipe here's the thing though I don't want to pipe if it's gone behind me already that one shouldn't matter I got an idea let's get rid of that absolute value thing right because as long as the distance so what I can do if okay the pipes X minus my x it's positive if it's over here and I want that to be a lower lower number but I don't want it to be negative so as long as D is lessons closest D and D is greater than zero then we're fine but the but if this is negative but it wouldn't be at the beginning okay a couple of mistakes here one is this should be pipes index I I'm going to change this to say closest is null and the closest distance is infinity I love that you could type infinity in JavaScript like knows what that is that's a number it could store in memory but what I'm actually going to do here I think this will work now and then I can start with zero right so as long as it is in front of it that's the closest one so now I can say instead of pipes index zero I'm going to say closest down here I'm gonna say closest here and closest here and here we go now we are ready Oh cannot read property top of no all right so what's going on here oops so the way I program this I've got I've got to say pipe school I took out the absolute value I've got to say pipes index I this X right because I want it to be positive like the pipe pipe pipe pipe pipe everything goes past it okay this should be fine mmm or not Oh X dot X pipe sniffs I dot X okay there we go so I can do this a bunch of times and we can see I'm gonna get a bunch of random birds that are doing sort of random things whoo all right I think this is gonna be a multi partner coding challenge I am now wrapping up the end of this first part because just to summarize what have I done so far I have built a system where I have the game flappy bird I have developed a neural network architecture for the bird to read in the States sort of evaluate the state of the game make a guess as to what it should do should it jump up should it not based on that and then I have put that into motion that neural network is part of the bird object now it has a brain 441 and then it has a think function which sends the data about the game into the neural network and decides to go up or not now what I need to do is actually implement the neuro evolution part so I've been implemented the neuro part I designed a way for the bird to make a decision based on how its evaluating the scene and what I need to do now is make a population of them and try them all and evolve them over time so I'm going to take a little break here I'm going to meditate for a minute on how much my brain doesn't work as well as a simple multilayer perceptron and I will be back in the next video to actually implement the genetic algorithm part thank you for tuning in and being on this journey with me