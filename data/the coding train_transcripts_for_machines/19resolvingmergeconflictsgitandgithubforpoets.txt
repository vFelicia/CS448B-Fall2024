(ringing bell) Hello, surprise. It's a video about Git and GitHub, and this video is about resolving merge conflicts. So, I probably should be doing this video in my poem repository, which I use for all of my intro to Git and GitHub videos but I happen to be here, streaming live, and working on this neural network library that I've been building in a bunch of other video tutorials. So, if you just watched those Git and GitHub videos all about using a poem to sort of demonstrate how Git and GitHub works, there'll be some aspects of this that are confusing, but hopefully this will be helpful anyway. I can always double back and make another video if this one doesn't work but let's just try it. So, what is a merge conflict, first of all? So, a merge conflict is when you have, let's say this is a file. In this case, it's my file called matrix.js. So, I have a file called matrix.js and it has code in it. Now, I had two people, two separate people of the internet happen to be working on this file. So, we'll call one person A and one person B. Now, any text file has lines in it. So, even if it were a poem, it would have lines of the poem. If it's source code file, it has lines of the source code. So, we can think of the lines as like one, two, three, four, five, six. Now, if person A makes a change and submits a pull request, meaning hey, hey. You, the library, please pull my changes, right? I want to push my changes to you but I'm asking, requesting that you pull my changes. If this person just made changes to lines five and six, and this person is doing the same thing but made changes to lines two and three, the Git system is smart enough to figure out how to pull both of these things in with no conflicts because there are no conflicts. If I want to accept changes to lines two and three, I can accept those at the same time, one before the other, simultaneously, can't really do it simultaneously as lines five and six. However, if right here person B makes a change to line four and person A also makes a change to line four, then we have what's known as a conflict, and typically what will happen, and what just happened to me right now is I merged this one, I merged this one. Wasn't thinking about it. I was done, it's finished, and it worked fine. It merged with no problems but now, when I went to merge this one, I got a message saying resolve conflicts. Now, there are a variety of ways you can resolve conflicts and I think that I've, in some of my previous tutorials, looked at working with Git commandline locally and I can have the text file, there but what I'm going to do is see if I can resolve the conflict just through the GitHub interface, itself. So, let's take a look at how that works. Now, once again, this isn't the best scenario and I might come back and do a followup because it would be nice to see kind of a trivial example where I can really know what the changes are but I'm just going to look and see there's a whole discussion, here, and we can see these are the files. These are the files that have conflicts in them. Matrix.js and matrix.test.js. So, hopefully, you can continue to watch this even if you don't understand what the code in the files is doing. I'm going to look and see what the conflicts are. Oh, this is definitely, (laughing) this is definitely going to go down the tubes, the internet tubes really quickly. So I'm going to click this resolve conflicts button, and now it's, look at this, okay. Alright. I'm in matrix.js. Okay, have to figure out what's going on, here. So, we can see, look. This is where the conflict is. Oh, look. (clapping) I think I know how to resolve this. Okay. So, this is where the conflict is. Now, what is it telling me, here? Mapimprovements. Master, equals, equals, equals, equals. Greater than, greater than, greater than, greater than. So, what this is showing me is this is showing me through kind of like a visual interface of the text file that there are two proposed ways that this code could run. One of the files had it this way and one of the files had it this way. In fact, the current master has it this way but the one that I'm trying to merge has it this way, and why does this one have it this way? This is the thing that I changed, I wanted this. So, it's up to me, now. There's no right or wrong answer, here. As the kind of proprietor of this GitHub repository, I've got to decide if both pull requests works on, works on, sorry, if both pull requests worked on the same line, I have to pick one. Which one do I want? I'm going to take this one at the bottom. So, I'm going to delete this. And I'm going to delete this. Whoops. What'd I just do? I'm going to delete this. (laughing) Now, if only I knew how to use a computer. I'm going to delete this and now. Are there any other conflicts? Please be. No other conflicts. Oh, I'm so lucky. I'm going to now say mark as resolved. Now, one thing you can do if you're the proprietor of a GitHub repository, you can just write to the persons making the pull requests. I'm so sorry but some conflicts arose. I love your pull requests. Do you think you could refactor it? Because you could leave this up to the contributors, certainly, but I'm here, live on the internet. Maybe I'm not live anymore, I'm recorded. And so, there we go. Oh, no. Okay. So, now I have this other file. Let's look at this. I might just quit while I'm ahead, here, but let's see if I can look at this other file. So, this code might look very strange to you. This is something called unit testing and actually related to this video series, I have a video series that I will link to in this video's description about how you can run automated tests that make sure a change in your code doesn't actually break your code. That's what this is doing, here. So, there's mapimprovements. That's the pull request and master. You know what? I think this is a very trivial change. It looks to me like this was just added at the end and there was like a line break or something that caused the merge conflict. So, this looks like something that I could actually just completely delete here, and then delete here, and this is just some new stuff that got added to the end as part of this pull request. There was like an extra line break or something, so GitHub detected a conflict but it really was not a conflict. So, now I can go and I can click mark as resolved, and look at this. Commit merge. So, here's the thing. Where am I right now? I resolved all the conflicts. Do I want to do this? I think this button, if I'm right, is not actually (laughing) I'm looking at the chat to see if anybody's complaining about what I've done, is not actually merging the pull requests. I think this is the committing the resolution of the conflicts to the pull requests. Let's find out. It's a green button. When I see a green button, it just makes me want to click it. Click. So, I think the pull request is still going to be live and active. It's taking a while, yes. All it did, yeah. All it did was fix the conflicts. Where can I find that that was done, here? Yes, that was this. So, this is me. Now there's a little note that I merged branch master into mapimprovements. That's basically saying there were conflicts between master and mapimprovements. This pull request was mapimprovements and there was me, merging them together, resolving the conflicts, and now, I can actually go ahead. The conflicts are resolved and I can (drum rolling) merge the pull requests. (laughing) Nothing exciting's going to happen. It really should. It should, like confetti should explode. Confirm and look but I can make something happen. (trumpets playing) Yay, (clapping) okay. So, that was a video about resolving merge conflicts through the GitHub interface. The sort of basic gist of it. Perhaps I missed something important that I will certainly make a followup video. So, let me know what I missed, what questions you have in the comments, and thanks for watching this video about merging, no, resolving conflicts, merging them with a pull request, something something, GitHub, I don't know. Search engine, optimize keywords, throw them in there. Okay, byebye. (cheerful music)