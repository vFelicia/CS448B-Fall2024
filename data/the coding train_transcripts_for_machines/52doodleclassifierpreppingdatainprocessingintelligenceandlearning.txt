alright I'm back and in this video I am now going to look at how to actually make use of this data set just as a reminder this is the quickdraw data set by the way there is so a much goofy fun creative interesting things you could do with this data set that have nothing to do with this whole machine learning neural network and nonsense stuff so hopefully this video will be useful for you anyway and encourage you to make creative project with the data set and I will try to link in the video's description to some projects that other people have made but let's talk about how I'm going to get access to this data and use it so one thing we know here's all that kittycats and we can say look why I really like this one so I'm going to look at this one click on it so one thing you'll notice it's got a number it actually is it's got a its it has a date when it was drawn and what country it was drawn from which is interesting by the way in light of my discussion of missing data sets and the work of me me oh that I talked about a little bit in the previous video thinking about when you're working with a data set where does it come from who collected it what's missing from that data set why are you using it is what you're using it with going to hurt somebody think about these questions now fortunately for us I think we're just gonna make a fun goofy drawing thing and I think we're going to be ok but those are really key and important questions now this is a nice little interface to look at the data on github however I can go to github quick draw dataset and here is the documentation for what kind of formats the data is actually in so if I scroll down here for a little bit we can see the data is actually available in these nd JSON files now what's interesting about this is you can see like oh look there's an ID every single drawing as a unique identifier and I know I'm standing in front of some of this so let me move this over it has a word which I would assume is the category yes what the what the player of the game said will you please draw this and when it was created what country and then the drawing itself and look at this look at all these numbers what are those numbers so if you remember from my previous video what I'm trying to do is do image classification with a simple 28 by 28 pixel image but the data itself is actually all of the two points the path of the drawing and that's why when I'm on this page as I hover over it you can actually see a replay of how the thing was drawn itself so that's something I would hope to come back and make a future video about using that data but what I actually want to use I'm going to go back to here is a different way that the data is formatted so there you can go in here there's binary files but this is what I want numpy bitmaps so a number is a special data format that stores all the pixels of a bitmap version of the drawing in a format that the Python library numpy can read very easily with n P load now if I were a person who lived in the regular world I would see this and go oh perfect I'm just going to go and do my project with numpy because that's what people do but I am a person who lives in this weird world of wanting to do things in JavaScript and in the browser and sometimes in processing so what I want to do in this video is look at how I can get access to the numpy bitmap data format in an environment that's not numpy and then kind of clean or normalize or organize the data in such way that I can use it for my machine learning doodle classification project alright so let's get the data if you click through and read this documentation you'll find that it is here the data is available on the Google cloud platform if you want to listen to me nevermind I was thinking is longer layer that I think I shall not speak about and so these are all the different formats I'm gonna go here under numpy bitmap and I'm gonna see ok look at this now I think we have to start with Rainbow Oh guess what alright so I'm gonna get the rainbow dot n py file and it's downloading it's a very large file it is about a hundred megabytes so I don't know how many drawings are in that exactly we're gonna figure that out when I open up the file but what I want to do is make for myself I want to make a little simple training and testing set with just a thousand drawings in it again to do this kind of work effectively the more data I have probably the better but to demonstrate it in a quick and friendly way in a YouTube video using a small data set it's probably gonna be best and then you the viewer could take my code do something with it kind of expand the data set alright so it's sort of downloaded by now I'm going to work with preprocessing this data in the processing programming environment which is a Java based platform I could do this in Python I could actually go directly to JavaScript now but I'm just doing this to demonstrate it and it's kind of what I would do because I know processing the best probably so I'm gonna just make a little sketch called quickdraw data let me put it on the desktop I'm gonna open up the sketch folder and I'm gonna grab this file and put it in there in theory what I should do is probably make a folder called data and put it in put it in there and then I'm just going to rename it it has a long name I'm gonna rename it to rainbow dot and py okay so now processing one of the reasons why I pick processing is it has a function called load bytes and I'm gonna say I was about to say let but I'm gonna say byte and I'm gonna say byte boy I've forgotten how to program in Java byte a data equals load bytes rainbow npy so this is a nice little function let me bring the console up here because I'm on a console prints it up to the console let's just say print line data dot length so I'm gonna run this and we can see look at that that data that array I now have 99 million bytes so interesting let's try to figure out how many images that is well I know that each image is 28 by 28 and so that's 784 total so total equals data length divided by 784 and let's see what we get now I really should do this as a floating point just whoa and let's let's print line total so that's about a hundred twentysix thousand images now the thing is this isn't actually correct and if I wanted to do some research most data files will actually have bytes at the beginning that aren't the data you want but are something called header bytes and those header bytes describe the data like this is what's in here this is what format it is this is how much of it there is and what I probably should do is look at the numpy binary file data format if I google that I'm gonna get somewhere and I'm gonna get some page that explains the npy I should just scratch that it should just look for npy file format and I'm going to find some information about how its formatted here's the thing I looked at this yesterday and I happen to know that there's about 80 extra bytes on the beginning not about exactly 80 extra bytes so what I'm actually gonna say is data dot length minus 80 because that's how many bytes that are actually in that array that have to do with the pixels and we're gonna see that's exactly how many 126,000 images so let's just see if everything's going correctly we could at least look at the first one so what I'm gonna do is I'm going to create a variable called start I'm gonna say start at 80 and then I'm going to look at 784 bytes and the index is I plus 80 and what I want to do is also create let me make an image that is 28 by 28 let me load the pixels of that image because I'm gonna write the bytes into an image so I can look at it and then I'm gonna say int Val equals now we're gonna run into an issue but I'll fix it anticipating things oh and I need to say RGB so when I say create image I've got to say RGB so value equals what did I call it just data data oh and this should be plus start data index data index that's the value and then I want to say image dot pixels I equals that value then say image update pixels and then I want to just draw that image image zero zero look at that oh is that really a rainbow I maybe I should I should have picked something else because I kinda wanted to see like is this really right so that is the first rainbow now please a little wait like why is there some yellow and some blue so I haven't been for I haven't been very thoughtful about this one thing that's happening is the byte values that are actually coming in there are signed bytes so they're going to have be between like negative 127 and positive 127 or something approximately like that so I can actually apply a bitwise operation and I just sort of like and it with some hexadecimal numbers I could kind of go through that in a different video but this is going to I believe if I'm doing this correctly change it from an unsigned byte to assigned byte to give me a range between 0 and 255 so I I should try to link to a resource about bitwise operations or make one myself at some point so now you can see okay well that's weird now it's blue well the reason why it's blue is I'm actually this is a number between 0 and 255 val is and I'm setting that number to be the pixel color but a color is an RGB color so in processing if I just wrap this in the color function it'll take that number and make it into an RGB color with that value as the red green and blue value okay so now we should see there it is there's somebody's rainbow alright so let's get a little further with this now let's make a window that's 280 by 280 let's do this let's have let's forget about this was just for my own curiosity let's say we're going to look at 200 100 images right 10 let's say 10 at 10 by 10 so I'm gonna say for int N equals 0 n is less than total and plus plus we're going to do this we're going to do this 100 times and so the start is 80 plus n times 780 right because each image is gonna start by the eighty header bytes and then how what image were on times 784 pixels so even if I just did this right now we should see there's the last rainbow I just drew them all on top of each other but now I need to get an X value which is n modulus 10 right because I want the sort of column to be modulus 10 being the remainder of dividing by 10 so the column goes 0 interview Friday night 9 0 1 and the y value to be n divided by 10 so the for the first 10 I'm in row 0 for the next 10 I'm in row 1 and so now I should get ooh what did I do wrong there did something wrong oh yeah yeah yeah whoops so I forgot this should be well okay this should be 28 and these should all be in variables right because they're each 28 by 28 pixels wide so I guess I was drawing the last one 10 pixels over that was the problem format won't do it for me okay there we go all right so they're all my rainbows I don't like how they're white on black so I'm just going to say 255 minus and come on there we go rainbows okay all right so we've done it we've accessed the data I kind of understand how it works now what I want to do is save it out into a format that I can easily use in p5 I'm thinking about this so on the one hand I could save this to like I could rewrite the data to like a JSON format that I'm happy with I'm gonna weirdly I think what I want to do is load the data in as binary into JavaScript because I think it's probably worth doing that as an exercise yourself you might think about rewrite it's it's also processing it's a bit convoluted to write out a JSON file for processing although quite possible so I think for simplicity what I want to do now is just save bytes so let's say what I but what I want to do save a file with only 1000 images in it right because I don't want to have to carry with me this 100 megabyte file while I'm just trying to learn and figure this stuff out so I make a much smaller file with just a thousand in it and so let's look at how I would do that so I'm going to create a variable I'm going to call it out data and it's a new byte array with total times 784 and again the other thing is these numbers are never gonna change so I'm kind of happy with just hard coding them in there but obviously I should refactor and make all 28 and the 784 I mean all I need is that 28 and the 80 could be a variable but we're gonna be fine so I want to save I'm gonna say about 200 287 or 100 of these images and so while I'm going through here I'm just going to do out index is zero so every time I get a new value I'm just going to say out data out index equals that value and then I'm just gonna say out index plus plus so as I'm going through I'm just going to write in this mmm so this is actually I made this into an integer so I could use it in processing I think if I do this it will be happy with me I might have this same anyway so I think that that I think is gonna be fine and then what I'm going to do is at the very end I'm gonna say save bytes what where does this Rainbows 100 I'll call it dot bin for binary Rainbows 100 bin and out data so this is a function in processing that will save that array of bytes to a binary file and calling it rainbows 100 I'm gonna run this we can see now I should be able to go to the directory we could see there it is and how big is this file it's just seventyeight kilobytes so I have a hundred of them in a just a binary file but that's not let's let's let's save a thousand of them and now that I'm saving it I think probably there's no reason for me to have the image anymore so let's because I I the image is just to like sort of see that it works so let me comment that stuff out and now I want to save rainbows 1000 and I'm gonna run it and there we are rainbows 1000 been and this is this file is just 784 kilobytes so this is really nice because now when I move over to JavaScript I could kind of use this very like lightweight data file that I can play around with and later I could go get the full numpy file or and I have this processing sketch which just allows me to quickly work with the data and resize it reformat it that sort of thing okay so this is now the end of this particular video in the next video what I'm gonna do is look at loading these data files into JavaScript and dividing them into training and testing training and testing datasets to use them ultimately with the neural network and in between you watching or me recording this particular video on the next one I will go ahead and make a bunch more of these so I will make one for trains and one for cats I think I'll just do three I don't know maybe when I come back I'll have to pick some different ones but if you know pause if you're watching this as a playlist maybe go and play around with this data yourself think about how you might draw it in a different way in processing or an mp5 and have some fun and I'll see you in the next video you