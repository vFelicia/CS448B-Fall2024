alright I am back in my quest to create a doodle classifier I finished looking at and examining and processing the data in processing using the load bytes function and rendering the images to a window and saving out the data files so what I have now and I'm gonna so I'm gonna quit processing what I did in between the previous video in this one sure save is I went oops and I created a sketch called a folder called doodle classification and in that folder there are now there's a data folder with three files cats 1,000 rainbows 1000 trains 1000 so I have 1000 train doodles 1000 rainbow doodles and 1000 cat doodles now do I really have enough data to make a highly accurate amazing impressive doodle classifier probably not I also probably don't have the neural network deep learning architecture to do it really really well because I might want to add something called a convolutional layer I will come back to that someday in the videos that I make but I just want to try to use my basic JavaScript neural network library in a very simple way use all those doodles as input to demonstrate the training process so how am I going to do this well first of all actually honestly I'm not even ready for this yet I need to just sort of see don't can I get the data into into JavaScript so if you look down started a p5 sketch and I'm going to add something like this to it function preload and I'm gonna create some variables like cats trains and what's the other thing rainbows and I'm going to say cats equals load bytes cats dot cats one thousand died in so I'm going to load use preload to load all of these files now I've got something that I need to tell you if you if it is March 2nd 2018 and you are typing this code along with me this won't work because the load bite function as of the time of recording this video is not implemented in p5 I have with this example a little extra file that I'm calling load binary j s that has a version of the load bytes function written into it and I intend to at some point make a separate video hopefully about submitting that as a pull request to p5 then load bytes will work in p5 but hopefully I'm using version 0.6 zero of p5 or at least that's the version that I want to be using off to check what I'm actually using but so a future version will hopefully have it but this is hopefully gonna work so I'm gonna try to load all three of these files so let's look one thing I wanted to mention by the way is I wanted to show you that I kind of had this moment this sort of like moments earlier today I realized like oh look at these nice small files there are seven hundred eighty four kilobytes well why are they 784 kilobytes because 784 kilobytes is 784 thousand bytes and remember each byte is one pixel of 2008 by 28 images with 784 so I have 1784 pixel images this is how binary works on the computer it's kind of excited to see that really work out so nicely the numbers work out so nicely so if I add this to my sketch and I go and refresh the page here whoops it's gonna say file not found why is it gonna say file not found because I forgot that I have them in a data directory so I need to add the data directory now I'm gonna do this now okay let's look at this Katz Katz is an object with a property called bytes and there you can see there's an array and if I kind of open this up we can see like oh boy there's a lot of stuff in there and I could kind of dig into and look these are those pixel values there's a lot of zeros because there's a lot of black pixels because it's the drawings originally are white on black I think I'm gonna alter that butBut so you could see this is working one thing you might might be new to you which is a little bit strange is that this is a you int eight array which I find to be somewhat terrifying because I'm used to just it's an array it's got stuff in it are actually there is something in JavaScript which is called a typed array it's it's kind of like a contract you make saying this is gonna be an array but you know you can I'm gonna let I'm gonna tell you what's in it this I'm only available with this kind of data in it because you can store the data in memory more efficiently and so this is a particular kind of array that can only store integers that's gonna be particularly useful for us that's cuz we're loading that binary information alright so moving on let's at least try to draw the images into the p5 canvas so that we can see that things are working correctly so I'm gonna come back I'm gonna basically now do exactly what I did in processing but in p5 and so in setup let's do the cats I'm gonna say and I'm gonna I'm gonna say let me just do 100 and I'm gonna use n to go through all 100 of these then what for each one I need to say I'm going to create an image and that you want to say I need to say create image so this is one thing that's tricky about p5 the function create image creates a basically block of pixels for you to work with create IMG creates a Dom element that can be embedded in the page and I could use either one in this case I'm just gonna make my life simpler and create an image that's 28 by 28 then what I need to do is go through all 784 pixels and I need to say image pixels index I equals cats index i + I need some offset so the offset offset is n times 784 right because each block is 784 pixels part of me wants to like split it up and have objects but whatever this is going to be fine cat + offset then I'm going to say image update pixels thank you thank you that's not a sound effect that's actually people from the hallway applauding they're not applauding for me though hopefully no one's going to come knock on the I'd say I'm being too loud load pixels and then I should be able to do exactly the same thing where I draw each image at an x and a y so X is n modulus 10 times 28 and and Y is well I'm gonna have to use floor here cuz no matter what JavaScript does floating point division and divided by 10 times 28 this is really what I did in the previous one I just want to be able to see that the stuff is coming in so this now I'm sure I've made some mistakes but let's just see if we see the cats now in the canvas let's see nothing I see nothing that is not good so let's see what could I have done Oh cats dot bytes so dot bytes I need to say there we go something's coming in but it's totally off ooh that looks like a mess what have I got wrong I plus offset I less than 784 cat's bytes image pixels I what am I missing here oh yes I forgot something super important in javascript native html5 canvas does not store each pixel as a single single integer so in processing each pixel is a single integer which can be segmented out into the rgba components the actual pixel array in JavaScript is 784 times for long there is a spot in the array for our for g4b for a so it's pixel 0 rgba pixel 1 RGB a so I need to I totally forgot I have a times 4 here then Oh oh my goodness no no I can just do this times 4 here and whoops let me zoom out I can say let me get the actual value from the array and just put it in another and I can say pixel I times four is Val and then that's the red value and these are just greyscale so plus one and I'm gonna goofily add a plus zero just through my code lines up because that's then plus two and everything I'm doing right now is just for the purpose of drawing so and then this needs to be 255 so basically I want to say what's that single value inside of the cat's byte array and I need to take that value and give it to the red green and blue parts of the image and have no transparency and now I'm expecting to see there we go there's all the cats and I prefer it to look like this and there we go so now we can see that I can get the data in to JavaScript one more thing before I move on to the next video let's prepare the data let's prepare the data into a rays of training images and testing images and there's a nice way that I've just learned that is a function I could use called sub array which allows me to essentially like pull out or point to a portion of the array so let me let me discuss what I'm gonna mean here so so this is the this is the raw data so I'm gonna just rename these like cats data cats data trains data rainbows data so I'm gonna I don't know why I'm using suddenly the underscore data naming convention but I just want to name these data because what I'm gonna do now is I'm gonna create some other arrays like cats cats training cats of trains oh boy who's bad trains training rainbows training let's just get the training data first so if I have a thousand images I want to use the first 800 as the training set and I must save the second 200 us the testing set so what I'm gonna do and we could comment all this stuff this was me just seeing that I could see it I'm going to say okay I'm going to say I want for example cats training to be a new array just a plain old array then I'm going to go from 0 all the way up to 800 and I'm going to say every element of cats training is cats data sub array and what the sub array array function wants is the beginning and the end of the sub array that I want to pull out so I always want to pull out 784 pixels essentially so I want to go from I well let's see I'm gonna go I'm gonna say offset equals I times 7 or 84 and so I want to go from offset to offset plus 784 and I think now is the time that I'm really putting this into a project that that 784 number really should be in a variable and I'm gonna do something crazy Const is a way of declaring a variable that you never intend to reassign and it's a nice way of me protecting myself from ever reassigning it by accident and I probably should be using constant a lot more places in the way that I code but I use it very rarely so I'm going to say Const length Eliane for length is 784 so i'm gonna say i times le n and this is going to be offset le n so let's just so this should if I've done this correctly we should be able to see now I'm gonna hit refresh and have a syntax error on line 45 oh I know like using Const was really exciting wasn't it partygoers are outside that door forever in this video ok subarray is not a function because what do I need to say cats data dot bytes I forgot that that array is inside of an array called bytes and now if I look at cats training we can see there's 800 784 pixel 800 arrays each ones with 784 elements in them so we can see here here's the first one here's the second one and this looks good you can see there's all the numbers this is good I now my training data now I'm actually gonna do something kind of a little bit nuts I'm gonna change this to 1000 and let's see let's call that Const total input total data I don't know I don't know these are I go to think about my variable names total data so I might change that someday and I'm gonna say if I'm going to I'm gonna say if I is less than 800 do this I'm just going to do this hard code this right now else and then I'm gonna say cats testing is also an array Oh couldn't training and testing just have the same number of characters like would be so much better if that were the case oh it's gonna my auto formats gonna change that oh well okay so now cats testing index I okay this is good now here's the thing this is correct but I've got to go from I I minus 800 so this should really be a variable I'm gonna say let I don't know what we're threshold it's very distracting well I'm gonna just call it threshold equal a floor 0.8 times total data and so now that's going to be there's going to be 800 going into training and 200 going into testing and this should not be 800 it should be threshold so this is how I'm thinking of my data I dividing it into testing and training and let's look at this threshold and now I can say cats training is 800 arrays and cats testing is 200 perfect we are doing well part of me now and I think I would like to do is actually make a variable just called cats one called trains one called rainbows I'm gonna make these objects and in the objects I'm gonna say cats training is an array and cats dot testing so I'm gonna make these properties cats training cats testing and now oops if I just look at cats sorry if I just look at cats there you are we see I have the training and the testing the testing is 200 the training is 800 boy this is tedious but it's worth it we're working on we're preparing our data by golly I'm gonna dedicate to hole to hole tutorial videos to to working on the data so now wouldn't it be nice if I made this into a function let's make this into a function let's refactor this into a function and I'm gonna just get I'm gonna I'm gonna call this prepare data call this prepare data I want to get a category and the data that goes with it so I'm adding the training and testing to a given category from given data look at me refactoring the code while I'm working and then I can just say prepare data cats cats data prepare data rainbows rainbows data and prepare data what was the last one trains trains data if I did this correctly we can look and see it cats there we go rainbows there we go and trains there we go now whether or not the data is still the correct data in there I'm just going to sort of feel somewhat confident that I did this correctly but I have now we have now we did sort of working within examining the data in processing to save some new data files with much less data in them I now in JavaScript I'm able to load those binary files and I have a little function to divide it up into training and testing so now in the next video I can finally write the piece of code that I've been wanting to do all along let neural network equal new neural network so that is what will happen in the next video and thank you for watching perhaps I will see you there you