if you've been watching these videos you've been uh you you're you are aware of objectoriented programming everything we've been doing has really been kind of built on top of objectoriented programming we write classes that are templates to make these objects that move around the screen the objects have data and functionality that manage their physics and how they're drawn on the screen and we've been doing this over and over again this is and and the principle we've been kind of living by is called encapsulation we are encapsulating all the data and functionality into this class and we're making objects from it this has been great I hope you've enjoyed it I've been enjoying it but there is a missing piece here there is another part of objectoriented programming that we haven't explored and I think it's worth exploring in this thing that we're doing whatever it may be in in making these videos or watching these videos or whatever it is we're doing and that is this idea of inheritance and polymorphism so so let's think about this for a second second um okay so right behind me over here we have this Vana White over here we have this particle system right we have this particle system and it has this kind of generic particle we've made this generic particle class I could kind of Click over here we could see it click come on and we could see sorry um we have this generic particle class has location velocity acceleration it's drawn as a circle what if however we wanted to make this particle system full of all different kinds of particles star particles and rainbow particles and twirly particles and blue particles that's they're all they look different they act different but they're all basically the same they're all in the same system they all have a location velocity and acceleration they all fall with gravity how could we do this well there's a bunch of different ways on the one hand we could just start adding lots more variables here and kind of have booleans like to keep track of which kind of particle should be drawn this way and do this thing on the other hand we could say let's make some more classes let's for example make a star particle class and and if that was our Instinct we would go over to our program and we would say hello program and we would go over here and we'd say new tab and we'd make type our new tab and we call it star particle ah star particle Tab and we say ah my star particle it's really basically the same thing as my particle so let me go over here to my particle Tab and I'm just going to select all and hit copy and then I'm going to go over here to Star particle and I'm going to hit paste and I'm going to rename this star particle and type star particle here and then I'm going to start modifying this code so let me just say something here anytime that you copy paste huge amounts of code from one sectionary program to another you should be suspicious and you should ask yourself if there if could there be a better way is there another organ is there somebody else has somebody else thought encountered this situation before and is there a better way that I could organize my code and the answer to this is yes in this scenario that we are talking ourselves through where we're going to make a new kind of particle that's essentially the same with some slight modifications this is where inheritance comes in we want to say that our star particle inherits everything that a particle ever wanted to be in its life with a few slight changes that we're going to make to it and let's look at so so before we can go and add this to this particular program let's kind of map this out how it works um over here o over over there I'll be right back okay we're back over here now okay so let's uh forget about the particle system for a second and let's just think about the animal kingdom and let's say we are writing a class called mmal uh class mammal curly bracket Clos curly bracket now mammals uh they have generally have fur they give live birth to their young uh again I have no actual knowledge of paleontology or science just you know things that I read in children's books but um but but we we could start making something up we could say okay well this is a program where we're simulating a mammal and one of the things we're going to have is a color which will be its fur color and then another thing we might maybe we'll use a Boolean to describe its gender uh you know true for female false for male something like that and and we're going to write some functions you know what do mammals do we need to have a function that we can call when it's time for the mammal to go to sleep it's going to have some code in there we need to have a function when the it's time for the mammal to eat and we'll put some code in there so you know we've rating this class and we do this all the time with our mover our particle but let's say now we're we we we have this generic mammal and now it's time pick a mammal out of a hat uh cat I can't think of anything better the internet loves cats so um we're gonna maybe we should make our class a kitten so we just make our class a kitten it's a little cuter so we're going to write a kitten Class A Class called kitten and a kitten is also going to have a fur color and a kitten is also going to have a gender and a kitten's going to eat and a kitten's going to sleep and maybe a kitten's going to you know purr and meow and have other things that it does too so how do how do we deal with this we could copy paste all this code so we start from the base mammal class or we could use the principle of inheritance and the way that we're going to use the principle of inheritance is with some new code that you well if you're watching this video hopefully you haven't seen it before you have seen it before turn it off and go you know watch Star Wars or something okay class kitten extends mammo this is pretty important I hope it's not cut off extends mammal this is the new syntax for inheritance what we're saying is kitten is a child class of mammal mammal is a parent class of kitten we also use the words super class subclass um but but but extends is the key word we write in our code to indicate that kitten extends mammal and what this means is that kitten inherits everything from mammal it's as if we wrote all the variables from mammal over here we don't have to type them or write them in they are assumed now it's as if we wrote The Identical sleep function it's as if we wrote The Identical eat function over here so these are all the things that happen with inheritance automatically boom we're done we have basically a kitten class is done so we have to ask ourselves why are we doing this in the first place we're doing this not because we want kitten to be an exact replica of a mammal we want kitten to inherit everything that a mammal has but also have some of its own things so for example uh we might add so so I want to make a list I really wish this whiteboard was bigger so someday we're gonna have some kind of sliding door whiteboard system but um what I'm going to do is I'm going to just carve carve out a little space over here in the corner and I'm going to make a list of the things that you can do with inheritance so number one is you can you inherit everything so we now we see that so a kitten has fur color gender it has a function called Sleep it has a function called eat if we remember that's what these functions were called sleep and eat okay what's another thing that we can do we can add data or functionality right so we can add data or functionality the kitten might have a an integer which is the number of whiskers for example so this is not something that all mammals have I don't think I I'm a mammal right I don't have whiskers not really uh anyway so um but kittens have whiskers so we can add variables that are only for the kitten um we can also add functions so maybe we might add a function called meow and meow is something that only kittens do not all mammals do so we're that's a piece of function we're going to add to the kitten class great so we can one of the things we can do with inheritance is we can inherit everything and then add to it the other thing we can do which uh we'll use the term is we can override functions what do we do you mean by override functions well it might be that okay so we our mammal class has a function called sleep all mammals sleep cats and dogs and uh porcupines and I don't know lots of other uh interesting mammals that I wish I could think of right now they all sleep so does a cat sleep yes a cat Does the Kitten sleeps but what if a kitten sleeps in its own special way that's different than from how all that the the the sort of the it's parent class sleep so we can override a function if I write the function sleep here what this does is it says well instead of when when I when I call kitten. sleep instead of doing the the functionality that was inherited um execute the functionality that's now in my child class that's now in my kitten class so you can override you can inherit functions but you can always rewrite it in the child class to override that functionality so that's one of the other things we can do with inheritance the fourth thing which I'm sort of making up I guess I think I might be making all of this up because I just live in a crazy world with green screens and lights and whiteboards by myself but uh this um this thing that you can do I I'm going to call is you can kind of inherit you could just I don't know what to call this you can you can override plus inherit you can modify you can kind of do both you can you can you can um I'm just going to write the word super this this fourth thing you can do is really super what it is boy do I botch this is that you could say if you wanted to I want to um modify the sleep function but also call what the what the what the um what happens in the parent sleep function I can fix this problem that we've encountered let's be a little more specific I'm going to write the mammal sleep class and the mammal sleep class sorry the mammal sleep function just has a print statement in it which says Z right you print a bunch of Z's that's what it means for a mammal to sleep you you bunch of Z's get printed out on the screen now I'm going to override it and I'm going to say sleep no no no a kitten does not Z when it sleeps what a kitten does is it says purr okay so this is overriding mammals Z kittens per boy I'm really turning into a crazy person so this is number three overriding but if we want we could both inherent and override so we could sort of inherit the function but add something to it and the way that we do that is by saying super hope I'm getting this right dos sleep so what super doleep does is it allows you call what it does is it calls the functionality that's in the super class the parent class so now for a kitten to sleep a kitten goes Pur per so without super do sleep it's just Pur without putting this in it all it's just we inherit this Z now we can do both if we wanted to we can always call the parent sleep function as well by using the keyword super okay so uh um I realize that this is a lot of information here and you probably going to need to practice this and you're going to need a scenario for which it makes sense to do this and I was I was promised myself yesterday that I was going to make these videos shorter and this one is already about 12 minutes long but eventually the video okay I had a little mishap but I just want to wrap up this video so what we've done in this video here is we've kind of mapped out what it means to do to have inheritance so um in the next video what we're actually going to go do is start we're going to we're going to look at inheriting the partic class and making a new particle object that inherits everything but adds a little bit of functionality to it so we're going to see how to do that in the next video what I would suggest to you as an exercise before you watch it is try to do that yourself Could you actually make a star particle which is everything that a particle was but draws itself as a star maybe the star spins or something like that see if you can do that yourself and um in the next video we're going to we will essentially uh that's exactly what we're going to do so um that's it for this video