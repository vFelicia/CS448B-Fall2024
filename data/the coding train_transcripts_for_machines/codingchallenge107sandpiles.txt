oh hello it's time for a coding challenge in processing which is a Java based thing you can find more about it at processing dot org I am going to attempt to create something that looks like this otherwise known as a sand pile so first thank you very much to coding trained viewer Simon Tiger who suggested this On January 26 there is a nice little discussion here a link to the numberphile video that I just watched earlier this morning now here's the thing I highly encourage you if you want to pause right now and go and watch the sand piles I can want to say sand file because it's numberphile and sand pile but anyway you don't watch that video right now to find out more about the mathematics of sand piles I'm gonna kind of skip all that and go cut right to the chase and just look at the basic idea and then what happens when we take that idea and turn it into color in a processing sketch so let me come over here and talk to you about the basic idea so first of all this video is going to the code that I'm going to write I think I've written it yet so it's going to look a lot like the game of life or maybe even like a blur image processing blur algorithm because what I'm going to do with this sand pile algorithm is look at a twodimensional space divided into cells and the core sort of the core building block here that I need to look at just in the simplest way is a 3x3 grid so ultimately I'm going to take this algorithm and apply it to a processing sketch that might be something like 600 by 600 pixels and I'm gonna let this sand piles thing happen all throughout this window and color it but what is what actually needs to happen I can reduce and describe to you in terms of just this 3x3 grid okay so why is it called sand pile well the idea is that if I have this grid here I might dribble sand on it and I'm like sort of have a few pieces of sand like there might be two pieces of sand here and three pieces of sand here and a six here one there none there none there three there five there and one there right so this idea is that each cell has a certain amount of sand in it but there is a limit there is a limit and in some sense is kind of arbitrary but it works out nicely with this number the limit is four meaning it can't actually literally is three the maximum amount of sand that in one of these cells can have in it is three pieces so this begs the question what happens if I dribble a lot and put say a hundred pieces of sand in that spot right there well let's look at it this way let's say this is the initial starting point of this sand pile there are four pieces of sand right here and no pieces of sand anywhere else what happens is this becomes this cell which has four pieces of sand loses all of its and it topples and the sand falls onto its neighbors one piece in each direction just the neighbors to the right to left the top to bottom now I'm sure is after you watch this video and you look at my code and maybe you implemented yourself well what happens if you change that number of the max to three what happens if you let the sand fall in different ways all sorts of possibilities but I'm going to follow the core sand pile algorithm the one described in the numberphile video okay so now it looks like this zero one zero zero zero zero oh no no sorry it's one zero one zero one zero so all four pieces left the center spot they went up to the right now I could have a more complex scenario for example I could have two three zero zero four two three zero zero if this is the case what happens here is the same sort of thing in that this this remains a two this now becomes a four this remains a zero this now becomes a 1 this becomes a zero this becomes a three this stays a three this becomes a one and this stays a zero now I have this and so on and so forth all of a sudden now this topples so this goes out and this becomes a 1 and this becomes a 3 and this becomes a 1 and this becomes a 0 and this other piece of sand just sort of leaves the universe here now it's interesting if we think of this as an infinite space or if we think of it maybe as it a torus weren't like wraps around to the other side there's all sorts of kind of weird possibilities we could try but ultimately the core idea is that any cell that has more than three pieces of sand loses four pieces those go out to the neighbors so for example with this 100 what hat would happen here is this would become 96 and we would add one to each of the neighbors then the next generation this would become 92 so I'm talk about generations because I'm going to on one hand we could just look at the end result but I'm gonna watch it as an animation okay that's an explanation I am now going to go and write the code I took way too long explaining that I wanted it to be much shorter but such is life all right so let's see do we think we could get some sort of result like this I don't know maybe let's try so I'm gonna close the browser I've got processing open here all I need is a setup function and a draw function and then I need I need a to do I want to use a two dimensional array let me use a two dimensional array to describe these sand piles that are part of this processing window that I'm gonna draw into so I'm gonna call that sand piles then I'm gonna create I'm gonna just start with like a 200 by 200 window that'll sort of be simple and I'm gonna you'll be interesting to think about the resolution or like sort of the size of each cell on this grid but I'm just gonna have each cell be one pixel it was an easy way for me to work and then so I need to say sand piles is a new array we with new twodimensional array with width and height spaces in it okay now then what I need to do is in draw let's write a function to render and to render I'm gonna say load pixels update pixels and I am going to loop through every single spot every single pile of sand every X and every Y and I am going to say now so what do I need to do all right let's jump so how much how much how many how much sand is there I'm going to say int num and piles index X index Y then according to that I need to set a pixel now the pixels aren't in the two dimensional array they're in a one dimensional array I have feel like I'm Sisyphus who just goes up the hill to mention about this formula from a onedimensional rate oh dude metro retro what Mitchell all right I've done this countless times but X plus y times width that's going to give me the unique integer index of the pixel associated with the XY coordinate then I just need to give that some sort of color and so let's call that Co L now I want the color to be according to the number of the color to be according to how much sand there is so we can see here in the numberphile video zero grains one grain two Grange three grains these are nice colors I'm going to be very arbitrary about this right now and I'm gonna say color color equals white and then of course you're going to all want to tell me about how I should use a switch statement but I'm just gonna say if there are zero grains of sand it should be black if there's one grain of sand it should be pink and if they're too it'll be some other color and if there are three and if someone in the slack group wants to give me a color scheme I will take it there it will be this color so let's I don't know let's do this and then let's do this there we go okay so now and then if in draw I call render what we should see right now is whoops let's save this yeah think that's good idea let's call this sand piles if I run this we should see a black window right because the these sand piles were initialized with all zeros and I'm getting some color suggestions from the chat I will come back and and use those in a little bit okay now if I were to say sand piles let's let's so what the way that image was generating the numberphile video not to spoiler alert we tell you what happens at the end of the numberphile video is that just a lot of sand is dropped in the middle so what happens we just drop a huge amount of sand in the middle and watch it topple topple topple topple rippling out so let's do that and so I'm gonna say I'm gonna just have the middle be with the sort of spot that's with divided by two height divided by two and I'm gonna put right now I'm just gonna put four four pieces of grains of sand there so let's run this again and hopes let's run this again and we should see there it is now I have a white dot in the center there because there are four grains of sand so the next thing we need to do is figure out the topple algorithm topple what happens when the sand pile topples well if it's greater than four pass out top pass one grain of sand top left right bottom and then subtract four so the first thing I need to do is probably create a so if this is my current sand pile what I want to do is create kind of like the next pile and the next pile is going to start with all zeros in it and then if a cell doesn't have four like if if a cell has less than four then it can have that same number in the next pile and then so I could go and copy over everything that's less than four and then after that I could topple things so I could probably do this in one pass but I think doing it in two passes will work that's the way I'm thinking about it right now know if you're following me but you might follow me when I'm writing the code so let's let's come back and do that now so what I'm going to do is I'm going to write a function called topple and I'm going to say int next piles is also a just a blank array and then I am going to do this same for loop to look at every single spot I'm gonna do this twice I'm not sure if this is necessary but it's a way that I'm thinking about it right now I'm gonna say okay int num I need this again how many are in that spot and if num is less than four then next piles X Y is just equal to sand piles X Y so this is me copying over every single pile of sand that doesn't need to be toppled then what I'll do afterwards is I'll do this exact same loop again but if the number is greater than or equal to four greater than or equal to four then next piles will equal what it currently was minus four so subtract those four and then all of the neighbors X plus 1 X plus 1 X minus 1 y plus 1 and y 1 will each increase by one so I need to additively because there could be multiple piles with more than four on different size he did be able to add everything together so I think if I just take the current amount of sand subtract four and then send that each each of those four grains of sand out to each of the four neighbors this should be good and then at the end these sand piles is now next piles so let's take a look at this what do I see now oh I have to call that function so I want to render in draw and a render then topple and let's actually set the frame rate to one because maybe I can see it look at that so look at that i toppled that Center cell right it was white the first frame and then it now it has each one of those neighbors just has one pile of sand one grain of sand and that should be if I look at the render function one grain of sand is pink okay I think we're done we're actually kind of done I have to deal with the edge cases and lots of other stuff but let's actually down now we could just do something goofy we're gonna be like I don't know let's just add 400 things of sand oh now I'm still at one frame per second so looking at this we can kind of watch what it's doing the sand is toppling in each of the cells of coloring now it probably would be good for me to have created a version of this that was kind of sumed in so you can see it's zooming in using like a software zoom so it's sort of blurring each one of these pixels but I might as well just kind of go for it take out this frame rate one and just watch it go so now we can see this is what's happening now all of that sand ready finished so it toppled in got done so we need more sand how much sand can I put in how about that much there we go okay so I let this run for a little bit and Wow I have to admit I picked some like kind of horrendous colors and it and it is doing something kind of beautiful and interesting and weird it's not correct and the chat pointed out to me that this should have fourfold symmetry right there's no reason why and it it has this like nice symmetric quality to it but it's not the right kind of symmetry alright so what is the problem and it did take me a little bit of time to think about this and so the problem is I believe is here this is a very dangerous thing that I'm doing the point of next piles is that I always want next piles to accumulate the sand from previous that's why I'm copying over things that are less than four and then adding up things that went in toppled and also need to subtract the four from the thing that was toppled but I'm not just subtracting the four I'm overwriting anything that was there before so it could be that two cells with more than four are near next to each other and so one gets one from the other and but then I just but I don't but I vent then as soon as I get to the next cell I don't take that in consideration more so this should actually be adding and this by the way just can be the current amount which is none so I need to add na minus four so whatever it was before I want to put in that pile all of the sand except for the four that are going out to the neighbors and I believe that if I run this we should see it be much more symmetrical and you can see that already okay so the next thing that I'm gonna do I'm gonna do two more things so there's so much you could do with this I'm not gonna do I'm gonna let you do it I'm at least gonna pick some different colors and I'm going to speed up the animation to see to be able to get to the end result a little bit more quickly alright alka in the patron sponsored group in slack has some rainbow color suggestions for me so let's put those in where are they color this first color is to 5500 the next color is to 5500 the next color is 01 8563 the next color is zero 104 255 and the last color is 120 to zero 229 I probably could use HSB color or tap the colors change over time there's so many things I could do but I'm just gonna just show you that the colors that you picked make a difference here so here we go there's our nice rainbow colors now what I want to do is I want to see the end result a bit more quickly well I mean one thing that I could do is just sit here and wait and I could if you're watching the recorded version of this I'll speed up the video to get to the end but just for this the sake of showing you how I could see it more quickly is I am going to all I need to do is call topo multiple times each time through draw so I'm going to write an extra loop in here like if I just say call topple ten times and run it we can see here that you can see it looks as if it's going faster it's not actually going faster just animating faster well it's doing ten sorry doing ten updates per frame of animation let's do a thousand there we go and I'm not so sure about these colors and then let's and of course we got an array out of bounds exception so let's fix that so we need to figure out so we need to say like as long as X plus 1 is less than width and as long as X minus 1 is greater than is greater than negative 1 I guess I could say greater than or equal to 0 and then this one I want to say if Y plus y plus 1 is less than height and this one and by the way I'm not using any I never do this but and I probably should just put the curly brackets in there but if you only ever have one line of code that comes after an if statement the curly brackets can be assumed for just that one line and then I'm gonna say if Y y 1 is greater than or equal to 0 so this will at least now fix the edge problem let's let it go as far as it can go crazy first of all the chat is done I got the wrong colors second is 255 255 0 oh yeah so I had the wrong colors oh there we go that's nicer Oh much prettier dude oh the BRIT rates gonna be a disaster on these YouTube videos this is quite lovely so the next thing I want to do is just finish this off by saying like 800 by 800 and run it oh so slow probably some kind of magical shader thing could make it happen faster let's at least I wanted to animate a little faster so let's let's topple it only a hundred times per frame and I'm gonna just work on my email and some other stuff for a little bit and then I'll be back when this gets a little further along all right it's taking a really long time to render so I think that's good enough for this coding challenge there you go sand piles in processing I cannot wait to see what people make to this this user you could we could start to do stuff where you drop the sand you could pick your own color schemes you could have the colors change over time you could render something out to a giant poster and print it I don't know there's so many possibilities if you watch the numberphile video probably get more ideas thank you for watching this coding challenge and see you in a future one on something else bye you