okay I'm back for another video about stuff that's a es6 again if you're just watching my beginner programming videos and just learned about programming you might just go back to watching those this is a little bit of behind the scenes stuff very technical but it is interesting and it can be useful the thing that I want to talk I talked in the previous video about let and var and the difference between those two things and you know you could for most sketching that I'm gonna do in p5 and make a crit weird experiments I could use them interchangeably and not worry about it too much but there is another term that you're going to see you're gonna see people saying var X if they are using style previous to es6 or 2015 ECMAScript you're gonna see let if people are using es6 a more modern style of JavaScript but you're also gonna see people using Const and what does Const mean now there is no reason you have to ever use Const ever I mean somebody I'm sure come up with a reason why you you might have to but what I'm saying is for the things that I'm making I could just use let but my code is perhaps a little less efficient in the way that it runs and uses memory so Const is only an option to help with the efficiency of how your program runs and manages memory on the computer because if you have some data if you have a variable in your program that you know it's value is never going to change the computer can be source can be smart about how it stores that information it doesn't have to like leave extra space for extra stuff now I'm kind of oversimplifying but that I think is a useful way to think about it so for example if I know that I want to have a variable called cat and I want to store in it the number 99 I don't need to say let cat if cat is never going to have another value ever I can say Const for constant because cat is going to be a constant now here's the interesting thing this makes sense when it comes to just numbers but there's more to it than that what if you're declaring a function or what if your variant object so let's at least first look at the simple simple scenario of working with numbers so I'm gonna come back over here and all of this I can do just in the JavaScript console in the browser itself so if I say let X equal fifty can you guys see this and make a little bigger now I can look at the value of x and the value of X is 50 and I could say x equals 100 and now the value of x is 100 let's do this again let's say Const y equals 50 so now I have a variable called Y which is a constant its value is 50 now I'm going to say y equals 100 uncaught type error assignment to a constant variable so you cannot assign to a constant variable you cannot reassign the value it's forever 50 so I was I feel like I need to go back to the whiteboard but I don't think I do so what does this mean in terms of objects it's a little bit strange I'm not sure I fully understand this behavior so I might have to like come back to this a little bit and I'm seeing alka putting some interesting suggestions in the chat here okay so let's look at what if I say what if I have like a particle constant particle and the particle has an X and a Y so it's really a JavaScript object oh I made it Const let's fine we know what it's going to do when it's let particle equal it's just an object like anything so this is what it is it's an object it has an X and a y it's a constant but interestingly enough when you make an object a constant that doesn't mean you can't manipulate the inner workings of the object like I can actually say particle dot x equals 200 and that is totally valid so I can change those internal variables because those internal variables themselves are not constant I can even do things like which surprised me when I first saw this I can't a particle that Z equals 50 which means I can add another property to that object but what I can't do is I can't now say particle equals I'm going to recreate a new object I'm gonna recreate that object uncaught error assignment to a constant variable I cannot suddenly say particle is now the string hello this protects me making some errors too because if I'm using a very but I can't reassign it by accident is something of a different type so I can't make it a new object so again I could use let but this is something that allows the code perhaps to run a bit faster they use a little bit less memory so if you know that this is and maybe to protect yourself against some errors so this is a useful technique and mostly I'm explaining this because when you look at examples you're gonna see it in a place where you'll see it often the way that I in mind most of my videos and the way that I've shown how to declare a function is saying function you know go like this this is a function definition I say function the name of the function parenthesis with whatever arguments are in there this is the equivalent of basically saying var go equals function or of course now we know it's actually the equivalent of saying let go equal function if I'm using es6 so if i'm declaring all these functions if i'm writing functions into my code it's often the case that i'd ever want to reassign or alter that function that function is done so function I'm just intending to use in my code so you will see this quite a bit Const go equals function so you could consider this again this is a lot now let me type this over here so you can see it so in other words what I'm saying is let's say I'm gonna have some functions function go that's one way of declaring a function the way that I typically have done in my videos but I can say Const go equals function so again while this might offer some optimization benefits it doesn't necessarily offer a lot of benefits for teaching and education especially for beginning programming which is why I will continue to use the top syntax because if I'm going to teach somebody for the first time ever how to write a function Const go equals function is a bit more probably confusing than just function go so I think that's so there was actually just an important question in the chat just now I talked a lot about scope in the previous video and I probably wanna in some of these now that I think I probably made a video just only a about the idea of scope but what how does Const affect scope so const also uses block scope let and cons both use block scope the same exact way the difference is const is a variable that can never be reassigned so one thing i should mention is actually at es6 there's also another way of declaring a function that involves equal greater than and almost it looks like an arrow this is called the arrow syntax i'm not using this yet i will come back and make a video about this so you I could go even a step further with how I might declare a function by incorporating this arrow syntax but I'm not ready for that yet I got to take little tiny steps into the es6 pool okay thanks for watching these this this video about Const I hope this helped please ask your questions and offer your Corrections in the comments and I'll see you soon thanks you