So this third video [inintelligible] forget about the numbers! I'll number them, I can't keep track of anything [ramble] but ok, so I forgot a couple of things in the previous video that I'm just gonna kind of fill in right here. One is, and I think I showed you this in one of the introductory videos about Processing but you should take note of the fact that Processing comes with a huge amount of examples So I also encourage you when you're beginning to just go through some of these basic examples particularly 'form' here you might kind of like ... well, this actually has a lot of stuff that we haven't learned yet but you can get kind of a sense what is possible to draw in Processing You might find that useful just to poke through a bunch of the examples and see what they do. The other couple things I wanted to mention is that Processing, in addition to having that reference, that I showed you on the website, you can also here under 'Help' if you are not online, you can actually get the reference by just clicking this, it's going to open the reference page. Processing downloads with the reference as well. So you can actually, from the development environment itself, look up stuff in the reference as well. The last thing that I want to mention is that you might have noticed that text is turning different colors. If I, by accident, delete this 'e', we can see that the 'lin' is in black and if I add the 'e' in lowercase it's in blue. So the Processing development environment will color the text that you are writing in different colors just as a little way of helping you along to see that you're spelling things right and what's a known word and what's an unknown word but those colors have nothing to do with how you program executes. It's just a visual help to see that you've spelled things wrong. So one thing that you might notice when I run this it's gonna say 'The function lin() does not exist' because it doesn't exist! But the function line() does exist in Processing and I would correct that by typing an 'e'. Ok ...[ramble] ... back to color! [ramble] ... so what we've done so far is we've learned about downloading Processing, running Processing, we understand about a computer graphics window, xaxis, yaxis, where the pixels are, we got a sense of different functions we can use to draw to the window but ... what about color? So one thing you'll notice if we go back and run this program you'll notice that the line is black, the rectangle seems to be white but maybe has a black out line, and the back of the window itself is just kind of this grey color. So we've never specified a single color for anything. we didn't say draw a red line, we didn't say draw a blue line, we didn't say draw a rectangle with a blue filling and a red outline. Processing just decided to use default colors which you can see are just black and white because we didn't specify. but now is the moment that we can start to look at how to specify colors. ok, so how do we do that? So one thing that we should be aware of is that any shape in Processing, take a rectangle, for example, it has both an outline, which we should really call a 'stroke', and it has also an interior, which we will call a 'fill'. So 'fill' and 'stroke' are the key words, the function names, that set color in Processing for the outline and the interior of a shape. Now a line has no fill because a line only has a stroke. But an ellipse or a rectangle has both a stroke, the outline, and a fill. [ramble] So how does this work? Let's say that we have a program which draws a rectangle at 200,150, with a width of 50, and a height of 35 pixels. So this is our program that we are writing. ...maybe kind of erase this. How do we set that rectangle's color? The way we set a shape's color is by setting the fill or stroke with the lines of code in advance of saying 'rect()' So the order of operations really matters! What we're doing is almost like the Processing program is running and there's like a thing with a pen there and it reads Oh, uhm, stroke blue! Oh, quick, let me go get a blue pen! or a red one. Whenever I get to rect() I will draw it with red. And if it says 'stroke black' it'll suddenly switch and get the black pen again! So it's reading the code step by step and setting the stroke, setting the fill, for whatever that next shape is going to be. So if I were to say stroke ... We need some arguments, right? How do we define the arguments for a color? ...and we need a fill. So that's a big question! We can see that what we're ultimately going to do is we might say Hey, I wanna have some sort of color stroke for the line, and some sort of stroke, and some sort of fill, for that rectangle, right? I wanna give the line a stroke, the rectangle a stroke and a fill. But what are those arguments? What are those arguments? How do we define color? [ramble] So first of all there are lots of ways to think about color. You might, sometime in your life, have done fingerpainting, and you had like some primary colors and you could mix them, and get others colors, that's a nice way to start thinking! So that's kind of what we're going to do, but we are not going to use those ... [ramble] We're going to mix colors, but we're going to mix digital color and digital color follows the properties of light. So we need a little bit of red some amount of red, some amount of green, and some amount of blue. and all of those together will give us a color! So that's what we're going to do. So we need three arguments, and this is what's known as RGB color. [ramble] I wanna mention that we're not gonna get into all of this right now, but Processing allows you to define color in many ways. You can define color based on something called hue, saturation, brightness. You can define color with all sorts of different amounts of ranges, but what we're going to look at is the default way that color works, it's the best way to get started and kind of just try stuff out, although I think that looking at hue, saturation, brightness is kind of important. That's probably its own video though. The default way is, again, red, green and blue. So the ranges for each one of these values is 0 to 255. So if we say '0 red' then that's NO red. If we say '255 red' that's A LOT of red, right? So you can imagine what is this color 0,255,0 if this is, again, RGB color and we're saying the fill what would this color be? No red, no blue, but turn the green switch all the way on! So that's a green color, right? Let's go take a look at that, to just prove that this works. If I make the interior of this rectangle green and the stroke of the rectangle I'm going to say is red and I'm gonna have the stroke of the line, just so that we see all three of these, as blue, and we run it again we can see now aha, we have a green rectangle with a red outline and a blue line. Why? we have all of that because that's what we specified with stroke 0 red, 0 green, 255 blue, right? So obviously, this is just sort of a very basic beginning of this, and you might start to mix colors, and imagine what does green and red make for the fill of that rectangle? Yellow! So I'm a little colorchallenged [ramble] but I have a feeling that if you found your way here you're interested in design, maybe you have some ideas yourself. So what I would say here is this is kind of all I have ... in terms of color I would encourage you to start playing around. You might have experience using Photoshop, or designing websites, and you've done a lot of stuff with color already. Processing actually, by the way, also allows you, this is a bit of a digression, to write your colors this way, so if you've ever done color for the web with this hexadecimal notation, you can also do that directly in Processing. But I think I want to focus, really, primarily on this idea of numbers red, green, blue. but ... let me add, we're only at 6 or so minutes, let me add a few more things to this equation. First of all, what if I were to make the fill 255,255,255? All the way red, all the way green, all the way blue. What do you think you gonna get? jeopardy music playing you can run it and you're going to see we have a white rectangle! again, remember this is the properties of light, so if we take all of red, all of green and all of blue, mix them together then we have white light! If we turn all the lights off, if every one of these values is 0 0,0,0 then we have black. So we only have color in all those sort of areas inbetween, so to speak so one thing that I should say is that if you want to do white, right? we said it's fill(255,255,255); or black (0,0,0); Processing allows you to do something with a little bit of shorthand, it would be very inconvenient to always have to put all three in there So if you ever specify color with one argument instead of three, it will assume what you meant to do was to use that number for all three values. so I can say [ramble] I can say fill(255); instead of fill(255,255,255); and get the same result a white rectangle. Which is interesting to note because, by the way, what if I say fill(100); ? Notice I have a grey color, a dark grey, not black, because 0 would be black, it turns out that greyscale color, by the way, anything greyscale color is a color where red = green = blue. So (100,100,100) is a slightly dark grey that we could give a shorthand as just the argument '100'. So we can both specify color as a single value for a greyscale color, or three values for red, green and blue. Two more things I wanna touch on in this video [ramble] So the other thing I wanna mention is by the way, there is a function called background() which allows me to also set the color for the background. So there is a black background which I did using a single argument, for greyscale or, I could say 0,255,0 and here's a green background with that color. So the background() function fills in the background of your Processing sketch window with a color. Now the other thing I should just mention by the way is I have been using the word 'program', your 'application', the 'Processing window', 'sketch', I wanna try to now consistently use the word 'sketch'. The word 'sketch' is kind of a word for a Processing program we think of this, sort of folder of Processing programs as your sketchbook, for this idea that one of the things that Processing allows you to do is very quickly sketch out ideas through code. So I'm just gonna say your Processing sketch now has a green background! However here is something really important! Order of operations is key, right? Just because, what is background actually doing? It fills the screen with a single color! Even though we think of the term 'background' as if it should put it behind everything but the order that this code executes is quite important! What if I were to put background at the end? What do you think is gonna happen? Will it look the same? Clearly no! Otherwise why would I be doing this? Look what happens I don't see my rectangle and line anymore. Because it drew those lines, drew the rectangle, but then it drew the background on top of it! Once we start doing animation, this idea of where the background goes is going to be truly, truly key. Ok, the other thing I should just point out, by the way, is that if I didn't set a stroke for this second rectangle, the stroke, ... of course, the background at the end the stroke from the line will carry over, which is very hard for you to see, but I can zoom in You can see that both the line and (the border of) the rectangle are blue that's because, remember when we set the stroke, it's the stroke value for all shapes that are drawn afterwards unless you override that stroke with a new value. I should also just point out look how I am typing this, the actual, these extra line breaks, and where I put the stroke and the fill, none of that really matters! I like to put these in little groups cause I'm an obsessive coder who's like ok, let me put size() and background() together, then stroke() and line() then stroke(), fill() and rect() I can read it, it makes sense but ... truly, none of that matters in fact this code would execute exactly the same way, but it's much harder to read! because the line breaks don't matter at all. Semicolon is what tells the Processing program we've reached the end of a line. .. So what is important to realize, is that the syntax, spaces and linebreaks, tend to not really matter, right? I could put a lot of spaces here, oops, I put this extra stuff, it's actually gonna run exactly the same way. but there often is a way of writing code that feels a little bit more human readable [ramble] I'm gonna do a couple more things in this video and maybe I'll fix these later, through some magic way of doing it again with better editing, or something, but, ok, so that's what I wanted to mention there ok, the other thing, [ramble] So here's the other thing, there is something you can put in your code which, in a way, like, doesn't count. if I ever typed '//' you can see suddenly this line is like a light grey and I can say this will draw a green rectangle and I can run this program and it still runs. This is what is known as a 'code comment' If you ever wanna write annotations in your code, You might do something like // TODO fix this line, I don't like the design you could add comments to yourself in the code something that you might wanna do later, just explanations of what different sections of the code are doing. Right now I feel silly to be doing this, because it's so short and obvious what's happening, although you know, these functions and numbers are somewhat cryptic, but your future self will thank your present self later if you get into the habit of writing comments into your code now, because it inevitably will happen that you work on a program for quite a while you will go on vacation or do something else that has nothing to do with sitting hunched over your computer, cause that's good for you, and when you come back to it you're not going to remember how it works or what you wanna look at and instead but if you have all those code comments in there it will allow you to get back into it more easily. So get into the habit of doing that now. So we kind of have reached the end of this first of three videos here One, talking about coordinate systems, one looking at Processing and starting to write code, now we saw a little bit about color I'm gonna give you two hints of things that you could look at and maybe I will fill them back in and practice with another video later. There is a function called colorMode() that I would encourage you to look up in the reference it's like an exercise look up 'colorMode' in the reference. What are some examples? Can you change the colorMode and define colors differently? One color mode that you can do in Processing is HSB for hue, saturation, brightness sometimes it's written as HSV, hue, saturation, value but this is another way of defining color that's different than RGB hue being the color on the colorwheel, what is the hue of a color? Is it greenish? Blue? Is it really blue? Is it really red? Saturation being 'how vibrant is the color?' And brightness being 'how bright is that color?' Is it a very dark blue or a really bright blue? So one way you can play with designing colors is hue, saturation, brightness and you can affect that with the colorMode() The other thing that I totally didn't mention at all We said that fill could have one argument, which would be a greyscale color We said that fill could have three arguments, which would be an RGB color Well here's two other amounts of arguments that fill can have Fill could have 2 arguments, which is greyscale + transparency It could also have 4 arguments which is RGB + transparency, often written as 'alpha', the alpha value. An 'alpha' of 0 means completely transparent An 'alpha' of 255 means completely opaque Now of course there is no such thing as real transparency. It's not that suddenly your physical screen will be seethrough It is this idea of creating the illusion of transparency, So if you draw a color with no transparency you will see that color literally on the screen, if you draw a color with some transparency, it will look like it blends through. and I know that I said that I wasn't really going to go through this in great detail but let's actually just look at this for a second ... let's make this rectangle much, much wider, so that we can see it This is our, we have a green background I'm gonna give this a black background, so it's a little bit easier to see, oh, that was not the fill. let's have a nice, bright green rectangle which we can see right here What if we were to draw another rectangle on top which is red and we'll do it 150, 50, with 100 pixels wide and 300 pixels high, right? Look at that. See that red rectangle right on top of that green rectangle? Right, that's 100% opaque. But what if we give it a little bit of transparency? 0 is completely transparent, 255 is completely opaque, so 127 will be right in the middle there, like 50%, if we do this, look, we can see, ah, the camera shut off ... [ramble] You can see now that there is red here that is blending with the black behind it and the red here is blending with the green behind it. Blending being, it's almost like it's a tinted lens that we put on top there. So, of course, this opens up another can of worms, There are many different ways of blending colors this is an infinite world of stuff you can look at and do all of this is contained in the reference and ... examples and through trial and error but this is to give you some beginning steps to get started. So I think in a way you have all the tools now you have all the tools to make a first design you know about the coordinate system, you know about basic shapes, and you know about color. so make yourself an alien, my little example that I always use is like this tiny little thing, person, alien whatever you call it, Zoog, You can see there are some ellipses, some rectangles and some lines you design something, share it, send it to me, You're gonna start to want to use arcs, and curves and triangles, Doing this will force you to dig into the Processing reference a bit more. So I have one more video in this little sequence which is about some other advanced drawing functions in Processing, to do more complex shapes which I think I will tack on at some point, but this is the first week or time or whatever , that's your exercise. Ok, thank you, this video is way too long! I should probably cut it into a few different ones but it is what it is right now. I'm going to have something to eat [ramble] See yourself later and I hope you are enjoying yourself and your day! Bye!