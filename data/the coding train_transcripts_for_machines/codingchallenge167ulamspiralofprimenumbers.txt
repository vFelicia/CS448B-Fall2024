hello and welcome to today's coding challenge the ulam spiral also known as the prime spiral no i actually like to say it the other way around i did a whole rehearsal and everything but fine i'm just going to keep that in now why am i doing this coding challenge you might ask i have a new system last week on the coding trains twitch stream i spun a wheel of ideas and it landed on the ulam spiral what is the ulam spiral so it's named for the polish mathematician stanislav ulam and i think that the story goes that he was sitting in a lecture board and doodling numbers drawing them in this sort of spiral pattern and then marking ones that were prime and lo and behold this pattern emerged now this like might not look too exciting to you but it's truly a mathematical wonder the set p appears to exhibit a strongly nonrandom appearance a different appearance from randomly chosen sets whose densities are like those of primes and to make this happen there are really two things that i need to figure out how to do so hopefully you're going to learn two new coding techniques one is how do i arrange numbers along a spiral pattern and two how do i write an algorithm to determine whether a number is prime or not prime composite would be the other word if it's not prime let's start by looking at the spiral pattern itself so i'm going to write the number one then i'm going to move one space to the right and draw the number two write the number two then i'm going to move up and write the number three then i'm going to move over to the left and do four and then five six all right so i'm starting with just all of the numbers between 1 and 25 we can see it ends up in a 5x5 grid let me erase those arrows there because they're a little distracting the next step of course would be for me to start marking the numbers that are prime or the numbers that are composite i could use different colors or different shapes so many visual possibilities but before i get there i want to get ahead of myself let's just see if i can figure out how to write the code to draw this spiral itself and i know that i erased those arrows and now i'm realizing i really want them in there because i need to understand how it is that i'm turning and what direction i'm going now i can clearly see this as a spiral let's begin so first things first i need to figure out where is my starting point i'm going to start in the middle of the canvas then i need to keep track of what number am i on and i'm going to start with the number one let's actually draw the number one in the center of the canvas there we go now i need to take one step to the right and increase the number what does one step to the right mean well if i want to recreate what i have on the whiteboard and have it be five by five currently my canvas is 500 by 500 so each step is 100 pixels now of course the numbers just go way off the screen and at some point i might want to save all of the information about the spiral into an array or something but just to begin i'm just going to draw a background in setup and we could see one two three but i need to once i've gotten to two turn left and move up let's go take a look at that diagram again so i need to make a rotation how often we're taking one step and then one step and then two steps and then two steps then three okay then three one two three four then four one two three four and then four aha and then it would be five because i stopped right the the prime spiral never ends in theory i'm like why is it four four and then this is wrong well this is only four but if i were to keep going i would have a fifth and i would have five and then this would be five and then i would have six and then six seven seven eight eight right so we are every two turns increasing the number of steps we go by one let's see if i can implement that hopefully it made some sense to you i think by writing the code it will further elaborate and illustrate what i'm trying to do okay so this is actually the step is actually the step size let's call it that because if num modulus 2 equals 0 right i need another variable number of steps which starts at one if num modulus two and i can actually call this you know what i think would make sense instead of call this num let's call this step like what step am i on so i have the step size the number of steps i need to take before i turn my i could maybe use some help naming these variables i might refactor this x is moving by the step size the step goes up by one if the step modulus two equals zero then there's probably a very fancy way i could do this but let me just have a variable called state and i'm going to use a switch statement as you know if you've ever watched the coding drain before i cannot possibly retain in my brain the syntax for a switch statement but let's see if i could do this for once this might be a historic moment the first time i correctly type out a switch statement without an error switch i've already forgotten case no switch state case zero uh colon i can't be right oh case zero colon yes uh x plus equals step size break case one but let me think about this right again white board case zero x goes up case one y goes because we're flipped y goes down x goes well x plus plus y minus minus x minus minus y plus plus case one y minus equals step size case 2 x i can't look at this anymore i have to figure out the syntax the chat is telling me parentheses around state oh i think i got it right i just was missing the parentheses i think this is right move to the right up to the left down if step modulus 2 equals the state should change state equals state plus 1. ah i need to get rid of this all right so that was wrong let me make the frame rate 1 just so we can watch it more slowly one two three no no turn not up there turn there so first of all i need to as the state gets to four cycle it back down to zero so i can use the modulo operator no not modulus 2 not modulus 2. it's modulus the whole point of this was not every 2 i don't know why i wrote two in there with the whole i just worked out this whole thing where it's modulo one then modulo then move go two before you turn then go three before you turn but i need to do two of the same step size before i turn not before i turn before i change the step size oh not step size number of steps this is why my variables aren't named very well every number should be a turn now there we go okay that's this is i'm getting somewhere every number is a term i don't know if i really need another variable but if i add another variable i'm pretty sure i can execute this and then we can go back and see if it's unnecessary so i'm gonna do like turn counter equals zero so this is a turn so every time i turn i increase the turn counter and if the turn counter modulo 2 is zero then the number of steps i need to take increases oh is sour this is so frustrating what a simple idea and yet i seem to have gotten it wrong hold on let's just get this right the first time through the state is zero and it moves over by one then step now becomes two you know what this is a little bit silly but this should definitely be down here and you know what that was actually just the problem why was that the only problem but that was the problem but i was trying to figure it out i needed to like think it through but i just moved it and it worked but i i realized that as i was going because the values are all correct for what i want to do but i increased the step at the wrong time that means that the order of operations here is important check if i need to change my state do i need to turn if i do turn every two turns change the number of steps before which i turn and we can put this at we can comment this out the frame rate and we can see it fill up super fast now let's make this a bit higher resolution just to be able to see more numbers at first i think it'll be 25 by 25 if the step size is 20 and then of course i need to have the text size be mapped to the size of what i'm doing here let's actually just see what happens if i just set the text size to step size yeah that works pretty well but i think actually i don't feel now that i need to count and i think that it would be nicer for me to just actually draw a rectangle in each of these spots and i that actually can be a square beautiful so i think there's a lot of fun to be had just with that spiral pattern and probably i could have done something where i draw it all at once instead of drawing it animate the spiral but what i like about what i'm doing is i can choose to visualize this in a variety of different forms for example what if i want to draw a dot at each one of these spots and connect those dots with a line so this is it with dots but let me add previous x in previous y ooh so this is a nice little happy accident where i never actually moved the previous x so all the lines are being drawn from the center kind of a nice little pattern there so save the previous one there we go so now i'm drawing it connected ooh i'm liking this very much already is still going even after it's filled the space entirely so it would make sense for me to put some type of exit condition in here so what is the total steps it's the number of columns and rows in this grid the number of columns is the width of the canvas divided by the step size so i could calculate that really quickly here and again it's a square so what i'm doing is a little bit unnecessary but just in case we were to do it a different way maybe so now in theory once the step has reached the total number of steps it's traversed every single spot i can just stop the animation from happening by calling no loop let's wait and see oh no look at that empty spot that should do the trick are you ready are you ready for the ulam spiral now remember the idea of the ulam spiral the prime spiral is for me to note to render to draw a different color a point a dot at every one of these numbers that happens to be a prime number what is a prime number a prime number is any natural number for which there are two no two other natural numbers besides itself and one which when multiplied together equal that number it has no factors other than itself and one one is prime two is prime aha two by the way as we're going to see is the only even number that is prime right because any other even number is divisible by 2. so 2 being the only even number that's prime which really makes it kind of odd somebody on twitter sent me that joke so i really can't take credit for it uh three prime four not prime five prime and here we are seeing what is the magic the sort of surprising beauty of the ulam spiral why are the prime numbers arranged so often in these diagonals now we're using very very few here so we're barely scratching the surface of this but let's go and actually implement this now in our code so we can see many more numbers of the prime spiral oh dear i have made a terrible terrible mistake the definition of a prime number my definition was pretty correct but i missed a very important point which is to say a prime number is a natural number greater than one so let me come over here and erase this and fix it the 1 is not a prime number and yes i think 2 will never be in a diagonal with any other prime because it is an even number and this diagonal will we only have even numbers in it and so the next thing i need to do is write a function that receives a number and returns true or false depending on whether it's prime now certainly i could use some kind of prebuilt lookup table of primes but let's write the algorithm i'm sure this is something i've done before although i have no immediate memory of doing so so what do i need to do i need to figure out if any other number other than itself or 1 is a factor of value so i can look at every number starting at 2 all the way up to value and if value modulo i is zero i think i better take a bit of a minute more to explain this to understand this let's take a scenario let's say i'm trying to determine if the number seven which we know is prime is prime so in the function the variable value would have the numbers would be the number seven so i want to take the number seven and test whether it's divisible by any number from two all the way up to itself how do i know if a number is divisible by another one well if i take that number divide it by that number and get a remainder of zero then it is divisible it is a factor of that number and how do i get the remainder of division that's what the modulo operator does seven modulo two is one seven modulo three is one seven modulo four is three seven modulo five is two seven modulus six is one so seven is prime because none of these are zero now if i was using eight as soon as i did eight modulo two i'd get zero and so i know eight is not prime because one of them one of those values of the modulo operation returns zero however i don't need to do anything past half of the number right because i know that you know if i'm taking the number 16 for example you know 16 divided by 2 is 8. there's nothing that you could no number greater than 8 could you multiply by to get 16. so i can actually my iter my loop can go from 2 all the way up to value divided by 2. so up to value divided by 2 i'm going to create a variable called primey i'm going to assume the value of it is prime if value modulo i equals zero primey equals false and i can break out of the loop and then i can say return primey so i've written my function just to test if it works i can say is prime and by the way you can do this now in the p5 web editor you can execute code in the console is prime 7 true is prime 10 false alright so hopefully it works correctly what's that i can do better than just divided by two thank you live twitch chat that's participating in this recording session i can do all the way up to square root of the number since i can only go up to square root of the number the number squared and never higher so that's possibly one additional optimization well a value but square root is a slow operation so i could even do a test of like i squared or something but this is too much like i don't really need to worry about optimizing this right now um if i wanted to optimize the visualization it probably would make sense for me to like precompute up a whole bunch of primes and calculating whether a number is prime in optimal ways is the subject for another video i would love to hear your favorite algorithm for doing so in the comments and maybe i can return and look at some of those in a future live stream or video but let me make sure my square root possibility works no 25 is not prime less than or equal to it must be there yes obviously i need to check five okay i can't check only up to the square root i've got to check the square root 7 is prime let's try a much higher prime number 2 1 3 7. let's give that one a whirl there we go i think my function is working all right so let's try only drawing the circle now if the value is prime let's make the circle a little bit bigger just so we can see it and drum roll please looks pretty great oh dear have i let one be prime again oh that's a nice fix to it there we go now i've gotten rid of one as prime well this is just lovely let's see how far we can push this just in p5 itself changing the step size to five and while this is running in the background let me just finish off this video by very quickly porting this to processing which is a nice environment for me to try to render a really high resolution image and the other thing we're going to get is you get to see the newest processing for beta hey i actually haven't downloaded it it's processing 4.0 beta 5 as of february 3rd 2022. today is february 11 2022 and if you haven't seen it processing four has a theme selector but this one is my favorite all right so this did not continue to animate because the canvas will go to sleep in the background if it's not currently live also um i realize now this i don't need the break i can just say return false right here and i actually don't need this primary variable if i get to the end i can just return true so i was struggling to name that and now i've even made it simpler so let's leave this running in the background i'm going to take all of this code and i'm going to copy paste it into processing and i'm going to use my magic typing power to very quickly port this over from javascript into java which is the programming language behind processing well that was surprisingly easy let's check on our browser still churning away in processing i am going to remove the lines and i am going to do the entire thing all at once so instead of drawing it as an animation i just want to see the whole thing all at once so let me circle back and just say a few quick notes about this conversion so variables need types in processing that's what int is for for integer functions need to specify their return type so i've got to specify boolean again the argument needs a data type uh i don't if a function doesn't return something i say void create canvas's size otherwise pretty much everything is the same and there we go boom just like that that's even uh higher finer higher resolution now let's make the step size one we can zoom into it and see there we go let's see how far we can push this let's say at the end save prime spiral dot png and let's make this i don't know 1920 by 1920. let's see how long this takes to compute whoa amazing i can look at the image i just saved and i can zoom way into it and see there we've got the prime spiral this one is still humming along so if you want to understand more about the ulam spiral and the prime spiral there's a wonderful number file video that i haven't watched all the way through because i didn't want it to inform what i'm doing so much but as soon as i stop recording this i'm going to go and watch it and i'll i'll link to it in the video description obviously there's other references online that you could read about like this article from the american mathematical monthly which talks about how the lines correspond to quadratic forms i'm also going to put up on the screen here i'll do this later i'm going to make a version of this spiral where i randomly pick points to draw a circle for whether or not they're prime but that distribution of how many points i pick randomly will follow the same distribution of prime numbers that distribution is referenced here in this paper as log n over n so we can see are we is there really a pattern to the primes or is it just random i expect as i'm showing you there really is a pattern there what other beauty can you find in the ulam spiral in the prime spiral i want you to show me so take this code try color try shapes try 3d i don't know anything that you could imagine and share it with me in the video description i'll include links on how you can do that and i can't wait to see you on the next coding challenge goodbye choo choo