Welcome to another quick Coding Rainbow Coding Challenge. I'm going to see how long it takes to program a mitosis simulation. Now, I should really admit that this is not really going to be precisely a simulation of mitosis, which is a complex, interesting, biological process. I'm actually just going to be sort of inspired by this idea and make a very, very simple example of a bunch of bubble shapes floating on the screen, and as you click on them, they split into two. So those bubble shapes, those circles, will represent cells. You click on them. Those cells will split into two, and then you click on those, and those will split. And from there, hopefully, maybe some of you watching this video will take my example and be inspired to read about mitosis and other biological processes and make more complex, sophisticated, and interesting interactive examples. But I already talked for 48 seconds. Let's go. I want to see if I can wrap this up in about 10 minutes. Let's see how that goes. I'm sure, by the end, we'll find out it was much longer. So I've got an empty JavaScript file here, and as always not as always, but as in a lot of these, I'm using something called P5JS, which has a setup and a draw. And the main thing that I want to do is I need a cell object. I need an object on the screen to represent this idea of a cell. And so a way that I'm going to do that is with a constructor function, as you've seen now if you've watched any of these other coding challenges. And I'm going to do something a little bit different. I'm going to use a vector object to store the cell object's position. So createVector is a function that creates a vector, a vector being a pairing of components, an x and a y. There's a lot more to vectors. I would encourage you to check out my Nature of Code videos and tutorials. Oh, no, no, no, no promotional stuff in these coding challenges, but if you want more, you can take a look at those. And then I'm also going to give this it's going to be very important for it to have a radius because I'm going to use the radius when the cell splits, and it has a radius of 20, the two children cells, so to speak, will have radii of 10. So I'm going to start it with a radius of 20, and I'm going to give it I want them to move around the screen, whoops, so I'm going to say this.move equals function. And I'm going to say this.show equals function, and let's first just show it, ellipse at this.pos.x, this.pos.y. So pos is the vector. Pos has, built into it, an x and a y. So when I want to draw the circle, I want to draw it at this.pos.x and this.pos.y. this.r, this.r. And I already am starting to feel like this is enough code for me to just go and put it in a new separate file, so I'm going to make a file called cell.js, and I'm going to paste it in there. And as always, if I make another JavaScript file that I'm going to use, I need to go to my HTML file and add that in. So I hope if, you're trying to program along with me, you're pausing to do some of this stuff, as I'm doing it kind of quickly. So now, we should be able to see, at the very least, that I can make a single cell. And I'm going to make a canvas that's 400 and 400 pixels wide. I'm going to give it a dark grayish background, and I'm going to say cell equals new Cell and cell.move, cell.show. So if I refresh this, we should see where's that cell? It's up there in the top left corner, so this is no good. Clearly, what I want is for my cell to start somewhere not the top left corner. What might be useful right now would be to have it start at a random location. So when I said createVector with no arguments, it automatically made a vector with an x of 0 and a y of 0. Now, I want a vector with a random width and a random height, giving it a random position in the window, so you can see, each time I refresh this sketch, it starts in a new place. And I am calling a function called move, but it's not moving anywhere. Why is it not moving anywhere? Because if I look at my code, I didn't write anything in the move function. So one thing I could do oh, this is exciting. I could make a variable. I'm going to call it change for no, I'll call it velocity. It's kind of like its velocity, vel, and I'm going to say p5.vector.random. Oh, camera. random2D. Sorry about that everybody. I forgot a crucial thing, which is to rehit this button. So here I am. I'm back, and there is a function in P5 called random2D, which I call statically on this sort of idea of a P5 vector, which gives me a random vector. So if I say that, and then if I say this.pos.add that, what this is doing is it's actually saying take that random velocity, add it to position. I could do this all with just this.x and this.y, which I've done in other videos, but kind of give you a little taste of vectors in P5 here in this one. So now, if I refresh this, you should see there we go. I want to get it somewhere more in the middle. You can see it kind of like jiggling around. Really wants to pick random locations on the bottom. You can see, here's its random nervous movement. Now, if you are following along, I encourage you to think about other ways to have this move around the screen based on all sorts of possibilities. Steering behaviors would be a great thing to look into. That's also why I'm building this with vectors, because I have a lot of other examples along these lines that you could take a look at. But one thing I want to do is I want it to be bigger, and also, I think I want to give it a color. So I'm going to give it a color, which is going to be I'm going to call that variable c. And I'm going to make in P5, I'm going to give it a random red amount and a random blue amount. And I'm going to have that range as at least starting at 100. And then I'm going to say fill this.c, and I'm going to say what am I going to say next? And I'm going to say no stroke. So now, here we go. We can see, each time, I get a random circle with a slightly different color somewhere in the window moving randomly. So this is good. Now, what I want is to be able to click on it, and when I click on it, have it split into two. So I need a new data structure here. I need a data structure that keeps track of a list of these cell objects. Clearly, just one is not good enough, so what I'm going to need is an array. So let's go over here to sketch, and let's change this to cells, and make that an array. And then I'm going to say cells.push cell. So in setup, I'm still going to make one new cell object. Oh, and this is the array, so this is cells. It's a little confusing to look at. Everything is the word cell, but let's unpack this for a second. Capital Cell, the name of the constructor function that makes cell objects. Lowercase cell, an individual variable holding one cell object. Lowercase cell plural, the array holding a list of cell objects. So I make one cell object stored in this variable and immediately put it in the array. You know what? It's a little bit silly that I did that because this could be written much more compactly like this. I just want to make a new cell object and put it in the array. Why not write it that way? So let's now run this, and we can see, oh, what's going on? I don't see anything. Let's look I got some errors. Cell is not defined. Why is it not defined? Look down here. I need to deal with the fact that I have an array. So there is no such thing as an individual cell. There is only the array. So what do I do? For var i equals 0 i is less than cells.length i++. By the way, you are doomed. If you are watching these videos, you are doomed to type for var i equals 0 i is less than blank.length i++ for the rest of your life. Just letting you know that. It's a nice thing to type. I enjoy it. So now, I want to move no matter how many cells there are, I want to move and show the cells. So now, there we go. We've got our one cell. When I click on it, I want it to split. We are trucking along now. Eight minutes. We're going to have this mitosis simulation wrapped up in just a few minutes. What are we missing here? We need a mechanism to know if the user has clicked the mouse, and then we need a mechanism to know if the user has clicked the mouse on a particular cell object. So knowing if the user has clicked the mouse is easy because I can just say function mousePressed, which is a global event in P5, which just detects the mouse has been pressed. And then what I need to do here what do I need to do? I also need to loop through all of these cell objects. Whoops. I'm very obsessed with indentation. Apologies. So I need to say if cells index i, what, clicked mouseX, mouseY. What's going on here? So I just realized there's a really common thing that you might think to do. mousePressed is a global function to detect if the user clicks the mouse. Now, with dom elements, like a button or a piece of text or the full canvas, anything on a web page, you can attach an event to a particular object to know if you clicked only on that object. But this is stuff that we're drawing in a canvas, so these are just pixels. It's up to us to create that mechanism ourselves. And the way that we're going to create that mechanism is by sticking with the mouse is clicked anywhere, but then checking everything and seeing if the mouse is clicked on one of those things. So I'm going to write a new function called clicked inside of the cell object. And what am I going to do in that function? I'm going to say this.clicked equals function, and I need to check it against a particular by passing in mouse X and mouse Y. So I need an X and a Y as arguments to this particular function. And what I want to do is I want to know the distance between this cell's position, its X and Y, and the X and Y that I'm checking. And then if that distance is less than what the radius, then I've clicked on it. Return true or return false. So because I'm going to handle the stuff with the clicking elsewhere, I want this function to do the figuring out but just send back the value true or false. So now if I go back here, I can at least say check to see if this is working by putting a console.logged. OK, here we go. Dramatic drum roll please. [IMITATING DRUM ROLL] Look, I'm clicking over here and I don't see anything. I'm clicking over here and I don't see anything. And look at that, I'm clicking on it. And I look let me go right to the edge. Nothing. Let me click on it. So we've now at least determined we know how to figure out, am I clicking on that or am I clicking on something else? And just to be sure that this is really working, let's also at the beginning add two cells to this array. And maybe I'm going to make the canvas a little bit bigger. 700, 700 should be fine. And let me give myself more space here. There we go. OK, so now I should be able to click here, and I see CLICKED. Anywhere here, nothing. And if I click here, also CLICKED. So I'm clicking on any, there we go. So now what happens if I click on one of them? I need to mitosis. I need that cell to split into two copies of itself. How can I do that? This is exciting. Well there's so many ways you could do this, I can't think of all of them at once. Let's do it in a sort of interesting way I think. What if I, inside the cell, added a function called mitosis? And that function actually makes two new cells. And how does it make two new cells? It makes two new cells how? At its position where it is with the same color with half the radius. So basically what I want to say is, make a cell at this cell's position with this cell's radius divided by 2 and with this cell's color. Cell A and cell B. I want to make two new cells like this. And you know what? Forget about making two. Let's just make one, because let's have a function that's called I'll call it mitosis, but let's just make one. Because what can I do? I could say return that cell, right? So this object knows how to make a new cell with its material and return it. Now there's all sorts of fancy ways to copy and clone objects, but I think an easy way of doing it is just make a new object with this object's data. This is a nice way of doing it, but this won't actually work, right? Look at the constructor function, look at those parentheses. There's nothing in them. So I need to be able to have the constructor function receive arguments. It needs to receive a position, a radius, and a color. So I'm going to change this to get a position, a radius a color, sorry and a position. So now this works. If I make the cell with position, I get it. If I make it with a radius, it fills it. If I made it with a color, it fills it. Guess what? I'm going to show you guys something wildly interesting. Off topic, but super useful. The problem is, this is how I made the cell out here. I made the cell with no arguments. In here, I made the cell with arguments. How could I make a cell that if I make it with an argument, I get I use that argument? If I make it with no argument, I get a default value? I'm going to show this to you. Well, can I actually do this? There might be a slight problem with what I'm writing here, but I'm going to show this to you. I'm just trying to remember what I had. Something like this. So I had to really think for a second. So I don't know. This should be fine. You can put function expressions anywhere, yes? So what's going on here? I got two pipes, I've got pos, two pipes, then createVector. Let's just see if this even works or gives me an error. Amazingly, it's working. So what's happening here? Let's say you call new cell, and you call it with this you call it with an actual value. Well that actual value exists and so it gets assigned to the object's variable. One of the funny things about JavaScript is, absolutely anything can get evaluated to true or false. So if you have a variable that has a value, it gets evaluated to true, basically. If you have a variable that you didn't actually ever assign anything, its value is undefined. And undefined gets evaluated to false. So pos, if it's not defined, is false. So if it's false I want "or," so I want to assign this.pos to this if it's true, or if it's not true, this other value. So this is a way of having optional arguments to constructor. Now it's it's sort of tricky. They're not all optional because you have to have them still in the right order, and then I should make a whole video just about this topic. But I'm off the beaten path a little bit too much here. That's about enough, I think, to show you. So now we can see and what's happening here? I'm still got my CLICKED going, and now what can I do here? Instead of if the cell is clicked, this is what I want. Var cellA=cells index i.mitosis. Remember, that function makes a new cell. And I'm just going to do this twice. What I'm doing now is saying if that cell is clicked on, make two new cells from that cell's mitosis function. And then what? cells.push(cellA), cells.push(cellB). And guess what? We could be, once again, more concise by just doing this. And incidentally, you can see now that if I wanted a cell to split into five, I could just have a little loop that runs that does this five times. So let's see what happens here. Oops, do I have an error? Oops. Let me zoom out. Oh no, they're just up top. Click. Whoa, whoa, whoa, craziness. It's just moving faster, whoa. And I still only see one. What's going on? I I know what the problem is. Oh, lots of little tiny lessons inside of these larger ideas. OK, let's look at what the problem is. Look at this. This .pos equals pos or create vector. So when pos is something, it gets assigned to this .pos. When it's not something, a new vector is made. Guess what? Guess what? We've made a fatal error here. Here is a cell. In the computer's memory, here is the data for its position. Now we made a new cell. Two new cells. And so this is cell.pos. Now we have cellA.pos, and now we also have cellB.pos. They are all pointing to that same vector. Not the same exact vector the same data. So if I move this one, this one moves. And they all have the same exact location. They can't move independently from each other. So I don't want to do that. I need to take this and copy it so that cell B copy it. So this is called, like, variable this is called a lot of things. I have a video about this, another one. But this is the idea of pass by reference, pass by copy. And what I need to do here is I need to make sure I'm thoughtful here and I make a copy of it. pos. oh, this is going to be bad. Oh, I've made this so extra complicated for no good reason. This is going to give me an error. "Cannot read property copy of undefined." Yeah, right. So it can't copy if it doesn't exist. So I got to write a more complex algorithm here, which is just if (pos), this.pos equals pos.copy. I just have to break this out. Otherwise this.pos equals a new vector. So this is just a little bit more of a longwinded write way of writing this for an optional argument. If you're getting a position argument, then set this object's position to that argument's copy. Otherwise, make a new random vector. And this should be OK now, so let's go back. What happened to my browser? I lost the browser. Come back to me, browser. Mitosis. OK, here we go. Click. Now let's click on it. Oh yes, they're there, you just can't see them. And I clicked a bunch of times. I made so many little children. OK, hold on a second here. So in order to figure out if this is really working, it would be I need to do a couple of things. One is one way just to sort of visually see what's going on is, let me add a little bit of alpha. Is this going to work? I hope this works. That doesn't. Hold on. OK, hold on. I'll just put the alpha I'm sorry. I'm going to put the alpha here. There you go. So you can see oh, why did it it made so many. Oh, you know why it made so many? That was kind of glorious. Look how many we're making. So why did make so many? Oh, this is fascinating. So the reason it made so many is, look at this. I'm looping through the array, right? I'm saying, let's think about this over here. I've got this array with, like, two cells in it. Cell and cell. I get to this one, I click on it. So I add two more. And then I go check this one. But now these other ones are being checked. My mouse still click, so I'm adding to the array while I'm trying to get to the end in my loop, which is a bit of a problem. So we can actually solve this problem by going through the array backwards. If I go through the array backwards I can also add to the beginning, but that's going to make things really wonky. If I'm going through the array backwards I can add things onto the end without messing up my iterative thing that I'm doing. So I'm going to say cells.length1. That's starting at the end. i is greater than or equal to zero, and i minus minus. OK, so here we go. These are dark. Let's look at this one, zoom in. We're going to click on it, and you can see now there's just two there. And if I click on one of those, that one, it split into two as well. So and one thing is I'm by the way, if they're overlapping and I click, all of them are going to split. But that's a problem you can worry about for another time. But let's at least fix one more thing here, which is that I also might as well say splice(i). So what does this do? The moment that I click on a particular cell, add two new cells to the array, and delete that one so that the cell that was clicked on is cell i. So I'm deleting that one and then I'm adding two new cells. So the two new cells get added and the old one gets deleted. We can go back. I don't I don't know why. Maybe I should have a brighter background. Someone someone make me a nice visual design for this example with nice colors and interesting bacterialookinglike things. Let's try this. There we go, that's nicer. So if I click on here you can see two. And you know what I don't love about this? They both start right where they both start right where that first one is. I feel like I want to give them a little separation. A little bit of like, almost as if a burst outward. So at least what I'm going to do is say this.new. And by the way, I'm going to say oh, no. Sorry. I'm going to make a new position, equals CreateVector(this.pos). I'm trying to think of the it's like, the code gets so long in a given line. I don't know why I'm deciding I need to fix this for here. But what I want to do is this.pos.x+random. Actually, you know what? I'm just going to I'm just going to set it to the right. Oh no, no. It has to be random because one goes to the right. So oh yeah. Minus plus, sorry. So I'm going to sorry. Offset=random(10, 10). And newpos equals this.pos+ offset comma this.pos. You know what I can do? I'm sorry. this.pos.x+= this. Sorry, I know I was thinking about this through way too many times in my head, of like a nice concise way of writing it. This is pretty good. I just want to before I make that new cell, I want to just shove its position to the right or the left somewhat randomly so that the new cells aren't in exactly the same position. And also, r divided by 2. Dividing it in half, while probably accurate in some way, it just gets so small so fast. So I'm going to just multiply it by like 0.8 to have it just be 80% the size. Now, I guess 10 pixels is oh, you know what? I should just make it random based on r. And that might do the trick to give it oops. That's too much, right? Whoa. Way too much, way too much. There we go. That's kind of what I wanted. It's still too much a little bit. So I don't I don't know what I'm doing here. Someone will come up with a better. Really what I want, and I'm going to I'm going to comment this out because it's really not a crucial detail. Do you know what I want? I want a system where the bacteria are moving not just randomly, so that when you click on it there's a bit of a burst. And if they have some sort of physics to them, their velocity would be pointed out in opposite directions, so you might see more of a split there in that sense. So this is the basic idea. You can see as I click on these, they separate. I'm going to let this run for a little while, and the cells are splitting. So, I don't know. This was 25 minutes. Oh my goodness. 25 minutes mitosis example. I got to just stop now. Hopefully you will take this idea and maybe actually build more features into it. The motion could be more interesting, when they split could be something different. What happens if they bump into each other? Maybe they come back together. Can you take two and make one that's bigger? What other types of things could you pass? What if they each have a label and that label gets passed? So many possibilities. Please make some variation on this. Read about actual mitosis and teach me something about it and share it in the comments or tweet at me. And I'll look forward to seeing you next time.