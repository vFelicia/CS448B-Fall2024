oh school for poetic computation I have a new uh coding Rainbow theme song uh I'm not ready to play it for you yet however in the background right now are the instrumentals for this theme song uh and I see that things are working uh please let me know in the chat if you can hear me and see me okay uh yeah okay I see that I have a green bars for audio so anyway welcome my name is Dan uh I here live at the school for poetic computation in New York City in the West Village uh the school is actually having their final showcase this week on um Saturday and Sunday if you happen to be in the New York City area and want to come see the projects of uh 12 students here and what they're making and working on please do um and so so first of all okay if you're watching this as an archive video on YouTube uh check this video's description there'll be links to time codes where various tutorials will happen also at some point uh this will be about a 2hour session I hope that at least three three or four Standalone 10 to 20 minute video tutorials will come out of it so you can look for those separate videos if you don't want to watch this long probably messy and Scattered uh live stream thing um but I I'm a little bit uh out of sorts this morning and I know that uh something is going on here when uh you know one of the things that I do so I teach these classes at a school called New York University for For Better or Worse um and I have this habit of um if I have to teach say on a Tuesday or a Thursday or a Friday the night before I'm always up late looking at things and trying to prepare some example or getting panicked and I'm anxiety ridden and strangely that hasn't happened to me um doing these live sessions I just kind of show up turn on but it started last night so somebody had suggested um uh oh verto in the chat asked did you do the KH Academy recording I did not KH Academy was having some sort of video contest and I was like oh maybe I'll make a video for it and I don't think I ever did uh people are here hoping for dancing that's interesting it'll happen I'm sure um so uh one of the things that I have associated with my channel here is a GitHub repository called rainbow topics and a topic that I I will tackle that I am planning to tackle at some point though not today for the reasons that I'm telling you this ridiculous story that probably nobody cares about um so there is oh I put this in um one of the topics is something called navier Stokes which is a particular kind of algorithm for fluid simulation and actually there's another suggestion here these are kind of related called fluid dynamics and there's some other references here people are interested in this um and so I thought you know I thought oh I worked on programming things with processing for like 15 some years and uh I've done fluid simulation stuff before I've used uh a library called MSA fluid I found this other Library I think I might have you know I've made little quick experiments and I thought okay I'm gonna I'm gonna prepare this for tomorrow's session and so I found myself at night fluid dynamics for games sitting and this oh this the is this the paper I'm looking for yes no wait wait hold on I just want to make sure because this is not the URL that I'm used to seeing yeah this is it this is the URL that I'm used to seeing uh fluid uh this one this I believe yeah so this is sort of a wellknown paper uh which describes a particular algorithm for creating real time fluid dynamics you know I would say you could let's see if I am back now that was very very sad but uh um okay uh hopefully things are working again um okay so I was in the middle of telling a story a really not very interesting story but I was telling the story nonetheless you could always turn this off and do something else or maybe this is just in the background but anyway uh okay so I was reading through this paper and I was was looking here I was like okay okay this looks good I a grid that makes sense we got a grid with some edge cases of Z and N plus one okay this is good okay we're going to make some arrays this idea of density and this is really this is really uh this is very similar to if you look through some of my previous tutorials I did a tutorial on reaction diffusion where you have this grid each cell in the grid has some amount of chemicals in it you add some forces and that stuff diffuses and it combines and then you visualize that with colors and this is good and now we have some formulas ah we have neighboring so the fluid stuff goes from one neighbor to the other and we're going through here okay okay ah this is looks kind of messy but we can do this and I I can Port this code and Etc ET and then I started realizing you know it's like 1130 at night I might getting a headache uh and I I I I came across this particular um part of the paper which says the following code implements this idea and we use a simple can you hear me yes a simple uh linear back trace and I was like looking at this these formulas here and thinking you know what maybe I'm not going to do navier Stokes uh fluid simulation um on uh tomorrow's live stream so you know I have this um I have this quandry um which is to kind of in picking topics there's always this question I think that comes up in doing uh creative uh projects for example that was a loud noise in the other room um I have more than one sound effect not that you guys really want me to play sound effects uh okay so you know if I was doing um if I was doing fluid simulation I might go ahead and look for something like this particular uh oh look at all these beautiful um uh hold on uh can I start over I can't just delete this and like start over again I feel like my the point of what I'm saying is I didn't get very much sleep very tired my head's in a strange place I was really thinking about this fluid stuff I was having nightmares where the fluid was taking over I was being drowned in the Navy or Stokes fluid simulation oh look at this P5 uh so anyway so you know there's this balance that you have to strike which is I want to create a project I could Implement an algorithm from scratch uh what's the utility in doing that what's the value in kind of learning how to to do that what's the value in using a library another implementation and I'm kind of walking a along this fine line in this uh thing called coding rainbow and I think right now I have discovered that the fluid simulation algorithm is a particularly Advanced large case scenario that would Merit multiple videos going through all of these different steps possibly also looking at using a library so anyway I want you guys to um what yes I want you guys to keep me in check here um I what I've noticed is that in particular the live stream audience uh has a um generally a pretty sophisticated background and I would like to make sure that I'm doing a good balance of tutorials that are kind of quick and easy and accessible to create interesting experiments and projects beginner friendly a little experience necessary friendly as well as spots where people can go further in depth uh building on previous tutorials and previous skills so um uh so anyway so keep in touch especially if you are a beginner if programming is new to you if it's something that you've only been doing in the last year or in the last week or in the last day uh have you been able to find the tutorials that I have on YouTube that are for that were that have no experience necessary and have those tutorials been enough for you to follow those and then go on to some of the other ones this is something that I would like to hear some feedback on mostly the feedback that I'm getting is requesting like hey could you build a rain tracing engine from scratch so not that I I think that could be interesting it's interesting as an exercise we'll learn something about code and we might discover something new I want to do all that stuff too but I want to keep that balance okay so that was my little uh Spiel um for this morning um I'm trying to figure out where all my music is oh there's some my music so um I'm getting ready today is going to be a day though however of looking at some interesting algorithms like past on disc like um what's another one that I was thinking about ah diffusion limited aggregation we're going to do all these things we're going to make some cool stuff I'm going to work in JavaScript maybe in processing and we will see oh I also wanted to look at some a circle disc Point picking all these things I don't maybe sound that interesting but I assure you they are okay so um let me get through a few things so just in case some people are new I'm going to just run through something that I always run through which is that you can go to coding rainbow.com for all of your coding rainbow Deeds uh I encourage you it's uh to subscribe on YouTube you're welcome to join this crowdfunding uh website patreon if you feel so inclined by no means are you required to of course I will always be here and enjoying your company virtually and then uh you can also put your email in here if you're interested in signing up for email announcements for when I'm going to do a live stream I should mention that this is my last live stream for this week I plan to have at least one live stream next week and then I'll be on Hiatus for like the last two weeks of August however I have a huge not huge but I have a backlog of maybe like 10 to 12 video tutorials that have kind of been edited from the live streams and haven't been published yet so I hope that even while I'm away I'm going to be releasing a video per day and obviously if you're subscribed you will get a notice for that um uh okay so that that's the Spiel there um and let's see so let's see if we can um I'm about I don't know let's see if I can just get started here um let me put on the nope sorry having a little frog in my throat no okay so um I'm going to I'm going to look at some of these I feel like there's a theme to today and the theme for today is random circles appearing right so let me get set up here for a second it would be good if I ever did this stuff in advance uh so let's um let me go to oh I remember something I was going to talk about by the way this music is composed by Adam Blau Adam Blau on Twitter I think uh okay wait I should I should do some programming okay phot taxis I think that's a good uh let's random circles one all right let's see if Adam worked I was having a problem with Adam let's see I'm still having this problem yeah I'm still having this problem some I I forgot to check into this problem and fix it let's show the stack Trace let's see if we can fix this for a second uh why is the beautify package um seem to be having some sort of problem anybody know what this err could be kides beautify is having some sort of problem maybe if I package Adam beautify beautify debug package manager where do I where do I do that Adam preferen says may check for update let's check for update latest version uh preferences whoops that's with some of the the lyrics Wait hold on I was just trying to put on some music for you guys here we go packages disable update let's try that the WG Bros asks in chat are you going to make another episode of the agario Remake I am going to I don't think believe that I'm necessarily going to tackle that today though however uh but I will definitely be continuing that at some point is it updating how do I know if it's working it's hot in here so I think I need my Sweat Band which I think makes my head separate from my body this it has a green stripee on it all right let's see how we doing here did it update okay it update let's restart hey okay fixed okay so now I made at some point let's let me let's look at an interesting problem I think this is going to be an interesting problem all so there's a lot of steps to this thing that I want to show you um trying to think of where I want to start let's start let's start with this let's just say that I have a uh hold on why do I have slack open quit QuickTime open quit uh okay let's say that I'm going to now go to ah I I need to run a little server oh let's add let's add this Adam live okay so let's try to add a new package so something that you guys that I was told that I should consider using uh is um let's see how do I find a new package install uh live search server adom live server launch an HTTP server with live reload capability let's see how this works and then I was going to talk about code pen I knew I had something else I wanted to talk about we're going to do some code pen too I um Let me let me pull up my information on code pen uh uh uh okay okay how's that that that that install so now everyone let's see how do I does anyone know Auto live server start look at this look at this what port should I use is I cannot even imagine what poor oh I know um wait is this it that's a bad joke okay let me just you know okay let's try po 3000 look at that how lovely now we don't need to worry about this silly so look at this what if I just were to add now uh let's let's try something so one one of the things I was going to show you is what if I just say uh I'm going to say a stroke weight for uh Point random width random height stroke 255 a th points so um whoops look at that I don't even have to do let's make it 5,000 points look at that it reloads automatically so this is first of all so this is exciting I encourage you to use that um I I lost track of my chat here um okay uh okay so here's the thing I think an interest there's how how you just distribute random points into a window might seem like in many ways not that interesting of a topic and in fact here in about 10 seconds I created this sketch that just made a whole bunch of random points in the window and we could discuss there's some issu there's some issues are not issues with this but we could we could say like what if we wanted to have a scenario where we distribute these points randomly but none of them are overlapping and in fact I did previously do a video on this topic uh shiftman YouTube random circles let's try to find that right ah yeah random circles with no overlap you can kind of see what's going on here in this uh thumbnail there um and I we don't need to watch that video so and what I did in that video was employ a strategy that I that is often referred to as dart throwing essentially which you could imagine here what if I'm throwing darts at this canvas and every time I hit the canvas with a dart wait I hit the canvas with a dart I draw a circle there and then I throw another Dart it hits over here and I draw a circle there and I throw another Dart it hits over there and I BR another Circle there what if I throw a dart and it lands on top of one of my previous circles well then I go and I pluck that dart out and I throw again so that's if you w go back and watch that previous video I looked at that strategy and you can imagine why that's not that efficient of a strategy because if I now if the my canvas is full of all these dots and I throw a dart to keep throwing darts I'm going to have to keep taking it out a lot before I find by accident throw it somewhere where there's a random point so I want to kind of take this as a broader theme for today and this camera is about to shut off I bet um and uh I want to look at a a a bunch of different algorithms related to this theme one that I found through the prog JavaScript programming um environment called D3 uh and this is something called Pon disc sampling and you can see how these particular dots are distributed randomly none of them are overlapping and they exhibit this P um you know named for the French mathematician P not uh from The Little Mermaid I don't know it's actually also a French word meaning fish clearly um but uh you can see how not only are they not overlapping but they have this kind of even distribution right A P distribution of random numbers it's kind of related to if something happens about four times randomly per day what's that what's that kind of distribution going to look like over time of those four events each day I mean they generally aren't going to Cluster all together that sort of thing so um you can read more about Pon distribution um you know Wikipedia Etc but I uh you know so there are various strategies for making this kind of distribution um one of which that I did mostly in my previous video was this sort of dart throwing thing so I was looking at this and you know there's a sort of like amazing Simplicity and Beauty to this even though all it's doing is filling it with random spots but you can imagine different kind of applications for this um some other type of you know I had um I did a video about a space colonization algorithm which draws a tree pattern as it's pulled to random points and I just put all those points randomly in the window what if I use this kind of distribution what sort of tree would I get out of that if I was creating an ecosystem simulation where I wanted to create a sea of food or I wanted to have Blades of grass over a meadow what if I gave all the initial points of distribution like this so um and someone in the chat is writing the pon distribution is used for molecular modeling that's great to know super interesting so uh this is kind of a theme I want to maybe start with this um and we're going to look at um I actually have not programmed this but we're going to look at this particular paper by Robert britson which describes the algorithm uh I don't know if the source code for this is available in this D3 website it probably is we could look at that as well um and then you know other things related to this uh that I want to look at is circle dis pointing dis Point picking uh to kind of look at the distribution of picking points inside of a circle whether they cluster randomly towards the center are evenly spaced out that's something I want to look at as well as um uh one of my favorite algorithms that I think that I've implemented before I didn't include it in the nature of code book but is uh called diffusion limited aggregation and you can see uh um that this is a kind of um an algorithm that can model crystall likee growth patterns that happen in nature um and you know we can kind of peek through this Wikipedia page and you can see that you can get different patterns based on whether you start growing from the bottom or out of the center and I'll probably use I'm uh Paul bour Paul bour is a is a person uh he has a website that I use that that I found lots of really nice um explanations of various um algorithms on let me find this diffusion limited aggregation so I think we could read through this together we can have like a soothing quiet you guys could all maybe all of you are watching somewhere and you have like a couch or a bed nearby and a pillow and you could lie down put on some quiet music or better yet I could put on some quiet music for you and then you could lie down and I could just read to you from this paper and I could say things like figure three shows a box attractor new points enter in the interior the center of the image say the source code supplied here a soothing voice and that could be how you could go to sleep at night okay I I I lost track of uh my my head there so I I don't know I'm un sure whether um so so that's kind of my plan broader theme for today um I'm going to be doing these as coding challenges meaning I will essentially this is empty it's a um I will be programming them from scratch while reading through either the paper or the website that explains the algorithm I feel like that's a really useful process for people to see I enjoy doing it as this kind of like strange performance art kind of academic math paper programming code in p5js thing um and that's sort of my plan for today so um uh there are some some questions going on in the chat which may be uh ah yes so by the way the pon distribution which we'll look at you um and I believe Pro on this um page the Jason Davies page that um by the way there's also some further reading down here of other links you could look at um and ah you can look at random points on a sphere so these kinds of things can also be used to and this is interesting for sort of mapping applications and stuff like that so um this is what I want to look at today okay um uh okay so let's see I think there must be a lot of new people in the chat today I'm seeing lots of new names so ask your questions I kind of take a peek at the chat as I can but I'm not glued to it um unfortunately it's sort of a little bit hard to do that okay so let's start with um let me close all this stuff um and let's see where uh where am I here uh rant distribution let's find the GitHub issue no what was it called random uh random sampling of points oh okay ah oh the other thing I was thinking it's sort of I don't know the other thing that I was thinking was um uh whoops so one of the things that I wanted to also tackle is the traveling salesperson algorithm and the travel I don't know if algorithm is the right word actually traveling salesperson problem so the traveling salesperson problem is a problem where you look at a space full of points and you try to say what is the path I'm a traveling salesperson I'm here to sell my rainbow oh no no my rainbow sweatbands uh here I am I'm a traveling salesperson with rainbow sweatbands and I want to visit all of these cities and I want to sell these things in all of these these cities what's the shortest path so that I can go from one city to another and hit all of them and walk the fewest amount of steps and this is a surprisingly uh difficult problem to solve once you start having a lot of points because there's just so many possible paths through all of these points and so we could use a kind of check every possibility and find the shortest one approach or a genetic algorithm to solve this problem so I think it's sort of interesting to think about some of these algorithms for generating like a diffusion Limited aggregation visualization and then apply the traveling salesperson problem to it so you connect all of them with a with a line or um that type of thing um okay uh what can you tell us what you use for browser live reload um he's I'm using uh a package for Adam called Adam live server and I I if I guess if you watched this back in the archive I went through the steps of installing it uh okay so um I wanted to talk a little bit about code pen I think I'll since I've been kind of um going on and on and on and on without actually getting to anything yet I think I will save that perhaps for a little bit later but I want to mention that I did a tutorial using codepen the other day I used codepen uh has a thing called Professor mode where you can actually be on the same web page as me and see me typing the code in real time problem is you're about 15 or 20 seconds behind on the YouTube stream but the actual um uh the actual codepad thing is in real time anyway I made all sorts of I was like I made all sorts of mistakes and had a uh had some questions about codepen and I got an email from a codepen engineer and I got um answers to a lot of those questions and I want to go over some of those at some point okay um so let's uh let's start with the p disc sampling let's start with that okay um so let's look at this particular paper is everybody in their quiet couch uh okay so what I'm going to look for actually so I encourage you to read the whole paper um you sort of get the idea though that what we're trying to do is and this is by the way visualizing the uh distribution of I probably distances between all the points somebody correct me if that's wrong but anyway this is the goal here right to create a random distribution around of points in a plane that exhibit a uh that aren't overlapping and they all have a minimum distance none of them are are closer than a certain Thresh hold um and and and that will give them this kind of like even but random distribution so we could use the dart throwing approach I did that in a previous video so I'm not going to do that here um instead what I'm going to do is um uh read starting from the algorithm here and the point of this algorithm is not to make a more beautiful version of the distribution but to have an algorithm that actually runs rather quickly which in this case um really can make quite a difference if you're doing a you know in a lot of cases I'm in a lot of in a lot of scenarios for me I don't I don't really worry about optimization like I'll just make my interesting weird project and try to make it work and I can optimize later I think that's generally a good strategy but this might be a case where you already know like I have a high resolution image I want to fill it with points and I need to do that like every frame I I can't like have it take a super long amount of time plus I think we're going to discover some interesting programming techniques while doing this I read this on the subway this morning so so hopefully it's going to work um but uh so I think we're going to discover some interesting techniques and also the point of this channel coding rainbow is for you is to look at some of these classic algorithms Implement them verbatim and then for you the audience to do your own creative riff off of it okay here we go uh so I want to make this a uh a separate Standalone tutorial so um I am going to cycle these cameras I'm going to get myself ready okay um uh let's say we're going to have uh okay go here th uh I'm going to do this in JavaScript I got the browser going uh we'll close this for right now um okay and here okay I can't see hold on I got to fix something uh here we go so this wasn't so great this is probably about 45 minutes before I actually started doing anything but uh thank you guys for bearing with with me and being here with me this morning okay this is a very serious topic so I won't be wearing my sweatbands I'll wear one no it's too weird okay uh okay here we go welcome to a video tutorial where I am going to implement I'm going to read this paper in this video out loud to you so if you ever thought oh you know what I want to do I want to watch a video on YouTube where somebody reads out loud to be an academic paper with some math stuff in it you you come to the right place it is called fast fast Pon disc sampling and arbitrary Dimensions just to uh kind of cover what that is the idea here is that I want to fill a space with points these could be uh you know I want to uh I want to use this to create a um I can't think of any good examples like an ecosystem simulation where creatures are wandering around I want to fill a space with food or I want to use these as seed points for something some type of other generative growth algorithm or I just want to have a nice pretty dots pattern that then I color According to some image and I want those points to be evenly spaced around and not overlapping so let's look at how we can implement this algorithm and I'm not going to read the whole paper I'm just going to start from down here and the idea is the algorithm takes and by the way let just so um look you look in this video in the URL for this paper and it's by Robert britson from the University of British Columbia and this is I think from uh I assume that this ' 07 means it's from 2007 so the algorithm takes as input the extent of the sample domain the minimum distance R between samples okay so what does that mean a sample by the way is each one of these dots that's a sample so I first will need a minimum distance so I'm going to go to my code oh by the way what's my code doing right now so I'm starting with this uh code written in JavaScript using the p5js library and it just draws what has a loop to go from zero to a th000 to draw a thousand random points in a window and we can see that's happening here and you can see that these points don't have that kind of distribution they're overlapping they're not kind of evenly spaced I this is a perfectly fine distribution I don't I don't have nothing against this particular pattern whatsoever but uh it's interesting to look at other patterns of what types of beautiful beautiful beautiful beautiful things could emerge out of that okay so um here we go okay so now back to the paper where was I okay so let's go okay so R uh so I need to add R so I'm going to add a variable R and let's say right now we're going to start with I want these points to be 10 pixels apart that's kind of a reasonable value to start and then a constant K what is K as the limit of samples to choose before rejection in the algorithm typically k equals 30 okay so that seems to me I can create a variable k equal to 30 but what is that mean limit of samples to choose before rejection so probably in the algorithm I read this before before I haven't implemented the code yet but I did read this before so I know but what it means there's going to be some point where I'm going to try to do something a certain amount of times and if it doesn't work at some point I'm going to quit and this is this is telling the algorithm to quit after 30 times and that's obviously both of these are numbers we could play with to see if we get different effects so now what I want to do is initialize an ndimensional background grid oh boy what the what is an ndimensional background grid that sounds complic it um sorry I just needed to get to my keyboard here so what I want is to have a twodimensional background grid meaning I want to think of some sort of grid and what I'm going to do is I'm going to store everything in that Grid in an array so I'm going to make actually just one I think I'm going to make a onedimensional array and that onedimensional array will number the in every single element in that grid and this is what I do I've I've done this in countless different examples and things online where uh online on YouTube on on the internet um where um this is uh where I have this onedimensional array to store information in a for a twodimensional space pixels do that all sorts of things so let me come back here and let's set that up so what I'm going to do is I'm going to create a variable and I'm going to call it grid and I'm going to make it an array now I need to think about what is the what is this this pen is by the way very light can you see this um what is the size of each one of these uh cells in the grid so here it says we pick the cell size to be bounded by r divided by the square root of n r is the minimum distance we want between our points n is the dimensions two Dimensions I mean so interestingly enough we could do this in three dimensions or in four dimensions or in I was going to play some Spacey music for four dimensions but whatever I I'm not I got to work on this whole soundboard thing I'm not very good at it um okay so uh so so that's something I need to calculate and I'm going to calculate it I'll just do it up here um I'm going to call that variable W as kind of like the wh time out this will get headit it out hold on I'm looking in the chat you can barely see the green on the Whiteboard okay hold on should I well I think it'll be good enough but I won't use that green marker anymore uh where's a black one you would think that I would be more prepared for these sorts of things okay I have the black marker here okay coming back all right this will this was a little edit Point sorry I'm going to I'm going to call that variable W to be the I have a black marker now by the way so you could see this better the size what's the width what's the height of each one of these cells okay so I need that to be uh r divided the square root of n which is two so uh so you know you can figure that out but I I I you don't have to figure that out because the pro the code will calculate that for you okay so I have that now um so let's read this so okay the grid can be implemented as a simple nend dimensional array of integers the default negative one indicates no sample a non negative integer gives the index of the sample located in a Cell so basically that big array is either going to have a negative one in it or or another number in it to say like oh there's something in that AR right so let's let's start by um okay so first of all we have to figure out how many columns are there because the space is 400x 400 pixels and the size of each one of those cells is W so I want to have and I want it to be an integer so I'm going to use the floor function I want to take the width divided by W for the number of columns and the number of rows is the height divided by W and then what I want to do is Loop through uh every single spot which is the number of columns times the number of rows and in the grid initialize its value to negative one so I'm starting with a grid the idea here is the grid you just pick up a different marker each time where the grid is just filled with these are the index values but the grid itself is filled with negative 1 negative 1 negative 1 negative 1 because we're going to start actually putting points filling that grid with values okay who you still why is this still interesting to you I hope so okay so going back to this paper okay good good good good good good ah select the initial sample X subz whatever what do I mean pick a random point that means pick one random Point randomly choose a chosen in uniformly from the domain insert it into the background grid and initialize the active list okay there's a bunch of extra stuff there okay so forget about this active list for a second let's say I need to pick a random Point that's not too hard I can pick a random Point wh so let's let's see here so this is uh this is really uh in if I'm reading the paper this was Step Zero and uh now I'm going to do this by the way is no longer relevant now I'm going to do uh step one so which was pick a random Point VAR x equals random width VAR y equals random height and you know what me make that a vector I think it's going to be useful a vector in p 5 is an object that stores both in X and Y so I don't have to keep them as separate variables uh let's make a a vector called pause with an X and the Y in it okay we're doing well okay so that was there we go so now select the initial sample chosen blah blah blah inserted into the background grid so what does that mean so if I pick a random Point somewhere in this window oh I got to throw a dart right ready one two three it worked exciting live demonstration okay so right I picked this random point and I can see that it's in spot eight unfortunately I can't actually in my code like throw something and then just see where it is so I have to figure out where it goes and the oh did I yeah no okay um I have to am I back in the right place okay um I have to now figure out where it goes and how do I figure out where something goes well where its column which I'm going to call I is the EXP position divided by W right W being the size that's that sort of scaling Factor the size of each cell um and I also want to use the floor function to make that an integer because it's going to be an index into an array and then uh J is the Y value divided by W and so what I want to say is the grids I + J * the number of columns equals that position so this is me inserting it into the grid I pick a random XY point I find its column in row position I'm saying I and J in the grid I make a position Vector out of it and I insert it into the array so this i+ J * columns thing this is a Formula that exists in just about so many of my code examples but it basically is a formula for taking a column position and a row position and figuring out ah if the column is z 0 1 2 3 and the row is 012 um that the actual position in the array is 13 and you can see that is the column plus the row times the width 1 2 3 4 5 so 5 * 2 is 10 plus 3 is 13 yeah that formula works so that was kind of a quick explanation I think I have a video somewhere where I go over that more you can try to find it um okay great so now we have that inserted so that's step two let's go back oh no that's step one sorry so now we've done step two oh but we're missing something active list so this algorithm requires an active list of points that we are currently working with and it's going to make more sense as I get further into this but um uh there's some interesting stuff going on in the live chat here okay so um so let me f let's let's create I want to create another array called active and what I want to do is also say active. push that position so I want that position that Vector to both be inserted into the grid remember this grid is an array now that has negative one everywhere except for this one spot that it actually has a vector and then what I want to do is I'm going to um add the draw function back in I want to say background zero and I just want to say I want to Loop through the grid just to make sure things are working and I want to say a stroke 255 stroke weight 4 and then I want to say sorry I want to say uh Point uh grid indexi dox grid indexi doy however I only want to I want to Loop through the whole grid and draw all the points but not if there's a negative one there so I want to say as long as grid index I does not equal to 1 then I can draw the point so I just want to be able to see what's going on and then also I think it would be useful to look at at all the active points so I'm also going to Loop through the active array this is really mostly for debugging but I think it might also make kind of an interesting pattern and I'm going to say stroke 255 comma 0 comma 255 stroke weight four and I'm going to uh draw a point but this time um at the Active spot okay uh there we go whoops how's this looking everybody live reload going let's take a look oh so have an error square root is not defined look at that so this is by the way a very common p5js problem if you ever try to call a p5js function outside of setup it actually won't work because p5js has not been initialized the page has not been loaded until setup this is like an onloaded type event I could get around that here just because it's square root by just accessing the JavaScript square root function directly I'll just do that otherwise I would have to move the square root function into setup call is not defined uh sketch. Js line5 uh this is columns times rows there we go okay so you can see there's one random Point that's also one active point and you can see each time I reload the page it's somewhere there okay we're moving along here we're Trucking along here I'm getting somewhere now I think yes yes people in the chat are telling me to use a four each Loop I'm I have nothing against four each Loops but I think it's a little bit more readable to do this right at the moment um so let me go back to this paper and now we're going to look at step two this is the this is the tofu of the algorithm right this is where the main stuff is happening while the active list is not empty choose a random index from it okay let's start with that so I have to say down here let's put let's put step two at the beginning of draw and I'm going to say while um active is not while active. length is greater than zero that's that's saying as long as it's not empty now I'm going to make something a little bit different here the algorithm has a while loop B built into the description in other words it's saying wow this is true keep doing this keep doing this keep doing this but I actually don't want to do this I want to make use of the draw Loop which animates so I can see the algorithm animating itself so I'm actually just going to say if because I want to just do this one at a time and it's going to come around and do it again with draw so if active do length is greater than zero What's the next thing uh choose a random index okay so I'm going to say VAR index I I'll call that R maybe R equals random active. length and I need to floor that that's a random index and then generate up to K points chosen uniformly from the spher spherical annulus between Radius R and 2 R and oops sorry I don't have my there really no point to be sound effects um okay ah okay hold on hold on hold on we're going to be okay let's go about let's start with generate up to let's start with generate up to K points I'm going to say for VAR n equals z n is less than K n++ so I'm going to do a loop at least K times up to K points and then now this is kind of crazy uniformly from the spherical angular between Radius R and 2 R around X index I let's talk about what this means uh okay so I have to find an eraser which uh I'm going to use this paper towel so here's what we have to do this is kind of a useful thing in programming to sort of think about I have a point that I just picked this is my random active point now there is some value in our program called r which has this distance okay so R I don't know why I wrote distance there R has some length so what I want to do is pick another Point around this point whose distance is somewhere randomly between R and 2 R so in other words I want to pick any point that's within kind of this dut right I don't want it to be it can't be within R otherwise it's invalid and I don't want it to be really far away I want it to between R and 2 R so how do I do that well one thing I need to do is one thing I could do is just pick a random angle right first let me pick a random angle and then let me pick a random value between R and 2 R and I want to place the point offset from here along that angle somewhere between R and 2 R so that's what I need to do so let's come back to the code uh and what I want to do is say so first I want to angle random to Pi honestly here's the thing I could take some let me do it long winded but I could take some shortcuts because there some functions in P5 that would sort of do some of these steps for me but um then I want to uh create the offset values so uh offset X is cosine of that angle uh offset Y is sign of that angle right this is trigonometry that if I have an angle I can get the the sides of the triangle right the from that angle with cosine and s look for one of my video tutorials that goes through this math so but actually what I can actually do by the way is just pick a random Vector so all of this really what I want to do is say VAR offset equals P5 vector. random 2D because what that's going to give me is a random unit Vector pointing out in some direction from here and then all I want to do is make the length of that Vector between R and 2 R so now I want to uh create a magnitude which is some random value between R and 2 * R and then I want to take the offset and set the offset's magnitude to that random value and then where's the point that point actually I can just say offset add oh wait I forgot to get it so the position the position that I'm working with is from the active array that particular um so I remember I I'm picking a random point from the active array and then up to K times 30 times I'm going to pick random points around it between between what between R and 2 R so now if I add position to that offset this is really the point and actually here's what I'm going to do I'm going to change my variable naming a little bit what I'm trying to do is make a new sample so I'm going to call this sample and I'm going to make a random vector and then and then sample's going to get the position added to it so now that's that actual point so I'm now done with this uh this particular step generate up to K points I've done one point uniformly between R and 2 R for each point check if it is within distance oh wait there's a mouse in the way check if it is within distance R of existing same samples using the background grid to only test nearby samples this is an exciting moment okay I don't know if anyone is still watching this video however many minutes in I might be like 20 minutes in already this is like a video about P disc Point picking but this is a moment because what I'm going to do here actually applies to a lot of other scenarios let's think about this for a second I want to talk about what's going on let me find my marker let me find my paper towel okay uh let me come over here so let's think about this there is a space and that space is full of points and I am working with a particular new point right here and let's say I want to know is this point too close to any of the points in the space most algorithms would say I have to check this point against every other point in the space and there could be you know something like 10 million points in a space and this could take a long time especially I'm doing this as part of some animation algorithm however the whole point of this Pon dis thing that we're doing is that the points are registered to a spot on the on some kind of grid and if the only thing I care about is is a point too close to another point if this point is within this spot on the grid I kind of know 100% that I don't need to check these points or these points or these points the only ones that are worth checking are the ones that are in immediate neighboring spots on the grid and this allows a massive Savings in performance and in a flocking simulation in a collision detection simulation this kind of algorithm can also be used and it's quad tree type stuff I'll do some other videos on that at some point but so let's look at how we're going to do that here okay now uh so what I need to do is check I want to check okay so first of all I need to know where is this point in the grid so I need to know its column position is sample dox / W and I need to floor that so this is where it's going to be in the grid then I need to know it's row position which is sample doy / W and then I need to do another loop like I could check each neighbor individually but let's do another Loop right uh nested loop I starts at 1 which is like the spot to the left I is less than or equal to 1 which is the spot to the right I ++ and then uh J is equal to1 same thing j is less than one j++ and then what I want to do is I want to look at uh uh I want to look at a point I don't know what to call it um uh neighbor I'll call it neighbor equals uh the Grid at I + J * the number of columns and I want to check the distance now between the sample the distance between and I can use the P5 Vector distance function the distance between the sample and the neighbor and I want to do something right this is gonna if if that distance is less than R right the whole point of this whole thing that we're doing is to make all these points on the screen where none of them are within this distance threshold okay so this is very key right here what do I do if I find one by accident that's too close to so let me go back to this and see for each point in turn check if it is within distance R okay if a point is adequately far from existing samples then it becomes then it goes into the active list and it's good okay so we're trying to find at 30 times we're going to try to find a Point that's okay so here what I think would work best is for me to create a Boolean variable like I'm going to call it okay and I'm going to assume it's okay VAR okay is true it's going to be okay however if that distance is ever less than R it's not okay anymore so I got to check everything now here's a problem I don't want to check ah here's another first of all there might be nothing in the grid so I only want to do this uh if um I only want to do this if the neighbor is not equal to negative 1 remember negative one there's probably a different way I might clean this code up later Famous Last famous words of every single programmer ever I might clean this code up later um but um here remember if something's not actually in the grid we're just sticking a negative one in the array so I only want to do this right if negative one if there's nothing there it's definitely not too close because there's nothing there to be too close to so okay so after I do this I want to check and say after all of this if it's okay what do I want to do I want the Grid at that spot to be that sample and I want active I want to add that sample to active so I I'm remember I'm keeping two lists I'm keeping an array of this grid so I want to put the point in the grid but I also want to put it in the active list because it's going to be another point that we could use later to pick a point next to it okay uh boy there um okay so now let's think I I feel like there's some there's some sort of missing issue here there's kind of an issue what if I I I think I need to check it's not written in let's keep let's keep reading the paper um so okay adid as the next uh uh okay so let's let me I I feel like I missed a step here that isn't explicitly written here but I'm going to keep going with what's written WR here so okay so one thing we should do is say like well if it's okay remember I'm in this Loop to try this K times if I find a point I don't need to keep trying so um or or should I keep trying uh generate up DEC points ah I guess I could keep trying uh but but I do need to check I do need to figure out if I get Decay and I haven't found a point then uh at least one point then I need to remove this a active one so let's say let's create a variable called found uh is false so I'm assuming I'm going to try now K times if I find something I'm going to set found equal to True here is where I know I found something so I'm going to say found equals true and then what I'm also going to do now is if I get to the end of this Loop K boy there's a lot of code here um if it's not found what do I want to do active. splice R comma 1 right remember the whole point is I started with a random point in the active list and I tried to find points around it that are okay if I didn't find any points around it that are okay I want to take that point out of the list and splice is a JavaScript function that removes an element from an array splice at the index R oh boy there's a big problem here right I've used r as the variable name for that minimum dis distance threshold and then I just made a new variable R for that index so I'm going to rename this to Rand index let's let's use a better variable name Rand index and then go back and uh add that here okay I can't believe I've written so much code without running it it's terrible idea actually I generally try to avoid doing this um yeah Taylor in the chat says can't you break after OA um okay equals false I think actually after okay is true yeah so I was going to put a break here um let's comment this out and see how it works with or without it let's just put a little question here should we break oh we'll discuss that later so weirdly I kind of have all of the code right now right if we go back uh and look at this um we're done now but I know that I I in my head I I there's something that I'm missing let's see if you can think about what I'm missing but let's actually just try running it well uh nothing's happening you know let's let's uh which is not surprising I'm surprised that I'm not seeing anything at all at all actually oh the camera went off okay well this is can be an edit Point anyway MAA who's maybe watching I'm gonna make this an edit Point too um Danish in the chat asks can anybody tell me what he's trying to make and uh apparently you are correct bacon uh someone in the chat named bacon a pink dot half an hour of programming and we have a pink dot um okay so um I'm thinking here here uh um um what could be I just want to look here for a second JavaScript is so not interested in giving me errors ah there's definitely a problem I'm surprised that I didn't get that uh you know what I could do so I'm going to get index out of bounds errors that's one thing that's an issue um uh so um oh yes thank you thank thank you thank you thank you thank you next to Kate okay so that's certainly a um that's certainly a big mistake that I had there sorry I'm reali fan okay um so I'm gonna come back into the tutorial now um okay uh so there's a bunch of errors in my code one of which which is quite crucial is that actually the uh this here is absolutely wrong what I'm looking for right this nested Loop where I'm trying to find the neighbors I need to add the actual place that I'm at so this should actually be column plus I plus and I kind of hate the way that I've written this row plus J times columns but we'll leave it um you know I I I think I might like to say something like this just to uh kind of put this in a separate variable like calculate that Index this way okay so that was something I definitely was missing um uh so that's thing I'm definitely missing let's see if we can kind of debug this a little bit uh actually I'm going to there's something else that I feel like I'm missing which is sort of crucial which is that if I pick a point and let's add the break there maybe the break is a bit of a problem uh let's see if things are going uh let's um whoa okay let's Okay pause don't pause I'm going to do some debugging now uh oh you know what it got stuck at one point in an infinite Loop you can see if you ever see this like the page I I shouldn't probably shouldn't use this live reload thing look you can see this tab is crashed calls is not defined sketch line 48 ah look at this I have oh these I didn't make Global variables so that's a bit of a problem wa hold on I don't know if that should be edited out but I'm going to go back into it as if there was like an edit point there to kind of like shorten this when I publish this as a standalone video okay I'm G to come back let's let's check let's check the code oh calls is not defined okay so oops one thing that I forgot is that if I'm going to use these in setup or Draw they need to be Global variables so let's do that ah okay oh look at this amazingly it's actually working I kind of thought for sure I had a problem ah yeah okay great so we we have an Eric uncaught cannot read property copy of undefined let's see if we can uh the distance function uh in draw uh sketch. JS line 52 so we have a problem here and I think I know this is what I was thinking of here that um what it if neighbor does not equal negative one well guess what neighbor could also be could neighbor ever be or could sample be undefined I'm trying to think about this uh well to me there's an issue here which and I don't know if this would this this this is what I'm thinking okay this is what I'm thinking I'm thinking that what this new point that I've picked if grid oh oh I know what it is of course so there's definitely a major issue here which is that if neighbor does not equal Nega one or if neighbor I think I could just say if not neighbor and you know what you know what would be better let's not even because I could just fill it with undefined because um undefined in JavaScript evaluates to false um and then uh was there another place that I was checking negative one and then I can just also say if not grid index I which I think is a better way to the reason why I want to do this is this is sometimes going to give me what if I'm on the edge right if I'm if I'm in the cell on the edge and I try to look to neighbor negative one it's going to be undefined so I also need to check for that and if I come back over here um did I switch to the other screen there I don't know if I did uh so I'm still getting this issue uh okay uh okay what what happened here uh sketch line 52 so let's look at uh let's look at what the value of neighbor is undefined oh if neighbor I only want to do this not if not neighbor if neighbor cannot read property X of undefined line 78 uh if only if not if not only if boy uh here we go now we can start to see this working and we're getting this distribution now I kind of thought that I needed another check but I'm kind of amazed that this is working anyway I guess I don't need that other check and you can see which points are active and which points are finished and we can let's just let this finish it should get um now the reason why you're not seeing this happen really really fast is because um is because I'm doing it once per frame and P5 only runs like 30 frames or 60 frames per second but I could now really really couple things I want to check one I want to take this console log out one thing I'm just curious what happens if I take out this break yeah then we can find multiple points per frame so if I'm checking for 30 points around a point this is then I'm finding multiple points per frame doesn't really make a difference I I kind of like the animation better when I am uh enforcing just one point per frame and look at that starting from the bottom now um but something that I want to uh add here just to show you is I'm going to change this to a while loop and look at this so there is a issue with the code which is that um what happens when it it's not finishing correctly so I need to figure this out uh right so Taylor S is asking this question how quick is it if it runs entirely one frame and this is not working right now and I I I I even crashed the uh so so let's think about this why is this not working so I think there's an issue this is an issue that I'm thinking of when I pick I know what the problem is what if I pick this sample point and there already exists a point in that spot in the grid I could be stuck in an infinite Loop because I could continuously just keep picking a new sample point if the grid is Ever full I don't want to pick points anymore so I think that I should add a check right if grid column plus row times The Columns right if it exists then uh then I don't right if something ex already exists there then um also skip everything hold on a sec I'm thinking right let me think about this for a second more pause wait a sec okay let me think about this um right I just picked a new sample and a sample already exists there found is going to be I don't want found to be able to be true so I should just skip this whole thing that point is no good okay so I can put that around there yeah that's definitely going to be right sorry I meant to um oops I have to I have to go back back into this video is this what it was if let me think about this remove oh hold on hold on let's put it back to if I got to get this right and then we'll edit back into the video uh so now I only have one point why is that uh the sample the new sample that I picked should be in a new spot uh no am I picking by accident in the same just curri just want to do this for a second no what did I miss okay hold on we're GNA figure this out everybody this last little piece right that works why right let's look at let's look at this oh no no no I'm I'm always doing this it this needs to be a not if it doesn't exist go ahead there we go okay hold on I got to go back into the video because now I should be able to put a while here no infinite Loop still uh okay hold on what's happening at the end uh uh boy this am I this is a much um more complex problem that I imagine okay so this is working let's let it do this um oh no no not while here the while goes here right no did I do that right okay hold on everybody let's have this do it uh um um I want to do T oh hold on let's make um let's make the uh space between them bigger and the canvas really small so what's happening at the end so let's let's look at the um active array things aren't getting removed from the active array it seems yeah look at that maybe while active. length is greater than no if it's empty I want to stop let's just agree Java is better why are there so many points in the active array all right let's think about this where am I removing stuff if not found round is false all right let's do this also how are there so many points um where do I uh no if it's GES to the end the index would stay the same okay hold on yeah that's that's weird um so let's let me make the frame rate one let's look at this little more closely look at this it's adding points somewhere that I can't see so let's look at um sample is always a new Vector right this was going so well till I ran into this problem it's interesting how it's working but it's just not finishing it's got all this extra stuff in there that's unnecessary let's look at the sequence here add add add add add add so what are those points what's being added when I can't see something uh add add add yeah look here's a point off hold on hold on hold stop stop stop how do I stop no oops no Loop why are there points being generated off screen oh oh oh oh so points should be invalid I've got to check because of the way JavaScript is okay okay I think I know what's going on um yeah you know I always forget this about JavaScript JavaScript I would get an error if I tried to put a point in the grid it doesn't exist it's actually just the space is expanding beyond what we can [Laughter] see because it's just like the array is not a fixed length so funny I mean not so okay I have to think about how to solve this and then I this video is gets this part's this whole thinking part's going to be edited out I'm G to start with the debugging let's look at the code boy oh JavaScript oh JavaScript okay um this is the problem here this point is invalid if it's off screen okay so that's that's actually should be yeah JS array is a dynamic array so um so we there in addition to checking if it doesn't exist it can exist or be off the screen so uh it can't exist or column it was just expanding forever which is kind of interesting but not what we want okay uh okay so I'm G to go back into this video and I think I can I think I can fix this um I'm trying to decide if I want to um okay so uh um Let me let me I just want to uh take this out okay and okay all right so um okay I'm back and to debug this um which I just did and you can find the live stream version of this if you want to see that about like 15 minutes of figuring this out uh I've changed the frame rate to one and I'm looking now and seeing like whoa why is it generating all of these positions that are like way off screen like 16 and 68 those aren valid points in my space and I forget I always forget that a JavaScript array is this Dynamic thing so it has no problem just saying like oh okay you're generating points off the screen I'm just going to keep adding them as opposed to giving me something like an index out of bounds exception like oh you generated a point that's not part of your original grid so I need to protect against that in some way and the way that I think I could do that right here is um in the same way that I am checking to make sure that this is not um that this is a a spot that's not already filled um what I can also check is that column I want to make sure that column is less than columns and I only can go forward if the column is actually on the screen and row is less than the total rows and it is a spot that is empty so that if I add that in we should be able to watch this now and if I run this I shouldn't see any points being generated off screen so let's look and see if this is working now I'm going to console log the length of the active array and I'm going to get rid of console logging where that point is and I'm going to put the frame rate back and I'm going to run it again and we should see okay time out I got closer I still have points off screen so maybe oh greater than Z yeah okay also oh my God so many things to check I also have to make sure it's greater than all right I I can't just check if it's not I'm going to just give my a clean edit Point obviously I only checked not obviously because apparently not obviously to me I only checked if it was off the right hand side or the bottom so I need to also check if it's greater than zero or if it is uh uh uh or if it's greater than and actually zero is perfectly valid so greater than negative 1 I could say greater than or equal to zero all of these as well this is a very awkward if statement so maybe I can figure out a better way to write that at some point and now you can see there we go active got down to zero and you can see how it fills up rather quickly so let's go back now and I'm going to comment this out I'm going to make the screen again 400 by 400 and I am going to uh give myself some more space to see this in uh I'm going to make R back down to like 10 and I'm going to run it and you can see now here it is filling the entire window now let's just see if I actually put in a while loop here in draw and I could also say no Loop so it only does it once and you can see boom each time I refresh it's you can see I get a completely different distribution very very fast and I could make this even higher resolution I'm going to get this image very very fast I do kind of like watching it grow though so let's see if we can make some something a little prettier out of this so one as we see the active point points um and the nonactive points which is kind of interesting to see um one thing that I might be curious to do is change that R to like four and change the stroke weight to one and then also I think what could be interesting is let's actually have it pick more than one point per frame uh so I'm going to oops I'm going to say for of our total equals zero total is less than five uh total plus plus so this I'm just going to do this whole thing uh five times per frame I don't want to draw everything five times per frame and we can see now you can see it growing kind of faster oh look at this I have a stroke weight four somewhere else uh and you can see look at this kind of Spacey thing growing uh I think it's even actually kind of uh beautiful let's make this I mean you can now stop watching this video and go and grab my code and play around with this but I could do like 25 at a time it's kind of nice to watch grow um you know I could even make that R like two and you could see look at this kind of amazing uh what I'm getting that you could uh kind of pattern and then I could also think about uh what if uh as I'm drawing these points I did something like I said color mode uh HSB and I used the color to be so um this is just the active let's get rid of the active points for a second what if I said said um the color is I modulus 360 uh 255 oh 100 100 I think are the defaults so you can see something interesting Happening Here uh and maybe I should say something like uh I divided by 100 um you can see I kind of am getting this rainbow pattern out of the growth of points so um that's interesting this is not what I was expecting I oh because I'm doing it based on where they are in the grid not their order of when they were added so you know what I would need to do ah um um oh oh some people are making great suggestions in the chat which I would like to I I this video needs to be over soon so this by the way is just giving you you're just seeing the stripes because it's just drawing them according to the grid pattern but what I want to actually do is have their order so let's have another array sure there's I'm going to call it ordered and every time I add a sample to the grid a valid sample I'm going to say ordered. push sample so I'm just going to make a separate array that just has them in order and then actually what I would like to do is uh draw them based on the order and whoops uh and I need to do this as well uh uh order ordered I called it ordered I think right so if I add this now uh we can see and I don't need that divide by 100 anymore you can see now their color is according to when they were created and this is a bit too uh you know too extreme and you know what might be nice by the way is just that my stroke weight be R uh because then you can see there we go um and let's you know what just so I can see this more consistently um let's add always start the point not random but actually have have the first point just be in the middle and there we go okay so now we have fast animated plle dis pointing evenly distributed and uh one of the suggestions and really actually unfortunately the way that I've written this because of the way that this should really be divided by two or times 0.5 um uh there we go so that that way they won't be overlapping so you can see this is kind of an interesting uh algorithm for seeding these points um my um somebody in the chat uh yes I am addicted to HSB you know I'm going with the Rainbow theme if somebody I I should really think of a different way of doing it but it's my theme um so if somebody uh somebody suggested and this is an interesting thing to think about how could you start with larger points and then slowly over time have smaller points and have that distance threshold be something that's variable and that grid be something that's variable that's kind of probably quite a complex prog problem which I would like to think about and do future videos on okay so thanks for watching this video about uh Pome distribution of points in a twodimensional plane see if you can expand this into three dimensions see if you can change the sizes of these find a different way to color them uh use this as a way of seating another type of system and um what kind whatever creative possibilities you build out of this uh build from the code that you'll find in this video's description and keep me posted and share on Twitter or wherever you can share it and i' I'm excited to see what you make okay goodbye uh wow that was kind of uh way longer than I ever expected um which just goes to show you if I don't do these practice these things in advance um I don't really know how long it's going to take it is 1220 I definitely want to do more today so um things that I'm thinking about are okay here this one we could definitely do quickly this is a possibility I feel like we should probably do this one oh yeah let's do this one this cuz this look look how similar this looks in an interesting way ibe we should do this one look HSP right I think probably this one there was one other thing that I was thinking about oh traveling salesperson right we could apply the traveling salesperson to those points I really want to do that I need some energy I'm feeling quite tired I don't know if this will help oh there's 82 people watching right now really that's crazy uh what other music do I have I'll give you a sneak preview of the theme song this is just a sneak preview okay that's my quick sneak preview uh everyone spam agario um sorry limit Za I should say that I I think I used YouTube's like standard words of uh standard list of words to immediately um block somebody in the chat so if you use certain words in the chat I apologize okay um okay I'm looking to see if anyone's yeah agario is not going to happen today I know you guys I did uh the beginning of it oh question time yeah you could watch ask some questions now um um okay so I'm I'm thinking it is 1220 I I think I've got you know I'm I'm a little bit losing energy computer craft yeah I really want to do computer craft yeah I'm not prepared for that um yeah so I'll mention by the way um you all of you have asked about show I I would first of all I done a whole series of about 10 videos on genetic algorithms uh about half of them have been published you can find the rest of it in the in the live stream archives but those videos are machine learning so genetic algorithms is a is an algorithm to use an evolution use the evolutionary process for a system to learn something to adapt over time it's an Adaptive process um uh I the the machine learning stuff is probably going to come more in the fall I've been but but you can two things you can do uh if you want to kind of stay up to date on what I'm thinking um thinking I'll go to uh um I'm going to go to uh sort by most requested which is clearly machine learning I did a pass over my outline so the very first this is the set of videos that I'm going to make and I'm also writing a new chapter to the nature of code book that will'll go not through all of this but I want to start I think with just basics of classification I think I want to implement this thing called K nearest neighbor like from scratch and then show a how a library would do it more efficiently and look at the basics of neural networks and I've been looking also at a library called Deep learning forj which is a Java based deep learning library which I can use with processing uh to do um some deep learning stuff with images or shapes and so um please uh on this at this GitHub issue thread um send me your ideas for example applications or particular libraries that I might look at um that could be useful um yeah the Whiteboard is peeking in I will fix that uh um so that's one thing I'll mention about machine learning stuff there was something else that I was going to say that somebody had asked about uh uh Titus in the chat asks could you create a video how exactly pein noise algorithm works I have that video already go look for my pein noise uh playlist so there's a playlist of five or six videos about pearlin noise and how it works um okay uh so snake automated snake game yeah okay uh uh I'm looking back and forth computer craft yeah okay somebody had asked something else um all right so let's see here no um I think what I am going to do is finish off today with another coding challenge to make I would like to see this in my JavaScript window this one's not going to be so easy I have to say I thought the other one I thought the other one by the way was going to be really easy or easy is the wrong word but I thought the other one was going to take me very little time amazingly it took quite a bit longer than I thought um I'm tempted to do this though so temp this is this is going to take too long so hard to decide I should I should definitely always decide in advance that's why I'm looking at the chat yeah interesting it does look it's interesting how it looks so similar to the last one so let's let's do it okay so this I'm going to finish off with this today an answer some question more questions at the end um let me get myself uh ready here uh as always I always forget the this do doget this this this do this dot s this dot dot dotg do this dot this dot this dot going to do going to do going to do going to do do do never forget this dot this dot this dot this do never forget the this dot I'm G to do the this this dot this dot this dot the this Dot Song never forget the this dot somebody composed that song for me I'm resting my voice just try to get ready for the next challenge okay oh F Looper ask why you never play my this Dot Song well okay that's a very good question and I don't have a oops I don't have a good reason for it other than when I made the soundboard I had two this dot songs and one pear and noise song and so since they were by two different people I took the this Dot from the other person I took the PE noise one from you which is so this is random is noise pearly noise that is in the core but I should add your this do song hereand lthm itself those numbers aren't related at all you pick like I'm picking random numbers between 0 and 10 9 2 7 6 1 n 48 9 2 1 3 I pick nine a lot apparently but with pear and noise I might pick numbers like this two three four three four five six five four five six seven five six seven 5 6 S 8 9 8 7 six well this is like noise performance art 2 I'm thinking my brain is working this is like noise performance 2 but with curly noise I might pick numbers like this 2 3 4 3 four five six 5 4 five six 7 five six noise that is noise so this is noise that is noise this this is noise that is noise so this is noise that is noise noise that is noise so this is noise that is noise this this is noise that is noise so this is noise that is noise that is but with pearing noise I might pick numbers like this 2 3 4 3 4 6 5 5 2 3 4 4 5 hello have aell this is like pear noise performance art all right I'm getting ready to now do a particular video on the algorithm I'm looking for a tissue feel like I need to blow my nose I'm gonna step over here to do that I'm gonna mute my microphone I'll give you a little sampling of the theme song again um all right so uh here we are uh I I'm asked uh at what age did I start programming okay well I don't want to get too lost in this uh story here but I'll give you a a multipart answer to that question I believe I first did programming in the basic programming language on an Apple 2C somewhere in a like sort of Elementary School kind of age I also remember in Middle School in like a seven in seventh grade I did some Assembly Language and some more basic programming and then that was it and then I didn't actually program again until I want to say age 30 if you can believe that so I actually really only learned to program that like no 27 what what I have to do the math here so hard 28 it was 20 27 or 28 okay uh now that I've admitted that I I wasted a lot of years although actually I think not programming is not is I in anyway diffusion limited aggregation okay here we go okay let's see here we go this is going to be my last coding challenge for today uh I need to move this over here move this over here I want to cycle the cameras this is one that I really really feel like I should have done practiced in it Advance now I have I especially if I'm going to do this in JavaScript with but I think I'll could I'll do this one in JavaScript okay here we go ah so people are asking about the theme song so the the theme song is completed and uh I'm I'm working on I'm not actually I I with collaborating with um some uh friends and colleagues I'm working on a music video which is a lot of weird green screen footage you um and I um by the way so you're interested I'm looking for animations and colorful things made with processing or P5 that could maybe make their way into the music video as part of the backgrounds or the foregrounds so if you're interested in submitting something um you can I I would say tweet me at shiffman is probably the best way okay um here we go let's get started it's 1234 I think I I have maximum an hour I need to eat lunch I have something to do at 130 which is an hour from now so I would like to be done before that but let's see how it goes okay uh here we go there's too much going on in the chat I can't follow it any any longer okay um so here we go I'm gonna try starting this video with a bumper music hello and welcome to another coding challenge this one is diffusion limited aggregation okay so diffusion limited aggregation is an algorithm uh it's a it's an algorithm where I got to try this again I'm thinking about thinking about it uh Brownie and trees fractal yada yada yada let's look at what Paul bour says uh yeah electrolyte solution zinc ion ions diffusion uh whoa oh my goodness look at this how interesting okay let's start over uh so I'm going to definitely need the Whiteboard for this get myself ready okay let's see if I can make this happen Okay welcome to another coding challenge in this coding challenge I'm going to tackle diffusion limited aggregation so what is diffusion limited aggregation well I encourage you to take a look at two references there's always of course a Wikipedia page you can kind of find out a little about the history of of this algorithm where how it was thought of what it's apply to what it kind of uh um what what it can be used for um the reference that I'm using here uh uh that I read right before making this video or actually earlier this morning a couple hours ago at this point uh is a page on the internet from June 1991 written by Paul bour which describes the algorithm uh you can see that diffusion describes among other things the diffusion of the aggregation of zinc ions in an electrolytic solution ooo that sounds kind of exciting but anyway the point of what we can do with this algorithm is to create certain kinds of fractallike tree like crystallike growth patterns and you can see there's a variety of possibilities and I there's one down here that I particularly like this one which I might try to recreate by the end of this video but let me um rather than read to you as much as you might enjoy me just reading that web page to you in this video um why don't I describe to you a little bit about how this algorithm works at least how I think it works and then the internet can always correct me and once I start to write the code for it we'll see if I'm thinking about it correctly because honestly I don't know I should have practiced this in advance something is definitely going to go wrong in this video okay so let's say we pick a point at the middle of the screen and then we just say oh hello I don't know who we're saying hello to but uh there's this thing called a random Walker and the random Walker starts here just starts to randomly move around the screen and at some point it hits this point now obviously it's not going to take that exact path although could randomly and once it hits an existing point it gets stuck and then we release a new random Walker and it starts to walk around and when it hits an existing point it also gets stuck and then we release another random Walker and it gets stuck and another one gets stuck and another one gets stuck and another one gets stuck and as they get stuck we start to see this Fanning out pattern so this is what I want to do now I think it would be really interesting to actually animate the full process there's kind of a spectrum here we could write code to animate the whole thing like we see these random Walkers moving around the screen and getting stuck we could also not animate anything and just see the final image or we could do something in between I think I'm going to try to do Point by Point um but not animate the random walk itself that's what I'm going to attempt so let's go back over and we need some code to start with which I have here no no code I mean I have a p5js sketch with a canvas and a background and if I go back to the browser I think I have it running here in the browser I can open up the console which I'm definitely going to need for debugging um and so let's first start what do I need I want I think I want to have an object no you know what let's just start right now first let's do this rather simply I'm going to say uh I'm going to call the thing that's finished the tree I don't know if that's a good name for it but all of the points that are in the pattern I'm going to call the tree uh I'm going to need a walker the thing the point that's moving around and uh that's just about it really and what I want to do is and I need a size like the size the radius for each one of these points which by the way you could do it on a per pixel basis so that always could be one but I'm going to try I'm going to try something like 16 just to have it be bigger to start with so um the first thing I'm going to do is I'm going to create I'm going to say tree index zero equals create Vector a point in the middle of the window and then what I'm going to do in draw is I'm going to say for all the points in the tree uh uh say stroke weight R and stroke 255 and I'm just going to draw a point tree index i.x tree indexi doy so and let's not worry about this walker for a second so I'm going to refresh it well okay I don't need to refresh it it's live I'm using this adom package called live reload so there's the point okay so now what I want to do is I want to create something that I'm going to call a walker and I'm going to create I I don't know if this is such a good idea but I'm just going to put it completely randomly anywhere in the in the sketch window it probably should start along the edge or something or actually if you read Paul bork's Page I remember now reading a point that you can make the algorithm more efficient by cleverly picking it close to where you think it might need to be but I'm just going to create a random Walker and I'm going to say I'm going to see if that Walker should be stuck so first thing I need to do is check again all of the points of the tree and I want to see I want to know uh the distance between that walker and a particular point in the tree and if that distance is less than some threshold R I guess oh no r r * 2 right because I just want to know if those two circles are touching so if the circle if the two circles are touching the distance is less than twice their radi radius um if distance is less than R then uh stuck equals true so I'm going to create a Boolean variable assuming stuck is false and then I'm going to go through all of the points and if stuck is true I can say uh break and now what do I do here I'm going to say uh and actually what I want to do is like keep going until you get stuck so as long as you're not stuck keep checking all of the points and as soon as you get stuck set stuck equal to true and what happens if you get through this Loop and you're still not stuck then Walker should it should randomly walk by some amount let's and you know I could probably be more thoughtful about this walker dox should change and Walker doy should change the other thing I really need to do is I should make sure it stays on the I don't want it to walk randomly Far Far Away off the window so I should constrain it to um to between zero and the width of the window so let's see and now once it finds a part point when it's stuck um then what do I do I say tree. push Walker there we go and now uh let's see what happens here so I've got some infinite Loop problem this always happens uh with live reload I shouldn't be like there we go oh look at that so I missed up like something good is happening but boy I mess something up this is interesting so I must have used an X and A Y ah okay that should help yeah so interestingly enough this doesn't look so totally crazy is this correct though very hard to tell so let's do a couple things one is um The Stroke weight should really be half the radius um they should be right up against each other uh let's move them by let's move it by just one one thing I want to do is create um uh I'm going to I'm going to just make a random unit Vector to be a little bit more controlled about how they're moving uh and then I'm just going to say uh walker. add that velocity so this is a little bit better just to make a random vector and add that to the walker uh I I got to I think this live reload thing doesn't work for me because um um because okay that's good and actually maybe I meant for this to be times two yeah there we go okay so this is definitely looking kind of right right now uh let's the basic idea let's make this much smaller yeah so you can see this is actually working although it's quite of a slow algorithm can speed this up so I think I've got the basics of the algorithm correct actually it's just kind of slow to do this one point a time let's do it this way um one thing I want to do wow this maybe this isn't as bad as I thought Let's uh let's let's think about this let's do um I think we could release a bunch of walkers at a time so let's try um let's try releasing 10 walkers at a time and uh just to see if we can kind of get this going a little bit faster oh you know what the Walkers I think need to um the start from an outside point right well let me let me do this though anyway and then we're going to do pick how where the Walkers start differently which is going to be much better I think so um so all right so I just want to see something if I I'm going to create a bunch of these Walkers and then now uh actually I can just do this as a loop right uh while you're not stuck okay if hold on just pause for a second boy this is really hard to doing like two hours into today without having eaten very much very well what I was thinking I was going to be clever was like add a whole bunch around the edges uh and have the all just like kind of start walking and then remove them as they're done and I think I really need a a walker object to do that so let me um this is why I want to practice these things in advance to S think them through um thinking about the best way the best most efficient way to do this uh create vector by the way people are uh someone is asking in the chat Akash is asking create Vector creates a P5 Vector object which stores both an X and A Y um so okay so hold on I'm back and um I thought of something which I think it might make a little bit more sense to be able to play with this a bit more by having the Walker itself be an object so I would like the uh instead of just being a vector I want it to be an object that can store both where it is on the screen its size it can call functions on it that's going to give us more ways of playing with this algorithm and make it perhaps a bit more efficient so so let me go here and what I'm going to do is I'm going to create a new file and I'm going to call that file walker. JS and I'm going to make a walker object a Constructor function and I'm going to say uh I'm going to say this. position equals create Vector uh random width random uh height so I just want to take a lot of this functionality um and that I've written out here and I want to also whoops I want to create a variable called uh this. stuck and I want that variable to be uh false when it starts I want to have a function um that's called walk so I want to um I'm going to I want to have a function I want to have a function called walk where I implement this algorithm where I pick a random Vector I add it to the Walker so it moves somewhere on the screen I can strain where it is in the window um and I want to have a function that says check uh what What's a better name for that function like uh update no uh uh stick I can't think of a good name whatever uh check sticky check stuck whatever that's going to be the name of the function check stuck and in that function what I'm going to do do is I'm going to take this particular algorithm uh and I am going to I actually kind of want to see them walk but I think I have I actually kind of want to do this without the while loop so what I want to for a second what I want to do is check all of the points on the tree and see if the distance between this Walker's position right which is actually uh this pause now dot right the Walker is no longer The Walker is now an object with a position um is near anything that's in the trees's position because everything in the tree are Walkers that are stuck oh you know what I didn't do is I'm not delete anyway so okay keep so um and then if it's stuck I'm going to do something obviously okay so what I want to do here now is create an an array of Walkers and actually tree uh index zero is going to be a new Walker that is in the middle of the window uh then and that is stuck so what I'm going to do in the object is I'm going to have some optional arguments I'm going to say XY stuck and I'm going to say um uh I'm going to say uh X um I'm going to say X or this is a way of doing optional arguments so if I pass in an X I'm going to create the vector at that X but if I don't X will be undefined then I'll get a random value y or or random height okay and then uh same thing here I'm going to say this stuck equals stuck and if it's undefined that's the same thing as saying false um and then I Need To Say by the way this do stuck is true and this is this. pause tree. pause okay and I should really check against uh some other array like the others I'll call that which is called tree so what I want to do right now is I want to create one Walker in the tree and then I want to create in the Walkers I want to put just a random Walker so I have tree and I have walkers and I I might as well do that the same way in index spot zero and then what I want to do is I want to see oh and you know what I should do is I should uh now I can also have a function which is called uh this. show and I can actually take all this code I should have done this at the beginning I can take all this code and put it in the object so I can um set a stroke weight set a stroke and this. pause and draw the point at this. pause doy and and I you know I could be a little smarter about this and actually just make this an ellipse so I could be more precise about the radius and I could say R * 2 R * 2 which is a global variable at some point but I can have them be variable sizes at some point okay so now I have this object I have a walker object which can move it can check to see if it's sticking to anything else in some other array and it can also um it can also draw itself so what I want to do first is I just want to say let me display everything in the tree and let me display everything in the Walker's array okay ready so if I if I reload this sketch Walker is not defined oh uh sketch line seven it's not defined because I have to remember to add a reference to it in my Javascript file uh to walker. JS and missing walker. JS line 25 has an error so let me go down and see uh this. ellipse this. p.x this.p doy I don't see any error here on line five 25 missing parentheses after argument list sketch. 7 Walker is not defined function walker uh period no com hold on time out what am I missing here walker. JS oh is there a comma okay thank you oops I had a period there not a comma there we go great so I should see here whoops I should see this is this and this is the Walker so let's now have let's just now in sketch let's also have Walker's index i. update oh update was not it walk so you can see there it is moving randomly it's going to take a while to randomly intersect that but it is walking randomly uh I could obviously make it uh walk faster so what I want to do now actually just as an experiment is I want to I this is not at all I've gone off the beaten path here from the actual probably algorithm but I want to put 100 Walkers into the space right okay so they're all moving around randomly and what I want for them to do is if if Walkers index I check stuck others then Walkers uh then I what I want to do is say walkers. splice I want to take it out of there and I want to say tree. push Walkers index I so I want to uh whoops what I want to do is I want to anytime one of those Walkers gets stuck I want to put it in the tree and I want to take it out of the Walker's array because it's not something that's moving anymore so uh we let's check this. stuck equals true so actually um let's make a function uh is stuck actually so I don't need a I don't need this variable I can just say return true and if it kind of gets to the end return false so let's look at that um and see what happens others is not defined a tree right I have to pass in the tree there we go you can see them getting stuck go go Walkers go go go go Walkers go so you can see how this takes a very long time I I'm kind of curious to try a few things let's try a thousand Walkers and I this isn't what Paul bour describes what to do um on the website at all but I kind of like and so I kind of want to um highlight them differently so uh I should actually by the way I should have that be a particular variable uh because what I would like to do when I draw them uh is if if this dot stuck I want to give them a different color uh so let's uh so we can see which ones are stuck um so now though uh I think better more than better than adding a ton so let's still add it let's Act actually do this particular algorithm multiple times per frame like let's let it try to move all the Walkers 100 times per frame whoa why are they all clustering near each other am I oh I'm drawing them 100 times I don't want to I don't want to do this show so I just want to show them once there we go this is what I was sort of hoping to see so now there finally okay so now we can kind of see the algorithm happening which I think is kind of interesting it's it's going to happen very slow this is a complete and total brute force method um but I finally got something that I like here um and because at least it's sort of interesting to watch it is happening kind of slow slowly I want to try a few things to make it happen faster let's increase to 200 Walkers and let's increase the number of times uh to 250 um the frame rate is a little bit slower now I kind of like to keep the frame rate up so let's go down to 200 um there we go so we could obviously um and the other thing I could do uh it's interesting oh it's slowing down over time so the reason why it's slowing down over time is there's more distance checking so one thing that I could do that I would hopefully um help this run a bit faster um which normally I wouldn't care about but it is kind of bothering me how slow that it's running is let's see if we can eliminate the square root calculation um and to see if that makes it run a lot faster so one thing that I'm doing here in the check stuck function is using this distance function and I want to write my own distance function I'm going to call it distance Square ukian distance um and I want to take it I want it between two vectors A and B so what I want is the difference in X which is bx a a dotx I want the difference in Y which is B Yus a doy and now normally if I were I would say return the square root of DX * DX + Dy * Dy this would be regular oldfashioned ukian distance right uh a um the square root of you know the hypotenuse of a triangle a plus b c s or c equal the square root of a square plus b^ s so what I actually want to do here is just write this algorithm but take out the square root and then what I can do now is not use this but use my own distance squared function and then I can actually have that distance be uh R * R * 4 which is what I want now is for the distance to be did I did I mess something up here yeah I'm missing a parentheses uh what I want is the distance to be instead of checking if the distance is less than R * r i want the distance r squ or R * 2 2 is R * R * 4 so this now uh distance uh dist squared this should hopefully be a lot faster um you know uh did I wow good okay so boy just eliminating that square root you can see how much faster this is now okay now here's the other thing is every time I remove a walker oh this is kind of nice actually just to like Let It Grow with a fixed number of Walkers I'm kind of enjoying that and I have sort of an interesting pattern I don't know why oh did the stream cut out oh wait back there was a technical glitch there but hopefully you're still seeing me I seem to be I see myself again so you can see here that I have this kind of nice finished pattern which I really quite like actually um so some other things that I can do here are one is whenever I remove a walker uh I could say like I always want to have 200 Walkers so um uh I can I can always say like wow walkers. length is is sorry is less than 200 um walkers. push um walkers. push uh new Walker so this is even when they get stuck I add new Walkers so I never oh and by the way I started with so let's make a variable called uh Max Walkers equals uh 200 200 and we're going to start with uh that's we're going to do it oh no no no that's a different value Max Walkers I kind of made and then I'm going to make another variable which is uh iterations which I'm also going to make 200 let's make these variables I think it's kind of nice right we can see how it behaves and we can see how it behaves so now I'm always keeping um 200 Walkers so I want I want this really to happen pretty fast so let's see if I can up the iterations a bit um and see if we can get this screen now it is uh it is sort of slowing down so I think we're we're in we're in pretty good shape now here's the thing I think what's interesting oh you can see it really slowing down um so if I go back to oh and you know what there's also a problem here which is that I shouldn't be creating random Walkers anywhere in the window I should only be creating them around the edges so let's also make that Improvement okay I think it's worth making that Improvement so I'm going to make I'm going to go back into to the Walker and instead of doing random width random height I need a function uh make Rand uh let's do a random point and I'm going to give it that X and Y right I want to have some separate function somewhere that's going to take care of this for me uh actually I'm going to say if x this.p equals create Vector at that X and Y so uh if you get an X and A Y um otherwise let's pick a random point now I'm sure there are lots of clever ways I could write a function to give me a random point along the edge but the way I'm going to do it as as follows I want four possibilities top right bottom or left so if if I'm picking something along the top I want a random X and I want to return create Vector uh that random X comma 0er else if I equals 1 let's just say that's the bottom uh and again we could make this more efficient let's make that along the height else if I equals two I want a random Y and I'm going to along the left side and in all other cases I want a random Point uh along the right hand side so let's run this now you can see that I'm only picking random points that are coming from the edge which I think is also going to work a lot better because I don't want to pick random points kind of inside the thing that I'm already creating so here we have now uh diffus Fusion limited aggregation go go go I wanted it to finish um so one thing that I kind of miss so this I I got to come up with a clever solution to figure out when it's done because you can see it's kind of uh it's now like just infinitely picking points along the edge and it kind of went crazy a little bit when it kind of got to the edge so but I kind of like the idea of actually just for right now um never not adding um not adding any more Walkers and starting with a fixed number of points so I'm going to start with 1,000 points and yes it is running kind of slow but when those points are removed we got to get our first point to get stuck randomly there we go I think it's going to kind of speed up over time is my belief but uh and you know one thing I could probably do which might also help it run faster is draw less stuff uh or what might be better is to just add you know add one point at a time uh so I think really the way that you would do this is I might let's just do five but like have like a thousand iterations here's another way to doing it yeah I like this this is nice I like looking at it this way too so there so many different ways you can visualize this I'm kind of stuck on it um and I encourage you to uh sort of enjoy coming up with ideas on your own but what I what I do want to do is um what I do want to do is uh let's let's go back to this um what I do want to do is kind of look at how um how you can vary this algorithm to get different star different kinds of patterns so let's go back and look at uh the Paul Bor website and let's first sort of see a couple things one is how right now this is essentially what I'm getting you know I could do a better job of kind of thinking about the layout of the space and making the algorithm more efficient or that you know letting it run for a long time I encourage you to do all that I'm going to release a processing version of this which maybe runs for a while and like renders the final version to an image somebody remind me in the comments if that doesn't exists so we can make a version of it it looks like this in the browser it'll kind of I don't want to like shut down a browser window but let's at least first think let's try to see how we create this pattern so this pattern is all about the seed points what if I fill the tree with points along the bottom so let's let's fill the in the beginning instead of having one point what if I say four r i equals I'm going to say r x equals 0 x is less than with x +al r * 2 and what I want to do is say tree. push new Walker at X comma height so I just want to create a whole bunch of points that I start with at the bottom and you can see what happens when I do that now what if I want I think I want all my Walkers actually just to start at the top so let's go now to the Walker file and and what if I basically say h you know what let's just all always have I'm going to comment all this out and let's always have all the Walkers start at the top so I just changed this function have all the Walkers start at the top whoa what did I do wrong the Walkers are starting time out um uh uh what did I do what did I do create Vector X return X comma 0 so it's at the top and the tree this new Walker's X comma height why are they getting stuck oh no hey let just try something here I think the this I like better but doesn't make a difference that worked for a second random Point let me put this back yeah why are they this works uh why why if I only create them at the top are they all getting stuck uh hold on I need them I'm debugging again in a sort of 110 I got to solve this okay do I equals p hold on so you guys in the chat are probably giving me good suggestions here um there's one point at the top for whatever reason why is there one point at the top you see what I mean hold on what's this point why is that a walker or a tree that's the tree what's that extra point there's a whole row of stuck ones at the bottom there's supposed to be a row of stuck ones at the bottom but what's this extra one at the top what's this point H where is the Walker getting a point hold on zero lost my mind here it's in the tree uh and add true in the Constructor somebody is telling me something good I think the first one well there's an extra there's an extra spot up there I must have this in like a really obvious place that I can't see x = 0 X is less than wi yeah but I took out the whole dependency on that here uh so why is one of them oh I know what the problem is ah oh JavaScript you guys see what the problem is guess what when X is equal to zero it evaluates to false okay let me back out of this for a little bit here uh I want to get to where I was when I started debugging so I can yes uh Dr Fresco is probably telling me this the whole time in the chat and I just like didn't see it because there's too many other messages and I wasn't able to like get my head around it oh what a what an awful mistake uh okay so let me go back to okay so um look at the crazy Walkers I don't know what they're doing um okay I'm back there was a major problem with my code which is right here oh this is a um whoops okay hold on try that again I'm back there was a major problem with my code which is right here remember how I was saying I'm so so clever and I can check to see if the user gives it an X and A Y so if x and if there's an X and A Y make a vector out of the X and the Y otherwise make a random Point well it turns out that if you give it the value zero right zero evaluates to false so when I say make a walker at 0 comma 0 for example or Z comma height it's actually going to not make it at that point but give me a random point so what I actually need to do here is say as long as X is not undefined and I'm sure there's a more elegant way of doing this but I'm just going to fix it right now and saying and Y is not undefined do this and that should I think I have some sort of uh browser having crashed problem infinite Loop problem if x probably um uh oh right I'm drawing them all again h i un yeah it's just slow and then um um and also I think I can do away with this third argument stuck and just say this dot you know it's if if I'm making it at a particular point it's automatically stuck otherwise it's automatically not stuck just to be clear about that and now we should see okay so here we go now we have starting all the points at the top and they're going to go they're going to kind of get glued at the bottom so this we should see some kind of pattern as this runs for a little bit you know Speed Ahead in this video if you want you know listen to some music while you're uh waiting come on trees grow so um so we should see a pattern that's coming much more like what we've got here in oops I'm in the wrong place what we've got here in this particular example so here's another so come up with your own scenario what if you start with points all along the edges what if you start with points along a radial path in a circle or have points moving um ah you have points starting around the edges of a circle and your random Walkers all start in the center you can get something like this um now but I do want to add something else here which is um oops I got too much music playing okay I do want to add something else here uh let's just see how it's going you can see oh it's it's moving along here we're growing our trees I want to go I want to go back to Paul Bor site and you can see something here which is interesting look at this particular image now as I scroll down look at this particular image and look at this particular image there's a kind of density or fuzziness or almost hairiness to it and you can what you can actually do is uh it's called stickiness you can have a probability you can think of when it touches something that's part of the uh part of this tree this this diffusion limited aggregation thing that's growing you could have a probability that it gets stuck rather than automatically getting stuck uck um so I think that's something interesting to add for example if it's within this threshold Jo don't just automatically have it get stuck but pick a random number between zero and one and if that random number like our stickiness is now 10% uh then I could actually have it get stuck and unfortunately we didn't get to see how that was going um let me see if I can make this run a little faster um there's a couple things um so I'm going to uh I'm going to give it more iterations and more max random walk Walkers um the other thing that I could do actually that I think would really help is I could have the uh Walkers as they walk not just I could have them only ever walk down so I could actually say I'm just going to comment this out uh VAR velocity equals create Vector some random amount between negative 1 and one and then some uh random amount between zero and one so that these uh the the random Walkers only ever move down boy they they move down much too fast I guess I should maybe I should weight it just a little bit something like that oh okay hold on too many this was a nice idea that I had that doesn't seem to be working out very well there you can sort of see I don't know if this was a good idea or not but you can sort of see how if I have them randomly moving down why do they always uh go back up to the top am I oh I'm adding them back in again that's making it run slower so um uh uh yeah so I I wanted to take that out actually and you can sort of see anyway you could see that by varying lots of the algorithm I'm G when I when I publish the code for this I'm going to make you a nice clean version that works really well because there's so many variables you can play with here okay I want to play with one last variable so uh look how slowly come fall Walkers go to the bottom stick to the aggregation pattern oh um okay so let's do one last thing um what I'm going to do now which I think will be particularly interesting and uh is try to recreate this pattern notice how the walkers at the center are larger than the ones on the outside you can see this one as well um I didn't get to do the the the probab didn't get to see the the probability thing play out uh let me take that out for a second and so what I want to do now before I leave you if you're still watching is I don't want to have r as a global variable anymore I want to have each Walker have its own variable so I'm going to make R 32 uh and I need to look for anywhere that I reference it this. R uh other. R right now I'm also importantly checking my own radius against another radius or others index i. r and then I also want to draw it with this. r this R so one thing that I could do which is and then I want to go back to the center ver the version where it's uh all um where it's starting in the center which I think is a bit easier to kind of work with right now so I'm going to take out this tree that starts off the bottom let's just make sure this still works whoa look at these so if I make them really quite big that was kind of interesting uh let's make this eight okay so you can see what this looks like now and this is working again now with um with uh with just sort of larger circles and I kind of would like to uh just also when I draw them I would like to give it a little bit of alpha here I think would be worth seeing uh uh let's just a little bit of alpha Okay so so okay so now we have the basic core algorithm happening and you can see all of these uh Walkers getting stuck so what I want to do I think which I think would be interesting is I'm going to I'm going to make the maximum number of Walkers just 10 but I'm going to increase the iterations by 10 to a thousand so these are the Walkers now sticking uh one at a time now there were only 10 of them so 10 of them are going to get stuck that's all we're going to see but now what I'm going to do is I'm going to each time I delete one from the array uh I am going to add a new one with a smaller radius so what I want to do is let me get the oops let me get the radius of the uh last one in the array this might be a and I'm going to make a new Walker with uh boy uh I want to make a new Walker with a that that radius times 0.5 so half the size the problem is now I need to make the Walker be able to be created now with a radius but at a random point so I think one thing I need to do one thing I could do actually this is better is I could say if arguments.length equals two that means I've gotten two arguments in X and A Y then create the then create a a walker with a radius of eight otherwise then create it with the radius of and then otherwise if um yeah otherwise create a the AER with the radius of the first argument so if you have less than two arguments so this is another way I could just check that arguments array I have a video tutorial about that otherwise I can uh I can get it I can make one with a particular radius and so let's see uh let's see what happens here um uh okay so where am I making Walkers ah so this is with I forgot no no no no no so with wait or else if arguments.length equals 1 else now with no arguments right then the position is random the radius is eight and stuck is false so uh now the other whoa what just happened here so pause uh let's look at the sketch ah whoops I have the third argument there okay I had by accident whoops I had by accident a third argument left over for when I was passing true or false in for stuck so if I take that out um whoops hold on no there's going to have to be an edit Point here while I because I screwed this up yeah a lot of people are asking about the grid optimization from the pon distribution and absolutely we could add that in but hold on a second I want to I want to fix this I realize I have some okay so back I realized there's a problem here where I have actually I'm passing into three arguments because I had an extra stray true from before so let me take that out and you can see this is working now strangely enough though uh the um the Walkers are getting like really really really small really fast and I just realized that's because um what I want to do is get that before I start adding a whole bunch of them I want to get the radius of the last one there cuz when I add one and get the radius of the last one they're getting smaller and smaller and let's let's just make them uh go down by 75% so you can see here that the Walkers are getting smaller as they adding them back in and maybe that's like too much they just get smaller so quickly so let's see what this does am I yeah so you can see over time as I'm adding more and more walkers in they're getting smaller and smaller and smaller uh we could also do something now while we're here let that run for a little bit um let's let's see if I give it 50 at a time will it it kind of perform okay um so one thing that I want to do is uh and I actually could just have every Walker in sequence be actually a little bit smaller than the previous one that might actually be a better way to do it um because I could have like a radius counter uh and and and that's kind of uh yeah let's do it that way actually let's try this I want to have a radius a starting radius starting R uh I actually just say radius equals uh I can have a starting radius just for that Center one no that's fine radius so I want to have a starting radius of eight and whenever I make a a walker I say radius times equals 0.99 so shrink it a little bit shrink it a little bit and then there's another place where I make new ones which is here shrink it a little bit and then actually I can take out this idea of the argument because I'm just going to use a global variable I don't love this anymore I just use a global variable radius that's always shrinking uh to go back and um put that in here uh and have this always be radius radius so there is no there is only back now I have I'm sort of simplified back to just two cases I either getting an X and A Y and this. R is always just equal to that Global variable rate I don't like now how I've done this but we're going to do it this way anyway so you can see every single one is like 1% smaller than the previous one which is kind of interesting cuz we're getting sort of they're actually not exactly in order so that's not what I intended to happen but we are seeing sort of an interesting result from this and they're getting smaller and smaller and smaller and then I could also say what I like about this is I couldn't I now have sort of like a terminal point where I can say if the radius is less than one um only whoops only bother to do this if radius is greater than two so now we actually like I don't want to have circles where the radius is less than one so now we actually have a terminal condition for this algorithm and I also now want to add one last thing which is coloring them so uh and you know I could actually uh so the other thing we could do is I could have a um I could map their Hue I could map their Hue uh so I could say it I could say uh color mode HSB and in the Walker object itself got to add this in I could say Phil I could I could say the Hue is mapped to the radius which goes kind of between like 0 and 8 to between 0 and 360 and I could give it that that color and I think I'm actually going to say no stroke and let's forget about the coloring it based on whether it's stuck or not and I have an error somewhere so we can see now and they're not actually so I probably should order their color based on when they get stuck but this is kind of interesting nonetheless and you can see as they're getting smaller and bigger and you know uh I don't know what just St why it just stopped right there oops but you could see I'm going to clean up this code and give you a working version I might change the order around the colors I'm going to um uh I'm very good at crashing Chrome but you can see sort of the ideas is behind this particular algorithm I don't really I time is up I think because this has gone on for way too long I don't have a good perfect version of this to show you but um I will uh I will include that in the the link from this video to the source code I'm going to make both a P5 JS and a processing version of this so I can do kind of like a higher resolution one that kind of generates it and just saves it to like a JPEG so you can see how that works maybe I'll come back and do another video followup about that but now you can see sort of the basic idea and the implementation behind this particular algorithm that's on Paul bork's website okay thank you for watching and I'll see you in another coding challenge soon okay I should have I forgot um uh uh I should have break from the loop where did I break where where did I miss so I'm gonna I'm gonna fix this now I've got to go actually this was uh so first of all I absolutely could use the like uh tree thing uh I should break from the loop so where should I break uh if it's stuck remove it oh you know what this should um I should really go through the loop backwards that's bad because I'm removing from it uh oh oh this is the problem of course um while and radius is greater than one so I can I should do that test there of course I'm gonna come do an addendum so and then also I want to just create so each time it gets stuck um then I'm going to say I'm going to change the I'm gonna set the Hue actually the moment it gets stuck so it actually has no color until it gets stuck um and so I'm going to go back to saying it's white or it's and I'm going to say this do H equals H so I'm going to give it a a hue the moment it gets stuck and so now whoops this do stuck otherwise why oh because I'm in HSB mode how do I get it to be white in HSB oh no saturation there we go right no Hue saturation brightness right oh how do I get white in HSB and I'm losing my mind and let's have the uh uh let's make shrink a variable so oh my God it's 137 I really have to go um am I still mapping it from ah whoops there we go wait this do here that's happening why is this not oh whoops I'd had the saturation off there we go okay yeah the Hue uh the Hue should is going to have to increase a little bit more and this the shrink is much too uh there we go this is what I was attempting to do I'm gonna come back for a second uh back for a quick addendum I actually I kind of cleaned up the cat a little bit and it's making it work a little better now um I had two big things that I missed one is that um it was it was crashing the browser I think I need to point this out because I had this while loop that was always trying to fill it I was trying to fill it if if it ever got less than a certain amount but I didn't allow myself to add any if radius was below a certain amount so it got stuck in that while loop so I fixed it to just say only do the while loop if radius is greater than one and the other thing that I did is I added a hue variable so that each time it gets stuck I increase this sort of global Hue variable and you can see now the Hue is sort of assigned to the order in which it gets stuck so this isn't doesn't exactly match um what you see on the uh these particular scenarios but I bet you with a little bit fiddling and speaking of the algorithm you could get something like that so um give that a try and uh if you can if and as you make more beautiful and interesting versions of this uh think about ways of optimizing it of where you start the Walkers how many you use how you check to see if they're near something um we'll come back and I'll make some improvements to this okay this is really the end now goodbye okay um so I'm sorry everyone that I'm now going to be rushing to leave um I normally I would take some time to answer questions but I forgot that I I made some appointments here starting at 130 um and uh I'm just going to um say uh I'm just going to send a message saying that I'm running a little bit late um and I'm going to check here um to see sorry I'm trying to look um I'm trying to look for the my message ah here we go to see how late I am oh whoops uh I'm not finding it uh I'm wasting all this time trying to here we go uh almost there everyone uh and I'm going to go to home um ah okay so that's fine I'm only like about 10 minutes late which I think is not that big of a deal um so uh let me just check back to the chat again uh to give you guys a few parting words uh uh okay I hope you guys en I hope everyone enjoyed this today it was a little bit crazy I hope two video tutorials will come out of this both much longer than I could have ever anticipated and hopefully somewhat useful I will also be releasing the code I have of a mind to like redo these challenges again having done them once but I guess you know to leave leave them messy and crazy that's kind of the way that it is so um um I'm going to get going um just to uh quickly remind you guys if you I'll be doing one live stream again next week this is the last live stream for to for this week uh if you want to sign up for an email list look this is me live right now if I hit play here look there I am on my website live um uh by um you can put your email here at coding rainbow.com I'll send an email over the weekend or Monday kind of letting you know when the time will be for next week if you want to tune in live uh if you subscribe on YouTube You'll also get a notice and I have a slack Channel where you can suggest topics and ask questions um and there's a small Discussion Group there if you want to sign up for the patreon which is a crowdfunding website um I also have stickers available via Sticker Mule you can tweet me if you're interested in those they look like this you can buy them uh uh if you if you're in New York City and I run into you on the street I will hand one of these to you um and I had tshirts available at one point but those are no longer for sale but I'm going to do another run of them so if you're interested in that um let me know or better yet you can go to cotton.com product/ coding rainbow and you can put your email in uh here so far 11 people have requested at the tshirts I think they run them again once it gets up to 40 um so I think that's about all I have to say I don't know what I'm going to tackle again next week um so send me your suggestions on GitHub on Twitter or if you're in the slack Channel um that's where I'll be sort of posting what I'm thinking about and uh uh and the kind of different things that I'm looking at so um send me your feedback uh yesterday's live stream it wasn't yesterday actually um the um uh yesterday's live stream I just released it's here coding rainbow live number 55 and I did a Flappy Bird and an agario clone challenge the agario one I only just did the basic mechanics I didn't actually get to all the networking multiplayer stuff or a lot of the features I will try to come back to that at some point so many topics so many topics so little time so uh thanks again I'm looking in do I do any CSS programming a little bit and I do have if you are interested I do if you go under these playlists uh uh play number seven is a whole set of playl uh tutorials about HTML CSS and the P5 Dom Library which I encourage you to uh check out if you're interested in learning more about G and GitHub there are these videos The Connect some websockets I have got a lot of stuff in here so um so uh please be in touch thank you as always for watching thanks for your enthusiasm uh and I'm gonna dance my way out of here I guess awkwardly oh it's awkward that I'm still here right so I'm gonna I gonna I have to press a button to stop the stream should I try that again to be more elegantly about it did I not oh I didn't press it correctly bye