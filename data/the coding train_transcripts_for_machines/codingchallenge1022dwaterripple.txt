hello and welcome to a coding challenge in this coding challenge I am going to attempt to make a 2d water simulation now you might be asking how are you going to do so so this is actually I wrote this code not I didn't invent this algorithm but I wrote this code it's got to be at least 10 years ago this is one of the first things this essay on how to create this algorithm for creating 2d water ripples has been on the internet for a really long time in fact it's not on the internet anymore this was the URL and this URL hugo dot elias it doesn't go anywhere but thankfully the Internet Archive and I don't know who this person is who wrote this essay thank you hello if you're out there let's get in touch write in the comments but this is a really fun algorithm and it works it's very if you if you're looking for some background for it you want to know a little bit about how pixels work twodimensional arrays maybe cellular automata this idea of a grid of cells with States I've had a bunch of videos that I made related to how this algorithm works that I will link to in this video's description excuse me but what I'm going to attempt to do in this video is just read this webpage and write the code that falls along exactly what it's doing and see if we can get the result that is on that it's described here to create 2d water ripples so let's just get started I'm all eyes for Hoffman have to read this out loud ok blah blah blah narrative narrative narrative narrative narrative so firstly you'll need two arrays of words both integers okay so let's do that so let me go open up processing processing I always feel I have to say this is a programming environment built on top of java more information at processing org download this if you want to follow along and I will create a JavaScript version of this that runs in the browser as well when I polish the code all right so let's set void setup void draw these are the sort of basic functions to control the flow of the program in processing and I'm going to say I'm going to make two 2dimensional I'm just going to say like 100 by 100 just arbitrarily right now let's actually do a 200 by 200 and I'm gonna I'm gonna say water one water to because I don't know what those are could be used for yet look at this and like I'm gonna say size 200 200 okay so I have a window that is 200 by 200 pixels and I have this these two men Tori's and I bet you could write like a superfast crazy version of this with shaders or something so maybe you're watching this you're gonna want to do that later but let's try to do this basically just follow along okay back to here that's right these arrays will hold the state of the water one hold the current state the other holds the state from the previous frame so let's actually call this current and previous oh why can't those have the same number of letters in them no preview play to you so this is gonna be current and play view whatever no that bothers me more previous okay it's important you have two arrays since you need to know how the water has changed since the last frame buffer but for one buffer I could call them buffer one buffer anyway data from the previous frame blah blah damping some integer between 0 & 1 so we need some some so we need to have a damping let's try 0.9 so the beginning loop what I need to do well first I need to I need I need to fill those arrays with some values strengthen matters I think they're gonna get filled by default with with zeros and I also want to I think I want to keep track of the columns and rows in a variable oh that didn't work the way I wanted it to I lost my ability to type oh that's right all right there we go for every knot so let's this is begin loop so this is the it boy this background is making hard for you to see the algorithm but for every non edge element so let's do that for every non edge element what does that mean for int X x equals 1 well let's actually use I and J I equals 1 I is less than columns minus 1 I plus plus that is a way of looping through every non edge element and I'm gonna do the same thing with j j is less than rows minus 1 and a j plus plus alright and now what do I do let's just copy paste this and say all right so what this really means here is this is saying current the current X Y which is really current I J is equal to the sum I mean you can see these are a bunch of neighbors X minus 1 X plus 1 y plus 1 Y minus 1 what this is really doing if I come over here to the whiteboard you'll have to excuse this I'm doing some tutorials about tensorflow death I didn't want to race that so that's still here in this coding challenge basically if this is my current IJ I want the new value that goes in this i J to be a function of its value as well as its neighbors to the right to the top to the left and the bottom so that's what's happening here so I'm gonna go and I'm going to say equals previous X minus 1 y plus previous oh it's not X I'm using I and J which now I regret making that decision all right I J it's all plus right now let me go back here wait these are being or these being multiplied by each other this is weird where are the pluses I sort of assumed this was all being added together right it doesn't actually say let me see does it describe this yeah I'm pretty sure this is addition well if let's try it it would make sense to add everything together so I minus 1 J boy I plus 1 J then plus I J minus one plus I J plus one rule come on indent this the way that I like plus and then so that this whole thing divided by 2 minus previous I J so I think I got that right so basically and let's actually let's just do this so this should be all of it I mean I don't love the way this is Auto formatted but we'll live with it I can actually put this on the next line might make me happier so this is all of these added together previous I minus I minus 1 I plus 1 J minus 1 J plus 1 all added together divided by 2 minus what the current value is so this is kind of like an image processing algorithm you're saying like add up all the things around me and then subtract my value okay now display buffer 2 and swap the buffers wow this is really coding jobs gonna be over soon so what do I what's one way I could display it hmm well let's first set a background and then while I'm doing this I could say load pixels and I could say update pixels right because what I could do is I could use the value of current IJ to be the pixel color yes so I'm gonna say pixels so let me first get an index value index equals I plus J times columns this is an algorithm that I've talked about many many 200 this has to be inside of the loop this particular algorithm I talked about many times and what this algorithm is doing is it's saying like the pixels are actually stored in a one dimensional array but I'm looping through this twodimensional array so find the right location in the one dimensional array and then give me a color equal to the current I J value okay and update pixels so let's just run this and see if anything happens it's all black that's good because it's all zeros right what if I were to just initialize let me just go through I didn't actually do the swapping part but just just for the sake of argument let me go through and actually write something to initialize that whole array two dimensional array and just say current I equals 100 previous is just V IJ J equals this is a little bit silly what I'm doing but I just want to see that this is working run this again we should see a gray value whoops run this again right we see a gray vow if I do 255 for both of those I'm gonna see white okay so it actually is rendering what's in there and then I forgot something really important which is written in the algorithm swap the buffers because what is now current should be previous for the next frame and then we have a new current which would then become previous for the next frame and so there's a nice swapping algorithm that I can use to do that I can create a two dimension of referenced called that I'm gonna call temporary which should equal current then I'm going to say previous equals oh no a miss a twitchy equals actually yeah previous ten so I missed a previous is now the current right the current is now previous and then I can just reuse that other the previous one for current instead of making it new two dimensional array this is a swapping algorithm I have to store a reference to previous because I'm gonna overwrite what previous is pointing to but then yes that current equal that so this should now still work but I'm not gonna see anything so now hopefully we're gonna see something now here's the thing I kind of I kind of want these to be floats I don't know why they're integers sort of feel like they should be floats because I'm going to do all this like math to them and so this should also be a float and now what if what I'm going to do is I'm going to whenever I click the mouse so let's just see if this works to be lets say previous previous like 100 100 equals 255 and let's see if this is gonna do what I think it's gonna do I'm just thinking thinking I'm thinking I'm thinking like a crazy person while I'm livestreaming does this make sense what I'm doing of whatever let's just run it yeah there we go ooh something happened it's like spread its spread out from the center there mmm what did I get wrong oh if did I forgot about the dampening I forgot about the dampening very important there so where do I do that so now I also need to say current I J I need to dampen it equals current IJ times damping what I call it damping or dampening because I should call it dampening right dampening I'm back that was edited out like a me just like spinning my head around for a while there because I really was not being very careful it this says buffer 2 here this says buffer 1 here and in my code I have previous I'm adding up all the previous dividing that by two and then subtracting out previous but that's not what I want right because we have current and we have previous and so it's different data so I'm taking the neighbors from previous and then subtracting out what's in current so let me fix that let me fix that change that here the dampening is there I added that in while I was debugging maybe you just saw me do that I'm not sure and now aha there we go that looked like a water ripple all right let's let's be a little bit more explicit of all let's um let's just make the dampening zero like really high I'm just curious yeah you can see that ripple kind of going out whoa and bouncing around the edges cool I'm gonna leave it at 0.9 now this is really what I want to do let me make this like 600 by 400 let me add mousepressed and by the way the let me put let me I'm gonna take the columns should equal the width I'm gonna put all this the rows should equal the height and I want to initialize I got to do this all after I set the size and now these I can set the the two arrays oh so I want to do all that and setup so that whenever I change the size of the window to the number of columns rows and the kind the two dimensional arrays all change so let's run this and see just see whoops what happened to my oh I commented it out that out so now what I want to do is when I click the mouse I want to find the right spot in the array and I want to say index equals Mouse X plus Mouse Y times rows and me clicking the mouse is like dropping a pebble into the water and so I can say I think I should I put it in previous I it might not matter previous index oh no no no I forgot these are two dimensional arrays already so I can actually just a previous mouse X now it's y equals to 55 so as I click and I'm just curious I think it'll actually work the same way if I put current yeah so let's let's use current it kind of makes a little more sense to me let's D let's increase the dampening a bit I mean it's actually decreasing it so the ripples go out a little further I want to see them interact with each other that's pretty cool and so there we go water ripples in processing pixelbased water repulsive and now would be so what oh oh what am I even doing what am I even doing Mouse dragged there we go how lovely look at this wonderful water ripples all rippling around so yeah I think now I've made something that you the viewer could do much more with for example what if you thought about color what if you actually started with an image and then you made the sort of pixels of the image the initial values ah and you could like ripple over those oh I still want to do that I'm not gonna do that I'm gonna let you do that make something with this now this is eventually gonna get really slow and it's probably gonna be really slow into more the big larger the higher the resolution I make and if I'm gonna try to make a JavaScript version of it it's probably going to be really slow due to how slow pixel operations are in html5 canvas but I will think about all this stuff I just want you to be aware of that I'm sure that some of you will write in the comments and have some clever ideas how to make this into like a shader or something that's heavily optimized but I'm happy where this is this is twodimensional water ripples thanks to the Hugo Elias page from many years ago about how to do this algorithm in two dimensions okay thanks for watching goodbye