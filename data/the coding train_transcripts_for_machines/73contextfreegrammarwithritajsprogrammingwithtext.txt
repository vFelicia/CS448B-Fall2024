hallo there welcome to another video about contextfree grammars that's what that's what I'm talking about so um I've already done I've sort of explained what a contextfree grammar is I looked at a JavaScript framework library called tracery and in this video I want to look at yet another JavaScript library called Rita dot J's that has a functionality that allows you to generate text based on grammar now I previously made a video about the Rita Jas library I've showed some other aspects of it ways that you can generate and do and evaluate actually analyze text with the Rita library and I'll make sure the link to that in this video's description so I encourage you to check that out but an aspect that I did not look at is the are the Rita grammar there are eye grammar object so how does the RI grammar object work and what kinds of things can you do with it ok so first of all um the RI grammar object is designed for use with the contextfree grammar now if you're wondering what a contextfree grammar is you can double back a couple videos where I maybe talk through in a bit more detail but just to remind you if you're wondering a contextfree grammar is a as a system that defines the structure of a particular language and in this sense of it could be a very small tiny little language like here's a language that has only these elements sentence nouns verbs and the cat dog meows and barks so there are terminal and nonterminal characters these are nonterminal characters meaning they get replaced with something SAS for sentence gets replaced with the noun verb noun gets replaced with cat or dog verb gets replaced with meows or barks so if I start with sentence this gets expanded to the env that is terminal so it stays as the and becomes flip a coin cat or dog V becomes flip a coin cat or dog and we get this expansion so certainly the idea here is to design sophisticated and interesting grammars with all sorts of creative language in them to generate text with some purpose maybe you're making automatic you know Harry Potter spells or maybe you're making recipes that are gonna like randomly generate you're gonna cook some strange thing for dinner based on what your contextfree grammar made you lots of possibilities there but let's see if we can figure out how to make a simple grammar work with the Rita library and then we'll also look at some other examples of grammars that you can generate with the Rita library okay so looking at this the first thing you might notice is I need to say make a new Rita grammar object so let me go to code and I'm gonna say VAR I'm gonna call it RG just like in the example by the way Rita is by Daniel how Thank You Daniel Hale for this wonderful generative text library encourage everybody watching to thank Daniel Holland and contribute to the development of Rita RG equals nu RI grammar now I'm gonna leave the argument here empty so ultimately there's a lot of different ways that we might be able to create the grammar I can do it dynamically in code by just adding the rules we're just wanting to try to do right now or I could load the grammar from a preexisting file and I can mix and match too but let's try to just dynamically generate it with code so the first thing I want to do is just looking at this is see if I have an object there so you can see I have some Rita grammar object it's got like some rules in it something's happening but I can't do anything yet now if I go to here and I say let me look at a result let me expand remember an expansion is expanding from the sort of start of the grammar out and getting a sentence that fits that grammar so if I get some sort of result and I say console dot log result I should get nothing so no grammar rules found so the first thing that I need for a grammar to do anything is to have some rules so let's look now at the add rule function so the add rule function requires a name oh look at this oh wait I love that this has that that is so fantastic so it has the rule name and the rule definition and the rule weight so here's the thing we're gonna have to figure out what does really I I honestly don't know this I'm gonna figure this out while doing the video what does Rita expect that how this is formatted so I'm gonna look I'm sure there's an example that I can look at but on the one hand I know that I could say RG dot add rule and so I could say maybe like start becomes a sentence or I could let me just say the cat meows there's a rule sentence becomes the cat meows and probability of a weight of one now I doubt that's enough so so that did not work so I expect that I've got to conform to the syntax of the Reta library and how it expects it to work now I kind of getting a little clue here rule not found start so I think by definition Reeta probably except I'm just guessing from looking at this error that Rita expects there to be a rule called start so let's see if that works if I now get the cat meows I did so now every time I get the cat meows now how can I get maybe so let me see if I can now call this now I'm expecting maybe if I make a rule that has this syntax with the sort of tag symbols around it I can say add rule N and I can say cat so now let's just see if I have a rule which this set in the start is the end meows and maybe I'm gonna get cat perfect now how do I get now I have a feeling that the syntax it expects is this so there are a bunch of sort of conventional syntaxes for grammars and you know you're gonna see them in a variety of different ways that you can encode into JSON as we saw in tracery with uh sort of pound symbols this I believe is based on some standard I should look it up and try to figure out what it is annotation appear here to explain but I have a feeling based on what I've done before and seen before that it's expecting the pipe symbol as one or the other right let's say what would happen if I didn't do this okay CatDog well I'm gonna get the cat dog meows that's what again that's the whole thing that's replaced but if I put this pipe symbol here cat meows the dog meows the cat meows the dog meows so we can see now the rules now one thing I'm curious about is does this require these tags it does not the cat the cat the cat the cat the dog so so we can see here that the this is this can be a useful distinction just for ourselves to kind of illustrate what I mean to be a you know nonterminal maybe put the tag the less than the greaterthan lessthan around it and that can be useful here so one thing that I'm kind of the other thing that I'm kind of curious about is if I say this I could also probably put them in a separate line the dog the dog the cat the cat the dog and so now let's look at let's think about this wait so if I go back now to the documentation and we look at the rule wait optional defaults to one so how might I alter the probability so I'm just going to make sort of a guess that if I do something like five then I've got kind of a five to one you know maybe a five out of six chance of picking cat over a dog and what we could do is I could also do this you know maybe a hundred times just to sort of see how this works and let's run this and so you can see here it's picking cat you know it pick cat sixteen times then a pick dog then cat 4 times then it picked dogs and cat four times then cat seven times so you can see that that waiting allows you to add the rules and kind of wait them in particularly I could also probably do cat or unicorn and both I'm imagining both of those probably have the weight of five and the dog has the weight of one so if I ran this again we can see there's going to be a lot of cat in unicorn and not so much dog I'm sort of guessing so I'd have to really like strictly evaluate how this is working but you can see it's nice that you have this ability to manipulate the weights so if I go back to this particular simple scenario let's just finish implementing that I'm gonna save the noun and I can add a cat unicorn dog I'm gonna just leave the default weights and then I'm gonna add another rule what sound does a unicorn make meows Meow's the dog barks the unicorn the Twi'leks that's the sound of a unicorn it's a word that I made up called tulips and then I'm gonna put a period here and so now we can see if I generate this we can see all of these different possible sentences all which conform to that grammar so this is a very basic idea you can imagine how you could make this much more sophisticated through nesting you know what if so there's I'm going to kind of like stay away from more exciting and interesting possibilities that this here I'm just kind of giving you the building blocks but let's look at actually what happens if you want to encode a grammar not in your code but have it come from a separate file and I can look here in the reference and look at load from whoops I've clicked on the wrong thing I'm gonna click it load from so what load from says load from a file or URL with an option so in option the option in JavaScript is going to be a callback because when you ask for a file it's it's gonna happen the files could be loaded asynchronously so I need to know when the grammar is ready so there are a bunch of different ways grammar files can be formatted and a typical way you might see is with a syntax that looks something like this and I have some examples that when you look at the code examples that load files that look like this here's another sort of way that looks a little bit like JSON this I found in some of Daniel house examples but Rita so I'm gonna try loading this particular file which is a dot grammar file and whoops I've so let me comment this out and I'm gonna say RG load from test grammar and I'm gonna say grammar ready so this is my callback for when the grammar is ready I'm gonna just say ready so if I do this and run this now it's gonna say uh grammar appeals to be appears to be invalid JSON please check it if you're using llamo so there are so many different kinds of standardized data formats you know there's XML markup and yamo and blah blah blah blah blah blah if you've watched some of my data videos I kind of cover some of these different formats I think JSON is going to be the easiest format for us to encode a grammar and then load it into Rita or another program that we write right so I actually have already taken this exact grammar and rewritten it using a JSON syntax and you can see that here so I have a start which is a noun phrase or a verb phrase the noun phrase is a determiner and a noun a verb phrase could be verb phrase followed by verb followed by a noun phrase or just a verb so you can see there is some nesting into this grammar and then here you can see the sort of terminals I mean each key has an array for multiple possibilities so now if I were to go back and to my code and load grammar dot JSON I should at least be able to run this and I see no error I just see ready and now I have a grammar already going and I could say result equals grammar RG expand and then console dot log RG here we go and we can see up look at that what did I just say RG no that was interesting the result is what I want to see and we can see the unicorn dances the unicorn dances the rainbow the unicorn dances a rainbow dances a rainbow dances the rainbow unicorn dances a rainbow dances the unicorn dances rainbow dances unicorn dances the rainbow somebody could make a song out of that the unicorn dances the rainbow the rainbow dances the rain unicorn dances the unicorn okay so yes please not yeah Mille someone says in the chat not to worry so now you can see here once again just as with tracery it's your job if you want to work with contextfree grammars to design the grammar and this is an effective way of working with in that you could actually have a completely separate file where you put all of the grammar so this could become very long in fact you might start thinking about hmm how could I do things like whenever I get to a noun instead of picking from just a fixed list actually used to read a lexicon to give me a random noun or query word Nik like an API to get it down from there's a lot of possible ways you could sort of think about this one other Graham that I want to show you which again is thank you to Daniel how the creator of Rita I'm gonna see if I can pull this up because I have it in one of my other examples this one so let's see if this works I'm gonna copy paste this grammar and I'm just gonna put it I'm just gonna overwrite here grammar JSON paste it in hit save and I'm gonna run it and we can see now and actually what I'm going to do is let's let's let's uh let's get be a little bit more sophisticated about this sophisticate this is a very this is a very sophisticated cooking shy by the way this is called the cooking show now I'm cooking cooking with code maybe that's it button equals create button generate button Mouse pressed this is I'm using the p5 Dom library to attach a click event to a button and I'm gonna say a new haiku and then I'm gonna say function new haiku and I'm going to say var and now I'm going to do here I'm gonna get the result is expand the grammar and then I'm going to say create P result so let me run this and we should see our result is not defined line 12 I forgot that I have some extra code there so the idea here is that I generate and I get these haikus now a couple things about this why is there this % in there so one of the things you could do when designing a grammar is kind of create your own protocol like I really what I want to have is like a br tag there so I could just go into the grammar and just do this which will probably work and because I'm outputting to HTML I'm getting a br tag but I might be outputting to other things and I actually want to replace that with a line break so but you can see here let's look at how this grammar works this is an interesting way that you can use a grammar to generate haiku so I could form is a complex thing there is a variety of ways you can sort of think of haiku but here's one scenario line with five syllables aligned with seven syllables and aligned with five syllables so that is the start axiom then here are all a bunch of ways you can create a line with five syllables a one syllable followed by four syllable a one solo followed by three are 1 a 1 a 1 3 1 2 2 1 2 1 1 so you can see here's a whole set of possibilities here are possibilities for 7 line notice how I'm reusing the 5 line here because I could have 1 1 5 line 2 5 line 5 line 1 1 or 5 line 2 and then here's a whole lot of one syllable words this is all from Daniel how a whole lot of two syllable words a whole lot of three syllable not just words but phrases for syllable etc so now if I were to run this we can see I'm always going to get cranes Japan I'm gonna get out 5 syllables cranes Japan Daybreak's followed by seven Dawn's smoke Japan dawn rushing followed by five souls through smoke juniper so I encourage you to think about what might be some creative ways you can write a grammar to generate text and now we've seen how you can do this same type of contextfree grammar with tracery we've seen how you can choose do it with the reader library and in the next video which I which will be coming at some point if it's not already there I'm gonna just kind of look at the basic recursive algorithm for doing this expansion from scratch in case you at some point want to start playing around with sort of guts of how the contextfree grammar generation system works okay thanks for watching