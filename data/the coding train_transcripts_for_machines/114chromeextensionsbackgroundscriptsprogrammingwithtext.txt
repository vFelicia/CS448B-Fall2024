alright I'm back for a second Chrome extension video and I'm gonna pick up right where I left off which is I want to add something called a background script now the truth of the matter is the background script can do a lot of things it's Co the content script I'm saying what I just said at the end of the last video but to repeat myself the content script is code that executes after a webpage loads that you can affect and manipulate and work with the actual content of the web page itself a background script is a script that loads when you launch chrome and it's listening for events associated with the activity of using the Chrome browser as a piece of software itself so one of the things I could do in a background script is I can listen for things called a browser action there's also a page action there's all sorts of kinds of events but a browser action is actually a way of listening for it for example I can add a button to the menu bar with my own design and I can listen in the background script which I'm gonna call background j/s I can listen for when the user has clicked that button and then I can make something happen potentially on the web page or I could make something happen within chrome like close all the tabs or something like that lots of things are possible so what I want to do in this video is show you instead of having the previous video I made a Content script that runs immediately when you load the page instead what I'm gonna do now is have a background script that has a button and when you press the button it causes the content script to run so it doesn't run immediately but only when you press the button alright so let's see if we can make that happen so the first thing I need to do is tell manifest.json about the background script tell manifest.json oh so I think I need comma background can I have more than one background script I think actually just say background right somebody will correct me and then is that an array it's an array no it's it's you can't so unlike content scripts I think you could have multiple content scripts a background script is one background script you get multiple backgrounds protect it per extension you have multiple JavaScript files associated with the background script but just one so this is just an object with J with the J s property and I'm gonna call that background is okay I think this is good so now I need to create that javascript file background j s and I'm just gonna put console dot log background running just to have something in there okay so I have this background script now oh this should be an array same problem I forgot before content dot J s this should be an array so let's not make that mistake again and now what I'm going to do coding train extension I'm just gonna call this coding training attention to I'm so now I'm gonna load that unpacked extension background script it's in this folder there we go I didn't get any errors Google Chrome cannot prevent extension from recording your browsing history that's it oh I I clicked allowing you to about by accident okay so now this is running alright this is very exciting let's go back to this page and hit refresh content script ran up Chrome extension go oh but where does it say I totally console.log background running how come I don't see background running here so here's the thing the content script is a thing that executes inside of the actual web page and so the debug stuff is available in the JavaScript console the background script is running as part of the browser as a whole it does not talk to the get JavaScript console associated with a given page instead you're gonna have to go back to debug any console logs in the background script in a different place let me show you where that is so what I'm going to do here is now oops sorry I need to go to this page right chrome slash last extensions and then oops oops oops so what I'm looking for actually what you see down here which is inspect views back Paige and I don't see that the reason is I got this wrong this should be scripts for content scripts it was js4 background its scripts whatever this is the specification for how a Chrome extension works let me hit I'll hold that drama for nothing let me hit reload now same saying I can go here Chrome extension go like that that console.log that's in my background script is not appearing in the JavaScript console in the browser but if I go back to the extensions page I now see that it says inspect views I can click there and now I can see here I can look at the JavaScript console for the background script so this is just an important piece debugging is tricky because you got to remember is this part of the background script is this part of the content script where is it all happening okay now let's actually add a browser action so what I'm going to do is I'm going to now in the in manifest I'm gonna say browser action mmm what is it what does it was it was a browser action I think that's a default icon maybe icon default icon default icon and then I'm gonna give it my coding training PNG so one thing I can reference by the way what I'm not sure if you can have assets and different media things associated with like a Content script and you can add that and we'll get to that I guess at some point with future examples but right now I want to have a browser action and I want the browser action to be associated with a button I need a PNG for that button so did I already put this sorry I have to navigate to this right so I have this PNG file that I'm gonna put in now into there so you can see here now I have manifest that JSON background is content items and I have this PNG file so now if I reload the Chrome extension again we can see look at that all the way up there there's my button now anyway I could design it a lot better it probably has all this that PNG all this extra but now if I press this button I'm triggering a browser action so I need to listen for that browser action where does the content script listen for the browser action no the content script is sandbox it's Walden it only knows what's happening here so I need the Baraat the background script to listen for when I click the button so let's add a bit of code for that I go to the background script what I add to that is it's I think it's chrome dot browser action dot not clicked on clicked I haven't written up there uh head listener button like you know button I'll just call this button clicked and then I can I can write a function the callback function so let me give you some more room so you can see this they make this little smaller I can write this function called button click this is me making up a function now this is my madeup callback it could be an anonymous call back loop there's a camera up here that I just hit it could be an anonymous function written in there but I'm gonna do this in a simple way and I believe and then I could just say console dot log button clicked so let's do that so let's do that and so there is actually a thing that I'm forgetting here which is that well let me just add this first so if I go reload the extension and then I go inspect views and put this over here and I'm gonna click the button now button clicked so you can see above my head here that message is coming out when I click the button so I now have a function that's listening no matter where I am but what if I want to know like oh when I click the button what's the current tab that's open and actually this callback gets an argument which has information about the tap so I'm going to actually just console.log the tab object so we can see I'm going to reload and I'm going to click the button and now we can see look at this so there's all sorts of information that I can now get about the particular tab that I'm on so you really have in the Chrome extension in the background script which is making use by the way this is part of the chrome API right chrome browsers that's not just like available JavaScript code wherever you are but by default I have some pointing to come back and look at the chrome API reference but this is where I can do things I've listened to events okay now what I need to do is tell the content script about it but the content script is stuck inside of its wall it can't reach out and know about this except for the fact that there is a and this doesn't really go in this list I guess if I just other like some of concepts or api's chrome API so there is we saw there's like a chrome dot browser action that's one thing we just saw there's another thing which is messaging so there's a messaging API there's a way that I can send a message from the background script really should go here there's a way I can send a message from the background script to the content script and vice versa so that's where I need to do let's look at how we can do that so oops so what I'm gonna do inside button clicked I'm going to say chrome tabs a send message so this is the this is the jet this is from the Chrome extension API the chrome object there's an object called tab so I could send a message I think to all tabs actually but what I want to do is just send a message to the particular tab that I'm on so I'm gonna say something like this tab ID right and we can see that where I debug that here ID 95 each tab as an what I want to do is send the message as an object so text hello I mean this is silly so because you can send a lot of information you could imagine there might be a lot of information going on that you could send here so let me show you this so I am going to now send this message so once I have this code that's sending the message I need to receive that message and where I receive the message is in the content script so I now need chrome message receiver what is it I have no idea I have it somewhere on the wall where I that's good ah runtime so there's an event there's a chrome runtime on message this is a particular kind of event and I need to have a listener add listener and and then I need a callback so I could say like got message so I can now write a function called got message and it receives what it receives a lot of things there's it's kind of like it's similar to a get or post request there's three arguments that go here there's a request there's the sender and then there's the send response this is kind of boilerplate e and then ah so where do I get that message so the in the background script this JavaScript object let message write this message going this this stuff going in there is in this request variable now I employ this from an example so I might actually call this like the message so I could say console dot console dot log message dot txt so let's just see if the message comes through let's see if the message comes through so I'm gonna reload I'm gonna reload the Chrome extension I'm gonna go to this page Chrome extension go I'm gonna click the button hello hello hello hello I got a message from the background script to the content script which means I could say something like if message text equals hello then only do this stuff then if message if I get a certain message now run this code that alters the page so here we go I am going to have to reload the extension I'm gonna refresh the page now notice the content script has not executed all of the paragraphs are as they were now I'm gonna press this button and they're all purple so I could immediately make it that every time I press the button it picks a new random color it just replaces all the text with something it reaches out to an API and goes and gets the definition of every word on the page onward neck and then makes those like pop ups all over the page there's so many things I can do this is the basic idea there's too many videos about Chrome exchangers I want to make is we've barely scratched the surface here but at least now we've seen manifest.json is the overall configuration of the Chrome extension what is it allowed to do and when is it allows to do it the content script is JavaScript code that lives within the actual content of any given web page that you happen to be on and the background script is code that runs as soon as chrome is launched that can listen for various events and do a variety of other things to affect how the browser as a whole behaves so what we've seen in this example which is really again just scratching the surface is through a there's different actions the browser action there's also something called a page action I'm gonna get to all this stuff later but the background script can listen for a browser action like pressing a new button and then send a message to the content script to do stuff to the content so basic idea I'm gonna come back and in the next flu I did not trigger that sound effect yeah but apparently everyone's really excited so with just these two videos I think you could probably make something kind of interested quirky and creative that subverts and alters the way one traditionally browses the web so if you make something share with me on Twitter at Schiffman share it in the comments I forgot I'm always supposed to say like and subscribe everybody tells me I'm supposed to say that whatever if you feel like it like it subscribe and I'm going to also next do a coding challenge where for any given web page through a browser extension I can press the button and replace all the images with images of kittens so that's what I'll be doing I'm gonna turn these into like a little bit of a coding challenge and then I'm gonna come back and do more stuff I'm gonna add p5 to a Content script lots of other things so there'll be a whole bunch more videos in this Chrome extension bookmarklet playlist thanks for watching you