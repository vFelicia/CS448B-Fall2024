good evening and welcome to the coding train I'm your newscast coding newscaster Daniel chief bond and I have news to report javascript is a coding language that I use with much pain often all right I don't know that come through was anybody watching III was using the chair last two weeks ago I haven't been here for a couple weeks and I really felt like I was a newscaster no I didn't for parenting code but I heard a lot of time thinking about that little opening bit there I think maybe needs like writers and everything I know but it even the chat is like acknowledging anything here hmm yes I was so low because I've been having some back pain issues I'm doing much better now but two weeks ago I I require sitting in the chair do the coding challenge which was kind of nice the thing is this chair is very high but it's sort of broken I think it can go higher and I think there could be some value to using a chair every once in a while welcome how are you it it's not the evening where I am it is in fact the morning it is at 1000 a.m. New York time welcome to the coding train today is Friday November 9th November is going to be one of my latest months I missed last week I don't even remember why oh yes I had to teach a workshop here at NYU on Fridays last Friday so I was not available to come do my livestream and then I'm here today but next Friday I'm excited to announce I won't be here on the livestream but I will be at if I could just find a web browser here thinker concom so this is an event in Huntsville Alabama on November 17th from 600 to 1000 p.m. I believe there are still some tickets available there are all sorts of like amazing people don't think I'm actually listed there which is fine but I will be there so if for some reason your happen to be in Huntsville Alabama I think your con next Saturday I think November 17th is a Saturday please say hello but I won't be livestreaming next Friday due to traveling to Huntsville Alabama all right so that's so then the week after that Friday I might be like gone after today for like weeks so I will try to make up with some extra content possibly in January and I will I am planning a holiday a end of Year holiday coding Train episode fundraiser for the processing foundation I will announce the date for that at some point soon I believe the super checked I like figure this out but I believe that I'm able to hook the super chat not right now donate yet hook it directly into the processing Foundation which is a United States taxexempt Corporation so I am working on that I'm seeing all sorts of people saying hello in the chat and so now I turn to what I have a whole bunch of things I've been working on with the help of many other people and I'm kind of figure out what order to do this stuff in so let's think about this what what what am I going to do so first of all let let's go to the coding train calm and go to the last coding challenge I did which was coding challenge number 121 logo let me bring the okay logo and I'm gonna go click to the challenge and did we get we got a couple submissions here so let's look at a couple so so what I did in the last coding challenge is I built a very basic logo interpreter and if you're not familiar with logo it is a programming language designed in the 60s late 60s I believe I learned logo programming as a kid a little bit it's where you drive a turtle around the screen with commands like forward right left pen up pen down so I made a basic interpreter we can see it right here in the last coding challenge which just interpreted basic commands so you can see here forward 60 if I then say left 90 forward 10 you could say I can start to type commands and have those commands rendered here but I did not include the repeat command so that's what I'm going to do today now amazingly I don't know what to do about this I have I need a I I got to figure some stuff out but I posted the code to a github repository logo oh why did I put it here this is supposed to be what is wrong with me let's fix this this is supposed to be in the coding trains so transfer ownership logo and then I think it's just coding train I don't know why this is not there already let's transfer this repository sure whatever this is okay so I don't know why I didn't have that in the first place but now if I go to coding train logo let's see if it made it over yet okay so this is the repository for all that logo code that I built in the previous challenge and unbelievably there are 16 pull requests with suggestions and design ideas for how to implement repeat and using like a recursive regular expression to unroll the repeat and all sorts of other amazing things and I encourage you to look through these maybe I can highlight a few of these I don't know how to manage this and I should be a person who knows how to manage something like this a lot of it right now is time a lot of it is like there are so many wonderful suggestions and pull requests here I can't how could I okay we pick just one so I need to figure out a mechanism of a way of managing the community better in terms of the open source aspects of the coding train stuff that aside let's go quickly take a look at the classic logo interpreter by Anurag Hazara so this looks like great so this you can see here is clearly an implementation that has repeat allowed so we can see this is very similar to what I did but already with repeat and a little bit more thoughtful interface stuff good work we can look here at the source code I tempted to look at how the repeat was implemented but I kind of have my own idea at the prep of how to do this so maybe I won't look at it right now next up let's look at this 3d 3d logo experiment by Dave briquette II apologies to Dave I'm mispronouncing the name let's take a look at this I'm you can see look that isn't that wild Wow this experiment is inspired by the coding tree breaking news I have a short one breaking news this experiment is inspired by Cody trains coding challenge over 121 it's a simple oh there goes that camera logo like experiment but in 3d with additional command up it's written in JavaScript in the language used by the users JavaScript rather than logo oh that's really interesting oh this would be enough Oh fascinating it didn't occur to me to do it this way look at this this is amazing and then like there's a bunch of different Wow and I wonder is this using is this using p5 WebGL or is it using 3j s or just custom WebGL I have no idea I don't see P oh no I do see p5 loaded in here so anyway and this looks like the code for it in fasten this is amazing okay I'm gonna have to investigate this more on my own but great okay speak French for your French viewers asses Alex rhyme our PB says not all viewers are French but it could be fun we for not muziboo is your pal if all say uhhuh did I see this message Simon is asking me yes Thank You Simon I saw all of your messages about about bit shifting I am NOT going to cover [ __ ] shifting or bit masking today but it is a useful information that I hope that I could use later alright when will he even read our chat asks air re on a dock hole uh right now I suppose it's very hard for me to read the live chat while coding and doing all the other stuff I want to do but this is where I'm going to begin so I think so let me talk about some other things that I want to do today I'm just curious let me go to ml 5 je s org there have been a lot of recent updates on the ml 5 machine learning library so things that I want to cover soon are how to save and load a transfer learning model I have that series about using transfer learning to do your own custom image classification and now there's a feature in the library what I was curious about is whether I know the features in the library whether we managed to get that in the documentation so let me see here if there is a save function I don't think we have it on the website yet I'm looking here predict predict no so but so this is something I could still cover it because it's just the features are there in the library but haven't made it to the website yet so that's one thing on my list another thing on my list is so excited about sketch or if you don't know what sketch or an N is why it's very exciting let me just show you very briefly editor dot p5.js ml5 sketches i'm going to open up this this very basic one and go to the fullscreen view whoops this is a version of sketch RNN running with the ml 5 library and so what is this doing what this is doing if I press clear here it is drawing cats how is it drawing these cats this is a machine learning model sketch RNN you can find out a lot more about that by looking at the google magenta project and the work of david ha and many other collaborators but is a model that is trained on the Google quickdraw dataset which is millions and millions of doodles and drawings that people made while playing this Google quickdraw game so the model is trained on those drawings and is it the machine learning model is then able to imagine new versions so here's another one I read so I'm going to show you how the code for this works and how you can in how you can use the sketch aren't in machine learning model in your own p5 sketches and in fact how you could interact with it so that the user could draw and sketch our end could take over so there's a lot of interesting possibilities there but before I even get to that what I want to do is actually just show you how to use the raw Google quickdraw data set itself so that's sort of step one so that's so those are my three main things logo challenge get that repeat thing working mushiya ml 5 save and load transfer learning model and Google quickdraw data set all right so what do you think are we good Oh coding train is brought to you by water it is wet it can be in a jar you can freeze it and it turns solid to ice you can boil it it turns to a gas you can drink it some say you should have eight cups a day everybody in the world should have access to free to clean water and I think we should all I went off the rails there with my sponsorship one of these days I'll have a real sponsor I mean I sometimes I do okay let's see I've got pens so it's ten fifteen of the I I'm planning to be here until about noon and then I might even come back for an extra you know since I'm gonna be gone for a while I'm try to as much as I can today and I have most of the day free so we'll see what's going on water if it's wet legit legit Iser says water is not wet I know everybody always says that today I guess it's wet if what is that what is the strict definition of wet the solid phase is less dense than the liquid phase you know science is a wonderful thing some day I'm gonna learn about that stuff and maybe have some proper science on my channel here okay there are so many wonderful science channels out there have you watched the physics girl that's one of my favorites there's this whole video the other was released on YouTube about vortex rings and three blue one brown and fix girl to this collaboration it's really cool I'm plugging plugging their content okay let's get set up all right I think I am set up and ready to go and so this will now be coding challenge logo part to this in case your are firsttime viewer the way I works on my channel is I do a live stream I do a bunch of stuff in the live stream and then I redundantly reupload the content later as shorter edited versions of what happens in live stream so this is the full experience you are right but if you want the smaller experience that just kind of gets to only the key elements of the stuff that I'm doing you can tune out come back later for the uploaded version and then even crazily YouTube has this whole youtube premiers thing which I am trying to use very very cautiously because it's very confusing since I live stream upload recorded content so what does it mean to have a edited version of my live stream get uploaded as a YouTube premiere okay let's what's the name of everyone wants to know this song this song is called Tori the dog and it is by a wonderful composer whose name is Adam Blau who is a film and television composer and musician based in Los Angeles at Adam Blau on Twitter tell Adam Lau you love its music and you love the way that it is featured on look coding tree all right and blouse also the I don't have a I don't think I don't have a version of it here on my little soundboard thing but Adam was the composer of the coda great theme song as well okay I really have to make this happen now so let me go to let me just grab this real quick and get this back let me leave myself back to where I was before okay why is that not working what did i do do I break this code before oh good work what did I do here why is this not working wait it was working a second ago I was just demonstrating it wasn't I just demonstrating this a second ago oh no that was the version that was here all right what did I do let's just grab this version we're probably I probably up I probably had a bug in my code there we go okay where to start from here this is the coding challenge 122 or maybe 121 part 2 who knows number 8 will sort itself out and I have this I have this let's put this over here and let's go here all right all right everyone oops ah hold on my Oh weird what's going on here oh shoot my laptop is not plugged in that should fix it great okay hello welcome to part 2 of the logo interpreter coding challenge now if you watched the first part you might remember that I left off here all I have is a logo interpreter what is logo in case you don't remember logo is a let me just this is my one start over because I had this I meant to have this available ok as if I only ever start over once ok hello welcome to coding challenge logo interpreter part 2 a little bit scared of this alright so what's going on where are we why I here you might remember me from logo interpreter clue sounds number 121 look that's me I'm almost like wearing the same clothes this is a challenge where I looked at the logo programming language a language from design in 1967 turtle graphics you might be familiar with I talked a bit more about it in that video I encourage you to read about the history and also to check out the logo Foundation which is the foundation that supports a variety of wonderful initiatives including a scratch day so check that out but what I did was I made this logo interpreter that is able to interpret simple commands like four words 60 left 90 forward 100 right so the wait a sec do you guys please don't distract me in the chat with lots of emojis okay because it makes me think my microphone stopped working okay all right all right I the chat the chat they can't look at the chat okay logo interpreter what was I saying look no interpreter something previously in the coding trade that's a good wait so what did I miss here what I missed is I only supported certain commands like forward okay all right ready nothing logo interpreter which Matsuo will magically figure out a nice way to edit this role left full of rage okay I just see this logo interpreter can parse these commands but I didn't actually implement many commands that are kind of crucial to actually draw a turtle first okay good chat I'm not looking at the chat so while this implementation of logo interpreting these logo commands like forward left forward etc works it's missing crucial components and so there are many commands in in logo and I implemented pen append down some of these but one of the most important ones that I did not implement is repeat so this is a tutorial from Brown University page about the history of logo that I'll also link to in this video's description but what I want to attempt to do is add the repeat functionality which complicated that well there are some simple ways probably to do it and I will point out in fact that when I posted this code 16 poll workers came in with suggestions and techniques for how to implement repeat and I would encourage you to go check all of these out I want to highlight one of them that was pretty interesting to me let me look for it regex implementation is this the one I'm looking for yeah this one oh yeah I love this which is just basically using a regular expression to search for the repeat command and then just replace the repeat command in the string itself with what's the thing to repeat multiple times so kind of like unrolling the string recursively with a regular expression pretty wild implementation I'm not going to do use that one I'm gonna try to spin up my own so this is my idea you have a marker alright so whoops this is my idea so one thing that I think will help is objectoriented programming what if I have this idea of a command class so I make this idea of a command class and it has the name of the command that could be like forward left except a nap etc it has an argument so if the command is forward maybe I would have an argument like one and by the way the command could be repeat and I know I'm about to leave your view here repeat and then the argument could be a number also because you're gonna repeat something a certain number of times so you have this idea of a command class and then maybe what I think what would be useful is to create a parser object and actually instead of using split so I used split as a way of like looking at the logo instructions and just splitting it into a big array but I think what I want to try to do it the most like sort of absurd thing ever it's just actually step through the constraint one character at a time so that I have the idea of a parser is keeping track of an index so the parser is always has a basically like a pointer into the command and can step through and if it finds repeat it can then pull out a chunk can do all sorts of stuff so if what I what I'm kind of thinking about here is this idea of a command a command could just be a thing that you execute with an argument but if the command is repeats then it could also have a list of it could have an array of its own commands that those are the things you repeat and then inside of this array there could be a command that is a repeat command so it could be nested and recursive so this is the idea I have not actually thought about this quite a bit and probably helped by looking at everybody's pull requests so I don't know to what extent this is like an original idea or just came from suggestions but it through osmosis my brick has come up with this idea but I have not tried to implement it so what you are about to watch is me actually trying to implement this for the first time and it might be a terrible idea and things will go wrong and you'll probably notice this video is 342 hours long but if you want to stick with me here we go so hold on let's move to here okay so let me go to the code I mean I'm gonna keep the code that I had before I'm gonna add a new JavaScript file called parser maybe it should be interpreter I don't know I'm gonna call it parser parser Jes I'm gonna write a parser class and the idea is that when you create the parser you give it some text so this is the full text that it needs to parse and then also it has an index which starts at zero okay and one of the functions that I would have here is like next next token so it could maybe look and sort of like find the next token or something in in this like text by like stepping through it with the index okay that's what I'm thinking about now I am also going to then create a another [ __ ] JavaScript class called command and this would be this is what I'm talking about it would have a name and an argument and then it could also have potentially subcommands you know cursive lee a command could also include a list of other commands okay so this is my idea now let's go to sketch KS and basically i'm thisthisthis go turtle function i'm actually gonna just basically take out what i did before because i don't think this i'm not gonna use split anymore and i'm not going to have my own index here i'm going to say let parser equal new parser with that code so let's just for example say console dot log and parser next token so let me at least see if I can get parser next token to work and so and this should probably return the token so return test so if I just run this now I'm parsers not defined right I always forget this I've added a bunch of new javascript classes I want to make them separate reference those files here probably should get into like bundling and building and all that sort of stuff at some point parser and command so let me go back to sketch refresh okay so great I see test there I have got my command but I didn't really get the token right what I need to do is here I really need to say all right so I'm gonna step through the text one character at a time so what I mean by that is I'm gonna say let car equal this dot txt car at this dot index okay so while the character is not a I guess I could use a regular expression here so I want to well let me just say let me just do it this way for a second while the character is not a space what I want to do is I'm going to start with an empty token and I am going to say whoa I don't need a thirst while the character is not a space token plus equal the character character equals this dot text car at car at plus plus this dot index so what's going on here this the idea here is and again I could use right of expression and substring but I'm trying to do this in a very manual way to understand it what I'm doing is I'm saying let me look at the first character and as long as that character is not a space I'm gonna add that character in my token and then look at the next character and this is basically remember well this is something I covered in the first part of the challenge this dot index plus plus this side index is increasingly index by one and giving back that new value so now if I say return token let's see what happens refresh this text chat at the car at little typo there there we go look I got the first token that's great now what if I now want to say here next token oh it got a space so look at this this a space is not a valid token so what I can actually do here back into parser is I can actually say if if car equals a space return next well increase the index go to the next one and return next to this next token so this is a way of basically skipping and again this is definitely a clear example I'll refactor this later you'd like a little theme music there for that but but this is like this is a start okay so um this is this is basically saying like ignore the space and so now we could say I've got four words 60 but here's what I want to do really here I want to say and let me actually let me use a regular expression here so I'm gonna say like a Rick there's a category of command which is like a movement command forward backward right left so I'm gonna say that would be a regular expression that is forward or backward this is f be followed by D or left or right followed by a T and probably I should probably also make sure it's the full string so put this beginning and end so now I could say let's token equal parser next token if movement test token so if it's a movement command then create a new command with token and token and parser next token right because I think I said a command is I said the name of the command and the argument the argument always comes next so again I'm not doing a lot of error checking for people making mistakes logo code but we'll get to that later I suppose okay I'm setting myself up for hopefully being able to do a repeat right so where to where am I here right so so let's just see and actually let's make an array of commands I mean I might want to put all the commands into an array or I might want to process them one that there's there's various ways of doing this but let's actually put it into an array right now I think that'll be helpful whoops okay so let's see and now let's look at commands okay refresh look at I've got a command with arguments with the name is forward the argument is 60 and it doesn't have any sub commands because it's not a repeat okay so now hmm this is where I'm gonna get into trouble let's do let's do something like a wild parser is not empty while parser is has remaining tokens I don't know come up with a better name for that while parser has remaining tokens keep doing this so what is it doesn't mean here in the parser to say remaining tokens well on the one hand I can just return this dot index is less than this text dot length because if the index has moved past the end of the text then there's nothing left hmm I'm wondering if this is going whoop sort of I bet revenues getting an infinite loop here but let's just give it a try anyway and see right let's see what happens here right because if if it doesn't like if none of these things let's see what happens I'm sure I'm gonna have an infinite loop yes so I have an infinite loop I could tell because everything went blank this is just so I'm gonna actually unfortunately have to kill this page whoops aah and start over so let's think about why I have an infinite loop and I need to correct this I mean one thing I could do is I just for now I could so next token there are situations where if it hits the bracket bracket is not a space bracket is not so so I guess what I could do here is you know if car I mean this is really terrible but I'm I can't or if it's one of these brackets then return then also go up by an index and return that character so this definitely accounts for another thing so again this could be condensed and I can maybe use some more clever ways of doing this but if it's a space ignore if it's a bracket whoops if it's and I actually I'm gonna want to do something for if it's a repeat but anyway if it's a bracket send that back and otherwise accumulate until a space or bracket but okay there's so many problems with this but I have to build it one step at a time if you're willing to stick with me and keep watching this video then more power to you okay let's see if I managed to not have an infinite loop and I probably oh I forgot something important it could have been caching so let's do this Oh still infinite loop yeah all right all right let's be I have to be more thoughtful about this well one thing I can do right now just two let's do this this is a kind of a nice little debugging technique Oh actually no no no there's a problem here there's an even bigger problem where am I parser while character is not a space keep going up and this could get stuck or while character space and this dot index is less than this dot X dot length so I've also got to check to make sure I'm not hitting the end that might actually just be the only thing I needed here let's see can i refresh a page probably not let's see oh this is really awkward really Oh infinite loops are so sad I really should I have a thing that I oh there we go okay alright so that was definitely the problem now at least my infinite loop is gone let's look at these commands so forward sixty right one twice oh this is good this is what I wanted it to be but I need to be able to account for the repeat so this is good this is giving me a list of commands but what if the token that I get back now I need to deal with repeat so if if it is a movement I should also have something for a pen command which would really just be matching a pea at the beginning right any of the pen commands match just a pea so I should say else if pen test token so a pen command is just a command with just the token no argument so and now I could in theory if I added a pen up command we would see pen up is in there with no argument but that's fine so that's good so this would work or why isn't it true it's not drawing anything cuz I'm not bothering to draw sorry I keep opening up terminal by accident okay so I am now I've now written a parser I'm now written a parser that can go from tokido token and could create commands and knows how to handle any movement command or any pen command oh and this start remaining tokens uh yes great great suggestion from the chat abdi lab I got suggests that here I like this suggestion that this is already a test which is this stop remaining remaining tokens because I have that function right that already test that here so it's great okay still working all right now it's time to deal with the repeat so I need to handle the repeat in a very unique way and this is where I'm really gonna get lost so repeat is just matching the repeat command so this could be a regular expression here so else if repeat test token so now what if I get a repeat command then what I need to do is say so let command is a new command with with the token o and and also the next token so I could first get the number then what I need to do is I need to pull out hmm I need to pull out everything within the brackets so then what I want to say is to the to repeat is the parser get get repeat so I want to write a new function that then in the parser looks for that starting bracket looks for the end bracket and just gets it gives everything back okay so in in the parser now I'm going to say get repeat so I should first basically find that first bracket so so I want to in theory there could be spaces so so so car equals this dot txt text car hat this dot index should probably put that in a function and then if while car I guess I could say you know what I could do this while this is not equal to this opening bracket while it's not equal to this opening bracket o plus plus right I want to go ahead to the next one but stick where I am then just to keep going and and I guess I need to make sure and this dot remaining tokens now I have found basically I have found look I'm gonna say index I'm gonna I'm just gonna say the index this dot index this should console log where the index it so I need to put a repeat in here so let's start with something really simple like repeat 3 this and let's refresh all right it got forward it got right because but it got weird and it said 10 is that 0 0 1 2 3 4 5 6 7 8 9 okay so now it's at index 10 all perfect so now I love this okay so commands push so this is actually a function oh I gotta make like a sub parser of the sub thing I mean the recursion aspect of this right because a repeat could have a repeat inside of it if we're a pink couldn't have a repeat inside of it I kind of be done maybe I should do that first this would be a really long video I know I could say that but it just is okay so now what I want is to find the last one so let's start equal this dot index let end eat now I need to do this again move along here and let n equal this dot index and then return this dot txt substring start end let's see if this does what I think it should do and then let's see if it does what I think it should do okay commands token who a parser next let's just console.log this console.log to repeat okay yes okay look at that this is the thing to repeat and the command is the repeat perfect yes okay but minus 1 minus 1 minus 1 so here in parser end minus 1 because the index went 1 what is at the is actually the index passed that final bracket so now there we go the command is repeat its name 3 and now I just need to fill the command with an array of the stuff that's inside of that to repeat so this okay I have an idea now this function parce let commands I'm trying to think your parse I need to write a recursive function now where I come back and do this then for those sub commands okay so let commands equal and this is gonna be weird let me just try to parse parser dot parse does this one let commands evil parser dot parse should all this be in the parser and then this would I don't know about putting this in the parser if this is in the parser parse oh this is hard okay while this remaining tokens next took this so this I'm not so sure about putting this in here but I'm going to so everywhere I said parser I'm now saying this and then I am saying let commands is be an array and then basically at the end here I'm gonna say return commands just give me a sec I'm not gonna do the recursion yet so let's see let's see what happens here and then in sketch let commands equal parser dot parse console dot log commands this is crazy all right it sketched all right that's good that's good hold on hold on hold on I'm thinking I'm thinking oh there's a console log here where's that words there's extra console log 25 and 31 oh I have it twice okay okay so now okay okay now now let's this is the hard part alright so I have this to repeat and then what I want to say is command dot commands equals parse this dot parse to rip this is what I want to do to repeat okay so this isn't exactly going to work this is the idea of what I want to do but it's not right yet so close it's not right because the parse command inside it it's in its that it's working with this particular block in the like sort of global blocks block of text maybe it makes more sense for that not to be I guess I have to create a new post sorry maybe it makes sense for that not oh wait no no I think I have an idea oh all I have to do is make a new parser here with the to repeat stuff and then that equals a parser dot parse right and then this goes here right because then it would have I think this might work could this really work let's think about this I'm basically saying hey make a parser with all this code parse it and give me the commands the parser is going to do that and return that array of commands but internally oh wait wait yeah it's going to make so I thought I think this I mean it's so hard to speak this let's run it let's run it this is gonna produce a lot of errors or an infinite loop for sure cannot read property length of undefined parser KS line seven this dot text oh whoops I took that out when I was messing around with this idea okay not like the drum okay will command repeat I think that worked that's crazy oh my goodness I think this worked okay can we take a moment here to like see if this makes sense let's try to map this out right I feel like hold on sorry this this camera went off okay so I think this is a case where I was like figuring it out trying to explain it all at the same time but I don't know that I did that super successfully so let me take a minute to try to unpack what just happened okay and the idea here is that I have something like this repeat three forward 60 can you see that yes so the parser finds the first token and makes a command repeat with three then the parser because it found a repeat asks for this as basically like a substring and it makes a new parser object with only this so the first parser object started with everything the new parser object work just works on this and makes a command so I really should put this in like a JSON like way so the idea here and let's add some other stuff the way that it should work imagine if this had four word 60 here so the idea is that I would have an array with commands and the first command would have name for word argument 60 then the next command would have name right repeat argument 3 but we knows it to repeat it then goes and makes a parser for this and the same way that this is a big array the parser now works on this to put it in an array here with like objects like for word 60 et cetera so in theory this could even have another repeat inside and this that repeat would be misery with its own sub commands hopefully that helps a little bit more but let's actually test this theory so let me go now to let me I'm afraid to like type stuff in here with and break it so I think what I'm going to do is just so let's start with like forward 60 repeat let's just start with that first so we can see we got a forward 60 no commands and a second manager to repeat three with two other commands okay now what if I then put in here let's let me do it out here because for what if I do another repeat forward of so repeat four forward ten let's look at this okay so there's still forward 60 then there's a repeat and the repeat arguments is three there are three commands one of it uses repeat which has a sub command all right I think this works I mean I'm sure there's like needs error handling but the basic idea is actually working here while this is very exciting to me alright so what I need to do now is follow the instructions this should be in theory this should be the easy part so now that I have this commands I can just say for let command of commands and now I forgot how I did this in the first place because I have this oh boy this is that I have a I have this like dictionary thing that I made to like execute these different functions mmm so what do I want to do this is called commands so I'm gonna call this a command dictionary well I'll just call this commands command list command list it's not a list command lookup command look up with a block word variable name so what I want to do is now I want to say the name is command dot name and the argument is command argument and then I'm gonna say I have to figure out if it's a repeat so let like if name equals repeat then for let I equals zero I is less than argh I plus plus right because I want to do whatever is and then I'm going to go through its commands I guess I could say oh boy oh I need another recursive function to traverse it oh boy all right one step at a time people I'm just gonna do this so I just want to see like what happens here now so for uh whoops let me go back to something simpler without anything nested forward sixty repeat three times okay so this idea works but this needs to be a function like I need more recursion maybe I should be just doing this as I'm going into so execute I'm gonna call this execute and execute a list of commands so if you execute a list of commands and then you get the repeat you need to execute command document right so in other words I'm looking at the commands if I if it is a repeat then I want to execute the sub commands that are in the sum command list a certain number of times otherwise I can now say basically what I did in the very first version of this which is to do what command list name arc so the idea is I'm looking up the command list in the command list the by the name with an argument so that will then go here and say if it's forward it will execute this function moving the turtle forward by an amount I think there's a lot of redundant extra code now but this is fine let's see what happens syntax error oh this has to say function I'm not in an object anymore all right mmhmm let's what is that 100 100 so what's oh oh I didn't execute anything execute commands command list is not defined command lookup okay I can't remember what I call anything command lookup hey this is working Wow okay dare I say this is complete does anybody have access to the code that produces this design I'm gonna take a break and try to find it all right I'm taking a little break here for a second because I think in one of the full requests and one of the pull requests mmm where's oh I think it was the one with the parser this one it has this picture yeah so it's this by the way when does it all right oops okay okay click on the photo on Wikipedia it shows it Oh yeah but what I don't have a lot of these commands I don't have these commands supported so I won't bother alright and also I think it should be going up first but I'll fix that okay let me just okay okay okay the chat is really seems off the rails every time I like look over there there's some kind of discussion people seem to be maybe being a little bit mean to each other is there anybody who's a mob can help clean things up over there just please be nice to each other in the chat and maybe don't argue about which laptop is better logo people okay all right all right all right here comes okay okay I'm back I found thank you too well let me just put the thank you there sorry okay all right thank you to stellar tux on github who posted this pull request I now have this command Oh Peto Oh should work mmm I might not have accounted I think I counted for pen up correctly we're gonna find out this command should produce that design and it's got nested repeats all sorts of crazy stuff so let's go ahead and see if I just pasted it in here no all right so let's look at what's going on here I've got repeat a command repeat 36 times with five things left ten pan up undefined forward one pen down undefined repeat 120 and forward and right so it looks like my data structure here is correct the question is why is this not working we have to figure this out so let's first let's take this and put it just in here so the page loads with this and all right so what what's missing here so let's take some things out and just take out this second repeat oh I don't have to pan up and pen down or if just the scale is so much larger canvas is too small so so this might actually be a case where the canvas is just too small so let's make the canvas way bigger oh and am I not starting in the middle the turtle oh the turtle needs to start in with / height / boy really big do I need to stack the position before repeat hmm hmm let me hold on Matthew this is gonna be like an edited out thing because I wonder if I don't think that I need to stack the repeat it should exit that recursion should do it in the correct order I mean one thing that I could do to be sure is just console.log name argh right so right this all right maybe the pen up in the pen down is not working correctly let's yeah I should just make the length smaller that's but I'm worried that making the length smaller all right let's see these is forward 1 and right forward I mean there's not really a way to make that smaller I'm thinking about here hold on to think about this thinking hold on I wanted to test pen up and pen down hold on board 110 up left for forward 100 I think my pan up and pen down is breaking stuff let's look at what I'm doing with pen up and pen down should actually be fine for 100 it's almost telling me there's an issue with go turtle know this this starts it resets everything its restarts the parsing I think this is right I'm just not convinced the pen up and pen down is working all right that works left 100 left 90 forward 100 so what if I say and then left 90 forward 100 what if I say pent up yep so pen up and then if I say pen and down uhhuh pent up and pen down is doing something really weird so there's there's definitely an issue with pen up and pen down is it in the dictionary I could have thought that it was sort of thought that it was yeah turtle panty was false turtle pen equals true reset Pentacles to rotate translate it sure didn't matter Oh what's going on with Penta Penta the editor is only because if you're that error is only because of your live editing no I know that so a copper France it's working in your version interesting ah akhat CEO is giving an excellent suggestion there let me try doing this without the pen down or pen up keep track of the nesting repeat depth last elements have no arguments is your pen regex correct hold on everybody okay I need to figure this out so what I want to do actually is get rid of the live editing thing so that's a thing that I can do very easily with changing this to changed so now and let me go back to making it like smaller just so we can see this better can you see that probably not let me make it even smaller whoops so what I want to do is just say like forward 1/100 so we're 50 okay so now I can I can only execute a when I hit tab so I can say left 90 forward 50 okay if I were to say then left 94 at 50 if I put now Ford 50 pen up and then left 90 4.50 then pen down okay so it is working that's working pen up and pen down is working the way it's expected now what if I were to do what if I were to do so that's not the problem what if I were to do forward one left like forward five left five just that then repeat ten okay so that's giving me like a little circle and okay right this makes sense all right so this is making sense okay so that gives me a circle and what if closing brackets it stops when the first one which could be a nested one Oh Lucas okay wait I think there's a problem with the closing bracket because it stops when found the first one which could be a nested one well this will be a long video but this parts going to be edited out yeah five left so like I should be able to do this math right so repeat 50 that's an arc because it's 50 pixels okay so what if I then wanted to say inside of here repeat so repeat left like what if I went and said also like forward so what if I repeated this now ten times going less forward and but and also to the left for the lower angle this is what's going to break I think yeah so where did this go wrong I don't think it went wrong in here because forward five it's gonna repeat this ten times and it's gonna repeat this ten times oh look at this there we go that's the mistake there's definitely a problem there so that fixed died go back to that ah okay all right so there's an issue of the last people were telling me this I know you were all telling me this last Arg is not going okay fix that for that is finding backwards with Counting depth yeah okay so this is definitely it's what we said but you don't listen to us right know it you know it's very you try it's out and reading the chat it goes by very fast and you're also like you're in a different moment in time than I am so what you're typing is not related to what I'm saying it's very hard okay the tasteful toasty writes this is the problem I commented ages ago well this should be nothing new okay all right so all right so Matt's here this will be a nice little spot to edit let's go to let me go back to just put it back to that let's go remember this is fine okay off by one in the string copy yeah I'm not sure I'm not sure how to fix this actually okay okay everyone okay I'm okay I'm back thank you to stellar tux who suggested actually has this code repeat 36 left 10 pen up Ford 1 pen down repeat 120 then 4 to write 3 to get this particular pattern which is similar to what is on the Wikipedia logo page so I have this code pasted here and now what I'm going to attempt to do is go to my implementation and paste it in here now I have to admit something during that edit point because the live stream I already did this and it didn't work so this is actually not going to work it didn't give me an error and it seems like it's ok but there's some like really big problem here that took me quite a while to find even though the chat had found it about 4 and a half hours before I did it you could find go link to the live stream if you want to view this whole thing but will it look repeat 36 these 5 command so this is right and left 10 pen up undefined forward 1 pen down undefined that's right then the repeat here repeat 120 times forward to right blank so it's not actually picking up this 3 here let's try this there we go suddenly it works if I put a space there why so now I have to figure that's as far as I got in my like one hour of debugging not to figure out why what is it about my code that causes it to break unless there's a space there so in the parser here it is getting when it's looking for that closing bracket and going up where is the spacings not picking up the last argument here but it picks up let me just see here like if I do this whoops like this does this pick up it picks up 120 here only if there is a nested one so let me like here if there's a nested one whoa something something terrible oh I forgot to put a number here if there is a nested one I know the mighty you're gonna have to do another edit point here cuz that people are laughing me people in the chatter saying I still don't know why it's reading the first bakit bracket clothes for both got it that makes sense because it's but it's parsing this really is that what it is outer one is dropped so it'll drop let me think about this right okay hold on let's go back to here if it finds a repeat get repeat where'd you get repeat yeah that's the start and it finds that I got it so it's grabbing why is the space fix it that's so weird so I don't understand I think I understand the problem but I understand why the space fixes it because when it finds the first repeat it's going going going going going on going and it stops here ah it needs to count how many of these there are okay and find the matching bracket all right we're gonna try this again hello okay g11 welcome to the live stream portion of the coding drain where it's now been an hour and a half of me still working on this okay okay gonna we're gonna do some little fake fake smoke and mirrors thing to go back and close these got it O'Kelly asking the chat what would happen if you did repeat three yeah it might parse that right that's an interesting question okay I'm gonna do the counting of the brackets I'm gonna do the counting of the brackets since a cloaca asked why not try to debug it step by step I definitely should have done that that would have been better okay okay I'm back what you don't realize is about an hour past of me doing some horrific debugging and if you want to find that I will link to the live stream version of this edited challenge in the video description those thing that you're watching right now which is not even though I am live it's not this okay this this is the code using only repeats left pen up and pen downs that will create this particular pattern and if I go and grab this I've pasted it here and if I go back to my example and I paste it in we've already seen it doesn't work what's wrong well weirdly I'm going to show you something weird if I put like a space here and a space here all of a sudden we have the pattern we were looking for all along but there's some weird buggy stuff going on why is it like a space but no space here is the issue so this took awhile to debug I will show you a way of finding the the way I found the error was by looking through a first of all the chat found this way before me and suggesting it I had to look and look and look where I found here all of a sudden in this last repeat here this command right right it didn't pick up the argument three it's blank so that's certainly why I'm not getting the pattern that I'm expecting to get now why is it doing that well the secret to that it's not a secret so much lies in the fact of the way that I parsed this bracket right remember if I have a repeat if I go here right I look for the first opening bracket that's the start the first ending bracket and that but what if there's a nested repeat if there's a nested repeat this is the starting bracket this is the ending bracket so it completely ignores it pulls it off here and then loses the way it's parsing it loses that three and somehow the having a space in between there kind of is able to still get that three by accident so what I really need to do is match the number of brackets so why love this dot text dot car at this 10 X plus plus does not equal the bracket this is this dot index so I think I need to do this in a different way maybe I need to count the number of of brackets so all right so bracket count equals equals zero okay and then for a long time let bracket count equals zero so first let me just do the bracket counts let's just do that so now basically I could say like I need so so okay like if I just sort of went all the way to the remaining tokens just for a second while while it has remaining tokens I could say this the character is this dot txt car at this dot index plus plus and if car equals a bracket this bracket bracket count plus plus bracket count and then it's I'm gonna say temporary equals this dot index and then set this dot index back to temporary so this is me just counting how many of these there are so this is not the greatest solution but it'll work for right now let me just see what happens where am I looking a parser jeaious line 20 is the number of brackets which is just 1 and I should really now include this as in the huh so many things I should have this just pull up here when i refresh the page do this all right so there were two brackets and then there were one bracket that makes sense so if there were two the start the start is correct while this Takhar at that index does not equal and so I need to so it's really this second while loop that I need to change this is like a kind of an easy problem but it's like I'm a tired person right now I need to eat lunch so and people are giving you all sorts of interesting suggestions in the chat yeah it would be easy with a recursion drop the get repeat function entirely ooh hold on there's some interesting suggestions no need to count just call command commands equal this dot this parse this text then change the parse command to skip o and return on a won't that be the same problem oh wait William this is so fascinating here bracket count equals one the way I did it was count plus plus for up close the repeat one count equals zero whoo I like that okay get all opening don't cry we heard with you were first parsing put bracket down and go on in the second while as oh so many great so many great suggestions TMC is saying only the shape changed the second while I like this idea so actually let's go back I like this I like a different idea here so Matt did this little I was counting which is fine all right I have a different idea now what if I think it's like finding the first one and finding the last one in this weird double wild loop way is kind of silly because all I need to do is keep track of I mean I do need to find the first one so let's stick with finding the first one and then basically once I found that first one bracket bracket count equals one so now what I want to do is while bracket count is greater than zero I'm gonna look at the character if character equals an opening bracket then then increase the bracket count else if it equals a closing bracket then decrease the bracket count and then I should have end should just now be wherever the index is wherever it last left off I might need to do minus one not sure right so this should be like I basically finding the first bracket just case there's like noise and spaces there and then I'm going to pull out I'm gonna it amazingly looking for where that last bracket is and if the last bracket comes bracket count will be zero I'll be done but if there are other brackets it's got to keep counting okay I should never use my drum sound because it always means it's not going to work all right there we go this worked I think this is done yeah that was really hard anybody else have any logo suggestions for me to paste in here Oh infinite loop Andrew Murray writes infinite loop if not enough closing brackets I'm not doing any error checking but actually since I'm live interpreting I do need to do some error checking all right fine fine one more thing so while bracket count is greater than zero and this dot remaining tokens I should just call this this should just be called remaining like remaining tokens is silly it's not remaining tokens it's like remaining stuff so this should fix that I mean it won't draw correctly but now right even if I do this like it's not doing it correctly but it's not breaking so you know weird things like this I just wanted to live interpret so all right so if you're watching this thank you this is a really fun project to work on that's well done let's go home hold on air handling during pent up and pen down that will work okay all right I just want to find one other logo patterns logo turtle gonna find me an interesting one like this forward let's repeat count right 89 mm oh that's the number of times are in the repeat I won't be able to do that I don't have that color like this one oops this one looks like it's kind of cool decrease the stroke yeah all right rep count command will be good yep change the pen regex to to stop that live editing error yeah that's a good point Oh somebody somebody suggested something repeat 8 right 45 the coding train logo logo code pull request number 3 okay thank you tasteful totes toasty file if you want me to try something file it as an issue here because that's where I can pull it up I can't copy paste from the chat pull request number 3 whoo that's cool whoa whoa what all right but I need this as like a text file that is crazy so if you could paste me interesting things to try pasting it into the chat doesn't mean no good I mean I guess I could pull up the chat on the stream but I would prefer to grab it from the issues I think whoops I don't see any new issues tasteful toasty I would love to run that it's it's on the source on github well that's hard for me to find okay I can do it it's worth it the fact that you did that definitely I will look for it number three files changed got it not seeing it 840 by 760 is that why issue number 13 has it as a text file hold on I just want to get this to work oops I'm not in the right place doesn't start in the center and what if I were to have the turtle start at zero zero there we go unbelievable still not big enough this is crazy why is it not getting bigger what happened here Oh cuz it's caching cuz I yeah sorry I forgot that I sorry I lost I'm lost in the world of this like insane thing that I found like I don't know what's going on anymore there yeah okay sorry start turtle at 2020 yep all right there were some other interesting ones let me see here coding train logo a bunch of logo examples yeah but I can't do any of the ones I can only do the ones that this one I could do cool okay hold on all right hold on and hmm interesting that one's not in the center but okay all right okay let me let me finish this up whoops okay okay all right all right so this is complete it works I'm very excited about that people have pointed out some examples that I found like for example I could try to make this design let's see what happens if I post this in here right we can see oh I'm kind of off look where my starting point is off but now I could start to really be creative and and this the line is sort of thick here so I also feel like now that I'm doing more complex stuff I probably want to change the stroke weight back to one and we could see that looks a little bit nicer I just want to show you something though amazing if we go back to the logo repo before which is this is the state before I've done this video and I go to pull requests and I go for example to pour request number three from the tasteful toasty you can see here a whole bunch of other ones that you can see rate you can see that I could now try that should work with mine and I'm gonna show you something that's gonna blow your mind this ah let's make this work we have to make this work so I'm gonna go just before I leave think about other creative things you could add these are all the commands I am going to now go into index.html I'm going to put that in here hold on where it what's going on here I'm gonna let me give a carriage return here let me paste in all of those commands now I could now go back to here and do this we don't see anything so one thing that I really definitely need to do is give it a much bigger canvas so let's go back to create canvas you have to finish with this 900 by like 900 something like that refresh but it's a little offcenter oh let's let's change it to 2020 or zero let's actually just change it to zero zero and make it a little bit wider whoops there we go it is the Coney train loco made with literally with logo and all of these numbers here I hope you enjoyed this video there's so many things missing right there are all these logo if you look at the history of logo and you look at the language of logo there are lots of commands than I missed so I'll list some of those in the video's description try to implement those or also color how would you incorporate color with this how would you do think of other clever ways to make this interactive in real time to allow people to play with it so we now have a full interpreter here and finish with this project I can't wait to see what you make I'm gonna figure I'm gonna add this code to the this coding train logo repository and I will accept pull requests for implementing other commands bug fixes I'm adding things like color making the interface a little nicer so I'm probably gonna close out most of those pull requests that were implementations of repeat I thank you for them but but this will be now a community logo interpreter project that will start from the code that is in this video good bye everyone and see you in future coding challenges okay all right everyone that's gonna get edited into something are we good did I miss anything super crazy oh this is so cool all right so what I'm going to do right now let's do a little bit of management here of the repo let me grab this okay so whoops hold on let me what I'm gonna do is I'm going to now grab let me get this back to just two hundred two hundred one hundred one hundred what's the zero I forgot what that is Oh the angle I'm gonna go to here and put this back to this and I am going to grab this stuff from the desktop logo command I'm gonna grab all these things I'm gonna go to documents logo I'm gonna paste this stuff in here replace replace replace I'm gonna say get status get add new version from livestream git push origin master repeat parser I'm just a new parser so I am now pushing this to a new branch look somebody is banging on the door I don't know what that is I'm gonna pull request this parser code from live stream this pull request number ten will be very sad I'm sorry Tony and pull request number ten this is the new code from the live stream with a parser object and okay look cameras going off and now I'll merge this what what the hey ho and that was number 24 so now I have to go through and I'm gonna write some nice so let's look at all these let's take a minute to look at the work that all these people did I'm gonna close these things so this is a implementation of a repeat that how does it work preprocess the string and ah this is very similar to what I did this looks quite similar to what I did in terms of counting the brackets this is great okay my own version today in 24 thank you for this submission and probably gonna just put this same comment and all of them implemented recursive repeat and the coding train logo oh this is tasteful toasty who is watching right now thank you this was so fun to include in the live stream so thank you tasteful toasty for this implementation and this is really cool this is great referenced it several times during the livestream and now we're going to add parser command before loop draw prepares object with function wow this is a really interesting solution in okay now I am going here we go repeat implementation this one is from web bian weapon I successfully implemented the repeat command awesome let's look at the code here once again I should have looked at these right nice little like bracket counting and actually just repeating it great work whoops I'm in pull request number 12 I'm gonna close this one now I'm going to go into oh a turtle was added this is another nice implementation oh this executed command executing a stack this is great parsing the repeats and making laddie some like turtle e stuff cool okay with some similarities okay close this one thank you everybody for the time that you took to submit these implement repeat for a turtle this one is handle command this is very similar to what I did it looks like handle command function and parsing fancy more parsing excellent work great work thank you fabritius and now we're gonna go we've got 9 left here looping color and make everything gorgeous looking whoa oh thank you for the readme stuff oh this is great so so let's see oh wow this is really nice oh so this would be this this I would love to okay so let me write here this looks like it has some stuff that I could include love to include the color and some design improvements from here could you submit them as separate pull requests using the repeat using the new parser stuff from number 24 also if you could include a clickable a demo a link to a demo running in the browser this makes it easier to review but screenshots are also good so we leave this open leave this one open here that one's gonna leave open add a very forgiving command parsing some more command parsing look at that nice error checking well look at this I like this eat eat the code next come out well this is very similar next command like my next token thing this is very similar alright we are now to visual redesign cool Oh excellent oh I like that is this is that turtle okay thank you thank you yeah I can't type thank God Thank You lovely how about we combine this with elements from number ten is the image of the turtle copyrighted all right so there we go there's that repeat and drawing option to draw a train draw a train ooh cool can you post maybe we can include interesting designs like the train as part of the readme okay okay um let's see where are we I feel like I'm when else am I gonna do this so I must do this we'll have live streaming here a better read me thank you to Dan here ah okay so thank you I definitely want to improve the readme to have more info about logo the video the the videos and and features related to this project they don't think that I want to do voting at the moment however thank you for thinking of this now that I have number 24 okay so thank you for that I definitely would accept pull requests to fix up the readme because there's nothing in there oh look at this oh it has that is the turtle that's fun cool awesome wow there's a lot of stuff here now now that I have number 24 I that I am no longer looking for code to repeat but I would accept a pull request with a nice turtle as well as as well as support for more commands maybe you can submit anything you want to pull recently please let's see please feel free to resubmit it's helpful if full requests just address one new command etc okay so I'm gonna close this one and now alternative for iterating the input and intent a repeat for output this one is from Ren Akira and we could see awesome excellent oh so nice like tokens shift oh there's some nice techniques here repeat function this is great that's wonderful thank you for this one chances chances and more Oh what is this so this is some kind of like pull request review system interesting and a todo list okay well I like that this is great thank you I think I I think the the todo list would probably work better in the issues and I'm no longer seeing my other comment re voting but I would gladly add informational stuff to the readme okay thank you for taking the time to to submit this okay now command parser I slightly rewrote the commands parser I have separate command lists into no arcs and one args oh there's some this is some excellent ah this is interesting so there's one argh and commands with two args interesting that's a new ID and thought of that turtle is re rewritten a bit here I think this I think 20 whoops thank you so much for this great work I implemented my own version today in number 24 okay we are getting through it ad okay we've already got a real pull request here ex new commands repeat count i commands i if arg equals repeat count and repeat count command okay this looks reasonable anybody who have any I would love to see like so I'm Henry 808 six in the in the chat it looks like just a minute this pull request so I definitely want to merge this you know obviously there's no unit testing for this project so I can't tell if this is gonna break anything looks totally reasonable to me one one thing that you can do Henry you know in a case like this is to if you're hosting your branch via github pages you could you could then like I provide in the description here like a link to it so then I could click on it and see that it works I'm gonna throw caution to the wind here and thank you very much for your efforts I'm gonna just add lots of like nice emojis here and I'm just gonna throw caution to the wind and I am going to merge this pull request excellent so that's that I'm gonna look at the issues now project now has its own implementation in number 24 so let's close this issue let's I think I ended up just doing my own in number 24 okay if you can be closed test data what's this oh oh look at this choo choo okay Wow amazing how how should we include these as part of the project in the readme in a wiki so let's leave that open your submissions please you will continue to contribute all right a bunch of logo examples awesome thank you shall we add this to the reaming all right coding training logo how do you do that oh that's all that's that's cool awesome it's the same sort of question here and loops formula okay and something similar I wrote and this this would make more sense train website if you like so website under here wiki community contribution guide alright so now under the issues what's this oh yeah okay label let's make a new label called examples oh that's annoying let's make a new label called examples for related to example logo designs and let's put that here let's label these I guess this is also an example we need a this has a license let me actually add I think I have the Code of Conduct actually for the coding training Code of Conduct which is fine some worry about that right now okay so this needs readme updates what does the readme need link to web demo link to coding train comm challenge pages link to his information and history of logo itself what else do we need on this homepage the readme here link to YouTube videos and example logo designs so things that I'm looking for to be added to the readme okay and this should be let's call this documentation yeah for related to documentation let's add that label okay so it's more pull requests okay okay so and then I probably should make a create okay I'm gonna add contributing markdown and contributing guidelines need to add to contributing MD linked to code of conducts information about so about what you can contribute which is design ideas support for additional logo commands and what else a bug fixes just um you know good too far okay so there we go so this is also documentation and there we go okay everybody people are still watching this so I did some cleanup to this repo so this can be I would love for people to continue to work on this in theory right now is this hosted with github pages it is if I go here this is what it looks like right now but I would gladly so this can all be improved now all right so it is 1215 I think I'm finished for at least part one of today's livestream which I've got one one video out of and now let me just look let me let me let me check a few messages here and figure out what I'm gonna do this afternoon because I'm gonna come back I'm just gonna see here so I'm just checking here to see okay all right okay all right everyone all right so the things that I didn't get to so I'm reading my email now so much to do so much to do the things I didn't get to today are save and load your model with transfer learning as well as working with the sketch RNN I was I'm sorry working with the Google quick draw dataset so I am going to come back I think it would be good for me to take a lunch break and I have I'm like free until 300 for it so what I'm gonna do is my goal is to come back between 200 and 400 so let me actually put that in right now let's say 200 o'clock studio I'm going to actually create the event right now and I'm gonna go to live streaming and I'm gonna go to events 2 p.m. by the way is an hour and 40 minutes from now my time so I'm gonna create can I do like no I can't like duplicate this event new live event quick draw data I'm gonna set this for 2 p.m. possible I would get started earlier but unlikely ending at 4 p.m. and and so let me create this event now that looks set the ingestion settings and changes so now if I go to YouTube the coding train we should see here upcoming live streams huh did I not live in 99 minutes how is that ninety Oh 99 minutes hold on I don't know why it's not showing up maybe because I'm livestreaming right now it doesn't want to show upcoming live streams there we go so this is now I'll set my reminder this is now where I will be coming back in 99 minutes to do the Google quickdraw stuff thank you everyone for tuning in today I'm glad to what is now really the completion of the logo coding challenge any additional stuff will just be managed through that repository I have to admit like my confidence level in my ability to continue to manage that repos very well until I sort of work out a system for doing that better with the community and maybe have a set of repo managers but at the moment and so if you're interested in volunteering for that I don't know that that's a you know III hasn't a to ask people to volunteer to do work that helps me but that's certainly a possibility all right 98 minutes what should I have for lunch that's the question don't know Thank You everybody I'll be back for a little bit more this afternoon I'm sorry Buddha but and now I have to hit the stop streaming thing okay where do I do that that was exhausting stop streaming