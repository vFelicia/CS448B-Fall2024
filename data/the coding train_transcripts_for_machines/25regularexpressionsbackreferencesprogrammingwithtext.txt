okay here's another regular expressions video and in this video I'm going to show you how to use a back reference in a regular expression so this is going to make use of capturing groups which I covered in the previous video but what I didn't do in the previous video is I only showed you how to use a capturing group in a fine and replace operation where the syntax is dollar side one for referring to group number one but what if I want to refer to group number one in the regular expression itself in this case I use backslash one so a classic scenario for this which is taken from Jeffrey Friedel's mastering regular expressions book which I highly recommend is searching for double words what I mean by that is o is is appears twice in a row double double appears twice in a row not not appear story surround why why what if I want to search anytime two words appear in a row so let's figure out how I would do this so first I can look for just any sequence of you know at one or more word characters in a row and you can see I've matched all of the words now I could capture that alright I could say one or more word characters in a row followed by what some sort of white space right backslash s I don't know if you can see this I'm gonna zoom in here to try to help you see it better backslash s followed by what backslash one look at this I'm saying match any number of word characters in a row followed by and capture it as Group one followed by space and hey the thing that you captured is Group one not any word character in a row the specific actual sequence of word characters you match that again so look at this it doesn't get you two words in a row right you're no I'm not matching some text or somewhere or am typing I'm only matching when the the exact same word is followed by the exact same word rainbow rainbow unicorn Yuriko not not double double now there is some weird stuff going on here for example look here it matched is is this is and it matched s some with s and s so one thing I need to do here is have word boundaries as part of this as well so for example if I say okay well there's got to be a word boundary here and then there's also got to be a word boundary here then now I'm only getting is is text X double double not not rainbow rainbow unicorn unicorn now notice again this is how regular expressions work it matched III but didn't match this I I and again there's some ways around that which you know I'll leave that for another time but you can see this is a very powerful thing that you can do that you can actually refer to something that was matched in a regular expression by using backslash 1 and this sort of double words exercise a double words example I think is a good one to look at okay thanks hey this was a short one I have a camera went off forever typing okay so thanks for watching this one and after this video you have now reached the point I think let me say a couple things there's more to regular expressions than when I've covered in this sort of introduction I think for videos so far I've kind of going through position meta characters single character quantifiers character classes call alternation capturing groups back references cetera there's bored there's something called look ahead and look behind there's probably more meta characters that I miss there's a lot of nuance it's different in different programming languages I can't get to everything here I'm sure I've missed stuff I'll come back maybe do more but I want to move now to actually looking at how you execute regular expressions in the JavaScript programming language itself with the functions test search match exact split replace and then do some a coding challenge around rebbe expression so in the next videos you'll start to see regular expressions in JavaScript itself