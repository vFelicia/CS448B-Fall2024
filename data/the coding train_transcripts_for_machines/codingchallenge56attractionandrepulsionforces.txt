hello and welcome to a coding challenge so this coding challenge is called I think attraction is repulsion so I'm recording the intro after I did the challenge was kind of a mess and I never really got to the results that I wanted and I just sort of played around with a bunch of different possibilities so I'm asking you the Internet are you the Internet I'm not sure who the Internet is maybe it's you I don't know who it is you're watching uh to take my code and hopefully expand on and improve on it in interesting ways so what I was imagining was creating a lot of interesting attraction patterns by looking at the trail of various objects as they move and get attracted to different attraction points within a canvas and you can see if I just kind of google image search attractors and processing we're seeing a lot of visual images like this visual images like this so you can imagine drawing dropping a whole lot of particles into a space where this image of me behind me and having them sort of swarm around and move around all these invisible attraction points so where I got through with the challenge is kind of an end result that looks something like this and what I actually started doing was just showing in the challenge towards the end I decided to show you the difference between attraction and repulsion and if I add a bunch of these all around you can see what's happening is every single one of these attractor spots attracts these particles that are just entering the scene but when they get within a certain number of pixels of the attractor then they're repelled with a very strong force so this hasn't really produced a visual result necessarily that I'm happy with I would be interested what happens if I looked at the alpha blended trails over time but this example that I end with should have all the pieces for you to take and add your own design create spin on it so watch the video you'll learn a bit about how vectors work how forces work how you can add different objects with Mouse with arrays and looking at how you can accumulate different forces and have interplay between different particles moving around the screen and you're the mechanics of it will be there in the video I'll make lots of mistakes and get confused and the end you look at this video subscription find the code hopefully expand on it and make something much more beautiful and much more interesting because I really failed at doing that so I hope you enjoy this coding challenge oh I I guess I have to at this point like I have to blow the train whistle it's like I have a contract which doesn't exist but it says in there close the train whistle so that's what I've done enjoy the coding challenge and maybe you'll still be watching at the end or in the next video or you might run away forever and never come back which I would totally understand but anyways goodbye Susan alright let's get started so actually let me come over to the whiteboard the first thing that I need to do basically visit what I need for this example I want to have two kinds of objects in my world I want to have something that is an attractor object and honestly I don't think I need a full on a tractor object in this case the attractor can actually just be a single vector right all I care about for the attractor is its XY location where it is so I want to have an attractor that's a thing that's drawn on the screen and then I want to have particles so I want a single particle which is like a dot and I want that dot to be attracted to the attractor and how do I want to be attracted to the attractor by using gravitational attraction so the formula for gravitational attraction is the force of gravity expressed as a vector is equal to G which is the universal gravitational constant constant concert the gravitational concert the universal gravitational constant G times the mass of one object times the mass of another object divided by distance squared the truth of the matter is I think I could consider the mass of this parcel is 1 and the mass of this attractor as 1 so the mass of both of these are 1 then my formula becomes G divided by distance squared so really the force of force the force of gravity I want with the force the forces one with me me the forest one something like that anyway the force of gravity is really just a constant that we're going to make up stronger that weak mean this is a real number in the real world in physics but we're living in this fake pixel space we're just going to make up G and then we have this interesting question of Oh should the force forces strength be proportional or inversely proportional in distance so what this means is if the particle is really close to the attractor it's going to be really attracted to it if it's far away that attraction is going to be much weaker because that I'm dividing by the distance squared so as you maybe make a creative project out of what I'm showing you in this video you might play with this idea maybe it's weaker was closer stronger when it's further let's just sort of give it a try and then obviously at some point we could make this force not attraction but repulsion by just multiplying all this by a negative one so anyway let's go back to the code and start implementing some of this so here I am with the code there you are and I am going to start writing some code so I'm going to go over here and I have a look dude I have a particle I have a I have a separate JavaScript file called partial gif where I'm going to create a constructor function for with a particle and I'm going to just give it an X and y so the only thing I'm going to give to the particle and it starts with a location to start and I'm going to say this dot pod equals create vector X comma Y so now I have a particle with a position that the vector of an x and y now in the main sketch I'm going to say bar at rector and then I'm going to say attractor equals create vector a 200 200 now I could make an object for the attractor like I'm doing with the particle but right now my attractor is just going to be a thing that stays in one place doesn't need to animate it doesn't need to keep track of a color so just a single vector is fine then I want to see that everything's working so I'm gonna say background 51 and I'm going to draw maybe let's just use points for simplicity stroke 255 stroke weight 4 and I'm going to say point attractor dot X attract toward y and let's just take a look at this real quick hit refresh and there you go there's my attract York oh the dot in the center of the window yes okay so that's working now what I want to do is add a particle and I want to say a particle equals a new particle and I'm going to put it at I don't know 200 comma 100 and then I want to say something like particle particle show now I have a constructor function so that'll work I do not have a show function so right in here I need to say this dot show equals function and I'm just going to also do the same thing stroke 255 stroke wait for and then point to this cause X this dot pause why now I realized something I forgot to actually reference the particle itself in in the HTML file the particle J's file so I'm going to do that real quick okay great now what do I have I have a particle and I have an attractor look at that particle look at that attraction attract the particle okay so I guess I can't do it with motion in my hands we've got to add some code so let's go back to the sketch and what I'm going to do here is I want to say particle attracted to a tractor so I want to have some generic way of saying any given particle can be attracted to some vector and so I'm going to write a function in the particle object called attracted that receives an attractor so let's take a look at that and let's go to the particle that means I need a function this dot attracted equals function and that function I'm going to call it target so I'm going to give the argument at target the target is a thing that's attracting it so we're getting somewhere now but one thing I realized here is that I don't even have a way for this particle to experience any physics and so if you're interested in this or larger topic of physics engines and the kinds of citizenship you get Billa T kinds of physics engines you can use a separate thirdparty libraries I've got a lot of videos as part of the nature of code course about all the steps which I will reference in this video but right now I'm going to do this in a really quick way using something called Euler integration often mispronounced as Euler but it's boiler so I'm going to what I need is I need to integrate meeting I'm doing this thing where I'm saying how does position change over time this is actually what's the rate of change of position or the derivative of position it's this velocity and I'm going to make a vector zero zero then I'm going to make a vector which I'm going to use as acceleration create a vector of zero zero actually by the way if you just say create vector with no arguments it makes a vector zero zero what is a vector if that's not familiar to you a point you also reference the video that goes over the basics of vectors so I have position velocity and acceleration now what I want to do is add a function on maybe I'll call it update could call it step all physics engines need a sort of moment Yury step through time what is that time how many cycles of time are you iterating through depending on each frame of animation I'm doing this in a simple way every frame of through draw every frame of animation in my sketch I add velocity to position and I add acceleration to velocity so now if I were to actually give a velocity 0 comma 1 and I were to go to the sketch and also say particle update and run this sketch we can see there we go my particle is moving towards the attractor now I just happen to give it a hard coded the Lassa T pointed straight at it so if I go back to the particle and I say something like you know zero you know negative one comma zero point two you can see the particle is moving over that way now so the velocity is a vector that controls how that particle moves I could also give a particular acceleration like zero point zero point zero one and you can see now it's accelerate getting down right because that acceleration is accumulating onto it so this is this this is a very basic physics engine I have a particle that has a position it has a velocity which is an arrow that tells the position where to go next frame and I have an acceleration which tells the velocity you should turn you should slow down and should speed up and that's happening here in this update function now if you recall I said here's this thing called a force and the force is vector that is going to I want to have this particle be attracted to the attractor wherever it is so I need to calculate a vector that's always pointing from this object this particles location towards the attractor and how do I do that so easiest thing easiest way to get an arrow that points from one position to another position is to subtract those two positions together so this is where on this dark what I need to do is write in that attract function I need to figure out this force now I there's lots of things going on here so there's three things one is I need to figure out this force so I need to know how does how do I get an arrow that points from the partial to the attractor I need to figure out how well how make sure that arrow B is it a weak force is it a strong force that strength of it is coming from this formula that we're kind of working out over here but beyond that I'm staying it's a force and if I come over here position velocity acceleration what's the relationship of force to position velocity acceleration well you might be familiar with Isaac Newton and there's a bunch of laws I'm sure they're all very important and interesting but the law that I'm interested in is force equals mass times acceleration what did I say about simplifying our world to just make the mass of everything one yeah so the mass of this is one then really force equals acceleration so force is a vector that causes a mass of course it's a vector that causes an object with mass to accelerate and so we can actually just if I could figure out this attraction force now just put that right into acceleration and our simulation is going to do exactly what we wanted to do I hope okay so I'm coming back over here use the Force I think it's the proper terminology here let me use before okay now I've lost my train of thought okay so let's put all this stuff back so to speak empty vectors and let's come here so what how do I do this I need what did I say I need a vector that points from the particles position to the target the way I get an arrow that points there is that they target the particles position so I'm going to say var Direction equals P five dot vector dot subtract target this dot now this is a just about the most awkward way I could ever possibly think to write this but just for the sake of argument I'm going to put here in the comment I'm going to put comments bar dir equals this target minus this dot pot this is really what I want to do right I want to say give me a direction of vector that points from the position to float sorry yeah from the position to the target by subtracting the two positions but the minus operator doesn't work with vector objects in JavaScript other programming environments you can kind of overload the operators and do fancy things so what I need to do is use the subtract function that's Carbet p5 dot vector and this will give me a new vector that is a result of target minus position now so now I have a vector that points all the way like this so the question now is how big should that vector be should it be short should it be long should it be medium and there's lots of ways you could decide I'm going to use this formula G divided by distance squared I'm gonna consider the mass system so I want to have an inversely proportional distance so let's figure out how we can do that now one thing that's nice here is this vector that points all the way from one object to the other that is the distance and actually I can just get distance where is the direction that that vector the length of it is distance and if I want this been squared there's actually a function I believe in b5 called nag sq for magnitude squared so this is giving me that value distance square that's on the bottom of our calculation now I also need to figure out what the universal gravitational constant should be let's Google the universal grunt to get tickets to the universal gravitational constant concert again you would make my bad joke so if anyone could get me tickets to those I'll take Hamilton tickets that's fine so this is the universal gravitational constant let's just use a little bit of something from that from in our code just for fun so I'm going to say again I could just make this up bar G equals that number so now the magnitude is a G divided by d squared so I'm now I've got a vector pointing from Target to a pointing from position to target I have the distance squared I have a pretend Universal gravitational constant and now I have the magnitude so what I need to do is say dir set mag that magnitude so what this set mag function does is it takes a vector of any length and keeps its direction but sets this blanks to the lengths that I want to so I don't like the fact that I'm using I'm going to say strength or something because it's really the strength of the force and I think this should really be called force because that's what I'm doing ultimately as I'm calculating this force so ultimately I started with a force that's the full distance then I'm getting the distance squared making up the gravitational constant constant copying the strength and setting it and now what do I do the acceleration equals force so in this case let's take a look and see what we've got so now if I call particle attracted particle update and particles show I should calculate a force in the attracted function that force will go into the acceleration which will go into the velocity which will go into the location which updates location and then we'll draw here we go and sad trombone it up okay this guy's always desist on this dot acceleration let's let's just hard code to strength for a second as one oh it's working so there we go we can see now that it is experiencing that attraction it's just I got to really think about the sort of scaling of this so it's very very weak to see how it's moving just a little bit now it's getting closer so it's going to get stronger and stronger so this this is really like I got a really start tuning stuff here and one thing that I'm going to do I think that's really going to help things a little bit is one one thing I could do is I could just you know I want to have a much stronger gravitational constant and but look what happened just there whoops let me run that again the issue is boom explosion that force is so strong you know the Apollo moon missions where they had to figure out how to like go around the moon calculate the students properly and slingshot to get back to earth well I've got a sort of very extreme version of that happening here so one thing that I think would be helpful to do is to constrain this distance squared value because I could you realize once once that particle is so close the force divided by distance squared is so big that that's just going to spin out of control so I'm going to say a distance squared equals constrain itself between I'm going to say 25 and 10 what's what's maybe I don't know 400 or something so we're 500 so I just don't want I always want that force to be at play and don't want it to get so so big and now let me do this so now we can see I now have a particle that's attracted to this particular attractor and you can see that getting some interesting behavior but really I've done is barely anything yet but this attraction is okay okay so now let's try to do some stuff that's a little bit more interesting so for example let me at least give this vector a random velocity to start and we'll see so now it actually has a random velocity to start so it's not pointing directly at it and the other thing that I want to do I think which would be interesting to see is kind of draw some trail so I'm going to put back round here and so we're going to see sort of its path a little bit more so now what we've got is a single particle drawing a path as it kind of orbits this now interestingly enough another cochons I wanted today was this rose petal challenge and strangely the attraction is giving me this nice kind of oscillating pattern behavior around around around the actual center itself okay so let's try to let's try to be a bit more thoughtful about this first thing I want to do is I try to say that I want to add multiple tractors or multiple particles but let's add multiple particles first so let's make an array for the particles and let's let's add all those particles to that array particles dot push new particle I'm going to destruct them all in the same spot and then same exact for loop so I don't need it for the attractor and I can say var particle equals particles index I so this is me now having a bunch of particles and having them all do the same thing and what did I get wrong here I don't see an error I don't have a length yet for the particles that's a good point let's see how many do I want to add let's add 50 and we can see there's all my particles all being attracted I all started with a slightly different initial velocity so they're all going to have a different pattern and I think like it's so extreme what I'm seeing here so I want to just draw them with a little look with a lot of alpha and we'll sort of see these paths that they're creating okay so let's just run for a little bit you can see now that I've got something everything is really because of the constraints that I put in it everything is kind they've all started in the same spot and their initial velocity is all the same and our masses are all considered one really getting a very very uniform almost like nucleus electron like kind of pattern here so this is um so this is just a beginning point now let's think about what happens if we start to add multiple attractors actually I want to vary this a little more before I do that so one thing I would like to do is I think I think I would like to give it the magnitude of its initial velocity something that's a little bit more variable just to sort of see so this now is going to be quite a bit more variable so the initial velocity some of them are much stronger than the others and I think just to look at it for right now I want to be able to see the paths a bit more so you can see here now everything is circling and being attracted okay so I don't know if I actually like it's kind of a bit of a mess not almost like it's better when it was much more uniform but what I would like to do now is add multiple attractors in multiple places and see how that works so let's go back first of all to just a single particle and have the particle once again have very little alpha and we can see here's my single particle being attracted to this particular attraction point now what I want to do is add an array of attractors okay so I'm going to go to the sketch and I'm going to say attractors equals an array and now I'm going to say also the same exact thing for the attractors what I want to do is say attractors push create vector and here I'm just going to give them a random location random with random height okay so now here I want this exact loop attracters dot length and I want to say attractors index I and attractors index I so I just want to see I'm going to comment out the particles for a second I just want to see does this get me a bunch of attractors on the screen I missed attractor is not defined where attract doors s there okay so I only see one did I open I only made one let's make ten okay so now you can see this is each time i refresh the page I get a random assortment of these attractor dots at different spots so now I want to see if I can have the particles get accumulate their attraction to all of those points okay so here notice how I had particles so what I could actually do here is in when I'm looping through there's so many different ways I could do this but I'm actually just going to put this loop of the attractors inside the particle loop there's a bunch of different ways you could do this this needs to now BJ and I need to say attractors index J now this actually isn't going to work but this is the idea there's a big problem here but so first let me draw all the attractors then for every particle let me have the particle interface with all the attractors that update and show itself and if we do this we should see here's a particle that looks like it could be working kind of just left the window we run it again the issue is actually it's not being attracted to all of the attractors it's being attracted to just the very last one let me show you what I mean by that in the attractive function here I'm setting acceleration equal to that force and the way that forces the way that an object behaves in an environment where there are multiple forces is its resulting acceleration is the result of the sum of all the forces at play so you can't just say set the acceleration to this attraction sets the acceleration list attraction to this one to this one I've just got the last one I need to add them all together this is known as force accumulation so it's really as simple as me saying acceleration dot add force now there's another issue here the way that force accumulation works is at every moment in time we start from no acceleration and add all the forces together then we move then we start over from no acceleration and add all the forces together and then we move the problem with this is I need to make sure that acceleration is cleared out to zero every single time and a quick way I can do that is once I'm done with updating I can just multiply the acceleration vector of time zero because if I take a vector and multiply its components by zero its zeros everything out so that's a quick way that I can do that okay so let's see what happens now this is now it's hard to sort of know exactly what's going on but this particle is experiencing an attraction force to all of the other attraction points around I wonder if we just had two attraction points to be more clear or if I started with a lot of particles so let's go back to let's keep that let's take this out let's start all the particles at the same location and actually I think it might make sense to start all the particles in the center and let's try to just do ten particles and see what happens what oh look at this beautiful amazing result yay coating challenge bug is not the result that I was hoping for by any means whatsoever let's so let's see what we did I might have a mistake in the code actually because that's kind of a weird issue in the chat I'm seeing the comment the forces are too weak for the faraway attractors so that certainly makes a big difference here what I would like to actually see is a different way I want to see this like layer itself you know we're kind of slowly over time so a couple things one is I would prefer not to actually draw the attractors so let's not bother to draw the attractor let's go back to the particles and one thing that I want to do is I want to create a vector that its previous position and then each time after it's drawn I want to set disc previous x equals this pause X I want to save its last position this previous dot y equals this pause that Y because I think it might be nice to actually connect its previous location with a line so right now you're noticing that I don't really see its path because the dots kick Boop when it moves quickly the doctors so far now mostly just have this mess but if I connect it with line there's going to be a little bit more clear I'm going to change the stroke weight to one and I'm going to give it a lot less a lot more alpha and we'll see what sort of paths I get here so you can see bit more clearly what I've done is to kind of get these lines so let's run for a little bit so what I'll let this run for a little bit but what I want to do is also I think thinking about how I do this constraint is probably so that the forces are always at play even if it's far away it's going to be kind of give it more of a dynamic quality I could also do something where yeah this is you could see now I'm getting something more like what I was hoping to get is some more regular kind of patterns I kind of I guess with the Alpha over it like letting it run for a long time might be interest to be nice to watch but I don't have the patience for it right now so I'm going to go just back to the particle and draw it with a lot less alpha and then one thing I want to do is let's try let's go back to look I'm just curious what happens if I let the particles all start at a random location but I actually just don't give them an initial velocity everything might settle into that's kind of a nice everything might settle into something of a regular pattern and I'm going to do that by I'm also going to I'm going to constrain this a little bit more and I'm going to also add you know 500 particles into Prague and make it run way too slow yeah so this is more like what I was hoping to see and now you can see it's too many particles and the Alpha isn't enough so let's lower that and let's let's also lower the Alpha a little bit more and let's see what we get so you can see here I'm starting to get some patterns that might be a bit more regular to constrain I you know really there's like so much tuning that I really need to do to see if I can get some more regular patterns I also you know I'm kind of sometimes I wanted them to be random sometimes I don't let's have them I just want to sort of see now back to the middle dress like this and then let's give them a little initial velocity so let's try this look where did I miss a I missed something I missed the parenthesis so yeah so you can see up that I'm going to get some interesting kind of regular ish patterns just based on based on the kind of initial arrangement of the particle of those attractors themselves and this is kind of what I was hoping to kind of see now there's so much more you could do with this if you're more thoughtful about about about how you arrange the attractors how you set the initial condition so many more possibilities here one thing that I think might help us tune this and figure out how to make it produce visuals that we might like more is let's see if we can actually position the attractors with the mouse so what I'm going to do is just completely comment out the attractors and I'm going to start this sketch you can see here all here a bunch of particles all randomly positioned on the sketch and you know I could even have you know a thousand of them you can see there's a thousand particles randomly positioned on the sketch but there's no attractors because once it gets to here the length of the attractor is a zero so what I want to do is I'm going to add function mousepressed and I've also set the attractors now to be green to draw them so I could see them right here which I just added that a second ago that you did seek this is that part out okay but what I'm going to do is add so I'm going to say a tractors actually I mean exactly what I had here this line of code but I'm going to say instead of at a random location I'm going to add the mouse location okay so let's see what happens now so there's a lot of particles and if I now click right here we should see everything's attracted to that particular spot okay so everything is coming in and zooming to that spot now let me add another one here and we should see now that everything is both attracted to both both attractors and I would expect to see something like a little bit of a figure eight almost style pattern around both of them and I can add another attractor over here and one up here and one up here and you know what might be helpful here to see actually it's for me to just for right now just for right now what I might like to do is put background and draw so we can see now these are very alpha II so I got to go back to the particle object and remove the Alpha and we can see now and we can see now the particles all being attracted to here being attracted to and and what happens when I start to add multiple attractors and even if i refresh let me try to put them in a circle and see what we get so here we can start to see a lot of interesting possibilities as these particles are attracted and they start to almost swim around and these different and if we drew trails and thought about color we would probably get interesting dynamics in terms of the kind of patterns that might be painted here in the surface now I want to add something else what I would like to do is also is think about what happens if these attractors are repulsive instead of if the particles are repelled by them rather than attracted to them so what else you to do that really quickly is just right here in that attraction function I am going to multiply the force by negative one and let's see what happens there so I'm going to add repulsive force so let's add one over here now you can see quickly everything is just going to leave the window so in that sense you know not so exciting everything is just going to leave the window what is however every other particle I click is rook so when I click first it's an attractor then when I click it's a repeller so I'm going to do that just by saying in the in this and say if I modulus two equals zero draw it as green else draw it as red so red for being a repeller so we can see now as I click I get green red green red now they're all repellers right now but the idea here is what I want to do is also change the direction of the force so this is a goofy way I should probably make again a detractor object that has a kind of weight to it but I'm just going to pass in J right here to that attraction function and I'm going to say if J modulus two does not equal zero then multiplies by negative one or if it equals one it's another way of saying that equals one then so now if I run this again if I click look we've got an error message I made a mistake J is not defined particle 934 oh I need to add that as an argument here so if I click here we can see everything is now attracted to here and then if I add this it's repelled if I add this it's repelled subtracted repelled the taxes so we can sort of see I've got it I should be more thoughtful about how I'm doing this so one thing is let's make this a little bit easier to see with the particles I'm going to make the particles have a stroke weight of 4 so you can see them more easily and let me think what if I put repulsion points around the edges and attraction points in the center look a guy lost track of what I was doing so there's lots of great suggestions in the chat what I would encourage you to do is to implement there's so many problems that I've made here so I'd encourage you to do is think about how are you adding attractors how are you adding repellers where are they going how you how are you adding the particles what are the what are the parameters of the particles how fast can they go how slow can they go what's the strength of the various forces and just see what types of dynamic systems and painting systems and patterns you could possibly generate from justice system of particles and attractors and repellers the other thing that you might do is you might have an attractor where the particle is attracted to it but once it gets a certain distance to it or I should just do this now it's repelled let's try that for a second so for example what if I go back and make them all forget about this forget about this whole i and j thing let's just make them all all attractors so to speak and then here in this attractive function if if you know what I'm going to do here just for a second I'm just a fourth magnitude equals constrain I'm going to make this fog just up that max squared even though it's like an ice deficiency it kind of confused me because I'm used to thinking distance not in terms of like squared so this I think will be a little bit easier to sort of tune it but what I want to do is say if that distance value is less than if the distance value if it was within like a hundred pixels or maybe with if it's within let's say within 20 pixels then force multiplied by negative one so now I have a particle that's always attracted but when it gets close to the attractor it actually is repelled and so let's see here looks V squared is not defined D times D and so now you can see whoa did I do that okay let's think about this I might have done this in a weird place so oh I had some times negative one there sorry so look at that they get kind of like stumped right that's kind of interesting that's pretty interesting so what happens now if I add multiple ones though air whoa whoa this is kind of crazy I don't have a lot of variation now they're really like except that that um that magnitude I think is so strong yeah this is more what I expected there we go so this is kind of what I was looking for it's kind of an interesting system I think to think about that they're repelled but and and now what might be more interesting also is if I what I'm going to do now is instead of adding the particles in set up I'm just going to add particles here we go this is what I meant to do all on I'm going to add particles one at a time in draw and what I'm going to do is also I think in the particles a lifespan and have them eventually have them eventually time I there's too many possibilities here I've lost my mind so I think I'm going to leave it at this oops a chat pointed out a really big error actually that I just had which is that in my particle object I'm supposed to divide by distance squared but this is actually G divided by D times the order of operations is off there's really neat parentheses around here which is going to massively weak in that force and you can see now that force is much much weaker but it's still kind of the same the same idea here and then if I put another one it's going to be attracted or repelled so one thing I might do is kind of like amusingly is like I could change and make the repulsion force much much stronger which you can see it's attracted but when it gets within a certain distance that repulsion force is really really strong and then I could also sort of think about tuning the attraction force and figure out and some of the chat asked by the way shouldn't that constrain between zero it could be but I definitely don't ever want to divide by zero so if I were really trying to be accurate about this I would constrain it by like point zero zero zero one but I'm trying to just kind of tune it in a way that the force is yeah there you go so now I made that repulsion force really really strong and you can see I don't know it's the point of what I'm doing is but these things are attracted to all these different attraction spots but they can't get close to them and so you can see and if I add another one right here then I'm kind of creating these little pockets that's kind of a nice little behavior and you can sort of see what I've got here I've got all this stuff trying to get attractive but then being repelled when it's closed so I've gone off a little bit of the deep end here with this kind of attraction repulsion thing and I think what would probably be more interesting or what I again I said just a bunch of times and now this videos being edited I don't know where my head is at any but let me wrap this up so the tools that you have now from this example are the idea of calculation calculating a force between two two positions so the attractors are fixed but those could be particles that move all particles could be attracted or repelled from all other particles so that's something you could add to this you could think about drawing trails with alpha and picking color where you start the particles the strength of the attractions how you constrain that distance whether it's stronger when it's closed or whether it's farther so every parameter every variable everything that defines how these particles move could be something that you could tweak and so I hope that you create some types of simulations or paintings or algorithmic you know what if you took what you had an image and you kind of put a traction point all along the contours of the image and then fill that in as the particle and then has those particles be the colors of the image could you paint a picture that way because you make an installation where the attraction particles are where the user's hand is there's so many possibilities here so I hope you make something with this and discover something interesting and make it and share it with me in the comments or on Twitter at Schiffman if you have any complaints please send them I don't know where you should send them sent them to me I suppose that I can understand you having a lot of complaints after watching this particular video but I'll see you in another episode of the coding train