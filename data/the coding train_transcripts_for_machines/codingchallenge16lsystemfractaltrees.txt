hello welcome to another coding challenge this is a coding challenge all about L systems I'm going to make this beautiful tree I think it's a little beautiful but you will hopefully make an even more beautiful one after watching this video but I'm going to make this tree appear in the browser using HTML using JavaScript um and so what do I want to do here I want to Define what an L system is look at how the algorithm works and then build the code for rendering an L system from scratch um the um okay so what is an L system L the L stands for Linden Meer for ared uh Linden a Hungarian botanist uh who developed this algorithm for modeling cellular growth so um how what is what uh you can read more about L systems I got the sort of Wikipedia page here as a reference but what I'm going to do is just kind of Define for you the guts of it the sort of like the the actual terminology associated with an L system so an L system is actually all text based we're going to use it to generate Graphics but at its core it's just text based and it involves a few things it involves uh uh an alphabet for example my alphabet might be the letters A or B these are also sometimes known as variables it involves an axiom meaning what is the beginning of our L system our L system begins with an axiom for example an axiom could be a and then it involves a set of rules meaning something like u a becomes a B and B well hold on let me look I have actually the one that I want to start with which is sort of uh uh a becomes a and b becomes a okay so look at that I just wanted to use Since U and B becomes a I don't know if I don't know if the camera switched while I was doing that but so it has a set of rules so what does this mean so an L system is a recursive uh uh way of generating sentences over and over again using string replacement so this is the set of elements in the L system and we start with the Axiom a and this is Generation zero and in generation one we apply these rules to it a becomes AB a becomes ab and now we do this again I have generation two ab a becomes AB B becomes a and generation three a becomes I'll stop doing this eventually a becomes a b becomes a and a becomes a hopefully I did this right I you know manually as a human being kind of doing this string replacement I could easily get it wrong or it could take me forever be very tedious this is the kind of thing a computer is perfectly beautifully well suited to do and what what we have here is with this type of system these kind of recursive fractal like structures appear here in the text the resulting text itself so it's up to you to say aha I have this system I've designed it I have an alphabet I have an axium I have a set of rules I should write rules here and now I've generated these sentences what do I do with the sentence it could be you read it as poetry a b a a or perhaps you use it to be a song a a a b or with rhythm or you type to Graphics you know this means a DOT this means a square and you draw a pattern on the screen so you could imagine there's a lot of ways you could interpret the L system and what I'm going to do is first program just this string replacement structure and then I'm going to show you how you can use a certain kind of alphabet to indicate things like draw a line forward turn right turn left and create all sorts of uh patterns in particular plantlike patterns on the screen okay here we go coming back over here so we've got this down now um and let's start writing the code for it so um this is what I want this is the one I want to do first and I called it variables here so I'm going to go uh to uh I've got a uh a JavaScript I've got a Javascript file here I'm working in the browser using the p5js JavaScript framework and I'm going to just put this here at the top and comment it out so what do I want to do I want to start with uh an axiom and I'm gonna say that Axiom is a now I also need to have some rules so what would be a good way of creating a rule um in JavaScript the way I could do that is I could make it a JavaScript object like I could say a whenever I see a it becomes ab and I could say that's rule one and then I could say rule two is B becom a so now again this is a highly manual way of doing this and a and b are my own madeup things uh and oh you know it's a little bit confusing that I did that because the alphabet so maybe I should I just um it's fine uh uh I'll use it and once I get to the next example it'll it'll be a little less weird looking but the point is a becomes B so I'm looking for a and whenever I see a I substitute it with B so now let's just I'm going to write a function and call it generate and what I'm going to do is in a setup I'm going to say I'm going to say no canvas and I'm going to use the pii and I don't need draw right now I'm going to use the pii function called create P which creates a paragraph element in the page pause back okay so I'm using Create p and I want to say create P Axiom and I'm going to run this now in the browser over here and we can see uh there we go I have the letter A appearing so the the my first Axiom has appeared so now what I need to do in generate is what I want to say is I need to look at every letter in the current sentence and use and substitute using the rules so I'm going to say four uh into I equal 0 I is less than axium length i++ and you know I want to have a new variable and I'm going to call it sentence and sentence is going to start with the axm so I'm going to say sentence. length i++ then I'm going to say the current Uh current character equals sentence. carti so what I'm doing is I'm looking at this is a something you can do with strings in JavaScript I can look at each character one by one and pull it out and I can say here if current equals rule 1.a then and now what I what do I also need uh I need uh next I need next sentence which is an empty string so what I need to do is build up the next sentence if current equals the a part of a rule then next sentence should get B so if it equals a substitute B in else if current equals rule 1 B next sentence plus equal rule oh sorry rule two a so right if it matches a from rule one substitute in B from rule one if it matches a from rule two substitute in B from rule two otherwise just keep it so there are cases where you have a character and it doesn't match any of the rules in that case you just keep that same character so keep current in so if current is if current is a if rule one's a put in rule one's B if current is Rule Two's A put in rule two's B if it's not any of the rules just keep current and then at the end of this the sentence should be now then the actual current sentence is now the next sentence so I'm going to uh I'm going to then I'm going to say create P sentence so now uh and then so when do I generate so let's make a button uh VAR button equals create button uh generate so create button is a function that's in the P5 Dom library and I can attach an event to it uh and that event is generate so I want whenever I press the mouse on that button I want to call that generate function just want to go something I remove some of this unnecessary styling uh and now I'm going to refresh this page oops so sketch. JS Line2 I have some sort of error oh I used int it should be VAR and I'm got okay so now you can see here I have this generate button and I have the axium there and I see AB ABA ABA ab and you can see I hopefully this is right I'm going to generate a bunch of times and you can see I'm generating um sentence after sentence here so uh so this is the idea so you know I could do this forever and ever and ever I'm sort of under I'm sort of curious why it's not like word wrapping but um I'm sure that's just some sort of CSS styling that I could fix to make it uh wrap to the next line or whatever anyway let's not worry about that um so you see that this is the idea that works all I need to do is create an algorithm for generating a um for starting with an axiom having a set of rules and iterating and doing string replacement now I I I did some kind of sloppy things with that just to sort of like make it work it would make much more sense for this to be an array and for me to say something like rules index zero equals this and so I just want to and rules index one so it makes much more sense for me to have the rules be in an array because there's no reason for me to be be checking both of those as separate else if statements when I could really just say for I equals 0 I is less than rules. length i++ and I can't use I because I already used I so this has to be J so what I want to do is instead of checking each rule individually because what if a l system I have eventually has like 10 different rules this will become a mess so in that sense I can say if current equals whichever rules index J do a then next sentence should equal uh uh rules index J.B and then what I can do um is I can put a break here so I can once I can sort of get out of the loop as soon as it f because more than one rule can't be true so I can get out of that and then what I need to do though however is I need to figure out how way of adding if none of the rules if none of the rules are met are found then keep that current character so one way I can do that is uh I can say found is false and if I found one of the rules found is true and then at the end once I've gone through all of the rules I can say if not found uh next sentence plus equals current so this would make sure so this should be identical to what I had before and if I run this we should see the same exact result now we aren't really sure one thing I should do to make sure this is really working is I should change this to have this actually become like ABC to make sure the C's continue through there and which they do so you can see this is still working so now I have a bit more of a flexible system by which I could just create an array of rules it doesn't matter how many rules it'll still work okay now we've got the basic mechanics of the L system down the next thing I need to do is do something more to draw from it so what I want to show you is I want to now use this particular system so these are the the letters of the alphabet for this L system f plus minus Open Bracket close bracket we start with f and this is the rule seems like a crazy rule but it's actually going to do something quite interesting so what I want to do is here I want to start with f and actually I only have one rule so this is actually a much simpler scenario Which F becomes this and now I should be able to run this start with f and you can see I now it's now it's wrapping but you can see this is what I get even just in the third generation this is what I get so this looks totally insane but this is actually incredible these are entire instructions for growing this elaborately complex plantlike shape you know and this is really magic and you can get the computational beauty of nature or the algorithm beauty of plants there's all these books and resources where you can find countless numbers of these kinds of L systems or you can invent your own to create these patternss but let's make this this one happen so all that we've done so far is we've only made a program that renders the text to the screen now what I need to do is I have a program that reads the text and draws to the window so how do I do that so I'm going to go back and I'm going to get rid of um no canvas and I'm going to say create canvas uh 400400 and I'm going to say uh background 51 so let's make sure there's now a canvas appearing great this is still working but now what I'm going to see is every time I hit generate I want to read this text and draw to the um draw to the screen based on it okay so so let's do that let's now write a function and I'm going to call this function Turtle so I'm calling it turtle is because I'm am going to interpret this particular text like a turtle Graphics engine what is turtle Graphics so the concept of Turtle comes from an old programming language called logo where you could write code to move a have a to instruct a turtle how to move around the screen and as the turtle is moving around the screen uh the turtle is drawing lines so you could say things like f means move forward so move forward and draw a line plus means turn right minus means turn left and what's especially sophisticated about the turtle Graphics engine that we're about to implement is that these brackets mean save where you were so you could be a turtle moving around the screen at any point you could say save and you could keep moving and then you could um then you could say restore and go back to there and move from there and that's going to create a lot of uh sophisticated possibilities so what I need now is in the code is to write a loop and just go through every single character in that sentence and I'm going to say current again equals sentence car at I so now what do I need to do if current equals F I need to draw a line 0 0 0 negative length so this is somewhat arbitrary but I'm going to uh start with the default mechanic that I want to have this be my original position and I want to start drawing a line up so from 0 0 up to there then I want to say else if current equals plus then I want to say rotate by uh I'm gonna um I'm going to try pi divided by six which I don't think is right but I'll just start with that else if current equals minus rotate Pi / 6 in the negative Direction else if current equals bracket Open Bracket push push is the function in P5 which is save the transformation state so I'm going to move around with translate and rotate and push is going to be save else if current equals close bracket I'm G to say pop so now I'm going to pop so this is everything like this is the thing I don't even have to really like think much about it like all the magic is happening in this L system itself I just have to write the instructions to know what to do but I did miss something so one of the things that I have to do is when I draw this line I then have to translate to move to the end of the line so in addition to Drawing the Line and we come back over here I need to say translate Z negative length so I need to move to the end of the line so that I could either draw the next line or rotate from there and that sort of thing so uh and then we need this to be a a variable I'm going to say length equals 100 so what I want to do now is um EXC let me fine there's so much stuff going on here what I want to do is whenever I generate I want to also call Turtle so uh I'm going to call Turtle once in setup just so the axium is drawn and then whenever I after I finish generating I want to call Turtle again okay so here we go so I don't know why I don't see the line okay so let's let's see if we can figure this out uh Turtle so first of all draw let's draw the background again and then do stroke 255 oh I know why we don't see anything so where is the line being drawn it's being drawn from 0 0 up so I need to actually at the beginning make sure 0 is positioned at the bottom of the window so the very first thing I need to do in setup before or anytime before I call turtle is I need to say translate to the middle of the screen and the bottom of the screen and uh oops there we go so now you see F the sentence is currently only F so all I have is that one line now look at this let me do generate and now we have FF plus save plus F minus F minus F restore etc etc let's look at this now it went crazily off the screen now why did that happen something weird is going on here so let's let's investigate this back after a technical problem I added in reset Matrix in this Turtle function because I'm not using the draw Loop this guarantees that I'll always start my translations and rotations over again each time I'm about to draw this L system so that fix this uh sort of temp issue just with the way that I'm doing it right now so now you'll see if I hit refresh you can see that I'm drawing F when the sentence is only f i just draw one single line forward and now when the sentence is FF plus save plus F then I'm saying go forward go forward turn right save go uh go turn right again go forward turn left go forward turn left go forward then come back then turn left so you can see we could you this is a great exercise for you to do on a Saturday afternoon outside in the park you know copy down one of these sentences and like get out graph paper and try to be the L system but you can see here now all I got to do is hit generate again and something much more complex is happening but I sort of lost the picture I don't see what's going on so a couple things are missing one is I picked a random angle to rotate by pi divided 6 which is n actually the angle meant to be used with this particular L system so let me first fix that so I'm going to go into the code and I'm going to make a variable called angle and in um in setup I'm just going to say angle equals radians uh 25 so 25 degrees I believe is the angle meant to be used with this and then here I can just say rotate instead of piid 6 by angle and negative angle so now I have a variable I could change so let's run this again I guess maybe piid piid 625 I'm losing my mind looks the same I'm really losing my mind but regardless of that the issue I'm gonna have to check that in a second the issue is that with more and more Generations I actually want to shrink the length that I'm drawing all this stuff so it would make sense here in the uh generate function to each time I generate I could say length times equals 0.5 so now you can see that's how I start then's next then's next then's next so I had it right maybe Pi ided 6 was right all along I'm going do one more generation and you can see how intricate this becomes and you know what I might like to do is just give this a tiny bit of alpha so we can zoom in on it here and generate generate generate generate and so you know at a certain point it's so much for it to draw but you can see I've got this full structure beautiful structure now you know just try to imagine drawing this through some other mechanism so I encourage you to play around with this go investigate find other L systems plug them into this example see what kinds of patterns you get the other thing that you might think about is if you watched my one of my previous videos about how to turn a fractal tree into a whole set of Branch objects that you could apply physics to you can also do the same thing with this particular example and uh if people are interested at some point I could U release an example that does that or make another video that converts this into that so thanks for watching this L system video you go forth and make some L systems and let me know how it goes