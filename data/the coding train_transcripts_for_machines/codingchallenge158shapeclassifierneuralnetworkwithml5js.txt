[BLOWS TRAIN WHISTLE] Hello, and welcome to a 2020 substitute train whistle Coding Train Coding. I am so excited for you to watch this one. I just finished making it. So I'm just recording a little intro here to show you the end result, because this one might be kind of long. So you can see, ultimately, where I get to. I have a p5.js sketch that is loading a neural network, a convolutional neural network, model that I trained myself in this video with my own data to recognize shapes. It only knows about circles, squares, and triangles. But I have this document camera here live and running. You see my hand there. I just drew that circle, and it is guessing with a 75% confidence that it is a circle. Let's now see some other shapes. Here is a triangle 76%. And I can switch this over, and I can look at this square. And boy, is it confident that that's a square. I can even kind of turn it sideways. Oh, it thinks it's a circle now. So there are some flaws. And you will see why those flaws might be there as you watch this video. So what do you need before you get started? I used Processing. You can download that at Processing.org. I used p5.js you can get through Web Editor at editor.p5.js.org. And I am also working with p5.js locally on my computer, which is something you might want to check out my workflow series if that's unfamiliar to you. See you at the end of this video. I no, I won't see you at the end. I mean, I don't see you anyway. I don't know what's going on. Enjoy. Enjoy this Coding Challenge. The first step in this project is collecting a data set. I could certainly draw shapes myself and take pictures of them. But a quick way I can generate a data set for training is just generating it with code. So in this case, I'm going to use Processing, a Javabased programming environment that I use in a lot of my videos. And I have a 128 by 128 window. And I just want to put a circle in the middle of it. So I'm going to say circle, width divided by 2, height divided by 2, and with a diameter of 100. Let's see what I get. There we go. There's a generated circle. Let's make the line thickness a little bit thicker. And then let me make all sorts of properties of that circle random its position, its size, and its color even. [MUSIC PLAYING] Two things I want to change here one is I want to make sure the circle doesn't bleed off of the edges of the canvas itself. So I can adjust it's x, y position based on its size. And I want them to be darker just to make them sort of higher contrast for my training data set. Great. Generating lots of circles then I just need to save them to the hard drive. The saveFrame function will save me a bunch of png's to a folder that I'm calling Data. And then I can use these pound symbols. [LAUGHS] Is that what you call them, or am I just, like, back living in the 1970s? These hashtags simple, you can it'll autonumber them. And I just want to let's just get 100 of them. So I'm going to say a frameCount equals 100, exit. And here's all the circles that I've saved at the data set. So now I just need to do the same thing with squares and triangles. I could certainly try to use a lot more shapes, but I think I just want to get to work with three possible shapes circles, squares, triangles. I was about to just change my code, but I think I might do something a little bit fancy here and write a for loop that'll just do each of these three times. So based off of i is 0, 1, or 2, draw a circle, a rectangle, or a triangle. [MUSIC PLAYING] Something else I want to do is use translate, because I want to actually rotate them slightly, I think, the squares and the triangles, in order to have a data set where they're not all perfectly aligned vertically. [MUSIC PLAYING] So I could draw a triangle any number of ways. I could pick random points. I could draw a perfectly equilateral triangle. I just kind of arbitrarily set the points to draw a triangle. Oh, I think I drew it upside down from what I wanted it to be. Let's see what it looks like. Oh, first of all, I'm [LAUGHS] drawing them all on top of each other. So the background should be drawn with every for loop. And we could see the triangles now, but [LAUGHS] this is silly, but I'm going to make this work that I could only draw a triangle in one direction. And of course, as an exercise, when you do this if you do this yourself and maybe afterwards, I'll even try to make my data set more sophisticated. Oh, boy, I forgot something rectMode center. So the circles the squares are being drawn with the center point, so let me fix that. Also, I don't want to have circles and squares and triangles that are going all the way up to the edge, because I've got a feeling when I start drawing these shapes, I'm going to be drawing them smaller than the sort of camera view. Here's a bunch of circles, bunch of squares. Wait, where are my triangles? (LOUDLY) Where are my triangles? I forgot to include saveFrame triangle. [LAUGHS] And here are a bunch of triangles. Awesome. I've collected my data. How long did that take? Not too long, not too long I'm ready to start training the model. Now I have two projects. I have this processing sketch that generated a lot of shapes and put them in a data folder. I now have a blank, empty p5.js sketch that's just creating a canvas. And a really important thing about that sketch is that index.html is importing, also, the ml5 library at least version 0.6.0. I'll note here that I'm working in Visual Studio Code. I'm not working in the p5 Web Editor, which I normally would do. When I get to the part of me doing my own drawings and trying to classify them, I'll move them to the Web Editor. But right now, because I have a directory of 300 images, even though I could upload them to the p5 Web Editor probably, it's going to be kind of inconvenient. So I want to work with my data locally. So I'm going to develop locally, and I've got a whole workflow [LAUGHS] series of videos that kind of goes through how to do that if that's unfamiliar to you. First things first let me copy my Data folder over to my p5.js sketch. Then I'll add the preload function to load all of the images. [MUSIC PLAYING] Ultimately, I don't love what I just did here. I'm loading 300 images in preload to make sure everything is loaded before the sketch begins. If I were doing this in a different context, I might want to create a loading animation and use callbacks and asynchronous JavaScript. But this is the easiest way to get it going. Ah, but this is incorrect. i is 0, 1, 2, and the actual images, if I look at them, they start, first of all, at number 1, and they have leading 0's, always four digits. So I can use the number format function nf to deal with that. Take i always render it with four digits, no decimal places. And then I'll call that index. Oh, and I'm taking i plus 1. And let's just draw one of those images to make sure it's working. And how am I going to look at this code in the browser? I need to run a local web server. I'm using a global node module HTTP server to do that. But Visual Studio Code has Live Server plugin so many different ways you could do this. [LAUGHS] Let's take a look at it. And there we go. It looks a little pixelated. That's because, remember, the data set I collected was very lowresolution images, 128 by 128. Ultimately, to train the machine learning model in this context, I want to use lowresolution images to have less data storage, faster results. And ultimately, the detail of a highresolution circle is not super meaningful here. Just taking a peek at a square, also there we go. There's one of my squares. All right, I think we're in pretty good shape. Next step create a neural network, an ml5 neural network. Let's call it shapeClassifier. Creating the neural network is as easy as calling ml5.neuralNetwork and passing it some options. So I have to figure out what are the things I need to pass it. It's a JavaScript object with some properties set about the neural network. Probably the most important property here is the shape of the input data. What do I mean by shape? [DING] Well, in this case, for doing an image classification problem with a convolutional neural network, the dimensions of the image are fundamental to how the neural network deals with the data. What is the width of the image? What is the height? This is easy here. I know what it is. I made this data. It's 128 by 128. Also, however, there is a third dimension here. It's not that this is a 3D image. But each image, each pixel of an image, has multiple numbers associated with it a red value, a green value, a blue value, and an alpha value so the channels of the image. And I probably could do this whole project right here with just one channel grayscale. And certainly the fourth channel, alpha, is irrelevant, because the alpha value is 255 for every single one of my pixels. But just because the data is being loaded in this way, I'm going to leave it at 4 and hope to get this to work. And if you want to, as an exercise, make this more efficient or do it in a different way, I encourage you to do so. I also need to specify the task. In most of my ml5 tutorials, I just do the tasks classification or regression. This is a special case, where I want ml5 to configure a convolutional neural network for me. So I'm going to indicate image classification. And I could be really detailed about how I configure that convolutional neural network. And my convolutional neural network videos kind of go through that a bit more. But I'm just going to use the default ml5 settings and see if they work OK. Finally, I want to set debug to true. That will trigger an automatic visualization of the loss function as its training. What is the loss function? I will get to that once we see it graphed on screen. I almost thought it was done, right? configured my neural network. Here's the shape of the data. Here's the task I want to do. And make sure you show me how it's going while you're running. But I have to add the data. I have to tell the neural network, this is the data, you should be working with when you run your training process. Luckily for me, there's a function in ml5 called add data. And what do I add? I add the image and its associated label. Let's look at how that works. [MUSIC PLAYING] The training data set should include the input associated with its target, the image associated with its label. So I can configure an object with an image property that is this actual circle image. ml5 knows about p5 images. I could ml5 can work with raw pixel data, but this is super convenient here, that I can just give it the p5 image I loaded. And then the label, of course, is a string. I wanted to show it to you written out like this just to be clear about exactly what's going on. But I can kind of reduce this. There's no reason why I need separate variables. I can just put these JavaScript objects right into the add data function itself. And once I've done that, what's super convenient is, because I'm having squares and triangles also, I can just duplicate that. (DRAMATIC VOICE) Oh, triangle, why do you have to have a different number of characters than circles and squares? Another really important step here is to call normalized data. This is one of the ultimate conveniences of working with the ml5 library. It will analyze your data, look at the minimums and maximum ranges of pixel values, and then normalize all the inputs to numbers between 0 and 1. Certainly we could do this manually. I've demonstrated that in other videos. But it's a nice convenience that ml5 offers to you. Call normalized data, and then guess what? Now we really are done with training code. Look, this is all the code for training an image classification model in ml5 besides writing shapeClassifier.train. Now, the train function does choochoo [LAUGHS] require two arguments. Well, what a nice confluence of events The Coding Train trains the model. The arguments that I need are any training options. So there's lots of properties and parameters I can set during training. Those are covered in more detail in other ml5 videos that I have. In this case, the only one I really want to specify is epochs. And I'm going to say 50. 50 means I want to send all of the data all 300 images in through the neural network 50 times. And you might be wondering, does the order of the data as I'm adding it matter? In fact, it does. But luckily for us, ml5 does a lot of smart things behind the scenes. And it's going to shuffle the order of the data. You want the data to be in random order, in different order, every training pass. And then I need a callback to let me know when it's done, so I'll say finishedTraining. And let me write that function. And all I'm going to do is console.log that it's finished. For testing purposes, [LAUGHS] I think it would be advisable for me to actually run this once with many fewer images. So I'm want to switch this 100 to 10 just have it load 10 30 images in total. I don't know if we'll get meaningful results with just 30 images, but let's see. I hit Refresh. Why, why, why is nothing happening? Oh, failed to load no. Finished training stop one second. I just lost like a half an hour of my life. [LAUGHS] I can't even tell you what just happened. But this debug true the true shouldn't be in quotes. I need to actually give it the Boolean value true itself. In truth, I think this is a bug in ml5, and this can be fixed, that ml5 will work whether you give true as a string or just the Boolean value true. But just [LAUGHS] it wasn't working. So now that I've found that and fixed that, I am now going to go back and refresh this page and see if it will train with just those 30 images. And there we go. So here I see the configuration of the convolutional neural network. A lot of these terms might be sort of scary and unfamiliar to you. You can go back to my convolutional neural network video series to learn more. And then look at this. Over 50 epochs were getting this loss, a measure of the error during the training process. How close is the model matching, fitting that training data all the way down to 0? So this is a very good sign, that this graph is going down. I'm going to add one more line of code, because what I want to do when it finishes training is I also want to save the model so that I don't have to run the training process again. I'm going to freeze that model. I'm going to put it back to 100 images and run that training process again and maybe take a break and do some meditative deep breathing for a little while. Notice how long it takes even to load all 300 of those images not a very elegant loading progress bar that I've got going on here. I'll let this run. I'll be back in a few minutes. [MUSIC PLAYING] So this is the result I'm getting, which is a little bit odd. First of all, it's running incredibly slow. And oh, now that loss is going down. I'm feeling like I think I might have pushed it a little bit too much with my 128 by 128 images. And I think maybe reducing the resolution to 64 by 64 will give me the same accuracy in my ultimate results but will allow me to sort of train the model much faster. But I'm not exactly sure why it's having such difficulty learning here. And the loss is kind of fluctuating quite a bit. And at 50 epochs, we didn't really get all the way down to the bottom sort of threshold that I'm used to seeing. I'm going to return back to my processing code. I'm going to lower the resolution to 64 by 64. In a way, I want to make the stroke weight thicker. But I think, actually, by lowering the resolution, the stroke weight itself will be relatively thicker. And I think that will make the images a bit more bold and more clear to the neural network, perhaps. And then, also, I don't want them to bleed off the edge. So I am going to make r a random value between 8 and 24. Let's run this. I'm going to delete my old data. I'm going to copy the new data in, go back to my p5 code, change the inputs to 64 by 64. And this is reducing the number of pixels by 4. It's exponential here. Looking through everything, and let me try running it again. At a minimum, it should train much faster now, with the data size being much smaller. And looks like the loss is going down. I'm going to go take a little break and come back in a minute. Ah. So I don't know really if I just got kind of unlucky with that initial data set, but certainly having it run faster would allow me to experiment a bit more. And the ultimate goal of what I'm doing here is not to train the perfect shapeClassifier but to show you the steps and tools along the way for you to experiment with different kinds of data and different ways of doing this. Great. So my model now, because I had the save function, has saved to the Downloads folder of the the default Downloads folder of the browser. Looking at the Downloads folder, you'll see there's lots of model files, because I'm doing this constantly in lots of different experiments. But I think the most recent ones at 1034 am are the ones that I want. Let me grab that. I'm just going to go back to my shapeClassifier I'm going to make a folder called model. I'm going to paste it in here. And then I'm going to rename these without the numbering. What is in those files? All of the information around the architecture of the neural network and the weights of the neural network. And this is topics that I've covered in much more detail in my ml5 series. So if I wanted to now, I could start to add the prediction code to this example I could even have training and prediction all happening in the same web application. But I want to separate those two things. I want to take the frozen saved model that's now completely divorced from the data, and I want to upload that to a p5 Web Editor sketch. The nice thing about this is I could ultimately keep my train doesn't matter so much in this case, but I can keep my training data private. There's ultimately no way to reverseengineer the training data from the trained neural network itself. So that's something that I could be sort of happy about if I was worried about that data uploading to a public web application. So here I am in the p5 Web Editor. First thing I want to do is upload the model. Create a folder called Model Upload File. Grab these three files, drag them in. I also want to make sure that I'm importing the ml5 library itself. So I can just copy that from where I did it before. I need this CDN URL. Paste it in right here. Create the Shape Classifier. I can actually grab the exact same code I had before to initialize the Shape Classifier variable. I don't need debug to be true anymore. I'm not doing any training here. And I also don't need to add any data or call the train function. I could just load the pretrained model. Now, remember the model data itself is saved in three separate files. And I need to give ml5 the names of all of those files. I can never remember [LAUGHS] what the code is for doing this. The easiest place to find out is right in the ml5 documentation under Neural Network, under Loading a pretrained Model. And here we go model details, model, metadata, weights. The file names happen to be the same, so I could just put model details right in here. And then I also need a variable model not a variable, sorry a callback, a variable to define the callback, model loaded for when the model has been loaded. So let's run this, which all it's doing is loading the model. See if I get it to say model loaded in the console with no errors. Excellent. Now I want to pass it in image. So just as a first test, let me draw a shape into the p5 canvas. This is not one that was in the training data set. I'm going to draw my own, and then give it to the neural network and see what results I get back. (DRAMATIC VOICE) And I'm going to have to say my little model prediction prayer and hope that it works. [MUSIC PLAYING] So I've hardcoded [LAUGHS] in a circle right there in the center. This should be a pretty reasonable one for me to get the correct result from the neural network if the training worked well. I'm going to ask it for a prediction when I click the mouse. So I'll say shapeClassifier, classify. And then what I'm giving it now is the canvas. And then I'm going to have another callback for when it's got results back for its classification. Oh, and by the way, canvas it's not going to know what canvas is. I need to make canvas a variable and save createCanvas in that variable that's a reference to the canvas that I'm drawing that I can pass to ml5. I've got a resolution issue here. Oh, and by the way, this should be 64, 64. I accidentally somehow didn't have the right code when I copied it over. But I remember now that the training data was 64 by 64. It's got to match here. [MUSIC PLAYING] So this is some standard boilerplate for the results callback. If there was an error, console.log that error and then jump out of here. Otherwise, let's just look at what the results are. Now, I think I'm going to get an error, because my canvas resolution does not match what the neural network's expecting. So let's just see what that looks like. And I'll click the mouse. Great. Ah. Based on the provided shape, 1, 64, 64, the tensor should have blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah. Look at this. It's an actual confusing, weird, esoteric, machine learning error message that we can understand, [LAUGHS] because you're going to get these kind of error messages all the time. And sometimes you're going to be like, why? What's going on? But underneath the hood, the tensorflow.js library which drives ml5 is looking for one image, which is 64 by 64 by 4. And it got something else with 640,000 data points in it. And that's just wrong. So [LAUGHS] I need to get this image into a low resolution. The quickest way for me to do this, to be honest, just for testing purposes, would be for me to change this to 64 by 64, [LAUGHS] if you will indulge me for a second. I'll make the stroke weight a little bit less and, obviously, not as large. Oh, wait. Oh, nope. Also, [LAUGHS] it's drawn in the wrong place. (HIGHPITCHED VOICE) There's my tiny little circle. Let's see what the model says. We got some results back. Drum roll, please. [DRUM ROLL] Ha! It knew it's a circle 99%. That's super thrilling. Let's just try, really quickly, a rectangle. Drum roll, please. [DRUM ROLL] Ah, square 98% square. Oh, it is so confident. Thank you, neural network friend. So this is working with data that matches precisely the training data set. Let me just briefly show you how you can resize an image, because what if you wanted to create something where I'm actually I could create something where I'm drawing with the mouse. Ooh, let's do that. We're going to draw with the mouse, and then I'm going to draw with pen and paper. We'll see if it works for one or both of them. I'm going to go back to 400 by 400. And when I click the mouse, I'm going to create a separate graphics object. I'll call it input. That's 64 by 64. And then, I believe, in p5, there's a way for me to copy one image to another and reduce its resolution something like input.copy(canvas) something like that. Let's look at the p5 reference. Right here, under loading and displaying pixels, there's a copy function. Oh, I wonder if I can use this get function, actually. But let's look at copy copies a region of the canvas to another region of the canvas. So it's really but it could also copy from a source image. And I think I can call this function on a p5 image itself, or in this case, not a p5 image oh, do I want a p5 image or a p5 graphics object. I don't actually know. Let me keep going with this. But certainly I want a source image, and I want the source xy with height to the destination xy with height. Let's see if I can make this work. So I want to copy from the canvas 0, 0, 400, 400 to 0, 0, 64, 64. And actually, I'm just not going to bother with trying to run the classification. Let me just see, then, if I draw that input image. Let's see if that works. Oh, and let me put in the draw function now. If mouse is pressed, line from the mouse to the previous mouse. So I could draw something in the canvas. So this is whoa! Whaa what is going on? mouseX, mouseX we need a Y. We don't need background here. I need a stroke weight that's much thicker. And by the way, [LAUGHS] this is bad. Let's make this keyPressed now, [LAUGHS] because I have to draw the mouse. I have to press the mouse to render the drawing at lower resolution. Ahh. Put background at 255 in setup, try this again. So this is me drawing. Ultimately, I'm going to try to draw a square and have it recognize it. Let's press a key. Oh, look at that. It worked. There's my 64 by 64, so that worked. Ah, it's so easy. Ah, beautiful. Oh, [KISS SOUND]. I love this. OK, so now let's make this stroke weight 8. So I make it much thicker. And I don't need to, when I press the key, classify the image. I want to do this always. Let's make this a function called classifyImage. And I'm going to start doing that as soon as the model is loaded classifyImage. And once I get some results, I'm going to call classifyImage again. And then I don't want to console.log the results. I want to see the results in the actual web page. So very quickly, let me change the background of the web page. This is, like, the actual only thing I know how to do in CSS. And let's make it a little bit gray just so I can see the canvas more clearly. OK, great. And then we can see it's logging those results. But I don't want to log them. I want to see the results. I'll make a div to show the results. I'll start it with it saying loading model. And then the label is results index 0 dot label. And the confidence is results index 0 dot confidence. One of these days, I'll use something called object destructuring. I got to make a video to show you how to do that. But I like to write it in this longhand way. And then let's just put oh, and it's not labels. I want it to be the label. Now, I want to see the label and then also the confidence. And I'm going to do some stuff to this confidence. I'm going to just make sure it only shows two digits, number format it, and also multiply it by 100 so it's kind of like a percentage. I'm going to show it like a percentage. I think that's right. Let's run it. Loading model error, cannot read property HTML of undefined resultsDiv. results that should say resultsDiv. Another thing, actually, is I don't need to make a new graphics object every single time. This could be a global variable. Just move that stuff around, and here we go. Let's try this now. Loading model square. It's a square. Let's draw a square and see if we can make it more confident. Square. Now, I don't need to see the little tiny image. That's useful here. But I don't need to see that, so I can take that out. OK, oh, and let me make that much bigger [LAUGHS] so you can actually see it, also. I do know a tiny bit more CSS. I think this will do the trick. Let's make it really big. OK, square. All right, let's draw a circle. Oh look at that. [KISS SOUND] It's so beautiful. Oh, I don't have a clear. I need a clear button. I could just run it again. [LAUGHS] Triangle. I need a clear button. [MUSIC PLAYING] So I'm just putting a tiny little anonymous function as the callback for mouse press would draw a background. Let's run this again. And circle, square [LAUGHS] it's a triangle. (DRAMATIC VOICE) Oh, I love this. It makes me so happy that it works. Yes! [LAUGHS] All right, now, for the grand finale, I will, instead of drawing the shapes with the mouse, I will now take this document camera of course, any web camera will do. But I will take this document camera pointed at my notepad and attempt to draw on my notepad with this pen and see if it will recognize the shapes. So give me a minute I set this up. I'm going to duplicate this, because I want to save this as an example. The only thing I need to change well, there's probably a bunch of things to change, but let's create a video. Video equals createCapture video. Then I'm going to actually just resize it to 64 by 64. I think that will make my life easier. The Clear button is no longer relevant, so I can comment that out. classifyImage I don't need to do this copying. I can just classify the video itself. In the draw function, I will just see image, video 0, 0. And I think that's all I need to change to go from the drawing in the canvas to the video. Let's see. What did I miss? Well, first of all, it is not using my document camera right now. (HIGHPITCHED VOICE) Hello, how are you? Let me also stretch out the video to the canvas so we can see. And by the way, the answer to life's mystery am I a circle or a triangle? I don't know. Do I have a tri I have a triangular head. I'm very triangular. [LAUGHS] Let me try to switch this to the document camera. And I think a way to do that is I can just click up here and go to [HEAVY SIGH] come on, come on Manage, switch it to this camera, and run it again. And great I've got my document camera. Here we go, everybody. Drum roll, please. [DRUM ROLL] Square. It's a circle. Eh, circle like, not too confident, but I did get circle. All right, let's try a triangle. Square come on. So my suspicion here is that I might need a thicker marker. Let's try making it a little thicker. There we go. Look at that triangle, 91%. So I think the fact I probably should, in my data set, train with variable stroke weights. If I redid this whole thing and trained it with variable stroke rate weights, I might get a better result. But we can see here triangle, 90%, square, 97%. Now it's time. I'm going to attempt to draw a circle. Tada! [TRIUMPHANT MUSIC PLAYING] OK, I think this Coding Challenge is complete. I have now shown you all the steps for collecting a data set of shapes generated from processing, loading all of those image files into a p5.js sketch with ml5 and training a convolutional neural network with that data set. Then we have looked at how I can get images from a webcam and show those to a p5.js sketch that has that model loaded and recognize the shape. Imagine the possibilities of what you could do. I hope you do something totally different and surprise me with what kind of data you use, what kind of interaction you use, and you make your own wonderful experiment here. Now, what is next? Something that I'd really like to do is, what if I were to draw a cat? Now, that cat is most definitely a triangular cat. So I feel like that's a very accurate prediction. But what if I wanted to say cat? Could I collect a data set of lots of drawings and recognize them? So you might have heard of the Google Quick, Draw data set. It's definitely a data set I've referred to in many previous videos. I could do a whole series now where I could download that data set and try to train an ml5 convolutional neural network model against it. Luckily for us, Yining Shi, one of the ml5 contributors, already did this. And in ml5 you can load a pretrained model called doodleNet. And so in the next video, which should hopefully be a very short one, [LAUGHS] I'm just going to show you, basically, this exact same sketch. But I'm going to load Yining Shi's doodleNet model and see if it can how it recognizes my drawings that are not just of simple shapes like squares circles and triangles. Thanks for watching this video. I hope you enjoyed it. I hope you are able to learn something and make something creative with it. And I can't wait to see you what happens in future videos and all that jazz and jazz hands is my official new signoff. No? That's not going to work? What do you think about that? I don't know. Goodbye. [KISS SOUND] [MUSIC PLAYING]