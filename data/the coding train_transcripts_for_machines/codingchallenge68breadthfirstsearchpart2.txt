okay so I'm back here for part two of this breath first search algorithm thingy so um you know somebody in the chat had asked um this is really hard to follow you know could you visualize this it's a very very good point and unfortunately the way that I'm building this example right now um I'm not going to sort of build in a lot of graphics features that's a great exercise for you to do and I do have other examples that do have those features that you could that I'll link to you could look at but I think that we could at the very least I could draw it for you what this is looking like so um without using actual movie names or actor names I'm just going to I'm going to say like movie one movie Two movie three I'm going to have you know actor one actor two I should probably use real names to make this make more sense actor three actor four actor five so maybe these actors were in this movie uh these actors were in this movie uh oops the actors don't have connections to each other and this right so the actors just it's only in this particular example the actors only have connections to each other through movies and somebody else in the chat mentioned you should distinguish between movie and actor nodes and that that could be an interesting thing to work with and you know depending on how you're visualizing it you probably would want to do that for for just finding the shortest path I don't actually need to do that so let's say that actor one uh act let's say actor four is actually Kevin Bacon so what the depth sorry not death breath first search algorithm looks to do is I want to pick any actor and find the shortest route to get to Kevin Bacon and this we can see here is actor two was in movie two with Kevin Bacon actor three was in movie two with Kevin Bacon or this is the same distance actor 5 was in movie three with Kevin Bacon and actor one was in movie one with actor 3 who was in movie two with Kevin Bacon so this there's not a lot of possibilities here but you could imagine a much more complex interconnected Network and if you think about actors and all the movies they've been in in full cast list it's massive okay so now let's come back here okay so now I need to do is actually implement the breath first search algorithm now before I do that I need to I need to um I need to add a beginning and end so I need somewhere to start and somewhere I want to finish so always the graph always wants to end I'm going to just I'm GNA have a graph have this. end and um this. start so I'm going to give the graph object an end in a start node um and what I'm going to do is uh in after I've added all the data I mean I'm just going to hardcode this in which is a little bit silly um and I'm going to say uh graph. set and I'll just do it this way set end Kevin Bacon and graph. set start uh let's just pick some actor from whoops let's pick some actor from that list wasn't Mickey roor in that list let's see if I get this right uh so Mickey roor to Kevin Bacon okay uh so now I'm G to go and in grab I need to add those functions set start set start equals function and I'm going to say you know actor and then I'm going to say set end and then this do start equals this. graph now if the actor doesn't exist we're going to have a problem but I'm just going to uh assume that actor does exist so I want to pull I need to get the node um I need I mean maybe I could just keep it as a string but I want to get the node the particular node that is the start associated with that actor and the particular node that is the end associated with that actor okay we've got that should have put that in the last video but we've got that now we are ready for breath first search so I'm going to use I'm just going to pull I I reference before this book which is a really great visual explanation uh grocking algorithms of this particular algorithm but I'm just going to try to write the algorithm from um the Wikipedia page but you know I could also just explain it to you so what we're going to do if we're starting with an actor is we're just going to say breath first search means check every single edge connected to this actor is that Kevin Bacon no is that Kevin Bacon no is that Kevin Bacon nope so all of these that aren't Kevin Bacon should get added to something called a q a q is a kind of data structure that's first in first out so it's like lining up to buy tickets if you got in line first you get to buy the first ticket so if this is not Kevin Bacon it gets added to the Q then M2 is not Kevin Bacon it gets added to the Q then M3 is not Kevin Bacon it gets added to the Q now when I'm done checking all those edges I go to the Q and take the first thing off which is M1 and check all its edges well this I don't have to check that anymore because it's been checked so I got to Mark things checked when I check them and then I got to check its edges nope so that's not it so this goes the Q now this is next uh A1 actually then gets added to the Q as well uh then M2 I'm going to check all his edges that's not Kevin Bacon it's been checked it's been checked oh that's Kevin Bacon I'm done so now I'm done and all the while I was doing this by the way I was keeping track that M2 came from uh actor 3 and then Kevin Bacon came from actor 4 so that I will then be able to back up and create a list a path of those nodes so the idea is check everything near nearest and add that to a que and when you're done checking everything nearest just keep pulling from the queue to check what's nearest to that and keep going until you find Kevin Bacon okay so hopefully that helps you understand it a little bit and now we're g to now okay so empty sets the way that this is described as Wikipedia on Wikipedia is to keep a separate list or set of things that have already been searched but I'm going to do this a little bit differently um in my node object I have a Boolean to keep track of whether it's been searched or not so I can just flag it when it's been searched I don't need a separate data structure for that but I knew do need a q now here's the thing I could actually like Implement a Q and have like in a fancy way but it's this I'm in JavaScript it's late I'm tired I'm just going to use an array because an array is something I can add to and I can pull off from the beginning so what I'm going to do is I'm going to call it a q I'm going to say right down here VAR Q equals an array okay VAR Q equals an array and then what I'm going to do is let's just keep following this algorithm uh okay so the root we got to start with the root so the root is the start so um VAR start this is a little silly that this is kind of redundant but graph. get so I should have this return the value VAR start VAR end so that way I can have a reference to it out here so I'm going to go to the graph and have it also return this. start so I can have the node return this. end and now what I'm going to do is let's now I've got the start let's look back at the algorithm the starts parent is already null add root to S so Roots now going to be searched start. searched equals true that's the first thing so I don't need to add it to the set I'm just going to flag it as searched oh then I need to add it to the q q. push the start so uh now I'm adding it to the Q okay what else do I need to do now I'm going to keep going as long as the Q has stuff to look at now it is possible that there is no connection so you saw that in my in the quick demonstration in the previous video there could be Infinity there's no connection but as long as Q is not empty which I could say is while q. length is greater than zero sure there's a more elegant way to say that DQ which means get the first thing off the Q I think in JavaScript that is uh let just call this current um equals a q. shift I think it's shift is that right hopefully that's right somebody correct me if that's wrong um okay now if current is the goal we're done okay if current equals n uh console console.log found uh and then I'm going to say current. value so just to make sure this works I'm going to set temporarily the start also to Kevin Bacon because now when I run it it should set it to search put it in the queue get the first thing off the que and check to see if it's the end I don't know what this is here okay so let's run that found Kevin Bacon so things are working if the start and the end are equal we're good what's next I want to check uh if it's not I want to check all of the edges so let's go through and say um and so I probably want to say break here too break is a way of getting out of the loop once you're done so I want to say uh VAR edges equals current. edges then I want to Loop through all of the edges right I want to check them all and I want to say first of all I need to check was edges so let's um let's call this like neighbor equals edges index I so if neighbor. searched already skip it skip so maybe I go and say if it's not been searched what does it say here if it's not in s means it's not searched now it's being searched so I'm going to say neighbor because I'm searching it now do searched equals true I'm checking it then I also want to set its parent like where did I just come from neighbor. parent equals current so where did it just come from and then I want to add it to the Q on Q so what's that q. push push adds it to the end neighbor so we can see how this algorithm is working it's really very simple it seems so comp such a fancy name but we're just saying start with the beginning look at everything next to it did you find it nope look at everything next to that did you find it nope look at everything next to that did you find it nope and all the while make sure you don't double check anything you've already checked before that's really all that's going on here okay now let's see um what am I missing what else nothing hm let's run this so let's let's run this uh here we go hey found Kevin Bacon now let's change the start to Mickey Rook now whenever I do these kind of things I often end up with an infinite Loop and the browser crashes let's see if I made a mistake somewhere uh and let's see nope found Kevin Bacon now is this really working let's look at um so let's every time we check a node let's console log it and let's say conso log. value so we checked Mickey roor who's in diner and then we checked a bunch of actors oh and found Kevin Bacon and we're done great let's use a different actor that is kind of further down here these are actors that are in movies without Uh Kevin Bacon so let's pick uh Rachel McAdams uh wow I think we might be done uh I me I'm GNA add some more stuff to this in a second but let's uh add uh set start Rachel McAdams we're not actually done because ah I copy pasted the wrong thing sorry Rachel McAdams sketch r ah why is this not working why can I not copy paste ah oh my goodness I copy pasted the file this is falling everything's falling apart heart help me Rachel McAdams and Mickey roor and LEF shriber okay Rachel M there we go okay let's do this again we can see what's going on Rachel MC in Spotlight with all these actors oh my goodness which was eay love all these act all these actors all found Kevin BAC so I can't really follow this this is why I need to now go backwards through the parents so when I'm done so let's take this is not helping us follow this but when we're done here we should be able to say I'm going to create a variable called path which is an array and I want to put the full path in that array and I'm going to say um so uh path. push uh graph. end right uh oh no end that's where we're starting end then I want to say next equals end because I want to do a loop to just go from um next equals end. parent and I want to say while while next does not equal to null I'll explain this again in a second while next does not equal to null path. push next and then next equals next. parent okay let's I think this is right right what I want to do is I want to start with the end and then go backwards go to the end's parent then that one's parent then that one's parent then that's one's parent to trace back to find that path that was found so that's what this particular algorithm is doing we start with the end then we get the parent of the end and as long as it exists put it in the path and then we get the parent of that and as long as it exists put in the path and keep doing till eventually something has no parent anymore because it's where we started so the start has no parent so now I should be able to say um and I'm going to actually uh create a Dom element I should be able to iterate over the path do I have to iterate in the bath path backwards because what's yeah the last thing is the beginning so I'm going to say path. length I mean I could do this a number of different ways minus one I goes all the way down to zero and I'm going to say uh node equals path index I then I'm going to say I'm going to say uh VAR uh text equals an empty string and I'm going to say uh text plus equals um n.v Value Plus uh like an arrow I should get the right arrow key and then I'm going to say create P text so what I want to do here is just the reason why I'm doing this instead of console logging create p is a P5 function that will create a paragraph element in the browser so I can see it written out there so let's see if this helps so we can see there we go Rachel McAdams was in Spotlight with Billy crudup who's in Eat Pray Love with Julia Roberts who's in flatliners with Kevin Bacon now I should also have something that I don't need that last Arrow um so if I is not equal to zero then also add the uh Arrow did we just correct that uh and there we go now let's just quickly while here we're almost done uh people are asking in the chat wouldn't this be a good time to talk about Big O notation definitely I got to make a video about that sometime and it'll come before this one maybe you already watched it because you're in the future okay very quickly just to make this a little bit more interesting uh let me do something I'm going to use a P5 function oh this is going to make it harder though I should really just stop I'm GNA do this anyway I'm going to say VAR dropdown equals create select um so uh what the create select function does is it makes a little drop down menu and uh there's some silly uh CSS styling here which um is causing it all to have no like margins which is unnecessary okay so it makes a little uh drop down uh but I need to put stuff in the drop down I want to have I want to be able to select any actor and see the results so now what I'm going to do is while I'm through these actors this is where I get every actor name as long as it's a new actor I'm going to say dropd down. option actor watch this very simple in P5 create a Dom element and add some options to it number of other ways you could do this I'm adding this part kind of quickly now you can see I have a little menu where I can pick other any actor now I need to be able to know when do I pick a new actor when I pick a new actor when I I pick a new actor it's an event on this Dom element so the event this is a P5 function I'm going to call changed so anytime uh I'm going to say run I'm just going to say BFS so anytime the drop down Chang just run breath first search and I'm going to now go down and take everything here that's the entire breath first search algorithm and put that in its own function fun function BFS there we go so now just to see if this works I'm going to um what we're going to do is we're going to run the page again I'm going to change the actor and it ran breath first search but it ran it with Rachel McAdams so the point is what I want is to have it run with Paul Riser so where do I um so this drop down needs to be a Global variable and the drop down needs to be a global variable I've got a lot of messy code here but someday we'll clean that up a little bit and I'm going to change the start set start to dropd down. Value so the actor's name for the start will actually come from there now let's do this again I'm going to pick Paul Riser again Paul Riser was in diner with Kevin Bacon now let's pick somebody else ah this not going to work Paul Riser it didn't work so first of all that's why didn't it work well a couple things one it's weird that it's starting with Paul Riser again I don't know what the bug is specifically but there's a major problem see this node object remember I was setting parents and searched I got to start over all the searched test to be set to false and all the parents have to be set to null so I need a function in graph which essentially is like a reset function and what I'm going to do in this reset function I knew I needed that nodes array for some reason I'm just going to go through all the nodes their edges all stay the same and I'm going to say uh nodes indexi do searched equals false and nodes indexi do searched oh no no parent equal you still with me are you with me I'm barely with myself here but it's about to be the weekend for me okay no okay here we go Steve Gutenberg Mickey roor was in diner with Kevin Bacon uh Linn Marta was in uh what did I miss oh I didn't call reset I wrote the reset function but I didn't call it oh classic horrible error here graph. reset oh my God coding coding okay here we go Steve Berg Oh Ellen Barkin oh nodes is not defined uh this dot this dot this dot it's got to be that right the this Dot Song never forget the this Dot Song never forget the this Dot Song okay Ellen Barkin was in diner with Kevin Bacon and Lin Marta was in foot loose with Kevin Bacon and Mark Ruffalo was in Spotlight with Billy cotop who was in E pray love with Julia Roberts who in flatliners with Kevin Bacon okay so this is breath first search in two videos if you watch this the whole way through that is amazing to me thank you very much # 6 degrees of Kevin Bacon breath first search algorithm whatever you know there's a lot of details about algorithms things I'm sure I've missed here you thinking about the interactivity you could visualize this so many wonderful possibilities um I am going to be done for today and and um I will uh see you in a future video sometime uh as always the code for this particular challenge is in the description as well as links to other videos and things that I've referenced if anything's missing just let me know in the comments thanks for watching