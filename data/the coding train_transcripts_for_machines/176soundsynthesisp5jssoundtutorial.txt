hello welcome to a video tutorial about sound synthesis in the browser using JavaScript using the p5js sound library now this is a uh one part of a continuing series about uh programming with sound and what I'm going to do in this particular video which is quite different from my previous four videos is instead of loading a sound from a file like some music or perhaps playing a sound effect like good rbow what I'm going to do is instead create in a way sound from nothing sound synthesis now of course I could do sound synthesis myself me me me okay I can't sing it's terrible um but this is the idea my vocal cords are vibrating and they're creating a vibration that vibration is traveling through the air uh and it's actually going into a microphone the microphone reads that vibration records it then it's coming out of the speaker of your computer which is vibrating and then traveling again through the air and eventually into your ear so this idea of a sound wave is something we need to talk about this wave that travels through the air how can we in code synthesize that wave create a sound and then control that wave to essentially play A Melody play a tune allow create an interactive piano all these types of things are possible with what I'm going to show you how to do so the first idea is really to think about a sound wave so let me um let me come over here and there are a couple key Concepts which I think are quite important so what I'm going to draw for you here is something called a sine wave now I'm sure I am not drawing this exactly correctly but if you take the sign function the sign function being a function from trigonometry where is if you have a triangle and you take s of theta it equals the opposite the length of the opposite side of the triangle divided by the hypotenuse of the triangle so you can go and look at all my trigonometry and triangle tutorials and stuff somewhere else that's not really relevant for here what's interesting is if you if you think of this angle as a value that's changing over time and we to graph that you're going to see a wave pattern like this so it's a perfect symmetrical repeating wave form a s wave and if that s wave travels through the air you're going to hear a tone now a wave has certain properties one property is amplitude so if we can look at this is like the top of the wave and this is like the bottom of the wave and you can think of that height as something called uh amplitude so the height of the wave and now the height of the wave is actually is actually a volume so the higher the wave the louder the sound the amplitude ah I mean I'm sure there's like a very fine nuanced scientific distinction between those terms but we can think of it for right now somebody will yell at me in the comments in the chat and I'll feel very embarrassed and sad and that I got everything wrong but anyway so amplitude that's the height of the wave now another key part of the wave is something called period so period and I'm going to uh like this is the amount of time or the length between of the length of a full cycle of the wave so you can see from here this top of the wave all the way here is one full cycle that just repeats over and over again how long it took for that cycle is the period um and in the case of sound we're really thinking about time and seconds how many that that wave like how long did it take for that wave form to um to wave so to speak now one divided by period one over period is a term called frequency meaning not how long for one cycle but how many cycles per second and this is actually a measurement you've probably heard uh Herz so if something is 60 hertz that's a frequency of 60 cycles per second and this is key because what we're going to do is set we're going to create a wave with code we're going to set its amplitude we're going to set its frequency as a value in hertz and then listen to it so these are the concepts what I want to do now is look at how do I in JavaScript create this waveform and control its amplitude and frequency okay let's go and do that now so coming over here uh I think I'm back over here uh and here here you are here I am I'm going to play some music for a second just to get my mind okay that's good enough uh and I'm going to minimize this I'm going to open my browser open over here and I'm going to go to this is an example I've running so I have a completely empty blank canvas I don't actually need a canvas for this example I'm just doing stuff with sound I'm going to go back to the code and I'm actually just for the sake of argument going to make the canvas a little bit smaller so it takes up less space on the page okay so what do I need to do first I need to create a sound wave so what I'm going to do is I'm going to create a variable I'm going to call it wave and uh technically the term for a wave in uh p5js Sound Library is oscillator a wave being something that oscillates much like plucking a string right you pluck a string it oscillates like a wave and it vibrates through and and and pushes that wave through the air up to your ear you hear a sound okay so what I need to do is say wave equals new P5 do oscillator so this is a new object object you might not be familiar with P5 do oscillator um this now I've created an oscillator object so this object exists it's up to me to turn it on and turn it off to set its frequency to set its amplitude to configure that oscillator so to speak uh one thing that I think is important for me to mention is that here in index. HTML um you know I I have a reference to the p5js Sound Library you can't really see it all the way there there we go um so you need to for this to work you need to make sure you have the p5.js file loaded as part of your project um so now I'm back to here the other thing I think is Worth showing you and I have it here is the reference page for P5 do illat so this is something you might want to look at on your own time and review there's actually a nice little uh example on this page but I just want to show you here are a bunch of the functions that I'm going to start to demonstrate to you start stop amplitude frequency set type connect disconnect so there's a lot of P all those things I showed you about manipulating a a a song file an MP3 file that you load and play there's similar things going on here so one thing that's really important though is this idea of set type so look at this I talked about sine waves but you could also have a triangle wave a Sawtooth wave or a square wave and I actually have an image here I was going to draw these as diagrams but I'll just use this image instead so what the waveform actually looks like uh is going to determine what the sound sounds like and and of course the world is your oyster in terms of possible ways that you might be able to do sound synthesis but P5 by default allows you to create oscillators of these four forms sine wave Square wave triangle wave and Sawtooth wave and this image uh comes from uh Wikipedia and I believe this is a Creative Commons license image I better check that but hopefully I'm uh but I'm pretty sure it's available to be used in this video and you could also use it as well anyway okay so u i I'll post a link to it in the uh description okay so so we'll try a bunch of different forms but let's just start with a sine wave so the first thing I want to do in my code is say wave. set type uh and I believe believe uh I need to pass in a string meaning a word in between quotes uh sign being sine wave the other thing I could do is set the amplitude uh oh by just saying amplitude I'm going to set it to one and then I can say wave. frequency I'm going to set some frequency let's try uh 300 whatever that might sound like and then I'm going to uh ah play it I think I need to say uh play play or start I'm not sure let's look at the reference page uh it looks like start starts the obsil and there's a there's a there's a a Nuance to this function which I think will be interesting to see so I'm going to say start so let's uh refresh this sketch can you hear that a nice tone let's go back it's very hard for me to hear it the way I have the sound configured for let me make this 400 that sounds very similar what did I do wrong uh so maybe that frequency function isn't correct uh let's look let's look back frequency uh time out back again there was an issue with the order of these operations so setting the amplitude and setting the frequency will not work unless you call those after start and it actually says that in the documentation I just didn't read that properly so what I'm going to do now is go back to the page and I'm going to refresh it you can hear that 400 and I'll mention that 400 440 the frequency of 440 is actually the musical note a can tune your vial into it now can you hear that that's the musical note a if I'm right and I'll just metion now if I make that a little bit higher if I say 1,00 you should be able to hear that that's quite a bit uh higher so let me go back to this and actually let me just turn the amplitude down to zero and there you go now you'll notice in this program because I I don't hopefully I'm not blowing anyone's ears out that um that there is I have a play pause button so while I was taking a break there for a second to figure out what was wrong I added that button let's just look at the code so very briefly there's just a button that says play and pause there's a function called toggle associated with whenever that button is pressed and then in that function I have a Boolean variable that's set to either true or false based on whether this Boolean variable playing and then in draw I'm either coloring the background pink or gray depending on whether that Boolean variable is true or not so if I if I go back here and run this again you can see playing that button toggles the background so one of the things that I want to do show you is that I can actually just take this code right here and I can put that here in uh in the toggle function and then I could actually say wave. stop here in in in the else so right now what I want to do is toggle this that oscillator on and off so I'm going to run this do you hear it I think you do wait I don't hear it I don't know why I can't hear it anymore oh the amplitude is at zero so let me turn it back to 0.5 okay now you can hear it right on and off oh I think there's like a low hum uh anyway hopefully the sound is fine uh so okay so I can toggle that sound on and off now there's a couple things one I should mention is uh you don't actually have I don't actually have to start and stop it what I could really just do is you know start it right here in setup and I could immediately set the amplitude to zero and then what I could do here is just uh and I could also set the frequency here in setup and then what I could do is just set the amplitudes so I don't need start I just want to set the amplitude to 0.5 or set the amplitude to zero so I'm going to run that again I'm turning off now one thing I'll mention is do you hear that little like clipping each time I start and stop it there's a quick clip of the sound that's because this oscillator comes in at full amplitude immediately so often with a sound like this it's a little bit advantageous to kind of fade it in very slowly and there's actually the amplitude function and I believe start and stop there is an optional second argument so if I put in like one as a second argument it's going to take one second to fade in that sound or Fade Out that sound and I could put in 0.1 or something much shorter if I want but let's take a listen to that did you hear that fade in very hard for me to hear it because it's very quiet out of my speakers but hopefully it's piping through the sort of YouTube recording system and you can actually hear it okay so hopefully you heard that distance now let's talk a little bit about uh let's do one more thing I think which would be worth doing what what I think would be worth doing is let me create a slider and I'm going to say slider equals create slider and now I need a range so the audible I believe a a reasonable sort of audible range of frequencies is between like 20 and 20,000 perhaps but I don't want to blow out your ears I'm afraid of doing anything too crazy so I'm going to have a range a frequency range between like let's just say 100 and 1200 which I think will be somewhat reasonable and I'm going to start at the musical note a 440 so I'm going to create a slider and in uh in draw what I'm going to do is I'm going to say wave uh I somebody is I usually when in the chat if someone's blasting with Emojis I know that something's wrong but I don't know what that is um so uh wave. frequency I should uh frequency uh slider. value so what I want to do is now at least tie the frequency to a slider and so first I need to play it you can hear that so you can see as I can change that frequency on the fly so this is the basic idea I can synthesize a sound as a waveform I can fade it in I can fade it out I can change its frequency I can change its amplitude and I want actually let's just briefly maybe I will'll add like triangle wave or Sawtooth wave or Square wave just to hear what some of those sound like but mainly what I want to do in the next video is talk about something called an envelope and an envelope is a way of kind of crafting around that oscillator uh sort of musical attack a fade in a fade out and that's going to make allow us to configure the oscillator in a way that might sound more like an electric piano or a particular kind of musical instrument I'm not we're not going all the way there to that and then I want to talk about what are specific frequencies of specific musical notes how do those relate to a concept called midi and how might you create a program that sort of generates a tune or allows a user to interactively play uh piano okay so um um so what I'm going to do here is Let's uh so I think I'm done but let's just uh let's just look uh before I go let's look here at um the oscillator object oh I'm in frequency uh uh oscillator object what I want to look at is uh this so the options for uh set type sign triangle soft tooth or Square so let's just try a triangle wave um and hear what that sounds like see if you can hear the difference has a kind of different quality to it and so what I recommend um that you do one thing you might think about as an exercise is can you create a whole interface an interface for changing the wave form for changing the frequency for changing the amplitude what happens if you have multiple oscillators can you harmonize so this you know there's a lot of bunch of things you could try here and I also want to remember to make sure I do something where we visualize that wave itself so where the wave is drawn on screen so I should I should make that happen at some point too okay thanks for watching the sound synthesis video I look forward to hearing your feedback in the comments and the chat and all that sort of stuff there's no there's no chat I guess actually after it's over bye hello video epilog I realized I forgot actually to remove wave do stop in here when I was showing you that you didn't need stop that you could just fade the amplitude down to zero so I'm going to actually take that out and I'm going to go back I'm going to run this again hit play hit po pause and pause is probably the wrong word it's fade in fade out and I could make the text of the button change all sorts of stuff I could make this better but at least that was a brief correction okay thanks for watching this video