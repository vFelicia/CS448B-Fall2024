hello today right now this very moment I'm going to talk about the pixel array pixel array in p5.js which is really really I'm talking about the pixel array in html5 canvas meeting there is a canvas in a browser I am programming what's going to be on the canvas in JavaScript and I want to know how do I access each individual pixel of the canvas and how do I manipulate and change the color of each individual pixel for whatever purposes my mind can imagine and this will lead to how to get live images from a camera load images from some API or from the file and manipulate the pixels of some other image from some other source so that I'll get to in the next video but right now I just want to look at how does the pixel array work so let's come over here to the whiteboard for a second and kind of discuss what's that play here so here is what I'm calling the canvas so canvas image whatever you want to think about it APICS an image on a computer is a rectangular thing which is essentially a grid of pixels so we can make sort of simplify think of a simplified low resolution one two three four five six like here this has a width of six one two three four five and a height of five so I now have an image that's six by five meaning there are 30 pixels total or six times five I hope I did the math right okay so in order to access these pick now p5 has functions called get and set and these functions are useful get or set you can pass an x and a y the numbers being starting with zero so the x values go from 0 1 2 3 4 5 or 0 1 2 3 4 and you could say get pixel 4 comma 2 which would be this pixel right over here so you can use those functions and I might in some of the examples but I want to look at a different way of accessing the pixels which is arguably going to least be the speediest and allow for the most possibilities I don't know if that's entirely true but let's just take that for now so and so what that is is what I'm referring to is something called the pixels array so behind the scenes in p5 there's a very long array with lots of numbers in it those numbers correspond to all of the colors in this canvas so the question that we have to figure out is if I want to change the color for this particular pixel how do I find where in this array to do that and so to do that we need to do undo a little bit of math because this is just a linear list one dimensional list array and but the image we'll think of as this twodimensional thing so how do we go back and forth between the two of them now this is not some unique problem it happens in any computer graphics environment but there is something different at least if you've used processing before just to take that as an example the way that the pixels work in p5.js html5 canvas is quite different than in processing that's quite similar but there's a big sort of major fundamental difference and you will see that as I go through this so let's look at this now so let's just start let me start by telling you that the pixels in the array if this is the array right I'm going to give myself a bunch of spots here the pixels start like this pixel the very first thing index 0 in the array refers to this particular pixel here but it doesn't refer to the entire pixel it just refers to the red value of that pixel some number between 0 and 255 the second element index number 1 in the array refers to the green value for that particular pixel the 3rd element or index number 2 refers to the blue value and the 4th element or index number 3 refers to the alpha value so it takes 4 spots of the array for one pixel now remember I said there are 60 pixels that means how long is this array 6 x for the length of the array is 240 so for any image that is 6 by 4 that has sorry 6x5 that has 60 pixels the array itself has four times that many spots because there's a red green blue and alpha value for each spot meaning the length of the array is 240 okay so that we've established now still so you could think about this is that this pixel starts at spot zero this pixel starts at spot in my I should stop saying spot I should say index starts at index for this one in index eight this one index twelve this one index sixteen so this is how each each pixels color values in the array are for set are separated by four index values so that's the first thing to establish now let's not think about that for a second and let's just think so that that we've established now I'm going to erase this and back up again for a second let's say I want to just though number the pixels like this 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 and this is our important one 16 17 16 so one thing that you'll notice here if I'm numbering the pixels this way is that the first row is 0 through 5 the second row is 0 through 5 plus 6 right 0 plus 6 is 6 6 plus 6 is 12 1 + 6 6 7 7 plus 6 is 13 so if I know the XY coordinate on the screen something like the coordinate 4 times 2 I can get that number 16 by saying X plus y times width or 4 plus 2 times 6 or 4 plus 12 which equals 16 so this is the formula for getting the numeric the number pixel it is on the screen now then I have to say where is it in the array remember the array actually went 0 4 8 12 whoa right yeah 0 4 8 12 16 so then all I need to do is multiply this by 4 so the way that I can find where the color values for a given pixel are in the array is the xvalue the xcoordinate plus the ycoordinate times the width and this whole thing times 4 roof so you might need to diagram this out yourself get a piece of graph paper review it a few times but ultimately this formula you can just memorize it you're going to see it in every almost every example I make right now so let's go back to the code itself up and I'm going to wake up my computer wake up computer and now I can go to my code so now all I want to do that first is deal with the pixels of the canvas itself one thing you have to do if you're going to deal with the pixels of the canvas is alert p5 JavaScript the browser I know who we're talking to here but you've got to tell somebody hey I want to work with the pixels so the way to do that is by saying load pixels and I'm going to put this in draw so the first thing I need to do is say load pixels now I can do anything I want I can say pixels index 365 you know equals 255 now I don't know what this is going to do and then uh if I ever change the pixels I need to say hey I'm done changing the pixels let me now say update pixels so I have messed with the pixel array and if I went back and I loaded it we should see some pixel got some value somewhere the truth of the matter is I'm not gonna be able to find that pixel I have no idea 365 is that the red part the green part the Alpha part so ultimately not going to see anything so let's be a bit more methodical about this let's try to change just the first pixel in the topleft corner so we know that's the red value green value blue value we need a revving a green value of blue value and an alpha those should be the first four so that topleft pixel should be white let's zoom all the way in there oh you can see that look at that do you see that white pixel up there in the top left are we sure about that let's let's move it over let's say 4 5 6 7 oh you can see it moved over right can you see that pixel I changed a little bit moved over right are we really sure about this let's and you know what I could do actually what am I even bothering I could just say oh no I have to say uh Lopez laughs yeah I could make this zero refresh look at it now I got my pink pixel we made a pink pixel whose giant mouse pointer pointing to it today is a beautiful moment right because if you know how to individually address every single pixel in a canvas there is nothing you can't possibly draw oh you read the world is now your oyster I mean you know you want to have a 3d library for doing all that kind of stuff probably you're not going to do it by pixel by pixel but there's a lot of possibilities this opens up so we see the basics at play here but what I want to do is now let me look at how I might actually address every single pixel so how might I do that so you know if you're watching this video hopefully you're aware of the idea of something called a for loop and we can see this particular for loop is a loop that's saying for every X have X go from have a variable called X and have X cycle 0 1 2 3 4 5 and what do I want to do for every X I want to actually maybe I want to do it the reverse I want to say like for the first row which is why do every X then for the second one do every X then for the third one do every X so I need a loop that's going through the Y's as well and this is what's known as a nested loop you may have seen this in other things so so if I say this and I add another bracket and then I need to put indent these a little bit we can now look at this and we can say AHA this is a loop that's saying for every Y value start at Y value 0 go through all the X's now I have y equal 1 go through the all the X's now have y equal to go through all the X's so this nested loop has the property of hitting every single x and y in the window so now we should be able to apply our formula VAR index equals do we remember this x plus y times width times 4x plus y times width this whole thing times four and now I should be able to take this and put this here indent it properly and say index index plus one write the index that value is the red value of every pixel one is the green the next one is the blue the next one is the Alpha so index index plus ah plus two index plus three and you know I might just for like symmetry here add the plus zero there I don't know if that's necessary but you can see this is the chunk I need the index is the start of the pixel and there are four values associated with the pixel now there's something is going to happen which is going to cause this not to work which I would get to in a second but this is this is essentially the right code I missed a small little piece only because I'm using a retina laptop which I'll get to in a second so if I hit refresh here you can say ah weird it worked but I didn't get the whole canvas like I got this like stripe of pink across the top so unfortunately we live in a world now or fortunately where we have these like hdpi HPI high definition display high pixel density high pixel density so Mac Retina displays other types of high density displays actually have like four pixels for every quoteunquote pixel to make things finer and more higher resolution and so if this is actually your what you're seeing here is a view of a high density display and so one thing I want to do just in people I could get into this and I could draw the pixels at higher density to do all sorts of stuff but something I could do in p5 just to like turn this problem off is say pixel density one so what I'm saying that is like I don't care what kind of display the user is on I don't I want the canvas to be one pixel per pixel kind of regular density display as they were here many years ago in olden times so if I do that we should see there we go and you know it's giving me some sort of like warning that image smoothing enabled it's changed something and we can kind of ignore that in the console but you can see I have now essentially written the code for the background function right the p5 background function you know does exactly this it you give it a color like 255 comma zero comment 255 and it fills the entire background with those pixels but I can do all sorts of things now like I could say I could say X right and why I don't know what this is going to do and I could hit and run this you can see now I have this kind of like gradient right because the amount of red increases as the pixels move to the right the amount of blue increases as the pixels move down it mixes in the center I could then also say like make the green value a random value and now we've got this like snowy rainbow noise ah the rainbow yeah whenever something happens that's rainbow like in a it makes me happy and I feel glad about it so this really concludes this particular video I would say to you try to get this set up see what kind of magic pixel pixel Wonderland you can make for yourself and what I'm going to do in the next video is take this concept and actually not just make up pixel colors out of thin air but actually pull pixels from an image this being a live a video source and manipulate them or draw something else based on those colors so I hope you enjoyed this video it was 14 minutes and 46 seconds long and share with me in the comments if you make something and post it somewhere I would love to see what it is