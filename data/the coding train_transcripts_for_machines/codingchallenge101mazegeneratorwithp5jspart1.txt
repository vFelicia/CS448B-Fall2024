welcome to a new coding challenge maze generation so I've got a maze generator running behind me it's using something called a depth first search and a recursive backtracker those are all very fancy sounding names and what I'm going to do in this challenge probably in multiple parts so there'll be two or three videos you can follow along in sequence is build this simulation entirely from scratch and it will cover a lot of Concepts in objectoriented programming thinking about arrays thinking about something called a stack thinking about recursion all sorts of crazy stuff so um so without further Ado so to speak let's just get started ah no actually there is some to do here so this is the a version of it running that I built a while ago meaning earlier this morning and I just want to show you where this comes from uh all this will be linked to the source code for this and this Wikipedia page will be linked to in the description um this is a Wikipedia page on Ma generation there's a lot of different algorithms if I were to just keep scrolling I'm implementing this depth first search and I'm going to implement exactly this pseudo code which is written right here under a recursive backtracker but if you keep scrolling down you'll see there's various other algorithms and maybe we'll come back and in future videos If you like this topic do more of them so this is what I want to focus on now before I can even focus on really getting to the algorithm I need to kind of like set the scene of like what is it that we're building so I'm going to come over here to the Whiteboard and what I'm going to have is I'm going to have a canvas so I'm going to build this on a web page in a browser using HTML 5 canvas using p5js and I'm also using an atom as my text editor some tools that I'm using here but what I ultimately need is I need to think of this canvas as a grid and each spot on that grid is a cell object and essentially what the program is going to do is it's going to figure out what walls should be removed to make a nice maze pattern and you can sort of see what I'm doing here if I remove certain walls you could see now ah here is sort of a maze that you want to follow so before I can and there's going to be a strategy for like why do we remove certain walls to create a continuous maze a continuous Labyrinth but the first thing I knew before I could do any of that is just sort of set myself up with some kind of data structures to figure out how to do this in the first place so what I need is a cell object the cell object should know where it is in this grid it should know what column it's in and what row it's in so every one of these spots has like a column number 0 1 2 3 or four and a row number 0 1 2 or three so the cell needs to know where it is and it also needs to know like what's the deal with its walls does it have is the wall to the right open or closed is the wall to the top open or closed to the left open or close to the bottom open or close so I'm let's go and build this cell object and I'm going to use a instructor function so I'm back over here this is uh so I'm going to uh this is still running we'll let that run I'm going to come over here this is my blank canvas with nothing in it yet I'm going to go to my code editor I'm using Adam and I've set up just create canvas and background so in this first video all I'm going to do is get the the grid there so the first thing I want to do is write a Constructor function for uh a cell object so oops so you can see and I want to put some line breaks down here at the bottom so this is what I'm trying to do I'm trying to create a cell object that has an i and a j the I being its column number the J being its row number so actually let's think about how do we even know what how many columns and rows there are so I want to have some Global variables I'm going to call those columns and rows and I also want to have another variable which is the size I really need a variable which gives keeps track of like how wide and high how how big is this Square it's going to be a square not a rectangle same height same so I can have a single a single variable I'm just going to call that variable W and let's just say that variable is 40 so right I have a canvas that's 400 by 400 and the width and height of each square is 40 so it's 10 rows and 10 column 10 columns and 10 rows it's an easy way of thinking of it first and how do we calculate that we say column equals width divid W that's the total number of columns so width divided by how it big each one is rows equals the height divided by how big each one is and I should also use the floor function to make sure I'm dealing with integers here whole numbers even though I know that 400 divided by 40 is the whole number 10 but what if I have a different Siz canvas and that'll just make things easier so now that I have that I have a cell object each cell gets its I and J gets its gets its column and row okay so how do I create all the cell objects well I want to say for every Row for every row go through every column so the first row create cell create all these cells the next row create all these cells the next row create all these cells that means I need a nested Loop so four I goes through all the rows and you know what I like to call J I'm thinking of J as the row so I'm going to change that to J and I could use the X and Y that might even make things easier but I'm used to I and J as my sort of names of things so um so so it kind of makes sense in my brain immediately you know use your whatever variables make you feel comfortable about columns and rows that's what you should use maybe you can use cat and kitten or something but anyway and then I want to say I want to make a cell is a new cell at i j so this now is a nested Loop that's going to make 100 cell objects right 10 by 10 grid every for every column of every row make 100 cell objects make them each know where they are now where do I put those what I want what I need is an array so I need an array and I could use a twodimensional array and I twodimensional arrays in JavaScript first of all there's not really any such thing as a twodimensional array it's really just an array and the things in the array are other arrays that's a twodimensional array but and there's some conveniences for doing that but uh um I think it's going to be simpler actually if I use a onedimensional array and we'll s of talk about why and see some pieces of that as I keep going okay so I have a onedimensional array right this list is going to store all the cell objects and I'm going to say grid. push cell so all I'm doing here is I'm saying make all of these cell objects and put them into this big array once I have that in draw I could actually then Loop through all of them and display them I'm going to call function called show so what this means is what I want to do now is just see that this is working and so what am I going to do in this cells in the what it need now is a new function called show in the cell object so I can add that here this do cell uh sorry this. show equals a function and here I want to draw something so where is the x coordinate for this particular cell well it's at the I location it's column location times W right cuz it's column 0 1 2 3 or 4 scaled up by how big those squares are X is this.j times W and then so I could just draw a rectangle at XY at that size and I could say stroke 255 no fill and now if I run this we should see ah okay so what did I miss cells is not defined sketch. JS Line2 okay so the array I called it grid not cells whoops I wonder why grid is uh oh and this should be grid also uh okay so that should fix that great so you can see now I have that grid there now we should dig a little bit deeper here because the whole point of doing this was not to draw rectangles here but each cell has walls it has four walls a top a right a bottom and a left so I should be either drawing the wall should be there or they shouldn't there be there so I need to draw them as individual lines so let's figure out how I would do that so here where I'm drawing instead of drawing the rectangle I want to draw the walls so to draw the wall I'm just going to use line so we can get rid of the rectangle I might want this later so I'm going to leave that commented out I'm going to say line what x x comma yx+ W comma y what's that going to give me so you can see here that that gives me a line from the top left to the top right of each cell now I could also draw from X comma y + W to X comma y+ W no no no no no no no to yeah yeah X plus W okay okay okay let's go to the Whiteboard here because this will be easier to figure out if I do this here okay so what's going on each cell this location is XY this location is x + W comma y this location is x + w y + W and this location is X comma y + W I think I got all those right so I need to draw a line from here to here a line from here to here a line from here to here and a line from here to here let's do that so that should be and I I can refer I can look back you know you can kind of imagine that that's there but I'm looking back at it and I'm saying the next line is X+ W oops I don't know where that came from x + W comma y to x + w y + W and then I need X+ W comma y + W and there's an extra boy there all doing all sorts of autocomplete stuff for me I'm G to have to work that out in this editor uh so to X comma y + W oh boy we're going to get get this eventually and then x y + W back to XY so now if I run this we can see ah it looks just like it did before but let's just sort of make sure things are working here like what if I take out this particular line actually doesn't look any different because if I take out the right side the left side of the cell next to it always picks it up but if I take out both both sides we just see only the oh the top and the bottom we only see the uh the horizontal lines um okay um so uh okay so okay I'm getting somewhere but I I got to think about this one thing I want to do this is me being like the anal anybody see the SAT Live sketch anal retentive Chef where like the garbage goes in the Ziploc bag and then that gets like and then like Ziploc bag goes in the plast the paper bag and the paper bag gets folded and gets taped well I am the anal retentive coder and what I want to do is just like align all of this so I can kind of like see this more easily what's going on uh and this is bothering me because I want spaces here so you should you should now turn this video to two times speed while I'm doing this and then go back but this I think is useful to be able to see exactly what's going on and I will do this periodically and this needs a space boy what is go oh I have just lost my mind here uh and this needs a space Oh you know what thing I need is uh Auto format I'm gonna when I take a break to go to the next video we'll edit this part out okay so oh oh and I need some spaces here this is really I really have you should not be like me be like some don't have this kind of problem be fine with the spacing and everything not being exactly right you know indentation is important but at some point in your life you just need to like write your code anyway the reason why I did this is I want to see like okay I want to see clearly like this is the x coordinate this is the Y this is the X I wanted everything to line up now L okay now how am I going to figure out a way I need something else for these cells I need you to figure out a way to know does it have a wall on any of these sides so what I'm going to do this is going to be a little bit strange I think a way of doing this is to create Boolean variables so I have a Boolean variable for the top for the right for the bottom and for the left top right bottom left are are there walls um are are does the wall exist for this particular cell so let's let's look at how I might do that so each cell and honestly I think what would be easier would be to say this. walls equals true comma true comma true comma true so I'm creating an array so each cell when it starts every wall is there true true true true so it's up to me to memorize let's all memorize this together top right bottom left top right bottom left stay it with me top right right bottom left okay that's going to be the order did I get it right here top right bottom left I think that's the right Order X to X Plus w y to y + W X plus W to x y + W to Y I'm pretty sure I got that right so what I can say here now is if walls index zero then draw this line and I'm going to repeat this a bunch of times and put in uh I bet you there's a key command this is the first time I've ever used Adam uh eventually there's a key command to Auto format it and one and two and three now I'm sure some of you could come up with like a case statement or you wouldn't need the curly brackets but I'm trying to be as explicit as possible so these are the lines I'm going to draw if the wall exists so you can see here I hit refresh walls is not defined so what of course I made the mistake that I always make which this needs to say this do walls and all of these and you can see there it is now if I change this to false false false top middle right wait top right bottom left I already forgot top right bottom left we should only see the left lines and you can see those are all the left lines um so and we can be sure about so so you can see at some point I'm going to be able to change these Boolean variables from true or false to add and remove walls based on how that Labyrinth should look okay so I think I'm actually this this concludes this first video where essentially all I've done is set up a grid a twodimensional array ah it's a onedimensional array and it has a bunch of cells that live on a grid each with an i and a j each cell is drawn as four lines top right bottom left I don't I probably said something totally wrong before because I think I was saying middle there's no middle top right bottom left top right bottom left and uh I also have a mechanism an array that has booleans in it to know whether top is right is true right is true bottom is true left is true if those lines should be there or not okay in the next video I'm going to look at the algorithm and see how we start to start from one of those cells and decide whether to remove a wall or not and that will start us with actually the maze creation itself