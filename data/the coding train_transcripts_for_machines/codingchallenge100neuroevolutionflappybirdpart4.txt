hello and welcome to part 4 of the flappy bird neuro evolution coding challenge now you might have thought you might have watched part three and thought it's done finished coding challenge complete but I got so many excellent comments and suggestions about how to improve my neuro evolution simulation that I decided to come back and attempt a part for mmm this is part 4 so by the way and before I actually came back to attempt I did some work to test out some of these ideas and here you can see this is a version of it running with some of these improvements and you can see that I pretty much have a little bird here that has beaten the game as it stands alright so let me close this out I'm gonna go to this github issue where I kept track of some of the comments and put them here in a list so these are the things that I want to add to be honest I might do this last one in a part 5 but let's see LEDs at the very least what I want to do is apparently a very important feature of the game is that if the bird reaches the ceiling or the floor a point to the bird so I want to make sure to implement that there's an issue a bug in which the pipes by detection for the closest pipe I'm only detecting it up to the point where it reaches the bird itself and not as it passes it and that sort of causing some issues as well as oh my goodness why velocity I mean let's think about this for a second I have this diagram over here right if this is my bird and this is the gap approaching right what if the bird is already moving up or what if the bird is following that falling down this would make a very big difference in whether I should jump or not because if I'm moving up jumping might cause me to hit the top the the top part of the pipe so I shouldn't jump but if I don't jump while I'm moving down I'll probably hit the bottom so having Y velocity whether I'm already moving up or down as part of the inputs into the system is going to create a much smarter bird and it makes sense that a bird playing the game would know if it's moving up or down so I feel like that's a fair input so let's go and add those things so first let's go with adding the Y velocity vers order let's go with adding the Y velocity as an input that's Prince of the actual algorithm that's going on here go back to my code zoom beckon I'm gonna go to the bird the bird as you recall has a brain so the brain previously had four inputs top and bottom of the pipe exposition of the pipe Y position of the bird now I want five inputs and I don't know let's increase the number of hidden neurons to make it a bit more sophisticated I like a sophisticated bird now then we're gonna go down and we're going to look here aha these are the inputs the Y location the top the bottom the X location all normalized to arrange between zero and one so now all I need to say is that this dot velocity let's make that an input now this is a bit interesting here now let me just make sure that's the variable right this dot velocity now here's the thing when I wanted to when I use something like the exposition as an input or the Y position there's a distinct right there's a distinct way to normalize that value to arrange between zero and one the Y values go between zero and four eighty divided by four eighty I have a number between zero and one but the velocity is a bit more mysterious first of all it could be negative it could be positive what should I really do here let's try something arbitrary let me try dividing by nineteen no ten so you know in the end I just need an input maybe it's okay if it's also negative I want it within kind of like a smallish range but I think if I divide it by something that's probably gonna do just fine oh and this should be input for so in that sense I now if I go back and run it I should have already a smarter bird so let's let this run for a little while let's train it for a little while and we can see oh yeah this is the number of generations I've gotten up to seven because it's already kind of pretty smart let's slow it down and we can see we can see there it is figuring it sort of figured it out all right well this some things are a bit different from this and the other version but you can see that adding that Y velocity has already probably improved it okay so the neck feature I would like to implement now that we've added Y velocity is let's try fixing the pipes closest detection so let me explain what's wrong so if this is the bird and this is the pipe and this is another pipe I have an algorithm that says oh hey this is the one I should look at but if there happens to be another pipe over here that's technically closer I want to ignore it because I only care about the pipes that are in front of me but still it's there on this in the canvas because it's part of the animation so I have an algorithm that already deals with that but unfortunately right as soon as the if the pipe is here it's still gonna read as the closest but if it's actually like here right above it as soon as the front of the pipe passes the bird it's gonna ignore that pipe and so if it sees another one coming it's got to go up it could kind of get it should really still consider that pipe it should consider that pipe all the way until the back of it passes I think this is gonna be an easy thing to fix so let's go to touch it to do and find this part of the code yes that's what I'm doing in bird bird somewhere in here in think this is me finding the closest pipe and as long as the distance between the pipes X location and my location is positive that's something that I want to look at but let me actually just find the distance in the back of the pipe oh this is so easy pipes dot X plus pipe W so that that W is the width of the pipe so I should be a plus pipes index I dot W minus this X so this should now work this is actually the location that I'm looking for which is behind the pipe wonderful all right do I even want to run it again do I care let's run it again well let's speed it up to train for a little while and there we go and let's just let's still run we could see there we go oh poor poor little flappy bird lost the game alright so now what else do we have to do I go back to my list we now ah fix when the bird hits the bottom now I'm told by the chat that actually in the original game hitting the ceiling is allowed so let's only add the bottom I guess so if I go into the bird there is a function called I believe well there isn't actually so hold on a second let's go to the sketch I've forgotten how my code works completely and let's go and see here ah all right so this is the loop where I remove birds but the problem is this loop is inside the pipes so do I really want to remove a bird here I mean I don't know what the best way of doing this is but what I'm going to do is I'm just gonna create another little quick check down here I'm gonna use I and I'm gonna say if birds index I what should I say off screen off screen then here is another reason why I might want to remove that particular bird and put it into my saved Birds array which was admittedly a bit of a silly solution but it works so I need to write a function here in bird which is called offscreen and I'm just going to return return this dot y is greater than height or this dot well I can't resist having it die if it hits the ceiling I cannot resist let's just add that for a second offscreen so let's see if this works and let's do this so look there at the bot ha you know what there's an issue here I think somewhere in here right I had this extra code to constrain them within the screen which is sort of silly and now I can remove that they don't get constrained they just die so you can see they're hitting the bottom they're dying so now let's speed this up and let's let this go I'll be back in a minute okay I have returned looks like we've got a pretty good one here that doesn't seem to have any problem beating this game lovely look at you go look at you you scrappy little bird flapping your way through this course beautiful so I think we've made some pretty good improvements here I don't know let's make the game a little bit harder just to see so what did we have now in pipe oh the spacing is 175 that is way too easy so let's make it 125 and let's give a little refresh here and I will be back again in a minute alright I've returned this bird looks pretty pretty pretty good let's see how it's doing here yep doesn't seem to have any problem with this one 25 spacing what do you think can we push it a little just 75 80 50 I don't know let's try flip a coin whoa look at that look at it go oh it's such a good little bird there all right oh this is a bad idea 75 it's gonna be way too hard all right dare I say that it's working it's hard to tell whether it's so sped up let's actually slow down there's actually two of them going oh my goodness oh there's a bunch of them in there let's just let's let's look at it at a more yeah seems pretty reasonable to me all right so this is pretty exciting to see you know I probably again I don't have the exact physics of the original game so that probably could be some tweaks there but as you can see just really that Y velocity if I take the out that Y velocity input well let me just say I think the Y velocity is probably the most important fix that we made so I can really quickly just in the bird itself I can just let me just set the Y velocity to zero so basically it's not getting it anymore it's as if it's a constant input so it's sort of become irrelevant I don't think it's going to be able to solve this now so let me give it a little bit of a run here for a few minutes all right so I've let this run for a while but you can see like it's just like it's all over the place it's not able to sort of fit itself through these pipes there there is a good point in the chat that I am probably with that then I haven't really debate this sort of amount that it jumps very very low so it's able to kind of like perfectly position it's almost as if it's just like finding the exact spot so you know one thing I might just try let's put it back let's put the velocity back let's make it a little bit harder for the bird let's give it a bit more of powerful jump let's give it sixteen instead of twelve this will make it a harder game for it to play I think but let's see if we can do it so you can see I don't know it's my hit detection looks like it might be a little bit generous I think that collision detection is a little bit generous you can see I don't know that maybe maybe the lift okay so I'm being told there's a very important feature which is that if it's moving up it cannot jump it can only jump if it's moving down so let's see if we can add that oh boy I did not know that was the case so the way that I would add that is this is where it chooses to jump up and so I suppose I mean I guess it just I might as well render the decision irrelevant right so and if output 0 is greater than output 1 and this dot velocity is moving down which means greater than or equal to zero okay so I'm allowed I'm not allowed to go up unless I'm already going up let's try it and let's let me just for the sake of argument let me put this back to the the pipe distance let me put that back to 100 this was gonna be such a short video now it's so long and let me speed this up and I shall return all right there's some interesting discussion now in the chat as to whether that's actually a feature of the game but I did implement it and I'm only letting it jump while it's moving down and it still seems to be able to kind of get through these which is pretty cool to see I do kind of like the quality of it right now of what it's what it looks like so that's kind of cool all right so who knows I'm going to take that feature out because apparently that there's it's unclear as to whether that's actually a feature of the game I don't feel like that needs to necessarily be a feature of the simulation but I will leave it in as a comment in case anyone wants to reference it alright so now I feel like this is in good shape but what I want to be able to do right what I want to be able to do is let's say I mean this isn't a very complex problem I'm able to kind of like train a bird to play the game very well very quickly but if I had something that took a really long time to train I would want to be able to save the model and buy the model I mean a copy of all of the parameters and values and weights and variables and things that are in that bird's neural network brain I want to save a copy of that so that I could load that later and luckily for us there's a nice way of doing that so that will come in part no it won't be part five oh there's a part five coding challenge see you there