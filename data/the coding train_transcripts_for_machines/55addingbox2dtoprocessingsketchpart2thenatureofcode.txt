so this is the video we're actually gonna start looking at the code implementation and how we're gonna get these boxes to suddenly start falling and bouncing off of each other so if you remember we have this box class and what we said is aha instead of adding all the physics into that box class ourselves we're gonna add a box to the body into that box class how do we do that we've got this long list of steps that we went through so we need to look at the code implementation for each one of these steps but before we can even do that we have kind of a larger question right just putting bodies into a box object isn't just the only piece of this puzzle we need to do I'm gonna divide this into three things there are three things we need to add to that processing sketch to have full unbox 2d physics happening so number one is we need to deal with the Box 2d world so where we're going to do this is in the main tab and more specifically we're gonna add the box 2d world into processing setup so this is a key thing here right the body is the entity in the world that moves around but in order for the body to exist it's got to be in a world so the world is something we're going to set up when we begin our processing sketch that's item number one so item number two is what we spent all this time going through so we need to create bodies create a body and where we're gonna do that is in our own objects constructor so our object is called a box in our objects constructor the box objects constructor so every time we make our own object in that objects instructor says oh you're making an object I got to make a box who do you want to go along with it so every one of our objects will have a box of the object that boxes the body that will go along with it once we've done that we're pretty far along but what we actually need to do remember it's where the designers we're gonna draw everything set the color set the shapes load images design our world what we need to do is ask box 2d where we need to rewrite our display method so we need to ask box 2d where where is the body and where we're going to do that is in the boxes display function so up here we have this idea of in the main program we're creating a box 2d world in our objects were creating body objects and then when it comes time to draw that object we're gonna ask that about that body object where are you so I can draw you in the right place okay so these are the three things we need to add to that processing sketch so what I've done there's a lot of code that we're gonna have to sort of deal with the fact that how could you ever possibly like remember all the code that you need for each one of these steps and there's this body type dot this dot this and this blah blah blah so we're gonna have to sort of piece this together it's going to be a little bit challenging but what I have over here is I have a version of this exercise sort of semi solved so it has maybe 60 to 75% of the code already written so we can look through some of that and some of it I'm gonna add as we go here manually and try to see if I can remember it so so one thing that our first note is related to item number one which is set up the world in our main program is we need to import all the library so there's there's lots of stuff we're importing we're importing a whole lot of classes from jpop Sudi we're reporting some stuff from p back city a little helper class to provide us with some functionality so there's a lot of stuff that's being imported here and we're later on hopefully at some point in this video I'll kind of go and show you where you can kind of look up all the documentation for this stuff but one of the things we get from the peabody library is we can make a p box2d object and i'm going to call it box 2d and this we make a new pbox to the object and this is where we create our world so the p box to the object is kind of the main object you can make it a sort of a global variable for your entire sketch and it is what is holding onto the box 2d world so all of the information that's about the world doesn't have a you know what is it is what is the gravity force in the world or other parameters of the world that you can look at setting but we're just creating a world with default settings so we need in processing setup to create the P box through the object and call box we create world the other thing that I should look at point out that we need to do in draw is we need to say box 2d dot step so one remember box Toodee if you remember I think we covered this it's a library that thinks in terms of real world units seconds and time so one thing we have to do is every time through draw we have a new frame of animation we're going to display on the screen we have to tell box2d step to the next moment in time so box2d step to the moment next moment in time we're gonna draw everything step to the next moment of time we're going to draw everything step to the next moment of time we're gonna draw everything what's interesting about this is you could pause you start and stop the physics by you know deciding when you're gonna call step but here we basically were just operating under this methodology of every time through draw is one step through box2d time so this we're done this is I believe until I realized I forgot something this is everything we need to do to add the box2d world into the main tab so the next stuff that we need to look at is creating the body which we want to do in the constructor of the box object so the moment we create a box object we want to create a body to go along with it with all these steps by definition position type body shape fixture and put it all together by fixture takes the shape and attaches it to the body so let's look most of this I've typed in already then we're just gonna I'm gonna kind of scan through it I think it's going to be up to you to kind of download the examples look through them see what the questions are but I don't I think it's not useful for me to sit here and type out every single one of these lines of code I'm telling myself this because I'm not entirely sure but I've left a few mistakes out so we'll see watch what I'm about to show you see if you can figure out what there's a fundamental sort of horrific flaw in this code that we'll fix but first we can see where step one define the body so we make a body definition object the type the if the type is dynamic you can see here this is where we might set a static or a kinematic one but here we're making a dynamic body and then the other thing we need to set about a body is its initial position where is its initial position its initial position is X Y do you notice anything wrong here think about it its initial position is X Y what is X Y X Y are the arguments I passed in here Mouse X mouse Y what are those coordinates in those coordinates are in pixels the mouse location in pixels remember the Boxee D coordinate system is completely different than the then our pixel coordinate system so this is a moment where you have to stop pause and convert the pixel coordinates to world coordinates boxer D world coordinates so I'm just going to show you that instead of passing an XY directly you can use one of the helper functions we covered coordinate pixel to world XY so this is where before you set that position think to yourself am i setting a world position and am i thinking in pixels I've got to convert it okay so that's really important so that is step one create the body definition step two is create the body remember we said this was going to be really simple well it's one line of code create the body from that body definition and store it in the body reference easypeasy I can't believe I just said using peasy okay the next thing when you do is create a shape and we're gonna use polygon shape as a box and we can see here we are creating a polygon shape and we're making it a box with a width and a height again the same problem is here right is that width and what is that height we're thinking in pixels we've set them up to be 16 width of 16 and a height of 16 those values are in pixels we need those values to be in boxer D world units so we're not converting a coordinate where we're converting we're scaling a scale or value a single number so what we need to do is say this float I'm going to just make a new variable box2d width equals box 2d scaler pixels to world W and then I'm gonna make one for height scalar pixels to world height and you can see and now we need to set the actual polygons width and height with the converted values right we need to scale the width scale the height you've forgotten one other thing though so this is pretty close we've almost got it right we got the pixels we converted it to world and we set it but we missed one little tiny thing which I will show you which is that if you recall kind of run out of space here but then use this little patch here we think of a rectangle when we draw one as this is its width and this is its height but in box 2d shapes box shapes are thought of as the width as the distance from the center and the distance from the center is the height so what we actually want to convert we actually want to say that box2d width is the that we want to convert the width divided by two and the height divided by two to set the box up correctly okay so this is really important step one to find the body step to create the body step three create the shape all the while we've got to be thinking do we need to convert pixels to world then we've got a step four if you remember we're almost to the end step four make the fixture set these parameters and the end we're gonna put it all together with step five so here we are creating the fixture of fixture definition now this is a really really key line of code right here is a really key line of code because notice how we're saying this that fixture shape is PS what is PS it's the polygon shape so we need to make sure when we create the fixture that we're assigning it a shape because the fixture is what's gonna get attached to that body if fixture is like the glue between the shape and the body and then we can see here are some parameters so you might be asking yourself well what values should I use for density what value should use for friction restitution it's a good question there are kind of if you look through the box2d manual give you kind of suggested ranges for these I believe restitution between zero and one and friction as well density you don't want a density of zero that doesn't make any sense so but mostly my advice to you when dealing with picking values for these is try different values and see how it behaves kind of use your intuition try different things if you want to get fancy build yourself a little interface to tweak all the values see how it works but it's important to realize that also that this is all hardcoded right here it doesn't need to be hardcoded these can be variables you can make objects with different frictions different restitutions there's a lot of power and how you can control the physics and then the last step here we can see is this is putting it all together body dot create fixture with the fixture definition so that's saying hey there's a shape there's a fixture there's a body put it all together so once we've done all this we've done it we now have you can't fit it all in one little screen here but we now have all the steps so we've made that box of the body in our box object and we could run oh I missed something coordinate pixels to world maybe there we go we've done it and now click the mouse no physics why is there no physics the reason there's no physics is look at this we're just still drawing the rectangle at that Expo high location we need to that XY location remember was the original location of the rectangle that's why it's sitting there right there we need to go and ask this is our this is our we've done one and we've done two this is the third one we need to say hey boxer D where is the body I need to draw it at that location so we're almost done with this it's very clean once we had this last step into the display method we're going to be good to go so if we come over here what we need to do is Bach City will give us a vector telling us where that object is and it would give that to us in world coordinates which we'd have to convert to pixel coordinates but the the box to the object that we're using has a little helper function and it's called get body pixel coordinate we pass in the body and I can call this position perhaps so this is us saying hey where is the bodies pixel location give it to me in a vector and then I can translate to that object's location so instead of drawing at the original XY where the object started every time we display it we want to say hey where are you currently so I'm gonna run this again and we're gonna see hey look stuff is falling and it's even kind of you can see it's separating like it's colliding with each other we're almost there we missed one thing in addition to the location we want to know the angle what is the current angle of that object because boxer D will handle collisions with angular motion and all this wonderful stuff and the way we get that is float a equals body dot get angle and then once we've translated we can rotate by that angle now let's run this and now I don't know use your powers of detection and does it look right to you I don't know if you can tell it's very small it's actually wrong so we've done everything right but we missed one little detail if you remember okay think about this for a second the processing window what is the yaxis point the yaxis points down right pixel zeroes at the top higher numbers pixels go down a box of the world is flipped the yaxis points up in a box 2d world this means rotation is also flipped so what we actually need to do is rotate i eh and once we do that and i'm just gonna move this over here once we do that we can see here look there it is there's our box to the world we've got everything in there so I know this well I don't know if this really worked very well to kind of like kind of race through a lot of this stuff I I guess I'm there's a couple things to mention here right I kind of raced through all this code what I think is important is to understand these steps and understand where these steps go so hopefully you got that from this video right when we create our box object we create the body object when we draw our box object we ask where the body object is so that's the key thing to take away where do you find out like where what if I do circle shape and what if I do change shape and how do I figure out what this function does or this parameter does so there's number one there's more examples I have more examples and I'm going to go through some more examples so that will help you number two you could look at the nature of code book and it has more details than all the code is there so you can kind of read through it but number three one thing you might want to just take if you want to go deeper into box2d one thing that you might consider doing which I have here hopefully is that if you download J boxer D from the J box2d website this is hard for you to see you can actually it will have the the Javadoc API in there and if what I'm looking for is just this index.html file which is here in the API Doc's folder and if I open that up I'm going to zoom back out you can see look every class like if you if we wanted to find out the functions for a circle shape it's right here and all the documentation is here so all of these functions for what what we can do with the circle shape this is where you might want to look so you know tread carefully it's Java documentation you might you may or may not be used to that but now that we have the sort of basic process for how we add box2d into a sketch you know hopefully this made sense we're going to be able to go through more and more examples we're gonna get to look at a change shape we're to look at joints we're gonna look at how do we apply a force to an object and also how do we actually make something happen when two objects collide so I would say that's really like one two three four or five more videos that hopefully we'll get to at some point all this information you can find in the nature code book as well okay so thank you and I'm going to click a button