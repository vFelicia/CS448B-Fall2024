hello welcome to another coding challenge in this coding challenge I'm going to with great trepidation but excitement and energy I'm going to program from scratch the mandal BR set show you how to do it talk about the math behind it and make it happen in JavaScript in the browser problems will come up but I'm going to do my best so why why do you care about this it's a fractal pattern you can make some beautiful images with it you might also just sort of learn a bit about programming and pixels and arrays um but um yeah so I don't know you're here you probably want to do the mandle BR said if you don't you can go uh outside and play Frisbee um so let's see now let's look at least and let's read this definition which you know is g to cause a small like a slight pain in my side here to read it but I'm going to do it anyway and try to unpack and understand it as best we can in the context of a short YouTube coding challenge video okay the mandal BR set is the set of complex numbers C okay what does it mean for something to be a complex number and then to have a set of complex numbers that's a question we need to answer which the function f of Z = z^2 + C okay what does that function mean exactly does not diverge what does it mean for something to not diverge when iterated from Z equals z okay so there's a lot of stuff in there and the first thing I the first thing I want to do before I start writing the code is just talk about the math and the first thing I want to do is talk about what is a complex number okay so you might be familiar with an operation in math called square root I could say oh I think I have the wrong end of this pen I could say the square root of four ah by the way I forgot this whole thing I was practicing pronunciation and I completely forgot to do it the mandal BR set is named for the French mathematician benois mandelbrot okay I spent all the time practicing to say benois okay the square root of 4 is two the square root of 16 is four the square root of 1 is what well in in fact you might say to yourself ah there is no such thing as the square root of negative 1 it's impossible any number squared positive or negative results in a positive number so the square root of a negative number inherently does not exist this is not exactly the case in fact there is an answer to this and it's called I and I is an imaginary number it's imaginary because it's not a real number it doesn't actually exist but if we consider theun of ne1 actually be something that does exist and call it I all sorts of magic can happen one of which by the way is the mandle BR set so this is what's known so this is a real number and this is an imaginary number if I put those two things together 3 + I this is a complex number a complex number has both a real component and an imaginary component and it is typically written in the form a plus b i a is the quote unquote real component B is the quote unquote imaginary component I personally love imaginary numbers because I could just imagine them and use my creative imagination to think about imaginary numbers okay so uh so this is what a complex number is now let's go back to that definition the set of complex numbers okay what does it mean for something to be a set of complex numbers well this actually relates to you can think about a canvas right a canvas our canvas the thing that lives in the browser in HTML or processing or Java or whatever Graphics environment you're using has an xaxis and a y AIS it's a twodimensional plane well what if a and I don't know which one should be which I'll just pick one and hopefully the mandle Brad set won't be upside down a let's say a is the x axis and B is the Y AIS the plane of complex numbers the set of complex numbers is all the and a number that appears here might have an a value of seven and a b value of three meaning 7 + 3 I so this plane this set of complex numbers is all the complex numbers for all of all a possibilities and all B possibilities so we have to do something for every single a set of complex numbers within the sort of bounds of this canvas this okay so that's good which the function f of z = z ^2 + C does not diverge when iterated from Z equals z okay this is probably the hardest part for us to understand but once we understand it we're done and we can actually start to program the code so let me come back over here and let's write that so F of Z equals z I wrote the wrong thing down I might need some more space let's see z^ 2 + C now C is a complex is a complex number A plus b i any number from this spot and we want to iterate this function starting with z equals z so if we start with Z equal to zero what do we get well Z the next Z like of Z like we're Z1 if this is z index you know Z subzero Z of the zero Generation Z of the first generation equals z^2 plus C which is by the way just C so now Z sub2 equals what c^2 + C and Z sub3 is going to be c^2 + c^2 + C so one of the things we need to look at how to do here is how do we get c^ S this is is where I need a little bit more root c s what is C S c^ 2 is a + b i time a + b i right because C is a complex number it has a real component and imaginary component a plus b i well let's multiply these two things together a * a is a 2 plus a * b i plus a b i now b i * a plus a bi again bi * bi now this is a crazy one bi * bi is what b^ 2 I 2 what's i i is the square root of ne1 I mean it's imaginary but it is the square root of negative 1 so if you square it what do you get negative 1 so this actually turns out to be a 2 plus this is AI plus AI plus 2 a i plus oh no not plus minus CU i^ 2 is 1 minus b^ 2 or we could look at this another way a^ 2 minus b^ 2 plus 2 a b i well guess what this is a complex number it has a real component a^2 minus b s and it has an imaginary component 2 a so this is all the math that we need because what we're going to do is actually in our code just calculate these values over and over and over again generation to generation we're going to iterate iterate iterate and as we calculate those values over and over again we need to see do they remain Bound in an absolute value so the question is are they tending to go towards infinity or they actually just like staying around some reasonable number and the mandal brout set is the set of numbers for which the function remains bounded so it's all the time for all of the possibilities it's all of the ones that don't tend towards Infinity that was a lot to think about maybe pause this video and go outside do some take a break for a little while but now if you're back I'm going to start writing the code for that and I'm going to refer back to this math a couple times probably I don't know if you're following this I'm I'm having a good time okay so let's go to the code now I I have a sort of empty p5js sketch here um this is some JavaScript code it's just like a basic skeleton here the only thing that it's doing is it's looking at every single x value and every single yvalue and setting its pixel to a grayscale value of 51 so um I'm going to go take a look at that it's right here you can see here there we go there's my gray window if I were to you know change this component to 255 you can see it's like a redder window because I added more red so what I need to do ultimately is oops is I need to inside this code for every one of these X and Y values I need to run this mandle BR set F of Z z^2 Plus Z math thing and I need to see them are my numbers getting bigger or are they not getting bigger and then I'm going to set a color based on that okay so now we have an interesting question though to ask which is H if this is my pixel window which goes from 0 to 360 and 0 to 240 well do I really want and a complex number is a plus b i do I really want to deal with complex numbers like 357 plus 212 I no I really want my range I don't know what it should be but I'm going to just go between 2 and two and then let's try that uh top to bottom and probably something's going to be squished but it'll be fine so what one thing the first thing I need to do is I need to figure out what are my A and B values relative to X and Y so I want to Map X X which goes from 0er to width to maybe between 2 and two let's make this a square and then I don't have to worry about any of this nonsense and then I'm going to map B and this is really which goes from uh Y which goes from zero to height also between Nega 2 and two so I'm looking for all the complex numbers that go between 2 a plus um plus 2b no no no sorry 2 minus 2 I all the way to 2 + 2 I that's the full range um okay so I want to use those numbers now I need to start doing that iterating okay so the first thing I need to do is say I know how to do this I've done this before okay let's look at this we need to over and over again so we need to over and over we have we need an operation that's going to happen over and over again so let's keep track of how one thing we should do is keep track of how often are we doing this let's have a variable called n because I want to just make sure like as long as n is less than I don't know some arbitrary amount 100 like I don't want to iterate more than 100 times I can keep doing what I'm doing and I want to have Z start with something so I'm going to have uh uh Z start with uh zero I'm sure I'm getting something wrong here because I'm like thinking about this as I'm doing and I'm going to fix it as I go but let's let's figure out some things I need to calculate I kind of want to like pause recording and go look at my code from before okay but it's okay I'm fine I'm fine this going to be okay um okay did I get something wrong in the chat everybody put like rainbow emojis or something if I did something horribly wrong maybe rainbow maybe that's not right it should be rainbow if it's correct um okay so the first thing I want to do is I want to calculate uh A2 minus b^2 okay so I'm going to call that AA is uh or or let's um that's going to be my new a is a * a minus B * B and then I also need to calculate 2ab so I'm going to call that uh BB is 2 * a Time B so I have now calculated the real components the real and the complex components for the next generation and then what do I need to say need to say a equals a a a and b equals BB and do it again so this is just my iterative process because I start with I think this is right right the number while yeah uh oh and then I need to say n plus plus uh okay now another thing I could do here is I could say like what does it mean for this to to be unbounded to tend towards Infinity what if I just say say something like I could be really lazy what if a A plus BB is greater than I don't know 16 or I made up that number that means maybe and and not and I want to take the absolute value of that what if the absolute value of those two the real and the imaginary component added together uh goes toward Infinity um ah greater than 16 that's my Infinity then I want to break out of it so the question is did I get to 100 or did I not so look so this is how should have thought about I'm G to come back maybe we'll talk about this again let's see let's see how far I've gotten why not use a for Loop well I could use a for Loop that would make a lot of sense but I'm just using a a while loop For No Good Reason okay so now let's just do something I'm just G to say like now if n uh let's uh equals uh if n equals 100 right if we got to the max iterations and I should probably make that a variable then let's make a brightness value brightness value equals zero and then uh brightness value equals 255 so let's just see what happens now if I basically with this simple little algorithm figure out whether n kept going and remained bounded or if it went to Infinity Let's see we should get uh we should get something oh I got a nice like Circle that's promising so now let's be a little bit more thoughtful about this maybe we can do some sort of coloring based on the value of n maybe that will get us something better so let's actually say now uh map n which could go from 0 to 100 between 0 and 255 five what did I do WR time out okay welcome back there was a critical error in what I had written here which I just uh didn't notice and thankfully the internet chat came to the rescue um and it's right here in these lines AAL a A plus a b equal BB Plus B now let's go let's think about what's going on here if you recall the idea of what we're doing is we're saying uh Z the new Z equals the previous z^2 plus C and all of the math that I did here all of this right here this is me figuring out what z s is z^ s is a A plus BBI I that's what z^ s is so what do I need to do I need to then add to that c but C is always the core original uh real and imaginary component of where we are in this complex plane so even though I want the new A and B that's then going to get squared for the next iteration the next iteration to get updated right I want the new A and B that's going to get squared over and over to get updated this that's getting added to it C this is really what's standing in for C right here this has to be those original values so I'm going to um I'm going to just do this I'm going to say ca equals a and maybe somebody on the internet here can uh oh I'm going to post this code GitHub can submit a pull request with nice variable namings for all this stuff CU I feel like boy this is like I I I have a pet peeve and I'm really doing my own pet peeve which is like all these cryptic variable names that would never make any sense if you were just coming to look at it but it is what it is right now so I need to store those original values and keep those as CA and CB so let's take a look now and see what we get ah this is starting to look like that mandal broth set you can see it there now you can see like oh I kind of like it's not exactly centered I'm in sort of the wrong place so you know we can fut with that one way could F that say like oh let's uh let's kind of like have a little bit of a wider range oh and you can see I kind of like squished it so I'm going to make y the same there you go but it's also still doesn't really look exactly like what you think of when you think of the mandal brat set um you know if I zoom in you can see there's some level of grayscale there what I'm doing is I'm essentially saying let me just take the number of iterations it got to right if it got to 100 it's done the number of iterations before it breaks out um and gets to um before uh if it goes to Infinity how many iterations did it take for it to go to Infinity so first of all one thing I should say that if n equals 100 and this is driving me crazy I really just need a variable here um which is I'm going to call uh Max iterations and I'm going to set that equal to 100 because I I hate that I'm typing this everywhere so I'm going to put this here and put put this here and I'm going to put this here so now if n actually gets to Max iterations let's say the brightness is zero and now you can sort of see like ah look it's all black in the center and then there's some white kind of on the outside and there's so many different ways you could color stuff uh here's one way I I'd use this sort of mapping way another thing that I could do is I can say n times 16 and I can say uh modulus 255 so I uh recycle back down to zero and you can see oh that looks kind of interesting I don't know I don't know what that what good that did maybe I need to floor that for it to look like what I want it to look like but that that that I thought this was how I colored it in a previous thing welcome back that was an awkward cut but so what um I was having some trouble figuring out how to color the mandle BR set so I think what would be best to look at first actually is just to completely simplify things so this is what the mandal BR set looks like if there's only two possible colors if there is a essentially a background color and a foreground color the background color is set to be 200 so every pixel is 200 unless it's something unless it's a pixel that's made it all the way to the max iterations that's with that's something that's bounded that's within the mandal brat set so if it's within the mandal brat set its brightness is zero it's a black pixel otherwise its brightness is 200 so we can see it so what I want to do is keep that core mandal BR set the set itself um with a pixel value of zero and now you could probably Google mandle BR set color system and you could probably find all sorts of ways of doing it but thankfully the internet chat came to my rescue and let's just look at one other way of coloring this particular fractal so what I'm going to do is what I want to do is say okay well the iteration got somewhere between zero and 100 so I'm going to map I'm going to speak a little quieter now because I think there's a session going on in the Next Room I'm going to map the number of iterations from 0er to Max iterations and I'm going to make that some brightness value between 0 and 255 let's look at that yeah it kind of worked but you can barely see what's going on there at the edges so we need a way of changing the kind of scale here and actually a better way of doing this would be to actually first just normalize n which goes somewhere between zero and Max iterations normalize that between a value of zero and one and then I'm going to say bright equals map the square root of that value which also but incidentally has a range between Z and one to between 0 and 255 so if I do that and I refresh this page now you can see this is starting to look more like what you might be used to seeing in a kind of Mandel BR set visualization and the other thing you'll notice here is I'm just sort of looking at this zoomed out version of the mandle BR set the reason why it's zoomed out is because the minimum and maximum range here are between 2.5 and 2.5 so what if I went between netive 1.5 and 1.5 come on now you can see I'm kind of zoomed in on it and what if I went between .5 and 0.5 and by the way what if I just made these variables so what if I said Minx equals a negative 0.5 Min y equals and actually I'm just going to say I'm gonna say Min valal is negative .5 and Max Val is 0.5 and what I'm actually going to do is let's make let's make a mins slider oh I can't do that up here and a Max slider Min slider equals create slider now I need the minimum value to be some value between like um um I don't know 2.5 and zero and I'm going to start with 2.5 and have a range of uh increment value of 0 01 and the max value this is kind of silly what I'm doing how I'm doing this but max value is going to be the same but between zero and 2.5 and we'll start at 2.5 and then what I'm going to do is actually say Min value mins slider. value max slider. value and I'm going to do this now for A and B now I'm going to map y as well so now I have two sliders so if I run this program whoops create sliders is not defined okay I forgot to include the P5 Dom Library so let me include that P5 Dom library and you can see okay there's some sliders down here now now there's sort of an issue which is that I'm I'm changing the sliders but I'm not seeing anything change so let's figure out what's going on here it is at negative 1.5 one oh I have no Loop in my code because in draw I before I didn't want it to change so I just had no Loop so I'm going to take out no Loop so that it Loops but there really is another issue which is that you know it's I can I can make these changes but look how slow so this pixel operations are really really slow so I'm going to do this just in I'm going to make like a 100 by 100 oh the other reason why it's so slow is I made this ridiculous 1,000 Max iterations meaning for every pixel it's going to iterate 1,00 times so that's terrible I I don't need let's just do it like 50 times and now you can see like I can start to zoom in to different parts of the fractal it's actually quite fast so now we can see like well maybe I should uh let it be a little bit bigger and maybe I should let the maximum iterations be 100 and yeah it's still kind of like at a reasonable speed and you can see I can start to zoom in we can really get the sense of the fractal this idea of a fractal of the entire shape of the mandle BR set there it is up there I can't reach up there because my hands get cut off but you see the idea I don't know if you can still hear me I'm speaking quietly this has kind of been kind of a crazy video but hopefully you got something out of this talked a little bit about complex numbers imaginary numbers looked at how to set pixels according to what the properties of iterating those numbers happen over a plane of XY values and looked at a little bit of how we can manipulate it with sliders and what I would love to see from you if you watch this video and want to make something with it look at the code think of a more thoughtful way of adjusting the range of doing a zoom a more thoughtful way of coloring a more thoughtful way of exploring how what this algorithm can do and in the next video someday I will not make this till next week I'm going to look at what it means to create something called the Julia set which are little fractal patterns that are kind of like leaves or branches coming off of the mandal BR set and'll look at those in the next uh fractal bandal BR Julia said coding challenge video thanks for watching