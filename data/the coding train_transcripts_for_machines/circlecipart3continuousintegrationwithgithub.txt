(bell dings) Hello, again; I'm back. In my previous video in this series about unit testing and continuous integration, I got all the way up to the point where I wrote the test, and I ran the test through npm test, and then the test passed. Now, this video series is sponsored by CircleCI. Link to find out more about CircleCI right here, because the goal that I have for this series is to show that once, all I've done so far is this piece. Once I've written my test locally using Node for some JavaScript thing that I'm working on, I want to put that code up on GitHub and integrate it with CircleCI so that the test that I could run locally will run automatically here. Now I still might want to, it's still a good practice to run the test locally. Like, why push something to GitHub that I know isn't going to work? I might as well test it, but the point is, if I'm collaborating with lots of other people, somebody might forget to run the test, not know how to run the test, and this is going to make the, hopefully, the open source contribution process a bit friendlier and instill confidence and happiness in the open source contributor. I hope it does that. That's what I, that's what I would like in life. Okay, happiness and confidence. You know, maybe 30% of one of those. Anyway, so here we are. So let's, how am I going to do this? Now. You might not be aware of this, but I can, I don't need GitHub at all, if I just want to use version control on Git. I can just use version control on Git right here with Terminal on my computer, and just like I said, npm init to create a Node project, package.json, .json file. I'm going to say git init. I think that's right. Sometimes, you know. Ah, initialized empty GitHub repository in TestingTestTest/.git/. Now, one thing that I definitely want to do here is I want to create a new file called .gitignore. Now, this is a bit of an aside, but it is sort of important. .gitignore file is a file where I can put names of things that I don't want to be a part of the repository when I push it up to GitHub. Like, I might need those files locally, so if something had passwords in it or secret API keys, those would be things that I don't want to push up to GitHub. But in this case, I actually just don't want to send up the Node modules, like, whoops, modules. Like, if I have, in package.json, I'm using this devDependencies jest to run the tests, and if I go into node_modules, it's like a huge amount of folders and files. Those things are not my code, it's not even, those will get installed separately whenever I put it somewhere else on the server. So I really don't want those things to be committed. I also might as well say, because I'm on this ridiculous Macintosh machine which makes these .DS_Store files, which, by the way, are my initials, DS, which kind of freaks me out. Like, is this all these computers, all about my store in some weird way? Anyway, I don't know. A little freaked out. And then, I don't know, I don't know what this, I forgot what this package.lock file is. I'm going to, I'm just going to ignore that too. So I don't want these files. And now, I can say git status to sort of see what's going on. And we can see, aha, these are the untracked files. These are the files that are part of my GitHub repository. So I am now going to say git add ., 'cause I want to add everything. Then I'm going to say git commit, starting a new project about testing with tests and also more tests, okay. So I commit that, and then I say git push origin master, right? Doot, doot, doot, doot, doo, boom, boom, boom, wow. Of course I can't say git push origin master. I just made this nice git repository on my computer. It doesn't know what master is, origin, any of this stuff. So, in order for me to do that, I need to create the repository on GitHub. So I'm going to go, I'm on GitHub. I'm logged in to my Daniel Shiffman account. And, but I'm going to create a new repository, and this repository's going to be called TestingTestTest. It is all about testing with test, also tests. Then, I'm not going to do this initialize repository with a README. I don't need the .gitignore 'cause I did that myself, and I want to, ooh, owner. I want to put this, now, this doesn't really matter so much to you, but I'm going to put this in the CodingTrain organization to make it easier for you to find perhaps, rather than in my own account. And then I'm going to say create repository, and the nice thing about this is it's giving me this command. I kind of did this stuff already. Like, I created the repository locally on my computer. Usually, by the way, my other videos, I just make the repository on GitHub and then it's empty and I clone it to my computer to add stuff, but I'm just showing you a different way of doing this. Like, I made it already. Now I'm going to link it up with GitHub. So I can just grab this command right here and I'll paste it into here so you can see it. So the idea here is that I'm saying, hey, remote, I want to add a remote repository for this repository on my computer, remote location for this repository. I'm going to call it origin, and this is its URL, git@github.comCodingTrainTestingTestTestTest. Now, I have my, this computer already set up with like, special keys to be logged in and all that sort of thing. That's a whole separate topic. But if you have that, I can make a video about that I suppose if I need to. But this might, you might have some permissions issues if you haven't set that up yet. Okay, here we go. Oh, so that looks like it did that, and now, I should be able to say git push origin master. (retro instrumental music) Okay, that was fast. It finished before I could get the waiting music on. So there it is. Now it's there, I can go back to GitHub, I can hit refresh, and we can see all the code is there now. You know what, it's really a good idea to have a README, and I agree, so I'm going to use this nice little button that says add a README, and I should put more in the README, which I will do later. But I'm just going to commit directly to the master branch. (Daniel gasps) I committed! (dramatic instrumental music) Directly to the master branch! I do that all the time, in every project, but apparently, there are other ways of working. So, I'm actually going to make it, the next step is I'm not going to be allowed to do that anymore. I can't just commit stuff directly to the master branch, the sort of published, finished version without running those tests first. So, the README is there. Now, (Daniel claps) so, where are we? If I look back at my diagram, we have now checked off this much. We have now pushed it to GitHub, so we've checked off this much, and anybody watching this, most of you are probably watching this as a recorded video tutorial, but I'm actually doing this live at the moment. So, not yet, but in a moment, you can start submitting your pull requests to this repository, because I'm going to, and please be nice. Be nice about it, (Daniel laughs) and be on your best behavior, and I am going to, I probably shouldn't have said that. I'm going to, your pull requests, tests will be run on them. All right. So, I need to link this now to, why I'm here in the first place, CircleCI. So CircleCI is a company that provides as a service continuous integration, and how do I get that? I'm going to go to Go to app. So I'm at circleci.com. You can start by going to this URL. And I'm going to go to app. Now, I'm already logged in. So let me actually log out, 'cause I think this will be useful. So, you probably want to do Sign Up. Let's just click that for a second. And sign up with GitHub. That's what I did. I think I could probably just log in since I already have an account, but, so I'm going to go to log in, and I'm going to just click Log in with GitHub. So both should work just fine. I log in, and now, I am in my CircleCI dashboard. Interestingly enough, I have no projects. I'm going to go over here to projects, and it says CodingTrain has no projects building on CircleCI. That's because I don't actually know anything about this or do this. I'm just trying to learn it this week and make a video tutorial about it. But I'm going to more in the future. I'm very excited about it. So what I want to do is I want to add a project. I want to add a project, and then, hmm, no, no, this is, oh, there it is, TestingTestTest. Huh, that's what I want to add. Now, I should show, I should go back over to, oh, it figured out already. So I could have gone to other, like, I am a member of the ITPNYU organization, which is where I teach, the Processing Foundation, there's me. So luckily, I didn't realize this, it's already defaulting to CodingTrain. So if you don't see the project that you're looking for here, the GitHub repository, it could be because you're actually not in the correct organization or account. But I am, so I'm going to go to TestingTestTest and hit Set up project. Now, I want to use the 2.0 version of CircleCI, because it's new. It says new there, and I hear it's great. (Daniel laughs) Oh, it has something called Docker. So this is another little piece that I got to put into this puzzle. What is this Docker thing? We'll talk about that in a second. Come back over here, all right. And I'm going to pick my language. I am using Node. Oh, beautiful. It, wow, did it just like, know that already because of the code that's in there? It probably did. And then, it's going to give me some instructions. Create a folder named .circleci and add the file config.yml. So, this is what you need to do. CircleCI can see your GitHub repository, because you've integrated them. But, it doesn't know what to do, like, what, am I supposed to run a test? Like, what does he want me to do? So, in order to tell it, I'm going to go back to my repository. I'm going to create, whoops, not a new file. Shoot. I'm going to create a new folder. This folder has to be called .circleci, and it, inside that folder, I need a file called config.yml. So that, .yml is a format, much like .xml or .json, and it is, I believe, called yeml. So now, what I could do actually is just like, there's a sample. So CircleCI is nice enough to provide me with a sample. I'm just going to use that sample, but I'm actually going to simplify it after I use it. So I'm going to copy it to clipboard, and I'm going to paste it in here, and I am going to, I'm going to delete a bunch of stuff. Okay, I want to do this. Okay, I think I've got what I want. So I make, you know, I'll try to return back to that file at some point to look at some of the other pieces there. Okay, so this is the .yml format that is giving, much like package.json has all the configuration information for, for my Node project, config.yml has all the configuration information for CircleCI. And these are the things that I want to do. The jobs that I want to do is I want to build my project, and I want to build it using this image with Docker. What is that image? So this is what's exciting. Docker is not something that I've used at all in any tutorial before, but Docker is, and somebody correct me if I'm wrong here, but Docker provides a way of having this like, selfcontained environment that has no nothing, external setup yet, right? So I can say, like, hey, this is this clean, new environment. It's going to install node, install the packages, run the code from scratch. So I couldn't, so, in other words, if by accident, a package is installed but I don't have it in my configuration file and I wasn't using something like Docker, I could not realize that my code's actually broken, but it kind of runs by accident over here for some arbitrary reason. So Docker is a way of saying like, let me start with this Docker image, this environment, standalone environment, and the one that I'm using is I want any Node. And maybe what I should do probably is if I go onto my, back to Terminal, if I say node v, I'm using 8.9.0, so maybe I would say, like, hey, why don't you give me 8.9., is it zero, or is it 10? Yeah, zero. So, I think that'll be fine. But, you know, you might want to, that's another thing you deal with, which version of Node you're using, and then, in order to know that my code works, I just need to run npm install, because I need to get all those packages, and I need to run npm test. And this, by the way, is going to make it run very slow, 'cause npm install takes a while to install lots of packages, and I have to install fresh every single time CircleCI runs it. And there's ways of caching it, and probably a lot of that has to do with what I deleted out of there. We can come back to that later. But I want you to just see, this is the very, very basic idea. I should also point out that this working_directory I think is actually unnecessary for a basic example, but if you need to, 'cause it's going to probably just default to my root project directory, but if I need to be specific about directories, I could use that potentially. Okay, so let's leave that there, and now, what I'm going to do is I'm going to say git status. Oh, and by the way, (Daniel laughs) somebody in the chat told me that it's actually probably a good idea to have the package.lock file, 'cause it has some important metadata in it. So let me put that back while I'm doing this. And I'm going to say git status, and I'm going to, I'm going to say git add everything, git commit, adding CircleCI and packagelock.json for no good reason. I'm going to do that. Okay, now, I'm going to say git push origin. (dramatic instrumental music) (Daniel laughs) Ah, it rejected! Oh, oh, well, so why did that happen? So this actually happened, I was excited for things to get rejected later, but the reason why this happened now is I forgot that I added this README file on GitHub, so my local repository doesn't have that change yet. So I better pull that README file and now, (Daniel laughs) it put me into some text in there, and I just said colon, return, like, instinctively, and I'm going to now say git push origin master, all right. (Daniel claps) So now I have sent everything up to GitHub. So, what do I have now? I've done this. I've sent it up to GitHub, and in theory, I'm like, linked somehow with CircleCI. Huh. Let's see, what else do I need to do? There's a bunch of steps I want to do, but I'm just curious. What else do I need to do actually, technically speaking? So if I go back here, oh, well, I want to stay Start building. So I might be ready now. Did I follow all these steps? I updated the .yml file. I pushed the change to GitHub. And now I can click Start building, so I'm going to do that. Oh, my goodness, ah, ooh, it's running. (retro instrumental music) It ran npm install, it ran test, oh. (buzzer sounds) Okay, so, I missed, the reason why it failed is I missed a really important step here. In my trying to make that file simpler, I missed a very important step, which is that I need to checkout. So, what the first thing I need to do is check out the current code from the repository before I run npm install and npm test. So it ran those things, 'cause that's what written here, but it didn't actually grab the repository from GitHub. So, now, let's try this one more time. So what I should be able to do is I should be able to say git status, just to check. Okay, the only thing I did was modify my config file, git add, git commit, forgot the checkout step, and git push origin master. And now, if we go here, now, it should, if I go back to here, it's actually running already. So it's automatically, any time I push something to GitHub, it's already linked, and it's running this. So I can go in here and wait. (retro instrumental music) Yeah, you can see now, it's, whoo! It did it. So look at that. Adds one plus two equals three, passed in four milliseconds! Test suite, one passed, tests, one passed, total time, ran all the test suites! (train whistles) Oh, that was the wrong sound effect, but whatever, kind of works. All right, so this works. (Daniel claps) Wonderful, wonderful. Now, just for the sake of argument, let me, ooh, no, no, no, let's, so let's now go and protect ourselves. Let's do this last step. So, I do have the test running on CircleCI, but what I want to do now is I want, on GitHub, I want to say protect master. I want to make it so that you cannot push any code to master, at all, and you cannot merge any code to master without the tests having run and passed first. So let's go do that. So that is something I have to do through the GitHub interface. So I go back to the project, and I'm going to go to Settings, and I'm going to go to Branches. And right here, what I want to do is under Protected branches, I want to protect master. And I'm going to do a bunch of things. I'm going to click Protect this branch. I'm going to say, I'm not going to require pull request reviews right now. That could be interesting. But I'm going to require status checks, and I want to make sure, look at this right down here, that my CircleCI status checks run, and then, I also want to do Include administrators. So, even me, as the administrator of this project, cannot do anything without those tests running. So, I'm going to hit Save changes. I am going to put in my password, and now, what I'm going to do is I'm going to make a change in my code. I'm now going to work on my code, doot de doot de doo, oh, a plus b plus 42. That's definitely going to be a good change to my code, yay. And now what I'm going to do is git add, git commit, I know a better way to add two numbers. And I'm going to say git push origin (Daniel gasps) master! Aha, yes, good, okay. So it says protected. It did not let me do that. Protected branch update failed, required status check. So it did not do that. So now what I'm going to do is I'm going to say, okay, I'm going to say git push origin master. So what I could do is I could branch here on my computer and then create a new branch and move that and do the change there and push it, but this is a nice, easy way of doing it. Git push origin masterlivecodingtrain. So this is a new branch that I'm calling livecodingtrain. I want that to be the branch on GitHub, and I'm going to take my master branch for my localy self and push it up to GitHub. And I'm going to do this, and so that, it had no problem having me do. Then, I'm going to go here. Look at this, already, less that an minute ago, it says, huh, you recently pushed branches livecodingtrain less than a minute ago. Let me compare and pull request. So, I know a better way to add two numbers. Seriously, I really do. It involves the number 42. So, you know, obviously, good practice in writing thoughtful messages and everything in your pull requests. I'm being silly here. I'm going to hit Create pull requests, and now look at this. It already ran, wow, it already ran the test. I took so long talking and like, blah, blah, blah, that it actually probably ran the test even before I did the pull request. So look at this. Required, the test failed. And so, this is disabled. I cannot merge this pull request. I can press this button as much as I want, but the test has failed. And I can even go under here under details. I can probably, I can do this. It's going to take me directly to CircleCI, and I can look that it expected the number three but received the number 45. So I don't think that if you click on that under more details, you would be able to get here, but because me as the administrator and the owner of this CircleCI account, I can see what actually caused this pull request to fail. So, now I can, now I realize, it was the number 42. I can say git add, git commit, fixing the adding numbers thing, and then I can say, git push origin master, what did I call it, livecodingtrain? So I'm going to push this change that I made locally on my master to CodingTrain, and we should see now, live, in the page, ah, come on, get there quick! Shoot, where is it? Ah! It's running the checks again. (retro instrumental music) Come on, do the test. (Daniel claps) So, one pending check, one pending check! I added some new commits. You can see my new commit here. It's there. Please work, please work, please work, please, please work, please, please, work. (Daniel whistles) Ah! (Daniel laughs) (triumphant music) So now, all the checks have passed. This branch has no conflicts. I can show all checks. I can see it there. I can click on the details. But now, I can simply merge this pull request, and it is now done. All right, there was a little edit point there while I waited to let you meet people from the community who are watching this live, you, except for this moment in time right now are not watching this live, and there are some pull requests here. So we can see here by the way, some of this yellow means the status of the test is waiting to be reported, and this means the test ran and test passed. So let's look at this, meiamsome. Let's look at what's been changed. So, this, first of all, interestingly enough, there is, this is some nice things we can learn about better programming than I do here, that a product function was added to return the product of a and b, and then module.exports was made into an object so you could get the sum, which is the sum function, or the product, which is the product function, and then, look at this! Const { sum, prod } = require('.sketch'). So this is a nice way of importing multiple functions. And we have here then a test of that. So, let's actually, let's run this pull request. I mean, we don't need to run this pull request. Let's merge it, looks great. So I'm going to say all checks have passed, looks great. So I'm going to comment, and I'm going to merge, and then I can go back to my pull request page, (Daniel laughs) and we can see evil pull request. So I'm not going to keep going through all these. It'd be interesting to see, you know, it's very slow to run all of them, because so many pull requests came in all at once, which is probably unlikely in a real scenario, but it also, it has to run npm install every single time, and there is a way that that could be cached, if you look at the sort of full sample config.yml file. All right, so I will review all of these later and merge them. So what's left to do? I think I've shown you the full picture. I'm going to do one other video where I set, almost in a way do this again, but I'm going to set this up for a real, open source project that I'm developing, and I'm going to just add maybe one test to it, and then I'm going to ask the community to contribute more tests to it. So I'll do that in the next video, because it relates to the neural network machine learning project that I'm working on. Okay, I took another break, and boy, have the pull requests been coming in. It's kind of amazing. But you'll notice, every single one of these is waiting, waiting, waiting. Strangely, I just showed you how I merged meiamsome's. Well, I forgot that meiamsome is a member of the CodingTrain organization. So meiamsome was able to make a branch within the coding, within TestingTestTest itself rather than a fork of TestingTestTest. That's a little bit of a subtle distinction here, but all of you watching, all of these, have made your own fork and then submitted the pull request from there, and there's actually a setting inside, if, so, if I'm on my TestingTestTest project and I go here to Settings and I go to Advanced Settings, Build forked pull requests. This is what I need to click to on. So in this sense, if you're only working, working in a private repo or repo where only people with some sort of permissions are making changes, but if you're accepting contributions from the community at large, you're going to want to have this be on. So I'm going to click this as on. I think it'll dynamically save? Let's see. Let's see, if I refresh here, if it starts running some of these status checks. Okay, we can see that these test are now running. We can see evil pull request somehow passed the test. I think some of them probably won't run until, now, let's see, required, let's, I think it, so, and we can go, we can go and look in CircleCI. We can see here's a queue of all the different tests that are running. This one's running now, pull request number 22, failed, rebuild, I could rebuild that one. So we can see, now, I should be able to look through all of my pull requests, and we can see, ah, yeah, it's just running them in some order. It's going to take a while to run all of them. Okay, great. So, I think I finished this video. I think I already finished it earlier, and then I came back and kept going. But hopefully, you've seen all of the basics now, right? You've seen how it is you can write some JavaScript code, how it is you can make a Node project that can run some tests for you using Jest. You can push all your code to GitHub, integrate it with CircleCI so that any time somebody makes a pull request to your project, which is protected, you run the test, and you can see whether those test passed before you merge the code. All right, so I want to try to do another video where I'll look at a slightly more realworld scenario where I'm going to push my matrix math library to GitHub and put all this together, and then solicit contributions for tests and the like from the community. Okay, thanks for watching. (upbeat electronic music) (bell dings)