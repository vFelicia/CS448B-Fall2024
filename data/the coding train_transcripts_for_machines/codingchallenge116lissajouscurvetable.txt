(train whistle) Hello, welcome to a coding challenge. In this coding challenge, I am going to make this. Actually, I already made it. That's what I made. It's called a Lissajous table. I got inspired by this by some things I'll talk about in a second. This one was made with Processing, which is a Javabased environment, but I've also made a java script version of it that you can watch in a separate video where I port it. So I hope you enjoy this coding challenge where I program this thing and make some exciting, cool, weird, wacky, beautiful, strange, animated art with it, okay? Goodbye, see you soon. (train whistle) Okay, welcome to the Lissajous coding challenge. Now, I want to talk about where this idea came from. This is not a new idea. This is a 19th century idea. But I was reminded of it by this wonderful video from Standup Math's YouTube channel. Matt Parker actually created a mechanical version of this particular pattern and Matt Parker's video referenced these two wonderful gifs, one from Julio Mulero on Twitter, and then this one here from Vincent Pantaloni. And these are really satisfying, fun patterns. You can say, what's going on here? There's a circle, there's a dot moving around it, the dots moving around the circles are at different speeds and it's tracing a path and look what's going on. So how do you program this thing? This is exactly what I'm going to do, and I'm going to do it in (bell dings) Processing. Now Processing is a javabased programing environment for sketching and creating graphics. You can do a lot more with it too. More information about Processing in the video's description, and then I will also be making a java script version of this that you can refer to. Actually, I might just do that in a whole separate video. So anyway, okay, let's get started. So the first thing I want to do is I'm going to make a nice window, 800 by 800, and I'm going to give it a black background. Now I need to think. Thinking is what I need to do. Let's do some planning. The idea is that we have a table. So if we look at that, we can see there's a bunch of columns, let's just start with four I'm envisioning this giant Lissajous table that we're going to make at the end. Four columns and four rows. And each one of these is going to show an oscillating pattern. So some things you're going to want to know about are the sin function. The sin function is a trigonometric function which oscillates a number between negative one and one. I mean, it's the sin of a particular angle in a right triangle is a ratio of the opposite angle over the hypotenuse, the length of those two things. So this is an important concept. And you're also going to want to know about polar coordinates, and the idea also of Cartesian coordinates. These are things that I use in almost all of my videos. Just learning to program in Processing is an exercise in understanding Cartesian coordinate systems because that's what you're drawing into. But a polar coordinate system is a way of saying okay, I want to, if I have a radius of a circle and an angle how can I describe a point outside the circle? So in other words, if I could figure out what the radius of each one of these circles are, and then have this point travel around it circularly, and this would go at 1x speed, this would go at 2x speed, this would go at 3x speed, this would go at 4x speed, integer, whole numbers. 'Course you can experiment with other stuff too. And then I do the same exact thing over here. 2x, 3x, 4x, and then here I need to get an xcoordinate. Why don't I get the xcoordinate from whatever this happens to be? So the xcoordinate is oscillating back and forth. Why don't I get the ycoordinate from where this happens to be moving around the circle, so it's oscillating up and down. It's really just a result, it's simple harmonic motion. Don't I have a video about that? We're just doing simple harmonic motion on two axis. If they're moving at the same speed, I will get a nice curve like this. If one of them is moving faster than the other, I might get something like this, not exactly, and so on and so forth. So this is what we have to build. Alright, so let's start with just making one row of these things. Alright, how am I going to make a row of these things? First let me start with a single variable called angle. 'Cause that's the variable I want to build. A single variable called angle, I'm going to start that at zero. Then I just need to figure out a little bit about the space that I'm in. And so one thing that I want to think about is what is the size of each one of these boxes, and let's make that 10 pixel or 20 pixels. And what's going on here? We have an 800 by 800 window so let's actually make that 800 pixels. So I'm going to call that w and have that be 80. So it's going to be 10 by 10. And what I want to do now in draw is just say for, oh, and then I need to know how many columns. So the number of columns is the width divided by that size of each box. So if I loop in draw, start at zero, go, haha, I can't type. Go all the way up to columns, i++, and then I just draw an ellipse, some x and some y with some, let's just use 80 right now, some diameter. And the x is what? I times w, and the y is just zero right now. What do I have? So I have those circles up there, and I want them down, shifted over a little bit, so the y is really w divided by 2, and I should be saying no stroke. No, not no stroke. I want the outline, so I say stroke 255 and no fill, so I just want the outline. Okay great. And um, hmm, so that's good. (silly noises) I should move these things over a little bit. So let's also have the x equal to plus w divided by two. Right, 'cause the reference point is the center. That's perfect. But the truth of the matter is the corner, I'm looking over here, that corner up there, when I'm creating this table, the corner is kind of an empty space. So I actually want to start the first one over here, and I actually want to have nine instead of ten. So the number of columns is actually width divided by w minus one and then the x starts at w plus. This is a little bit goofy, but that's good. So that's my top row, and you know, I don't really like this. I want to make the, I'm going to call this diameter d for diameter of these circles, and I'm going to have that be w minus 10, just so there's a little daylight, a little space in between these things. Look how pixally it is. Can I make that look nicer? Okay, anyways, sorry. Now. That's fine. So let's do this. So now, how do I get that point. So if I have this angle for each one of these, and you know what, this is really like center x, circle x, circle y. Center x, center y. It's the center of each one of those circles. Now what I need is an offset, and an offset is where I can suddenly, like, I want to figure out where is this point based on the angle. This angle is increasing. Where is this point along the circle and this is this idea of polar coordinates to Cartesian coordinates. So if I know the radius of this circle and I know this angle, I can use a formula, which says x equals r times cosine of the angle, y equals r times sine of the angle. I'm going to write that down. X equals r times cosine of the angle, theta being a Greek letter that's often used to signify an angle. Y equals r time sine of the angle. Where do these come from? A reference to some other video where I go through this in more detail. But right now, we just want to add that to here. So I'm going to say x equals r times cosine of the angle and y equals r times sine of the angle, and what's r? R equals d divided by 2. That's kind of useful. And then I'm going to say, stroke stays the same. I'm going to make the stroke weight eight. So I'm going to just draw a thicker point by just using point. Point center x plus the x offset, center y plus the y offset. And I'm going to need to say, up here I'm going to need to say this is, I'm going to have to say here stroke weight one. So the old circles get a stroke weight of one, and the points, ah, there we go, look at that. (laughing) You know, technically speaking, I mean this is fine, I could start here, but the point I think, if you look at those other lissajous table images, the point starts at the top. So I think I can just do a little offset here, and again, I should probably be more thoughtful about variable naming and functering, but I'll refactor this later. Tshirt coming soon, for real. Okay so look at that, that's perfect. Now, let's just say angle plus equal 0.01. And there we go, look. All the dots are moving around the circle now. Perfect. The dots are moving around the circle. Let's even do something really fun here, which is stroke 255, let's give it a little alpha and let's draw a line from cx plus x, zero, cx plus x height. So now we can see, oh wait, wait, wait. Stroke weight one. And now we can see, there we go. So now I could also, oh, uh. Stroke 255, uh, I'm going to need to reset the colors everywhere. Okay, there we go. So you can see now I can see those lines which are going to help us as a visual guide as I start to create those curves. Ah, what's the big thing here? The big thing is, remember, is the speed of these needs to increase. This one's going to go around two times as fast, three times as fast, four times as fast. So coming over here, I want to say, oh this is easy. I have a counter, i. So I'm going to say angle times i plus one. 'Cause I don't want to multiply by zero. The zero one gets multiplied by one, et cetera, et cetera. So now we can see, there we go. Oh, this is already fun. I already like this, just like this. Okay. So that's good. Now this really needs refactoring because this I could really think about as a function and I could just do that same function vertically. But I am who I am. I will be who I will be. I will refactor this later, for real, and you will also refactor it yourself as an exercise to improve your programming skills. I'm going to just change this to rows. This is going to be the y, this is going to be the x. And then this is all the same. This is all the same except the line now goes from zero to cy plus y and width to cy plus y, right? What did I do wrong? Did I not even calculate the rows? So I need a variable that is the number of rows, and rows equals height divided by w minus one. And now there we go. So we can see I've built the table. I could stop right here and I could say I'm done. Please finish this. I'm going to keep going 'cause this is going to be fun and exciting. Alright so now, ah! What do I do? How do I, how do I get the curves in here? Well, I see in the chat actually, Hi, this screen's OOP. Can someone explain to me what it's doing? Me too, OOP! Alright, what is OOP? Objectoriented programming. So yes, I probably should have done this. I could refactor this to be objectoriented, even this idea of the columns and rows and the objects that are there, but what I'm going to do is I'm going to make a new tab in Processing, Curve, and I'm going to create a curve class. So the curve class is an object, and the idea for that object is to store the curve that's going to go in each one of these spots. So what does it need to store that curve? I need to store a path. So where am I? Curve, I need to say, what do I need? I need an array list. An array list is a flexibly sized array. If I do this in javascript, I can just make a plain array, and I'm going to fill it with Pvectors. I'm going to call that path. And then I'm going to write the constructor and the path is a new array list, an empty array list. So I'm going to just put points in this path. Points in the path, points in the path, points in the path. Alright? So I could write a function that's just add point, and it gets an x and a y, and then I need to do something like say, path.add new Pvector with that x and y, right? And then, and this would be void. And then I'm going to also write a function to draw it. Show, and I can say stroke 255, and you should be clever and thoughtful about color and fill and all sorts of pretty, different ways of doing this. Stroke weight one, and then I'm going to say for every, and this is a nice way of doing an enhanced loop in java, vector in the path, set a vertex, v.x v.y. This little bit of code right here is no longer relevant, and what am I saying? Begin shape. End shape, and no fill. So this is actually me drawing the path as shape using all of the vertices. Okay. Oh somebody's telling me that the vertical lines are not visible. And I'm not in the Slack channel here. The vertical lines are not, okay two quick fixes I'll make. Alca is telling me that half pi is a global constant in Processing, so if I want it to be, I could use that instead of saying pi divided by two, and you cannot see the lines. Oh that's so sad, the line's are my favorite part. Let's do 150. Just make them much more obvious. Okay, that makes them much more obvious. Hopefully it looks reasonable in the YouTube compression stuff, but we'll see, we'll see. So I'm going back to the curve. I just hit the debugger by accident. Alright so let me autoformat the code. So this should draw me the path. And then, oh tricky. So now where do I want to store all these curves? Well one of the reasons why I wanted to use Processing for this is I just feel so comfortable whenever I have a gridlike structure like this, using a twodimensional array. A twodimensional array isn't really twodimensional. It's just a list of lists, but we can think of it as a twodimensional matrix. See my other video about twodimensional arrays. It's kind of tricky to make those things in java, but absolutely possible. Javascript that is, but in java it's not so tough. So what I can actually do is I can declare, I'm going to call it curves and I can now just say curves equals a new twodimensional array with columns by rows. Now I have always, always, always, whoops. I have to zoom in on this 'cause I got really something to say here. Just fast forward like two or three minutes in this video. I have always programmed like this because Cartesian coordinates are expressed x,y. So I always think if I'm making a twodimensional array, the x's will come first, the y's will come second, but I've been doing so much stuff with matrices recently, and mathematically, matrices are expressed as row by columns, that is the standard. This is probably going to cause me to make all sorts of mistakes and bugs, but right now I'm going to do it. Rows, I'm going to consider the first dimension here rows and the second dimension here columns. So everybody try to help me remember this. You know, sit there and meditate on this and send me your brain waves. That's what I'm going to do. So now, once I've made it, I can just say int i equals zero, i is less than rows, i plus plus. Shouldn't the i, the i should be the, I'm so confused. The i should still be the columns. J should still be the rows. Maybe I should iterate over the j first. Who knows, who knows? How will I live? Curves index j index i equals a new curve. So there we go. I made an object for every single one of those spots. And now here's the thing. Oh I did something so weird here. Because I made, I mean the thing is, if it's a square, columns and rows are going to be the same size, but I kind of want this to work for nonsquare images. So I really do want to refactor this and put these two blocks of code together in one loop. I'm not going to though. Here's what I'll do. I'm going to, if I change this function to void add x, so I make two of them, a separate one for add y. And then after I add the x and the y, I can add the point with both of those, so I need to store, I'm going to say Pvector current. So if I keep a separate variable. Current equals create vector. It doesn't matter what's in it, just zero zero, or nothing, an empty vector. No, not create vector, in Processing it's new Pvector. In P5 in javascript it's create vector. So if I do that, then I can current.x, this is really kind of awful, I can set the x. Maybe this is more like set x. Set y. Then I can say current.y, and I'm sure all of you are thinking of other ways of doing this, which is excellent, and I encourage you to try, write about that in the comments. So if I set both of these, then adding the points can just be add, if you do that at the end, I can say add current. And then I can say add current equals a new, I can just make another empty Pvector. So I can do that over and over again. Let's think about this. In other words, what I want to do is basically for this column, I need to set what the x point for all of these. For this row, I need to set the y point for all of these. Okay so in this loop here where I am going through all the columns, now I just need to go through all of the rows for each column and set those x points. So i is going through the columns. So now j will go through the rows. And I'm going to say, I forgot what I'm doing. Curves, curves, cannot type, curves j I.set x, and then what am I doing? I'm setting it to exactly this point. So I go through all of the rows and set the x point for each column. Then I'm going to do exactly the same thing here, down here, but this time I'm going to go through the columns 'cause I'm going through the rows, so for each row, I go through each column, and this is the same, but now it's y, and I want to set the y point. Ah, we've got a problem So I used i here, but I should use j now. So I should be consistent and try to always use j with rows and i with columns, which means these have to change and this has to change. Okay. Great. Okay no errors and now guess what? I'm kind of done, I think, because basically all that I need to do is call add point and show. Once I've set the x and the y, add to the path, then draw the path. So I need a nested loop. Do I have that somewhere? Somewhere I have a nested loop. Yes, right up here already. Let's just actually look at this. Ah, ah, no! Come back to me. I'm going to copy this 'cause I don't feel like typing it, and go all the way to the end. And now instead of, before I made new curves, now I'm just going to say add point and what else? Show. Oh my goodness. Could this be it? Could this be it? Look at that. Ah, there we go. Look, it's the lissajous table. So we're kind of done. Coding challenge finished. Why is there 15 more minutes of this video? 'Cause I kind of want to do a couple more things. Hopefully there's not actually 15 more minutes of this video. I want to do a couple more things. Number one is, it would really be nice, I think it's really nice in one of the gifs if you could sort of highlight that point that's moving along the trail. So I should be able to do that by saying separately stroke weight eight point current.x, current.y. Ah, this isn't going to work. So why is it not there? Because as soon as I added it, I regret, so I don't love this, but I'm just going to move this to down here. Maybe I should put that in a separate function, like a curve, but there we go. Now I can see, I can actually also see the point that it's moving on. That's nice. I don't know if this is going to matter, but I'm on a high density display here. It's being captured with a green screen, so I don't know if this is going to do anything, but it'll look nicer for me. I'm going to change the pixel density of the sketch to two. Oh, not available for this display. So that doesn't make a difference. I would have to unplug it so you can't see it. But that's fine. I am going to use, though, the P2D renderer because what I would like to do now is I would like to use full screen. Let's just be careful about this for a second. I'm going to use the P2D renderer and I'm going to make these much bigger. Let's see what happens. So we can see this is a small lissajous table and I probably want this buffer between them should be a ratio of their size. Maybe it should always be w minus 10% of w or something. Or 0.9 times w would work. Maybe a little bit more. It's so pixely. Okay so I like this. Now. Oh, there's an interesting. So first of all, there's a big problem here. As soon as this one that's above me right now gets all the way to the end, it's just like redoing its points. So one thing I should do, and also is it backwards? I think it's backwards. But I'm getting some big red error there. I got to take a look at this. It's bad, I mean, it's kind of fine. I don't know that it actually matters, but I think in those examples, the dot moves counterclockwise rather than clockwise. This'll be an easy thing for me to fix because I can just do minus equals, but I also want to do something like if angle is less than negative two pi, like it's gone all the way around once, then let me reset it. Maybe I want to save an image of it. So I'm just going to do like curves index i dot reset. Like reset all the curves, and so I could write a function, reset, which would just take the path and clear it I think. Let's have it do it really fast, just to see if that works. So have it go 10 times as fast. It gets all the way around and it clears. Oh. (laughing) You know what? I guess I'm going to have to reset the angle back to zero. That was a bug. So if I do that, now it's going to go all the way around and start over. And you know what I really want to do also is when it does that, let me do save frame lissajous one two three four, so I can save it. They're all going to be the same, so I don't know why I'm doing this over and over again, but that's fine. But I just want to be able to look at it later. Okay. Let's make this, back down, let's go a little nuts here. 20, no that's just crazy. Let's try it. (laughing) You cannot, goodbye, goodbye to, (laughing) Goodbye to YouTube compression algorithm for sure. Alright, that's better. So you can see I can have a really large table. And by the way, you should see here of course, as they're going the same speed, they should be always circles. So you can see these interesting patterns here, based on the ratio of the column to the row. So this really should be divisible more nicely so that it fills out and gives you so much more of a color and stuff like that. I probably should make these dots. Actually also a ratio of the size to the stroke weight, should be a ratio. But let's look at what that error is 'cause people are going to be wondering. Can I please grab this? I have no idea what this is. So somebody will tell me in the comments and I will pin that comment. Let's see if I get that error in P3D. What if I don't use P? Actually it runs kind of fine in P2D. I thought I might need the hardware acceleration to get it going kind of full screen, but this is fine. Save the frame before, oh before I reset the circles. Yeah, but you know what? It actually should be fine, 'cause it's okay to reset the circles without redrawing it. So I'm not redrawing it. So let me make sure it gets all the way through. And by the way, I also probably don't need to save. In the path, I could save every other point. Alright so, come on, let's get all the way to the end. Oh, it's 'cause I'm doing it in P2d, it's getting really slow. I'm doing it in regular. See what I mean? This video was. Here we go. I'll speed this up in post. (high speed music) Okay, so it reset itself, it's going again. And let's go here and let's look, oops, sorry. Let's look in the sketch folder. We see lissajous649.png and there it is. There's our beautiful lissajous table. That's some number of columns by some number of rows. Thank you for watching this coding challenge. Stay tuned, I'm going to do a five minute video where I port this to java script. If you want to watch that, link in the description below. Oh please, make your this.lissajous. Make your own version of this, share it with me, Twitter, Mastadon is the the new place. There'll be some videos talking about that, in the comments and all those kind of stuff. Thanks very much. Goodbye. (upbeat music)