hello toxic lives where are we what are we talking about why are we here we're here to talk about toxic lives first of all we should all just say thank you I'm so glad I live in a world where toxic lives exists exists it is an amazing suite of libraries for processing and in fact if you look at toxic lives which this is toxic libs sitting here in my libraries folder you can see that it is a whole bunch of libraries packaged into one audio utilities color utilities data utilities seem less utility is cool chorim berlin physics volume there's tons of stuff in toxic lives but we're where we are here in this world that we live in and where we're talking to each other through this a strange internet thing we're here to talk about physics engines and simulating physics and so we're only going to look at in this particular set of videos which I think will be about four we're going to look at the verlet physics engine of toxic lives first of all okay so there's a whole bunch of questions that you're you're probably asking yourself I know I'm asking myself a lot of questions number one what is early physics anyway number two didn't we just spend all this time working out a box 2d and that's a physics engine why do I need another physics engine so the truth of the matter is I don't know if any of us needs any physics engine at all in our life but since we're in a place where we decided we do need them we've really now come across kind of three choices we had the well we don't need a physics engine we're just gonna use processing and P vector and figure it all out ourselves we had the oh my god I really need complex collisions now I'm going to look at box 2d and now we have this third physics engine called toxic libs why would you need toxic libs over just with plain old P vector stuff we used to do over Bach CDs so um to start this discussion I guess so I have to say about this and I'm clearly not organized in my thoughts but I made a short list of some of the features that you might want in a physics engine and I want at least our this discussion by thinking through what are these features and what's available in box 2d and what is not available in toxic lips so let's make little columns here this is our box 2d column and this is our toxic column and let's put a check mark or an X depending on whether or not the library has that so box et clearly the reason we want box 2d the reason we love box it is because it has collision geometry check toxic lives does not have collision geometry although there are some tricky ways of getting around getting the feeling of collisions in a toxic libs sketch sometimes we want might we might want to generate a sketch that it has physics in it that's in 3d box 2d is only a 2d engine we cannot do anything in 3d but toxic libs we can do physics in both two dimensions or three dimensions one of the things we looked at a lot with our earlier examples we started the forces model is having a what is an attractive force what is a repulsive force those forces are not built into box 2d but they are built into toxic loops and one of the things that we're gonna see that's really amazing about toxic lives is you can create a body in the toxic lift world and just say it's an attractive body and everything is always just attracted to it that's very different than calculating a force looping through every object in the world checking its distance against that applying the force right we did all of that manually in our earlier examples toxic lives just allows you say that's attractive that's repulsive that's neither etc etc now one of the things we've started to see the value of in box 2d of having things that are connected with joints right what if we want two things to have a kind of springy connection what if we linked a whole bunch of those together we have this string or this blanket simulation there are lots of things we can do by creating these systems of connected elements toxic little okay so we can do both of these in box 2d and toxic libs but this is what toxic lips is really awesome at it has a whole set of spring classes with different constraints and different features the ladder you connect objects together what we're gonna call in toxic lubes particles and then there we saw in box 2d that there's lots of other joints revolute joint mouse joint gear joint pulley joined etc etc those are in boxy D but they are not in toxic lives so really I'm kind of missing another thing here though which is a big open question I mean you might say like okay well the only things that toxic lips has that box2d doesn't or this 3d physics and thus attraction and repulsion but one thing people are applauding in the hallway for something that's clearly not me one thing that I'm gonna just right served easeofuse in parentheses designed for processing and in this case I would give box to take like a score on a one to ten of like I don't I don't want to be mean to boxing let's give it a six and let's give toxic lips a ten so toxic lips is just so easy to use in processing it's made for processing the world√≠s pixels it thinks of pixels up is up and down is down where's boxy you remember we had all those classes and converting and me this this coordinate system in that coordinate system so one of the great things about toxic lives we've been talking for five minutes already about it is that it is going to be very easy for us to use and it does Springs ooo so well so if you're walking through life and you're asking yourself the question I have a project and I want to make it what should I use again if you are really talking about collisions you should probably use box2d if you're in two dimensions if you're talking about all sorts of stuff that's connected with Springs and this network mesh of a force directed graph cool this is connected to that and it's springy and pulley and pushy and Acuras I should really edit this part blah blah blah with my magical editing engine that makes all these videos better and also like it's rid of the imperfections on my face but you should use toxic libs so toxic lips is really great what we're gonna see it's for particle simulations and particles that have connections as Springs what are some examples of this this is what I really should be getting to let's think about like so what are some classic examples of things that you could see in the toxic lips ver like physics engine here whoops so here is one that I think is a kind of classic example of a great use of toxic libs I'll just zoom in on this a little bit but you can see here we have mesh what is that mesh each one of those points in this mesh is a particle each particle is connected to another particle with a spring in this gridlike pattern and what happens there is we get this blanket and I'm now adding a repulsive force right which is built in I can repel it with the mouse and you can see look at this this kind of cloth imagine texturing images over that imagine allowing it to break apart imagine all sorts of things you can do by creating these types of connected systems another great example of just seeing having this kind of attraction repulsion for free this is one of the examples that comes with toxic libs as you can see each one of these particles is is hosting naturally but is repelled by every other particle and look what they're doing they're kind of piling up on each other and with this kind of simple repulsive behavior if I add an attraction behavior in here we can see we almost have this nice fluid like stimulation and this is very little code right we could do this without toxic lives but what toxic lives is is a nice place to say I can initialize all these objects I could give them attraction again the repulsion I can give them spring connections and then I can just let them go and this by the way would work in 3d and the other thing would work in 3d too so you can do all this in 3d with 3d geometry which is really very very exciting so the main thing we have to get to in this these videos which I'm going to start doing in the next one is the details of how to actually use toxic lips um I think there's one last point that maybe is worth making in this video that's now about 8 minutes long hopefully we can get this done before 10 minutes snappy snappy is what the hell is this valid physics thing anyway like why is it called verlan physics deep breath okay so here's the thing all along in all of our examples we have been doing something secretly and we haven't bothered to say what we're doing we've been doing something called Euler integration all physics engines I think I think this is true oh I really thought of talking about but I'm gonna say this is true all physics engines need an integration method what is an integration method you say well first of all what is integration okay I think it has to do with something with calculus okay but there's also this thing called differentiation maybe you've saw this maybe someday at some part of your life or somewhere in the universe you took a calculus class and you saw something like DX over DT right the change in X over time that's what velocity is really in our world right we have this idea of velocity X right the change in X Y over time X Y is our position the change in X Y over time is our velocity now why did I bring this up because maybe DX over DT rings a bell is that's what differentiation is differentiation is taking the derivative of position is velocity the change in position over time taking the derivative of velocity is acceleration that's differentiation okay but why are we using integration well where does everything start in our physics engine the very first thing we calculate is a force with Newton's law we know that that force I'm going to fit myself over here that force goes into the acceleration that acceleration modifies velocity and velocity modifies position and then we draw the object at that position on the screen we're doing integration integration is the reverse of differentiation we're starting with a force and we want to know the object's new location its new position that is integration our method for integration is Koide it's called Euler it's fine sometimes there's just moments of awkwardness in these videos where I have to erase something or pause or get confused and like we just have to live with that it's just life I can't help it and you know when we have the crowdsource edits you won't have to listen to all this okay oiler integration what that's what we've been doing oiler integration is saying location and velocity velocity add acceleration perhaps at the other horror so it's fine okay so what's what's interesting about this is that this is incredibly simple we do this once per frame show a frame of animation do this integration show another frame of animation did this integration again right but this is totally not how the real world works right if I were to drop this eraser it doesn't like disappear and reappear here and a second later disappear and reappear here it moves continuously through time and space you know that's what calculus is for to figure out the mathematics of continuous time and space we can just approximate it by saying there's a time one thirtieth of a second we do it but you have to realize that this is very inaccurate so other physics engines box2d use is something called symplectic Euler integration I think you can look it up in the links below that I'll include there's also something called rungekutta there are lots of other methods for getting from acceleration a force to the objects new position this was a very roundabout way I hopefully use toward this video several minutes ago of saying that verlan physics Berlet physics is an implementation of verlet integration Furley integration is another methodology and what's really interesting about verlan integration I will definitely include a link to the sort of seminal paper on Berlin Christian which explains it in more detail is that it is a integration method without velocity velocity does not exist and if you think about it do you really need velocity if you know the object's previous location and its current location you don't need to know its velocity because it's velocities consensually can be extrapolated from the difference between where it is now and where it was previously and so if you look at the verlet integration methodology the algorithm is you know similar to what we're doing in our update method but different in that it doesn't actually include velocity in the algorithm it just uses the previous location in the current location so you know if you want like an advanced exercise is kind of go dive into toxic Lib source take a look at how it works and try to like write your own little verlet physics engine kind of briefly but the point is that we don't need to we have toxic libs and one of the things about early physics which is really terrific it is very fast and it is very well suited for these systems of particles that are connected with Springs so I you know this video is it kind of went on for I think the important thing is to kind of get an overview of toxic libs if you're still watching I didn't really mention where you download it but that that should hopefully be obvious from various links but I will just briefly show you that so you can get toxic libs from toxic libs org which is the website here you just want to go to the download link one thing I should mention which is just kind of I'm doing my duty as a as a servant of processing 2.0 is that all libraries should really be installed through sketch import library add library see this sketch import library add library and now you're gonna see a list of all of these wonderful libraries that you can install and processing however toxic libs happens to be at the moment an exception to this because the library is if you look in the download page it's still from pre 2.0 it works in 2.0 but you will have to download it extract it and put it in your libraries folder and once you do that you will see there it is toxic lips complete to zero in your libraries folder so if you have trouble getting toxic libs downloaded installed I'll write a comment below and hopefully we'll get it sorted out for you so this um this video is done and in the next set of videos we're actually gonna look at the the actual implementation of toxic libs this was how to practice for removal out of practice I have actually made one of these in a couple weeks okay goodbye