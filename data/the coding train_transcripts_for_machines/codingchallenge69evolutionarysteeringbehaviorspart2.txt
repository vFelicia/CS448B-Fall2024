okay hello I'm in part two of my coding challenge where I am attempting to evolve a vehicle triangle thing to eat some green dots and avoid some red tots because I thought that's what my license becomes it's kind of interesting though I'm having a good time okay so where did I where do I last left leave off so right now I have a vehicle that just is attracted to red and green and try to track goes to whatever its nearest to but there is actually a big issue it's going to have an error every once in a while because one thing that I'm doing here I'm surprised that I haven't had a problem yet is that oh I already fixed it no no I didn't fix it this could happen where I delete a certain element from the list and then I seek it afterwards so what I really need to do is if I'm about to eat that dot I don't need to seek it anymore so I only either want to eat it or seek it and it because if I'm eating it and deleting it it might not even be there for me to seek anymore and then also to be honest it's technically possible that there could be no dots and closest could be none number one so I should also just double I should also just negative search could be negative one could be an invalid index so I should also really just check and say also let me make sure that closest is not equal to negative one or maybe I could just say is greater than negative one is fine too so this is really a bit more of error protection here and this might change later because I'm thinking about how I'm going to keep going with this but right now I should only I should either eat and delete it or seek it as long as it actually exists and so now this should run without any errors and what I might do just to kind of test this out is just to be sure let me not add any poison and whoops I probably should I think a good way to just quickly test this is let me not add any poison and let me add a hundred pieces of food and let me just run this and we're going to see very quickly I shouldn't have any errors I suppose there could be an error when it gets to the last one so let me just add two pieces of food one two okay we're good so now we're good this code is working we can keep moving on so now here's the thing let me add ten pieces of food ten pieces of poison and here we are getting now here's the thing for me one of the magical things about working with steering behaviors and this is really where your creative outcomes could come from is that there can be multiple factors at play this is a very primitive demonstration of that there are two factors at play my level of attraction to green dot my level of attraction to red dots those that level of attraction could be weighted it could be positive it could be negative and those things could change over time and they could be different for different vehicles so what I need to add to this and I'm going to try to evolve the appropriate weights for those two forces but what I need to add to this is not not waiting so let's figure out how we're going to do this and my concept here is that those weights are going to be the objects DNA it's genetic information so I'm going to add a variable called this DNA and I'm going to make that an array and yeah I'm going to this is a little bit if you hear but let's do this I'm going to say this DNA index 0 is a rant there's a random number between negative 5 and 5 and this dot DNA index 1 is a random number between negative 5 and 5 okay what's really good about this so now the idea here is the other thing that I really think that I need to do is I think what I want so there's a little bit awkward here is that it's not awkward but I think it's an improvement that I need to make on this is that I really should just use yeah let's use another function I just might not be unnecessary but this might not be necessary but I'm going to I'm going to say apply I'm going to call this apply I'm just call this behaviour I don't like what I'm doing I'm just think about it do we really want another function yeah I'll talk this through for a second because what I could do is I could apply the weight right here I kind of liked the idea of having a separate function and this just returns this returns the steering force and then I'm going to do the weight somewhere else that's what I'm going to do this might not be necessary but I'm going to write another function called behaviors and the idea here let me just sort of sketch this out is I'm going to say this dot food ste I'm going to call it food steer equals something I know there's no this sorry VAR food skier equals something VAR poison steer equals something I want to get what's the steering force for food and poison then I want to say food steer multiply this DNA zero poison steer dot multiply this DNA index one so the idea and then I want to say this dot apply force food steer and that should say apply can you see that code yes you can and this dot apply force poison steer the idea here is and again I don't necessarily need a whole separate function for this but this to me is the magic of working with steering makers imagine if the thing you invent is so much more complex that there are all of these different forces at play in the system that it could cause it to do something at any given moment and they're all weighted differently so I want a function where I calculate all the different steering forces I wait all of them and then I apply all them I can sort of see it in one place so what goes here well honestly what I want to do is I want that to be this eat the food and this dot eat the poison and I'm going to zoom back out here so I need to change the way to eat function works to return the appropriate vector the appropriate force rather than use it there but that and I actually probably should honestly you know how to do I'm going to say good bad I'm gonna give this arguments good bad and then I can also say is fine I'm going to say steer G steer B I'm just going to make this more generic just to you know make these variable names different so because you know you could imagine having different lists doing different things okay so now that I have this that would change the main code to say instead here vehicle behaviors food comma poison the ideas there's one function it gets the food in the poison and it does the stuff in it so let's come refactoring here so now the each function each function here should say return this dot seek so what I want to do is I want to return the vector that comes out of seeking how the seek function doesn't do that so but if if it finds something that it should seek return it if it doesn't I'm just going to say this is rather inefficient but I'm just gonna say return a zero vector so if it's seeking something return that otherwise return a 0 vector if there's no food there's no poison Lehrer vector ok now this function now should instead of applying the force just return the steering force so I altered this I again I'm sure if I thought about this even more or you probably have your own idea of a different way of organizing this but there's this kind of chaining happening here the first thing that happens is this behaviorist function gets called then I say eat this good stuff and what that function does is it runs through this eat algorithm and returns the result of a vector from calculated from the steering force for the closest thing so eat behaviors triggers eat twice and eat triggers seek and then what's returned from seek comes back to eat and get to return back up here okay so now if I run this and let's just make the weights let's make the DNA just for the sake of argument now 1 comma 1 so I should see now that up air poison poison is not defined sketch line 37 because I like to spell poison wrong apparently all the time plus soul poison fish ok so now we should see that it's the same thing was doing before however now if I were to go into the vehicle and say a negative one we should see that it is attracted to let's see this is not optimal we're going to emit it's kind of working but it's it could be that it's so repel right right now it's so repelled by by the poison that it might not be able to actually get find a green thing so we're going to I would evolve it to work out all this stuff pretty well but I think we're in kind of good shape here I'm going to make this a little bit bigger so we can easier to sort of look at and track it ok now let's go back to doing this 5 comma negative 5 and let's run it again so I don't know what weights it has oh oh that's actually I do know what it has let's make it random that's what I meant to do so one thing that I think would be useful is to visualize those weights so that I have an understanding of what it thinks it's doing you can see right now it's eating all the red stuff okay here we are so what I want to add now is I want to visualize those weights so we can see and we can see what's going on so I'm going to go just to the D this shouldn't be too hard of a thing to do because I have this nice display functional and the display function is drawing this triangle and it's rotating the triangle based on an angle in the direction that it's moving so what I want to do let's just see what happens if right here if I add after after the triangle is drawn if I add a line from 0 0 100 0 100 0 and I say stroke 255 okay so you can see there's a line pointing out to the right so I want the line to point out to the front so I'll say from 0 0 to 0 100 now it's pointing out to the back that's fine so what I want to do is actually have this DNA index 0 dot sorry DNA index 0 times let's just multiply it by 10 so between 0 and 50 long and then I want to draw another one index 1 and this if it's I have it in reverse I guess for whatever reason so if it's positive it should be pointing to the front so I should make this negative and so this one DNA 0 is for green dots and DNA index 1 is for red dots so now we should see visually uh okay this DNA the stump is stuck it's not DNA let's run this again okay so we can see here and maybe if I do this randomly a bunch of times maybe between I should multiply it by 20 so that's a bit bigger and you know what I might actually do in fact is draw this before the triangle so it might actually be a bit more effective whoa and then now I should say a stroke 255 let's get the or whatever it is so let's try that okay so we can see and we do this again there we go so now we can see this looks like one that's pretty optimal right it should be attracted to green and not attracted to red but it didn't really do a very good job so now we need to try to evolve this thing we need to evolve what might be some optimal ways what are some steps ok well first of all oh boy let's add a few more things before we get to part three remember one is let's add a bunch of these vehicles so let's go here to the main program instead of having a single variable called vehicle I'm going to say vehicles equals an array then I'm going to say VAR I equals zero I is less than ten because I'm just making ten of everything let's let's create vehicles index I is a new vehicle and what I can also do is give the vehicles random locations to start start at so this year now I should know oh and then here what do I need to do here I need for this to go through and up call these functions on all vehicles so this is a really quick thing just to add an array and we can get rid of this now and run this again and what do I have vehicle is not defined right because this should be vehicles index I vehicles and decide vehicles index I so I'm looping through and calling these functions on all of the vehicles and we can see there's a whole bunch and we could sort of say some of them are doing well so they're not doing well that sort of thing so now let's add something else to this I would like the vehicle as I said earlier the primary mechanic here is health so as they eat the red dot the green dots we should increase their health as they eat the poison not they should decrease their notes so let's now add that to the vehicles so I'm going to add a variable I'm going to call it where are we where are we where are we where are we I'm going to say health this dot health I'm going to give them a health of one so I think it's going to be easiest for me to think about this as their health is some number between zero and one so they have a health of one every frame let's just say their health goes down by a little bit let's just say I don't know what's going to be a good number but every time through update they lose a little bit of health now also when they're eating now here's a tricky thing this is the moment here this is the moment this is the moment of a tick I'm looking over there to watch me type that this is the moment of eating but this is a generic function how do I know if they're eating something good or bad so many ways I could approach this I don't know if I don't know if I'm going to love this right now but I'm going to say I'm going to give this I'm going to give this actually you know what I'm going to love this one negative one so when it eats it eats something and it has kind of like is that good or bad and I'm actually going to I'm actually just going to put so every time it eats maybe a piece of good food its health goes up by 0.1 and every time it eats some bad food is to poison its health goes down by negative point five so let's make the the poison really really bad so now what I could do here is say this dot health plus equals and eat should have I'm going to just call this argument nutrition nutritional value this that health plus equals nutrition so now I mean I don't know what we're not going to see anything different here but in theory they've got this Health's that's changing but this is also something I really need to be able to visually see to understand what's going on so how do I do that one thing that I could do is right here right this is where I am setting the color of the of the what is this thing that's a vehicle so there's a function oh boy this is exciting there's a function in p5 and a processing called lerp color lerp is a word that means linear interpolation and just a diagram this for a second if you could imagine red being over here and green being over here you could imagine all the colors that exist in between red and green and if I said maybe zero means all the way red one means all the way green 0.5 means somewhere in the middle point seven five beans over here this is perfect because I have this house when it's zero it should be red when it's green when what it's health is one it should be fully green so the alert color function if I give it two colors and a percentage it's going to give me that color somewhere in the middle so I'm going to come over here and I'm going to say var gr4 green equals color zero two is probably better way for me to do this but Rd for red is color to 5500 and now I'm going to say var the actual color is lerp color between red and green and this dot health so this should now give me a color in between I couldn't put these directly in here I'm just putting in two separate variables to make it more legible but I am now giving myself a color somewhere between red and green so now I'm going to say fill by the color stroke by the color and now I'm going to run this and we should see they're all green that one's red slowly over time you can see how they're turning red as I eat the poison there we go okay so here's the thing let's just do one more thing before part three what I need to do is I need to say like well what if it what if its health goes all the way down to zero I've got to eliminate it from the world it died so to speak so I'm going to write a function this dead equals function and I'm going to say return I never write code like this but I'm going to do it this dot health is less than zero what this means is this is a boolean expression I could say if this dot health is less than 0 return true but I don't need to say that because this side health less than zero evaluates itself to true or false so return the result of this boolean expression is it less than zero return true if it's not less than zero return false because less than zero true it's dead and then what I'm going to do here in the sketch is I'm going to say if vehicles index I dead vehicles dot splice I comma one so this is me saying if the vehicle health has gone less than zero delete it from the array it's gone from the world it shall live no more a little bit of a problem here which is I have to talk about this from so many different coding challenges in various videos but if I'm going through an array and picking things out of the array as I enter eight through it things start shifting around and I could skip stuff I've got a little bit of an issue here one way to solve this problem is to go through the array backwards I will try to remember in this video's description to link to a video where I actually go through this in detail wipe and there's other solutions to this problem but I'm going to just start at the end of the array go all the way down to zero and say I and now let's watch this go so we should see does anyone survive everything died let's just do something I'm going to do a couple things just till I kind of make this look I'm going to make the vehicles a little bit smaller and I'm also going to add a great deal more health I mean food and add 50 food and only ten poison and let's just see how if any of them do particularly well and kind of live now one thing is the food is going to run out but you can see that one's doing pretty well it died okay so we were close let's add one more thing let's add one more thing before part three let's at least every so often add some more food so I'm going to say if random one if I pick a random number and it's less than 0.05 so five percent of the time let's do the thing where I add a new piece of food and I could put that in a separate function so every so often I'm going to add a new piece of food so there's always new food for these things to eat okay come on so you can see this one has survived so this one and I had some evolution excited for it like go go eat all the food don't die gives it enough so it might need like for itself to go down a little bit less or for the food to actually have a greater nutritional value but you can see this I think we need to tune this a little bit but good enough for now okay so we're close we've got this whole system now we are we have a bunch of vehicles they all get random weights attraction or repulsion and some of them seem to do better but how could I really evolve over time to get the optimal weights and I also need to add I'm going to add another property to these vehicles to make the evolution a bit more interesting and that property which you could do try to add this yourself is how far away can actually see a piece of food what if it ignores food unless it's within a certain distance of site and it ignores poison unless it's within a certain distance of site and some are there some optimal and I suspect based on the fact that I've made something like this before that when I see an interesting result there so anyway I'll be back with part three trying to see if you can add that add two more properties which you can think of it as its perception its food perception and it's it's sorry its food perception and it's poison perception and I'll see you in the next video where I actually add that myself because that's what I'm going to do right now tip for you it's I don't know if could be right now or not or whatever but okay see you soon