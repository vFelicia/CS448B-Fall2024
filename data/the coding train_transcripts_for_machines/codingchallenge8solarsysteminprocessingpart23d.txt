Welcome to part 2 of my Solar System Simulation Generator thing a mabob. So this has turned into a multipart series. I'm probably going to do one or two more. But this part, what I'm going to do, is take this 2D solar system orbiting thing and turn it into 3D. So instead of circles, we're going to have spheres. Instead of rotating just around in a two dimensional plane, we're going to rotate in a three dimensional space. So now, before I get to that, I want to make a couple of small improvements here. I think it could be a little bit more thoughtful about how I pick the sizes of the planets and how I pick how far they are from the thing they're orbiting. So let me dive into the code real quick before I make this 3D version, and just go down to where that happens. That happens here. Every time I make a new planet, it gets a radius that's based on the previous one. They're shrinking, they're, shrinking they're shrinking. And it also gets a distance from the previous one which is some random number. And this is what I could really improve. So one thing that I want to do is say, OK the distance if I wanted it to be perfect I lost my Oh, here it is. Let me go over here. Sorry for the OK, so if I have this planet, and I have this thing orbiting it, if they were exactly touching each other, then their distance would be the two radii the sum of the two radii. So the first thing I could do is just show you that. And I'm going to change this to radius plus r. So let me run this. Now we should see now do you see how the first one worked? I don't know what happened with the second one. Let's think about this. What did I miss here? Oh, the distance. I'm dividing by level. So I should actually just say that. And now you can see that they're in a sort of precise location. Every single circle is rotating around the edge of the other one. It's kind of a nice effect. I almost want to keep it this way. And by the way, you get some really interesting patterns if you drew like, trails where the circles are going. You try that on your own. Just send it to me. But I'm not going to go down that road. But what I'll do is I'll just say why not make distance be random between that exact spot and that distance and that amount times 2? So in other words, I'm saying let's make a random in between where this would be exactly and then this exact amount times 2. So over here. So the planets will orbit somewhere between being exactly touching the original planet, the orbiting the thing and a little further away. OK, so here we go. OK. So now we can see I don't know. I just kind of how this looks better. Everything has kind of a more thoughtful spacing. And I don't know if the ratio of the sizes is good, but we'll get worry about that stuff later. Because what I really want to focus on is moving to 3D. OK. Exciting. Now is the time, 3 minutes into this video, we're going to add 3D. So first thing I'm going to do to add 3D this is going to be a magical thing is I'm just going to go here and I'm going to say 600, 600, P3D. Duh, duh, duh, duh. 3D solar system. There you go. So this is actually now rendering in 3D using processing 3 D renderer. But of course, I'm still just drawing circles, and I'm still just placing everything along that two dimensional plane. But it is important to note that processing one of the reasons I like to use processing is that it lets you sort of blend and blur the lines between 2D and 3D. It gives you all the 2D drawing stuff in 3D. But let's look a little more carefully at this and start going making this even more 3D. So first thing I could do to make this more 3D is instead of drawing an ellipse, I could draw a sphere. So the function to draw a sphere in processing is just the word sphere. And then sphere takes a diameter or radius? I'm not really sure. Let's try radius. So in an ellipse, notice how I said radius times 2, because I know for a fact the ellipse function requires a full diameter as the argument. But I think sphere may be just once a Does this look right to you? Now first of all, it's sort of hard to see what's going on. So first of all, you see what a sphere actually is. Everything in 3D is made up of all of these kind of like polygons and shapes. And you can see it's just this mesh of all these kind of rectangles with a line divided. But it's really like a triangle mesh. But we don't want to see all that. What we want to just see And so one thing that I'll do is here in where I'm drawing it, I want to say no stroke. And I'm going to just say fill 255. And I'm going to do this again. And now look at that. Nothing about this looks 3D because I'm just staring straight at these spheres that are pure white without a texture without some shadowing and lighting. I don't really even see that 3D effect. So one thing I could do just to kind of see the 3D effect is just add the very generic function lights. So lighting in 3D is an interesting and complex topic. And you can have spotlights and directional lights and ambient lights and different colored lights and all sorts of things. I'm going to stay away from that. Maybe someday I'll have the courage to a video about that. But lights the simple lights function just generically adds kind of a wash of light into the scene. And you'll see what that's going to do. So now we can see that now this has the appearance they have the appearance more of spheres. It's very subtle, but there's some shadowing on the spheres based on the lights. Now this is almost like, hey, we're done. I made this simulation in 3D. Look! And in a way it looks kind of 3D. And I could add some camera work and do some other things. But everything is actually happening all on one plane. And what I want to do and I'm going to try to draw a diagram here just to kind of work this out in my head is let's say I have a sphere. What I want to do is arbitrarily now again, I'm not doing anything that has anything to do necessarily with how the actual universe works. I'm just trying to create something that looks kind of interesting and figure out how stuff works in processing. But I want to arbitrarily create a vector out from a particular planet, and create another planet, and then maybe rotate around the planet. So there would be all of this would happen I'm drawing in two dimensional space. So it's very hard to do, and I have no artistic talent whatsoever. So I can't even really draw this well. But you can sort of imagine I want to arbitrarily place a planet out here and have it rotate like this, or one out here and have it rotate like this. So the idea is that I want to make a vector a random vector. So let's do that. And I'm going to go into the planet object. And what I'm going to do is I'm going to add a variable. I'm going to call it v, just for lack of anything else that I can think of right now. I'm going to say v equals p vector dot random 3D. So this here is a particular Oh boy. I'm not in the right place. Sorry, everybody. That was a little awkward moment there. But I don't know. Maybe some like CGI magic can fix that someday. So what I created here is a random 3D vector. So any vector pointing in space that is of length 1. And so then what I want to do is multiply that vector by distance. So in other words, I want to scale it by the distance that it should be. So again, if only I had like, good spherical things here. My fist will be a planet. Then I make a unit vector of length 1 pointing out. And then I want to scale it by some distance that it should be. And now I have another planet out here. Visual aid. Boy, this is quite pathetic. I need props. Somebody send me some props. So then when I'm drawing it, let's look down here. I don't want to translate simply along the xaxis by some distance like I did in 2D. I want to translate by that vector v.xv.y v.z. And what I'm going to do here is I'm going to take out rotation for right now, and just translate. And we can see what's going on here. And you can see that there are a bunch of spheres. And let me fix a few You know what? I'm going to keep going. So let me fix a few things to make this sort of easier to figure out. Number one is if you recall, the planets are picking a random number of moons. So I want to just change that to one. So every planet just has one moon. And I'm also going to have fewer levels. So we can see now that when I run this whoops. What happened here? Time out! Time out! Oops. So I forgot that in the original sun, the original planet has five moons around it. So I just want to have that start with one also. And we can see now that we have something simpler to look at, which is just one sun in the middle, one moon around that, and one moon around that. OK. I'm realizing something. I'm realizing that this would be a lot easier to look at and understand if I could just really quickly like drag the mouse around and like, spin the planets and turn the camera. So even though I intended to do this in a separate video, right in this video right now, I'm going to add something called PeasyCam to this example. So how do you add PeasyCam? PeasyCam is a library. And I'm going to do Sketch, Import Library, Add Library. Oh! PeasyCam is already added. So I've already done that. I don't know when I did that. But by the way, what you'll need to do is here, go to Add Library, search for PeasyCam, click this, and then you'll be able to click Install so that it's installed. And then you shouldn't need to restart processing. But if you run into any issues, just restart processing. So once you have PeasyCam installed, I can do Sketch, Import Library, and just select here PeasyCam. And you can see it added some import statements to the top. A library being something that allows you to bring in additional code that's not part of core processing to call automatic functions. And what PeasyCam does is it automatically adds interactive mouse camera work to your three thing. So then all I need to do is create a PeasyCam or maybe it's just a PeasyObject? No, PeasyCamObject? No. What is it called? Oh, PeasyCam? There we go. PeasyCamObject called Cam. And I'm going to say Cam equals new PeasyCam. And I think I have to say this to refer to this sketch, because it's going to control this sketch's 3D view. And then I give it like, some number which is basically I want the camera automatically to look at the center of the world 000 from 100 units away. So by the way, if I wanted to look at a different part of the world, I could say I want to look at 0, 100, 0. I could add that in as well. But I'm just going to say this comma 100, and I'm going to run it. And now you should see now, where is everything? Oh, it's all weird. So why am I not able to find the stuff and kind of rotate it around it in a way that makes sense? The reason is because I had this extra translate in there, width divided by 2 height divided by 2, so that was my kind of like camera work to just like move the origin to the center of the window. Now that I'm using PeasyCam, I don't need this anymore. I can run this and we can see, oh my goodness. Look at that. There it is. I'm just like, 100 pixels away. And I think if I hit like, Command I can Pan or Control, I can zoom in and out. But this is what I want to see. I want to see something like this really easily. And so what I'm going to do is just start 500 units away, start further away. So now we can see this is what I've got. And you can see now the shadowing. You can see there's each one of these has a this planet has one moon and that planet has one moon. Let's even remove this and just start now with a single moon. So we can see here I have the sun and a single moon. How can I get that moon to rotate around the sun? OK, here's how we're going to do it. Now I'm sure there's some really excellent 3D thoughtful, smart way of doing it. I'm going to do it in a sort of tricky way that I know works, or that I hope works. And I'm going to use something called across product. OK, so let me come over here, and let's talk about the cross product. The cross product is let's say I have two vectors. Here is a vector. Here is another vector. The cross product of two vectors is this a vector that is perpendicular to both of those vectors. So if these were my vectors, I would still also get this particular vector. So the reason why I want to do that is remember, this is the sun, this is the vector where my moon is. And what I want essentially is for that vector to rotate around the sun like this. So what I need essentially is a vector that's perpendicular. Like, I want it to rotate around this axis like this. So in other words, let me try to do this in three dimensional space. I don't know. Props. I have some tissues. They'll be my planets. Here's the sun. I'm going to go I'm a vector. The moon comes out. And then I have my fist is the sun. I have this perpendicular vector I want to rotate I've totally lost myself. I want to I think if you would just imagine or think about what I'm doing, it makes sense because I need I can't rotate if I rotate around this axis, this is just going to spin. This is the vector. If I rotate around that axis, it's just going to spin, like this. I want that whole vector to rotate. So I need a perpendicular vector to rotate around. If this makes any sense to anybody, then I'm I'll be surprised and very pleased should practice explaining that. So how do I get a perpendicular vector? So right here, what I want to do is make another vector. I'm going to call it p for perpendicular. I'm going to make a p vector v. And I want to say v dot cross. So to get a perpendicular vector, I want to take the cross product with something. Well, what should I take the cross product with? Honestly, I could be smart about how I'm doing this. But if I just pick some arbitrary there's a lot of in threedimensional space, there's a lot of vectors that are perpendicular to this vector. This one's perpendicular. This one's perpendicular. This one's perpendicular. This one's perpendicular. Any of these vectors are perpendicular. So I just want to get an arbitrary one. So if I have some other vector, I'll get something and I do the cross product, I'll get a perpendicular one. So what I'll do is just say v2 equals new PVector. And I'm going to just arbitrarily pick a vector that points straight out. And you know what? Maybe I'll actually just pick something arbitrary. And I'm going to make p the cross product of v, the vector that is actually coming out from this planet to where out from the sun to where this planet should be. And now I've got some perpendicular vector. And now I can use something here. I can use processing's rotate function. In 3D, you can say an arbitrary axis I want to rotate around. So if this is the xaxis, rotating around the xaxis would be like this. If this is the yaxis, rotating around the yaxis would be like this. Z rotating around the zaxis would be like this. So the functions "rotate x" rotates around this axis. "Rotate y" rotates around this axis. "Rotate z" rotates around this axis. But if you want to rotate around this axis, you just need to give it the vector and then the angle. And what's the vector I want? The one that's perpendicular to the planet sticking out. So I'm going to say rotate p dot x, p dot y, p dot z. So rotate around the vector from the x, y, and z by an angle. And let's run this now and hope we get something that looks right. Am I not increasing the angle? I don't think oh, no. The angle is increasing. What did I miss? [LAUGHING] Timeout, everybody. Let me look. Let's look. Is angle first? There we go. So the angle is the first argument. So look at this. Now I have this planet perfectly orbiting this other one so lovely. Now, let me just to be clear, let me draw these two vectors so you can see what's going on because I think this will make things make a little bit more sense. So let me draw a line from 0, 0, 0, v, x, v, y, v, z. Let me draw that. And do I I guess I need to give it a stroke here. And I should say noStroke down here. And let me just get the stuff where it should be going. Can you see it? It's very hard to see it in there because it's not the planet's not very far out. So let me draw it longer so you can see it and multiply that vector by 10. There. You can see that is the vector that is controlling where that planet is. Now, let's draw the other one, the perpendicular one. This is the axis around which I'm rotating. And now you can see that's the axis around which it's rotating. It's a vector that's perpendicular to that one. So this is just a quick and dirty way to get a sphere arbitrarily rotating around another sphere at some arbitrary axis that's random. So again, you might have some other algorithm by which you want to calculate this stuff. The cross product that I picked is just some arbitrary vector. I probably could be more thoughtful about that. But this works. So now we can start doing a couple of things. One is let's make sure this is really working by adding [VOCALIZING] where do we pick let's add another level. And you can see now, in addition, this one now has this this other smaller one is rotating around that one. And you see all of the perpendicular vectors. Maybe what I'll do right now is get rid of this times 10 thing. And you might still be able to, hopefully, see everything. You can see these vectors here. And maybe let's get rid of I'm lost in my own but this has become fascinating to me. And I forgot that I'm recording a video, talking to anybody. And I'm like, oh, let me try this. But it's useful, I think, to see the lines drawing the vectors. But the point of this, really, is to do what? Is to not have these lines and to just see these planets arbitrarily orbiting each other. So now you can see here we go. And I can whoops. I can zoom in and out to get a closer look. And now I'm going to do the exciting moment. How long have I been recording this? Maybe 20 minutes or so. I'm going to do the exciting moment where the whole point of doing this was to allow each planet to have a bunch of things. So for example, what if I give it the first sun to have two moons orbiting it? You can see now we've got something a little more interesting here. And you can see that the rotations are could be weird enough that you could start to it almost looks the speeds could be very slow. The way one is rotating around another while the other one is rotating could make it have this optical illusion of not rotating. But I can assure you that if we that everything is rotating around everything else. And then I can also let's give it a 4 to start with. And then let's also allow them, when we when they create their moons, to do what? To have a random number between 0 let's not give them too many and 2. So we can see now look what we've got here. We've got a nice system of many planets orbiting other planets. Everything's spaced out. And everything's at random angles along random axes. So hopefully, this gives you the idea of how to get started with creating a threedimensional nested solar system where you have a sphere with spheres rotating around it with other spheres rotating around it and with other spheres rotating around it. And this code you can find if you look in the description of this video, you'll find the code for this. And what I'm going to do in part 3 is I'm going to add textures to these planets. So I'm going to show you how you can draw the spheres with other textures and maybe put a background or something else like that to make it feel more spacey. Thanks for watching.