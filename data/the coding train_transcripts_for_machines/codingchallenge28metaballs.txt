hello and welcome to another coding challenge in this coding challenge I'm going to take a look at netball bet meta balls I'm just so afraid of saying meatballs but so far I haven't done it except for the fact that I just said it but anyway I'm going to explore meta balls which is also a concept known as isosurfaces and I'm going to look at it in just 2d and I'm going to use the pixel based approach where I'm going to generate this by processing every pixel of a window I'm going to do this in processing which is a Java based programming creative programming environment I will also release JavaScript code that goes along with it and at some point I might hopefully do it geometry based or make you like this fancy like shader thing we'll see but right now I'm going to create this from scratch and I'm going to talk through also what is this isosurface meta ball thing okay so first let's come over here and talk about how this is going to work the idea of an isosurface is basically a twodimensional surface like a canvas and a canvas a window a computer graphics window has a whole lot of XY points and the idea here is that the color of a given point is a function of x and y so I want to create a function of x and y equal to something and whatever this is I want to use the result of that mathematical function to color that pixel so for example I could just say it's equal to X or I could say it's equal to X plus y or I could say it's the color somehow based on its distance from the center let's just look at sort of that basic idea first in code so if I come over here and I'm going to close this finished example I'm going to minimize the browser here oops lots of things are going on and what I'm going to do now is first just say load pixels I hope you can this font is good enough let make it a little bit bigger actually I shouldn't be doing this live that didn't work whatever update pixels and what I'm going to do is say I need two loops so I want some loops to look at every single X and then I want that same loop but to look at every single Y so I have a nested loop here so I can hit every single pixel and in processing the pixels all live in a onedimensional array and I can get the index into that array by saying by saying X plus y times width and I can mix up some color like I want it every pixel to be likes pink or purple so you can see I've now colored every single pixel so now what I want to do is make this an isosurface I want every pixel to be a function of X plus y so let's do something like color X comma zero comma Y now let's see what we get you can see that as X gets higher I get more of a red as Y gets higher get more of a blue and as those mix I get more of a purple so you can see this is an isosurface so to speak I could do something a little bit fancier like I could say give me the distance between X Y and the center of the window and then let me have that distance be math to the color so you can see now here that as things are closer to the center they're darker as they're closer to the edge they're brighter this isosurface is using the distance function so I don't have an eraser tada so in other words I'm using the distance function here now we were going to talk about meta balls so the metal ball isosurface is a kind of surface where just like I'm taking the distance to the center but instead of to the center I'm actually going to take a distance to this idea of a ball which I can also refer to as a blob because it's like this blobby thing and so what I want to know is the distance to that but the formula is actually 1 divided by the distance between the blob and the X&Y so that's the formula I want to inverse I want inversely proportional to the distance so the closer it is the bigger the number the further away it is the smaller the number and actually instead of one here that in this formula each of these blobs also has a radius and that number is tied to the radius so let's make what I'm going to do this is a what I'm going to do because eventually I'm going to move all these things around so even though this is overkill for what I'm just demonstrating to you right now I'm going to create a class of a called glob and I'm going to use a P vector object to store its position and I'm going to use a float to store a radius and I'm going to be able to give make the blob I'll just make there at a certain location so position equals a new P vector at that X Y and the radius is some let's just make the radius like 40 so what I'm going to do now is I want to make a blob object and I want to say blob equals a new blob at you know like 100 100 and I want to have a function just so I can see it called show and I'm going to say no fill stroke 255 and I'm going to draw it as an ellipse pause X pause dot Y and at R times 2r times 2 so I also want to put a B oops now this is tricky because I'm doing all the pixel stuff let's put it afterwards so you can see there it is there is that blob right up there in the top left corner at 100 100 so now what I want to do is not I want to take the distance not from the center but from that blobs position and you can see now that's making more sense it's darker near it brighter further away but I actually want the color so that's the distance I want the I'm going to make this a separate variable like the color to be one the blobs radius divided by that distance and I can put the color in here and now you can see well this didn't really do me any good because there is this white dot there but it's just so so tiny so really the radius the the because I'm dividing by distance um the radius value is really like really got to be a much different number like it must be a must it needs to be like a really high number like it could make it like forty thousand and now I'm going to get something that looks more like what I'm interested in almost this like glowing orb near the center fanning out but you can't see it anymore because forty thousand is like way too big to draw an actual circle so I'm going to keep these radiuses as small and just do something like say ten ten thousand I'm just going to scale it up by like ten thousand and so now you can see and I also to show it I'm going to say actually stroke zero and Stroke wait for just so you could really see it so you can see whoa what did I do wrong here Oh too big till it scale it up by a thousand there you go so this is the idea this is the idea of the isosurface the pixels are color is a function inversely proportional to their distance from this blob object so now what if this blob object were to move around let's give this blob a velocity and I'm going to make it a random there's a function called random 2d for a random vector unit vector pointing in a random direction and I'm going to give it also like a random speed I'm going to scale that amount by some random amount and then I'm going to write an update function where I just add that velocity to the object and you can see looks and now what I need to do is in addition to showing it I need to update it so it moves and you can see as it moves the pixels kind of go with it drive it one more time oops right as it moves the pixels go along with it so let me do something so that it bounces off the edges really quick I can say if position X is greater than width or position dot dot X is less than zero velocity X multiplied by negative one and I can just do this same exact thing with y but height and the y component of the velocity so now we can watch this and we can say okay so now those pixels are moving along with it now this may not seem so exciting I've really just got this like glowing orb moving but it gets exciting if I have more than one of these particular blobs so let's see how that might work so I'm going to go now to set up to the main tab and instead of having a single object I'm going to create an ArrayList of them you know what I'm gonna I'm gonna have a fixed number yeah I'm gonna have a fixed number I'm gonna have a fixed number it'll just be a little bit simpler for right now so I'm going to say a new I'm going to just have two of them and in here I'm going to say for int I equals zero I is less than blobs dot length I plus plus and I'm going to say blobs index I equals a new blob with a random blue with and a random height this is taking so long to type right and then this I can then here I could say ahha instead of AHA I can say ah for all the blobs update and show them so I think I kind of got everything in there enough so here there's an issue here okay well let's just do something really quick let's let's just do index 0 and let's run this a so you can see there's two moving but the color is only based on the distance from one of them so I need to have that color now based on the distance from two of them so how do I do that well right inside here I need another loop I want to say for every blob bleed every blob be every blob be in that array I want to look for that distance and look for that color and then what do I want to do I actually want to sum all of them so the way this isosurface works if the function is based on its distance if the formula is you know if I to go back to this formula the function of x and y is based on the sum you know I could use the Greek letter Sigma here to imply sum of all of the inverse distance of the radius of divided by the distance between all of the things that are on the screen so I just need to add all those things together so I'm going to say I have a variable called sum and it's equal to zero and then I'm going to add them up and now I'm going to make a color based on that sum and take a look at this now I think my values are so big that we're not really seeing very much going on here so let's let's make this a 100 just so we can see more clearly okay so now you see them it's not enough ulema to stop showing them because i think there we go so now you're seeing more like what you might expect because it's a sum based on that distance as they come together they start to sort of like glom onto each other like there's these gloppy gluey blobby things and of course now because I've done this to program it this way I can suddenly add ten of them and I can make my screen who you know what I know I got to be true because I'm doing pixel processing I'm afraid to okay so and then of course if I have so many of them you know maybe it would be good to just now we can sort of see now this might be more like what you're sort of more commonly used to seeing when you see a meta balls visualization and I could go back and I could look at you know where it's the raw data that's moving around it's these things and the pixel colors are associated with that those are some really beautiful meatballs got me metal balls ah okay so let's make them let's do two more you can see you stopped watching how if you want but I'm going to do some more stuff in this video normally there'd be like a subscribe support annotation that would come up at the end you gotta wait till the very end to get that somebody do a few things number one let's make these rainbowcolored why not so I'm just going to say colormode HSB and then what I'm going to do here is I'm going to say some 0 255 255 so all I did was I want the hue just to be attached so that was one really quick thing so you can see here's a quick way that I could color them differently I really wanted the center to be I love this like pinkish purple color which is probably like so I'm going to constrain the sum to like the hue of 220 this is so silly that I'm doing this there we go that's good so anyway so you can see you can play around you could cycle the colors I could do something kind of crazy which I could do like some mod 255 and you can see now I've got this like weird thing because it's actually going above 255 and you can see I got these like crazy weird like a little of color or things in the center so that's one thing that I can do now I'm going to do some more of them so this this really ends the sort of meta balls isosurfaces discussion but because I would like I'm doing some synergy thing here yesterday I made a video which was about blob tracking and I'm going to pull that up here and I'm going to show this to you so here is I've got a live image from a camera and it's looking for the color red it's not finding it it's gonna click on it Oh sad my threshold what happened to the lighting in this room something happened here let's try this one more time I'm uh we restart this again they try this one more time okay so I'm tracking this pretty good I'm tracking these two you can see that this is doing blob detection to try to find these cups that I'm holding and what I want to do right now is control the metaball with the blob tracking so what I'm going to do is I'm going to combine two projects I'm going to combine blob tracking with meta balls I will include a link to the blob tracking videos in the description of this video that you're watching right now so what do I need I need a couple things I mean amazingly horrifyingly I've named a class called blob in this particular sketch and I named something called blob and the other one so I need to correct that I'm going to take this over to this sketch I'm gonna make a new tab I'm going to call it meta ball and I'm going to rename this meta ball and give it a constructor you know I could have just combined better idea a better idea a better idea I don't know why I needed to do that I don't need to do anything I have all the stuff already a better idea I don't need a new object what I need is all I need is this code actually all I need is this code so I'm going to take this code this loop and I'm going to bring it into this particular sketch and I'm going to take it all the way at the end now I'm going to put it before I show the block so but now what I want to do is I want to look at the distance between the XY of each pixel and each particular blob in that array its position now it's position is no longer a is no longer a I'm sorry I'm spacing out here is no longer a vector and I'm going to actually write a function called get X and get Y because really what I want is the center and because I the blob is just keeping track of the edges so I want to add a function called get X which is going to return max X minus max min X divided by 2 and x is a little faster say point times 0.5 min X so this is finding the center it's the minimum plus halfway between the maximum and the minimum so that's get X and this is get Y so let me just do that really quickly that should be the center of those blobs so what I work now and then I want it so I already have a size function so I'm pretty sure I wrote oh I had a mistake in my previous code I got to go back and fix that I already had blobs index 0 dot size that should have been be all along so there I believe there is a size function which just returns the sort of area of that square and now if I run this that should be all I need I want to say I'm going to I'm going to say here call it let's see if this works colormode HSB and then afterwards just in case other parts of my sketch and say color mode RGB let's run this this is like okay isn't working No so one thing that I really need to be able to do is I want to do I'm going to create a boolean variable Shou Shou blah Shou Mehta is false and I'm only going to do this pixel stuff if show Mehta is true and then in my key pressed function I'm going to just use the space bar if ki equals the space bar show Mehta equals not show Mehta so I want this to work so it should when it starts oh you know I have a feeling that the let's see okay I'm tracking the blobs rather nicely ah there we go whoa so look at that I am controlling so a couple things I want to fix here is a number one is um this scale is probably way off because the size of those is much bigger so I'm going to say 10 I'm going to use I'm going to just use the constrain approach and that should fix things make things better so let's make sure the blob tracking is working you know it's like based on the sort of like white balance here I'm gonna have to click on it till I calibrate it okay that's working pretty well I don't care that my mouth is also a blob Oh what did I do wrong I guess did I'm oh whoa oh whoa whoa Oh craziness what did I get wrong here I multiplied it by less well let me just give it a fixed size right now like we know that like 20,000 will do something useful and then I have to think about what the sizes are of these particular blobs does anybody still watching this video so you can see you can see that it's the basic ideas working it needs some refinement but you can see that the basic idea here is working I should really but I just need to sort of some refinement on the sizewise so I'll leave as an exercise for those of you who might want to make this better but you can see that the point of this meta balls example is to realize that these things just bouncing around the screen is just an arbitrary way of moving them around to get this colorful visualization but I could easily take any other physics example particle system type things where things are swirling or following each other and create all sorts of interesting results by kind of merging the stuff so I want to make sure there's a good actually I'll do this afterwards so thanks for watching this vegetarian mehta balls and I will see you in in some other coding challenge perhaps in the future thanks for watching good bye oops I'm back I realized I left a bug in my meta Balls example which is here that when I was looping through and and looping through all of the blob objects to sum up those distances I always took the radius of the first one because I was demonstrating at first just using one so this really should be BR so now I've corrected it you'll see though visually the result is basically exactly the same why is that the reason that is is because doesn't uh um I have every single one gets the same radius so now I have an opportunity to say something like let's give them all a random radius between 20 and 60 let's make that a bit more extreme between 10 and 150 so you can see now and let me um let's see here let's let me uh let me also get rid of this modulus thing oh wow that modulus thing really makes a big difference hold on what is going on here there we go interesting so the size I the modulus thing really makes a difference in how it's visualized so now I'm kind of like Tooting this a little bit better and anyway you can play at this with your heart's content but now you can see that these blobby things have a slightly different size which gives it kind of a different quality as the things move around randomly so you know I wasn't started going about to defend there so enjoy the metabolic code example make something with it I'll try to release a JavaScript version of it and at some point I'll come back and try to do a 3d one as well as such sort of geometry version as well okay thanks again for watching good this now concludes this video I think goodbye