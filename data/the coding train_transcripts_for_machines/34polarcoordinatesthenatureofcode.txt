i don't know about you but i am so excited for this video i'm sure all you've been doing with your whole life is waiting to watch a video on youtube about trigonometric functions and and if that's true then here you are in the right place so this is the moment in the nature of code series where i really want to take the time to unpack and look at more closely the functions sine cosine and tangent now if you're looking at these in the p5 reference that you would find them under the sort of three letter versions of each of these sine cosine and tan for tangent the way i learned these functions many years ago was with the mnemonic device sohcahtoa it's a quite a strange one s o h c a h t o a and this mnemonic device refers to the sides of a right triangle so here's a right triangle referenced by the fact that one of the angles is 90 degrees or in radians pi divided by 2. and the idea is that i want to look at i want to evaluate the sine or the cosine or the tangent of an angle in that right triangle so let's say i have this angle once again represented by the greek letter theta if i want to say sine of theta well the answer to this question the evaluation of this function is embedded right here in the mnemonic device soa sine equals opposite divided by hypotenuse so what does that mean this is an angle what do all the sides of the triangle how do they relate to this angle well this side is opposite this side is adjacent and right over here is the hypotenuse cosine then we can see over here is adjacent divided by hypotenuse and then the last one tangent here is opposite divided by adjacent now when i'm referring to any one of the sides of this triangle i should point out that i'm referring to its length and you'll notice that all of these are really a ratio right sine is the ratio of of opposite to hypotenuse you know it doesn't change whatever the size of the triangle might be as the hypotenuse grows this opposite side grows the angle remains the same so that's sort of important to note as we're looking at how all of these functions are defined so while this way of drawing the right triangle and looking at the definitions of sine cosine and tangent is valuable it's how i learned this stuff in the first place there's another way we can look at these functions that relates more to vectors and a circle and i think that's actually going to prove to be quite useful for me to get into this idea of a polar coordinate so i'm going to just redraw this diagram and look at sine cosine and tangent in a slightly different way and let's see how that goes what i want to start with is this idea of a vector a vector is an entity with magnitude and direction its direction is uh indicated by this particular angle theta its magnitude is the length of this particular arrow now i want to assume right now that the magnitude will just be one this is a unit vector and if i were to take this vector and sort of spin it around the origin point here of this graph i would get a circle if i were to take this vector and divide it into components i would have the x component and i would have the y component and this is something we've been doing constantly i have an x and a y as represented by this sort of position relative to the origin so i'm just going to state something that might suddenly be somewhat surprising to you i'm going to define sine and cosine again i'm going to say sine of theta equals y and cosine of theta equals x and in a way this like shouldn't be so surprising to you opposite over hypotenuse y divided by 1 is just y opposite adjacent over hypotenuse x divided by 1 is just x but suddenly we realize that if i have a circle with radius 1 and i take any point along that circle the x and y position of that point is defined by cosine of the angle and sine of the angle so this is another really nice way to be able to look at and sort of think about the trigonometric functions sine and cosine i should also note something really quite exciting here i'm not sure if i'm going to have enough room on the diagram but let's say i draw a line that is perpendicular to this vector and it is tangent tangent to the circle let me extend that out to here it would intersect the x axis here the length of this by the way is tangent of theta now in the end this the tangent function's going to be less useful to us or used less in terms of a lot of the computer graphics and animation examples i want to make but it's really kind of amazing to see this diagram and i'll try to like fly in like a slightly better one that you can look at right now with all with with sine cosine and tangent all defined by this unit circle diagrams like this are going to come up again and again you know we had one in the previous video where i'm trying to get an object to point in the direction that it's moving i'm going to work on a swinging pendulum example which i'm going to need this a lot of the steering behavior examples that are coming up in a later chapter we're going to need this diagram so this you know taking some time to get used to this and thinking about these functions is going to have a lot of practical value for you i hope in future videos and examples and things that you might try to do but this moment right now what i want to use this for is something called polar coordinates so here we are with yet another very similar looking diagram and i want to talk about this point in this cartesian plane as the point four comma three an x y point where the x position is one two three four the y position is one two three this is a cartesian coordinate a polar coordinate is a way of referencing this point not with its horizontal and vertical position but rather by referencing an angle theta and a distance from the origin we'll call that r so a polar coordinate would be r comma theta where a cartesian coordinate is x comma y one of the things that's very useful in graphics programming is to be able to sometimes think in polar coordinates everything you've probably ever done most of the things that i do i think in terms of x y this circle's over here and x y and this rectangle's over here at x y and then i'm going to move this one by this amount of x and this one by this amount of y let's consider this scenario ah let's try to draw a spiral pattern well if i wanted to draw a spiral pattern with x with cartesian coordinates i'd have to think about like well maybe it would start going by this amount of y and this amount of x and then change the x i don't know it'd be hard to do but i can tell you that if i'm thinking about my world and defining all the positions in a world with polar coordinates it wouldn't be so hard to do i could say oh i just want the angle to increase i want the angle to increase over time and by the way while the angle is increasing over time i want the radius to decrease over time so the radius is getting smaller and smaller and smaller while the angle is increasing and increasing and increasing that i didn't draw this particularly correctly like this should be shifted down with the origin in the center of that spiral but i think maybe you get the idea the problem is however all of the drawing functions in p5 ellipse line rectangle vertex curve vertex they all require cartesian coordinates you must give them the x y position of the thing you want to draw so if you want to think in polar coordinates but draw on cartesian coordinates you need ultimately some formula to convert between the two and that formula by the way is exactly in the diagram i just drew where i defined sine and cosine as the x and y components of a unit vector if i know the angle then i know x is cosine of that angle and y is sine of that angle that's if r is equal to one but guess what if r is equal to two y has just doubled in size so y would be sine times 2 or in this case r x is cosine times r so this formula is incredibly useful if i'm thinking in terms of polar coordinates but i need to draw with cartesian coordinates i can convert from one to the other just with this formula right here and that's the first thing that i want to do as the code example for this video here's my starting point i've got a very basic p5.js sketch just has a circle uh translated the origins translated to the center the circle has a radius of 150 and a 400 by 400 canvas so i want to be able to draw a dot or a point on the edge of that circle all right i have my point on the edge of the circle and i know exactly how to position it there because i can just say oh the radius is 150 so if y is zero it's over there on that side at 150 x and if i wanted to say it's negative 150 oh i've now got it on the other side or i could probably like set x equal to zero and i could set y to 150 and i've got it on the bottom but what if i want to put it somewhere else on the circle how do i find that point if i only have cartesian coordinates i mean i could kind of guess like 75 comma 75 oh no it's got to be a little further out right the 95 comma 95 i don't know i'm getting closer this is where polar to cartesian coordinates comes in i can say i want a position on the circle of radius r at a given angle and then use this formula to get my x and y rather than have to sort of just magically know it or guess it correctly and there we go we can see that now with an angle of pi divided by 4 which is 45 degrees i've now got the x position and the y position using the polar to cartesian formula once again it's flipped because y points down i'll feel a little better if i just say negative pi divided by four and then of course what i might more likely want to see to demonstrate this idea what if i take the angle set it to zero and make it a global variable and then angle plus equals 0.01 and suddenly i have my circle moving around that path this probably looks very familiar right this is exactly where we started this chapter 3 this idea of angles and rotations now we see that while yes i could use translate and rotate i can also get the exact same behavior of moving rotating so to speak this dot around the origin point by using the trigonometric functions sine and cosine and polar to cartesian coordinate transformation let's take this one step further and have the radius also be a global variable and i will have the radius shrink over time very hard to see so what i'm going to do is i'm going to not draw this circle i'm going to take the background and put it in setup increase the speed of the angle and the radius i can have the radius change itself randomly maybe i will put the background back in draw but just give it a little bit of transparency so that it's uh fading out the trail we can see oh it's moving around that path of a circle but kind of like with a little bit of noise to how it's moving another really common application of polar coordinates is drawing a circular shape yourself having control over all of the points all of the vertices of that circular shape rather than just relying on the ellipse function in p5 returning back to the code that i started with was just drawing a circle could i draw that exact same circle but instead of using the p5 function circle could i set all the vertices of that circular shape individually with begin shape and shape and vertex now i can write a for loop starting with an angle of 0 and iterate all the way up to 2 pi and set a vertex associated with all the angles along that path now i'm arbitrarily incrementing the angle by 0.1 radians every time we'll see what that does now i need to apply my polar to cartesian coordinate transformation and look what i get now notice there's a little hole there it's because point one doesn't divide evenly into two pi i could be more thoughtful about how what number i choose there but i can also right here just add the close keyword into end shape and we'll make sure to close that shape now this didn't really this is that circle's there i don't know if it's if you can really distinguish it from the p5 circle that was drawn but just to note for a second if i change this to like point five now we can really start to see and this this can be a fun sort of value to play with if i call this value like increment for incrementing the angle and i say it's a value mapped to the mousex location which which goes between zero and width and i want it to be between like 0.01 it's very important that i don't have that value ever be zero because if i ever have that value zero this loop would be infinite and then all the way up to let's just say uh pi and then if i put increment in here we can see as i move the mouse this sort of circle unfurls and i forgot that i had this like background uh alpha on i'll just take that off for a second you can see like here and maybe actually i think i almost would like to look at it the other dire other way around so as the mouse enters this circle starts to unfurl the polygon unfurls all the way so you can sort of see what those possibilities are i can also start to do really interesting things like let me just fix the increment to a fixed value right now what if for every value of r i offset it by some random amount so i'm going to say r1 equals r plus some random offset by 10 pixels and then i'm going to use r1 here instead of the core r now we can see i've created this almost electrical electrically charged uh circle um and i you know let me add no loop just to um freeze it for a second so you can see what that looks like you can imagine this being the design for an asteroid in the asteroids game as i was kind of referring to in a previous video you know what these values are will make a very big difference in terms of what the quality is i have a whole video about doing this kind of path with purlin noise we're about to see how i can make wave patterns so what kinds of sort of undulating oscillating blobby patterns can you create by drawing your own circular path and setting the vertices with some algorithm of your own there are a lot of possibilities here so that's really the exercise i offer to you at the end of this video what kinds of shapes can you generate through thinking about polar coordinates rather than cartesian coordinates in the next video i'm just going to keep going with the sine function you've probably heard the term sine wave before why do we think of waves and sine and cosine that's going to actually lead us to the ability to model simple harmonic motion the oscillation an oscillating behavior and so that's what i'm going to look at in the next video and so on and so forth so stay with me if you like and i'll see you there