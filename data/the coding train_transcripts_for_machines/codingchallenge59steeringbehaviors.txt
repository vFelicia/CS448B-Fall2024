welcome aboard the train of coding stuff uh here's another coding challenge what I'm going to do in this coding challenge is show you how to place points your own geometry your own designs along the paths of letters um in JavaScript using the p5js library with the P5 font object and then I'm also going to apply something called a steering Behavior Uh from Craig Reynolds there'll be a lot of more information in this video's description and I'm going to use steering behaviors for these objects to find their way to a Target as well as flee Mouse so you can see the sort of inkling of a creative possibility here of what you could make with it and I'm sure you could come up with more creative designs reasons for using text uh other ways of interacting with other types of sensors and physicality and so um enjoy and enjoy this uh coding Challenge and I look forward to hearing from you in the comments okay I'm going to get started with this coding challenge the first step that I want to do is draw dots where there is text if that makes sense so let me let me let me let me explain a bit more about what I mean here so first thing I want to do is I want to make a variable called font and I'm going to just use preload because I need to I want to I need to specify a specific font here I'm going to say font equals load font and I have already put in the directory for um for this project I have already put a um hold on a font file show and finder um so there's the font file so I need this font file's name so so I'm going to copy it and then I'm going to go back here and I'm going to put that in here so now I've loaded that font I'm going to say create canvas uh 800 by 300 something arbitrary I'm going to say a text font font then I'm just going to say text uh rainbow is that too long I kind of want to use a short word because I don't want to have too many dots I like rainbow I think I might use train a little bit shorter train bow so to speak TM train train bow um so text train and I'm just going to say 10 uh 200 and I'm going to make a text size so these are some functions that are part of the p5js library that allow me to draw text to the screen and I'm gonna say 128 and then I think if I say uh Phil 255 and no stroke that'll color the text white and if I say background uh my favorite background color 51 that'll make the background 51 okay here we go there see look now I have the word train right there so I'm going to move it over a little bit uh I don't need probably don't need that big of a space 600 by 300 is good and let's move it over you know I could align it with the center and all that but I I'm not so worried I just want to get the basic idea here oops so let me refresh that I didn't move it and there there's my sketch and I'm just going to like move it over a little bit more okay there we go this does this part doesn't really matter so I now have a P5 sketch where I've drawn letters to the canvas and I want to make it a little bit bigger I know I'm being like crazy here but I'm going to just say uh 192 I don't know refresh there we go ah now now this looks right so I now got these big letters here now what I want to do is instead of drawing them as actual text I want to get all of the points of the letters so from here there's lots of created creative possibilities and fonts in P5 are loaded into an object called P5 font and here you'll see what are some functions available there's on the reference page there's text bounds so there are actually some other functions that are available for P5 font that are um not uh in that you won't see them in the reference but if you dig through the source code and look at some of the examples you'll find and I guess it's an open question maybe should file an issue and discuss whether some of these functions should actually be in the reference and maybe it's just a matter of putting in the word and volunteering some time to write reference pages and expand this but a really useful function and a lot of this work was done by uh Daniel how I should credit uh him for a lot of this work is to say I'm going to say VAR points equals font text to points believe the function is called text to points and now I can take exactly this so I'm going to put that in there and what that should give me I believe let's just console log it so we can see if this works let's just see what does this function give us so I'm going to go back here we can say look it's a big array with all these objects and what's in each of these objects an alpha and an X and A Y well I didn't even know it had an alpha in there an alpha and an X and A Y so I'm just going to make use of the X and the Y so what I'm going to do now I'm really soon I'm going to use a four each Loop in one of my videos everybody wants me to but I just like I'm like old fashioned and not very good at programming so just just I'm I'm just using my for Loop just for today please let me do it just for today get to that 4in Loop soon okay so I'm going to say um a point equals points index I and I'm just going to uh just make something that's uh green so I see it as a different color uh stroke weight four and I'm going to draw a point at Point dot ooh this is bad look what I just did so this is really dangerous in JavaScript so I was like I'll just make a iable called point because I'm going to store something called a point but I have uh a function in P5 that's called point that draws a point so I can't make up a variable with the same name as something that I'm using from a library in the global names space which is why things are typically in JavaScript libraries quote unquote names spaced meaning I would have to say p5o but also just makes things so inconvenient especially for beginners so here I'm just going to say PT for point and now I'm going to say PT dox PT doy y so let's see what I get now and we can see look at that look at all these nice green points these green circles that are tracing the Contour now this is amazing because I don't need to draw the text anymore right this whole thing was just to see that that worked and oh by the way oh interesting oh it just it kind of used 192 but I'm going to put 192 into this function the fourth argument I think is the font size because what I'm going to do right now is I'm going to completely take this out the whole point of this was I don't need to draw the text and then I'm going to make these uh White and make them a little bit bigger and we can see there is now the word train with lots of little dots so what's exciting about this is I have now drawn with my own algorithm the locations of all of these vertices in a piece of text and so from here your you know imagination can go wild I can make them rainbow colors I can make them you know move and follow the paths I can have them explode and come back and Shimmer and change to Stars and Hearts or whatever you want to do like I could make the word love and just fill it with hearts right you could do that and that would be nice so there's a lot of possibilities here but what I'm going to do next is turn these dots into particles that can move around this screen and what I'm going to do is maybe um start them in a random location and then have them find their spot and to do this I'm going to employ an algorithm known as steering now I have a whole set of tutorials that I'll link to this it's chapter six from nature of code book about autonomous agents and brenberg vehicles and there's all this like inspiration and background but what I'm going to do is model off of Craig Reynolds steering behaviors it's a a wellknown paper from 1999 steering behaviors for autonomous characters something like that and I'll link to that paper that you can read in this video's description but what I'm going to do is just move over to the Whiteboard and just talk you through what the basic idea of steering is if I have a particle and it has a current velocity it's a particle it's actually I'm going to call it vehicle because vehicle is a term from a a famous book called Vehicles famous book it's a famous book it's a book that I like uh by Valentino brenberg an Italian neuroscientist uh Valentino brenberg and actually this would be great to have a whole set of coding challenges that are to implement brenberg vehicles I got to get to that sometime but imagine these almost science fiction like robots that had sensors and desires and experienced fear or love and steered around an environment based on those emotions and simple rules so that's where that's sort of a background where a lot of these ideas come from but to turn it into some kind of math and code we if we have this idea of a vehicle maybe represented as a triangle and it has a current velocity that's its current velocity what if this vehicle had a desire it had a desire to do something like get some food or run away from a predator or just like wander around whatever its desire might be could we translate that desire into a vector so let's say its desire was to find uh you know a spot oh a Target we could translate we could we if we know it's current velocity and then we calculate a desired velocity move as fast as possible to the Target the steering Force as defined by Reynolds equals desired minus velocity so this is an autonomous agent it has this agent has some perception awareness of its environment it knows its current velocity so the steering the force applied to it to steer isn't directly the desired it's the error between what it desires to do and its current velocity and this is technique allows for a much more kind of lifelike and improvisational quality again to quote from Reynolds paper so um and you can imagine how powerful this is for example what if its Des what if its current velocity was equal to its desired velocity then its steering would be zero it doesn't need to turn speed up slow down any of those things what if its current velocity was faster than its desired velocity then the steering force would actually be a force pointing in the opposite direction trying to get it to slow down so the fact of using a force that's the error between what it currently wants to do and its actual current velocity this is a very powerful concept that's useful in animating motion of autonomous agents okay so now we understand this concept let's have these agents desire to seek their particular Target so here I am back over here with my train we should edit that part out probably but I don't know maybe we'll just get left in who knows okay back to my train uh okay now back to my train what am I doing here okay so oh we have a lot to do all of a sudden so one thing I need to do and it would be nice to maybe do some of these challenges not from scratch and just use like a base object that kind of moves around the screen but I'm just going to create a new file I'm going to call it vehicle. JS and I'm going to write a Constructor function to make vehicle objects and the vehicles they're going to need a position and that's going to be a vector again if you're interested you know a lot of this now I'm going to base off of you know sort of knowledge of basic physics engines and vectors which you can also find in kind of some of my other nature of code tutorials a position a velocity and an acceleration it's also going to need a Target and when I make the vehicle let's give it an X and A Y and position its Target there let's also just start it at that X and Y so it's got to have a starting position and a Target position okay so now that we have have that and you know what I'm going to do I'm going to attach the functions to the vehicle prototype as opposed to saying this dot because I'm intending to make a video tutorial about what prototype is and why this is a slightly well some would say not not so slight a majorly more better correct efficient nicer way of attaching functions to objects so I'm going to say a vehicle prototype update equals function and I'm doing this because it commits me to making that tutorial um and I'm going to say v.p. add this. velocity this. velocity. add this. acceleration so this is the basic physics idea of acceleration changing velocity velocity changing position then I also need to uh add a function which is like show or display to render it and let's give it a size this. R equals 8 for example and I am going to use whatever I just did right here to um we got a lot of this dots I'm sure I'm going to be forgetting stuff this.x and this.y so now I have some vehicles with some basic physics position velocity acceleration a Target and uh some updating of their whatever and then uh being able to draw them so now what I'm going to do is in sketch I'm going to say VAR Vehicles equals empty array and instead of drawing points in setup what I'm going to do is I'm going to say VAR vehicle equals a new vehicle at point dox point doy okay so now uh and then I'm got to put that into the array so vehicles. push vehicle so I'm I'm making a vehicle every spot in that uh in the points path of the font thingy okay so now these should be trains really I mean come on right choo choo okay so now in draw we'll set the background the draw is an animation Loop that's part of the P5 library and I again I could use a four each Loop but I'm just going to Loop through all of the vehicles and I'm G to say VAR I'm just gonna say V just to make things sort of shorter for right now I'm going to say v. update and v. show so when I run this this should look exactly the same the first version I just drew a DOT at all the spots now I'm actually making an object that has some Physics built into it and then showing it but it shouldn't move yet because there's there's no velocity there's no forces so if I hit refresh ah okay so I've got some errors here um sketch. oh I forgot to reference uh my uh new vehicle. Js file in index.html so I need to do that always forget that I need a song for like it's not as catchy as this dot reference the the new Javascript file in index. HTML no does that be turned into a song probably not okay um so once I do that let's see what I've got here good and I'm going to get rid of that console log that's kind of like filling up my console I don't really need to see that move this over here a little bit uh clear okay great so now this is working we've got those dots their vehicles now just to prove that this is doing something let's go into vehicles and just say I don't know give them P5 vector. random 2D so I'm going to just give each one a random velocity so you can see instantly they're all moving um now how could I have them get back to where they're meant to be so what I want to do is implement this algorithm now each particle each vehicle should calculate a vector pointing from itself to the Target it should scale it according to a maximum speed it desires to go at maximum speed and then it should calculate a steering Force desired minus velocity which it will apply to its acceleration okay so let's do that so now I'm going to come back over here and I'm going to write a function uh prototype do uh behaviors equals function the reason why I'm I'm kind of anticipating that I might have multiple multiple behaviors that play so I could just only write a seek behavior and then I only need one function I need a function to sort of accumulate a bunch of different behaviors so what I want to do is I want to say VAR seek equals um this. seek uh this.target and then I want to say this. apply Force seek right so what I want to do is actually so apply force is not a function that just magically exists I need to actually write that function so each vehicle should also have a function uh apply Force which receives an argument and then it takes uh this do acceleration do add that Force so the idea if they're going to be multiple forces at play we can add them all into the acceleration and if I'm doing that the acceleration which accumulates all the forces every single frame of Animation needs to start from zero so one thing I can do is after at the end of update I can say this. acceleration multiply by zero so that's going to clear the acceleration so now I have uh and of course if I run this now I'm missing the seek function the seek function I need to actually finally write something with this particular algorithm in it this is me getting my steps in on my Fitbit oh no Buzz Marketing of products on this channel unless they're sponsoring me I guess redacted product that I'm using Okay um so uh so now I need to write that seek function um um vehicle. prototype. seek and interestingly enough um I I gave it an argument called yeah it's good to have it have a generic argument it could seek any Target so how do I get a vector that points from the object location to the thing it's seeking okay so the way that I do that is I say uh I'm going to call this the desired Vector the desired velocity desired equals P5 do Vector subtract Target minus this dot position so and I I'm I kind of some of these lines of code are getting kind of long so this is the way you get a vector that points from position to Target you subtract the two vectors now what should the magnitude of that be well what I'm going to do is I'm going to actually create a new variables P this vehicle and I'm going to call it max speed and I'm going to set it to five so the idea here is its desired velocity is always its maximum speed is is to is at its maximum speed so what I'm going to do there so I'm going to say then desired do set mag uh this do maximum speed okay so now and then um I need the steering Force steer and what did we say steering equals desired minus velocity this should be easy steer equals P5 Vector do subtract desired minus this do velocity return steer the idea here is that I'm going to calculate that force and return it because when I get it up here I can then apply it so let's see how this goes we should be good well what did I forget I forgot to actually call apply behaviors so I'm GNA say v. apply or I just called it behaviors behaviors I could call it steering I don't know what would make sense to call it okay so now look what's happening it's seeking that spot and it's doing it it's very good at seeking it so it's like finding it moving back so I got this like sort of crazy like frenetic shaking thing so one thing I should do by the way is introduce another variable which would be very useful to control the behavior of these vehicles and this all again all comes from Reynold's paper maximum Force so how strong how good is it at steering like because right now I'm it's kind of like an idealized vehicle that can steer as well as it ever might need to be so I'm going to say like Point 0.3 is kind of a magnitude maximum and then when I calculate that steering Force I'm going to say Ste Ste limit um this do maximum Force so what you'll see here is that steering Force won't be as strong and you can see it's you know still doing the same thing where it seeks the Target and then it leaves but you know and but it's not as good so um you know one thing that we could see to kind of like try to have more of a sense of this well here's the thing this is doing us basically no good right now because what I really want to do to implement this particular idea is I don't want to implement a pure or a seek algorithm I want to implement an algorithm that's known from the paper as arrive and again everything boils down to desired velocity and what the arrive Behavior says is please go to the Target but not as fast as possible you want to go uh your speed your magnitude of your velocity is relative to how far away from the target you are meaning if I'm really far away I want to go really fast but if I'm really close I want to go really slow and what this will cause is if I'm here and I am going really fast my steering force will cause me to slow down and if I'm at the Target I want to be going my my desired velocity is zero the magnitude so this is going to instead of having the the object overshoot it actually slow down and stop okay so here I come back over here and I'm going to I'm going to I'm actually going to leave seek in there because it could be useful later I have an idea of what to use it for and I'm going to just add a function called arrive which is exactly the same argument exactly the same algorithm the difference is what is the desired magnitude so I'm going to say um if Desir so the distance so the distance is um the magnitude of this right the magnitude of that Vector is actually how far away it is because that's a vector that points all the way from the position to the Target if the distance is is less than I'm going to pick an arbitrary threshold less than 100 pixels if the distance is less than 100 then I want a magnitude magnitude I'm going to say speed to be map the distance which goes from 0 to 100 to what when the distance is zero I want the magnitude to be zero when the distance is 100 I want the magnitude to be maximum speed so uh else speed so I'm going to say oh I'm going to say VAR speed this I'm sure there's a more efficient way to write this equals uh this do maximum speed and then but if distance is less than 100 then actually set speed to be a different value based on how close it is and then set the magnitude to this new speed value I've calculated rather so here's the creative power you have now you can see I'm doing like a standard seek and a standard arrive but you might have a behavior that you imagine in your head what you need to do is think through some logic by which you can convert that behavior into a desired velocity and it can be much more complex than this you see just this little increment incremental change from seek to arrive now let's see if this actually works um I'm going to change uh up here to say uh arrive equals this. arrive the Target and then apply the arrive Behavior so you can see that this is now kind of working you know there's some little like goofiness of maybe there's a little bit noise of it sort of like jiggling but looks like they've all settled into a spot so let's see if this is really working the way to know if this is really working is I'm not going to start them at their target anymore I'm going to say random width random height and now we're going to see them all move into their spot that's pretty good Tada so on the one hand I could consider the this finished there's so many possibilities here here's something obviously that would be cool to try what if you have this then rearrange itself into new text I'm going to leave that as an exercise for somebody watching the tricky thing is you might have a different number of particles so you might need to split some or combine some to get more or few more more or less particles but let me just do one other thing to it what if I just to make this I mean there's a bunch of other things I kind of want to do this but just to give it something else what if I were to add a force um a steering Force where the particles themselves the vehicles are afraid of the mouse so what I want to do is in I'm actually going to change this seek function to uh flee I'm going to call it flee and what I'm going to do is I'm going to multiply I'm going to limit it to I'm going to um multiply the steering Force by negative one so the flea algorithm is my desire is to move in the opposite direction as fast as possible from the target rather than in the direction so I could just multiply the force in the opposite direction or you know I guess technically to do this in the quote unquote correct way I would uh I would multiply it by negative the desired vector by negative one so the I'm not changing the force uh this one I think is more accurately depicting the algorithm for flee by changing the desired Vector to point in the opposite direction now in apply behaviors I could say where is this um I could say a mouse equals create Vector now I don't need to create a vector for every object but you know uh I could have a global Vector that's the mouse's Global variable that's the mouse's location V Mouse equals create Vector Mouse X Mouse Y and now I'm going to say VAR flee equals this. flee Mouse and I am going to say this do apply Force flee so now if I run this you can see like if I just get the Mouse way out they're kind of like in the spot but like they're really just very you know they're never going to find they're way too afraid of the mouse so one thing that I probably should do is have this flea behavior only um come trigger if they're within a certain distance and maybe even the magnitude is you know they're based on that distance but I'm going to do something pretty simple here which is just uh there's probably you know I might want to leave this intact and not mess with this and do this part outside side of it but right here I'm just going to say um you know I can get that distance right here VD equals desired do mag and I'm just going to say if D is less than uh 50 and I should make that a variable too all these things I should make variables then uh return that steering Force otherwise otherwise just return create Vector 0 now again there's lots of inefficiencies like I don't need I could have a global variable that's the zero Vector I don't need to make create Vector all over the place but this will work and demonstrates the idea so I only want to have that effect trigger if whoops what did I miss vehicles uh uncaught sketch vehicle JS line 63 so I have an extra uh close bracket uh so here we go so you can see everything is coming into its spot and then now as I move here now I'm not really you can sort of see here as I move the mouse I'm kind of messing with these but very little so I kind of want this to behave in a bit more of a kind of radical way and so something I might more responsive way I guess radical I don't know I think I might want to give the maximum speed a bit more and actually I'm just going to like crank up the maximum Force the other thing I might want to do is write this in a slightly different way where I can now also weight these particular forces so what if I want arrive to just have a weight of one but flee to have a weight of five so I want that fleeing force to be much stronger than the arrival Force so now everything's in their spot and I move the mouse around you can see almost have this like spring like Behavior I feel like zooming in on this just so you can see it a bit and actually maybe it's better for me to uh whoops do this just to make it bigger so you can see this will be good for a screenshot probably if over here or something so anyway so you I can't believe this in the middle of the video I was like let's make the thumbnail but um so you can see here now I've got something uh where the the particles kind of arrive to their spot and I can push them around with the mouse now ultimately I might be able to make this even more kind of dynamic or compelling I don't know what the word is but if I have these also respond to each other so what if I added a group Behavior like separation I would encourage you to check out I think I have some videos on group behaviors and flocking systems and there's lots more that you could add to this the thing to watch out for there of course is once you have every particle checking every vehicle checking every other vehicle's location things can really slow down in terms of the amount of computation so there's strategies there to make that more efficient that I should probably get into at some point but I think this gives you the basic building blocks so if I'm going to give you a challenge to do after watching this I would say number one is what is your content are you designing this with circles what's your text why are you making this could you think about multiple pieces of text transforming from you know train into rainbow into unicorn Tada um could you apply other behaviors path following would be one really could you actually have the the vehicles follow the paths of the letters um could you add group behaviors what other types of you know uh reasons you know you know what what is the system You're Building there's so many possibilities in terms of design and color so I hope you make something from this uh use the code that's Linked In the description um I'll try to make a processing version of this there's a library in processing called geoma I don't know if I'm pronouncing that correctly that allows you to get the path points of text um so that's something that uh maybe I'll revisit in a future video as well so thanks for watching this coding challenge I hope you enjoyed it and I don't know train joke insert here with whistle thing goodbye Belle