(bell dings) (whistle blows) Hello, up there. I'm much lower today, 'cause I'm sitting in a chair. This coding challenge requires a chair. Actually just me that needs the chair today. Okay, I feel so organized. I feel like I need papers, like I'm a newscaster or something. Welcome to the Coding Train Coding Challenge. Today I'm going to make Logo. (bells dings) What do you mean, you're going to make Logo? So Logo is an educational programming language designed in 1967 by all these people listed here. And you can go read the Wikipedia page to learn more about the history. I actually did learn to program a bit in Logo in my youth. Maybe some of you did. So what I mean by making Logo, I want to create a interpreter. I want to create a programming environment in the browser that basically does Logo. So I, as the, ooh, it's like spellchecking me here. How weird. I can write Logo commands and then watch my Logo commands be executed in this canvas. And probably what I should do is have a button that's like a run button. But maybe I could be continuously interpreting it. Who knows? So what are the Logo commands? So the idea of Logo is turtle graphics, the idea is that you're controlling a turtle to move around the screen, a turtle move can, and the turtle can do a number of things. I found this tutorial from a Brown University course. You can find the link up here and these are the drawing commands. I can move forward by a certain amount, I can go backwards by a certain amount. I can turn right, I can turn left by some angle and I can clear screen. There are also other commands, there's a repeat command and there's pen up, pen down. It's very strange to be sitting here. Hide turtle, show turtle, home, label, set xy, so many possibilities. I'm not going to implement everything because I got to go home at some point but I'm going to do some, I'm going to release this code and you, the viewer, will probably make your own magical Logo interpreter. Maybe you don't even want to make a Logo interpreter but just this idea of drawing in this way will inspire you to do something. So and what would be interesting is could I make a Logo interpreter that then I paste something in here that would actually generate this particular pattern, this example Logo output. So that's kind of like a bit of a challenge, certainly I would need a repeat to be able to do that. And this video will be approximately seven and a half hours long. Are you ready? Let's go. All right so the first thing that I want to do, huh, what do I want to do? I guess I need to parse this so okay, what do I have already? So I have already an HTML page that has a text area in it and that text area has this sort of Logo code written in there so what I can do, and I'm using the p5.js library, and what I can do is I can say I'm going to make a something called editor, I'm going to say editor = select code and then I'm going to say console.log editor.value and call the value function, was that what it's going to be? Let's see, whoops, refresh, there we go. Okay, so that's how I get the code. So I could say a let code = editor.value. Then what do I need to do? I need to parse this and looks to me like I can quite easily parse this with space. So I can really nicely I can do say something like let tokens, tokens is a sort of word that's often used in computational things to describe a single unit, a token of text, a word token, a sentence token, a character token, 'cause what I want to do is say split and at the most simplest level, I just want to split that text up by, by spaces and I can do all sorts of fancy stuff in here, like use a regular expression and split it in fancier ways and I'm going to need error handling, I'm not going to worry about any of that. I am just going to go ahead and say look at this. All right, look at this, aah, lovely, lovely. Look, there's this weird extra character return thing but I'm not going to worry about that. We can see now I have something, it splits up everything into an element of an array and actually I'm getting a nice suggestion from the chat that if I call console.table, I might be able to see it in a nice other way. Oh, that's really nice, look at that, console.table. (bell dings) It's like my favorite things ever. Okay so there we go, so we can see there's the array now. All right so what do I want to do? Ooh, I have a crazy idea. Let's build a dictionary. What I mean by a dictionary, let's make a JavaScript object where each one of these, each one of these commands is a function, each one of these keys, the command is mapped to a function. What am I talking about? Let me show you with code. So let's actually make a, another JavaScript file called turtle.js and normally I would make a turtle graphics, a turtle object which would really make sense, I might want to, actually let's do that. Let's make a turtle object 'cause the turtle is going to need, the turtle is the thing that's moving and drawing. So the turtle is going to have an x value, maybe it'll be initialized somewhere. The turtle will have a y value and that's good right now. And the turtle might have functions like forward, backward, backward. 'Cause this idea that I had was to then also have an object like commands = and then forward would be a key, mapped to a particular function and in that function, we would translate by some amount, by some length or something. Maybe I'm always going to move forward along the x axis, I'll have to be rooked, right. I could do that. So I was thinking about doing this but it kind of makes sense to have an object, hmm. Hmm, oh right, it definitely needs a direction, this is very important. I might call it angle. It needs a direction. I don't know if it makes sense to call it direction or angle, maybe the direction but it's initialized as an angle but I kind of, so I'm going to do this right now. And this, by the way, would be, what was the actual command? It's fd for forward so I'm going to put this away for a little bit and what I'm going to do is I'm going to say let turtle and I'm going to make a turtle. That's what I'm doing with my life, making turtles. New turtle and it's going to start in the middle of the window with an angle of zero. So this is going to be the initial turtle and then let's think, so let's forget about the fact that I have to follow the Logo commands and let's just for a second actually program the things I would do. So if I'm going to go forward by some amount, I'm going to say translate by that amount. Everything's going to be along the x axis. If I'm going to go backward, watch this, I could say forward by negative amount. This.forward, ooh, whoa, Visual Studio Code just corrected that for me. Let me try that again. Forward. Ha! That's scary. It's like how Gmail writes your email for you now. This.forward negative amount, right, so backward is moving forward by a negative amount. What were some of the other commands? Where were they? Right. So right would be, I'm going to say right, oh by the way, so I actually, when I read the command, I don't need to have forward and backward 'cause I'm just going to use my forward command so anyway we'll see, but right would be by some angle, I would say rotate, no don't autocorrect for me by that some angle. So that's what I'm going to go. So I'm probably going to use the fact that p5 has this whole transformation matrix thing and I have some video tutorials about that. Push, pop, translate, rotate so I can actually control the turtle that way. I could do all that math with trigonometry but I'm going to stick with that. And everyone's tellin' me that this.thing, this dot, this dot. ♪ This dot ♪ Has been around for quite a while. In Visual Studio Code. Okay. Never forget that this dot, now I won't be able to forget, but I want to forget it. What if I did this? Ah, wait, can I never, am I never going to forget again? What if I did something weird like this? It doesn't change it. It did it with functions, it didn't know to change my instance variable. Okay. All right so let's stick with this for a second and I am going to... (knocking on desk) Also, I need to know whether if, so ah, the turtle's going to need a pen state. So let's make a variable called pen that's true when the pen is drawing and false when the pen is not drawing. So I would say if and then, ooh, I don't need the xy. So do I need, I need the starting point. So the starting point would actually just be translate to that xy. And interestingly enough, I don't necessarily need to keep track of these things, let's think about that. I might. And then rotate by that angle. So when I create it, I'm actually just translating and rotating then forward if this.pen, I want to say line by some amount from 0,0 to the amount comma zero. I want to draw a line, I'm considering the x axis to be the kind of universale axis, I'm going to rotate from there, it might make sense for it to be the y axis to be honest 'cause you might think of it starting going up but whatever, I can always change that. I'm going to draw that line and actually so I want to draw the line first and then translate to the end of the line, that's what I want to do. And rotate is just rotate, okay. So if I have forward and right, I don't think that I need backward. What I'm going to do now in here is I'm going to say for every token in tokens, let, oh no I have that already, let's do this in a ridiculous way for a second. If token = forward, then amount =, oh no, I should use an index here. Because I'm going to want to look at the next one. i is less than tokens.length, i++, you know what, I'm going to be even crazier and I'm going to say index = 0, while index is less than tokens.length, I'm going to manually kind of iterate over this thing. And I'm going to say let token = tokens index. Then I'm going to say if token = forward and I want to think of a different way or organizing this code for sure, switch statement, I know you're all thinking. If token = forward then amount should be tokens index + 1 and then I can say turtle forward amount. Right? So what's in the actual instructions? Forward, right, forward, right, oh this is good. Only forward and right, that's perfect. Else if token = right then let angle = also the next one and then turtle, right, did I say, is it right? I mean maybe I should make this turn, whatever. Right by the angle. Oh and I should say angle mode degrees because the angle is being given in degrees not in radians. If that's not a familiar concept to you, I will refer you to some other video that I have about radians and angles, okay. So now, okay so now (clicking tongue). Yeah so people in the chat are telling me I can say index++ so why can't I say that? Let me show you why. So let's say I have a variable like i = 0. Well we know that i++ is the same as saying i = i + 1. So i++ but it also returns that value so it resets the value and returns it. It actually allows me to move forward. So I was going to lazily just say at the end i += 2 but it would make sense for me to actually say index, index, not i, index++ in here which is like go to the next one and use the value of the next one all at the same time and then afterwards, I could go one more because I need to go to the next one. Okay 'cause not everything will be in a pair we'll see. All right, so let's look at that. And I'm going to hit refresh. And I have an error somewhere, oh too, too many curly brackets. I'm going to put this here and here we go. Oops, no, refresh, ah, tokens is not defined. Code.split, why is tokens not defined? Where is tokens not defined? Sketch.js line six. Oh 'cause I was console logging it. I don't need to console log anymore but let's leave that in there. Turtle is not defined, oh okay, so of course, I need to also here reference and add my other JavaScript script which has turtle.js. Okay, ready? I don't see anything. So one thing I have to think about here is hmm, let's set up a stroke. I got to really deal, someone's going to help me figure out how to turn off this autocomplete that I don't want in Visual Studio Code. I think someone already did tell me this and I forgot to look at it, I think it was Nathan, thank you Nathan. Oh and there's ++index and index++ which someone from the chat is making, maybe I'll come back and talk about that in a second, all right, stroke 255. Let's just add stroke weight one, actually we don't need to add that, that's fine. Actually, let's make it a little thicker just so it's easier to see. Stroke weight two. Oh yeah let's see. Hmm so why am I not seeing anything? So let's console log some stuff, a little debugging here. Console .log token and console.log forward, let's see if that happens. Okay, forward, forward, ooh, yeah, forward, forward, right, forward, forward, so it is getting forward. Let's look at, oh, you know what, this is a string. Turtle.forward amount is going to have trouble understanding that. I wonder if I should have this. I should probably convert. I could do something like this, convert it to a number or parseInt() might be good, let's do parseInt(), that might be a little more universal. So let's add that. I was thinking that might be the problem. Let's console log amount. Ooh, not a number. Hold on everybody, something is terribly wrong. Oh (claps) so it's actually the, woo, thank you, breaking news from the chat. (upbeat music) I actually have to use the ++index there. This is why I didn't want to use that. So the chat is going crazy over this mistake. Listen to the chat please. I'm sitting in a chair, it's hard for me to see the chat. Okay, I don't use these things, I like to be long winded in how I code. So let's go back to here, ah, so sad, let's look here at, right, i = 0, console log i++, that gives me zero, right, because even though i is now 1, i++ returns the original value of i, there we go. So that's actually not giving me the correct thing but ++i actually returns, now I'm getting two 'cause it already went on to the next one. So this increases the value of i and gives you back that new value. I see this in shorthand all the time, it's kind of like a ternary thing that I'm finally getting myself to use. So this actually needs to be this. ++index. Maybe, i++, so Gabriel in the chat is saying i++ increments and returns the previous number ++i increments and returns the next number, that's a nice, succinct way of saying it. (bell dings) All right. So here we go. So forward 60, 60, so now things are lookin' up. The turtle is printing out the right amount. So let's console log the amount here and let's give this a try, all right, so (clicking tongue). I don't need to console log the token, there's too many console logs here. 63 times. How come I don't see a line? I'll look at the chat. I don't want to look at the chat, that's the thing, I like to figure these things out myself. How come I don't see a line? So turtle forward amount. When I created the turtle, I made it in the middle. Oh you know what's a little bit weird here? So this is not so good. I'm a little suspicious that translate and stuff is not going to work the way I want in setup. I need to move on to the draw loop. For example, if I say translate 100, 100 and then ellipse 0, 0, 200, 200. Let's just run this for a second. Why am I not drawing anything? Oh draw background zero, aah. (buzzer buzzes) This whole thing. I'm calling background, I can see the chat actually saying that now (chuckles). I've been calling background this whole time, what a terrible problem. Okay let's go back and see if my logic now is sound. My brain operates more slowly when sitting apparently. Okay let's try this. All right, weird. I don't know what just happened there. Oh background zero. Let's draw the background zero here. There we go, look at that. (bell dings) Turtle graphics. Now, I kind of feel like forward 60 should probably start pointing up. Does anybody know how Logo actually works? Turning right, it definitely the right direction. Left would be the other way. I don't know that this matters so much. I'll leave it like this, okay. So all right, we're kind of good. I've got to deal with other commands. Anyone have an idea? I would love to take an idea about how to, I mean I could use a switch statement but I kind of like the idea of a lookup table. What if what I did is I took this idea, I want to try this idea of my commands. I have an idea, oh, this'll work. If, oh I have a totally have a crazy idea. So forward is a function of turtle .forward. I have to figure out how to do the argument. Then, backward is the same thing but maybe it calls it with, so can I give it, how do I give this an argument? 'Cause I want it to selfexecute. I have to think about this, somebody think about this. I combined it with something? Is this a sound strategy? Right is then a function that calls turtle.right. In other words, what I want to do is say, oh, but I thought, I want to say... I want to say basically commands token execute, oh yeah, I can give it an argument, of course. Tokens ++index, look at this, so this should do exactly what I was doing, right? The token is forward, execute the function with that command with the argument, yeah. So I don't need an if statement here. All I need is this. Right because now it's going to and so the argument goes here. The argument for backward goes here and I just do negative amount, then right is the angle, turn right the angle and then this is, I don't know if this is a sound solution but I'm intrigued by it. Left is turn right but by negative the angle. Okay. So this should work, this is a little bit nuts looking but let me unpack this for you. If I had a function that's forward with an amount, this is actually what this is doing because I have, this resolves itself to this number that's the argument after the command and this resolves itself to a function that's defined up here that I'm calling. So I think this is going to work. Let's try this. For some reason I feel like having this in a separate, I feel like having this in here. Let me zoom back out. This just makes more sense to me to have this with the turtle class 'cause they kind of go together. Okay. No, commands token is not a function. Why not? Console log token, console log commands. Let me just see what's going on here. So. Oh no I just got to the end. So we got to the end because there was an invalid token there. So first thing I need to do is make sure if commands token even exists. So I want to make sure it exists and if not, I want to skip it. So this is a little bit of kind of pathetic error handling but it should work and now I can say... Ooh, look at that, we've got turtle graphics, right? I can add another left, left 60, forward 50. Oh I don't have any way, oh I'm not, so I need to realtime, let's realtime interpret this. What do I mean by that? So what I mean by that is I've already, I didn't really explain these pieces, I just realized at the beginning. So I made a text area, I think I did actually, with an ID and then I used the p5 DOM library, okay I did explain this, all right, so but what I can do is I can attach an event and the event that I want attached is editor input and then, and then basically I want to say go turtle. So anytime I make any change, actually, maybe I want to, let's start with changed, let's just start with changed. So changed is an event that only executes when you've finished a task. You hit enter or you tab out of a thing. And now I can take all of this and this is my function go turtle and again, I'm kind of, not really using more modern ES6 JavaScript but that's fine. So now I have go turtle, it should execute whenever I change anything in the editor. So let's delete all this and tab out of it. Ah, code.split is not a function. Why not? Oh I've got to get the new stuff from the editor. And you know, I could select it, and I know it's a little silly to have this global variable but whatever, it's fine, okay, refresh, if I do this, tab out, I got this. Now I can say right 100 but I want it to live interpret, why not, right? I should be able to write enough error handling that it can interpret the code live. So I'm going to change this to input and you'll see when I, oh, if I hit space, right, ooh, but I also (chuckles) need to redraw the background. Ooh, this is fun, okay, so now I can start deleting stuff. Weird, ooh and guess what? Another thing I need to do. I need to say push and (sighs) push and pop because I don't want it to pickup from where it last left off. I always want it to start from the beginning. Okay I can see all the comments of people helping me fix my Visual Studio Code, okay. Now, this should, so first of all, I want it to run once at the beginning so I also need to call go turtle at least once. All right and now, if I start deleting, look at that, it's actually realtime interpreting so I could say forward 500, 10, left, left 90, forward 100, look at that, oh I love this, it's like realtime interpreting, we're kind of (bell dings) dare I say somewhat done with this coding challenge? But we can't stop here, right? I mean, everybody tells me don't make a video on YouTube that's longer than 20 minutes. This one is going to be as long as it is. Because I want to be able to do this and I think there's a lot more to implement. I should implement pen up and pen down, that would be a pretty easy one to do, let's do that. Let's implement that, just to show you, but I'm going to ask you, I'm going to ask you, maybe we'll make this a community project. I will release the code as is, the finished version of this coding challenge on GitHub, the coding train website, but I will also make a new repository, look in the videos link for a version that people can contribute to. So if I do what is pen up and pen down? P U (chuckles) I'm so immature. P U function would be turtle dot pen = true, right? And then P D would be a function that is turtle dot pen = false. So I should be able to use those now, right? So for example, if I just refresh my code here, if I say right here pen up, it should, okay, so something didn't work. Let's think about this. Turtle pen = true. Oh it still moves but it doesn't draw the line. That's right. So let's look at this again. It shouldn't move on, it should just move on by one index. I guess we're going to have to console log here. Let's debug this. Forward 60, let's do forward 40, right 90, pen up, forward 100, right 90, forward 50, huh. So, what happened? (clicking tongue) When it's up, it won't write which I don't want it to but I want it to still move forward, it still should translate, let's console log, what am I console logging? This amount... How'd it get in there with not a number? That's weird. I don't want it to ever do that so let's look at, let's make sure, let's count back and console log, there's going to be a little debugging here going on. The chat will probably tell me what's wrong but I'm going to say console and let me just actually here now, let me just change this to something that I want to test. Right 90, forward 50, right 90, pen up, forward 50, right 90, oh I need to do pen down, that's why, maybe it's working. I never did pen down. (chuckles) Let's see, pen down, forward 50. Maybe it actually worked. Okay, forward 50, right 90, forward 50, right 90, pen up, forward 50, right 90, pen, no I should see a line here, I should see a last line there. It expects a number, it shouldn't, ooh, oh, because it's actually, oh, interesting. It's doing this for every command so it only should do this if commands token, ah, so how do I, of course, so it needs to know now to do this. So I could, hmm. Yeah, don't increment the token index again. Yeah but I'm trying to do this in an elegant way without an if statement (chuckles). Somehow I want to return something to tell it not to go up but I already going up to get the angle so I mean I could. Certainly I could say if commands, right, I mean I could do something like if token, so what's a starts with P, index of P = 0, all right that's a quick way, oh, charAt(), this is more, this makes more, charAt(0) =, as long as token, all right, if token charAt(0) = P, someone's going to suggest a better way to do this. But let's just get this working right now. Then, a command token (vocalizing) just execute it without any arguments, else, execute it with this and go up by one. So this should do the trick, right, based on what the token is. Yeah I want to return the amount but I feel like, I have to think about this more, let's just get, let's just make this work, let's make this work. Sketch 32, okay so I'm out of, I'm incorrect in my land of brackets. If there is a actual command, oh no if it = P, by the way, this should be if it = P. If token charAt(0) = P, then just execute the command with no argument, otherwise execute commands with the next argument, what's wrong here? I guess I'm just missing another curly bracket somehow. There we, ooh. Forward, okay let's hold on, forward 50, right 90, uh, what happened here? Pop was called without matching, oh whoa, the pop has to be out here, (chuckles) okay. There we go, all right, forward 50, right 90, forward 50, right 90, pen up, didn't go forward 50. Pen up which should make the pen be false and then it should go then forward still, remove the nod, yeah I already got that part, the chat's behind me. And then, oh yes, a better way would be to have, Nathan in the chat said a better way would be to have additional methods and the commands object tell it how many arguments to take but hold on, I want to debug, why is this not working? I mixed up pen down and pen up, that's why. (bell dings) Thank you very much, is that really why? Pen up, oh yeah, (laughing) pen down. There we go. There, yay. (clapping) (whistle blowing) Look at the chat going crazy. I inverted pen up and pen down, all right, but this is exciting because I can change this to pen down, ooh, wait, it froze. Do I have some sort of bad infinite loop here? Hold on, I have a problem. Oh, I always need to go up by the next index. Bad infinite loop problem. This was a big problem. My index++, I need to always go to the next one so I'm going to have to, this page is frozen, I'm going to have to kill it somehow and there we go, okay, so now I should be able to change things around again, oh, no, it's still? Oh because it didn't, it was cached, because I didn't have the console open. Can I get it back? No, try again, you know what I'm just going to do is kill the server. Let's kill the server, I've got a little local server running with HTTP server, let's see if that manages to get me back here. And let me open up the console and this, I should be good now, okay. Yeah, all right I'm back. Pen down, right, we can make up whatever want. Forward 100, forward 10, right 10, forward 10, left, left 90, pen up, forward, ooh. What just happened? Something happened, something broke. Background, ooh. What's this? Background should be here. Hmm, let's try this again. Why did things break just there? (chuckles) What bugs do I have? Stroke zero on pen up, oh that's an interesting idea. I love that idea, that's a really good idea, maybe I won't do that right now because people might want to play with color in a different way but why did it break? Forward, okay, forward 10, right 90, forward 20, right 90, pen up. Why does that kill it? And then it doesn't come back. It'll rerun the input, I need to, aah (bell dings) CJ, coding guard with CJ shoutout to watch the coding guard with CJ, thank you CJ for this. I sort of forgot that the turtle's not, this is, right here, this is the sort of reinitializing everything, like background reinitializes everything, the pop here undoes what it does so in a way, the transformations aren't initialized again and then I get the code from the editor from scratch but I didn't reset the turtle so I should really have a function that says turtle reset. I mean there's a lot of different ways that I could do this but let's actually do that. So let's actually keep all these things, put this in a function called reset and say this.x, this.y, this.angle and watch this, watch the magic of Visual Studio Code to type me this dot in for me. ♪ This dot ♪ ♪ This dot this dot ♪ Okay, so now that should fix that problem. X is not defined 'cause I forgot. Oh wait, hmm. Where's that? X is not defined in turtle.js line 30. Huh? This dot DR and IR not this dot angle, there we go, thank you. (buzzer buzzing) Thank you to the chat. It's this variable, this.direction, dir, okay. That didn't seem to fix anything. Here? Now I'm just messing around, okay, well let's, let's be, let's actually do some debugging here. Console.log, this.x, this.y, this.dir, let's look at those things. 100, 100, 0. That's good, why did I see that twice just now? Oh because when I initialize the turtle, that's fine though. So I actually don't need to call this dot reset here, whoops, if I'm doing it, ah, there we go. (bell dinging) Good, now, it's not, oh it is doing the right thing. So now I should be able to just start deleting stuff. This is going to freak it out. So I'm not doing total error checking but now I can say forward 100, there we go. Forward 10, right 90, forward 50, left 90, pen up, forward 10, left 90, forward 100. Mm, all right, so what did I, I broke it. Is this invalid? Forward 10, hi over there, you're watching me, I'm still here with you, right 90, forward 50, left 90, left 90 would be go this way, pen up, forward 10, left 90, oh I didn't do pen down (laughing) pen down, there we go. It's working. (bell dinging) Okay, so this works. Now I could put in any kind of commands that I want and get the result of the turtle graphics drawing but I really, really want to see this pattern and I could do some kind of crazy thing to generate the text that does this pattern, that would be kind of a fun thing to do, a little challenge for you watching, to actually generate the text which would be very long to then render that but what would be better would be to actually implement this repeat command. And so what the repeat command does is it basically says repeat has an argument 3 and then it looks for the commands that are within these square brackets and does those commands three times. So I'm going to have to completely rethink the way that I split the text up. Just splitting it by spaces is no good, in fact I'm probably going to want to parse the text as I go. I could maybe do some kind of recursion or a regular expression. So this is my challenge to you. Implement the repeat command, I will come back in a future coding challenge and do it based on the way you did it but I'm not going to do that as part of this challenge. So right now, this is wrapping up. Look in this video's description to links to the code exactly the way that I left it as well as perhaps a community project where I will accept pull request to add, keeping it simple, add some features and other commands that are part of turtle graphics. Also, you know, a grammar, some type of thinking about a grammar might be a way. We're really in the weeds of how compilers and things work. In a way, we're interpreting in realtime somebody else's code and executing it. Wow, this is fun. It does need a train so instead of a turtle, it could have a train or you can make a train, a turtle or a train, I don't know anymore. I'm going to go, thank you for watching this coding challenge where I implemented part of the original Logo programming language and stay tuned for part two where I finish this off at least with the repeat command so we can generate some more interesting patterns and I look forward to your own versions of this. Please share them with on Twitter, on thecodingtrain.com website and in the comments here, okay? Thank you, goodbye. (whistle blowing) (upbeat music)