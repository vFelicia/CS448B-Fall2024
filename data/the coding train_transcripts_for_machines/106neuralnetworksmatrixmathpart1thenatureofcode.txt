hello here I am so I'm trying I'm moving along here through this journey of trying to program this neural network library again I might suggest skip ahead find some videos where I'm just using the library but I'm I'm doing this I'm exposing this process of a person struggling to make sense of the world but for this video I did actually make some notes um and I want to reference actually a there's a nice um medium post about kind of what linear algebra you need to know for deep learning that I will uh show you on my laptop in a second and and link to it in the video where I read that post this morning and helped me kind of gather my thoughts for this particular set of video so what I've done so far is I've established that we need this idea of linear algebra in order to perform some of the math in the neural network library that I'm building so what I want to do is take a break from the neural network stuff itself and look at the linear algebra stuff in a vacuum and yes finally actually hopefully write some code because I want to talk through the math and implement the math in code in a generic way and then apply that to the neural network we're going to get through this everybody okay so what are the core so I have I I have some props I found my old linear algebra textbooks from 20 some plus 25 some amount of years ago so I brought these as props I was reading them this morning but here's the thing this is not a course in linear algebra there's actually some great linear algebra videos on KH Academy um probably there are some other ones out there I will link to additional resources in the description of this video I want to do is cover the aspects of linear algebra that are necessary or relevant to the neural network stuff um and kind of leave out the rest so I'm going to give that an attempt and see how it goes and write code along with it um and you'll let me know how that goes okay so here's the thing there are two key Concepts in linear algebra there's the idea of a vector and there's the idea of a matrix now a vector is actually something that I've spent a lot of time in previous videos in this nature of code playlist talking about the idea of a twodimensional vector an entity with magnitude and direction in a twodimensional space we use this Vector for forces and velocity and all sorts of physics simulation all sorts of stuff but ultimately this Vector is just an X and A Y that twodimensional Vector from and of course could be a z if it were a threedimensional Vector for all the computer graphics and animation physic simulation stuff I've done in previous videos we could think though about we can we could consider a vector as just an N dimensional list of values and I could make the notation like this and I could say x0 X1 X2 X3 X4 X5 so this is a fivedimensional vector there you go so this is the idea of a vector now one thing I should note is that you will see a variety of different kinds of notation um you might see them am I still you might see things written like this XY you might see it written like this XY different textbooks different styles I'm going to use this square bracket notation for the algorithms and examples I'm going to demonstrate in this video and in future videos okay so that's the idea of a vector now if you also recall we can do math with vectors and there are a few different kinds of operations there's the idea of a scalar operation like let's say I have the vector 2 2 three and I multiply that by the number two I could take this scalar value the single value and multiply it by each component of the vector and I would now have 4 six there also are operations that are referred to as element wise this is the kind of operation that I did over and over again if I had a velocity vector and a position Vector so if I had a position Vector that was something like you know 2 three and then I had a velocity Vector that was you know 15 I could add element wise add these together so the first element add to the this the the first elements get added together so 2 +1 is 1 the second two elements get added together 3 + 5 is 8 so these these are element wise operations now in addition to that there is also something reference referred to as Vector multiplication and there's like the dot product and the cross product there's like the Hadar how do you say that hodaru anyway there's so I don't I'm kind of reminding you of some things and I I have a bunch of videos on the dot product the dot product I use in videos to look at the angle between two vectors there's a pathf finding example we really needed the dot product to figure out how to get a moving agent to follow a path and the way the dot product works is we take two vectors and get a single scalar value so you can see these scalar operations a vector by times a single number we get a vector these element wise operations a vector plus a vector we get a vector the DOT product and the reason why I'm going through this is I'm going to use this again once I get to Matrix Matrix is where the new stuff is the dot product if I have two three uh I just use these same values 15 so the way that the dotproduct works is we actually take the if these were X and Y values we take the x's and multiply them together and the Y's and multiply them together and add them together it's kind of like that waited something that I was doing earlier in the sort of neural network in the perceptron stuff so I would take 2 * 1 which is 2 plus 3 * 5 which is 15 and I would get uh 13 so that is the dot product so I could take the next step and I could start to write code for all these operations for vectors but I'm not going to bother with that because ultimately what I need for the neural network library is the Matrix stuff but I starting with the vector stuff because it's all going to translate uh it's it's all going to it's going to be analogous but I should point out that this is all in if you're in p5js for example there's P5 vector. JS the source for the P5 is all on GitHub and you can actually find all of these operations here's the dotproduct function you know if I look for the uh add function here's you know adding two vectors together so you can start to actually go and unpack for these 2D and 3D vectors um how that math works in the source code but now what I want to do is redo this but not for vectors but for matricies so the idea here is what I want to now do is I want to understand well what if I'm storing numbers in a matrix and why would I do that well there are so many reasons pixels live in a matrix data in a spreadsheet is in a matrix the weights of Connections in a neural networks can be in a neural network can be stored in a matrix so there are so many scenarios in programming where the numbers that we're working with are stored in a matrix and we could think of that like a twodimensional array um that we want to perform these kind of mathematical operations very very often so what is a matrix a matrix instead of a linear list of values is a twod diim I grid of values and I could think of it like this A B C D E F and this would be a 2 by3 Matrix typically we refer to matrix by the number of rows and the number of columns two rows three columns so in that sense we can redo all of these mathematical operations so let's look at these kinds of mathematical operations now with a matrix so I could do a scalar and this should be an a I don't know scalar operation so let's say I have the Matrix 2 uh 3 4 uh 9 and if I were to multiply that by the number two an scalar operation would just double all of these values so this would give me then the Matrix 4 6 88 okay so let's actually let's pause for a second I'm not really going to pause and let's before we get to these other operations let's start to write some code okay so what I want to do is have a library that allows me to create a matrix of values and then perform a scalar operation let's go write the code for that now I should point out that what I'm doing the nature of what I'm doing is kind of ridiculous because there is a math. JS this is an extensive math library that includes an entire Matrix implementation there is also GPU dos which is a GPU accelerated JavaScript library for doing Matrix operations and you know I'll talk about GPU stuff in a little while later but um there's also I think uh matrix. JS there's P5 as a matrix implementation but um I am going to write my own just to kind of understand how it works and then later as part of this Library I probably want to swap it out to have something more efficient that's going to actually you know opt do these Matrix operations optimally but so let's create a new file I'm going to call it matrix. JS and I'm going to write a Constructor function and I'm going to call that uh Matrix and the Constructor should get a n a certain amount of rows and columns and I should say this do rows equals rows it's been so long since I typed this dot feels good this do calls equals columns okay so the idea being that I want to be able to say VAR m is a new Matrix 3x two something like that right that's the idea here I want to be able to just generate a matrix okay so for example I can do this just here in the console now oh let's actually go to index.html and add in the neural network library and the Matrix library now and I should be able to say varm equals a new Matrix 3 comma 2 and I can see there we go I have a matrix object with three rows and two columns okay now we got to come up with a way of at least initializing the value and this is this is 2x3 and I said 3x two but whatever so let's initialize all the values as zero so how do I do that well ultimately I need to have a variable and maybe I'll just actually call it Matrix I could call it values I don't know what to call it I'm going to call it Matrix equals an array now there are all sorts of sophisticated JavaScript ways you know I'm only ever going to put floating Point numbers in these I can have fixed size to allocate the memory in some optimal way but I'm just going to live in the breeze P this in the most kind an easiest loosest friendliest way and then we can always come back and optimize to use some more efficient and optimal data structures later so what I first want to do again the traditional way to think about a matrix is Rose by columns so I'm going to start with a loop through the number of rows and I'm going to say every single um row is also an array and then I am going to Loop through all of the columns and I have a j here an I here by accident and say then every single row column location is a value and let's just initialize them all at zero whoops so this is me now making a matrix of values everything with zero let's go back to the browser and let's refresh the page and create that Matrix again and I should now see Matrix has three rows and two columns and then it has an array each one of these rows has two values 0 0 0 0 0 0 so this is now we can see the data is actually stored in there so I've got the beginnings of a matrix Library nothing about this is optimal or efficient but I have a library an object that stores the number of rows and the number of columns and creates a two dimensional array fill the zeros okay so now what I'm going to do so we kind of now we have the ability of a library to create this Matrix the next thing that I want to do is add a function that performs a scalar operation so for example let's add a function that's called multiply which is the wording of this is a little bit tricky because ultimately Vector matrix multiplication can mean a lot of different things but just for right now I'm going to write a function matrix. prototype that's part of the Matrix object all Matrix objects I'm going to call it I guess I could call it scale let's just call it scale for right now um equals a function that's going to receive a single value n and what do I want to do I want to I'm going to do this a lot Loop through every single row Loop through every single column and say this do Matrix i j times equals that value let's call I'm going to call this multiply and then I'm going to add quickly add another one for another scalar operation called add and I'm going to uh say plus equals so again this is this idea I've written two functions these are scalar functions I just want to take a single value and multiply every value in the matrix by that value or I want to take a single value and add it to every single value in The Matrix that's what these two functions can do so let's now come back here once again oh I've got a syntax error I guess I have an extra Clos curly bracket so I'm going to create that 3x2 Matrix again I'm going to say add five now let's look at it and I should see the values in it should be all fives right now again we're not really seeing the Nuance of this because there's not different values but it started as zeros and then I added fives to it and now I could say m. multiply 3 oops oh I called it multiply and if I look at M again now and I start to look at those values we can see all the values are 5 so what do I have so far I have a simple Matrix implementation that allows me to initialize a grid of numbers by rows and columns and perform scalar operations I can multiply or I can um add so I'm going to pause here and in the next video I'm going to do element wise operations and then we're going to start to look at other Vector multiplication which is really no longer the dot product but we I'll talk about sorry matrix multiplication so I'm going to kind of break these out into separate videos and I'm going to show you some interesting things about building a JavaScript library where I can actually determine what's coming in I can reuse the multiply uh and the add function um to determine am I adding a scalar or am I adding a whole other Matrix so I'm going to get to that in the next video okay thanks