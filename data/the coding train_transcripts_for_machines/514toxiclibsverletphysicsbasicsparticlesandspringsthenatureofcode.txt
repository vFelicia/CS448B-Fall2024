hi okay we are ready to make our very first toxic Libs particle and spring example um this is actually the example it's the one that we are going to make or it's already made so we're just going to look at it and talk through it um but you can see this looks very much like many examples we've had before in the past we have this swinging object connected to another object how is that working I can also click the mouse here and I can pull this object around I want to let go it's a little bit elastic and bounces back and forth this is a very simple system it's got two particles in it and one spring connecting it and the world has gravity so if we can understand how to make this everything else we make in toxic Libs is just an extension of this it's more particles it's more spring configurations and whatever imaginative creative exciting way that you can kind of put all this stuff together okay so how do we make something like this okay so there's a few things that we need to know about number one is let's just think for a moment it's a little weird to me actually that we did boxd before toxic Clips but that's what happened although I suppose these videos should be independent of themselves and not require you to have watched box 2D so uh I'm talking to myself I realize but all of this is just me talking to myself really um so uh let's think about this for a second what are the elements of a toxic Libs verlet physics world so if you didn't watch the box videos it's okay but I'm going to make this make sense a little bit in box 2D there's something called a world then there's a body and then there are bodies have shapes and fixtures and then there's this thing called a joint so toxic clipse a joint so a body is the thing moving around the world the world is the world that the bodies move around and a joint is the thing that connects two bodies toxic Libs the way that we think about toxic Libs is going to operate in exactly the same way the world is going to be called verlet physics so we're going to make a verlet physics object it's a verlet physics world and in our case in our examples we're actually going to make a veret physics 2D object so you can do it in 3D or 2D but for my examples for Simplicity we're sticking within 2D although it would be nice to have a 3D one and a 3D video and I add that to the list of everything we will always and forever wish we had and make eventually okay a body is a particle so a particle is the thing that's going to move around the verlet physics World we're going to make a world we're going to put particles in it and watch those particles move about particles by the way can have those behaviors they can be attractive or repulsive which is something very exciting that we're going to see a few examples from now a joint in toxic Libs we're going to think of as a spring so a spring is a thing that connects two particles one of the great things about toxic Libs is it has a different kinds of Springs it has a plain old verlet spring it has a verlet minimum constrained spring which I'm obviously giving it the ex the not exactly the correct name right now but you'll see there's various constraints we can put on the spring to make sure that it can't like stretch Beyond a certain distance or Shrink Beyond a certain distance which can allow us to really control the stability of a system if we need to so these are the things we need to be feel comfortable with we're going to make a verlet physics object we're going to make a particle object we're going to make two particle objects you know if we look back at this example we're going to make a world verlet physics we're going to make two particle objects and one spring object there's one missing piece though to this list that I haven't mentioned right remember we had P Vector good old days back when we had P Vector we'd say p Vector location equals a new P vector and we were so happy and then we had box 2D and we had VC 2 VC 2 right we were a little bit uncomfortable but we kind of got used to it and we we felt glad now we have VC 2D and VEC 3D so yet again another set of vector objects Vector classes to work with in in toxic Libs but we should be rejoicing again because one of the nice things about the vector classes in toxic Libs is that they are more advanced than the vector classes in processing there are many more functions they're a bit more sophisticated to use and thus perhaps not as not as easy to use but there's a lot of power there especially when the vectors are separated out you know whether you're using a 2d vector or a 3D Vector perhaps it's not as simple to like kind of know why I think I'm like trying to justify why P vector in my mind is the way made the way that it is but um I think these are wonderful um Vector classes that we're going to use with toxic lives I I mean I love Vector classes we can't have can't have enough of them somebody make one called G Vector s Vector I don't know whatever okay so this is the picture this is what we've got now we have another thing to discuss this is this is the really exciting part we haven't even gotten to five minutes yet I feel like we're totally on Pace here now that we know the elements of the world how do we actually make these elements in the world okay so back again if you remember back to the the olden days we wrote something called class mover and in the Mover itself we had three p vectors location velocity acceleration we wrote that update method ourselves which had Oiler integration blah blah blah I'm sort of half writing here right this is what we did all on our own this was our mover class we were very proud of it we're still going to use it you're going to use it we're going to love it and take care of it um this is what we made then we got to this place where we said ha oh the camera went off hello again we got to this place I hope it recorded through that we got to this place where we we arrived at box and we said you know what boxd is going to handle the physics for us we don't have to keep track of location velocity acceleration have an update method what we're just going to do is we're going to make a uh let's just still call it a mover I guess I guess I like calling these particles so let's call it a particle I should have called the first one a particle and it kind of we made this particle and we put a body in it so a par object was essentially a wrapper for a box 2D object and we could say like we could always just add forces to it or we could initialize it and then ask where it is so we could draw it we had this reference to a box body that was in the Box world that we could just sort of deal with all the time now as if these weren't two great options on their own the greatest option of them all is what we're going to do with toxic lives if you go back and review those particle System videos one of the things we spent some time learning about was inheritance oh we have this base particle class that has all the sort of physic of particles and we can just extend it to make star and rainbow and sparkly particles now we're going to do the same thing with toxic Libs only we're not going to write that particle class not at all we are going to just inherit toxic Libs particle class we're going to say class particle ah extends verlet particle so the name of the actual object into toxic lies and in our case it's going to be verlet particle 2D is verlet particle so we're going to say we in we don't need to write the physics all we need to do is write our display method and our display method might draw a circle at the XY where that particle is this is a really fantastic way of working we're getting all of the methods our particle is a ver particle it has it has the ability to have attraction and repulsion forces has ability to be part of a spring it has ability it it it knows how to update itself for in the physics world when the physics world gets updated everything is controlled by toxic Libs but we can just write our own we can interject our own design here or we could add variables we could add a color variable to it if we want to keep track of its color or other variables to it if we wanted to and we can um we can apply forces to we can do all sorts of things to it so these are really the three methods we've now covered in this course or set of videos or book or whatever you want to call it it's writing everything from scratch on our own it's using a physics engine where we just bring in a variable to reference an entity in that physics engine or what I like at best here is this idea of extending of an object that lives in a physics world so the object what we inherit all the physics and we put our own design on it now there's something kind of funny going on here that I would like to point out which I think is even more exciting than just this what we've done here just alone so one of the things that's super interesting about this is okay so where is the objects like here we had this P Vector location so shouldn't maybe particle verlet particle have a VC 2D right if V 2D is the object in toxic Libs it should have a VC 2D position not a uh um right and we should be saying ellipse at position dox position doy but instead we have X and Y so verlet particle we must have inherited just an X and A Y how do we do that it turns out that verlet particle itself extends vect 2D right a vector is a can be a location on the screen a particle can be a location on the screen with all this added functionality and then our particle is our own design on top of that so not only does our particle extend verlet particle 2D it has all of the vector functions built into it right there so this is a really tremendous way of working and I think a very smart way of Designing a physics engine and in many sense we might have wanted to do that with our mover class mover extends P Vector but you know I think that would have been a very difficult way to just start right from the beginning like it was much simpler to kind of start to learn by putting P vectors in our code rather than have our mover be a p Vector also suddenly additionally with velocity and acceleration but that is something to that is very important to realize when working with toxic Libs your particle not only inherits from verlet particle 2D it also inherits from ve v v 2D okay so now that we've kind of gotten that out of the way let's take a look at where this appears in the actual code example and I have a feeling I might have to fix this camera yes okay uh seeing like I don't know um you say it's your birthday I don't know what U that that's the song I thought of oh my God okay so let's take a look at this example first let's point out the beauty of this look at the beauty of this experience it right this is our particle class it extends verlet particle Duty it has no Cod and it has no location velocity acceleration no update no physics no this no that all it has is our display function so if you are the kind of person who wants your physics taken care of for you but you want to really control the intricacies of how you're drawing stuff on the screen this is a fantastic way to work um you can really just work on adding a display method to the particle which extends verlet particle 2D so now if we look into the main program we can see a few things here one is here's our world furlet physics 2D physics that's the world we need to set up we have two particle objects those are our particle objects but they extend verlet particle 2D and a couple things I should point out this is a little bit of an odd line of code which will make sense a bit more to us later when we look at behaviors but the world has a gravity behavior in it meaning um you know gravity doesn't just exist out of nowhere but one of the things we can add to our verlet physics world is a a kind of global force that points in a given Direction in this case we have that Force Point down so that looks like you know kind of 2D gravity on the screen um we can also set the boundaries of a world which makes objects not able to go beyond those boundaries you can pick or choose whether you want that and then here we are making two particles one at one location and one at the other and if uh if I take out the Gravity by the way and run it you will see look I made two particles one here and one there one at width divided by two comma 20 one at width divided 2 plus 160 comma 20 so there we go now a spring Oh I thought we were like we kind of covered everything here but let's let's take a moment to talk about what a spring is so a spring in toxic Libs is a very simple thing to make and the way that we make a spring is by saying new verlet spring there and in this case it's going to be 2D and we have to put four things here we have to put four things here so what is a spring one thing we need is particle number one another thing we need is particle number two so a spring has to connect two particle objects so we pass in those references as the first two as the first two arguments to creating a spring so we make a spring we say spring between particle one and a spring between particle two the third argument is the rest length so what is the rest length what's the length of that spring that it would come to rest at so if we pull it apart it Springs back if we push it in it Springs back so that of course is a float just a number in pixels in pixels we don't have to do any crazy conversion here and that's the third argument and the fourth argument is the strength of the spring and you can think of that as a number between zero and one I really should have thought of this before I began this video but I'm pretty sure if you make that number one it's going to be completely rigid so you you be you basically can't uh it doesn't have any elasticity to it and if you make it zero it's going to be kind of like almost like gum that you could imagine that you're like pulling and it just kind of keeps pulling forever and ever and doesn't really have the strength to power to to kind of spring back so you know you can kind of only do so much to describe these variables the best way as we've seen is just try a lot of different values and see how your system behaves but generally the strength um is a number between zero and one and someday when I realize that's not correct I will fix this video okay so these are the arguments that we need to create the spring and now if we go back and look at this we can see that's exactly what's Happening Here we make a new verlet spring 2D we have two particles 160 and 0.01 so we have kind of not such a strong spring so let's let's actually just try messing with that value a little bit we can see um here I can kind of pull it and it's kind of springy but if I make this value one and I grab grab it like I can't right now it's not even letting me pull it so one makes it a completely perfect rigid body and uh if I make it 0.9 I have to catch it it's very I I can't really pull it either so you can see if I made it uh if I made it zero uh yeah it just completely Falls it has no springiness to pull it back so you can see there's a rain there I was right I was right so um so that's how the that's how the strength of the spring works in uh toxic lips um one thing that should there's two other things I should point out about this particular example number one is whenever you make these things you need to make sure you add them to the physics world so you can make particle objects you can make spring objects if you don't tell toxic Libs they're part of the physics World they won't respond to the physics so you can see here we're adding each particle to the physics world and we're adding each spring to the physics world as we create them another thing that's important to realize is that there's a lock function so you can lock a particle in place so that it can never ever move and that's what's happening here with particle number one particle number one is locked if I were to comment out this line of code and run it again they just fall because they it's not locked in place and they're both responding gravity I can still pick this one up and move it around and you can see um but but you can see here that they're not neither are locked you can lock and unlock things on the Fly that is a very important thing to realize it's not in this example we're just setting it up as either locked or not locked and the last thing I think that's important to mention about this particular example is that you know you've got to make sure you have this update method in draw so this is the equivalent of Box's step function we're only going to update the physics of all the particles and all the Springs if we call update and traditionally we're going to call update once through draw there might be some strange scenarios where you do it in a different way but this is kind of the typical way of doing it okay so this is kind of all the bits and pieces of toxic Libs what I would say to you actually if you're looking for an exercise is try to just come up with a scenario where you put I don't know put all the particles around in a circle and connect them with springs or put them in a line and connect them with springs or put them on a grid and connect them with springs or make 100 random particles with 100 random spring connections come up with some arbitrary set of rules that you've designed for yourself to initialize a physics world and then see what happens with that physics world in the next two videos we're going to look at a few examples of that we're going to look at a string a a string of particles connected with springs a grid this idea of a force directed graph we kind of talk through some of these examples as well as look at how we can add attraction repulsion behaviors to these examples as well okay um thank you for listening and I am going to say goodbye